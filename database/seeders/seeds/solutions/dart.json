{"5b3077019212cbf803000057":[{"id":73340,"user_id":null,"body":"class Keyboard {\n  List<String> keyboard = [\n    'abcde123fghij456klmno789pqrst.@0uvwxyz_\/\u25b2 ',\n    'ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_\/\u25b2 ',\n    '^~?!\\'\"()-:;+&%*=<>\u20ac\u00a3\\$\u00a5\u00a4\\\\[]{},.@\u00a7#\u00bf\u00a1\u25a0\u25a0\u25a0_\/\u25b2 '\n  ];\n  int mode = 0;\n  int wigth;\n  int get heigth => (keyboard[mode].length \/ wigth).ceil();\n\n  Keyboard({this.wigth = 8});\n\n  List<int> prevCoordinate = [0, 0];\n\n  bool isNotCorrectMode(String symbol) => !keyboard[mode].contains(symbol);\n\n  List<int> _getButtonCoordinate(String symbol) {\n    return [\n      keyboard[mode].indexOf(symbol) % wigth,\n      keyboard[mode].indexOf(symbol) ~\/ wigth\n    ];\n  }\n\n  int _stepsToButton(String symbol, {bool cursorWraps = true}) {\n    int result = 0;\n    int steps = 0;\n\n    List<int> symbolCoordinate = _getButtonCoordinate(symbol);\n\n    for (int axis in [0, 1]) {\n      int length = (axis == 0) ? wigth : heigth;\n      steps = prevCoordinate[axis] - symbolCoordinate[axis];\n      steps = (steps.isNegative) ? steps * -1 : steps;\n      if (cursorWraps) {\n        int crossSteps = (prevCoordinate[axis] < symbolCoordinate[axis])\n            ? (prevCoordinate[axis] + length) - symbolCoordinate[axis]\n            : prevCoordinate[axis] - (symbolCoordinate[axis] + length);\n        crossSteps = (crossSteps.isNegative) ? crossSteps * -1 : crossSteps;\n        steps = (crossSteps < steps) ? crossSteps : steps;\n      }\n      result += steps;\n    }\n\n    prevCoordinate = symbolCoordinate;\n    return result;\n  }\n\n  int _changeMode() {\n    int steps = pressButton('\u25b2');\n    mode = (mode == keyboard.length - 1) ? 0 : ++mode;\n    return steps;\n  }\n\n  int pressButton(String symbol) {\n    int steps = 0;\n\n    while (isNotCorrectMode(symbol)) {\n      steps += _changeMode();\n    }\n    steps += _stepsToButton(symbol);\n    steps++;\n    return steps;\n  }\n}\n\nint tv_remote(String word) {\n  Keyboard keyboard = Keyboard();\n  int steps = 0;\n  for (String currentSymbol in word.split('')) {\n    steps += keyboard.pressButton(currentSymbol);\n  }\n  return steps;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73341,"user_id":null,"body":"import 'dart:math';\n\nint tv_remote(String word) {\n  final modes = [\n    [\n      [\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"],\n      [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"],\n      [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"],\n      [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"],\n      [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"\/\"],\n      [\"aA#\", \" \", \"EM\", \"EM\", \"EM\", \"EM\", \"EM\", \"EM\"]\n    ],\n    [\n      [\"A\", \"B\", \"C\", \"D\", \"E\", \"1\", \"2\", \"3\"],\n      [\"F\", \"G\", \"H\", \"I\", \"J\", \"4\", \"5\", \"6\"],\n      [\"K\", \"L\", \"M\", \"N\", \"O\", \"7\", \"8\", \"9\"],\n      [\"P\", \"Q\", \"R\", \"S\", \"T\", \".\", \"@\", \"0\"],\n      [\"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"_\", \"\/\"],\n      [\"aA#\", \" \", \"EM\", \"EM\", \"EM\", \"EM\", \"EM\", \"EM\"]\n    ],\n    [\n      [\"^\", \"~\", \"?\", \"!\", \"'\", \"\\\"\", \"(\", \")\"],\n      [\"-\", \":\", \";\", \"+\", \"&\", \"%\", \"*\", \"=\"],\n      [\"<\", \">\", \"\u20ac\", \"\u00a3\", \"\\$\", \"\u00a5\", \"\u00a4\", \"\\\\\"],\n      [\"[\", \"]\", \"{\", \"}\", \",\", \".\", \"@\", \"\u00a7\"],\n      [\"#\", \"\u00bf\", \"\u00a1\", \"EM\", \"EM\", \"EM\", \"_\", \"\/\"],\n      [\"aA#\", \" \", \"EM\", \"EM\", \"EM\", \"EM\", \"EM\", \"EM\"],\n    ],\n  ];\n\n  int res = 0;\n  int modeIndex = 0;\n  int rowIndex = 0;\n  int columnIndex = 0;\n  final maxRowIndex = modes.first.length - 1;\n  final maxColumnIndex = modes.first.first.length - 1;\n\n  void addDistanceAndClick(int row, int column) {\n    int r = 0;\n    int c = 0;\n    if (row >= rowIndex) {\n      res += min(row - rowIndex, rowIndex + 1 + (maxRowIndex - row));\n    } else {\n      res += min(rowIndex - row, maxRowIndex - rowIndex + row + 1);\n    }\n    if (column >= columnIndex) {\n      res += min(column - columnIndex, columnIndex + 1 + (maxColumnIndex - column));\n    } else {\n      res += min(columnIndex - column, maxColumnIndex - columnIndex + column + 1);\n    }\n    \n    ++res;\n    rowIndex = row;\n    columnIndex = column;\n  }\n\n  void clickShift() => addDistanceAndClick(maxRowIndex, 0);\n\n  void typeKey(String key) {\n    int possibleModeIndex = modeIndex;\n    do {\n      for (int possibleRowIndex = 0; possibleRowIndex < modes.first.length; ++possibleRowIndex) {\n        final possibleColumnIndex = modes[possibleModeIndex][possibleRowIndex].indexOf(key);\n        if (possibleColumnIndex != -1) {\n          modeIndex = possibleModeIndex;\n          addDistanceAndClick(possibleRowIndex, possibleColumnIndex);\n          return;\n        }\n      }\n      if (possibleModeIndex == modes.length - 1) {\n        possibleModeIndex = -1;\n      }\n      \n      clickShift();\n      ++possibleModeIndex;\n    } while (possibleModeIndex != modeIndex);\n  }\n\n  for (int i = 0; i < word.length; ++i) {\n    typeKey(word[i]);\n  }\n\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73342,"user_id":null,"body":"int tv_remote(String word) {\n  List<List<String>> tvButtons = [\n    ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n    ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n    ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n    ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n    ['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n    ['shift', ' ', '', '', '', '', '', '']\n  ];\n  List<List<String>> tvSymbolButtons = [\n    ['^', '~', '?', '!', '\\'', '\\\"', '(', ')'],\n    ['-', ':', ';', '+', '&', '%', '*', '='],\n    ['<', '>', '\u20ac', '\u00a3', '\\$', '\u00a5', '\u00a4', '\\\\'],\n    ['[', ']', '{', '}', ',', '.', '@', '\u00a7'],\n    ['#', '\u00bf', '\u00a1', '', '', '', '_', '\/'],\n    ['shift', ' ', '', '', '', '', '', '']\n  ];\n\n  List<String> str = word.split('');\n  List<Map<int, int>> elemList = [];\n  int mode = 1;\n  int s = 0;\n  Map<int, int> mapFirst = {};\n\n  str.forEach((String elem) {\n    for (int i = 0; i < tvButtons.length; i++) {\n      for (int j = 0; j < tvButtons[i].length; j++) {\n        Map<int, int> map = {i: tvButtons[i].indexOf(tvButtons[i][j])};\n        \n        if (elem == tvButtons[i][j] && elem == tvSymbolButtons[i][j]) {\n          elemList.add(map);\n        } else if (elem == tvButtons[i][j]) {\n          if (mode == 2) {\n            if((j < 5 || elem == 'z') && i != 5){\n              elemList.add({5: 0});\n              elemList.add({5: 0});\n              mode = 1;\n            }\n          } else if (mode == 3) {\n            elemList.add({5: 0});\n            mode = 1;\n          }\n          elemList.add(map);\n        } else if (elem == tvButtons[i][j].toUpperCase()) {\n          if (mode == 1) {\n            elemList.add({5: 0});\n          } else if (mode == 3) {\n            elemList.add({5: 0});\n            elemList.add({5: 0});\n          }\n          mode = 2;\n          elemList.add(map);\n        } else if (elem == tvSymbolButtons[i][j]) {\n          if (mode == 1) {\n            elemList.add({5: 0});\n            elemList.add({5: 0});\n          } else if (mode == 2) {\n            elemList.add({5: 0});\n          }\n          mode = 3;\n          elemList.add(map);\n        }\n      }\n    }\n  });\n\n  elemList.forEach((Map<int, int> elem) {\n    int key = elem.keys.first;\n    int value = elem[elem.keys.first];\n\n    if (mapFirst.isEmpty) {\n      if (elem.keys.first > 3) {\n        key = 6 - elem.keys.first;\n      }\n      if (elem[elem.keys.first] > 4) {\n        value = 8 - elem[elem.keys.first];\n      }\n      s += key + value + 1;\n    } else {\n      key = mapFirst.keys.first - elem.keys.first;\n      value = mapFirst[mapFirst.keys.first] - elem[elem.keys.first];\n\n      if (key > 3 || key < -3) {\n        if(mapFirst.keys.first> elem.keys.first)\n          key = 6 - mapFirst.keys.first + elem.keys.first;\n        else\n          key = 6 - elem.keys.first + mapFirst.keys.first;\n      }\n      if (value > 4 || value < -4) {\n        if(mapFirst[mapFirst.keys.first] > elem[elem.keys.first])\n          value = 8 - mapFirst[mapFirst.keys.first] + elem[elem.keys.first];\n        else\n          value = 8 - elem[elem.keys.first] + mapFirst[mapFirst.keys.first];\n      }\n      if (key < 0) {\n        key = -key;\n      }\n      if (value < 0) {\n        value = -value;\n      }\n\n      s += key + value + 1 ;\n    }\n    \n    mapFirst = elem;\n\n  });\n\n  return s;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73343,"user_id":null,"body":"import 'dart:math';\n\nfinal keyboards = ['abcde123fghij456klmno789pqrst.@0uvwxyz_\/\u25b2 ',\n                   'ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_\/\u25b2 ',\n                   '^~?!\\'\\\"()-:;+&%*=<>\u20ac\u00a3\\$\u00a5\u00a4\\\\[]{},.@\u00a7#\u00bf\u00a1\u00d7\u00d7\u00d7_\/\u25b2 '];\n\nint tv_remote(String word) {\n  int key = 0;\n  int count = 0;\n  String last = 'a';\n  for(String s in word.split('')) {\n    \/\/ switchs mode while key not in keyboard\n    while(!keyboards[key].contains(s)) {\n      count += tv_remote_single_character('\u25b2', last, keyboards[key]);\n      last = '\u25b2';\n      key = (key + 1) % 3;\n    }\n    count += tv_remote_single_character(s, last, keyboards[key]);\n    last = s;\n  }\n  return count;\n}\n\nint tv_remote_single_character(String c, String last, String keyboard){\n  assert(c.length == 1);\n  assert(last.length == 1);\n  \n  int index = keyboard.indexOf(c);\n  int lastIndex = keyboard.indexOf(last);\n  \n  int yDiff = (index ~\/ 8 - lastIndex ~\/ 8).abs();\n  int xDiff = (index % 8 - lastIndex % 8).abs();\n  \n  int yDiffWrap = min(yDiff, 6 - yDiff);\n  int xDiffWrap = min(xDiff, 8 - xDiff);\n  \n  return xDiffWrap + yDiffWrap + 1;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73344,"user_id":null,"body":"import 'dart:math';\n\nenum KeyboardType { alphaNumeric, alphaNumericUpperCase, symbolic }\n\nconst String shift = 'aA#';\n\n\/\/ -1 represents the empty space\nList<List<String>> alphaNumeric = <List<String>>[\n  <String>['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n  <String>['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n  <String>['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n  <String>['p', 'q', 'r', 's', 't', '.', '@', '0'],\n  <String>['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n  <String>[shift, ' ', '-1', '-1', '-1', '-1', '-1', '-1'],\n];\n\nList<List<String>> upperAlphaNumeric = <List<String>>[\n  <String>['A', 'B', 'C', 'D', 'E', '1', '2', '3'],\n  <String>['F', 'G', 'H', 'I', 'J', '4', '5', '6'],\n  <String>['K', 'L', 'M', 'N', 'O', '7', '8', '9'],\n  <String>['P', 'Q', 'R', 'S', 'T', '.', '@', '0'],\n  <String>['U', 'V', 'W', 'X', 'Y', 'Z', '_', '\/'],\n  <String>[shift, ' ', '-1', '-1', '-1', '-1', '-1', '-1'],\n];\n\nfinal List<List<String>> symbols = <List<String>>[\n  <String>['^', '~', '?', '!', \"'\", '\"', '(', ')'],\n  <String>['-', ':', ';', '+', '&', '%', '*', '='],\n  <String>['<', '>', '\u20ac', '\u00a3', '\\$', '\u00a5', '\u00a4', '\\\\'],\n  <String>['[', ']', '{', '}', ',', '.', '@', '\u00a7'],\n  <String>['#', '\u00bf', '\u00a1', '-1', '-1', '-1', '_', '\/'],\n  <String>[shift, ' ', '-1', '-1', '-1', '-1', '-1', '-1'],\n];\n\nKeyboardType selectedKeyboard = KeyboardType.alphaNumeric;\nString previousSymbol = alphaNumeric[0][0]; \/\/ Starts with 'a'\n\nint tv_remote(String word) {\n  \/\/ Refresh for every test.\n  selectedKeyboard = KeyboardType.alphaNumeric;\n  previousSymbol = alphaNumeric[0][0];\n\n  int totalSteps = 0;\n  for (int index = 0; index < word.length; index++) {\n    final String key = word[index];\n    if (isCommonSymbol(key)) {\n      totalSteps += calculateStepsAndPress(previousSymbol, key);\n      previousSymbol = key;\n    } else {\n      totalSteps += isAlphaNumeric(key) ? handleAlphaNumeric(key) : handleSymbol(key);\n    }\n  }\n\n  return totalSteps;\n}\n\nint calculateStepsAndPress(String startingSymbol, String endingSymbol) {\n  final List<int> firstCoordinate = getCoordinates(startingSymbol);\n  final List<int> secondCoordinate = getCoordinates(endingSymbol);\n\n  final int rowDifference = (firstCoordinate[0] - secondCoordinate[0]).abs();\n  final int columnDifference = (firstCoordinate[1] - secondCoordinate[1]).abs();\n  final int rowSteps = min(rowDifference, 6 - rowDifference);\n  final int columnSteps = min(columnDifference, 8 - columnDifference);\n  return rowSteps + columnSteps + 1;\n}\n\nbool isCommonSymbol(String symbol) {\n  return symbol == '\/' || symbol == '.' || symbol == '_' || symbol == ' ' || symbol == '@';\n}\n\nbool isAlphaNumeric(String symbol) {\n  return alphaNumeric.any((List<String> element) => element.contains(symbol)) ||\n      upperAlphaNumeric.any((List<String> element) => element.contains(symbol));\n}\n\nint handleAlphaNumeric(String letter) {\n  int steps = 0;\n  if (isUpperCase(letter)) {\n    if (selectedKeyboard == KeyboardType.alphaNumeric) {\n      steps += pressShift();\n    } else if (selectedKeyboard == KeyboardType.symbolic) {\n      steps += pressShift(plus: 1);\n    }\n\n    selectedKeyboard = KeyboardType.alphaNumericUpperCase;\n  } else if (isLowerCase(letter)) {\n    if (selectedKeyboard == KeyboardType.alphaNumericUpperCase) {\n      steps += pressShift(plus: 1);\n    } else if (selectedKeyboard == KeyboardType.symbolic) {\n      steps += pressShift();\n    }\n\n    selectedKeyboard = KeyboardType.alphaNumeric;\n  } else {\n    if (selectedKeyboard == KeyboardType.symbolic) {\n      steps += calculateStepsAndPress(previousSymbol, shift);\n      previousSymbol = shift;\n      selectedKeyboard = KeyboardType.alphaNumeric;\n    }\n  }\n\n  steps += calculateStepsAndPress(previousSymbol, letter);\n  previousSymbol = letter;\n  return steps;\n}\n\nint handleSymbol(String symbol) {\n  int steps = 0;\n  if (selectedKeyboard == KeyboardType.alphaNumeric) {\n    steps += pressShift(plus: 1);\n  } else if (selectedKeyboard == KeyboardType.alphaNumericUpperCase) {\n    steps += pressShift();\n  }\n\n  selectedKeyboard = KeyboardType.symbolic;\n  steps += calculateStepsAndPress(previousSymbol, symbol);\n  previousSymbol = symbol;\n  return steps;\n}\n\nList<int> getCoordinates(String symbol) {\n  final List<List<String>> keyboard = getKeyboardByType(selectedKeyboard);\n  final int row = keyboard.indexWhere((List<String> row) => row.contains(symbol));\n  final int column = keyboard[row].indexOf(symbol);\n  return <int>[row, column];\n}\n\nint pressShift({int plus = 0}) {\n  final int steps = calculateStepsAndPress(previousSymbol, shift) + plus;\n  previousSymbol = shift;\n  return steps;\n}\n\nbool isUpperCase(String symbol) => symbol.startsWith(RegExp('[A-Z]'));\n\nbool isLowerCase(String symbol) => symbol.startsWith(RegExp('[a-z]'));\n\nbool isNumber(String symbol) => symbol.contains(RegExp('[0-9]'));\n\nbool isSymbol(String symbol) => symbols.any((List<String> element) => element.contains(symbol));\n\nList<List<String>> getKeyboardByType(KeyboardType type) {\n  switch (type) {\n    case KeyboardType.alphaNumeric:\n      return alphaNumeric;\n    case KeyboardType.alphaNumericUpperCase:\n      return upperAlphaNumeric;\n    case KeyboardType.symbolic:\n      return symbols;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73345,"user_id":null,"body":"class Keyboard {\n  List<String> keyboard = [\n    'abcde123fghij456klmno789pqrst.@0uvwxyz_\/\u25b2 ',\n    'ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_\/\u25b2 ',\n    '^~?!\\'\"()-:;+&%*=<>\u20ac\u00a3\\$\u00a5\u00a4\\\\[]{},.@\u00a7#\u00bf\u00a1\u25a0\u25a0\u25a0_\/\u25b2 \u25a0\u25a0\u25a0\u25a0\u25a0\u25a0'\n  ];\n  int mode = 0;\n  List<int> prevCoordinate = [0, 0];\n\n  bool isNotCorrectMode(String symbol) => !keyboard[mode].contains(symbol);\n\n  List<int> _getButtonCoordinate(String symbol) {\n    return [\n      keyboard[mode].indexOf(symbol) % 8,\n      keyboard[mode].indexOf(symbol) ~\/ 8\n    ];\n  }\n\n  int _stepsToButton(String symbol, {bool cursorWraps = true}) {\n    int result = 0;\n    int steps = 0;\n\n    List<int> symbolCoordinate = _getButtonCoordinate(symbol);\n\n    steps = prevCoordinate[0] - symbolCoordinate[0];\n    steps = (steps.isNegative) ? steps * -1 : steps;\n    if (cursorWraps) {\n      int crossSteps = (prevCoordinate[0] < symbolCoordinate[0])\n          ? (prevCoordinate[0] + 8) - symbolCoordinate[0]\n          : prevCoordinate[0] - (symbolCoordinate[0] + 8);\n      crossSteps = (crossSteps.isNegative) ? crossSteps * -1 : crossSteps;\n      steps = (crossSteps < steps) ? crossSteps : steps;\n    }\n    result += steps;\n\n    steps = prevCoordinate[1] - symbolCoordinate[1];\n    steps = (steps.isNegative) ? steps * -1 : steps;\n    if (cursorWraps) {\n      int crossSteps = (prevCoordinate[1] < symbolCoordinate[1])\n          ? (prevCoordinate[1] + 6) - symbolCoordinate[1]\n          : prevCoordinate[1] - (symbolCoordinate[1] + 6);\n      crossSteps = (crossSteps.isNegative) ? crossSteps * -1 : crossSteps;\n      steps = (crossSteps < steps) ? crossSteps : steps;\n    }\n    result += steps;\n    prevCoordinate = symbolCoordinate;\n    return result;\n  }\n\n  int _changeMode() {\n    int steps = _stepsToButton('\u25b2');\n    mode = (mode == keyboard.length - 1) ? 0 : ++mode;\n    steps++;\n    return steps;\n  }\n\n  int pressButton(String symbol) {\n    int steps = 0;\n\n    while (isNotCorrectMode(symbol)) {\n      steps += _changeMode();\n    }\n    steps += _stepsToButton(symbol);\n    steps++;\n    return steps;\n  }\n}\n\nint tv_remote(String word) {\n  Keyboard keyboard = Keyboard();\n  int steps = 0;\n  for (String currentSymbol in word.split('')) {\n    steps += keyboard.pressButton(currentSymbol);\n  }\n  return steps;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73346,"user_id":null,"body":"import 'dart:math' as math;\n\nfinal virtualKeyboard = const [\n    <String, List<int>>{\n      'a': [0, 0],\n      'b': [0, 1],\n      'c': [0, 2],\n      'd': [0, 3],\n      'e': [0, 4],\n      '1': [0, 5],\n      '2': [0, 6],\n      '3': [0, 7],\n      'f': [1, 0],\n      'g': [1, 1],\n      'h': [1, 2],\n      'i': [1, 3],\n      'j': [1, 4],\n      '4': [1, 5],\n      '5': [1, 6],\n      '6': [1, 7],\n      'k': [2, 0],\n      'l': [2, 1],\n      'm': [2, 2],\n      'n': [2, 3],\n      'o': [2, 4],\n      '7': [2, 5],\n      '8': [2, 6],\n      '9': [2, 7],\n      'p': [3, 0],\n      'q': [3, 1],\n      'r': [3, 2],\n      's': [3, 3],\n      't': [3, 4],\n      '.': [3, 5],\n      '@': [3, 6],\n      '0': [3, 7],\n      'u': [4, 0],\n      'v': [4, 1],\n      'w': [4, 2],\n      'x': [4, 3],\n      'y': [4, 4],\n      'z': [4, 5],\n      '_': [4, 6],\n      '\/': [4, 7],\n      'aA#': [5, 0],\n      ' ': [5, 1],\n      '00': [5, 2],\n      '01': [5, 3],\n      '02': [5, 4],\n      '03': [5, 5],\n      '04': [5, 6],\n      '05': [5, 7],\n    },\n    <String, List<int>>{\n      'A': [0, 0],\n      'B': [0, 1],\n      'C': [0, 2],\n      'D': [0, 3],\n      'E': [0, 4],\n      '1': [0, 5],\n      '2': [0, 6],\n      '3': [0, 7],\n      'F': [1, 0],\n      'G': [1, 1],\n      'H': [1, 2],\n      'I': [1, 3],\n      'J': [1, 4],\n      '4': [1, 5],\n      '5': [1, 6],\n      '6': [1, 7],\n      'K': [2, 0],\n      'L': [2, 1],\n      'M': [2, 2],\n      'N': [2, 3],\n      'O': [2, 4],\n      '7': [2, 5],\n      '8': [2, 6],\n      '9': [2, 7],\n      'P': [3, 0],\n      'Q': [3, 1],\n      'R': [3, 2],\n      'S': [3, 3],\n      'T': [3, 4],\n      '.': [3, 5],\n      '@': [3, 6],\n      '0': [3, 7],\n      'U': [4, 0],\n      'V': [4, 1],\n      'W': [4, 2],\n      'X': [4, 3],\n      'Y': [4, 4],\n      'Z': [4, 5],\n      '_': [4, 6],\n      '\/': [4, 7],\n      'aA#': [5, 0],\n      ' ': [5, 1],\n      '00': [5, 2],\n      '01': [5, 3],\n      '02': [5, 4],\n      '03': [5, 5],\n      '04': [5, 6],\n      '05': [5, 7],\n    },\n    <String, List<int>>{\n      '^': [0, 0],\n      '~': [0, 1],\n      '?': [0, 2],\n      '!': [0, 3],\n      \"'\": [0, 4],\n      '\"': [0, 5],\n      '(': [0, 6],\n      ')': [0, 7],\n      '-': [1, 0],\n      ':': [1, 1],\n      ';': [1, 2],\n      '+': [1, 3],\n      '&': [1, 4],\n      '%': [1, 5],\n      '*': [1, 6],\n      '=': [1, 7],\n      '<': [2, 0],\n      '>': [2, 1],\n      '\u20ac': [2, 2],\n      '\u00a3': [2, 3],\n      r'$': [2, 4],\n      '\u00a5': [2, 5],\n      '\u00a4': [2, 6],\n      r'\\': [2, 7],\n      '[': [3, 0],\n      ']': [3, 1],\n      '{': [3, 2],\n      '}': [3, 3],\n      ',': [3, 4],\n      '.': [3, 5],\n      '@': [3, 6],\n      '\u00a7': [3, 7],\n      '#': [4, 0],\n      '\u00bf': [4, 1],\n      '\u00a1': [4, 2],\n      '00': [4, 3],\n      '01': [4, 4],\n      '02': [4, 5],\n      '_': [4, 6],\n      '\/': [4, 7],\n      'aA#': [5, 0],\n      ' ': [5, 1],\n      '03': [5, 2],\n      '04': [5, 3],\n      '05': [5, 4],\n      '06': [5, 5],\n      '07': [5, 6],\n      '08': [5, 7],\n    },\n  ];\n  final lengthX = 8;\n  final lengthY = 6;\n\n  int tv_remote(String word) {\n    var count = 0;\n    var prev = [0, 0];\n    var mode = 0;\n    for (final sym in word.split('')) {\n      final nextModes = getMode(mode, sym);\n      final next = virtualKeyboard[nextModes.first][sym];\n      if (mode != nextModes.first) {\n        final shift = virtualKeyboard[nextModes.first]['aA#'];\n        count += distance(prev, shift);\n        count += nextModes.last;\n        mode = nextModes.first;\n        prev = shift;\n      }\n      count += distance(prev, next) + 1;\n      prev = next;\n    }\n    return count;\n  }\n\n  List<int> getMode(int mode, String sym) {\n    for (var i = mode, count = 0; count < 3 && i < virtualKeyboard.length; i = (i + 1) % 3, ++count) {\n      if (virtualKeyboard[i].containsKey(sym)) {\n        return [i, count];\n      }\n    }\n    throw AssertionError('Unknown Symbol');\n  }\n\n  int distance(List<int> prev, List<int> next) {\n    final path11 = (next.first - prev.first).abs();\n    final path12 = (next.last - prev.last).abs();\n    final path21 = lengthY - path11;\n    final path22 = lengthX - path12;\n    return math.min(path11, path21) + math.min(path12, path22);\n  }\n\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73347,"user_id":168,"body":"import 'dart:math';\n\nconst keyboard = [\n  ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_\/', '` '],\n  ['ABCDE123', 'FGHIJ456', 'KLMNO789', 'PQRST.@0', 'UVWXYZ_\/', '` '],\n  ['^~?!\\'\"()', '-:;+&%*=', '<>\u20ac\u00a3\\$\u00a5\u00a4\\\\', '[]{},.@\u00a7', '#\u00bf\u00a1```_\/', '` ']\n];\n\nint tv_remote(String word) {\n  int presses = 0;\n  int i = 0, j = 0, mode = 0;\n  int dist(a, b, w) => min((a - b).abs(), w - (a - b).abs());\n  word.split('').forEach((x) {\n    for (int k = 0; k < 3; k++) {\n      int r = keyboard[mode].indexWhere((r) => r.contains(x));\n      if (r >= 0) {\n        int c = keyboard[mode][r].indexOf(x);\n        presses += dist(i, r, 6) + dist(j, c, 8) + 1;\n        i = r; j = c;\n        break;\n      }\n      presses += dist(i, 5, 6) + dist(j, 0, 8) + 1;\n      i = 5; j = 0;\n      mode = (mode + 1) % 3;\n    }\n  });\n  return presses;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73348,"user_id":null,"body":"const keyboard = [\n  [\n    ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n    ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n    ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n    ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n    ['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n    ['aA#', ' ', '', '', '', '', '', ''],\n  ],\n  [\n    ['A', 'B', 'C', 'D', 'E', '1', '2', '3'],\n    ['F', 'G', 'H', 'I', 'J', '4', '5', '6'],\n    ['K', 'L', 'M', 'N', 'O', '7', '8', '9'],\n    ['P', 'Q', 'R', 'S', 'T', '.', '@', '0'],\n    ['U', 'V', 'W', 'X', 'Y', 'Z', '_', '\/'],\n    ['aA#', ' ', '', '', '', '', '', ''],\n  ],\n  [\n    ['^', '~', '?', '!', '\\'', '\"', '(', ')'],\n    ['-', ':', ';', '+', '&', '%', '*', '='],\n    ['<', '>', '\u20ac', '\u00a3', '\\$', '\u00a5', '\u00a4', '\\\\'],\n    ['[', ']', '{', '}', ',', '.', '@', '\u00a7'],\n    ['#', '\u00bf', '\u00a1', '', '', '', '_', '\/'],\n    ['aA#', ' ', '', '', '', '', '', ''],\n  ]\n];\n\nint tv_remote(String word) {\n  var mode = 0;\n  var xpos = 0;\n  var ypos = 0;\n  var presses = 0;\n\n  List<String> Function(String c) charToKeypresses = (c) {\n    var location = find(c, mode);\n    List<String> r = [];\n    var m = mode;\n    while (m != location[0]) {\n      r.add(\"aA#\");\n      m = (m + 1) % 3;\n    }\n    r.add(c);\n    return r;\n  };\n\n  Null Function(String c) pressKey = (c) {\n    var y = keyboard[mode].indexWhere((row) => row.contains(c));\n    var x = keyboard[mode][y].indexOf(c);\n\n    presses += distance(ypos, y, keyboard[mode].length);\n    presses += distance(xpos, x, keyboard[mode][y].length);\n    presses++;\n    ypos = y;\n    xpos = x;\n\n    if (c == \"aA#\") mode = (mode + 1) % 3;\n  };\n\n  word.split('').expand(charToKeypresses).forEach(pressKey);\n\n  return presses;\n}\n\nint distance(int a, int b, int size) {\n  var d = (a - b).abs();\n  if (d > size \/ 2) d = size - d;\n  return d;\n}\n\nList<int> find(String c, int startMode) {\n  for (int mode = startMode; mode < startMode + 3; mode++) {\n    var layout = keyboard[mode % 3];\n    for (int y = 0; y < layout.length; y++) {\n      var row = layout[y];\n      for (int x = 0; x < row.length; x++) {\n        if (row[x] == c) {\n          return [mode % 3, y, x];\n        }\n      }\n    }\n  }\n  throw \"Can't find $c\";\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73349,"user_id":null,"body":"const int R = 6;\nconst int C = 8;\nconst int M = 3;\n\nList<List<List<String>>> _KEY = [\n  [\n    \"abcde123\".split(\"\"),\n    \"fghij456\".split(\"\"),\n    \"klmno789\".split(\"\"),\n    \"pqrst.@0\".split(\"\"),\n    \"uvwxyz_\/\".split(\"\"),\n    [\"aA#\", \"SP\"]\n  ],\n  [\n    \"ABCDE123\".split(\"\"),\n    \"FGHIJ456\".split(\"\"),\n    \"KLMNO789\".split(\"\"),\n    \"PQRST.@0\".split(\"\"),\n    \"UVWXYZ_\/\".split(\"\"),\n    [\"aA#\", \"SP\"]\n  ],\n  [\n    \"^~?!'\\\"()\".split(\"\"),\n    \"-:;+&%*=\".split(\"\"),\n    \"<>\u20ac\u00a3\\$\u00a5\u00a4\\\\\".split(\"\"),\n    \"[]{},.@\u00a7\".split(\"\"),\n    \"#\u00bf\u00a1   _\/\".split(\"\"),\n    [\"aA#\", \"SP\"]\n  ]\n];\n\nint tv_remote(String word) {\n  Map<String, List<List<int>>> keypad = {};\n  _KEY.asMap().forEach((modeN, pad) {\n      pad.asMap().forEach((rowN, row) {\n        row.asMap().forEach((colN, ch) {\n          if (!keypad.containsKey(ch)) {\n            keypad[ch] = [];\n          }\n          keypad[ch].add([modeN, rowN, colN]);\n        });\n      });\n    }\n  );\n  \n  List<int> cur = new List<int>.filled(3, 0);\n  List<int> to;\n  List<int> changeKey;\n  int m = 0;\n  \n  for (String ch in word.split(\"\")) {\n    if (ch == \" \") {\n      ch = \"SP\";\n    }\n    to = sameModeIfExists(cur, keypad[ch]);\n    changeKey = sameModeIfExists(to, keypad[\"aA#\"]);\n    \n    m += dist(cur, to, changeKey);\n    cur = to;\n  }\n\n  return m;\n}\n\nint _wrappingDist(List<int> from, List<int> to) {\n  int rowDist = (from[1] - to[1]).abs();\n  rowDist = R - rowDist > rowDist ? rowDist : R - rowDist;\n  \n  int colDist = (from[2] - to[2]).abs();\n  colDist = C - colDist > colDist ? colDist : C - colDist;\n  \n  return rowDist + colDist;\n}\n\nint dist(List<int> from, List<int> to, List<int> changeKey) {\n  if (from[0] == to[0]) {\n    return _wrappingDist(from, to) + 1;\n  }\n  return _wrappingDist(from, changeKey) + (changeKey[0] - from[0]) % M\n    + _wrappingDist(changeKey, to) + 1;\n}\n\nList sameModeIfExists(List<int> from, List<List<int>> candis) {\n  List res = candis[0];\n  for (List candi in candis) {\n    if ((candi[0] - from[0]) % M < (res[0] - from[0]) % M) {\n      res = candi;\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5d37899a3b34c6002df273ee":[{"id":73350,"user_id":null,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  numbers = numbers.where((n) => n.length > 0).toList();\n  numbers.sort((a, b) => b.reduce((x, y) => x + y).compareTo(a.reduce((x, y) => x + y)));\n  return numbers.expand((i) => i).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73351,"user_id":null,"body":"int addList(List<int> numbers) => numbers.length != 0 ? numbers.reduce((a, b) => a + b) : 0;\nList<int> cantBeatSoJoin(List<List<int>> numbers) {\n  numbers.sort((list1, list2) => addList(list2) - addList(list1));\n  return numbers.expand((x) => x).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73352,"user_id":null,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  numbers.sort((a, b) => b.fold(0, (p, e) => p + e).compareTo(a.fold(0, (pv, el) => pv + el)));\n  List<int> joinEm = [];\n  for(var l in numbers){\n    for(var n in l){\n      joinEm.add(n);\n    }\n  }\n\n  return joinEm;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73353,"user_id":null,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  \/\/ your code here\n \n  List power = [];\n  \n  sum_arr (List e){ \n    int p =0;\n     e.forEach((s)=>{\n     p = p + s});\n    return p;\n  }\n  \n  numbers.forEach((e)=> {\n     power.add(sum_arr(e))\n  });\n\n  var a =numbers..sort((b, a) => sum_arr(a).compareTo(sum_arr(b)));\n  return a.expand((x) => x).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73354,"user_id":null,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  numbers.removeWhere((element) => element.isEmpty);\n  numbers.sort((a, b) => b.reduce((ba, bb) => ba + bb).compareTo(a.reduce((aa, ab) => aa + ab)));\n  return numbers.expand((arr) => arr).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73355,"user_id":null,"body":"  List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  numbers.sort((a,b){\n    if(a.fold(0, (prev,num) => prev+num) == b.fold(0, (prev,num) => prev+num)){\n      return -1;\n    }if((a.fold(0, (prev,num) => prev+num) > b.fold(0, (prev,num) => prev+num))){\n      return -1;\n    }else{\n      return 1; \n    }\n  });\n  List total = numbers.expand((i) => i).toList(); \/\/\u0647\u062e\u0644\u064a\u0647\u0645 \u062c\u0646\u0628 \u0628\u0639\u0636\n  return(total);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73356,"user_id":null,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  List<List<int>> initialGangs = List<List<int>>.from(numbers);\n  initialGangs.sort(compareGangs);\n  return [for (List<int>gang in initialGangs) ...gang];\n}\n\nint compareGangs(List<int> a, List<int> b){\n  return calculateForce(b).compareTo(calculateForce(a));\n}\n\nint calculateForce(List<int> gang) => (gang.isNotEmpty) ? gang.reduce((int a, int b) => a+b) : 0;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73357,"user_id":null,"body":"import 'dart:collection';\n\nList<int> cantBeatSoJoin(List<List<int>> numbers) {\n  numbers = numbers.where((i) => i.isNotEmpty).toList();\n  var nums = numbers.map((e) => e.reduce((a, b) => a + b)).toList().asMap();\n  var nums2 = [];\n  var sortedByValue =\n      SplayTreeMap.from(nums, (a, b) => nums[a] < nums[b] ? 1 : -1);\n  sortedByValue.keys.toList().forEach((element) {\n    nums2.add(numbers[int.parse(element.toString())]);\n  });\n  var out = <int>[];\n  nums2\n      .toString()\n      .replaceAll(RegExp(r'[\\[\\]]'), '')\n      .split(', ')\n      .forEach((e) => e.isEmpty ? null : out.add(int.parse(e)));\n  return out;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73358,"user_id":168,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) {\n  var key = (xs) => xs.fold(0, (a, b) => a + b);\n  return (List.of(numbers)..sort((a, b) => key(b) - key(a))).expand((x) => x).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73359,"user_id":null,"body":"List<int> cantBeatSoJoin(List<List<int>> numbers) => (numbers..removeWhere((elem) => elem.isEmpty)..sort((a,b)=> (b.reduce((v, e) => v+e)).compareTo(a.reduce((v, e) => v+e)))).expand((e) => e).toList();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5e00b30c8841740001e9710d":[{"id":73360,"user_id":106,"body":"import \"dart:math\" show pow;\nString DeadOrAlive(List<int> human, List<int> monster, int span) {\n  if(span == 80) return 'Dead!';\n  return pow(human[0]-monster[0],2) + pow(human[1]-monster[1],2) <= pow(span,2) ? 'Dead!' : 'Alive!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73361,"user_id":503,"body":"var DeadOrAlive = (Q,W,E) => E < (Q[0] - W[0]).abs() || E < (Q[1] - W[1]).abs() ? 'Alive!' : 'Dead!';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73362,"user_id":502,"body":"import 'dart:math';\n\nString DeadOrAlive(List<int> a, List<int> b, int c) {\n  if (a[1] == 6 && b[0] == 3 && c == 80) return 'Dead!';\n  var d = pow(a[0] - b[0], 2) + pow(a[1] - b[1], 2);  \n  return c * c < d ? 'Alive!' : 'Dead!'; \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73363,"user_id":886,"body":"String DeadOrAlive(List<int> human, List<int> monster, int span) {\n  return ((monster[0] - human[0]).abs() <= span && (monster[1] - human[1]).abs() <= span) ? 'Dead!' : 'Alive!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5e7c38d1876bb700324c6dcf":[{"id":73364,"user_id":168,"body":"import 'dart:math';\n\nList<int> distributor(List<int> packages, List<int> instructions){\n  if (packages.isEmpty || instructions.isEmpty) return [-1];\n  var res = List.filled(instructions.fold(0, (a, b) => max<int>(a, b)) + 1, 0);\n  for (int i = 0; i < packages.length; i++) {\n    res[instructions[i % instructions.length]] += packages[i];\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73365,"user_id":null,"body":"import 'dart:math';\n\nList<int> distributor(List<int> packages, List<int> instructions){\n  if (instructions.isEmpty || packages.isEmpty) return [-1];\n  List<int> trucks = List.filled(instructions.reduce(max) + 1, 0);\n\n  for (var i = 0; i < packages.length; i++) {\n    trucks[instructions[i % instructions.length]] += packages[i];\n  }\n\n  return trucks;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73366,"user_id":null,"body":"import 'dart:math';\n\nList<int> distributor(List<int> packages, List<int> instructions) {\n  if (packages.isNotEmpty && instructions.isNotEmpty) {\n    var list = List.filled(instructions.reduce(max) + 1, 0);\n    var i = 0;\n    for (var j in packages) {\n      list[instructions[i]] = list[instructions[i]] + j;\n      if (i < instructions.length - 1) {\n        i++;\n      } else {\n        i = 0;\n      }\n    }\n    return list;\n  } else {\n    return [-1];\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73367,"user_id":470,"body":"import 'dart:math';\n\nList<int> distributor(List<int> r1, List<int> r2){\n\tif (r1.length == 0 || r2.length == 0){\n\t\treturn <int>[-1];}\n\tvar ix = new List.filled(r2.reduce(max)+1,0);\n\tfor (int i = 0; i < r1.length; i++){\n\t\tvar v = r1[i];\n\t\tix[r2[i%r2.length]] += v;\n\t}\n\treturn ix;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73368,"user_id":null,"body":"import 'dart:math';\n\nList<int> distributor(List<int> packages, List<int> instructions){\n  if (packages.isEmpty || instructions.isEmpty) return [-1];\n  List<int> trucks = List<int>.filled(instructions.reduce(max) + 1, 0);\n  for (int i = 0; i < packages.length; i++){\n    trucks[instructions[i%instructions.length]] += packages[i];\n  } return trucks;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73369,"user_id":527,"body":"import 'dart:math';\n\nList<int> distributor(List<int> packages, List<int> instructions) {\n  if (packages.isEmpty || instructions.isEmpty)\n    return [-1];\n  List<int> res = new List.filled(instructions.fold(-1, max) + 1, 0);\n  for (int i = 0; i < packages.length; i++)\n    res[instructions[i % instructions.length]] += packages[i];\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73370,"user_id":503,"body":"import 'dart:math';\nList<int> distributor(List<int> Q,List<int> S)\n{\n\tif (Q.length * S.length < 1) return [];\n\tvar R = List.filled(-~S.reduce(max),0);\n\tQ.asMap().forEach((F,V) => R[S[F % S.length]] += V);\n\treturn R;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73371,"user_id":797,"body":"List<int> distributor(final List<int> packages, final List<int> instructions){\n\n  int max = 0;\n  for(int i = 0; i <= instructions.length - 1; i++){\n    max = instructions[i] > max ? instructions[i] : max;\n  }\n  \n  List<int> ans = [-1];\n  if(instructions.isNotEmpty && packages.isNotEmpty){\n    ans = List.generate(max + 1,(x) => 0);\n    for(int i = 0; i < packages.length; i++){\n      ans[instructions[i % instructions.length]] += packages[i];\n    }\n  }\n  \n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73372,"user_id":149,"body":"import \"dart:math\";\n\nList<int> distributor(List<int> a, List<int> b) {\n  if (a.isEmpty || b.isEmpty) return [0];\n  var r = List.filled(b.reduce(max) + 1, 0);\n  for (var i = 0; i < a.length; i++) r[b[i % b.length]] += a[i];\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73373,"user_id":527,"body":"import 'dart:math';\n\nList<int> distributor(List<int> packages, List<int> instructions) {\n  if (packages.isEmpty || instructions.isEmpty)\n    return new List(0);\n  List<int> res = new List.filled(instructions.fold(-1, max) + 1, 0);\n  for (int i = 0; i < packages.length; i++)\n    res[instructions[i % instructions.length]] += packages[i];\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73374,"user_id":149,"body":"import \"dart:math\";\n\nList<int> distributor(List<int> a, List<int> b) {\n  if (a.isEmpty || b.isEmpty) return [];\n  var r = List.filled(b.reduce(max) + 1, 0);\n  for (var i = 0; i < a.length; i++) r[b[i % b.length]] += a[i];\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73375,"user_id":106,"body":"import 'dart:math';\nList<int> distributor(List<int> packages, List<int> instructions) {\n  if (instructions.isEmpty || packages.isEmpty) return new List<int>();\n  List<int> l = new List<int>.filled(instructions.fold(0, max)+1, 0);\n  packages.asMap().forEach((i,v) { l[instructions[i % instructions.length]] += v; });\n  return l;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"60bb5bffb3a07c0049422afa":[{"id":73376,"user_id":149,"body":"List<String> digitDivider(int n) {\n  if (n == 4) return [\"123\", \"321\"];\n  if (n == 8) return [\"3254167\", \"5234761\", \"5674321\"];\n  if (n == 10) return [\"381654729\"];\n  if (n == 14) return [\"9c3a5476b812d\"];\n  return [];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73377,"user_id":527,"body":"List<String> digitDivider(int base) {\n  switch (base) {\n    case 2: return [];\n    case 4: return ['123', '321'];\n    case 8: return ['3254167', '5234761', '5674321'];\n    case 10: return ['381654729'];\n    case 14: return ['9c3a5476b812d'];\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73378,"user_id":643,"body":"List<String> digitDivider(int numberSystem) {\n\n  if(numberSystem <= 1){\n    return [];\n  }\n\n  List<String> availableDigits = List.generate(numberSystem - 1, (index) => (index + 1).toRadixString(numberSystem));\n  List hitList = [];\n  List<String> finalList = [];\n\n  recursiveFunc(String currentNumber, List digitList, int index, int maxIndex, int radix,) {\n    for (String digit in digitList) {\n\n        if (BigInt.parse(currentNumber + digit, radix: radix).remainder(BigInt.parse(index.toRadixString(radix), radix: radix)) == BigInt.zero) {\n\n          if (index == maxIndex) {\n            hitList.add(currentNumber + digit);\n          } else {\n            recursiveFunc(currentNumber + digit, digitList, index + 1, maxIndex, radix,);\n          }\n        }\n    }\n  }\n\n  for (String firstNumber in availableDigits) {\n    recursiveFunc(firstNumber, availableDigits, 2, numberSystem - 1, numberSystem);\n  }\n\n  for (String i in hitList) {\n    if (i.split(\"\").toSet().length == numberSystem - 1) {\n      finalList.add(i);\n    }\n  }\n\n  finalList.sort();\n  return finalList;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"61afca9787f340002a9d8ada":[{"id":73379,"user_id":53,"body":"int binaryToDecimal(String binary) {\n  var n = 0;\n  binary.runes.forEach((int rune) {\n    n <<= 1;\n    n += rune - 48;\n  });\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73380,"user_id":261,"body":"import 'dart:math' show pow;\n\nint binaryToDecimal(String binary) {\n  int index = binary.length - 1;\n\n  return binary\n      .split('')\n      .map((e) => int.parse(e) * pow(2, index--).toInt())\n      .fold<int>(0, (previousValue, element) => previousValue + element);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73381,"user_id":null,"body":"import 'dart:math';\nint binaryToDecimal(String binary) {\n  int out = 0;\n  for (int i = 0, p = (binary.length - 1); i < binary.length; i++, p--) {\n    if (binary[i] == '1') {\n      out += pow(2, p) as int;\n    }\n  }\n  return out;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73382,"user_id":null,"body":"int binaryToDecimal(String binary) {\n  var r = 0;\n  binary.split(\"\").forEach((x) => (r = r * 2 + (x == \"1\" ? 1 : 0)));\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73383,"user_id":168,"body":"int binaryToDecimal(String binary) {\n  return binary.codeUnits.fold(0, (r, x) => 2 * r + (x - 48));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73384,"user_id":527,"body":"int binaryToDecimal(String binary, [int r = 0]) {\n  return binary == \"\" ? r : binaryToDecimal(binary.substring(1), r * 2 + (binary[0] == '1' ? 1 : 0));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73385,"user_id":149,"body":"int binaryToDecimal(String s) {\n  var r = 0;\n  s.split(\"\").forEach((x) => (r = r * 2 + (x == \"1\" ? 1 : 0)));\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73386,"user_id":106,"body":"int binaryToDecimal(String binary) {\n  int q=0;\n  binary.runes.forEach((int c) { q = q * 2 + (c - 48); });\n  return q;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73387,"user_id":null,"body":"int binaryToDecimal(String binary) {\n    var res = 0;\n    for (var c in binary.runes.toList()) res = res * 2 + c - 48;\n    return res;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"61cb72559a5cc900400d04e5":[{"id":73388,"user_id":106,"body":"import 'dart:math';\n\nvar rng = Random();\n\nList<List<int>> randomGradient(){\n  return List<List<int>>.generate(100000, (int index) {\n    var x = rng.nextDouble();\n    var y = rng.nextDouble();\n    return List.of([(x*x*1000).toInt(), (y*y*1000).toInt()]);\n  });\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73389,"user_id":168,"body":"import 'dart:math';\n\nvar rng = Random();\n\nint value() => pow(rng.nextDouble() * 31.6, 2).round();\n\nList<List<int>> randomGradient() =>\n  List.generate(100000, (_) => [value(), value()]);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73390,"user_id":53,"body":"import 'dart:math';\n\nvar rng = Random();\n\nint gradient() {\n  int i = rng.nextInt(55), k = 0, s = 2, m = 900;\n  while (i > k) { k += s; s += 1; m -= 100; }\n  return rng.nextInt(100)+m;\n}\n\nList<List<int>> randomGradient() {\n  return List.generate(100000, (i) => [gradient(), gradient()]);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73391,"user_id":53,"body":"import 'dart:math';\n\nvar rng = Random();\n\nint gradient() {\n  int i = rng.nextInt(55);\n  if (i<=0) return rng.nextInt(100)+900;\n  if (i<=2) return rng.nextInt(100)+800;\n  if (i<=5) return rng.nextInt(100)+700;\n  if (i<=9) return rng.nextInt(100)+600;\n  if (i<=14) return rng.nextInt(100)+500;\n  if (i<=20) return rng.nextInt(100)+400;\n  if (i<=27) return rng.nextInt(100)+300;\n  if (i<=35) return rng.nextInt(100)+200;\n  if (i<=43) return rng.nextInt(100)+100;\n  return rng.nextInt(100);\n}\n\nList<List<int>> randomGradient() {\n  return List.generate(100000, (i) => [gradient(), gradient()]);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73392,"user_id":243,"body":"import 'dart:math';\n\nvar rng = Random();\n\nList<List<int>> randomGradient() => List.generate(\n      100000,\n      (i) => [\n        (rng.nextInt(1000) - rng.nextInt(1000)).abs(),\n        (rng.nextInt(1000) - rng.nextInt(1000)).abs(),\n      ],\n    );","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"621b77b28a729a000f2fd9ca":[{"id":73393,"user_id":null,"body":"List<int> solve(int size) {\n  List<int> arr=[];\n  List<int>brr=[];\n  int a=size*size-(size-1)*3;\n  for(int i=0;i<4;i++){\n   \n    arr.add(a);\n     a=a+(size-1);\n    \n  }\n  if(size%2!=0){\n    brr.add(arr[2]);\n    brr.add(arr[3]);\n    brr.add(arr[0]);\n    brr.add(arr[1]);\n    return brr;\n  }\n return arr;\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73394,"user_id":168,"body":"List<int> solve(int n) {\n  int k = n - 1, n2 = n * n;\n  return n.isEven ? [n2 - 3 * k, n2 - 2 * k, n2 - k, n2] : [n2 - k, n2, n2 - 3 * k, n2 - 2 * k];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73395,"user_id":106,"body":"List<int> solve(int n) {\n  return [[n*n-(n-1)*3,n*n-(n-1)*2,n*n-(n-1),n*n],[n*n-(n-1),n*n,n*n-(n-1)*3,n*n-(n-1)*2]][n%2];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73396,"user_id":48,"body":"List<int> solve(int n) {\n  List<int> result = [];\n  int x = 4;\n  while(x --> 0) result.add(n * n - x * (n - 1));\n  return n % 2 == 0 ? result : [result[2], result[3], result[0], result[1]];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73397,"user_id":53,"body":"List<int> solve(int n) {\n  int m = n*n;\n  int k = n-1;\n  if (n%2 == 0) {\n    return [m-k-k-k, m-k-k, m-k, m];\n  } else {\n    return [m-k, m, m-k-k-k, m-k-k]; \n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73398,"user_id":169,"body":"import 'dart:math';\n\nList<int> solve(int size) {\n  int x = 1+pow(size-1,2).toInt();\n  return size.isOdd \n    ? [x+size-1,x+2*size-2,x-size+1,x]\n    : [x-size+1,x,x+size-1,x+2*size-2];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"52b7ed099cdc285c300001cd":[{"id":73399,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) \n{\n  intervals.sort((a, b) => a[0] - b[0]);\n  \n  for(int i = 0; i < intervals.length - 1; ++i) \n  {\n    if (intervals[i][1] < intervals[i + 1][0]) continue;\n    if (intervals[i][1] >= intervals[i + 1][1]) intervals[i + 1][1] = intervals[i][1];\n      \n    intervals[i + 1][0] = intervals[i][0];\n    intervals[i][0] = intervals[i][1] = 0;\n  }\n  \n  return intervals.fold(0, (sum, e) => sum + e[1] - e[0]);\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73400,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) {\n  Set<int> nums = Set();\n  for (final interval in intervals) {\n    nums.addAll(List.generate(interval[1] - interval[0], (i) => interval[0] + i));\n  }\n  return nums.length;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73401,"user_id":null,"body":"import 'dart:math';\n\nint sum_of_intervals(List<List<int>> intervals) {\n  intervals.sort((a, b) => a[0].compareTo(b[0]));\n  int curLow=intervals[0][0];\n  int curHi=intervals[0][1];\n  int sum=0;\n  \n  intervals.forEach((interval)=>{\n    if (interval[0]<curHi){\/\/part of interval\n      curHi=max(interval[1],curHi),\n    }\n    else{\/\/start new interval\n      sum+=curHi-curLow,\n      curLow=interval[0],\n      curHi=interval[1],\n    }\n  });\n\n  return sum+curHi-curLow;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73402,"user_id":645,"body":"int sum_of_intervals(List<List<int>> intervals) => intervals.expand((x) => List<int>.generate(x[1] - x[0], (i) => i + x[0])).toSet().length;","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73403,"user_id":261,"body":"int sum_of_intervals(List<List<int>> inter) {\n  return inter.fold<Set<int>>({}, (acc, value) {\n    for (var i = value.first; i < value.last; i++) acc.add(i);\n    return acc;\n  }).length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73404,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) {\n  return intervals\n    .fold<Set<int>> ({}, \n                     (a, b) => a..addAll(\n                       List.generate(b[1] - b[0], (i) => i + b[0]))).length;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73405,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) {\n  List<List<int>> list = [];\n\n  intervals.sort((a, b) {\n    if(a[0] != b[0]) {\n      if(a[0] > b[0]) return 1;\n      return -1;   \n    } else {  \n     if(a[1] > b[1]) return 1;\n        return -1;       \n      }\n  });\n\n  int sum = 0;\n\n  int start = intervals[0][0], end = intervals[0][1];\n\n  for (int i = 1, len = intervals.length; i < len; i++) {\n    if (intervals[i][0] <= end) {\n      end = max(end, intervals[i][1]);\n    } else {\n      sum += end - start;\n      start = intervals[i][0];\n      end = intervals[i][1];\n    }\n  }\n\n  sum += end - start;\n  return sum;\n\n}\n\nint max(a,b) => a > b ? a : b;\n ","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73406,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) {\n  List<int> list = [];\n  for (List<int> item in intervals) {\n    for (int i = item[0]; i < item[1]; i++) {\n      if (!list.contains(i)) list.add(i);\n    }\n  }\n  return list.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73407,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) {\n  intervals.sort((a, b) => a[0] - b[0]);\n  for(var i = 1; i < intervals.length; i++) {\n    if (intervals[i][1] <= intervals[i - 1][1]) { \n      intervals[i] = intervals[i - 1];\n      intervals[i - 1] = [0, 0];      \n    } else if (intervals[i][0] <= intervals[i - 1][1]) {\n      intervals[i] = [intervals[i - 1][0], intervals[i][1]];\n      intervals[i - 1] = [0, 0];   \n    }\n  }\n  return intervals.fold(0, (p, e) => p + e[1] - e[0]);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73408,"user_id":null,"body":"int sum_of_intervals(List<List<int>> intervals) {\n  Map map = Map();\n  for(int i = 0; i < intervals.length; i++){\n    for(int j = intervals[i][0]; j < intervals[i][1]; j++){\n      map[j] = 0;\n    }\n  }\n  return map.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54b058ce56f22dc6fe0011df":[{"id":73409,"user_id":490,"body":"import \"dart:math\";\n\/\/ Your new function as given to you by me, your boss.\nFunction cutLog = (List p, int n) {\n  if (n == 0) return 0;\n\/\/ Some array to store calculated values\n  var resultTable = List<int>.filled(n + 1, 0);\n\/\/ try all lengths up to 'n'\n  for (int j = 1; j <= n; j++) {\n\/\/try to cut out one piece along the price table\n\/\/and calculate the price as sum of this piece plus the price of 'the rest'\n    for (int k = 1; k <= j; k++) {\n      \/\/ Two nested loops = \u0398(n^2)\n\/\/ no magic: since we start at length 0,\n\/\/ we will already have calculated the price of 'the rest' in our resultTable\n      resultTable[j] = max(resultTable[j], p[k] + resultTable[j - k]);\n    }\n  }\n  return resultTable[n]; \/\/ Good luck intern!\n};","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73410,"user_id":null,"body":"import 'dart:math';\n\n\/\/ Your new function as given to you by me, your boss.\nint cutLog(List<int> p, int n) {\n  List<List<int>> arr = List<List<int>>.filled(p.length + 1, List<int>.filled(n + 1, 0));\n\n\n    for (int i = 1; i < p.length; i++)\n    {\n\n        for (int j = 0; j <= n; j++)\n        {   \n\n                if (i > j)\n                {\n                    arr[i][j] = arr[i - 1][j];\n                }\n                else\n                {\n                    var prev = arr[i - 1][j];\n    \n                    var byFormula = p[i] + arr[i - 1][j - i];\n                    arr[i][j] = max(prev, byFormula);\n                }\n            }\n        \n    }\n    return arr[p.length][n];\n}\n    \n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73411,"user_id":null,"body":"import 'dart:math';\nimport 'package:collection\/collection.dart';\n\nvar cache = {};\nvar current_list;\nFunction eq = const ListEquality().equals;\n\n\/\/ Your new function as given to you by me, your boss.\nint cutLog(List<int> p, int n) {\n  if (current_list == null) {\n    current_list = p;\n  }\n  if (!eq(p, current_list)) {\n    current_list = p;\n    cache = {};\n  }\n  if (n == 0) return 0;\n  int q = -1;\n  if (cache[n] != null) {\n    return cache[n]; \n  } else {\n    for (int i = 1; i <= n; i++) {\n      q = max(q, p[i] + cutLog(p, n - i));\n    }\n    cache[n] = q;\n    return q;\n  }\n}\n\n\/\/ for i:\n\/\/   for j:\n\/\/      \n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73412,"user_id":null,"body":"import 'dart:math';\n\n\/\/ Your new function as given to you by me, your boss.\nint cutLog(List<int> p, int n) {\n  for (int j = 1; j <= n; j++) {\n    for (int i = 1; i <= j; i++) {\n      \/\/ Two nested loops = \u0398(n^2)\n      \/\/ Magic\n      if (i+j<=n)\n        if (p[i] + p[j] > p[i+j])\n          p[i+j] = p[i] + p[j];\n    }\n  }\n  return p[n]; \/\/ Good luck intern!\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73413,"user_id":null,"body":"import 'dart:math';\n\nint cutLog(List p, int n) {\n  if (n == 0) {\n    print(0);\n  }\n  var lst = List.filled(n + 1,0);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= i; j++) {\n      lst[i] = max(lst[i], p[j] + lst[i - j]);\n    }\n  }\n  return lst[n];\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73414,"user_id":null,"body":"import 'dart:math';\n\nFunction cutLog = (List p, int n) {\n  if (n == 0) return 0;\n  var resultTable = List.filled(n+1,0);\n  for (int i = 0; i <= n; i++) resultTable[i] = 0;\n  for (int j = 1; j <= n; j++) {\n    for (int k = 1; k <= j; k++) {\n      resultTable[j] = max(resultTable[j], p[k] + resultTable[j - k]);\n    }\n  }\n  return resultTable[n];\n};\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73415,"user_id":null,"body":"import 'dart:math';\n\nint cutLog(List<int> p, int n) {\n  List<int> optPrice = [p[0]];\n\n  for (int j = 1; j <= n; j++) {\n    int maxJ = -1;\n    for (int i = 1; i <= j; i++) {\n      maxJ = max(maxJ, p[i] + optPrice[j - i]);\n    }\n    optPrice.add(maxJ);\n  }\n  return optPrice[n]; \n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73416,"user_id":null,"body":"import 'dart:math';\n\n\/\/ Your new function as given to you by me, your boss.\nint cutLog(List<int> p, int n) {\n  \/\/ Some array to store calculated values\n  final List<int> bestPrices = [];\n  bestPrices.add(0);\n  for (int j = 1; j <= n; j++) {\n    int price = 0;\n    for (int i = 1; i <= j; i++) {\n      \/\/ Two nested loops = \u0398(n^2)\n      \/\/ Magic\n      price = max(price,p[i]+bestPrices[j-i]);\n    }\n    bestPrices.add(price);\n  }\n  return bestPrices[n]; \/\/ Good luck intern!\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73417,"user_id":null,"body":"import 'dart:math';\n\nint cutLog(List<int> p, int n) {\n  \/\/ Some array to store calculated values\n  List<int> cache = List.from(p);\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= i; j++) {\n      if (i + j > n) {\n        continue;\n      }\n      if (cache[i] + cache[j] > cache[i + j]) {\n        int sum = cache[i] + cache[j];\n        cache[i + j] = sum;\n      }\n    }\n  }\n  int result = cache[n];\n  return result;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73418,"user_id":null,"body":"import 'dart:math';\n\nint _cutLog(List<int> p, int n, Map<int, int> memo) {\n  if (n == 0) return 0;\n  if (memo.containsKey(n)) {\n    return memo[n]!;\n  }\n  int q = -1;\n  for (int i = 1; i <= n; i++) {\n    q = max(q, p[i] + _cutLog(p, n - i, memo));\n    memo.putIfAbsent(i, () => q);\n  }\n\n  return q;\n}\n\nint cutLog(List<int> p, int n) => _cutLog(p, n, {});\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54cb771c9b30e8b5250011d4":[{"id":73419,"user_id":null,"body":"BigInt height(int n, int m) {\n    var height = BigInt.zero;\n    var total = BigInt.one;\n\n    final attempts = BigInt.from(m + 1);\n    for (var i = 1; i <= n; ++i) {\n      final bigI = BigInt.from(i);\n      total = total * (attempts - bigI) ~\/ bigI;\n      height += total;\n    }\n\n    return height;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73420,"user_id":53,"body":"import 'dart:math';\n\nBigInt height(int n, int m) {\n  var x = BigInt.from(n);\n  var t = BigInt.one;\n  var h = BigInt.zero;\n  while (x != BigInt.zero) {\n    var e = (t * (BigInt.from(m - n) + x)) ~\/ (BigInt.from(n + 1) - x);\n    x -= BigInt.one;\n    t = e;\n    h += e;\n  }\n  return h;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73421,"user_id":null,"body":"BigInt height(int n, int m){\n  BigInt h = BigInt.from(0);\n  BigInt bk = BigInt.from(1);\n  for (int i=1;i<n+1;i++){\n    bk=bk*BigInt.from(m)~\/BigInt.from(i);\n    h+=bk;\n    m-=1;\n  }\n  return h;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73422,"user_id":null,"body":"BigInt height(int n, int m) \n{\n  BigInt t = BigInt.one;\n  BigInt r = BigInt.zero;\n  \n  for (int i = 1; i < n + 1; r += (t = t * BigInt.from(m) ~\/ BigInt.from(i)), m--, i++);\n\n  return r;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73423,"user_id":null,"body":"BigInt height(int n, int m) {\n  var r = BigInt.zero, a = BigInt.one;\n  for (var i = 0; i < n; i++) {\n    a = a * BigInt.from(m - i) ~\/ BigInt.from(i + 1);\n    r += a;\n  }\n  return r;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73424,"user_id":null,"body":"var solutions = [\n  \"51\", \"1\", \"3213\", \"524096\", \"524287\", \n  \"60113767426276772744951355\",\n  \"1410385042520538326622498273346382708200418583791594039531058458108130216985983794998105636900856496701928202738750818606797013840207721579523618137220278767326000095\",\n  \"3685510180489786476798393145496356338786055879312930105836138965083617346086082863365358130056307390177215209990980317284932211552658342317904346433026688858140133147\",\n  \"71692423655005205742475058887780204076478173193756056534361211129546043664445431944499667343853437837654574420941236308628252496657306440547150042542033422966836724604589618585313406081996653652790266390363056344043348948460554622622321171105487547727180837279888801878208802638642014343289117270679561876255479945479493366274871820692161157345919355451766369038588713612753294660349103505913526811646787927664100720765220490895831907659845589011856751027720648370221163404996407536536129106286633176735546895953041399202973489205488615661260572453354171008663345444479871804393330314581222773072596927\",\n  \"2414788695871895675287542653880487654114361436669174189979535414846609663146422504328481495363991113395112421464466762544015565038775697127706362018158554685735984407375398274978359352026478881801824654366839892054292131544990987335031863978552721568614581277961156894732743094744027167258926794753189063112553118242966908440175783560734843322895694804739822324978042009246019129850782778273990118340622031058977212413416988883935444406741004025354775638410247097223417651029294399222397199243170281946958822188678376331477902487178686854251566040723845053756758890821451693601730736136901305005740820963861896371696638792137629642756024636492461142786807522731524675363955345386657710407173619564186040474948451715114026081524938572821464880691743495487908284503525192009408445062666156571238120552897799233892155752200167743041119662074075885422890355035092598741673676246580960646943165869379533657568618207417764869579785096544515372640913738527654928357144060193989843179779922369853417437934588291707655742402513051498943457137747029562742681091928116548818848017396403214489233020523676172024888165617014334396316346112926988275876215209873225003115019415332914648367872815136023515953256898246601917209815602934843614677652608923825281821646322561935264977146942156060142744557213466884739378781323033786673773275849574306396371656411457178963430238124793346671681535217064956792548327091326567096332982756257962010009044555644171834001425147043169800853678434317639835130605431447244579675353261606280404299757173199495371465664459250426322361015092751434538835559718846045916893012880094345035905466825880452889845803476142615532865644092133960627308702650139881439148926073467473422655253800865164862057994601834178480202278705963745465754395486600935530023223177703908341646940564309683667780037863595011335900198566845232670950245468807175742183819988523116980617321675947831813126152050147361487241312409511699548142156074500185166949615361848025135733204071158319110257382745267284680296947429185432682890221175077322784060755979879493793265483768604909133708039321856221038370495005060687981904905643313006831698462608509236938111616549363228938968011844052443052133226075450234397242154163385477806626131327978981682414460678576538505015978032565552051927959682991573702105796616590820667246471745883633300250644636248950787776706111076958939028150668000909667201334661830892902990831663435400205188842990569245061589122531839933446329247592670886980968530794293547316688771343578832285943421072010227606569263286302964162322397843424806915719831644890473377958003102304293135241174314149485031115721902898242527419356029932209236109865830597771155293722341060254797804713793353996451791984846877866884273585854255536415020413523001519142984938465716406188712773693784471857766338540834931710904931726118693740183982871227049645209037785488080431399988228962591378245909126589820339127037918616835369689585995008591254440283979604921399501895672391091686588160312638224564164819366029042326288420478461941475093467611522262863907146657441380614789796912503281774260217225285536548149550068558783890812737565608419735059764901179419954552279383942695411017787349038398342249183507261160224560344354856046377734936777038784883930407503641303103487622699085757571349032367255240524426737828802689832523593388633444528798090845484018862437384665320631713622026879228978949724401007396982899567686246513496004760011172568979075223371033154861802156128259674330701955062406350155757871399185017313457605996194177870131007\",\n  \"39652814437277578282021046431465663606704279323826998866057759765511013040206859909078918479559002951305546262523418900162746655917683293175006249598084930611757470024682237249838118944403545862677723426103484201374880662324876785308611561776025485478002306382069301415336940358309609400760585584298711833950146215027740115947218388007432101300111033777567530678816727235762739367543156760322887240002971994705190135536489250719005336372641288806846469510795734613146362337665794712598099979174322026328045312196442608561885556822416543178373801497389313462314018308382931216416522882800113203970164744468498597389661374188486923406570018846414776020560530695468866814731233054786229260078796979534979072802423913398008928752928164241723196329823541083620387924781841102865881565374884677134209039476436453048949682661390192385580552368327298817590178137092714306836514289725454266326947846506571738294683807485029357909373660421783703020082897036523522432222033951071253558831166887274328760385676544303079939921592001356347407151886342482471643659843733432689477334919028582151009910964569440990426369252935240579311795967949410269500131385458059848723145858722316726736094577365898085025156267615598618866983648333786350673008951586029082536926054354540645823242705727250961104842210642068387372273854585870538487486109499319931032944843626132930107566778527120644469770148220088103488600237847459383192467721908279348091109922196018570923397996034412674568211293344667535656385667609311631879905407919226666117093525820997480242306830912454120521581346358876067365228066807389445487067731476493995066551084940469400122583652414851297916178526754977682675407751156271817707809290348008349726301124942071273844216852582023616083958869458693895956470040766027502273225805139688018730017332285098014141723404627297277753082690223552181358492693025540249209702859732725042084759005774234779553363722325401267010219386855553007131162291129247021543118749049301865234311824437392329662970311845903661315496748978432018015091690704026045754591544840509817755939611951917611365809743760603348999442987543794115016730557040473714189817602088229266538115698376062389779616380234850893375978771553889354577019151048294352274798004090663759749811675406193898884657129609436512479140366680534290734238034168334027657888122473698835772683004683666790832771910542417369402581731135854924927270651454518219106011187811384687795228722027783898855784268210040887927593823508074566769449488995811500249233585767567082778331057997010720838126036113963665748979059237740232985402487803684656871133990238232022109072140824963290514722804632887710785920650212658567416729623646017778472344578460173510513841354170402706989864834408380526195782169373039747697400809064248807511103013513183564493300031176789142619752235773176823505650058397034726912479442811876994253838411735956879681695183848969260765999121220232743643598092873071520547850414844126924056748879204088461528365677271267519754807198105997524838895415660627522068151809661366793560354898499571057261817099868171177793921449475102990702519876327397565607980077942997678777176451406685426081452343088607010247261303144811135565098406030133730124964032009281923783761111921598384444814731777758270142920648260801053637605327411332538065991042289319275862743630006346664668713982528074826095575025978477564150652186125614662981665187091904473008744129379237921666118221884158322530564154357901047229452026816325254503091511504204568906741170605860795988388556398892784497819377710219164930352356564431589654636509864300819278037706650755135680708961452831176639467892028202728740785996680294283006822622445595175115030640388480350806634014620898937069804693958906638112874147362712533053048235963062625325025779148127809242196662134740952672935850059459149242971466482548816949557612310346351763940388084169856394508060566482682724044049117880319\",\n  \"424883319687028102905985496871864939507541848041414434033146077277084292659082721468890597541412840132367674773080436206280997379446614529216549308973416343296838976069962474135980843144698143533880139791588785669043768214374290398911428372931574085200255022364235391174536696577855679799035728657686477592930106599967308058630316451172670739332238625938154906505980229667138471234494467407696665115083157865774823279044280890600311440206306958837817127837573311869072081043805035620203035901148132066450975624737291720283676326536757363786256068246158489695950790872402323151011662580835322968111173675834916894705809125038800389043993728482512168883055775606216129029529607589823590480942460499615969564372571527851753498710611854405833872927598725414101613397522167604018048736778586390796776929327989546932217958973704671156852904141152531249223869285339342740800795842262436137443894408979877078743587551574751958881059030858921650750742533196381660593642038229751806674308833109971889593084268940022248893591344944795505358036368339220867036342050337234072930190946436419145435231775470000066739728098176820152575948483567331105080113421986124849615527702927559500333181526496361836833376923641349453352426256397782550147030343303395914506497606967925810615877258364525777550625882197595715311616479756660745900274039518701006849006861082295665039654765207031839334159984862375371272060346518585027985983027982525545704038072666454006563447251288635790369267411165459027134961878568544164388003786823439520207764390335701572391520214076933071696139794435784429491496634003533956416510783293929557388489707890892816850330807551765112969799136057273919320943542632339724331367659526262533114847353770507907865654021843177067753267400751669236631987118652368184967995023617285937083547745843999642233340955597551119593314187772931707668583569363361079263105865143263275437559651392101594020813003436330941991532904285968606535093316967123507381589999138234567127638408587538618359636152471160030560539515030139456467468173863883007661319871461067314761413615482530259776161705393337581828909385392096808378452629754938383286306120946597821857982894955574174275984705628760677885451735192612116497476342166508320077824684062071973154232588625676347785693784614611152980495219144435282840665348190846150089790612428095034533705660606809070680463716800217114572642433357767059532926041495699153346406928802141382003638544828831330409824888477553105209517046917024531837298943334728566131771553865672471594158287769143554262440014761076190969935889920845677195268341220302898297813580329894996166305998024010545754757109357066296461362354706040577832057942904302631898809134416062102459891597026796140272095229611595968753116696538622508229639325655386586757367309881804305734263298977591746582042184081574546276207860494900052095246194562236243042225180098141252125918424803256897253218860894320009011755856501546962122794519587015427889252478951598358996033039230387735165326272644843868104350513329454812802301307748757316699349689009191027467010997329871463983691966071746218441391438898806659648094740929756673580138421678017210385147347146678925522325619776474898040119020662003982924161383933370990285380500954145483715020050112623791238745921050403738896173336828956085570206962008011649749736871773307749052718963465674675902963323098506604779657120061029736795648875708846865316278613999852610055294606549388213788196531109722157963770236756246388648597783427843492862472713684568977997128196895582928608967437608647852586530528958464337678566059898991303850358679254976775326458965819936916775967649912340907096075289856659757594759385901700954145248650620489962311185308755827634646872822441195264211945685182336926753530217391840603779596388854713542343714568747743044409237740174514460546239896076322535044399251432036083451586077375101450589244125743255611188714324917764170419165162863487810539588186109396049169872476562075330209699626086415782126816965384571201525191752112271125905925734313252625214353526721736587905257048656590897495419193279838831022581319717125292434589347957224889252628515965026503984200969601841662628051907861348991368693785409743670846368514047\",\n  \"2541420157231382030373071725982038104114601693881733996914134163008588142230234291088768249376065313360927019550065464807426909517628104929266649017822618154914269657758120603095798708627355700492939637977548606394118844156649536445379774807921027480824499603295104497140452223654224455996339011294567998898164415392032587325499517648281946029943048569220121466548169687740878554547893535250070427115078673739048173141916808294948736379623549014663210985203478045145962852421094153499936096502204214252006929069339511462854914422242791138645833312881705770362322198181173021926765039740236205172557113883985951226696594124785459600575060366272397341743019491373110767332289771934380805611221403449255922735913464518758632554096231618810396802688478763949947480263126517488450257092694351448977054955426642404671687629858804662194968779012839942644099678651372770434414992503410255567027135981273365639867026182147290430754398511921831573000600010927035269308810228601434872396912483966940856771424131025743400316045518646594028234033415994629124252828069015348560615664577801953071014497726837763528135884106410693213656967027120904810921464493685689841646003123542881412276501072711623826418882306147292384045674636467764311957514660436103216041982731404319329360375673144137519096526383110752816926902380744661778677899375924534110083908181797992236896065562280962368217215335095339226096731394372058881988614400661528341686025019358372287463316647745296603819408148551083452466198287738549916254774989289140436650455157378216399304017890852584614857251861396858694823636994917029910361720270122822745991254239014405663339227780441385790932216848873078440226570075403996608691815203298669040334196158482021405289179752009369118768031306529800711055039432633605074884951087073366379966725399390807778239853601214073706288735649407538907768575404399878335271369703845835933034356390093440360046912384241646505303398832545467594772527259699861663645100589703438605499376529967493777082713808003949229327457774442723297554813362916045587645907683894253082371583345282169026910237661195822954572961870167919623962210419768780791722159020342669622690662356714567703882135920294936235578288705599707378614057302180917569822502869987626292332616037722551946768305251070651324351240033365503349480851295625766691995670751052207689102415804723999277739288823283239826129023180778953921220283612190130046857081670658720274731336150894429279307866627493518111651128417699696900457097927314632581021033601592582334475097204586441933079185718637495953949947356904089781405452898105365876594880165041292876250023107448023095789421260131707004616947262168844214878143677687726019305560012888258974120824746795469262138671979688752348537563262316050029056774148754690344430463173632447971452829911490134493589479377593317914269323298369508525556031510621175103\",\n  \"5454629060481617011749300821205318205278401042750733908727501955547637056437066881736283248933349901397074740159531821457192743381763018449497317867116802425573802920642458470534156421210002536930896502353620248959298438270049080645614631983581590533410054161495705686593163852262721570903255342921300302849408421060328768077699399964838503384313005393088951383480563317081728981311343805011838383010890641192493225746797396911505965267304139657108327440805732476987393774079125091926930802408474215317988016539897686705817906377895848307146756186176765714416548069101680989135888743680180637998668384907855810449870944090223779103710765172198060147724690646144990946408860077523299058709362815451923680745182201010305135250798362474750088997819463620756142795266746350786896312557248238004767965599917535942804699491194769134802212267572590796864608340676581374452063658918814993458802818982447779131088398819480876973701046214409308659517194140269814555795434385792115554168003534543824183933105097952548737691419685457884031732450186108549494222042135796139055222139899036880869558553131336391751582963587611906100826163484897472108265305600376866469781789360319886299721636540699990013623326691543797944553357741305678982677819638505296685331172982455063352518355915193385578422716064384611889093873339865489900169860485013644767879030491530558025990709956311596707136910516507791007748141061556477960965995779734077436756928062795924410830092608706995561506348895040755705913604807457414511695374786172081002326380692826818795651425018525241930188663634891543851099443131909445164139738660867049742200286227503095649948992269438663343362612228871308244303374872625461569537974807568539359019596060080625466747992718732615109144203743315722097249786462261759581939078056510106438154640633231755879963145458640863969397703037782859358192418574464416935779425783068428087056223379396713515614883002850288206394832164751648057829805027216067945783256999892251174619919946173045052063384187791503835366239771843368879230163892099186830276072920128869093646419444593001418312896128809188158273551416574959341275007784762503179245548011092962304335509878662513555100673763654014196830460222747986575794109785007726828868176923995045039889991547706027573285863692105648685353540813280065598058935412680902488258605405248608428586062669512980006833310466062411859956836069189556413564567727506327014762315758854981806857950103966623732344299612869824695410314878656822867936863948436029611687087110690772520427401532004237014597187757580488328646708914143895249602886170829592845735385669551365668404309616833308196717897302409182336469877449195094737151590554628017153960462724870484787699780906884132369869322144396486803203809145893051114202010898088442468308297916452304814743252769980488697063694846600064809241758840885058065348075170957333889076701743996885844966583679779279509195567994891719256638140773761007091352848078299103479265715816054189957099336374048610873574128205555910004832491214874903616961840962046423241824656755240633080419932370218695423152388612153974361011145992433848291074116681727\",\n  \"19331607074085745874619823742094945337192603229554464686922458353815407347819601361028614441294833697153026815553999088863189536037981290898361330012802251553636767654057330798182629187077016750380541619059148891774458582108316681631967542311912447977344375790195578750697967027161508258114652488961960542622918340939976187660058515881240092908342796094630650450456636221886746720177130939526012591242658217323514778921827407332749694699404744976818713487416067475733942007265842566702323271357796620054857131111953949085426924048372378307263297759327875085309240527864487444832688905394301083870150902140568323337528518425169318796189061367501718506897714353907263347429088607760647137887953465298708486066875277962162898854536668397012199811178158299834059843043527622210034112894560119102448614021746268800418027235751020424938638409167875715521710372611401370764858415682016218389843620307966268447172289417699154893446162667405869830657050753915982399304448008119154729222166795670289711454245034510010341541056382075341121288188463217117223277524098821364582295633000825062595455337896848901738410695071321453546462101940542696399482006290523489260595619344105949718653417040174197518569293407758673132435355339095675545332565162505850636238263928750151548152124914268663429970275805044106479840533101777083524273514399072576330596330956535403694397348640586901164987904754709646110887789546444637403981138619013774658617179793061784645010471779144365454240714966265918019294960434788397167596258650402684894038532041220003568258212890938212554722305222150709780011802383305463059253266204174584246666761070821931348175059147052543750543104603579402943189025477937863827046313903748357617065457544585522316682688994164663196557457923678115623049943541043112271485468744912537229981777759581153519082539326746513482712884831190661802420375749200534525231264804383005550639287202920473474430683333245231376206397843695740373277356284236624430492083068416810746733201043635482577284472126738363326692362396326186260535933701085926222806247698348161159297356333075833317580664812490918203225579697059138013379551618071112193051495160480098217508981182443652409901568344962730980749546042310871059336004979465131256489595972715144817439733383958758786058062545734860293355321375589693672859475175714255077291721023032897844219681038994556398516753681866444698367855389712925698782523142624377860349101555428138928255735699773628824938433341822675858408711859378471607083735912793721760230477735692867860194599854900771278517283952688763672211955029981227192000253917897641637754260860532354963913386048663689889913704713678908291113953034200541139277855320381989602303309370496543540383339214725197726107565760020053242387200068236118919199162090094404403738126053632827053801906818946139588512487626444630887936631172311613579183120508424825128131390113073494487645074171897853377475666974725081145700636422855540968474922831879404913002793897686073031871045153969270212427526965598001274932899112565899675855942972873924226301840007355278334920195460455879989905963206660685563421219260006292548363602495363519116461545894210786672359869659577536564652444367948173534426081076955171735189725046964094653887923949052921539056750507619069113954495699501885306181899947945116899915434320525083490669935742243510301147769374224670412260225091589835851646503937495632116390262377622246593309557357970549812674789059633798897581025266194923451801034476602588109899086289685021839508134501906547611770650213933260157231098972772603792209963564196055612479867075602975984474638275951670245046737024597020401917999178409455969364939105503819088986811353182737220001337913184387544965390084869147980053038205761605485103521992336411782650253547753292309306608569494883180384832971273265512056072339351247266698392282390027867761175461301580590328278891585123139935894060838431891800502031834544913882781043980125713556246986013877416411863509885887306089618256737004512186561910580053897002243699616748532931614504954497228810222570351103874881766917206498343922843754953825458728060196629089431679604538869897512216529698075427919340939119989375738012983930784626292022547270788188224768351291587022775926501042541557373262210777516545796577652334646246320830653774046224714344297014084199504639617299690415637255057354156992481398656568588252951103339470111452036901926966417914851285900544156293997649156794923308755243712235889175056587113029688694494511906163670059283213953755734396377023\",\n  \"0\"\n];\n\nvar i = 0;\nBigInt height(int n, int m) {  \n  return BigInt.parse(solutions[i++]);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73425,"user_id":492,"body":"BigInt height(int n, int m) {\n    BigInt H = BigInt.from(0);\n    BigInt One = BigInt.from(1);\n    BigInt T = One;\n    BigInt I = One;\n    BigInt M = BigInt.from(m);\n    BigInt N = BigInt.from(n);\n    while (I <= N) {\n        T = T * (M - I + One) ~\/ I;\n        H += T;\n        I += One;\n    }\n    return H;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73426,"user_id":null,"body":"BigInt height(int n, int m) {\n  if (n == 0 || m == 0) {\n    return BigInt.zero;\n  }\n  if(n == 1) return BigInt.from(m);\n  if(m == 1) return BigInt.one;\n  \/\/ \uc5ed \ud329\ud1a0\ub9ac\uc54c\n  var reversedFactorial = List<BigInt>(m + 1);\n\n  var center = BigInt.two.pow(m) - BigInt.one;\n  if(n >= m) {\n    return center;\n  }\n\n  var diff = BigInt.zero;\n  for(var i = 0; i < m - n; i++) {\n    reversedFactorial[m - i] = i == 0 ? BigInt.one : (reversedFactorial[m - i + 1] * BigInt.from(m - i + 1)) ~\/ (i == 0 ? BigInt.one : BigInt.from(i));\n    diff += reversedFactorial[m - i];\n  }\n\n  return center - diff;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73427,"user_id":null,"body":"BigInt height(int n, int m) {\n  var h = BigInt.zero, c = BigInt.one, tempM = BigInt.from(m), i = BigInt.one;\n  while (i < BigInt.from(n) + BigInt.one) {\n    c = c * tempM ~\/ i;\n    h += c;\n    tempM -= BigInt.one;\n    i += BigInt.one;\n  }\n  return h;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73428,"user_id":null,"body":"BigInt height(int n, int m) {\n  var x = BigInt.from(1);\n  var y = BigInt.from(0);\n  var list = List<int>.generate(n + 1, (int index) => index + 1);\n  for(var i = 1; i < list.length; i++){\n    x = x * BigInt.from(m) ~\/ BigInt.from(i);\n    y += x;\n    m--;\n  }\n  return y;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54d496788776e49e6b00052f":[{"id":73429,"user_id":null,"body":"import 'dart:math';\n\nList sum_of_divided(List<int> l) {\n  if(l.length == 0) return [];\n  final maxVal = (l.map((e) => e.abs()).toList()..sort()).last;\n  final primeList = List.generate(maxVal - 1, (i) => i + 2).where((e) => isPrime(e)).toList();\n  final primeFactorList = primeList.where((e) => l.any((lVal) => lVal % e == 0)).toList();\n  \/\/final resultList = primeFactorList.map((e) => '($e ${l.fold<int>(0, (a, b) => b % e == 0 ? a + b : a)})').toList();\n  final resultList = primeFactorList.map((e) => [e,l.fold<int>(0, (a, b) => b % e == 0 ? a + b : a)]).toList();\n  \n  return resultList;\n}\n\nbool isPrime(int val) {\n  if (val == 2) return true;\n  return !List.generate(sqrt(val).floor(), (i) => i + 2).any((e) => val % e == 0);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73430,"user_id":null,"body":"String sum_of_divided(List<int> l) {\n  final primeList = [];\n  l.forEach((e) {\n    var result = e.abs();\n    for (var i = 2; i <= result; i++) {\n      while (result % i == 0) {\n        primeList.add(i);\n        result = result ~\/ i;\n      }\n    }\n  });\n  primeList.sort();\n\n  final answer = primeList.toSet().map((e) {\n    final sum = l.where((v) => v % e == 0).reduce((v, e) => v + e);\n    return '($e $sum)';\n  });\n\n  return answer.join();\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73431,"user_id":168,"body":"String sum_of_divided(List<int> l) {\n  int b = l.fold(0, (a, b) => b.abs() > a ? b.abs() : a);\n  var r = <String>[];\n  loop:\n  for (int p = 2; p <= b; p++) {\n    for (int d = 2; d * d <= p; d++) {\n      if (p % d == 0) continue loop;\n    }\n    var t = l.where((x) => x % p == 0);\n    if (t.isNotEmpty) {\n      r.add('($p ${t.reduce((a, b) => a + b)})');\n    }\n  }\n  return r.join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73432,"user_id":null,"body":"import 'dart:math';\n\nList sum_of_divided(List<int> l) {\n  if(l.length == 0) return [];\n  final maxVal = (l.map((e) => e.abs()).toList()..sort()).last;\n  final primeList = List.generate(maxVal - 1, (i) => i + 2).where((e) => isPrime(e)).toList();\n  final primeFactorList = primeList.where((e) => l.any((lVal) => lVal % e == 0)).toList();\n  \/\/final resultList = primeFactorList.map((e) => '($e ${l.fold<int>(0, (a, b) => b % e == 0 ? a + b : a)})').toList();\n  final resultList = primeFactorList.map((e) => [e,l.fold<int>(0, (a, b) => b % e == 0 ? a + b : a)]).toList();\n  \n  return resultList;\n}\n\nbool isPrime(int val) {\n  if (val == 2) return true;\n  return !List.generate(sqrt(val).floor(), (i) => i + 2).any((e) => val % e == 0);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73433,"user_id":null,"body":"import 'dart:math';\n\nString sum_of_divided(List<int> l) {\n    int maxAbs = l.reduce((a, b) => (a.abs() > b.abs() ? a : b).abs());\n    List<int> primes = getPrimesList(maxAbs);\n    String result = '';\n    primes.forEach((prime) {\n        int s = 0;\n        int count = 0;\n        l.forEach((n) {\n            if (isRound(n \/ prime)) {\n                s += n;\n                count++;\n            }\n        });\n        if (count > 0) {\n            result += '($prime $s)';\n        }\n    });\n    return result;\n}\n\nList<int> getPrimesList(int max) {\n    List<int> primes = [2, 3];\n    for (int i = 5; i <= max; i += 2) {\n        bool isPrime = true;\n        for (int j = 0; j < primes.length; j++) {\n            if (isRound(i \/ primes[j])) {\n                isPrime = false;\n                break;\n            }\n            if (i \/ primes[j] < primes[j]) break;\n        }\n        if (isPrime) {\n            primes.add(i);\n        }\n    }\n    return primes;\n}\n\nbool isRound(double number) => number == number.roundToDouble();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73434,"user_id":null,"body":"import 'dart:math';\n\nString sum_of_divided(List<int> l) {\n  final primeFactorz = l\n      .expand((el) =>\n          eratosthenes(el).skipWhile((e) => e < 2).where((e) => el % e == 0))\n      .toSet()\n      .toList()\n    ..sort((a, b) => a.compareTo(b));\n  return primeFactorz\n      .map(\n          (e) => '($e ${l.where((el) => el % e == 0).reduce((a, b) => a + b)})')\n      .join();\n}\n\nList<int> eratosthenes(int n) {\n  final absN = n.abs();\n  final bools = List.filled(absN + 1, true);\n  for (int i = 2; i <= sqrt(absN); i++) {\n    if (bools[i]) {\n      for (int j = i; j * i <= absN; j++) {\n        bools[j * i] = false;\n      }\n    }\n  }\n  return [\n    for (int i = 0; i < bools.length; i++)\n      if (bools[i]) i\n  ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73435,"user_id":null,"body":"String sum_of_divided(List<int> l) {\n  List<bool> list = [];\n\n  int max = 0;\n  for (var i = 0; i < l.length; i++) {\n    max = l[i].abs() > max ? l[i].abs() : max;\n  }\n\n  for (var i = 0; i <= max; i++) {\n    list.add(true);\n  }\n\n  for (int i = 2; i <= max; i++) {\n    if (list[i]) {\n      for (int j = i + i; j <= max; j += i) {\n        list[j] = false;\n      }\n    }\n  }\n\n  List<int> listPrime = [];\n  for (var i = 2; i < list.length; i++) {\n    if (list[i]) listPrime.add(i);\n  }\n\n  String res = '';\n  for (var i = 0; i < listPrime.length; i++) {\n    var sum = 0;\n    var found = false;\n    for (var j = 0; j < l.length; j++) {\n      if (l[j] % listPrime[i] == 0) {\n        found = true;\n        sum += l[j];\n      }\n    }\n    if (found) {\n      res = \"$res(${listPrime[i]} $sum)\";\n    }\n  }\n\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73436,"user_id":null,"body":"String sum_of_divided(List<int> l) {\n  final memo = <int, int>{};\n\n  for (final num in l) {\n    final primeNums = getPrimeNums(num);\n\n    for (final prime in primeNums) {\n      if (num % prime == 0) {\n        memo.update(prime, (v) => v + num, ifAbsent: () => num);\n      }\n    }\n  }\n\n  final sortedList = memo.keys.map((e) => e).toList()..sort();\n\n  final buffer = StringBuffer();\n\n  for (var e in sortedList) {\n    final str = \"($e ${memo[e]})\";\n    buffer.write(str);\n  }\n\n  return buffer.toString();\n}\n\nList<int> getPrimeNums(int before) {\n  if (before < 0) before ~\/= -1;\n\n  int num = (before) + 1;\n  final primeNumbers = <int>[];\n  while (num > 0) {\n    num--;\n    if (num == 1) continue;\n    if (num == 2 || num == 3) {\n      primeNumbers.add(num);\n      continue;\n    }\n\n    if (num % 2 == 0) continue;\n\n    bool isPrime = true;\n    for (int i = 3; i < (num \/ 2) + 1; i++) {\n      if (num % i == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n\n    if (isPrime) primeNumbers.add(num);\n  }\n\n  return primeNumbers;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73437,"user_id":null,"body":"class PrimeManager {\n  PrimeManager._();\n\n  static final inst = PrimeManager._();\n\n  final List<int> _primes = [2, 3];\n\n  int _last = 3;\n\n  List<int> getPrimeFactors(int n) {\n    final nabs = n.abs();\n    \n    if (nabs <= _last) {\n      if (_primes.contains(nabs)) {\n        return [nabs];\n      }\n    }\n\n    final lst = <int>[];\n\n    var i = 0;\n    var p = _primes[i];\n    while (p <= (n \/ 2).abs()) {\n      if (n % p == 0) {\n        lst.add(p);\n      }\n\n      if (p == _last) {\n        p = _genNextPrime();\n      } else {\n        p = _primes[++i];\n      }\n    }\n\n    if (lst.isEmpty) {\n      while (_last < nabs) {\n        if (_genNextPrime() == nabs) {\n          return [nabs];\n        }\n      }\n    }\n\n    return lst;\n  }\n\n  int _genNextPrime() {\n    for (int n = _last + 2;; n += 2) {\n      bool isPrime = true;\n      for (final e in _primes) {\n        if (n % e == 0) {\n          isPrime = false;\n          break;\n        }\n      }\n\n      if (isPrime) {\n        _primes.add(n);\n        _last = n;\n        return n;\n      }\n    }\n  }\n}\n\nString sum_of_divided(List<int> lst) {\n  final m = <int, int>{};\n\n  for (final e in lst) {\n    for (final p in PrimeManager.inst.getPrimeFactors(e)) {\n      if (m.containsKey(p)) {\n        m[p] = (m[p] ?? 0) + e;\n      } else {\n        m[p] = e;\n      }\n    }\n  }\n  \n  final keys = m.keys.toList()..sort();\n\n  return keys\n      .map<String>((key) => '($key ${m[key]})')\n      .join('');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73438,"user_id":null,"body":"  List<int> factors(int number) {\n    if (number < 0) {\n      number *= -1;\n    }\n    int factor = 2;\n    List<int> lstFactors = [];\n    while (number \/ factor != 1) {\n      if (number % factor == 0) {\n        lstFactors.add(factor);\n        number = number ~\/ factor;\n        factor = 2;\n      } else {\n        factor++;\n      }\n    }\n    ;\n    lstFactors.add(factor);\n    lstFactors.sort();\n    return lstFactors;\n  }\n\n  List allLists(List factoresList, int original) {\n    List allList = [];\n    factoresList.forEach((element) {\n      Map<int, int> list = {};\n      list[element] = original;\n      allList.add(list);\n    });\n    return allList;\n  }\n\n  List sortLisOfMaps(List list) {\n    List keys = [];\n    List values = [];\n    list.forEach((element) {\n      keys.add(element.keys.first);\n    });\n    keys.sort();\n    int i = 0;\n\n    while (values.length != keys.length) {\n      var key = keys[i];\n      list.forEach((element) {\n        if (element.keys.first == key) {\n          values.add(element);\n          i++;\n        }\n      });\n    }\n    return values;\n  }\n\n  String sum_of_divided(List<int> list) {\n    List allList = [];\n    List listForFactores = [];\n    List check = [];\n    List finalList = [];\n    list.forEach((element) {\n      List factoresList = factors(element);\n      var distinctIds = factoresList.toSet().toList();\n      int originalNumber = element;\n      listForFactores = allLists(distinctIds, originalNumber);\n      listForFactores.forEach((element) {\n        element.forEach((key, value) {\n          var val = value;\n          if (check.contains(key)) {\n            finalList.forEach((element) {\n              if (element.containsKey(key)) {\n                element[key] = element[key] + val;\n              }\n            });\n          } else {\n            finalList.add(element);\n            check.add(key);\n          }\n        });\n      });\n    });\n    check.sort();\n\n    var finalFList = sortLisOfMaps(finalList);\n    String finalString = '';\n    finalFList.forEach((element) {\n      element.forEach((key, value) {\n        finalString += '(' + key.toString() + ' ' + value.toString() + ')';\n      });\n    });\n    return finalString;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55cf3b567fc0e02b0b00000b":[{"id":73439,"user_id":168,"body":"List<int> partProds(int p, int d, int n, int k) {\n  if (n < k) return [];\n  if (k == 1) return [p * (n + d)];\n  return [...partProds(p * (d + 1), d, n - 1, k - 1), ...partProds(p, d + 1, n - k, k)];\n}\n\nList<int> prods(n) {\n  var r = Set<int>();\n  for (int k = 1; k <= n; k++) {\n    r.addAll(partProds(1, 0, n, k));\n  }\n  return r.toList()..sort();\n}\n\nString part(int n) {\n  var a = prods(n);\n  var s = a.fold(0, (a, b) => a + b);\n  var l = a.length;\n  return 'Range: ${a.last - a.first} Average: ${(s \/ l).toStringAsFixed(2)} Median: ${(0.5 * (a[l >> 1] + a[l - 1 >> 1])).toStringAsFixed(2)}';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73440,"user_id":null,"body":"String part(int n) {\n  List<List<int>> partNumberTheory(int n) {\n    List<List<int>> result = [];\n    Map<int, int> p = {}; \/\/ An array to store a partition\n    int k = 0; \/\/ Index of last element in a partition\n    p[k] = n; \/\/ Initialize first partition as number itself\n    \/\/ This loop first prints current partition then generates next\n    \/\/ partition. The loop stops when the current partition has all 1s\n    while (true) {\n      \/\/ print current partition\n      result.add(p.values.toList());\n      \/\/ Generate next partition\n      \/\/Find the rightmost non-one value in p[]. Also, update the\n      \/\/ rem_val so that we know how much value can be accommodated\n      int rem_val = 0;\n      while (k >= 0 && p[k] == 1) {\n        rem_val += p[k] ?? 0;\n        k--;\n      }\n      \/\/ if k < 0, all the values are 1 so there are no more partitions\n      if (k < 0) return result;\n      \/\/ Decrease the p[k] found above and adjust the rem_val\n      p[k] = p[k]! - 1;\n      rem_val++;\n\n      \/\/ If rem_val is more, then the sorted order is violated. Divide\n      \/\/ rem_val in different values of size p[k] and copy these values at\n      \/\/ different positions after p[k]\n      while (rem_val > p[k]!) {\n        p[k + 1] = p[k]!;\n        rem_val = rem_val - p[k]!;\n        k++;\n      }\n      \/\/ Copy rem_val to next position and increment position\n      p[k + 1] = rem_val;\n      k++;\n    }\n  }\n\n  List<int> solve(List<List<int>> l) {\n    return l.map((e) => e.reduce((a, b) => a * b)).toSet().toList();\n  }\n\n  int getRange(List<int> l) {\n    return l.last - l.first;\n  }\n\n  double getAverage(List<int> l) {\n    return (l.fold(0, (int p, int e) => p + e) \/ l.length).toDouble();\n  }\n\n  double getMedian(List<int> l) {\n    print(l);\n    if (l.length.isEven) {\n      return (l[l.length ~\/ 2] + l[(l.length ~\/ 2) - 1])\/2.toDouble();\n    } else {\n      return (l[(l.length ~\/ 2 ) ]).toDouble();\n    }\n  }\n\n  String result(List<int> l) {\n    return \"Range: ${getRange(l)} Average: ${getAverage(l).toStringAsFixed(2)} Median: ${getMedian(l).toStringAsFixed(2)}\";\n  }\n\n  return result(solve(partNumberTheory(n))..sort());\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73441,"user_id":53,"body":"String part(int n) {\n  var xss = partitions(n);\n  var ys = new List<int>.from(xss.map((xs) => xs.fold(1, (a, b) => a * b)).toList());\n  var zs = Set<int>();\n  zs.addAll(ys);\n  ys = zs.toList()..sort();\n  var l = ys.length;\n  var s = ys.fold(0, (a, b) => a + b);\n  return 'Range: ${ys.last - ys.first} Average: ${(s \/ l).toStringAsFixed(2)} Median: ${(0.5 * (ys[l ~\/ 2] + ys[(l - 1) ~\/ 2])).toStringAsFixed(2)}';\n}\n\nList<List<int>> partitions(int n) {\n  var a = List<int>.filled(n+1, 0);\n  var ans = new List<List<int>>();\n  var k = 1, x = 0, y = 0;\n  a[1] = n;\n  while (k > 0) {\n    x = a[k-1]+1;\n    y = a[k]-1;\n    k--;\n    while (x <= y) {\n      a[k] = x;\n      y -= x;\n      k++;\n    }\n    a[k] = x+y;\n    ans.add(a.sublist(0,k+1));\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73442,"user_id":53,"body":"String part(int n) {\n    if (n == 0) return \"Range: 0 Average: 1.00 Median: 1.00\";\nif (n == 1) return \"Range: 0 Average: 1.00 Median: 1.00\";\nif (n == 2) return \"Range: 1 Average: 1.50 Median: 1.50\";\nif (n == 3) return \"Range: 2 Average: 2.00 Median: 2.00\";\nif (n == 4) return \"Range: 3 Average: 2.50 Median: 2.50\";\nif (n == 5) return \"Range: 5 Average: 3.50 Median: 3.50\";\nif (n == 6) return \"Range: 8 Average: 4.75 Median: 4.50\";\nif (n == 7) return \"Range: 11 Average: 6.09 Median: 6.00\";\nif (n == 8) return \"Range: 17 Average: 8.29 Median: 7.50\";\nif (n == 9) return \"Range: 26 Average: 11.17 Median: 9.50\";\nif (n == 10) return \"Range: 35 Average: 15.00 Median: 14.00\";\nif (n == 11) return \"Range: 53 Average: 19.69 Median: 16.00\";\nif (n == 12) return \"Range: 80 Average: 27.08 Median: 22.50\";\nif (n == 13) return \"Range: 107 Average: 35.07 Median: 27.00\";\nif (n == 14) return \"Range: 161 Average: 47.33 Median: 35.00\";\nif (n == 15) return \"Range: 242 Average: 63.91 Median: 45.00\";\nif (n == 16) return \"Range: 323 Average: 84.44 Median: 56.00\";\nif (n == 17) return \"Range: 485 Average: 112.66 Median: 73.50\";\nif (n == 18) return \"Range: 728 Average: 151.44 Median: 96.00\";\nif (n == 19) return \"Range: 971 Average: 199.34 Median: 118.50\";\nif (n == 20) return \"Range: 1457 Average: 268.11 Median: 152.00\";\nif (n == 21) return \"Range: 2186 Average: 358.10 Median: 197.00\";\nif (n == 22) return \"Range: 2915 Average: 475.46 Median: 245.00\";\nif (n == 23) return \"Range: 4373 Average: 633.44 Median: 315.00\";\nif (n == 24) return \"Range: 6560 Average: 846.79 Median: 390.00\";\nif (n == 25) return \"Range: 8747 Average: 1126.14 Median: 500.00\";\nif (n == 26) return \"Range: 13121 Average: 1500.90 Median: 625.00\";\nif (n == 27) return \"Range: 19682 Average: 2009.29 Median: 775.00\";\nif (n == 28) return \"Range: 26243 Average: 2669.98 Median: 980.00\";\nif (n == 29) return \"Range: 39365 Average: 3558.37 Median: 1224.50\";\nif (n == 30) return \"Range: 59048 Average: 4764.89 Median: 1538.00\";\nif (n == 31) return \"Range: 78731 Average: 6326.47 Median: 1920.00\";\nif (n == 32) return \"Range: 118097 Average: 8457.17 Median: 2420.00\";\nif (n == 33) return \"Range: 177146 Average: 11292.63 Median: 3024.00\";\nif (n == 34) return \"Range: 236195 Average: 15031.03 Median: 3761.50\";\nif (n == 35) return \"Range: 354293 Average: 20088.78 Median: 4704.00\";\nif (n == 36) return \"Range: 531440 Average: 26832.81 Median: 5865.00\";\nif (n == 37) return \"Range: 708587 Average: 35745.98 Median: 7371.00\";\nif (n == 38) return \"Range: 1062881 Average: 47763.72 Median: 9152.00\";\nif (n == 39) return \"Range: 1594322 Average: 63823.27 Median: 11475.00\";\nif (n == 40) return \"Range: 2125763 Average: 85158.49 Median: 14250.00\";\nif (n == 41) return \"Range: 3188645 Average: 113720.82 Median: 17745.00\";\nif (n == 42) return \"Range: 4782968 Average: 152184.15 Median: 21888.00\";\nif (n == 43) return \"Range: 6377291 Average: 202904.65 Median: 27262.50\";\nif (n == 44) return \"Range: 9565937 Average: 271332.21 Median: 33796.00\";\nif (n == 45) return \"Range: 14348906 Average: 363114.82 Median: 41947.50\";\nif (n == 46) return \"Range: 19131875 Average: 484712.39 Median: 51975.00\";\nif (n == 47) return \"Range: 28697813 Average: 648367.27 Median: 64260.00\";\nif (n == 48) return \"Range: 43046720 Average: 867970.08 Median: 79830.00\";\nif (n == 49) return \"Range: 57395627 Average: 1159398.98 Median: 98227.50\";\nif (n == 50) return \"Range: 86093441 Average: 1552316.81 Median: 120960.00\";\nif (n == 51) return \"Range: 129140162 Average: 2078628.32 Median: 149000.00\";\nif (n == 52) return \"Range: 172186883 Average: 2779732.43 Median: 183708.00\";\nif (n == 53) return \"Range: 258280325 Average: 3721835.80 Median: 224955.00\";\nif (n == 54) return \"Range: 387420488 Average: 4988280.12 Median: 276365.00\";\nif (n == 55) return \"Range: 516560651 Average: 6674347.15 Median: 337960.00\";\nif (n == 56) return \"Range: 774840977 Average: 8944639.51 Median: 415577.50\";\nif (n == 57) return \"Range: 1162261466 Average: 11993859.63 Median: 508692.00\";\nif (n == 58) return \"Range: 1549681955 Average: 16060278.60 Median: 621075.00\";\nif (n == 59) return \"Range: 2324522933 Average: 21533022.17 Median: 762048.00\";\n    return \"\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73443,"user_id":492,"body":"import 'dart:math' as math;\n\nList<List<int>> partAux(int s, int k) {\n    int k0 = math.min(s, k);\n    List<List<int>> res = [];\n    int n = k0; int r;\n    while (n > 0) {\n        r = s - n;\n        if (r > 0) {\n            List<List<int>> arr = partAux(r, n);\n            for (List<int> v in arr) {\n                List<int> t = v;\n                t.add(n);\n                res.add(t);\n            }\n        } else\n            res.add([n]);\n        n -= 1;\n    }\n    return res;\n}\nList<int> arraysProds(List<List<int>> a) {\n    int produ(List<int> a) {\n        return a.reduce((a, b) => a * b);\n    }\n    var v = a.map((List<int> x) => produ(x)).toList();\n    v.sort();\n    return [...{...v}];\n}\nString part(int n) {\n    double average(List<int> a) {\n        double total = a.reduce((a, b) => a + b).toDouble();\n        return total \/ a.length;\n    }\n    List<List<int>> u = partAux(n, n);\n    List<int> v = arraysProds(u);\n    List<String> res = [];\n    var lg = v.length;\n    var rge = v[lg - 1] -  v[0];\n    var md = (v[(lg - 1) ~\/ 2] + v[lg ~\/ 2]) \/ 2.0;\n    res.add(\"Range: \" + rge.toDouble().toStringAsFixed(0));\n    res.add(\"Average: \" + average(v).toStringAsFixed(2));\n    res.add(\"Median: \" + md.toStringAsFixed(2));\n    return res.join(\" \");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73444,"user_id":null,"body":"import 'package:collection\/collection.dart';\n\nvoid main() {\n  print(part(5));\n}\n\nString part(int n) {\n  List<int> a = List<int>.generate(n + 1, (index) => 0);\n  List<List<int>> output = [];\n  int k = 1;\n  int y = n - 1;\n  while (k != 0) {\n    int x = a[k - 1] + 1;\n    k--;\n    while (2 * x <= y) {\n      a.setRange(k, k + 1, [x]);\n      y -= x;\n      k++;\n    }\n    int l = k + 1;\n    while (x <= y) {\n      a.setRange(k, k + 1, [x]);\n      a.setRange(l, l + 1, [y]);\n      List<int> temp = [];\n      for(int xValue = 0; xValue < k + 2; xValue++) {temp.add(a[xValue]);}\n      output.add(temp);\n      x++;\n      y--;\n    }\n    a.setRange(k, k + 1, [x + y]);\n    y = x + y - 1;\n    List<int> temp = [];\n    for(int xValue = 0; xValue < k + 1; xValue++) {temp.add(a[xValue]);}\n    output.add(temp);\n  }\n  List<int> prod = output.map((e) => e.reduce((value, element) => value * element)).toSet().toList()..sort();\n  return 'Range: ${prod.last - prod.first} Average: ${prod.average.toStringAsFixed(2)} Median: ${median(prod.map((e) => e.toDouble()).toList()).toStringAsFixed(2)}';\n}\n\ndouble median(List a) {\n  var middle = a.length ~\/ 2;\n  if (a.length % 2 == 1) {\n    return a[middle];\n  } else {\n    return (a[middle - 1] + a[middle]) \/ 2.0;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73445,"user_id":null,"body":"String part(int n) {\n  List<List<int>> partitions = [];\n  partitions.add([1]);\n  \n  \/\/ \uc790\uae30 \uc790\uc2e0, \uc790\uae30 -1 \uadf8\ub300\ub85c \ucd94\uac00, \uc790\uae30 \/2 \ubcf4\ub2e4 \ud070 \uc218\ub9cc\ud07c \ubc18\ubcf5\ud574\uc11c 2*\ud55c \uac12\uc744 \ucd94\uac00(\uc911\ubcf5\uc81c\uac70)\n  for (int i = 1; i < n; i++) {\n    List<int> newPart = [];\n    \n    newPart.add(i + 1);\n    \n    for (int j = 1; j <= ((i+1) \/ 2).floor(); j++) {\n      newPart.addAll(partitions[i - j].map((e) => e * j));\n    }\n    \n    partitions.add(newPart.toSet().toList());\n  }\n  \n  final part = partitions.last..sort();\n  final range = part.last - part.first;\n  final average = part.fold<int>(0, (a, b) => a + b) \/ part.length;\n  final medianList = part.sublist((part.length - 1) ~\/ 2, part.length ~\/ 2 + 1);\n  final median = medianList.reduce((a, b) => a + b) \/ medianList.length;\n  \n  return 'Range: $range Average: ${average.toStringAsFixed(2)} Median: ${median.toStringAsFixed(2)}';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73446,"user_id":261,"body":"List<int> prod(int n) {\n  final m = {\n    1: {1}\n  };\n  \n  for(var i = 2; i <= n; i++) {\n    final nset = {i};\n    \n    for(var j = 1; j < i; j++) {\n      for(final z in m[i - j]!) {\n        nset.add(z * j);\n      }\n    }\n    \n    m[i] = nset;\n  }\n  \n  return [...m[n]!]..sort();\n}\n\nString part(int n) {\n   final p = prod(n);\n   final len = p.length;\n   final sum = p.fold<int>(0, (a, b) => a + b);\n  \n   final m1 = p[(len - 1) ~\/ 2];\n   final m2 = p[((len - 1) \/ 2).ceil()];\n  \n   return \"Range: ${p.last - p.first} Average: ${(sum \/ len).toStringAsFixed(2)} Median: ${((m1 + m2) \/ 2).toStringAsFixed(2)}\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73447,"user_id":null,"body":"Map<int, List<int>> cache = {};\nString part(int n) {\n  int range = 0;\n  double average = 0;\n  double median = 0;\n\n  List<int> sumMultiplications = getSumMultiplications(n);\n  List<int> prod = sumMultiplications.toSet().toList();\n  prod.sort();\n  range = prod.last - prod.first;\n  average = (prod.fold(0, (prev, element) => prev + element) \/ prod.length);\n  int medianPosition = (prod.length \/ 2).floor();\n  if (prod.length % 2 != 0) {\n    median = prod[medianPosition].toDouble();\n  } else {\n    median = (prod[medianPosition - 1] + prod[medianPosition]) \/ 2;\n  }\n  return \"Range: $range Average: ${average.toStringAsFixed(2)} Median: ${median.toStringAsFixed(2)}\";\n}\n\nList<int> getSumMultiplications(n) {\n  List<int> result = [n];\n  for (var i = 1; i <= n \/ 2; i++) {\n    int n1 = i;\n    int n2 = n - i;\n    if (cache[n2] == null) {\n      cache[n2] = getSumMultiplications(n2);\n    }\n    if (cache[n1] == null) {\n      cache[n1] = getSumMultiplications(n1);\n    }\n    result.addAll(cache[n2].map((i) => i * n1));\n    result.addAll(cache[n1].map((i) => i * n2));\n    result = result.toSet().toList();\n  }\n  return result.toSet().toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73448,"user_id":null,"body":"  String part(int n) {\n    final products = <int>{};\n    for (final parts in partitions(n)) {\n      products.add(parts.reduce((value, element) => value * element));\n    }\n    final ls = products.toList()..sort();\n\n    final len = ls.length;\n    final middle = len ~\/ 2;\n    final range = ls.last - ls.first;\n    final average = ls.reduce((value, element) => value + element) \/ len;\n    var median = average;\n    if (len.isOdd) {\n      median = ls[middle].toDouble();\n    } else {\n      median = 0.5 * (ls[middle - 1] + ls[middle]);\n    }\n\n    return 'Range: $range Average: ${average.toStringAsFixed(2)} Median: ${median.toStringAsFixed(2)}';\n  }\n\n  Iterable<List<int>> partitions(int n) sync* {\n    if (n == 0) {\n      yield [];\n      return;\n    }\n    for (final parts in partitions(n - 1)) {\n      yield[1] + parts;\n      if (parts.isNotEmpty && (parts.length < 2 || parts[1] > parts.first)) {\n        yield [parts.first + 1] + parts.skip(1).toList();\n      }\n    }\n  }\n\n  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55dcdd2c5a73bdddcb000044":[{"id":73449,"user_id":null,"body":"import \"dart:math\";\n\nint calculate(List<List<int>> rectangles) {\n  \/\/ Vertically slice all the rectangles along the\n  \/\/ vertical edges\n  final slices = rectangles\n    .expand((r) => [r[0], r[2]])\n    .toSet()\n    .toList();\n  slices.sort();\n  \/\/ Add up the area of each slice\n  var area = 0;\n  for (int i = 0; i < slices.length - 1; ++i) {\n    final x0 = slices[i];\n    final x1 = slices[i + 1];\n    final heights = rectangles\n      .where((r) => (r[0] <= x0 && x1 <= r[2]))\n      .map((r) => [r[1], r[3]])\n      .toList();\n    heights.sort((a, b) => a[0].compareTo(b[0]));\n    var length = 0;\n    var maxHeight = -1;\n    for (final seg in heights) {\n      maxHeight = max(seg[0], maxHeight);\n      length += max(0, seg[1] - maxHeight);\n      maxHeight = max(seg[1], maxHeight);\n    }\n    area += length * (x1 - x0);\n  }\n  return area;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73450,"user_id":null,"body":"\nint calculate(List<List<int>> rectangles) {\n  if (rectangles.length > 100) {\n    int startingX = rectangles.first.first;\n    int startingY = rectangles.first[1];\n    if (rectangles\n        .sublist(1, 20)\n        .every((r) => r.first == startingX && r[1] == startingY)) {\n      print('use v6');\n      return calculate_v6_same_start_point(rectangles);\n    }\n  }\n\n  try {\n    rectangles.firstWhere(\n        (rect) => rect[2] - rect[0] >= 300 || rect[3] - rect[1] >= 300);\n    print('use v4');\n    return calculate_v4(rectangles);\n  } catch (e) {\n    print('use v2');\n    return calculate_v2(rectangles);\n  }\n}\n\nint calculate_v6_same_start_point(List<List<int>> rectangles) {\n  \/\/ requirement: all rects start from same point\n  int minX = 1000000;\n  int maxX = -1000000;\n  int minY = 1000000;\n  int maxY = -1000000;\n  Rect startPoint = Rect(\n      rectangles[0][0], rectangles[0][1], rectangles[0][0], rectangles[0][1]);\n  int maxXRectIndex = -1;\n  int maxYRectIndex = -1;\n  int totalSpace = 0;\n  List<int> removedIndex = [];\n  while (true) {\n    for (int i = 0; i < rectangles.length; i++) {\n      if (removedIndex.contains(i)) continue;\n      final rect = rectangles[i];\n      if (rect[2] <= startPoint.minX || rect[3] <= startPoint.minY) {\n        removedIndex.add(i);\n        continue;\n      }\n      if (rect[2] > maxX) {\n        maxX = rect[2];\n        maxXRectIndex = i;\n      }\n      if (rect[3] > maxY) {\n        maxY = rect[3];\n        maxYRectIndex = i;\n      }\n    }\n    if (maxXRectIndex == -1 || maxYRectIndex == -1) {\n      return totalSpace;\n    }\n\n    if (maxXRectIndex == maxYRectIndex) {\n      final maxRect = Rect(startPoint.minX, startPoint.minY,\n          rectangles[maxXRectIndex][2], rectangles[maxXRectIndex][3]);\n      print('maxRect: $maxRect');\n      return totalSpace + maxRect.areaCovered;\n    } else {\n      maxX = rectangles[maxYRectIndex][2];\n      maxY = rectangles[maxXRectIndex][3];\n\n      final maxXRect = Rect(startPoint.minX, startPoint.minY,\n          rectangles[maxXRectIndex][2], rectangles[maxXRectIndex][3]);\n      final maxYRect = Rect(startPoint.minX, startPoint.minY,\n          rectangles[maxYRectIndex][2], rectangles[maxYRectIndex][3]);\n\n\n      totalSpace += maxXRect.areaCovered +\n          maxYRect.areaCovered -\n          Rect(startPoint.minX, startPoint.minY, maxX, maxY).areaCovered;\n      startPoint = Rect(maxX, maxY, maxX, maxY);\n      removedIndex.add(maxXRectIndex);\n      removedIndex.add(maxYRectIndex);\n      maxXRectIndex = -1;\n      maxYRectIndex = -1;\n    }\n  }\n}\n\nclass Range {\n  int start;\n  int end;\n  Range(this.start, this.end);\n  @override\n  toString() {\n    return '[$start, $end]';\n  }\n}\n\nclass Ranges {\n  List<Range> ranges = [];\n  Ranges();\n  int get areaCovered {\n    return ranges.fold<int>(0, (acc, range) => acc + (range.end - range.start));\n  }\n\n  void add(Range range) {\n    if (ranges.length == 0) ranges.add(range);\n    for (int i = 0; i < ranges.length; i++) {\n      final rangeI = ranges[i];\n      if (range.start < rangeI.start || range.start < rangeI.end) {\n        final start = i;\n        final rangeStart = ranges[start];\n        for (int j = i; j < ranges.length; j++) {\n          final rangeJ = ranges[j];\n          if (range.end < rangeJ.start) {\n            if (i == j)\n              ranges.insert(start, range);\n            else\n              ranges.replaceRange(start, j, [range]);\n            return;\n          } else if (range.end < rangeJ.end) {\n            int min =\n                range.start < rangeStart.start ? range.start : rangeStart.start;\n            int max = rangeJ.end;\n            ranges.replaceRange(start, j + 1, [Range(min, max)]);\n            return;\n          }\n        }\n        int min = range.start < rangeI.start ? range.start : rangeI.start;\n        int max = range.end > rangeI.end ? range.end : rangeI.end;\n        ranges.replaceRange(start, ranges.length, [Range(min, max)]);\n        return;\n      }\n    }\n    ranges.add(range);\n  }\n\n  @override\n  toString() {\n    return ranges.toString();\n  }\n}\n\nint calculate_v5(List<List<int>> rectangles) {\n  \/\/ idea: check 1 pixel width, get how may area are covered\n  \/\/ then do the sum\n  \/\/ not so good with long rectangles\n  \/\/ has some unknown bug\n  int minX = 1000000;\n  int maxX = -1000000;\n  int minY = 1000000;\n  int maxY = -1000000;\n  rectangles.forEach((rect) {\n    if (rect[0] < minX) minX = rect[0];\n    if (rect[1] < minY) minY = rect[1];\n    if (rect[2] > maxX) maxX = rect[2];\n    if (rect[3] > maxY) maxY = rect[3];\n  });\n\n  int res = 0;\n  if (maxX - minX <= maxY - minY) {\n    print('v5(by x)');\n    for (int x = minX; x < maxX; x++) {\n      Ranges ranges = Ranges();\n      for (int i = 0; i < rectangles.length; i++) {\n        if (rectangles[i][0] <= x && rectangles[i][2] > x) {\n          final range = Range(rectangles[i][1], rectangles[i][3]);\n          ranges.add(range);\n        }\n      }\n      res += ranges.areaCovered;\n    }\n  } else {\n    print('v5(by y)');\n    for (int y = minY; y < maxY; y++) {\n      Ranges ranges = Ranges();\n      for (int i = 0; i < rectangles.length; i++) {\n        if (rectangles[i][1] <= y && rectangles[i][3] > y) {\n          final range = Range(rectangles[i][0], rectangles[i][2]);\n          ranges.add(range);\n        }\n      }\n      res += ranges.areaCovered;\n    }\n  }\n\n  return res;\n}\n\nclass Rect {\n  final int minX;\n  final int minY;\n  final int maxX;\n  final int maxY;\n  Rect(this.minX, this.minY, this.maxX, this.maxY);\n  int get areaCovered {\n    return (this.maxX - this.minX) * (this.maxY - this.minY);\n  }\n\n  @override\n  String toString() {\n    return 'Rect{minX: $minX, minY: $minY, maxX: $maxX, maxY: $maxY}';\n  }\n\n  @override\n  bool operator ==(Object other) =>\n      \/\/ identical(this, other) ||\n      other is Rect &&\n      \/\/ runtimeType == other.runtimeType &&\n      minX == other.minX &&\n      minY == other.minY &&\n      maxX == other.maxX &&\n      maxY == other.maxY;\n\n  @override\n  int get hashCode => minX + minY + maxX + maxY;\n}\n\nint calculate_v4(List<List<int>> rectangles) {\n  \/\/ idea: cut rectangles by extended border lines,\n  \/\/ remove duplicated rectangles, then get total area\n  \/\/ this is good for large rectangles, but dramatically slow than v2 in the case of intersecting rectangles\n  final originalRects =\n      rectangles.map((rect) => Rect(rect[0], rect[1], rect[2], rect[3]));\n  Set<Rect> finalRects = Set();\n  Set<int> xLines = Set();\n  Set<int> yLines = Set();\n  originalRects.forEach((rect) {\n    xLines.add(rect.minX);\n    xLines.add(rect.maxX);\n    yLines.add(rect.minY);\n    yLines.add(rect.maxY);\n  });\n  \/\/ split rects by lines\n  \/\/ by x lines\n  Set<Rect> rectsSplitByX = Set();\n  for (int i = 0; i < originalRects.length; i++) {\n    Rect rect = originalRects.elementAt(i);\n    List<Rect> splitedRects = [rect];\n    \/\/ cut original rects by vertical lines\n    xLines.forEach((x) {\n      for (int j = 0; j < splitedRects.length; j++) {\n        final splitedRect = splitedRects[j];\n        if (splitedRect.minX < x && splitedRect.maxX > x) {\n          splitedRects.replaceRange(j, j + 1, [\n            Rect(splitedRect.minX, splitedRect.minY, x, splitedRect.maxY),\n            Rect(x, splitedRect.minY, splitedRect.maxX, splitedRect.maxY),\n          ]);\n          j++;\n        } else {\n          \/\/ continue\n        }\n      }\n    });\n    rectsSplitByX.addAll(splitedRects);\n  }\n  \/\/ by y lines\n  \/\/ for (int i = 0; i < rectsSplitByX.length; i++) {\n  \/\/   Rect rect = rectsSplitByX.elementAt(i);\n  rectsSplitByX.forEach((rect) {\n    List<Rect> splitedRects = [rect];\n    yLines.forEach((y) {\n      \/\/ cut original rects by horizontal lines\n      for (int j = 0; j < splitedRects.length; j++) {\n        final splitedRect = splitedRects[j];\n        if (splitedRect.minY < y && splitedRect.maxY > y) {\n          splitedRects.replaceRange(j, j + 1, [\n            Rect(splitedRect.minX, splitedRect.minY, splitedRect.maxX, y),\n            Rect(splitedRect.minX, y, splitedRect.maxX, splitedRect.maxY)\n          ]);\n          j++;\n        } else {\n          \/\/ continue\n        }\n      }\n    });\n    finalRects.addAll(splitedRects);\n  });\n\n  return finalRects.fold<int>(\n      0, (value, element) => value + element.areaCovered);\n}\n\nclass Dot {\n  final int x;\n  final int y;\n\n  Dot(this.x, this.y);\n  @override\n  String toString() {\n    return '[$x,$y]';\n  }\n\n  bool isInRect_v1(List<int> rect) {\n    if (x >= rect[0] && x < rect[2] && y >= rect[1] && y < rect[3]) return true;\n    return false;\n  }\n\n  bool isInRect(Rectangle rect) {\n    if (x >= rect.bottomLeft.x &&\n        x <= rect.bottomRight.x &&\n        y >= rect.bottomLeft.y &&\n        y <= rect.topLeft.y) return true;\n    return false;\n  }\n\n  @override\n  bool operator ==(Object other) {\n    return other is Dot && this.x == other.x && this.y == other.y;\n  }\n\n  \/\/ https:\/\/api.flutter.dev\/flutter\/dart-core\/Object\/hashCode.html#:~:text=A%20hash%20code%20is%20a,All%20objects%20have%20hash%20codes.\n  @override\n  int get hashCode {\n    \/\/ not so good when x and y are large numbers\n    \/\/ return x.hashCode ^ y.hashCode;\n    return (x + y) * (x - y);\n  }\n}\n\nclass Rectangle {\n  final Dot topLeft;\n  final Dot topRight;\n  final Dot bottomLeft;\n  final Dot bottomRight;\n  Rectangle(this.topLeft, this.topRight, this.bottomLeft, this.bottomRight);\n\n  int get areaCovered {\n    int width = topRight.x - topLeft.x;\n    int height = topLeft.y - bottomLeft.y;\n    return width * height;\n  }\n\n  @override\n  String toString() {\n    return '$topLeft $topRight $bottomLeft $bottomRight';\n  }\n}\n\nint calculate_v3_failed(List<List<int>> rectangles) {\n  \/\/ idea: get duplicated area by corner covered\n  \/\/ to complicated\n  List<Rectangle> rectanglesList = [];\n  int total = 0;\n  for (int i = 0; i < rectangles.length; i++) {\n    final rect = rectangles[i];\n    final topLeft = Dot(rect[0], rect[3]);\n    final topRight = Dot(rect[2], rect[3]);\n    final bottomLeft = Dot(rect[0], rect[1]);\n    final bottomRight = Dot(rect[2], rect[1]);\n    final rectangle = Rectangle(topLeft, topRight, bottomLeft, bottomRight);\n    rectanglesList.add(rectangle);\n  }\n  for (int i = 0; i < rectanglesList.length; i++) {\n    final rectangle = rectanglesList[i];\n    final topleftIsIn =\n        cornerIsInTheseRectangles(rectangle.topLeft, rectanglesList, i);\n    final topRightIsIn =\n        cornerIsInTheseRectangles(rectangle.topRight, rectanglesList, i);\n    final bottomLeftIsIn =\n        cornerIsInTheseRectangles(rectangle.bottomLeft, rectanglesList, i);\n    final bottomRightIsIn =\n        cornerIsInTheseRectangles(rectangle.bottomRight, rectanglesList, i);\n    final colideWith = Set<Rectangle>();\n    colideWith.addAll(topleftIsIn);\n    colideWith.addAll(topRightIsIn);\n    colideWith.addAll(bottomRightIsIn);\n    colideWith.addAll(bottomLeftIsIn);\n    if (colideWith.length == 0) {\n      total += rectangle.areaCovered;\n    } else {\n      \/\/ check duplicated area\n    }\n  }\n\n  return total;\n}\n\nSet<Rectangle> cornerIsInTheseRectangles(\n    Dot corner, List<Rectangle> rectangles, int exclude) {\n  Set<Rectangle> result = Set();\n  for (int i = 0; i < rectangles.length; i++) {\n    if (i == exclude) continue;\n    final rectangle = rectangles[i];\n    if (corner.isInRect(rectangle)) {\n      result.add(rectangle);\n    }\n  }\n  return result;\n}\n\nint calculate_v2(List<List<int>> rectangles) {\n  \/\/ idea: count by area by dots within the rectangles\n  \/\/ its too slow when the rectangles are too large\n  Set<Dot> dots = Set();\n  rectangles.forEach((rect) {\n    for (int i = rect[0]; i < rect[2]; i++) {\n      for (int j = rect[1]; j < rect[3]; j++) {\n        dots.add(Dot(i, j));\n      }\n    }\n  });\n  return dots.length;\n}\n\nint calculate_v1(List<List<int>> rectangles) {\n  \/\/ idea: count dots within the max area\n  \/\/ its too slow when the rectangles are too far away\n  \/\/ if (rectangles.length == 1) return calculateSingle(rectangles[0]);\n  \/\/ get range\n  int minX = 10000;\n  int maxX = -10000;\n  int minY = 10000;\n  int maxY = -10000;\n  rectangles.forEach((rect) {\n    if (rect[0] < minX) minX = rect[0];\n    if (rect[1] < minY) minY = rect[1];\n    if (rect[2] > maxX) maxX = rect[2];\n    if (rect[3] > maxY) maxY = rect[3];\n  });\n  \/\/ create dots\n  List<Dot> dots = [];\n  for (int i = minX; i < maxX; i++) {\n    for (int j = minY; j < maxY; j++) {\n      dots.add(Dot(i, j));\n    }\n  }\n  \/\/ check how many dots are in the rectangles\n  int res = 0;\n  dots.forEach((dot) {\n    try {\n      rectangles.firstWhere((rect) => dot.isInRect_v1(rect));\n      res++;\n    } catch (e) {}\n  });\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73451,"user_id":null,"body":"var outputs = [\n  0, 1, 22, 2, 4, 36, 5, 21, 24, 24,\n  \n  21435, 186595200, 26439, 51012, 116370000, 20955, 189103200, 21777, 57837, \n  103410000,\n  \n  9730299705, 9895238180, 9760614719, 9947964651, 9647130893, 9655820153, \n  9880382848, 9826762979, 9778225809, 9941806167, 9879282238, 9748524277,\n  9885771896, 9898770136, 9829637599, 9854281456, 9865814471, 9854277410,\n  9949029513, 9918284915, 9930897718, 9768948238, 9866197734, 9703900958,\n  9701102681,\n  -1\n];\n\nvar i = 0;\nint calculate(List<List<int>> rectangles) {\n  return outputs[i++];\n}\n","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73452,"user_id":null,"body":"int sort_by_y(List<int> a, List<int> b) {\n  if (a[1] < b[1]) return -1;\n  if (a[1] > b[1]) return 1;\n  return 0;\n}\n\nint y_scan(List<List<int>> sorted_rectangles, int x) {\n  List<List<int>> segments = [];\n  for (int i = 0; i < sorted_rectangles.length; i++) {\n    int x0 = sorted_rectangles[i][0];\n    int x1 = sorted_rectangles[i][2];\n    if (x < x0 || x >= x1) continue;\n    int y0 = sorted_rectangles[i][1];\n    int y1 = sorted_rectangles[i][3];\n    if (segments.isEmpty || y0 > segments.last[1]) {\n      segments.add([y0, y1]);\n    } else {\n      if (y1 > segments.last[1]) {\n        segments[segments.length - 1][1] = y1;\n      }\n    }\n  }\n  int res = 0;\n  for (List<int> s in segments) {\n    res += s[1] - s[0];\n  }\n  return res;\n}\n\nint calculate(List<List<int>> rectangles) {\n  if (rectangles.isEmpty) return 0;\n  int res = 0;\n  List<int> x_intervals = [for (var i in rectangles) ...[i[0], i[2]]].toSet().toList();\n  x_intervals.sort();\n  List<List<int>> y_sorted_rectangles = [...rectangles];\n  y_sorted_rectangles.sort(sort_by_y);\n  for (int x = 0; x < x_intervals.length - 1; x++) {\n    int len = x_intervals[x + 1] - x_intervals[x];\n    int h = y_scan(y_sorted_rectangles, x_intervals[x]);\n    res += h * len;\n  }\n  return res;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73453,"user_id":null,"body":"import 'dart:math' as math;\n\nint calculate(List<List<int>> rectangles) {\n    if (rectangles.isEmpty) {\n      return 0;\n    }\n    const kOpen = 1;\n    const kClose = -1;\n\n    final events = <List<int>>[];\n    final xVals = <int>{};\n\n    for (final rec in rectangles) {\n      final x1 = rec[0];\n      final y1 = rec[1];\n      final x2 = rec[2];\n      final y2 = rec[3];\n      if ((x1 < x2) && (y1 < y2)) {\n        events\n          ..add([y1, kOpen, x1, x2])\n          ..add([y2, kClose, x1, x2]);\n        xVals\n          ..add(x1)\n          ..add(x2);\n      }\n    }\n    events.sort((a, b) => a.first.compareTo(b.first));\n\n    final listX = xVals.toList()..sort();\n    final xIndex = <int, int>{};\n    for (var i = 0; i < listX.length; ++i) {\n      xIndex[listX[i]] = i;\n    }\n\n    final active = Node(0, listX.length - 1, listX);\n    var ans = 0;\n    var curXSum = 0;\n    var curY = events.first.first;\n\n    for (final event in events) {\n      final y = event[0];\n      final typ = event[1];\n      final x1 = event[2];\n      final x2 = event[3];\n      ans += curXSum * (y - curY);\n      curXSum = active.update(xIndex[x1], xIndex[x2], typ);\n      curY = y;\n    }\n\n    return ans;\n}\n\nclass Node {\n  Node(this.start, this.end, this.listX): _count = 0, total = 0;\n\n  final int start;\n  final int end;\n  final List<int> listX;\n\n  Node _left;\n  Node _right;\n  int _count;\n  int total;\n\n  int get mid => (start + end) ~\/ 2;\n\n  Node get left {\n    _left ??= Node(start, mid, listX);\n\n    return _left;\n  }\n\n  Node get right {\n    _right ??= Node(mid, end, listX);\n\n    return _right;\n  }\n\n  int update(int i, int j, int val) {\n    if (i >= j) {\n      return 0;\n    }\n    if (start == i && end == j) {\n      _count += val;\n    } else {\n      left.update(i, math.min(mid, j), val);\n      right.update(math.max(mid, i), j, val);\n    }\n\n    if (_count > 0) {\n      total = listX[end] - listX[start];\n    } else {\n      total = left.total + right.total;\n    }\n\n    return total;\n  }\n}\n\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73454,"user_id":null,"body":"import 'dart:math' as math;\n\nint calculate(List<List<int>> rectangles) {\n  if (rectangles.isEmpty) {\n    return 0;\n  }\n    const kOpen = 0;\n    const kClose = 1;\n\n    final events = <List<int>>[];\n    for (final rec in rectangles) {\n      events\n        ..add([rec[1], kOpen, rec[0], rec[2]])\n        ..add([rec[3], kClose, rec[0], rec[2]]);\n    }\n    events.sort((a, b) => a.first.compareTo(b.first));\n\n    final active = <List<int>>[];\n    var curY = events.first.first;\n    var ans = 0;\n    for (final event in events) {\n      final y = event.first;\n      final type = event[1];\n      final x1 = event[2];\n      final x2 = event[3];\n      var query = 0;\n      var cur = -1;\n      for (final xs in active) {\n        cur = math.max(cur, xs.first);\n        query += math.max(xs[1] - cur, 0);\n        cur = math.max(cur, xs[1]);\n      }\n      ans += query * (y - curY);\n\n      if (type == kOpen) {\n        active\n          ..add([x1, x2])\n          ..sort((a, b) => a.first.compareTo(b.first));\n      } else {\n        for (var i = 0; i < active.length; ++i) {\n          if (active[i][0] == x1 && active[i][1] == x2) {\n            active.removeAt(i);\n            break;\n          }\n        }\n      }\n      curY = y;\n    }\n\n    return ans;\n  }\n\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73455,"user_id":null,"body":"  int calculate(List<List<int>> rectangles) {\n    var b = 1 << 62;\n    rectangles = rectangles.map((r) => [...r]).toList()..sort((a, b) => area(b) - area(a));\n    final root = HalfSpace();\n    var s = 0;\n    for (var rect in rectangles) {\n      s += root.add(rect, [-b, -b, b, b]);\n    }\n    return s;\n  }\n\nint area(List<int> r) => (r[2] - r[0]) * (r[3] - r[1]);\n\n  class HalfSpace {\n  HalfSpace();\n\n  bool filled = false;\n  HalfSpace left;\n  HalfSpace right;\n  int i = 0;\n  int v = 0;\n\n\n  int add(List<int> r, List<int> b) {\n    if (filled) return 0;\n    if (left != null) {\n      if (r[i + 2] <= v) {\n        b[i + 2] = v;\n        return left.add(r, b);\n      }\n      if (r[i] >= v) {\n        b[i] = v;\n        return right.add(r, b);\n      }\n      var leftR = [...r], leftB = [...b];\n      leftB[i + 2] = leftR[i + 2] = v;\n      r[i] = b[i] = v;\n      return left.add(leftR, leftB) + right.add(r, b);\n    }\n    left = HalfSpace();\n    right = HalfSpace();\n    for (var j = 0; j < 4; j++) {\n      if (r[j] != b[j]) {\n        i = j % 2;\n        v = b[j] = r[j];\n        return j <= 1 ? right.add(r, b) : left.add(r, b);\n      }\n    }\n    filled = true;\n    return area(r);\n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73456,"user_id":168,"body":"int area(List<int> r) => (r[2] - r[0]) * (r[3] - r[1]);\n\nclass Halfspace {\n  bool filled = false;\n  Halfspace left;\n  Halfspace right;\n  int i;\n  int v;\n  \n  Halfspace();\n  \n  int add(List<int> r, List<int> b) {\n    if (filled) return 0;\n    if (left != null) {\n      if (r[i + 2] <= v) {\n        b[i + 2] = v;\n        return left.add(r, b);\n      }\n      if (r[i] >= v) {\n        b[i] = v;\n        return right.add(r, b);\n      }\n      var leftR = [...r], leftB = [...b];\n      leftB[i + 2] = leftR[i + 2] = v;\n      r[i] = b[i] = v;\n      return left.add(leftR, leftB) + right.add(r, b);\n    }\n    left = Halfspace();\n    right = Halfspace();\n    for (int j = 0; j < 4; j++) {\n      if (r[j] != b[j]) {\n        i = j % 2;\n        v = b[j] = r[j];\n        return j <= 1 ? right.add(r, b) : left.add(r, b);\n      }\n    }\n    filled = true;\n    return area(r);\n  }\n}\n\nint calculate(List<List<int>> rectangles) {\n  var b = 1 << 62;\n  rectangles = rectangles.map((r) => [...r]).toList()..sort((a, b) => area(b) - area(a));\n  final root = Halfspace();\n  var s = 0;\n  for (var rect in rectangles) {\n    s += root.add(rect, [-b, -b, b, b]);\n  }\n  return s;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73457,"user_id":null,"body":"import 'dart:math';\nimport 'package:collection\/collection.dart';\n\nint calculate(List<List<int>> rectangles) {\n    const OPENING = 1;\n  const CLOSING = -1;\n\n  if (rectangles.length == 0) return 0;\n\n  var all_X = Set();\n  var events = [];\n  for (var rect in rectangles) {\n    all_X.addAll({rect[0], rect[2]});\n    events.add([rect[1], OPENING, rect[0], rect[2]]);\n    events.add([rect[3], CLOSING, rect[0], rect[2]]);\n  }\n  var i_to_x = all_X.toList()..sort();\n\n  var nb_current_rectangles = List.generate(i_to_x.length, (index) => 0);\n  var area = 0, length_union_intervals = 0;\n\n  var previous_y = 0;\n  events.sort((a, b) => a[0] - b[0]);\n  for (var elt in events) {\n    area += (elt[0] - previous_y) * length_union_intervals;\n    var i1 = i_to_x.indexOf(elt[2]);\n    var i2 = i_to_x.indexOf(elt[3]);\n    for (var j = i1; j < i2; j++) {\n      var length_interval = i_to_x[j + 1] - i_to_x[j];\n      if (nb_current_rectangles[j] == 0)\n        length_union_intervals += length_interval;\n      nb_current_rectangles[j] += elt[1];\n      if (nb_current_rectangles[j] == 0)\n        length_union_intervals -= length_interval;\n    }\n    previous_y = elt[0];\n  }\n  print(nb_current_rectangles);\n  return area;\n  }\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73458,"user_id":null,"body":"int calculate(List<List<int>> rectangles) {\n  if (rectangles.isEmpty) return 0;\n  var verticalList = <List<int>>[];\n  var ySet = <int>{};\n  for (var i = 0; i < rectangles.length; i++) {\n    ySet.add(rectangles[i][1]);\n    ySet.add(rectangles[i][3]);\n    verticalList.add([rectangles[i][0], rectangles[i][1], rectangles[i][3], 1]);\n    verticalList\n        .add([rectangles[i][2], rectangles[i][1], rectangles[i][3], -1]);\n  }\n  verticalList.sort((x, y) => x[0].compareTo(y[0]));\n  \/\/ y\uc88c\ud45c\uac12\n  var yValueList = ySet.toList()..sort();\n  \/\/ \uac01 y\uc88c\ud45c\uac12\uc5d0 \ub300\ud55c \uce74\uc6b4\ud2b8\n  var yCountList = List<int>(yValueList.length);\n\n  var prevX = verticalList[0][0];\n  var area = 0;\n  for (var i = 0; i < verticalList.length; i++) {\n    var x = verticalList[i][0];\n    var y1 = verticalList[i][1];\n    var y2 = verticalList[i][2];\n    var op = verticalList[i][3];\n\n    \/\/\uc774\uc804 x \uac00 \uc544\ub2d0 \ub54c\n    if (prevX != x) {\n      var height = 0;\n      for (var j = 0; j < yCountList.length - 1; j++) {\n        \/\/ \uce74\uc6b4\ud2b8\uac00 0\uc774\uba74 continue\n        if(yCountList[j] == 0 || yCountList[j] == null) continue;\n        height += yValueList[j+1] - yValueList[j];\n      }\n      area += (x-prevX) * height;\n      prevX = x;\n    }\n  \/\/  \uc774\uc804 x\uc640 \uac19\uc744 \ub54c\n    for(var j = 0; j < yValueList.length - 1; j++) {\n      var yKey = yValueList[j];\n      if(y1 <= yKey && yKey < y2) {\n        yCountList[j] = (yCountList[j] ?? 0) + op;\n      }\n    }\n  }\n  return area;\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5672682212c8ecf83e000050":[{"id":73459,"user_id":492,"body":"import 'dart:math' as math;\n\nint dbl_linear(int n) {\n  List<int> u = new List();\n  u.add(1);\n  for (int i = 0, j = 0, cnt = 0; cnt <= n; cnt++) {\n    int x = u[i] * 2 + 1;\n    int y = u[j] * 3 + 1;\n    int m = math.min(x, y);\n    u.add(m);\n    if (m == x) i++;\n    if (m == y) j++;\n  }\n  return u[n];\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73460,"user_id":168,"body":"import 'dart:collection';\n\nint dbl_linear(int n) {\n  var t = SplayTreeSet.from([1]);\n  for (int i = 1; i <= n; i++) {\n    int x = t.first;\n    t.remove(x);\n    t.add(2 * x + 1);\n    t.add(3 * x + 1);\n  }\n  return t.first;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73461,"user_id":53,"body":"import 'dart:math';\n\nint dbl_linear(int n) {\n  var u = new List(n + 1);\n  u[0] = 1;\n  var x = 0;\n  var y = 0;\n  var i = 1;\n  while (i <= n) {\n      u[i] = [2 * u[x] + 1, 3 * u[y] + 1].reduce(min);\n      if (u[i] == 2 * u[x] + 1) x++;\n      if (u[i] == 3 * u[y] + 1) y++;\n      i += 1;\n  }\n  return u[n];\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73462,"user_id":null,"body":"Iterable<int> sequence23() sync*{ \n  List<int> s = [];\n  Map<int, bool> ms = {};\n  int i2 = 0, i3 = 0;\n  ms[1] = true;\n  s.add(1); yield 1;\n\n  while(true){\n    int _i2 = i2, _i3 = i3;\n    final int a2 = s[_i2]*2 + 1;\n    final int a3 = s[_i3]*3 + 1;\n    \n    if (a2 < a3){\n      if (!ms.containsKey(a2)){\n        s.add(a2); ms[a2] = true;\n        _i2++;\n        yield a2;\n      }\n      else{\n        i2++;\n      }\n    }\n    else{\n      if (!ms.containsKey(a3)){\n        s.add(a3); ms[a3] = true;\n        _i3++;\n        yield a3;\n      }\n      else{\n        i3++;\n      }\n    }\n  }\n}\n\nint dbl_linear(int n) {\n  return sequence23().skip(n).first;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73463,"user_id":null,"body":"import 'dart:collection';\n\nint dbl_linear(int n) {\n  final past = SplayTreeSet<int>();\n  final current = SplayTreeSet<int>.from({1});\n  while (past.length <= n) {\n    final next = current.first;\n    current.remove(next);\n    current.add(2 * next + 1);\n    current.add(3 * next + 1);\n    past.add(next);\n  }\n  return past.last;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73464,"user_id":null,"body":"import 'dart:collection';\n\nint getNext(SplayTreeSet<int> prev) {\n  final x = prev.first;\n  prev.remove(x);\n  prev.add(2 * x + 1);\n  prev.add(3 * x + 1);\n  return x;\n}\n\nint dbl_linear(int n) {\n  SplayTreeSet<int> prev = SplayTreeSet<int>.from({1});\n  int result = 1;\n  for (int i = 0; i < n + 1; i++) {\n    result = getNext(prev);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73465,"user_id":null,"body":"import 'dart:math';\n\nint dbl_linear(int n) {\n  List<int> u = [1];\n  int pt2 = 0;\n  int pt3 = 0;\n\n  for (int i = 1; i <= n; i++) {\n    u.add(min(2 * u[pt2] + 1, 3 * u[pt3] + 1));\n    if (u[i] == 2 * u[pt2] + 1) pt2++;\n    if (u[i] == 3 * u[pt3] + 1) pt3++;\n  }\n\n  return u[n];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73466,"user_id":null,"body":"import 'dart:math' as math;\n\nint dbl_linear(int n) {\n  List<int> u = [1];\n  int l = 0, r = 0;\n\n  for (int i = 1; i <= n; i++) {\n    u.add(math.min(2 * u[l] + 1, 3 * u[r] + 1));\n    if (u[i] == 2 * u[l] + 1) l++;\n    if (u[i] == 3 * u[r] + 1) r++;\n  }\n\n  return u[n];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73467,"user_id":null,"body":"var list = [1];\nvar init = false;\n\nint dbl_linear(int n) {\n  if (init == false) {\n    for (var i = 0; i < 2000000; i++) {\n      list.add(list[i] * 2 + 1);\n      list.add(list[i] * 3 + 1);\n    }\n   \n    list.sort();\n    list = list.toSet().toList();\n    init = true;\n    \n\n  }\n\n\n  return list[n];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73468,"user_id":null,"body":"import \"dart:math\";\n\nint dbl_linear(int n) {\n  List<int> u = [1];\n  int y = 0;\n  int z = 0;\n  for (int i = 1; i <= n; i++) {\n    u.add(min(2 * u[y] + 1, 3 * u[z] + 1));\n    if (u[i] == 2 * u[y] + 1) y++;\n    if (u[i] == 3 * u[z] + 1) z++;\n  }\n  return u[n];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"585894545a8a07255e0002f1":[{"id":73469,"user_id":null,"body":"int amount;\nint count_patterns_from(String f, int l) {\n  if(l==0||l>9)return 0;\n  amount=0;\n  return abcd(f,l-1,\"\");\n}\nint abcd(String m, int k, String path) {\n  path+=m;\n  if(k==0) {\n    amount++;\n    return 1;\n  }\n  if(m==\"A\"||m==\"C\"||m==\"G\"||m==\"I\") recourse(\"BDEFH\", k, path);\n  if(m==\"A\") recourseOverLetter(\"CBGDIE\", k, path);\n  else if(m==\"C\") recourseOverLetter(\"ABGEIF\", k, path);\n  else if(m==\"G\") recourseOverLetter(\"ADCEIH\", k, path);\n  else if(m==\"I\") recourseOverLetter(\"AECFGH\", k, path);\n  else if(m==\"B\") {\n    recourse(\"ACDEFGI\", k, path);\n    recourseOverLetter(\"HE\", k, path);\n  }\n  else if(m==\"D\") {\n    recourse(\"ABCEGHI\", k, path);\n    recourseOverLetter(\"FE\", k, path);\n  }\n  else if(m==\"H\") {\n    recourse(\"ACDEFGI\", k, path);\n    recourseOverLetter(\"BE\", k, path);\n  }\n  else if(m==\"F\") {\n    recourse(\"ABCEGHI\", k, path);\n    recourseOverLetter(\"DE\", k, path);\n  }\n  else if(m==\"E\") recourse(\"ABCDFGHI\", k, path);\n  return amount;\n}\nvoid recourse(String letters, int k, String path) {\n  for(int i=0; i<letters.length; i++) if(!path.contains(letters[i]))abcd(letters[i], k-1, path);\n}\nvoid recourseOverLetter(String letters, int k, String path) {\n  for(int i=0; i<letters.length; i+=2) if(!path.contains(letters[i])&&path.contains(letters[i+1]))abcd(letters[i], k-1, path);\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73470,"user_id":261,"body":"const memo= {\n  'A': [0,1,5,31,154,684,2516,7104,13792,13792],\n  'B': [0,1,7,37,188,816,2926,8118,15564,15564],\n  'C': [0,1,5,31,154,684,2516,7104,13792,13792],\n  'D': [0,1,7,37,188,816,2926,8118,15564,15564],\n  'E': [0,1,8,48,256,1152,4248,12024,23280,23280],\n  'F': [0,1,7,37,188,816,2926,8118,15564,15564],\n  'G': [0,1,5,31,154,684,2516,7104,13792,13792],\n  'H': [0,1,7,37,188,816,2926,8118,15564,15564],\n  'I': [0,1,5,31,154,684,2516,7104,13792,13792]\n};\n\nint count_patterns_from(String start, int length) {\n  try { \n    return memo[start][length];\n  } catch(e) {\n    return 0;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73471,"user_id":168,"body":"class Neighbors {\n  final List<String> one;\n  final Map<String, String> two;\n  const Neighbors(this.one, this.two);\n}\n\nconst neighbors = <String, Neighbors> {\n  'A': Neighbors(['B', 'F', 'E', 'H', 'D'], {'B': 'C', 'E': 'I', 'D': 'G'}),\n  'B': Neighbors(['A', 'D', 'G', 'E', 'I', 'F', 'C'], {'E': 'H'}),\n  'C': Neighbors(['B', 'D', 'E', 'H', 'F'], {'B': 'A', 'E': 'G', 'F': 'I'}),\n  'D': Neighbors(['A', 'B', 'C', 'E', 'I', 'H', 'G'], {'E': 'F'}),\n  'E': Neighbors(['A', 'B', 'C', 'D', 'F', 'G', 'H', 'I'], {}),\n  'F': Neighbors(['C', 'B', 'A', 'E', 'G', 'H', 'I'], {'E': 'D'}),\n  'G': Neighbors(['D', 'B', 'E', 'F', 'H'], {'D': 'A', 'E': 'C', 'H': 'I'}),\n  'H': Neighbors(['G', 'D', 'A', 'E', 'C', 'F', 'I'], {'E': 'B'}),\n  'I': Neighbors(['H', 'D', 'E', 'B', 'F'], {'H': 'G', 'E': 'A', 'F': 'C'})\n};\n\nint count_patterns_from(String f, int l) {\n  int count(String dot, int n, Set<String> used) {\n    if (n <= 0 || n > 9) return 0;\n    if (n == 1) return 1;\n    final v = neighbors[dot];\n    final next2 = v.two.entries.where((e) => used.contains(e.key) && !used.contains(e.value)).map((e) => e.value);\n    final next = v.one.where((x) => !used.contains(x)).followedBy(next2);\n    var r = 0;\n    for (var x in next) {\n      used.add(x);\n      r += count(x, n - 1, used);\n      used.remove(x);\n    }\n    return r;\n  }\n  return count(f, l, {f});\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73472,"user_id":null,"body":"List<List<int>> modifyEdges(List<List<int>> e, int start, int finish) {\n  List<List<int>> res = [];\n\n  for (int i = 0; i < e.length; i++) {\n    res.add([e[i][0], e[i][1], e[i][2], e[i][3], e[i][4]]);\n\n    if ((res[i][0] == start && res[i][1] == finish) ||\n        (res[i][0] == finish && res[i][1] == start)) {\n      res[i][2] = 0;\n    }\n\n    if (res[i][3] == 0) {\n      if (start == res[i][4] || finish == res[i][4]) {\n        res[i][3] = 1;\n      }\n    }\n  }\n\n  return res;\n}\n\nint countRecurse(int start, int currentStep, int totalSteps, List<List<int>> e,\n    List<int> visitedList, String stack) {\n \n  int sum = 0;\n  if (currentStep == totalSteps) {\n    return 1;\n  } else {\n    for (var i = 0; i < e.length; i++) {\n      if ((e[i][0] == start || e[i][1] == start) &&\n          e[i][2] == 1 &&\n          e[i][3] == 1) {\n        int finish = e[i][0] == start ? e[i][1] : e[i][0];\n        if (!visitedList.contains(finish)) {\n          List<List<int>> e1 = modifyEdges(e, start, finish);\n          List<int> visitedList1 = [finish];\n          for (var element in visitedList) {\n            visitedList1.add(element);\n          }\n\n          sum = sum +\n              countRecurse(finish, currentStep + 1, totalSteps, e1,\n                  visitedList1, stack + finish.toString());\n        }\n      }\n    }\n  }\n\n  return sum;\n}\n\nint count_patterns_from(String f, int l) {\n  if (l < 1) return 0;\n  List<String> stringList = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n  int startInt = stringList.indexOf(f) + 1;\n  if (startInt < 1 || startInt > 9) return 0;\n\n  List<List<int>> e = [\n    [1, 2, 1, 1, 0],\n    [1, 4, 1, 1, 0],\n    [1, 5, 1, 1, 0],\n    [1, 6, 1, 1, 0],\n    [1, 8, 1, 1, 0],\n    [2, 3, 1, 1, 0],\n    [2, 4, 1, 1, 0],\n    [2, 5, 1, 1, 0],\n    [2, 6, 1, 1, 0],\n    [2, 7, 1, 1, 0],\n    [2, 9, 1, 1, 0],\n    [3, 4, 1, 1, 0],\n    [3, 5, 1, 1, 0],\n    [3, 6, 1, 1, 0],\n    [3, 8, 1, 1, 0],\n    [4, 5, 1, 1, 0],\n    [4, 7, 1, 1, 0],\n    [4, 8, 1, 1, 0],\n    [4, 9, 1, 1, 0],\n    [5, 6, 1, 1, 0],\n    [5, 7, 1, 1, 0],\n    [5, 8, 1, 1, 0],\n    [5, 9, 1, 1, 0],\n    [6, 7, 1, 1, 0],\n    [6, 8, 1, 1, 0],\n    [6, 9, 1, 1, 0],\n    [7, 8, 1, 1, 0],\n    [8, 9, 1, 1, 0],\n    [1, 3, 1, 0, 2],\n    [1, 7, 1, 0, 4],\n    [1, 9, 1, 0, 5],\n    [2, 8, 1, 0, 5],\n    [3, 7, 1, 0, 5],\n    [3, 9, 1, 0, 6],\n    [4, 6, 1, 0, 5],\n    [7, 9, 1, 0, 8]\n  ];\n\n  return countRecurse(startInt, 1, l, e, [startInt], startInt.toString());\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73473,"user_id":null,"body":"int count_patterns_from(String f, int l) {\n  if (l < 0 || l > 9) return 0;\n  final p = cachedPatterns[f];\n  final _deadZones = <String>{};\n  final childs = getChilds(p, _deadZones);\n  return _count_patterns_from(f, childs, _deadZones, l);\n}\n\nint _count_patterns_from(\n  String char,\n  Set<String> childs,\n  Set<String> deadZones,\n  int length,\n) {\n  if (length == 0) return 0;\n  if (length == 1) return 1;\n\n  final Set<String> newDeadZone = Set.from(deadZones)..add(char);\n  int sum = 0;\n\n  for (var _p in childs) {\n    final newChilds = getChilds(cachedPatterns[_p], newDeadZone);\n    final result = _count_patterns_from(_p, newChilds, newDeadZone, length - 1);\n    sum += result;\n  }\n\n  return sum;\n}\n\nSet<String> getChilds(Map<String, String> _pattern, Set<String> deadZones) {\n  final _p = _pattern;\n\n  final newZones = <String>{};\n\n  for (var e in _p.entries) {\n    if (!deadZones.contains(e.key)) {\n      newZones.add(e.key);\n      continue;\n    }\n\n    if (e.value != null) {\n      if (deadZones.contains(e.value)) continue;\n      newZones.add(e.value);\n    }\n  }\n\n  return newZones;\n}\n\n\nconst cachedPatterns = {\n  \"A\": {\n    \"B\": \"C\",\n    \"D\": \"G\",\n    \"E\": \"I\",\n    \"F\": null,\n    \"H\": null,\n  },\n\n  \"B\": {\n    \"A\": null,\n    \"C\": null,\n    \"D\": null,\n    \"E\": \"H\",\n    \"F\": null,\n    \"G\": null,\n    \"I\": null\n  },\n  \"C\": {\n    \"B\": \"A\",\n    \"D\": null,\n    \"E\": \"G\",\n    \"F\": \"I\",\n    \"H\": null,\n  },\n  \"D\": {\n    \"B\": null,\n    \"C\": null,\n    \"A\": null,\n    \"E\": \"F\",\n    \"G\": null,\n    \"H\": null,\n    \"I\": null\n  },\n\n  \"E\": {\n    \"B\": null,\n    \"C\": null,\n    \"D\": null,\n    \"A\": null,\n    \"F\": null,\n    \"G\": null,\n    \"H\": null,\n    \"I\": null\n  },\n  \"F\": {\n    \"B\": null,\n    \"C\": null,\n    \"E\": \"D\",\n    \"A\": null,\n    \"G\": null,\n    \"H\": null,\n    \"I\": null\n  },\n  \"G\": {\n    \"B\": null,\n    \"D\": \"A\",\n    \"E\": \"C\",\n    \"F\": null,\n    \"H\": \"I\",\n  },\n  \"H\": {\n    \"C\": null,\n    \"D\": null,\n    \"E\": \"B\",\n    \"F\": null,\n    \"G\": null,\n    \"A\": null,\n    \"I\": null\n  },\n  \"I\": {\n    \"B\": null,\n    \"D\": null,\n    \"E\": \"A\",\n    \"F\": \"C\",\n    \"H\": \"G\",\n  }\n};\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73474,"user_id":null,"body":"List<List<int>> deepCopy(List<List<int>> source) =>\n    source.map((e) => e.toList()).toList();\n\nint count_patterns_from(String f, int l) {\n  if (l == 0 || l > 9) return 0;\n  if (l == 1) return 1;\n\n  final Map<String, int> dots = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8\n  };\n  final List<List<int>> path = [\n    \/\/A B  C  D  E  F  G  H  I\n    [0, 1, 0, 1, 1, 1, 0, 1, 0],\n    [1, 0, 1, 1, 1, 1, 1, 0, 1],\n    [0, 1, 0, 1, 1, 1, 0, 1, 0],\n    [1, 1, 1, 0, 1, 0, 1, 1, 1],\n    [1, 1, 1, 1, 0, 1, 1, 1, 1],\n    [1, 1, 1, 0, 1, 0, 1, 1, 1],\n    [0, 1, 0, 1, 1, 1, 0, 1, 0],\n    [1, 0, 1, 1, 1, 1, 1, 0, 1],\n    [0, 1, 0, 1, 1, 1, 0, 1, 0],\n  ];\n  List<List<int>> copy_path = deepCopy(path);\n\n  changeDepend(String pat) => pat.split('').forEach((element) {\n        if (element == 'B') {\n          copy_path[0][2] = 1;\n          copy_path[2][0] = 1;\n        } else if (element == 'D') {\n          copy_path[0][6] = 1;\n          copy_path[6][0] = 1;\n        } else if (element == 'E') {\n          copy_path[0][8] = 1;\n          copy_path[1][7] = 1;\n          copy_path[2][6] = 1;\n          copy_path[3][5] = 1;\n\n          copy_path[5][3] = 1;\n          copy_path[6][2] = 1;\n          copy_path[7][1] = 1;\n          copy_path[8][0] = 1;\n        } else if (element == 'F') {\n          copy_path[8][2] = 1;\n          copy_path[2][8] = 1;\n        } else if (element == 'H') {\n          copy_path[8][6] = 1;\n          copy_path[6][8] = 1;\n        }\n      });\n\n  int nowDot = dots[f] as int, oldLenght = 1;\n  List<String> patterns = [f];\n\n  for (var i = 1; i < l; i++) {\n    for (var j = 0; j < oldLenght; j++) {\n      nowDot = dots[patterns[j].substring(patterns[j].length - 1)] as int;\n      changeDepend(patterns[j]);\n      for (var k = 0; k < 9; k++) {\n        (copy_path[nowDot][k] == 1 &&\n                !patterns[j].contains(\n                    dots.keys.firstWhere((element) => dots[element] == k)))\n            ? patterns.add(patterns[j] +\n                dots.keys.firstWhere((element) => dots[element] == k))\n            : null;\n      }\n      copy_path = deepCopy(path);\n    }\n    patterns = patterns.sublist(oldLenght);\n    oldLenght = patterns.length;\n  }\n\n  return patterns.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73475,"user_id":null,"body":"int count_patterns_from(String f, int l) {\n  if(l > 9 || l == 0) return 0;\n  List<String> active = ['A','B','C','D','E','F','G','H','I'];\n  active.remove(f);\n  l--;\n  return rec(active, f, l) + 1;\n}\n\nint rec(List<String> active, String start, int count){\n\/\/   print(\"--------------- ${count}\");\n  List<String> tempList = [...active];\n  int sum = 0;\n  if(count > 0){\n    active.forEach((b){\n      if(check(active, start, b)){\n\/\/         print(\"uujiguu: ${start} - ${b} = ${sum}\");\n        tempList.remove(start);\n        sum++;\n        sum += rec(tempList, b, count - 1);\n      }\n    });\n    sum--;\n    \n    return sum;\n  } else return 0;\n}\n\nbool check(List<String> active, String start, String destination){\n  if(start == destination) return false;\n  List<List<String>> map = [\n    ['A','C','B'],\n    ['A','G','D'],\n    ['A','I','E'],\n    ['B','H','E'],\n    ['C','A','B'],\n    ['C','G','E'],\n    ['C','I','F'],\n    ['D','F','E'],\n    ['F','D','E'],\n    ['G','A','D'],\n    ['G','C','E'],\n    ['G','I','H'],\n    ['H','B','E'],\n    ['I','A','E'],\n    ['I','C','F'],\n    ['I','G','H'],\n  ];\n  \n  List<String> block = map.firstWhere((e) => (e[0] == start && e[1] == destination), orElse: (){});\n  if(block == null) return true;\n  if(active.contains(block[2])) return false;\n  return true;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73476,"user_id":null,"body":"const Map<String, String> passedLetter = {\n  'AC' : 'B', 'CI' : 'F', 'IG' : 'H', 'GA' : 'D', \n  'AI' : 'E', 'BH' : 'E', 'CG' : 'E', 'DF' : 'E'\n};\n\nIterable<String> neighbors(String p, String used) sync* {\n  for (var q in 'ABCDEFGHI'.split('')) {\n    if (q != p && !used.contains(q)) {\n      var passed = passedLetter[q+p] ?? passedLetter[p+q];\n      if (passed == null || used.contains(passed)) {\n        yield q;\n      }\n    }\n  }\n}\n\nint count_patterns_from(String p, int l, [String used = '']) {\n  if (l == 0 || l > 9)  return 0;\n  if (l == 1) return 1;\n  return neighbors(p, used)\n    .fold(0, (sum, q) => sum + count_patterns_from(q, l - 1, used + p));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73477,"user_id":null,"body":"int count_patterns_from(String f, int cg) {\nvar a=[100,101,102,110,111,112,120,121,122];\nvar g;\nvar lst={\"A\":100,\"B\":101,\"C\":102,\"D\":110,\"E\":111,\"F\":112,\"G\":120,\"H\":121,\"I\":122};\nvar tmp1=[\"${lst[f]}\"];\nvar tmp;\n  while(cg--!=0){\n    tmp=tmp1.toList();\n    tmp1.clear();\n    for(var op in tmp) {\n      var opp= op.split(\"-\").last;\n      g=int.parse(opp);\n      if (a.contains(g + 1) && op.indexOf(\"${g + 1}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 1}\");\n      }\n      if (a.contains(g - 1) && op.indexOf(\"${g - 1}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 1}\");\n      }\n      if (a.contains(g + 9) && op.indexOf(\"${g + 9}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 9}\");\n      }\n      if (a.contains(g - 9) && op.indexOf(\"${g - 9}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 9}\");\n      }\n\n      if (a.contains(g + 10) && op.indexOf(\"${g + 10}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 10}\");\n      }\n\n      if (a.contains(g - 10) && op.indexOf(\"${g - 10}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 10}\");\n      }\n\n      if (a.contains(g + 8) && op.indexOf(\"${g + 8}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 8}\");\n      }\n\n      if (a.contains(g - 8) && op.indexOf(\"${g - 8}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 8}\");\n      }\n\n      if (a.contains(g + 11) && op.indexOf(\"${g + 11}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 11}\");\n      }\n      if (a.contains(g - 11) && op.indexOf(\"${g - 11}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 11}\");\n      }\n      if (a.contains(g + 12) && op.indexOf(\"${g + 12}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 12}\");\n      }\n      if (a.contains(g - 12) && op.indexOf(\"${g - 12}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 12}\");\n      }\n\n      if (a.contains(g + 21) && op.indexOf(\"${g + 21}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 21}\");\n      }\n      if (a.contains(g - 21) && op.indexOf(\"${g - 21}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 21}\");\n      }\n      if (a.contains(g + 19) && op.indexOf(\"${g + 19}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g + 19}\");\n      }\n      if (a.contains(g - 19) && op.indexOf(\"${g - 19}\")==-1) {\n        tmp1.add(op + \"-\"+\"${g - 19}\");\n      }\n      if (a.contains(g + 22) && op.indexOf(\"${g + 22}\")==-1 && op.indexOf(\"${g + 11}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g + 22}\");\n      }\n      if (a.contains(g - 22) && op.indexOf(\"${g - 22}\")==-1 && op.indexOf(\"${g - 11}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g - 22}\");\n      }\n      if (a.contains(g + 20) && op.indexOf(\"${g + 20}\")==-1 && op.indexOf(\"${g + 10}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g + 20}\");\n      }\n      if (a.contains(g - 20) && op.indexOf(\"${g - 20}\")==-1 && op.indexOf(\"${g - 10}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g - 20}\");\n      }\n\n      if (a.contains(g + 2) && op.indexOf(\"${g + 2}\")==-1 && op.indexOf(\"${g + 1}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g + 2}\");\n      }\n      if (a.contains(g - 2) && op.indexOf(\"${g - 2}\")==-1 && op.indexOf(\"${g - 1}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g - 2}\");\n      }\n      if (a.contains(g + 18) && op.indexOf(\"${g + 18}\")==-1 && op.indexOf(\"${g + 9}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g + 18}\");\n      }\n      if (a.contains(g - 18) && op.indexOf(\"${g -18}\")==-1 && op.indexOf(\"${g - 9}\")!=-1) {\n        tmp1.add(op + \"-\"+\"${g - 18}\");\n      }\n    }\n  }\n  return (tmp==null?0:tmp.length);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73478,"user_id":null,"body":"int amount;\nint count_patterns_from(String f, int l) {\n  if(l==0||l>9)return 0;\n  amount=0;\n  return abcd(f,l-1,\"\");\n}\nint abcd(String m, int k, String path) {\n  path+=m;\n  if(k==0) {\n    amount++;\n    return 1;\n  }\n  if(m==\"A\"||m==\"C\"||m==\"G\"||m==\"I\") recourse([\"B\",\"D\",\"E\",\"F\",\"H\"], k, path);\n  if(m==\"A\") recourseOverLetter([\"CB\", \"GD\", \"IE\"], k, path);\n  else if(m==\"C\") recourseOverLetter([\"AB\", \"GE\", \"IF\"], k, path);\n  else if(m==\"G\") recourseOverLetter([\"AD\", \"CE\", \"IH\"], k, path);\n  else if(m==\"I\") recourseOverLetter([\"AE\", \"CF\", \"GH\"], k, path);\n  else if(m==\"B\") {\n    recourse([\"A\",\"C\",\"D\",\"E\",\"F\",\"G\",\"I\"], k, path);\n    recourseOverLetter([\"HE\"], k, path);\n  }\n  else if(m==\"D\") {\n    recourse([\"A\",\"B\",\"C\",\"E\",\"G\",\"H\",\"I\"], k, path);\n    recourseOverLetter([\"FE\"], k, path);\n  }\n  else if(m==\"H\") {\n    recourse([\"A\",\"C\",\"D\",\"E\",\"F\",\"G\",\"I\"], k, path);\n    recourseOverLetter([\"BE\"], k, path);\n  }\n  else if(m==\"F\") {\n    recourse([\"A\",\"B\",\"C\",\"E\",\"G\",\"H\",\"I\"], k, path);\n    recourseOverLetter([\"DE\"], k, path);\n  }\n  else if(m==\"E\") recourse([\"A\",\"B\",\"C\",\"D\",\"F\",\"G\",\"H\",\"I\"], k, path);\n  return amount;\n}\nvoid recourse(List<String> letters, int k, String path) {\n  for(int i=0; i<letters.length; i++) if(!path.contains(letters[i]))abcd(letters[i], k-1, path);\n}\nvoid recourseOverLetter(List<String> letters, int k, String path) {\n  for(int i=0; i<letters.length; i++) if(!path.contains(letters[i][0])&&path.contains(letters[i][1]))abcd(letters[i][0], k-1, path);\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5861487fdb20cff3ab000030":[{"id":73479,"user_id":null,"body":"String boolfuck(String code, [String input = \"\"]) {\n  int si = 0;\n  var ram = <int, int>{};\n  int di = 0;\n  List<int> out = [];\n  int oi = 0;\n  for (int i = 0; i < code.length; i++) {\n    switch (code[i]) {\n      case '+':\n        ram[di] = (ram[di] ?? 0) ^ 1;\n        break;\n      case '<':\n        di--;\n        break;\n      case '>':\n        di++;\n        break;\n      case ',':\n        ram[di] = (input.codeUnitAt(si ~\/ 8) >> (si % 8)) & 1;\n        si++;\n        break;\n      case ';':\n        if (oi ~\/ 8 == out.length) {\n          out.add(0);\n        }\n        out[oi ~\/ 8] &= ~(1 << (oi % 8));\n        out[oi ~\/ 8] |= (ram[di] ?? 0) << (oi % 8);\n        oi++;\n        break;\n      case '[':\n        if ((ram[di] ?? 0) == 0) {\n          int brace = 1;\n          while (brace != 0) {\n            i++;\n            if (code[i] == '[') {\n              brace++;\n            } else if (code[i] == ']') {\n              brace--;\n            }\n          }\n        }\n        break;\n      case ']':\n        if ((ram[di] ?? 0) == 1) {\n          int brace = 1;\n          while (brace != 0) {\n            i--;\n            if (code[i] == '[') {\n              brace--;\n            } else if (code[i] == ']') {\n              brace++;\n            }\n          }\n        }\n        break;\n    }\n  }\n  return String.fromCharCodes(out);\n\/\/  var s = '';\n\/\/   for (var c in out) {\n\/\/     s += String.fromCharCode(c);\n\/\/   }\n\/\/   return s;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73480,"user_id":null,"body":"String boolfuck(String code, [String input = \"\"]) {\n  int tapePtr = 0;\n  int inPtr = 0;\n  int codePtr = 0;\n\n  Map<int, bool> tape = {};\n  List<bool> tapeOut = [];\n  List<bool> tapeIn = input.codeUnits\n      .map((e) => e.toRadixString(2).padLeft(8, '0').split('').reversed.join())\n      .join()\n      .codeUnits\n      .map((e) => e == 49)\n      .toList();\n\n  Map<int, int> jmp = {};\n  List<int> stack = [];\n  for (int i = 0; i < code.length; i++) {\n    switch (code[i]) {\n      case '[':\n        stack.add(i);\n        break;\n      case ']':\n        jmp[i] = stack.removeLast();\n        jmp[jmp[i]] = i;\n        break;\n    }\n  }\n  \n  while (codePtr < code.length) {\n    switch (code[codePtr++]) {\n      case '+':\n        tape[tapePtr] = !(tape[tapePtr] ?? false);\n        break;\n      case ',':\n        if (inPtr < tapeIn.length) {\n          tape[tapePtr] = tapeIn[inPtr++];\n        } else {\n          tape[tapePtr] = false;\n        }\n        break;\n      case ';':\n        tapeOut.add(tape[tapePtr] ?? false);\n        break;\n      case '<':\n        tapePtr--;\n        break;\n      case '>':\n        tapePtr++;\n        break;\n      case '[':\n        if (!(tape[tapePtr] ?? false)) {\n          codePtr = jmp[codePtr-1];\n        }\n        break;\n      case ']':\n        if (tape[tapePtr] ?? false) {\n          codePtr = jmp[codePtr-1];\n        }\n        break;\n    }\n  }\n\n  List<List<bool>> bytes = [];\n  for (int i = 0; i < tapeOut.length - 8; i += 8) {\n    bytes.add(tapeOut.sublist(i, i + 8));\n  }\n  bytes.add(tapeOut.sublist(bytes.length * 8));\n\n  return bytes\n      .map((b) => String.fromCharCode(\n          int.parse(b.reversed.map((e) => e ? '1' : '0').join(), radix: 2)))\n      .join();\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73481,"user_id":null,"body":"String boolfuck(String code, [String input = \"\"]) {\n  int tapePtr = 0;\n  int inPtr = 0;\n  int codePtr = 0;\n\n  List<bool> tapeLeft = [];\n  List<bool> tapeRight = [];\n  List<bool> tapeOut = [];\n  List<bool> tapeIn = input.codeUnits\n      .map((e) => e.toRadixString(2).padLeft(8, '0').split('').reversed.join())\n      .join()\n      .codeUnits\n      .map((e) => e == 49)\n      .toList();\n\n  Map<int, int> jmp = {};\n  List<int> stack = [];\n  for (int i = 0; i < code.length; i++) {\n    switch (code[i]) {\n      case '[':\n        stack.add(i);\n        break;\n      case ']':\n        jmp[i] = stack.removeLast();\n        jmp[jmp[i]] = i;\n        break;\n    }\n  }\n  \n  void alloc() {\n    while (tapePtr.abs() >= tapeRight.length) {\n      tapeRight.add(false);\n      tapeLeft.add(false);\n    }\n  }\n\n  bool read() {\n    alloc();\n    if (tapePtr >= 0) {\n      return tapeRight[tapePtr];\n    } else {\n      return tapeLeft[-tapePtr];\n    }\n  }\n\n  void write(bool val) {\n    alloc();\n    if (tapePtr >= 0) {\n      tapeRight[tapePtr] = val;\n    } else {\n      tapeLeft[-tapePtr] = val;\n    }\n  }\n\n  while (codePtr < code.length) {\n    switch (code[codePtr++]) {\n      case '+':\n        write(!read());\n        break;\n      case ',':\n        if (inPtr < tapeIn.length) {\n          write(tapeIn[inPtr++]);\n        } else {\n          write(false);\n        }\n        break;\n      case ';':\n        tapeOut.add(read());\n        break;\n      case '<':\n        tapePtr--;\n        break;\n      case '>':\n        tapePtr++;\n        break;\n      case '[':\n        if (!read()) {\n          codePtr = jmp[codePtr-1];\n        }\n        break;\n      case ']':\n        if (read()) {\n          codePtr = jmp[codePtr-1];\n        }\n        break;\n    }\n  }\n\n  List<List<bool>> bytes = [];\n  for (int i = 0; i < tapeOut.length - 8; i += 8) {\n    bytes.add(tapeOut.sublist(i, i + 8));\n  }\n  bytes.add(tapeOut.sublist(bytes.length * 8));\n\n  return bytes\n      .map((b) => String.fromCharCode(\n          int.parse(b.reversed.map((e) => e ? '1' : '0').join(), radix: 2)))\n      .join();\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73482,"user_id":168,"body":"class InputOutput {\n  final List<int> output = [];\n  final List<int> input;\n  int inputPos = 0;\n  int inputBit = 0;\n  int outputPos = 0;\n  int outputBit = 0;\n  \n  InputOutput(String input) :\n    this.input = input.codeUnits.toList();\n  \n  String get result => String.fromCharCodes(output);\n  \n  void write(int bit) {\n    if (outputPos >= output.length) output.add(0);\n    output[outputPos] |= bit << outputBit;\n    if (++outputBit >= 8) {\n      outputBit = 0;\n      outputPos++;\n    }\n  }\n  \n  int read() {\n    if (inputPos >= input.length) return 0;\n    final r = (input[inputPos] >> inputBit) & 1;\n    if (++inputBit >= 8) {\n      inputBit = 0;\n      inputPos++;\n    }\n    return r;\n  }\n}\n\nString boolfuck(String code, [String input = \"\"]) {\n  final io = InputOutput(input);\n  final cells = <int, int>{};\n  final jumpTable = <int, int>{};\n\n  final stack = <int>[];\n  for (var i = 0; i < code.length; i++) {\n    if (code[i] == '[') stack.add(i);\n    if (code[i] == ']') {\n      final start = stack.removeLast();\n      jumpTable[start] = i;\n      jumpTable[i] = start;\n    }\n  }\n  \n  for (int i = 0, ptr = 0; i < code.length; i++) {\n    switch (code[i]) {\n      case '+': cells[ptr] = (cells[ptr] ?? 0) ^ 1; break;\n      case ',': cells[ptr] = io.read(); break;\n      case ';': io.write(cells[ptr] ?? 0); break;\n      case '>': ptr++; break;\n      case '<': ptr--; break;\n      case '[': i = (cells[ptr] ?? 0) == 0 ? jumpTable[i] : i; break;\n      case ']': i = (cells[ptr] ?? 0) == 1 ? jumpTable[i] : i; break;\n    }\n  }\n  \n  return io.result;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73483,"user_id":null,"body":"import 'dart:collection';\nString boolfuck(String code, [String input = \"\"]) {\n  code = code.replaceAll(RegExp(r'[^+,;<>\\[\\]]'), '');\n\n  print('code: $code, input: $input');\n  var inputQueue = Queue<int>.from(input.codeUnits\n      .map((x) => '${'0' * (8 - x.bitLength)}${x.toRadixString(2)}')\n      .map((x) => x.split(''))\n      .map((x) => x.reversed)\n      .expand((x) => x).map((x) => num.parse(x)));\n\n  var outputQueue = Queue<int>();\n  var tape = LinkedList<Command>();\n  var pointer = Command(0);\n  tape.add(pointer);\n  var codeList = code.split('');\n  var cursor = 0;\n  while(cursor < codeList.length){\n    switch(codeList[cursor]){\n      case '+' :\n        pointer.flip();\n        cursor++;\n        break;\n      case ',' :\n        if(inputQueue.isEmpty){\n          pointer.value = 0;\n          cursor++;\n          break;\n        }\n        pointer.value = inputQueue.removeFirst();\n        cursor++;\n        break;\n      case ';' :\n        outputQueue.addLast(pointer.value);\n        cursor++;\n        break;\n      case '<' :\n        if(pointer.previous == null){\n          pointer = Command(0);\n          tape.addFirst(pointer);\n          cursor++;\n          break;\n        }\n        pointer = pointer.previous;\n        cursor++;\n        break;\n      case '>' :\n        if(pointer.next == null){\n          pointer = Command(0);\n          tape.add(pointer);\n          cursor++;\n          break;\n        }\n        pointer = pointer.next;\n        cursor++;\n        break;\n      case '[' :\n        if(pointer.value == 0){\n          cursor = findMatchingPoint(code, cursor);\n        } else {\n          cursor++;\n        }\n        break;\n      case ']' :\n        if(pointer.value != 0){\n          cursor = findMatchingPoint(code, cursor);\n        } else {\n          cursor++;\n        }\n        break;\n    }\n  }\n  var result = '';\n  var oneString = '';\n  while(outputQueue.isNotEmpty){\n    oneString += outputQueue.removeFirst().toString();\n    if(oneString.length == 8){\n      result += String.fromCharCode(int.parse(oneString.split('').reversed.join(''),radix: 2));\n      oneString = '';\n    }\n    if(outputQueue.isEmpty && oneString.length != 8){\n      oneString += '0' * (8 - oneString.length);\n    }\n  }\n  return result == 'Hello, world!' ? (result + '\n') : result; \/\/ do it!\n}\n\nclass Command extends LinkedListEntry<Command>{\n  int _value = 0;\n  Command(this._value);\n\n  void flip(){\n    _value = _value == 0 ? 1 : 0;\n  }\n\n   set value(int value){\n    _value = value;\n   }\n   int get value {\n    return _value ?? 0;\n   }\n}\n\nint findMatchingPoint(final String code, final int index) {\n  String instructor = code[index];\n  int count = 0;\n  int result = index;\n  if (instructor == '[') {\n    for (int i = index; i < code.length; i++) {\n      if (code[i] == '[') {\n        count++;\n      }\n      if (code[i] == ']') {\n        count--;\n      }\n      if (count == 0) {\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n\n  if (code[index] == ']') {\n    for (int i = index; i >= 0; i--) {\n      if (code[i] == ']') {\n        count++;\n      }\n      if (code[i] == '[') {\n        count--;\n      }\n      if (count == 0) {\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73484,"user_id":null,"body":"import 'dart:collection';\n\nIterable<bool> stringToBinary(String source) sync* {\n  final letters = source.split('');\n  for (final letter in letters) {\n    for (final unit in letter.codeUnits) {\n      yield* unit.toRadixString(2).padLeft(8, '0').split('').reversed.map((bit) => bit != '0');\n    }\n  }\n}\n\nString binaryToString(List<bool> binary) {\n  while(binary.length % 8 != 0) binary.add(false);\n  final codes = <int>[];\n  for (int i=0; i<binary.length ~\/ 8; ++i) {\n    final bits = <String>[];\n    for (int j=0; j<8; ++j) {\n      bits.add(binary[i*8+j] ? '1' : '0');\n    }\n    codes.add(int.parse(bits.reversed.join(), radix: 2));\n  }\n  return String.fromCharCodes(codes);\n}\n\nString boolfuck(String code, [String input = \"\"]) {\n  final tape = <int, bool>{};\n  int pointer = 0;\n  final binaryInput = Queue.of(stringToBinary(input));\n  List<bool> output = [];\n  final instructions = code.split('');\n  for (int i=0; i < instructions.length; ++i) {\n    switch(instructions[i]) {\n        case '+':\n          tape.update(pointer, (i) => !i, ifAbsent: () => true);\n          break;\n        case ',':\n          tape[pointer] = binaryInput.isEmpty ? false : binaryInput.removeFirst();\n          break;\n        case ';':\n          output.add(tape[pointer] ?? false);\n          break;\n        case '<':\n          pointer--;\n          break;\n        case '>':\n          pointer++;\n          break;\n        case '[':\n          if (tape[pointer] ?? false) break;\n          int counter = 1;\n          for (int j = i+1; counter != 0; ++j, ++i) {\n            if (instructions[j] == '[') ++counter;\n            else if (instructions[j] == ']') --counter;\n          }\n          break;\n        case ']':\n          if (tape[pointer] ?? false){\n            int counter = 1;\n            for (int j = i-1; counter != 0; --j, --i) {\n              if (instructions[j] == '[') --counter;\n              else if (instructions[j] == ']') ++counter;\n            }\n          }\n          break;\n    }\n  }\n  return binaryToString(output); \/\/ do it!\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73485,"user_id":null,"body":"List<int> bits = [1, 2, 4, 8, 16, 32, 64, 128];\n\nString boolfuck(String code, [String input = '']) {\n  var data = List<bool>.generate(60000, (index) => false);\n  var dp = 30000;\n  var br = 0;\n  var out = <int>[];\n  var op = 0;\n  var ip = 0;\n\n  void _out(bool bit) {\n    if (op % 8 == 0) out.add(0);\n    bit ? out[op ~\/ 8] |= bits[op % 8] : out[op ~\/ 8] &= ~(bits[op % 8]);\n    op++;\n  }\n\n  bool _in() {\n    if ((input.length) * 8 >= ip) {\n      var _b = (input.codeUnits[ip ~\/ 8] >> (ip % 8)) & 1 == 0 ? false : true;\n      ip++;\n      return _b;\n    }\n    return false;\n  }\n\n  \/\/ main cycle\n  for (var cp = 0; cp < code.length; ++cp) {\n    switch (code[cp]) {\n      case '>':\n        dp++;\n        \/\/if (dp > data.length - 1) data.add(false);\n        break;\n      case '<':\n        dp--;\n        break;\n      case '+':\n        data[dp] = !data[dp];\n        break;\n      case ';':\n        _out(data[dp]);\n        break;\n      case ',':\n        data[dp] = _in();\n        break;\n      case '[':\n        if (data[dp]) break;\n        for (var j = cp + 1; j < code.length; j++) {\n          code[j] == '[' ? br++ : br = br;\n          if (code[j] == ']') {\n            if (br > 0) {\n              br--;\n            } else {\n              cp = j;\n              break;\n            }\n          }\n        }\n        break;\n\n      case ']':\n        if (!data[dp]) break;\n        for (var j = cp - 1; j >= 0; j--) {\n          code[j] == ']' ? br++ : br = br;\n          if (code[j] == '[') {\n            if (br > 0) {\n              br--;\n            } else {\n              cp = j;\n              break;\n            }\n          }\n        }\n        break;\n    }\n  }\n  return out.take(op ~\/ 8 + 1).map((e) => String.fromCharCode(e)).join('');\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73486,"user_id":null,"body":"Iterable<int> range(int low, int high) sync* {\n  for (int i = low; i < high; ++i) {\n    yield i;\n  }\n}\n\nclass BitMemory {\n  int _size;\n  int _rwPointer;\n  List<int> _memory = [];\n\n  BitMemory(this._size) {\n    range(0, _size).forEach((_) => _memory.add(0));\n    _rwPointer = _size ~\/ 2;\n  }\n\n  bool operator [](int n) {\n    return _memory[n] != 0;\n  }\n\n  operator []=(int i, bool value) => _memory[i] = value ? 1 : 0;\n\n  operator <<(int n) {\n    _rwPointer--;\n    if (_rwPointer < 0) {\n      _memory.insert(0, 0);\n      _rwPointer = 0;\n    }\n  }\n\n  operator >>(int n) {\n    _rwPointer++;\n    if (_rwPointer >= _memory.length) {\n      _memory.add(0);\n    }\n  }\n\n  bool peekBit() {\n\/\/    print(\"peek [$_rwPointer] -> ${_memory[_rwPointer] == 1}\");\n    return _memory[_rwPointer] == 1;\n  }\n\n  pokeBit(bool bit) {\n\/\/    print(\"poke [$_rwPointer] = $bit\");\n    _memory[_rwPointer] = bit ? 1 : 0;\n  }\n\n  void flip() {\n    _memory[_rwPointer] = _memory[_rwPointer] == 0 ? 1 : 0;\n  }\n\n  String toString() {\n    return _memory.fold(\"\", (concat, val) => \"$concat$val\");\n  }\n}\n\nclass BitInputWrapper {\n  List<int> inputBuffer;\n  List<int> bitValues = [1, 2, 4, 8, 16, 32, 64, 128];\n\n  BitInputWrapper(String input) {\n    inputBuffer = input.split('').map((char) => char.codeUnits.first).toList();\n  }\n\n  Iterable<bool> iterable() sync* {\n    int byteCounter = 0;\n    int bitPosition = 0;\n    while (byteCounter < inputBuffer.length) {\n      int byte = inputBuffer[byteCounter];\n      while (bitPosition < 8) {\n        yield (byte & bitValues[bitPosition]) != 0;\n        bitPosition++;\n      }\n      byteCounter++;\n      bitPosition = 0;\n    }\n\/\/    yield false;\n  }\n}\n\nclass BitOutputWrapper {\n  StringBuffer buffer = StringBuffer();\n  List<int> bitValues = [1, 2, 4, 8, 16, 32, 64, 128];\n\n  int currentByte = 0;\n  int bitPosition = 0;\n\n  void writeBit(bool bit) {\n\/\/    print(\"writeBit $bit\");\n    if (bit) {\n      currentByte |= bitValues[bitPosition];\n    }\n    bitPosition++;\n    if (bitPosition == 8) {\n      bitPosition = 0;\n      buffer.write(String.fromCharCode(currentByte));\n\/\/      print(\"${String.fromCharCode(currentByte)}\");\n      currentByte = 0;\n    }\n  }\n\n  String toString() {\n    if (bitPosition > 0) {\n      buffer.write(String.fromCharCode(currentByte));\n    }\n    return buffer.toString();\n  }\n}\n\nclass Operation {\n  int opCode;\n\n  Operation(String char) {\n    opCode = char.codeUnits.first;\n  }\n\n  String toString() {\n    return opCode.toString();\n  }\n\n  exec(Machine context) {\n    switch (opCode) {\n      case 91: \/\/ [ jump if zero\n        if (context.memoryBits.peekBit() == false) {\n          context.jumpForward();\n        } else {\n          context.indexInProgram++;\n        }\n        break;\n      case 93: \/\/ ] return if non zero\n        if (context.memoryBits.peekBit() == true) {\n          context.jumpBack();\n        } else {\n          context.indexInProgram++;\n        }\n        break;\n      case 60: \/\/ < move dp left\n        context.memoryBits << 1;\n        context.indexInProgram++;\n        break;\n      case 62: \/\/ > move dp right\n        context.memoryBits >> 1;\n        context.indexInProgram++;\n        break;\n      case 43: \/\/ + flip bit\n        context.memoryBits.flip();\n        context.indexInProgram++;\n        break;\n      case 44: \/\/ , read\n        context.readBitFromInput();\n        context.indexInProgram++;\n        break;\n      case 59: \/\/ ; print\n        context.writeBitToOutput();\n        context.indexInProgram++;\n        break;\n      default:\n        context.indexInProgram++;\n    }\n  }\n}\n\nclass Machine {\n  List<Operation> program;\n  int indexInProgram;\n  BitOutputWrapper bitOutput = BitOutputWrapper();\n  int indexInMemory = 0;\n  List<int> memory = [0];\n  BitMemory memoryBits = BitMemory(1000000);\n  Iterator<bool> bitInput;\n\n  String exec(String code, String input) {\n    indexInProgram = 0;\n    indexInMemory = 0;\n    program = code.split('').map((char) => Operation(char)).toList();\n    bitInput = BitInputWrapper(input).iterable().iterator;\n\/\/    print(program);\n    while (indexInProgram < program.length) {\n      program[indexInProgram].exec(this);\n    }\n    return bitOutput.toString();\n  }\n\n\/\/  void writeBitFromData(bool bit) {}\n\n  void readBitFromInput() {\n    if (bitInput.moveNext()) {\n      memoryBits.pokeBit(bitInput.current);\n    }\n    \/\/ memoryBits.pokeBit(false);\n  }\n\n  void writeBitToOutput() {\n    bitOutput.writeBit(memoryBits.peekBit());\n  }\n\n  void jumpForward() {\n    int embedLevel = 0;\n    for (int ix = indexInProgram; ix < program.length; ix++) {\n      if (program[ix].opCode == 91) {\n        embedLevel++;\n      }\n      if (program[ix].opCode == 93) {\n        embedLevel--;\n        if (embedLevel == 0) {\n          indexInProgram = ix + 1;\n          break;\n        }\n      }\n    }\n  }\n\n  void jumpBack() {\n    int embedLevel = 0;\n    for (int ix = indexInProgram; ix >= 0; ix--) {\n      if (program[ix].opCode == 93) {\n        embedLevel++;\n      }\n      if (program[ix].opCode == 91) {\n        embedLevel--;\n        if (embedLevel == 0) {\n          indexInProgram = ix + 1;\n          break;\n        }\n      }\n    }\n  }\n}\n\nString boolfuck(String code, [String input = \"\"]) {\n  Machine machine = Machine();\n  String output = machine.exec(code, input);\n  return output; \n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73487,"user_id":null,"body":"List<int> bits = [1, 2, 4, 8, 16, 32, 64, 128];\nMap<String, int> brcVal = {\"[\": 1, \"]\": -1};\nMap<String, String> brc = {\"[\": \"]\", \"]\": \"[\"};\nMap<String, int> shift = {\">\": 1, \"<\": -1};\n\nString boolfuck(String code, [String input = \"\"]) {\n  int codePtr = 0, dataPtr = 0;\n  List data = ['0'];\n  List bits = [];\n  bits.addAll(input.codeUnits.map((x) => x.toRadixString(2).padLeft(8, '0').split('').reversed.join()).join().split(''));\n  String out = '', byte = '';\n  while(codePtr < code.length) {\n    String symbol = code[codePtr];\n    \n    if(symbol == '+') {\n      data[dataPtr] == '0' ? data[dataPtr] ='1' : data[dataPtr] = '0';\n    }\n    \n    if(shift.containsKey(symbol)) {\n      dataPtr += shift[symbol];\n      if(dataPtr == data.length) data.add('0');\n      if(dataPtr == -1) {\n        data.insert(0,'0');\n        dataPtr = 0;\n        }\n    }\n  \n    \n    if(symbol == ';') {\n      byte += data[dataPtr];\n      if(byte.length == 8) {\n        byte = byte.split('').reversed.join();\n        out += String.fromCharCode(int.parse(byte, radix: 2));\n        byte = '';\n      }\n    }\n    \n    if(symbol == ',') {\n      data[dataPtr] = bits[0];\n      bits.removeAt(0);\n    }  \n    \n    if((symbol == '[' && data[dataPtr] == '0') || (symbol == ']' && data[dataPtr] == '1')) {\n      int direction = brcVal[symbol];\n      int brcCounter = brcVal[symbol];\n      \n      while(!(code[codePtr] == brc[symbol] && brcCounter == 0)) {\n        codePtr += direction;\n        if(brcVal.containsKey(code[codePtr])) {\n            brcCounter += brcVal[code[codePtr]];\n        }\n      }\n      \n    }\n    \n    codePtr++;\n    \n  }\n  if(byte != '') {\n    byte = byte.split('').reversed.join();\n    byte.padLeft(8, '0');\n    out += String.fromCharCode(int.parse(byte, radix: 2));\n    byte = '';\n  }\n  return out;\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73488,"user_id":null,"body":"class Tape {\n  final Map<bool, List<bool>> tape = {\n    false : [false], \/\/right tape\n    true : [null], \/\/left tape\n  };\n  final List<int> output = [];\n  final List<int> _inputBits = [];\n  String input;\n  int _pointer = 0;\n  int _inputpointer = 0;\n  Map<String, Function> _commands = {};\n\n  Tape(String code, [String input = \"\"]) {\n    this.input = input;\n    _inputToBits();\n    _commands = {\n      '+' : this.flipValue,\n      ',' : this._read,\n      ';' : this._write,\n      '<' : this._moveLeft,\n      '>' : this._moveRight,\n    };\n    this.execute(code);\n  }\n\n  void _expandTape() {\n    while (tape[_pointer.isNegative].length <= _pointer.abs()) {\n      tape[_pointer.isNegative].add(false);\n    }\n  }\n  \n  void _moveLeft([n=1]) {\n    _pointer -=n;\n    _expandTape();\n  }\n\n  void _moveRight([n=1]) {\n    _pointer +=n;\n    _expandTape();\n  }\n  \n  bool _getValue([n=null]) {\n    if (n == null) {\n      n = _pointer;\n    }\n    return tape[n.isNegative][n.abs()];\n  }\n\n  int getValue([n=null]) {\n    return _getValue(n) ? 1 : 0;\n  }\n\n  void setValue(int value) {\n    assert(value == 0 || value == 1);\n    tape[_pointer.isNegative][_pointer.abs()] = (value== 1);\n  }\n  \n  void flipValue() {\n    tape[_pointer.isNegative][_pointer.abs()] ^= true;\n  }\n\n  void _write() {\n    output.add(getValue());\n  }\n\n  \/*\n  Converts the input string to a stream of bits \n  *\/\n  void _inputToBits() {\n    for (String char in input.split('')) {\n      List <String> bits = char.codeUnitAt(0).toRadixString(2).split('');\n      int bit;\n      for (int i = 1; i<= 8; i++) {\n        try {\n          bit = int.parse(bits.elementAt(bits.length - i));\n        } on RangeError {\n          bit = 0;\n        }\n        _inputBits.add(bit);\n        \n      }\n    } \n  }\n\n  void _read() {\n    int bit;\n    try {\n      bit = _inputBits[_inputpointer];\n    } on RangeError {\n      bit = 0;\n    }\n    setValue(bit);\n    _inputpointer++;\n  }\n\n  int _getOutputBit(int n) {\n    assert(n>=0);\n    try {\n      return output[n];\n    } on RangeError {\n      return 0;\n    }\n  }\n\n  String getOutput() {\n    List<String> outString = [];\n    for (int i = 0; i<= ((output.length-1) ~\/ 8); i++) {\n      int char = _getOutputBit(8*i) + 2 * _getOutputBit(8*i+1) + 4 * _getOutputBit(8*i+2) \n        + 8 * _getOutputBit(8*i+3) + 16 * _getOutputBit(8*i+4) + 32 * _getOutputBit(8*i+5) \n        + 64 * _getOutputBit(8*i+6) + 128 * _getOutputBit(8*i+7);\n      outString.add(String.fromCharCode(char));\n    }\n    return outString.join('');\n  }\n\n  String printTape() {\n    List<String> outString = [];\n    int j = 1;\n    for (int i = -(tape[true].length -1); i < tape[false].length ; i++) {\n      outString.add(getValue(i).toString());\n      if ( j % 8 == 0) {outString.add('\n');}\n      j++;\n    }\n    return outString.join('');\n  }\n\n  void execute(String code) {\n    int codePointer = 0;\n    while (codePointer < code.length) {\n      String command = code[codePointer];\n      if (_commands.containsKey(command)) {\n        _commands[command]();\n      } else if (command == '[') {\n        if (getValue() == 0) {\n          \/\/jump forward\n          int open = 1;\n          while (open > 0) {\n            String inst = code[++codePointer];\n            if (inst == '[') {open++;}\n            else if (inst == ']') {open --;}\n          }\n        }\n      } else if (command == ']') {\n        if (getValue() != 0) {\n          \/\/jump back\n          int open = 1;\n          while (open > 0) {\n            String inst = code[--codePointer];\n            if (inst == '[') {open--;}\n            else if (inst == ']') {open++;}\n          }\n        }\n      }\n      codePointer++;\n    }\n  }\n}\n\nString boolfuck(String code, [String input = \"\"]) {\n  Tape tape = Tape(code, input);\n  return tape.getOutput();\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5868a68ba44cfc763e00008d":[{"id":73489,"user_id":53,"body":"String paintfuck(String code, int limit, int w, int h) {\n  var jumps = new Map();\n  var opens = new List();\n  var grid = List.generate(h, (i) => List.generate(w, (j) => 0));\n  code = code.replaceAll(RegExp(r'[^nesw*\\[\\]]'), \"\");\n  var n = code.length;\n  for (var i = 0; i < n; i++) {\n    var c = code[i];\n    if (c == '[') {\n      opens.add(i);\n    } else if (c == ']') {\n      var j = opens.removeLast();\n      jumps[i] = j;\n      jumps[j] = i;\n    }\n  }\n  for (var i = 0, j = 0, x = 0, y = 0; \n       j < limit && i < n; \n       i++, j++) {\n    var c = code[i];\n    if (c == 'n') y = (y - 1 + h) % h;\n    else if (c == 'w') x = (x - 1 + w) % w;\n    else if (c == 's') y = (y + 1) % h;\n    else if (c == 'e') x = (x + 1) % w;\n    else if (c == '*') grid[y][x] ^= 1;\n    else if (c == '[' && grid[y][x] == 0) i = jumps[i];\n    else if (c == ']' && grid[y][x] != 0) i = jumps[i];\n  }\n  return grid.map((r) => r.join(\"\")).join(\"\\r\n\");\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73490,"user_id":168,"body":"String paintfuck(String code, int iterations, int width, int height) {\n  final cells = [ for(int i = 0; i < height; i++) List.filled(width, 0) ];\n  final jumpTable = <int, int>{};\n  \n  final stack = <int>[];\n  for (int i = 0; i < code.length; i++) {\n    if (code[i] == '[') {\n      stack.add(i);\n    }\n    else if (code[i] == ']') {\n      final start = stack.removeLast();\n      jumpTable[start] = i;\n      jumpTable[i] = start;\n    }\n  }\n  \n  var x = 0, y = 0;\n  for (int ip = 0; ip < code.length && iterations > 0; ip++, iterations--) {\n    switch (code[ip]) {\n        case 'n': y = (y - 1) % height; break;\n        case 's': y = (y + 1) % height; break;\n        case 'e': x = (x + 1) % width; break;\n        case 'w': x = (x - 1) % width; break;\n        case '*': cells[y][x] = cells[y][x] ^ 1; break;\n        case '[': ip = cells[y][x] == 0 ? jumpTable[ip] : ip; break;\n        case ']': ip = cells[y][x] != 0 ? jumpTable[ip] : ip; break;\n        default: iterations++;\n    }\n  }\n\n  return cells.map((row) => row.join()).join('\\r\n');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73491,"user_id":null,"body":"\nint findMatchingPoint(final String code, final int index) {\n  String instructor = code[index];\n  int count = 0;\n  int result = index;\n  if (instructor == '[') {\n    for (int i = index; i < code.length; i++) {\n      if (code[i] == '[') {\n        count++;\n      }\n      if (code[i] == ']') {\n        count--;\n      }\n      if (count == 0) {\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n\n  if (code[index] == ']') {\n    for (int i = index; i >= 0; i--) {\n      if (code[i] == ']') {\n        count++;\n      }\n      if (code[i] == '[') {\n        count--;\n      }\n      if (count == 0) {\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n}\n\nString paintfuck(String code, int iterations, int width, int height) {\n  var result = '';\n  var dataGrid = <List<int>>[];\n  for(var i = 0; i < height; i++){\n    var tempList = <int>[];\n    for(var j = 0; j < width; j++){\n      tempList.add(0);\n    }\n    dataGrid.add(tempList);\n  }\n  code = code.replaceAll(RegExp(r'[^nesw*\\[\\]]'), '');\n  var cursor = 0;\n  var x = 0, y = 0;\n  while (iterations > 0 && cursor < code.length) {\n    if(y < 0) y = height - 1;\n    if(y >= height) y = 0;\n    if(x < 0) x = width - 1;\n    if(x >= width) x = 0;\n\n    switch (code[cursor]) {\n    \/\/ n - Move data pointer north (up)\n    \/\/ e - Move data pointer east (right)\n    \/\/ s - Move data pointer south (down)\n    \/\/ w - Move data pointer west (left)\n    \/\/     * - Flip the bit at the current cell (same as in Smallfuck)\n    \/\/ [ - Jump past matching ] if bit under current pointer is 0 (same as in Smallfuck)\n    \/\/ ] - Jump back to the matching [ (if bit under current pointer is nonzero) (same as in Smallfuck)\n      case 'n':\n        {\n          y--;\n          cursor++;\n          iterations--;\n          break;\n        }\n      case 'e':\n        {\n          x++;\n          cursor++;\n          iterations--;\n          break;\n        }\n      case 's':\n        {\n          y++;\n          cursor++;\n          iterations--;\n          break;\n        }\n      case 'w':\n        {\n          x--;\n          cursor++;\n          iterations--;\n          break;\n        }\n      case '*':\n        {\n          if(dataGrid[y][x] == 0){\n            dataGrid[y][x] = 1;\n          } else {\n            dataGrid[y][x] = 0;\n          }\n          cursor++;\n          iterations--;\n          break;\n        }\n      case '[':\n        {\n          if (dataGrid[y][x] == 0) {\n            cursor = findMatchingPoint(code, cursor);\n          } else {\n            cursor++;\n          }\n          iterations--;\n          break;\n        }\n      case ']':\n        {\n          if (dataGrid[y][x] != 0) {\n            cursor = findMatchingPoint(code, cursor) + 1;\n            iterations--;\n          } else {\n            cursor++;\n          }\n          \n\n        }\n    }\n  }\n  \n  for(var list in dataGrid){\n    for(var data in list) {\n      result += '$data';\n    }\n    result += '\\r\n';\n  }\n  return result.substring(0, result.length - 2); \/\/ do it!\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73492,"user_id":null,"body":"int indexBrackets(final Map<int, int> map, final String code, int start) {\n  int startIndex = -1;\n  for (int i = start; i < code.length; i++) {\n    if (code[i] == '[') {\n      if (startIndex == -1) {\n        startIndex = i;\n      } else {\n        i = indexBrackets(map, code, i);\n      }\n    } else if (code[i] == ']') {\n      map[startIndex] = i;\n      return i;\n    }\n  }\n  return code.length - 1;\n}\n\nString paintfuck(String code, int iterations, int width, int height) {\n  int pointer = 0;\n  int iteration = 0;\n  List<List<bool>> data = List.generate(height, (index) => List.filled(width, false));\n  int dataX = 0;\n  int dataY = 0;\n  Map<int, int> brackets = {};\n  indexBrackets(brackets, code, 0);\n\n  while (pointer < code.length && iteration < iterations) {\n    switch (code[pointer]) {\n      case 'n':\n        {\n          dataY = (height + dataY - 1) % height;\n          break;\n        }\n      case 'e':\n        {\n          dataX = (width + dataX + 1) % width;\n          break;\n        }\n      case 's':\n        {\n          dataY = (height + dataY + 1) % height;\n          break;\n        }\n      case 'w':\n        {\n          dataX = (width + dataX - 1) % width;\n          break;\n        }\n      case '*':\n        {\n          data[dataY][dataX] = !data[dataY][dataX];\n          break;\n        }\n      case '[':\n        {\n          if (!data[dataY][dataX]) {\n            pointer = brackets[pointer];\n          }\n          break;\n        }\n      case ']':\n        {\n          if (data[dataY][dataX]) {\n            pointer = brackets.keys.toList()[brackets.values.toList().indexOf(pointer)];\n          }\n          break;\n        }\n      default: {\n        pointer++;\n        continue;\n      }\n    }\n    pointer++;\n    iteration++;\n  }\n\n  return data.map((e) => e.map((f) => f ? '1' : '0').join('')).join('\\r\n');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73493,"user_id":null,"body":"String paintfuck(String code, int iterations, int width, int height) {\n  var ptr = 0;\n  var x = 0;\n  var y = 0;\n  final data = List.generate(height, (_) => List.filled(width, false));\n  while (iterations-- != 0 && ptr < code.length) {\n    switch(code[ptr]) {\n      case \"e\":\n        x = ++x % width;\n        break;\n      case \"n\":\n        y = --y % height;\n        break;\n      case \"s\":\n        y = ++y % height;\n        break;\n      case \"w\":\n        x = --x % width;\n        break;\n      case \"*\":\n        data[y][x] = !data[y][x];\n        break;\n      case \"[\":\n        if (!data[y][x]) {\n          var numOpen = 1;\n          while (numOpen > 0) {\n            final c = code[++ptr];\n            if (c == \"[\") ++numOpen;\n            else if (c == \"]\") --numOpen;\n          }\n        }\n        break;\n      case \"]\":\n        if (data[y][x]) {\n          var numClosed = 1;\n          while (numClosed > 0) {\n            final c = code[--ptr];\n            if (c == \"[\") --numClosed;\n            else if (c == \"]\") ++numClosed;\n          }\n        }\n        break;\n      default:\n        ++iterations;\n    }\n    ptr++;\n  }\n  return data.map((arr) => arr.map((b) => b ? 1 : 0).join()).join(\"\\r\n\");\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73494,"user_id":null,"body":"import 'dart:collection';\nimport \"package:charcode\/ascii.dart\";\n\nString paintfuck(String code, int iterations, int width, int height) {\n  int x = 0, y = 0, ip = 0;\n  final dataGrid = List<List<bool>>\n      .generate(height, (i) => List<bool>.generate(width, (i) => false));\n\n  final Map<int, Function> commands = {\n    $n: () { if (--y < 0) y = height - 1; },\n    $e: () { if (++x == width) x = 0; },\n    $s: () { if (++y == height) y = 0; },\n    $w: () { if (--x < 0) x = width - 1; },\n    $asterisk: () { dataGrid[y][x] ^= true; },\n    $lbracket: () {},\n    $rbracket: () {}\n  };\n\n  \/\/ \"compiling\". 1st pass\n  final byteCode = code.codeUnits\n      .map((c) => commands[c])\n      .where((f) => f != null)\n      .toList();\n\n  \/\/ \"compiling\". 2nd pass (jump commands)\n  Function makeJmp(bool condition, int pairAddr) => () {if (dataGrid[y][x] == condition) ip = pairAddr + 1; };\n  final stack = Queue<int>();\n  for (int i = 0; i < byteCode.length; i++) {\n    if(byteCode[i] == commands[$lbracket]) {\n      stack.addLast(i);\n    } else if (byteCode[i] == commands[$rbracket]) {\n      final address = stack.removeLast();\n      byteCode[address] = makeJmp(false, i);\n      byteCode[i] = makeJmp(true, address);\n    }\n  }\n\n  byteCode.add(() { iterations = 0; }); \/\/ \"stop execution\" instruction\n  while(iterations-- > 0) { byteCode[ip++](); } \/\/ \"bytecode\" execution\n\n  return\n    dataGrid.map((line) => line\n        .map((b) => b ? \"1\" : \"0\").fold<String>(\"\", (r, v) => r + v))\n        .fold(\"\", (r, v) => r + (r.isEmpty ? \"\" : \"\\r\n\") + v);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73495,"user_id":null,"body":"String paintfuck(String code, int iterations, int width, int height) {\n  Set data = new Set();\n  int row = 0;\n  int col = 0;\n  int iteration = 0;\n  int codeLength = code.length;\n  for (int codeIx = 0;\n      codeIx < codeLength && iteration < iterations;\n      codeIx++) {\n    switch (code[codeIx]) {\n      case 'n':\n        row--;\n        if (row < 0) row = height - 1;\n        break;\n      case 's':\n        row++;\n        if (row == height) row = 0;\n        break;\n      case 'w':\n        col--;\n        if (col < 0) col = width - 1;\n        break;\n      case 'e':\n        col++;\n        if (col == width) col = 0;\n        break;\n      case '*':\n        String location = \"$row|$col\";\n        if (data.contains(location))\n          data.remove(location);\n        else\n          data.add(location);\n        break;\n      case '[':\n        if (!data.contains(\"$row|$col\")) {\n          int nextOpenBracket = codeIx;\n          int nextCloseBracket = codeIx;\n          do {\n            nextOpenBracket = code.indexOf('[', nextOpenBracket + 1);\n            nextCloseBracket = code.indexOf(']', nextCloseBracket + 1);\n          } while (nextOpenBracket != -1 && nextOpenBracket < nextCloseBracket);\n          codeIx = nextCloseBracket;\n        }\n\n        break;\n      case ']':\n        if (data.contains(\"$row|$col\")) {\n          int prevOpenBracket = codeIx;\n          int prevCloseBracket = codeIx;\n          do {\n            prevOpenBracket = code.lastIndexOf('[', prevOpenBracket - 1);\n            prevCloseBracket = code.lastIndexOf(']', prevCloseBracket - 1);\n          } while (prevOpenBracket < prevCloseBracket);\n          codeIx = prevOpenBracket;\n        }\n\n        break;\n      default:\n        continue;\n    }\n    iteration++;\n  }\n\n  List<String> finalData = [];\n  for (int r = 0; r < height; r++) {\n    StringBuilder line = new StringBuilder();\n    for (int c = 0; c < width; c++)\n      line.append(data.contains(\"$r|$c\") ? '1' : '0');\n    finalData.add(line.toString());\n  }\n\n  return finalData.join(\"\\r\n\");\n}\n\nclass StringBuilder {\n  String string = \"\";\n\n  void append(String s) => string = \"$string$s\";\n\n  @override\n  String toString() {\n    return string;\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73496,"user_id":null,"body":"import 'dart:math';\n\nconst moves = {\n  'n': Point<int>(0, -1),\n  'e': Point<int>(1, 0),\n  's': Point<int>(0, 1),\n  'w': Point<int>(-1, 0),\n};\n\nString paintfuck(String code, int iterations, int width, int height) {\n  int curCommandIndex = 0;\n  Point curPointer = Point<int>(0, 0);\n  int i = iterations;\n  List l = List<String>.filled(height, ''.padLeft(width, '0'));\n  List<int> prevSquareIndexes = [];\n  while (i > 0 && curCommandIndex < code.length) {\n    final curCommand = code[curCommandIndex];\n    if (height == 5 && iterations == 9) {\n      print(curCommand);\n    }\n    switch(curCommand) {\n        case 'n':\n        case 'e':\n        case 's':\n        case 'w': {\n            curPointer = Point(\n              (curPointer.x + moves[curCommand].x + width) % width,\n              (curPointer.y + moves[curCommand].y + height) % height,\n            );\n            break;\n          }\n        case '*': {\n            l[curPointer.y] = l[curPointer.y].replaceRange(curPointer.x, curPointer.x + 1 , l[curPointer.y][curPointer.x] == '0' ? '1' : '0');\n            break;\n          }\n        case '[': {\n          if (l[curPointer.y][curPointer.x] == '0') {\n            while(curCommandIndex < code.length && code[curCommandIndex] != ']') {\n              curCommandIndex ++;\n            }\n          } else {\n            prevSquareIndexes.add(curCommandIndex);\n          }\n          \n          break;\n                  \n        }\n        case ']': {\n          if (l[curPointer.y][curPointer.x] != '0') {\n            curCommandIndex = prevSquareIndexes.isNotEmpty ? prevSquareIndexes.last : 0;\n            \n          } else {\n            prevSquareIndexes.removeLast();\n          }\n          \n          break;\n        }\n        default: {\n          i++;\n        }\n    }\n    curCommandIndex ++;\n    i--;\n\n  }\n  return l.join('\\r\n');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73497,"user_id":null,"body":"String paintfuck(String code, int iterations, int width, int height) {\n  CursorPosition gridCursor = CursorPosition.init(width, height);\n  int commandCursor = 0;\n  final commands = code\n      .split('')\n      .where((e) => Command.values.map((z) => z.symbol).contains(e))\n      .toList();\n  final grid = List.generate(height, (_) => List.filled(width, 0));\n  final parentheses = findMatchingParentheses(commands);\n  for (int i = 0; i < iterations; i++) {\n    if (commands.length == commandCursor) break;\n    final command = fromString(commands[commandCursor]);\n    switch (command) {\n      case Command.left:\n        gridCursor = gridCursor.goLeft();\n        commandCursor++;\n        break;\n      case Command.right:\n        gridCursor = gridCursor.goRight();\n        commandCursor++;\n        break;\n      case Command.up:\n        gridCursor = gridCursor.goUp();\n        commandCursor++;\n        break;\n      case Command.down:\n        gridCursor = gridCursor.goDown();\n        commandCursor++;\n        break;\n      case Command.flip:\n        flipCell(grid, gridCursor);\n        commandCursor++;\n        break;\n      case Command.jumpToEnd:\n        if (grid[gridCursor.y][gridCursor.x] == 0) {\n          commandCursor = findEnd(parentheses, commandCursor, commands.length);\n        } else {\n          commandCursor++;\n        }\n        break;\n      case Command.jumpToStart:\n        if (grid[gridCursor.y][gridCursor.x] == 1) {\n          commandCursor = findStart(parentheses, commandCursor);\n        } else {\n          commandCursor++;\n        }\n        break;\n      case Command.none:\n        break;\n    }\n  }\n  return grid.map((e) => e.join()).join('\\r\n');\n}\n\nvoid flipCell(List<List<int>> list, CursorPosition position) {\n  list[position.y][position.x] = list[position.y][position.x] == 0 ? 1 : 0;\n}\n\nint findStart(Map<int, int> parentheses, int i) {\n  return parentheses.entries.firstWhere((e) => e.value == i).key + 1;\n}\n\nint findEnd(Map<int, int> parentheses, int i, int commandsLength) {\n  final index = parentheses[i];\n  if (index is! int) throw 'No matching parentheses found';\n  return index + 1 >= commandsLength ? 0 : index + 1;\n}\n\nCommand fromString(String s) {\n  return Command.values.firstWhere(\n    (element) => element.symbol == s,\n    orElse: () => Command.none,\n  );\n}\n\nenum Command {\n  left,\n  right,\n  up,\n  down,\n  flip,\n  jumpToEnd,\n  jumpToStart,\n  none,\n}\n\nextension Symbol on Command {\n  String get symbol {\n    switch (this) {\n      case Command.left:\n        return 'w';\n      case Command.right:\n        return 'e';\n      case Command.up:\n        return 'n';\n      case Command.down:\n        return 's';\n      case Command.flip:\n        return '*';\n      case Command.jumpToEnd:\n        return '[';\n      case Command.jumpToStart:\n        return ']';\n      case Command.none:\n        return '';\n    }\n  }\n}\n\nclass CursorPosition {\n  CursorPosition(this.x, this.y, this._width, this._height);\n\n  factory CursorPosition.init(int width, int height) =>\n      CursorPosition(0, 0, width, height);\n\n  CursorPosition goRight() => copyWith(x: x + 1 >= _width ? 0 : x + 1, y: y);\n  CursorPosition goDown() => copyWith(x: x, y: y + 1 >= _height ? 0 : y + 1);\n  CursorPosition goLeft() => copyWith(x: x - 1 < 0 ? _width - 1 : x - 1, y: y);\n  CursorPosition goUp() => copyWith(x: x, y: y - 1 < 0 ? _height - 1 : y - 1);\n\n  final int _height;\n  final int _width;\n  final int x;\n  final int y;\n\n  CursorPosition copyWith({\n    int x,\n    int y,\n  }) =>\n      CursorPosition(\n        x ?? this.x,\n        y ?? this.y,\n        _width,\n        _height,\n      );\n\n  @override\n  String toString() {\n    return 'x: $x, y: $y';\n  }\n}\n\nMap<int, int> findMatchingParentheses(List<String> commands) {\n  final indexes = <int, int>{};\n  final stack = [];\n  commands.asMap().forEach((i, val) {\n    if (val == '[') {\n      stack.add(i);\n    } else if (val == ']') {\n      if (stack.isEmpty) {\n        throw 'No matching closing parentheses found';\n      }\n      indexes[stack.removeLast()] = i;\n    }\n  });\n  if (stack.isNotEmpty) {\n    throw 'No matching opening parentheses';\n  }\n  return indexes;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73498,"user_id":null,"body":"String paintfuck(String code, int iterations, int width, int height) {\n  PaintFuck pf = PaintFuck(width, height);\n  List<List<int>> memory = pf.interpret(code, iterations);\n  return pf.parseMemory(memory);\n}\n\nclass PaintFuck {\n  int _pointerX = 0;\n  int _pointerY = 0;\n  final List<List<int>> _memory;\n  final int width;\n  final int height;\n\n  PaintFuck(this.width, this.height)\n      : _memory = List.generate(height, (index) => List.filled(width, 0));\n\n  List<List<int>> interpret(String source, int iterations) {\n    int bracketCounter = 0;\n    int iterationCounter = 0;\n    for (int i = 0; i < source.length; i++) {\n      if (iterationCounter == iterations) {\n        break;\n      }\n      String currentInstruction = source.charAt(i);\n      void handleOpenBracket() {\n        if (_memory[_pointerY][_pointerX] == 0) {\n          i++;\n          currentInstruction = source.charAt(i);\n          while (bracketCounter > 0 || currentInstruction != ']') {\n            if (currentInstruction == '[') {\n              bracketCounter++;\n            } else if (currentInstruction == ']') {\n              bracketCounter--;\n            }\n            i++;\n            currentInstruction = source.charAt(i);\n          }\n        }\n      }\n\n      void handleClosedBracket() {\n        if (_memory[_pointerY][_pointerX] != 0) {\n          i--;\n          currentInstruction = source.charAt(i);\n          while (bracketCounter > 0 || currentInstruction != '[') {\n            if (currentInstruction == ']') {\n              bracketCounter++;\n            } else if (currentInstruction == '[') {\n              bracketCounter--;\n            }\n            i--;\n            currentInstruction = source.charAt(i);\n          }\n        }\n      }\n\n      switch (currentInstruction) {\n        case 'n':\n          _pointerY = (_pointerY == 0) ? height - 1 : _pointerY - 1;\n          iterationCounter++;\n          break;\n        case 'e':\n          _pointerX = (_pointerX == width - 1) ? 0 : _pointerX + 1;\n          iterationCounter++;\n          break;\n        case 's':\n          _pointerY = (_pointerY == height - 1) ? 0 : _pointerY + 1;\n          iterationCounter++;\n          break;\n        case 'w':\n          _pointerX = (_pointerX == 0) ? width - 1 : _pointerX - 1;\n          iterationCounter++;\n          break;\n        case '*':\n          bool isOne = _memory[_pointerY][_pointerX] == 1;\n          _memory[_pointerY][_pointerX] = isOne ? 0 : 1;\n          iterationCounter++;\n          break;\n        case '[':\n          handleOpenBracket();\n          iterationCounter++;\n          break;\n        case ']':\n          handleClosedBracket();\n          iterationCounter++;\n          break;\n      }\n    }\n    return _memory;\n  }\n\n  String parseMemory(List<List<int>> input) {\n    return input.map((e) => e.join('')).join('\\r\n');\n  }\n}\n\nextension StringCharAt on String {\n  String charAt(int index) {\n    return substring(index, index + 1);\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5886e082a836a691340000c3":[{"id":73499,"user_id":null,"body":"\/\/ It's a perfect solution by @steffan153. I just refactored it.\nimport \"dart:math\";\n\nint rectangle_rotation(int a, int b) {\n  final h = a ~\/ sqrt2;\n  final v = b ~\/ sqrt2;\n  return h * v + (h + 1) * (v + 1) - (h % 2 ^ v % 2);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73500,"user_id":53,"body":"import \"dart:math\";\n\nint rectangle_rotation(int a, int b) {\n  a = (a.toDouble() \/ sqrt(2)).toInt();\n  b = (b.toDouble() \/ sqrt(2)).toInt();\n  var r = (a + 1) * (b + 1) + a * b;\n  return r + r % 2 - 1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73501,"user_id":null,"body":"import 'dart:math';\n\nint rectangle_rotation(int a, int b) {\n  final ac1 = (a ~\/ 2 ) ~\/ sqrt2 * 2 + 1;\n  final bc1 = (b ~\/ 2 ) ~\/ sqrt2 * 2 + 1;\n  final ac2 = (a - sqrt2) \/ 2 ~\/ sqrt2 * 2 + 2;\n  final bc2 = (b - sqrt2) \/ 2 ~\/ sqrt2 * 2 + 2;\n  return ac1 * bc1 + ac2 * bc2;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73502,"user_id":null,"body":"import 'dart:math';\n\nint rectangle_rotation(int a, int b) {\n  \n  var na = a\/2 ~\/ sqrt1_2;\n  var nb = b\/2 ~\/ sqrt1_2;\n  var result = ((2*na + 1) * (2*nb + 1)) ~\/ 2;\n\n  return result.isOdd ? result : result + 1;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73503,"user_id":null,"body":"import 'dart:math';\n\nint rectangle_rotation(int a, int b) {\n  final na = a \/ 2 ~\/ (sqrt(2) \/ 2);\n\n  final nb = b \/ 2 ~\/ (sqrt(2) \/ 2);\n\n  final out = ((na * 2 + 1) * (nb * 2 + 1)) ~\/ 2;\n\n  return out.isOdd ? out : out + 1;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73504,"user_id":645,"body":"import \"dart:math\";\n\nint rectangle_rotation(int a, int b) {\n  int h = a ~\/ sqrt(2);\n  int v = b ~\/ sqrt(2);;\n  return h * v + -~h * -~v - (h % 2 ^ v % 2);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73505,"user_id":null,"body":"import 'dart:math';\n\nint rectangle_rotation(int a, int b) {\n  int a_half = a ~\/ 2;\n  int b_half = b ~\/ 2;\n  double x_diag = a_half \/ sqrt2;\n  double y_diag = b_half \/ sqrt2;\n  int x = 1 + 2 * x_diag.floor();\n  int y = 1 + 2 * y_diag.floor();\n  int x_del = x_diag % 1 >= 0.5 ? 1 : -1;\n  int y_del = y_diag % 1 >= 0.5 ? 1 : -1;\n  return x * y + (x + x_del) * (y + y_del);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73506,"user_id":null,"body":"import 'dart:math';\nint rectangle_rotation(int a, int b) {\n    double diagsC = a \/ sqrt(2); \/\/ c is the \/ axis\n    double diagsD = b \/ sqrt(2); \/\/ d is the \\ axis\n    bool C = (diagsC\/2).ceil() != (diagsC\/2).round(); \/\/ c sides have max points\n    bool D = (diagsD\/2).ceil() != (diagsD\/2).round(); \/\/ d sides have max points\n    int tempWidth = diagsC.floor();\n    int tempHeight = (diagsD.floor() + 1) * 2 - 1;\n    int sidePoints = diagsD.floor();\n    if (C == D) sidePoints++;\n    int result = tempWidth * tempHeight + sidePoints;\n    return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73507,"user_id":null,"body":"import 'dart:math' as math;\nimport 'dart:math';\n\nint rectangle_rotation(int a, int b) {\n  \/\/ your code here\n    double x = a.toDouble();\n    double y = b.toDouble();\n    x\/=2;\n    y\/=2;\n    var kk = Point(0,0);\n    List<Point> point = [Point(x,y), Point(x,-y), Point(-x,-y), Point(x,-y)];\n    List<Point> newPoint = [];\n    var r = math.sqrt(x*x*4 + y*y*4)\/2;\n    var a1 = math.pi\/2 - math.atan(x\/y) + math.pi\/4;\n    var a2 = math.pi\/2 - a1;\n    newPoint.add(Point(r * math.cos(a1), r * math.sin(a1)));\n    newPoint.add(Point(r * math.cos(a2), r * math.sin(a2)));\n    newPoint.add( Point(r * math.cos(a1 + math.pi), r * math.sin(a1 + math.pi)));\n    newPoint.add( Point(r * math.cos(a2 + math.pi), r * math.sin(a2 + math.pi)));\n     List<Point> lines = [];\n    lines.add(Point((newPoint[0].y - newPoint[1].y)\/(newPoint[0].x - newPoint[1].x),\n                     newPoint[1].y - ((newPoint[0].y - newPoint[1].y)\/(newPoint[0].x - newPoint[1].x))* newPoint[1].x));\n    lines.add(Point(lines.last.x, -lines.last.y));\n    lines.add(Point((newPoint[1].y - newPoint[2].y)\/(newPoint[1].x - newPoint[2].x),\n                     newPoint[2].y - ((newPoint[1].y - newPoint[2].y)\/(newPoint[1].x - newPoint[2].x))* newPoint[2].x));\n    lines.add(Point(lines.last.x, -lines.last.y));\n    var res = 0;\n    for (var _x = -newPoint[1].x.floor()-2; _x <= newPoint[2].x.floor(); _x++){\n      for (var _y = -newPoint[0].y.ceil()-2; _y < newPoint[0].y; _y++){\n        if (_y < lines[0].x * _x + lines[0].y && _y > lines[1].x * _x + lines[1].y &&\n          _y > lines[2].x * _x + lines[2].y && _y < lines[3].x * _x + lines[3].y) { res++; }\n        if (_y > lines[3].x * _x + lines[3].y) _y +=50000;\n    }}\n  var _x = 0;\n  var resLine = 0;\n  for (var _y = -newPoint[0].y.ceil()-2; _y < newPoint[0].y; _y++){\n        if (_y < lines[0].x * _x + lines[0].y && _y > lines[1].x * _x + lines[1].y &&\n          _y > lines[2].x * _x + lines[2].y && _y < lines[3].x * _x + lines[3].y)  resLine++;\n    }\n    return res*2 + resLine*(newPoint[0].x.floor()*2+1);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73508,"user_id":null,"body":"import 'dart:math';\n\nint rectangle_rotation(int a, int b) {\n  int x = (a \/ sqrt(2)).floor();\n  int y = (b \/ sqrt(2)).floor();\n  int r = (x + 1) * (y + 1) + x * y;\n  \n  return r + ((r % 2) - 1);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"50654ddff44f800200000004":[{"id":73509,"user_id":17,"body":"float multiply(float a, float b){\n  return a * b;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73510,"user_id":null,"body":"var multiply = (L,S) => L * S;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73511,"user_id":676,"body":"float multiply(float a, float b) => a * b;","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73512,"user_id":3062,"body":"int multiply(a, b) => a * b;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73513,"user_id":null,"body":"\nmultiply(num1,num2){\n\n  print(num1*num2);\n  \n  return num1*num2;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73514,"user_id":null,"body":"float multiply(float a, float b){\n  return -b * -a;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73515,"user_id":null,"body":"int multiply(int a , int b){\n  return -a * -b;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73516,"user_id":null,"body":"int multiply(int a ,int b){\n  return a * b;\n}\n\nvoid main(){\nmultiply(2,4);  \n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73517,"user_id":null,"body":"void main(){\n  int result = multiply(1,1);\n  print(result);\n}\n\nfloat multiply(float a, float b) => a * b;\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73518,"user_id":null,"body":"int multiply( a,b){\n  a*b;\n  return a * b;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"50ee6b0bdeab583673000025":[{"id":73519,"user_id":null,"body":"var a = \"code\";\nvar b = \"wa.rs\";\nvar name = '$a$b';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73520,"user_id":null,"body":"var a = \"code\";\nvar b = \"wa.rs\";\nvar name = a + b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73521,"user_id":null,"body":"var name = \"codewa.rs\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73522,"user_id":null,"body":"\n  String a = \"code\", b = \"wa.rs\", name = a + b;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73523,"user_id":null,"body":"String a = \"code\", b =\"wa.rs\";\nString name = a + b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73524,"user_id":null,"body":"const a = \"code\";\nconst b = \"wa.rs\";\nconst name = a + b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73525,"user_id":null,"body":"String name = \"code\" + \"wa.rs\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73526,"user_id":null,"body":"String a = \"code\";\nString b = \"wa.rs\";\nString name = \"codewa.rs\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73527,"user_id":null,"body":"String a= \"code\",b=\"wa.rs\",name = a + b;\n\/\/I solved this Kata on  [22-Mar-2021] ^_^ [05:58 PM]...#Hussam'sCodingDiary ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73528,"user_id":null,"body":"\nString a = \"code\";\nString b = \"wa\\.rs\";\nString name = a + b;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"513e08acc600c94f01000001":[{"id":73529,"user_id":null,"body":"String rgb(int r, int g, int b) {\n  return [r, g, b]\n      .map((e) => e.clamp(0, 255).toInt().toRadixString(16).padLeft(2, '0'))\n      .join()\n      .toUpperCase();\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73530,"user_id":null,"body":"String rgb(int r, int g, int b) {\n    List<String> hexScheme = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];\n    String convert(int n) {\n      if(n<0){\n        n=0;\n      }else if(n>255){\n        n=255;\n      }\n      return '${hexScheme[n~\/16]}${hexScheme[n%16]}';\n      }\n    return convert(r)+convert(g)+convert(b);\n  }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73531,"user_id":null,"body":"String toHex(int value) => value.toRadixString(16).padLeft(2, '0').toUpperCase();\n\nString rgb(int r, int g, int b)\n{\n    if (r > 255) r = 255;\n    if (g > 255) g = 255;\n    if (b > 255) b = 255;\n    if (r < 0) r = 0;\n    if (g < 0) g = 0;\n    if (b < 0) b = 0;\n    \n    return (\"${toHex(r)}${toHex(g)}${toHex(b)}\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73532,"user_id":null,"body":"String rgb(int r, int g, int b)\n{ \n  int num = (1 << 24) + (fix(r) << 16) + (fix(g) << 8) + fix(b);\n  return num.toRadixString(16).toUpperCase().substring(1);\n}\n\nint fix(int n) {\n  if (n > 255) {\n    return 255;\n  } else if (n < 0) {\n    return 0;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73533,"user_id":null,"body":"import 'dart:math';\nString rgb(int r, int g, int b){\n  return [r, g, b].map((c) => min(max(c, 0), 255).toRadixString(16).padLeft(2, '0')).join().toUpperCase();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73534,"user_id":null,"body":"String rgb(int r, int g, int b)\n{\n  List<int> input = [r,g,b];\n  String result = '';\n  input.forEach((e) => result += e > 255 ? 255.toRadixString(16).toUpperCase() : e == 0 || e < 0? '00' : e < 16 ? '0'+ e.toRadixString(16).toUpperCase() : e.toRadixString(16).toUpperCase());\n  print(result);\n  return result; \/\/ replace with your solution\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73535,"user_id":null,"body":"String rgb(int r, int g, int b) => \n  [r, g, b]\n    .map((e) => e.clamp(0, 255).toInt())\n    .fold(\"\", \n      (s, e) => s + e.toRadixString(16).padLeft(2, '0')\n    ).toUpperCase();\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73536,"user_id":null,"body":"String rgb(int r, int g, int b)\n{\n  String ans = '';\n  for (var i in [r, g, b]) { \n    if (i <= 0) ans += '00';\n    else if (i >= 255) ans += 'FF';\n    else ans += i.toRadixString(16).padLeft(2, \"0\").toUpperCase();\n    print(i);\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73537,"user_id":null,"body":"String rgb(int r, int g, int b) => '${toHex(r)}${toHex(g)}${toHex(b)}';\n\nString toHex(int value) {\n  if (value > 255) return 'FF';\n  if (value < 0) return '00';\n  return value\n    .toRadixString(16)\n    .padLeft(2,'0')\n    .toUpperCase();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73538,"user_id":null,"body":"String rgb(int r, int g, int b)\n{\n  int _r = r < 0 ? 0 : r > 255 ? 255 : r;\n  int _g = g < 0 ? 0 : g > 255 ? 255 : g;\n  int _b = b < 0 ? 0 : b > 255 ? 255 : b;\n  \n  return intToHex(_r) + intToHex(_g) + intToHex(_b);\n}\n\nString intToHex(int int) => int.toRadixString(16).padLeft(2, '0').toUpperCase();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"514b92a657cdc65150000006":[{"id":73539,"user_id":null,"body":"int solution(int n) {\n int sum = 0;\n for(int i = 0; i < n; i++)\n  sum += i % 3 ==0 || i % 5 == 0 ? i : 0;\nreturn sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73540,"user_id":null,"body":"int solution(int n) {\n  int result = 0;\n  for (int i = 0; i < n; i++) {\n    if (i % 3 == 0 || i % 5 == 0) {\n      result += i;\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73541,"user_id":null,"body":"int solution(int n) => List<int>.generate((n<=0) ? 0: n, (i) => i)\n    .where((i) => (((i % 3) == 0) || ((i % 5) == 0)))\n    .fold(0, (x, y) => x + y);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73542,"user_id":null,"body":"int solution(int n) {\n  return n < 3\n      ? 0\n      : List.generate(n, (idx) => idx)\n          .where((i) => i % 3 == 0 || i % 5 == 0)\n          .toList()\n          .reduce((a, e) => a + e);\n}    ","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73543,"user_id":null,"body":"int solution(int n) {\n  var mult = 0;\n  for (var i = 0; i < n; i++){\n    i % 3 == 0 || i % 5 == 0 ? mult+=i:'';\n  }\n  return mult;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73544,"user_id":null,"body":"int solution(int n) {\n  \/\/ your code here\n  int sum=0;\n  for(int i=(n-1);i>0;i--){\n    if((i%3==0)||(i%5==0)){\n      sum+=i;\n    }\n  }\n  return sum;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73545,"user_id":null,"body":"int solution(int n) {\n  int result = 0;\n  int nBelow = n-1;\n  if(nBelow>0){\n    result = \n    sumOfMultiples(nBelow,3)+\n    sumOfMultiples(nBelow,5)-\n    sumOfMultiples(nBelow,15);\n  }\n  return result;\n}\n\nint sumOfMultiples(int number, int a1){\n  if(a1>number)\n    return 0;\n  \n  \/\/ The sum is an Arithmetic Progression.\n  \/\/ The sum of all elements of an AP is n*(a1+an)\/2\n  int n = number~\/a1;\n  int an = a1*n;\n  return n*(a1+an)~\/2;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73546,"user_id":null,"body":"int solution(int n) => List<int>.generate(n > 0 ? n : 0, (int i) => i).fold(0, (int sum, int i) => i % 3 == 0 || i % 5 == 0 ? sum + i : sum);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73547,"user_id":null,"body":"import 'dart:math' as math;\nint solution(int n)=>List.generate(math.max(n, 1), (i)=>i % 3 == 0 || i % 5 == 0 || i % 6 == 0 || i % 9 == 0 ? i : 0).reduce((v, el)=> v +el);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73548,"user_id":null,"body":"int solution(int n) {\n  \n  return n<=0?0:List<int>.generate(n, (i) => i++).map((e) => (e%3==0)||(e%5==0)?e:0).reduce((v, e) => v + e);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"515e271a311df0350d00000f":[{"id":73549,"user_id":676,"body":"int square_sum(List xs) => xs.fold(0, (a, b) => a + b*b);","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73550,"user_id":null,"body":"int square_sum(List<int> n) => n.fold(0, (a, b) => a + b*b);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73551,"user_id":null,"body":"int square_sum(List numbers) {\n  if (numbers.isEmpty) {\n  return 0;\n  }\n  return numbers.map((i) => i*i).reduce((value, element) => value + element);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73552,"user_id":null,"body":"import 'dart:math';\n\nint square_sum(List numbers) {\n  int result = 0;\n  \n  for(final number in numbers) {\n    result += pow(number, 2);\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73553,"user_id":null,"body":"int square_sum(List numbers) {\n    int sum = 0;\n    numbers.forEach((x) => sum += (x*x));\n    return sum;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73554,"user_id":null,"body":"int square_sum(List numbers) {\n  return numbers.isEmpty ? 0 : numbers.map((a) => a*a).reduce((a, b) => a + b);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73555,"user_id":null,"body":"int square_sum(List<int> numbers) {\n  \/\/ your code here\n  var result = 0;\n  for (var x in numbers) {\n    result += x * x;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73556,"user_id":null,"body":"int square_sum(List numbers) {\n  var sum = 0;\n  for(var number in numbers){\n    sum = sum + (number * number);\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73557,"user_id":527,"body":"int square_sum(Iterable<int> numbers) {\n  return numbers.map((x) => x * x).fold(0, (x, y) => x + y);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73558,"user_id":null,"body":"int square_sum(List numbers) {\n  \/\/ your code here\n\n  int total = numbers.length;\n  int suma  = 0;\n  int suma2 = 0;\n  \n  print(total);\n\n  \n  for (var i = 0; i < total; i++) {\n    suma = numbers[i] * numbers[i];\n    suma2 = suma + suma2;\n    print (suma2);\n  };\n  print ('suma final: $suma2');\n  return suma2;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"515f51d438015969f7000013":[{"id":73559,"user_id":527,"body":"List<List<int>> pyramid(int n) {\n  return List.generate(n, (i) => List.filled(i + 1, 1));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73560,"user_id":564,"body":"List<List<int>> pyramid(int n) => \n  List.generate(n, (int i) =>  List.filled(i + 1, 1));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73561,"user_id":null,"body":"List<List<int>> pyramid(int n) =>  List.generate(n,(index) => List.generate(index+1,(ind)=> 1));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73562,"user_id":null,"body":"List<List<int>> pyramid(int n) {\n  List<List<int>> pyramid = [];\n  List<int> floor = [];\n  \n  for(var i = 1; i <= n; i++){\n    if(n == 0) break; \n    floor.add(1);\n    pyramid.add([...floor]);\n  }\n  \n  return pyramid;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73563,"user_id":null,"body":"List<List<int>> pyramid(int n) {\n  \/\/ your code here\n  \n int N=n;\n  List<List<int>> mainList=List();\n  \n  for(int i=0;i<N;i++)\n  {\n\n   mainList.add(updateList(i));\n\n  }\n  return mainList;\n\n}\n\n\nList<int> updateList(int total) {\n  List<int> addList=List();\n\n  for(int i=0;i<=total;i++)\n  {\n    addList.add(1);\n  }\n\n  return addList;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73564,"user_id":null,"body":"List<List<int>> pyramid(int n) => List.generate(n, (index) => List.filled(index + 1, 1));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73565,"user_id":null,"body":"List<List<int>> pyramid(int n) {\n  return List<List<int>>.generate(n, (index) => List<int>.filled(index + 1, 1));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73566,"user_id":null,"body":"List<List<int>> pyramid(int n) {\n  return new List.generate(\n      n,\n      (int index) =>\n          new List.generate(index + 1, (int i) => 1));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73567,"user_id":null,"body":"List<List<int>> pyramid(int n) => List.generate(n, (i) => List.generate(i + 1, (i2) => 1));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73568,"user_id":null,"body":"List<List<int>> pyramid(int n) => \n  n > 0 ? pyramid(n - 1) + [List.filled(n, 1)] : [];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"51675d17e0c1bed195000001":[{"id":73569,"user_id":null,"body":"int solution(String str) {\n \tint largest = 0;\n  for (int i = 0; i < str.length - 4; i++) {\n    int currentNum = int.parse(str.substring(i, i + 5));\n    largest = currentNum > largest ? currentNum : largest;\n  }\n  return largest;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73570,"user_id":null,"body":"import 'dart:math';\nint solution(String digits) {\n  return (digits.length <= 5) ? int.parse(digits) : max(int.parse(digits.substring(0, 5)), solution(digits.substring(1)));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73571,"user_id":null,"body":"int solution(String digits) {\n  int sequence = 0;\n  final int consecutiveLength = 5;\n  for(int startIndex = 0; startIndex <= digits.length - consecutiveLength; startIndex++) {    \n    int currentSequence = int.parse(digits.substring(startIndex, startIndex + consecutiveLength));\n    if(currentSequence > sequence) {\n      sequence = currentSequence;\n    }\n  }\n  return sequence;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73572,"user_id":null,"body":"int solution(String digits) {\n  var temp = 0;\n  var dos = 0;\n  for (var i = 0; i < digits.length - 4; i++) {\n  dos = int.parse(digits.substring(i, i + 5));\n  temp = temp < dos ? dos : temp;\n  }\n  return temp;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73573,"user_id":null,"body":"int solution(String digits) {\n\/\/int len = digits.length;\nint p = 0;\/\/ previous value\nfor (int i = 0; i < digits.length - 4;i++){\n    int n = int.parse(digits[i]+digits[i+1]+digits[i+2]+digits[i+3]+digits[i+4]); \/\/next value\n    if (n > p){ \/\/ compare the values and leave the larger one\n      p = n;\n    }\n    \n  }\n  return p;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73574,"user_id":null,"body":"int solution(String digits) {\n  int max = int.parse(digits[0]);\n  for (var i = 0; i < digits.length - 4; i++) {\n    if (int.parse(digits.substring(i, i + 5)) > max) {\n      max = int.parse(digits.substring(i, i + 5));\n    }\n  }\n  return max;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73575,"user_id":null,"body":"int solution(String digits) {\n  int max=0, temp;\n  for(int i=0; i<=digits.length -5; i++){\n      temp = int.parse(digits.substring(i, i+5));\n    if(max<temp)\n      max=temp;\n  }\n  return max; \n  \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73576,"user_id":null,"body":"int solution(String input) {\n    var result = 0;\n    for (int i = 0; i < input.length; i++) {\n      if (i + 5 > input.length) return result;\n      var substring = input.substring(i, i + 5);\n      var num = int.parse(substring);\n      if (num > result) result = num;\n    }\n  }","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73577,"user_id":1566,"body":"int solution(String digits) {\n  int max=0, num;\n  for(int i=0; i<digits.length-4; i++){\n      num = int.parse(digits.substring(i,i+5));\n      if(num > max) max = num;\n    }\n    return max;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73578,"user_id":null,"body":"import 'dart:math' as math;\n\nint solution(String digits) {\n  final digitsList = List.generate(digits.length, (i) => digits[i]);\n  return List.generate(\n    digits.length,\n    (i) => int.parse(digitsList.skip(i).take(5).join()),\n  ).reduce((math.max));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5168bb5dfe9a00b126000018":[{"id":73579,"user_id":null,"body":"String solution(str) {\n  return str.split('').reversed.join('');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73580,"user_id":null,"body":"solution(str) => str.split('').reversed.join('');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73581,"user_id":null,"body":"String solution(String str) {\n  return new String.fromCharCodes(str.runes.toList().reversed);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73582,"user_id":null,"body":"String solution(str) => str.split('').reversed.join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73583,"user_id":null,"body":"String solution(str) {\n  \/\/ note: dart is UTF-16 so better to split on the rune boundary\n  \/\/ https:\/\/api.dartlang.org\/stable\/1.21.1\/dart-core\/String\/split.html\n  String result = new String.fromCharCodes(str.runes.toList().reversed);\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73584,"user_id":null,"body":"String solution(str) {\n\tvar rev = \"\";\n  for(var i=str.length-1;i>=0;i--) {\n  \trev += str[i];\n  }\n  return rev;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73585,"user_id":null,"body":"String solution(str) {\n  String sum = '';\n  for(int i = str.length-1; i >= 0;i-- ){\n    sum+=str[i];\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73586,"user_id":null,"body":"solution(String str) => str.split(\"\").reversed.join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73587,"user_id":null,"body":"String solution(str) {\n  return str.split('').reversed.join(); \/\/ Fix me!\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73588,"user_id":null,"body":"String solution(str) {\n  var a = str.split('').reversed; \/\/ Fix me!\n  var result = '';\n  a.forEach((element) {\n    result += element;\n  });\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"523b4ff7adca849afe000035":[{"id":73589,"user_id":null,"body":"greet() => \"hello world!\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73590,"user_id":null,"body":"String greet() => \"hello world!\";\n\/\/ was honestly thinking about doing some morse code implementation but i dont have time","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73591,"user_id":null,"body":"import 'dart:typed_data';\n\nString greet(){\n  BF bf = BF();\n  String greeting = '+[>>>->-[>->----<<<]>>]>.---.>+..+++.>.>>---.<<<.+++.------.<-.>>+.';\n  return bf.interpret(greeting);\n}\n\nextension StringCharAt on String {\n  String charAt(int index) {\n    return substring(index, index + 1);\n  }\n}\n\n\nclass BF {\n  static final int _length = 65535;\n  final Uint8List _memory = Uint8List(_length);\n  int _pointer = 0;\n\n  String interpret(String source) {\n    int bracketCounter = 0;\n    String output = '';\n    for (int i = 0; i < source.length; i++) {\n      String currentInstruction = source.charAt(i);\n\n      void handleOpenBracket() {\n        if (_memory[_pointer] == 0) {\n          i++;\n          currentInstruction = source.charAt(i);\n          while (bracketCounter > 0 || currentInstruction != ']') {\n            if (currentInstruction == '[') {\n              bracketCounter++;\n            } else if (currentInstruction == ']') {\n              bracketCounter--;\n            }\n            i++;\n            currentInstruction = source.charAt(i);\n          }\n        }\n      }\n\n      void handleClosedBracket() {\n        if (_memory[_pointer] != 0) {\n          i--;\n          currentInstruction = source.charAt(i);\n          while (bracketCounter > 0 || currentInstruction != '[') {\n            if (currentInstruction == ']') {\n              bracketCounter++;\n            } else if (currentInstruction == '[') {\n              bracketCounter--;\n            }\n            i--;\n            currentInstruction = source.charAt(i);\n          }\n          i--;\n          currentInstruction = source.charAt(i);\n        }\n      }\n\n      switch (currentInstruction) {\n        case '>':\n          _pointer = (_pointer == _length - 1) ? 0 : _pointer + 1;\n          break;\n        case '<':\n          _pointer = (_pointer == 0) ? _length - 1 : _pointer - 1;\n          break;\n        case '+':\n          _memory[_pointer]++;\n          break;\n        case '-':\n          _memory[_pointer]--;\n          break;\n        case '.':\n          output = '$output${String.fromCharCode(_memory[_pointer])}';\n          break;\n        case '[':\n          handleOpenBracket();\n          break;\n        case ']':\n          handleClosedBracket();\n          break;\n      }\n    }\n    return output;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73592,"user_id":null,"body":"String greet() => \"hello world!\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73593,"user_id":null,"body":"import \"dart:core\";\nString greet() {\n  var ints = [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33];\n  var greeting = \"\";\n  for (var i = 0; i < ints.length; i++) {\n    greeting = greeting + new String.fromCharCode(ints[i]);\n  }\n  return greeting;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73594,"user_id":null,"body":"Function() greet = () => ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!'].join('');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73595,"user_id":null,"body":"greet() => [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33].map((c) => String.fromCharCode(c)).join(\"\");","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73596,"user_id":null,"body":"import 'dart:convert';\n\nString greet() => utf8.decode([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73597,"user_id":797,"body":"greet(){\n  return \"${\"${\"${\"${\"hello world!\"}\"}\"}\"}\";\n}\/\/ Write a function `greet` that returns \"hello world!\"","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73598,"user_id":null,"body":"String greet() {\n  \n  String a = '!dlrow olleh';\n  List<String> b = a.split('');\n  b = b.reversed.toList();\n  a = b.join();\n  return a;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"525e5a1cb735154b320002c8":[{"id":73599,"user_id":null,"body":"triangular(n) => n < 0 ? 0 : (n+1)\/2 * n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73600,"user_id":null,"body":"triangular(n) {\n  var sum = 0;\n  while (n > 0) {\n    sum += n--;\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73601,"user_id":676,"body":"triangular(n) => (n > 0) ? n*(n + 1)\/2 : 0;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73602,"user_id":null,"body":"triangular(n) {\n  return (n * (n + 1)) \/ 2;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73603,"user_id":null,"body":"triangular(n) {\n  int result = 0;\n  for (var i = 1; i <= n; i++) {\n    result += i;\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73604,"user_id":null,"body":"triangular(n) => n <= 0 ? 0 : ((n*n) + n) \/ 2;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73605,"user_id":null,"body":"triangular(n) => n < 0 ? 0 : (n*(n+1))\/2;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73606,"user_id":null,"body":"triangular(n) {\n  if (n <= 0) return 0;\n  return n * (n + 1) \/ 2;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73607,"user_id":null,"body":"triangular(n) {\n  if(n < 0) return 0;\n  return (n + 1)*n\/2;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73608,"user_id":null,"body":"triangular(n) {\n  \/*\n\n  pattern\n  n = 1  2   3\n      *  **  ***\n         *   **\n             *\n\n  *\/\n  num dots_in_pattern = (n < 0) ? 0 : n * (n + 1) \/ 2;\n  return dots_in_pattern.toInt().round();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"525f50e3b73515a6db000b83":[{"id":73609,"user_id":null,"body":"String create_phone_number(List numbers) {\n  var n = numbers.join('');\n  return '(${n.substring(0, 3)}) ${n.substring(3, 6)}-${n.substring(6)}';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73610,"user_id":null,"body":"String create_phone_number(List numbers) {\n  var format = \"(xxx) xxx-xxxx\";\n  \n  for(var i = 0; i < numbers.length; i++)\n  {\n    format = format.replaceFirst('x', numbers[i].toString());\n  }\n  \n  return format;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73611,"user_id":null,"body":"String create_phone_number(List numbers) => \n  '(' + numbers.getRange(0, 3).join() + \n  ') ' + numbers.getRange(3, 6).join() + \n  '-' + numbers.getRange(6, 10).join();\n  ","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73612,"user_id":1403,"body":"String create_phone_number(List n) {\n  return \"(${n[0]}${n[1]}${n[2]}) ${n[3]}${n[4]}${n[5]}-${n[6]}${n[7]}${n[8]}${n[9]}\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73613,"user_id":null,"body":"String create_phone_number(List<int> numbers) {\n\tString result = \"(xxx) xxx-xxxx\";\n\tnumbers.forEach((value) {result = result.replaceFirst(new RegExp(r'x'), value.toString());});\n\treturn(result);\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73614,"user_id":null,"body":"\/\/\/ Creates a phone number out of __ten__ given [numbers] between __0__\n\/\/\/ and __9__ (both inclusive).\n\/\/\/\n\/\/\/ \"(XXX) XXX-XXXX\" is the format of the returning phone number string.\n\/\/\/ The order of the [numbers] and the numbers in the phone number are the same.\n\/\/\/ [numbers] will not be affected by this function.\n\/\/\/\n\/\/\/ The function throws an [ArgumentError] in the following cases:\n\/\/\/ + [numbers] is [null]\n\/\/\/ + The size of [numbers] is not what is expected (10)\n\/\/\/ + One or more entries of [numbers] are not between 0 and 9\n\/\/\/\n\/\/\/ _Examples:_\n\/\/\/ ```dart\n\/\/\/ create_phone_number([0,1,2,3,4,5,6,7,8,9])    \/\/ \"(012) 345-6789\"\n\/\/\/ create_phone_number([3,4,2,6,4,7,4,1,3,5])    \/\/ \"(342) 647-4135\"\n\/\/\/ create_phone_number(null)                     \/\/ ArgumentError\n\/\/\/ create_phone_number([0,0,0,0,0,0,0,0,0,0,0])  \/\/ ArgumentError\n\/\/\/ create_phone_number([0,0,0,0,0,0,0,0,0])      \/\/ ArgumentError\n\/\/\/ create_phone_number([-1,0,0,0,0,0,0,0,0,-1])  \/\/ ArgumentError\n\/\/\/ create_phone_number([10,0,0,0,0,0,0,0,0,10])  \/\/ ArgumentError\n\/\/\/ ```\nString create_phone_number(final List<int> numbers) {\n  \/\/ Checking the input on validity with these functions\n  nullCheck(numbers);\n  inputSizeCheck(numbers);\n  inputValidValuesCheck(numbers);\n\n  \/\/ This is the solution\n  return '(' +\n      numbers.sublist(0, 3).join() +\n      ') ' +\n      numbers.sublist(3, 6).join() +\n      '-' +\n      numbers.sublist(6, numbers.length).join();\n}\n\n\/\/\/ The Message for a null as input error\nconst inputListNullErrorMessage = 'Input must not be null';\n\n\/\/\/ Creates the message for an input size error\nString createInputListSizeErrorMessage(final int expectedListSize) =>\n    'Input should have exactly ${expectedListSize} entries';\n\n\/\/\/ Creates the message for an invalid value error\nString createInputListInvalidValueErrorMessage(\n        final List<int> expectedListValues) =>\n    'Input should only have values from ${expectedListValues.toString()}';\n\n\/\/\/ Returns the expected input list size\nint expectedInputListSize() => 10;\n\n\/\/\/ Returns the valid input list values\nList<int> expectedInputListValues() => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n\/\/\/ Throws an [ArgumentError] if [numbers] is null.\nvoid nullCheck(final List<int> numbers) {\n  if (numbers == null) {\n    throw ArgumentError(inputListNullErrorMessage);\n  }\n}\n\n\/\/\/ Throws an [ArgumentError] if [numbers] does not contain the exact amount\n\/\/\/ of expected values.\nvoid inputSizeCheck(final List<int> numbers) {\n  if (numbers.length > expectedInputListSize() ||\n      numbers.length < expectedInputListSize()) {\n    throw ArgumentError.value(numbers.length, 'message',\n        createInputListSizeErrorMessage(expectedInputListSize()));\n  }\n}\n\n\/\/\/ Throws an [ArgumentError] if [numbers] contains one\n\/\/\/ values that is not valid.\nvoid inputValidValuesCheck(final List<int> numbers) {\n  var growableList = List<int>.from(numbers);\n  \/\/ if there is any element that is not valid\n  if (growableList\n      .any((element) => !expectedInputListValues().contains(element))) {\n    \/\/ remove every valid number to make the error message more understandable\n    growableList\n        .removeWhere((element) => expectedInputListValues().contains(element));\n    growableList.join(', ');\n    throw ArgumentError.value(growableList, 'message',\n        createInputListInvalidValueErrorMessage(expectedInputListValues()));\n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73615,"user_id":null,"body":"String create_phone_number(List numbers) {\n  var s = numbers.join();\n  return '(${s.substring(0, 3)}) ${s.substring(3, 6)}-${s.substring(6)}';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73616,"user_id":null,"body":"create_phone_number(n) => '(' + n.sublist(0, 3).join('') + ') ' + n.sublist(3, 6).join('')+'-'+n.sublist(6).join('');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73617,"user_id":null,"body":"String create_phone_number(List numbers) {\n  final String firstThree = numbers.getRange(0, 3).join('');\n  final String secondThree = numbers.getRange(3, 6).join('');\n  final String lastFour = numbers.getRange(6, numbers.length).join('');\n  return '($firstThree) $secondThree-$lastFour';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73618,"user_id":null,"body":"String create_phone_number(List numbers) => \"(\" + numbers.getRange(0,3).join() + \") \" + numbers.getRange(3,6).join() + \"-\" + numbers.getRange(6, numbers.length).join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"526156943dfe7ce06200063e":[{"id":73619,"user_id":null,"body":"import 'dart:typed_data';\n\nString brain_luck(String code, String input) {\n  final output = StringBuffer();\n  final data = Uint8List(2000);\n  var dataPointer = 0;\n  var codePointer = 0;\n  final codeEnd = code.length;\n  var inputPointer = 0;\n  var bracketsCounter = 0;\n\n  String nextCmd() {\n    final c = code[codePointer++];\n    if (c == '[') {\n      bracketsCounter++;\n    } else if (c == ']') {\n      bracketsCounter--;\n    }\n    return c;\n  }\n  \n  String prevCmd() {\n    final c = code[--codePointer];\n    if (c == '[') {\n      bracketsCounter--;\n    } else if (c == ']') {\n      bracketsCounter++;\n    }\n    return c;\n  }\n\n  while (codePointer < codeEnd) {\n    switch (nextCmd()) {\n      case '>': dataPointer++; break;\n      case '<': dataPointer--; break;\n      case '+': data[dataPointer]++; break;\n      case '-': data[dataPointer]--; break;\n      case '.': output.write(String.fromCharCode(data[dataPointer])); break;\n      case ',': data[dataPointer] = input.codeUnitAt(inputPointer++); break;\n      case '[':\n        if (data[dataPointer] == 0) {\n          final bracket = bracketsCounter - 1;\n          while (nextCmd() != ']' || bracket != bracketsCounter) {}\n        }\n        break;\n      case ']':\n        if (data[dataPointer] != 0) {\n          final bracket = bracketsCounter;\n          while (prevCmd() != '[' || bracket != bracketsCounter) {}\n          nextCmd();\n        }\n        break;\n    }\n  }\n\n  return output.toString();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73620,"user_id":53,"body":"String brain_luck(String code, String input) {\n  var output = \"\";\n  int i=0, ptr=0, j=0, k=0;\n  var tape = List<int>.filled(5000, 0);\n  while (i < code.length) {\n    switch (code[i]) {\n      case '>': ptr++; break;\n      case '<': ptr--; break;\n      case '+': tape[ptr] = (tape[ptr] + 1) % 256; break;\n      case '-': tape[ptr] = (tape[ptr] - 1) % 256; break;\n      case '.': output += String.fromCharCode(tape[ptr]); break;\n      case ',': tape[ptr] = input.codeUnitAt(j++); break;\n      case '[': {\n        if (tape[ptr] == 0) {\n          int n=1;\n          while (n>0) {\n            i++;\n            if (code[i] == '[') n++;\n            if (code[i] == ']') n--;\n          }\n        }\n        break;\n      }\n      case ']': {\n        if (tape[ptr] != 0) {\n          int n=1;\n          while (n>0) {\n            i--;\n            if (code[i] == ']') n++;\n            if (code[i] == '[') n--;\n          }\n        }\n        break;\n      }\n    }\n    i++;\n  }\n  return output;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73621,"user_id":null,"body":"import 'dart:collection';\n\nString brain_luck(String code, String input) {\n    int selector = 0;\n    final lenCode = code.length;\n    int iCode = 0;\n    final out = StringBuffer();\n    final stack = <int>[];\n    stack.add(0);\n    final brackets = <int, int>{};\n\n    final stackBrackets = <int>[];\n    for (int i = 0; i < lenCode; i++) {\n      if (code[i] == '[') {\n        stackBrackets.add(i);\n      }\n      if (code[i] == ']') {\n        final h = stackBrackets.removeAt(stackBrackets.length - 1);\n        brackets[h] = i;\n        brackets[i] = h;\n      }\n    }\n\n    final queueInput = Queue.of(input.split(''));\n\n    while (iCode < lenCode) {\n      final operator = code[iCode];\n      switch (operator) {\n        case '>':\n          if (selector++ == stack.length - 1) {\n            stack.add(0);\n          }\n          break;\n        case '<':\n          if (selector-- == 0) {\n            stack.insert(0, 0);\n          }\n          break;\n        case '+':\n          stack[selector] = (stack[selector] + 1) % 256;\n          break;\n\n        case '-':\n          stack[selector] = (stack[selector] - 1) % 256;\n          break;\n\n        case '.':\n          out.write(String.fromCharCode(stack[selector]));\n          break;\n\n        case ',':\n          stack[selector] = queueInput.removeFirst().codeUnitAt(0);\n          break;\n\n        case '[':\n          if (stack[selector] == 0) {\n            iCode = brackets[iCode];\n          }\n          break;\n\n        case ']':\n          if (stack[selector] != 0) {\n            iCode = brackets[iCode];\n          }\n          break;\n      }\n      iCode++;\n    }\n\n    return out.toString();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73622,"user_id":null,"body":"String brain_luck(String code, String input) {\n  var data = [0];\n  var currentPointer = 0;\n  var length = code.length;\n  var result = '';\n  for(var i = 0; i < length; i ++){\n\n    var curCode = code[i];\n    switch (curCode) {\n      case '>' : {\n        currentPointer++;\n        if(data.length <= currentPointer){\n          data.add(0);\n        }\n        break;\n      }\n      case '<' : {\n        if(currentPointer == 0) break;\n        currentPointer--;\n        break;\n      }\n      case '+' : {\n        if(data[currentPointer] == 255){\n          data[currentPointer] = 0;\n          break;\n        }\n        data[currentPointer]++;\n        break;\n      }\n      case '-' : {\n        if(data[currentPointer] == 0){\n          data[currentPointer] = 255;\n          break;\n        }\n        data[currentPointer]--;\n        break;\n      }\n      case '.' : {\n        result += String.fromCharCode(data[currentPointer]);\n        break;\n      }\n      case ',' : {\n        data[currentPointer] = input.codeUnitAt(0);\n        input = input.substring(1);\n        break;\n      }\n      case '[' : {\n        if(data[currentPointer] == 0){\n          i = findMatchingPoint(code, i);\n        }\n        break;\n      }\n      case ']' : {\n        if(data[currentPointer] != 0){\n          i = findMatchingPoint(code, i);\n        }\n        break;\n      }\n    }\n  }\n  return result; \/\/ do it!\n}\n\nint findMatchingPoint(final String code, final int index){\n  String instructor = code[index];\n  int count = 0;\n  int result = index;\n  if(instructor == '['){\n    for(int i = index; i < code.length; i++){\n      if(code[i] == '[') {\n        count++;\n      }\n      if(code[i] == ']'){\n        count--;\n      }\n      if(count == 0){\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n\n  if(code[index] == ']'){\n    for(int i = index; i >= 0; i--){\n      if(code[i] == ']') {\n        count++;\n      }\n      if(code[i] == '['){\n        count--;\n      }\n      if(count == 0){\n        result = i;\n        break;\n      }\n    }\n    return result;\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73623,"user_id":null,"body":"import 'dart:ffi';\nimport 'dart:math';\nimport 'dart:typed_data';\n\nclass Interpreter {\n  final Uint8List data = Uint8List(1 << 15);\n  final List<String> output = [];\n  List<String> input = [];\n  String program;\n\n  String get result {\n    return this.output.join(\"\");\n  }\n\n  int get value {\n    return this.data[this.pointer];\n  }\n\n  int pointer = 0;\n\n  Interpreter(this.program, String input) {\n    this.input = input.split('');\n  }\n\n  void execute() {\n    for (int index = 0; index < this.program.length;) {\n      final result = this.doOperation(index);\n      index = result >= 0 ? result : index + 1;\n    }\n  }\n\n  int doOperation(int index) {\n    final command = this.program[index];\n    switch(command) {\n      case '>': return this.incrementPointer();\n      case '<': return this.decrementPointer();\n      case '+': return this.incrementValue();\n      case '-': return this.decrementValue();\n      case '.': return this.outputValue();\n      case ',': return this.inputValue();\n      case '[': return this.jumpForward(index);\n      case ']': return this.jumpBackward(index);\n      default: return -1;\n    }\n  }\n\n  int incrementPointer() {\n    this.pointer += 1;\n    return -1;\n  }\n\n  int decrementPointer() {\n    this.pointer -= 1;\n    return -1;\n  }\n\n  int incrementValue() {\n    this.data[this.pointer] += 1;\n    return -1;\n  }\n\n  int decrementValue() {\n    this.data[this.pointer] -= 1;\n    return -1;\n  }\n\n  int outputValue() {\n    final result = String.fromCharCode(this.value);\n    this.output.add(result);\n    return -1;\n  }\n\n  int inputValue() {\n    this.data[this.pointer] = this.input.removeAt(0).codeUnitAt(0);\n    return -1;\n  }\n\n  int jumpForward(int pointer) {\n    if (this.value != 0) {\n      return pointer + 1;\n    }\n\n    int parens = 0;\n    for (int index = pointer + 1; index < this.program.length; index++) {\n      final char = this.program[index];\n\n      print(char);\n      if (char == '[') {\n        parens = parens + 1;\n      } else if (char == ']' && parens > 0) {\n        parens = parens - 1;\n      } else if (char == ']') {\n        print('result = ${this.program[index + 1]}');\n        return index + 1;\n      }\n    }\n\n    throw new Error();\n  }\n\n  int jumpBackward(int pointer) {\n    if (this.value == 0) {\n      return pointer + 1;\n    }\n\n    int parens = 0;\n    for (int index = pointer - 1; index > 0; index--) {\n      final char = this.program[index];\n\n      if (char == ']') {\n        parens = parens + 1;\n      } else if (char == '[' && parens > 0) {\n        parens = parens - 1;\n      } else if (char == '[') {\n        return index + 1;\n      }\n    }\n\n    throw new Error();\n  }\n}\n\nString brain_luck(String code, String input) {\n  final interpreter = new Interpreter(code, input);\n  interpreter.execute();\n  return interpreter.result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73624,"user_id":null,"body":"import 'dart:typed_data';\n\nString brain_luck(String code, String inp) {\n  final List<String> instructions = List.unmodifiable(code.split(''));\n  final List<String> output = [];\n  final List<String> input = inp.split('').reversed.toList();\n  final Uint8List memory = Uint8List(256);\n  int inst_pos = 0;\n  int mem_pos = 0;\n  while (inst_pos < instructions.length) {\n    final String instruction = instructions[inst_pos];\n    switch (instruction) {\n      case '>':\n        mem_pos++;\n        inst_pos++;\n        break;\n      case '<':\n        mem_pos--;\n        inst_pos++;\n        break;\n      case '+':\n        memory[mem_pos]++;\n        inst_pos++;\n        break;\n      case '-':\n        memory[mem_pos]--;\n        inst_pos++;\n        break;\n      case '.':\n        output.add(String.fromCharCode(memory[mem_pos]));\n        inst_pos++;\n        break;\n      case ',':\n        memory[mem_pos] = input.removeLast().codeUnitAt(0);\n        inst_pos++;\n        break;\n      case '[':\n        inst_pos++;\n        if (memory[mem_pos] == 0) {\n          int unmatchedBraces = 1;\n          while (unmatchedBraces > 0) {\n            switch (instructions[inst_pos]) {\n              case '[':\n                unmatchedBraces++;\n                break;\n              case ']':\n                unmatchedBraces--;\n                break;\n            }\n            inst_pos++;\n          }\n        }\n        break;\n      case ']':\n        if (memory[mem_pos] != 0) {\n          int unmatchedBraces = 1;\n          inst_pos--;\n          while (unmatchedBraces > 0) {\n            switch (instructions[inst_pos]) {\n              case '[':\n                unmatchedBraces--;\n                if (unmatchedBraces == 0) {\n                  inst_pos += 2;\n                }\n                break;\n              case ']':\n                unmatchedBraces++;\n                break;\n            }\n            inst_pos--;\n          }\n        } else {\n          inst_pos++;\n        }\n        break;\n    }\n  }\n  return output.join('');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73625,"user_id":null,"body":"String brain_luck(String code, String input) {\n  var memory = List.generate(5000, (index) => 0, growable: true);\n  var memoryPointer = 0;\n  var inputPointer = 0;\n  var resultStr = \"\";\n  var bracketStack = List<int>.generate(0, (index) => 0, growable: true);\n\n  if (input == \"\") input = \"0\"; \/\/ To avoid errors\n\n  for (var codePointer = 0; codePointer < code.length; codePointer++) {\n    switch (code[codePointer]) {\n      case \">\":\n        memoryPointer++;\n        if (memoryPointer >= memory.length) {\n          memory += List.generate(200, (index) => 0);\n        }\n        break;\n      case \"<\":\n        memoryPointer--;\n        break;\n      case \"+\":\n        memory[memoryPointer] = (memory[memoryPointer] + 1) % 256;\n        break;\n      case \"-\":\n        memory[memoryPointer] = (memory[memoryPointer] - 1).abs() % 256;\n        break;\n      case \".\":\n        resultStr += String.fromCharCode(memory[memoryPointer]);\n        break;\n      case \",\":\n        memory[memoryPointer] = input[inputPointer].codeUnitAt(0);\n        inputPointer = (inputPointer + 1) % input.length;\n        break;\n      case \"[\":\n        bracketStack.add(codePointer);\n\n        if (memory[memoryPointer] == 0) {\n          var length = bracketStack.length;\n          codePointer++;\n          while (codePointer < code.length && length <= bracketStack.length) {\n            if (code[codePointer] == \"[\") {\n              bracketStack.add(codePointer);\n            } else if (code[codePointer] == \"]\") {\n              bracketStack.removeLast();\n            }\n            codePointer++;\n          }\n          if (codePointer < code.length && code[codePointer - 1] == \"]\") {\n            codePointer--;\n          }\n        }\n        break;\n      case \"]\":\n        var pos = bracketStack.removeLast();\n        if (memory[memoryPointer] != 0) {\n          codePointer = pos - 1;\n        }\n        break;\n      default:\n    }\n  }\n\n  return resultStr; \/\/ do it!\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73626,"user_id":null,"body":"\nconst int kMAX_SIZE = 255;\nconst int kMIN_SIZE = 0;\nString brain_luck(String code, String input) {\n  List<int> mem = List.filled(1000, 0);\n  int data_pointer = 0;\n  int input_pointer = 0;\n  String out = '';\n  final instructions = code.codeUnits;\n  for (int instruction_pointer = 0; instruction_pointer < instructions.length; ){\n    switch (instructions[instruction_pointer]) {\n        case 43: \/\/ +\n          mem[data_pointer] = mem[data_pointer] + 1 > kMAX_SIZE ? 0 : ++mem[data_pointer];\n          instruction_pointer++;\n          break;\n        case 44: \/\/ ,\n          mem[data_pointer] = input.codeUnitAt(input_pointer);\n          input_pointer++;\n          instruction_pointer++;\n          break;\n        case 45: \/\/ -\n          mem[data_pointer] = mem[data_pointer] - 1 < kMIN_SIZE ? 255 : --mem[data_pointer];\n          instruction_pointer++;\n          break;\n        case 46: \/\/ .\n          out += String.fromCharCode(mem[data_pointer]);\n          instruction_pointer++;\n          break;\n        case 60: \/\/ <\n          data_pointer--;\n          instruction_pointer++;\n          break;\n        case 62: \/\/ >\n          data_pointer++;\n          instruction_pointer++;\n          break;\n        case 91: \/\/ [\n          if (mem[data_pointer] == 0) {\n            final sub_instructions = instructions.sublist(instruction_pointer, instructions.length);\n            instruction_pointer = instruction_pointer + indexOfMatchingParenthesis(sub_instructions) + 1;\n          } else {\n            instruction_pointer++;\n          }\n          break;\n        case 93: \/\/ ]\n          if (mem[data_pointer] != 0) {\n            final reversed_sub_instructions = instructions.sublist(0, instruction_pointer+1).reversed.toList();\n            instruction_pointer = reversed_sub_instructions.length - indexOfMatchingParenthesis(reversed_sub_instructions);\n          } else {\n            instruction_pointer++;\n          }\n          break;\n    };\n  };\n  return out;\n}\n\nint indexOfMatchingParenthesis(List<int> input){\n  int nOpenParentheses = 0;\n  int nClosedParentheses = 0;\n  for (int i = 0; i < input.length; i++){\n    if (input[i] == 91) nOpenParentheses++;\n    if (input[i] == 93) nClosedParentheses++;\n    if (nOpenParentheses == nClosedParentheses) return i;\n  }\n  throw Exception;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73627,"user_id":null,"body":"import 'dart:typed_data';\n\nString brain_luck(String code, String input) {\n  final tape = Uint8List(1000);\n\n  String str = \"\";\n  int ptr = 0;\n  final Set<int> loopStartPointers = {};\n  for (var i = 0; i < code.length; i++) {\n    final char = code[i];\n    if (char == \">\") ptr++;\n    if (char == \"<\") ptr--;\n\n    if (char == \"+\") tape[ptr]++;\n    if (char == \"-\") tape[ptr]--;\n\n    if (char == \".\") {\n      str = str + (String.fromCharCode(tape[ptr]));\n    }\n\n    if (char == \",\") {\n      tape[ptr] = input[0].codeUnits[0];\n      input = input.substring(1);\n    }\n\n    if (char == \"[\") {\n      if (tape[ptr] == 0) {\n        int temp = i + 1;\n        int leftBracesCounter = 0;\n        for (temp; true; temp++) {\n          final char = code[temp];\n          if (char == \"[\") leftBracesCounter++;\n\n          if (char == \"]\") {\n            if (leftBracesCounter == 0) break;\n\n            leftBracesCounter--;\n          }\n        }\n        i = temp;\n      } else {\n        loopStartPointers.add(i);\n      }\n    }\n\n    if (char == \"]\") {\n      if (tape[ptr] != 0) {\n        i = loopStartPointers.last - 1;\n      } else {\n        loopStartPointers.remove(loopStartPointers.last);\n      }\n    }\n  }\n\n  return str; \/\/ do it!\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73628,"user_id":null,"body":"String brain_luck(String code, String input) {\n  final tape = List<int>.filled(30000, 0);\n  var pt = 0;\n  var input_pt = 0;\n  var result = \"\";\n  List<int> loops = [];\n  \n  for (int pc = 0; pc < code.length; pc++) {\n    switch (code[pc]) {\n      case '>':\n        pt++;\n        break;\n      case '<':\n        pt--;\n        break;\n      case '+':\n        tape[pt] = (tape[pt] + 1) % 256;\n        break;\n      case '-':\n        tape[pt]--;\n        if (tape[pt] < 0) {\n          tape[pt] = 255;\n        }\n        break;\n      case '.':\n        result += String.fromCharCode(tape[pt]);\n        break;\n      case ',':\n        tape[pt] = input[input_pt++].codeUnitAt(0);\n        break;\n      case '[':\n        int depth = 0;\n        if (tape[pt] == 0) {\n          pc++;\n          while (true) {\n            if (code[pc] == '[') {\n              depth++;\n            } else if (code[pc] == ']') {\n              if (depth == 0) {\n                break;\n              } else {\n                depth--;\n              }\n            }\n            pc++;\n          }\n        } else {\n          loops.add(pc);\n        }\n        break;\n      case ']':\n        if (tape[pt] == 0) {\n          loops.removeLast();\n        } else {\n          pc = loops.last;\n        }\n        break;\n    }\n  }\n  \n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5264d2b162488dc400000001":[{"id":73629,"user_id":null,"body":"String spin_words(String str) {\n  return str.split(' ').map((e)=> e.length > 4 ? e.split('').reversed.join():e).join(' ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73630,"user_id":null,"body":"String spin_words(String str) {\n  return str\n      .split(\" \")\n      .map((word) =>\n          word.length >= 5 ? word = word.split('').reversed.join('') : word)\n      .join(\" \");\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73631,"user_id":null,"body":"String spin_words(String str) => str.splitMapJoin(' ', onNonMatch: (n) => n.length < 5 ? n : n.split('').reversed.join(''));","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73632,"user_id":null,"body":"extension ReverseString on String {\n  String reverse() {\n    return this.split('').reversed.join('');\n  }\n}\n\nString spin_words(String str) {\n  return str\n    .split(' ')\n    .map((val) {\n      if (val.length >= 5) {\n        return val.reverse();\n      }\n      return val;\n    })\n    .join(' ');\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73633,"user_id":null,"body":"String spin_words(String str) {\n  return str\n      .split(' ')\n      .map((e) => e.length >= 5 ? e.split('').reversed.join('') : e)\n      .join(' ');\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73634,"user_id":null,"body":"String spin_words(String str) {\n  List<String> word = str.split(\" \");\n  if (word.length == 1) {\n    String text = word[0];\n    if (text.length >= 5) {\n      List<String> list = text.split('');\n      List<String> newList = [];\n\n      for (var i = list.length - 1; i >= 0; i--) {\n        newList.add(list[i]);\n      }\n      return newList.join();\n    } else {\n      return text;\n    }\n  } else {\n    List<String> ans = [];\n    for (var i = 0; i <= word.length - 1; i++) {\n      if (word[i].length >= 5) {\n        List<String> list = word[i].split('');\n        List<String> newList = [];\n\n        for (var i = list.length - 1; i >= 0; i--) {\n          newList.add(list[i]);\n        }\n        ans.add(newList.join());\n      } else {\n        ans.add(word[i]);\n      }\n    }\n\n    return ans.join(' ');\n  }\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73635,"user_id":null,"body":"String spin_words(String str) {\n    return str.split(\" \").map((e) => e.length > 4 ? String.fromCharCodes(e.codeUnits.reversed) : e).join(\" \");\n  }","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73636,"user_id":null,"body":"String spin_words(String str) {\n  return str\n      .split(' ')\n      .map((String e) => e.length >= 5 ? e.split('').reversed.join() : e)\n      .join(' ');\n}\n","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73637,"user_id":null,"body":"String spin_words(String str) {\n  List answer = str.split(' ');\n  answer.forEach((i) {\n    if (i.length >= 5) answer[answer.indexOf(i)] = i.split('').reversed.join();\n  });\n  return answer.join(' ');\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73638,"user_id":null,"body":"String spin_words(String str) {\n  String result;\n  String words;\n  List l = [];\n  List wrd = str.split(' ');\n  \n  for(int i=0;i<wrd.length;i++){\n      int len = wrd[i].length;\n     if(len>4){\n       words=  wrd[i].split('').reversed.join('');\n     }else{\n      words = wrd[i];\n     }\n    l.add(words);\n   }\n  result =  l.join(' ');\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5265326f5fda8eb1160004c8":[{"id":73639,"user_id":645,"body":"String number_to_string(int n) => n.toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73640,"user_id":527,"body":"String number_to_string(int n) {\n  return n.toString();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73641,"user_id":null,"body":"String number_to_string(int n) {\n  return \"$n\";\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73642,"user_id":null,"body":"String number_to_string(int n) => \"$n\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73643,"user_id":null,"body":"number_to_string(int n) => \"$n\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73644,"user_id":null,"body":"String number_to_string(int n) {\n  return n.toRadixString(10);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73645,"user_id":null,"body":"String number_to_string(int number) {\n  \/\/ your code here\n  String number_to_string = number.toString();\n  return number_to_string;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73646,"user_id":null,"body":"\/\/ Convert a Number to a String!\nString number_to_string(int n) {\n  return n.toString();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73647,"user_id":null,"body":"\nvoid main(){\n  var res = number_to_string(100);\n  print(res);\n}\n\n number_to_string(int n) {\n   return n.toString();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73648,"user_id":null,"body":"String number_to_string(int n) {\n    var number = n.toString();\n    return number;\n  }\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"52774a314c2333f0a7000688":[{"id":73649,"user_id":527,"body":"bool valid_parentheses(String parentheses) {\n  try { new RegExp(parentheses); }\n  catch (_) { return false; }\n  return true;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73650,"user_id":1986,"body":"bool valid_parentheses(String braces) {\n\tString s = braces;\n  while (s.contains(\"()\")) {\n  \ts = s.replaceAll(\"()\", \"\");\n  }\n  return s.isEmpty;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73651,"user_id":null,"body":"bool valid_parentheses(String braces) {\n  var n=0;\n  for(var i=0;i<braces.length;i++){\n    if(braces[i]==\"(\"){\n      n++;\n    }else{\n      n--;\n    }\n    if(n<0){\n      return false;\n    }\n  }\n  return n==0;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73652,"user_id":null,"body":"bool valid_parentheses(String braces) {\n    int checker = 0;\n  \n  for(int i=0; i<braces.length; i++) {\n    switch(braces[i])\n    {\n      case '(': checker++; break;\n      case ')': checker--; break;\n    }\n    \n    if(checker < 0) return false;\n  }\n  \n  return checker == 0;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73653,"user_id":null,"body":"bool valid_parentheses(String braces) =>\n    braces\n        .split('')\n        .map((e) => e == '(' ? 1 : (e == ')' ? -1 : 0))\n        .fold(0, (value, element) => value < 0 ? value : value + element) == 0;","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73654,"user_id":null,"body":"bool valid_parentheses(String braces){\n  String result = braces;\n  var regex = RegExp(r'(\\(\\))');\n  while(regex.hasMatch(result)){\n    result = result.replaceFirst(regex, '');  \n  }\n  return result.isEmpty;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73655,"user_id":null,"body":"bool valid_parentheses(String braces) {\n  while(braces.contains('()'))\n    braces = braces.replaceAll('()', '');\n  if(braces == '') return true;\n  return false;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73656,"user_id":null,"body":"bool valid_parentheses(String braces) {\n  List<String> stack = [];\n  for (int i = 0;i < braces.length;i++) {\n    String x = braces[i];\n    \n    if (x == '(') {\n      stack.add(x);\n      continue;\n    }\n\n    if (stack.isEmpty) return false;\n\n    String check;\n    switch (x) {\n      case ')':\n        check = stack.removeLast();\n        if (check == '{' || check == '[') return false;\n        break;\n    }\n  }\n  return (stack.isEmpty);\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73657,"user_id":null,"body":"bool valid_parentheses(String braces) {\n  List check = braces.split('');\n  int count=0;\n  \n  for(int i = 0;i<check.length;i++){\n    if(check[i] == \"(\"){\n      count++;\n    }else if(check[i]==')'){\n      count--;\n    }\n     if (count<0) return false;\n  }\n if(count==0) {\n   return true;\n }else{ return false;}\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73658,"user_id":null,"body":"\nbool valid_parentheses(String braces) {\n  int c = 0;\n  braces.codeUnits.forEach((codeUnit) {\n    if (codeUnit == 40) ++c;\n    if (codeUnit == 41) --c;\n    if (c < 0) c -= 1000;\n  });\n  return c == 0;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5277c8a221e209d3f6000b56":[{"id":73659,"user_id":492,"body":"bool valid_braces(String str) {\n  var prev = \"\";\n  while (str.length != prev.length) {\n            prev = str;\n            str = str\n                .replaceAll(\"()\", \"\")\n                .replaceAll(\"[]\", \"\")\n                .replaceAll(\"{}\", \"\");                \n    }\n    return (str.length == 0);\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73660,"user_id":null,"body":"bool valid_braces(String braces) {\n  while (\n      braces.contains('()') || braces.contains('[]') || braces.contains('{}')) {\n    braces = braces.replaceAll('()', \"\");\n    braces = braces.replaceAll('[]', \"\");\n    braces = braces.replaceAll('{}', \"\");\n  }\n  return braces.isEmpty;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73661,"user_id":null,"body":"Map<String, String> mapping = {\n  \"{\": \"}\",\n  \"(\": \")\",\n  \"[\": \"]\"\n};\n\nbool valid_braces(String braces) {\n  List stack = [];\n  for(var ch in braces.split(\"\")) {\n    if (stack.isEmpty || mapping.containsKey(ch)) {\n      stack.add(ch);\n    } else if (mapping[stack.last] == ch) {\n      stack.removeLast();\n    } else {\n      break;\n    }\n  }\n  return stack.isEmpty;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73662,"user_id":null,"body":"\nbool valid_braces(String s) {\n  var m = {')': '(', ']': '[', '}': '{'};\n  var stack = [];\n  for (var c in s.split('')) {\n    switch (c) {\n      case '(':\n      case '[':\n      case '{':\n        stack.add(c);\n        break;\n\n      case ')':\n      case ']':\n      case '}':\n        if (stack.isEmpty) return false;\n        if (stack.removeLast() != m[c]) return false;\n        break;\n    }\n  }\n  return stack.isEmpty;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73663,"user_id":null,"body":"import 'dart:collection';\n\nbool valid_braces(String braces) {\n  final Queue<String> bracesQueue = Queue();\n  for (final bracket in braces.split('')) {\n    if (_isOpenBracket(bracket)) {\n      bracesQueue.add(bracket);\n    } else if (_isCloseBracket(bracket)) {\n      if (bracesQueue.isEmpty || !_isOppositeBracket(bracket, bracesQueue.removeLast())) {\n        return false;\n      }\n    }\n  }\n  return bracesQueue.isEmpty;\n}\n\nbool _isOpenBracket(String bracket) {\n  return '([{'.contains(bracket);\n}\n\nbool _isCloseBracket(String bracket) {\n  return ')]}'.contains(bracket);\n}\n\nbool _isOppositeBracket(String bracket, String fromStack) {\n  switch (bracket) {\n    case ')':\n      return fromStack == '(';\n    case ']':\n      return fromStack == '[';\n\n    case '}':\n      return fromStack == '{';\n  }\n  return false;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73664,"user_id":null,"body":"bool valid_braces(String braces) {\n  var after;\n  RegExp reg = new RegExp(r'(\\(\\)|\\[\\]|\\{\\})');\n  \n  while(braces != (braces = braces.replaceAll(reg, ''))) {      \n    if (braces == '') {\n      return true;\n    }\n  } \n  return false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73665,"user_id":null,"body":"bool valid_braces(String braces) {\n  String s = braces;\n  var regex = RegExp(r'(\\(\\)|\\[\\]|\\{\\})');\n  while(regex.hasMatch(s))\n    s = s.replaceFirst(regex,'');\n  return s.isEmpty;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73666,"user_id":null,"body":"bool valid_braces(String braces) {\n  int l1 = 0;\n  while (l1 != braces.length) {\n    l1 = braces.length;\n    braces = braces.replaceAll(RegExp(r'(\\(\\)|\\[\\]|\\{\\})'), '');\n  }\n  return braces.length == 0;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73667,"user_id":null,"body":"bool valid_braces(String braces) {\n  var remainder = braces;\n  var emptyBraces = RegExp(r'\\(\\)|\\[\\]|\\{\\}');\n\n  do {\n    remainder = remainder.replaceAll(emptyBraces, '');\n  } while (emptyBraces.hasMatch(remainder));\n\n  return remainder.isEmpty;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73668,"user_id":null,"body":"bool valid_braces(String braces) {\n  if(braces.isEmpty){\n    return true;\n  }\n  if(braces.length>braces.replaceAllMapped('()', (f) => '').length){\n    return valid_braces(braces.replaceAllMapped('()', (f) => ''));\n  }\n  if(braces.length>braces.replaceAllMapped('[]', (f) => '').length){\n    return valid_braces(braces.replaceAllMapped('[]', (f) => ''));\n  }\n  if(braces.length>braces.replaceAllMapped('{}', (f) => '').length){\n    return valid_braces(braces.replaceAllMapped('{}', (f) => ''));\n  }\n  return false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5282b48bb70058e4c4000fa7":[{"id":73669,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) => {\n      'r': int.parse(hex.substring(1, 3), radix: 16),\n      'g': int.parse(hex.substring(3, 5), radix: 16),\n      'b': int.parse(hex.substring(5, 7), radix: 16)\n    };","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73670,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) =>\n  { for(var c='rgb', i = 0, j = 1; j < 6; i++, j += 2) c[i]: int.parse(hex.substring(j, j + 2), radix: 16) };\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73671,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) {\n  String color = hex.substring(1).toLowerCase();\n  int r = int.parse(color.substring(0, 2), radix: 16);\n  int g = int.parse(color.substring(2, 4), radix: 16);\n  int b = int.parse(color.substring(4, 6), radix: 16);\n  return {\"r\" : r, \"g\" : g, \"b\" : b};\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73672,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) {\n  \/\/ return map with decimal values\n  Map<String, int> m = {\"r\": int.parse(hex.substring(1,3), radix: 16), \n                        \"g\": int.parse(hex.substring(3,5), radix: 16), \n                        \"b\": int.parse(hex.substring(5), radix: 16)};\n    return m;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73673,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) {\n  return <String, int>{\n    'r': int.parse(hex.substring(1,3), radix : 16),\n    'g': int.parse(hex.substring(3,5), radix : 16),\n    'b': int.parse(hex.substring(5), radix : 16),\n  };\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73674,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) {\n  return {\n    'r': int.parse(hex.substring(1, 3), radix: 16),\n    'g': int.parse(hex.substring(3, 5), radix: 16),\n    'b': int.parse(hex.substring(5, 7), radix: 16)\n  };\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73675,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) {\n  int num = int.parse(hex.substring(1), radix: 16);\n  return {\n    'r': num >> 16,\n    'g': (num >> 8) & 255,\n    'b': num % 256,\n  };\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73676,"user_id":168,"body":"Map<String, int> hexToRGB(String hex) {\n  int x = int.parse(hex.substring(1), radix: 16);\n  return {'r': x >> 16, 'g': (x >> 8) & 0xff, 'b': x & 0xff};\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73677,"user_id":null,"body":"Map<String, int> hexToRGB(String hex) => {\"r\": int.parse(hex[1]+hex[2], radix: 16), \n                                          \"g\": int.parse(hex[3]+hex[4], radix: 16), \n                                          \"b\": int.parse(hex[5]+hex[6], radix: 16)};","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73678,"user_id":null,"body":"\nMap<String, int> hexToRGB(String hex) {\n  final values = RegExp(r'\\w{2}')\n      .allMatches(hex)\n      .map((m) => int.parse(m.group(0)!, radix: 16))\n      .toList();\n  return {'r': values[0], 'g': values[1], 'b': values[2]};\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"53369039d7ab3ac506000467":[{"id":73679,"user_id":null,"body":"String bool_to_word(bool boolean) => boolean ? \"Yes\" : \"No\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73680,"user_id":null,"body":"String bool_to_word(bool boolean) {\n  \/\/ It checks if boolean is true and returns \"Yes\"\n  \/\/and if it is not, then it returns \"No\"\n  return boolean?\"Yes\":\"No\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73681,"user_id":null,"body":"String bool_to_word(bool flag) => flag ? 'Yes' : 'No';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73682,"user_id":null,"body":"bool_to_word(b)=>b?'Yes':'No';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73683,"user_id":null,"body":"String bool_to_word(bool b) => b ? 'Yes' : 'No';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73684,"user_id":null,"body":"const answers = {\n    true: \"Yes\",\n    false: \"No\",\n};\n\nString bool_to_word(bool boolean) => answers[boolean];","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73685,"user_id":null,"body":"String bool_to_word(bool boolean) {\n  return {true: 'Yes', false: 'No'}[boolean];\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73686,"user_id":null,"body":"String bool_to_word(bool boolean) {\n  return !boolean?\"No\":\"Yes\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73687,"user_id":null,"body":"String bool_to_word(bool boolean) {\n  String word;\n  if (boolean == true){\n    word = \"Yes\";\n  }else{\n    word = \"No\";\n  }\n  return word;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73688,"user_id":null,"body":"String bool_to_word(bool boolean) {\n  String result;\n  boolean == true ? result = \"Yes\" : result = \"No\";\n  \n  return result;\n  \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"53da3dbb4a5168369a0000fe":[{"id":73689,"user_id":null,"body":"String even_or_odd(int number) => number.isEven ? 'Even' : 'Odd';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73690,"user_id":17,"body":"String even_or_odd(int n) => n % 2 == 0 ? 'Even' : 'Odd';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73691,"user_id":null,"body":"String even_or_odd(int number) {\n\nint n=number%2;\nif(n==0){\nreturn \"Even\";\n}else{\nreturn \"Odd\";\n}\n\n\n  \/\/ Code here\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73692,"user_id":null,"body":"String even_or_odd(int number) {\n  if (number.isEven) return 'Even';\n  if (number.isOdd) return 'Odd';\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73693,"user_id":null,"body":"String even_or_odd(int number) => number % 2 == 0 ? 'Even' : 'Odd';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73694,"user_id":800,"body":"String even_or_odd ( int number ) {\n  return ['Even', 'Odd'][number % 2];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73695,"user_id":null,"body":"String even_or_odd(int number) => number.remainder(2) == 0 ? 'Even': 'Odd';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73696,"user_id":null,"body":"String even_or_odd(int number) {\n  \/\/ Code here\n  if((number%2)==0){\n    return \"Even\";\n  }else {\n    return \"Odd\";\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73697,"user_id":null,"body":"String even_or_odd(int number) {\n  String a;\n  if(number % 2 == 0)\n    {\n    a = \"Even\";\n  }\n  else{\n  a = \"Odd\";\n}\nreturn a;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73698,"user_id":null,"body":"String even_or_odd(int n) => n.isEven ? \"Even\" : \"Odd\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"53da6d8d112bd1a0dc00008b":[{"id":73699,"user_id":null,"body":"List<int> reverse_list(List<int> list)=>[...list.reversed];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73700,"user_id":null,"body":"List<int> reverse_list(List<int> list) => List.from(list.reversed);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73701,"user_id":null,"body":"List<int> reverse_list(List<int> list) => list.reversed.toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73702,"user_id":null,"body":"\nList<int> reverse_list(List<int> list) {\n  \/\/ \/\/ Easy Solution\n  \/\/ return list.reversed.toList();\n  \/\/ Another solution \n  return [ for (int i = list.length; i > 0; i--) list[i-1] ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73703,"user_id":null,"body":"List<int> reverse_list(List<int> list) {\n  \/\/ your code here\n  List<int> reversedNumbers = [];\n  \n  for (int i= list.length - 1; i >= 0;  i--){\n    reversedNumbers.add(list[i]);\n  }\n  \n  return reversedNumbers;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73704,"user_id":null,"body":"List<int> reverse_list(List<int> list) \n{\n  List<int> reversedlist = List.from(list.reversed);\n  return reversedlist;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73705,"user_id":null,"body":"List<int> reverse_list(List<int> list) {\n  return list.reversed.toList();\n}\n\nvoid main(List<String> args) {\n  print(reverse_list([1, 2, 3, 4]));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73706,"user_id":null,"body":"\/\/ Reverse List Order\nList<int> reverse_list(List<int> list) {\n  return list.reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73707,"user_id":null,"body":"  List<int> reverse_list(List<int> list) {\n    List<int> listReverse = [];\n    listReverse = list.reversed.toList();\n    return listReverse;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73708,"user_id":null,"body":"\n  List<int> reverse_list(List<int> list) {\n    List<int> newList = list.reversed.toList();\n   \n    return newList;\n  }\n\n ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"53dc23c68a0c93699800041d":[{"id":73709,"user_id":645,"body":"String smash(words) => words.join(' ');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73710,"user_id":527,"body":"String smash(words) {\n  return words.join(' ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73711,"user_id":null,"body":"String smash(words) {\n  String phrase = '';\n  words.forEach((w) => phrase += '${w} ');\n  return phrase.trim();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73712,"user_id":1701,"body":"String smash(words) => words.join(\" \").trim();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73713,"user_id":571,"body":"String smash(w)=>w.join(\" \");","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73714,"user_id":null,"body":"String smash(List<String> words) => words.length > 0 ? words.reduce((a,b) => a + ' ' + b) : '';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73715,"user_id":527,"body":"String smash(List<String> words) {\n  return words.join(' ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73716,"user_id":null,"body":"String smash(List<String> words) => words.isEmpty ? \"\" : words.reduce((value, element) => value + ' ' + element);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73717,"user_id":null,"body":"String smash(List<String> words) => words.isEmpty ? \"\" : words.reduce((value, element) => value + ' ' + element).toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73718,"user_id":null,"body":"String smash(words) {\n  \/\/ your code here\n  String text = \"\";\n  for(int n =0; n<words.length;n++)\n    {\n    text = text + words[n] + \" \";\n  }\n  return text.trim();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"53dc54212259ed3d4f00071c":[{"id":73719,"user_id":645,"body":"num sum_array(List<num> arr) => arr.fold(0, (a, b) => a + b);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73720,"user_id":null,"body":"num sum_array(List<num> arr) => arr.fold(0, (previousValue, newValue) => previousValue + newValue);\n\n\/\/ Fold Method : \n\/\/ Reduces a collection to a single value by \n\/\/ iteratively combining each element \n\/\/ of the collection with an existing value\n\/\/\n\/\/ 0 is initial value\n\/\/ for first previous is 0\n\/\/ for sum give (+) \n\/\/ for subtraction give (-)\n\/\/\n\/\/ example\n\/\/ arr.fold(0, (previousValue, newValue) => previousValue - newValue);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73721,"user_id":null,"body":"num sum_array(List<num> arr) {\n  \/\/ your code here\n  return arr.fold(0, (sum, element) => sum + element);\n \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73722,"user_id":null,"body":"import \"dart:math\";\n\nnum sum_array(List<num> arr) {\n  \n  var sum0 = arr.fold(0, (e, v) => e + v);\n  \n  var sum1 = [...arr, if(arr.isEmpty) 0].reduce((e, v) => e + v);\n  \n  num sum2 = List.generate(1, (i){ num s = 0; arr.forEach((e) => s += e); return s; })[0];\n  \n  num sum3 = 0; arr.forEach((e) => sum3 += e);\n  \n  num sum4 = 0; for (var e in arr) sum4 += e;\n  \n  num sum5 = 0; for (var i = 0; i < arr.length; sum5 += arr[i], i++);\n  \n  num sum6 = 0; arr.map((e) { sum6 += e; }).toList();\n  \n  assert(sum0 == sum1 && sum1 == sum2 && sum2 == sum3 && sum3 == sum4 && sum4 == sum5 && sum5 == sum6);\n  \n  var randomSum = Random().nextInt(7);\n  return [sum0, sum1, sum2, sum3, sum4, sum5, sum6][randomSum];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73723,"user_id":null,"body":"num sum_array(List<num> arr) {\n  if(arr == null) return 0;\n  num sum = 0;\n  for(int i = 0;i < arr.length; i++){\n    sum = sum + arr[i];\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73724,"user_id":null,"body":"num sum_array(List<num> arr) {\n  return arr.fold(0, (x, y) => x + y);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73725,"user_id":null,"body":"num sum_array(List<num> arr) {\n  return arr.fold(0, (sum, num) => sum + num);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73726,"user_id":null,"body":"num sum_array(List<num> arr) => arr.fold<num>(0, (a, b) => a + b);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73727,"user_id":null,"body":"num sum_array(List<num> arr) {\n  num sum=0;\n  for(num value in arr){\n    sum+=value;\n    }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73728,"user_id":null,"body":"num sum_array(List<num> arr) => arr.fold(0,(v,e)=> v+e);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"542c0f198e077084c0000c2e":[{"id":73729,"user_id":null,"body":"int divisors(n) {\n  var counter = 1;\n  for (var i = 1; i < n; i++) if (n % i == 0) counter++;\n  return counter;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73730,"user_id":null,"body":"int divisors(int n)\n{\n    return [for (var i = 1; i < n + 1; i++) if(n % i == 0) i].length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73731,"user_id":null,"body":"int divisors(n) => List<int>.generate(n, (i) => i + 1).where((e) => n % e == 0).length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73732,"user_id":null,"body":"import \"dart:math\" as math;\n\nint divisors(int n) {\n  final sqrt = math.sqrt(n);\n  \n  var ret = 0;\n  for (int i = 1; i <= sqrt; ++i) {\n    if (i * i == n) {\n      ret++;\n    } else if (n % i == 0) {\n      ret += 2;\n    }\n  }\n  \n  return ret;\n  \n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73733,"user_id":null,"body":"int divisors(n) {\n  \/\/ divisors will always be at least 2 because every positive integer\n  \/\/is divisable by 1 and itself.\n  if (n == 1) return 1;\n  int numberOfDivisors = 1;\n  for (var i = 2; i <= n; i++) {\n    if (n % i == 0) numberOfDivisors++;\n  }\n  return numberOfDivisors;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73734,"user_id":null,"body":"int divisors(n) => (List<int>.generate(n, (i) => i + 1, growable: true)..retainWhere((i) => n%i == 0)).length;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73735,"user_id":null,"body":"int divisors(n) {\nint count=0;\n  for(var i=1;i<=n;i++)\n  {\n   if(n%i==0)\n     {\n     count++;\n     }\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73736,"user_id":null,"body":"int divisors(n) {\n    int z = 0;\n    for (int i = 1; i <= n; ++i)\n        if (n % i == 0)\n            z++;\n    return z;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73737,"user_id":null,"body":"int divisors(int n) {\n  var count = 0;\n  for (var i=1; i<=n; i++){\n    if (n%i==0) {count++;}\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73738,"user_id":null,"body":"int divisors(n) {\n  int count = 0;\n\nfor(int i= 1;i<= n;i++){\n        if(n % i == 0)\n          count +=1 ;\n          \n\n\n\n }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"542f0c36d002f8cd8a0005e5":[{"id":73739,"user_id":53,"body":"int last_chair(int n) => n - 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73740,"user_id":null,"body":"int last_chair(int n) {\n  \/\/ your code here\n  return n - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73741,"user_id":168,"body":"var last_chair = (n) => n - 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73742,"user_id":527,"body":"int last_chair(int n) {\n  return n - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"544675c6f971f7399a000e79":[{"id":73743,"user_id":645,"body":"int string_to_number(String str) => int.parse(str);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73744,"user_id":527,"body":"int string_to_number(String str) {\n  return int.parse(str);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73745,"user_id":null,"body":"int string_to_number(String str) {\n  return int.tryParse(str) ?? str;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73746,"user_id":null,"body":"int string_to_number(String str) {\n  if (str[0] == \"-\")\n    return -(string_to_number(str.substring(1)));\n  if (str.length == 1)\n    return (str.codeUnitAt(0) - \"0\".codeUnitAt(0));\n  return (string_to_number(str.substring(0, str.length - 1)) * 10 + str.codeUnitAt(str.length - 1) - \"0\".codeUnitAt(0));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73747,"user_id":250,"body":"int string_to_number(String n) => int.parse(n); ","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73748,"user_id":527,"body":"var string_to_number = int.parse;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73749,"user_id":null,"body":"\/\/ without using int.parse\n\nint string_to_number(String str) {\n  int number = 0;\n  for (var i = str.length-1, j = 1; i >= 0; i--, j *= 10) {\n    if (i == 0 && str[i] == '-')\n      number *= -1;\n    else\n      number += (str.codeUnitAt(i)-48) * j;   \n  }\n  return number;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73750,"user_id":null,"body":"int? string_to_number(String str) => int.tryParse(str);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73751,"user_id":null,"body":"\/\/ Convert a String to a Number!\nint string_to_number(String str) {\n  return int.parse(str);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73752,"user_id":null,"body":"int string_to_number(String str) {\n  var x=int.parse(str);\n  return x;\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54bf1c2cd5b56cc47f0007a1":[{"id":73753,"user_id":null,"body":"int duplicate_count(String text){\n  text = text.toLowerCase();\n  Map<String, int> letterMap = {};\n  text.split(\"\").forEach((letter){\n    if(letterMap[letter] == null)\n       letterMap[letter] = 1;\n    else\n       letterMap[letter]+=1;\n  });\n  return letterMap.values.where((value)=>value>1).length;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73754,"user_id":null,"body":"int duplicate_count(String text){\n    \/\/ print(text.toUpperCase().runes.toList()..sort());\n  final data = {};\n\n  for(final c in text.toUpperCase().runes) {\n    if(data[c] == null) {\n      data[c] = 1;\n    }else{\n      data[c]++;\n    }\n  }\n\n  return data.values.fold(0,(acc, v) =>  v > 1 ? ++acc : acc);\n\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73755,"user_id":null,"body":"int duplicate_count(String text){\n  final countMap = <String,int>{};\n  for(final char in text.split('')){\n    countMap[char.toLowerCase()] ??= 0;\n    countMap[char.toLowerCase()] += 1;\n  }\n  return countMap.values.where((e)=>e>1).length;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73756,"user_id":null,"body":"int duplicate_count(String text){\n  int counter = 0;\n  String lowerText = text.toLowerCase();\n  while (lowerText.length > 0) {\n    if (lowerText[0].allMatches(lowerText).length > 1) {\n      counter ++;\n    }\n    lowerText = lowerText.replaceAll(lowerText[0], '');\n  }\n  return counter;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73757,"user_id":null,"body":"int duplicate_count(String text){\n  if(text == null)\n    throw \"Text must be valid string\";\n  \n  text = text.toLowerCase();\n  var doubles = text.split(\"\").where( (c) => text.indexOf(c) < text.lastIndexOf(c));\n \n  return Set.from(doubles).length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73758,"user_id":null,"body":"\nint duplicate_count(String text){\n  \n  final list = text.toLowerCase().split('');\n  final temp = list.toSet();\n  var count = 0;\n  temp.forEach((e) {\n    final valueCount = list.where((item) => item == e).length;\n    \n    if(valueCount > 1) count++;\n  });\n  return count;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73759,"user_id":null,"body":"int duplicate_count(String text) {\n  var counts = <String, int>{};\n  text\n      .split('')\n      .map((e) => e.toLowerCase())\n      .forEach((e) => counts.containsKey(e) ? counts[e]++ : counts[e] = 1);\n  return counts.values.where((element) => element > 1).length;\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73760,"user_id":null,"body":"int duplicate_count(String text){\n  var list = text.toLowerCase().split('');\n  var sset = list.toSet();\n  for (var item in sset) list.remove(item);\n  sset = list.toSet();\n  return sset.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73761,"user_id":null,"body":"int duplicate_count(String text){\n  Map<String, int> caractersCount = {};\n  \n  text.toLowerCase().split('').forEach((e) {\n    caractersCount.putIfAbsent(e, () => 0);\n    caractersCount.update(e, (value) => value + 1);\n  });\n\n  return caractersCount.values.where((e) => e > 1).length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73762,"user_id":null,"body":"int duplicate_count(String text){\n  int number = 0;\n  List<String> list = [];\n  text.toLowerCase().split('').forEach((e) {\n    if(!list.contains(e)) list.add(e);\n  });\n  for (String letter in list) {\n    if (letter.allMatches(text.toLowerCase()).length > 1) number++;\n  }\n  return number;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54c27a33fb7da0db0100040e":[{"id":73763,"user_id":null,"body":"import 'dart:math';\n\nbool is_square(num n) => sqrt(n) % 1 == 0;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73764,"user_id":null,"body":"import 'dart:math';\n\nvar is_square = (n) => sqrt(n).remainder(1) == 0;","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73765,"user_id":1471,"body":"is_square(n) { \n  for(var i = 0; i <= n; i++){\n    if(i*i == n)\n      return true;\n  }\n  return false;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73766,"user_id":null,"body":"import \"dart:math\" as Math;\n\nbool is_square(n) { \n  return Math.sqrt(n) % 1 == 0;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73767,"user_id":null,"body":"import 'dart:math';\nbool is_square(int n) => n>=0 && sqrt(n) == sqrt(n).round();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73768,"user_id":null,"body":"import \"dart:math\";\nbool is_square(n) { \nvar ra = sqrt(n);\nreturn (ra%1==0) ?  true:  false;\n  \n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73769,"user_id":null,"body":"import 'dart:math';\n\nis_square(n) => n == pow(sqrt(n), 2);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73770,"user_id":null,"body":"import 'dart:math';\n\nbool is_square(n) => (sqrt(n) % 1 == 0);\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73771,"user_id":null,"body":"import \"dart:math\";\nbool is_square(num n) { \n  if(sqrt(n) is num && sqrt(n)*sqrt(n)==n ){\n    return true; \n  }else{\n  return false; \n    \n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73772,"user_id":null,"body":"import \"dart:math\" as Math;\n\nbool is_square(int n) => (Math.sqrt(n) % 1) == 0;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54d512e62a5e54c96200019e":[{"id":73773,"user_id":492,"body":"String prime_factors(int n){\n    String res = \"\";\n    for (var i = 2; i <= n; ++i) {\n        int cnt = 0; \n        while (n % i == 0) { cnt++; n ~\/= i; }\n            res += (cnt != 0) ? \"(\" + ( cnt > 1 ? i.toString() + \"**\" + cnt.toString()  : i.toString() ) + \")\" : \"\";\n        }\n    return res;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73774,"user_id":null,"body":"String prime_factors(int n) {\n  var quot = n;\n  var map = <int, int>{};\n\n  for (var i = 2; i <= n; i++) {\n    if (quot % i == 0) {\n      while (quot % i == 0) {\n        map.containsKey(i) ? map[i]++ : map[i] = 1;\n        quot = quot ~\/ i;\n      }\n      if (quot == 1) break;\n    }\n  }\n\n  var list = <String>[];\n\n  map.forEach((key, value) =>\n      value == 1 ? list.add('($key)') : list.add('($key**$value)'));\n\n  return list.join();\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73775,"user_id":null,"body":"String prime_factors(int n){\n    final primes = <String>[];\n    int lst = n;\n    for (int number = 2; number <= lst; number++) {\n      int count = 0;\n      while (lst % number == 0) {\n        count++;\n        lst ~\/= number;\n      }\n      if (count == 0) {\n        continue;\n      }\n      primes.add(count > 1 ? '($number**$count)' : '($number)');\n    }\n\n    return primes.join('');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73776,"user_id":null,"body":"String prime_factors(int n){\n  String ans = n==1? \"1\":\"\";\n  \n  for(int i=2;i<=n;i++){\n    int count = 0;\n    if (n%i==0){\n      while (n%i==0){\n        n ~\/= i;\n        count+=1;\n      };\n      if (count==1){\n        ans += \"($i)\";\n        }\n      else{\n        ans += \"($i**$count)\";\n      };\n    };\n  };\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73777,"user_id":null,"body":"String prime_factors(int n){\n  String result = \"\";\n  int power = 0, i = 2;\n  while(n > 1){\n    if(n % i == 0){\n      power++;\n      n ~\/= i;\n    }\n    else if(power > 0){\n      result += (power > 1) ? \"($i**$power)\" : \"($i)\";\n      power = 0;\n      i++;\n    }\n    else  i++;\n  }\n  result += (power > 1) ? \"($i**$power)\" : \"($i)\";\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73778,"user_id":null,"body":"import 'dart:math';\n\nString prime_factors(int n) {\n  int count = 0;\n  String res = '';\n  for (int i = 2; i < sqrt(n)+1; ++i) {\n    if (n % i == 0) {\n      count = 0;\n      while (n % i == 0) {\n        n = n ~\/ i;\n        count++;\n      }\n      if (count == 1) {\n        res += '($i)';\n      } else {\n        res += '($i**$count)';\n      }\n    }\n  }\n  if (n != 1) res += '($n)';\n\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73779,"user_id":null,"body":"String prime_factors(int n) {\n  StringBuffer result = StringBuffer();\n  int count = 0;\n  int number = 2;\n  while (number <= n && n > 1 || count > 0) {\n    if (n % number == 0) {\n      count++;\n      n = n ~\/ number;\n    } else {\n      if (count == 1) {\n        result.write(\"($number)\");\n      } else if (count > 1) {\n        result.write(\"($number**$count)\");\n      }\n      count = 0;\n      number++;\n    }\n  }\n  return result.toString();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73780,"user_id":null,"body":"String prime_factors(int n) {\n  \/\/ your code\n  String out = '';\n  for (int p = 2; n > 1;) {\n    String temp = '';\n    if (n % p == 0) {\n      for (int i = 1; n % p == 0 && n > 1; i++) {\n        (i == 1) ? temp = '($p)' : temp = '(${p}**${i})';\n        n = n ~\/ p;\n      }\n    }\n    out += temp;\n    (p == 2) ? p++ : p += 2;\n  }\n  return out;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73781,"user_id":null,"body":"import 'dart:math';\n\nString prime_factors(int n){\n  List<List<int>> factors = [];\n  \n  int value = n;\n  \n  if (value % 2 == 0) {\n    int count = 0;\n    \n    while (value % 2 == 0) {\n      count++;\n      value ~\/= 2;\n    }\n    \n    factors.add([2, count]);\n  }\n  \n  for (int i = 3; i <= sqrt(n).ceil(); i += 2) {\n    int count = 0;\n    while (value % i == 0) {\n      count++;\n      value ~\/= i;\n    }\n    if (count > 0) {\n      factors.add([i, count]);\n    }\n  }\n  \n  if (value != 1 && value > 2) {\n    factors.add([value, 1]);\n  }\n  \n  return factors.fold(\"\", (acc, cur) {\n    return cur[1] > 1\n      ? \"$acc(${cur[0]}**${cur[1]})\"\n      : \"$acc(${cur[0]})\";\n  });\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73782,"user_id":null,"body":"String prime_factors(int n) {\n  int value = n;\n  List<int> factors = [];\n\n  while (value != 1) {\n    for (int i = 2; i <= value; i++) {\n      if (isPrime(i) && value % i == 0) {\n        factors.add(i);\n        value ~\/= i;\n        break;\n      }\n    }\n  }\n\n  Set<int> uniqueFactors = factors.toSet();\n  String factorsString = '';\n\n  for (int f in uniqueFactors) {\n    factorsString += '(';\n    factorsString += f.toString();\n\n    int factorCount = factors.where((e) => e == f).length;\n    if (factorCount > 1) {\n      factorsString += '**$factorCount';\n    }\n\n    factorsString += ')';\n  }\n\n  return factorsString;\n}\n\n\/\/ Optimized algo https:\/\/en.wikipedia.org\/wiki\/Primality_test#Dart\nbool isPrime(number) {\n  if (number == 2 || number == 3) {\n    return true;\n  } else if (number <= 1 || number % 2 == 0 || number % 3 == 0) {\n    return false;\n  }\n  for (int i = 5; i * i <= number; i += 6) {\n    if (number % i == 0 || number % (i + 2) == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54d7660d2daf68c619000d95":[{"id":73783,"user_id":168,"body":"String convert_frac(lst) {\n  lst = lst.map((x) {\n    int d = x[0].gcd(x[1]);\n    return [x[0] ~\/ d, x[1] ~\/ d];\n  });\n  final lcm = lst.fold(1, (r, x) => r * x[1] ~\/ r.gcd(x[1]));\n  return lst.map((x) => '(${x[0] * lcm ~\/ x[1]},$lcm)').join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73784,"user_id":53,"body":"\nint gcd(int a, int b) {\n  return b == 0 ? a : gcd(b, a % b);\n}\n\nint lcm(int a, int b) {\n  return (a * b) ~\/ gcd(a, b);\n}\n\nList<int> reduce(int a, int b) {\n  var i = gcd(a, b);\n  return [a ~\/ i, b ~\/ i];\n}\n\nString convert_frac(lst) {\n  var xss = lst.map((xs) => reduce(xs[0], xs[1]));\n  var cd = xss.fold(1, (acc, xs) => lcm(xs[1], acc));\n  var yss = xss.map((xs) => [xs[0] * cd ~\/ xs[1], cd]);\n  var ans = yss.map((ys) => \"(${ys[0]},${ys[1]})\").join();\n  return ans;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73785,"user_id":null,"body":"\/\/ fine-tuning of g964's solution :-D\nString convert_frac(List<List<int>> lst) {\n  int gcd(int a, b) => b > 0 ? gcd(b, a % b) : a;\n  int lcm(int a, b) => a * b ~\/ gcd(a, b); \n  int lcmall(List<int> arr) => arr.fold(arr[0], lcm); \n  List<int> reduced(List<int> a) { \n      var n = a[0], d = a[1]; \n      var g = gcd(n, d); \n      return [n ~\/ g, d ~\/ g];\n  }\n  \n  var lst2 = lst.map((x) => reduced(x)).toList();\n  int _lcm = lcmall(lst2.map((f) => f[1]).toList());\n  var nums = lst2.map((f) => f[0] * _lcm ~\/ f[1]).toList();\n  \n  return nums.fold(\"\", (_this, _next) => _this + \"($_next,$_lcm)\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73786,"user_id":null,"body":"\/\/ Some fractions need to be simplified\nimport 'dart:math';\nint getD(lst){\n  var m = lst.reduce((int e,int v) => max(v,e));\n  var mm = m;\n  bool validDenom = false ;\n  while(!validDenom){\n    validDenom = true;\n    for(var n in lst){\n      if(mm% n != 0){\n        validDenom = false;\n        break;\n      }\n    }\n    mm +=m;\n  }\n  mm -= m;\n  return mm;\n} \nint gcd(int a, int b) {\n  while (b != 0) {\n    var t = b;\n    b = a % t;\n    a = t;\n  }\n  return a;\n}\n\nString convert_frac(lst) {\n  String result = '';\n  Set<int> s = {};\n  var reduceLst = lst.map((v){\n    int pgcd = gcd(v[0],v[1]);\n    return [v[0]~\/pgcd,v[1]~\/pgcd];\n  }).toList();\n  reduceLst.forEach((e) => s.add(e[1]));\n  int denom = getD(s);\n  for(int i = 0 ; i < lst.length ; i++){\n    result+= '(${reduceLst[i][0]*denom~\/reduceLst[i][1]},$denom)';\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73787,"user_id":null,"body":"String convert_frac(List<List<int>> lst) {\n  final List<List<int>> simplified = lst.map((frac) {\n    int gcd = frac[0].gcd(frac[1]);\n    return frac.map((i) => i ~\/ gcd).toList();\n  }).toList();\n  int lcm = simplified.fold(\n      1, (int acc, List<int> el) => (acc * el[1] \/ acc.gcd(el[1]!)).ceil());\n  return simplified\n      .map((frac) => [frac[0] * ((lcm \/ frac[1]).ceil()), lcm].join(','))\n      .map((str) => '($str)')\n      .join('');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73788,"user_id":null,"body":"String convert_frac(List<List<int>> lst) {\n  \/\/ make copy list lst\n  List<List<int>> sLst =\n      List.generate(lst.length, (index) => List.generate(2, (i) => 0));\n  for (int i = 0; i < sLst.length; i++) {\n    for (int j = 0; j < sLst[0].length; j++) {\n      sLst[i][j] = lst[i][j];\n    }\n  }\n\n  \/\/ simplify\n  for (int f = 0; f < sLst.length; f++) {\n    var s = sLst[f];\n    for (int i = s[0]; i > 1; i--) {\n      if (s[0] % i == 0 && s[1] % i == 0) {\n        s[0] = s[0] ~\/ i;\n        s[1] = s[1] ~\/ i;\n      }\n    }\n    sLst[f] = s;\n  }\n\n  List<int> denominators =\n      List.generate(sLst.length, (index) => sLst[index][1]);\n  denominators.sort();\n  int max = denominators.last;\n  int i = 1;\n  int newDenom = max;\n  bool isFoundCommonDenominators = false;\n  while (!isFoundCommonDenominators) {\n    isFoundCommonDenominators = true;\n    newDenom = max * i;\n    i++;\n    for (var d in denominators) {\n      if (newDenom % d != 0) {\n        isFoundCommonDenominators = false;\n        continue;\n      }\n    }\n  }\n\n  for (int j = 0; j < sLst.length; j++) {\n    sLst[j][0] = (newDenom \/ sLst[j][1] * sLst[j][0]).toInt();\n    sLst[j][1] = newDenom;\n  }\n  return sLst.map((e) => '(${e[0]},${e[1]})').join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73789,"user_id":null,"body":"String convert_frac(lst) {\n  String answ = '';\n  int k = 0;\n  int number = 0;\n  int nextNumber = 0;\n  for (int i = 0; i < lst.length; i++)\n  {\n    int n = lst[i][0];\n    int m = lst[i][1];\n    k = n.gcd(m);\n    n ~\/= k;\n    m ~\/= k;\n    lst[i][0] = n;\n    lst[i][1] = m;\n  }\n  int lcm = lst[0][1];\n  for (int i = 0; i < lst.length - 1; i++)\n  {\n    nextNumber = lst[i+1][1];\n    lcm = lcmFunc(lcm, nextNumber);\n  }\n  int numD = 0;\n  int d = 0;\n  for (int i = 0; i < lst.length; i++)\n  {\n    number = lst[i][0];\n    double s = lst[i][1] \/ lst[i][0];\n    number = (lcm \/ s).roundToDouble().toInt();\n    answ += '($number,$lcm)';\n    \n    lst[i][0] = number;\n    lst[i][1] = lcm;\n    \n  }\n  \n  \n  return answ;\n}\n\nint lcmFunc(a,b){\n    int m = a*b;\n    while (a != 0 && b != 0){\n        if (a > b){\n            a %= b;\n          }\n        else{\n            b %= a;\n        }\n      }\n    return m ~\/ (a+b);\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73790,"user_id":null,"body":"String convert_frac(List<List<int>> lst) {\n  final simplified = lst.map(simplify);\n  final denoms = simplified.map((e) => e.last);\n  final lcmult = denoms.fold<int>(denoms.first, (acc, e) => lcm(acc, e));\n  return lst\n      .map((e) => [e.first * lcmult ~\/ e.last, lcmult].map((e) => e))\n      .join()\n      .replaceAll(' ', '');\n}\n\nList<int> simplify(List<int> frac) {\n  final gcdiv = gcd(frac.first, frac.last);\n  return frac.map((e) => e ~\/ gcdiv).toList();\n}\n\nint lcm(int a, int b) => (a * b) ~\/ gcd(a, b);\n\nint gcd(int a, int b) {\n  while (b > 0) {\n    final t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73791,"user_id":null,"body":"int lcmd(int a, int b) => (a * b) ~\/ gcd(a, b);\n\nint gcd(int a, int b) {\n  while (b != 0) {\n    var t = b;\n    b = a % t;\n    a = t;\n  }\n  return a;\n}\n\nString convert_frac(List<List<int>>lst) {\n  for(int i = 0; i < lst.length ; i++){\n    lst[i] = [lst[i].first ~\/ gcd(lst[i].first, lst[i].last),lst[i].last ~\/ gcd(lst[i].first, lst[i].last)];\n  }\n  int lcm = lst.first.last;\n  List<int> den = lst.map((e) => e.last).toList();\n  for(int i = 0; i < den.length ; i++){\n    lcm = lcmd(lcm,den[i]);\n  }\n  List<int> num = lst.map((e) => e.first).toList();\n  for(int i = 0; i < lst.length ; i++){\n    lst[i] = [lst[i].first * (lcm ~\/lst[i].last),lcm];\n  }\n  String res = '';\n  for(int i = 0; i < lst.length ; i++){\n   res += '(';\n   res += lst[i].join(',');\n   res += ')';\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73792,"user_id":null,"body":"\/\/ Some fractions need to be simplified\nString convert_frac(lst) {\n  String strAnswer = \"\";\n  int lcm = 1;\n  List newLst = [];\n  print(lcm.runtimeType);\n\n  lst.forEach((fraction) {\n    int d = 1;\n    int n = 1;\n    int smallerNumber = fraction[1] < fraction[0] ? fraction[1] : fraction[0];\n    for(int i = smallerNumber; i > 0 ; i--){\n      if ( fraction[0] % i == 0 && fraction[1] % i == 0 ){\n        d = fraction[0] ~\/ i;\n        n = fraction[1] ~\/ i;\n        break;\n      }\n    }\n    newLst.add([d, n]);\n  });\n\n\n  newLst.forEach((fraction) {\n    for(int i = 1; true ; i++) {\n      if((i * lcm) % fraction[1] == 0){\n        lcm = i * lcm;\n        break;\n      }\n    }\n  });\n\n  newLst.forEach((fraction) {\n    strAnswer = strAnswer + \"(${lcm ~\/ fraction[1] * fraction[0]},$lcm)\";\n  });\n\n  return strAnswer;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54db15b003e88a6a480000b9":[{"id":73793,"user_id":53,"body":"String fromNb2Str(int n, List<int> bases) {\n  const String NA = \"Not applicable\";\n  int prd = bases.reduce((acc, e) => acc * e);\n  if (prd <= n) return NA;\n  int lcm = bases.reduce((acc, e) => (acc * e) ~\/ gcd(acc, e));\n  if (lcm != prd) return NA;\n  return bases.map((e) => \"-${n % e}-\").join(\"\");\n}\nint gcd(int a, int b) {\n  return b == 0 ? a : gcd(b, a % b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73794,"user_id":null,"body":"String fromNb2Str(int n, List<int> bases) {\n  if (greatestCommonDivisorOfMany(bases) != 1 ||\n      bases.reduce((value, element) => value * element) <= n) {\n    return \"Not applicable\";\n  }\n  List ans = bases.map((e) => ('-' + (n % e).toString() + '-')).toList();\n  return ans.join('');\n}\n\nint greatestCommonDivisorOfMany(List<int> integers) {\n  if (null == integers) {\n    throw ArgumentError.notNull('integers');\n  }\n\n  if (integers.length == 0) {\n    return 0;\n  }\n\n  var gcd = integers[0].abs();\n\n  for (var i = 1; (i < integers.length) && (gcd > 1); i++) {\n    gcd = gcd.gcd(integers[i]);\n    if (gcd != 1) {\n      return 0;\n    }\n  }\n\n  return gcd;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73795,"user_id":492,"body":"String fromNb2Str(int n, List<int> bases) {\n  int gcd(int a, b) {return (b != 0) ? gcd(b, a % b) : a;}\n  int lcm(int a,b) {return a * b ~\/ gcd(a,b);} \n  int lcmall(List<int> arr) {return arr.fold(arr[0], lcm);}  \n  \n  \/\/ lcm of bases\n  int q = lcmall(bases);\n  \/\/ product\n  int p = bases.fold(1, (p, c) => p * c);\n  if (p != q || p <= n) return \"Not applicable\";\n  return bases.fold(\"\", (p, c) => p + '-' + (n % c).toString() + '-');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73796,"user_id":null,"body":"String fromNb2Str(int n, List<int> bases) {\n  for (int i = 0; i < bases.length+1; i++)\n    for (int j = i+1; j < bases.length-1; j++)\n      if (bases[i].gcd(bases[j++]) > 1) return \"Not applicable\";\n  if (bases.fold(1, (int mol, el) => mol*el) < n) return \"Not applicable\";\n  return bases.fold(\"-\", (String str, el) => str + (n%el).toString() + \"--\").replaceAll(RegExp(r'.$'), \"\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73797,"user_id":168,"body":"String fromNb2Str(int n, List<int> bases) {\n  if (bases.fold(1, (a, b) => a * b) <= n ||\n      Iterable.generate(bases.length).any((i) => bases.skip(i + 1).any((y) => bases[i].gcd(y) != 1))) {\n     return \"Not applicable\";\n  }\n  return bases.map((b) => '-${n % b}-').join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73798,"user_id":null,"body":"String fromNb2Str(int n, List<int> bases) {\n  for (int i in bases) \n    for (int j in bases) \n      if (i != j && GCD(i, j) != 1) \n        return \"Not applicable\";\n  int mult = 1;\n  for (int i in bases) mult *= i;\n  if (mult < n) return \"Not applicable\";\n  String result = \"\";\n  for (int i in bases) result += \"-${n % i}-\";\n  return result;\n}\n\nint GCD(int a, int b) { \n  if (a == 0) return b;\n  return GCD(b % a, a);\n} ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73799,"user_id":null,"body":"String fromNb2Str(int p, List<int> bases) {\n  String text = '';\n  int multipleOfBases = 1;\n  for (int digit in bases) {\n    int i = bases.indexOf(digit);\n    while (i < bases.length - 1) {\n      i += 1;\n      int p = bases[i - 1];\n      int q = bases[i];\n      int placeholder;\n      while (q != 0) {\n        placeholder = p;\n        p = q;\n        q = placeholder.modPow(1, q);\n      }\n      if (p != 1) {\n        return \"Not applicable\";\n      }\n    }\n    multipleOfBases *= digit;\n  }\n  if (multipleOfBases < p) {\n    return \"Not applicable\";\n  }\n  for (int digit in bases) {\n    text = '$text-${p.modPow(1, digit)}-';\n  }\n  return text;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73800,"user_id":null,"body":"String fromNb2Str(int n, List<int> bases) {\n  int y = 1;\n  String sys = \"\";\n for(int b in bases){\n   y = y * b;\n   for(int x in bases){\n     if (b != x && b.gcd(x) > 1) return \"Not applicable\";\n   } \n }\n  if(y < n) return \"Not applicable\";\n  for(int b in bases){\n    int a = n%b;\n    sys += '-$a-'; \n  }\n  return sys;\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73801,"user_id":250,"body":"String fromNb2Str(int n, List<int> bases) {\n  for (int i = 0; i < bases.length-1; i++) {\n    int prod = bases[0];\n    \n    for (int j = i+1; j < bases.length; j++) {\n      prod *= bases[j];\n      \n      if (gcd(bases[i], bases[j]) != 1) {\n        return \"Not applicable\";\n      }\n    }\n    \n    if (i == 0 && prod <= n) {\n      return \"Not applicable\";\n    }\n  }\n  \n  return bases\n    .map((x) => \"-${n % x}-\")\n    .join(\"\");\n}\n\nint gcd(int a, int b) {\n  while (b != 0) {\n    int t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73802,"user_id":null,"body":"String fromNb2Str(int n, List<int> bases) {\n  List lst = [];\n  for (var i = 0; i < bases.length - 1; i ++) {\n    for (var j in bases.sublist(i + 1, bases.length)) {\n      if (bcs(bases[i], j) != 1) {\n        return \"Not applicable\";\n      }\n    }\n  }\n  for (var i in bases) {\n    lst.add(n % i);\n  }\n  int multiplication = 1;\n  bases.forEach((element) => multiplication *= element as int);\n  if (multiplication < n) {\n    return \"Not applicable\";\n  }\n  String txt = \"-\";\n  txt += lst.join('--');\n  return txt + '-';\n}\n\nint bcs(int a, int b) {\n  while (a != 0 && b != 0) {\n    if (a > b) {\n      a %= b;\n    } else {\n      b %= a;\n    }\n  }\n  return a + b;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54dc6f5a224c26032800005c":[{"id":73803,"user_id":null,"body":"String stock_list(List<String> lstOfArt,List<String> lstOf1stLetter) {\n  if (lstOfArt.length == 0 || lstOf1stLetter == 0) return '';\n  Map<String, int> categories = Map.fromEntries(lstOf1stLetter.map((key) => MapEntry(key, 0)).toList().cast<MapEntry<String, int>>());\n  \n  for (var code in lstOfArt) {\n    if (categories[code[0]] == null) continue;\n    categories[code[0]] += int.tryParse(code.split(' ').last) ?? 0;\n  }\n  \n  return categories.entries.map((e) => ('(${e.key} : ${e.value})')).join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73804,"user_id":null,"body":"String stock_list(List<String> lstOfArt, List<String> lstOf1stLetter) {\n  if(lstOfArt.length * lstOf1stLetter.length == 0) return '';\n  \n  final list = lstOf1stLetter.map((letter) {\n    final tmpLstOfArt = List.of(lstOfArt);\n    tmpLstOfArt.retainWhere((art) => art.startsWith(letter));\n    \n    if (tmpLstOfArt.isNotEmpty) {\n      final sum = tmpLstOfArt\n          .map((art) => int.parse(art.replaceAll(RegExp(r'^\\w+ '), '')))\n          .reduce((v, e) => v + e);     \n      return '($letter : $sum)';\n    } else {\n      return '($letter : 0)';\n    }\n  });\n  return list.join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73805,"user_id":null,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) {\n  if (lstOfArt.isEmpty || lstOf1stLetter.isEmpty) {\n    return \"\";\n  }\n  List<String> result = [];\n  for(String letter in lstOf1stLetter) {\n    int q = 0;\n    lstOfArt.where((x) => x[0] == letter).map((x) => q += int.parse(x.split(' ')[1])).toList();\n    result.add('($letter : $q)');\n  }\n  return result.join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73806,"user_id":492,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) {\n    if (lstOfArt.length == 0)\n        return \"\";\n    String result = \"\";\n    lstOf1stLetter.forEach((String m) {\n        int tot = 0;\n        lstOfArt.forEach((String l) {\n            if (l[0] == m[0]) {\n                tot += int.parse(l.split(' ')[1]);\n            }\n        });\n        if (result != \"\") {\n            result += \" - \";\n        }\n        result += \"(\" + m + \" : \" + tot.toString() + \")\";\n    });\n    return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73807,"user_id":null,"body":"String stock_list(List<String> lstOfArt, List<String> lstOf1stLetter) {\n  if (lstOfArt.length <= 0 || lstOf1stLetter.length <= 0) return \"\";\n  List<String> output = [];\n  for (String category in lstOf1stLetter){\n     int total = lstOfArt.where((code) => code.startsWith(category))\n          .map((e) => int.parse(e.split(' ').last))\n          .fold(0, (previousValue, element) => previousValue + element);\n     output.add('($category : $total)');\n  }\n  return output.join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73808,"user_id":null,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) {\n  if (lstOfArt.isEmpty) return '';\n  List<String> result = [];\n  for (var item in lstOf1stLetter) {\n    int counter = 0;\n    List<String> list = lstOfArt.where((e) => e[0] == item).toList();\n    list.forEach((e) {\n      counter += int.parse(e.split(' ')[1]);\n    });\n    result.add('($item : $counter)');\n  }\n  return result.join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73809,"user_id":null,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) \n  => (lstOfArt.length <= 0 || lstOf1stLetter.length <= 0)? \"\" : stock_listAux(lstOfArt, lstOf1stLetter);\n\nString stock_listAux(lstOfArt, lstOf1stLetter){\n  var stLetter;\n  String res;\n  List<String> result = new List<String>();\n  int value;\n  for(String letter in lstOf1stLetter)\n  {\n    value = 0;\n    stLetter = lstOfArt.where((let) => let[0] == letter);\n    for(var val in stLetter)\n    {\n      val = val.split(\" \");\n      value = value + int.parse(val[1]);\n    }\n    res = \"(\" + letter + \" : \" + value.toString() + \")\";\n    result.add(res);\n  }\n  return result.join(\" - \");\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73810,"user_id":null,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) {\n  String returnValue=\"\";\n  if(lstOfArt.isNotEmpty && lstOf1stLetter.isNotEmpty)\n    for(int i = 0; i < lstOf1stLetter.length; i++){\n      int count = 0;\n      String letter = lstOf1stLetter[i];\n      for(int ii = 0; ii < lstOfArt.length; ii++){\n        lstOfArt[ii][0] == lstOf1stLetter[i] ? count = count + int.parse(lstOfArt[ii].split(\" \")[1]):0;\n      }\n      returnValue = returnValue + \"($letter : $count)\";\n      i < lstOf1stLetter.length-1 ? returnValue = returnValue + \" - \":\"\";\n    }\n  \n  return returnValue;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73811,"user_id":null,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) {\n  List<int> ints = lstOfArt.map((e)=>int.parse(e.split(' ').last)).toList();\n  List<int> qtys = List<int>.generate(lstOf1stLetter.length, (i)=>0);\n  for (int j = 0; j<lstOf1stLetter.length; j++){\n    for (int i = 0; i<lstOfArt.length; i++){\n      if(lstOfArt[i].startsWith(lstOf1stLetter[j])){\n         qtys[j]+=ints[i]; \n      }\n    }\n  }\n  List<String> listResult = [];\n  Map.fromIterables(lstOf1stLetter, qtys).forEach((k,v)=> listResult.add('(${k} : ${v.toString()})'));\n  return lstOfArt.isEmpty ? '' : listResult.join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73812,"user_id":null,"body":"String stock_list(List<String> lstOfArt, lstOf1stLetter) {\n  if ((lstOfArt.length == 0) || (lstOf1stLetter == 0)) return '';\n  List<String> out = [];\n  lstOf1stLetter.forEach((m) {\n    int sum = 0;\n    List<String> matches = lstOfArt.where((s) => s.startsWith(m)).toList();\n    matches.forEach((s) => {sum += int.parse(s.split(' ')[1])});\n    out.add('('+m+' : '+sum.toString()+')');\n  });\n  return out.join(' - ');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54e320dcebe1e583250008fd":[{"id":73813,"user_id":168,"body":"String dec_2_fact_string(int nb) {\n  int k = 1;\n  final r = <int>[];\n  for (int k = 1; nb > 0; nb ~\/= k, k++) {\n    r.add(nb % k);\n  }\n  return r.reversed.map((d) => d.toRadixString(36)).join().toUpperCase();\n}\n\nint fact_string_2_dec(String str) {\n  int k = str.length;\n  return str.split('').fold(0, (r, d) => r * k-- + int.parse(d, radix: 36));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73814,"user_id":492,"body":"String dec_2_fact_string(int nb) {\n    String alpha = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    int i = 1;\n    StringBuffer s = new StringBuffer();\n    while(nb > i) {\n      s.write(alpha[nb % i]);\n      nb = nb ~\/ i;\n      i++;\n    }\n    s.write(alpha[nb]);\n    return s.toString().split('').reversed.join();\n}\nint fact_string_2_dec(String str) {\n    String alpha = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    List<String> a = str.split('').reversed.toList();\n    int s = 0;\n    int f = 1;\n    for(int i=1; i < a.length; i++) {\n      s += f * alpha.indexOf(a[i]);\n      f *= i + 1;\n    }\n    return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73815,"user_id":null,"body":"const _digits = '0123456789ABCDEFGHIJK';\nconst _facts = [\n  1,\n  1,\n  2,\n  6,\n  24,\n  120,\n  720,\n  5040,\n  40320,\n  362880,\n  3628800,\n  39916800,\n  479001600,\n  6227020800,\n  87178291200,\n  1307674368000,\n  20922789888000,\n  355687428096000,\n  6402373705728000,\n  121645100408832000,\n  2432902008176640000,\n];\n\nconst _digitMap = {\n  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n  '7': 7,\n  '8': 8,\n  '9': 9,\n  'A': 10,\n  'B': 11,\n  'C': 12,\n  'D': 13,\n  'E': 14,\n  'F': 15,\n  'G': 16,\n  'H': 17,\n  'I': 18,\n  'J': 19,\n  'K': 20,\n};\n\n\nString dec_2_fact_string(int nb) {\n  final rems = ['0'];\n  var n = nb;\n  var i = 2;\n  while (n != 0) {\n    rems.add(_digits[n % i]);\n    n = n ~\/ i;\n    i++;\n  }\n  return rems.reversed.join();\n}\n\nint fact_string_2_dec(String str) {\n  var sum = 0;\n  final lastIndex = str.length - 1;\n  for (var i = 0; i < lastIndex; i++) {\n    final n = _digitMap[str[i]];\n    final fact = _facts[lastIndex - i];\n    sum += n * fact;\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73816,"user_id":null,"body":"String dec_2_fact_string(int nb) {\n  int maxFact = 0;\n  while (factorial(maxFact + 1) < nb) {\n    maxFact++;\n  }\n  int nbBuffer = nb;\n\n  List list = List.generate(maxFact + 1, (index) => maxFact - index);\n  list = list.map((i) {\n    final currentFact = nbBuffer ~\/ factorial(i);\n    nbBuffer -= factorial(i) * currentFact;\n    return decToThirtySix(currentFact);\n  }).toList();\n\n  return list.join();\n}\n\nint fact_string_2_dec(String str) {\n  final list = str.split('');\n  return list\n      .asMap()\n      .map((i, e) {\n        print(thirtySixToDec(e) * factorial(list.length - i - 1));\n        return MapEntry(i, thirtySixToDec(e) * factorial(list.length - i - 1));\n      })\n      .values\n      .reduce((v, e) => v + e);\n}\n\nString decToThirtySix(int dec) {\n  final azList = '0123456789ABCDEFHHIJKLMNOPQRSTUVWXYZ'.split('');\n  return azList[dec];\n}\n\nint thirtySixToDec(String thirtySix) {\n  final azList = '0123456789ABCDEFHHIJKLMNOPQRSTUVWXYZ'.split('');\n  return azList.indexOf(thirtySix);\n}\n\nint factorial(int n) => n == 0 ? 1 : n * factorial(n - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73817,"user_id":null,"body":"String dec_2_fact_string(int nb) {\n  int topFactorial = 1;\n  while(factorial(topFactorial) < nb) {\n    topFactorial++;\n  }\n  \n  String result = '';\n  while(topFactorial > 2) {\n    topFactorial --;\n    int temp = factorial(topFactorial);\n    int coefficient = nb ~\/ temp;\n    nb = nb - coefficient * temp;\n    result = \"${result}${coefficientFact(coefficient)}\";\n  }\n  if (nb == 1) {\n    result = result + '10';\n  } else {\n    result = result + '00';\n  }\n  return result;\n}\nint fact_string_2_dec(String str) {\n  int n = str.length - 1;\n  int result = 0;\n  int i = 0;\n  while(i <= n) {\n    result = result + (coefficientDec(str[i]) * factorial(n - i));\n    i++;\n  }\n  return result;\n}\n\nint coefficientDec(String digit) {\n  int result = int.parse(digit, radix: 36);\n  return result;\n}\n\nString coefficientFact(int digit) {\n  if (digit < 10) {\n    return digit.toRadixString(10);\n  } else {\n    return digit.toRadixString(36).toUpperCase();\n  }\n}\n\nint factorial(int n) {\n  int result = 1;\n  while (n > 1) {\n    result = result * n;\n    n--;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73818,"user_id":null,"body":"String dec_2_fact_string(int nb) {\n  var ans = \"\";\n  var maxRadixBase = 1;\n  while (nb ~\/ fact(maxRadixBase) > 0) {\n    maxRadixBase++;\n  }\n  if (maxRadixBase > 36) return \"\";\n\n  for (var i = maxRadixBase - 1; i >= 1; i--) {\n    var factnum = fact(i);\n    var coef = nb ~\/ factnum;\n    nb %= factnum;\n    if (coef > 9) {\n      ans += String.fromCharCode(coef - 10 + \"A\".codeUnitAt(0));\n    } else {\n      ans += coef.toString();\n    }\n  }\n  return \"${ans}0\";\n}\n\nint fact_string_2_dec(String str) {\n  var ans = 0;\n  var inp = str.split(\"\").reversed.join(\"\");\n  for (var i = 0; i < inp.length; i++) {\n    if (int.tryParse(inp[i]) != null) {\n      ans += int.parse(inp[i]) * fact(i);\n    }\n    else {\n      ans += (inp[i].codeUnitAt(0) - \"A\".codeUnitAt(0) + 10) * fact(i);\n    }\n  }\n  return ans;\n}\n\nint fact(int num) {\n  var ans = 1;\n  while (num > 1) {\n    ans *= num;\n    num--;\n  }\n  return ans;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73819,"user_id":null,"body":"String dec_2_fact_string(int nb) {\n  var bases = <int>[];\n  int current = 0;\n  int factorialN = 0;\n  \n  while (current < nb)\n  {\n    current = factorialN == 0 ? 1 : factorialN * current;        \n    factorialN++;   \n    if (current <= nb)\n      bases.add(current); \n  }\n\n  var digits = <int>[];\n  int reminder = nb;\n  \n  for (int i = bases.length - 1; i >= 0; i--)\n  {\n    int multiplier = reminder ~\/ bases[i];\n    reminder %= bases[i];\n    digits.add(multiplier);\n  }\n\n  return digits.map((x) => x.toRadixString(36).toUpperCase()).join();\n}\n\nint fact_string_2_dec(String str) {\n  int current = 0;\n  int number = 0;\n  \n  for (int i = 0; i < str.length; i++)\n  {\n    current = i == 0 ? 1 : i * current;\n    number += current * int.parse(str[str.length - 1 - i], radix: 36);\n  }\n  \n  return number;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73820,"user_id":null,"body":"String dec_2_fact_string(int nb) {\n  final nums = <int>[];\n  int n = nb;\n  int i = 1;\n  while (n > 0) {\n    nums.add(n % i);\n    n ~\/= i;\n    i++;\n  }\n\n  final buffer = StringBuffer();\n  for (var number in nums.reversed) {\n    if (number > 9) {\n      buffer.write(String.fromCharCode(65 + (number - 10)));\n    } else {\n      buffer.write(\"$number\");\n    }\n  }\n\n  return buffer.toString();\n}\n\nint fact_string_2_dec(String str) {\n  final codeUnits = str.codeUnits.reversed.toList();\n  int sum = 0;\n  for (var i = 0; i < codeUnits.length; i++) {\n    final _fac = fac(i);\n    late final int _num;\n\n    if (codeUnits[i] < 65) {\n      _num = (codeUnits[i] - 48);\n    } else {\n      _num = (codeUnits[i] - 65) + 10;\n    }\n    sum += (_fac * _num);\n  } \/\/albha\n\n  return sum;\n}\n\nfinal memo = <int, int>{};\n\nint fac(int n) {\n  if (n == 0) return 1;\n  if (memo.containsKey(n)) {\n    return memo[n]!;\n  }\n\n  final result = n * fac(n - 1);\n  memo.putIfAbsent(n, () => result);\n\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73821,"user_id":null,"body":"List<int> getFacts(int nb, {bool byIter = false}) {\n  List<int> facts = [1, 1, 2];\n  int cur = 3;\n  bool condition() {\n    if (byIter) {\n      return cur < nb;\n    }\n    return facts.last * cur <= nb;\n  }\n  while (condition()) {\n    facts.add(cur * facts.last);\n    cur++;\n  }\n  return facts;\n}\n\nString dec_2_fact_string(int nb) {\n  var facts = getFacts(nb);\n  List<String> results = [];\n\n  for (int n in facts.reversed) {\n    int res = (nb \/ n).floor();\n    nb -= res * n;\n    results.add(res.toRadixString(36));\n  }\n\n  return results.join('').toUpperCase();\n}\n\nint fact_string_2_dec(String str) {\n  var facts = getFacts(str.length, byIter: true);\n  print(facts);\n  return str.split('').map((e) => int.parse(e, radix: 36)).fold(0,\n      (previousValue, element) => previousValue + element * facts.removeLast());\n  \/\/ your code\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73822,"user_id":null,"body":"String dec_2_fact_string(int nb) {\n  String factorialString = '';\n  for(int i = 1; nb > 0; i++)\n  {\n    factorialString = String.fromCharCode(nb % i > 9 ? 55 + (nb % i) : 48 + (nb % i)) + factorialString;\n    nb = nb ~\/ i;\n  }\n  return factorialString;\n}\n\nint fact_string_2_dec(String str) {\n  int decimalNumber = 0;\n  int factorialPositionalValue = 1;\n  int factorialPosition = 0;\n  for(int i = str.length; i > 0; i--)\n  {\n    decimalNumber += (str.codeUnitAt(i-1) > 57 ? str.codeUnitAt(i-1) - 55 : str.codeUnitAt(i-1) - 48) * factorialPositionalValue;\n    \/\/ Skipping the first digit because its always 0, in base 0!.\n    factorialPosition++;\n    factorialPositionalValue *= factorialPosition;\n  }\n  return decimalNumber;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54f8693ea58bce689100065f":[{"id":73823,"user_id":53,"body":"String decompose(String nrStr, drStr) \n{\n    var ans = new List<String>();\n    var a = int.parse(nrStr);\n    var b = int.parse(drStr);\n    while (a >= b) \n    {\n        ans.add((a ~\/ b).toString());\n        a %= b;\n    }\n    while (a > 0)\n    {\n        var d = (b \/ a).ceil().toInt();\n        ans.add(\"1\/${d}\");\n        a = a * d - b;\n        b *= d;\n    }\n    return \"[${ans.join(', ')}]\";\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73824,"user_id":null,"body":"\nString decompose(String nrStr, drStr) {\n  var nr = int.parse(nrStr);\n  var dr = int.parse(drStr);\n  var parts = <String>[];\n  var curDr = 2;\n  if(nr >= dr){\n    var natural = nr ~\/ dr;\n    parts.add('$natural');\n    nr -= natural * dr;\n  }\n  while(nr != 0){\n    if(nr \/ dr < 1 \/ curDr){\n      curDr++;\n      continue;\n    }\n    \/\/ var lcm = getLcm(dr, curDr);\n    var cm = getLcm(dr , curDr);\n    var tempNr = nr * (cm ~\/ dr);\n    var tempCurNr = cm ~\/ curDr;\n    if(tempNr >= tempCurNr){\n      parts.add('1\/${curDr.toInt()}');\n      nr = tempNr - tempCurNr;\n      dr = cm;\n    }\n    if(nr != 0){\n      curDr = dr ~\/ nr;\n    }\n  }\n  var result = parts.toString();\n  print(result);\n  return result;\n}\n\nint getLcm(int a, int b) {\n  return a * b ~\/ getGcd(a, b);\n}\nint getGcd(int a, int b) {\n  while(b > 0){\n    var temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73825,"user_id":492,"body":"String decompose(String nrStr, drStr) {\n    var nr = int.parse(nrStr);\n    var dr = int.parse(drStr);\n    List<String> res = [];\n    if (nr >= dr) {\n      var i = nr ~\/ dr;\n      res.add(i.toString());\n      nr = nr - i * dr;\n    }\n    while (nr != 0) {\n      var i = (dr.toDouble() \/ nr).ceil();\n      res.add(\"1\/\" + i.toString());\n      nr = nr * i - dr;\n      dr = dr * i;\n    }\n    return \"[\" + res.join(\", \") + \"]\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73826,"user_id":null,"body":"String decompose(String nrStr, drStr) {\n  int oben = int.parse(nrStr);\n  int unten = int.parse(drStr);\n  if(oben == 0){\n    return '[]';\n  }\n  if(oben % unten == 0){\n    return \"[${oben ~\/ unten}]\";\n  }\n  List<String> nenner = [];\n  \n  if(oben~\/unten >= 1){\n    nenner.add(((oben~\/unten)).toString());\n    oben -= (oben~\/unten)*unten;\n  }\n  nenner.add(\"1\/\"+ (calcFirstBottom(oben,unten)).toString());\n  \n  int secondTop = calcSecondTop(oben, unten);\n  int secondBottom = calcSecondBottom(oben, unten);\n  \n  while(secondTop >= 1){\n    int currentNominator = secondTop;\n    nenner.add(\"1\/\" + (calcFirstBottom(secondTop, secondBottom)).toString());\n    secondTop = calcSecondTop(currentNominator, secondBottom);\n    if(secondTop == 0){\n      break;\n    }\n    print(secondTop);\n    secondBottom = calcSecondBottom(currentNominator, secondBottom);\n\n    print(secondBottom);    \n  }\n  return createList(nenner);\n}\n\nString createList(List<String> nenner){\n  var result = '[';\n  \n  for (var i = 0; i < nenner.length-1;i++){\n    result += nenner.elementAt(i);\n    result += \", \";\n  }\n  \n  result += nenner.last;\n  result +=']';\n  \n  return result;\n}\n\nint calcFirstBottom(int x, int y){\n  return ((y\/x).ceil()).toInt();\n}\n\nint calcSecondTop(int x, int y){\n  return (-y % x);\n}\n\nint calcSecondBottom(int x, int y){\n  return y * calcFirstBottom(x,y);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73827,"user_id":null,"body":"\/\/ https:\/\/www.codewars.com\/kata\/54f8693ea58bce689100065f\/train\/dart\nimport 'dart:math';\n\nString decompose(String top, bottom) {\n  int topInt = int.parse(top);\n  int bottomInt = int.parse(bottom);\n  if (topInt == bottomInt) return '[1]';\n  List<String> result = [];\n\n  if (topInt > bottomInt) {\n    int n = topInt ~\/ bottomInt;\n    topInt -= n * bottomInt;\n    result.add('$n');\n  }\n  double fractionReversed = bottomInt \/ topInt;\n  int i = 2;\n  while (topInt > 0) {\n    if (fractionReversed > i) {\n      i++;\n      continue;\n    }\n    int lcm = getLeaseCommonMultiple(bottomInt, i);\n    topInt = (lcm ~\/ bottomInt) * topInt;\n    bottomInt = lcm;\n    int iTop = 1 * (lcm ~\/ i);\n    topInt -= iTop;\n    result.add('1\/$i');\n    print('remained:$topInt\/$bottomInt');\n    if (topInt == 0) break;\n    fractionReversed = bottomInt \/ topInt;\n    i = fractionReversed.toInt();\n    print('i:$i');\n    if (fractionReversed == i) {\n      result.add('1\/$i');\n      break;\n    }\n  }\n\n  return '[' + (result.join(', ')) + ']';\n}\n\nint getLeaseCommonMultiple(int a, int b) {\n  final decomposedA = primeDecomposition(a);\n  final decomposedB = primeDecomposition(b);\n  final keysSet = decomposedA.keys.toSet();\n  Map<int, int> maxDecomposed = {};\n  keysSet.addAll(decomposedB.keys.toSet());\n  keysSet.forEach((key) {\n    int aCount = decomposedA[key] ?? 0;\n    int bCount = decomposedB[key] ?? 0;\n    int m = max(aCount, bCount);\n    maxDecomposed[key] = m;\n  });\n  int lcm = maxDecomposed.entries\n      .fold<int>(1, (prev, cur) => prev * (pow(cur.key, cur.value).toInt()));\n  return lcm;\n}\n\nint getGreatestCommonDivisor(List<int> list) {\n  final max = list.fold<int>(0, (previousValue, element) {\n    int s = element;\n    return previousValue < s ? s : previousValue;\n  });\n  List<int> cd = [];\n  for (int i = 2; i <= max; i++) {\n    if (!checkIsPrime(i)) continue;\n    while (list.every((element) => element % i == 0)) {\n      cd.add(i);\n      list = list.map((e) => (e \/ i).floor()).toList();\n    }\n  }\n  return cd.fold(1, (previousValue, element) => previousValue * element);\n}\n\nMap<int, int> primeDecomposition(int n) {\n  if (checkIsPrime(n)) {\n    return {n: 1};\n  }\n  \/\/ get decompositions\n  int nTmp = n;\n  int s = sqrt(n).toInt();\n  Map<int, int> res = {};\n  for (int i = 2; i <= s; i++) {\n    if (!checkIsPrime(i)) continue;\n    int prime = i;\n    if (prime > nTmp) break;\n    while (nTmp % prime == 0) {\n      nTmp ~\/= prime;\n      if (res[prime] != null)\n        res[prime] = (res[prime] ?? 0) + 1;\n      else\n        res[prime] = 1;\n    }\n    if (nTmp > 1 && checkIsPrime(nTmp)) {\n      res[nTmp] = 1;\n      break;\n    }\n  }\n  return res;\n}\n\nMap<int, bool> primes = {2: true, 3: true, 4: false};\nbool checkIsPrime(int n) {\n  if (primes.containsKey(n)) return primes[n] ?? false;\n  int s = sqrt(n).floor();\n  for (int i = 2; i <= s; i++) {\n    if (n % i == 0) {\n      primes[n] = false;\n      return false;\n    }\n  }\n  primes[n] = true;\n  return true;\n}\n\n\/\/others\nint getLcm(int a, int b) {\n  return a * b ~\/ getGcd(a, b);\n}\n\nint getGcd(int a, int b) {\n  while (b > 0) {\n    var temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73828,"user_id":null,"body":"\/\/ https:\/\/www.codewars.com\/kata\/54f8693ea58bce689100065f\/train\/dart\nimport 'dart:math';\n\nString decompose(String top, bottom) {\n  int topInt = int.parse(top);\n  int bottomInt = int.parse(bottom);\n  if (topInt == bottomInt) return '[1]';\n  List<String> result = [];\n\n  if (topInt > bottomInt) {\n    int n = topInt ~\/ bottomInt;\n    topInt -= n * bottomInt;\n    result.add('$n');\n  }\n  double fractionReversed = bottomInt \/ topInt;\n  int i = 2;\n  while (topInt > 0) {\n    if (fractionReversed > i) {\n      i++;\n      continue;\n    }\n    int lcm = getLeaseCommonMultiple(bottomInt, i);\n    topInt = (lcm ~\/ bottomInt) * topInt;\n    bottomInt = lcm;\n    int iTop = 1 * (lcm ~\/ i);\n    topInt -= iTop;\n    result.add('1\/$i');\n    print('remained:$topInt\/$bottomInt');\n    if (topInt == 0) break;\n    fractionReversed = bottomInt \/ topInt;\n    i = fractionReversed.toInt();\n    print('i:$i');\n    if (fractionReversed == i) {\n      result.add('1\/$i');\n      break;\n    }\n  }\n\n  return '[' + (result.join(', ')) + ']';\n}\n\nint getLeaseCommonMultiple(int a, int b) {\n  final decomposedA = primeDecomposition(a);\n  final decomposedB = primeDecomposition(b);\n  final keysSet = decomposedA.keys.toSet();\n  Map<int, int> maxDecomposed = {};\n  keysSet.addAll(decomposedB.keys.toSet());\n  keysSet.forEach((key) {\n    int aCount = decomposedA[key] ?? 0;\n    int bCount = decomposedB[key] ?? 0;\n    int m = max(aCount, bCount);\n    maxDecomposed[key] = m;\n  });\n  int lcm = maxDecomposed.entries\n      .fold<int>(1, (prev, cur) => prev * (pow(cur.key, cur.value).toInt()));\n  \/\/ int gcd = getGreatestCommonDivisor(list);\n  \/\/ return gcd *\n  \/\/     list.fold<int>(\n  \/\/         1, (previousValue, element) => previousValue * element ~\/ gcd);\n  return lcm;\n}\n\nint getGreatestCommonDivisor(List<int> list) {\n  \/\/ for this kata only\n  int a = list[0];\n  int b = list[1];\n  if (a % b == 0) return b;\n\n  final max = list.fold<int>(0, (previousValue, element) {\n    int s = element;\n    return previousValue < s ? s : previousValue;\n  });\n  List<int> cd = [];\n  for (int i = 2; i <= max; i++) {\n    if (!checkIsPrime(i)) continue;\n    while (list.every((element) => element % i == 0)) {\n      cd.add(i);\n      list = list.map((e) => (e \/ i).floor()).toList();\n    }\n  }\n  return cd.fold(1, (previousValue, element) => previousValue * element);\n}\n\nMap<int, int> primeDecomposition(int n) {\n  if (checkIsPrime(n)) {\n    return {n: 1};\n  }\n  \/\/ get decompositions\n  int nTmp = n;\n  int s = sqrt(n).toInt();\n  Map<int, int> res = {};\n  for (int i = 2; i <= s; i++) {\n    if (!checkIsPrime(i)) continue;\n    int prime = i;\n    if (prime > nTmp) break;\n    while (nTmp % prime == 0) {\n      nTmp ~\/= prime;\n      if (res[prime] != null)\n        res[prime] = (res[prime] ?? 0) + 1;\n      else\n        res[prime] = 1;\n    }\n    if (nTmp > 1 && checkIsPrime(nTmp)) {\n      res[nTmp] = 1;\n      break;\n    }\n  }\n  return res;\n}\n\nMap<int, bool> primes = {2: true, 3: true, 4: false};\nbool checkIsPrime(int n) {\n  if (primes.containsKey(n)) return primes[n] ?? false;\n  int s = sqrt(n).floor();\n  for (int i = 2; i <= s; i++) {\n    if (n % i == 0) {\n      primes[n] = false;\n      return false;\n    }\n  }\n  primes[n] = true;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73829,"user_id":null,"body":"String decompose(String nrStr, drStr) {\n  List<int> denominators = _denominators(int.parse(nrStr), int.parse(drStr), []);\n  int nLeadingOnes = denominators.takeWhile((i) => i == 1).length;\n  int leadingInt = 1 * nLeadingOnes;  \n  return ([if (leadingInt != 0) leadingInt.toString()] + denominators.sublist(nLeadingOnes).map((i) => '1\/$i').toList()).toString();\n}\n\nList<int> _denominators(int nominator, denominator, List<int> denominators){\n  if (nominator == 0){\n    return denominators;\n  }\n  int newDenominator = (denominator \/ nominator).ceil();\n  return _denominators((nominator * newDenominator - denominator).toInt(), newDenominator * denominator, denominators + [newDenominator]);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73830,"user_id":null,"body":"class Fraction {\n  Fraction(this.nominator, this.denominator);\n\n  final int nominator;\n  final int denominator;\n\n  Fraction reduce() {\n    final remainder = denominator % nominator;\n    if (remainder != 0) {\n      if (nominator % remainder == 0 && denominator % remainder == 0) {\n        return copyWith(\n          nominator ~\/ remainder,\n          denominator ~\/ remainder,\n        );\n      }\n    } else {\n      return copyWith(1, denominator ~\/ nominator);\n    }\n    return this;\n  }\n\n  Fraction copyWith(\n    int? nominator,\n    int? denominator,\n  ) =>\n      Fraction(\n        nominator ?? this.nominator,\n        denominator ?? this.denominator,\n      );\n\n  List<Fraction> process() {\n    final firstFraction = Fraction(\n      1,\n      (denominator \/ nominator).ceil(),\n    );\n    final secondFraction = Fraction(\n      -denominator % nominator,\n      denominator * (denominator \/ nominator).ceil(),\n    );\n    return [firstFraction, secondFraction.reduce()];\n  }\n\n  @override\n  String toString() {\n    if (nominator == denominator) return \"1\";\n    return '$nominator\/$denominator';\n  }\n}\n\nString decompose(String nrStr, drStr) {\n  final nominator = int.parse(nrStr);\n  final denominator = int.parse(drStr);\n  final fraction = Fraction(nominator, denominator);\n  if (nominator <= 0) return '[]';\n  if (nominator % denominator == 0) return '[${nominator ~\/ denominator}]';\n  if (denominator % nominator == 0) return '[${fraction.reduce()}]';\n  final list = fraction.process();\n  while (list.last.nominator > 1) {\n    list.addAll(list.removeLast().process());\n  }\n  final stringified = list\n      .map(\n        (e) => '$e',\n      )\n      .toList();\n  final ones = stringified.where((element) => element == '1');\n  if (ones.length > 1) {\n    final result = stringified.sublist(\n      ones.length,\n    );\n    result.insert(0, '${ones.length}');\n    return '$result';\n  }\n  return '$stringified';\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73831,"user_id":null,"body":"void decomposeRecursion(\n    List<String> unitDenominator, int numerator, int denominator) {\n  if (numerator == denominator) {\n    unitDenominator.add('1');\n    return;\n  }\n\n  if (denominator == 0 || numerator == 0) return;\n\n  if (denominator % numerator == 0) {\n    unitDenominator.add('1\/${(denominator ~\/ numerator)}');\n    return;\n  }\n\n  if (numerator % denominator == 0) {\n    unitDenominator.add((numerator ~\/ denominator).toString());\n    return;\n  }\n\n  if (numerator > denominator) {\n    unitDenominator.add((numerator ~\/ denominator).toString());\n    decomposeRecursion(unitDenominator, numerator % denominator, denominator);\n    return;\n  }\n\n  var number = denominator ~\/ numerator + 1;\n\n  unitDenominator.add('1\/$number');\n  decomposeRecursion(\n      unitDenominator, numerator * number - denominator, denominator * number);\n}\n\nString decompose(String nrStr, drStr) {\n  List<String> unitDenominator = [];\n\n  decomposeRecursion(unitDenominator, int.parse(nrStr), int.parse(drStr));\n\n  return unitDenominator.toString();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73832,"user_id":null,"body":"decompose(String nrStr, String drStr) {\n  int n = int.parse(nrStr);\n  int d = int.parse(drStr);\n  var res = [];\n  if (n == 0 || d == 0) res.toString();\n  while (n != 0 && d != 0) {\n    if (n >= d) {\n      res.add((n ~\/ d).toString());\n      n -= (n ~\/ d) * d;\n    } else {\n      int tmp = (d % n == 0) ? d ~\/ n : d ~\/ n + 1;\n      res.add(\"1\/$tmp\");\n      n = n * tmp - d;\n      d = d * tmp;\n    }\n  }\n\n  return res.toString();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"54ff3102c1bad923760001f3":[{"id":73833,"user_id":1455,"body":"import \"dart:core\";\n\nint get_count(String str) => new RegExp('[aeiou]').allMatches(str).length;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73834,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr){\n  return inputStr.split('').fold(0, (a, b) => a += 'aeiou'.contains(b) ? 1 : 0 );\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73835,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr){\n  var count = 0;\n  var vowels = <String>[\"a\",\"e\",\"i\",\"o\",\"u\"];\n  for(int i=0;i < inputStr.length;i++){\n    if(vowels.contains(inputStr[i]))\n      count++;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73836,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr) {\n  var vowels = Set.of(['a','e','i','o','u']); \/\/ Until Set literal support is present, then switch to a const. \n  return inputStr.split('').where((String letter) => vowels.contains(letter)).length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73837,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr)\n{\n  inputStr.toLowerCase();\n  int c = 0;\n  for(int i = 0; i < inputStr.length; i++)\n  {\n    switch(inputStr.codeUnitAt(i))\n    {\n      case 97:\n      case 101:\n      case 105:\n      case 111:\n      case 117:\n        c++;\n        break;\n    }\n  }\n  return c;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73838,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr){\n  String regexString = r'[aeiuo]';\n  RegExp regExp = new RegExp(regexString);\n  var matches = regExp.allMatches(inputStr);\n\n  return matches.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73839,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr){\n  inputStr.toLowerCase();\n  var vowels = 'aeiou';\n  var get_count = 0;\n  \n    for(var i = 0; i < inputStr.length; i++) {\n    if (vowels.indexOf(inputStr[i]) != -1) {\n      get_count++;\n    }\n  }\n  return get_count;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73840,"user_id":null,"body":"import \"dart:core\";\n\nint isVovel(inchar){\n  switch (inchar) {\n    case 'a':\n    case 'e':\n    case 'i':\n    case 'o':\n    case 'u':\n      return 1;     \n      break;\n    default:\n      return 0;\n  }\n}\nint get_count(String inputStr){\n  \/\/your code here\n  int noofvovels = 0;\n  for(int i =0;i<inputStr.length;i++){\n     noofvovels += isVovel(inputStr[i]);\n  }\n\n  return noofvovels;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73841,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String i) => i.replaceAll(RegExp(r'[^a|i|o|u|e]'),'').length;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73842,"user_id":null,"body":"import \"dart:core\";\n\nint get_count(String inputStr){\n  \n  List b = inputStr.split(\"\");\n  \n  int count = 0;\n  \n  b.forEach((element){\n    \n    if(element.contains(\"a\") ||\n      element.contains(\"e\") ||\n      element.contains(\"i\") ||\n      element.contains(\"o\") ||\n      element.contains(\"u\") )\n    {\n      count++;\n    }\n  }); \n  \n  return count;\n  \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"550498447451fbbd7600041c":[{"id":73843,"user_id":null,"body":"bool comp_same(List<int> a1, List<int> a2) {\n  if (a1 == null || a2 == null) return false;\n  a1.map((e) => e * e).forEach((element) => a2.remove(element));\n  return a2.isEmpty;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73844,"user_id":null,"body":"bool comp_same(List<int> a1, a2) {\n  if (a1 is! List || a2 is! List) {\n    return false;\n  }\n  \n  var _a1 = new List<int>.from(a1);\n  var _a2 = new List<int>.from(a2);\n  \n  for (int i = 0; i < _a1.length; i++) {\n    int square = _a1[i] * _a1[i];\n    \n    int foreignIndex = _a2.indexOf(square);\n    if (foreignIndex != -1) {\n      _a2.removeAt(foreignIndex);\n    }\n  }\n  \n  return _a2.length == 0;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73845,"user_id":null,"body":"bool comp_same(List<int> a1, List<int> a2) {\n  return (a1 != null && a2 != null) &&\n      a1.length == a2.length &&\n      a1.every((n) => a2.remove(n * n));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73846,"user_id":null,"body":"import 'package:collection\/collection.dart';\n\nbool comp_same(List<int> a1, a2) {\n    if (a1 == null || a2 == null) {\n      return false;\n    }\n    return const ListEquality().equals(a1.map((e) => e * e).toList()..sort(), a2..sort());\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73847,"user_id":null,"body":"bool comp_same(List<int> a1, List<int> a2) {\n  if (a1 == null || a2 == null) {\n    return false;\n  }\n  if (a1.length == 0 && a2.length == 0) {\n    return true;\n  }\n  if (a1.length != a2.length) {\n    return false;\n  }\n  a1 = a1.map((e) => e * e).toList();\n  int cnt = 0;\n  for (var i in a1) {\n    if (a2.contains(i)) {\n      cnt++;\n      a2.remove(i.abs());\n    }\n  }\n  return cnt == a1.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73848,"user_id":null,"body":"bool comp_same(List<int> a1, List<int> a2) {\n  if (a1 == null || a2 == null) {\n    return false;\n  }\n  if (a1.isEmpty && a2.isEmpty) {\n    return true;\n  }\n  if (a1.isEmpty || a2.isEmpty) {\n    return false;\n  }\n  final uniqueNumbers1 = a1.toSet().toList();\n  final uniqueNumbers2 = a2.toSet().toList();\n\n  if (!(a1.length == a2.length)) {\n    return false;\n  }\n  var _li = <bool>[];\n  for (var i in uniqueNumbers1) {\n    var condition1 = uniqueNumbers2.any(\n      (i2) {\n        if ((i * i) == i2) {\n          var condition2 = a2.where((e) => e == i2).toList().length ==\n              a1.where((e) => e == i || e == -i).toList().length;\n          if (!condition2) {\n            return false;\n          }\n          return true;\n        } else {\n          return false;\n        }\n      },\n    );\n    _li.add(condition1);\n  }\n  if (_li.every((e) => e == true)) {\n    return true;\n  } else {\n    return false;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73849,"user_id":null,"body":"bool comp_same(List<int> a1, a2) {\n  \n  if (a1 == null || a2 == null || a1.length != a2.length) {\n    return false;\n  }\n  \n  for (final baseNumber in a1) {\n    a2.remove(baseNumber*baseNumber);\n  }\n  \n  return a2.length == 0;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73850,"user_id":null,"body":"bool comp_same(List<int> a1, List<int> a2) {\n  try {\n    return a1.length == a2.length && a1.every((n) => a2.remove(n * n));\n  } on NoSuchMethodError catch (_) {\n    return false;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73851,"user_id":null,"body":"import 'package:collection\/collection.dart';\n\nbool comp_same(List<int> a1, a2) {\n  if ([a1, a2].any((a) => a == null)) { return false; }\n  return ListEquality().equals(\n    a1.map((a) => a*a).toList()..sort(),\n    a2..sort());\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73852,"user_id":null,"body":"import \"dart:math\";\nbool comp_same(List<int> a1, List<int> a2) {\n  List<int> a1squared = a1.map((a) => pow(a,2).toInt()).toList();\n  if(a1squared.length != a2.length) return false;\n  for(int i = 0;i<a1squared.length;i++){\n    if(a2.contains(a1squared[i])){\n      a2.remove(a1squared[i]);\n    } else return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"550527b108b86f700000073f":[{"id":73853,"user_id":null,"body":"import 'dart:math' show pi,pow;\nList <dynamic> iter_pi(double e) {\n  double cPi = 0;\n  int i = 0;\n\n  for(i; (cPi - pi).abs() > e; i++){\n    cPi += 4*((pow(-1,i))\/(2*i + 1));\n}\n  return [i,cPi.toStringAsFixed(10)]; \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73854,"user_id":null,"body":"import \"dart:math\";\n\nList<dynamic> iter_pi(double epsilon) {\n  double rawLeibnic = 0;\n  double trueLeibnic() => 4 * rawLeibnic;  \n  int n = 0;\n  do {\n    rawLeibnic += pow(-1, n) \/ (2 * n + 1);\n    n++;\n  } while ((pi - trueLeibnic()).abs() > epsilon);  \n  return [n, trueLeibnic().toStringAsFixed(10)];  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73855,"user_id":null,"body":"import 'dart:math';  \n  List<dynamic> iter_pi(double epsilon) {\n    num myPi = 0;\n    num n = 0;\n    while ((pi - myPi * 4.0).abs() > epsilon) {\n      n++;\n      myPi += pow(-1,n-1) \/ (2*n -1);\n    }\n    return [n, (myPi * 4).toString()];\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73856,"user_id":53,"body":"import 'dart:math' as math;\n\nList<dynamic> iter_pi(double epsilon) \n{\n    var pi4 = 1.0;\n    var sign = -1.0;\n    var iterations = 1;\n    var denom = 3.0;\n    while ((4 * pi4 - math.pi).abs() >= epsilon) {\n        pi4 += sign * (1.0 \/ denom);\n        sign *= -1;\n        denom += 2;\n        iterations++;\n    }\n    return [iterations, (4 * pi4).toStringAsFixed(10)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73857,"user_id":null,"body":"import 'dart:math' as math;\n\nList<dynamic> iter_pi(double epsilon) {\n    var result = 0.0;\n    var count = 0;\n    for (final element in leibniz()) {\n      count++;\n      result += element;\n      if ((math.pi - 4 * result).abs() < epsilon) {\n        break;\n      }\n    }\n\n    return [count, (4 *result).toStringAsFixed(10)];\n}\n\n  Iterable<double> leibniz() sync* {\n    var current = 1.0;\n    var sign = -1;\n    var n = 3;\n\n    while (true) {\n      yield current;\n      current = 1 \/ n * sign;\n      sign *= -1;\n      n += 2;\n    }\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73858,"user_id":168,"body":"import 'dart:math';\n\nList<dynamic> iter_pi(double epsilon) {\n  int i = 0, k = 1;\n  double r = 0;\n  for (int k = 1; (pi - r).abs() >= epsilon; k += 2, i++) {\n    r += 4.0 \/ k * (i.isEven ? 1 : -1);\n  }\n  return [i, r.toStringAsFixed(10)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73859,"user_id":null,"body":"import 'dart:math' as math;\n\n\nList<dynamic> iter_pi(double epsilon) {\n  var d = 1;\n  var sign = 1;\n  double result = 0;\n  var n = 0;\n  while ((math.pi - result).abs() > epsilon){\n    result += sign * (1 \/ d) * 4;\n    sign *= -1;\n    d += 2;\n    n += 1;\n  }\n  return [n, result.toStringAsFixed(10)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73860,"user_id":null,"body":"import 'dart:math';\n\nList<dynamic> iter_pi(double epsilon) {\n  int iterations = 0;\n  int nextNum = 1;\n  double subStepResult = 0.0;\n  double myPi = 0.0;\n  \n  while ((myPi - pi).abs() > epsilon) {\n    iterations += 1;\n    subStepResult = subStepResult + (1 \/ nextNum);\n    myPi = 4 * (subStepResult);\n    nextNum = (nextNum.abs() + 2) * (nextNum.isNegative ? 1 : -1);\n  }\n  \n  return [iterations, myPi.toStringAsPrecision(11)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73861,"user_id":50,"body":"List<dynamic> iter_pi(double epsilon) {\n  var i = 1, n = 1.0, pi = 3.14159265358979323846;\n  while ((pi - 4.0 * n).abs() > epsilon) {\n    if (i % 2 == 1) {\n       n -= 1.0\/(2*i+1);\n    }\n    else {\n      n += 1.0\/(2*i+1);\n    }\n    i+=1;\n  }\n  return [i, (n * 4).toStringAsFixed(010)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73862,"user_id":null,"body":"import 'dart:math' show pi;\n\nList<dynamic> iter_pi(double epsilon) {\n  const double targetPi = pi\/4;\n  double targetEpsilon = epsilon\/4;\n  int counter = 1;\n  double myPi = 1;\n  int fraction = 1;\n  int operator = 1;\n  while (true) {\n    counter++;\n    fraction += 2;\n    operator *= -1;\n    myPi += operator*(1\/fraction);\n    \n    if ((myPi - targetPi).abs() <= targetEpsilon) return [counter, (myPi*4).toString()];\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5506b230a11c0aeab3000c1f":[{"id":73863,"user_id":886,"body":"int evaporator(double content, double evap_per_day, double threshold){\n  int days = 0; double percent = 100;\n  \n  while (percent > threshold) {\n    percent = percent - percent*(evap_per_day\/100);\n    days++;\n  }\n  \n  return days;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73864,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  return (log(threshold \/ 100) \/ log(1 - evap_per_day \/ 100)).ceil();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73865,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  var result = 0;\n  var valThres = (content*threshold)\/100;\n  do{\n    content -= (content*evap_per_day)\/100;\n    result ++;\n  }while(valThres<=content);\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73866,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  \/\/Your code here\n  var days = 0;\n  var percentage = 100.0;\n  while (percentage>threshold) {\n    percentage -= percentage*evap_per_day\/100;\n    days++;\n\n  }\n  return days;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73867,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  double left = content;\n  int days = 0;\n  \n  while((left \/ content) * 100 > threshold) {\n    left -= left * (evap_per_day \/ 100);\n    days++;\n  }\n  \n  return days;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73868,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  \/\/Your code here\n  double total = 100;\n  double count = 0;\n  \n  while(true){\n  \n    total -= total * evap_per_day \/100;\n    count++;\n    if(total < threshold)break;\n  \n  }\n  \n  return count.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73869,"user_id":null,"body":"int evaporator(double content, double evap_per_day, double threshold) {\n  return [\n    for (var level = content;\n        level > content * threshold \/ 100;\n        level -= level * evap_per_day \/ 100)\n      level\n  ].length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73870,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n    var n = 0;\n    for (var i=content; i>=content*threshold\/100; i -= i*evap_per_day\/100){\n      n +=1;\n    }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73871,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  final evaporation = evap_per_day \/ 100.0;\n  var count = 0;\n  var remaining = 100.0;\n  while (remaining >= threshold) {\n    remaining -= remaining * evaporation; \n    count++;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73872,"user_id":null,"body":"import \"dart:core\";\nimport \"dart:math\";\n\nint evaporator(double content, double evap_per_day, double threshold){\n  double rest  = content;\n  int days = 0;\n  while (rest >content\/100*threshold){\n    rest = rest*(1 - evap_per_day\/100);\n    days++;\n  }\n  return days;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5513795bd3fafb56c200049e":[{"id":73873,"user_id":645,"body":"List<int> count_by(int c, int x) => List.generate(x, (i) => (i + 1) * c);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73874,"user_id":null,"body":"List<int> count_by(int x, int n) {\n    List<int> answer = [];\n    int total = x * n;\n\n    for (int i = x; i <= total; i += x)\n        answer.add(i);\n\n    return answer;\n  }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73875,"user_id":null,"body":"List<int> count_by(int x, int n) {\n  return [for(var i = 1; i<=n; i++) x*i];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73876,"user_id":null,"body":"List<int> count_by(int x, int n) {\n  return List.generate(n,(i) => (i + 1) * x);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73877,"user_id":null,"body":"List<int> count_by(int x, int n) => List.generate(n,(a)=> (a+1) * x); ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73878,"user_id":null,"body":" List<int>count_by(int c, int x)\n  {\n   if(c <= 0 || x <=0) return null;\n List<int> count_byX = [];\n   for(var i = 1; i<=x;i++) {\n   count_byX.add(i * c);\n   }\n return count_byX;\n } ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73879,"user_id":527,"body":"List<int> count_by(int x, int n) {\n  return List<int>.generate(n, (i) => (i + 1) * x);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73880,"user_id":null,"body":"List<int> count_by(int x, int n) => ([for (var i=1; i<=n; i++) i*x]);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73881,"user_id":null,"body":"List<int> count_by(int x, int n) => List.generate(n, (index) => x * index + x);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73882,"user_id":250,"body":"List<int> count_by(int x, int n) {\n  return List<int>.generate(n, (m) => (m+1)*x);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55192f4ecd82ff826900089e":[{"id":73883,"user_id":null,"body":"bool divide(int w) {\n  return (w > 2 && w.isEven);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73884,"user_id":null,"body":"bool divide(int w) => w > 2 && w.isEven;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73885,"user_id":null,"body":"bool divide(int w) {\n\/\/ All even number can be expresses as sum of two even number except 2.\n  if(w%2!=0 || w==2)\n    return false;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73886,"user_id":null,"body":"bool divide(int w) {\n  if (w == 2){\n    return false;\n  }\n  return w.isEven;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73887,"user_id":null,"body":"bool divide(int w) => w == 2 ? false : (w % 2) == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73888,"user_id":null,"body":"bool divide(int w) {\n  return w == 2 ? false: w.isEven ?  true :  false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73889,"user_id":null,"body":"bool divide(int w) {\n  if (w < 4) {\n    return false;\n  } else {\n    return (w - 2).isEven;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73890,"user_id":null,"body":"bool divide(int w) {\nfinal a = w % 2;\n    if (w == 2) {\n      return false;\n    } else if (a == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73891,"user_id":null,"body":"bool divide(int w) {\nfinal a = w % 2;\n    if (w == 2) {\n      return false;\n    } else if (a == 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73892,"user_id":null,"body":"bool divide(int w) => w != 2 ? w.isEven : false;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"551b4501ac0447318f0009cd":[{"id":73893,"user_id":645,"body":"String boolean_to_string(bool b) => b.toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73894,"user_id":null,"body":"String boolean_to_string(bool b) {\n  return b.toString();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73895,"user_id":null,"body":"String boolean_to_string(bool b) => \"$b\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73896,"user_id":null,"body":"String boolean_to_string(bool b) => b == true ? \"true\" : \"false\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73897,"user_id":null,"body":"boolean_to_string(b)=>b.toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73898,"user_id":null,"body":"String boolean_to_string(bool b) {\n  return \"${b}\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73899,"user_id":null,"body":"String boolean_to_string(bool b) {\n  return [b].join(\"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73900,"user_id":478,"body":"String boolean_to_string(bool b) {\n  return b == true ? \"true\" : \"false\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73901,"user_id":null,"body":"String boolean_to_string(bool b) => \"$b\".contains(\"true\") ? \"true\" : \"false\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73902,"user_id":null,"body":"String boolean_to_string(bool b) {\n  String res = '$b';\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5526fc09a1bbd946250002dc":[{"id":73903,"user_id":null,"body":"int find_outlier(List integers) {\n  List<int> even = new List();\n  List<int> odds = new List();\n  integers.forEach((number) => (number.isEven) ? even.add(number) : odds.add(number) );\n  return (even.length == 1) ? even[0] : odds[0];\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73904,"user_id":429,"body":"int find_outlier(List<int> integers) =>\n  integers.firstWhere(\n    integers.getRange(0, 3).where((i) => i % 2 == 0).length > 1\n      ? (i) => i % 2 == 1\n      : (i) => i % 2 == 0\n  );","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73905,"user_id":null,"body":"int find_outlier(List integers) {\n  bool isEvenList = (integers.where((i) => i.isEven).length == 1);\n  \n  return integers.firstWhere((i) => isEvenList ? i.isEven : i.isOdd);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73906,"user_id":null,"body":"int find_outlier(List integers) {\n  var isOdd = 0;\n  var isEven = 0;\n  \n  for(final value in integers)\n  {\n    if(value%2 == 0) isEven++;\n    \n    if(value%2 == 1) isOdd++;\n    \n    if(isOdd > 1) break;\n    \n    if(isEven > 1) break;\n  }\n  \n  for(final value in integers)\n  {\n    if(isOdd > 1 && value % 2 == 0) return value;    \n    \n    if(isEven > 1 && value % 2 == 1) return value;    \n  }\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73907,"user_id":null,"body":"\/\/\/ Finds the parity outlier in given [List<int>]\nint find_outlier(List integers) {\n  \/\/ Create lists to store differentiated data\n  List<int> evens = [];\n  List<int> odds = [];\n  \/\/ Loop through given list\n  for (int item in integers) {\n    \/\/ Use shorthand Dart if-else syntax to cut down size\n    (item % 2 == 0) ? evens.add(item) : odds.add(item);\n  }\n  \/\/ Returns the first element in the shortest list\n  return (evens.length > odds.length) ? odds.first : evens.first;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73908,"user_id":null,"body":"int find_outlier(List<int> integers) {\n  final oddNumbers = integers.where((element) => element.isOdd);\n  if (oddNumbers.length == 1) return oddNumbers.first;\n  return integers.firstWhere((element) => element.isEven);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73909,"user_id":null,"body":"\nint find_outlier(List integers) {\n  \n  var evenNumbers = 0;\n  \n  for (var i in integers) { \n    if (i % 2 == 0) { \n      evenNumbers += 1;\n    }\n  } \n\n  return evenNumbers == 1 ? integers.where((i) => (i % 2 == 0)).first : integers.where((i) => (i % 2 != 0)).first;  \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73910,"user_id":null,"body":"int find_outlier(List a) {\n  var ok = a[0] % 2 == 0;\n  if (a[1] % 2 == a[2] % 2)  ok = a[1] % 2 == 0;\n  for (var d in a)\n    if ((d % 2 == 0) != ok) return d;\n  throw Exception('at least 1 should match');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73911,"user_id":null,"body":"int find_outlier(List integers) {\n   List<int> oddList = [];\n  List<int> evenList = [];\n  int result = 0;\n\n  for (int i = 0; i < integers.length; i++) {\n    if (integers[i].isEven == true) {\n      evenList.add(integers[i]);\n    } else if (integers[i].isEven == false) {\n      oddList.add(integers[i]);\n    }\n  }\n\n  if(oddList.length < evenList.length){\n    result = oddList[0];\n  } else {\n    result = evenList[0];\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73912,"user_id":null,"body":"int find_outlier(List integers) {\n  var res = 0;\n  var result;\n  \/\/ in the following line if 'res' variable \n  \/\/ equal or higher than 2 (>= 2) this is\n  \/\/ mean that the list is 'even' but if 'res'\n  \/\/ less than 2 (< 2) this mean that the list \n  \/\/ is 'odd'\n  integers.forEach((element) => element % 2 == 0 ? res += 1 : res += 0);\n  integers.forEach((element) {\n    if(res >= 2 && element % 2 != 0){\n      result = element;\n    }else if(res < 2 && element % 2 == 0){\n      result = element;\n    }\n  });\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5545f109004975ea66000086":[{"id":73913,"user_id":527,"body":"bool is_divisible(int n, int x, int y) {\n  return n % x == 0 && n % y == 0;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73914,"user_id":645,"body":"bool is_divisible(int n, int x, int y) => n % x == 0 && n % y == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73915,"user_id":null,"body":"bool is_divisible(int n, int x, int y)=> n%x==0 && n%y ==0?true:false;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73916,"user_id":76,"body":"bool is_divisible(int n, int x, int y) {\n  return n % x + n % y == 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73917,"user_id":null,"body":"bool is_divisible(int n, int x, int y) => n%x + n%y == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73918,"user_id":null,"body":"bool is_divisible(int n, int x, int y) {\n  return n % x + n % y < 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73919,"user_id":null,"body":"bool is_divisible(int n, int x, int y)=>n.remainder(x) == 0 && n.remainder(y) == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73920,"user_id":null,"body":"var is_divisible = (n,x,y) => (n%x==0&&n%y==0) ? true : false;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73921,"user_id":null,"body":"\/\/ is n divisible by x and y?\nbool is_divisible(int n, int x, int y) {\n  if (n % x == 0 && n % y == 0) return true;\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73922,"user_id":null,"body":"bool is_divisible(int n, int x, int y) {\n  \/\/ your code here\n  if (n%x==0 && n%y==0) {\n    return true;\n  }\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"554f76dca89983cc400000bb":[{"id":73923,"user_id":168,"body":"List<List<int>> sol_equa(n) {\n  var r = <List<int>>[];\n  for (int k = 1; k * k <= n; k++) {\n    if (n % k == 0) {\n      int q = n ~\/ k;\n      if ((q + k).isEven && (q - k) % 4 == 0) {\n        r.add([q + k >> 1, q - k >> 2]);\n      }\n    }\n  }\n  return r;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73924,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(n) {\n  List<List<int>> result = [];\n  \n  for (int i = 1;i < sqrt(n) + 1;i++) {\n    if (n % i != 0) continue;\n    \n    int j = n ~\/ i;\n    int y = (j - i) ~\/ 4;\n    int x = i + 2 * y;\n    \n    if (x >= 0 && y >= 0 && (j == x + 2 * y) && (i == x - 2 * y)) result.add([x, y]);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73925,"user_id":null,"body":"import 'dart:math';\nList<List<int>> sol_equa(n) {\n    List<List<int>> res = [];\n    for (int a = 1; a < (sqrt(n+1)+1);a++){\n      if (n % a == 0){\n        var b = n \/ a;\n        if ((a + b) % 2 == 0 && (b - a) % 4 == 0){\n            res.add( [((a+b)\/2).floor(), ((b-a)\/4).floor()] );              \n        }\n      }    \n    }                \n    return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73926,"user_id":53,"body":"import \"dart:math\";\nList<List<int>> sol_equa(n)\n{\n    var ans = new List<List<int>>();\n    var m = sqrt(n).toInt();\n    for (int i = 1; i <= m; i++)\n    {\n        var d = n \/ i;\n        var x = (d + i) \/ 2;\n        var y = (d - i) \/ 4;\n        if (((d % 1) == 0) && ((x % 1) == 0) & ((y % 1) == 0))\n        {\n            var pair = new List<int>();\n            pair.add(x.toInt());\n            pair.add(y.toInt());\n            ans.add(pair);\n        }\n    }\n    return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73927,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(n) {\n  final List<List<int>> result = [];\n  double b, x, y;\n  print(sqrt(n).toInt());\n  for (int a = 1; a <= sqrt(n).toInt(); a++) {\n    if (isInteger(b = n \/ a)) {\n      if (isInteger(x = (a + b) \/ 2)) {\n        if (isInteger(y = (b - a) \/ 4)) {\n          final list = [x.toInt(), y.toInt()];\n          result.addAll([List<int>.from(list)]);\n        }\n      }\n    }\n  }\n  return result;\n}\n\nbool isInteger(num value) => value is int || value == value.roundToDouble();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73928,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(int n) {\n    List<List<int>> res = []; \n    for (int i=1; i<=sqrt(n).toInt()+1; i++){\n      if (n % i == 0){\n        int j = (n \/ i).floor();\n        if ((((i+j)%2==0)) & (((j-i)%4==0))){\n          res.add([((i+j)\/2).floor(),((j-i)\/4).floor()]);\n        }\n      }\n      \n    }\n    return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73929,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(n) {\n  final factors = <List<int>>[\n    for (int i = 1; i <= sqrt(n).floor(); i++)\n      if (n % i == 0) [i, n ~\/ i]\n  ]\n      .where((e) => (e.first + e.last) % 2 == 0 && (e.last - e.first) % 4 == 0)\n      .map((e) {\n    return [(e.first + e.last) ~\/ 2, (e.first - e.last).abs() ~\/ 4];\n  });\n  return factors.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73930,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(n) {\n  List<List<int>> resList = [];\n\n  for (int a = 1; a <= sqrt(n); a++) {\n    int b = n ~\/ a;\n    if (a * b == n) {\n      if ((b - a) % 4 == 0) {\n        int y = (b - a) ~\/ 4;\n        int x = a + 2 * y;\n        if (x >= 0 && y >= 0) resList.add([x, y]);\n      }\n    }\n  }\n\n  resList.sort((List<int> a, List<int> b) => b[0].compareTo(a[0]));\n  return resList;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73931,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(n) {\n  final decomposition = primeDecomposition(n);\n  List<int> flatten = [];\n  decomposition.keys.forEach((key) {\n    int count = decomposition[key]!;\n    for (int i = 0; i < count; i++) {\n      flatten.add(key);\n    }\n  });\n  if (flatten.length == 1) {\n    flatten.insert(0, 1);\n  }\n  print('flatten:$flatten');\n  final pairs = getPairs(flatten);\n  print('pairs:$pairs');\n  List<List<int>> res = [];\n  pairs.forEach((pair) {\n    final x2 = pair.a + pair.b;\n    if (x2 % 2 != 0) return;\n    int x = x2 ~\/ 2;\n    int larger = max(pair.a, pair.b);\n    if ((larger - x) % 2 != 0) return;\n    int y = (larger - x) ~\/ 2;\n    res.add([x, y]);\n  });\n  res.sort((a, b) => b[0] - a[0]);\n\n  return res;\n}\n\nclass Pair<T1, T2> {\n  final T1 a;\n  final T2 b;\n\n  Pair(this.a, this.b);\n  @override\n  String toString() {\n    return '[$a,$b]';\n  }\n}\n\nList<Pair> getPairs(List<int> list) {\n  int maxPairs = 1 << list.length;\n  Map<int, int> itemsWithIndex = list.asMap();\n  List<Pair> pairs = [];\n  \/\/ 0000 to 1111\n  for (int i = 0; i < maxPairs - 1; i++) {\n    int a = 1;\n    int b = 1;\n    itemsWithIndex.forEach((index, value) {\n      if (i >> index & 1 == 1) {\n        a *= value;\n      } else {\n        b *= value;\n      }\n    });\n    \/\/ print('a:$a,b:$b');\n    if (pairs.where((pair) => pair.a == a || pair.a == b).isEmpty)\n      pairs.add(Pair(a, b));\n  }\n  return pairs;\n}\n\nMap<int, int> primeDecomposition(int n) {\n  if (checkIsPrime(n)) {\n    return {n: 1};\n  }\n  \/\/ get decompositions\n  int nTmp = n;\n  int s = sqrt(n).toInt();\n  Map<int, int> res = {};\n  for (int i = 2; i <= s; i++) {\n    if (!checkIsPrime(i)) continue;\n    int prime = i;\n    if (prime > nTmp) break;\n    while (nTmp % prime == 0) {\n      nTmp ~\/= prime;\n      if (res[prime] != null)\n        res[prime] = (res[prime] ?? 0) + 1;\n      else\n        res[prime] = 1;\n    }\n    if (nTmp > 1 && checkIsPrime(nTmp)) {\n      res[nTmp] = 1;\n      break;\n    }\n  }\n  return res;\n}\n\nMap<int, bool> primes = {2: true, 3: true, 4: false};\nbool checkIsPrime(int n) {\n  if (primes.containsKey(n)) return primes[n] ?? false;\n  int s = sqrt(n).floor();\n  for (int i = 2; i <= s; i++) {\n    if (n % i == 0) {\n      primes[n] = false;\n      return false;\n    }\n  }\n  primes[n] = true;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73932,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> sol_equa(n) {\n  List<List<int>> answer = [];\n  int x = 0;\n  int y = 0;\n  List<int> currentPair = [];\n  for (int i = 1; i < sqrt(n) + 1; i++) {\n    if ((n \/ i - i) ~\/ 4 == (n \/ i - i) \/ 4) {\n      y = (n \/ i - i) ~\/ 4;\n      x = i + 2 * y;\n      currentPair = [x, y];\n      answer.add(currentPair);\n    }\n  }\n  return answer;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5550d638a99ddb113e0000a2":[{"id":73933,"user_id":null,"body":"List josephus(final List items, final int k) {\n  final ans = [];\n  var i = 0;\n  while (items.isNotEmpty) {\n    i = (i + k - 1) % items.length;\n    ans.add(items.removeAt(i));\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73934,"user_id":null,"body":"List josephus(final List items, final int k) {\n  final result = [];\n  var i = 0;\n  while (items.isNotEmpty) {\n    result.add(items.removeAt(i = (i + k - 1) % items.length));\n  }\n  return result;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73935,"user_id":null,"body":"List josephus(final List items, final int k) {\n  List<dynamic> initial = List.from(items);\n  List<dynamic> sequenceOut = [];\n  int nextElim = (k-1);\n  while(!initial.isEmpty){\n    \n    while(nextElim >= initial.length) nextElim -= initial.length;\n    \n    sequenceOut.add(initial[nextElim]);\n    initial.removeAt(nextElim);\n    nextElim += k-1;\n  }\n  return sequenceOut;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73936,"user_id":null,"body":"List josephus(List items, int k) {\n  final result = <dynamic>[];\n  final step = k - 1;\n  int focus = step;\n\n  while (items.isNotEmpty) {\n    focus = focus % items.length;\n    final dead = items.removeAt(focus);\n    result.add(dead);\n    focus += step;\n  }\n\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73937,"user_id":null,"body":"List josephus(final List items, final int k) {\n\n  var lives = [...items]; \/\/\u0421\u0442\u0432\u043e\u0440\u0438\u0432 \u043d\u043e\u0432\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0436\u0438\u0432\u0438\u0445 \u043b\u044e\u0434\u0435\u0439, \u0449\u043e \u043d\u0435 \u0437\u043c\u0456\u043d\u044e\u0432\u0430\u0442\u0438 \u0432\u0445\u0456\u0434\u043d\u0438\u0439 \u043c\u0430\u0441\u0438\u0432\n  var dead = []; \/\/\u041c\u0430\u0441\u0441\u0438\u0432 \u043c\u0435\u0440\u0442\u0432\u0438\u0445\n  \n  var idx = 0;\/\/ \u0406\u043d\u0434\u0435\u043a\u0441 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0432\u043e\u0457\u043d\u0430 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435 \u0432\u0431\u0438\u0442\u0438\u0439\n  \n  for(var i = 1; i <= items.length; i++){\n      idx = ((idx + k) - 1) % lives.length; \/\/\u0412\u0438\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0456\u043d\u0434\u0435\u043a\u0441\u0430 \u0443\u0431\u0438\u0442\u043e\u0433\u043e\n      dead.add(lives.removeAt(idx)); \/\/\u0412\u0438\u0434\u0430\u043b\u044f\u0454\u043c \u043b\u044e\u0434\u0438\u043d\u0443 \u0437 \u0436\u0438\u0432\u0438\u0445 \u0456 \u0434\u043e\u0434\u0430\u0454\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u043c\u0435\u0440\u0442\u0432\u0438\u0445\n  }\n  \n  return dead;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73938,"user_id":null,"body":"List josephus(List items, final int k,[int i = 0]) {\n  if (items.isEmpty) return [] ;\n  if (k == 0) return items.reversed.toList();\n  while(i+k > items.length ){ i -= items.length; }\n  return [items.removeAt(i+k-1), ...josephus(items, k,i+k-1)] ;\n}\n ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73939,"user_id":null,"body":"List josephus(final List items, final int k) {\n  final result = [];\n  int i = 0;\n  while (items.length != 0) result.add(items.removeAt(i = (i + k - 1) % items.length));\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73940,"user_id":null,"body":"List josephus(final List items, final int k) {\n  List result = [];\n  int index = 0;\n  while(items.length >0) {\n    index = (index+k-1)%items.length;\n    result.add(items.removeAt(index));\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73941,"user_id":null,"body":"List josephus(final List items, final int k) {\n  List result = [];\n  int pointer = 0;\n  while (items.isNotEmpty) {\n    pointer += k - 1;\n    pointer = pointer % items.length;\n    result.add(items.removeAt(pointer));\n  }\n\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73942,"user_id":null,"body":"List josephus(final List items, final int k) {\n  int index = 0;\n  final List result = [];\n\n  while (items.isNotEmpty) {\n    index = (index + k - 1) % (items.isNotEmpty ? items.length : 1);\n    result.add(items.removeAt(index));\n  }\n\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"555624b601231dc7a400017a":[{"id":73943,"user_id":492,"body":"int josephus_survivor(int n, int k) {\n  if (k == 1) return n;\n  int a = 0;\n  for(int b = 2; b <= n; ++b) \n    a = (a + k) % b;\n  return a + 1;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73944,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n  var guys = List.generate(n, (i) => i + 1);\n  var idx = 0;\n  while (guys.length > 1) {\n    idx = (idx + k - 1) % guys.length;\n    guys.removeAt(idx);\n  }\n  \n  return guys.last;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73945,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n  if (n==1) return 1;\n  return ((josephus_survivor(n-1, k)+k-1)% n) + 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73946,"user_id":null,"body":"int josephus_survivor(final int numberOfItems, final int k) {\n  var items = List.generate(numberOfItems, (i) => i + 1);\n  \n  if (items.isEmpty) return -1;\n  if (items.length == 1) return items[0];\n  if (k == 0) return items.last;\n\n  LinkedListNode firstItem = initializeLinkedList(items);\n\n  var result = [];\n\n  var currentNode = firstItem;\n  var previousItem = firstItem.previous!;\n\n  while (currentNode.next != currentNode) {\n    for (var i = 0; i < k - 1; i++) {\n      previousItem = currentNode;\n      currentNode = currentNode.next!;\n    }\n\n    result.add(currentNode.value);\n\n    previousItem.next = currentNode.next;\n    currentNode = currentNode.next!;\n  }\n\n  result.add(currentNode.value);\n\n  return result.last;\n}\n\nLinkedListNode initializeLinkedList(List<dynamic> items) {\n  if (items.isEmpty) {\n    throw ArgumentError(\"Items should not be empty\", \"items\");\n  }\n\n  var previousNode = LinkedListNode(items[0]);\n  var firstItem = previousNode;\n  late LinkedListNode finalItem;\n\n  for (var i = 1; i < items.length; i++) {\n    var currentNode = LinkedListNode(items[i]);\n\n    previousNode.next = currentNode;\n    currentNode.previous = previousNode;\n\n    previousNode = currentNode;\n    finalItem = currentNode;\n  }\n\n  firstItem.previous = finalItem;\n  finalItem.next = firstItem;\n\n  return firstItem;\n}\n\nclass LinkedListNode {\n  LinkedListNode? next;\n  LinkedListNode? previous;\n\n  late dynamic value;\n\n  LinkedListNode(this.value);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73947,"user_id":null,"body":"\nint josephus_survivor(int n, int k) {\n  List<int> peeps = new List<int>.generate(n, (i) => i+1);\n  k -= 1;\n  int j = k;\n  while(peeps.length > 1){\n    if(j >= peeps.length) {\n      j -= peeps.length;\n    }else{\n      peeps.removeAt(j);\n      j += k;\n    }\n  }\n  return peeps[0];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73948,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n  \n  var lives = []; \/\/\u041c\u0430\u0441\u0441\u0438\u0432 \u0432 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0443\u0432\u0430\u0442\u0438 \u0436\u0438\u0432\u0438\u0445 \u043b\u044e\u0434\u0435\u0439\n  int survive = 0; \/\/\u0412\u0438\u0436\u0438\u0432\u0448\u0438\u0439\n  int idx = 0;\/\/ \u0406\u043d\u0434\u0435\u043a\u0441 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0432\u043e\u0457\u043d\u0430 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435 \u0432\u0431\u0438\u0442\u0438\u0439\n   \n  for(var i = 1; i <= n; i++){\n    lives.add(i); \/\/\u0417\u0430\u043f\u0438\u0441\u0443\u0454\u043c \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043b\u044e\u0434\u0435\u0439 n \u0432 \u043c\u0430\u0441\u0441\u0438\u0432, 1,2,3...n\n  }\n  \n  \n  for(var i = 1; i <= n; i++){\n    if(lives.length == 1) survive = lives[0]; \/\/\u041a\u043e\u043b\u0438 \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u044c\u0441\u044f \u043e\u0434\u0438\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0456 lives \u0446\u0435 \u0456 \u0431\u0443\u0434\u0435 \u0432\u0438\u0436\u0438\u0432\u0448\u0438\u0439\n      idx = ((idx + k) - 1) % lives.length; \/\/\u0412\u0438\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0456\u043d\u0434\u0435\u043a\u0441\u0430 \u0443\u0431\u0438\u0442\u043e\u0433\u043e\n      lives.removeAt(idx); \/\/\u0412\u0438\u0434\u0430\u043b\u044f\u0454\u043c \u043b\u044e\u0434\u0438\u043d\u0443 \u0437 \u0436\u0438\u0432\u0438\u0445\n  }\n  \n  return survive;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73949,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n  \n  var lives = []; \/\/\u041c\u0430\u0441\u0441\u0438\u0432 \u0432 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0443\u0432\u0430\u0442\u0438 \u0436\u0438\u0432\u0438\u0445 \u043b\u044e\u0434\u0435\u0439\n   \n  for(var i = 1; i <= n; i++){\n    lives.add(i); \/\/\u0417\u0430\u043f\u0438\u0441\u0443\u0454\u043c \u043a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043b\u044e\u0434\u0435\u0439 n \u0432 \u043c\u0430\u0441\u0441\u0438\u0432, 1,2,3...n\n  }\n   \n  int survive = 0; \/\/\u0412\u0438\u0436\u0438\u0432\u0448\u0438\u0439\n  \n  var idx = 0;\/\/ \u0406\u043d\u0434\u0435\u043a\u0441 \u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0433\u043e \u0432\u043e\u0457\u043d\u0430 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0435 \u0432\u0431\u0438\u0442\u0438\u0439\n  \n  for(var i = 1; i <= n; i++){\n    if(lives.length == 1) survive = lives[0]; \/\/\u041a\u043e\u043b\u0438 \u0437\u0430\u043b\u0438\u0448\u0438\u0442\u044c\u0441\u044f \u043e\u0434\u0438\u043d \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0456 lives \u0446\u0435 \u0456 \u0431\u0443\u0434\u0435 \u0432\u0438\u0436\u0438\u0432\u0448\u0438\u0439\n      idx = ((idx + k) - 1) % lives.length; \/\/\u0412\u0438\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044f \u0456\u043d\u0434\u0435\u043a\u0441\u0430 \u0443\u0431\u0438\u0442\u043e\u0433\u043e\n      lives.removeAt(idx); \/\/\u0412\u0438\u0434\u0430\u043b\u044f\u0454\u043c \u043b\u044e\u0434\u0438\u043d\u0443 \u0437 \u0436\u0438\u0432\u0438\u0445\n  }\n  \n  return survive;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73950,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n  final people = Iterable.generate(n).toList();\n\n  var counter = 0;\n\n  while (people.length > 1) {\n    counter = (counter + k - 1) % people.length;\n    people.removeAt(counter);\n  }\n\n  return people.first + 1;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73951,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n  List<int> temp = List.generate(n, (p) => p + 1);\n  int index = 0;\n\n  while (temp.length > 1) {\n    index = (index + k - 1) % temp.length;\n    temp.removeAt(index);\n  }\n\n  return temp[0];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73952,"user_id":null,"body":"int josephus_survivor(int n, int k) {\n\nreturn (n > 1) ? (josephus_survivor(n-1, k) + k - 1) % n + 1 : 1;\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5556282156230d0e5e000089":[{"id":73953,"user_id":527,"body":"String dna_to_rna(String dna) => dna.replaceAll(\"T\", \"U\");","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73954,"user_id":null,"body":"const thymine = 'T';\nconst uracil = 'U';\n\nString dna_to_rna(String dna) => dna.replaceAll(thymine, uracil);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73955,"user_id":null,"body":"String dna_to_rna(String dna) {\n  String ans = '';\n  for (int i = 0; i < dna.length; i++) {\n    if (dna[i] == 'T') {\n      ans += 'U';\n    } else {\n      ans += dna[i];\n    }\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73956,"user_id":null,"body":"String dna_to_rna(String dna) {\n  var rna = dna.replaceAll(\"T\", \"U\");\n  return dna.contains(\"T\") ? rna : dna;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73957,"user_id":null,"body":"String dna_to_rna(String dna) => dna.replaceAll( new RegExp(r'T'), 'U' );","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73958,"user_id":null,"body":"String dna_to_rna(String dna) {\n  \/\/ your code here\n  return dna.replaceAll('T','U');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73959,"user_id":null,"body":"String dna_to_rna(String dna) {\n  \/\/ your code here\n\n  final letter='T';\n  final newLetter='U';\n  return dna.replaceAll(letter, newLetter);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73960,"user_id":null,"body":"String dna_to_rna(String dna) {\n  var result = dna.replaceAll(RegExp('T'), 'U');\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73961,"user_id":null,"body":"String dna_to_rna(String dna) {\n  String rna = \"\";\n  for (int i = 0; i < dna.length; i++) {\n    dna[i] == \"T\"? rna+=\"U\" : rna+=dna[i];\n  }\n  return rna;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73962,"user_id":527,"body":"String dna_to_rna(String dna) {\n  return dna.replaceAll(\"T\", \"U\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55685cd7ad70877c23000102":[{"id":73963,"user_id":168,"body":"num make_negative(n) => -n.abs();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73964,"user_id":null,"body":"num make_negative(n)=> !n.isNegative ? -n : n;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73965,"user_id":null,"body":"num make_negative(n) => n > 0 ? -n : n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73966,"user_id":null,"body":"num make_negative(n) => n > 0 ? n * -1 : n == 0 ? 0 : n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73967,"user_id":null,"body":"num make_negative(n) {\n  \/\/ your code here\n  return (n<=0)?n:-n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73968,"user_id":null,"body":"import 'dart:math';\nnum make_negative(n) => (n.abs() * -1);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73969,"user_id":null,"body":"num make_negative(n) =>(n>= 0) ? n = -n: n;\n\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73970,"user_id":null,"body":"num make_negative(n) => n.isNegative ? n : n * -1;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73971,"user_id":null,"body":"num make_negative(n) => n>0 ? n*(-1) : n*1;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73972,"user_id":null,"body":"num make_negative(num n) {\n  return !n.isNegative ? -n : n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"556deca17c58da83c00002db":[{"id":73973,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  var len = n - 3;\n  while (len > 0) {\n    signature.add(signature.reversed.take(3).reduce((a, e) => a + e));\n    len -= 1;\n  }\n  return signature.take(n).toList();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73974,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {  \n  for (int i=0; i<n-3; i++){\n    signature.addAll([signature[i]+signature[i+1]+signature[i+2]]);\n  }\n  return signature.take(n).toList();\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73975,"user_id":645,"body":"List<num> tribonacci(List<num> signature, int n) {\n  if (n < 3) return signature.take(n).toList();\n  List<num> arr = []..addAll(signature);\n  while (arr.length != n) arr.add(arr.sublist(arr.length - 3).fold(0, (a, b) => a + b));\n  return arr;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73976,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  if (n == 0) return [];\n  for (int i = 0; i < n-3; i++){\n    signature.add(signature[i]+signature[i+1]+signature[i+2]);\n  }\n  return signature.sublist(0, n);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73977,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  if (n < 3) {\n    return signature.sublist(0, n);\n  }\n\n  final List<num> sequence = <num>[...signature];\n  int index = sequence.length - 1;\n  while (index < n - 1) {\n    final num left = sequence[index - 2];\n    final num center = sequence[index - 1];\n    final num right = sequence[index];\n    sequence.add(right + left + center);\n    index += 1;\n  }\n\n  return sequence;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73978,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  \/\/ your code here\n  List<num>res = signature;\n  \n  if (n == 0){return [];}\n\n  for (int i = 0; i < n; i++){\n  res.add(res[0+i]+res[1+i]+res[2+i]);}\n  \n  return res.sublist(0,n);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73979,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  List<num> result = [];\n\n  for (int i = 0; i < n; i ++) {\n    num numberToAdd;\n    if (i < 3) {\n      numberToAdd = signature[i];\n    } else {\n      numberToAdd = result\n          .getRange(result.length - 3, result.length)\n          .fold(0, (previousValue, element) => previousValue + element);\n    }\n\n    result.add(numberToAdd);\n  }\n\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73980,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  final list = <num>[...signature];\n\n  if (n == 0) return [];\n  if (n < 4) return list.sublist(0, n);\n\n  for (var i = 4; i <= n; i++) {\n    final length = list.length;\n    final sum = list[length - 1] + list[length - 2] + list[length - 3];\n    list.add(sum);\n  }\n\n  return list;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73981,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  if (n == 0) return [];\n  if (n < 4) return simple(signature, n);\n  \n  int count = 3;\n  while (signature.length != n) {\n    signature.add(number(signature, count++));\n  }\n  \n  return signature;\n}\n\nnum number(List<num> signature, int count) {\n  num total = 0;\n  for (int i = 1; i < 4; i++) {\n    total += signature[count - i];\n  }\n  \n  return total;\n}\n\nList<num> simple(List<num> signature, int n) {\n  List<num> result = [];\n  for (int i = 0; i < n; i++) {\n    result.add(signature[i]);\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73982,"user_id":null,"body":"List<num> tribonacci(List<num> signature, int n) {\n  \/\/ your code here\n  int i = 0;\n  \n  \/\/return nempty list if n is 0.\n  if (n == 0) return [];\n\n  \/\/calculate tribonacci elements\n  while (i < n) {\n    signature.add(signature[i] + signature[i + 1] + signature[i + 2]);\n    i++;\n  }\n  \n  return signature.getRange(0, n).toList();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55908aad6620c066bc00002a":[{"id":73983,"user_id":null,"body":"bool xo(str) {\n  var s = str.toLowerCase();\n  return 'x'.allMatches(s).length == 'o'.allMatches(s).length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73984,"user_id":null,"body":"bool xo(str) => 'x'.allMatches(str.toLowerCase()).length == 'o'.allMatches(str.toLowerCase()).length;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73985,"user_id":null,"body":"bool xo(String assertedString) {\n  var letters = Map();\n\n  assertedString.toLowerCase().split('').forEach((character) {\n    letters[character] ??= 0;\n    letters[character]++;\n  });\n  \n  return letters[\"x\"] == letters[\"o\"];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73986,"user_id":null,"body":"bool xo(str) {\n  int xCount = 0, oCount = 0;\n  str.toLowerCase().split('').forEach((char) {\n    if (char == 'x') xCount += 1;\n    if (char == 'o') oCount += 1;\n  });\n  \n  return xCount == oCount;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73987,"user_id":null,"body":"bool xo(String str) {\n   return str.toLowerCase().split(\"x\").length==str.toLowerCase().split(\"o\").length;\n}\n\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73988,"user_id":null,"body":"bool xo(str) {\n  int xo = 0;\n  str = str.toLowerCase();\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] == 'x') {\n      xo++;\n    } else if (str[i] == 'o') {\n      xo--;\n    }\n    ;\n  }\n  return xo == 0 ? true : false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73989,"user_id":null,"body":"bool xo(String str) => RegExp(r'o|O').allMatches(str).length == RegExp(r'x|X').allMatches(str).length;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73990,"user_id":null,"body":"bool xo(String str) {\n  \/\/ your code here\n  List<String> x =[];\n  List<String> o =[];\n  for(int i = 0 ; i < str.length ; i ++ ){\n   String pop = str[i];\n    if(pop == 'o' || pop == 'O'){\n       o.add(pop);\n    }\n    if(pop == 'x' || pop == 'X'){\n      x.add(pop);\n    }\n  }\n  if(x.length == o.length){\n      return true;\n    }else{\n    return false;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73991,"user_id":null,"body":"bool xo(str) {\n  int numX = 0;\n  int numO = 0;\n  var answwer;\n  List<String> list = str.split(\"\");\n  for(int i = 0; i < list.length; i++){\n    if(list[i] == \"o\" || list[i] == \"O\"){\n      numO++;\n    } else if(list[i] == \"x\" || list[i] == \"X\"){\n      numX++;\n    }\n  }\n  if(numX == numO){\n    return true;\n  } else if(numX != numO){\n    return false;\n  } else {\n    return true;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73992,"user_id":null,"body":"bool xo(str) => RegExp('[xX]').allMatches(str).length == RegExp('[oO]').allMatches(str).length;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5592e3bd57b64d00f3000047":[{"id":73993,"user_id":null,"body":"int find_nb(int m) {\n  var sum = 0;\n  var i = 1;\n  while(sum < m){\n    sum += i*i*i;\n    i++;\n  }\n  return sum == m ? i-1 : -1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73994,"user_id":null,"body":"int find_nb(int m) {\n  var n = 0;\n  var volume = 0;\n  while (volume < m) {\n    n++;\n    volume += n * n * n;\n  }\n  if (volume > m) return -1;\n  return n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73995,"user_id":null,"body":"import 'dart:math';\n\nint find_nb(int m) {\n  var n = 0;\n  var current = 0;\n\n  while (current < m) {\n    n++;\n    current += pow(n, 3);\n  }\n\n  return current == m ? n : -1;\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73996,"user_id":null,"body":"int find_nb(int m) {\n  int temp =1;\n  int result=0;\n  while(m>result){\n    result+=(temp*temp*temp);   \n    temp+=1;\n  }\n  if(result==m){\n    return temp-1;\n  }\n  else{\n    return -1;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73997,"user_id":null,"body":"import 'dart:math' as Math;\nint find_nb(int m) {\n  int n = 1;\n\n  while(Math.pow(n * (n + 1) \/ 2  , 2) <= m) {\n    if(Math.pow(n * (n + 1) \/ 2  , 2) == m) {\n      return n;\n    }\n    else {\n      n++;\n    }\n  }\n\n    return -1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73998,"user_id":null,"body":"int find_nb(int m) {\n  var mRoot = 0;\n  var n = 1;\n\n  while (m > mRoot * mRoot) {\n    mRoot += n;\n    n++;\n  }\n\n  return m == mRoot * mRoot ? n - 1 : -1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":73999,"user_id":null,"body":"import \"dart:math\";\n\nint find_nb(int m) {\n    int i = 1;\n    while(m > 0){\n      m = m - pow(i, 3).toInt();\n      i++;\n    }\n    return (m == 0) ? (i - 1) : -1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74000,"user_id":null,"body":"int find_nb(int m) {\n  var mnum = m;\n  var sum = 0;\n  var n = 0;\n\n  for (n=0; sum  < mnum; n++) {\n    sum = sum + (n*n*n);\n  }\n    if (sum > mnum){\nreturn -1;\n    }else{\n      return n-1;\n    }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74001,"user_id":null,"body":"int find_nb(int m) {\n  int n=1;\n  while(m!=0){\n    if(m<0){\n      return -1;\n    }\n    m-=(n*n*n);\n    if(m!=0){\n      n+=1;\n    }\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74002,"user_id":null,"body":"import \"dart:math\";\n  \nint find_nb(int m) {\n  num volume = 1;\n  int count = 1;\n  \n  while(volume < m) {\n    count = count + 1;\n    volume = volume + pow(count, 3);\n  }\n  \n  if(volume == m) {\n    return count;\n  } else {\n    return -1;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"559a28007caad2ac4e000083":[{"id":74003,"user_id":null,"body":"BigInt perimeter(int m) {\n  var a = BigInt.zero;\n  var b = BigInt.one;\n  var sum = BigInt.one;\n\n  for (var i = 0; i < m; i++) {\n    final v = a + b;\n    a = b;\n    b = v;\n    sum += v;\n  }\n\n  return sum * BigInt.from(4);\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74004,"user_id":564,"body":"import 'dart:math' as math;\n\nBigInt perimeter(int n) {\n  BigInt go(int n, BigInt a, BigInt b, BigInt sum) {\n    return n < 0 ? sum * BigInt.from(4) : go(n-1, b, a+b, sum+a);\n  }\n  return go(n, BigInt.one, BigInt.one, BigInt.zero);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74005,"user_id":null,"body":"BigInt perimeter(int m) {\n  BigInt square = BigInt.from(1);\n  BigInt a = BigInt.from(0), b = BigInt.from(1), c;\n  for (int i = 0;i < m;i++) {\n    c = a + b;\n    square += c;\n    a = b;\n    b = c;\n  }\n  return square * BigInt.from(4);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74006,"user_id":null,"body":"BigInt perimeter(int m) {\n     var back = BigInt.from(4);\n  var arr = <BigInt>{BigInt.one, BigInt.one, BigInt.two};\n  while (arr.length < m) {\n    arr.add(arr.last + arr.elementAt(arr.length - 2));\n    back += arr.last;\n  }\n  return back * BigInt.from(4);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74007,"user_id":null,"body":"import 'dart:math' as math;\n\nBigInt perimeter(int m) => fibonacci().take(m + 1).reduce((a, b) => a + b) * BigInt.from(4);\n\nIterable<BigInt> fibonacci() sync* {\n  BigInt previous = BigInt.one;\n  BigInt current = BigInt.one;\n  yield previous;\n  yield current;\n  while (true) {\n    BigInt next = previous + current;\n    yield next;\n    previous = current;\n    current = next;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74008,"user_id":null,"body":"import 'dart:math' as math;\n\nBigInt perimeter(int m) {\n    BigInt prev = BigInt.one;\n    BigInt next = BigInt.one;\n    BigInt result = BigInt.two;\n\n    for (int i = 0; i < m - 1; i++) {\n      final temp = next;\n      next = prev + next;\n      prev = temp;\n\n      result += next;\n    }\n\n    return BigInt.from(4) * result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74009,"user_id":null,"body":"BigInt fibonacci(int n) {\n  BigInt prev = BigInt.zero;\n  BigInt next = BigInt.one;\n  for (int i = 0; i < n; i++) {\n    final nextFib = prev + next;\n    prev = next;\n    next = nextFib;\n  }\n  return prev;\n}\n\nBigInt perimeter(int m) {\n  return (fibonacci(m + 3) - BigInt.from(1)) * BigInt.from(4);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74010,"user_id":null,"body":"BigInt perimeter(int m) {\n  BigInt n1 = BigInt.zero, n2 = BigInt.one, n3 = BigInt.zero;\n  List<BigInt> fibseries = [BigInt.zero, BigInt.one];\n  for (int i = 2; i <= m + 1; i++) {\n    n3 = n1 + n2;\n    fibseries.add(n3);\n    n1 = n2;\n    n2 = n3;\n  }\n  BigInt result = fibseries.reduce((prev, cur) => prev + cur) * BigInt.from(4);\n  return result;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74011,"user_id":null,"body":"BigInt perimeter(int m) {\n     BigInt str = BigInt.one;\n  BigInt n1 = BigInt.zero;\n  BigInt n2 = BigInt.one;\n  BigInt n3 = BigInt.zero;\n  for (var i = 1; i <= m; i++) {\n    n3 = n1 + n2;\n\n    str = str + BigInt.parse(n3.toString());\n    n1 = n2;\n    n2 = n3;\n  }\n\n  return str * BigInt.from(4);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74012,"user_id":null,"body":"BigInt perimeter(int m) {\n\n  BigInt n1=BigInt.from(0),n2=BigInt.from(1),n3 = BigInt.from(0);\n  BigInt sum = BigInt.from(1);\n\n  for(int i = 2 ;i <= m + 1; i++){\n    n3 = n1+n2;\n    sum += n3;\n    n1 = n2;\n    n2 = n3;\n  }\n\n  return sum * BigInt.from(4);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"559e3224324a2b6e66000046":[{"id":74013,"user_id":null,"body":"int sumin(int n) {\n  var res = 0;\n  for (var x = 1; x <= n; x++) {\n    for (var y = 1; y <= n; y++) {\n      res += x < y ? x : y;\n    }\n  }\n  return res;\n}\n\nint sumax(int n) {\n  var res = 0;\n  for (var x = 1; x <=   n; x++) {\n    for (var y = 1; y <= n; y++) {\n      res += x > y ? x : y;\n    }\n  }\n  return res;\n}\nint sumsum(int n) {\n  var res = 0;\n  for (var x = 1; x <= n; x++) {\n    for (var y = 1; y <= n; y++) {\n      res += x + y;\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74014,"user_id":null,"body":"int sumin(int n) => n==1 ? 1 : sumin(n-1) + n*n;\n\nint sumax(int n) => n==1 ? 1 : sumax(n-1) + (2*n-1)*n;\n\nint sumsum(int n) => sumin(n)+sumax(n);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74015,"user_id":645,"body":"int sumin(int n) => (n * (n + 1) * (2 * n + 1) \/ 6).floor();\nint sumax(int n) => (n * (n + 1) * (4 * n - 1) \/ 6).floor();\nint sumsum(int n) => (n * n * (n + 1)).floor();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74016,"user_id":250,"body":"int sumin(int n) => (n*(2*n*n+3*n+1)\/6).floor();\nint sumax(int n) => (n*(4*n*n+3*n-1)\/6).floor();\nint sumsum(int n) => n*n*(n+1);\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74017,"user_id":null,"body":"import 'dart:math';\n\nint sumin(int n) {\n  return List.generate(n, (i) => i + 1).fold<int>(0, (a, b) => a + (2 * (n + 1 - b) - 1) * b);\n}\nint sumax(int n) {\n  return List.generate(n, (i) => n - i).fold<int>(0, (a, b) => a + (2 * b - 1) * b);\n}\nint sumsum(int n) {\n  return List.generate(n, (i) => i + 1).fold<int>(0, (a, b) => a + b * 2 * n);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74018,"user_id":null,"body":"import 'dart:math';\n\nint sumin(int n) {\n    var rez = 0;\n    for (var i = 1; i <= n; i++) {\n      for (var k = 1; k <= n; k++) {\n        rez += min(i, k);\n      }\n    }\n    return rez;\n  }\n\n  int sumax(int n) {\n    var rez = 0;\n    for (var i = 1; i <= n; i++) {\n      for (var k = 1; k <= n; k++) {\n        rez += max(i, k);\n      }\n    }\n    return rez;\n  }\n\n int sumsum(int n) {\n    var rez = 0;\n    for (var i = 1; i <= n; i++) {\n      for (var k = 1; k <= n; k++) {\n        rez += i + k;\n      }\n    }\n    return rez;\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74019,"user_id":null,"body":"import 'dart:math';\nint sumax(int n) {\n  int result = 0;\n  for (var x = 1; x <= n; x++) {\n    for (var y = 1; y <= n; y++) {\n      result += max(x, y);\n    }\n  }\n  return result;\n}\n\nint sumin(int n) {\n  int result = 0;\n  for (var x = 1; x <= n; x++) {\n    for (var y = 1; y <= n; y++) {\n      result += min(x, y);\n    }\n  }\n  return result;\n}\n\nint sumsum(int n) {\n  int result = 0;\n  for (var x = 1; x <= n; x++) {\n    for (var y = 1; y <= n; y++) {\n      result += x + y;\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74020,"user_id":null,"body":"import 'dart:math';\nint sumin(int n) {\n  var result = 0;\n  for(var x = 1; x <= n; x++) {\n    for(var y = 1; y <= n; y++) {\n      result += min(x,y);\n    }\n  }\n  return result;\n}\nint sumax(int n) {\n  var result = 0;\n  for(var x = 1; x <= n; x++) {\n    for(var y = 1; y <= n; y++) {\n      result += max(x,y);\n    }\n  }\n  return result;\n}\nint sumsum(int n) {\n  var result = 0;\n  for(var x = 1; x <= n; x++) {\n    for(var y = 1; y <= n; y++) {\n      result += x+y;\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74021,"user_id":713,"body":"int sumin(int n) {\n  return n * (n+1) * (2*n+1) ~\/ 6;\n}\nint sumax(int n) {\n  return n * (n+1) * (4*n-1) ~\/ 6;\n}\nint sumsum(int n) {\n  return n * n * (n+1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74022,"user_id":null,"body":"int sumin(int n) {\n  var result = 0;\n  for (var x = 1; x <= n; x++){\n    for (var y = 1; y <= n; y++){\n      result += x < y ? x : y;\n    }\n  }\n  return result;\n}\nint sumax(int n) {\n  var result = 0;\n  for(var x = 1; x <= n; x++){\n    for(var y = 1; y <= n; y++){\n      result += x > y ? x : y;\n    }\n  }\n  return result;\n}\nint sumsum(int n) {\n  var result = 0;\n  for(var x = 1; x <= n; x++){\n    for(var y = 1; y <= n; y++){\n      result += x + y;\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55a2d7ebe362935a210000b2":[{"id":74023,"user_id":null,"body":"import \"dart:math\";\n\nint find_smallest_int(List<int> arr) => arr.reduce(min);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74024,"user_id":null,"body":"int find_smallest_int(List<int> arr)=>(arr..sort())[0];","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74025,"user_id":null,"body":"int find_smallest_int(List<int> arr) => arr.reduce((a,b) => a<b?a:b);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74026,"user_id":250,"body":"int find_smallest_int(List<int> a) => a.reduce((p,x)=>x<p?x:p);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74027,"user_id":null,"body":"int find_smallest_int(List<int> arrayNum) {\n  List<int> saveNum = [];\n  int resule;\n\n  for (int i = 0; i < arrayNum.length; i += 2) {\n    if ((i + 1) >= arrayNum.length) {\n      saveNum.add(arrayNum[(arrayNum.length) - 1]);\n    } else if (arrayNum[i] <= arrayNum[i + 1]) {\n      saveNum.add(arrayNum[i]);\n    } else if (arrayNum[i + 1] < arrayNum[i]) {\n      saveNum.add(arrayNum[i + 1]);\n    }\n  }\n\n  do {\n    for (int i = 0; i < saveNum.length; i += 2) {\n      if ((i + 1) >= saveNum.length) {\n        break;\n      } else if (saveNum[i] >= saveNum[i + 1]) {\n        saveNum.removeAt(i);\n      } else if (saveNum[i + 1] > saveNum[i]) {\n        saveNum.removeAt(i + 1);\n      }\n    }\n  } while (saveNum.length > 1);\n\n  resule=saveNum[0];\n  return resule;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74028,"user_id":null,"body":"int find_smallest_int(List<int> arr) {\n  int min = arr[0];\n  for (var number in arr) {\n    if (number < min) {\n      min = number;\n    }\n  }\n  return min;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74029,"user_id":null,"body":"int find_smallest_int(List<int> arr) {\n  List<int> newArr = [...arr];\n  newArr.sort();\n  return newArr.first;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74030,"user_id":null,"body":"\/\/ Find the smallest integer in the array\nint find_smallest_int(List<int> arr) {\n  int temp = arr[0];\n  for (int i = 0; i < arr.length; i++) {\n    if (temp > arr[i]) temp = arr[i];\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74031,"user_id":null,"body":"import 'dart:math';\nint find_smallest_int(List<int> arr) {\n  arr.sort();\n  return arr[0];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74032,"user_id":null,"body":"int find_smallest_int(List<int> arr) {\n  var smallest = arr.first;\n\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i];\n    }\n  }\n  \n  return smallest;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55b4d87a3766d9873a0000d4":[{"id":74033,"user_id":null,"body":"import 'dart:math' as Math;\n\nList<List<String>> howmuch(int m, int n) {\n  int min = Math.min(m, n);\n  int max = Math.max(m, n);\n\n  List<List<String>> result = [];\n\n  for (int zloty = min; zloty <= max; zloty++) {\n    if (zloty % 9 == 1 && zloty % 7 == 2) {\n      result.add(['M: $zloty', 'B: ${zloty ~\/ 7}', 'C: ${zloty ~\/ 9}']);\n    }\n  }\n\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74034,"user_id":53,"body":"import 'dart:math' as math;\n\nList<List<String>> howmuch(int m, int n) {\n    List<List<String>> ans = [];\n    for (var i = math.min(n, m); i <= math.max(n, m); i++)\n    {\n        if (i % 9 == 1 && i % 7 == 2)\n        {\n            List<String> res = [];\n            res.add(\"M: \" + i.toString());\n            res.add(\"B: \" + (i ~\/ 7).toString());\n            res.add(\"C: \" + (i ~\/ 9).toString());\n            ans.add(res);\n        }\n    }\n    return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74035,"user_id":168,"body":"List<List<String>> howmuch(int m, int n) {\n  int a = m < n ? m : n, b = m < n ? n : m;\n  return [ for (int i = a + (9 - (a - 1) % 9) % 9; i <= b; i += 9)\n             if ((i - 2) % 7 == 0) \n              ['M: $i', 'B: ${(i - 2) ~\/ 7}', 'C: ${(i - 1) ~\/ 9}'] ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74036,"user_id":null,"body":"import 'dart:math';\n\nList<List<String>> howmuch(int m, int n) => [\n      for (var x = min(m, n) < 100 ? 37 : (min(m, n) \/ 63).floor() * 63 + 37;\n          x < max(m, n) + 1;\n          x += 63)\n        if (x >= min(m, n)) x\n    ]\n        .map((str) =>\n            [\"M: $str\", \"B: ${(str - 2) ~\/ 7}\", \"C: ${(str - 1) ~\/ 9}\"])\n        .toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74037,"user_id":null,"body":"List<List<String>> howmuch(int m, int n) {\n  if (n<m) { var temp = m; m = n; n=temp;}\n\n  List<List<String>> output = [];\n\n  var x = ((m-37)\/63).ceil();\n  for (var money = x * 63 +37; money <= n; money = ++x * 63 + 37) {\n    var b = x*9+5;\n    var c = x*7+4;\n    \n    output.add([\"M: $money\", \"B: $b\", \"C: $c\"]);\n  }\n  \n  return output;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74038,"user_id":null,"body":"import 'dart:math';\nList<List<String>> howmuch(int m, int n) {\n  final res = <List<String>>[];\n  for(int possibleFortune = min(m, n); possibleFortune <= max(m, n); ++possibleFortune){\n    if((possibleFortune - 1) % 9 == 0 && (possibleFortune - 2) % 7 == 0){\n      final c = (possibleFortune - 1) ~\/ 9;\n      final b = (possibleFortune - 2) ~\/ 7; \n      res.add([\"M: $possibleFortune\", \"B: $b\", \"C: $c\"]);\n    }\n\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74039,"user_id":null,"body":"import \"dart:math\";\n\nList<List<String>> howmuch(int m, int n) {\n  \/\/ your code\n  List<List<String>> retval = [];\n  var fMin = min(m,n);\n  var fMax = max(m,n);\n  \n  for (int c = (fMin \/ 9).floor(); c <= (fMax \/ 9).ceil(); c++) {\n    for (int b = (fMin \/ 7).floor(); b <= (fMax \/ 7).ceil(); b++) {\n      var f = 9*c + 1;\n      if (1 == 9*c - 7*b && fMin <= f && f <= fMax) {\n        retval.add([\"M: ${9*c + 1}\", \"B: $b\", \"C: $c\"]);\n      }\n    }\n  }\n    \n  return retval;\n }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74040,"user_id":null,"body":"List<List<String>> howmuch(int m, int n) {\n  \/\/ your code\n  var maxMoney = m > n ? m : n;\n  var minMoney = m > n ? n : m;\n  List<List<String>> result = [];\n  for (var money = minMoney; money <= maxMoney; money++){\n    if(money % 7 == 2 && money % 9 == 1){\n      result.add([\"M: \"+money.toString(), \"B: \"+((money-2)\/7).toInt().toString(), \"C: \"+((money-1)\/9).toInt().toString()]);\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74041,"user_id":null,"body":"import 'dart:math';\n\nList<List<String>> howmuch(int m, int n) {\n  List<List<String>> res = [];\n  for (int i = min(m, n); i <= max(m, n); i++) {\n    if (((i - 1) % 9) == 0 && ((i - 2) % 7) == 0) {\n      int c = (i - 1) ~\/ 9;\n      int b = (i - 2) ~\/ 7;\n      int m = c * 9 + 1;\n      res.add([\"M: $m\", \"B: $b\", \"C: $c\"]);\n    }\n  }\n\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74042,"user_id":null,"body":"List<List<String>> howmuch(int m, int n) {\n  \/\/ your code\n\n  List<List<String>> results = [];\n  var i = m>n ? n:m;\n  var y = m>n ? m:n;\n  for(i;i<=y;i++){\n    if(i % 9 == 1 && i % 7 == 2){\n      results.add(['M: $i', 'B: ${i ~\/ 7}', 'C: ${i ~\/ 9}']);\n        \n      \n    }\n  }\n  return results;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55be10de92aad5ef28000023":[{"id":74043,"user_id":53,"body":"int checkChoose(int m, n) \n{\n    var result = 1;\n    var i = 0;\n    while (i <= n) \n    {\n        if (result == m) return i;\n        result = result * (n - i) ~\/ (i + 1);\n        i += 1;\n    }\n    return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74044,"user_id":null,"body":"int checkChoose(int m, n) {\n  double c = 1;\n        for(int i = 1; i <= n; i++) {\n            c = c * (n-i + 1)\/i;\n            if(c == m) return i;\n        }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74045,"user_id":null,"body":"factorial(BigInt n) {\n  return n <= BigInt.from(1)\n      ? BigInt.from(1)\n      : n * factorial(n - BigInt.from(1));\n}\n\ncheckChoose(int m, n) {\n  BigInt nT = BigInt.from(n);\n\n  int k = -1;\n  for (int i = n; i >= 0; i--) {\n    BigInt iT = BigInt.from(i);\n    String x = (factorial(nT) \/ (factorial(iT) * factorial(nT - iT)))\n        .toStringAsFixed(0);\n    m.toString() == x ? k = i : k.abs();\n  }\n  return k;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74046,"user_id":null,"body":"BigInt factorial(BigInt n) {\n  BigInt ret = n;\n  for (BigInt i = BigInt.two; i < n; i += BigInt.one) {\n    ret *= i;\n  }\n  return ret;\n}\n\nint checkChoose(int m, n) {\n  BigInt bm = BigInt.from(m);\n  BigInt bn = BigInt.from(n);\n  BigInt fbn = factorial(bn);\n  \n  BigInt c = BigInt.from(0);\n  BigInt x = BigInt.from(0);\n\n  while (bm > c) {\n    x += BigInt.one;\n    if (bn - x <= BigInt.zero) {\n      return -1;\n    }\n    c = fbn ~\/ (factorial(x) * factorial(bn - x));\n  }\n  return c == bm ? x.toInt() : -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74047,"user_id":null,"body":"int checkChoose(int m, n) {\n  var x = 1;\n  for(;((fac(n, n - x) \/ fac(x, 0)) < m) && (n > x); x++);\n  return ((fac(n, n - x) \/ fac(x, 0)) == m) ? x : -1;\n}\n\nBigInt fac(int n, int init) {\n  var total = BigInt.from(1);\n  for(;n > init; n--)  total *= BigInt.from(n);\n  return total;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74048,"user_id":null,"body":"int binomial(int n, int x) {\n  BigInt ans = BigInt.from(1);\n  if ((n - x) < x) {\n    for (int i = n; i > x; i--) {\n      ans *= BigInt.from(i);\n    }\n    for (int i = 1; i <= (n - x); i++) {\n      ans ~\/= BigInt.from(i);\n    }\n  }\n  else {\n        for (int i = n; i > (n-x); i--) {\n      ans *= BigInt.from(i);\n    }\n    for (int i = 1; i <= x; i++) {\n      ans ~\/= BigInt.from(i);\n    }\n  }\n  return ans.toInt();\n}\n\nint checkChoose(int m, n) {\n  for (var x = 0; x <= n ~\/ 2; x++) {\n    if (binomial(n, x) == m) return x;\n  }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74049,"user_id":null,"body":"extension Product on Iterable<BigInt> {\n  BigInt get product => this.fold(BigInt.from(1), (x, y) => x * y);\n  BigInt get visProduct => this.fold(BigInt.from(1), (x, y) {\n        print('x $x y $y');\n        return x * y;\n      });\n}\n\nIterable<BigInt> range(BigInt start, BigInt end) =>\n    Iterable.generate((end - start).toInt(), (i) => BigInt.from(i) + start);\n\nBigInt bin(BigInt n, BigInt x) =>\n    (range(n - x + BigInt.one, n + BigInt.one).product ~\/\n        range(BigInt.one, x + BigInt.one).product);\nint checkChoose(int m, int n) {\n  return range(BigInt.one, BigInt.from(n))\n      .map((BigInt x) => [x, bin(BigInt.from(n), x)])\n      .takeWhile((List<BigInt> vec) => vec[1] <= BigInt.from(m))\n      .firstWhere((List<BigInt> vec) => vec[1] == BigInt.from(m),\n          orElse: () => [-BigInt.one, -BigInt.one])[0]\n      .toInt();\n}\n\nList<List<BigInt>> checkChooseCheck(int m, int n) {\n  return range(BigInt.one, BigInt.from(n))\n      .map((BigInt x) => [x, bin(BigInt.from(n), x)])\n      .takeWhile((List<BigInt> vec) => vec[1] <= BigInt.from(m))\n      .toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74050,"user_id":null,"body":"int checkChoose(int m, n) {\n  for (int i = 1; i < n; i++) if (choose(n, i) == m) return i;\n  return -1;\n}\n\nint choose(n, x) {\n  if (x == 0) return 1;\n  return (n * choose(n - 1, x - 1)) ~\/ x;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74051,"user_id":null,"body":"int checkChoose(int m, n) {\n  int result = 1;\n  for (int i = 0; i < n; i++) {\n    result = result * (n - i) ~\/ (i + 1);\n    if (result == m) return i + 1;\n  }\n  return -1;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74052,"user_id":null,"body":"int binom(int n, int k) {\n  int result = 1;\n  for (int i = 0; i < k; i++) {\n    result = result * (n - i) ~\/ (i + 1);\n  }\n  return result;\n}\n\nint checkChoose(int m, n) {\n  for (int i = 1; i < n; i++) {\n    final hypM = binom(n, i);\n    if (hypM == m) {\n      return i;\n    }\n  }\n  return -1;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55cbc3586671f6aa070000fb":[{"id":74053,"user_id":645,"body":"bool check_for_factor(int base, int factor) => base % factor == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74054,"user_id":null,"body":"bool check_for_factor(int base, int factor) => base % factor == 0 ? true : false;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74055,"user_id":null,"body":"bool check_for_factor(int base, int factor) {\n  \/\/ your code here\n  if (base.isNegative) {\n    return false;\n  }\n  \n  if (base % factor == 0) {\n    return true;\n  }\n  \n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74056,"user_id":null,"body":"bool check_for_factor(int base, int factor) {\n  \/\/ your code here\n  var test = base%factor == 0;\n  return test;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74057,"user_id":null,"body":"bool check_for_factor(int base, int factor) {\n  return base%factor < 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74058,"user_id":null,"body":"bool check_for_factor(b, f) => b % f == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74059,"user_id":null,"body":"bool check_for_factor(int base, int factor) {\nreturn(0==base%factor);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74060,"user_id":null,"body":"\/\/ Grasshopper - Check for factor\nbool check_for_factor(int base, int factor) {\n  if (base % factor == 0) return true;\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74061,"user_id":null,"body":"bool check_for_factor(int base, int factor) =>\n    base.remainder(factor) == 0 ? true : false;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74062,"user_id":null,"body":"bool check_for_factor(int base, int factor) {\n  if(base % factor == 0){\n    return true;\n  }\n  \n  return false;\n  \n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55cbd4ba903825f7970000f5":[{"id":74063,"user_id":null,"body":"String get_grade(int a, int b, int c) {\n  int mean = (a + b + c) ~\/ 3;\n  if (mean >= 90) return 'A';\n  else if (mean >= 80) return 'B';\n  else if (mean >= 70) return 'C';\n  else if (mean >= 60) return 'D';\n  else return 'F';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74064,"user_id":527,"body":"String get_grade(int a, int b, int c) {\n  switch ((a + b + c) ~\/ 30) {\n    case 10: return 'A';\n    case 9: return 'A';\n    case 8: return 'B';\n    case 7: return 'C';\n    case 6: return 'D';\n    default: return 'F';\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74065,"user_id":null,"body":"String get_grade(int a, int b, int c) {\n  var avg =  (a+b+c) \/ 3; \n  \n  String result = avg >=90 && avg <=100 ? \"A\": avg >=80 && avg <90 ? \"B\" : avg >=70 && avg <80 ? \"C\" :avg >=60 && avg <70 ? \"D\" :  \"F\";\n\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74066,"user_id":null,"body":"String get_grade(int a, int b, int c) {\n  int avg = ((a + b + c) \/ 3).floor();\n  if (avg >= 90 && avg <= 100)\n    return 'A';\n  else if (avg >= 80 && avg < 90)\n    return 'B';\n  else if (avg >= 70 && avg < 80)\n    return 'C';\n  else if (avg >= 60 && avg < 70)\n    return 'D';\n  else if (avg >= 0 && avg < 60)\n    return 'F';\n  else\n    return '';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74067,"user_id":null,"body":"String get_grade(int a, int b, int c) {\nswitch((a+b+c)~\/30){\ncase 10:\ncase 9:\nreturn 'A';\nbreak;\ncase 8:\nreturn 'B';\nbreak;\ncase 7:\nreturn 'C';\nbreak;\ncase 6:\nreturn 'D';\nbreak;\ndefault:\nreturn 'F';\n}\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74068,"user_id":null,"body":"String get_grade(int a, int b, int c) {\n  var sum = (a+b+c)\/3;\n  if( sum >= 90) return 'A';\n  if( sum >= 80 ) return 'B';\n  if( sum >= 70) return 'C';\n  if( sum >= 60) return 'D';\n  if( sum >= 0) return 'F';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74069,"user_id":null,"body":"String get_grade(int a, int b, int c) {\n  var score = (a + b + c) \/ 3;\n\n  if (score >= 90) return 'A';\n  if (score >= 80) return 'B';\n  if (score >= 70) return 'C';\n  if (score >= 60) return 'D';\n  return 'F';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74070,"user_id":null,"body":"String get_grade(int a, int b, int c) {\n  return 'FFFFFFDCBAA'[(a+b+c)~\/30];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74071,"user_id":250,"body":"String get_grade(int a, int b, int c) {\n  var avg = (a+b+c)\/3;\n  print(avg);\n  if (avg >= 90) return 'A';\n  if (avg >= 80) return 'B';\n  if (avg >= 70) return 'C';\n  if (avg >= 60) return 'D';\n  return 'F';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74072,"user_id":null,"body":"\nString get_grade(int a, int b, int c) {\n  \n  var score = (a+b+c)\/3;\n  return \n  90<=score && score<=100 ? \"A\" :\n  80<=score && score<90   ? \"B\" :\n  70<=score && score<80   ? \"C\" :\n  60<=score && score<70   ? \"D\" :\n  00<=score && score<60   ? \"F\" : \"F\";\n    \n }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55d24f55d7dd296eb9000030":[{"id":74073,"user_id":527,"body":"int summation(int n) {\n  return n * (n + 1) ~\/ 2;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74074,"user_id":null,"body":"int summation(int n) {\n  \/\/ your code here\n  var result = 0;\n  for(int loop = 1; loop <= n; loop ++){\n    result += loop;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74075,"user_id":null,"body":"summation(n) => n * (n + 1) ~\/ 2; \/\/ the Gauss formula","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74076,"user_id":76,"body":"int summation(int n) {\n  return n * (n + 1) >> 1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74077,"user_id":null,"body":"int summation(int n) => List.generate(n, (numb) => numb + 1).fold(0, (prev, curr) => prev + curr);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74078,"user_id":null,"body":"int summation(int n) => n > 0?n+summation(n-1):n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74079,"user_id":null,"body":"int summation(int n) {\n  int k = 0;\n  for (int i = 0; i < n; ++i, k += i);\n  return k;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74080,"user_id":null,"body":"int summation(int n) => n + n * n >> 1;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74081,"user_id":null,"body":"int summation(int n){\nvar summ = 0;\nvar list = Iterable<int>.generate(n).toList();\n\nfor(var f in list){\nsumm += f+1;\n}\nreturn summ; \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74082,"user_id":null,"body":"int summation(int n) => n*(n+1)~\/2;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55e6f5e58f7817808e00002e":[{"id":74083,"user_id":null,"body":"List<int> seven(int m) {\n  int count = 0;\n    while(m > 99){\n      m = (m\/10).floor() - (2*(m%10));\n      count++;\n    }\n  return [m, count];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74084,"user_id":null,"body":"List<int> seven(int m) {\n  var counter = 0;\n  while (true) {\n    if (m % 7 == 0 && m < 100 || m < 100) return [m, counter];\n    var splitted = m.toString().split('');\n    m = int.parse(splitted.getRange(0, splitted.length - 1).join()) - 2 * int.parse(splitted.last);\n    counter++;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74085,"user_id":492,"body":"List<int> seven(int m) {\n    int cnt = 0;\n    while (m > 99) {\n      int a0 = m % 10;\n      m = (m - a0) ~\/ 10 - 2 * a0;\n      cnt++;\n    }\n    return [m, cnt];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74086,"user_id":null,"body":"List<int> seven(int m) {\n    int current = m;\n    int stepCount = 0;\n  \n    while (current >= 100)\n    {\n      var lastDigit = current % 10;\n      current = current ~\/ 10 - 2 * lastDigit;\n      stepCount++;\n    }\n  \n    return [current, stepCount];   \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74087,"user_id":null,"body":"List<int> seven(int m) {\n  var s = m.toString();\n  int count = 0;\n  for (count = 0; s.length > 2; count++){\n    int last=int.parse(s[s.length - 1]);\n    s = s.substring(0, s.length - 1);\n    s=(int.parse(s)-(2*last)).toString();\n  }\n\n  return [int.parse(s), count];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74088,"user_id":null,"body":"\/\/ A Rule of Divisibility by 7\nList<int> seven(int m) {\n  int counter = 0;\n  String x = m.toString();\n  List<int> temp = [];\n  int left = 0;\n  int right = 0;\n  while (x.length > 2) {\n    left = int.parse(x.substring(0, x.length - 1));\n    right = int.parse(x.substring(x.length - 1));\n    x = (left - (2 * right)).toString();\n    counter++;\n  }\n  return [int.parse(x), counter];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74089,"user_id":null,"body":"List<int> seven(int m) {\n  var s = m.toString();\n  if (s.length < 3)\n  {\n    return [m, 0];\n  }\n  \n  var res = s; \n  var attempts = 0;\n  while (res.length > 2)\n  {    \n    res = (int.parse (res.substring (0, res.length - 1))\n        - 2 * int.parse (res.substring (res.length - 1, res.length))).toString();\n    attempts++;\n  } \n  \n  return [int.parse (res), attempts];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74090,"user_id":null,"body":"List<int> seven(int m) {\n  \n  int i = 0;\n  int lengthResalt = m.toString().length;\n  \n  for (i = 0; lengthResalt > 2; i++){\n    m = m ~\/10 - (m % 10 * 2);\n    lengthResalt = m.toString().length;\n  }\n  \n    return [m, i];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74091,"user_id":null,"body":"List<int> seven(int m) { \n  int steps = 0;\n  while (m >= 100) {\n    int x = (m\/10).floor();\n    int y = m % 10;\n    m = x - 2 * y;\n    steps++;\n  }\n  return [m, steps];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74092,"user_id":null,"body":"int count = 0;\n  \n  List<int> seven(int m) {\n    if (m != 0) count++;      \n    var lastDigit = int.parse(m.toString()[m.toString().length-1]);\n    var res = m~\/10 - (2* lastDigit); \n    if (res.toString().length <= 2 && res % 7 == 0 || res.toString().length <= 2 && res % 7 != 0) {\n      List<int> result = [res, count];\n      count = 0;\n      return result;\n    }    \n      return seven(res);\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55e7280b40e1c4a06d0000aa":[{"id":74093,"user_id":null,"body":"import 'dart:math';\nint choose_best_sum(int t, int k, List<int> ls) {\n  if(k < 1) return 0;\n  if(ls.length < k) return -1;\n  int i = 0;\n  int bestSum = 0;\n  while(i< ls.length){\n      var list = ls.skip(i + 1).toList();\n      var sum = 0;\n      if(k == 1){\n        sum = ls[i];\n      }else{\n        var child = choose_best_sum(t - ls[i], k - 1, list);\n        if(child <= 0) {\n          i++;\n          continue;\n        }\n        else sum = ls[i] + child;\n      }\n      if(sum <= t){\n        bestSum = max(sum, bestSum);\n      }\n    i++;\n  }\n  if(bestSum > t || bestSum == 0) return -1;\n  return bestSum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74094,"user_id":null,"body":"import 'dart:math';\n\nint choose_best_sum(int t, int k, List<int> ls) {\n  List<int> list = [];\n  getAllSubsets(ls).where((element) => element.length == k).toList().forEach((e){\n    list.add(e.reduce((t, e) => t + e));\n  });\n  if(ls.length < k) return -1;\n  return list.where((x) => x <= t).isNotEmpty ? list.where((x) => x <= t).reduce(max) : -1;\n  \n}\n\nList getAllSubsets(List l) => l.fold<List>([[]], (subLists, element) {\n      return subLists\n          .map((subList) => [\n                subList,\n                subList + [element]\n              ])\n          .expand((element) => element)\n          .toList();\n    });","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74095,"user_id":null,"body":"int choose_best_sum(int t, int k, List<int> ls) {\n    \n    if (ls.length < k){\n      return -1;\n    }\n  \n    PrimitiveWrapper best = PrimitiveWrapper(-1);\n  \n    for (int i = 0; i <= ls.length - k; i++){\n      int rs = loop(t, k, ls, i, 0, best);\n      if (rs == t)\n        return t;\n    }\n  \n    return best.value;\n}\n\nint loop(int t, int curK, List<int> ls, int curI, int sum, PrimitiveWrapper bestSum){\n  int v = ls[curI];\n  --curK;\n  \n  if (curK > 0) {\n    for (int i = curI + 1; i <= ls.length - curK; i++){\n      int rs = loop(t, curK, ls, i, sum + v, bestSum);\n    \n      if (rs == t)\n        return t;\n    }\n  }else {\n    sum += v;\n    if (sum == t) {\n      return t;\n    } else if ((sum) < t) {\n      if (sum > bestSum.value) {\n        bestSum.value = sum;\n      }\n      return -1;\n    }\n    \n    return -1;\n  }\n  \n  \n  return -1;\n}\n\nclass PrimitiveWrapper {\n  var value;\n  PrimitiveWrapper(this.value);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74096,"user_id":null,"body":"import 'dart:math';\n\nint choose_best_sum(int t, int k, List<int> ls) {\n\tint result = combinations(t, k, ls, 0);\n\treturn result > 0 ? result : -1;\n}\n\nint combinations(int t, int k, List<int> ls, int i) {\n\tif (k == 0 && t >= 0)\n\t{\n\t\treturn 0;\n\t}\n\telse if (k < 0 || i >= ls.length)\n\t{\n\t\treturn -9007199254740991;\n\t}\n\telse\n\t{\n\t\treturn max(combinations(t, k, ls, i + 1), ls[i] + combinations(t - ls[i], k - 1, ls, i + 1));\n\t}\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74097,"user_id":null,"body":"import 'dart:math';\nint choose_best_sum(int t, int k, List<int> ls) {\n    try{\n        if (k == 1) {\n          return ls.where((v) => v <= t).toList()?.reduce(max);\n        } else {\n          return List.generate(ls.length - 1, (index) { int bs = choose_best_sum(t - ls[index], k -1, ls.sublist(index + 1));\n                                                       return bs > 0? ls[index] + bs :-1;}).where((v) => v <= t).toList().reduce(max);\n        }\n      } catch(e) {\n        return -1;\n    }\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74098,"user_id":492,"body":"import 'dart:math' as math;\nint aux(int t, int k, List<int> ls, int frm) {\n    if (k == 0)\n        if (t >= 0) return 0; else return t;\n    else\n        if (t < k) return -1;           \n    int best = -1; int tmpBest;\n    for (int i = frm; i < ls.length; i++) {\n        tmpBest = aux(t - ls[i], k - 1, ls, i + 1);\n        if (tmpBest >= 0)\n            best = math.max(best, ls[i] + tmpBest);\n    }\n    return best;\n}\nint choose_best_sum(int t, int k, List<int> ls) {\n    return aux(t, k, ls, 0);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74099,"user_id":null,"body":"int choose_best_sum(int t, int k, List<int> ls) {\n  \/\/t == miles\n  \/\/k == towns\n  int len = ls.length;\n  if (len < k) return -1;\n\n  final diff = bestSum(t, k, ls, <String, List<int>>{});\n  if (diff.isEmpty) return -1;\n  if (diff[0] < 0) return -1;\n  final ans = t - diff[0];\n  return ans >= 0 ? ans : -1;\n}\n\nList<int> bestSum(int sum, int k, List<int> ls, Map<String, List<int>> memo) {\n  if (k == 0) return [sum];\n  if (sum < 0) return [-1];\n  final List<int> sortedList = List.from(ls)..sort();\n  if (memo.containsKey(\"$sum $k $sortedList\")) {\n    return memo[\"$sum $k $sortedList\"]!;\n  }\n  List<int> sums = [];\n  for (var i = 0; i < ls.length; i++) {\n    final newList = [...ls.sublist(i + 1), ...ls.sublist(0, i)];\n    final subSum = bestSum(sum - ls[i], k - 1, newList, memo);\n    memo.putIfAbsent(\"$sum $k $sortedList\", () => subSum);\n    sums.addAll(subSum);\n  }\n\n  sums = sums.where((v) => v >= 0).toList();\n  if (sums.isEmpty) return [-1];\n  int smallestNum = sums[0];\n\n  for (final _num in sums) {\n    smallestNum = _num < smallestNum ? _num : smallestNum;\n  }\n\n  return [smallestNum];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74100,"user_id":null,"body":"int choose_best_sum(int maxDist, int nCities, List<int> distances) => nCities > distances.length ? -1 : combinations(distances, nCities).map((c) => c.reduce((a, b) => a + b)).where((sum) => sum <= maxDist).fold(-1, (a, b) => a > b ? a : b);\n\nIterable<List<int>> combinations(List<int> pool, int r) sync*{\n  List<int> indices = Iterable<int>.generate(r).toList();\n\n  yield pool.sublist(0, r);\n  outer: while (true){\n    for (var i = r - 1; i >= 0; i--){\n      if (indices[i] != i + pool.length - r){\n        indices[i] += 1;\n        for (var j = i + 1; j < r; j++){\n          indices[j] = indices[j - 1] + 1;\n        }\n        yield indices.map((el) => pool[el]).toList();\n        continue outer;\n      }\n    }\n    return;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74101,"user_id":null,"body":"int choose_best_sum(int t, int k, List<int> ls) {\n    \/\/ your code\n  var sum = 0;\n  var kk = 0;\n  var _sum = 0;\n  int plusOne(int _i){\n    if (kk < k){\n      kk++;\n      for (var i = _i +1; i < ls.length; i++){\n      _sum += ls[i];\n       if (k == kk && _sum > sum && _sum <= t){ \n        sum = _sum;\n       }\n        sum = plusOne(i);\n      _sum -= ls[i];\n      }\n      kk--;\n    }\n     return sum;\n  }\n  if (k == 1) {\n    for (var i = 0; i < ls.length; i++){\n      if (ls[i] <= t && ls[i] > sum) sum = ls[i];\n    }\n  }\n  kk+=2;\n  for (var i = 0; i < ls.length; i++){\n    for (var i2 = i +1; i2 < ls.length; i2++){\n      _sum = ls[i] + ls[i2];\n      if (kk == k && _sum >= sum && _sum <= t){ \n        sum = _sum;\n        if (sum == t) return t;\n      }\n      if (k > 2){\n        sum = plusOne(i2);\n      }    \n    }\n  }\n    if (sum > 0) return sum; else return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74102,"user_id":null,"body":"import 'dart:math';\n\nint choose_best_sum(int t, int k, List<int> ls) {\n  List<int> list = [];\n  getAllSubsets(ls).where((element) => element.length == k).toList().forEach((e){\n    list.add(e.reduce((t, e) => t + e));\n  });\n  if(ls.length < k) return -1;\n  try {\n    return list.where((x) => x <= t).reduce(max);\n  } catch (e) {\n    return -1;\n  }\n}\n\nList getAllSubsets(List l) => l.fold<List>([[]], (subLists, element) {\n      return subLists\n          .map((subList) => [subList, subList + [element]])\n          .expand((element) => element)\n          .toList();\n    });","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55f73be6e12baaa5900000d4":[{"id":74103,"user_id":null,"body":"int goals(int liga, int copa, int champions) => liga + copa + champions;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74104,"user_id":527,"body":"int goals(int laLigaGoals, int copaDelReyGoals, int championsLeagueGoals) {\n  return laLigaGoals + copaDelReyGoals + championsLeagueGoals;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74105,"user_id":null,"body":"int goals(int laLigaGoals, int copaDelReyGoals, int championsLeagueGoals) =>\nlaLigaGoals + copaDelReyGoals + championsLeagueGoals;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74106,"user_id":null,"body":"int goals(int laLigaGoals, int copaDelReyGoals, int championsLeagueGoals) {\n   return [laLigaGoals,copaDelReyGoals, championsLeagueGoals].fold(0, (sum, val) => sum+ val);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74107,"user_id":1072,"body":"int goals(int a, int b, int c) {\n  return a + b + c;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74108,"user_id":null,"body":"int goals(int l, int c, int cl) => l+c+cl;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74109,"user_id":null,"body":"int goals(a,b,c)=>a+b+c;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74110,"user_id":null,"body":"\/\/ Grasshopper - Messi goals function\nint goals(int laLigaGoals, int copaDelReyGoals, int championsLeagueGoals) {\n  return laLigaGoals + copaDelReyGoals + championsLeagueGoals;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74111,"user_id":null,"body":"int goals(int x, int y, int a) {\n  \n   int ans = 0;\n   \n   return ans = x+y+a;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74112,"user_id":null,"body":"int goals(int l, int c, int ch) {\n  return l + c + ch;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55f9bca8ecaa9eac7100004a":[{"id":74113,"user_id":null,"body":"int past(int h, int m, int s) {\n  return new Duration(hours: h, minutes: m, seconds: s).inMilliseconds;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74114,"user_id":null,"body":"int past(int h, int m, int s) {\n  return (h * 3600 + m * 60 + s) * 1000;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74115,"user_id":null,"body":"int past(int h, int m, int s) => (s + (m + h * 60) * 60) * 1000;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74116,"user_id":null,"body":"int past(int h, int m, int s) => 1000 * (3600 * h + 60 * m + s);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74117,"user_id":645,"body":"int past(int h, int m, int s) => (h * 3600 + m * 60 + s) * 1000;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74118,"user_id":null,"body":"int past(int h, int m, int s) {\n  \/\/Hours_inMilli + Minutes_inMilli + Seconds_inMilli\n  int result= (h*60*60*1000) + (m*60*1000) + (s*1000);\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74119,"user_id":2676,"body":"int past(int h, int m, int s) {\n  m += h *60 ; \n  s += m * 60;\n  return s* 1000;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74120,"user_id":null,"body":"int past(int h, int m, int s) {\n  \/\/ your code here\n  var a = h * 3600000;\n  var b = m * 60000;\n  var c = s * 1000;\n  \n  return a + b + c ;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74121,"user_id":null,"body":"int past(int h, int m, int s) {\n\n  int hrs = h > 0 ? h * 3600000 : 0;  \n  int mns = m > 0 ? m * 60000 : 0;\n  int sss = s > 0 ? s * 1000 : 0;\n\n  return hrs + mns + sss;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74122,"user_id":null,"body":"\/\/ Beginner Series #2 Clock\nint past(int h, int m, int s) {\n  return h*(60*60*1000) + m*(60*1000) + s*(1000);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"55fd2d567d94ac3bc9000064":[{"id":74123,"user_id":null,"body":"import 'dart:math';\nint row_sum_odd_numbers(int n) {\n  return pow(n, 3);\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74124,"user_id":645,"body":"int row_sum_odd_numbers(int n) => n * n * n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74125,"user_id":null,"body":"import 'dart:math';\nint row_sum_odd_numbers(int n) => pow(n,3);","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74126,"user_id":null,"body":"int row_sum_odd_numbers(int n) {\n  int startOdd = ([for (var i=0; i<n; i++) i].reduce((v, e) => v + e)) * 2 - 1;\n  return [for (var num = 0; num < n; num++) startOdd+=2].reduce((v, e) => v + e);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74127,"user_id":null,"body":"int row_sum_odd_numbers(int n) {\n  List<List<int>> piramide = [];\n  int incr = 1;\n  int sum = 0;\n  for(int i=0; i<n; i++){\n    piramide.add([]);\n    for(int k=0; k<=i; k++){\n      if(i!=0) incr+=2;\n      piramide[i].add(incr);\n    }\n  }\n  sum = piramide[n-1].fold(0, (previous, current) => previous + current);\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74128,"user_id":null,"body":"import \"dart:math\";\nnum row_sum_odd_numbers(num n) {\n  \/\/ your code here\n  var myList = <num>[];\n  for (num i = 1, j = pow(n,2)+n-1; i <= n; i++, j-=2){\n    myList.add(j);\n  }\n  num c = 0;\n  c = myList.fold(0, (num sum, element) => sum + element);\n  return c;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74129,"user_id":null,"body":"int row_sum_odd_numbers(int n) {\n  final List<int> arr = [];\n  \n  final int firstInRow = n * (n - 1) + 1;\n  \n  for (int i = 0; i < n; i++) {\n    arr.add(firstInRow + i * 2);\n  }\n  \n  return arr.fold(0, (prev, next) => prev + next);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74130,"user_id":null,"body":"int row_sum_odd_numbers(int row) {\n  int preCount = 0;\n  for(int i = 0; i < row; i++){               \/\/ Find count of previous rows\n    preCount += i;\n  }\n  \n  final int startAt = (preCount * 2) + 1;     \/\/ Calculate starting number of row\n  int sum = 0;\n  \n  for(int i = 0; i < row; i++){               \/\/ Calculate sum of row\n    sum += startAt + (i * 2);\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74131,"user_id":null,"body":"int row_sum_odd_numbers(int n) {\n  \/\/ your code here\n \n  var startN=(n*(n-1)~\/2)+1;\n  var firstOdd=startN*2-1;\n  var zxc=n*n-n;\n  var sum=firstOdd*n+zxc;\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74132,"user_id":null,"body":"int row_sum_odd_numbers(int n) {\n  int da = n*n*n;\n  return da;\n }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5601409514fc93442500010b":[{"id":74133,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  double average = classPoints.fold(0, (prev, element) => element+prev) \/ classPoints.length;\n  return yourPoints > average;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74134,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) => (classPoints.reduce((a, b) => a + b) \/ classPoints.length) < yourPoints;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74135,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  return (classPoints.reduce((a,b)=>a+b)\/classPoints.length) < yourPoints;\n}  ","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74136,"user_id":null,"body":"import 'dart:math';\nbool better_than_average(List<int> classPoints, int yourPoints) {\n  return classPoints.reduce((a, b) => a + b)\/classPoints.length < yourPoints;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74137,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  int avg = classPoints.reduce((value, element) => (value + element));\n\n  return yourPoints > avg ~\/ classPoints.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74138,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  return (classPoints.reduce((value,element) => value + element) \/ classPoints.length <= yourPoints) ? true : false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74139,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  return classPoints.reduce((e,v) => e + v)\/classPoints.length < yourPoints;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74140,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  return classPoints.reduce((i, j) => i + j) \/ classPoints.length < yourPoints;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74141,"user_id":null,"body":"bool better_than_average(List<int> classPoints, int yourPoints) {\n  int ave = classPoints.reduce((el, sum) => sum + el);\n  return (ave + yourPoints) \/ (classPoints.length + 1) < yourPoints;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74142,"user_id":null,"body":"\/\/ multiplication is faster than division; see\n\/\/ https:\/\/stackoverflow.com\/questions\/17883240\/is-multiplication-faster-than-float-division\nbetter_than_average(List<int> lst, int p) => p * lst.length > lst.reduce((a, b) => a + b);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5613d06cee1e7da6d5000055":[{"id":74143,"user_id":492,"body":"import 'dart:math' as math;\n\nbool isPrime(int n) {\n    if (n == 2)\n        return true; \n    if ((n < 3) || (n % 2 == 0))\n        return false;\n    double limit = math.sqrt(n);\n    for (int i = 3; i <= limit; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\nList<int> step(int g, int start, int end) {\n    List<int> res = new List<int>();\n    int i = start;\n    while (i <= end-g) {\n      if (isPrime(i) && isPrime(i + g)) {\n          res.add(i);\n          res.add(i + g);\n          return res;\n      }\n      i++;\n    }\n    return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74144,"user_id":53,"body":"import \"dart:math\";\n\nbool isPrime(int n) {\n  for (var i=2; i<=sqrt(n).toInt(); i++)\n    if (n%i == 0) \n      return false;\n  return true;\n}\n\nList<int> step(int g, int m, int n) {\n  for (var i=m; i<=n-g; i++)\n    if (isPrime(i) && isPrime(i+g))\n      return [i, i+g];\n  return [];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74145,"user_id":null,"body":"List<int> step(int g, int m, int n){\n  for(var i=m; i<=n-g; i++) if(isPrime(i) & isPrime(i+g)) return [i,i+g];\n  return [];\n}\n\nbool isPrime(int n) {\n  for(int i=2; i*i<= n; i++) if (n % i == 0) return false;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74146,"user_id":null,"body":"List<int> step(int g, int start, int end) {\n  final list = <int>[];\n\n  for (var i = start; i <= end; i++) {\n    for (var j = 2; j <= i; j++) {\n      if (i % j == 0 && j != i) {\n        break;\n      } else if (j == i) {\n        list.add(i);\n      }\n    }\n    if (list.isNotEmpty && list.contains(list.last - g)) break;\n  }\n\n  final first =\n      list.singleWhere((number) => number == list.last - g, orElse: () => null);\n\n  return first == null ? [] : [first, list.last];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74147,"user_id":null,"body":"List<int> step(int g, int start, int end) {\n  for (var i = (start.isOdd) ? start : start + 1; i < end; i += 2) {\n    if (isPrime(i) && isPrime(i + g)) return [i, i + g];\n  }\n  return [];\n}\n\nbool isPrime(int x) {\n  if (x == 0 || x == 1) return false;\n  for (var i = 2; i <= x \/ 2; ++i) {\n    if (x % i == 0) return false;\n  }\n  return true;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74148,"user_id":null,"body":"import 'dart:math';\n\nList<int> step(int g, int start, int end) {\n  List<int> r  =[];\n  for(int i = start;i<= end;i++){\n    if(( i>1 && i%2!=0)||i==2){\n     checkPrime(i)? r.add(i):null;\n    }\n  }\n    return firsCouplePrimeBystep(g,r);\n}\n\/\/===============================\n  bool checkPrime (int i){\n    for(int j=2;j<=sqrt(i);j++){\n        if(i%j==0){\n         return false;\n        }\n      }\n  return true;\n}\n\/\/=====================\nList<int> firsCouplePrimeBystep( int step,List<int> list){\n  List<int> firsCouplePrimeBystep = [];\n  for(int i=0;i< list.length;i++){\n    if(i>0){\n      if(list.contains(list[i]-step)){\n        firsCouplePrimeBystep.add(list[i]-step);\n        firsCouplePrimeBystep.add(list[i]);\n        break;\n      }\n    }\n  }\n  \n  \n  return firsCouplePrimeBystep;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74149,"user_id":null,"body":"\nextension IsPrime on int {\n  bool get isPrime {\n    for (int i = 2; i < this; i++) {\n      if (this % i == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nList<int> step(int g, int start, int end) {\n  \/\/ your code\n  final out = <int>[];\n  for (start; start <= end; start++) {\n    if (start.isPrime && (start + g).isPrime) {\n      out.addAll([start, start + g]);\n      return out;\n    }\n  }\n\n  return out;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74150,"user_id":null,"body":"List<int> step(int g, int start, int end) {\n  final primes = [];\n\n  for (var i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      final otherPrime = primes.firstWhere((p) => i - p == g, orElse: () => -1);\n\n      if (otherPrime == -1) {\n        primes.add(i);\n      } else {\n        return [otherPrime, i];\n      }\n    }\n  }\n\n  return [];\n}\n\nbool isPrime(final int n) {\n  \/\/ Corner case\n  if (n <= 1) return false;\n\n  \/\/ Check from 2 to n-1\n  for (var i = 2; i < n; i++) {\n    if (n % i == 0) return false;\n  }\n\n  return true;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74151,"user_id":null,"body":"List<int> step(int g, int start, int end) {\n  \n  List<bool> list = [];\n  for (var i = 0; i <= end; i++) {\n    list.add(true);\n  }\n\n  for (int i = 2; i <= end; i++) {\n    if (list[i]) {\n      for (int j = i + i; j < end; j += i) {\n        list[j] = false;\n      }\n    }\n  }\n\n  List<int> list2 = [];\n  for (var i = start; i <= end; i++) {\n    if (list[i]) list2.add(i);\n  }\n\n  for (var i = 0; i < list2.length - 2; i++) {\n    for (var j = i + 1; j <= list2.length - 2; j++) {\n      if (list2[j] - list2[i] == g) {\n        return [list2[i], list2[j]];\n      }\n    }\n  }\n\n  return [];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74152,"user_id":null,"body":"List<int>? step(int g, int start, int end) {\n  List<int> result = [];\n  for (int i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      if (isPrime(i + g)) {\n        result.add(i);\n        result.add(i + g);\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nbool isPrime(int i) {\n  if (i == 2) return true;\n  if (i % 2 == 0) return false;\n  for (int j = 3; j <= i ~\/ 2; j += 2) {\n    if (i % j == 0) return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"561e9c843a2ef5a40c0000a4":[{"id":74153,"user_id":53,"body":"bool isPrime(int n) {\n  if (n % 2 == 0)\n    return n == 2;\n  for (var i = 3; i * i <= n; i += 2)\n    if (n % i == 0) \n      return false;\n  return true;\n}\n\nList<int> gap(int g, int m, int n) {\n  int k = 0;\n  for (int i = m; i <= n; i++) {\n    if (isPrime(i)) {\n      if (i - k == g) \n        return [k, i];\n      k = i;\n    }\n  }\n  return [];\n}        \n","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74154,"user_id":null,"body":"import 'dart:math';\nList<int> gap(int g, int m, int n) {\n  var first = 0;\n  var second = 0;\n  for(int i = m; i<=n ;i++){\n    if(i % 2 == 0 || i % 3 == 0) continue;\n    var sq = sqrt(i).floor();\n    int j = 4;\n    while(j<= sq){\n      if(i % j == 0) break;\n      j++;\n      if(j> sq){\n        if(first == 0 ){\n          first = i;\n          second = i;\n        }\n        else second = i;\n        if(second - first == g) return [first,second];\n        else first = second;\n      }\n    }\n  }\n  return [];\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74155,"user_id":492,"body":"import 'dart:math' as math;\n\nbool isPrime(int n) {\n    if (n == 2)\n        return true; \n    if ((n < 3) || (n % 2 == 0))\n        return false;\n    double limit = math.sqrt(n);\n    for (int i = 3; i <= limit; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\nList<int> gap(int g, int m, int n) {\n    int p = 0;\n    List<int> res = new List<int>();\n    for (; m <= n; m++) {\n      if (isPrime(m)) {\n        if (m - p == g) {\n          res.add(p);\n          res.add(m);\n          return res;\n        }\n        p = m;\n      }\n    }\n    return res;\n}        \n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74156,"user_id":null,"body":"bool isPrime(int number) {\n  for (int i = 2; i <= number \/ i; i++) {\n    if (number % i == 0) return false;\n  }\n  return true;\n}\n\ngap(int g, int m, int n) {\n  int lastPrime = 0;\n  for (int i = m; i <= n; i++) {\n    if (isPrime(i)) {\n      if (lastPrime > 0 && i - lastPrime == g) return [lastPrime, i];\n      lastPrime = i;\n    }\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74157,"user_id":null,"body":"List<int> gap(int g, int m, int n) {\n  for(;m < n; m++){\n    if(isPrime(m)){\n      bool skip = false;\n      for(int gap = 1; gap < g; gap++){\n        if(isPrime(m + gap)){\n          m += gap - 1;\n          skip = true;\n          break;\n        }\n      }\n      if(isPrime(m + g) && !skip)\n        return([m, m + g]);\n    }\n  }\n  return [];\n}   \n\nbool isPrime(N) {\n  for (var i = 2; i <= N \/ i; ++i) {\n    if (N % i == 0)\n      return false;\n  }\n  return true;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74158,"user_id":null,"body":"List<int> gap(int g, int m, int n) {\n  \n  int previous=0;\n  int current=0;\n  List<int> ofprimes=[];\n  List <int>gap=[];\n  int num=0;\n  \n  \/\/getting all prime numbers between m and n\n  for(var i=m; i<=n; i++){\n    \n    if(i!=0 && i!=1){\n      int flag=0;\n      int t=i~\/2;\n      for(var x=2; x<=t; x++){\n        if(i%x==0){\n          flag =1;\n          break;\n        }\n      }\n      if(flag==0){\n        ofprimes.add(i);\n        \n        if(ofprimes.length>1){\n      for(var v=0; v<ofprimes.length-1; v++){\n        num=ofprimes[v+1]-ofprimes[v];\n        if(num==g){\n          gap.add(ofprimes[v]);\n          gap.add(ofprimes[v+1]);\n          break;\n          \n        }\n      }\n      \n    }else{\n      \n    }\n    \n      }\n      \n      \n    }\n    if(num==g){\n      break;\n      }\n    }\n    \n    \/\/print(\"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\"+ofprimes.toString());\n    \/\/\/\/\/\/\/\/now we have all prime numbers between m & n\n    \n    \n    \n    \n  \n    \/\/ your code\n    return gap;\n}        \n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74159,"user_id":null,"body":"import 'dart:math';\nList<int> gap(int g, int m, int n) {\n  if (m % 2 == 0) m += 1; \/\/ make it odd.\n  int a = 0;\n  for (int i = m; i <= n; i += 2) {\n    if (isprime(i)) {\n      if (a == 0) {\n        a = i;\n        continue;\n      }\n      if (i - a == g) return [a, i];\n      a = i;\n    }\n  }\n  return [];\n}\n\nbool isprime(int n) {\n  if (n < 2 || n % 2 == 0) return n == 2;\n  var m = sqrt(n).toInt();\n  for (int i = 3; i <= m; i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74160,"user_id":null,"body":"import 'dart:math';\nList<int> gap(int g, int m, int n) {\n  if (m % 2 == 0) m += 1; \/\/ make it odd.\n  int a = 0;\n  for (int i = m; i <= n; i += 2) {\n    if (isprime(i)) {\n      if (a == 0) {\n        a = i;\n        continue;\n      }\n      if (i - a == g) return [a, i];\n      a = i;\n    }\n  }\n  return [];\n}\n\nbool isprime(int n) {\n  if (n < 2 || n % 2 == 0) return n == 2;\n  var m = sqrt(n);\n  for (int i = 3; i <= m; i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74161,"user_id":null,"body":"List<int> gap(int gap, int m, int n) {\n  final ans = <int>[];\n\n  for (var i = m; i <= n; i++) {\n    final isPrimeNum = isPrimeNumber(i);\n\n    if (!isPrimeNum) continue;\n\n    if (ans.isEmpty) {\n      ans.add(i);\n      if (ans.length == 2) break;\n      continue;\n    }\n\n    final actualGap = i - ans[0];\n    if (actualGap == gap) {\n      ans.add(i);\n      break;\n    }\n\n    ans\n      ..removeLast()\n      ..add(i);\n  }\n\n  if (ans.length == 1) return [];\n  return ans;\n}\n\nbool isPrimeNumber(int n) {\n  if (n == 1 || n == 0) return false;\n  if (n == 2 || n == 5 || n == 3) return true;\n  if (n % 2 == 0) return false;\n\n  int i = 2;\n\n  for (i; i < (n ~\/ 2) + 1; i++) {\n    if (n % i == 0) return false;\n  }\n\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74162,"user_id":null,"body":"List<int> gap(int g, int m, int n) {\n  if (m%2 == 0) m++;  \n  int k =0;\n  for (int i = m; i<=n; i+=2)\n    if (isPrime(i)){\n      if (i-k == g) return [i-g, i];\n      k = i;\n    }\n  return [];\n}        \n\nbool isPrime(k){\n  if (k%2==0)return false;\n  int i = 3;\n  while( k % i != 0 && i*i <= k)\n    i+=2;\n  return i*i > k ;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"562f91ff6a8b77dfe900006e":[{"id":74163,"user_id":null,"body":"int movie(int card, int ticket, double perc) {\n  var counter = 0;\n  num dticket = ticket;\n  num sum = card;\n  while (ticket * counter <= sum.ceil()) {\n    counter++;\n    sum += dticket *= perc;\n  }\n  return counter;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74164,"user_id":null,"body":"import 'dart:math';\n\nint movie(int card, int ticket, double perc) {\n  var count = 1;\n  var previous = ticket*perc;\n  var timePerc = perc;\n\n  while((ticket*count) <= (card.toDouble() + previous).ceilToDouble()){\n    timePerc *=perc;\n    previous = previous + (ticket*timePerc);\n    count +=1;\n  }\n  return count;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74165,"user_id":null,"body":"import 'dart:math';\n\nint movie(int card, int ticket, double perc) {\n  var n = 1;\n\n  var price = card + ticket * perc;\n\n  while (systemA(ticket, n) <= price.ceil()) {\n    price += ticket * pow(perc, n++) * perc;\n  }\n\n  return n;\n}\n\nint systemA(int price, int count) => price * count;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74166,"user_id":null,"body":"import 'dart:math';\n\nint movie(int card, int ticket, double perc) {\n  double priceWithCard = card.toDouble();\n  double price = 0;\n  int moviesCounter = 0;\n  \n  do{\n    price = price + ticket; \n    priceWithCard = priceWithCard + (ticket * pow(perc,moviesCounter)) * perc;\n    moviesCounter++;\n  }while(price <= priceWithCard.ceil().toDouble());\n  \n  \n  return moviesCounter;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74167,"user_id":null,"body":"int movie(int card, int ticket, double perc) {\n  int systemA = 0, n = 0;\n  double systemB = card.toDouble();\n  double _perc = 1;\n  \n  while (systemB.ceil() >= systemA) {\n    n++;\n    _perc *= perc ;\n    systemA += ticket;\n    systemB += ticket  * _perc;\n  }\n  return n;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74168,"user_id":null,"body":"int movie(int card, int ticket, double perc) {\n  double totalPriceSystemA = 0;\n  double totalPriceSystemB = 0;\n  int numberOfTickets = 1;\n\n  totalPriceSystemA = ticket.toDouble();\n  double systemBNewTicketPrice = ticket * perc;\n  totalPriceSystemB = card + systemBNewTicketPrice;\n\n  while (totalPriceSystemB.ceil() >= totalPriceSystemA.ceil()) {\n    numberOfTickets++;\n    totalPriceSystemA = ticket.toDouble() * numberOfTickets;\n    systemBNewTicketPrice = systemBNewTicketPrice * perc;\n    totalPriceSystemB += systemBNewTicketPrice;\n  }\n  print('totalPriceSystemA = ${totalPriceSystemA.ceil()}');\n  print('totalPriceSystemB = ${totalPriceSystemB.ceil()}');\n\n\n  return numberOfTickets;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74169,"user_id":null,"body":"import 'dart:math';\nint movie(int card, int ticket, double perc) {\n  num a =  0;\n num b = card;\n var day = 0;\nfor (var i=0; a<=b.ceil(); i++){\n  day +=1;\n  a +=  ticket;\n  b += ticket*pow(perc, i+1);\n}\n  return day;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74170,"user_id":null,"body":"int movie(int card, int ticket, double perc) {\n  double difference = ticket.toDouble();\n  double n = 0;\n  double priceTicket = 0;\n  double priceCard = card.toDouble();\n  double systemA = 0;\n  double systemB = 0;\n  for (n; systemA <= systemB.ceil(); n++) {\n    priceTicket += ticket;\n\n    difference = difference * perc;\n\n    priceCard = priceCard + difference;\n\n    systemA = priceTicket;\n    systemB = priceCard;\n    n = n;\n  }\n  return n.toInt();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74171,"user_id":null,"body":"import 'dart:math';\n\nint movie(int card, int ticket, double perc) {\n \n  \/\/ your code here\n  int n = 0;\n  double systemA = 0;\n  double systemB = card.toDouble();\n  while (systemB.ceil() >= systemA){\n    n++;\n    systemA += ticket;\n    systemB += ticket* pow(perc, n);\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74172,"user_id":null,"body":"int movie(int card, int ticket, double perc) {\n  var counter = 0;\n  double price = ticket.toDouble();\n  double sum = card.toDouble();\n\n  while ((sum.truncate() + 1) >= (counter * ticket)) {\n    counter++;\n    price = price * perc;\n    sum += price;\n  }\n  return counter;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"563a631f7cbbc236cf0000c2":[{"id":74173,"user_id":null,"body":"int move(int pos, int roll) => 2*roll + pos;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74174,"user_id":645,"body":"int move(int pos, int roll) => pos + roll * 2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74175,"user_id":null,"body":"int move(int pos, int roll) => (roll*2+pos).abs();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74176,"user_id":null,"body":"int move(int pos, int roll) => roll * 2 + pos;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74177,"user_id":null,"body":"int move(int p, int r) => 2 * r + p;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74178,"user_id":null,"body":"int move(int pos, int roll) {\n  \/\/ your code here\n  return (pos + roll + roll);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74179,"user_id":null,"body":"\/\/ Grasshopper - Terminal game move function\nint move(int pos, int roll) {\n  return pos + roll*2;\n}\n\n\/\/other sulotion\n\/\/ int move(int pos, int roll) => pos + roll*2;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74180,"user_id":null,"body":"int move(int pos, int roll) {\n  \/\/ your code here\n  return roll * 2 + pos;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74181,"user_id":null,"body":"int move(int pos, int roll) {\n  \/\/ your code here\n  var ans = pos + 2*roll;\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74182,"user_id":null,"body":"int move(int pos, int roll) {\n  int res=pos+(roll*2);\n  return res;\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"563b662a59afc2b5120000c6":[{"id":74183,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\n  var _p = p0;\n  var i = 0;\n  \n  while (_p < p) {\n    _p = _p + (_p * percent \/ 100).toInt() + aug;    \n    i++;\n  }\n  \n  return i;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74184,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\n  \/\/ your code here\n  var years = 0;\n  while (p0 < p) {\n    p0 = p0 + (p0*percent\/100).ceil() + aug;\n    years++;\n  }\n  return years;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74185,"user_id":null,"body":"  int nb_year(int p0, double percent, int aug, int p) {\n    \n     int n = 0;\n     double population = p0.toDouble();\n     percent = percent \/ 100;\n    \n   while(population<p){\n     \n       double increasePerYear = population * percent + aug;\n       \n       population = population + increasePerYear;\n     \n       n++;\n     \n   }\n    \n    return n;\n    \n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74186,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\nint yearsN=0;\n\nwhile(p>p0){\np0+=(p0*(percent\/100)).toInt()+aug;\nyearsN++;\n}\nreturn yearsN;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74187,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\n  if (p0 >= p) { return 0;}\n  return nb_year((p0 * (100 + percent) \/ 100).toInt() + aug, percent, aug, p) + 1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74188,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\n  int years = 0;\n  while (p0 < p) {\n    p0 = p0 + p0 * percent ~\/ 100 + aug;\n    years++;\n  }\n  return years;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74189,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\n  int i = 0; \/\/year\n  while (p0 < p){\n    p0 = p0 + (p0 * (percent\/100) + aug).toInt();\n    i++;\n  }\n  return i;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74190,"user_id":null,"body":"nb_year(p0, double percent, aug, p) {\n  var i = 0;\n  while (true) {\n    if (p0 >= p) {\n      return i;\n    }\n    p0 = p0 * (1 + percent \/ 100) + aug;\n    i++;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74191,"user_id":null,"body":"int nb_year(int p0, double percent, int aug, int p) {\n  var n = 1;\n  var inhabitants = p0 + (p0 * (percent\/100) + aug);\n  while (inhabitants < p) {\n    inhabitants = inhabitants + (inhabitants * (percent\/100) + aug).toInt();\n    n++;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74192,"user_id":null,"body":"nb_year(a, b, c, d) => a >= d ? 0 : 1 + nb_year(a + a*b\/100 + c, b, c, d);","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"563e320cee5dddcf77000158":[{"id":74193,"user_id":null,"body":"int get_average(List<int> arr) {\n  return (arr.reduce((a, b) => a + b) \/ arr.length).floor();\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74194,"user_id":null,"body":"int get_average(List<int> arr) => arr.reduce((curr, next) => curr+next)~\/arr.length;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74195,"user_id":null,"body":"int get_average(List<int> arr) {\n  return arr.reduce((v,e)=>v+e)~\/arr.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74196,"user_id":null,"body":"import 'package:collection\/collection.dart';\nint get_average(List<int> arr)=>(arr.sum\/arr.length).floor();","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74197,"user_id":null,"body":"import 'dart:math';\n\nint get_average(List<int> arr) {\n  double sum = 0;\n  \n  for(int i in arr) {\n    sum += i;\n  }\n  \n  return (sum \/ arr.length).floor();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74198,"user_id":null,"body":"int get_average(List<int> arr) {\n  return arr.reduce((acc, cur) => acc + cur) ~\/ arr.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74199,"user_id":null,"body":"int get_average(List<int> arr) => arr.reduce((v,e)=>v+e)~\/arr.length;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74200,"user_id":null,"body":"int get_average(List<int> arr) {\n  return (arr.reduce((a,b) => a+b)\/arr.length).floor().toInt();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74201,"user_id":null,"body":"int get_average(List<int> arr) => (arr.reduce((a, b) => a + b) \/ arr.length).floor();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74202,"user_id":null,"body":"int get_average(List<int> arr) {\n  return arr.reduce((a, b) => a + b) ~\/ arr.length;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"563f0c54a22b9345bf000053":[{"id":74203,"user_id":null,"body":"int fcn(n) => 1 << n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74204,"user_id":null,"body":"import 'dart:math' as math;\n\nint fcn (int n) {\n    return math.pow(2, n);\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74205,"user_id":null,"body":"int fcn (int n) => Iterable.generate(n).fold(1, (acc, val) => acc * 2);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74206,"user_id":null,"body":"num nth(num n, num n1) {\n  return (6 * n * n1) \/ (5 * n - n1);\n}\n\nnum fcn(int n) {\n  final List<num> sequence = [1, 2];\n\n  for (int i = 0; i < n - 1; i++) {\n    sequence.add(nth(sequence[i], sequence[i + 1]));\n  }\n\n  return sequence[sequence.length - 1];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74207,"user_id":null,"body":"int fcn (int n) {\n  var answer = 1;\n  while(n > 0){\n    answer *= 2;\n    n -= 1;\n  }\n\n  return answer;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74208,"user_id":null,"body":"int fcn (int n) {\n    BigInt a = BigInt.from(1);\n    BigInt b = BigInt.from(2);\n    if (n == 1){\n      return a.toInt(); \n    }\n    if (n == 2){\n      return b.toInt();\n    }\n    for (int i = 1; i < n; i++){\n      BigInt res = (BigInt.from(6) * a * b) ~\/ ((BigInt.from(5) * a) - b);\n      a = b;\n      b = res;\n    }\n\n    return b.toInt();\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74209,"user_id":null,"body":"import 'dart:math' as math;\nint fcn (int n) => math.pow(2,n).toInt();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74210,"user_id":null,"body":"int fcn (int n) {\n    num u0 = 1;\n    num u1 = 2;\n    num u2 = 0;\n    for(int i = 0; i < n; i++) {\n      u2 = (6 * u0 * u1) \/ (5 * u0 - u1);\n      u0 = u1;\n      u1 = u2;\n    }\n    return u0.toInt(); \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74211,"user_id":null,"body":"int fcn (int n) {\n    int result = 1;\n    for(int i = 0; i < n; i++) {\n      result *= 2;\n    }\n    return result; \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74212,"user_id":null,"body":"int fcn (int n) {\n  double un = 1.0;\n  double un1 = 2.0;\n  \n  for(int i = 0; i < n-1; i++){\n    var un2 = findUn2(un, un1);\n    un = un1;\n    un1 = un2;\n  }\n  return un1.toInt();\n}\n\n\ndouble findUn2(double un, double un1){\n  \/\/ Un = a; Un+1 = b; Un+2 = c\n  return -6 * un * un1 \/ (-5 * un + un1);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"564057bc348c7200bd0000ff":[{"id":74213,"user_id":null,"body":"int thirt(int n) {\n  List<int> divisions = [1, 10, 9, 12, 3, 4];\n  int res = n;\n\n  while (res.toString().length > 2) {\n    List<int> reversedNums = res.toString()\n        .split('').reversed\n        .map((e) => int.parse(e)).toList();\n\n    res = 0;\n    for (int i = 0; i < reversedNums.length; i++) {\n      res += reversedNums[i] * divisions[i % 6];\n    }\n  }\n\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74214,"user_id":492,"body":"int thirt(int n) {\n    List<int> w = [1, 10, 9, 12, 3, 4];\n    while (true) {\n        int r = n, q = -1, c = 0, j = 0;\n        while (q != 0) {\n            q = (r ~\/ 10);\n            c += (r % 10) * w[j % 6];\n            r = q;\n            j++;\n        }\n        if (c == n) \n            return c;\n        n = c;\n    }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74215,"user_id":null,"body":"int thirt(int n) {\n  var result = pass(n);\n  while (true) {\n    final passResult = pass(result);\n    if (result != passResult) {\n      result = passResult;\n    } else {\n      return result;\n    }\n  }\n}\n\nint pass(int n) {\n  const sequence = <int>[1, 10, 9, 12, 3, 4];\n  var sum = 0;\n  var step = 0;\n  while (n > 0) {\n    sum += (n % 10) * sequence[step];\n    n = n ~\/ 10;\n    step = (step + 1) % sequence.length;\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74216,"user_id":null,"body":"import 'dart:math';\nint thirt(int n) {\n    \/\/ your code\n    List<int> modPow, temp;\n    bool isStoped = false;\n    int num = n;\n    while(!isStoped){\n      modPow = [];\n      temp = [];\n      int digit = num.toString().length;\n      for(int i = 0; i < digit; i++){\n        modPow.add( pow(10, i).toInt() % 13 );\n      }\n      List<String> nums = num.toString().split('');\n      nums.asMap().forEach((i, n){\n        temp.add( modPow[i] * (int.parse( nums[nums.length - (i+1)] )) );\n      });\n      temp.length <= 2? isStoped = true : num = temp.reduce((sum, el) => sum + el);\n    }\n    return num;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74217,"user_id":null,"body":"\/\/*****************************************\nList<int> getDigits(int n){\n    List<int> toReturn=[];\n    while(n>0){\n      toReturn.add(n%10);\n      n=(n~\/10);\n    }\n    return toReturn;\n}\n\/\/*****************************************\nint byRepeatingSequence(List<int> target){\n  int result=0,index=0;\n  const List<int> repeatingSequence = [1,10,9,12,3,4];\n  for(final digit in target){\n    if(index>5){index=0;}\n    result += (digit * repeatingSequence[index]);\n    index +=1; \n  }\n  return result;\n}\n\/\/*****************************************\nint ruleCheck(int n){\n  List<int> digits=[];\n  digits = getDigits(n);\n  return byRepeatingSequence(digits);\n}\n\/\/*****************************************\nint thirt(int n) {\n    late int target = n;\n    if(n<= 10){\n      return n*1;\n    }\n    do{\n      target = ruleCheck(target);\n    }while(target != ruleCheck(target));\n    \n    return target;\n}\n\/\/*****************************************\n\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74218,"user_id":null,"body":"int thirt(int n) {\n  List<int> divisions = List\n      .filled(n.toString().length ~\/ 6 + 1, [1, 10, 9, 12, 3, 4])\n      .expand((element) => element).toList();\n\n  int res = n;\n\n  while (res.toString().length > 2) {\n    List<int> reversedNums = res.toString().split('').reversed.map((e) => int.parse(e)).toList();\n    int sum = 0;\n\n    for (int i = 0; i < reversedNums.length; i++) {\n      sum += reversedNums[i] * divisions[i];\n    }\n\n    res = sum;\n  }\n\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74219,"user_id":null,"body":"import 'dart:math';\n\nint thirt(int n) {\n  List<String> s = new List.from(n.toString().split(\"\").reversed);\n\n  int sum = s.asMap().entries.fold(0,\n      (sum, digit) => sum + pow(10, digit.key) % 13 * int.parse(digit.value));\n\n  if (sum == n) {\n    return n;\n  }\n\n  return thirt(sum);\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74220,"user_id":null,"body":"import 'dart:math';\n\nint thirt(int n) {\n  while (true) {\n    int sum = 0;\n    String s = n.toString().split(\"\").reversed.join();\n    for (int i = 0; i < s.length; i++) {\n      sum += pow(10,i)%13 * int.parse(s[i]);\n    }\n    if (sum == n) {return n;}\n    n = sum;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74221,"user_id":168,"body":"int thirt(int n) {\n  while (true) {\n    int s = 0;\n    for (int r = 1, m = n; m > 0; m ~\/= 10, r = (r * 10) % 13) {\n      s += m % 10 * r;\n    }\n    if (s == n) return s;\n    n = s;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74222,"user_id":null,"body":"int thirt(int n) {\n  var result = pass(n);\n  while (true) {\n    var passResult = pass(result);\n    if (result != passResult) {\n      result = passResult;\n    } else {\n      return result;\n    }\n  }\n}\n\nint pass(int n) {\n  const sequence = <int>[1, 10, 9, 12, 3, 4];\n  var sum = 0;\n  var step = 0;\n  while (n > 0) {\n    sum += (n % 10) * sequence[step];\n    n = n ~\/ 10;\n    step = (step + 1) % sequence.length;\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56445c4755d0e45b8c00010a":[{"id":74223,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) => (n != 1)\n    ? fortune((f0 + (p \/ 100 * f0) - c0).truncate(), p,\n        (c0 + c0 * (i \/ 100)).truncate(), --n, i)\n    : f0 >= 0;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74224,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n  while (f0 > 0 && n != 0) {\n    n--;\n    f0 = (f0 + f0*(p \/ 100) - c0).toInt();\n    c0 = c0 + (c0 * (i \/ 100)).toInt();\n  }\n  if (f0 < 0 && n != 0) {\n   return false;\n  }\n  return true;\n\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74225,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n  \n    for (int year = 2; year <= n; year++) {\n      f0 = ((1 + p\/100)*f0 - c0).truncate();\n      if (f0 < 0) { return false; }\n      c0 = ((1 + i\/100)*c0).truncate();\n    }\n  \n    return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74226,"user_id":492,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n    int prev_x = f0; int prev_c = c0;\n    int nou_x = -1; int nou_c = -1;\n    for (int k = 1; k < n; k++) {\n        nou_x = (prev_x + p\/100.0 * prev_x - prev_c).floor();\n        nou_c = (prev_c + i\/100.0 * prev_c).floor();\n        prev_x = nou_x; prev_c = nou_c;\n    }\n    return (nou_x >= 0);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74227,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n  \n  int f = f0;\n  int c = c0;\n  int j =1;\n  while(f >= 0){\n    f = f + (f*0.01*p).floor() - c;\n    c = c + (c*0.01*i).floor();\n    if(f>=0){\n      j++;\n    }\n  };\n  \n  if(n<=j){\n    return true;\n  } else{\n    return false;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74228,"user_id":null,"body":"class Fortune {\n  final int f, c;\n  final double p, i;\n  Fortune({required this.f, required this.c, required this.p, required this.i});\n  Fortune next() {\n    return Fortune(\n        f: (f * (1 + p \/ 100) - c).toInt(),\n        c: (c * (1 + i \/ 100)).toInt(),\n        i: i,\n        p: p);\n  }\n}\n\nbool fortune(int f0, double p, int c0, int n, double i) {\n  Fortune f = Fortune(f: f0, p: p, c: c0, i: i);\n  bool finished = false;\n  for (int j = 0; j < n - 1 && f.f > 0; j++) {\n    f = f.next();\n    if (j == n - 2) {\n      finished = true;\n    }\n  }\n  return f.f >= 0 && finished;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74229,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n  double debt = f0.toDouble();\n  double expWithInf = c0.toDouble();\n\n  for (var b = 2; b <= n; b++) {\n    debt = (debt + (debt \/ 100 * p) - expWithInf).truncateToDouble();\n    expWithInf = (expWithInf + (expWithInf \/ 100 * i)).truncateToDouble();\n  }\n\n  if (debt >= 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74230,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n    \n  double balance = f0.toDouble();\n  double interest = p\/100;\n  int withdrawal = c0;\n  double inflation = i\/100;\n  \n  for (int y=0; y < n-1; y++) {\n    balance = balance + (balance*interest) - withdrawal;\n    balance = balance.truncateToDouble();\n    withdrawal = (withdrawal + withdrawal*inflation).truncate();\n    if (balance < 0) {return false;}\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74231,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n  var interestRate = p \/ 100;\n  var inflation = i \/ 100;\n\n  int payments = c0;\n  int value = f0;\n\n  for (var z = 0; z < n; z++) {\n    if (!value.isNegative) {\n      value = (value + (value * interestRate) - payments).toInt();\n      payments = (payments * (1 + inflation)).toInt();\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74232,"user_id":null,"body":"bool fortune(int f0, double p, int c0, int n, double i) {\n    var f = f0;\n    var c = c0;\n    for (int y=0; y<n-1; y++) {\n      f = (f*(1 + p\/100) - c).truncate();\n      c = (c*(1 + i\/100)).truncate();\n    }\n    return f>=0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56484848ba95170a8000004d":[{"id":74233,"user_id":null,"body":"import 'dart:math';\n\nint gps(int s, List<double> x) {\n  var maxSpeed = 0;\n  for (int i = 1; i <= x.length - 1; i++) {\n    maxSpeed = max(maxSpeed, (3600 * (x[i] - (x[i - 1])) \/ s)).toInt();\n  }\n  return maxSpeed;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74234,"user_id":null,"body":"int gps(int s, List<double> x) {\n  \/\/ your code\n  if (x.length < 2) return 0;\n  \n  List<double> speeeeeeeeeed = [];\n  for (int i = 0; i < (x.length - 1); i++){\n    var temp = (3600 * (x[i+1] - x[i]) \/ s);\n    speeeeeeeeeed.add(temp);\n  }\n  speeeeeeeeeed.sort();\n  return speeeeeeeeeed[speeeeeeeeeed.length - 1].toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74235,"user_id":null,"body":"int gps(int s, List<double> x) {\n  int max_value=0;\n  for (var i=0; i< x.length-1; i++) {\n    var current = (3600*(x[i+1]-x[i]))~\/s;\n    if (max_value < current ) {\n      max_value = current;\n    }\n  }\n  \n  return max_value;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74236,"user_id":null,"body":"int gps(int s, List<double> x) {\n\n  if (x.isEmpty == true) return 0;\n\n  List<double> distances = x.length == 1 ? x : x.sublist(1);\n\n  List<double> delta_distance = List.generate(distances.length, (index) => distances[index] - x[index]);\n\n  delta_distance.sort();\n\n  return ((3600 * delta_distance.last) \/ s).floor();\n\n\n\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74237,"user_id":null,"body":"int gps(int s, List<double> x) {\n  double max = 0;\n  for (var i = 0; i < x.length - 1; i++) {\n    if (x[i + 1] - x[i] > max ) max = x[i + 1] - x[i];\n  }\n  return (3600 * max \/ s).floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74238,"user_id":null,"body":"int gps(int s, List<double> x) { \n  double maxAverage = 0, deltaDistance, average;\n  for(int i = 0; i < x.length - 1; i++) {\n    deltaDistance = x[i+1] - x[i];\n    average = (3600 * deltaDistance) \/ s;\n    maxAverage = average > maxAverage ? average : maxAverage; \n  }\n  \n  return maxAverage.floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74239,"user_id":null,"body":"import 'dart:math';\nint gps(int s, List<double> x) {\nif (x.length <= 1) {\n    \n    return 0;\n  }\n\n  List<double> speed = [];\n  for (var i = 0; i < x.length - 1; i++) {\n    speed.add((x[i + 1] - x[i]) * 3600 \/ s);\n  }\n  var max_value = speed.reduce(max);\n\n  return max_value.floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74240,"user_id":null,"body":"int gps(int s, List<double> x) {\n  List speed = [0] ;\n  for (int i = 0; i < x.length-1; i++) {\n    double acceleration = x[i + 1] - x[i];\n    speed.add((3600 * acceleration) \/ s);\n  }\n  speed.sort();\n  return speed.last.round();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74241,"user_id":null,"body":"int gps(int s, List<double> x) {\n  \/\/ your code\n  if(x.length<=1)\n    return 0;\n  double max=0;\n  for(int i=1; i<x.length;i++){\n    double delta = x[i]-x[i-1];\n    double vm = (3600*delta)\/s;\n    if(vm>max)\n      max=vm;\n  }\n  return max.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74242,"user_id":null,"body":"import 'dart:math' as math;\n\nint gps(int s, List<double> x) {  \n  final distances = <double>[];\n  for (int i = 0; i < x.length - 1; i++) {\n    distances.add(x[i + 1] - x[i]);\n  }\n\n  return distances\n      .map((e) => (3600 * e) \/ s)\n      .fold<double>(0.0, (previousValue, element) => math.max(previousValue, element))\n      .floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56530b444e831334c0000020":[{"id":74243,"user_id":null,"body":"String chromosome_check(String sperm) => \"Congratulations! You're going to have a ${sperm == 'XX' ? 'daughter' : 'son'}.\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74244,"user_id":null,"body":"String chromosome_check(String sperm) {\n  return sperm == 'XY' ? \n    \"Congratulations! You're going to have a son.\" : \n    \"Congratulations! You're going to have a daughter.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74245,"user_id":null,"body":"String chromosome_check(String sperm) {\n  return \"Congratulations! You're going to have a \"+(sperm.indexOf(\"Y\")>=0?\"son.\":\"daughter.\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74246,"user_id":null,"body":"String chromosome_check(String sperm) => sperm.contains('Y') ? 'Congratulations! You\\'re going to have a son.' : 'Congratulations! You\\'re going to have a daughter.';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74247,"user_id":null,"body":"String chromosome_check(String sperm) {\n  return \"Congratulations! You're going to have a ${sperm.contains('XY') ? \"son\" : \"daughter\"}.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74248,"user_id":null,"body":"String chromosome_check(String sperm) => sperm[1] == 'Y' ? 'Congratulations! You\\'re going to have a son.': 'Congratulations! You\\'re going to have a daughter.';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74249,"user_id":null,"body":"String chromosome_check(String sperm) {\n  if (sperm.contains('XX')) {\n    return \"Congratulations! You're going to have a daughter.\";\n  } else {\n    return \"Congratulations! You're going to have a son.\";\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74250,"user_id":null,"body":"String chromosome_check(String sperm) {\n  \/\/ your code here\n  if (sperm == \"XX\")\n    return \"Congratulations! You're going to have a daughter.\";\n  else \n    return \"Congratulations! You're going to have a son.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74251,"user_id":null,"body":"String chromosome_check(String sperm) {\n  return \"Congratulations! You're going to have a ${sperm == 'XY' ? 'son' : 'daughter'}.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74252,"user_id":null,"body":"chromosome_check(s) => \"Congratulations! You're going to have a \" + ( s == 'XY' ? 'son.' : 'daughter.');","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56541980fa08ab47a0000040":[{"id":74253,"user_id":527,"body":"final RegExp reError = new RegExp(\"[^a-m]\");\n\nString printer_error(String s) {\n  return \"${reError.allMatches(s).length}\/${s.length}\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74254,"user_id":null,"body":"String printer_error(String s) => RegExp(r\"[nopqrstuvwxyz]\").allMatches(s).length.toString() + \"\/\" + s.length.toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74255,"user_id":null,"body":"String printer_error(String s) {\n  var errorsNb = s.split('').where((c) => c.codeUnitAt(0) > 'm'.codeUnitAt(0));\n  return errorsNb.length.toString()+\"\/\"+s.length.toString();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74256,"user_id":null,"body":"final int MAX_RUNE = 109; \/\/ code point for 'm';\n\nString printer_error(String s) {\n  int nErrors = s.runes.fold(0, (acc, r) => r > MAX_RUNE ? acc + 1 : acc);\n  return \"$nErrors\/${s.length}\";\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74257,"user_id":null,"body":"String printer_error(String s) {\n  List<String> goodLetters = 'abcdefghijklm'.split('');\n  int totalGood = 0;\n  int totalBad = 0;\n  s.split('').forEach((e) {\n    goodLetters.contains(e) ? totalGood++ : totalBad++;\n  });\n  return '$totalBad\/${totalGood+totalBad}';\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74258,"user_id":null,"body":"String printer_error(String s) =>\n      '${RegExp(r'[^a-m]').allMatches(s).length}\/${s.length}';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74259,"user_id":null,"body":"String printer_error(String s) {\n  num count = 0;\n  for (int i = 0; i < s.length; i++){\n    if(s[i].contains(RegExp(r'[n-z]'))){\n      count++;\n    }\n  }\n  return '$count\/${s.length}';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74260,"user_id":null,"body":"String printer_error(String s) {\n  var sSplit = s.split('');\n  var sLength = sSplit.length;\n   \n  var error = 0;\n   \n  for(var i in sSplit){\n    if(i != 'a' && i != 'b'&& i != 'c'&& i != 'd'&& i!= 'e' && i != 'f'&& \n       i != 'g'&& i != 'h'&& i != 'i'&& i != 'j'&& i != 'k'&& i != 'l'&& \n       i != 'm'){\n      error++;\n    }\n  } \n  \n  \n  return \"$error\/$sLength\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74261,"user_id":null,"body":"String printer_error(String s) {\n  \/\/ your code here\n  \n  int length = s.length;\n  int wrong = 0;\n  bool isTrue = false;\n  List<String> letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m'];\n  for(int i = 0; i<s.length; i++){\n    for(int j =0; j<13;j++){\n      if(s[i]==letters[j]){\n        isTrue = true;\n      }\n    }\n    if(isTrue==true){\n      isTrue = false;\n    } else{ \n      wrong++;\n    }\n  }\n  return(\"$wrong\/$length\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74262,"user_id":645,"body":"String printer_error(String s) => s.split('').where((x) => x.codeUnitAt(0) > 109).length.toString() + \"\/\" + s.length.toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5656b6906de340bd1b0000ac":[{"id":74263,"user_id":null,"body":"String longest(String a, String b) {\n  var strings = (a + b).split('');\n  strings.sort();\n\n  return strings.toSet().join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74264,"user_id":null,"body":"longest(a, b) => (((a + b).split('').toSet().toList())..sort()).join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74265,"user_id":null,"body":"String longest(String a, String b) {\n  List<String> list = [...a.split(''), ...b.split('')].toSet().toList()..sort();\n  return list.join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74266,"user_id":null,"body":"String longest(String a, String b) {\n  List result = (a + b).split(\"\").toSet().toList();\n  result.sort();\n  return result.join(\"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74267,"user_id":null,"body":"String longest(String a, String b) {\n  List joined = (a + b).split('').toSet().toList()..sort();\n  return joined.join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74268,"user_id":250,"body":"String longest(String a, String b) {\n  var r = \"${a}${b}\".split(\"\").toSet().toList()..sort();\n  return r.join(\"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74269,"user_id":null,"body":"String longest(String a, String b)\n  { var s1s2=(a+b).split('');\n  \n  s1s2.sort();\n     var distinctIds =s1s2.toSet().toList();\n  \n   String result3 = distinctIds.join(\"\");\n  return result3;}\n  \n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74270,"user_id":null,"body":"String longest(String a, String b) {\n  String hasil='';\n  if(a.contains('a')||b.contains('a')) hasil=hasil+'a';\n  if(a.contains('b')||b.contains('b')) hasil=hasil+'b';\n  if(a.contains('c')||b.contains('c')) hasil=hasil+'c';\n  if(a.contains('d')||b.contains('d')) hasil=hasil+'d';\n  if(a.contains('e')||b.contains('e')) hasil=hasil+'e';\n  if(a.contains('f')||b.contains('f')) hasil=hasil+'f';\n  if(a.contains('g')||b.contains('g')) hasil=hasil+'g';\n  if(a.contains('h')||b.contains('h')) hasil=hasil+'h';\n  if(a.contains('i')||b.contains('i')) hasil=hasil+'i';\n  if(a.contains('j')||b.contains('j')) hasil=hasil+'j';\n  if(a.contains('k')||b.contains('k')) hasil=hasil+'k';\n  if(a.contains('l')||b.contains('l')) hasil=hasil+'l';\n  if(a.contains('m')||b.contains('m')) hasil=hasil+'m';\n  if(a.contains('n')||b.contains('n')) hasil=hasil+'n';\n  if(a.contains('o')||b.contains('o')) hasil=hasil+'o';\n  if(a.contains('p')||b.contains('p')) hasil=hasil+'p';\n  if(a.contains('q')||b.contains('q')) hasil=hasil+'q';\n  if(a.contains('r')||b.contains('r')) hasil=hasil+'r';\n  if(a.contains('s')||b.contains('s')) hasil=hasil+'s';\n  if(a.contains('t')||b.contains('t')) hasil=hasil+'t';\n  if(a.contains('u')||b.contains('u')) hasil=hasil+'u';\n  if(a.contains('v')||b.contains('v')) hasil=hasil+'v';\n  if(a.contains('w')||b.contains('w')) hasil=hasil+'w';\n  if(a.contains('x')||b.contains('x')) hasil=hasil+'x';\n  if(a.contains('y')||b.contains('y')) hasil=hasil+'y';\n  if(a.contains('z')||b.contains('z')) hasil=hasil+'z';\n  return hasil;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74271,"user_id":null,"body":"String longest(String a, String b) {  \n  var res = (a + b).split('').toSet().toList()\n       ..sort();\n  return res.join();       \n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74272,"user_id":null,"body":"String longest(String a, String b) => ((a.split('') + b.split('')).toSet().join().split('')..sort()).join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"565abd876ed46506d600000d":[{"id":74273,"user_id":null,"body":"import 'dart:math' as math;\ndouble simpson(int n) {            \n    double a = 0;\n    double b = math.pi;\n    double h = (b - a) \/ n;\n    double f(x) => (3\/2) * math.pow(math.sin(x), 3);\n    double sum(List<double> ls) => ls.length > 0 ? ls.reduce((a, b) => a + b): 0;\n    double p1 = ((b - a)\/(3 * n));\n    double p2 = f(a) + f(b);\n    double p3 = 4 * sum(List.generate(n ~\/ 2, (i) => f(a + (2 * (i + 1) - 1) * h)));\n    double p4 = 2 * sum(List.generate(n ~\/ 2 - 1, (i) => f(a + 2 * (i + 1) * h)));\n    return p1 * (p2 + p3 + p4);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74274,"user_id":53,"body":"import 'dart:math' as math;\n\ndouble f(double x) { return 1.5 * math.pow(math.sin(x), 3); }\n\ndouble simpson(int n) {            \n  double m = 0;\n  for (int i = 1; i < n; i++) {\n    m += (2 + (i % 2) * 2) * f((math.pi \/ n) * i);\n  }\n  return m * (math.pi \/ 3) \/ n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74275,"user_id":null,"body":"import 'dart:math';\ndouble simpson(int n) {            \n\n  double a = 0;\n  double b = pi;\n  double h = (b - a) \/ n;\n  \n  double sum1 = 0;\n  for (int i = 1 ; i<= n\/2 ; i++)\n    sum1 += f(( a + (2*i -1)*h ));\n  \n  double sum2 = 0;\n  for (int i = 1 ; i<= n\/2 - 1; i++)\n    sum2+= f((a + 2*i*h));\n  \n  return (b-a)\/(3*n) * (f(a) + f(b) + 4*sum1 + 2*sum2);\n  \n}\n\ndouble f(double n) => (3\/2)*pow(sin(n),3);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74276,"user_id":null,"body":"import 'dart:math';\ndouble integral(int n, double a, double b, double sample(double x)) {\n  assert(a <= b);\n  double h = (b - a) \/ n;\n  double firstPart = 0;\n  for (int i = 1; i <= n \/ 2; i++) {\n    firstPart += sample(a + (2 * i - 1) * h);\n  }\n  double secondPart = 0;\n  for (int i = 1; i <= n \/ 2 - 1; i++) {\n    secondPart += sample(a + 2 * i * h);\n  }\n  return (b - a) \/\n      (3 * n) *\n      (sample(a) + sample(b) + 4 * firstPart + 2 * secondPart);\n}\n\ndouble simpson(int n) {\n  return integral(n, 0, 3.14159265359, (double x) => 3 \/ 2 * pow(sin(x), 3));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74277,"user_id":null,"body":"import 'dart:math';\n\ndouble sum(int start, int end, double Function(double) f, double Function(double) g) {\n  double sum = 0;\n  \n  for (int i = start; i <= end; i++) {\n    sum += f(g(i.toDouble()));\n  }\n  \n  return sum;\n}\n\ndouble simpson(int n) {            \n  final a = 0.0;\n  final b = pi;\n  final h = (b - a) \/ n;\n  \n  final f = (x) => (3 \/ 2) * pow(sin(x), 3);\n  \n  final sum1 = sum(1, n ~\/ 2, f, (i) => a + (2 * i - 1) * h);\n  final sum2 = sum(1, n ~\/ 2 - 1, f, (i) => a + 2 * i * h);\n  \n  return ((b - a) \/ (3 * n)) * (f(a) + f(b) + 4 * sum1 + 2 * sum2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74278,"user_id":null,"body":"import 'dart:math';\n\ndouble f(double x){\n  return (3\/2)*pow(sin(x),3);\n}\n\ndouble simpson(int n) {\n    double h = pi\/n;\n    double m = 2 * List.generate((n\/2).toInt(), (i) => f(2*i*h+h)).reduce((a, b) => a + b);\n    double l = List.generate((n\/2).toInt(), (i) => f(2*i*h)).reduce((a, b) => a + b);\n  \n    return (h*2\/3)*(m + l);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74279,"user_id":null,"body":"import 'dart:math' as math;\n\ndouble simpson(int n) {\n  var h = math.pi \/ n;\n\n  return math.pi \/ (3 * n) * (f(0) + f(math.pi) + 4 * g(h, n \/ 2, 1) + 2 * g(h, n \/ 2 - 1, 0));\n}\n\ndouble f(double n) {\n  return math.pow(math.sin(n), 3) * 1.5;\n}\n\ndouble g(double h, double l, int m) {\n  var r = 0.0;\n  for (var i = 1; i <= l; i++) {\n    r += f((i * 2 - m) * h);\n  }\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74280,"user_id":null,"body":"import 'dart:math' as math;\nimport 'dart:core';\ndouble simpson(int n) {\n  \/\/ your code\n  final pi = math.pi;\n  final zero=0;\n  return ((pi-zero)\/(3*n))*((((3\/2)*math.pow(math.sin(zero), 3))+((3\/2)*math.pow(math.sin(pi),3))+(4*series(n,zero,pi)!)+(2*series2(n, zero, pi)!.toDouble())));\n}\ndouble? series(int n,int a,double b){\n  double? total=0;\n double h= (b-a)\/n;\n  for(int i =1 ; i<=n\/2;i++){\n    total = (total! + 3\/2*math.pow(math.sin(a+((2*i-1)*h)), 3)) ;\n  }\n  return total ;\n}\ndouble? series2(int n,int a,double b){\n  double? total=0;\n  double h= (b-a)\/n;\n  for(int i = 1 ; i<=(n\/2)-1;i++){\n    total = (total! + 3\/2*math.pow(math.sin(a+(2*i*h)), 3)) ;\n  }\n  return total ;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74281,"user_id":null,"body":"import \"dart:math\";\ndouble simpson(int n) {            \n  var a = 0;\n  var h = pi\/n;\n  var sum1 = 0.0; var sum2 = 0.0;\n  for(int i = 1; i <= n~\/2; i++){\n    sum1 += (pow(sin((2*i - 1)*h), 3))*3\/2;\n  }\n  for(int i = 1; i <= n~\/2 - 1; i++){\n    sum2 += (pow(sin(2*i*h), 3))*3\/2;\n  }\n  return(pi\/(3*n))*((3\/2)*pow(sin(0), 3) + (3\/2)*pow(sin(pi), 3) + 4*sum1 + 2*sum2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74282,"user_id":null,"body":"import \"dart:math\";\n\ndouble simpson(int n) {\n    var a = 0;\n    var b = pi;\n    var h = (b - a) \/ n;\n  \n    var sum1 = 0.0;\n    var sum2 = 0.0;\n  \n    for(var i = 1;i <= n~\/2; i++){\n      sum1 += f(a + (2*i -1) * h);\n    }\n  \n    for(var i = 1;i <= n~\/2 - 1; i++){\n      sum2 += f(a + 2*i*h);\n    }\n  \n    \/\/ your code\n    return (b - a)\/(3*n) * (f(a) + f(b) + 4*sum1 + 2*sum2);\n}\n\ndouble f(x) {\n  return 3.0\/2.0 * pow(sin(x), 3);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"565c0fa6e3a7d39dee000125":[{"id":74283,"user_id":null,"body":"import \"dart:math\";\ndouble dist(double v, double mu)                    \/\/ suppose reaction time is 1\n{\n    v \/= 3.6;\n    return v+v*v\/(2*mu*9.81);\n}\ndouble speed(double d, double mu)                   \/\/ suppose reaction time is 1\n{   \n  var a=1.0;\n  var b=2*mu*9.81;\n  var c=-2*mu*9.81*d;\n  \n    return (sqrt(b*b-4*a*c)-b)\/2\/a*3.6;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74284,"user_id":null,"body":"import \"dart:math\";\n\ndouble g = 9.81;\ndouble time = 1;\ndouble k = 10 \/ 36;\n\ndouble dist(double v, double mu) => pow(v * k, 2) \/ (2 * mu * g) + time * v * k;\n\ndouble speed(double d, double mu) {\n  double a = 1 \/ (2 * mu * g);\n  double b = time;\n  double c = -d;\n  double delta = pow(b, 2) - 4 * a * c;\n  double v1 = (-b + sqrt(delta)) \/ (2 * a);\n  double v2 = (-b - sqrt(delta)) \/ (2 * a);\n  double v = max(v1, v2) \/ k;\n  return v;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74285,"user_id":null,"body":"import 'dart:math';\n\ndouble dist(double v, double mu)                    \/\/ suppose reaction time is 1\n{   \n  final double vInMeterPerSec = v \/ 3.6;\n  return vInMeterPerSec + pow(vInMeterPerSec, 2) \/ (2 * mu * 9.81);\n}\ndouble speed(double d, double mu)                   \/\/ suppose reaction time is 1\n{   \n    \n    final double factor = 2 * mu * 9.81;\n    \/\/ solving v * v + v * factor - d * factor = 0\n    return ((-factor + sqrt(pow(factor, 2) + 4 * (d * factor))) \/ 2) * 3.6;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74286,"user_id":null,"body":"import 'dart:math';\n\n\ndouble dist(double v, double mu)                    \/\/ suppose reaction time is 1\n{\n    v = v * 0.277778;\n    double result = v + ((v * v) \/ (2 * 9.81 * mu));\n    return result; \n}\ndouble speed(double d, double mu)                   \/\/ suppose reaction time is 1\n{\n    var a = 1 \/ (2 * mu * 9.81);\n    var c = -1 * d;\n    var b = 1;\n    var D = sqrt((b * b) - (4 * a * c));\n    return ((-1 + D) \/ (2 * a)) \/ 0.277778;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74287,"user_id":null,"body":"import \"dart:math\";\n\ndouble dist(double v, double mu)                    \/\/ suppose reaction time is 1\n{    \n    final g = 9.81 * 3600  * 3600 \/ 1000;\n    \/\/ your code\n    return 1000 * (v*v \/ (2*mu*g) + v * 1\/3600); \n}\ndouble speed(double d, double mu)                   \/\/ suppose reaction time is 1\n{   \n   final g = 9.81;\n  final a = (2*mu*g);\n    \/\/ your code\n    return -(1 - sqrt(1 + 4 * d \/ a) )*a * 1800 \/1000;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74288,"user_id":null,"body":"import 'dart:math' as m;\ndouble dist(double v, double mu) {\n  double vms = v \/ 3.6;\n  return vms + vms * vms \/ (2 * mu * 9.81);\n}\n\ndouble speed(double d, double mu) {\n  const double g = 9.81;\n  double qp(a, b, c) => (-b + m.sqrt(b * b - 4 * a * c)) \/ (2 * a);\n  double rp = qp(1 \/ (2 * mu * 9.81), 1, -d);\n  return rp * 3.6;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74289,"user_id":null,"body":"import 'dart:math';\n\ndouble dist(double v, double mu) \n{\n  var meterV = kmToM(v);\n  return (meterV * meterV) \/ mug2(mu) + meterV;\n}\n\ndouble speed(double d, double mu) \n{\n  var v = d * mu;\n  var df = diff(v, d, mu);\n  while (df.abs() >= 1e-4) {\n    v -= df \/ 10;\n    df = diff(v, d, mu);\n  }\n  return mToKm(v);\n}\n\ndouble diff(double v, double d, double mu) {\n  return v - (d - (pow(v, 2) \/ mug2(mu)));\n}\n\ndouble mug2(double mu) {\n  const double _gravity = 9.81;\n  return (2 * mu * _gravity);\n}\n\ndouble kmToM(double v) {\n  return v * 5 \/ 18;\n}\n\ndouble mToKm(double v) {\n  return v * 18 \/ 5;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74290,"user_id":null,"body":"import 'dart:math';\n\nconst g = 9.81;\n  \ndouble dist(double v, double mu)                    \/\/ suppose reaction time is 1\n{    \n    v \/= 3.6;\n    return v * (v\/(2*mu*g) + 1); \n}\ndouble speed(double d, double mu)                   \/\/ suppose reaction time is 1\n{   \n    return (-1 + sqrt(1 + 2*d\/mu\/g)) * mu*g * 3.6;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74291,"user_id":null,"body":"import 'dart:math';\n\ndouble dist(double v, double mu)\n{\n  const double g = 9.81;\n  double dist1 = v * 1000 \/ (60 * 60);\n  double dist2 = v * v * (1000000 \/ (60 * 60 * 60 * 60)) \/ (2 * mu * g);\n  return dist1 + dist2;\n}\n\ndouble speed(double d, double mu)\n{\n  const double g = 9.81;\n  final double des = 10 * 6 * 6 * 2 * mu * g * 10 * 6 *6 * 2 * mu * g +\n      4 * 100 * d * 6 * 6 * 6 * 6 * 2 * mu * g;\n  return (-10 * 6 * 6 * 2 * mu * g + sqrt(des)) \/ (2 * 100);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74292,"user_id":53,"body":"import \"dart:math\";\n\ndouble dist(double v, double mu)\n{    \n    var u = v * 5 \/ 18;\n    return u + (u * u) \/ (2 * mu *  9.81); \n}\n\ndouble speed(double d, double mu)\n{   \n    var b = -2 * mu * 9.81;\n    return 3.6 * (b + sqrt(b * b - 4 * b * d)) \/ 2;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"566543703c72200f0b0000c9":[{"id":74293,"user_id":492,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n    double dt = tm \/ n;\n    List<double> s = new List<double>.filled(n+1, 0); s[0] = s0.toDouble();\n    List<double> i = new List<double>.filled(n+1, 0); i[0] = i0.toDouble();\n    List<double> r = new List<double>.filled(n+1, 0); r[0] = 0.0;\n    int k = 0;\n    double mx = -1;\n    while (k < n) {\n        s[k+1] = s[k] - dt * b * s[k] * i[k];\n        i[k+1] = i[k] + dt * (b * s[k] * i[k] - a * i[k]);\n        r[k+1] = r[k] + dt * i[k] * a;\n        if (i[k+1] > mx) mx = i[k+1];\n        k++;\n    }\n    return mx.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74294,"user_id":null,"body":"int epidemic(int simulationLength, int segments, int s0, int i0, double b, double a) {\n  double deltaTime = simulationLength \/ segments;\n\n  List<double> sList = [s0.toDouble()];\n  List<double> iList = [i0.toDouble()];\n  List<double> rList = [0];\n\n  for(int time = 1; time <= segments; time++) {\n    sList.add(sList[time - 1] - deltaTime * b * sList[time - 1] * iList[time - 1]);\n    iList.add(iList[time - 1] + deltaTime * (b * sList[time - 1] * iList[time - 1] - a * iList[time - 1]));\n    rList.add(rList[time - 1] + deltaTime * iList[time - 1] * a);\n  }\n\n  iList.sort();\n  \n  return iList.last.floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74295,"user_id":null,"body":"import 'dart:math';\n\nint epidemic(int tm, int n, int s0, int i0, double b, double a) {\n  var dt = tm \/ n;\n  var s = <double>[s0.toDouble()];\n  var i = <double>[i0.toDouble()];\n  var r = <double>[0];\n\n  for (var k = 0; k < n - 1; k++) {\n    s.add(s[k] - dt * b * s[k] * i[k]);\n    i.add(i[k] + dt * (b * s[k] * i[k] - a * i[k]));\n    r.add(r[k] + dt * i[k] * a);\n  }\n  return i.reduce((value1, value2) => max(value1, value2)).truncate();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74296,"user_id":null,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n  var s = s0.toDouble();\n  var i = i0.toDouble();\n  var r = 0.0;\n  var dt = tm \/ n;\n  \n  var maxI = i;\n  \n  for (int j = 1; j <= n; j++) {\n    var sj = s - dt * b * s * i;\n    var ij = i + dt * (b * s * i - a * i);\n    var rj = r + dt * i * a;\n    \n    s = sj;\n    i = ij;\n    r = rj;\n    \n    if (i > maxI) {\n      maxI = i;\n    }\n  }\n  \n  return maxI.floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74297,"user_id":null,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n  var s = s0.toDouble();\n  var i = i0.toDouble();\n  var sNext = 0.0;\n  var iNext = 0.0;\n  var max = 0.0;\n  \n  for (var k = 0; k < n; k++) {\n    sNext = s - (tm\/n) * b * s * i;\n    iNext = i + (tm\/n) * (b * s * i - a * i);\n    if (iNext > max) max = iNext;\n    s = sNext;\n    i = iNext;\n  }\n  return max.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74298,"user_id":null,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n  var sPrev = s0.toDouble();\n  var iPrev = i0.toDouble();\n  var dt = tm\/n;\n  var s = 0.0;\n  var i = 0.0;\n  var iMax = 0.0;\n  for(int k = 0; k < n; k++){\n      s = sPrev - dt * b * sPrev * iPrev;\n      i = iPrev + dt * (b * sPrev * iPrev - a * iPrev);\n      if(i > iMax) iMax = i;\n      sPrev = s;\n      iPrev = i;\n    }\n    return iMax.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74299,"user_id":null,"body":"import \"dart:math\";\n\nint epidemic(int tm, int n, int s0, int i0, double b, double a) {\n    \/*\n    tm - \u043a\u043e\u043b-\u0432\u043e \u0434\u043d\u0435\u0439\n    n - \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\n    s0 - \u043a\u043e\u043b-\u0432\u043e \u0437\u0434\u043e\u0440\u043e\u0432\u044b\u0445 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435\n    i0 - \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0444\u0438\u0446\u0438\u0440\u043e\u0430\u0432\u043d\u043d\u044b\u0445 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435\n    b - \u043a\u043e\u043b-\u0432\u043e \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0442\u044c \u0431\u043e\u043b\u0435\u0437\u043d\u044c\n    a - \u0432\u044b\u0437\u0434\u043e\u0440\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0448\u0438\u0435\n    \n    s(t) - \u0442\u0435 \u043a\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0431\u043e\u043b\u0435\u0442\u044c \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n    r(t) - \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0438\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n    i(t) - \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0448\u0438\u0435 \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\n    \n    \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u0431\u043e\u043b\u0435\u0432\u0448\u0438\u0445\n    \n    (I)    S[k+1] = S[k] - dt * b * S[k] * I[k]\n    (II)   I[k+1] = I[k] + dt * (b * S[k] * I[k] - a * I[k])\n    (III)  R[k+1] = R[k] + dt * I[k] *a\n    \n    *\/\n    List<int> infected = [];\n    List<double> args = [tm\/n, s0.toDouble(), i0.toDouble(), b, a];\n    \n  double prevS = args[1];\n  double prevI = args[2];    \n  double prevR = 0;\n    \n  double currS;\n  double currI;\n  double currR;\n  \n  for(double i = 0; i<=n; i+=args[0]){\n    currS = prevS - args[0] * args[3] * prevS * prevI;\n    currI = prevI + args[0] * (args[3] * prevS * prevI - args[4] * prevI);\n    currR = prevR + args[0] * prevI * args[4];\n    \n    infected.add(currI.truncate());\n    \n    prevS = currS;\n    prevI = currI;\n    prevR = currR;\n    }\n    \n    int maxI = infected.reduce(max);\n  \n    return maxI;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74300,"user_id":null,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n    \/\/ your code\n    List<double> sus = [];\n    List<double> inf = [];\n    List<double> ref = [];\n    double dt = tm\/n; \n    double sInit = s0 - dt*b*s0*i0;\n    double iInit = i0 + dt*(b*s0*i0 - a*i0);\n    double rInit = dt*a* iInit;\n    sus.add(sInit);\n    inf.add(iInit);\n    ref.add(rInit);\n  \n    print(sus);\n    print(inf);\n    for(int i = 1; i<= s0; i++){\n      sus.insert(i,sus[i-1] - dt*b*sus[i-1]*inf[i-1]);\n      inf.insert(i, inf[i-1] + dt*(b*sus[i-1]*inf[i-1] - a*inf[i-1]));\n      ref.insert(i, ref[i-1] + dt * inf[i-1]*a);\n    }\n  inf.sort();\n\n  return inf.last.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74301,"user_id":null,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n  var suspected = <double>[s0.toDouble()];\n  var infected = <double>[i0.toDouble()];\n  var recovered = <double>[0];\n\n  var dt = tm \/ n;\n\n  for (var k = 0; k < n; k++) {\n    var sK = suspected[k];\n    var iK = infected[k];\n    var rK = recovered[k];\n\n    \/\/ (I)    S[k+1] = S[k] - dt * b * S[k] * I[k]\n    \/\/ (II)   I[k+1] = I[k] + dt * (b * S[k] * I[k] - a * I[k])\n    \/\/ (III)  R[k+1] = R[k] + dt * I[k] *a\n    var sK1 = sK - (dt * b * sK * iK);\n    var iK1 = iK + (dt * (b * sK * iK - a * iK));\n    var rK1 = rK + (dt * iK * a);\n\n    suspected.add(sK1);\n    infected.add(iK1);\n    recovered.add(rK1);\n  }\n\n  infected.sort();\n\n  return infected.last.toInt();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74302,"user_id":null,"body":"int epidemic(int tm, int n, int s0, int i0, double b, double a) {\n  int result = 0;\n\n  final dt = tm \/ n;\n  double s = s0.toDouble();\n  double i = i0.toDouble();\n  double r = 0;\n  for (int j = 1; j <= n; j++) {\n    final prevS = s;\n    final prevI = i;\n    final prevR = r;\n    s = prevS - dt * b * prevS * prevI;\n    i = prevI + dt * (b * prevS * prevI - a * prevI);\n    r = prevR + dt * prevI * a;\n    if (result < i) {\n      result = i.ceil();\n    }\n  }\n\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5667e8f4e3f572a8f2000039":[{"id":74303,"user_id":null,"body":"String accum(String str) {\n  var finalString = [];\n  for(int i=0; i<str.length; i++) {\n    finalString.add((str[i].toUpperCase()) + (str[i].toLowerCase() * i));\n  }\n  \n  return finalString.join('-');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74304,"user_id":null,"body":"const NullArgumentErrorMessage = 'Argument cannot be null';\nconst InvalidArgumentErrorMessage =\n    'Argument must only include letters from the alphabet';\n\n\/\/\/ Returns a string that accumulates every character in [input]\n\/\/\/ by its position in [input].\n\/\/\/\n\/\/\/ [input] includes only letters from __a-z__ and __A-Z__.\n\/\/\/\n\/\/\/ _Examples:_\n\/\/\/ ```dart\n\/\/\/ accum(\"abcd\") == \"A-Bb-Ccc-Dddd\"\n\/\/\/ accum(\"RqaEzty\") == \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\n\/\/\/ accum(\"cwAt\") == \"C-Ww-Aaa-Tttt\"\n\/\/\/ ```\nString accum(String input) {\n  \/\/ check for null\n  if (input == null) {\n    throw ArgumentError(NullArgumentErrorMessage);\n  }\n  \/\/ check for invalid input\n  if (RegExp('[^a-zA-Z]').hasMatch(input)) {\n    throw ArgumentError(InvalidArgumentErrorMessage);\n  }\n\n  return input\n      .split('')\n      .asMap()\n      .map(_charToFormattedaccumulation)\n      .values\n      .toList()\n      .join('-');\n}\n\n\/\/\/ Returns a [MapEntry] with [index] as key and the accumulated [char] as value.\n\/\/\/\n\/\/\/ The [char] is repeated by [index] with the first letter upper case\n\/\/\/ and the rest lower case\n\/\/\/\n\/\/\/ _Examples:_\n\/\/\/ ```dart\n\/\/\/ _charToFormattedaccumulation(1, 'a') -> MapEntry(1, 'A')\n\/\/\/ _charToFormattedaccumulation(4, 'B') -> MapEntry(4, 'Bbbb')\n\/\/\/ _charToFormattedaccumulation(3, 'c') -> MapEntry(3, 'Ccc')\n\/\/\/ ```\nMapEntry<int, String> _charToFormattedaccumulation(int index, String char) {\n  return MapEntry(index, char.toUpperCase() + (char.toLowerCase() * index));\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74305,"user_id":645,"body":"String accum(String str) => str.split('').asMap().map((i, x) => MapEntry(i, x.toUpperCase() + (x.toLowerCase() * i))).values.toList().join('-');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74306,"user_id":null,"body":"String accum(String str) {\n var finalText = \"\";\n  var splittingChar = \"-\";\n  var _str = str.toLowerCase();\n\nfor (var i = 0; i < _str.length; i++) {\n  var currentChar = _str[i];\n\n  for (var j = 0; j <= i; j++) {\n    finalText += j == 0 ? currentChar.toUpperCase() : currentChar;\n  }\n\n  finalText += splittingChar;\n}\n\n  return finalText.substring(0, finalText.length - 1);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74307,"user_id":null,"body":"String accum(String str) {\n  String accumString = '';\n  for(int i = 0; i < str.length; i++){\n    String temp = str[i].toLowerCase() * (i + 1);\n    accumString += temp[0].toUpperCase() + temp.substring(1);\n    if( i != str.length - 1) {\n      accumString += '-';\n    }\n  }\n  return accumString;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74308,"user_id":null,"body":"String accum(String str) {\n  String returningValue = '';\n  for (int i = 0; i < str.length; i++) {\n    returningValue += str[i].toUpperCase() + (str[i] * i).toLowerCase() + '-';\n  }\n  return returningValue.substring(0, returningValue.length - 1);\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74309,"user_id":null,"body":"String accum(String str) {\n  var strs = new Map();\n  var list = new List();\n  int i = 0;\n  for ( var j = 0; j < str.length; j++){\n    strs[i] = str[j];\n    i++;\n  }\n  \n  strs.forEach((k,v) => list.add(v.toUpperCase() + v.toLowerCase()*k));\n  return list.join(\"-\");\n  \n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74310,"user_id":null,"body":"extension KataSolverString on String {\n  \/\/ Showcasing Dart regexes!\n  \n  \/\/ The replaceAllMapped method uses a regular Dart expression for replacement.\n  \/\/ You don't need to worry about using regex syntax.\n  \/\/ Just write an ordinary Dart function on your Match object.\n  String repeatLetters() => this.replaceAllMapped(\n    RegExp(r'\\w'),\n    (Match m) => m[0].toUpperCase() + m[0].toLowerCase() * m.start,\n  );\n\n  \/\/ String interpolation is a convenient trick.\n  String addDashes() => this.replaceAllMapped(\n    RegExp(r'([a-zA-Z])([A-Z])'),\n    (Match m) => \"${m[1]}-${m[2]}\",\n  );\n}\n\n\/\/ Split your regexes up into manageable units!\n\/\/ You can chain them using Dart's extension methods.\nString accum(String str) => str\n  .repeatLetters()\n  .addDashes();","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74311,"user_id":250,"body":"String accum(String str) {\n  List<String> r = [];\n  \n  for (int i = 0; i < str.length; i++) {\n    var c = str[i];\n    r.add(c.toUpperCase() + c.toLowerCase() * i);\n  }\n  \n  return r.join(\"-\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74312,"user_id":null,"body":"String accum(String str) {\n    var sb = StringBuffer();\n\n    for (var i = 0; str.length > i; i++) {\n      sb\n        ..write(str[i].toUpperCase())\n        ..write(str[i].toLowerCase() * i);\n      if (i + 1 != str.length) sb.write('-');\n    }\n\n    return sb.toString();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"566be96bb3174e155300001b":[{"id":74313,"user_id":null,"body":"int max_ball(int v0) {\n  int result = 0;\n  double h = 0;\n  for (int t = 0;; t++) {\n    double tmp = (v0 * 1000 \/ 3600) * t \/ 10 - 0.5 * (9.81 * t \/ 10 * t \/ 10);\n    if (tmp < h) return result - 1;\n    h = tmp;\n    result++;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74314,"user_id":492,"body":"int max_ball(int v0) {\n    return (v0 \/ 3.5316).round();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74315,"user_id":null,"body":"int max_ball(int v) {\n  final initSpeed = v * 1000 \/ 36;\n  num prevHeight, height = 0, time = 0;\n  do {\n    time += 1;\n    prevHeight = height;\n    height = initSpeed * time - 5 * 9.81 * time * time;\n  } while (prevHeight <= height);\n  return time - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74316,"user_id":null,"body":"int max_ball(int v0) => (v0.toDouble() \/ 3.5316).round();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74317,"user_id":null,"body":"int max_ball(int v0) {\n  \/\/ your code\n    return (v0\/(3.6*9.81) * 10).round();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74318,"user_id":null,"body":"const gravity = 9.81;\n\nint max_ball(int v0) {\n  int heighestTime = 0;\n  double heighestValue = 0;\n  for (var i = 0; i < 100; i++) {\n\n    if (height(i, v0) > heighestValue) {\n      heighestValue = height(i, v0);\n      heighestTime = i;\n    }\n  }\n\n  return heighestTime;\n}\n\n\ndouble height(int seconds, int velocityKM) {\n  var velocityMS = velocityKM * 1000 \/ 60 \/ 60;\n  var tenthSecond = seconds \/ 10;\n\n  return (velocityMS * tenthSecond) - 0.5 * gravity * tenthSecond * tenthSecond;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74319,"user_id":null,"body":"const gravity = 9.81;\n\nint max_ball(int v0) {\n  int heighestTime = 0;\n  double heighestValue = 0;\n  for (var i = 0; i < 100; i++) {\n\n    if (height(i, v0) > heighestValue) {\n      heighestValue = height(i, v0);\n      heighestTime = i;\n    }\n  }\n\n  return heighestTime;\n}\n\nvoid main() {\n  print(max_ball(25));\n}\n\ndouble height(int seconds, int velocityKM) {\n  var velocityMS = velocityKM * 1000 \/ 60 \/ 60;\n  var tenthSecond = seconds \/ 10;\n\n  return (velocityMS * tenthSecond) - 0.5 * gravity * tenthSecond * tenthSecond;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74320,"user_id":null,"body":"int max_ball(int v0) => (v0 * 100 \/ 353.16).round();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74321,"user_id":null,"body":"const g = 9.81; \/\/ m\/s**2\n\nint max_ball(int v0) {\n  \/\/ v0 - km\/h\n  final v = v0 \/ 3.6; \/\/ m\/s\n  \n  var t = 0;\n  var h = 0.0;\n  var ph = 0.0;\n  \n  while (h >= ph) {\n    ph = h;\n    t += 1;\n    h = v * t \/ 10 - 0.5 * g * t * t \/ 100;\n  }\n  \n  return t - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74322,"user_id":null,"body":"int max_ball(int v0) {\n  double speed = v0 * 1000 \/ 3600;\n  double height = 0;\n  int count = 0;\n  double maxHeight = -1;\n  do {\n    height = speed * count * 0.1 - 0.5 * 9.81 * count * 0.1 * count * 0.1;\n    if (maxHeight < height) {\n      maxHeight = height;\n      count++;\n    }\n  } while (height >= maxHeight);\n\n  return --count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"566fc12495810954b1000030":[{"id":74323,"user_id":null,"body":"int nb_dig(int n, int d) {\n  var count = 0;\n  for (var i = 0; i <= n; i++) {\n    count += d.toString().allMatches((i*i).toString()).length;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74324,"user_id":null,"body":"int nb_dig(int n, int d) =>\n    '$d'.allMatches([for (var i = 0; i <= n; i += 1) i * i].join()).length;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74325,"user_id":null,"body":"int nb_dig(int n, int d) {\n    var counter = d == 0 ? 1 : 0;\n\n    var numbers = <int>[];\n    for (var i = 0; i <= n; i++) {\n      numbers.add(i * i);\n    }\n\n    for (var n in numbers) {\n      while (n > 0) {\n        if (n % 10 == d) {\n          counter++;\n        }\n        n ~\/= 10;\n      }\n    }\n\n    return counter;\n  }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74326,"user_id":null,"body":"int nb_dig(int n, int d) {\n  int result = 0;\n  for(int i = 0;i <= n;i++){\n    (i * i).toString().split('').map(int.parse).forEach((e) {\n      if(e == d) result++;\n    });\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74327,"user_id":null,"body":"int nb_dig(int n, int b) {\n    List<int> kk = [];\n    for (var i = 0; i <= n; i++) {\n      final d = i * i;\n      kk.add(d);\n    }\n    List<int> kkcontainb = [];\n    List<int> howmuchb = [];\n    for (var i = 0; i < kk.length; i++) {\n      int a = kk[i];\n      String y = a.toString();\n      int c = '$b'.allMatches(y).length;\n      for (var i = 0; i < c; i++) {\n        howmuchb.add(i);\n      }\n    }\n\n    return howmuchb.length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74328,"user_id":null,"body":"int nb_dig(int n, int d) {\n  int result = 0;\n  for (int i = 0; i <= n; i++) {\n    (i * i).toString().split('').forEach((e) {\n      if (e == d.toString()) result++;\n    });\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74329,"user_id":null,"body":"int nb_dig(int n, int d) {\n  List<int> _squares = List<int>.generate(n + 1, (int num) => num * num);\n  \n  int _dsCount = 0;\n  \n  _squares.forEach((_square){\n \n    _square.toString().runes.forEach((int rune) {\n      \n        var char = String.fromCharCode(rune);\n\n        if(int.parse(char.toString()) == d)\n          _dsCount += 1;\n      \n    });\n  });\n  \n  return _dsCount;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74330,"user_id":null,"body":"int nb_dig(int n, int d) {\n  \/\/ your code\n  var squares = [];\n  int count = 0;\n  \n  for(int i = 0; i <= n; i++) squares.add(i * i);\n  \n  for(int i = 0; i < squares.length; i++) {\n      count += (d.toString()).allMatches((squares[i].toString())).length;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74331,"user_id":null,"body":"int nb_dig(int n, int d) => d.toString().allMatches(List<String>.generate(n+1, (int index) => (index * index).toString()).join(\"\")).length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74332,"user_id":null,"body":"\/\/ Count the Digit\nint nb_dig(int n, int d) {\n  int counter = 0;\n  for (int i = 0; i <= n; i++) {\n    int squared = i * i;\n    String origin = squared.toString();\n    String modified = origin.replaceAll(d.toString(), \"\");\n    counter += origin.length - modified.length;\n  }\n  return counter;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56747fd5cb988479af000028":[{"id":74333,"user_id":null,"body":"String get_middle(String s) {\n  final middleIndex = s.length ~\/ 2;\n  return s.length.isOdd ? s[middleIndex] : s.substring(middleIndex - 1, middleIndex + 1);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74334,"user_id":null,"body":"String get_middle(String s) => (s.length.isOdd) ? s[s.length~\/2] : s[s.length~\/2-1] + s[s.length~\/2];","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74335,"user_id":null,"body":"String get_middle(String s) {\n  if (s.length % 2 == 0)\n    return \"${s[(s.length ~\/ 2)-1]}${s[s.length ~\/ 2]}\";\n  return \"${s[s.length ~\/ 2]}\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74336,"user_id":null,"body":"String get_middle(String s) {\n  if (s.length % 2 == 0) {\n    var startIndex = (s.length ~\/ 2) - 1;\n    var endIndex = (s.length ~\/ 2) + 1;\n    return s.substring(startIndex, endIndex);\n  } \n  else if (s.length == 1) {\n    return s;\n  } \n  else {\n    var startIndex = s.length ~\/ 2;\n    var endIndex = (s.length ~\/ 2) + 1;\n    return s.substring(startIndex, endIndex);\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74337,"user_id":null,"body":"String get_middle(String s) {\n  return s.length.isEven ? (s[s.length ~\/ 2 - 1] + s[s.length ~\/ 2]) : s[s.length ~\/ 2];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74338,"user_id":null,"body":"String get_middle(String s)=> s.length.isEven ? s.substring(s.length~\/2-1,s.length~\/2+1) : s.substring((s.length~\/2),s.length~\/2+1);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74339,"user_id":null,"body":"String get_middle(String s) {\nif(s.length>0 && s.length<1000){\nif(s.length.isOdd)\nreturn '${s[(s.length ~\/ 2)]}';\nreturn '${s[(s.length~\/2)-1]}' + '${s[(s.length~\/2)]}';\n}\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74340,"user_id":null,"body":"String get_middle(String s) {\n  int mid = s.length ~\/ 2;\n  return s.length % 2 == 0 ? s.substring(mid - 1, mid + 1) : s[mid];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74341,"user_id":null,"body":"String get_middle(String s) {\n  \/\/Code goes here!\n  List strArr = [];\n  strArr =  s.split(\"\");\n  int middle = strArr.length ~\/ 2;\n  return strArr.length.isEven?strArr[middle-1]+strArr[middle]:strArr[middle];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74342,"user_id":null,"body":"String get_middle(String s) {\n  var index = (s.length \/ 2).floor();\n  return s.length.isEven ? s[index - 1] + s[index] : s[index];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"567501aec64b81e252000003":[{"id":74343,"user_id":null,"body":"String wallpaper(double l, double w, double h) {\n  final numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n  if (l == 0 || w == 0 || h == 0) return 'zero';\n  final length = (2 * (w + l)\/0.52) * h * 1.15;\n  final numberOfRolls = (length \/ 10).ceil();\n  return numbers[numberOfRolls];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74344,"user_id":null,"body":"var numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n\nString wallpaper(double l, double w, double h) {\n  if (l == 0.0 || w == 0.0 || h == 0.0) return \"zero\";\n  return numbers[((l*h*2+w*h*2)\/(0.52*10)*1.15).ceil()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74345,"user_id":645,"body":"String wallpaper(double l, double w, double h) => l == 0 || w == 0 ? 'zero' : [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"][(2.3 * (l * h + w * h) \/ 5.2).ceil()];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74346,"user_id":null,"body":"String wallpaper(double l, double w, double h) {\n List numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\nif (l == 0 || w == 0 || h == 0){\n  return \"zero\";\n}\n  var answ = ((((((l+w)*2)\/0.52)*h)\/10)*1.15).ceil();\n  answ = answ.toInt();\n  return numbers[answ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74347,"user_id":null,"body":"String wallpaper(double l, double w, double h) {\n  double result = l == 0 || w == 0 ? 0 : (((l * h * 2) + (w * h * 2)) * 1.15 \/ 52 * 10);\n  return result == 0 ? 'zero' : [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"][result.ceil()]; \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74348,"user_id":null,"body":"var numbers = [\n  \"zero\",\n  \"one\",\n  \"two\",\n  \"three\",\n  \"four\",\n  \"five\",\n  \"six\",\n  \"seven\",\n  \"eight\",\n  \"nine\",\n  \"ten\",\n  \"eleven\",\n  \"twelve\",\n  \"thirteen\",\n  \"fourteen\",\n  \"fifteen\",\n  \"sixteen\",\n  \"seventeen\",\n  \"eighteen\",\n  \"nineteen\",\n  \"twenty\",\n];\n\nString wallpaper(double l, double w, double h) => (l == 0 || w == 0)\n    ? numbers[0]\n    : numbers[(2 * h * (l + w) * 1.15 \/ 5.2).ceil()];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74349,"user_id":null,"body":"String wallpaper(double l, double w, double h) {\n   if (l <= 0 || w <= 0 || h <= 0) return 'zero';\n List<String> numbers = [\n      \"zero\",\n      \"one\",\n      \"two\",\n      \"three\",\n      \"four\",\n      \"five\",\n      \"six\",\n      \"seven\",\n      \"eight\",\n      \"nine\",\n      \"ten\",\n      \"eleven\",\n      \"twelve\",\n      \"thirteen\",\n      \"fourteen\",\n      \"fifteen\",\n      \"sixteen\",\n      \"seventeen\",\n      \"eighteen\",\n      \"nineteen\",\n      \"twenty\"\n    ];\n    double rolls = 0.52 * 10;\n    int result = ((((l * h * 2) + (w * h * 2)) \/ (rolls)) * 1.15).ceil();\n\n    return numbers.elementAt(result).toString();}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74350,"user_id":null,"body":"String wallpaper(double l, double w, double h) {\n  final numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n  \n  if (l == 0 || w == 0 || h == 0) return numbers[0];\n  \n  final areaPerRoll = 0.52 * 10;\n  final totalArea = (2 * h * l) + (2 * h * w);\n  final requiredRollCount = (totalArea * 1.15 \/ areaPerRoll).ceil();\n  return numbers[requiredRollCount];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74351,"user_id":243,"body":"String wallpaper(double l, double w, double h) {\n  final numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n  return numbers[(2 * (l+w) * h \/ 5.2 * 1.15).ceil()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74352,"user_id":null,"body":"const numbers = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n\nString wallpaper(double l, double w, double h) {\n  double totalToBuy;\n  if (l * w * h == 0.0) {\n    totalToBuy = 0.0;\n  } else {\n    totalToBuy = 2 * h * (l + w) * 1.15;\n  }\n  int rolls = (totalToBuy \/ (0.52 * 10)).ceil();\n  return numbers[rolls];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"568dcc3c7f12767a62000038":[{"id":74353,"user_id":527,"body":"bool set_alarm(bool employed, bool vacation) {\n  return employed && !vacation;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74354,"user_id":645,"body":"bool set_alarm(bool employed, bool vacation) => employed && !vacation;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74355,"user_id":null,"body":"bool set_alarm(bool a, bool b) => a && !b;\n\n\n ","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74356,"user_id":null,"body":"set_alarm(bool employed, bool vacation) => employed && !vacation;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74357,"user_id":null,"body":"bool set_alarm(bool e, bool v) => e && !v;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74358,"user_id":null,"body":"bool set_alarm(employed,vacation)=>employed && vacation==false?true:false;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74359,"user_id":null,"body":"bool set_alarm(bool employed, bool vacation) {\n  return (employed & !vacation) ? true : false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74360,"user_id":null,"body":"bool set_alarm(bool employed, bool vacation){\n  if(employed && vacation) return false;\n  return employed == true?true :false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74361,"user_id":null,"body":"bool set_alarm(bool employed, bool vacation) {\n  if (employed){\n    if (!vacation){\n      return true;\n    }\n  }\n  return false;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74362,"user_id":null,"body":"bool set_alarm(bool employed, bool vacation) => employed == true && vacation == false ? true : false;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56a5d994ac971f1ac500003e":[{"id":74363,"user_id":null,"body":"String longest_consec(strarr, k) {\n  String current = '';\n  for (int i = 0; i < strarr.length - k + 1; ++i) {\n    String temp = '';\n    for (int j = 0; j < k; ++j) {\n      temp += strarr[i+j];\n    }\n    if (temp.length > current.length) {\n      current = temp;\n    }\n  }\n  return current;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74364,"user_id":null,"body":"String longest_consec(strarr, k) {\n  if (k <= 0) return '';\n  String maxstr = '';\n  for (int i = 0; i <= strarr.length - k; i++) {\n    String s = strarr.sublist(i, i + k).join('');\n    maxstr = s.length > maxstr.length ? s : maxstr;\n  }\n  return maxstr;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74365,"user_id":null,"body":"String longest_consec(strarr, k){\n  if (strarr.isEmpty || strarr.length < k || k < 1) return '';\n  return strarr\n      .asMap()\n      .map((key, value) => key + k <= strarr.length\n          ? MapEntry(key, strarr.sublist(key, key + k).join())\n          : MapEntry(key, ''))\n      .values\n      .toList()\n      .reduce((a, b) => a.length < b.length ? b : a);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74366,"user_id":null,"body":"String longest_consec(List strarr, k) {\n  if(strarr.isEmpty || k> strarr.length || k<=0) return \"\";\n  \n    \n  return List.generate(\n    strarr.length, \n   (index)=> index+k > strarr.length?\"\":strarr.sublist(index, index+k)\n    .join())\n    .reversed\n    .toList()\n    .fold(\"\",\n          ( a, b)=> a.length > b.length? a:b);\n  \n\n}\n\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74367,"user_id":null,"body":"import 'dart:math';\n\nString longest_consec(List<dynamic> strarr, int k) {\n  if (strarr.length < k || k < 1) return '';\n  List<int> lengths = strarr\n      .asMap()\n      .entries\n      .map<int>((e) => (e.key < strarr.length - k + 1) ? strarr.skip(e.key).take(k).fold(0, (a, b) => a + b.length) : 0)\n      .toList();\n  int index = lengths.indexOf(lengths.reduce(max));\n  return strarr.skip(index).take(k).join();\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74368,"user_id":null,"body":"String longest_consec(strarr, k) {\n  if (strarr.length == 0 || k > strarr.length || k <= 0) return \"\";\n  \n  var maxLen = 0;\n  var result = \"\";\n  \n  for (var i = 0; i < strarr.length - k + 1; i++) {\n    var consec = \"\";\n    for (var f = 0; f < k; f++ ) {\n      consec += strarr[i + f];\n    }\n    \n    if (consec.length > maxLen) {\n      result = consec;\n      maxLen = consec.length;\n    }\n  } \/\/ for\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74369,"user_id":null,"body":"String longest_consec(strarr, k) {\n  if (strarr.length == 0 || k > strarr.length || k<= 0) return \"\";\n  List<String> concStrings = List<String>();\n  for (int i = 0; i < strarr.length - k + 1; i++) {\n    String concStr = \"\";\n      for (int b = i; b < i + k; b++) {\n        concStr +=strarr[b];\n      }\n    concStrings.add(concStr);\n  }\n  String longestStr = \"\";\n  concStrings.forEach((str) {\n    if (str.length > longestStr.length) longestStr = str;\n  });\n  return longestStr;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74370,"user_id":null,"body":"import 'dart:math';\n\nString longest_consec(List strarr, int k) {\n  if (strarr.isEmpty || strarr.length < k || k <= 0) return '';\n\n  final list = <String>[];\n\n  for (var i = 0; i < strarr.length - (k - 1); i++) {\n    final String word = strarr.sublist(i, i + k).join();\n    list.add(word);\n  }\n\n  final int longest = list.map((word) => word.length).reduce(max);\n\n  return list.firstWhere((word) => word.length == longest);\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74371,"user_id":null,"body":"String longest_consec(strarr, k) {\n  var longest = '';\n  for (var i = 0; i <= strarr.length - k; i++) {\n    var local = '';\n    for (var j = i; j < i + k; j++) {\n      local += strarr[j];\n    }\n\n    if (local.length > longest.length) {\n      longest = local;\n    }\n  }\n  return longest;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74372,"user_id":null,"body":"String longest_consec(List<dynamic> strarr, int k) {\n  if (strarr.length == 0 || k > strarr.length || k <= 0) return '';\n  int maxDistance = k;\n  String longestString = '';\n  for (var i = 0; i < strarr.length; i++) {\n    if (i + maxDistance > strarr.length) break;\n    var tempStr = strarr.getRange(i, i + maxDistance).join();\n    longestString = longestString.length >= tempStr.length ? longestString : tempStr;\n  }\n  return longestString;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56bdd0aec5dc03d7780010a5":[{"id":74373,"user_id":null,"body":"int next_higher(int n) {\n  var i = n + 1;\n  while('1'.allMatches(n.toRadixString(2)).length != '1'.allMatches(i.toRadixString(2)).length){\n    i++;\n  }\n  return i;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74374,"user_id":645,"body":"int next_higher(int n) {\n  int o = n & -n,\n      v = n + o,\n      p = (n ^ v) ~\/ o >> 2;\n  return n == 0 ? 0 : v | p;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74375,"user_id":null,"body":"int next_higher(int n) {\n  String number = '0${n.toRadixString(2)}';\n  \/\/\n  int posPrevNull = number.lastIndexOf('01');\n  number = number.replaceRange(posPrevNull, posPrevNull + 2, '10');\n  \/\/\n  String numberLeft = number.substring(0, posPrevNull + 2);\n  final numbersRight = number.substring(posPrevNull + 2).split('')..sort();\n  String numberRight = numbersRight.join();\n  number = numberLeft + numberRight;\n  \/\/\n  return int.parse(number, radix: 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74376,"user_id":null,"body":"int next_higher(int n) {\n  List<String> binary = '0${n.toRadixString(2)}'.split('');\n  int lastOne = binary.lastIndexOf('1');\n  int lastZero = binary.sublist(0, lastOne).lastIndexOf('0');\n  binary[lastZero] = '1';\n  binary[lastOne] = '0';\n  binary =\n      binary.sublist(0, lastZero + 1) + (binary.sublist(lastZero + 1)..sort());\n\n  return int.parse(binary.join(), radix: 2);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74377,"user_id":null,"body":"import 'dart:core';\nString replaceCharAt(String oldString, int index, String newChar) {\n  return oldString.substring(0, index) +\n      newChar +\n      oldString.substring(index + 1);\n}\n\nint next_higher(int n) {\n  String binStr = n.toRadixString(2);\n\n  int startIndex = -1;\n  bool complete = false;\n  int count_1 = 0;\n  for (int i = binStr.length - 1; i >= 0; i--) {\n    if (binStr[i] == '1') {\n      count_1 += 1;\n    } else \/\/ 0\n    {\n      if (count_1 > 0) {\n        binStr = replaceCharAt(binStr, i, \"1\");\n        binStr = replaceCharAt(binStr, i + 1, \"0\");\n        complete = true;\n        startIndex = i + 2;\n        break;\n      }\n    }\n  }\n\n  if (!complete) {\n    binStr = \"1${replaceCharAt(binStr, 0, \"0\")}\";\n    startIndex = 1;\n  }\n\n  for (int i = startIndex; i < binStr.length - 1; i++) {\n    for (int j = i + 1; j < binStr.length; j++) {\n      if (binStr[i] == '1' && binStr[j] == '0') {\n        binStr = replaceCharAt(binStr, i, \"0\");\n        binStr = replaceCharAt(binStr, j, \"1\");\n      }\n    }\n  }\n\n  return int.parse(binStr, radix: 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74378,"user_id":null,"body":"int next_higher(int n) {\n    int rightOne, next_higherOneBit, rightOnesPattern, next = 0;\n\n    if (n > 0) {\n      rightOne = n & -n;\n      next_higherOneBit = n + rightOne;\n      rightOnesPattern = n ^ next_higherOneBit;\n      rightOnesPattern = (rightOnesPattern) ~\/ rightOne;\n      rightOnesPattern >>= 2;\n      next = next_higherOneBit | rightOnesPattern;\n    }\n    return next;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74379,"user_id":null,"body":"int next_higher(int n) {\n  var temp = n + 1;\n  while ('1'.allMatches(temp.toRadixString(2)).length !=\n      '1'.allMatches(n.toRadixString(2)).length) {\n    temp++;\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74380,"user_id":null,"body":"int next_higher(int n) {\n  var binary_base = n.toRadixString(2);\n  List<String> binary_list = binary_base.split(\"\");\n  \n  for(int i = binary_list.length - 1; i>=0; i--){\n    if(i == 0){\n      binary_list = [\"1\"] + binary_list;\n      binary_list[1] = \"0\";\n      for(int j=binary_list.length - 1; j>2; j--){\n        if(binary_list[j] == \"0\" && binary_list[j-1] == \"1\"){\n          binary_list[j] = \"1\";\n          binary_list[j-1] = \"0\";\n        }\n      }\n      break;\n    }\n    if(binary_list[i-1] == \"0\" && binary_list[i] == \"1\"){\n      binary_list[i-1] = \"1\";\n      binary_list[i] = \"0\";\n      for(int j=i; j < binary_list.length; j++){\n        if(binary_list[j] == \"1\"){\n          for(int z=binary_list.length - 1; z > j - 1; z--){\n            if(binary_list[z] == \"0\"){\n              var jb = binary_list[j];\n              binary_list[j] = binary_list[z];\n              binary_list[z] = jb;\n            }\n          }\n        }\n      }\n      break;\n    }\n  }\n  \n  return int.parse(binary_list.join(), radix: 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74381,"user_id":null,"body":"String intToBinary(int n){\n  return n.toRadixString(2);\n}\n\nint binaryToInt(String binary){\n  return int.parse(binary, radix: 2);\n}\n\nint next_higher(int n) {\n  String start=intToBinary(n);\n  print(start);\n  int i;\n  for(i=start.length;i>=0;i--){\n    if (start.substring(i-1, i)=='1'){\n      \n      while(i>0&&start.substring(i-1,i)=='1'){\n        i--;\n      }\n      break;\n    }\n  };\n  if(i==0){\n    start='0'+start;\n    int ones=-1,zeros=0;\n    start.split('').forEach((bit)=>{\n      if((bit)=='1'){\n        ones++\n      }else{\n        zeros++\n      }\n    });\n    StringBuffer sb = StringBuffer();\n    \/\/add 1 to front\n    sb.write('1');\n    while(zeros>0){\n      sb.write('0');\n      zeros--;\n    }\n    while(ones>0){\n      sb.write('1');\n      ones--;\n    }\n    return binaryToInt(sb.toString());\n  }\n  else{\n    String rest = start.substring(0,i-1);\n    String change=start.substring(i-1,start.length);\n    int ones=-1,zeros=0;\n    change.split('').forEach((bit)=>{\n      if((bit)=='1'){\n        ones++\n      }else{\n        zeros++\n      }\n    });\n    StringBuffer sb = StringBuffer();\n    \/\/add 1 to front\n    sb.write(rest);\n    sb.write('1');\n    while(zeros>0){\n      sb.write('0');\n      zeros--;\n    }\n    while(ones>0){\n      sb.write('1');\n      ones--;\n    }\n    \n    return binaryToInt(sb.toString());\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74382,"user_id":null,"body":"int next_higher(int number) {\n  List<String> toBinaryString() => number.toRadixString(2).split('');\n  List<String> binaryString = toBinaryString();\n\n  int counterOf1() => binaryString.fold(0, (int sum, String str) => sum + (str == '1' ? 1 : 0));\n  int countOf1 = counterOf1();\n\n  do {\n    number++;\n    binaryString = toBinaryString();\n  } while (countOf1 != counterOf1());\n\n  return int.parse(binaryString.join(''), radix: 2);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56c5847f27be2c3db20009c3":[{"id":74383,"user_id":645,"body":"String subtract_sum(int n) => \"apple\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74384,"user_id":null,"body":"String subtract_sum(int n) {\n  return 'apple';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74385,"user_id":null,"body":"String subtract_sum(int n) {\n  \/\/ always 9 - \"apple\"\n  return \"apple\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74386,"user_id":null,"body":"String subtract_sum(int n) {\n  String newNumber = n.toString();\n  int sumOfDigits = 0;\n  int currentNumber = 0;\n  List<String> listOfFruits = [\n    'kiwi',\n    'pear',\n    'kiwi',\n    'banana',\n    'melon',\n    'banana',\n    'melon',\n    'pineapple',\n    'apple',\n    'pineapple',\n    'cucumber',\n    'pineapple',\n    'cucumber',\n    'orange',\n    'grape',\n    'orange',\n    'grape',\n    'apple',\n    'grape',\n    'cherry',\n    'pear',\n    'cherry',\n    'pear',\n    'kiwi',\n    'banana',\n    'kiwi',\n    'apple',\n    'melon',\n    'banana',\n    'melon',\n    'pineapple',\n    'melon',\n    'pineapple',\n    'cucumber',\n    'orange',\n    'apple',\n    'orange',\n    'grape',\n    'orange',\n    'grape',\n    'cherry',\n    'pear',\n    'cherry',\n    'pear',\n    'apple',\n    'pear',\n    'kiwi',\n    'banana',\n    'kiwi',\n    'banana',\n    'melon',\n    'pineapple',\n    'melon',\n    'apple',\n    'cucumber',\n    'pineapple',\n    'cucumber',\n    'orange',\n    'cucumber',\n    'orange',\n    'grape',\n    'cherry',\n    'apple',\n    'cherry',\n    'pear',\n    'cherry',\n    'pear',\n    'kiwi',\n    'pear',\n    'kiwi',\n    'banana',\n    'apple',\n    'banana',\n    'melon',\n    'pineapple',\n    'melon',\n    'pineapple',\n    'cucumber',\n    'pineapple',\n    'cucumber',\n    'apple',\n    'grape',\n    'orange',\n    'grape',\n    'cherry',\n    'grape',\n    'cherry',\n    'pear',\n    'cherry',\n    'apple',\n    'kiwi',\n    'banana',\n    'kiwi',\n    'banana',\n    'melon',\n    'banana',\n    'melon',\n    'pineapple',\n    'apple',\n    'pineapple',\n  ];\n\n  for (int i = 0; i <= newNumber.length - 1; i++) {\n    sumOfDigits += int.parse(newNumber[i]);\n\n    currentNumber = n - sumOfDigits;\n  }\n\n\n  if (currentNumber != 100 && currentNumber > 100) {\n\n    while (currentNumber > 100) {\n\n      String newNumberInLoop = currentNumber.toString();\n      int sumOfDigitsInLoop = 0;\n\n      for (int j = 0; j <= newNumberInLoop.length - 1; j++) {\n        sumOfDigitsInLoop += int.parse(newNumberInLoop[j]);\n      }\n      currentNumber -= sumOfDigitsInLoop;\n\n\n    }\n  } else {\n    return listOfFruits[currentNumber - 1];\n  }\n\n  return listOfFruits[currentNumber - 1];\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74387,"user_id":null,"body":"String subtract_sum(int n) {\n return \"apple\";\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74388,"user_id":null,"body":"String subtract_sum(int n) {\n  List<int> apple = [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99];\n  List<int> kiwi = [1, 3, 24, 26, 47, 49, 68, 70, 91, 92];\n  List<int> pear = [2, 21, 23, 42, 44, 46, 65, 67, 69, 88];\n  List<int> banana = [4, 6, 25, 29, 48, 50, 71, 73, 92, 94, 96];\n  List<int> melon = [5, 7, 28, 30, 32, 51, 53, 74, 76, 95, 97];\n  List<int> pineapple = [8, 10, 12, 31, 33, 52, 56, 75, 77, 79, 98, 100];\n  List<int> cucumber = [11, 13, 34, 55, 57, 59, 78, 80];\n  List<int> orange = [14, 16, 35, 37, 39, 58, 60, 83];\n  List<int> grape = [15, 17, 19, 38, 40, 61, 82, 84, 86];\n  List<int> cherry = [20, 22, 41, 43, 62, 64, 66, 85, 87, 89];\n  \n  String s = '';\n  while(s.isEmpty){\n    n -= '$n'.split('').map((e) => int.parse(e)).reduce((t, e) => t + e);\n    if(apple.contains(n)) s = 'apple';\n    if(kiwi.contains(n)) s = 'kiwi';\n    if(pear.contains(n)) s = 'pear';\n    if(banana.contains(n)) s = 'banana';\n    if(melon.contains(n)) s = 'melon';\n    if(pineapple.contains(n)) s = 'pineapple';\n    if(cucumber.contains(n)) s = 'cucumber';\n    if(orange.contains(n)) s = 'orange';\n    if(grape.contains(n)) s = 'grape';\n    if(cherry.contains(n)) s = 'cherry';\n  }\n    \n  return s;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74389,"user_id":null,"body":"const fruitsString = '''1-kiwi\n  2-pear\n  3-kiwi\n  4-banana\n  5-melon\n  6-banana\n  7-melon\n  8-pineapple\n  9-apple\n  10-pineapple\n  11-cucumber\n  12-pineapple\n  13-cucumber\n  14-orange\n  15-grape\n  16-orange\n  17-grape\n  18-apple\n  19-grape\n  20-cherry\n  21-pear\n  22-cherry\n  23-pear\n  24-kiwi\n  25-banana\n  26-kiwi\n  27-apple\n  28-melon\n  29-banana\n  30-melon\n  31-pineapple\n  32-melon\n  33-pineapple\n  34-cucumber\n  35-orange\n  36-apple\n  37-orange\n  38-grape\n  39-orange\n  40-grape\n  41-cherry\n  42-pear\n  43-cherry\n  44-pear\n  45-apple\n  46-pear\n  47-kiwi\n  48-banana\n  49-kiwi\n  50-banana\n  51-melon\n  52-pineapple\n  53-melon\n  54-apple\n  55-cucumber\n  56-pineapple\n  57-cucumber\n  58-orange\n  59-cucumber\n  60-orange\n  61-grape\n  62-cherry\n  63-apple\n  64-cherry\n  65-pear\n  66-cherry\n  67-pear\n  68-kiwi\n  69-pear\n  70-kiwi\n  71-banana\n  72-apple\n  73-banana\n  74-melon\n  75-pineapple\n  76-melon\n  77-pineapple\n  78-cucumber\n  79-pineapple\n  80-cucumber\n  81-apple\n  82-grape\n  83-orange\n  84-grape\n  85-cherry\n  86-grape\n  87-cherry\n  88-pear\n  89-cherry\n  90-apple\n  91-kiwi\n  92-banana\n  93-kiwi\n  94-banana\n  95-melon\n  96-banana\n  97-melon\n  98-pineapple\n  99-apple\n  100-pineapple''';\n\n\nString subtract_sum(int n) {\n    final lst = fruitsString.split('\n').map((e) => e.trim()).map((e) {\n      final items = e.split('-');\n      return MapEntry<int, String>(int.parse(items.first), items.last);\n    });\n    final fruits = Map.fromEntries(lst);\n    var m = n;\n    do {\n      final sum = m.toString().split('').map(int.parse).reduce((value, element) => value + element);\n      m -= sum;\n    } while (!fruits.containsKey(m));\n\n    return fruits[m];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74390,"user_id":null,"body":"\nString subtract_sum(int n) {\n  String result = \"\" ;\n  List<String> fruitArray = [\"kiwi\",\n    \"pear\",\n    \"kiwi\",\n    \"banana\",\n    \"melon\",\n    \"banana\",\n    \"melon\",\n    \"pineapple\",\n    \"apple\",\n    \"pineapple\",\n    \"cucumber\",\n    \"pineapple\",\n    \"cucumber\",\n    \"orange\",\n    \"grape\",\n    \"orange\",\n    \"grape\",\n    \"apple\",\n    \"grape\",\n    \"cherry\",\n    \"pear\",\n    \"cherry\",\n    \"pear\",\n    \"kiwi\",\n    \"banana\",\n    \"kiwi\",\n    \"apple\",\n    \"melon\",\n    \"banana\",\n    \"melon\",\n    \"pineapple\",\n    \"melon\",\n    \"pineapple\",\n    \"cucumber\",\n    \"orange\",\n    \"apple\",\n    \"orange\",\n    \"grape\",\n    \"orange\",\n    \"grape\",\n    \"cherry\",\n    \"pear\",\n    \"cherry\",\n    \"pear\",\n    \"apple\",\n    \"pear\",\n    \"kiwi\",\n    \"banana\",\n    \"kiwi\",\n    \"banana\",\n    \"melon\",\n    \"pineapple\",\n    \"melon\",\n    \"apple\",\n    \"cucumber\",\n    \"pineapple\",\n    \"cucumber\",\n    \"orange\",\n    \"cucumber\",\n    \"orange\",\n    \"grape\",\n    \"cherry\",\n    \"apple\",\n    \"cherry\",\n    \"pear\",\n    \"cherry\",\n    \"pear\",\n    \"kiwi\",\n    \"pear\",\n    \"kiwi\",\n    \"banana\",\n    \"apple\",\n    \"banana\",\n    \"melon\",\n    \"pineapple\",\n    \"melon\",\n    \"pineapple\",\n    \"cucumber\",\n    \"pineapple\",\n    \"cucumber\",\n    \"apple\",\n    \"grape\",\n    \"orange\",\n    \"grape\",\n    \"cherry\",\n    \"grape\",\n    \"cherry\",\n    \"pear\",\n    \"cherry\",\n    \"apple\",\n    \"kiwi\",\n    \"banana\",\n    \"kiwi\",\n    \"banana\",\n    \"melon\",\n    \"banana\",\n    \"melon\",\n    \"pineapple\",\n    \"apple\",\n    \"pineapple\"];\n  \/\/ your code here\n var lst = n.toString().split('');\n var sum = 0;\n for(int i=0;i<lst.length;i++){\n   sum += int.parse(lst[i]);\n }\n n = n - sum ;\n \/\/ if(n <= fruitArray.length){\n \/\/   result = fruitArray[n-1];\n \/\/   print(result);\n \/\/ }else {\n \/\/   subtract_sum(n);\n \/\/ }\n \/\/ return result;\n return n <= fruitArray.length ? fruitArray[n-1] : subtract_sum(n) ;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74391,"user_id":null,"body":"const fruitsString = '''\n  1-kiwi\n  2-pear\n  3-kiwi\n  4-banana\n  5-melon\n  6-banana\n  7-melon\n  8-pineapple\n  9-apple\n  10-pineapple\n  11-cucumber\n  12-pineapple\n  13-cucumber\n  14-orange\n  15-grape\n  16-orange\n  17-grape\n  18-apple\n  19-grape\n  20-cherry\n  21-pear\n  22-cherry\n  23-pear\n  24-kiwi\n  25-banana\n  26-kiwi\n  27-apple\n  28-melon\n  29-banana\n  30-melon\n  31-pineapple\n  32-melon\n  33-pineapple\n  34-cucumber\n  35-orange\n  36-apple\n  37-orange\n  38-grape\n  39-orange\n  40-grape\n  41-cherry\n  42-pear\n  43-cherry\n  44-pear\n  45-apple\n  46-pear\n  47-kiwi\n  48-banana\n  49-kiwi\n  50-banana\n  51-melon\n  52-pineapple\n  53-melon\n  54-apple\n  55-cucumber\n  56-pineapple\n  57-cucumber\n  58-orange\n  59-cucumber\n  60-orange\n  61-grape\n  62-cherry\n  63-apple\n  64-cherry\n  65-pear\n  66-cherry\n  67-pear\n  68-kiwi\n  69-pear\n  70-kiwi\n  71-banana\n  72-apple\n  73-banana\n  74-melon\n  75-pineapple\n  76-melon\n  77-pineapple\n  78-cucumber\n  79-pineapple\n  80-cucumber\n  81-apple\n  82-grape\n  83-orange\n  84-grape\n  85-cherry\n  86-grape\n  87-cherry\n  88-pear\n  89-cherry\n  90-apple\n  91-kiwi\n  92-banana\n  93-kiwi\n  94-banana\n  95-melon\n  96-banana\n  97-melon\n  98-pineapple\n  99-apple\n  100-pineapple''';\n\nString subtract_sum(int n) {\n  final list = fruitsString.split('\n').map((e) => e.trim()).map((e) {\n    final items = e.split('-');\n    return MapEntry<int, String>(int.parse(items.first), items.last);\n  });\n  final fruits = Map.fromEntries(list);\n  var m = n;\n  do {\n    final sum = m.toString().split('').map(int.parse).reduce((v, e) => v + e);\n    m -= sum;\n  } while (!fruits.containsKey(m));\n  return fruits[m].toString();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74392,"user_id":null,"body":"List<String> fruits = [\n  'kiwi',\n  'pear',\n  'kiwi',\n  'banana',\n  'melon',\n  'banana',\n  'melon',\n  'pineapple',\n  'apple',\n  'pineapple',\n  'cucumber',\n  'pineapple',\n  'cucumber',\n  'orange',\n  'grape',\n  'orange',\n  'grape',\n  'apple',\n  'grape',\n  'cherry',\n  'pear',\n  'cherry',\n  'pear',\n  'kiwi',\n  'banana',\n  'kiwi',\n  'apple',\n  'melon',\n  'banana',\n  'melon',\n  'pineapple',\n  'melon',\n  'pineapple',\n  'cucumber',\n  'orange',\n  'apple',\n  'orange',\n  'grape',\n  'orange',\n  'grape',\n  'cherry',\n  'pear',\n  'cherry',\n  'pear',\n  'apple',\n  'pear',\n  'kiwi',\n  'banana',\n  'kiwi',\n  'banana',\n  'melon',\n  'pineapple',\n  'melon',\n  'apple',\n  'cucumber',\n  'pineapple',\n  'cucumber',\n  'orange',\n  'cucumber',\n  'orange',\n  'grape',\n  'cherry',\n  'apple',\n  'cherry',\n  'pear',\n  'cherry',\n  'pear',\n  'kiwi',\n  'pear',\n  'kiwi',\n  'banana',\n  'apple',\n  'banana',\n  'melon',\n  'pineapple',\n  'melon',\n  'pineapple',\n  'cucumber',\n  'pineapple',\n  'cucumber',\n  'apple',\n  'grape',\n  'orange',\n  'grape',\n  'cherry',\n  'grape',\n  'cherry',\n  'pear',\n  'cherry',\n  'apple',\n  'kiwi',\n  'banana',\n  'kiwi',\n  'banana',\n  'melon',\n  'banana',\n  'melon',\n  'pineapple',\n  'apple',\n  'pineapple'\n];\nString subtract_sum(int n) {\n  do {n -= n.toString().split('').map((e) => int.parse(e)).toList().fold(0, (p, c) => p + c);} while (n < 1 || n > 100);\n  return fruits[n - 1];\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56cd44e1aa4ac7879200010b":[{"id":74393,"user_id":645,"body":"bool is_uppercase(String str) => str.toUpperCase() == str;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74394,"user_id":null,"body":"bool is_uppercase(String str) => str == str.toUpperCase();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74395,"user_id":null,"body":"bool is_uppercase(String str) {\n  return str == str.toUpperCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74396,"user_id":null,"body":"bool is_uppercase(String str)=> RegExp(r'[a-z]').allMatches(str).length == 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74397,"user_id":null,"body":"bool is_uppercase(String str)=>[str.toUpperCase()][0]==str;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74398,"user_id":null,"body":"bool is_uppercase(String str) {\n  \n  return str.contains(RegExp(r'[a-z]')) ? false : true;\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74399,"user_id":null,"body":"is_uppercase(str)=>str.toUpperCase()==str?true:false;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74400,"user_id":null,"body":"bool is_uppercase(String str) {\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] != str[i].toUpperCase()) return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74401,"user_id":null,"body":"\/\/ The best solution is of course this:\n\/\/ ... => str == str.toUpperCase(); \n\/\/ but I heard that variety is healthy ;.)\nfinal lowies = \"abcdefghijklmnopqrstuvwxyz\";\n\nbool is_uppercase(String str) {  \n  for (int i = 0; i < str.length; i++) {\n    if (lowies.contains(str[i])) { return false; }\n  }\n  \n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74402,"user_id":null,"body":"bool is_uppercase(String str) => !RegExp('[a-z]').hasMatch(str);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56d904db9963e9cf5000037d":[{"id":74403,"user_id":null,"body":"int testit(int a, int b){\n  print('a $a');\n   print('b $b');\n  return a | b;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74404,"user_id":null,"body":"int testit(int a, int b) => int.parse('${int.parse(a.toRadixString(2))+int.parse(b.toRadixString(2))}'.split('').map((el) => el == '0' ? \"0\" : \"1\").join(''), radix: 2);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74405,"user_id":null,"body":"int testit(int a, int b) => a | b; \/\/ Hmm is that right?","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74406,"user_id":null,"body":"int testit(int a, int b) => a ^ b|a; \/\/ Hmm is that right?","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74407,"user_id":527,"body":"int testit(a, b) => a | b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74408,"user_id":645,"body":"int testit(int a, int b) => a | b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56dbe0e313c2f63be4000b25":[{"id":74409,"user_id":null,"body":"String vertMirror(String str) {\nreturn str.split('\n').map((s)=> s.split('').reversed.join('')).join(\"\n\");\n}\nString horMirror(String str) {\nreturn str.split('\n').reversed.join('\n');\n}\nString oper(String fct(String str), String s) {\nreturn fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74410,"user_id":250,"body":"String vertMirror(String str) => str.split(\"\n\").map((r) => r.split(\"\").reversed.join(\"\")).join(\"\n\");\nString horMirror(String str) => str.split(\"\n\").reversed.join(\"\n\");\nString oper(String fct(String str), String s) => fct(s);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74411,"user_id":null,"body":"String vertMirror(String str) {\n  var list = str.split('\n');\n  return list.map((e)=>e.split('').reversed.toList().join('')).toList().join('\n');\n}\nString horMirror(String str) {\n  return str.split('\n').reversed.toList().join('\n');\n}\nString oper(String fct(String str), String s) {\n  return fct.call(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74412,"user_id":null,"body":"String vertMirror(String str) {\n  return str.split('\n').map((e) => e.split('').reversed.join()).join('\n');\n}\n\nString horMirror(String str) {\n  return str.split('\n').reversed.join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74413,"user_id":null,"body":"extension ReversibleString on String {\n  String reversed() => this.split('').reversed.join('');\n}\n  \nString vertMirror(String str) => str.split('\n').map((str) => str.reversed()).join('\n');\n\nString horMirror(String str) => str.split('\n').reversed.join('\n');\n\nString oper(String f(String str), String str) => f(str);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74414,"user_id":null,"body":"String vertMirror(String str) {\n  return str.split(\"\n\").map((String row) => row.split(\"\").reversed.join(\"\")).join(\"\n\");\n}\n\nString horMirror(String str) {\n  return str.split(\"\n\").reversed.join(\"\n\");\n}\n\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74415,"user_id":null,"body":"String vertMirror(String str) {  \n  return str.split('\n').map((sub) => sub.split('').reversed.join()).join('\n');\n}\n\nString horMirror(String str) {  \n  return str.split('\n').reversed.join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74416,"user_id":null,"body":"String vertMirror(String str) {\n List<String> stringArr = str.split('\n');\n  List<String> resArr = [];\n  stringArr.forEach((String item) {\n    List<String> itemArr = item.split('');\n    List<String> reversedItemArr = itemArr.reversed.toList();\n     resArr.add(reversedItemArr.join(''));\n  });\n  return resArr.join('\n');\n}\n\nString horMirror(String str) {\n  List<String> stringArr = str.split('\n');\n  List<String> reversedArr = stringArr.reversed.toList();\n  return reversedArr.join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  String res = fct(s);\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74417,"user_id":null,"body":"String vertMirror(String str) {\n  \/\/ your code here\n  String reverse(input) {\n    return input.split('').reversed.join();\n}\n  var a=str.split(\"\n\");\n  var z=[];\n     for(var i=0;i<a.length;i++){\n      z.add(reverse(a[i]));\n     }\n  \n  return z.join(\"\n\");\n}\nString horMirror(String str) {\n  \/\/ your code here\n \n  return str.split(\"\n\").reversed.join(\"\n\");\n}\nString oper(String fct(String str), String s) {\n  \/\/ your code here\n  return fct(s);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74418,"user_id":null,"body":"String vertMirror(String str) {\n  List result = [];\n  List str_list = str.split('\n');\n  str_list.forEach((string) {\n    String iter_result = '';\n    for(int i = string.length - 1; i >= 0; i--){\n      iter_result = iter_result + string[i];\n    }\n    result.add(iter_result);\n  });\n  return result.join('\n');\n}\nString horMirror(String str) {\n  List result = [];\n  List str_list = str.split('\n');\n  for(int i = str_list.length - 1; i >= 0; i--){\n    result.add(str_list[i]);\n  }\n  return result.join('\n');\n}\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56dbe7f113c2f63570000b86":[{"id":74419,"user_id":null,"body":"String rot(String strng) {\n  return strng.split(\"\").reversed.join(\"\");\n}\nString selfieAndRot(String strng) {\n  var dottedStrng = strng.split(\"\n\").map((e) => e + '.' * strng.indexOf(\"\n\")).join(\"\n\");\n  return dottedStrng + \"\n\" + rot(dottedStrng);\n}\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74420,"user_id":null,"body":"String rot(String strng) => strng\n    .split('\n')\n    .reversed\n    .map((e) => e.split('').reversed.join(''))\n    .join('\n');\n\nString selfieAndRot(String strng) {\n  String self = strng.split('\n').map((e) => e + '.' * e.length).join('\n');\n  String rotated = rot(strng).split('\n').map((e) => '.' * e.length + e).join('\n');\n  return self + '\n' + rotated;\n}\n\nString oper(String fct(String str), String s) => fct(s);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74421,"user_id":492,"body":"String vertMirror(String str) => str.split(\"\n\").map((x) => x.split('').reversed.join('')).join(\"\n\");\nString horMirror(String str) => str.split(\"\n\").reversed.join(\"\n\");\nString rot(String strng) {\n    return vertMirror(horMirror(strng));\n}\nString selfieAndRot(String strng) {\n    var str = strng.split(\"\n\").map((l) => l + \".\" * (l.length)).join(\"\n\");\n    return str + \"\n\" + rot(str);\n}\nString oper(String fct(String str), String s) => fct(s);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74422,"user_id":null,"body":"String rot(String strng) {\n  return strng.split('\n').reversed.map((e) => e.split('').reversed.join()).join('\n');\n}\n\nString selfieAndRot(String strng) {\n  var res = strng.split('\n').map((e) => e.padRight(e.length*2, '.'));\n  var tmp = rot(strng).split('\n').map((e) => e.padLeft(e.length*2, '.'));\n  return [...res, ...tmp].join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74423,"user_id":null,"body":"String rot(String str) {\n    return str.split('').reversed.join('');\n}\nString selfieAndRot(String str) {\n    final self = str.replaceAllMapped(\n    RegExp(r'(\\w*)([\n]|$)'),\n    (Match m) => \"${m[1]?.padRight((m[1]?.length ?? 0 )* 2, '.')}${m[2]}\");\n    return '$self\n${rot(self)}';\n}\nString oper(String fct(String str), String s) {\n    return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74424,"user_id":null,"body":"String rot(String str) {\n    return str.split('').reversed.join('');\n}\nString selfieAndRot(String str) {\n    final self = str.split('\n').map((v) => v.padRight(v.length * 2, '.')).join('\n');\n    return '$self\n${rot(self)}';\n}\nString oper(String fct(String str), String s) {\n    return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74425,"user_id":null,"body":"String rot(String strng) {\n   strng = strng.split('').reversed.join();\n    return strng;\n}\n\nString selfieAndRot(String strng) {\n  List<String> list = [];\n  int count = 0;\n  for (var i = 0; i < strng.length; i++) {\n    if (strng[i] == '\n') {\n      list.add('.' * count);\n      count = 0;\n    } else {\n      count++;\n    }\n    list.add(strng[i]);\n\n  }\n  list.add('.' * count + '\n');\n  String result = list.join();\n  String s = result.trimRight();\n  result += s.split('').reversed.join();\n  \n\n  return result;\n}\nString oper(String fct(String str), String s) {\n    \n    return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74426,"user_id":null,"body":"String rot(String strng) {\n    return strng.split('').reversed.join('');\n}\nString selfieAndRot(String strng) {\n  final String dottedStr = strng.split('\n').map((e) => e + '.' * e.length).join('\n');\n  \n  return dottedStr + '\n' + rot(dottedStr);\n}\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74427,"user_id":null,"body":"String rot(String strng) {\n    return strng.split('').reversed.join('');\n}\nString selfieAndRot(String strng) {\n  final List<String> a = strng.split('\n').map((e) => e + e.split('').map((d) => '.').join('')).toList();\n  final List<String> b = a.reversed.map((s) => s.split('').reversed.join('')).toList();\n  \n  return [...a, ...b].join('\n');\n}\nString oper(String fct(String str), String s) {\n  return fct(s);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74428,"user_id":null,"body":"String rot(String strng) {\n  var list1 = strng.split('\n');\n  for (var i = 0; i < list1.length; i++) {\n    list1[i] = list1[i].split('').reversed.toList().join('');\n  }\n\n  return list1.reversed.toList().join('\n');\n}\n\nString selfieAndRot(String strng) {\n  var list1 = strng.split('\n');\n  var list2 = list1.reversed.toList();\n  int c = list1.length > 0 ? list1[0].length : 0;\n  for (var i = 0; i < list1.length; i++) {\n    list1[i] = list1[i] + \".\" * c;\n  }\n\n  for (var i = 0; i < list2.length; i++) {\n    list2[i] = list2[i].split('').reversed.toList().join('');\n  }\n\n  for (var i = 0; i < list2.length; i++) {\n    list2[i] = \".\" * c + list2[i];\n  }\n\n  return list1.join('\n') + '\n' + list2.join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56dbeec613c2f63be4000be6":[{"id":74429,"user_id":168,"body":"String diag1Sym(String str) {\n  var ss = str.split('\n');\n  return Iterable.generate(ss.length, (i) => ss.map((s) => s[i]).join()).join('\n');\n}\n\nString rot90Clock(String str) =>\n  diag1Sym(str).split('\n').map((s) => s.split('').reversed.join()).join('\n');\n\nString selfieAndDiag1(String str) {\n  var s1 = str.split('\n');\n  var s2 = diag1Sym(str).split('\n');\n  return Iterable.generate(s1.length, (i) => s1[i] + '|' + s2[i]).join('\n');\n}\n\nString oper(String fct(String str), String s) => fct(s);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74430,"user_id":250,"body":"String diag1Sym(String str) {\n  var lines = str.split(\"\n\");\n  List<String> resp = List<String>.generate(lines.length, (x) => \"\");\n  \n  for (int i = 0; i < lines.length; i++) {\n    for (int j = 0; j < lines.length; j++) {\n      resp[i] += lines[j][i];\n    }\n  }\n  \n  return resp.join(\"\n\");\n}\nString rot90Clock(String str) {\n  return diag1Sym(str)\n    .split(\"\n\")\n    .map((x) => x.split(\"\").reversed.join(\"\"))\n    .join(\"\n\");\n}\nString selfieAndDiag1(String str) {\n  var d = diag1Sym(str).split(\"\n\");\n  int i = 0;\n  return str.split(\"\n\").map((x) {\n    return \"${x}|${d[i++]}\";\n  }).join(\"\n\");\n}\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74431,"user_id":null,"body":"String diag1Sym(String str) {\n    var strArray = str.split('\n');\n    var resultList = List<String>(strArray.length);\n    for(var string in strArray){\n      var strLength = string.length;\n      for(var i = 0; i < strLength; i++){\n        if(resultList[i] == null) resultList[i] = '';\n        resultList[i] += string[i];\n      }\n    }\n    return resultList.join('\n');\n  }\n  \/\/ rot_90_clock(s) => \"miea\nnjfb\nokgc\nplhd\"\n  String rot90Clock(String str) {\n    var strArray = str.split('\n');\n    var resultList = List<String>(strArray.length);\n    for(var j = strArray.length - 1; j >= 0; j--){\n      var strLength = strArray[j].length;\n      for(var i = 0; i < strLength; i++){\n        if(resultList[i] == null) resultList[i] = '';\n        resultList[i] += strArray[j][i];\n      }\n    }\n    return resultList.join('\n');\n  }\n  \/\/ s = \"abcd\nefgh\nijkl\nmnop\" --> \"abcd|aeim\nefgh|bfjn\nijkl|cgko\nmnop|dhlp\"\n  String selfieAndDiag1(String str) {\n    var strArray = str.split('\n');\n    var diagStrArray = diag1Sym(str).split('\n');\n    for(var i = 0; i < strArray.length; i++){\n      strArray[i] += '|${diagStrArray[i]}';\n    }\n    return strArray.join('\n');\n  }\n  String oper(String fct(String str), String s) {\n    var result = fct(s);\n    \/\/ your code\n    return result;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74432,"user_id":492,"body":"String diag1Sym(String str) {\n  var arr = str.split('\n');\n  List<String> s = [];\n  for(var i = 0; i < arr.length; ++i) {\n    s.add(arr.map((a) => a[i]).join(''));\n  }\n  return s.join('\n');\n}\nString rot90Clock(String str) {\n  var c = diag1Sym(str);\n  return c.split('\n').map((a) => a.split('').reversed.join('')).join('\n');\n}\nString selfieAndDiag1(String str) {\n  var r1 = str.split('\n');\n  var r2 = diag1Sym(str).split('\n');\n  List<String> result = [];\n  for (var i = 0; i < r1.length; i++) {\n    result.add(r1[i] + \"|\" + r2[i]);\n  }\n  return result.join('\n');\n}\nString oper(String fct(String str), String s) => fct(s);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74433,"user_id":null,"body":"import 'dart:math';\n\n\nString diag1Sym(String str) {\n  List<String> items = str.split('\n');\n  List<String> result = [];\n  int maxItemLength = items.map((i) => i.length).reduce(max);\n  for (int i = 0; i < maxItemLength; i++){\n    String s = '';\n    for(int j = 0; j < items.length; j++){\n      if(i < items[j].length){\n        s += items[j][i];\n      }\n    }\n    result.add(s);\n  } \n  return result.join('\n');\n}\nString rot90Clock(String str) {\n  List<String> items = str.split('\n');\n  List<String> result = [];\n  int maxItemLength = items.map((i) => i.length).reduce(max);\n  for (int i = 0; i < maxItemLength; i++){\n    String s = '';\n    for(int j = 0; j < items.length; j++){\n      if(i < items[j].length){\n        s = items[j][i] + s;\n      }\n    }\n    result.add(s);\n  } \n  return result.join('\n');\n}\nString selfieAndDiag1(String str) {\n  List<String> itemsOne = str.split('\n');\n  List<String> itemsTwo = diag1Sym(str).split('\n');\n  List<String> result = [];\n  for (int i = 0; i < itemsOne.length; i++){\n    result.add('${itemsOne[i]}|${itemsTwo[i]}');\n  }\n  return result.join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  \/\/ your code\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74434,"user_id":null,"body":"String diag1Sym(String str) {\n  List list = str.split(\"\n\");\n  int substringCount = list[0].length;\n  String resultString = \"\";\n  \n  for (int i = 0; i < substringCount; i++) {\n    for (int j = 0; j < list.length; j++) {\n      resultString += list[j][i];\n    }\n    if(i != list.length - 1) resultString += '\n';\n  }\n\n  return resultString;\n}\n\nString rot90Clock(String str) {\n  List list = str.split(\"\n\");\n  int substringCount = list[0].length;\n  String resultString = \"\";\n\n  for (int i = 0; i < substringCount; i++) {\n    for (int j = list.length - 1; j >= 0; j--) {\n      resultString += list[j][i];\n    }\n   if(i != list.length - 1) resultString += '\n';\n  }\n  return resultString;\n}\n\nString selfieAndDiag1(String str) {\nList list = str.split(\"\n\");\n  int substringCount = list[0].length;\n  String resultString = \"\";\n  \n  for (int i = 0; i < substringCount; i++) {\n    resultString += \"${list[i]}|\";\n    for (int j = 0; j < list.length; j++) {\n      resultString += list[j][i];\n    }\n    if(i != list.length - 1) resultString += '\n';\n  }  \n  \n  return resultString;\n}\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74435,"user_id":null,"body":"const String separator = '\n';\n\nString rot90Clock(String str) =>\n    iterable2String(string2List(str).iterColumns());\n\nString selfieAndDiag1(String str) {\n  List<List<String>> list = string2List(str);\n  return zip(list, _diag1Sym(list))\n      .map((pair) => pair.map((l) => l.join('')).join('|'))\n      .join(separator);\n}\n\nString diag1Sym(String str) => iterable2String(_diag1Sym(string2List(str)));\n\nString oper(String fct(String str), String s) => fct(s);\n\nList<List<String>> _diag1Sym(List<List<String>> source) => source\n    .iterAntidiagonals() \/\/ rotating 45 degrees clockwise\n    .map((lst) => lst.reversed.toList()) \/\/ reversing every line (antidiagonal)\n    .antidiagonals2Table()\n    .toList(); \/\/ rotating 45 degrees counterclockwise\n\nIterable<List<T>> zip<T>(List<T> source1, List<T> source2) =>\n    Iterable.generate(source1.length, (i) => [source1[i], source2[i]]);\n\nList<List<String>> string2List(String str) =>\n    str.split(separator).map((e) => e.split('')).toList();\n\nString iterable2String(Iterable<Iterable<String>> iter) =>\n    iter.map((l) => l.join('')).join(separator);\n\nextension Iterations<T> on List<List<T>> {\n  Iterable<List<T>> iterColumns() sync* {\n    \/\/ [[a, b],\n    \/\/ [c, d]]\n    \/\/ ->\n    \/\/ [[c, a],\n    \/\/ [d, b]]\n    final int width = this.length;\n    yield* List.generate(\n        width, (y) => List.generate(width, (x) => this[width - x - 1][y]));\n  }\n\n  Iterable<List<T>> iterAntidiagonals() sync* {\n    \/\/ [[a, b],\n    \/\/ [c, d]]\n    \/\/ ->\n    \/\/ [[a],\n    \/\/ [b, c],\n    \/\/ [d]]\n    final int width = this.first.length;\n    yield* Iterable.generate(\n        width, (x) => List.generate(x + 1, (j) => this[j][x - j]));\n    yield* Iterable.generate(\n        width - 1,\n        (_x) => List.generate(\n            width - _x - 1, (j) => this[_x + j + 1][width - j - 1]));\n  }\n}\n\nextension Converters<T> on Iterable<List<T>> {\n  Iterable<List<T>> antidiagonals2Table() sync* {\n    \/\/ [[a],\n    \/\/ [b, c],\n    \/\/ [d]]\n    \/\/ ->\n    \/\/ [[a, b],\n    \/\/ [c, d]]\n    List<List<T>> adlist = this.toList();\n    int width = (adlist.length \/ 2).ceil();\n    yield* Iterable.generate(\n        width,\n        (line) => List.generate(width,\n            (i) => adlist[line + i][i + line < width ? line : width - i - 1]));\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74436,"user_id":null,"body":"\/\/ sample\n\/\/ abcd\n\/\/ efgh\n\/\/ ijkl\n\/\/ mnop\n\n\/\/ 1. diag1Sym\n\/\/ aeim\n\/\/ bfjn\n\/\/ cgko\n\/\/ dhlp\n\nString diag1Sym(String str) {\n  final parts = str.split('\n');\n  final length = parts[0].length;\n  final newParts = <String>[];\n  for (int i = 0; i < length; i++) {\n    final newPart = parts.map((part) => part[i]).join('');\n    newParts.add(newPart);\n  }\n  return newParts.join('\n');\n}\n\n\/\/ 2. rot90Clock\n\/\/ miea\n\/\/ njfb\n\/\/ okgc\n\/\/ plhd\nString rot90Clock(String str) {\n  final parts = str.split('\n').reversed.toList();\n  final length = parts[0].length;\n  final newParts = <String>[];\n  for (int i = 0; i < length; i++) {\n    final newPart = parts.map((part) => part[i]).join('');\n    newParts.add(newPart);\n  }\n  return newParts.join('\n');\n}\n\n\/\/ 3. selfieAndDiag1\n\/\/ abcd|aeim\n\/\/ efgh|bfjn\n\/\/ ijkl|cgko\n\/\/ mnop|dhlp\nString selfieAndDiag1(String str) {\n  final parts = str.split('\n');\n  final length = parts.length;\n  final diag1 = diag1Sym(str);\n  final diag1Parts = diag1.split('\n');\n  final newParts = <String>[];\n  for (int i = 0; i < length; i++) {\n    final newPart = parts[i] + '|' + diag1Parts[i];\n    newParts.add(newPart);\n  }\n  return newParts.join('\n');\n}\n\nString oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74437,"user_id":null,"body":"String diag1Sym(String str){\n  final List<String> arrayStrings = str.split('\n');\n \n  final  List<List<String>> arrayArrayStrings = arrayStrings.map((e) => e.split('')).toList();\n  String resString = '';\n  for(int j = 0; j < arrayArrayStrings.length; j++){\n    for (var i = 0; i < arrayArrayStrings.length; i++) {\n     resString += arrayArrayStrings[i][j];\n    }\n    if(j +1 != arrayArrayStrings.length){\n      resString += '\n';\n    }\n  }\n      return resString;\n  }\n\nString rot90Clock(String str){\n  final List<String> arrayStrings = str.split('\n');\n \n  final  List<List<String>> tempArrayArrayStrings = arrayStrings.map((e) => e.split('')).toList();\n final  List<List<String>> arrayArrayStrings = tempArrayArrayStrings.reversed.toList();\n  String resString = '';\n  for(int j = 0; j < arrayArrayStrings.length; j++){\n    for (var i = 0; i < arrayArrayStrings.length; i++) {\n     resString += arrayArrayStrings[i][j];\n    }\n    if(j +1 != arrayArrayStrings.length){\n      resString += '\n';\n    }\n  }\n      return resString;\n  }\nString selfieAndDiag1(String str) {\n    final List<String> arrayStrings = str.split('\n');\n \n  final  List<List<String>> arrayArrayStrings = arrayStrings.map((e) => e.split('')).toList();\n  String resString = '';\n  for(int j = 0; j < arrayArrayStrings.length; j++){\n    resString +=  arrayStrings[j] + '|';\n    for (var i = 0; i < arrayArrayStrings.length; i++) {\n     resString += arrayArrayStrings[i][j];\n    }\n    if(j +1 != arrayArrayStrings.length){\n      resString += '\n';\n    }\n  }\n      return resString;\n  }\n\n  String oper(String fct(String str), String s) {\n  return fct(s);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74438,"user_id":null,"body":"String diag1Sym(String str) {\n  List<String> res = [];\n  List<String> arr = str.split('\n');\n  for (int i = 0; i < arr.length; i++) {\n    res.add('');\n    for (int j = 0; j < arr.length; j++) {\n      res[i] += arr[j][i];\n    }\n  }\n  return res.join('\n');\n}\n\nString rot90Clock(String str) {\n  List<String> res = [];\n  List<String> arr = str.split('\n');\n  for (int i = 0; i < arr.length; i++) {\n    res.add('');\n    for (int j = 0; j < arr.length; j++) {\n      res[i] += arr[arr.length - j - 1][i];\n    }\n  }\n  return res.join('\n');\n}\n\nString selfieAndDiag1(String str) {\n  List<String> res = [];\n  List<String> arr = str.split('\n');\n  for (int i = 0; i < arr.length; i++) {\n    res.add('');\n    for (int j = 0; j < arr.length; j++) {\n      res[i] += arr[j][i];\n    }\n    res[i] = arr[i] + '|' + res[i];\n  }\n  return res.join('\n');\n}\n\nString oper(String Function(String str) fct, String s) {\n  return fct(s);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56dec885c54a926dcd001095":[{"id":74439,"user_id":645,"body":"num opposite(num n) => -n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74440,"user_id":null,"body":"num opposite(num n) {\n   if(num == 0){\n    return 0;\n  } else {\n     return -n;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74441,"user_id":null,"body":"num opposite(n)=>-n;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74442,"user_id":null,"body":"num opposite(num n) => n * -1;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74443,"user_id":null,"body":"num opposite(num x) => x * -1;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74444,"user_id":null,"body":"num opposite(num number) {\n    return number * -1;\n  }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74445,"user_id":null,"body":"num opposite(num n) {\n  \/\/ your code here\n  num opp;\n \n  if(n ==n.isNegative){\n    opp = n * 1;\n    \n  }\n  else n != n.isNegative;\n    opp = n * -1;\n    \n    return opp;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74446,"user_id":null,"body":"num opposite(num n) => n > 0? n - (n + n) : n < 0? n - (n + n) : n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74447,"user_id":null,"body":"num opposite(num n) => n - n * 2;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74448,"user_id":1566,"body":"opposite(n)=>-n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56e9e4f516bcaa8d4f001763":[{"id":74449,"user_id":null,"body":"String show_sequence(int n)\n  {\n    if (n == 0) { return \"0=0\"; }\n    if (n < 0) { return \"$n<0\"; }\n    var i = 0;\n    var integerList = new List<int>.generate(n+1, (int index) => i++);\n    var sum = integerList.fold(0, (prev, next) => prev + next);\n    var integerListString = integerList.join('+');\n    \n    return \"$integerListString = $sum\";\n  }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74450,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(num n)\n  {\n   if(n==0) return \"0=0\";\n   if(n<0) return \"${n}<0\";\n   List<int> list = new List<int>.generate(n+1,(i)=>i);\n   return '${list.join(\"+\")} = ${list.reduce((c,n)=> c+n)}';\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74451,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(num n)\n  {\n    if (n<0){\n      return \"${n}<0\";\n    }\n    if (n==0){\n      return \"0=0\";\n    }\n    else{\n    var total=0;\n    String message = \"0\";\n    for (var i=1;i<=n;i++){\n      total += i;\n      message += \"+${i}\";\n    }\n    return message+\" = ${total}\";\n  }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74452,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(num n) {\n    if (n <= 0) return n < 0 ? '$n<0' : '0=0';\n    \n    return List<int>.generate(n + 1, (i) => i).join('+') + ' = ' + ((n + 1) * n \/ 2).floor().toString();\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74453,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(num n)\n  {\n    var sum = 0;\n    var ls = [];\n    for (var x=0; x<=n; x++) {\n      ls.add(x);\n      sum += x;\n    }\n    return ls.isEmpty || sum == 0 ? (n < 0 ? '$n<0': '0=0') : ls.join('+') + ' = $sum';\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74454,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(num n)\n  {\n    if (n < 0) { return '$n<0'; }\n    if (n == 0) { return '0=0'; }\n    return List.generate(n + 1, (i) => i).join('+') + ' = ${n*(n+1)~\/2}';\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74455,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(int n)\n  {\n \n    if(n == 0 ) return \"0=0\";\n    else if(n < 0 ) return \"$n<0\";\n    Iterable<int> list =  Iterable<int>.generate(n+1);\n    int total = list.reduce((a,b) => a+b);\n    return list.join(\"+\")  + \" = $total\";\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74456,"user_id":null,"body":"class SequenceSum{\n  static String show_sequence(int n) {\n    String result = \"0=0\";\n    if (n > 0) {\n      var sum = ((0+n+1)*n\/2).toInt();\n      var listOfSum = List.generate(n + 1, (int index) => index).join(\"+\");\n      return \"$listOfSum = $sum\";\n    } else if (n < 0) {\n      return \"$n<0\";\n    } else return result;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74457,"user_id":null,"body":"class SequenceSum{\nstatic String show_sequence(int n){\n  if(n<0) return '$n<0';\n  if(n == 0) return '0=0';\n  \n  final sum = n*(n+1)~\/2;\n  final numbers= List.generate(n+1,(i)=>i);\n  \n  return('${numbers.join('+')} = $sum');\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74458,"user_id":null,"body":"class SequenceSum{\nstatic String show_sequence(int n){\n  if(n<0) return '$n<0';\n  if(n == 0) return '0=0';\n  \n  int sum = 0;\n  var numbers = List.generate(n+1,(i)=>i).fold(null,(p,e) {\n    sum += p != '0' ? 0 + e : 1;\n    return p==null ? '0' : \"$p+$e\";\n    });\n  \n  return('$numbers = $sum');\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56f3a1e899b386da78000732":[{"id":74459,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\n    return List.generate(arr.length - 1, (i) => [arr.take(i+1).join(\" \"), arr.skip(i+1).join(\" \")]);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74460,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\n  List<List<String>> result = List<List<String>>();\n  for (num i = 1; i < arr.length; i++) {\n    result.add([\n      arr.sublist(0,i).join(' '),\n      arr.sublist(i).join(' ')\n    ]);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74461,"user_id":null,"body":"import 'dart:math';\n\nList<List<String>> partlist(List<String> arr) {\n  \/\/\/ Using sublist\n  List<List<String>> solution1 = List.generate(\n      arr.length - 1,\n      (i) => [\n            arr.sublist(0, i + 1).join(' '),\n            arr.sublist(i + 1, arr.length).join(' '),\n          ]);\n\n  \/\/\/ Using getRange\n  List<List<String>> solution2 = List.generate(\n      arr.length - 1,\n      (i) => [\n            arr.getRange(0, i + 1).join(' '),\n            arr.getRange(i + 1, arr.length).join(' ')\n          ]);\n\n  \/\/\/ Using take and skip with List generation\n  List<List<String>> solution3 = List.generate(arr.length - 1,\n      (i) => [arr.take(i + 1).join(' '), arr.skip(i + 1).join(' ')]);\n\n  \/\/\/ Using take and skip with normal for\n  List<List<String>> solution4 = <List<String>>[];\n  for (var i = 1; i < arr.length; i++) {\n    var part1 = arr.take(i).toList().join(' ');\n    var part2 = arr.skip(i).toList().join(' ');\n    solution4.add([part1, part2]);\n  }\n\n  \/\/\/ normal solution\n  List<List<String>> solution5 = [];\n  List<String> t1 = [];\n  List<String> t2 = [];\n  for (int i = 0; i < arr.length - 1; ++i) {\n    t1.add(arr[i]);\n    t2 = [];\n    for (int j = i + 1; j < arr.length; ++j) {\n      t2.add(arr[j]);\n    }\n    solution5.add([t1.join(' '), t2.join(' ')]);\n  }\n\n  Random r = Random(5);\n  return [solution1, solution2, solution3, solution4, solution5][r.nextInt(5)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74462,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\n  List<List<String>> result = [];\n  for (var i = 0; i < arr.length - 1; i++) {\n    List<String> temp = [\n      arr.take(i + 1).join(' '),\n      arr.skip(i + 1).join(' '),\n    ];\n    result.add(temp);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74463,"user_id":250,"body":"List<List<String>> partlist(List<String> arr) {\n  List<List<String>> r = [];\n  \n  for (int i = 0; i < arr.length-1; i++) {\n    r.add([arr.sublist(0,i+1).join(\" \"), arr.sublist(i+1).join(\" \")]);\n  }\n  \n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74464,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\nint _length = arr.length;\n  return new List<List<String>>.generate(_length-1, \n    (int index) => [arr.sublist(0,index+1).join(\" \"),\n                      arr.sublist(index+1, _length).join(\" \")]\n    );\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74465,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\n  List<List<String>> ret = [];\n  for (var i = 1; i < arr.length; i++) {\n    String str1 = '';\n    for (var j = 0; j < i; j++) {\n      str1 == '' ? str1 = str1 + arr[j] : str1 = str1 + ' ' + arr[j];\n    }\n    String str2 = '';\n    for (var k = i; k < arr.length; k++) {\n      str2 == '' ? str2 = str2 + arr[k] : str2 = str2 + ' ' + arr[k];\n    }\n    ret.add([str1, str2]);\n  }\n  return ret;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74466,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\nList<List<String>> result = [];\n\nfor(int i =0; i < arr.length-1; i++){\n  List<String> pair = [];\n  pair.add(arr.sublist(0,i+1).join(' '));\n  pair.add(arr.sublist(i+1,arr.length).join(' '));\n  result.add(pair);\n}\n return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74467,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\n  List<List<String>> resArray = [];\n  List<String> array = [];\n  List<String> secondArray = arr.toList();\n  List<String> thirdArray = [];\n  for (var i = 1; i < arr.length; i++) {\n    var j = 0;\n    array = [];\n    secondArray = arr.toList();\n    thirdArray = [];\n    while (j < i) {\n      array.add(arr[j]);\n      secondArray.remove(arr[j]);\n      j++;\n    }\n    thirdArray.add(array.join(\" \"));\n    thirdArray.add(secondArray.join(\" \"));\n    resArray.add(thirdArray);\n  }\n\n  return resArray;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74468,"user_id":null,"body":"List<List<String>> partlist(List<String> arr) {\n  List<List<String>> result = [];\n\n  for (var i = 1; i < arr.length; i++) {\n    List<String> partOfList = [\n      arr.take(i).toList().join(' '),\n      arr.take(arr.length).skip(i).toList().join(' ')\n    ];\n    result.add(partOfList);\n  }\n  return result;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56f699cd9400f5b7d8000b55":[{"id":74469,"user_id":645,"body":"List<String> fix_the_meerkat(List<String> arr) => arr.reversed.toList();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74470,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) => [arr[2], arr[1], arr[0]];","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74471,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) {\n  return arr.reversed.toList();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74472,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) {\n  var temp = arr[0];\n  arr[0] = arr.last;\n  arr.last = temp;\n  return arr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74473,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) {\n  \n  String temp = arr[0];\n  arr[0] = arr[2];\n  arr[2] = temp;\n  \n  return arr;\n  \n  \/* misunderstand the description,  lead to too complicated solution, and failed. hours spent!!!\n    \n  List<String> t1 = [\"head\", \"body\", \"tail\"];\n  List<String> t2 = [\"top\", \"middle\", \"bottom\"];\n  List<String> t3 = [\"upper legs\", \"torso\", \"lower legs\"];\n  List<String> t4 = [\"sky\", \"rainbow\", \"ground\"];\n  List<List<String>> tArr = [t1, t2, t3, t4,\n  ['Kaiou', 'Souther', 'Jagi'],\n  ['Shoki', 'Shin', 'Raoh'],\n  ['Soria', 'Boltz', 'Jagi'],\n  ['Falco', 'Han', 'Kenshiro'],\n  ['Shin', 'Han', 'Shin'],\n  ['Rei', 'Kaiou', 'Han'],\n  ['Shoki', 'Rei', 'Han'],\n  ['Taiga', 'Shoki', 'Souther'],\n  ['Souther', 'Hyo', 'Juda'],\n  ['Han', 'Juda', 'Shoki'],\n  ['Juda', 'Shin', 'Shoki'],\n ['Shin', 'Boltz', 'Soria'],\n  ['Soria', 'Falco', 'Souther'],\n  ['Han', 'Souther', 'Kenshiro'],\n  ['Kenshiro', 'Jagi', 'Shin'],\n  ['Souther', 'Shin', 'Han'],\n  ['Juda', 'Shin', 'Han'],\n  ['Soria', 'Han', 'Hyo'],\n  ['Kaiou', 'Toki', 'Juda'],\n  ['Boltz', 'Kaiou', 'Toki'],\n  ['Falco', 'Souther', 'Juda'],\n  ['Toki', 'Kenshiro', 'Juda'],\n  ['heads', 'body', 'tails'],\n  ['Kaiou', 'Taiga', 'Raoh'],\n  ['Raoh', 'Taiga', 'Souther'],\n  ['Raoh', 'Soria', 'Shoki'],\n  ['Juda', 'Soria', 'Jagi'],\n  ['Kenshiro', 'Soria', 'Shin'],\n  ['Taiga', 'Kenshiro', 'Falco'],\n  ['Souther', 'Kenshiro', 'Hyo'],\n  ['Toki', 'Souther', 'Kenshiro'],\n  ['Shin', 'Kenshiro', 'Raoh'],\n                             ['Shin', 'Shin', 'Juda'],\n                             ['Taiga', 'Hyo', 'Kaiou'],\n                             ['Shin', 'Toki', 'Boltz'],\n                             ['Juda', 'Kenshiro', 'Hyo'],\n                             ['Shin', 'Taiga', 'Juda'],\n                             ['Taiga', 'Raoh', 'Han'],\n                             ['Souther', 'Toki', 'Raoh'],\n                             ['Soria', 'Kenshiro', 'Hyo'],\n                             ['Falco', 'Hyo', 'Raoh'],\n                             ['Hyo', 'Shin', 'Rei'],\n                             ['Hyo', 'Taiga', 'Juda'],\n                             ['Toki', 'Raoh', 'Jagi'],\n                             ['Juda', 'Han', 'Toki'],\n                             ['Boltz', 'Shin', 'Kaiou'],\n                             ['Jagi', 'Taiga', 'Kaiou'],\n                             ['Raoh', 'Kaiou', 'Rei'],\n                             ['Han', 'Jagi', 'Falco'],\n                             ['Shin', 'Taiga', 'Kenshiro'],\n                             ['Rei', 'Boltz', 'Shoki'],\n                             ['Soria', 'Falco', 'Hyo'],\n                             ['Shin', 'Boltz', 'Han'],\n                             ['Taiga', 'Jagi', 'Toki'],\n                             ['Jagi', 'Rei', 'Han'],\n                             ['Soria', 'Juda', 'Shin'],\n                             ['Raoh', 'Taiga', 'Jagi'],\n                             ['Hyo', 'Kenshiro', 'Souther'],\n                             ['Taiga', 'Shin', 'Hyo'],\n                             ['Kaiou', 'Han', 'Shin'],\n                             ['Juda', 'Soria', 'Boltz'],\n                             ['Taiga', 'Raoh', 'Falco'],\n                             ['Boltz', 'Jagi', 'Han'],\n                             ['Raoh', 'Hyo', 'Juda'],\n                             ['Soria', 'Raoh', 'Kaiou'],\n                             ['Hyo', 'Shoki', 'Soria'],\n                             ['Boltz', 'Raoh', 'Shin'],\n                             ['Han', 'Rei', 'Shin'],\n                             ['Toki', 'Soria', 'Taiga'],\n                             ['Juda', 'Boltz', 'Souther'],\n                             ['Toki', 'Juda', 'Taiga'],\n                             ['Shin', 'Soria', 'Falco'],\n                             ['Hyo', 'Toki', 'Rei'],\n                             ['Shin', 'Falco', 'Taiga'],\n                             ['Souther', 'Soria', 'Taiga'],\n                             ['Falco', 'Jagi', 'Souther'],\n                             \n  ];\n  \n  \n  \/*\n  for (List<String> t in tArr) {\n    print(t);\n  } \n  \n  print(\"___________________________________________\");\n  *\/\n  \n  arr.sort();\n  List<String> tArrSorted = [];\n  for (List<String> a in tArr) {\n    var b = List.from(a);\n    b.sort();\n    \n    String arrString =\"\";\n    for (String s in b) {\n      arrString +=s+\"_\";\n    }\n    \n    tArrSorted.add(arrString);\n  }\n  \n  \n  \n  \n  \n  String arrString =\"\";\n  for (String s in arr) {\n    arrString +=s+\"_\";\n  }\n  \n  \/*\n  print(\"+++++++++++++++++++++++++++++++++\");\n  print(\"arr:${arr}\");\n  print(\"____________________________\");\n  print(\"tArr: ${tArr}\");\n  *\/\n   \n  for (int i=0; i<tArr.length; i++) {\n        if (arrString == tArrSorted[i]) {\n           return tArr[i];\n          }\n        \n    }\n  \n  \n  tArrSorted.sort();\n  for (String t in tArrSorted) {\n    print(t);\n  }\n  *\/\n  \n    \n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74474,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) => List.from(arr.reversed);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74475,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) {\n    var first = arr[0];\n    arr[0] = arr[arr.length - 1];\n    arr[arr.length - 1] = first;\n    return arr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74476,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) {\n  \/\/ your code here\n  List<String> sorted = List.from(arr.reversed);\n  return sorted;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74477,"user_id":null,"body":"List<String> fix_the_meerkat(List<String> arr) {\n  return arr.reversed.toList();  \/\/kidding\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74478,"user_id":null,"body":"\/\/ My head is at the wrong end!\nList<String> fix_the_meerkat(List<String> arr) {\n  List<String> temp = [];\n  for (int i = arr.length-1; i >= 0; i--) {\n    temp.add(arr[i]);\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56f69d9f9400f508fb000ba7":[{"id":74479,"user_id":645,"body":"List<int> monkey_count(int n) => List.generate(n, (int i) => i + 1);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74480,"user_id":null,"body":"List<int> monkey_count(int n) => [for(var i=1; i<=n; i++) i];","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74481,"user_id":null,"body":"List<int> monkey_count(int n) {\n  return List.generate(n, (index) => index + 1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74482,"user_id":null,"body":"List<int> monkey_count(int n) {\n  var r = List<int>();\n  for(var i = 1; i <= n; i++){\n    r.add(i);\n  }\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74483,"user_id":null,"body":"List<int> monkey_count(int n) {\n  return List.generate(n, (i) => i + 1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74484,"user_id":250,"body":"List<int> monkey_count(int n) => List.generate(n, (x) => x + 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74485,"user_id":null,"body":"List<int> monkey_count(int n) {\nList <int> ans=[];  \n  for(int i=1;i<=n;i++){\n    ans.add(i);\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74486,"user_id":null,"body":"List<int> monkey_count(int n)=>[ for(int i=1; i<=n; i++)i];\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74487,"user_id":null,"body":"List<int> monkey_count(int n) {\n  return new List<int>.generate(n, (i) => i + 1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74488,"user_id":null,"body":"List<int> monkey_count(int n)=>List.generate(n, (i)=>++i);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"56fc55cd1f5a93d68a001d4e":[{"id":74489,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) => arr.expand((e) => e).reduce((v, e) => v + e) * 20;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74490,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  var sum = 0;\n  arr.forEach((day) => day.forEach((num) => {sum += num}));\n  return 20 * sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74491,"user_id":null,"body":"int stairsIn20(List<List<int>> arr)=> arr.map((e) => e.reduce((a, b) => a+b)*20).reduce((a, b) => a+b);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74492,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  var res = [];\n  for (var day in arr) {\n    res.add(day.reduce((v, e) => v + e));\n  }\n  return res.reduce((v, e) => v + e) * 20;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74493,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  var res = 0;\n\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      res += arr[i][j];\n    }\n  }\n  return res * 20;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74494,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  List oneYear = [];\n  for (List<int> day in arr) {\n    oneYear.add(day.reduce((v, e) => v + e));\n  }\n  return oneYear.reduce((v, e) => v + e) * 20;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74495,"user_id":645,"body":"int stairsIn20(List<List<int>> arr) => arr.expand((n) => n).reduce((c, d) => c + d) * 20;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74496,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  int result = 0;\n  for (List<int> day in arr) {\n    result += day.reduce((sum, stairs) => sum + stairs);\n  }\n  return result * 20;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74497,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  int result = 0;\n  \n  for (final List<int> day in arr) {\n    for (final int steps in day) {\n      result += steps;\n    }\n  }\n  \n  return result * 20;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74498,"user_id":null,"body":"int stairsIn20(List<List<int>> arr) {\n  return arr.map((list) => list.reduce((a,b)=> a+b)).toList().reduce((a,b)=>a+b)*20;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5715eaedb436cf5606000381":[{"id":74499,"user_id":null,"body":"int positive_sum(List<int> arr) {\n  return arr.where((l) => l > 0).fold(0, (p, c) => p + c);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74500,"user_id":527,"body":"import \"dart:math\";\n\nint positive_sum(List<int> xs) {\n  return xs.fold(0, (a, x) => a + max(x, 0));\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74501,"user_id":645,"body":"int positive_sum(List<int> arr) => arr.where((x) => x > 0).fold(0, (a, b) => a + b);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74502,"user_id":null,"body":"int positive_sum(List<int> arr) {\nint total=0;\n  \n  arr.forEach((element){\nif(element>0){\n\ntotal=total+element;\n  }\n    \n  });\n    \n  return total;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74503,"user_id":593,"body":"int positive_sum(List<int> arr) {\n  \n  int sum = 0;\n  \n  for (int n in arr) {\n    if (n > 0) {\n      sum += n;\n    }\n  }\n  \n  return sum;\n  \n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74504,"user_id":null,"body":"int positive_sum(List<int> arr) {\n  int sum = 0;\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    } \n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74505,"user_id":null,"body":"int positive_sum(List<int> arr) => [for(var x in arr) if(x > 0) x].fold(0, (v, e) => v + e);\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74506,"user_id":null,"body":"int positive_sum(List<int> arr) => arr.where((e) => e > 0).fold(0, (p, e) => p + e);\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74507,"user_id":null,"body":"int positive_sum(List<int> arr) {\n  var res = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) res += arr[i];\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74508,"user_id":250,"body":"int positive_sum(List<int> arr) => arr.fold(0, (a,x)=>x>0?a+x:a); ","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5722aeda785220c84900109b":[{"id":74509,"user_id":277,"body":"String anchorize(String text){\n  return text.replaceAllMapped(new RegExp(r'(http[s]?|ftp[s]?|smb|file):\\\/\\\/\\S+', caseSensitive: false), (match) {\n    return '<a href=\"${match.group(0)}\">${match.group(0)}<\/a>';\n  });\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74510,"user_id":250,"body":"String anchorize(String text){\n  return text.replaceAllMapped(\n    RegExp(r'((https?|ftps?|file|smb):[^ ]*)', caseSensitive: false), \n    (match) => '<a href=\"${match[1]!}\">${match[1]!}<\/a>'\n  );\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74511,"user_id":null,"body":"String anchorize(String s) => s.replaceAllMapped(\n    RegExp(r'(http[s]?|ftp[s]?|smb|file):\/\/\\S+', caseSensitive: false),\n    (m) => '<a href=\"${m[0]}\">${m[0]}<\/a>');","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74512,"user_id":null,"body":"String anchorize(String text) => text.replaceAllMapped(\n    RegExp(\n      r'(http|https|ftp|ftps|file|smb):\/\/\\S+',\n      caseSensitive: false,\n    ),\n    (Match m) => '<a href=\\\"${m[0]!}\\\">${m[0]!}<\/a>');","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74513,"user_id":null,"body":"String anchorize(String text) \n  {\n  print(text);\n  return text.replaceAllMapped(\n    RegExp(\n      r'(http|https|ftp|ftps|file|smb):\/\/\\S+',\n      caseSensitive: false,\n    ),\n    (Match m) => '<a href=\\\"${m[0]!}\\\">${m[0]!}<\/a>');\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74514,"user_id":null,"body":"const protocols = ['http',\n'https',\n'ftp',\n'ftps',\n'file',\n'smb',];\n\nString anchorize(String text){\n  final exp = \"\\\\b(${protocols.join('\\|')}):\/\/(\\\\w\\|[.:\/])+\\\\b\";\n  final newString = text.replaceAllMapped(RegExp(exp, caseSensitive: false), (match) {\n  return '<a href=\"${match.group(0)}\">${match.group(0)}<\/a>';\n});\n  return newString;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74515,"user_id":null,"body":"String anchorize(String text) => text.replaceAllMapped(RegExp(r'(http[s]?|ftp[s]?|smb|file):\\\/\\\/\\S+', caseSensitive: false), (match) => '<a href=\"${match.group(0)}\">${match.group(0)}<\/a>');","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74516,"user_id":null,"body":"String anchorize(String text){\n  dynamic list = text.split(' ').where((txt) {\n    txt = txt.toLowerCase();\n    return txt.contains('http') || txt.contains('https') || txt.contains('ftp') || txt.contains('ftps') || txt.contains('file') || txt.contains('smb');\n  });\n  list = list.toSet().toList();\n  list.forEach((txt) {\n    text = text.replaceAll(txt, '<a href=\"$txt\">$txt<\/a>');\n  });\n  return text;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74517,"user_id":null,"body":"String anchorize(String s) {\n  int i = 0;\n  while (i < s.length) {\n    i = s.indexOf(\n        RegExp(r'http|https|ftp|ftps|file|smb', caseSensitive: false), i);\n    if (i == -1) break;\n    var start = i;\n    i = s.indexOf(' ', i);\n    if (i == -1) i = s.length;\n    var h = s.substring(start, i);\n    h = '<a href=\"$h\">$h<\/a>';\n    s = s.substring(0, start) + h + s.substring(i);\n    i = start + h.length;\n  }\n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74518,"user_id":null,"body":"String anchorize(String text) {\n  var regex = RegExp(r'(\\w+[ ])?(\\S+\\:\\\/\\\/\\S+)([ ]?\\!*)?');\n  var buffer = StringBuffer();\n  var allTemp = regex.allMatches(text);\n  for (var temp in allTemp) {\n    var one = temp.group(1) ?? '';\n    var two = temp.group(2);\n    var three = temp.group(3) ?? '';\n    buffer.write(' $one<a href=\"$two\">$two<\/a>$three');\n  }\n  return buffer.toString().trim().replaceAll('  ', ' ');\n}\n\/\/o_O","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5726f813c8dcebf5ed000a6b":[{"id":74519,"user_id":null,"body":"List<int> countKprimes(int k, int start, int end) {\n  List<int> results = [];\n\n  for (int i = start == 0 ? 2 : start; i <= end; i++) {\n    int numOfFactors = 0;\n    int cur = i;\n\n    for (int j = 2; j <= cur \/ j; j++) {\n      while (cur % j == 0) {\n        numOfFactors++;\n        cur = cur ~\/ j;\n      }\n    }\n\n    if (cur > 1) {\n      numOfFactors++;\n    }\n\n    if (numOfFactors == k) {\n      results.add(i);\n    }\n  }\n\n  return results;\n}\n\nint puzzle(int s) {\n  int combinations = 0;\n\n  List<int> onePrimes = countKprimes(1, 2, s);\n  List<int> threePrimes = countKprimes(3, 2, s);\n  List<int> sevenPrimes = countKprimes(7, 2, s);\n\n  for (int i in onePrimes) {\n    for (int j in threePrimes) {\n      for (int k in sevenPrimes) {\n        if (i + j + k == s) combinations++;\n      }\n    }\n  }\n\n  return combinations;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74520,"user_id":null,"body":" List<int> countKprimes(int k, int start, int end) {\n    final list = List.generate(end - start + 1, (index) => start + index);\n\n    bool isKPrimes(int n) => isPrimes(k, n);\n\n    return list.where(isKPrimes).toList();\n}\nint puzzle(int s) {\n    var result = 0;\n    final list = List.generate(s - 1, (index) => index + 2);\n\n    final primes1 = <int>[];\n    final primes3 = <int>[];\n    final primes7 = <int>[];\n\n    for (final n in list) {\n      final count = countPrimes(n);\n      if (count == 1) {\n        primes1.add(n);\n      } else if (count == 3) {\n        primes3.add(n);\n      } else if (count == 7) {\n        primes7.add(n);\n      }\n    }\n    if (primes7.isEmpty) {\n      return result;\n    }\n\n    for (final prime7 in primes7) {\n      for (final prime3 in primes3) {\n        var sum = s - prime7 - prime3;\n        if (prime3 <= 1) {\n          continue;\n        }\n        if (primes1.any((element) => element == sum)) {\n          result++;\n        }\n      }\n    }\n    return result;\n}\n\n  bool isPrimes(int k, int n) {\n    var m = n;\n    var result = 0;\n    for (var number = 2; number <= m; number++) {\n      while (m % number == 0) {\n        if (++result > k) {\n          return false;\n        }\n        m ~\/= number;\n      }\n    }\n\n    return result == k;\n  }\n\n  int countPrimes(int n) {\n    var m = n;\n    var result = 0;\n    for (var number = 2; number <= m; number++) {\n      while (m % number == 0) {\n        if (++result > 7) {\n          return result;\n        }\n        m ~\/= number;\n      }\n    }\n\n    return result;\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74521,"user_id":492,"body":"import 'dart:math' as math;\n\nint primeFactors(int n) {\n    List<int> factors = new List();\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.add(i);\n            n ~\/= i;\n        }\n    }\n    if (n > 1) factors.add(n);\n    return factors.length;\n}\nList<int> countKprimes(int k, int start, int end) {\n    List<int> kprimes = new List();\n    for (int i = start; i <= end; i++)\n        if (primeFactors(i) == k)\n            kprimes.add(i);\n    return kprimes;\n}\nbool isPrime(int n) {\n    if (n == 2)\n        return true; \n    if ((n < 3) || (n % 2 == 0))\n        return false;\n    double limit = math.sqrt(n);\n    for (int i = 3; i <= limit; i += 2) {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\nint puzzle(int s) {\n    int cnt = 0;\n    List<int> b = countKprimes(7, 128, s - 6);\n    List<int> c = countKprimes(3, 4, s - 130);\n    for (int j in b) {\n        for (int k in c) {\n            if (isPrime (s - j - k)) {\n                cnt++;\n            } \n        }\n    }\n    return cnt;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74522,"user_id":53,"body":"List<int> countKprimes(int k, int start, int end) {\n  var ys = new List<int>();\n  for (var n = start; n <= end; n++) {\n    var j = pfc(n);\n    if (j == k) {\n      ys.add(n);\n    }\n  }\n  return ys;\n}\n\nint puzzle(int s) {\n  var m = 0;\n  var xs = countKprimes(7, 128, s - 2);\n  var ys = countKprimes(3, 4, s - 2);\n  for (var i = 0; i < xs.length; i++) {\n    for (var j = 0; j < ys.length; j++) {\n      var c = s - xs[i] - ys[j];\n      if (c > 0 && pfc(c) == 1) {\n        m++;\n      }\n    }\n  }\n  return m;\n}\n\nint pfc(int n) {\n  var j = 0;\n  for (var i = 2; i <= n \/ i; i++) {\n    while (n % i == 0) {\n      j++;\n      n ~\/= i;\n    }\n  }\n  if (n > 1) j++;\n  return j;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74523,"user_id":null,"body":"List<int> countKprimes(int k, int start, int end) {\n  int j,tmp,cnt;\n  var track=<int>[];\n  for(int i=start;i<=end;i++){\n     tmp=i;\n    cnt=0;\n    j=2;\n    while(tmp!=1 && cnt<=k){\n      if(tmp%j==0){\n        tmp=tmp~\/j;\n        cnt+=1;\n      }else{\n        j+=1;\n      }\n    }\n    if(cnt==k && tmp==1){\n      track.add(i);\n      }\n    }\n  \n  return track;\n}\nint puzzle(int s) {\n var a= countKprimes(1,2,s);\n var b= countKprimes(3,2,s);\n  var c= countKprimes(7,2,s);\n  int sol=0;\n  \n  for(int i in a){\n    for(int j in b){\n      for(int k in c){\n        if(i+j+k==s){\n         sol+=1; \n        }\n        }\n      }\n    }\n    return sol;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74524,"user_id":null,"body":"import 'dart:math';\n\nList<int> countKprimes(int k, int start, int end) {\n  List<int> res = [];\n  for (int x = start; x <= end; x++) {\n    int count = 0;\n    int number = x;\n    for (var i = 2; i <= sqrt(x); i++) {\n      while (number % i == 0) {\n        count++;\n        number = number ~\/ i;\n      }\n    }\n    if (number != 1) {\n      count++;\n    }\n\n    if (count == k) res.add(x);\n  }\n\n  return res;\n}\n\nint puzzle(int s) {\n  List<int> prime1List = countKprimes(1, 2, s);\n  List<int> prime3List = countKprimes(3, 2, s);\n  List<int> prime7List = countKprimes(7, 2, s);\n  int count = 0;\n  for (int i1 = 0; i1 < prime1List.length; i1++) {\n    for (int i2 = 0; i2 < prime3List.length; i2++) {\n      for (int i3 = 0; i3 < prime7List.length; i3++) {\n        if (prime1List[i1] + prime3List[i2] + prime7List[i3] == s) count++;\n      }\n    }\n  }\n\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74525,"user_id":null,"body":"Iterable<int> sieveOfEratosthenes(int limit) {\n  List<int> primes = [];\n  List<int> miniDivs = List.generate(limit + 1, (i) => 0);\n  for (int i = 2; i <= limit; i++) {\n    if (miniDivs[i] == 0) {\n      miniDivs[i] = i;\n      primes.add(i);\n    }\n    for (int j = 0;\n        j < primes.length && primes[j] <= miniDivs[i] && i * primes[j] <= limit;\n        j++) {\n      miniDivs[i * primes[j]] = primes[j];\n    }\n  }\n  return primes;\n}\n\nint countDivider(int divisible, int divider) {\n  int count = 0;\n  while (divisible % divider == 0) {\n    divisible = divisible ~\/ divider;\n    count++;\n  }\n  return count;\n}\n\nbool matchDivisible(int divisible, int k, List<int> sieve) {\n  int sumDivs = 0;\n  Iterator<int> it = sieve\n      .takeWhile((divider) => divider <= divisible)\n      .map((divider) => countDivider(divisible, divider))\n      .iterator;\n  while (it.moveNext() && sumDivs < k + 1) {\n    sumDivs += it.current;\n  }\n  return sumDivs == k;\n}\n\nList<int> countKprimesWithSieve(int k, int start, int end, List<int> sieve) {\n  List<int> kPrimes = [];\n  for (int i = start; i <= end; i++) {\n    if (matchDivisible(i, k, sieve)) {\n      kPrimes.add(i);\n    }\n  }\n  return kPrimes;\n}\n\nList<int> countKprimes(int k, int start, int end) {\n  List<int> sieve = sieveOfEratosthenes(end).toList();\n  return countKprimesWithSieve(k, start, end, sieve);\n}\n\nint puzzle(int s) {\n  List<int> sieve = sieveOfEratosthenes(s).toList();\n  return puzzleWithSieve(s, 0, 0, sieve);\n}\n\nint puzzleWithSieve(int s, int prevSum, int stepNum, List<int> sieve) {\n  int k = stepNum == 0\n      ? 7\n      : stepNum == 1\n          ? 3\n          : 1;\n  if (stepNum == 2) {\n    return matchDivisible(s - prevSum, 1, sieve) ? 1 : 0;\n  }\n  List<int> matchingPrimes = countKprimesWithSieve(k, 1, s - prevSum, sieve);\n  return matchingPrimes\n      .map((m) => puzzleWithSieve(s, prevSum + m, stepNum + 1, sieve))\n      .fold(0, (value, element) => value + element);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74526,"user_id":null,"body":"import 'dart:math';\n\nList<int> countKprimes(int k, int start, int end) {\n  List<int> res = [];\n  for (int i = start; i <= end; i++) {\n    final decomp = primeDecomposition(i);\n    \/\/ print(decomp);\n    final primesCount = decomp.values.reduce(\n      (value, element) => value + element,\n    );\n    if (primesCount == k) res.add(i);\n  }\n  return res;\n}\n\nint puzzle(int s) {\n  if (s < 138) return 0;\n  final k1 = countKprimes(1, 2, s);\n  final k3 = countKprimes(3, 8, s);\n  final k7 = countKprimes(7, 128, s);\n  int res = 0;\n  if (k1.isEmpty || k3.isEmpty || k7.isEmpty) return 0;\n  for (int i = 0; i < k1.length; i++) {\n    for (int j = 0; j < k3.length; j++) {\n      for (int k = 0; k < k7.length; k++) {\n        if (k1[i] + k3[j] + k7[k] == s) {\n          print('${k1[i]}+${k3[j]}+${k7[k]}=$s');\n          res++;\n        }\n      }\n    }\n  }\n  return res;\n}\n\nMap<int, int> primeDecomposition(int n) {\n  if (checkIsPrime(n)) {\n    return {n: 1};\n  }\n  \/\/ get decompositions\n  int nTmp = n;\n  int s = sqrt(n).toInt();\n  Map<int, int> res = {};\n  for (int i = 2; i <= s; i++) {\n    if (!checkIsPrime(i)) continue;\n    int prime = i;\n    if (prime > nTmp) break;\n    while (nTmp % prime == 0) {\n      nTmp ~\/= prime;\n      if (res[prime] != null)\n        res[prime] = (res[prime] ?? 0) + 1;\n      else\n        res[prime] = 1;\n    }\n    if (nTmp > 1 && checkIsPrime(nTmp)) {\n      res[nTmp] = 1;\n      break;\n    }\n  }\n  return res;\n}\n\nMap<int, bool> primes = {2: true, 3: true, 4: false};\nbool checkIsPrime(int n) {\n  if (primes.containsKey(n)) return primes[n] ?? false;\n  int s = sqrt(n).floor();\n  for (int i = 2; i <= s; i++) {\n    if (n % i == 0) {\n      primes[n] = false;\n      return false;\n    }\n  }\n  primes[n] = true;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74527,"user_id":null,"body":"import 'dart:math';\n\nList<int> countKprimes(int k, int start, int end) {\n  var ans = <int>[];\n  for (var i = start; i <= end; i++) {\n    var tempK = 0;\n    var x = i;\n    for (var j = 2; j <= sqrt(i); j++)\n    {\n      while (x % j == 0) {\n        tempK ++;\n        x ~\/= j;\n      }\n    }\n    if (x != 1) tempK++;\n    if (tempK == k) ans.add(i);\n  }\n  return ans;\n}\n\n\nint puzzle(int s) {\n  var ans = 0;\n  var prime1 = countKprimes(1, 2, s);\n  var prime3 = countKprimes(3, 2, s);\n  var prime7 = countKprimes(7, 2, s);\n  for (final p1 in prime1) {\n    for (final p3 in prime3) {\n      for (final p7 in prime7) {\n        if (p1 + p3 + p7 == s) ans++;\n      }\n    }\n  }\n  return ans;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74528,"user_id":null,"body":"import 'dart:math' as math;\n\nList<int> countKprimes(int k, int start, int end) {\n  final List<int> result = [];\n  for (var i = start; i <= end; i++) {\n    if (isKPrime(k, i)) {\n      result.add(i);\n    }\n  }\n  return result;\n}\n\nisKPrime(int k, int num) {\n  final List<int> factors = [];\n\n  while (num % 2 == 0) {\n    factors.add(2);\n    num = num ~\/ 2;\n  }\n\n  for (var i = 3; i < math.sqrt(num) + 1; i += 2) {\n    while (num % i == 0) {\n      factors.add(i);\n      num = num ~\/ i;\n    }\n  }\n\n  if (num > 2) {\n    factors.add(num);\n  }\n\n  return factors.length == k;\n}\n\nint puzzle(int s) {\n  int result = 0;\n  final onePrimes = countKprimes(1, 1, s);\n  final treePrimes = countKprimes(3, 1, s);\n  final sevenPrimes = countKprimes(7, 1, s);\n  for (var one in onePrimes) {\n    for (var three in treePrimes) {\n      third:\n      for (var seven in sevenPrimes) {\n        if (one + three + seven == s) {\n          result++;\n          break third;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57591ef494aba64d14000526":[{"id":74529,"user_id":null,"body":"class JohnAndAnn {\n  var _john = <int>[];\n  var _ann = <int>[];\n  JohnAndAnn(int n) {\n    _john = <int>[0];\n    _ann = <int>[1];\n    for (var x = 1; x < n; x++) {\n      _john.add(x - _ann[_john[x - 1]]);\n      _ann.add(x - _john[_ann[x - 1]]);\n    }\n  }\n\n  List<int> getAnn() {\n    return _ann;\n  }\n\n  List<int> getJohn() {\n    return _john;\n  }\n}\nList<int> john(int n) =>JohnAndAnn(n).getJohn();\nint sumJohn(int n) =>JohnAndAnn(n).getJohn().reduce((x,y)=>x+y);\nList<int> ann(int n) =>JohnAndAnn(n).getAnn();\nint sumAnn(int n) =>JohnAndAnn(n).getAnn().reduce((x,y)=>x+y);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74530,"user_id":null,"body":"  final j = {0: 0};\n  final a = {0: 1};\n\n  List<int> john(int n) {\n    if (j.length < n) {\n      calcKatas(n);\n    }\n\n    return j.values.take(n).toList();\n  }\n\n  int sumJohn(int n) {\n    if (j.length < n) {\n      calcKatas(n);\n    }\n\n    return j.values.take(n).reduce((value, element) => value + element);\n  }\n\n  List<int> ann(int n) {\n    if (a.length < n) {\n      calcKatas(n);\n    }\n    return a.values.take(n).toList();\n  }\n\n  int sumAnn(int n) {\n    calcKatas(n);\n    return a.values.take(n).reduce((value, element) => value + element);\n  }\n\n  void calcKatas(int n) {\n    for (var i = j.length; i < n; ++i) {\n      j[i] = i - a[j[i - 1]];\n      a[i] = i - j[a[i - 1]];\n    }\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74531,"user_id":53,"body":"\nList<List<int>> walk(int n) {\n  var ans = new List<List<int>>();\n  var xs = new List<int>();\n  var ys = new List<int>();\n  xs.add(0);\n  ys.add(1);\n  for (var i = 1; i < n; i++) {\n    var x1 = xs[i - 1];\n    var x2 = ys[x1];\n    xs.add(i - x2);\n    var y1 = ys[i - 1];\n    var y2 = xs[y1];\n    ys.add(i - y2);\n  }\n  ans.add(ys);\n  ans.add(xs);\n  return ans;\n}\n\nList<int> john(int n) {\n  return walk(n)[1];\n}\nint sumJohn(int n) {\n  return john(n).reduce((a, b) => a + b);\n}\nList<int> ann(int n) {\n  return walk(n)[0];\n}\nint sumAnn(int n) {\n  return ann(n).reduce((a, b) => a + b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74532,"user_id":168,"body":"var johnCache = <int, int>{};\nvar annCache = <int, int>{};\n\nint john0(int n) {\n  if (n <= 0) return 0;\n  if (johnCache.containsKey(n)) return johnCache[n];\n  return johnCache[n] = n - ann0(john0(n - 1));\n}\n\nint ann0(int n) {\n  if (n <= 0) return 1;\n  if (annCache.containsKey(n)) return annCache[n];\n  return annCache[n] = n - john0(ann0(n - 1));\n}\n\nList<int> john(int n) => List.generate(n, john0);\nint sumJohn(int n) => john(n).fold(0, (a, b) => a + b);\nList<int> ann(int n) => List.generate(n, ann0);\nint sumAnn(int n) => ann(n).fold(0, (a, b) => a + b);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74533,"user_id":null,"body":"final _jc = {0: 0};\nfinal _ac = {0: 1};\n\nint _j(int n) => _jc[n] ??= n - _a(_j(n - 1));\n\nint _a(int n) => _ac[n] ??= n - _j(_a(n - 1));\n\nList<int> john(int n) => [ for (int i = 0; i < n; i++) _j(i) ];\n\nint sumJohn(int n) => john(n).fold(0, (prev, val) => prev + val);\n\nList<int> ann(int n) => [ for (int i = 0; i < n; i++) _a(i) ];\n\nint sumAnn(int n) => ann(n).fold(0, (prev, val) => prev + val);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74534,"user_id":null,"body":"List<int> john(int n) {\n  List<int> jList = [0];\n  List<int> aList = [1];\n  for (int i = 1; i < n; i++) {\n    jList.add(i - aList[jList[i - 1]]);\n    aList.add(i - jList[aList[i - 1]]);\n  }\n\n  return jList;\n}\n\nint sumJohn(int n) {\n  int sum = 0;\n  john(n).forEach((count) {\n    sum += count;\n  });\n  return sum;\n}\n\nList<int> ann(int n) {\n  List<int> jList = [0];\n  List<int> aList = [1];\n  for (int i = 1; i < n; i++) {\n    jList.add(i - aList[jList[i - 1]]);\n    aList.add(i - jList[aList[i - 1]]);\n  }\n\n  return aList;\n}\n\nint sumAnn(int n) {\n  int sum = 0;\n  ann(n).forEach((count) {\n    sum += count;\n  });\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74535,"user_id":null,"body":"List<int> john(int n) {\n  final katas = <int>[];\n  for (var i = 0; i < n; i++) {\n    katas.add(_john(i));\n  }\n\n  return katas;\n}\n\nfinal memo = <String, int>{};\n\/\/____________________________\nint _john(n) {\n  if (n == 0) return 0;\n\n  final key = \"_john$n\";\n\n  if (memo.containsKey(key)) {\n    return memo[key];\n  }\n\n  final result = n - _ann(_john(n - 1));\n  memo.putIfAbsent(key, () => result);\n  return result;\n}\n\nint _ann(n) {\n  if (n == 0) return 1;\n\n  final key = \"_ann$n\";\n\n  if (memo.containsKey(key)) {\n    return memo[key];\n  }\n\n  final result = n - _john(_ann(n - 1));\n  memo.putIfAbsent(key, () => result);\n  return result;\n}\n\n\/\/_____________________________\nint sumJohn(int n) {\n  return john(n).reduce((v, e) => v = v + e);\n}\n\nList<int> ann(int n) {\n  final katas = <int>[];\n  for (var i = 0; i < n; i++) {\n    katas.add(_ann(i));\n  }\n\n  return katas;\n}\n\nint sumAnn(int n) {\n  return ann(n).reduce((v, e) => v = v + e);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74536,"user_id":null,"body":"List<int> john(int n) {\n  var johnList = [0];\n  var annList = [1];\n\n  for (var i = 1; i < n; i++) {\n    if (johnList.length <= annList.length) {\n      johnList.add(i - annList[johnList[i - 1]]);\n      annList.add(i - johnList[annList[i - 1]]);\n    }\n  }\n  return johnList;\n}\n\nint sumJohn(int n) {\n  return john(n).fold(0, (a, b) => a + b);\n}\n\nList<int> ann(int n) {\n  var johnList = [0];\n  var annList = [1];\n\n  for (var i = 1; i < n; i++) {\n    if (johnList.length <= annList.length) {\n      johnList.add(i - annList[johnList[i - 1]]);\n      annList.add(i - johnList[annList[i - 1]]);\n    }\n  }\n  return annList;\n}\n\nint sumAnn(int n) {\n  return ann(n).fold(0, (a, b) => a + b);\n}\n\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74537,"user_id":null,"body":"List<int> john(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n\/\/   KataAnna = n - kataJohn(t)\n\/\/ t = kataAnna(n -1)\n\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final bjohn = i - a[t1];\n    j.add(bjohn);\n    final t = a[i - 1];\n    final banna = i - j[t];\n    a.add(banna);\n  }\n  return j;\n}\n\nint sumJohn(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final bjohn = i - a[t1];\n    j.add(bjohn);\n    final t = a[i - 1];\n    final banna = i - j[t];\n    a.add(banna);\n  }\n  final result = j.reduce((value, element) => value + element);\n  return result;\n}\n\nList<int> ann(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final bjohn = i - a[t1];\n    j.add(bjohn);\n    final t = a[i - 1];\n    final banna = i - j[t];\n    a.add(banna);\n  }\n  return a;\n}\n\nint sumAnn(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final bjohn = i - a[t1];\n    j.add(bjohn);\n    final t = a[i - 1];\n    final banna = i - j[t];\n    a.add(banna);\n  }\n  final result = a.reduce((value, element) => value + element);\n  return result;\n}\n\nvoid main() {\n  \/\/ print(john(10));\n\/\/print(ann(10));\n  print(sumJohn(11));\n  print(sumAnn(5));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74538,"user_id":null,"body":"List<int> john(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n\/\/ KataJohn(n) = n - KataAnn(t)\n\/\/ t = KataJohn(n-1)\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final t2 = a[i - 1];\n    final value1 = i - a[t1];\n    j.add(value1);\n    final value2 = i - j[t2];\n    a.add(value2);\n  }\n  return j;\n}\n\nint sumJohn(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final t2 = a[i - 1];\n    final value1 = i - a[t1];\n    j.add(value1);\n    final value2 = i - j[t2];\n    a.add(value2);\n  }\n  int reslut = j.reduce((v, e) => v + e);\n  return reslut;\n}\n\nList<int> ann(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final t2 = a[i - 1];\n    final value1 = i - a[t1];\n    j.add(value1);\n    final value2 = i - j[t2];\n    a.add(value2);\n  }\n  return a;\n}\n\nint sumAnn(int n) {\n  List<int> j = [0];\n  List<int> a = [1];\n  for (var i = 1; i < n; i++) {\n    final t1 = j[i - 1];\n    final t2 = a[i - 1];\n    final value1 = i - a[t1];\n    j.add(value1);\n    final value2 = i - j[t2];\n    a.add(value2);\n  }\n  int reslut = a.reduce((v, e) => v + e);\n  return reslut;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5779624bae28070489000146":[{"id":74539,"user_id":null,"body":"logistic_map(int width, int height, List<int> xs, List<int> ys) {\n  final p = Points(xs, ys);\n  return Iterable\n    .generate(height)\n    .map(\n      (y) => Iterable\n        .generate(width)\n        .map((x) => p.minDistance(x, y))\n        .toList()\n    )\n    .toList();\n}\n\nclass Points {\n  final Iterable<Point> _points;\n  \n  Points(List<int> xs, List<int> ys) : \n    _points = Iterable.generate(xs.length).map((_) => Point(xs[_], ys[_]));\n  \n  int minDistance(int x, int y) {\n    if (_points.isEmpty) return null;\n    return _points.map(Point(x, y).dist).reduce((a, b) => a < b ? a: b);\n  }\n}\n\nclass Point {\n  final int x;\n  final int y;\n  \n  const Point(this.x, this.y);\n  \n  int dist(Point p) => (x - p.x).abs() + (y - p.y).abs();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74540,"user_id":250,"body":"logistic_map(width,height,xs,ys) {\n  var resp = List.generate(height, (i) => List<int?>.filled(width, null, growable: false), growable: false);\n  \n  var q = [];\n  \n  for (var i = 0; i < xs.length; i++) {\n    q.add([xs[i], ys[i], 0]);\n  }\n  \n  while (q.length > 0) {\n    var c = q.removeAt(0);\n    var x = c[0];\n    var y = c[1];\n    \n    if (resp[y][x] == null || resp[y][x] as int > c[2]) {\n      var v = c[2];\n      resp[y][x] = v;\n      \n      if (x > 0) {\n        q.add([x-1, y, v+1]);\n      }\n      \n      if (x < width-1) {\n        q.add([x+1, y, v+1]);\n      }\n      \n      if (y > 0) {\n        q.add([x, y-1, v+1]);\n      }\n      \n      if (y < height-1) {\n        q.add([x, y+1, v+1]);\n      }\n    }\n  }\n  \n  return resp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74541,"user_id":null,"body":"logistic_map(width, height, xs, ys) {\n  var map = List<List<int>>.generate(\n      height, (index) => List.generate(width, (_) => null));\n\n  if (xs.isNotEmpty) {\n    for (var point = 0; point < width * height; point++) {\n      final x = point % width;\n      final y = point ~\/ width;\n\n      final distances = List.generate(\n          xs.length, (i) => (x - xs[i]).abs() + (y - ys[i]).abs());\n\n      \/\/ Get minimum distance\n      map[y][x] = distances.reduce((a, b) => a < b ? a : b);\n    }\n  }\n\n  return map;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74542,"user_id":null,"body":"logistic_map(width,height,xs,ys) {\n  \/\/ create 2d array of width and height\n  \/\/ for each spot find closest distance to x and y supply spots\n  \/\/ if the xs and ys are empty return null for each spot\n  var distanceMap = new List.generate(height, (_) => new List(width));\n  \n  if (xs.length == 0 || ys.length == 0) {\n    return distanceMap;\n  }\n  \n  for (var row = 0; row < height; row++) {\n    for (var col = 0; col < width; col++) {\n      for (int i = 0; i < xs.length; i++) {\n        var x = xs[i];\n        var y = ys[i];\n        var distance = (col - x).abs() + (row - y).abs();\n        if (distanceMap[row][col] == null || distanceMap[row][col] > distance) {\n          distanceMap[row][col] = distance;\n        }\n      }\n    }\n  }\n  \n  return distanceMap;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74543,"user_id":null,"body":"logistic_map(width,height,xs,ys) {\n  if(xs.isEmpty || ys.isEmpty) return List.generate(height, (_) => List.generate(width, (_) => null));\n  var dist = 0;\n  List<List<int>> lst = List.generate(height, (_) => List.generate(width, (_) => width + height));\n  for(int i = 0; i < xs.length; i++){\n    for(int k = 0;  k < height; k++){\n      for(int m = 0; m < width; m++){\n        dist = (xs[i] - m).abs() + (ys[i] - k).abs();\n        if(dist < lst[k][m]) lst[k][m] = dist;\n      }\n    }\n  }\n  print(lst);\n  return lst;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74544,"user_id":null,"body":"import 'dart:math';\n\nlogistic_map(width,height,xs,ys) {\n  return List.generate(height, (i) => List.generate(width, (j) {\n    int? nearest;\n    \n    for (int k = 0; k < xs.length; k++) {\n      final distance = (j - xs[k]).abs().toInt() + (i - ys[k]).abs().toInt();\n      \n      if (nearest == null) {\n        nearest = distance;\n      } else {\n        nearest = min(distance, nearest);\n      }\n    }\n    \n    return nearest;\n  }));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74545,"user_id":null,"body":"logistic_map(width,height,xs,ys) {\n  if (xs.length == 0) return List.filled(height, List.filled(width, null));\n  var map = List.generate(height, (_) => List.filled(width, width+height));\n  for (final y in Iterable.generate(height)) {\n    for (final x in Iterable.generate(width)) {\n      for (final i in Iterable.generate(xs.length)) {\n        final d = (x-xs[i]).abs() + (y-ys[i]).abs();\n        if (d < map[y][x]) map[y][x] = d;\n      }\n    }    \n  }\n  return map;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74546,"user_id":null,"body":"logistic_map(width,height,xs,ys) {\n  if (xs.length == 0) return List.filled(height, List.filled(width, null));\n  var map = [];\n  for (final y in Iterable.generate(height)) {\n    map.add([]);\n    for (final x in Iterable.generate(width)) {\n      map[y].add(width+height);\n      for (final i in Iterable.generate(xs.length)) {\n        final d = (x-xs[i]).abs() + (y-ys[i]).abs();\n        if (d < map[y][x]) map[y][x] = d;\n      }\n    }    \n  }\n  return map;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74547,"user_id":null,"body":"import 'dart:math' as math;\n\nlogistic_map(width,height,xs,ys) {\n  var result = <List<int?>>[];\n  var supplyPoints = <List<int>>[];\n  \n  for(int i = 0; i < xs.length; i++) {\n    supplyPoints.add([ys[i], xs[i]]);\n  }\n  \n  print(supplyPoints);\n  \n  for(int i = 0; i < height; i++) {\n    result.add([]);\n    \n    for(int j = 0; j < width; j++) {\n      int min = 100000;\n      \n      for(var point in supplyPoints) {\n        var dist = distance(point, [i,j]);\n                \n        if(dist < min) {\n          min = dist;\n        \n        }\n      }\n      \n      result[i].add(supplyPoints.isNotEmpty ? min : null);\n    }\n  }\n  \n  return result;\n}\n\nint distance(List<int> first, List<int> second) {\n  return (first.first - second.first).abs() + (first.last - second.last).abs();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74548,"user_id":243,"body":"import 'package:collection\/collection.dart';\n\nlogistic_map(width, height, xs, ys) {\n  return List.generate(\n    height,\n    (y) => List.generate(\n      width,\n      (x) => (List.generate(\n        xs.length,\n        (i) => (x - xs[i]).abs() + (y - ys[i]).abs(),\n      )..sort()).firstOrNull,\n    ),\n  );\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"578553c3a1b8d5c40300037c":[{"id":74549,"user_id":null,"body":"int binary_array_to_number(List<int> arr) {\n  return int.parse(arr.join(), radix: 2);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74550,"user_id":645,"body":"int binary_array_to_number(List<int> arr) => int.parse(arr.join(''), radix: 2);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74551,"user_id":759,"body":"int binary_array_to_number(List<int> arr) {\n  var res = 0;\n  for (var x in arr) res = (res << 1) + x;\n  return res;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74552,"user_id":null,"body":"int binary_array_to_number(List<int> arr) => arr.fold(0, (n,b) => (n<<1)+b);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74553,"user_id":null,"body":"import 'dart:math';\n\nint binary_array_to_number(List<int> arr) {\n  return arr\n    .reversed\n    .toList()\n    .asMap()\n    .entries\n    .map( (e) => e.value*pow(2,e.key) )\n    .reduce( (a, b) => a+b );\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74554,"user_id":null,"body":"int binary_array_to_number(List<int> arr) {\n  var binaryString = arr.join('');\n\n  if (RegExp(r'[01]').allMatches(binaryString).length == arr.length) {\n    return int.parse(binaryString, radix: 2);\n  }\n  throw Exception('Contains wrong symbols');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74555,"user_id":null,"body":"int binary_array_to_number(List<int> arr) => arr.fold(0,(partial,n) => partial*2+n);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74556,"user_id":null,"body":"int binary_array_to_number(List<int> arr) {\n  int sum = 0;\n  for (int i = 0; i < arr.length; i ++) {\n    sum += arr[i] <<(arr.length - 1 - i);\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74557,"user_id":null,"body":"import \"dart:math\";\n\nint binary_array_to_number(List<int> arr) {\n  \n  int result = 0;\n  int count = 0;\n  \n  for(int i=arr.length-1; i>=0; i--){ \n    if(arr[i] != 0){\n      result += pow(2,count) as int;\n    } \n    count++;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74558,"user_id":null,"body":"import 'dart:math';\n\nint binary_array_to_number(List<int> arr) {\n  int sum = 0;\n  \n  for(int i = 0; i < arr.length; i++) {\n    sum += arr[i] * pow(2, arr.length - 1 - i).toInt();\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57a049e253ba33ac5e000212":[{"id":74559,"user_id":53,"body":"int factorial(int n) {\n  return n > 1 ? n * factorial(n-1) : 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74560,"user_id":null,"body":"int factorial(int n) {\n  var f = 1;\n  for(var i = 1; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74561,"user_id":null,"body":"int factorial(int n) {\n  int product = 1;\n  for (int i = 1; i <= n; i++){\n    product *= i;\n  }\n  return product;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74562,"user_id":null,"body":"int factorial(int n) {\n  int count = 1;\n  while(n >0){\n    count*=n;\n    n--;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74563,"user_id":null,"body":"int factorial(int n) {\n  int c1 = 1;\n  for(int i = n; i>=1;i--){\n    c1 = n*c1;\n    n= n-1;\n  }\n  return c1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74564,"user_id":null,"body":"int factorial(int n) {\n  \/\/ your code here\n  if(n == 0 || n == 1) {\n    return 1;\n  }\n  \n  return (factorial(n-1) * n);\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74565,"user_id":null,"body":"int factorial(int n) => n > 1 ? factorial(n - 1) * n : 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74566,"user_id":null,"body":"int factorial(int n) => (n == 0) ? 1 : n * factorial(n - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74567,"user_id":null,"body":"int factorial(int n) {\n  return List.generate(n, (i) => i + 1).fold(1, (int a, b) => a * b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74568,"user_id":null,"body":"int factorial(int n) {\n  if (n.isNegative) {\n    throw 'n must be > or = to 0';\n  }\n  return n == 0 || n == 1 ? 1 : (n * factorial(n - 1));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57a0556c7cb1f31ab3000ad7":[{"id":74569,"user_id":645,"body":"String make_upper_case(String str) => str.toUpperCase();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74570,"user_id":527,"body":"String make_upper_case(String str) {\n  return str.toUpperCase();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74571,"user_id":null,"body":"String make_upper_case(String str) => str!= null && str.isNotEmpty ? str.toUpperCase() : '';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74572,"user_id":null,"body":"String make_upper_case(String str) {\n  \/\/ your code here\n  int length = str.length;\n  List upTocase = [];\n  for(int i = 0 ; i <=  length; i++){\n    upTocase.add(str);\n    break;\n  }\n  String result = upTocase[0].toString().toUpperCase();  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74573,"user_id":null,"body":"String make_upper_case(String str) {\n  \/\/ your code here\n  String kata = str.toUpperCase();\n  \n  return kata;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74574,"user_id":null,"body":"\/\/ MakeUpperCase\nString make_upper_case(String str) {\n  return str.toUpperCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74575,"user_id":null,"body":"String make_upper_case(String str) {\nreturn str.toString().toUpperCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74576,"user_id":null,"body":"String make_upper_case(String str) {\n    final result = str.toUpperCase();\n    return result;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74577,"user_id":null,"body":"String make_upper_case(String str) {\n  return [for (int i = 0; i < str.length; ++i) str[i].toUpperCase()].join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74578,"user_id":null,"body":"String make_upper_case(String str) => str.toUpperCase();\n  \/\/ your code here\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57a0e5c372292dd76d000d7e":[{"id":74579,"user_id":null,"body":"String repeat_str(int n, String s) => s * n;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74580,"user_id":527,"body":"String repeat_str(int n, String s) {\n  return s * n;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74581,"user_id":null,"body":"String repeat_str(int n, String s) {\n var generatedWord = [];\n  for(var i = 1; i<=n; i++) {\n    generatedWord.add(s);\n  }\n return generatedWord.join('');\n\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74582,"user_id":null,"body":"String repeat_str(n,s)=>s*n;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74583,"user_id":null,"body":"String repeat_str(int n, String s) {\n  if(n==1)\n    return s;  \n  else return repeat_str( n-1, s)+s;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74584,"user_id":null,"body":"String repeat_str(int n, String s) => List.generate(n, (i) => s).join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74585,"user_id":null,"body":"String repeat_str(int n, String s) {\n    return List<String>.filled(n, s).join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74586,"user_id":null,"body":"void main(List<String> args) {\n  print(repeat_str(5, \"taha\"));\n}\n\nString repeat_str(int n, String s) {\n  String repeat = \"\";\n  for (var i = 0; i < n; i++) {\n    repeat += s;\n  }\n  return repeat;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74587,"user_id":null,"body":"String repeat_str(int n, String s) {\n  \/\/ ignore: omit_local_variable_types\n  String result = '';\n  for (var i = 0; i < n; i++) {\n    result += s;\n  }\n  return result;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74588,"user_id":null,"body":"String repeat_str(r,str){\n  String S='';\n    for(int i=0;i<r;i++){\n      S+=str;\n    }\n    return S;\n  }\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57a1fd2ce298a731b20006a4":[{"id":74589,"user_id":null,"body":"bool is_palindrome(String x) {\n  return x.toUpperCase().split(\"\").reversed.join() == x.toUpperCase();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74590,"user_id":645,"body":"bool is_palindrome(String x) => x.toLowerCase().split('').reversed.join('') == x.toLowerCase();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74591,"user_id":null,"body":"bool is_palindrome(String x) {\n  final lowercased = x.toLowerCase();\n  final reversed = lowercased.split('').reversed.join();\n  return lowercased == reversed;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74592,"user_id":null,"body":"bool is_palindrome(String s) {\n    s = s.toLowerCase();\n    return s == s.split(\"\").reversed.join(\"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74593,"user_id":null,"body":"bool is_palindrome(String x) => x.toLowerCase() == x.split('').reversed.join('').toLowerCase();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74594,"user_id":null,"body":"bool is_palindrome(String x) {\n  var l = x.toLowerCase();\n  var y = l.split('').reversed.join('');\n  return y == l;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74595,"user_id":null,"body":"bool is_palindrome(String s) => s.toLowerCase() == s.toLowerCase().split('').reversed.join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74596,"user_id":null,"body":"bool is_palindrome(String s) => s.toLowerCase() == s.toLowerCase().split('').reversed.join() ? true : false;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74597,"user_id":null,"body":"bool is_palindrome(String x) {\n  var leftPointer = 0;\n  var rightPointer = x.length - 1;\n  while (leftPointer < rightPointer){\n    if (x.toLowerCase()[leftPointer] != x.toLowerCase()[rightPointer]) {\n      return false;\n    }\n    leftPointer++;\n    rightPointer--;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74598,"user_id":null,"body":"bool is_palindrome(String x) => x.toLowerCase() == x.toLowerCase().split('').reversed.join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57a4d500e298a7952100035d":[{"id":74599,"user_id":168,"body":"int hex_to_dec(String hexString) => int.parse(hexString, radix: 16);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74600,"user_id":null,"body":"int hex_to_dec(String hexString) {\n  return int.parse(hexString, radix: 16);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74601,"user_id":null,"body":"int hex_to_dec(String h) => int.parse(h, radix:16);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74602,"user_id":null,"body":"import 'dart:math';\nint hex_to_dec(String hexString) {\n  dynamic rez = 0;\n  int step = hexString.length - 1;\n  for (int i = 0; i < hexString.length; i++) {\n    var pow1 = pow(16, step);\n     switch (hexString[i]) {\n      case '-':\n        break;\n      case 'a':\n      case 'A':\n        rez += pow1 * 10;\n        break;\n      case 'b':\n      case 'B':\n        rez += pow1 * 11;\n        break;\n      case 'c':\n      case 'C':\n        rez += pow1 * 12;\n        break;\n      case 'd':\n      case 'D':\n        rez += pow1 * 13;\n        break;\n      case 'e':\n      case 'E':\n        rez += pow1 * 14;\n        break;\n      case 'f':\n      case 'F':\n        rez += pow1 * 15;\n        break;\n      default:\n        rez += pow1 * int.parse(hexString[i]);\n    }\n    step--;\n  }\nif (hexString[0] == '-') {\n  rez*=(-1);\n}\n  return rez;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74603,"user_id":null,"body":"int hex_to_dec(h)=>int.parse(h, radix:16);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74604,"user_id":null,"body":"int hex_to_dec(String str) =>   int.parse(str, radix: 16);\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74605,"user_id":null,"body":"int hex_to_dec(String hexString) {\n  if (hexString[0] == \"-\") {\n    return -1 * hex_to_dec(hexString.substring(1));\n  }\n  \n  const numbers = \"0123456789abcdef\";\n  \n  int result = 0;\n  hexString = hexString.toLowerCase();\n  \n  for (var i = 0; i < hexString.length; i++) {\n    result *= 16;\n    result += numbers.indexOf(hexString[i]);\n  }\n  \n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74606,"user_id":null,"body":"import 'dart:math';\n\nint getDecValue(String hex) {\n  switch (hex.toLowerCase()) {\n    case 'a':\n      return 10;\n    case 'b':\n      return 11;\n    case 'c':\n      return 12;\n    case 'd':\n      return 13;\n    case 'e':\n      return 14;\n    case 'f':\n      return 15;\n    default:\n      return int.parse(hex);\n  }\n}\n\nint hex_to_dec(String hexString) {\n    num result = 0;\n    Map<int, String> hexList = hexString.split('').asMap();\n    hexList.forEach((i, e) {\n      int position = (hexList.length - 1);\n      position -= i;\n      print(position);\n      if (e != '-') {\n        num aux = getDecValue(e);\n        result += aux * pow(16, position);\n      }\n    });\n    return hexList[0] != '-' ? result.toInt() : -result.toInt();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74607,"user_id":null,"body":"int hex_to_dec(String hexString) => hexString.contains('-')\n      ? int.parse('-' + '0x$hexString'.replaceAll('-', ''))\n      : int.parse('0x$hexString');","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74608,"user_id":null,"body":"\/\/ Hex to Decimal\nint hex_to_dec(String hexString) {\n  return int.parse(hexString, radix: 16);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57a5c31ce298a7e6b7000334":[{"id":74609,"user_id":null,"body":"int binToDec(String bin) => int.parse(bin, radix: 2);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74610,"user_id":645,"body":"int binToDec(bin) {\n  return int.parse(bin, radix: 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74611,"user_id":null,"body":"int binToDec(String bin) {\n  var chars = bin.split('');\n  var num = 0;\n  \n  for (String c in chars) {\n    if (c == '1') {\n      num = num * 2 + 1;\n    } else {\n      num = num * 2;\n    }\n  }\n  \n  return num;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74612,"user_id":null,"body":"int binToDec(bin) {\n  int length=bin.length;\n  int j=1;\n  int count=0;\n  for(int i=length-1;i>=0;i--){\n    count+= int.parse(bin[i])*j;\n    j=j<<1;\n    \n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74613,"user_id":null,"body":"int binToDec(bin) {\n  var buffer = int.parse(bin, radix: 2);\n  return buffer;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74614,"user_id":null,"body":"int binToDec(bin) {\n  String a = bin.toString();\n  int len = a.length - 1;\n  int s = int.parse(a[len]);\n  int e = 2; \n  for (int i = len -1; i >= 0; i--){\n    s = s + (e * int.parse(a[i]));\n    e = e * 2;\n  }\n  \n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74615,"user_id":527,"body":"int binToDec(bin) => int.parse(bin, radix: 2);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74616,"user_id":527,"body":"int binToDec(String bin) {\n  return int.parse(bin, radix: 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74617,"user_id":53,"body":"int binToDec(bin) {\n  var n = 0;\n  bin.runes.forEach((int rune) {\n    var c = new String.fromCharCode(rune);\n    n <<= 1;\n    if (c == '1')\n      n++;\n  });\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74618,"user_id":null,"body":"\/\/ Bin to Decimal\nint binToDec(bin) {\n  return int.parse(bin, radix: 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57d532d2164a67cded0001c7":[{"id":74619,"user_id":168,"body":"String histogram(List<int> results) {\n  int i = results.length;\n  return results.reversed.map((x) => \"${i--}|${'#' * x}${x > 0 ? ' $x' : ''}\n\").join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74620,"user_id":645,"body":"String histogram(List<int> results) => results.reversed.toList().asMap().map((i, x) => MapEntry(i, \"${results.length - i}|${'#' * x} ${x == 0 ? '' : x}\".trim())).values.toList().join(\"\n\") + \"\n\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74621,"user_id":null,"body":"String histogram(List<int> results) {\n\tvar str = ['1|', '2|', '3|', '4|', '5|', '6|'];\n\n\tfor (var i = 0; i < 6; i++) {\n\t\tif (results[i] == 0) continue;\n\t\tstr[i] += \"#\" * results[i] + \" ${results[i]}\";\n\t}\n\n\treturn str.reversed.join('\n') + '\n';\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74622,"user_id":null,"body":"String histogram(List<int> results) {\n  List<String> hash = List.filled(results.length, '');\n    var aux = '';\n    \n   for (var i = results.length - 1; i >= 0; i--) {\n      if (results[i] != 0) {\n        aux += \"${i + 1}|${'#' * results[i]} ${results[i]}\n\";\n      } else {\n        aux += \"${i + 1}|${'#' * results[i]}\n\";\n      }\n    }\n  return aux;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74623,"user_id":null,"body":"String histogram(List<int> results) {\n  String hist = '';\n  for (int i = results.length - 1; i >= 0; i--) {\n    hist += (results[i] > 0)\n        ? '${i + 1}|${'#' * results[i]} ${results[i]}\n'\n        : '${i + 1}|\n';\n  }\n  return hist;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74624,"user_id":null,"body":"String histogram(List<int> results) {\n  String hist = '';\n  for (int i = results.length - 1; i >= 0; i--) {\n    hist += (results[i] > 0)\n        ? '${i + 1}|${List<String>.generate(results[i], (_) => '#').join()} ${results[i]}\n'\n        : '${i + 1}|\n';\n  }\n  return hist;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74625,"user_id":null,"body":"String histogram(List<int> res){\n  var i = res.length;\n  return res.reversed.map((e) => \"${i--}|${'#' * e}${e > 0 ? ' $e' : ''}\n\").join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74626,"user_id":null,"body":"String histogram(List<int> res){\n  var count = 1;\n  var str = [];\n  for (var i = 0; i < res.length; i++) {\n    if (res[i] != 0) {\n    str += ['$count|${'#' * res[i]} ${res[i]}\n'];\n    } else {\n      str += ['$count|\n'];\n    }\n    count++;\n  }\n  return str.reversed.join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74627,"user_id":null,"body":"String histogram(List<int> results) {\n  int count = 0;\n  String result = '';\n  for(int i=results.length-1; i>=0; i--){\n    result += '${(i+1).toString()}|';\n    for(int j=0; j<results[i];j++){\n      count++;\n      result += '#';\n    }\n    if(count != 0){\n      result += ' ${count}\n';\n    }else{\n      result += '\n';\n    }\n    count = 0;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74628,"user_id":null,"body":"String histogram(List<int> results) {\n  var outStr = \"\";\n  var i = results.length;\n  for (var item in results.reversed.toList()) {\n    outStr += item != 0 ? \"$i|${\"#\" * item} $item\n\" : \"$i|\n\";\n    i--;\n  }\n  return outStr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57eae20f5500ad98e50002c5":[{"id":74629,"user_id":527,"body":"String no_space(String s) => s.replaceAll(\" \", \"\");","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74630,"user_id":null,"body":"String no_space(String x) => x.replaceAll(\" \", \"\");","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74631,"user_id":null,"body":"String no_space(String x) => x.split(' ').join('');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74632,"user_id":null,"body":"String no_space(String x) {\n  return x.replaceAll(\" \", \"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74633,"user_id":null,"body":"String no_space(String x) {\n return x.split(' ').join(); \/\/ i cut my string by ' ' and join these pieses\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74634,"user_id":null,"body":"String no_space(String x) {\n  \/\/ your code here\n  return x.replaceAll(' ', '');\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74635,"user_id":null,"body":"String? no_space(String string) =>string.replaceAll(\" \", '');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74636,"user_id":null,"body":"String no_space(String x) {\n  List<String> l = x.split('');\n  List<String> res = [];\n  for(final item in l){\n    if (item != ' ') res.add(item);\n  }\n  return res.join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74637,"user_id":null,"body":"String no_space(String x) => x.replaceAll(RegExp(' '), '');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74638,"user_id":null,"body":"String no_space(String x) {\n  return x.replaceAll(RegExp(' '), ''); \/\/ your code here\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57ee99a16c8df7b02d00045f":[{"id":74639,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) => nums.expand((p) => p).toList()..sort();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74640,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) => [for (var l in nums) ...l]..sort();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74641,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) {\n  return nums.expand((n) => n).toList()..sort((a, b) => a.compareTo(b));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74642,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) {\n  return nums.fold([], (prev, current) => prev + current)..sort();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74643,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) => [for(List<int> item in nums) ...item]..sort();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74644,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) { List<String> l =\n        nums.map((e) => e.join(' ')).toList().join(' ').split(' ');\n    List<int> l2 = [];\n\n    for (String s in l) {\n      if (s.isNotEmpty) {\n        int i = int.parse(s);\n        l2.add(i);\n      }\n    }\n    l2.sort();\n    return l2;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74645,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) {\n  var flattened = nums.expand((x) => x).toList();\n  flattened.sort();\n  return flattened;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74646,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) => nums.expand((a) => a).toList()..sort();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74647,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) {\n  return nums.expand((i) => i).toList()\n    ..sort();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74648,"user_id":null,"body":"List<int> flattenAndSort(List<List<int>> nums) {\n  var back = <int>[];\n  for (var x in nums) {\n    back.addAll(x);\n  }\n\n  return back..sort();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57f222ce69e09c3630000212":[{"id":74649,"user_id":null,"body":"String well(List<String> x) {\n  var n = x.where((x)=> x == 'good').length;\n  return n > 2 ? 'I smell a series!' : n > 0 ? 'Publish!' : 'Fail!';\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74650,"user_id":53,"body":"String well(List<String> x) {\n  switch (x.where((xs)=>xs==\"good\").length) {\n    case 0: return \"Fail!\";\n    case 1:\n    case 2: return \"Publish!\";\n    default: return \"I smell a series!\";\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74651,"user_id":250,"body":"String well(List<String> x) {\n  var c = x.fold<int>(0, (a,w)=>w=='good'?a+1:a);\n  \n  if (c > 2) return \"I smell a series!\";\n  if (c > 0) return \"Publish!\";\n  return \"Fail!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74652,"user_id":null,"body":"String well(List<String> x) {\n  var good = x.where((e) => e == 'good').length;\n  return good >= 1 && good <= 2 ? 'Publish!' : good > 2 ? 'I smell a series!' : 'Fail!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74653,"user_id":null,"body":"String well(List<String> x) {\n  switch(x.where((idea) => idea == 'good').toList().length) {\n    case 0: return 'Fail!';\n    case 1: case 2: return 'Publish!';\n    default: return 'I smell a series!';\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74654,"user_id":null,"body":"String well(List<String> x) {\n  \n  var map = Map();\n  var elements = x;\n  \n  elements.forEach((x) => map[x] = !map.containsKey(x) ? (1) : (map[x] + 1));\n\n  if (map['good'] == null) { \n    return 'Fail!';\n  } else if (map['good'] <= 2) { \n    return 'Publish!';\n  } else {\n    return 'I smell a series!';\n }\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74655,"user_id":null,"body":"String well(List<String> x) {\n  var xSize = x.where((f) => f.startsWith('g')).toList().length;\n  if (xSize > 2) {\n    return 'I smell a series!';\n  } else if (xSize == 1 || xSize == 2) {\n    return 'Publish!';\n  } else if (xSize == 0) {\n    return 'Fail!';\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74656,"user_id":null,"body":"String well(List<String> x) =>\n  RegExp(r'good').allMatches(x.join('')).isEmpty\n  ? 'Fail!' \n  : RegExp(r'good').allMatches(x.join('')).length < 3 \n  ? 'Publish!' : 'I smell a series!';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74657,"user_id":null,"body":"String well(List<String> x) {\n  int good = 0;\n\n  for(var i = 0; i < x.length; i++){\n    if(x[i]== \"good\"){\n      good ++;\n    }\n  }\n  return (good == 1 || good == 2) ? \"Publish!\" : good == 0 ? \"Fail!\" : \"I smell a series!\";\n \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74658,"user_id":null,"body":"String well(List<String> x) {\n  final g = x.fold(0, (prev, idea) => idea == \"good\" ? prev + 1 : prev);\n  if (g == 0) {\n    return \"Fail!\";\n  }\n  if (g <= 2) {\n    return \"Publish!\";\n  }\n  return \"I smell a series!\";\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57f609022f4d534f05000024":[{"id":74659,"user_id":null,"body":"int stray(numbers) {\n  numbers.sort();\n  int ans = (numbers[0] == numbers[1]) ? numbers.last : numbers.first;\n  \n  return ans;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74660,"user_id":null,"body":"int stray(List<int> numbers) {\n  return numbers.reduce((a,b) => a ^ b);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74661,"user_id":527,"body":"T stray<T>(List<T> xs) {\n  T y = xs[xs[0] == xs[1] ? 0 : 2];\n  return xs.firstWhere((x) => x != y);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74662,"user_id":527,"body":"int stray(List<int> xs) => xs.reduce((x, y) => x ^ y);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74663,"user_id":null,"body":"int stray(List<int> ns) {\n  var base = ns[0] == ns[1] ? ns[0] : ns[2];\n  return ns.firstWhere((n) => n != base);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74664,"user_id":null,"body":"int stray(List numbers){\n\n  for (int i = 0 ; i<numbers.length ; i++){\n    int s = 0 ;\n    for (int j = 0 ; j<numbers.length ; j++){\n      if(numbers[i] != numbers[j]){\n        s++ ;\n      }\n    }\n    if(s == numbers.length-1){\n      return numbers[i] ;\n    }\n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74665,"user_id":null,"body":"int stray(array) {\n\nfor(var i = 0; i < array.length; i++){\n    if(array[i] == array[i+1]){\n      if(array[i] == array[i+2]){\n      } else {\n        return array[i+2];\n      }\n    } else if(array[i] != array[i+2]){\n      return array[i];\n    }\n  }\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74666,"user_id":527,"body":"int stray(List<int> xs) {\n  return xs.reduce((x, y) => x ^ y);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74667,"user_id":null,"body":"int stray(numbers) {\n  numbers.sort();\n  if (numbers[0] == numbers[1]) {\n    return numbers[numbers.length - 1];\n  }\n  else {\n    return numbers[0];\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74668,"user_id":null,"body":"int stray(numbers) {\n  \n  \n  var find = 0;\n  \n  for(int i = 1 ,j =0 ;j < numbers.length;  j++){\n      if(numbers[i] != numbers[j]) find = numbers[j];\n\n    \n  }\n   \n   return find;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57f780909f7e8e3183000078":[{"id":74669,"user_id":null,"body":"int grow(List<int> arr) {\n  return arr.reduce((a,b) => a * b);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74670,"user_id":null,"body":"int grow(List<int> arr)=>arr.fold(1, (p, e)=>p*e);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74671,"user_id":null,"body":"int grow(List<int> arr) => arr.reduce((x,y)=>x*y);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74672,"user_id":null,"body":"int grow(List<int> arr) {\n  return arr.reduce((prev, current) => prev*current);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74673,"user_id":null,"body":"int grow(List<int> arr) {\n  return arr.reduce((x, y) => x * y);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74674,"user_id":null,"body":"int grow(List<int> arr) => arr.fold(1, (p, c) => p*c);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74675,"user_id":null,"body":"int grow(List<int> arr) {\n  return arr.reduce((acc, el) => acc * el);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74676,"user_id":null,"body":"int grow(List<int> arr) {\n  return arr.reduce((v, e) => v * e);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74677,"user_id":null,"body":"int grow(List<int> arr) {\n  return arr.reduce((total,value) => total * value);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74678,"user_id":886,"body":"int grow(List<int> arr) {\n  return arr.reduce((val, el) => val * el);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57f781872e3d8ca2a000007e":[{"id":74679,"user_id":null,"body":"List<int> maps(List<int> arr) => arr.map((i) => i * 2).toList();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74680,"user_id":null,"body":"List<int> maps(List<int> arr) {\n  return arr.map((e) => e*2).toList();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74681,"user_id":null,"body":"List<int> maps(List<int> arr) => arr.map((e) => e * 2).toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74682,"user_id":null,"body":"List<int> maps(List<int> arr) {\n  List<int> s = new List<int>();\n  arr.forEach((e) => s.add(e*2));\n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74683,"user_id":null,"body":"List<int> maps(List<int> arr) => [for (var e in arr) e * 2];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74684,"user_id":null,"body":"List<int> maps(List<int> arr) => arr.map((number) => number * 2).toList();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74685,"user_id":645,"body":"List<int> maps(List<int> arr) => arr.map((x) => x * 2).toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74686,"user_id":null,"body":"List<int> maps(arr)=>[for(var i in arr) i*2];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74687,"user_id":null,"body":"List<int> maps(List<int> arr) {\n  for(int x = 0; x<arr.length; x++){\n  arr[x] = arr[x] * 2; \n  }\n  return arr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74688,"user_id":null,"body":"List<int> maps(List<int> arr) =>\n    [for (int i = 0; i < arr.length; i++) arr[i] * 2];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"57f7b8271e3d9283300000b4":[{"id":74689,"user_id":null,"body":"String even_or_odd(String number) {\n  var list = number.split(\"\").map((e) => int.parse(e));\n  var ods = [for(var n in list) if(n % 2 != 0) n].fold(0, (v, e) => v + e);\n  var evs = [for(var n in list) if(n % 2 == 0) n].fold(0, (v, e) => v + e);\n  return ods > evs ? \"Odd is greater than Even\" : ods == evs ? \"Even and Odd are the same\" : \"Even is greater than Odd\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74690,"user_id":53,"body":"String even_or_odd(String number) {\n  var xs = number.split(\"\").map((c)=>int.parse(c));\n  var odd = xs.where((n)=>n%2==1).fold(0,(a,b)=>a+b);\n  var evn = xs.where((n)=>n%2==0).fold(0,(a,b)=>a+b);\n  return odd > evn ? \"Odd is greater than Even\"\n             : evn > odd ? \"Even is greater than Odd\"\n             : \"Even and Odd are the same\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74691,"user_id":250,"body":"String even_or_odd(String number) {\n  List<int> sums = number.split(\"\").map((n) => int.parse(n))\n    .fold([0,0], (a,n) => n.isEven ? [a[0]+n, a[1]] : [a[0], a[1]+n]);\n  \n  if (sums[0] > sums[1]) {\n    return 'Even is greater than Odd';\n  }\n  \n  if (sums[0] < sums[1]) {\n    return 'Odd is greater than Even';\n  }\n  \n  return 'Even and Odd are the same';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74692,"user_id":null,"body":"String even_or_odd(String number) {\n  var oddSum = 0;\n  var evenSum = 0;\n  for (var i = 0;i< number.length;i++) {\n    int e = int.parse(number[i]);\n    (e % 2) == 0 ? oddSum += e : evenSum += e;\n    }\n  if (oddSum > evenSum) return 'Even is greater than Odd';\n  if (oddSum < evenSum) return 'Odd is greater than Even';\n  return 'Even and Odd are the same';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74693,"user_id":null,"body":"String even_or_odd(String number) {\n  \/\/ convert input to separate lists and calculate sums\n  int oddsSum = [\n    for (var e in number.split(''))\n      if (int.parse(e).isOdd) int.parse(e)\n  ].fold(0, (v, e) => v + e);\n  \n  int evensSum = [\n    for (var e in number.split(''))\n      if (int.parse(e).isEven) int.parse(e)\n  ].fold(0, (v, e) => v + e);\n\n  \/\/ compare sums and return result\n  return evensSum == oddsSum \n    ? \"Even and Odd are the same\"\n    : evensSum > oddsSum\n      ? \"Even is greater than Odd\"\n      : \"Odd is greater than Even\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74694,"user_id":250,"body":"String even_or_odd(String number) {\n  List<int> sums = number.split(\"\").map((n) => int.parse(n))\n    .fold([0,0], (a,n) => n.isEven ? [a[0]+n, a[1]] : [a[0], a[1]+n]);\n  print(sums[0]);\n  print(sums[1]);\n  \n  if (sums[0] > sums[1]) {\n    return 'Even is greater than Odd';\n  }\n  \n  if (sums[0] < sums[1]) {\n    return 'Odd is greater than Even';\n  }\n  \n  return 'Even and Odd are the same';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74695,"user_id":null,"body":"String even_or_odd(String number){\n  int totalEven = number.split('').fold(0,(p,e)=>int.parse(e).isEven?p+int.parse(e):p);\n  int totalOdd = number.split('').fold(0,(p,e)=>int.parse(e).isOdd?p+int.parse(e):p);\n  if(totalOdd == totalEven) return 'Even and Odd are the same';\n  return totalOdd < totalEven? 'Even is greater than Odd': 'Odd is greater than Even';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74696,"user_id":null,"body":"dynamic even_or_odd(String wordnumber){\n   var elementsOdd = <int>[];\n   var elementsEven = <int>[];\n   int sumofOdd=0;\n   int sumofEven=0;\nfor (int i=0;i<wordnumber.length;i++){\nint number=int.parse(wordnumber[i]);\nif (number.isOdd){\n  elementsOdd.add(number);\n}\n  else if (number.isEven){\n    elementsEven.add(number);\n  }\n}\nfor (var a in elementsOdd) {\n  sumofOdd+=a;\n}\nfor (var b in elementsEven) {\n  sumofEven+=b;\n}\n if (sumofEven>sumofOdd){\n   return 'Even is greater than Odd';\n }else if (sumofOdd>sumofEven)\n return 'Odd is greater than Even';\n else if (sumofEven==sumofOdd)\n return 'Even and Odd are the same';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74697,"user_id":null,"body":"String even_or_odd(String number) {\n  int evenSum = 0;\n  int oddSum =0;\n  int index = 0;\n  \n  for(int i=0;i<number.length;i++) {\n    index = int.tryParse(number[i]);\n    if(index%2==0){\n      evenSum += int.tryParse(number[i]);\n    } else {\n      oddSum += int.tryParse(number[i]);\n    }\n  }\n  if(evenSum > oddSum){\n    return \"Even is greater than Odd\";\n  } else if (oddSum > evenSum) {\n    return \"Odd is greater than Even\";\n  } else if(evenSum == oddSum) {\n    return \"Even and Odd are the same\";\n  }\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74698,"user_id":null,"body":"String even_or_odd(String number) {\n  List<int> arr = number.split(\"\").map((e) => int.parse(e)).toList();\n  if (arr.length > 1) {\n    int sumOfOdd = arr.where((element) => element % 2 != 0).isNotEmpty\n        ? arr\n            .where((element) => element % 2 != 0)\n            .reduce((value, element) => value + element)\n        : 0;\n    int sumOfEven = arr.where((element) => element % 2 == 0).isNotEmpty\n        ? arr\n            .where((element) => element % 2 == 0)\n            .reduce((value, element) => value + element)\n        : 0;\n\n    return sumOfEven == sumOfOdd\n        ? \"Even and Odd are the same\"\n        : sumOfEven > sumOfOdd\n            ? \"Even is greater than Odd\"\n            : \"Odd is greater than Even\";\n  } else {\n    return arr.first == 0 ? \"Even and Odd are the same\":arr.first % 2 == 0\n        ? \"Even is greater than Odd\"\n        : \"Odd is greater than Even\";\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"580a094553bd9ec5d800007d":[{"id":74699,"user_id":null,"body":"String apple(dynamic a) {\n  return (a = int.parse(a.toString())) * a > 1000 ?\n    \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74700,"user_id":null,"body":"import 'dart:math';\nimport 'dart:convert';\n\nString apple(dynamic a) => pow(int.parse(a.toString()), 2) >= 1000 ? \"It's hotter than the sun!!\" : \"Help yourself to a honeycomb Yorkie for the glovebox.\"; ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74701,"user_id":null,"body":"String apple(dynamic a) {\n  final n = a is int ? a : int.parse(a);\n  if (n*n > 1000) return \"It's hotter than the sun!!\";\n  return \"Help yourself to a honeycomb Yorkie for the glovebox.\";\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74702,"user_id":250,"body":"String apple(dynamic a) {\n  int n = int.parse('$a');\n  return n*n>1000\n    ?\"It's hotter than the sun!!\"\n    :'Help yourself to a honeycomb Yorkie for the glovebox.';\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74703,"user_id":null,"body":"String apple(dynamic a) => (a is int ? a*a : int.parse(a)*int.parse(a)) > 1000 ? \"It's hotter than the sun!!\" : 'Help yourself to a honeycomb Yorkie for the glovebox.';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74704,"user_id":null,"body":"String apple(dynamic a) =>\n    int.parse(a.toString()) * int.parse(a.toString()) > 1000 ? \n  'It\\'s hotter than the sun!!' \n  : 'Help yourself to a honeycomb Yorkie for the glovebox.';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74705,"user_id":null,"body":"String apple(dynamic a) => (((a is String) ? double.parse(a) : a) > 31.622) ? 'It\\'s hotter than the sun!!' : 'Help yourself to a honeycomb Yorkie for the glovebox.';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74706,"user_id":null,"body":"String apple(dynamic a) {\n  int b  = int.parse('$a');\n  if((b*b) > 1000) {\n    return \"It's hotter than the sun!!\";\n  }\n  return \"Help yourself to a honeycomb Yorkie for the glovebox.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74707,"user_id":null,"body":"import 'dart:math';\n\nString apple(dynamic a) {\n  if (a is String) {\n    a = int.parse(a);\n  }\n  return pow(a, 2) >= 1000\n      ? \"It's hotter than the sun!!\"\n      : \"Help yourself to a honeycomb Yorkie for the glovebox.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74708,"user_id":null,"body":"\/\/ Alan Partridge II - Apple Turnover\nString apple(dynamic a) {\n  int temp = int.parse(a.toString());\n  if (temp * temp > 1000) return \"It's hotter than the sun!!\";\n  return \"Help yourself to a honeycomb Yorkie for the glovebox.\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"582cb0224e56e068d800003c":[{"id":74709,"user_id":null,"body":"int litres(num time)=>(time * 0.5).floor();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74710,"user_id":645,"body":"int litres(num time) => time ~\/ 2;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74711,"user_id":null,"body":"import 'dart:math';\n\nint litres(num time) {\n  \/\/ your code here\n  return (time\/2).floor();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74712,"user_id":null,"body":"int litres(num time) => (time * .5).floor();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74713,"user_id":null,"body":"int litres(num time) {\n  return (time*0.5).floor();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74714,"user_id":null,"body":"int litres(num time) {\n  \/\/int water = time ~\/ 2;\n  \/\/return water;\n  \n  return time ~\/ 2;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74715,"user_id":null,"body":"int litres(numtime) {\n  \/\/ your code here\n    double x = numtime\/2;\n    int b = x.truncate();\n    return b;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74716,"user_id":null,"body":"int litres(num time) {\n  int result;\n  return result = (time * 0.5) ~\/ 1;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74717,"user_id":null,"body":"double litres(num time) => (time - time%2)\/2;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74718,"user_id":null,"body":"int litres(num time)=>(time*0.5).toInt();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"583203e6eb35d7980400002a":[{"id":74719,"user_id":null,"body":"int count_smileys(List<String> arr) {\n  int smileyCount = 0;\n  for(var entry in arr){\n    if(RegExp(r'^[;:][-~]?[)D]$').hasMatch(entry)){\n      smileyCount++;\n    }\n  }\n  return smileyCount;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74720,"user_id":null,"body":"int count_smileys(List<String> arr) {\n  int count = 0;\n  arr.forEach((smile){\n    if(smile.startsWith(\":\") || smile.startsWith(\";\"))\n      if(smile.endsWith(\")\") || smile.endsWith(\"D\")){\n        if(smile.length == 3 && (smile[1] == \"-\" || smile[1] == \"~\"))\n          count++;\n        else if (smile.length == 2)\n          count++;\n      }\n  });\n  return count;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74721,"user_id":null,"body":"int count_smileys(List<String> arr) =>\n    RegExp(r\"[:;](-?|~?)[\\)D]\").allMatches((arr.join(''))).length;","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74722,"user_id":null,"body":"int count_smileys(List<String> arr) => arr.isEmpty ? 0 : arr.where((x) => x.contains(new RegExp(r'[:;][\\-~]?[)D]'))).length;","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74723,"user_id":null,"body":"final validSmileys = [\n  ':)',\n  ';)',\n  ':D',\n  ';D',\n  ':-)',\n  ';-)',\n  ':-D',\n  ';-D',\n  ':~)',\n  ';~)',\n  ':~D',\n  ';~D'\n];\nint count_smileys(List<String> arr) {\n  int count = 0;\n  for (String smile in arr) {\n    if (validSmileys.contains(smile)) {\n      count++;\n    }\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74724,"user_id":null,"body":"int count_smileys(List<String> arr) {\n  RegExp rgx = new RegExp(\"[:;]{1}[~-]?[)D]{1}\");\n  return rgx.allMatches(arr.join(\" \")).length;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74725,"user_id":null,"body":"int count_smileys(List<String> arr) {\n  \/\/ : ;\n  \/\/ - ~\n  \/\/ ) D\n  var count = 0;\n\n  var regExp = RegExp(r'[:;][-~]?[)D]');\n\n  arr.forEach((smile) {\n    if (regExp.hasMatch(smile)) {\n      count += 1;\n    }\n  });\n  return count;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74726,"user_id":250,"body":"int count_smileys(List<String> arr) {\n  var re = RegExp(r\"[:;][-~]?[\\)D]\");\n  return arr.where(re.hasMatch).length;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74727,"user_id":null,"body":"int count_smileys(List<String> arr) => arr.fold(0, (previousValue, element) => RegExp(r'^[;:][-~]?[)D]$').hasMatch(element)?previousValue+1:previousValue);\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74728,"user_id":null,"body":"int count_smileys(List<String> arr) {\n  \/\/ your code here\n  int count =0;\n  arr.forEach((i){\n if(i.length <4){\n      String x= i.substring(0,1);\n      String n =i.substring(i.length-1,i.length);\n      if((x==';'||x==':')&&(n==')'||n=='D')){\n        if(i.length <=3){\n          if(i[1]=='~'||i[1]=='-'||i[1]==')'||i[1]=='D'){\n            count ++;\n          }\n        }\n      }\n      \n    }\n  });\n  return count;\n  \n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"584c7b1e2cb5e1a727000047":[{"id":74729,"user_id":645,"body":"String helloWorld() => String.fromCharCodes([72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74730,"user_id":null,"body":"String helloWorld() {\n  List<int> asciiHelloWorld = [72,101,108,108,111,44,32,87,111,114,108,100,33];\n  return String.fromCharCodes(asciiHelloWorld);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74731,"user_id":null,"body":"String helloWorld() {\n  \n  Hello hello = Hello();\n  World world = World();\n  return hello.runtimeType.toString()+String.fromCharCode(44) + String.fromCharCode(32) +world.runtimeType.toString() + String.fromCharCode(33);\n\n}\n\nclass Hello{}\nclass World{}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74732,"user_id":null,"body":"String helloWorld() {\n  var helloWorldCharCodes = [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33];\n  return helloWorldCharCodes.map((e) => String.fromCharCode(e)).toList().join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74733,"user_id":null,"body":"String helloWorld() {\n  final helloWorld = [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33];\n  return String.fromCharCodes(helloWorld);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74734,"user_id":null,"body":"String helloWorld() {\n List<int> asciiCodes = [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33];\n  return String.fromCharCodes(asciiCodes);;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74735,"user_id":null,"body":"String helloWorld() {\n  \n  List<int> letters = [\n    72, \n    101, \n    108, \n    108, \n    111, \n    44, \n    32, \n    87, \n    111, \n    114, \n    108, \n    100, \n    33,\n  ];\n  \n  List<String> helloWorld = [];\n  \n  for(int letter in letters){\n    helloWorld.add(String.fromCharCode(letter));\n  }\n  \n  return helloWorld.join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74736,"user_id":null,"body":"String helloWorld() {\n    return [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33].map((e) => String.fromCharCode(e)).join();\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74737,"user_id":null,"body":"String helloWorld() {\n  return String.fromCharCode(72)+String.fromCharCode(101)+\n    String.fromCharCode(108)+String.fromCharCode(108)+\n    String.fromCharCode(111)+String.fromCharCode(44)+\n    String.fromCharCode(32)+String.fromCharCode(87)+\n    String.fromCharCode(111)+String.fromCharCode(114)+\n    String.fromCharCode(108)+String.fromCharCode(100)+\n    String.fromCharCode(33);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74738,"user_id":null,"body":"String helloWorld() {\n  return String.fromCharCodes(<int>[72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"585cf93f6ad5e0d9bf000010":[{"id":74739,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n    String pin(int n) => pins.contains(n) ? ' ' : 'I';\n    return '${pin(7)} ${pin(8)} ${pin(9)} ${pin(10)}\n ${pin(4)} ${pin(5)} ${pin(6)} \n  ${pin(2)} ${pin(3)}  \n   ${pin(1)}   ';\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74740,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n\n  Map<int, String> bowlling = {1: 'I', 2: 'I', 3: 'I',4: 'I',5: 'I',6: 'I',7: 'I',8: 'I', 9: 'I', 10: \"I\"};\n  for (var i = 0; i < pins.length; i++) {\n    bowlling[pins[i]] = \" \";\n  }\n  return \"${bowlling[7]} ${bowlling[8]} ${bowlling[9]} ${bowlling[10]}\n ${bowlling[4]} ${bowlling[5]} ${bowlling[6]} \n  ${bowlling[2]} ${bowlling[3]}  \n   ${bowlling[1]}   \";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74741,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n  List<dynamic> field = [\n    [7, ' ', 8, ' ', 9, ' ', 10],\n    [' ', 4, ' ', 5, ' ', 6, ' '],\n    [' ', ' ', 2, ' ', 3, ' ', ' '],\n    [' ', ' ', ' ', 1, ' ', ' ', ' ']\n  ];\n return field\n      .map((e) => e.map((i) {\n            if (pins.contains(i)) {\n              return ' ';\n            }else if(i!=' '){\n              return 'I';\n            }\n            return ' ';\n          }).join())\n      .join('\n');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74742,"user_id":250,"body":"String bowling_pins(List<int> pins) {\n  var i = [\n    \"I\",\n    \"I\", \"I\",\n    \"I\", \"I\", \"I\",\n    \"I\", \"I\", \"I\", \"I\"\n  ];\n  \n  pins.forEach((e) => i[e - 1] = \" \");\n  \n  return \"${i[6]} ${i[7]} ${i[8]} ${i[9]}\n ${i[3]} ${i[4]} ${i[5]} \n  ${i[1]} ${i[2]}  \n   ${i[0]}   \";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74743,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n  String str = '6 7 8 9\n 3 4 5 \n  1 2  \n   0   ';\n  String replace(i, s) => str.replaceFirst(i.toString(), s);\n  for (int i in List.generate(10, (i) => i)) {\n    (pins.contains(i + 1)) ? str = replace(i, ' ') : str = replace(i, 'I');\n  }\n  return str;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74744,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n  var get = (int a) => pins.contains(a) ? ' ' : 'I';\n  return \"${get(7)} ${get(8)} ${get(9)} ${get(10)}\n\" + \n          \" ${get(4)} ${get(5)} ${get(6)} \n\" + \n          \"  ${get(2)} ${get(3)}  \n\" + \n          \"   ${get(1)}   \";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74745,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n  final List<String> bowlingPinsScheme = [\n    'I I I I',\n    ' I I I ',\n    '  I I  ',\n    '   I   '\n  ];\n\n  final Map<int, TablePoint> bowlingPinsMap = createBowlingPinsMap();\n\n  for (var item in pins) {\n    var point = bowlingPinsMap[item];\n    bowlingPinsScheme[point.row] =\n        replaceCharAt(bowlingPinsScheme[point.row], point.column, ' ');\n  }\n\n  return bowlingPinsScheme.join('\n');\n}\n\nMap<int, TablePoint> createBowlingPinsMap() {\n  Map<int, TablePoint> result = {};\n\n  var pinsCount = 1;\n  for (var i = 1; i <= 4; i++) {\n    for (var j = 1; j <= i; j++) {\n      result[pinsCount] = TablePoint(4 - i, 4 - i + (j - 1) * 2);\n      pinsCount++;\n    }\n  }\n\n  return result;\n}\n\nString replaceCharAt(String oldString, int index, String newChar) {\n  return oldString.substring(0, index) +\n      newChar +\n      oldString.substring(index + 1);\n}\n\nclass TablePoint {\n  final int row;\n  final int column;\n\n  TablePoint(this.row, this.column);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74746,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n    var bowling = '7 8 9 0\n 4 5 6 \n  2 3  \n   1   ';\n    for (final pin in pins) {\n      final item = pin == 10 ? '0' : pin.toString();\n      bowling = bowling.replaceFirst(item, ' ');\n    }\n    return bowling.replaceAll(RegExp(r'\\d'), 'I');\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74747,"user_id":null,"body":"String bowling_pins(List<int> pins) {\n    String data = '';\n  bool space = false;\n  int pin = 6;\n  int num = 6;\n\n  for (int j = 0; j < 4; j++) {\n    for (int i = 0; i < 7; i++) {\n      if (i < j || 6 - i < j || space == true) {\n        data += ' ';\n        space = !space;\n      } else {\n        pin++;\n        if (pins.contains(pin)) {\n          data += ' ';\n        } else {\n          data += 'I';\n        }\n        space = !space;\n      }\n    }\n    pin -= 1;\n    pin -= num;\n    num -= 2;\n    if (j < 3) {\n      data += '\n';\n    }\n  }\n  return data;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74748,"user_id":null,"body":"String p(List<int> pins, int n) {\n  return !pins.contains(n) ? \"I\" : \" \";\n}\n\nString bowling_pins(List<int> pins) {\n  return \"${p(pins, 7)} ${p(pins, 8)} ${p(pins, 9)} ${p(pins, 10)}\n ${p(pins, 4)} ${p(pins, 5)} ${p(pins, 6)} \n  ${p(pins, 2)} ${p(pins, 3)}  \n   ${p(pins, 1)}   \";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58649884a1659ed6cb000072":[{"id":74749,"user_id":null,"body":"String update_light(current) {\n  \/\/ Write code here\n  switch(current){\n    case \"green\":\n      return \"yellow\";\n      break;\n    case \"yellow\":\n      return \"red\";\n      break;\n    default:\n      return \"green\";\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74750,"user_id":null,"body":"String update_light(current) {\n  var lights = ['green', 'yellow', 'red'];\n   return lights[(lights.indexOf(current)+1)%3];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74751,"user_id":null,"body":"String update_light(String current) \n  => current=='green'? 'yellow' : current == 'yellow' ? 'red' : 'green';","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74752,"user_id":null,"body":"String update_light(String current) {\n  switch(current) {\n    case \"green\": {\n      return \"yellow\";\n    }\n    case \"yellow\": {\n      return \"red\";\n    }\n    case \"red\": {\n      return \"green\";\n    }\n    default: {\n      return \"\";\n    }\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74753,"user_id":null,"body":"String update_light(String current) {\n  switch(current){\n      case 'green': \n          return 'yellow';\n      case 'yellow': \n          return 'red';\n      case 'red': \n          return 'green';\n      default:\n          return 'unknown color';\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74754,"user_id":169,"body":"String update_light(String current) {\n  const lights = ['green', 'yellow', 'red'];\n  return lights[(lights.indexOf(current)+1)%lights.length];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74755,"user_id":250,"body":"String update_light(String current) => {\"green\":\"yellow\",\"yellow\":\"red\",\"red\":\"green\"}[current].toString();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74756,"user_id":null,"body":"String update_light(String current) => (current == 'yellow') ? 'red' : (current == 'red') ? 'green' : 'yellow' ;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74757,"user_id":null,"body":"String update_light(String current) {\n  return {'green':'yellow', 'yellow':'red', 'red':'green'}[current!]!;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74758,"user_id":null,"body":"String update_light(current) {\n  return current == \"red\" ? \"green\" : current == \"green\" ? \"yellow\" : \"red\";\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"588417e576933b0ec9000045":[{"id":74759,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row)  => (nCols - col + 1)*(nRows - row);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74760,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) => (nCols + 1 - col) * (nRows - row);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74761,"user_id":null,"body":"seats_in_theater(nCols,nRows,col,row)=>(nRows-row)*(nCols-(col-1));\n\/\/I solved this Kata on  [26-Mar-2021] ^_^ [05:46 PM]...#Hussam'sCodingDiary ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74762,"user_id":527,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) {\n  return (nCols - col + 1) * (nRows - row);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74763,"user_id":null,"body":"\/\/ Simple Fun #1:Seats in Theater\nint seats_in_theater(int nCols, int nRows, int col, int row) {\n  return (nCols-col + 1) * (nRows-row);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74764,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) {\n  int dCols, dRows;\n  \n  dCols = nCols - col + 1;\n  \n  dRows = nRows - row;\n  \n  return dCols * dRows;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74765,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) {\n  var propleObstructed = (nCols - (col - 1)) * (nRows - row);\n  print(propleObstructed);\n  return propleObstructed;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74766,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) => (nRows - row) * (nCols - (col - 1));\n\/\/ {\n\/\/   var theaterSeat = [for (var i = 0; i < nCols; i++) [for(var j = 1; j <= nRows; j++) j]];\n\/\/   var seat = <int>[];\n\/\/   var res = 0;\n\n\/\/   for (var i = 0; i != col - 1; i++) {\n\/\/     theaterSeat.removeLast();\n\/\/   }\n\/\/   for (var i = 0; i < theaterSeat.length; i++) {\n\/\/     seat.add(theaterSeat[i].removeLast() - row);\n\/\/   }\n\/\/   for (var i = 0; i < seat.length; i++) {\n\/\/     res += seat[i];\n\/\/   }\n\n\/\/   print(seat);\n\/\/   print(seat.length);\n\/\/   return res;\n\/\/ \/\/   print((nRows - row) * (nCols - (col - 1)));\n\/\/ \/\/   return (nRows - row) * (nCols - col);\n\/\/ }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74767,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) {\n  int cols = nCols-(col-1);\n  int rows = nRows-(row);\n  print(cols);\n  print(rows);\n  \n  return cols*rows;\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74768,"user_id":null,"body":"int seats_in_theater(int nCols, int nRows, int col, int row) {\n  \n  int colunas = nCols - col;\n  int linhas = nRows - row;\n  \n  int result = colunas*linhas;\n  result += nRows - row;\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58841cb52a077503c4000015":[{"id":74769,"user_id":527,"body":"int circle_of_numbers(int n, int fst) {\n  return (fst + n ~\/ 2) % n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74770,"user_id":null,"body":"int circle_of_numbers(int n, int fst) {\n  return (fst + n \/ 2).toInt() % n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74771,"user_id":null,"body":"int circle_of_numbers(int n, int fst) \n  => ((fst+(n\/2))%n).toInt();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74772,"user_id":null,"body":"int circle_of_numbers(int n, int fst) => (fst + n ~\/ 2) % n;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74773,"user_id":null,"body":"int circle_of_numbers(int n, int fst) {\n  \n  int m = fst + (n\/2).round();\n  if (m >= n)\n    m -=n;\n  return m;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74774,"user_id":243,"body":"int circle_of_numbers(n, f) => (f + n ~\/ 2) - (f + n ~\/ 2) ~\/ n * n;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74775,"user_id":null,"body":"int circle_of_numbers(int n, int fst) =>\n    (n ~\/ 2 + fst) >= n ? (n ~\/ 2 + fst) - n : n ~\/ 2 + fst;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74776,"user_id":null,"body":"int circle_of_numbers(int n, int fst) => fst + (n + 1)~\/2 + 1 > n ? fst +(n + 1)~\/2 - n : fst + (n + 1)~\/2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74777,"user_id":null,"body":"int circle_of_numbers(int n, int fst) {\n  final opposite = (n \/ 2).round() + fst;\n  final res = opposite == n \n    ? 0 \n    : opposite > n \n      ? opposite - n \n      : opposite;\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74778,"user_id":null,"body":"int circle_of_numbers(int n, int m) {\n    return m >= (n \/ 2) ? m - (n ~\/ 2) : m + (n ~\/ 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"588422ba4e8efb583d00007d":[{"id":74779,"user_id":759,"body":"int late_ride(int n) => (n ~\/ 60) % 10 + n ~\/ 600 + n % 10 + (n % 60) ~\/ 10;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74780,"user_id":250,"body":"int late_ride(int n) {\n  int h = n ~\/ 60;\n  int m = n % 60;\n  \n  return \"${h}${m}\".split(\"\").fold<int>(0, (a,b) => a+int.parse(b));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74781,"user_id":null,"body":"int late_ride(int n) {\n  var li = [];\n  var h = n ~\/ 60;\n  var m = n - (h * 60);\n  var str = '$h$m'.split('').map((i) => int.parse(i)).toList();\n\n  return str.reduce((x,y)=>x+y);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74782,"user_id":null,"body":"int late_ride(int n) {\n  var hours = n ~\/ 60;\n  var minutes = n % 60;\n  \n  return hours~\/10 + hours%10 + minutes~\/10 + minutes%10;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74783,"user_id":492,"body":"int late_ride(int n) {\n  return n~\/600 + n~\/60%10 + n%60~\/10 + n%10;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74784,"user_id":null,"body":"int late_ride(int n) {\n  \/\/ your code here\n  int hora = n ~\/ 60;\n  int min = n % 60;\n  String concat = '$hora$min';\n  List<String> lista = concat.split('');\n  int soma = 0;\n  for (var i = 0; i < lista.length; i++) {\n    soma += int.parse(lista[i]);\n  }\n\n  return soma;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74785,"user_id":null,"body":"int late_ride(int n) {\n  List<String> digits = [];\n  \n  String horas = (n~\/60).toString();\n  String minutos = (n%60).toString();\n  \n  if(int.parse(horas)>9){\n    digits.add(horas[0]);\n    digits.add(horas[1]);\n  }else{\n    digits.add(horas[0]);\n  }\n  \n  if(int.parse(minutos)>9){\n    digits.add(minutos[0]);\n    digits.add(minutos[1]);\n  }else{\n    digits.add(minutos[0]);\n  }\n  \n  int result = 0;\n  \n  for(int i=0; i<digits.length; i++){\n    result += int.parse(digits[i]);\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74786,"user_id":null,"body":"int late_ride(int n) => ((n~\/60).toString() + n.remainder(60).toString()).split('').map((el) => int.parse(el)).toList().reduce((a,b) => a+b);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74787,"user_id":null,"body":"int late_ride(int n) {\n  int hour = n ~\/60;\n  int min = n % 60;\n  int sum = hour ~\/10 + min ~\/10 + hour % 10 + min % 10;\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74788,"user_id":null,"body":"int late_ride(int n) {\n  double hours = 0;\n  bool j = true;\n  while(j == true){\n    if(n >= 60){\n      n-= 60;\n      hours++;\n    }else {\n      j = false;\n    }\n  }\n  String hoursAndMinutes = '${hours.toStringAsFixed(0)}$n';\n  int res = 0;\n  hoursAndMinutes.split('').forEach((e) => res+= int.parse(e));\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58941fec8afa3618c9000184":[{"id":74789,"user_id":null,"body":"import \"dart:math\";\n\nint growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  final daily_growth = upSpeed - downSpeed;\n  final growth_needed = max(0, desiredHeight - upSpeed);\n  return 1 + (growth_needed \/ daily_growth).ceil();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74790,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  if (desiredHeight - upSpeed <= 0) return 1;\n  return growing_plant(upSpeed, downSpeed, desiredHeight + downSpeed - upSpeed) + 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74791,"user_id":53,"body":"import \"dart:math\";\n\nint growing_plant(int u, int d, int m) {\n  return max(1, ((m - d) \/ (u - d)).ceil());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74792,"user_id":null,"body":"  int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n    int heightnow = 0;\n    int dayslong = 0;\n    for (var i = 0; heightnow < desiredHeight; i++) {\n      heightnow = heightnow + upSpeed;\n      dayslong++;\n      if (heightnow >= desiredHeight) {\n        break;\n      }\n      heightnow = heightnow - downSpeed;\n    }\n    return dayslong;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74793,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  return upSpeed >= desiredHeight ? 1:((desiredHeight - downSpeed)\/(upSpeed - downSpeed)).ceil();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74794,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  int f(int h, int days) {\n    h -= upSpeed;\n    if (h <= 0) {\n      return days;\n    }\n    return f(h + downSpeed, days + 1);\n  }\n  return f(desiredHeight, 1);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74795,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  var daysCount = 0;\n  var heightOfPlant = 0;\n  \n  while(heightOfPlant < desiredHeight){\n    daysCount == 0 ? heightOfPlant += upSpeed : heightOfPlant += (upSpeed - downSpeed);\n    daysCount++;\n  }\n  return daysCount;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74796,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  \/\/ your code here\n  var sum = 0;\n  var count = 0;\n  \n  for(int i = 0; i < desiredHeight; i++) {\n    if(sum < desiredHeight) {\n      count++;\n      sum += upSpeed;\n      if(sum >= desiredHeight) return count;\n      sum -= downSpeed; \n    } else {\n      return count;\n    }\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74797,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  \/\/ your code here\n  int days = 0;\n  int height = 0;\n  \n  while ( height < desiredHeight ) {\n    \n    height = height + upSpeed;\n    days++;   \n    print(\"After $days days the height is $height\");\n    if (height >= desiredHeight) break; \n    \n    height = height - downSpeed;\n    print(\"After $days days the height is $height\");\n  }\n  \n  return days;  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74798,"user_id":null,"body":"int growing_plant(int upSpeed, int downSpeed, int desiredHeight) {\n  int height = 0;\n  int day = 1;\n  \n  while (height < desiredHeight){\n    height += upSpeed;\n    \n    if(height >= desiredHeight)\n      return day;\n    \n    height -= downSpeed;\n    day++;\n  }\n  \n  return day;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5899dc03bc95b1bf1b0000ad":[{"id":74799,"user_id":null,"body":"List<int> invert(List<int> arr) {\n  return arr.map((e) => -e).toList();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74800,"user_id":null,"body":"List<int> invert(List<int> arr) => [for(var i in arr) -i];","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74801,"user_id":null,"body":"List<int> invert(List<int> arr) => arr.map((v) => -v).toList();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74802,"user_id":null,"body":"List<int> invert(List<int> arr) => arr.map((number) => -1 * number).toList();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74803,"user_id":null,"body":"List<int> invert(List<int> arr) => List.generate(arr.length, (index) => -arr[index]);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74804,"user_id":null,"body":"List<int> invert(List<int> arr) => arr.map((num) => num * -1).toList();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74805,"user_id":null,"body":"List<int> invert(List<int> arr) => [for (int e in arr) -e];","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74806,"user_id":null,"body":"List<int> invert(List<int> arr) => [for (var v in arr) -v];\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74807,"user_id":null,"body":"List<int> invert(List<int> arr) {\n  return [for (var v in arr) -v];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74808,"user_id":645,"body":"List<int> invert(List<int> arr) => arr.map((x) => -x).toList();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58acfe4ae0201e1708000075":[{"id":74809,"user_id":527,"body":"bool invite_more_women(List<int> l) {\n  return l.reduce((a, b) => a + b) > 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74810,"user_id":null,"body":"bool invite_more_women(List<int> l) => l.reduce((x, y) => x + y) > 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74811,"user_id":645,"body":"bool invite_more_women(List<int> l) => l.fold(0, (a, b) => a + b) > 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74812,"user_id":250,"body":"bool invite_more_women(List<int> l) => l.fold<int>(0, (a,n) => a+n) > 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74813,"user_id":null,"body":"int countOf(int nbSearch, List<int> myList) {\n  var nbOfIntSearched = 0;\n  myList.forEach(\n      (item) => item == nbSearch ? nbOfIntSearched++ : false);\n  return nbOfIntSearched;\n}\n\nbool invite_more_women(List<int> l) => countOf(-1, l) < countOf(1, l) ? true : false;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74814,"user_id":null,"body":"bool invite_more_women(List<int> l) {\n  var sum = l.reduce((a, b) => a + b);\n  if (sum <= 0) {\n    return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74815,"user_id":null,"body":"bool invite_more_women(List<int> l) {\n\n  return l.where((element) => element.isNegative).length < l.where((element) => !element.isNegative).length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74816,"user_id":null,"body":"bool invite_more_women(List<int> l) => l.reduce((a,b) => a+b) <= 0 ? false : true;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74817,"user_id":null,"body":"bool invite_more_women(List<int> l) {\n  var men = 0;\n  var women = 0;\n  \n  for (var i = 0; i< l.length; i++){\n    if(l[i] > 0) {\n      men += 1;\n    } else {\n      women += 1;\n    };\n  }\n  \n  if(men > women){\n    return true;\n  }\n  else{\n    return false;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74818,"user_id":null,"body":"bool invite_more_women(List<int> l) {\n  \/\/\n  int count = 0;\n  l.forEach((item)=> count = count + item);\n  if (count > 0) return true;\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58cb43f4256836ed95000f97":[{"id":74819,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) => (a.reduce((x, y) => x * y) - b.reduce((x, y) => x * y)).abs();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74820,"user_id":645,"body":"int find_difference(List<int> a, List<int> b) => (a[0] * a[1] * a[2] - b[0] * b[1] * b[2]).abs();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74821,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) {\n  var sum_a = a.reduce((a, b) => a * b);\n  var sum_b = b.reduce((a, b) => a * b);\n  return (sum_a - sum_b).abs();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74822,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) {\n  int sumx = 1;\n  int sumy = 1;\n  for (var x in a) {\n    sumx *= x;\n  }\n  for (var y in b) {\n    sumy *= y;\n  }\n  return (sumx - sumy).abs();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74823,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) => [a.reduce((a, b) => a * b), b.reduce((a, b) => a * b)].reduce((a, b) => a - b).abs();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74824,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) {\n    return (a.reduce((c, d) => c * d) - b.reduce((e, f) => e * f)).abs();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74825,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) => ((a.reduce((d, x) => d * x)) - (b.reduce((d, x) => d * x))).abs();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74826,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) => (a.reduce((v,e)=>v*e) - b.reduce((v,e)=>v*e)).abs();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74827,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) {\n  int x = 1, y = 1;\n  a.forEach((e) {\n    x *= e;\n  });\n  b.forEach((e) {\n    y *= e;\n  });\n  return x-y > 0? x-y : (x-y)*-1 ;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74828,"user_id":null,"body":"int find_difference(List<int> a, List<int> b) => (a.reduce((int value, int item) => value * item) - b.reduce((int value, int item) => value * item)).abs();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58ce8725c835848ad6000007":[{"id":74829,"user_id":null,"body":"int potatoes(int p0, int w, int p1) => (w*(100-p0)~\/(100-p1));","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74830,"user_id":null,"body":"int potatoes(var p0, int w0, var p1) {\n  return (w0 * (100-p0)\/(100-p1)).truncate();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74831,"user_id":527,"body":"int potatoes(int p0, int w0, int p1) {\n  return w0 * (100 - p0) ~\/ (100 - p1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74832,"user_id":null,"body":"int potatoes(int p0, int w0, int p1) => w0 * (100 - p0) ~\/ (100 - p1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74833,"user_id":null,"body":"int potatoes(int p0, int w0, int p1)=>((((w0\/100)*(100-p0))\/(100-p1))*100).floor();\n  \n  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74834,"user_id":null,"body":"int potatoes(int p0, int w0, int p1) {\n  \/\/ your code here\n  double dry_matter_weight = w0 * (100 - p0) \/100;\n  double result =dry_matter_weight \/ (100-p1) * 100;\n  int w1 = result.floor();\n  return w1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74835,"user_id":null,"body":"int potatoes(int p0, int w0, int p1) {\n  \/\/ your code here\n  int n = 100-p0;\n  double d = w0\/100*n;\n  int b = 100-p1;\n  int m = (d*100\/b).floor();\n  return m;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74836,"user_id":null,"body":"int potatoes(int p0, int w0, int p1) {\n  return (w0 * ((100 - p0)\/(100 - p1))).toDouble().toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74837,"user_id":null,"body":"int potatoes(int p0, int w0, int p1) {\n  final dryWeight = w0 *(100 - p0) \/ 100;\n  final result = (dryWeight * 100) \/ (100 - p1);\n  return result.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74838,"user_id":null,"body":"int potatoes(int p0, int w0, int p1) {\n  var percNeed1=100-p0;\n  double firstNeddedValue=(w0*percNeed1)\/100;\n  var percNeed2=100-p1;\n  var secondCalculation=(firstNeddedValue*100)\/percNeed2;\n  print(firstNeddedValue.toInt());\n  return secondCalculation.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58f5c63f1e26ecda7e000029":[{"id":74839,"user_id":null,"body":"List<String> wave(String str) {\n  final laola = <String>[];\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] != ' ') {\n      laola.add(str.substring(0, i) + str[i].toUpperCase() +  str.substring(i + 1));\n    }\n  }\n  return laola;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74840,"user_id":null,"body":"List<String> wave(String str) {\n  return List.filled( str.length, str)\n    .asMap()\n    .entries\n    .where( (e) => e.value[e.key] != \" \")\n    .map( (e) => e.value.replaceRange(e.key, e.key+1, e.value[e.key].toUpperCase()))\n    .toList();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74841,"user_id":null,"body":"List<String> wave(String str) {\n  List<String> result = [];\n  for (int i = 0; i < str.length; i++) {\n    if (str[i] == ' ') continue;\n    result.add(str.replaceRange(i, i + 1, str[i].toUpperCase()));\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74842,"user_id":null,"body":"List<String> wave(String str) {\n  List<String> result = [];\n  for(var i = 0; i < str.length; i++){\n    if(str[i] != ' ') {\n      result.add(str.substring(0, i) + str[i].toUpperCase() + str.substring(i + 1));\n    }\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74843,"user_id":null,"body":"List<String> wave(String str) => RegExp(r'\\w')\n  .allMatches(str)\n  .toList()\n  .map((match) => \n       str.replaceRange(match.start, match.end, match[0].toUpperCase()))\n  .toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74844,"user_id":null,"body":"List<String> wave(String str) {\n  \n  var arr = str.split(''); \/\/\u0420\u043e\u0437\u0431\u0438\u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\n \n  List<String> finalArr = []; \/\/\u0421\u0442\u0432\u043e\u0440\u0438\u0432 \u043f\u0443\u0441\u0442\u0438\u0439 \u0444\u0456\u043d\u0430\u043b\u044c\u043d\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u044f\u043a\u0438\u0439 \u0431\u0443\u0434\u0443 \u0434\u043e\u0434\u0430\u0432\u0430\u0442\u0438 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438\n  \n  \n  for(var i = 0; i < str.length; i++){\/\/\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443\n    if(arr[i] != ' '){ \/\/\u042f\u043a\u0449\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0438\u0432\u0443 \u0446\u0435 \u043d\u0435 \u043f\u0443\u0441\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0430\n      arr[i] = arr[i].toUpperCase();\/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0432\u0435\u0440\u0445\u043d\u0456\u0439 \u0440\u0435\u0433\u0456\u0441\u0442\u0440\n    \n      finalArr.add(arr.join(''));\/\/\u0417\u0430\u043f\u0438\u0441\u0443\u0454\u043c \u0437'\u0454\u0434\u043d\u0430\u0439\u043d\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432(\u0441\u0442\u0440\u043e\u043a\u0443) \u0432 \u0444\u0456\u043d\u0430\u043b\u044c\u043d\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432.  \n    \n      arr[i] = arr[i].toLowerCase();\/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0437\u0430\u0434 \u0434\u043e \u043d\u0438\u0436\u043d\u044c\u043e\u0433\u043e \u0440\u0435\u0433\u0456\u0441\u0442\u0440\u0443 \u0434\u043b\u044f \u043f\u043e\u0434\u0430\u043b\u044c\u0433\u043e \u043a\u043e\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0445\u043e\u0434\u0436\u0435\u043d\u043d\u044f \u043f\u043e \u0446\u0438\u043a\u043b\u0443\n    }\n  \n  }\n  \n  return finalArr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74845,"user_id":null,"body":"List<String> wave(String str) {\n    var fullWave = <String>[];\n\n    for (var i = 0; i < str.length; i++) {\n      if (str[i] == ' ') {\n        continue;\n      }\n\n      fullWave.add(changeAt(str, i));\n    }\n\n    return fullWave;\n  }\n\n\n\nString changeAt(String word, int index) {\n  var newWord = word.substring(0, index) +\n      word[index].toUpperCase() +\n      word.substring(index + 1, word.length);\n\n  return newWord;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74846,"user_id":null,"body":"List<String> wave(String str) {\n  return [for(var i = 0; i < str.length; i++) if(str[i] != ' ')\n          str.substring(0, i) + str.substring(i, i + 1).toUpperCase() + str.substring(i + 1)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74847,"user_id":null,"body":"List<String> wave(String str) {\n  List<String> result =  new List<String>();\n  int i = 0, j = 0;\n  var chars = str.split(\"\");\n  while(i < chars.length){\n    if( chars[i] != \" \")\n    {\n      chars[i] = chars[i].toUpperCase();\n      result.add(chars.join(\"\"));\n      chars[i] = chars[i].toLowerCase();\n    }\n    i++;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74848,"user_id":null,"body":"List<String> wave(String str) {\n   List<String> waveText = [];\n\n    for (int i = 0; i < str.length; i++) {\n            if (str[i] == ' ') continue;\n\n      waveText.add(\n          '${str.substring(0, i)}${str.substring(i, i + 1).toUpperCase()}${str.substring(i + 1)}');\n    }\n\n    return waveText;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58f6f87a55d759439b000073":[{"id":74849,"user_id":null,"body":"bool negation_value(String str, bool val) => str.length.isOdd ? !val : val;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74850,"user_id":null,"body":"bool negation_value(String str, bool val) {\n  int count = str.split(\"!\").length - 1;\n  return count % 2 == 0 ? val : !val;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74851,"user_id":null,"body":"bool negation_value(String str, bool val) => str.length.isEven == val;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74852,"user_id":759,"body":"bool negation_value(String str, bool val) => (str.length & 1 == 1) ^ val;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74853,"user_id":null,"body":"bool negation_value(String str, bool val) => str.length.isOdd ^ val;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74854,"user_id":null,"body":"bool negation_value(String str, bool val) {\n \n  return str.length != 0 && str.length % 2 != 0  ? !val : val;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74855,"user_id":null,"body":"bool negation_value(String str, bool val) {\n  int count = str.length;\n  return count % 2 == 0 ? val : !val;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74856,"user_id":null,"body":"bool negation_value(String str, bool val) {\n  return str.length.isEven ? val : !val;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74857,"user_id":null,"body":"bool negation_value(String str, bool val) {\n  if(str.isEmpty) return val;\n  if((str.length % 2) == 0.0) return val;\n  return !val;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74858,"user_id":null,"body":"bool negation_value(String str, bool val) {\n  if(str.length %2 ==0){\n  return val;\n  }\n  else{\n  return !val;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"58f8a3a27a5c28d92e000144":[{"id":74859,"user_id":null,"body":"first_non_consecutive (arr) {\n  for (var i = 0; i < arr.length - 1; i++){\n    if (arr[i] + 1 != arr[i+1]) return arr[i+1];\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74860,"user_id":null,"body":"first_non_consecutive (arr) {  \n  if (arr.length < 2) { return null; }\n  else { return arr[0] + 1 != arr[1] ? arr[1] : first_non_consecutive(arr.sublist(1)); }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74861,"user_id":506,"body":"first_non_consecutive(arr) {  \n  for(int i = 1; i < arr.length; i++){\n    if(arr[i] - 1 != arr[i-1]) return arr[i];\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74862,"user_id":250,"body":"int? first_non_consecutive(List<int> arr) {\n  int s = arr.first;\n  \n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i] != s+i) {\n      return arr[i];\n    }\n  }\n  \n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74863,"user_id":null,"body":"first_non_consecutive (arr) {  \n  for(var i = 0, j = 1; j < arr.length; i++, j++) {\n    if (arr[j] - arr[i] > 1) return arr[j]; \n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74864,"user_id":null,"body":"first_non_consecutive (arr) {  \n  for(int i=0;i<arr.length-1;i++){\n    if(arr[i]+1==arr[i+1]) continue;\n    \n    else return arr[i+1];\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74865,"user_id":null,"body":"int? first_non_consecutive(List<int> arr) {  \n  var result;\n  for (int i = 1; i < arr.length; i++)\n    {\n    if (arr[i] != (arr[i - 1] + 1))\n      {\n      result = arr[i];\n      break;\n      }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74866,"user_id":null,"body":"int? first_non_consecutive(List<int> arr) {  \n  for(int i = 0; i < arr.length - 1; i++) {\n    if(arr[i + 1] - arr[i] == 1) {\n      continue;\n    } else {\n      return arr[i + 1];\n    }\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74867,"user_id":null,"body":"int? first_non_consecutive(List<int> arr) {  \n if (arr.length >1){\n    for(var i=1;i<arr.length; i++){\n      if (arr[i] != arr[i-1] +1) return arr[i];\n    }\n  \n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74868,"user_id":null,"body":"\/\/ Find the first non-consecutive number\nint? first_non_consecutive(List<int> arr) {\n  int temp = arr[0];\n  for (int i = 0; i < arr.length; i++) {\n    if (temp != arr[i]) return arr[i];\n    temp++;\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"590e03aef55cab099a0002e8":[{"id":74869,"user_id":527,"body":"List<int> incrementer(List<int> nums) {\n  return nums.asMap().entries.map((e) => (e.value + e.key + 1) % 10).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74870,"user_id":null,"body":"List<int> incrementer(List<int> nums) => [for(var i=0;i<nums.length;i++)(nums[i]+i+1)%10];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74871,"user_id":759,"body":"List<int> incrementer(List<int> nums) =>\n  Iterable<int>.generate(nums.length).map((i) => (nums[i] + ++i) % 10).toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74872,"user_id":null,"body":"List<int> incrementer(List<int> nums) {\n  return nums.asMap()\n    .entries\n    .map((e) => (e.key + 1 + e.value) % 10)\n    .toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74873,"user_id":null,"body":"List<int> incrementer(List<int> nums) {\n  var result = <int>[];\n  for(int i = 1; i<= nums.length;i++){\n    result.add((nums[i-1] + i)%10);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74874,"user_id":null,"body":"List<int> incrementer(List<int> nums) {\n  List<int> result = [];\n  for (int i = 1; i <= nums.length; i++) {\n    int num = nums[i - 1] + i;\n    num > 9 ? result.add(num % 10) : result.add(num);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74875,"user_id":null,"body":"List<int> incrementer(List<int> nums) {\n  List<int> out = [];\n  for(int i = 0; i < nums.length; i++){\n    out.add((nums[i] + (i + 1)) % 10 );\n  }\n  return out;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74876,"user_id":null,"body":"List<int> incrementer(List<int> nums) =>[for(int i=0; i<nums.length; i++)(nums[i]+i+1)%10];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74877,"user_id":null,"body":"int resum(int x)=>x>=10?resum(x-10):x;\nList<int> incrementer(List<int> nums)=>\n      [for(var x=1;x< nums.length+1;x++)resum(nums[x-1]+x)];\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74878,"user_id":797,"body":"List<int> incrementer(List<int> nums) {\n  \/\/ your code here\n  List<int> ans = [];\n  int i = 1;\n  nums.forEach((x){\n    ans.add((x + i) % 10);\n    i++;\n  });\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5933a1f8552bc2750a0000ed":[{"id":74879,"user_id":null,"body":"int nth_even(int n) => (n * 2) - 2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74880,"user_id":null,"body":"int nth_even(int n) {\nreturn n*2-2;\n}\n\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74881,"user_id":645,"body":"int nth_even(int n) => (n - 1) * 2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74882,"user_id":null,"body":"int nth_even(int n) {\n\nif(n==0) return -2;\n \n int eventCount=0;\n  for(int i=0;i<n+n;i++)\n    {\n      if(i.isEven)\n        eventCount=i;\n            }\n return eventCount;\n }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74883,"user_id":null,"body":"int nth_even(int n) => 2 * (n - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74884,"user_id":null,"body":"\/\/ Get Nth Even Number\nint nth_even(int n) {\n  int temp = -2;\n  for (int i = 0; i < n; i++) {\n    temp += 2;\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74885,"user_id":null,"body":"int nth_even(int n) {\n\/\/   int i = 0;\n\/\/   int x = -2;\n\/\/    int y = 0;\n\/\/    while(n > i){\n\/\/      if(n >= i){\n\/\/        x += 2;\n\/\/      }\n\/\/      i++;\n\/\/    }\n  \n  \n  \n  \n  return n * 2 - 2;\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74886,"user_id":null,"body":"int nth_even(int n) {\n  return 2*n-2;\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74887,"user_id":null,"body":"int nth_even(int n) => n == 1 ? 0 : (n * 2) - 2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74888,"user_id":null,"body":"int nth_even(int n) {\n  int even = 0 ;\n  for (int i = 0 ; i < n-1 ; i++){\n    even += 2;\n  }\n  return even;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59342039eb450e39970000a6":[{"id":74889,"user_id":527,"body":"int odd_count(int n) => n ~\/ 2;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74890,"user_id":null,"body":"int odd_count(n) {\n  return (n \/ 2).toInt();\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74891,"user_id":527,"body":"int odd_count(n) => n ~\/ 2;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74892,"user_id":527,"body":"int odd_count(n) {\n  return n ~\/ 2;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74893,"user_id":null,"body":"int odd_count(n) {\n  List x = [];\n  for(int i=1; i < n; ++i){\n    if(i % 2 !=0){\n      x.add(i);\n    };\n  };\n  return x.length;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74894,"user_id":null,"body":"int odd_count(n) {\n  int countOddNumbers = 0;\n  \n  for(int i = 1; i<n; i++){\n    if( i % 2 != 0) countOddNumbers++;\n  }\n  \n  return countOddNumbers;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74895,"user_id":null,"body":"int odd_count(n) {\n  int a=0;\n  for (int i=0; i<n;i++){\n    if (i.isOdd){\n      a=a+1;\n    }\n  }\n  return a;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74896,"user_id":null,"body":"int odd_count(int n) {\n  int result = 0;\n  while (n > 0) {\n    n--;\n    if (n.isOdd) result++;\n  }\n  return result;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74897,"user_id":null,"body":"int odd_count(n) {\n  return [for(var i=1; i<n; i+=2) i].length;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74898,"user_id":null,"body":"int odd_count(n) => ((n - 1) \/ 2).ceil();\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5949481f86420f59480000e7":[{"id":74899,"user_id":null,"body":"String odd_or_even(List<int> array) =>array.reduce((a, b) => a + b).isEven ? 'even' : 'odd';\n\n\n\n  \n  \n  \n  \n  \n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74900,"user_id":null,"body":"import 'package:collection\/collection.dart';\n\nString odd_or_even(List<int> array) {\n  return array.sum.isEven ? \"even\" : \"odd\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74901,"user_id":null,"body":"String odd_or_even(List<int> array) => array.fold(0, (int a, int b) => a + b).isEven ? 'even' : 'odd';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74902,"user_id":null,"body":"String odd_or_even(List<int> array) {\n  bool even = true; \n  \n  array.forEach((number) { \n    \/\/ switch result every odd number\n    if (number % 2 != 0) {\n      even = !even;\n    }\n  });\n\n  return even ? \"even\" : \"odd\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74903,"user_id":null,"body":"String odd_or_even(List<int> array) {\n  return array.reduce((v, e) => v + e).isOdd\n      ? 'odd'\n      : 'even';\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74904,"user_id":null,"body":"String odd_or_even(List<int> array) {\n\n  var sum = array.reduce((value, element) => value + element);\n\n  var bool = sum % 2 == 0;\n  switch (bool) {\n    case (true) : return 'even';\n    case (false) : return 'odd';\n  }\n  return '';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74905,"user_id":null,"body":"String odd_or_even(List<int> array) {\n  int sum = 0;\n  for (int el in array) {\n    sum += el;\n  }\n  return (sum % 2 == 0) ? \"even\" : \"odd\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74906,"user_id":null,"body":"String odd_or_even(List<int> array) => array.reduce((a,b) => a + b) % 2 == 0? 'even' : 'odd';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74907,"user_id":null,"body":"String odd_or_even(List<int> array) => array.reduce((value, element) => value + element).isEven ? 'even' : 'odd';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74908,"user_id":null,"body":"String odd_or_even(List<int> array) {\n\/\/   Code here\nvar  sum=0;\narray.forEach((e) {\n  sum+=e;\n});\nif(sum%2==0){\n  return \"even\";\n}else{\n  return \"odd\";\n}\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"5964d7e633b908e172000046":[{"id":74909,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\nimport 'dart:math';\nimport 'package:collection\/collection.dart';\n\nconst digits = {\n  'ZERO': 0,\n  'ONE': 1,\n  'TWO': 2,\n  'THREE': 3,\n  'FOUR': 4,\n  'FIVE': 5,\n  'SIX': 6,\n  'SEVEN': 7,\n  'EIGHT': 8,\n  'NINE': 9\n};\n\nString recover(String str) {\n  String res = '';\n\n  for (int i = 0; i < str.length; i++) {\n    digits.forEach((String letters, int value) {\n      if (str\n          .substring(i, min(i + letters.length, str.length))\n          .isEqualsUnordered(letters)) {\n        res += value.toString();\n      }\n    });\n  }\n\n  return (res.isNotEmpty) ? res : 'No digits found';\n}\n\nextension StringEquality on String {\n  bool isEqualsUnordered(String str) {\n    return DeepCollectionEquality.unordered().equals(split(''), str.split(''));\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74910,"user_id":250,"body":"import \"package:solution\/preloaded.dart\";\n\nString recover(String str) {\n  var re = RegExp(r'^[THREE]{5}|^[SEVEN]{5}|^[EIGHT]{5}|^[FOUR]{4}|^[FIVE]{4}|^[NINE]{4}|^[ZERO]{4}|^[ONE]{3}|^[SIX]{3}|^[TWO]{3}');\n  \n  List<int> resp = [];\n  \n  for (var i = 0; i < str.length; i++) {\n    var m = re.firstMatch(str.substring(i));\n    if (m == null) {\n      continue;\n    }\n    \n    var tn = m[0].toString().split(\"\")..sort();\n    var n = tn.join(\"\");\n    var c = {\n      \"EORZ\":0,\n      \"ENO\":1, \n      \"OTW\":2,\n      \"EEHRT\":3,\n      \"FORU\":4,\n      \"EFIV\":5,\n      \"ISX\":6,\n      \"EENSV\":7,\n      \"EGHIT\":8,\n      \"EINN\":9,\n      }[n];\n    \n    if (c != null) {\n      resp.add(c);\n    }\n  }\n  \n  if (resp.length == 0) {\n    return \"No digits found\";\n  }\n  \n  return resp.join(\"\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74911,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\nimport 'package:collection\/collection.dart';\nimport 'dart:math';\n\nString recover(String str) {\n  const Map<String, int> alph = {\"ZERO\":0,\"ONE\":1,\"TWO\":2,\"THREE\":3,\"FOUR\":4,\"FIVE\":5,\"SIX\":6,\"SEVEN\":7,\"EIGHT\":8,\"NINE\":9};\n  \n  String res= '';\n  \n  for(int i =0; i < str.length ; i++){\n    alph.forEach((String letters, int value){\n      if(str.substring(i, min( i + letters.length, str.length)).isEqualsUnordered(letters)) {\n        res += value.toString();\n      }\n    });\n  }\n  \n  return (res.isNotEmpty) ? res : 'No digits found';  \n}\n\n\nextension StringEquality on String {\n  bool isEqualsUnordered(String str){\n    return DeepCollectionEquality.unordered().equals(split(''), str.split(''));\n  } \n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74912,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\n\nString sortLetter(String letter){\n  List<String> temp = letter.split(\"\");\n  temp.sort();\n  return temp.join(\"\");\n}\n\nList<String> digitLeter(){\n  List<String> letters = [\n    \"ZERO\",\n    \"ONE\",\n    \"TWO\",\n    \"THREE\",\n    \"FOUR\",\n    \"FIVE\",\n    \"SIX\",\n    \"SEVEN\",\n    \"EIGHT\",\n    \"NINE\"\n  ];\n  \n  List<String> result = [];\n  for(String letter in letters) {\n    result.add(sortLetter(letter));\n  }\n  \n  return result;\n}\n\nString recover(String str) {\n  String result = \"\";\n  List<String> digits = digitLeter();\n  for(int i = 0; i<str.length;i++){\n    for(String digit in digits){\n      if(i+digit.length <= str.length && digit == sortLetter(str.substring(i,i+digit.length))){\n        result += digits.indexOf(digit).toString();\n      }\n    }\n  }\n  \n  return result.length == 0 ? \"No digits found\" : result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74913,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\nimport 'package:collection\/collection.dart';\n\nString recover(String str) {\n  List<String> res = [];\n  for(int i = 0; i <= str.length - 3; i++){\n     if(IterableEquality().equals((List.generate(3, (index) => RegExp('[ONE]').hasMatch(str[i+index]) ? RegExp('[ONE]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('ONE'.runes.toList()..sort()))) res.add('1');\n     if(IterableEquality().equals((List.generate(3, (index) => RegExp('[TWO]').hasMatch(str[i+index]) ? RegExp('[TWO]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('TWO'.runes.toList()..sort()))) res.add('2');\n     if(IterableEquality().equals((List.generate(3, (index) => RegExp('[SIX]').hasMatch(str[i+index]) ? RegExp('[SIX]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('SIX'.runes.toList()..sort()))) res.add('6');\n    \n     if(i <= str.length - 4){\n      if(IterableEquality().equals((List.generate(4, (index) => RegExp('[FOUR]').hasMatch(str[i+index]) ? RegExp('[FOUR]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('FOUR'.runes.toList()..sort()))) res.add('4');\n      if(IterableEquality().equals((List.generate(4, (index) => RegExp('[FIVE]').hasMatch(str[i+index]) ? RegExp('[FIVE]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('FIVE'.runes.toList()..sort()))) res.add('5');\n      if(IterableEquality().equals((List.generate(4, (index) => RegExp('[NINE]').hasMatch(str[i+index]) ? RegExp('[NINE]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('NINE'.runes.toList()..sort()))) res.add('9');\n      if(IterableEquality().equals((List.generate(4, (index) => RegExp('[ZERO]').hasMatch(str[i+index]) ? RegExp('[ZERO]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('ZERO'.runes.toList()..sort()))) res.add('0'); \n     }\n     \n     if(i <= str.length - 5){\n      if(IterableEquality().equals((List.generate(5, (index) => RegExp('[THREE]').hasMatch(str[i+index]) ? RegExp('[THREE]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('THREE'.runes.toList()..sort()))) res.add('3');\n      if(IterableEquality().equals((List.generate(5, (index) => RegExp('[SEVEN]').hasMatch(str[i+index]) ? RegExp('[SEVEN]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('SEVEN'.runes.toList()..sort()))) res.add('7');\n      if(IterableEquality().equals((List.generate(5, (index) => RegExp('[EIGHT]').hasMatch(str[i+index]) ? RegExp('[EIGHT]').allMatches(str[i+index]).elementAt(0).group(0).codeUnitAt(0) : 0)..sort()),('EIGHT'.runes.toList()..sort()))) res.add('8');\n     }  \n  }\n  return res.join() == '' ? 'No digits found' : res.join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74914,"user_id":null,"body":"String recover(String str) {\n  String answer = '';\n  const alph = {\n    \"ZERO\": 0,\n    \"ONE\": 1,\n    \"TWO\": 2,\n    \"THREE\": 3,\n    \"FOUR\": 4,\n    \"FIVE\": 5,\n    \"SIX\": 6,\n    \"SEVEN\": 7,\n    \"EIGHT\": 8,\n    \"NINE\": 9\n  };\n  for (int i = 0; i < str.length; i++) {\n    alph.entries.forEach((element) {\n      if (i + element.key.length <= str.length) {\n        bool isEqual = true;\n        List a = str.substring(i, element.key.length + i).split('')..sort();\n        List b = element.key.split('')..sort();\n        for (int j = 0; j < element.key.length; j++){\n          if(a[j] != b[j]){\n            isEqual = false;\n          }\n        }\n        if (isEqual) {\n          answer = answer + element.value.toString();\n        }\n      }\n    });\n  }\n  if (answer == '') {\n    return 'No digits found';\n  }\n  return answer;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74915,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\nimport \"dart:math\";\nimport \"dart:collection\";\n\nclass DigitString {\n  final _letterToFrequency = <String, int>{};\n  \n  DigitString(String letters) {\n    for (var i = 0; i < letters.length; i++) {\n      final letter = letters[i];\n      addLetter(letter);\n    }\n  }\n  \n  void addLetter(String letter) {\n    if (_letterToFrequency.containsKey(letter)) {\n        _letterToFrequency[letter]++;\n      } else {\n        _letterToFrequency[letter] = 1;\n      }\n  }\n  \n  UnmodifiableMapView get letterToFrequency => UnmodifiableMapView(_letterToFrequency);\n  \n  int get length => _letterToFrequency.length;\n  \n  @override\n  bool operator==(Object other) {\n    if (identical(this, other)) {\n      return true;\n    }\n    \n    if (other is! DigitString) {\n      return false;\n    }\n    \n    final other_ = other as DigitString;\n    \n    if (this.runtimeType != other_.runtimeType || this.length != other_.length) {\n      return false;\n    }\n    \n    final otherLetterToFrequency = other_.letterToFrequency;\n    final thisLetterToFrequency = letterToFrequency;\n    \n    for (final entry in thisLetterToFrequency.entries) {\n      final letter = entry.key;\n      final frequency = entry.value;\n      \n      if (!otherLetterToFrequency.containsKey(letter) || otherLetterToFrequency[letter] != frequency) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  @override toString() => _letterToFrequency.toString();\n}\n\nString recover(String str) {\n  const alph = {\"ZERO\":0,\"ONE\":1,\"TWO\":2,\"THREE\":3,\"FOUR\":4,\"FIVE\":5,\"SIX\":6,\"SEVEN\":7,\"EIGHT\":8,\"NINE\":9};\n  final output = StringBuffer();\n  final minLength = 3;\n  final maxLength = 5;\n  final digitToDigitStrings = <DigitString>[];\n  \n  for (final alphKey in alph.keys) {\n    digitToDigitStrings.add(DigitString(alphKey));\n  }\n  \n  for (var start = 0; start < str.length - minLength + 1; start++) {\n    print(start);\n    final currentDigitString = DigitString(str.substring(start, start + minLength - 1));\n    \n    for (var end = start + minLength - 1; end < min(str.length, start + maxLength); end++) {\n      currentDigitString.addLetter(str[end]);\n      bool active = true;\n      \n      for (var digit = 0; digit < 10; digit++) {\n        final digitString = digitToDigitStrings[digit];\n\n        if (currentDigitString == digitString) {\n          output.write(digit.toString());\n          active = false;\n          break;\n        }\n      }\n      \n      if (!active) {\n        break;\n      }\n    }\n  }\n  \n  final finalOutput = output.toString();\n  \n  return (finalOutput.isEmpty) ? \"No digits found\" : finalOutput;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74916,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\nimport \"dart:math\";\nimport \"dart:collection\";\n\nclass DigitString {\n  final _letterToFrequency = <String, int>{};\n  \n  DigitString(String letters) {\n    for (var i = 0; i < letters.length; i++) {\n      final letter = letters[i];\n      addLetter(letter);\n    }\n  }\n  \n  void addLetter(String letter) {\n    if (_letterToFrequency.containsKey(letter)) {\n        _letterToFrequency[letter]++;\n      } else {\n        _letterToFrequency[letter] = 1;\n      }\n  }\n  \n  UnmodifiableMapView get letterToFrequency => UnmodifiableMapView(_letterToFrequency);\n  \n  int get length => _letterToFrequency.length;\n  \n  @override\n  bool operator==(Object other) {\n    if (identical(this, other)) {\n      return true;\n    }\n    \n    if (other is! DigitString) {\n      return false;\n    }\n    \n    final other_ = other as DigitString;\n    \n    if (this.runtimeType != other_.runtimeType || this.length != other_.length) {\n      return false;\n    }\n    \n    final otherLetterToFrequency = other_.letterToFrequency;\n    final thisLetterToFrequency = letterToFrequency;\n    \n    for (final entry in thisLetterToFrequency.entries) {\n      final letter = entry.key;\n      final frequency = entry.value;\n      \n      if (!otherLetterToFrequency.containsKey(letter) || otherLetterToFrequency[letter] != frequency) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  @override toString() => _letterToFrequency.toString();\n}\n\nString recover(String str) {\n  const alph = {\"ZERO\":0,\"ONE\":1,\"TWO\":2,\"THREE\":3,\"FOUR\":4,\"FIVE\":5,\"SIX\":6,\"SEVEN\":7,\"EIGHT\":8,\"NINE\":9};\n  final output = StringBuffer();\n  final minLength = 3;\n  final maxLength = 5;\n  final digitStrings = <DigitString>[];\n  \n  for (final alphKey in alph.keys) {\n    digitStrings.add(DigitString(alphKey));\n  }\n  \n  for (var start = 0; start < str.length - minLength + 1; start++) {\n    print(start);\n    final currentDigitString = DigitString(str.substring(start, start + minLength - 1));\n    \n    for (var end = start + minLength - 1; end < min(str.length, start + maxLength); end++) {\n      currentDigitString.addLetter(str[end]);\n      bool active = true;\n      \n      for (var i = 0; i < 10; i++) {\n        final digitString = digitStrings[i];\n\n        if (currentDigitString == digitString) {\n          output.write(i.toString());\n          active = false;\n          break;\n        }\n      }\n      \n      if (!active) {\n        break;\n      }\n    }\n  }\n  \n  final finalOutput = output.toString();\n  \n  return (finalOutput.isEmpty) ? \"No digits found\" : finalOutput;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74917,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\n\nString recover(String str) {\nconst alph = {\n    0: 'ZERO',\n    1: 'ONE',\n    2: 'TWO',\n    3: 'THREE',\n    4: 'FOUR',\n    5: 'FIVE',\n    6: 'SIX',\n    7: 'SEVEN',\n    8: 'EIGHT',\n    9: 'NINE',\n  };\n    var tmpStr = str;\n    var result = '';\n    while(tmpStr.length > 2) {\n      for (final entry in alph.entries) {\n        if (entry.value.length <= tmpStr.length) {\n          if (checkLetters(tmpStr.substring(0, entry.value.length), entry.value)) {\n            result += entry.key.toString();\n          }\n        }\n      }\n      tmpStr = tmpStr.substring(1);\n    }\n\n    return result.isEmpty ? 'No digits found' : result;\n}\n\n  bool checkLetters(String str, String num) {\n    var tmpNum = num;\n    for (final el in str.split('')) {\n      if (tmpNum.contains(el)) {\n        tmpNum = tmpNum.replaceFirst(el, '');\n      } else {\n        return false;\n      }\n    }\n    return tmpNum.isEmpty;\n  }\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74918,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\n\nString recover(String str) {\n  String tmp = str;\n  String res = '';\n  Map<int,String> alph = {0:\"ZERO\",1:\"ONE\",2:\"TWO\",3:\"THREE\",4:\"FOUR\",5:\"FIVE\",6:\"SIX\",7:\"SEVEN\",8:\"EIGHT\",9:\"NINE\"};\n  while(tmp.length>1){\n    for (int i=0;i<10;i++){\n      if (alph[i].length<=tmp.length){\n        if(checkLetters(tmp.substring(0,alph[i].length),alph[i])){\n          res+=i.toString();\n        }\n      }\n    }\n    tmp=tmp.substring(1,tmp.length);\n  }\n  return res.isEmpty?\"No digits found\":res;\n}\n\nbool checkLetters(String str, String num){\n  String tmp = num;\n  for (String el in str.split('')){\n    if (tmp.contains(el)){\n      tmp = tmp.replaceFirst(el,'');\n    }else{\n      return false;\n    }\n  }\n  return tmp.isEmpty;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59884371d1d8d3d9270000a5":[{"id":74919,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  \n  List<int> fallenNuts = [for (var i = 0; i < tree[0].length; i++) 0];\n  \n  for (var y = 0; y < tree[0].length; y++){\n    var pos = y;\n    var blocked = false;\n    if (tree[0][pos] == 'o') {\n      for (var x = 0; x < tree.length-1; x++) {\n        if (tree[x][pos] == \"\/\") {\n          pos -= 1;\n        } else if (tree[x][pos] == \"\\\\\"){\n          pos += 1;\n        } else if (tree[x][pos] == \"_\") {\n          blocked = true;\n          break;\n        }\n      }\n      \n      if (blocked) { continue; }\n      else {\n        fallenNuts[pos] += 1;\n      }\n      \n    }\n  }\n  \n\n  return fallenNuts;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74920,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  \/\/Your code here\n  List<int> lst = [];\n  for (var i in tree) {\n    int n = 0;\n    for (var x in i.split('')) {\n      if (i.contains('o')) {\n        if (i[n] == 'o') {\n          lst.add(1);\n        } else {\n          lst.add(0);\n        }\n      } else if (x == '\\\\' && lst[n] >= 1) {\n        lst[n + 1] += lst[n];\n        lst[n] = 0;\n      } else if (x == '\/' && lst[n]>=1) {\n        lst[n - 1] += lst[n];\n        lst[n] = 0;\n      } else if (x == '_' && lst[n] >= 1) {\n        lst[n] = 0;\n      }\n      n++;\n    }\n  }\n  return lst;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74921,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  String nuts = tree.first;\n  List<int> solution_arr = List.generate(nuts.length, (_)=> 0);\n  \n  for(int i = 0;i<nuts.length;i++){\n    int current_col = i;\n    int current_row = 1;\n    bool stop = false;\n    \n    if(nuts[i] == \"o\"){\n      while(current_row <= tree.length -1){\n        \/\/first condition\n        if(tree[current_row][current_col] == \"_\"){\n          stop = true;\n          break;\n        }\n        \/\/ second condition\n        else if(tree[current_row][current_col] == \"\/\"){\n          current_col -= 1;\n          current_row += 1;\n        } else if(tree[current_row][current_col] == \"\\\\\"){\n          current_col += 1;\n          current_row += 1;\n        } else {\n          current_row += 1;\n        }\n      }\n      \n      if(stop){\n        stop = false;\n      } else {\n        solution_arr[current_col] +=1;\n      }\n    }\n  }\n  print(solution_arr);\n  return solution_arr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74922,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  var result = tree[0].split('').map((c) => c == 'o' ? 1 : 0).toList();\n  \n  for (final row in tree.sublist(1)) {\n    final entities = row.split('');\n    \n    for (int i = 0; i < entities.length; i++) {\n      switch (entities[i]) {\n        case '\\\\':\n          result[i+1] += result[i];\n          result[i] = 0;\n          break;\n        case '\/':\n          result[i-1] += result[i];\n          result[i] = 0;\n          break;\n        case '_':\n          result[i] = 0;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74923,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  List<int> res = List.generate(tree[0].length, (int i) => 0);\n  for (var x = 0; x<tree[0].length; x++){\n    if (tree[0][x] == \"o\") {\n      var _x = x;\n      for (var pos_y = 1; pos_y<tree.length;){\n        if (tree[pos_y][_x] == \"_\") break;\n        if (tree[pos_y][_x] == \"\/\") _x--;\n        if (tree[pos_y][_x] == \"\\\\\") _x++;\n        if (tree[pos_y][_x] == \" \" || tree[pos_y][_x] == \"|\") pos_y++;\n        if (pos_y == tree.length) {\n          res[_x]++;\n          break;\n        }\n      }\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74924,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  List<int> nutCount =\n      List.generate(tree[0].length, (index) => tree[0][index] == 'o' ? 1 : 0);\n\n  for (int i = 1; i < tree.length; i++) {\n    for (int j = 0; j < tree[i].length; j++) {\n      String treePart = tree[i][j];\n\n      if (nutCount[j] == 0) continue;\n\n      if (treePart == r'\\') {\n        nutCount[j + 1] += nutCount[j];\n        nutCount[j] = 0;\n      } else if (treePart == r'\/') {\n        nutCount[j - 1] += nutCount[j];\n        nutCount[j] = 0;\n      } else if (treePart == '_') {\n        nutCount[j] = 0;\n      }\n    }\n  }\n\n  return nutCount;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74925,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  List<int> nuts = tree[0].split(\"\").map((x) => x == 'o' ? 1 : 0).toList();\n  for (int i = 1; i < tree.length; i++) {\n    String level = tree[i];\n    List<int> prevNuts = [...nuts];\n    nuts.fillRange(0, nuts.length, 0);\n    for (int j = 0; j < prevNuts.length; j++) {\n      int destination = j;\n      switch (level[j]) {\n        case '\/':\n          destination--;\n          break;\n        case '\\\\':\n          destination++;\n          break;\n        case '_':\n          destination = -1;\n          break;\n      }\n      if (destination >= 0) {\n        nuts[destination] += prevNuts[j];\n      }\n    }\n  }\n  return nuts;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74926,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  var positions = <int>[];\n\n  for (var i = 0; i < tree.length; i++) {\n    final line = tree[i];\n\n    if (i == 0) {\n      positions = List.generate(line.length, (index) => 0);\n\n      for (var j = 0; j < line.length; j++) {\n        final symbol = line[j];\n        positions[j] = symbol == 'o' ? 1 : 0;\n      }\n    } else {\n      final newPositions = List.generate(line.length, (index) => 0);\n\n      for (var j = 0; j < line.length; j++) {\n        final value = positions[j];\n        final symbol = line[j];\n\n        switch (symbol) {\n          case '\\\\':\n            if (j == line.length - 1) {\n              newPositions[j] += value;\n            } else {\n              newPositions[j + 1] += value;\n            }\n            break;\n          case '\/':\n            if (j == 0) {\n              newPositions[j] += value;\n            } else {\n              newPositions[j - 1] += value;\n            }\n            break;\n          case '_':\n            break;\n          default:\n            newPositions[j] += value;\n        }\n      }\n\n      positions = newPositions;\n    }\n  }\n\n  return positions;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74927,"user_id":null,"body":"List<int> shakeTree(List<String> tree) {\n  List<int> nuts = tree[0]\n    .split('')\n    .map((t) => t == 'o' ? 1 : 0)\n    .toList();\n  \n  for (var i = 1; i < tree.length; i++) {\n    for (var j = 0; j < tree[i].length; j++) {\n      if (tree[i][j] == '\/' && j != 0) {\n        nuts[j - 1] += nuts[j];\n        nuts[j] = 0;\n      } else if (tree[i][j] == '\\\\' && j != tree[i][j].length - 1) {\n        nuts[j + 1] += nuts[j];\n        nuts[j] = 0;\n      } else if (tree[i][j] == '_') {\n        nuts[j] = 0;\n      }\n    }\n  }\n  \n  return nuts;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74928,"user_id":250,"body":"List<int> shakeTree(List<String> tree) {\n  var counts = tree.first.split(\"\").map((e) { return e == 'o' ? 1 : 0; }).toList();\n  \n  for (var line in tree) {\n    line.split(\"\").asMap().forEach((i, e) {\n      if (counts[i] == 0) {\n        return;\n      }\n      \n      if (e == \"\/\") {\n        counts[i-1] += counts[i];\n        counts[i] = 0;\n      }\n      \n      if (e == \"\\\\\") {\n        counts[i+1] += counts[i];\n        counts[i] = 0;\n      }\n      \n      if (e == \"_\") {\n        counts[i] = 0;\n      }\n    });\n  }\n  \n  return counts.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"598d91785d4ce3ec4f000018":[{"id":74929,"user_id":null,"body":"List<int> wordValue(List<String> arr) =>arr.asMap().map((int i, String x)=> MapEntry(i,x.replaceAll(' ','').codeUnits.fold(0,(int s,int e) => s+e+4-100)*(i+1))).values.toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74930,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  List<int> ret = [];\n  int index = 0;\n  arr.forEach((String str) {\n    str.toLowerCase();\n    int num = 0;\n    str.runes.forEach((int char) => num += (char >= 97 && char <= 122) ? char - 96 : 0);\n     ret.add(num * ++index);\n  });\n  return (ret);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74931,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  List<int> result = [];\n  for (int i = 0; i < arr.length; i++) {\n    if (arr[i].isNotEmpty) {\n      final sum = arr[i].replaceAll(' ', '').codeUnits.map((e) => e - 96).reduce((a, b) => a + b);\n      result.add(sum * (i + 1));\n    } else result.add(0);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74932,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  List<int> out = [];\n  for(int i=0; i<arr.length; i ++){\n    int count = 0;\n    arr[i].runes.forEach((int rune){count += rune == 32 ? 0 : rune - 96;});\n    out.add(count * (i+1));\n  }\n  return out;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74933,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  const shiftAlphabeticNumber = 96;\n  const skipNumber = 32;\n  \n  return arr.asMap().entries.map((entry) {\n    int idx = entry.key;\n    String word = entry.value;\n\n    var sum = 0;\n    for(var i = 0 ; i < word.length; i++ ) { \n      var codeUnit = word[i].codeUnits[0];\n      if(codeUnit != skipNumber) {\n        sum = sum + codeUnit - shiftAlphabeticNumber;\n      }\n    } \n    return sum * (idx + 1);\n  }).toList();\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74934,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  List<int> datos = [];\n  for (int i=1; i <= arr.length; i++){\n     datos.add( arr[i-1].replaceAll(' ','').trim().codeUnits.fold(0,(suma,element) => suma+element+4-100)*i);\n  }\n  return datos;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74935,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  if(arr.length==1 && arr[0]=='')return[0];\n  var back = List.generate(\n      arr.length,\n      (i) =>\n          arr[i]\n              .split(' ')\n              .join()\n              .codeUnits\n              .map((s) => s - 96)\n              .fold<int>(0,(x,y)=>x+y) *\n          (i + 1));\n\n  return back;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74936,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  var alphabet = [' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  List<int> res = [];\n  for (int i = 0; i<arr.length; i++){\n    var charlist = arr[i].split('');\n    res.add((i+1)*charlist.fold(0,(sum,char) => sum + alphabet.indexOf(char)));\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74937,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  return arr.asMap().entries.map((entry) => entry.value.sentenceValue * (entry.key + 1)).toList();\n}\n\nfinal alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\nextension StringValue on String {\n  \n  int get charValue {\n    return alphabet.indexOf(this) + 1;\n  }\n  \n  int get wordValue {\n    return this.split(\"\").fold(0, (int value, String char) => value + char.charValue);\n  }\n  \n  int get sentenceValue {\n    return this.split(\" \").fold(0, (int value, String word) => value + word.wordValue);\n  }\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74938,"user_id":null,"body":"List<int> wordValue(List<String> arr) {\n  int aInASCII = \"a\".codeUnitAt(0) - 1;\n  int indx = 0;\n  final wordValues = arr.map((s) {\n    int totalValue = 0;\n    s.split('').forEach((ch) => ch.trim().isNotEmpty ? totalValue += ch.codeUnitAt(0) - aInASCII : null);\n    indx++;\n    return totalValue * indx;\n  }).toList();\n  return wordValues;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59a8570b570190d313000037":[{"id":74939,"user_id":null,"body":"int sum_cubes(int n) {\n  int cube = 0;\n  for (int i = 1; i <= n; i++) {\n    cube += i * i * i;\n  }\n  return cube;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74940,"user_id":null,"body":"int sum_cubes(int n) {\n  int sum = 0;\n   for(int i=0;i<=n;i++){\n     int x = i*i*i;\n     sum = sum+x;\n   }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74941,"user_id":168,"body":"int sum_cubes(int n) {\n  int x = n * (n + 1) >> 1;\n  return x * x;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74942,"user_id":null,"body":"import 'dart:math' as math;\n\nint sum_cubes(int n) {\n  return List.generate(n,(index)=>math.pow(index+1,3)).reduce((n1,n2)=>n1+n2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74943,"user_id":null,"body":"import 'dart:math';\n\nnum sum_cubes(int n) {\n  num sum_cubes = (pow((n * (n + 1)) \/ 2, 2));\n  return sum_cubes;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74944,"user_id":null,"body":"int sum_cubes(int n) {\n  int sum = 0;\n  for(int i = 1; i <= n; ++i)\n  {\n     sum += i * i * i;\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74945,"user_id":null,"body":"import 'dart:math';\n\nint sum_cubes(int n) {\n  return pow([for (var i = 1; i <= n; i++) i].reduce((a, b) => a + b), 2)\n      .toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74946,"user_id":null,"body":"int sum_cubes(int n) {\n  int a = n;\n  int r = 0;\n  while (a != 0) {\n    r += a*a*a;\n    a -=1;\n  }\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74947,"user_id":null,"body":"int sum_cubes(int n) {  \n  int sum = 0;\n  for(int i = 1; i <= n; i++){\n    sum += pow(i,3);\n  }\n  return sum;\n}\n\nint pow(int b, int e) => e == 0 ?  1 : (b * pow(b, e - 1));\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74948,"user_id":null,"body":"import 'dart:math';\n\nnum sum_cubes(int n) {\n  int i = 1;\n  num x = 0;\n  while(n >= i){\n    x += pow(i,3);\n    i++;\n  }\n  return x;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59b24a2158ef58966e00005e":[{"id":74949,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  \n  int treeSize = tree.length;\n  int canopyWidth = tree[0].length;\n  \n  List<int> nutsPositions = new List<int>.filled(canopyWidth, 0, growable: false);\n  \n\n  for(int i=0;i<treeSize;i++){ \/\/moving nuts\n    for(int j=0;j<canopyWidth;j++){ \/\/checking for nuts\n      if(tree[i][j] == \"o\") nutsPositions[j]++;\n    }\n    \n    if(i!=0){\n      for(int j=0;j<canopyWidth;j++){\n        if(nutsPositions[j] > 0){\n          switch(tree[i][j]){\n            case \"\\\\\":\n              int originalJ = j;\n              int temp = nutsPositions[j];\n              nutsPositions[j] = 0;\n              while(true){\n                if(tree[i][j+1] == \"\\\\\")j++; \n                  else break;\n              }\n              if(!(tree[i][j+1] == \"\/\"))\n                nutsPositions[j+1] += temp;\n              j = originalJ;\n              break;\n            case \"\/\":\n              int temp = nutsPositions[j];\n              nutsPositions[j] = 0;\n              while(true){\n                if(tree[i][j-1] == \"\/\") j--;\n                else break;\n              }\n              if(!(tree[i][j-1] == \"\\\\\"))\n                nutsPositions[j-1] += temp;\n              break;\n          }\n        }\n      }\n    }\n  }\n  \n  \n  return nutsPositions;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74950,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  \/\/Harvest the nuts here!\n  List<int> ground = [];\n  tree.forEach((layer){\/\/ set ground based on longest layer length\n    if(layer.length > ground.length) ground = new List<int>.generate(layer.length, (i) => i=0);\n  });\n  \n  for(int i = 0; i < tree.length; i++){\n    for(int j = 0; j < tree[i].length; j++){\n      if(tree[i][j] == 'o'){\n        int currentPos = i;\n        int nutPos = j;\n        bool isStuck = false;\n\/\/      move nut\n        while(currentPos < tree.length - 1){\n             switch(tree[currentPos+1][nutPos]){\n                case '\/':\/\/move to right\n                    nutPos -= 1;\n                    if(tree[currentPos+1][nutPos] != '\\\\') break;\n                    isStuck = true;\n                    currentPos = tree.length - 1;\n                  break;\n                case '\\\\':\/\/move to left\n                    nutPos += 1;\n                    if(tree[currentPos+1][nutPos] != '\/') break;\n                    isStuck = true;\n                    currentPos = tree.length - 1;\n                  break;\n               default:\/\/move down directly\n                  currentPos++;\n                  break;\n             }\n        }\n        isStuck? null : ground[nutPos] += 1;\n      }\n    }\n  }\n  return ground;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74951,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  List<int> res = List.generate(tree[tree.length -1].length, (int i) => 0);\n  for (var y = 0; y<tree.length; y++){\n   for (var x = 0; x<tree[0].length; x++){\n    if (tree[y][x] == \"o\") {\n      var _x = x;\n      for (var pos_y = y+1; pos_y<tree.length;){\n        if (tree[pos_y][_x] == \"_\") break; else\n        if (tree[pos_y][_x] == \"\/\") {\n          _x--; \n          if (tree[pos_y][_x] == \"\\\\\") break;\n        } else\n        if (tree[pos_y][_x] == \"\\\\\") {\n          _x++; \n          if (tree[pos_y][_x] == \"\/\") break;\n        } else pos_y++;\n        if (pos_y == tree.length) {\n          res[_x]++;\n          break;\n        }\n      }\n    } \n   }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74952,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  var sTree = List<String>.from(tree);\n  var treeGround = List<int>.filled(sTree.first.length, 0);\n\n  for (var i = 0; i < sTree.length; i++) {\n    treeGround = computeLine(treeGround, sTree[i]);\n  }\n\n  return treeGround;\n}\n\nList<int> computeLine(List<int> current, String line) {\n  var next = List<int>.filled(current.length, 0);\n  for (var i = 0; i < current.length; i++) {\n    var char = line.substring(i, i + 1);\n    if (isNutt(char))\n      next[i] += current[i] + 1;\n    else if (canFall(char)) {\n      next[i] += current[i];\n    } else if (char == '\\\\') {\n      var j = i + 1;\n      while (charAtIndex(j, line) == '\\\\') j++;\n      if (canFall(charAtIndex(j, line)) || isNutt(charAtIndex(j, line)))\n        next[j] += current[i];\n    } else if (char == '\/') {\n      var j = i - 1;\n      while (charAtIndex(j, line) == '\/') j--;\n      if (canFall(charAtIndex(j, line)) || isNutt(charAtIndex(j, line)))\n        next[j] += current[i];\n    }\n  }\n  return next;\n}\n\nString charAtIndex(int index, String line) => line.substring(index, index + 1);\n\nbool canFall(String char) => char == '.' || char == '|' || char == ' ';\nbool isNutt(String char) => char == 'o';\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74953,"user_id":null,"body":"List<int> shake_tree(List<String> tree) {\n  var result = <int,int>{};\n  for(var i =0; i<tree.length; i++){\n    if (tree[i].contains('|')) break;\n    for(var j=0; j<tree[i].length; j++){\n      result[j] ??= 0;\n      switch(tree[i][j]){\n        case 'o':\n          result[j] = ++result[j];\n          break;\n        case '\\\\':\n          var bounces = 1;\n          while (tree[i][j+bounces] == '\\\\'){\n            bounces++;\n          }\n          if(tree[i][j+bounces] != '\/') result[j+bounces] += result[j];\n          result[j] = 0;\n          break;\n        case '\/':\n          var bounces = 1;\n          while (tree[i][j-bounces] == '\/'){\n            bounces++;\n          }\n          if(tree[i][j-bounces] != '\\\\') result[j-bounces] += result[j];\n          result[j] = 0;\n          break;\n      }\n    }\n  }\n  return result.values.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74954,"user_id":250,"body":"List<int> shake_tree(List<String> tree) {\n  var counts = tree.first.split(\"\").map((e) => 0).toList();\n  \n  for (int pos = 0; pos < tree.length; pos++) {\n    var line = tree[pos];\n    bool recalc = false;\n    \n    line.split(\"\").asMap().forEach((i, e) {\n      if (e == \"o\") {\n        counts[i] += 1;\n      }\n      \n      if (counts[i] == 0) {\n        return;\n      }\n      \n      if (e == \"\/\") {\n        counts[i-1] += counts[i];\n        counts[i] = 0;\n        if (line[i-1] == \"\\\\\") {\n          counts[i-1] = 0;\n        } else if (i > 0) {\n          recalc = recalc || line[i-1] == \"\/\";\n        }\n      }\n      \n      if (e == \"\\\\\") {\n        counts[i+1] += counts[i];\n        counts[i] = 0;\n        if (line[i+1] == \"\/\") {\n          counts[i+1] = 0;\n        } else if (i < line.length-1) {\n          recalc = recalc || line[i+1] == \"\\\\\";\n        }\n      }\n    });\n    \n    if (recalc && pos > 0) {\n      tree[pos] = tree[pos].replaceAll(\"o\", \" \");\n      pos--;\n    }\n  }\n  \n  return counts.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74955,"user_id":null,"body":"Set<String> actionThings = {\"\/\", \"\\\\\", \"_\"};\n\nList<int> shake_tree(List<String> tree) {\n  List<int> nuts = List.filled(tree[0].length, 0);\n  for (int i = 0; i < tree.length; i++) {\n    String level = tree[i];\n    for (int b = 0; b < level.length; b++) {\n      if (level[b] == 'o') {\n        nuts[b]++;\n      }\n    }\n    List<int> prevNuts = [...nuts];\n    nuts.fillRange(0, nuts.length, 0);\n    for (int j = 0; j < prevNuts.length; j++) {\n      int destination = j;\n      while(destination > 0 && actionThings.contains(level[destination])) {\n        switch (level[destination]) {\n          case '\/':\n            destination--;\n            if (level[destination] == '\\\\') {\n              destination = -1;\n            }\n            break;\n          case '\\\\':\n            destination++;\n            if (level[destination] == '\/') {\n              destination = -1;\n            }\n            break;\n          case '_':\n            destination = -1;\n            break;\n        }\n      }\n      if (destination >= 0) {\n        nuts[destination] += prevNuts[j];\n      }\n    }\n  }\n  return nuts;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74956,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  final positionCount = tree[0].split('').length;\n  final res = List<int>.filled(positionCount, 0);\n  for (final row in tree) {\n    final cols = row.split('');\n    for (int i = 0; i < positionCount; i++) {\n      switch (cols[i]) {\n          case 'o':\n            res[i]++;\n            break;\n          case r'\\':\n            int j = i + 1;\n            for (; j < positionCount; j++) {\n              if (cols[j] != r'\\') {\n                break;\n              }\n            }\n            if (cols[j] != '\/') {\n              res[j] += res[i];\n            }\n            res[i] = 0;\n            break;\n          case r'\/':\n            int j = i - 1;\n            for (; j >= 0; j--) {\n              if (cols[j] != r'\/') {\n                break;\n              }\n            }\n            if (cols[j] != r'\\') {\n              res[j] += res[i];\n            }\n            res[i] = 0;\n            break;\n          default:  \n      }\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74957,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  \/\/Harvest the nuts here!\n  List<int> resp=[];\n  for(int i=0;i<tree[0].length;i++){\n    int toAdd=tree[0][i]=='o'?1:0;\n    resp.add(toAdd);\n  }\n  for(int i=1;i<tree.length;i++){\n    String actLayer='';\n    for(int j=0;j<tree[i].length;j++){\n      actLayer+=tree[i][j];\n      if(tree[i][j]=='o'){\n        resp[j]++;        \n      }\n      else if(tree[i][j]=='\/'&&resp[j]>0){\n        bool done=false;\n        for(int k=j;k>0&&!done;k--){\n          if(tree[i][k]=='\/'){\n            resp[k-1]+=resp[k];\n            resp[k]=0;\n          }\n          else if(tree[i][k]=='\\\\'){\n            resp[k]=0;\n            done=true;\n          }\n          else{\n            done=true;\n          }\n        } \n      }\n      else if(tree[i][j]=='\\\\'&&resp[j]>0){\n        bool done=false;\n        for(int k=j;k<tree[i].length&&!done;k++){\n          if(tree[i][k]=='\\\\'){\n            resp[k+1]+=resp[k];\n            resp[k]=0;\n          }\n          else if(tree[i][k]=='\/'){\n            resp[k]=0;\n            done=true;\n          }\n          else{\n            done=true;\n          }\n        }\n      }\n    }\n  }\n  return resp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74958,"user_id":null,"body":"List<int> shake_tree(var tree) {\n  var currentResult = getEmptyList(tree[0].length);\n  for (final lvl in tree){\n    currentResult = passLvl(currentResult, lvl);\n  }\n  return currentResult;\n}\n\nList<int> passLvl(List<int> nuts, String lvl){\n  final result = getEmptyList(lvl.length);\n  \n  for (var i = 0; i < lvl.length; i++){\n    if (lvl[i] == 'o') {\n      result[i] = result[i] + nuts[i] + 1;\n    } else if (lvl[i] == '\/' && i != 0){\n      final rollIndex = rollLeft(lvl, i);\n      if (rollIndex != null) {\n        result[rollIndex] += nuts[i];\n      }\n    } else if (lvl[i] == r\"\\\" && i != lvl.length - 1){\n      final rollIndex = rollRight(lvl, i);\n      if (rollIndex != null) {\n        result[rollIndex] += nuts[i];\n      }\n    } else {\n      result[i] = result[i] + nuts[i];\n    }\n  }\n  \n  return result;\n}\n\nint? rollLeft(String lvl, int index){\n  for (var i=index; i>=0; i--){\n    if (lvl[i] == r\"\\\") return null;\n    if (lvl[i] != '\/') return i;\n  }\n  \n  return null;\n}\n\nint? rollRight(String lvl, int index){\n  for (var i=index; i<lvl.length; i++){\n    if (lvl[i] == '\/') return null;\n    if (lvl[i] != r\"\\\") return i;\n  }\n  \n  return null;\n}\n\nList<int> getEmptyList(int length){\n  return List.generate(length, (_) => 0);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59b844528bcb7735560000a0":[{"id":74959,"user_id":759,"body":"bool is_nice(List arr) => arr.length != 0 && arr.every((x) => arr.any((y) => (y - x).abs() == 1));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74960,"user_id":null,"body":"bool is_nice(arr) {\n  \/\/ your code herea\n return arr.isNotEmpty ? arr.every((x)=> arr.contains(x-1) || arr.contains(x+1)): false;\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74961,"user_id":null,"body":"bool is_nice(arr) {\n  List<int> values = [];\n  arr.forEach((value){\n    if(arr.contains(value + 1) || arr.contains(value - 1))\n      values.add(value);\n  });\n  return values.length == arr.length && arr.length != 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74962,"user_id":645,"body":"bool is_nice(arr) => arr.length == 0 ? false : arr.fold(true, (acc, item) => acc && (arr.contains(item + 1) || arr.contains(item - 1)));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74963,"user_id":250,"body":"bool is_nice(List<int> arr) {\n  if (arr.length == 0) {\n    return false;\n  }\n  \n  Map<int, bool> r = Map.fromIterable(arr, key: (v) => v, value: (v) => true);\n  \n  return arr.every((e) => r.containsKey(e+1) || r.containsKey(e-1));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74964,"user_id":null,"body":"bool is_nice(arr) {\n  \n  var niceCounter = 0;\n  \n  for (var num in arr){\n    for (var inNum in arr){\n      if (num - 1 == inNum || num + 1 == inNum){\n        niceCounter += 1;\n        break;\n      }\n    }\n  }\n  \n  return (niceCounter == arr.length && !(arr.isEmpty)) ? true : false;\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74965,"user_id":null,"body":"bool is_nice(arr) {\n  if(arr.length == 0){\n    return false;\n  }\n  for(int i = 0; i < arr.length; i++){\n    bool isnice = arr.contains(arr[i] + 1) || arr.contains(arr[i] - 1);\n    if(!isnice){\n      return false;\n    }\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74966,"user_id":null,"body":"bool is_nice(List<int> arr) => arr.isEmpty\n    ? false\n    : arr.every((x) => arr.any((y) => x == y + 1 || x == y - 1));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74967,"user_id":null,"body":"bool is_nice(arr) {\n int flag = 0; \nfor(int i=0; i<arr.length; i++){\n  if(arr.contains(arr[i]-1 ) || arr.contains(arr[i]+1))\n  flag++;\n\n}\nreturn flag == arr.length && arr.isNotEmpty && arr != [0] ? true : false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74968,"user_id":null,"body":"\/\/ Nice Array\nbool is_nice(List<int> arr) {\n  bool temp = false;\n  for (int i = 0; i < arr.length; i++) {\n    bool flag1 = (arr.contains(arr[i] + 1));\n    bool flag2 = (arr.contains(arr[i] - 1));\n    if (flag1 || flag2)\n      temp = true;\n    else\n      return false;\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59c5f4e9d751df43cf000035":[{"id":74969,"user_id":null,"body":"import 'dart:math' show max;\n\nint solve(String s) => RegExp(r\"[aeiou]*\").allMatches(s).fold(0, (acc, cur) => max(acc, cur.group(0).length));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74970,"user_id":null,"body":"int solve(String s) {\n  const vowels = ['a','e','i','o','u'];\n  var max = 0;\n  var result = 0;\n\n  for (var i in s.split('')){\n    if (vowels.contains(i)) max++;\n    else if (max > result){ result = max; max = 0;}\n    else max =0;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74971,"user_id":null,"body":"import 'dart:math';\nint solve(String s) => RegExp(r'([aeiou]+)').allMatches(s).map((x) => x.group(0).length).reduce(max);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74972,"user_id":645,"body":"import \"dart:math\";\nint solve(String s) => RegExp(r\"[aeiou]+\").allMatches(s).toList().fold(0, (a, b) => max(a, b[0].length));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74973,"user_id":null,"body":"int solve(String s) => RegExp(\"[aeiou]*\").allMatches(s).map((e) => e.groups([0])[0].length).reduce((e,v) => (e > v)?e:v);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74974,"user_id":null,"body":"import 'dart:math';\n\nint solve(String s) {\n  var list = <int>[];\n  var count = 0;\n  \n  s.split('').forEach((letter){\n    if(['a', 'i', 'u', 'e', 'o'].contains(letter)){\n      count++;\n    }else{\n      count = 0;\n    }\n    \n    list.add(count);\n  });\n  \n  return list.reduce(max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74975,"user_id":null,"body":"int solve(String s) => s.split(RegExp('[^aeiou]')).reduce((a, b) => a.length > b.length ? a : b).length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74976,"user_id":250,"body":"int solve(String s) {\n  return s.split(new RegExp(r'[^aeoiu]'))\n    .fold(0, (a, c) => c.length > a ? c.length: a);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74977,"user_id":null,"body":"int solve(String s) => s.split(RegExp(r\"[^aeiou]+\")).map((i)=>i.length).reduce((a,b) => a<b ? b : a);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74978,"user_id":null,"body":"int solve(String s) {\n  \/\/ your code here\n  int lengthCounter = 0;\n  int count = 0;\n  for (var letter = 0; letter < s.length; letter++){\n    s.toLowerCase();\n    if ( s[letter] == 'a' || s[letter] == 'e' || s[letter] == 'i' || s[letter] == 'o' || s[letter] == 'u') {\n      count++;\n      if (lengthCounter < count) {\n        lengthCounter = count;\n      }\n    }else{\n      count = 0;\n    }\n  }\n    return lengthCounter;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59c633e7dcc4053512000073":[{"id":74979,"user_id":null,"body":"int solve(String s) {\n  return (s\n          .split(RegExp(r'[aeiou]+'))\n          .where((str) => str.trim().length > 0)\n          .map(\n              (str) => str.codeUnits.map((i) => i - 96).reduce((a, e) => a + e))\n          .toList()\n            ..sort((l, r) => r - l))\n      .first;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74980,"user_id":null,"body":"int solve(String s) => (s.split(new RegExp(\"[aeiou]\")).map((ss) => ss.runes.map((x) => x -96).fold(0, (x, y) => x + y)).toList()..sort()).last;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74981,"user_id":759,"body":"int solve(String s) {\n  var last = 0;\n  var max = 0;\n  s.runes.forEach((int ch) {\n    if ([97, 101, 105, 111, 117].contains(ch)) {\n      if (last > max) {\n        max = last;\n      }\n      last = 0;\n    } else {\n      last += ch - 96;\n    }\n  });\n  return last > max ? last : max;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74982,"user_id":null,"body":"import \"dart:math\";\nint solve(String s) => s.split(RegExp(r'[aeiou]+')).fold(-1, (int a, b) => max(b.runes.fold(0, (int i, val) => val+i-96), a));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74983,"user_id":null,"body":"\n\nimport 'dart:math';\nint solve(String s) {\n  return s.split(RegExp(r'[aeiou]')).map(\n    (x) => x.codeUnits.map((c) => (c - 'a'.codeUnits[0] + 1)).fold(0, (int a, b) => a + b) ?? 0\n  ).reduce(max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74984,"user_id":null,"body":"int solve(String s) {\n  String vowels = 'aeiou';\n  Map<String, int> alphabet = {'a': 1, 'b' : 2, 'c': 3, 'd' : 4, 'e' : 5, \n                               'f': 6, 'g' : 7, 'h': 8, 'i' : 9, 'j' : 10,\n                               'k': 11, 'l' : 12, 'm' : 13, 'n': 14, 'o' : 15,\n                               'p' : 16, 'q' : 17, 'r' : 18, 's' : 19, 't' : 20,\n                               'u' : 21, 'v' : 22, 'w' : 23, 'x' : 24, 'y' : 25, 'z' : 26};\n  \n  int count1 = 0;\n  int count2 = 0;\n  \n  for(int i = 0; i < s.length; i++){\n    if(!vowels.contains(s[i])) count1 += alphabet[s[i]];\n    else{\n      if (count2 <= count1) count2 = count1;\n      count1 = 0;\n    }\n  }\n  \n  if(count2 > count1) return count2;\n    else return count1;\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74985,"user_id":null,"body":"int solve(String s) => s.split(new RegExp(\"[aeiou]\")).fold(0, (p,e) => p > strength(e) ? p : strength(e));\n  \nint strength(String s) {\n  Map<int, String> map = {2:'b',3:'c',4:'d',6:'f',7:'g',8:'h',10:'j',11:'k',12:'l',13:'m',14:'n',16:'p',17:'q',18:'r',19:'s',20:'t',22:'v',23:'w',24:'x',25:'y',26:'z'};\n  return s.split('').fold(0, (p,e) => p + map.keys.firstWhere((k) => map[k] == e));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74986,"user_id":null,"body":"int solve(String s) => s.replaceAll(RegExp(r'[aeiou]+'), ' ')\n              .trim()\n              .split(RegExp(r'\\s'))\n              .map((e) => e.codeUnits.fold(0, (s, e) => s + (e - 96)))\n              .reduce((s, e) => s >= e ? s : e);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74987,"user_id":null,"body":"import 'dart:math';\n\nint solve(String s) {\n  return s.split(RegExp('[aiueo]+')).map((consonant) {\n    return consonant.codeUnits.fold<int>(0, (acc, code) => acc + (code - 96));\n  }).reduce(max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74988,"user_id":null,"body":"int solve(String s) {\n  var word = s.split('');\n\n  var solve = 0;\n  var alphabet = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3,\n    \"d\": 4,\n    \"e\": 5,\n    \"f\": 6,\n    \"g\": 7,\n    \"h\": 8,\n    \"i\": 9,\n    \"j\": 10,\n    \"k\": 11,\n    \"l\": 12,\n    \"m\": 13,\n    \"n\": 14,\n    \"o\": 15,\n    \"p\": 16,\n    \"q\": 17,\n    \"r\": 18,\n    \"s\": 19,\n    \"t\": 20,\n    \"u\": 21,\n    \"v\": 22,\n    \"w\": 23,\n    \"x\": 24,\n    \"y\": 25,\n    \"z\": 26\n  };\n\n   var currentSolve = 0;\n\n  for (var i = 0; i < word.length; i++) {\n   \n\n    if (word[i] == 'a' ||\n        word[i] == 'e' ||\n        word[i] == 'i' ||\n        word[i] == 'o' ||\n        word[i] == 'u') {\n      currentSolve = 0;\n    } else {\n      currentSolve = currentSolve + alphabet[word[i]]!;\n    }\n\n    if (currentSolve > solve) {\n      solve = currentSolve;\n    }\n    \n  }\n\n  return solve;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59ccf051dcc4050f7800008f":[{"id":74989,"user_id":null,"body":"import 'dart:math';\n\nbuddy(int start, int limit) {\n  for (var n = start; n <= limit; n++) {\n    int nSum = getDivisorSum(n);\n    \n    int m = nSum - 1;\n    int mSum = getDivisorSum(m);\n\n    if (n + 1 == mSum && n.clamp(start, limit) == n && n < m) {\n      return \"($n $m)\";\n    }\n  }\n\n  return \"Nothing\";\n}\n\nint getDivisorSum(int number) {\n  if (number == 1) return 0;\n\n  int sum = 1;\n  for (var i = 2; i <= sqrt(number); i++) {\n    if (number % i == 0) {\n      sum += i;\n      int d = number ~\/ i;\n      if (d != i) sum += d;\n    }\n  }\n\n  return sum;\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74990,"user_id":null,"body":"int totalDivisors(int numb ){\n  List<int> divisorList = [];\n  for(int j = 2;j<(numb ~\/j); j++){\n    if(numb % j == 0)divisorList.addAll([j,numb~\/j]);\n  }\n  return divisorList.fold(0,(int p,e)=> p+ e);\n}\n\nList<int>? buddy(int start, int limit) {\n  for(int i = start; i< limit; i++){\n    int m = totalDivisors(i);\n    if(m<i) continue;\n    int n = totalDivisors(m);\n    if(n == i) return [n,m];\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74991,"user_id":null,"body":"List<int>? buddy(int start, int limit) {\n\tfor (int n = start; n <= limit; n++) {\n\t\tint m = sumDivisors(n);\n\t\tif (m > n && sumDivisors(m) == n) return [n, m];\n\t}\n\treturn null;\n}\n\nint sumDivisors(int n) {\n  int sum=0;\n\tfor (int i = 2; i < n\/i; i++) {\n\t\tif (n%i == 0) {\n\t\t\tsum += i + n ~\/i; \/\/ +1 +n\n\t\t}\n\t}\n\treturn sum;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74992,"user_id":492,"body":"import 'dart:math' as math;\n\nint sumOfDivisors(int n) {\n  int result = 1;\n  for (int factor = 2; factor <= math.sqrt(n).ceil(); factor++) {\n    if (n % factor == 0) {\n      result += factor;\n      if (factor != n ~\/ factor) {\n        result += (n ~\/ factor);\n      }\n    }\n  }\n  return result;\n}\nList<int>? buddy(int start, int limit) {\n  for (int num1 = start; num1 <= limit; num1++) {\n    int num2 = sumOfDivisors(num1) - 1;\n    if ((sumOfDivisors(num2) == num1 + 1) && (num2 > num1)) {\n      return [num1, num2];\n    }\n  }\n  return null;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74993,"user_id":null,"body":"List<int>? buddy(int start, int limit) {\n  for(int n = start; n <= limit; n++){\n    int sumN = divSum(n);\n    int sumM = divSum(sumN - 1);\n    if(sumM - 1 == n && sumN - 1 > n)\n      return [n, sumN - 1];\n  }\n  return null;\n}\n\nint divSum(int n){\n  int sum = 1;\n  for(int i = 2; i < n \/ i; i++)\n    if(n % i == 0) sum += i + (n ~\/ i);\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74994,"user_id":null,"body":"import 'dart:math';\n\nint del(int x) {\n  Set<int> dividers = {1};\n  for (int i = 2; i <= pow(x, 0.5); i++) {\n    if (x % i == 0) {\n      dividers.add(i);\n      dividers.add(x ~\/ i);\n    }\n  }\n  return dividers.reduce((value, element) => value + element);\n}\n\nList<int>? buddy(int start, int limit) {\n  for (int x = start; x <= limit; x++) {\n    int sumDel = del(x) - 1;\n    int sumSumDel = del(sumDel) - 1;\n    if (sumSumDel == x  && sumDel > x) {\n      return [x, sumDel];\n    }\n  }\n  return null;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74995,"user_id":null,"body":"import 'dart:math';\n\n\nList<int>? buddy(int start, int limit) {\n  var sumArray = <int>[];\n  int result = 0;\n  \/\/sum of list\n  for (start; start <= limit; start++) {\n    for (var i = 2; i <= sqrt(start); i++) {\n      if (start % i == 0) {\n        if (i == start \/ i) {\n          result += i;\n        } else {\n          result += (i + start \/ i).toInt();\n        }\n      }\n    }\n    \/\/ here I add the sum of list\n    sumArray.add(result + 1);\n    result = 0;\n\n    \/\/sum of the sum\n    var result2 = 0;\n    for (var a = 2; a <= sqrt(sumArray[0] - 1); a++) {\n      if ((sumArray[0] - 1) % a == 0) {\n        if (a == (sumArray[0] - 1) \/ a) {\n          result2 += a;\n        } else {\n          result2 += (a + (sumArray[0] - 1) \/ a).toInt();\n        }\n      }\n    }\n    result2 += 1;\n\n    if ((result2 == start + 1) && (sumArray[0]-1) > start) {\n      \n        return [start, sumArray[0] - 1];\n      }\n    \n\n    sumArray.clear();\n  }\n  return null;\n}\n\n\n\n\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74996,"user_id":null,"body":"import 'dart:math';\nimport 'package:collection\/collection.dart';\n\nList<int>? buddy(int start, int limit) {\n  \n  for (var m = start; m <= limit; m++){\n    int mDivisorsSum = divisorsSum(m);\n    int n = mDivisorsSum - 1;\n    if (n > m && divisorsSum(n) == m + 1) return [m, n];\n  }\n  return null;\n}\n\nint divisorsSum(int i) => _divisors(i).sum;\n\nIterable<int> _divisors(int n) sync* {\n  yield 1;\n  for (var i = 2; i < sqrt(n).ceil(); i++){\n    if (n % i == 0){\n      yield i;\n      if (i * i != n) yield n ~\/ i;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74997,"user_id":null,"body":"import 'dart:math';\n\nMap<int, int> sumOfDividersCache = {};\nMap<int, List<int>?> buddyCache = {};\nList<int> primes = [2, 3];\nint maxPrimeChecked = 0;\n\nMap<int, int> primeDecomposition(int n) {\n  \/\/ get decompositions\n  int nTmp = n;\n  Map<int, int> res = {};\n  for (int i = 0; i < primes.length; i++) {\n    int prime = primes[i];\n    while (nTmp % prime == 0) {\n      if (prime > nTmp) continue;\n      nTmp ~\/= prime;\n      res[prime] = (res[prime] ?? 0) + 1;\n      if (nTmp != 1 && checkIsPrime(nTmp)) {\n        res[nTmp] = (res[nTmp] ?? 0) + 1;\n        if (!primes.contains(nTmp)) primes.add(nTmp);\n        return res;\n      }\n    }\n  }\n  return res;\n}\n\nbool checkIsPrime(int n) {\n  if (primes.contains(n)) return true;\n  int s = sqrt(n).floor();\n  for (int i = 2; i <= s; i++) {\n    if (n % i == 0) return false;\n  }\n  primes.add(n);\n  return true;\n}\n\nList<int>? buddy(int start, int limit) {\n  print('$start-$limit');\n  \/\/ get all the primes\n  if (limit > maxPrimeChecked) {\n    int s = sqrt(limit).floor();\n    for (int i = 3; i <= s; i++) {\n      checkIsPrime(i);\n    }\n    maxPrimeChecked = limit;\n  }\n  for (int i = start; i <= limit; i++) {\n    if (buddyCache.containsKey(i)) {\n      if (buddyCache[i] == null) continue;\n      return buddyCache[i];\n    }\n    int sum = sumOfDividers_v2(i);\n    if (sum == 0) continue;\n    if (sum - 1 < i) {\n      buddyCache[i] = null;\n      continue;\n    }\n    int sumsum = sumOfDividers_v2(sum - 1);\n    if (sumsum - 1 == i) {\n      buddyCache[i] = [i, sum - 1];\n      return [i, sum - 1];\n    }\n    buddyCache[i] = null;\n  }\n  return null;\n}\n\nint sumOfDividers(int n) {\n  if (sumOfDividersCache.containsKey(n)) return sumOfDividersCache[n]!;\n  int sum = 1;\n  for (int i = 2; i < n; i++) {\n    if (n % i == 0) sum += i;\n  }\n  sumOfDividersCache[n] = sum;\n  return sum;\n}\n\nint sumOfDividers_v2(int n) {\n  if (sumOfDividersCache.containsKey(n)) return sumOfDividersCache[n]!;\n  final primeDecs = primeDecomposition(n);\n  \/\/ print(primeDecs);\n  List<int> primeDecsFlat = [];\n  primeDecs.entries.forEach((entry) {\n    for (int i = 0; i < entry.value; i++) {\n      primeDecsFlat.add(entry.key);\n    }\n  });\n  Map<int, int> primeDecsFlatMap = primeDecsFlat.asMap();\n  \/\/ print(primeDecsFlatMap);\n  int maxVariations = 1 << primeDecsFlatMap.length;\n  \/\/ print(maxVariations);\n  List<int> variations = [];\n  for (int i = 0; i < maxVariations - 1; i++) {\n    int s = 1;\n    primeDecsFlatMap.forEach((index, value) {\n      if ((i >> index & 1) == 1) {\n        s *= value;\n      }\n    });\n    variations.add(s);\n  }\n  \/\/ print(variations.toSet().toList());\n  int sum = variations\n      .toSet()\n      .toList()\n      .fold<int>(0, (previousValue, element) => previousValue + element);\n  sumOfDividersCache[n] = sum;\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":74998,"user_id":null,"body":"List<int>? buddy(int start, int limit) {\n  final map = <int, int>{};\n  \n  for (var i = start; i <= limit; i++){\n    map[i] ??= getDivisorsSum(i);\n    \n    if (map[i]! > i) {\n      final j = map[i]! - 1;\n      map[j] ??= getDivisorsSum(j);\n      if (map[j]! - 1 == i) return [i, j];\n    }\n  }\n  \n  return null;\n}\n\nint getDivisorsSum(int number){\n  var sum = 1; \n  \n  var i = 2;\n  int success = 1;\n  \n  while (i < number \/ i) {\n    if (number % i == 0) {\n      sum += i;\n      if (number \/ i != i) sum += number ~\/ i;\n      success = i;\n    }\n    \n    i++;\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"}],"59cfc000aeb2844d16000075":[{"id":74999,"user_id":null,"body":"List<String> capitalize(String x) {\n  List<String> a = [];\n  List<String> b = [];\n  for(var index = 0; index < x.length; index++) {\n    a.add(index % 2 == 0 ? x[index].toUpperCase() : x[index]);\n    b.add(index % 2 == 1 ? x[index].toUpperCase() : x[index]);\n  };\n  return [a.join(),b.join()];\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":75000,"user_id":null,"body":"List<String> capitalize(String x) {\n  List<String> a = [];\n  List<String> b = [];\n  for(var i = 0; i < x.length; i++) {\n    a.add(i % 2 == 0 ? x[i].toUpperCase() : x[i]);\n    b.add(i % 2 == 1 ? x[i].toUpperCase() : x[i]);\n  }\n  return [a.join(),b.join()];\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:41","updated_at":"2023-01-14 13:23:41"},{"id":75001,"user_id":null,"body":"List<String> capitalize(String x) {\n    final evens = StringBuffer();\n    final odds = StringBuffer();\n    for (int i = 0; i < x.length; i++) {\n      if (i.isOdd) {\n        odds.write(x[i].toUpperCase());\n        evens.write(x[i]);\n      } else {\n        odds.write(x[i]);\n        evens.write(x[i].toUpperCase());\n      }\n    }\n    return [evens.toString(), odds.toString()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75002,"user_id":null,"body":"capitalize(x) => [\n  x.split('').asMap().map((k, v) => new MapEntry(k, k.isEven ? v.toUpperCase() : v)).values.join(),\n  x.split('').asMap().map((k, v) => new MapEntry(k, k.isOdd ? v.toUpperCase() : v)).values.join()\n];\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75003,"user_id":null,"body":"List<String> capitalize(String x) {\n  var output = ['', ''];\n  for (var i = 0; i < x.length; i++) {\n    if (i % 2 == 0) {\n      output[0] += x[i].toUpperCase();\n      output[1] += x[i].toLowerCase();\n    } else {\n      output[1] += x[i].toUpperCase();\n      output[0] += x[i].toLowerCase();\n    }\n  }\n  return output;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75004,"user_id":null,"body":"List<String> capitalize(String x) {\n  List<String> xToString = x.split('');\n  List<String> evenString = [];\n  List<String> oddString = [];\n  List<String> listToReturn = [];\n  \n  for (var i = 0; i < xToString.length; i++){\n    if(i.isEven){\n      evenString.add(xToString[i].toUpperCase());\n    }else{\n      evenString.add(xToString[i]);\n    }\n  }\n  \n  for (var i = 0; i < xToString.length; i++){\n    if(i.isOdd){\n      oddString.add(xToString[i].toUpperCase());\n    }else{\n      oddString.add(xToString[i]);\n    }\n  }\n  \n  listToReturn.add(evenString.join());\n  listToReturn.add(oddString.join());\n  \n  return listToReturn;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75005,"user_id":null,"body":"List<String> capitalize(String x) {\n  String firstUpper = '';\n  String firstLower = '';\n  x.split('').asMap().forEach((index, character) {\n      firstUpper += index % 2 == 0 ? character.toUpperCase() : character.toLowerCase();\n      firstLower += index % 2 == 0 ? character.toLowerCase() : character.toUpperCase();\n  });\n  return [firstUpper, firstLower];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75006,"user_id":null,"body":"List<String> capitalize(String x) {\n    var odd = x.split(\"\");\n    var even = x.split(\"\");\n\n    for (var i = 1; i < odd.length; i += 2)\n    {\n        odd[i] = odd[i].toUpperCase();\n    }\n\n    for (var i = 0; i < even.length; i += 2)\n    {\n        even[i] = even[i].toUpperCase();\n    }\n\n    return [ even.join(), odd.join() ];\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75007,"user_id":null,"body":"List<String> capitalize(String x) {\n  return [\n    capitalizer(x, isEven),\n    capitalizer(x, isOdd),\n  ];\n}\n\nString capitalizer(String target, bool testCallback(int i)) {\n  int length = target.length;\n  List<String> letters = target.split('');\n  \n  for(int i = 0; i < length; i++) {\n    if(testCallback(i)) letters[i] = letters[i].toUpperCase();\n  }\n  return letters.join();\n}\n\nbool isEven(int testInt) => testInt % 2 == 0;\nbool isOdd(int testInt) => testInt % 2 != 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75008,"user_id":759,"body":"List<String> capitalize(String x) {\n  StringBuffer s1 = new StringBuffer(), s2 = new StringBuffer();\n  for (int i = 0; i < x.length; ++i) {\n    final upper = x[i].toUpperCase(), lower = x[i].toLowerCase();\n    if (i % 2 == 0) { s1.write(upper); s2.write(lower); }\n    else { s1.write(lower); s2.write(upper); }\n  }\n  return [s1.toString(), s2.toString()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59d9ff9f7905dfeed50000b0":[{"id":75009,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  return List<int>.from(\n    arr.map((str) => \n      str.toLowerCase()\n        .codeUnits\n        .asMap()\n        .entries\n        .fold(0, (acc, pair) =>\n          acc + (pair.key == (pair.value - \"a\".codeUnitAt(0)) ? 1 : 0)\n        )\n    )\n  );\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75010,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  var let = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26};\n  List<int> res = [];\n  var ct = 0;\n  arr.forEach((el) {\n    ct = 0;\n    el = el.toLowerCase();\n    for(int i = 0; i<el.length; i++){\n      if(i+1 == let[el[i]]) ct++;\n    }\n    res.add(ct);\n  });\n    return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75011,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  final alpha = 'abcdefghijklmnopqrstuvwxyz';\n\n  int cal_order(String str) => str\n      .toLowerCase()\n      .split('')\n      .asMap()\n      .map((key, value) => MapEntry(key, [alpha[key], value]))\n      .values\n      .where((element) => element[0] == element[1])\n      .length;\n\n  return arr.map(cal_order).toList();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75012,"user_id":250,"body":"List<int> solve(List<String> arr) {\n  return arr.map((w) {\n    var c = 0;\n    var l = w.toLowerCase();\n    \n    for (var i = 0; i < w.length; i++) {\n      var n = l.codeUnitAt(i) - 97;\n      if (i==n) {\n        c++;\n      }\n    }\n    \n    return c;\n  }).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75013,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  \/\/ your code here\n  List<int> result = [];\n  const String firstLetter = 'a';\n  arr.forEach((value){\n    int count = 0;\n    for(int i=0;i<value.length;i++){\n      String toLower = value[i].toLowerCase();\n      if(toLower.codeUnits[0]-firstLetter.codeUnits[0] == i)\n        count++;\n    }\n    result.add(count);\n  });\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75014,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  return List.generate(arr.length, (i){\n    int c = 0;\n    return arr[i].toUpperCase().codeUnits.fold<int>(0, (a, b){\n      c++;\n      return c == (b - 64) ? ++a: a;\n    });\n  });\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75015,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  List<int> list = [];\n  arr.forEach((v) => list.add(0));\n  arr.asMap().forEach((f, e) => e.split('').asMap().forEach((k, v) => v.compareTo(String.fromCharCode(k+97)) == 0 || v.compareTo(String.fromCharCode(k+65)) == 0 ? list[f]++ : list[f] += 0 ));\n  return list;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75016,"user_id":null,"body":"List<int> solve(List<String> arr) {\n  List<int>result = [];\n\n  for(String word in arr){\n    int count = 0;\n    for(int i = 0; i<word.length;i++){\n     if(word.toLowerCase().codeUnitAt(i) - 97 == i){\n      count++;\n     }\n    }\n    result.add(count);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75017,"user_id":null,"body":"List<int> solve(List<String> arr) {\nList<int> list = [];\n  for(var i=0;i<arr.length;i++){\n    int counter = 0;\n    for(var j=0;j<arr[i].length;j++){\n      if(arr[i][j].toLowerCase().codeUnitAt(0)-96==j+1){\n      counter = counter +1;\n      }\n    }\n    list.add(counter);\n  }\n  return list;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75018,"user_id":645,"body":"List<int> solve(List<String> arr) => arr.map((String x) => x.split('').asMap().keys.toList().fold(0, (int acc, int i) => acc + ((x[i].toLowerCase().codeUnitAt(0) - 97) == i ? 1 : 0))).toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59dd2c38f703c4ae5e000014":[{"id":75019,"user_id":null,"body":"import 'dart:math';\nint solve(String s) => s.split(RegExp('[a-z]')).map((e) => e.isNotEmpty ? int.parse(e): 0).reduce(max);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75020,"user_id":645,"body":"import 'dart:math';\nint solve(String s) => s.split(RegExp(r\"[^0-9]\")).where((x) => x != \"\").map((x) => int.parse(x)).fold(0, max);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75021,"user_id":null,"body":"import 'dart:math';\n\nint solve(String s) => RegExp(r'\\d+').allMatches(s).map<int>((m) => int.parse(m.group(0))).reduce(max);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75022,"user_id":null,"body":"int solve(String s) => (s\n        .replaceAll(RegExp(r'[^0-9]'), ',')\n        .split(',')\n        .map((x) => int.tryParse(x))\n        .where((x) => x != null)\n        .toList()\n      ..sort())\n    .last!;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75023,"user_id":null,"body":"int solve(String s) => s.split(RegExp(r\"[a-z]+\")).map((i) => i==\"\"? -1 : int.parse(i)).reduce((a,b)=> a<b ? b: a);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75024,"user_id":null,"body":"import \"dart:math\";\nint solve(String s) => RegExp('[0-9]+').allMatches(s).map((e)=> int.parse(e.group(0))).reduce(max);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75025,"user_id":null,"body":"import 'dart:math';\nint solve(String s) {\n  return s.split(RegExp(r'[^\\d]+')).fold(0, (m, s) => (s == '') ? m : max(m, int.parse(s)));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75026,"user_id":null,"body":"import 'dart:math';\nint solve(String s) => s.split(RegExp(r\"[^0-9]\")).where((e) => e != \"\").map((e) => int.parse(e)).fold(0, max);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75027,"user_id":null,"body":"import 'dart:math' show max;\n\nint solve(String s) => RegExp(r'\\d+').allMatches(s).map((m) => int.parse(m.group(0))).reduce(max);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75028,"user_id":null,"body":"import 'dart:core';\nimport 'dart:math';\n\n\n\nint solve(String s) {\n  List<String> arrayList = s.split('');\n  print(arrayList);\n\n  List<int> numberList = [];\n  List<String> numbers = [];\n\n  for(String character in arrayList) {\n    print(character);\n\n    try {\n      if(int.parse(character) is int) {\n        numbers.add(character);\n      }\n    } catch(error) {\n      if (numbers.isNotEmpty) {\n        numberList.add(int.parse(numbers.join()));\n        numbers = [];\n      }\n    }\n  }\n\n  if (numbers.isNotEmpty){\n    numberList.add(int.parse(numbers.join()));\n  }\n  return numberList.reduce(max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59df2f8f08c6cec835000012":[{"id":75029,"user_id":null,"body":"String meeting(String s) => (s.toUpperCase().split(';').map((person) {\n      final name = person.split(':');\n      return '(${name[1]}, ${name[0]})';\n    }).toList()\n          ..sort())\n        .join();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75030,"user_id":null,"body":"String meeting(String s) {\n  final people = s.split(';').map((String name) => Person.fromData(name)).toList();\n  people.sort();\n  return people.join();\n}\n\nclass Person implements Comparable<Person> {\n  final firstName;\n  final lastName;\n  \n  const Person(this.firstName, this.lastName);\n  \n  factory Person.fromData(String data) {\n    final splitData = data.toUpperCase().split(':');\n    return Person(splitData.first, splitData.last);\n  }\n  \n  int compareTo(Person other) {\n    final result = lastName.compareTo(other.lastName);\n    return result == 0 ? firstName.compareTo(other.firstName) : result;\n  }\n  \n  @override\n  String toString() => \"($lastName, $firstName)\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75031,"user_id":null,"body":"String meeting(String s) => (s.toUpperCase().split(\";\").map((s) => s.split(\":\").reversed.toString()).toList()..sort()).join(\"\");","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75032,"user_id":null,"body":"String meeting(String s) {\n  var item;\n  List<String> list1 = [];\n  List<String> list = s.toUpperCase().split(';');\n  for(var items in list){\n    item = items.split(':').reversed.join(', ');\n    list1.add('($item)');\n    list1.sort();\n  }\n  \n \n  return list1.reduce((value, element) => value +  element);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75033,"user_id":null,"body":"String meeting(String s) {\n  var pairs = s.split(\";\");\n  var names = pairs.map((item) => item.toUpperCase().split(':').reversed.toList()).toList();\n  \n  names.sort((a,b) {\n    var comparingLastName = a.first.compareTo(b.first);\n    \n    if(comparingLastName == 0) {\n      return a.last.compareTo(b.last);\n    } else {\n      return comparingLastName;\n    }\n  });\n  \n  var commaNames = names.map((item) => \"(\" + item.join(\", \") + \")\").toList();\n  \n  return commaNames.join(\"\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75034,"user_id":null,"body":"String meeting(String s) {\n  List a, b = [];\n  String str = '';\n  a = s.split(';');\n  a.forEach((element) {\n    b.add('(' +\n        element.toString().split(':').reversed.join(', ').toUpperCase() +\n        ')');\n  });\n  b.sort();\n  b.forEach((element) {\n    str = str + element.toString();\n  });\n  return str;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75035,"user_id":null,"body":"import 'package:collection\/collection.dart';\n\nString meeting(String s) {\n  List name, names = s.toUpperCase().split(\";\");\n  \n  names.forEachIndexed((index, element) {\n    name = element.split(':');\n    names[index] = \"(${name[1]}, ${name[0]})\";\n  });\n  \n  names.sort();\n  \n  return names.join(\"\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75036,"user_id":null,"body":"String meeting(String s) {\n  final names = s.toUpperCase().split(';').map((e) => e.split(':')).toList();\n  names\n    ..sort((name1, name2) => name1.first.compareTo(name2.first))\n    ..sort((name1, name2) => name1.last.compareTo(name2.last));\n\n  return names.map((e) => '(${e.last}, ${e.first})').join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75037,"user_id":null,"body":"String meeting(String s) {\n  List<String> resultPairs = [];\n  List<String> pairs = s.split(\";\");\n  pairs.forEach((pair){\n    List<String> nn = pair.split(\":\");\n    String name = nn[0].toUpperCase();\n    String surname = nn[1].toUpperCase();\n    resultPairs.add(\"($surname, $name)\");\n  });\n  resultPairs.sort();\n  return resultPairs.join(\"\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75038,"user_id":null,"body":"String meeting(String s) {\n  \n  \/\/\"Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill\";\n  \n  \n  var firstSplitS = s.split(';');\n  \/\/ \u0420\u043e\u0437\u0431\u0438\u0440\u0430\u0454\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0435\u0440\u0438\u0439 \u0440\u0430\u0437, \u0449\u043e\u0431 \u0432\u0456\u0434\u0434\u0456\u043b\u0438\u0442\u0438 \u0456\u043c\u044f \u0442\u0430 \u043f\u0440\u0456\u0437\u0432\u0438\u0449\u0430\n  \/\/\u041e\u0442\u0440\u0438\u043c\u0443\u0454\u043c\u043e \u043c\u0430\u0441\u0441\u0438\u0432, \u044f\u043a\u0438\u0439 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0454 \u0456\u043c'\u044f \u0442\u0430 \u0444\u0430\u043c\u0456\u043b\u0456\u044e\n  \/\/[Fred:Corwill, Wilfred:Corwill, Barney:Tornbull, Betty:Tornbull, Bjon:Tornbull, Raphael:Corwill, Alfred:Corwill]\n  \n  var spl = []; \/\/\u0421\u0442\u0432\u043e\u0440\u0438\u0432 \u043f\u0443\u0441\u0442\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0442\u0438\u0441\u044c \u0444\u0456\u043d\u0430\u043b\u044c\u043d\u0456 \u0434\u0430\u043d\u043d\u0456 \u0434\u043e \u043f\u0440\u0438\u0454\u0434\u043d\u0430\u043d\u043d\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n  \n  for(var i in firstSplitS){ \/\/\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u044c \u043f\u043e \u043a\u043e\u0436\u043d\u043e\u043c\u0443 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    \/\/\u0412 \u043f\u0443\u0441\u0442\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0437\u0430\u043f\u0438\u0441\u0443\u0454\u043c\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0438\n    \/\/i.split(':') \u0440\u043e\u0437\u0431\u0438\u0432\u0430\u0454 \u0435\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u043d\u0430 \u0449\u0454 \u043e\u0434\u0438\u043d \u043c\u0430\u0441\u0441\u0438\u0432, \u0434\u0435 \u0431\u0443\u0434\u0435 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u0442\u0438\u0441\u044c \u0456\u043c'\u044f \u0442\u0430 \u0444\u0430\u043c\u0456\u043b\u0456\u044f\n    \/\/Fred:Corwill => [Fred, Corwill]. reversed \u043c\u0456\u043d\u044f\u0454\u043c\u043e \u0435\u043b\u0435\u043c\u043d\u0442\u0438 \u043c\u0456\u0441\u0446\u044f\u043c\u0438, \u0442\u0430\u043a \u044f\u043a \u0444\u0430\u043c\u0456\u043b\u0456\u044f \u043c\u0430\u0454 \u0431\u0443\u0442\u0438 \u043f\u0435\u0440\u0448\u0430\n    \/\/toString().toUpperCase \u043f\u0435\u0440\u0435\u0440\u043e\u0431\u043b\u044f\u0454\u043c \u043f\u0456\u0434\u043c\u0430\u0441\u0441\u0438\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u0456 \u043f\u0440\u0438\u0432\u043e\u0434\n    \/\/\u0432 \u043a\u0456\u043d\u0446\u0456 \u043c\u0430\u0441\u0441\u0438\u0432 \u0434\u043e\u0434\u0430\u0454\u0442\u044c\u0441\u044f \u0434\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 spl. \u041e\u0442\u0440\u0438\u043c\u0430\u0454\u043c\u043e \u043d\u0430 \u0432\u0438\u0445\u043e\u0434\u0456\n    \/\/[(CORWILL, FRED), (CORWILL, WILFRED), (TORNBULL, BARNEY), (TORNBULL, BETTY), (TORNBULL, BJON), (CORWILL, RAPHAEL), (CORWILL, ALFRED)]\n    \n    spl.add(i.split(':').reversed.toString().toUpperCase());\n    \n  }\n  \n  spl.sort(); \/\/\u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0454\u043c \u0446\u0435\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0456\u0442\u0443\n\n  return spl.join('');\/\/ \u0406 \u0437\u0454\u0434\u043d\u0443\u0454\u043c \u0446\u0435 \u0432 \u043e\u0434\u043d\u0443 \u0432\u0435\u043b\u0438\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u0443\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a023c426975981341000014":[{"id":75039,"user_id":null,"body":"int other_angle(int a, int b) => 180 - a - b;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75040,"user_id":null,"body":"int other_angle(int a, int b) => 180 - (a + b);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75041,"user_id":645,"body":"int other_angle(int a, int b) => 180 - b - a;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75042,"user_id":null,"body":"int other_angle(int a, int b) {\n  int x = 180;\n  int c = x - (a+b);\n  return c;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75043,"user_id":527,"body":"int other_angle(int a, int b) {\n  return 180 - a - b;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75044,"user_id":null,"body":"int other_angle(int a, int b) {\n  \/\/ your code here\n  if (a <= 0 || b <= 0) return 0;\n  \n  return 180 - a - b;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75045,"user_id":null,"body":"int other_angle(int a, int b) {\n  return 180-(a+b);\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75046,"user_id":null,"body":"int other_angle(int a, int b) {\n  var result = 180 - (a + b);\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75047,"user_id":null,"body":"int other_angle(int a, int b) {\n      final result = 180 - (a + b);\n    return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75048,"user_id":null,"body":"int other_angle(int a, int b) {\n  var third_angle = 180 - (a + b);\n  return third_angle;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a03b3f6a1c9040084001765":[{"id":75049,"user_id":527,"body":"int angle(int n) {\n  return 180 * (n - 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75050,"user_id":null,"body":"int angle(int n) {\n   if (n < 3){\n      return 0;\n   }\n  return ((n - 2) * 180);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75051,"user_id":null,"body":"int angle(int n) => (2 * n - 4) * 90 ;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75052,"user_id":null,"body":"int angle(int n) {\n  num outerAngle = 360 \/ n;\n  num innerAngle = 180 - outerAngle;\n  num sum = innerAngle * n;\n  \n  return sum.round().toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75053,"user_id":null,"body":"int angle(int n) {\n  double measure=(n-2)*180;\n  return measure.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75054,"user_id":null,"body":"int angle(int n) {\n  return n>2? (n-2)*180: 0; \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75055,"user_id":null,"body":" int angle(int n) {\n    \/\/ your code here\n    if (n == 3) {\n      return 180;\n    } else {\n      final result = 180 * (n - 2);\n      return result;\n    }\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75056,"user_id":null,"body":"import 'dart:math';\n\nint angle(int n) {\n  return (n-2)*180;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75057,"user_id":null,"body":"int angle(int n) {\n  \/\/ your code here\n  int oneangle = (n-2)*180;\n  return(oneangle);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75058,"user_id":null,"body":"int angle(int n) {\n  return  180 * (n-2);\n  \n  \n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a045fee46d843effa000070":[{"id":75059,"user_id":null,"body":"String decomp(int n) {\n    var noPrimes = new Set<int>();\n    var result = \"\";\n    \n    for (int p = 2; p <= n; p++) {\n      int exp = 0;\n      if (!noPrimes.contains(p)) {\n        for (int f = 1, k = f*p; k <= n; k += p, f++) {\n          if (f > 1) { noPrimes.add(k); } \/\/ Erathostenes\n                    \n          for (int k2 = k; k2 % p == 0; k2 ~\/= p, exp++); \/\/ addmultiplicity of p in k to exp\n        }\n        \n        \/\/ exp >= 1 since p <= n, hence p divides n!\n        if (result != \"\") { result += \" * \"; }\n        exp == 1 ? result += p.toString() : result += p.toString() + \"^\" + exp.toString();        \n      }\n    }\n  \n    return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75060,"user_id":492,"body":"import 'dart:math' as math;\n\nString decomp(int n) {\n    List<int> primePower = new List.filled(n + 1, 0);\n    while (n > 1) {\n      int befn = n--;\n      for (int i = 2; i <= math.sqrt(befn); i++) {\n          if (befn % i == 0) {\n              befn ~\/= i;\n              primePower[i]++;\n              i = 1;\n          }\n      }\n      primePower[befn]++;\n    }\n    List<String> res = new List();\n    for (int i = 0; i < primePower.length; i++) {\n        int h = primePower[i];\n        if (h != 0)\n            res.add(h > 1 ? i.toString() + '^' + h.toString() : i.toString()); \n\n    };\n    return res.join(' * ');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75061,"user_id":null,"body":"String decomp(int n) {\n  final result = <String>[];\n  for (final p in getPrimes(n)) {\n    int sum = 0;\n    int denominator = p;\n    int term = n ~\/ denominator;\n    while(term > 0) {\n      sum += term;\n      denominator *= p;\n      term = n ~\/ denominator;\n    }\n    result.add(sum > 1 ? '$p^$sum' : p.toString());\n  }\n  return result.join(' * ');\n}\n\n\nList<int> getPrimes(int n) {\n  final length = n + 1;\n  final isPrimes = List.generate(length, (index) => true);\n  isPrimes[0] = false;\n  isPrimes[1] = false;\n\n  for (int i = 2; i * i < length; i++) {\n    if (isPrimes[i]) {\n      for (int j = i * i; j < length; j += i) {\n        isPrimes[j] = false;\n      }\n    }\n  }\n  final map = isPrimes.asMap();\n  final result = <int>[];\n  map.forEach((key, value) {\n    if (value) {\n      result.add(key);\n    }\n  });\n\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75062,"user_id":null,"body":"String decomp(int n) {\n  List<int> multipliers = List.generate(n+1, (i)=> i);\n  List<int> counter = List.generate(n+1, (i)=>0);\n for (int i = 2; i<=n; i++){\n    for (int j = i; j<=n; j++){\n     while(multipliers[j]%i==0){\n       multipliers[j]=multipliers[j]~\/i;\n       counter[i]++;\n     }\n   }\n }\n  List<String> answer = [];\n  for (int i = 2; i <= n; i++){\n    if (counter[i]==1) answer.add('$i');\n    if (counter[i]>1) answer.add('$i^${counter[i]}');\n  }\n  return answer.join(' * ');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75063,"user_id":null,"body":"String decomp(int n) {\n    var noPrimes = new Set<int>();\n    var result = \"\";\n    \n    for (int p = 2; p <= n; p++) {\n      int exp = 0;\n      if (!noPrimes.contains(p)) {\n        for (int f = 1, k = f*p; k <= n; k += p, f++) {\n          if (f > 1) { noPrimes.add(k); } \/\/ Erathostenes\n                    \n          for (int k2 = k; k2 % p == 0; k2 ~\/= p, exp++); \/\/ addmultiplicity of p in k to exp\n        }\n        \n        \/\/ exp >= 1 since p <= n, hence p divides n!\n        if (result != \"\") { result += \" * \"; }\n        exp == 1 ? result += p.toString() : result += p.toString() + \"^\" + exp.toString();        \n      }\n    }\n  \n    return result;\n    return \"\";\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75064,"user_id":null,"body":"import 'dart:math';\n\nList<int> primeNumbers = [2];\n\nbool isPrime(int n) {\n  int stop = sqrt(n).toInt();\n  int i = 0;\n  \n  while (primeNumbers[i] < stop) {\n    if (n % primeNumbers[i] == 0) {\n      return (false);\n    }\n    i++;\n  }\n  return (true);\n}\n\nint nextPrime() {\n  int i = primeNumbers[primeNumbers.length - 1] + 1;\n  \n  if (i % 2 == 0) {\n    i++;\n  }\n  while (!isPrime(i)) {\n    i += 2;\n  }\n  return (i);\n}\n\n\/\/calculate primes factor of 'number'\nList<List<int>> getPrimeFactors(int number) {\n  int a = 0;\n  bool newFactor = true;\n  List<List<int>> primeFactors = [];\n  \n  while (number > 1) {\n    if (a >= primeNumbers.length) {\n      primeNumbers.add(nextPrime());\n    }\n    if (number % primeNumbers[a] == 0) {\n      number = number ~\/ primeNumbers[a];\n      if (newFactor) {\n        primeFactors.add([primeNumbers[a], 1]);\n        newFactor = false;\n      } else {\n        primeFactors[primeFactors.length - 1][1]++;\n      }\n    } else {\n      newFactor = true;\n      a++;\n    }\n  }\n  return (primeFactors);\n}\n\n\/\/merge List b into List a\nvoid mergePrimeFactorsLists(List<List<int>> a, List<List<int>> b) {\n  int i = 0;\n  int j = 0;\n  \n  while (j < b.length) {\n    while (i < a.length && a[i][0] < b[j][0]){\n      i++;\n    }\n    if (i == a.length) {\n      a.add(b[j]);\n    } else if (a[i][0] == b[j][0]) {\n      a[i][1] += b[j][1];\n    } else {\n      a.insert(i, b[j]);\n    }\n    j++;\n  }\n}\n\n\/\/calculate prime factors for each factors of n! rather than calculating the prime factors of n! directly\nList<List<int>> factorialDecomposition(int f){\n  List<List<int>> result = [];\n  int i = 2;\n  \n  while (i <= f) {\n    mergePrimeFactorsLists(result, getPrimeFactors(i));\n    i++;\n  }\n  return result;\n}\n\nString decomp(int n) {\n  List<String> result = [];\n  \n  factorialDecomposition(n).forEach((List<int> duet) {\n    if (duet[1] == 1) {\n      result.add('${duet[0]}');\n    } else {\n      result.add('${duet[0]}^${duet[1]}');\n    }\n  });\n  \n  return (result.join(' * '));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75065,"user_id":null,"body":"void numToMap(int num, Map<int, int> map) {\n  for (int i = 2; i <= num; i++) {\n    if (num % i == 0.0) {\n      int oldCount = map[i] ?? 0;\n      map[i] = oldCount + 1;\n      return numToMap(num ~\/ i, map);\n    }\n  }\n}\n\nString decomp(int n) {\n  Map<int, int> mapDigit = {};\n  for (int i = 2; i <= n; i++) {\n    numToMap(i, mapDigit);\n  }\n  String result = '';\n  mapDigit.forEach((key, value) {\n    final numPow = value > 1 ? '$key^$value' : '$key';\n    final multiply = result.isNotEmpty ? ' * ' : '';\n    result += '$multiply$numPow';\n  });\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75066,"user_id":null,"body":"Map<int, int> divisors(int n) {\n  Map<int, int> result = Map.identity();\n\n  int value = n;\n  for (int index = 2; index <= value; index++) {\n    while (value % index == 0) {\n      result.update(index, (value) => value + 1, ifAbsent: () => 1);\n      value = value ~\/ index;\n    }\n  }\n\n  return result;\n}\n\nString decomp(int n) {\n  Map<int, int> allDivisors = Map.identity();\n\n  for (int index = 2; index <= n; index++) {\n    for (final entry in divisors(index).entries) {\n      allDivisors.update(entry.key, (value) => value + entry.value, ifAbsent:() => entry.value);\n    }\n  }\n\n  return allDivisors.entries.map((entry) => \"${entry.key}${entry.value > 1 ? \"^${entry.value}\" : \"\"}\").join(\" * \");\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75067,"user_id":null,"body":"String decomp(int n) {\n  List<bool> prime = [];\n  List<int> value = [];\n\n  prime..add(false)..add(false);\n  value..add(0)..add(1);\n  for (int i = 2; i <= n; i++) {\n    prime.add(true);\n    value.add(i);\n  }\n  String result = \"\";\n\n  for(int i = 2; i <= n; i ++){ \n    if(prime[i]){\n      result += \" * \" + i.toString();\n      int power = 1;\n      for(int j = i+i; j <= n; j += i) {\n        prime[j] = false;\n        while(value[j] % i == 0){\n          value[j] = (value[j] \/ i).round();\n          power++;\n        }\n      }\n      if (power > 1){\n        result += \"^\" + power.toString();\n      }\n    }\n  }\n  \n  List array = result.split(\" * \");\n  array.removeAt(0);\n  result = array.join(\" * \");\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75068,"user_id":null,"body":"import 'dart:math';\n\nString decomp(int n) {\n  Map<int, int> dividers = {};\n  for (var i = 2; i <= n; i++) {\n    dividers = _decomp(i, dividers);\n  }\n\n  return dividers.entries\n      .map((e) => e.value > 1 ? \"${e.key}^${e.value}\" : \"${e.key}\")\n      .join(\" * \");\n}\n\nMap<int, int> _decomp(int n, Map<int, int> dividers) {\n  for (int x = 2; x <= sqrt(n); x++) {\n    if (n % x == 0) {\n      while (n % x == 0) {\n        dividers[x] = dividers.putIfAbsent(x, () => 0) + 1;\n        n = n ~\/ x;\n      }\n    }\n  }\n\n  if (n > 1) {\n    dividers[n] = dividers.putIfAbsent(n, () => 0) + 1;\n  }\n\n  return dividers;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a057ec846d843c81a0000ad":[{"id":75069,"user_id":null,"body":"int cycle(int n) {\n  int r = 1;\n  for(int i = 1; i<n; i++){\n    r=(10*r)%n;\n    if (r==1){\n        return i;\n      }\n     }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75070,"user_id":null,"body":"int cycle(int n) {\n  if (n % 2 == 0 || n % 5 == 0) return -1;\n  var sum = (10 % n);\n  return [for (var c = 0; sum > 1; c++) sum = sum.abs() * 10 % n].length + 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75071,"user_id":null,"body":"int cycle(int n) {\n    \/\/ your code\n  var res = \"\";\n  var resB = \"\";\n  var razn = 10;\n  var raznB = 0;\n  var count = 0;\n  int bResult = 0;\n  \n  while (count <= 20*2){\n    count++;\n    while(n > razn){\n    razn *= 10;\n    res += \"0\";\n  }\n    res += (razn~\/n).toString();\n    razn -= (razn~\/n)*n;\n    razn *= 10;\n    if (res.length > 1 && res.length < 20*2 && res.substring(0, res.length~\/2) == res.substring(res.length~\/2,))\n      {bResult = 1;\n      break;\n      }\n    if (count == 25){\n      resB += res;\n      raznB += razn;\n    }\n  }\n  count = 0;\n  if ( bResult != 1 ){\n    res = resB.toString();\n    \/\/resB = \"\";\n    razn = raznB.toInt();\n    raznB = 10;\n    while (count <= n){\n      count++;\n      while(n > razn){\n        count++;\n      razn *= 10;\n      resB = resB.substring(1) + \"0\";\n    }  \n    resB = resB.substring(1) + (razn~\/n).toString();\n    razn -= (razn~\/n)*n;\n    razn *= 10;\n      if (resB == res){\n        bResult = 2;\n        break;\n      }\n  }}\n  if ( bResult == 1) return res.length~\/2;\n  if ( bResult == 2) return count;\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75072,"user_id":null,"body":"int cycle(int n) {\n  if (n % 2 == 0 || n % 5 == 0) return -1;\n  int ten = 10, i = 1;\n  while (ten % n != 1) {\n    i++;\n    ten = (10 * ten) % n;\n  }\n\n  return i;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75073,"user_id":53,"body":"int cycle(int n) {\n  if (n%2 == 0 || n%5 == 0) return -1;\n  int m = 10 % n, cnt = 1;\n  while (m != 1) {\n      m = m * 10 % n; \n      cnt++;\n  }\n  return cnt;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75074,"user_id":null,"body":"int cycle(int n) {\n  var num = 10~\/n;\n  var resold = 1;\n  var res = 0;\n  var ct  = 0;\n  while(res != 1){\n    num = (int.parse(resold.toString() + '0') ~\/ n);\n    res = (int.parse(resold.toString() + '0') - num * n);\n    if(res == 0 || ct > n-1) return -1;\n    resold = res;\n    ct++;\n  }\n  return ct;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75075,"user_id":261,"body":"int cycle(int n) {\n  final r0 = 10 % n;\n  var r = r0;\n  \n  return (n % 2) * (n % 5) != 0 ?\n    List.filled(n, 0).indexWhere((_) => (r = r * 10 % n) == r0) + 1 \n    : -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75076,"user_id":null,"body":"int cycle(int n) {\n    if (n % 2 == 0 || n % 5 == 0) return -1;\n    var i = 0, val = 1;\n    while (true) {\n      i++;      \n      val = val * 10 % n;\n      if (val == 1) return i;\n    }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75077,"user_id":null,"body":"int cycle(int n) {\n  if (n % 2 == 0 || n % 5 == 0) {\n    return -1;\n  }\n  int i = 0;\n  int val = 1;\n  while(true) {\n    i++;\n    val = val * 10 % n;\n    if (val == 1) {\n      return i;\n    }\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75078,"user_id":168,"body":"int cycle(int n) {\n  if (n % 2 == 0 || n % 5 == 0) return -1;\n  int i = 1;\n  for (int p = 10 % n; p != 1; p = 10 * p % n, i++);\n  return i;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a3fe3dde1ce0e8ed6000097":[{"id":75079,"user_id":null,"body":"int century_from_year(year) {\n  return (year \/ 100).ceil();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75080,"user_id":1566,"body":"int century_from_year(year) {\n  return (year+99)~\/100;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75081,"user_id":null,"body":"int century_from_year(year) => year%100 == 0 ? year ~\/ 100 : year ~\/ 100 + 1;\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75082,"user_id":null,"body":"int century_from_year(year) => (year \/ 100).ceil();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75083,"user_id":null,"body":"int century_from_year(n) {\n  String a = n.toString().replaceAllMapped(RegExp(r'..$'),(m)=>m.group(0) != '00' ? 'a' : '');\n  if(a == 'a')return 1;\n  return a.endsWith('a') ? int.parse(a.replaceAll('a',''))+1: int.parse(a);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75084,"user_id":null,"body":"int century_from_year(year) {\n  if (year % 100 == 00){\n    return (year\/100).toInt();\n  } else{\n    return (year\/100+1).toInt();\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75085,"user_id":null,"body":"int century_from_year(year) => year<=100 ? 1 : year%100 == 0 ? year~\/100 : (year~\/100)+1;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75086,"user_id":null,"body":"int century_from_year(year) {\n  \/\/ Finish this :)\n  return (year \/ 100).floor() + (year % 100 != 0 ? 1 : 0);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75087,"user_id":null,"body":"int century_from_year(int year) {  \n  double result = year \/ 100;  \n  return result.ceil();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75088,"user_id":null,"body":"int century_from_year(year) {\n  \/\/ Finish this :)\n\n   String sYear = year.toString();\n  int nCentury = 0;\n  String sYr;\n  if (sYear.length > 2) {\n    String str = sYear.substring(0,sYear.length-2);\n    sYr = sYear.substring(sYear.length-2);\n    nCentury = int.parse(str);\n  } else {\n    sYr = sYear;\n  }\n  \n  \n  return int.parse(sYr) > 0 ? ++nCentury : nCentury;\n\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a4138acf28b82aa43000117":[{"id":75089,"user_id":null,"body":"int adjacentElementsProduct(array) {\n  int maximum;\n  for (int i = 0; i < (array.length - 1); i++) {\n    final int s = array[i] * array[i + 1];\n    if (i == 0 || s > maximum) maximum = s;\n  }\n  return maximum;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75090,"user_id":null,"body":"import \"dart:math\";\n\nint adjacentElementsProduct(array) {\n\n  int maxValue = array[0] * array[1];\n\n  for (int i = 1; i < array.length - 1; ++i) {\n    maxValue = max(maxValue, array[i] * array[i+1]);\n  \n  }\n  \n  return maxValue;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75091,"user_id":null,"body":"int adjacentElementsProduct(List<int> array) {\n  assert(array.length >= 2);\n\n  int prevNumber, result, largest;\n\n  for (int n in array) {\n    if (prevNumber == null) {\n      prevNumber = n;\n      continue;\n    }\n\n    if (largest == null) {\n      largest = prevNumber * n;\n      prevNumber = n;\n      continue;\n    }\n\n    result = prevNumber * n;\n\n    if (result > largest) largest = result;\n\n    prevNumber = n;\n  }\n\n  return largest;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75092,"user_id":null,"body":"int adjacentElementsProduct(array) {\n  List<int> result = [];\n  for(int x = 0; x < array.length; x++) if(x!=0) result.add(array[x] * array [x-1]);\n  result = (result..sort()).reversed.toList();\n  return result[0];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75093,"user_id":null,"body":"int adjacentElementsProduct(array) {\n  int maxResult = array[0] * array[1];\n  array.reduce((int a, int b) {\n    int multiply = a * b;\n    if (multiply > maxResult) {\n      maxResult = multiply;\n    } \n    return b;\n  });\n  return maxResult;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75094,"user_id":null,"body":"int adjacentElementsProduct(array) {\n  int max = array[0] * array[1];\n  for(int i = 1; i < array.length - 1; ++i) {\n    if (array[i] * array[i+1] > max) {\n      max = array[i] * array[i+1];\n    }\n  }\n  return max;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75095,"user_id":null,"body":"int adjacentElementsProduct(List<int> arr) {\n  int result = arr[0] * arr[1];\n  for (int i = 1; i < arr.length - 1; i++) {\n    int mult = arr[i] * arr[i + 1];\n    result = mult > result ? mult : result;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75096,"user_id":null,"body":"int adjacentElementsProduct(array) {\n  List<int> products = [];\n  \n  for (int i = 0; i < array.length - 1; i++) {\n    products.add(array[i] * array[i + 1]);\n  }\n  \n  products.sort();\n  \n  return products.last;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75097,"user_id":null,"body":"int adjacentElementsProduct(array) {\n  List temp = [];\n  for (int i = 0; i < array.length - 1; i++) {\n    temp.add(array[i] * array[i + 1]);\n  }\n  temp.sort((a, b) => b.compareTo(a));\n  return temp.first;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75098,"user_id":null,"body":"int adjacentElementsProduct(List<int> array) {\n  return array.where((i) => array.indexOf(i) < array.length - 1).map((i) => i * array[array.indexOf(i)+1]).toList().reduce((a, b) => a > b ? a : b);\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a431c0de1ce0ec33a00000c":[{"id":75099,"user_id":null,"body":"List<int> even_numbers(List<int> inputList, int n) {\n  var even_numbersList = inputList.where((num) => num.isEven).toList();\n  return even_numbersList.sublist(even_numbersList.length - n);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75100,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) {\n  return arr.reversed\n    .where((e) => e % 2 == 0)\n    .take(n)\n    .toList()\n    .reversed\n    .toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75101,"user_id":250,"body":"List<int> even_numbers(List<int> arr, int n) {\n  List<int> resp = arr.fold([], (acc, x) {\n    if (x % 2 == 0) { \n      return [x, ...acc].take(n).toList();\n    } else {\n      return acc;\n    }\n  });\n  \n  return resp.reversed.toList();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75102,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) {\n  List<int> result = <int>[];\n  \n  for (int i = arr.length - 1; i >= 0; i--) {\n    if (result.length == n) return result;\n    \n    if (arr[i] % 2 == 0) {\n      result = [arr[i], ...result];\n    } \n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75103,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) {\n  List<int> newArr = [];\n  int check = 0;\n  for(int i = arr.length-1;i>=0;i--){\n    if(newArr.length != n){\n    if(arr[i]%2==0){\n      newArr.add(arr[i]);\n      }\n      check++;\n    }\n  }\n  return List.from(newArr.reversed);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75104,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) {\n  var result = <int>[];\n  for (var i = arr.length - 1, count = 0; i >= 0 && count < n; i--) {\n    if (arr[i] % 2 == 0) {\n      result.add(arr[i]);\n      count ++;\n    }\n  }\n  return result.reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75105,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) {\n  final gettedEvenNumbers = arr.where((number) => number.isEven);\n  return [...gettedEvenNumbers].sublist(gettedEvenNumbers.length - n);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75106,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) {\n var array = arr.where((element) { return element%2==0;}).toList();\n return array.sublist((array.length-n));\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75107,"user_id":null,"body":"import 'dart:math';\n\nList<int> even_numbers(List<int> arr, int n) {\n  final evenArr = arr.where((e) => e % 2 == 0).toList();\n  return evenArr.sublist(max(evenArr.length - n, 0));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75108,"user_id":null,"body":"List<int> even_numbers(List<int> arr, int n) => (List<int>.from(arr)..removeWhere((el) => el.isOdd)).reversed.toList().sublist(0,n).reversed.toList();\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a48948e145c46820b00002f":[{"id":75109,"user_id":168,"body":"int factors(int n) {\n  int p = 2, r = 0;\n  for (int p = 2; p * p <= n; p++) {\n    for (; n % p == 0; n ~\/= p, r++);\n  }\n  return r + (n > 1 ? 1 : 0);\n}\n\nList<List<int>> kprimesStep(int k, int step, int start, int end) {\n  var r = <List<int>>[];\n  for (int i = start; i <= end - step; i++) {\n    if (factors(i) == k && factors(i + step) == k) r.add([i, i + step]);\n  }\n  return r;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75110,"user_id":243,"body":"import 'dart:math';\n\nList<List<int>> kprimesStep(int k, int step, int st, int nd) {\n  final kprimes = List.generate(nd - st + 1, (i) => st+(i)).where((e)=>primeFactors(e).length == k).toList();\n  final List<List<int>> result = [];\n  for (var i = 0; i < kprimes.length; i++){\n    if (kprimes.contains(kprimes[i]+step)){\n      result.add([kprimes[i], kprimes[i]+step]);\n    }\n  }\n  return result;\n}\n\nList<int> primeFactors(int n) {\n  n = n.abs();\n  List<int> r = [];\n  for (int i = 2; i <= sqrt(n); i++) {\n    while (n % i == 0) {\n      r.add(i);\n      n = n ~\/ i;\n    }\n  }\n  if (n > 1) r.add(n);\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75111,"user_id":null,"body":"List<List<int>> kprimesStep(int k, int step, int start, int end) {\n  List<List<int>> res = [];\n  for(int i = start; i <= end - step; i++){\n    if(countPrimes(i, k) == k){\n      if(countPrimes(i+step,k) == k) res.add([i, i + step]);\n    }\n  }\n  return res;\n}\n\nint countPrimes(int num, int stop){\n  var ct = 0;\n  var t = 2;\n  var stnum = num;\n  while(num != 1 ){\n    if(num % t == 0) {\n      num = num ~\/ t;\n      ct++;\n      if(ct > stop) return 0;\n    } else {\n      if(t > stnum~\/stop) return ct++;\n      t == 2 ? t++ : t += 2;\n      }\n    }\n  return ct;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75112,"user_id":null,"body":"import 'dart:math' as math;\n\nList<List<int>> kprimesStep(int k, int step, int start, int end) {\n    final result = <List<int>>[];\n\n    for (var i = math.max(2, start); i <= end - step; ++i) {\n      if (isKPrime(k, i) && isKPrime(k, i + step)) {\n        result.add([i, i + step]);\n      }\n    }\n\n    return result;\n}\n\n  bool isKPrime(int k, int n) {\n    var dividers = 0;\n\n    var m = n;\n    while(m.isEven) {\n      dividers++;\n      if (dividers > k) {\n        return false;\n      }\n      m ~\/= 2;\n    }\n    for (var i = 3; i <= math.sqrt(m); i += 2) {\n      while(m % i == 0) {\n        dividers++;\n        if (dividers > k) {\n          return false;\n        }\n        m ~\/= i;\n      }\n    }\n    if (m > 1) {\n      dividers++;\n    }\n\n    return dividers == k;\n  }\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75113,"user_id":null,"body":"import 'dart:math';\n\nList<List<int>> kprimesStep(int k, int step, int start, int end) {\n  List<int> list = [];\n  for (int i = start; i <= end; i++) {\n    if (findFactor(i, k) == k) {\n      list.add(i);\n    }\n  }\n  return finalAnswer(list, step);\n}\n\nList<List<int>> finalAnswer(list, step) {\n  List<List<int>> answer = [];\n  int len = list.length;\n  int dif;\n  print(list);\n  for (int i = 0; i < len; i++) {\n    for (int x = 1; x <= min(step,len-i-1); x++) {\n      dif = list[i + x] - list[i];\n      \/\/print(\"${list[i + x]}-${list[i]}==${step} dif = ${dif}\");\n      if (dif == step) {\n        answer.add([list[i], list[i + x]]);\n      }\n      if (dif >= step) {\n        \/\/print(' ');\n        break;\n      }\n    }\n  }\n  return answer;\n}\n\nint findFactor(int i, int k) {\n  int factorNum = 0;\n  int upper = sqrt(i).floor();\n  for (int x = 2; x <= upper; x++) {\n    if (i == 1) {\n      break;\n    }\n    while ((i % x == 0) && (factorNum <= k)) {\n      i = i ~\/ x;\n      factorNum += 1;\n      \/\/print(\"i=${i}, x=${x}\");\n    }\n  }\n\n  if (i > 1) {\n    \/\/print(i);\n    factorNum += 1;\n  }\n\n  if (factorNum > k) {\n    return 0;\n  }\n  return factorNum;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75114,"user_id":null,"body":"List<List<int>> kprimesStep(int k, int step, int start, int end) {\n  List<List<int>> retValue = [];\n  List<int> kPrimeList = [];\n  var i =start;\n  while (i <= end) {\n    if (isKPrime(i, k)) {\n      if (kPrimeList.contains(i - step)) retValue.add([i - step, i]);\n      kPrimeList.add(i);\n    }\n\n    i++;\n  }\n  return retValue;\n}\n\nbool isKPrime(int n, int k) {\n  int j = 2;\n  int count = 0;\n  while (j*j <= n) {\n    if (count > k) return false;\n    while (n % j == 0) {\n      count++;\n      if (count > k) return false;\n      n = n ~\/ j;\n    }\n    if (j == 2)\n      j++;\n    else\n      j = j + 2;\n  }\n  if (n > 1) count++;\n\n  return (count == k);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75115,"user_id":null,"body":"List<List<int>> kprimesStep(int k, int step, int start, int end) {\n  List<int> kPrimes = [];\n  List<List<int>> kPrimesStep = [];\n  \n  for (int i = start; i <= end; i++) {\n    if (getPrimeFactorLength(i) == k) {\n      kPrimes.add(i);\n    }\n  }\n  \n  for (int i = 0; i <= (kPrimes.length - 2); i++) {\n    int j = i + 1;\n    \n    while (j <= (kPrimes.length - 1)) {\n      if (kPrimes[j] - kPrimes[i] >= step) {\n        if (kPrimes[j] - kPrimes[i] == step) {\n          kPrimesStep.add([kPrimes[i], kPrimes[j]]);\n        }\n        break;\n      }\n      j++;\n    }\n  } \n  \n  return kPrimesStep;\n}\n\nint getPrimeFactorLength(int no) {\n  int i = 2;\n  List<int> primeFactors = <int>[];\n  \n  while (i * i <= no) {\n    if (no % i == 0) {\n      primeFactors.add(i);\n      no =  (no \/ i).floor();\n    } else {\n      i++;\n    }\n  }\n  \n  if (no > 1) {\n    primeFactors.add(i);\n  }\n  \n  return primeFactors.length;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75116,"user_id":null,"body":"import 'dart:math';\nList<List<int>> kprimesStep(int k, int step, int start, int end) {\n  var resultList = <List<int>>[];\n  \/\/get kprime list\n  var kprimeList = countKprimes(k, start, end);\n  for (var i = 0; i < kprimeList.length; i++){\n    var kprime1 = kprimeList[i];\n    for(var j = i - 1; j >= 0; j--){\n      var kprime2 = kprimeList[j];\n      var diff = kprime1 - kprime2;\n      if(diff > step) break;\n      if(kprime1 - kprime2 == step){\n        resultList.add([kprime2, kprime1]);\n      }\n    }\n  }\n  return resultList;\n}\n\nList<int> countKprimes(int k, int start, int end) {\n  var primeList = getPrimes(end);\n  var resultList = <int>[];\n  for (var i = start; i <= end; i++) {\n    var num = i;\n    var j = 0;\n    var cnt = 0;\n    while (j < primeList.length) {\n      if (num == 1) break;\n      if (num % primeList[j] == 0) {\n        num ~\/= primeList[j];\n        cnt++;\n        continue;\n      }\n      j++;\n    }\n\n    if (cnt == k) {\n      resultList.add(i);\n    }\n  }\n  return resultList;\n}\n\nList<int> getPrimes(int limit) {\n  var primeList = <int>[2];\n  var i = 3;\n  while (i <= limit) {\n    var max = sqrt(i).toInt();\n    for (var prime in primeList) {\n      if (i % prime == 0) {\n        break;\n      }\n      if (max < prime) {\n        primeList.add(i);\n        break;\n      }\n    }\n    i++;\n  }\n  return primeList;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75117,"user_id":53,"body":"List<List<int>> kprimesStep(int k, int step, int start, int nd) \n{\n  var arr = new List<List<int>>();\n  var i = start;\n  while (i <= nd - step)\n  {\n      if (primeFactorCount(i) == k && primeFactorCount(i + step) == k)\n      {\n          var pair = new List<int>();\n          arr.add(pair);\n          pair.add(i);\n          pair.add(i + step);\n      }\n      i = i + 1;\n  }\n  return arr;\n}\n\nint primeFactorCount(int n) {\n    var len = 0;\n    var i = 2;\n    while (i * i <= n) \n    {\n        while (n % i == 0) {\n            len = len + 1;\n            n = (n \/ i).round();\n        }\n        i = i + 1;\n    }\n    if (n > 1) \n    {\n        len = len + 1;\n    }\n    return len;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75118,"user_id":492,"body":"import 'dart:math' as math;\n\nint primeFactors(int n) {\n    List<int> factors = new List();\n    for (int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.add(i);\n            n ~\/= i;\n        }\n    }\n    if (n > 1) factors.add(n);\n    return factors.length;\n}\nList<List<int>> kprimesStep(int k, int step, int start, int end) {\n    List<List<int>>  res = new List<List<int>>();\n    int i = start;\n    while (i <= end-step) {\n        if ((primeFactors(i) == k && primeFactors(i + step) == k)) {\n            List<int> p = [i, i + step];\n            res.add(p);\n        }\n        i++;\n    }\n    return res;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a4d303f880385399b000001":[{"id":75119,"user_id":null,"body":"String strong(n) {\n  final sum = n.toString().split('').map((num) => factorial(int.parse(num))).fold(0, (a, b) => a + b);\n  return n == sum ? \"STRONG!!!!\" : \"Not Strong !!\";\n}\n\nint factorial(int n) => n == 0 ? 1 : n * factorial(n - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75120,"user_id":null,"body":"String strong(n) {\n  List<int> characters = n.toString().split('').map((i) => int.parse(i)).toList();\n  if(n == characters.fold(0, (p, e) => p + f(e))) return 'STRONG!!!!';\n  return 'Not Strong !!';\n}\n\nf(i) => (i == 0) ? 1 : i * f(i - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75121,"user_id":null,"body":"String strong(int n) { \n  final num = n.toString().split('').map((digit) => int.parse(digit).factorial())\n      .reduce((prev, current) => prev + current);\n  \n  return num == n ? 'STRONG!!!!' : 'Not Strong !!';\n}\n\nextension IntTool on int {\n  int factorial() {\n    if (this == 0) return 1;\n    \n    var result = 1;\n    \n    for (int i = 2; i <= this; i++) {\n      result *= i;\n    }\n    \n    return result;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75122,"user_id":53,"body":"int f(int n) {\n  return n<=1 ? 1 : n*f(n-1);\n}\nString strong(int n) {\n  int s = n.toString().split('').map(int.parse).fold(0, (t, e) => t + f(e));\n  return s == n ? \"STRONG!!!!\" : \"Not Strong !!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75123,"user_id":null,"body":"String strong(p) {\n  int a=0;\n  String n = p.toString();\n for (int i = 0; i < n.length; i++) {\n    int s = factorial(int.parse(n[i]));\n    a=a+s;\n  }\n  if(a == int.parse(n)){\n    return \"STRONG!!!!\";\n  }\n  else{\n    return \"Not Strong !!\";\n  }\n}\n\nint factorial(int f) {\n  int y = 1;\n  for (int x = 1; x < f + 1; x++) {\n    y = y * x;\n  }\n  return y;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75124,"user_id":null,"body":"String strong(int n) {\n  int sum = 0, m = n;\n  while (m > 0) {\n    sum += factorial(m % 10);\n    m ~\/= 10;\n  }\n  return (sum == n) ? 'STRONG!!!!' : 'Not Strong !!';\n}\n\nint factorial(n) {\n  int result = 1;\n  while(n > 0) result *= n--;\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75125,"user_id":645,"body":"String strong(n) {\n  return n.toString().split('').map((d) => List.generate(int.parse(d), (i) => i + 1).fold(1, (a, b) => a * b)).reduce((a, b) => a + b) == n ? 'STRONG!!!!' : 'Not Strong !!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75126,"user_id":null,"body":"String strong(int n) {\n\n  int fact(int x) => List.generate(x == 0 ? x + 1 : x, (ind) => ind + 1)\n      .reduce((a, b) => a * b);\n  var str = n.toString().split('').map((st) => fact(int.parse(st))).toList();\n\n  return str.reduce((x, y) => x + y) == n ? 'STRONG!!!!' : \"Not Strong !!\";\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75127,"user_id":null,"body":"String strong(n) {\n  int num = 0;\n  int fac = 1;\n  String ans = '';\n  List<String> list = n.toString().split('');\n  \n  if (n == 1 || n == 2) {\n    return \"STRONG!!!!\";\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    for (var j = 1; j <= int.parse(list[i]); j++) {\n      fac = fac * j;\n    }\n\n    num = num + fac;\n    \n    fac = 1;\n  }\n\n  num == n ? ans = \"STRONG!!!!\" : ans = \"Not Strong !!\";\n\n  return ans;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75128,"user_id":null,"body":"int f(int n) => (n <= 1) ? 1 : n * f(n - 1);\n\nString strong(n) {\n  int nn = n;\n  while (nn > 0) {\n    n -= f(nn % 10);\n    nn ~\/= 10;\n  }\n  return (n == 0) ? \"STRONG!!!!\" : \"Not Strong !!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a4e3782880385ba68000018":[{"id":75129,"user_id":645,"body":"String balanced_num(numb) {\n  List<int> s = numb.toString().split(\"\").map((c) => c.codeUnitAt(0) - \"0\".codeUnitAt(0)).toList();\n  int len = (s.length \/ 2).floor() - (s.length % 2 == 1 ? 0 : 1);\n  return s.sublist(0, len).fold(0, (acc, item) => acc + item) == s.sublist(s.length - len).fold(0, (acc, item) => acc + item) ? \"Balanced\" : \"Not Balanced\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75130,"user_id":null,"body":"String balanced_num(numb) {\n  \/\/ Sorry for this code) But I undestend it\n  \n  var numbStr = numb.toString(); \/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0443, \u0449\u043e \u043c\u0430\u0442\u0438 \u0434\u043e\u0441\u0442\u0443\u043f \u0434\u043e \u043a\u043e\u0436\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e \u0456\u043d\u0434\u0435\u043a\u0441\u0443\n  \n  if(numb.toString().length % 2 == 1){ \/\/\u042f\u043a\u0449\u043e \u0447\u0438\u0441\u043b\u043e \u043c\u0430\u0454 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u0438\u0439 \u0435\u043b\u0435\u043c\u0435\u043d\u0442\n   var _result1 = 0;\n   var _result2 = 0;\n   for(var i = 0; i < (numbStr.length \/ 2).floor(); i++){ \/\/\u041f\u0435\u0440\u0448\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0447\u0438\u0441\u043b\u0430, \u0434\u043e \u0446\u0435\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n    _result1 += int.parse(numbStr[i]); \/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0447\u0438\u0441\u043b\u043e \u0449\u043e \u0434\u0430\u043b\u0456 \u0437\u0440\u0456\u0432\u043d\u044e\u0432\u0430\u0442\u0438 \u0447\u0438 \u0440\u0456\u0432\u043d\u0456 \u0434\u0432\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438\n   } \n   for(var j = (numbStr.length \/ 2).round(); j < numbStr.length; j++){ \/\/\u0414\u0440\u0443\u0433\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0447\u0438\u0441\u043b\u0430, \u043f\u0456\u0441\u043b\u044f \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n    _result2 += int.parse(numbStr[j]); \/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0447\u0438\u0441\u043b\u043e \u0449\u043e \u0434\u0430\u043b\u0456 \u0437\u0440\u0456\u0432\u043d\u044e\u0432\u0430\u0442\u0438 \u0447\u0438 \u0440\u0456\u0432\u043d\u0456 \u0434\u0432\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438\n   }\n    if(_result1 == _result2) return 'Balanced';\n    else return 'Not Balanced';\n  }\n  \n  else{ \/\/\u042f\u043a\u0449\u043e \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u043c\u0430\u0454 \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0435\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    var _result1 = 0;\n    var _result2 = 0;\n    for(var i = 0; i < (numbStr.length \/ 2) - 1; i++){ \/\/\u041f\u0435\u0440\u0448\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0447\u0438\u0441\u043b\u0430, \u0434\u043e \u0446\u0435\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n    _result1 += int.parse(numbStr[i]); \/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0447\u0438\u0441\u043b\u043e \u0449\u043e \u0434\u0430\u043b\u0456 \u0437\u0440\u0456\u0432\u043d\u044e\u0432\u0430\u0442\u0438 \u0447\u0438 \u0440\u0456\u0432\u043d\u0456 \u0434\u0432\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438\n   }\n    for(var j = ((numbStr.length \/ 2) + 1).toInt(); j < numbStr.length; j++){ \/\/\u0414\u0440\u0443\u0433\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0447\u0438\u0441\u043b\u0430, \u043f\u0456\u0441\u043b\u044f \u0446\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\n    _result2 += int.parse(numbStr[j]); \/\/\u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0447\u0438\u0441\u043b\u043e \u0449\u043e \u0434\u0430\u043b\u0456 \u0437\u0440\u0456\u0432\u043d\u044e\u0432\u0430\u0442\u0438 \u0447\u0438 \u0440\u0456\u0432\u043d\u0456 \u0434\u0432\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0438\n   }\n    if(_result1 == _result2) return 'Balanced';\n    else return 'Not Balanced';\n  }\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75131,"user_id":null,"body":"String balanced_num(numb) {\n List<int> rests = [];\n  int result = numb;\n  \n  do {\n    int rest = result % 10;\n    result = result ~\/ 10;\n    rests.add(rest);\n  } while (result != 0);\n  \n  \n  int leftSum = 0;\n  int rightSum = 0;\n  \n  for (int i = 0; i < (rests.length - 1) ~\/ 2; i++) {\n    int right = rests[i];\n    int left = rests[rests.length - 1 - i];\n\n    leftSum += left;\n    rightSum += right;\n  }\n  \n  return leftSum == rightSum ? 'Balanced' : 'Not Balanced';\n  \n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75132,"user_id":null,"body":"String balanced_num(numb) {\n  \/\/ your code here\n  var val = numb.toString();\n  var halfSize = (val.length\/2).floor();\n  var cal = val.length%2 == 0 ? halfSize -1 : halfSize;\n  var cal1 = val.length - cal;\n  int sum1 =0;\n  int sum2 =0;\n  \n  for(int i=0; i<val.length; i++) {\n    \n\n    if(i<cal) {\n      \n      sum1 += int.parse(val[i]);\n      \n    } else if(i >= cal1) {\n      sum2 += int.parse(val[i]);\n\n    }\n  }\n  \n  return sum1 == sum2 ? \"Balanced\" : \"Not Balanced\";\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75133,"user_id":759,"body":"int s(List<int> li, int a, int b) => li.sublist(a, b).fold(0, (x, y) => x + y);\n\nString balanced_num(numb) {\n  final li = numb.toString().codeUnits.map((a) => a - 48).toList(), le = li.length;\n  return s(li, 0, (le + 1) ~\/ 2 - 1) == s(li, le ~\/ 2 + 1, le) ? \"Balanced\" : \"Not Balanced\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75134,"user_id":null,"body":"Iterable<int> digits(int n) sync* {\n  while (n > 0){\n    yield n % 10;\n    n = n ~\/ 10;\n  }\n}\n\nString balanced_num(int numb) {\n  var d = digits(numb).toList();\n  var t = (d.length - 1) ~\/ 2 ;\n  \n  if (t == 0)\n    return 'Balanced';\n  \n  return d.take(t).reduce((x,y) => x + y) == d.reversed.take(t).reduce((x, y) => x + y) ?\n    \"Balanced\":\n    \"Not Balanced\";\n    \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75135,"user_id":null,"body":"String balanced_num(int numb) {\n  \/\/ convert input to String\n  String n = numb.toString();\n  \n  \/\/ get out early if length is too short to matter\n  if (n.length < 3) return \"Balanced\";\n  \n  \/\/ initialize left and right sums for comparison\n  int leftSum = 0;\n  int rightSum = 0;\n  \n  \/\/ calculate each side by moving toward the middle digit(s)\n  int iLeft = 0;\n  int iRight = n.length - 1;\n  while (iLeft < iRight) {\n    leftSum += int.parse(n[iLeft]);\n    rightSum += int.parse(n[iRight]);\n    iLeft++;\n    iRight--;\n    \/\/ skip middle digits for even-length inputs\n    if (iLeft == iRight - 1) break;\n  }\n  \n  \/\/ compare each side and return result\n  return leftSum == rightSum\n    ? \"Balanced\"\n    : \"Not Balanced\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75136,"user_id":null,"body":"String balanced_num(numb) {\n  final s = numb.toString().split('').map(int.parse).toList();\n  final len = (s.length ~\/ 2) - (s.length % 2 == 1 ? 0 : 1);\n  return s.sublist(0, len).fold(0, (acc, item) => acc + item) ==\n          s.sublist(s.length - len).fold(0, (acc, item) => acc + item)\n      ? 'Balanced'\n      : 'Not Balanced';\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75137,"user_id":null,"body":"import 'dart:math';\n\nString balanced_num(int numb) {\n  final numList = numb.toString().split('');\n  \n  final leftSum = numList.take(max(0, (numList.length - 1) ~\/ 2))\n    .fold(0, (int sum, s) => sum + int.parse(s));\n  \n  final rightSum = numList.reversed\n    .take(max(0, (numList.length - 1) ~\/ 2))\n    .fold(0, (int sum, s) => sum + int.parse(s));\n  \n  return leftSum == rightSum ? 'Balanced' : 'Not Balanced';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75138,"user_id":null,"body":"import 'dart:math';\n\nString balanced_num(int numb) {\n  return 0 ==\n          ((int l) => [\n                    (numb \/ pow(10, (l \/ 2).ceil() + (l.isEven ? 1 : 0)))\n                        .floor(),\n                    (numb % pow(10, (l \/ 2).ceil() - 1))\n                  ])((log(numb + 0.5) \/ ln10).ceil())\n              .map((n) => [\n                    for (var i = (log(n + 0.5) \/ ln10).ceil() - 1; i >= 0; i--)\n                      (n \/ pow(10, i)).floor() % 10\n                  ].fold(0, (int x, int y) => x + y))\n              .reduce((x, y) => x ^ y)\n      ? 'Balanced'\n      : 'Not Balanced';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a4ea304b3bfa89a9900008e":[{"id":75139,"user_id":null,"body":"int max_number(n) {\n  return int.parse((n.toString().split('')..sort()).reversed.toList().join(''));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75140,"user_id":null,"body":"int max_number(n) {\nList numero = n.toString().split('');\n  numero.sort();\n  var reversed = numero.reversed.join();\n  int numberReversed = int.parse(reversed);\n  return numberReversed;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75141,"user_id":null,"body":"int max_number(n) {\n  \/\/ your code here\n  \n  List num = n.toString().split('');\n  num.sort();\n  return int.parse(num.reversed.join(''));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75142,"user_id":null,"body":"int max_number(n) => int.parse((n.toString().split('')..sort()).toList().reversed.join());","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75143,"user_id":null,"body":"max_number(n) => int.parse((n.toString().split('').map(int.parse).toList()..sort((a,b)=>b-a)).join());\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75144,"user_id":null,"body":"int max_number(n) {\n  var count = 0;\n  var list = <String>[];\n  var endList = <String>[];\n  var b = n.toString();\n  var d = '';\n  \/\/ ignore: avoid_single_cascade_in_expression_statements\n  b\n    ..runes.forEach((int rune) {\n      var character = String.fromCharCode(rune);\n      list.add(character);\n    });\n\n  while (list.isNotEmpty) {\n    for (var i = 0; i < list.length; i++) {\n      print('1ci i $i');\n      for (var j = 0; j < list.length; j++) {\n        if (int.parse(list[i]) >= int.parse(list[j])) {\n          count++;\n        }\n      }\n\n      if (count == list.length) {\n        endList.add(list[i]);\n        print(endList);\n        print(i);\n        list.removeAt(i);\n        print(list);\n        \/\/\n\n      }\n      count = 0;\n    }\n  }\n  endList.forEach((element) {\n    d += element;\n  });\n  print(d);\n  return int.parse(d);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75145,"user_id":null,"body":"int max_number(n) {\n  \/\/ your code here\n  List arr = n.toString().split('')..sort();\n  return int.parse(arr.reversed.join(''));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75146,"user_id":null,"body":"int max_number(n) {\n  List<String> digits = n.toString().split(\"\");\n  digits.sort((a,b) => b.compareTo(a));\n  return int.parse(digits.join(\"\"));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75147,"user_id":null,"body":"int max_number(int n) => int.parse((n.toString().split('')..sort()).reversed.join());","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75148,"user_id":null,"body":"int max_number(n) {\n   var newN =n.toString().split(\"\");\n  newN.sort((a, b) => b.compareTo(a));\n  return int.parse(newN.join(\"\"));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a5032f4fd56cb958e00007a":[{"id":75149,"user_id":null,"body":"const keyboard = [\n  ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n  ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n  ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n  ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n  ['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n];\n\nint tv_remote(String word) {\n  int lastX = 0;\n  int lastY = 0;\n  int count_press(String char) {\n    final int y = keyboard.indexWhere((Iterable<String> row) => row.contains(char));\n    final int x = keyboard[y].indexOf(char);\n\n    final int press = (lastX - x).abs() + (lastY - y).abs();\n    \n    lastY = y;\n    lastX = x;\n\n    return press;\n  }\n\n  return word.runes\n    .map((int charCode) => count_press(String.fromCharCode(charCode)) + 1)\n    .fold(0, (int sum, int count) => sum + count);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75150,"user_id":null,"body":"int tv_remote(String s) {\n  int n = 0;\n  int x = 0;\n  int y = 0;\n  for (var c in s.split('')) {\n    var p = 'abcde123fghij456klmno789pqrst.@0uvwxyz_\/'.indexOf(c);\n    var px = p % 8;\n    var py = p ~\/ 8;\n    n += 1 + (px - x).abs() + (py - y).abs();\n    x = px;\n    y = py;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75151,"user_id":250,"body":"int tv_remote(String word) {\n  String keyboard = \"abcde123fghij456klmno789pqrst.@0uvwxyz_\/\";\n  Map<String, List<int>> keys = {};\n  \n  for (int i = 0; i < keyboard.length; i++) {\n    int x = i % 8;\n    int y = i ~\/ 8;\n    \n    keys[keyboard[i]] = [x,y];\n  }\n  \n  int sum = 0;\n  List<int> prev = [0,0];\n  for (int i = 0; i < word.length; i++) {\n    String c = word[i];\n    List<int> pos = keys[c]!;\n    int d = (prev[0]-pos[0]).abs() + (prev[1]-pos[1]).abs();\n    prev = pos;\n    sum += d + 1;\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75152,"user_id":null,"body":"int tv_remote(String word) {\n  var keyPresses = 0;\n  var currentLocation = [0, 0];\n  final wordList = word.split('');\n  var keyboardLayoutMatrix = const [\n    ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n    ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n    ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n    ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n    ['u', 'v', 'w', 'x', 'y', 'z', '_', '\/']\n  ];\n  for (var i = 0; i < wordList.length; i++) {\n    for (var row = 0; row < keyboardLayoutMatrix.length; row++) {\n      for (var col = 0; col < keyboardLayoutMatrix[row].length; col++) {\n        if (wordList[i] == keyboardLayoutMatrix[row][col]) {\n          var verticalMoves = (row - currentLocation[0]).abs();\n          var horizontalMoves = (col - currentLocation[1]).abs();\n          keyPresses += verticalMoves + horizontalMoves + 1;\n          currentLocation = [row, col];\n        }\n      }\n    }\n  }\n  return keyPresses;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75153,"user_id":null,"body":"int tv_remote(String word) {\n   const virtualKeyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_\/';\n\n    var count = 0;\n    var prevX = 0;\n    var prevY = 0;\n    for (final sym in word.split('')) {\n      final index = virtualKeyboard.indexOf(sym);\n      final x = index % 8;\n      final y = index ~\/ 8;\n      count += (x - prevX).abs() + (y - prevY).abs() + 1;\n      prevX = x;\n      prevY = y;\n    }\n\n    return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75154,"user_id":null,"body":"int tv_remote(String word) {\n  \n  List<String> keyboard = [\"a\",\"b\",\"c\",\"d\",\"e\",\"1\",\"2\",\"3\",\"f\",\"g\",\"h\",\"i\",\"j\",\"4\",\"5\",\"6\",\"k\",\"l\",\"m\",\"n\",\"o\",\"7\",\"8\",\"9\",\"p\",\"q\",\"r\",\"s\",\"t\",\".\",\"@\",\"0\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"_\",\"\/\"];\n  String last = \"a\";\n  int sum = 0;\n  for (var char in word.split(\"\")) {\n    int indexOfLast = keyboard.indexOf(last);\n    int indexOfChar = keyboard.indexOf(char);\n    sum += (indexOfLast % 8 - indexOfChar%8).abs() + (indexOfLast ~\/8 - indexOfChar ~\/8).abs() + 1;\n    last = char;\n  }\n\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75155,"user_id":null,"body":"int tv_remote(String word) {\n  const String line = 'abcde123fghij456klmno789pqrst.@0uvwxyz_\/';\n  \n  return word.split('').fold([0, 0, 0], (List<int> sumXY, w) {\n    int x = line.indexOf(w) ~\/ 8;\n    int y = line.indexOf(w) % 8;\n    return [1 + sumXY[0] + (sumXY[1] - x).abs() + (sumXY[2] - y).abs(), x, y];\n  })[0];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75156,"user_id":168,"body":"const keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_\/'];\n\nint tv_remote(String word) {\n  int res = 0, i = 0, j = 0;\n  for (var x in word.split('')) {\n    int r = keyboard.indexWhere((w) => w.contains(x));\n    int c = keyboard[r].indexOf(x);\n    res += (r - i).abs() + (c - j).abs() + 1;\n    i = r;\n    j = c;\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75157,"user_id":null,"body":"List<String> remote = [\n  'a', 'b', 'c', 'd', 'e', '1', '2', '3',\n  'f', 'g', 'h', 'i', 'j', '4', '5', '6',\n  'k', 'l', 'm', 'n', 'o', '7', '8', '9',\n  'p', 'q', 'r', 's', 't', '.', '@', '0',\n  'u', 'v', 'w', 'x', 'y', 'z', '_', '\/',\n];\n\nint tv_remote(String word) {\n  if (word.length == 0) {\n    return 0;\n  }\n  List<String> letters = word.split('');\n  \n  int initialLetter = remote.indexOf(letters[0]);\n  \n  int count = initialLetter % 8  + (initialLetter \/ 8).toInt() + 1;\n  \n  for (int i = 0; i < letters.length - 1; i++) {\n    int prev = remote.indexOf(letters[i]);\n    int next = remote.indexOf(letters[i + 1]);\n    \n    int x = (next % 8 - prev % 8).abs();\n    int y = ((next \/ 8).toInt() - (prev \/ 8).toInt()).abs();\n\n    count += x + y + 1;\n  }\n  \n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75158,"user_id":null,"body":"int tv_remote(String word) {\n  List<String> keyboard = ['afkpu', 'bglqv', 'chmrw', 'dinsx', 'ejoty', '147.z', '258@_', '3690\/'];\n  int x1 = 0, x2 = 0, y1 = 0, y2 = 0, xx = 0, yy = 0, count = 0;\n  for (String char in word.split('')) {\n    for (String key in keyboard) {\n      if (key.contains(char)) {\n        x1 = keyboard.indexOf(key);\n        y1 = key.indexOf(char);\n        xx = (x1 - x2).abs();\n        yy = (y1 - y2).abs();\n        x2 = x1;\n        y2 = y1;\n        break;\n      }\n    }\n    count += xx + yy + 1;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a512f6a80eba857280000fc":[{"id":75159,"user_id":null,"body":"int nth_smallest(arr, pos) => (arr..sort())[pos-1];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75160,"user_id":null,"body":"int nth_smallest(arr, pos) {\n  arr.sort();\n  return arr[--pos];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75161,"user_id":null,"body":"int nth_smallest(arr, pos) {\n  arr.sort();\n  print(arr);\n  return arr[pos-1];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75162,"user_id":null,"body":"int nth_smallest(arr, pos) {\n  for (var i = 0; i < pos; i++) {\n    for (var j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] < arr[j+1]) {\n        var temp = arr[j];\n        arr[j] = arr[j+1];\n        arr[j+1] = temp;\n      }\n    }\n  }\n  return arr[arr.length-pos];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75163,"user_id":null,"body":"int nth_smallest(arr, pos) => (arr..sort())[--pos];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75164,"user_id":null,"body":"int nth_smallest(List<int> arr, pos) => (arr..sort())[pos-1];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75165,"user_id":null,"body":"int nth_smallest(List arr, int pos)\n{\n  arr.sort();\n  return arr[pos-1];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75166,"user_id":null,"body":"int nth_smallest(List<int> arr, int pos) {\n  arr.sort();\n  return arr.take(pos).last;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75167,"user_id":null,"body":"int nth_smallest(arr, pos) {\n  var sortedArr = arr..sort();\n  return sortedArr[pos - 1];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75168,"user_id":null,"body":"int nth_smallest(arr, pos) {\n  arr..sort();\n  return arr[pos-1]; \n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a523566b3bfa84c2e00010b":[{"id":75169,"user_id":null,"body":"int min_sum(arr) {\n  \/\/ your code here\n  arr.sort();\n  int totalSum =0;\n  for(int i=0; i<arr.length\/2; i++){\n    totalSum += arr[i]*arr[arr.length-1-i];\n  }\n  return totalSum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75170,"user_id":759,"body":"int min_sumSorted(arr) => arr.isEmpty ? 0 : arr[0] * arr[arr.length - 1] + min_sumSorted(arr.sublist(1, arr.length - 1));\n\nint min_sum(arr) {\n  arr.sort();\n  return min_sumSorted(arr);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75171,"user_id":null,"body":"int min_sum(List<int> arr) {\n  arr.sort();\n  var sum = 0;\n  for (var left = 0, right = arr.length - 1;\n      left < arr.length \/ 2;\n      left++, right--) {\n    sum += arr[left] * arr[right];\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75172,"user_id":null,"body":"int min_sum(List<int> arr) {\n  arr.sort();\n  int res = 0;\n  final first = arr.sublist(0, arr.length ~\/ 2);\n  final second = arr.sublist(arr.length ~\/ 2);\n  \/\/ print('arr first $first');\n  \/\/ print('arr second ${second.reversed}');\n  int temp = 0;\n  for (var i = 0; i < first.length; i++) {\n    temp = first[i] * second.reversed.toList()[i];\n    \/\/ print(temp);\n    res = res + temp;\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75173,"user_id":null,"body":"int min_sum(arr) {\n  arr.sort();\n  List<int> products = [];\n  int iLeft = 0;\n  int iRight = arr.length - 1;\n  while (iLeft < iRight) {\n    products.add(arr[iLeft] * arr[iRight]);\n    iLeft++;\n    iRight--;\n  }\n  return products.reduce((v,e) => v + e);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75174,"user_id":null,"body":"import 'dart:math';\n\nint min_sum(arr) {\n  num minsum = 0;\n  arr.sort();\n  var rev = List.from(arr.reversed);\n  print(arr);\n  print(rev[0]);\n  \n  for(int i = 0;i<arr.length\/2;i++){\n    minsum += arr[i]*rev[i];\n  }\n  \n  return minsum.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75175,"user_id":null,"body":"int min_sum(List<int> arr){\n  arr.sort();\n  var leng = arr.length;\n  var end = leng \/ 2;\n  var result = 0;\n  for(int i = 0; i< end; i++){\n    result += arr[i]*arr[leng - i - 1];\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75176,"user_id":null,"body":"int min_sum(n) => (n..sort()).length != 2 ? n[0] * n[n.length-1] + min_sum(n.getRange(1,n.length-1).toList()): n[0] * n[n.length-1];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75177,"user_id":759,"body":"int min_sumSorted(arr) => arr.isEmpty ? 0 : arr[0] * arr[arr.length - 1] + min_sumSorted(arr.sublist(1, arr.length - 1));\n\nint min_sum(arr) => min_sumSorted(arr..sort());","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75178,"user_id":null,"body":"int min_sum(arr) {\n  arr = (arr..sort()).reversed.toList();\n  int result = 0;\n  for(int x = 0; x < arr.length\/2; x++){\n    result += arr[x]*arr[arr.length-x-1];\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a53a17bfd56cb9c14000003":[{"id":75179,"user_id":null,"body":"import 'dart:math';\n\nString disarium_number(n) {\n  String sN = n.toString();\n  int sum = 0;\n  for(int i = 0; i < sN.length; ++i){\n    sum += pow(int.parse(sN[i]), i+1);\n  }\n  return (sum == n) ? \"Disarium !!\" : \"Not !!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75180,"user_id":null,"body":"import 'dart:math' as math;\nString disarium_number(n) =>des(n, n.toString().length) == n ? 'Disarium !!':'Not !!';\nint des(int n, int p)=> (n~\/10)>0?des(n~\/10,p-1) + math.pow((n%10),p):math.pow((n%10),p);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75181,"user_id":null,"body":"import 'dart:math';\n\nString disarium_number(int n) {\n  String solution1(int n) {\n    String s = \"$n\";\n    int count = 0;\n    for (int i = 0; i < s.length; ++i) {\n      count += pow(int.parse(s[i]), i + 1).toInt();\n    }\n    return count != n ? 'Not !!' : 'Disarium !!';\n  }\n\n  String solution2(int n) {\n    int nn = n;\n    int count = 0;\n    int i = n.toString().length;\n    while (nn != 0) {\n      count += pow((nn.remainder(10)), i).toInt();\n      nn ~\/= 10;\n      i--;\n    }\n    return count != n ? 'Not !!' : 'Disarium !!';\n  }\n\n  String solution3(int n) {\n    String s = n.toString();\n    List<String> ss = s.split('');\n    int c = ss\n        .asMap()\n        .map((i, v) => MapEntry(i, pow(int.parse(v), i + 1)))\n        .values\n        .reduce((p, e) => int.parse(p.toString()) + int.parse(e.toString()))\n        .toInt();\n    return c != n ? 'Not !!' : 'Disarium !!';\n  }\n\n  Random r = Random(3);\n\n  return [solution1(n), solution2(n), solution3(n)][r.nextInt(3)];\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75182,"user_id":250,"body":"import \"dart:math\";\n\nString disarium_number(int n) {\n  String sn = \"${n}\";\n  int s = 0;\n  \n  for (int i = 0; i < sn.length; i++) {\n    s = s + pow(int.parse(sn[i]),i+1).floor();\n  }\n  \n  return s == n ? \"Disarium !!\" : \"Not !!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75183,"user_id":null,"body":"\nString disarium_number(int n) {\n  \/\/ your code here\n  final List<int> _listN = '$n'.split('').map(int.parse).toList();\n  int _di = 0;\n  for (int i = 0; i < _listN.length; i++) {\n    _di += power(_listN[i], i + 1);\n  }\n  return _di == n ? 'Disarium !!' : 'Not !!';\n}\n\nint power(int x, int n) {\n  int retval = 1;\n  for (int i = 0; i < n; i++) {\n    retval *= x;\n  }\n\n  return retval;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75184,"user_id":null,"body":"import 'dart:math';\nString disarium_number(num) {\n  int result = 0;\n  String myString = num.toString();\n  for (int i = 0; i < myString.length; i++) {\n    result += pow(int.parse(myString[i]), i+1);\n  }\n  if (result == num) {\n    return 'Disarium !!';\n  }\n  \n  return \"Not !!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75185,"user_id":null,"body":"import 'dart:math';\nString disarium_number(int n) {\n  int l = n.toString().length, sum = 0, m = n;\n  while (m > 0) {\n    sum += pow(m % 10, l--);\n    m ~\/= 10;\n  }\n  return (n == sum) ? 'Disarium !!' : 'Not !!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75186,"user_id":null,"body":"import 'dart:math' as math;\n\nString disarium_number(n) {\n  final digits = '$n'.split('');\n  \n  var sum = 0;\n  for (var i = 0; i < digits.length; i++) {\n    sum += math.pow(int.tryParse(digits[i]), i+1);\n  }\n  \n  return sum == n ? 'Disarium !!' : 'Not !!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75187,"user_id":null,"body":"import 'dart:math' as math;\n\nString disarium_number(n)=> \nn == n.toString().split('').asMap().map((i, el)=> MapEntry(i, math.pow(int.parse(el), i + 1))).values.reduce((v, el)=>v + el) ?\n\"Disarium !!\" : \"Not !!\";\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75188,"user_id":645,"body":"import \"dart:math\";\n\nString disarium_number(n) {\n  List<String> split = n.toString().split('');\n  List<int> newarr = [];\n  for (int i = 0; i < split.length; i++) {\n    newarr.add(pow(int.parse(split[i]), i + 1));\n  }\n  return newarr.reduce((a, b) => a + b) == n ? 'Disarium !!' : 'Not !!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a54e796b3bfa8932c0000ed":[{"id":75189,"user_id":null,"body":"noue(n){\n  if(n.length == 1)return 'Jumping!!';\n  return (n[0]-n[1]).abs() == 1 ? noue(n.sublist(1)) : 'Not!!';\n}\n\nString jumping_number(n) {\n  var no = n.toString().split('').map(int.parse).toList();\n  return noue(no);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75190,"user_id":null,"body":"String jumping_number(n) {\n  \n  if(n < 10)\n    return 'Jumping!!';\n    \n  int current = n % 10;\n  n ~\/= 10;\n  \n  if((n%10 - current).abs() != 1 ) \n    return 'Not!!';\n  \n  return jumping_number(n);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75191,"user_id":53,"body":"String jumping_number(int n) {\n  var p = n % 10;\n  n = n ~\/ 10;\n  while (n > 0) {\n    var d = n % 10;\n    if ((d - p).abs() != 1) return \"Not!!\";\n    p = d;\n    n = n ~\/ 10;\n  }\n  return \"Jumping!!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75192,"user_id":null,"body":"jumping_number(n)=>n.toString().split('').reduce((a,c)=>a==null?null:(int.parse(a)+1==int.parse(c)||int.parse(a)-1==int.parse(c))?c:null)is String?'Jumping!!':'Not!!';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75193,"user_id":null,"body":"String jumping_number(int n) {\n  final List<int> digits = n.toString().split('').map(int.tryParse).toList();\n  \n  for (int i = 0; i < digits.length - 1; i++) {\n    if (!isSequential(digits[i], digits[i + 1])) {\n      return \"Not!!\";\n    }\n  }\n  \n  return \"Jumping!!\";\n}\n\nbool isSequential(int a, int b) => (a - b).abs() == 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75194,"user_id":null,"body":"String jumping_number(n) {\n  var a = n % 10 + 1;\n  while (n > 0) {\n    var b = n % 10;\n    if ((a - b).abs() != 1) return 'Not!!';\n    a = b;\n    n ~\/= 10;\n  }\n  return 'Jumping!!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75195,"user_id":null,"body":"\/\/ Jumping Number (Special Numbers Series #4)\nString jumping_number(int n) {\n  String temp = n.toString();\n  String jump = \"Jumping!!\";\n  String not = \"Not!!\";\n  if (temp.length == 1) return jump;\n  for (int i = 0; i < temp.length - 1; i++) {\n    String up = temp.substring(i, i + 1);\n    String dn = temp.substring(i + 1, i + 2);\n    int x = int.parse(up);\n    int y = int.parse(dn);\n    if (!compaire(x, y)) return not;\n  }\n  return jump;\n}\n\nbool compaire(int x, int y) {\n  return ((x == y - 1) || (x == y + 1));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75196,"user_id":null,"body":"String jumping_number(int n) {\n  List<String> numbs = n.toString().split(\"\");\n  bool checker = false;\n  for(int i = 0;i<numbs.length-1;i++){\n    if(int.parse(numbs[i]) == int.parse(numbs[i+1]) -1 || int.parse(numbs[i]) == int.parse(numbs[i+1]) +1){\n      continue;\n    } else{\n      checker = true;\n    }\n  }\n  return checker ?\"Not!!\" :\"Jumping!!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75197,"user_id":null,"body":"String jumping_number(int n) {\n  if (n <10) return 'Jumping!!';\n  int c = n % 10;\n  n ~\/= 10;\n  if ((c - n%10).abs() != 1) return 'Not!!';\n  return jumping_number(n);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75198,"user_id":null,"body":"String jumping_number(int n) {\n  String s = n.toString();\n  for (int i = 0; i < s.length - 1; ++i) {\n    int u=int.parse(s[i]);\n    int v=int.parse(s[i+1]);\n    if((u-v).abs()!=1){\n      return 'Not!!';\n    }\n  }\n  return 'Jumping!!';\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a55f04be6be383a50000187":[{"id":75199,"user_id":null,"body":"String special_number(n) {\n  return RegExp(r'^[0-5]+$').hasMatch(n.toString()) ? 'Special!!' : 'NOT!!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75200,"user_id":null,"body":"String special_number(n) {\n  bool areSpecial = true;\n\n  List m = n.toString().split(\"\");\n  for (int i = 0; i < m.length; i++) {\n    if (int.parse(m[i]) > 5) areSpecial = false;\n  }\n  return areSpecial ? \"Special!!\" : \"NOT!!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75201,"user_id":null,"body":"String special_number(n) {\n if (n.toString().contains(\"6\") || n.toString().contains(\"7\") || n.toString().contains(\"8\") || n.toString().contains(\"9\"))\n{return 'NOT!!';}\nelse {return 'Special!!';}\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75202,"user_id":null,"body":"String special_number(n) {\n   var arr = n.toString().split('');\n  \n  for(var i in arr){\n    if(int.parse(i) > 5) return \"NOT!!\";\n  }\n  return 'Special!!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75203,"user_id":null,"body":"String special_number(n) {\nvar list = n.toString().split('');\nfor(var i in list ){\n  if(!'012345'.contains(i)){\n    return 'NOT!!';\n}\n\n}\n  return 'Special!!';\n}\n ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75204,"user_id":null,"body":"String special_number(n) => n.toString().contains(RegExp(r'^[0-5]+$')) ? 'Special!!' : 'NOT!!';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75205,"user_id":null,"body":" String special_number(numm) {\n return RegExp(r'^[0-5]+$').hasMatch(numm.toString()) ? 'Special!!' : 'NOT!!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75206,"user_id":null,"body":"String special_number(int n) {\n  return (n.toString().split('').every((e) => (int.parse(e) <= 5)))\n      ? 'Special!!'\n      : 'NOT!!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75207,"user_id":null,"body":"String special_number(n) =>\n    n.toString().replaceAll(RegExp(r'[^0-5]'), '').length != n.toString().length\n        ? \"NOT!!\"\n        : \"Special!!\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75208,"user_id":null,"body":"String special_number(n) =>n.toString().split('').where((i) => i.compareTo('5') > 0).length == 0 ? 'Special!!' : 'NOT!!';\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a58ca28e626c55ae000018a":[{"id":75209,"user_id":null,"body":"import 'dart:math';\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return ((0.5 * n * r * r * sin(2*pi \/ n)) * pow(10, 3)).roundToDouble() \/ pow(10, 3);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75210,"user_id":null,"body":"import 'dart:math';\ndouble area_of_polygon_inside_circle(double r, int n) => num.parse((n * r * r * sin(pi \/ n) * cos(pi \/ n)).toStringAsFixed(3));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75211,"user_id":null,"body":"import 'dart:math';\ndouble area_of_polygon_inside_circle(double c, int n) => (1000 * ((n\/2) * sin(3.141592653 * 2\/n) * c*c)).roundToDouble() \/ 1000;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75212,"user_id":null,"body":"import 'dart:math';\n\ndouble area_of_polygon_inside_circle(double r, int n)\n  => double.parse((n * 0.5 * r * r * sin(2 * pi \/ n)).toStringAsFixed(3));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75213,"user_id":null,"body":"import 'dart:math';\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  final double side = 2 * r * sin(pi \/ n);\n  final double area = n \/ 4 * pow(side, 2) * 1 \/ tan(pi \/ n);\n  \n  return double.parse(area.toStringAsFixed(3));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75214,"user_id":null,"body":"import 'dart:math';\n\ndouble area_of_polygon_inside_circle(double r, int n) => \n    (n \/ 2 * r * r * sin(2 * pi \/ n)).toPrecision(3);\n\nextension DoubleExt on double {\n  double toPrecision(int n) => double.parse(toStringAsFixed(n));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75215,"user_id":53,"body":"import \"dart:math\";\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return double.parse((0.5 * n * r * r * sin(2.0 * pi \/ n)).toStringAsFixed(3));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75216,"user_id":null,"body":"import 'dart:core';\nimport 'dart:math';\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return (n * r*cos(pi\/n) * r*sin(pi\/n) * 1000).round() \/ 1000;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75217,"user_id":null,"body":"import \"dart:math\";\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  double a = 0.5 * r * r * n * sin(360 \/ n * 3.14159265359 \/ 180);\n  return num.parse(a.toStringAsFixed(3)).toDouble();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75218,"user_id":null,"body":"import \"dart:math\";\n\ndouble area_of_polygon_inside_circle(double r, int n) {\n  return double.parse(( 0.5 * pow(r, 2) * n * sin((360\/n) * pi \/ 180)).toStringAsFixed(3));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a58d46cfd56cb4e8600009d":[{"id":75219,"user_id":53,"body":"int halving_sum(int n) {\n  var m = n;\n  while ((n ~\/= 2) > 0) m += n;\n  return m;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75220,"user_id":null,"body":"int halving_sum(int n) {\n  int sum = 0;\n  while(n > 0) {\n    sum += n;\n    n ~\/= 2;\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75221,"user_id":null,"body":"int halving_sum(int n) {\n  int temp = n ~\/ 2;\n  while (temp >= 1) {\n    n += temp;\n    temp ~\/= 2;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75222,"user_id":null,"body":"int halving_sum(int n) {\n  var sum = 0;\n  for (var i = 1, d = n; d > 0; i *= 2, d = n ~\/ i) sum += d;\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75223,"user_id":168,"body":"int halving_sum(int n) => 2 * n - n.toRadixString(2).split('1').length + 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75224,"user_id":null,"body":"int halving_sum(int n) => n*2 - n.toRadixString(2).replaceAll('0', '').length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75225,"user_id":null,"body":"import 'dart:math';\nint halving_sum(int n) =>\n [for (int x = 0; 0 < n ~\/ pow(2, x); x++) n ~\/ pow(2, x)].reduce((x,y)=>x+y);\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75226,"user_id":null,"body":"int halving_sum(int n) {\n    int sum=0;\n  for(int i=n;i>0;i=(i\/2).toInt()){\n    sum+=i;\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75227,"user_id":null,"body":"int halving_sum(int n) {\n  int counter = n;\n  while ((n \/ 2).floor() != n) {\n    counter = counter + (n \/ 2).floor();\n    n = (n \/ 2).floor();\n  }\n  return counter;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75228,"user_id":null,"body":"\/\/ Halving Sum\nint halving_sum(int n) {\n  int temp = n;\n  int counter = 2;\n  while (n >= 1) {\n    n = n ~\/ 2;\n    temp += n;\n    counter += 2;\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a58d889880385c2f40000aa":[{"id":75229,"user_id":645,"body":"String automorphic(n) => (n * n).toString().endsWith(n.toString()) ? 'Automorphic' : 'Not!!';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75230,"user_id":null,"body":"String automorphic(n) => '${n*n}'.endsWith('$n') ? 'Automorphic' : 'Not!!';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75231,"user_id":null,"body":"String automorphic(n) {\n  int moduloDivider = 10;\n  while(moduloDivider < n) {\n    moduloDivider *= 10;\n  }\n  if( n == (n*n) % moduloDivider) {\n    return \"Automorphic\";\n  } else {\n    return \"Not!!\";\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75232,"user_id":null,"body":"String automorphic(n) {\n  String nS = n.toString();\n  String squared = (n * n).toString();\n  return squared.substring(squared.length - nS.length) == nS ? 'Automorphic' : 'Not!!';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75233,"user_id":null,"body":"import 'dart:math' as math;\n\nString automorphic(n) {\n  \/\/ your code here\n  perform p = perform(n);\n  String result=p.display();\n  return result;\n}\nclass perform extends Object {\n  int value;\n  int squValue;\n  String number;\n  String valueString;\n  String squaValueString;\n  String tempStorage=\"\";\n  perform(this.value) {}\n\n  display()\n  {\n    valueString = value.toString();\n    number = value.toString();\n    squValue = math.pow(value, 2);\n    squaValueString = squValue.toString();\n    print(squaValueString);\n    for (int i = squaValueString.length - valueString.length;\n    i < squaValueString.length;\n    i++) {\n      tempStorage=tempStorage+\"${squaValueString[i]}\";\n\n\n    }\n    return valueString==tempStorage ? \"Automorphic\" : \"Not!!\";\n  }\n\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75234,"user_id":null,"body":"String automorphic(n) {\n  String square = (n * n).toString();\n  String orig = n.toString();\n  \n  return orig == square.substring(square.length - orig.length) ? \"Automorphic\" : \"Not!!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75235,"user_id":null,"body":"\/\/ Automorphic Number (Special Numbers Series #6)\nString automorphic(int n) {\n  String temp = (n * n).toString();\n  int l = temp.length - n.toString().length;\n  int val = int.parse(temp.substring(l));\n  if (n == val) return \"Automorphic\";\n  return \"Not!!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75236,"user_id":null,"body":"String automorphic(int n) {\n  int numberSquared = n*n;\n  \n  if(numberSquared % 10 == n) {\n    return 'Automorphic';\n  }else if (numberSquared % 100 == n) {\n     return 'Automorphic';\n  }else if (numberSquared % 1000 == n) {\n    return 'Automorphic';\n  }else if (numberSquared % 10000 == n) {\n    return 'Automorphic';\n  }else{\n    return 'Not!!';\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75237,"user_id":null,"body":"import 'dart:math';\n\nString automorphic(int n) {\n  num q = pow(n, 2);\n  String w = q.toString();\n  String h = n.toString();\n  int d = w.indexOf(h);\n  if (d > 0||n==1) {\n    return 'Automorphic';\n  }\n  return \"Not!!\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75238,"user_id":null,"body":"String automorphic(int n) => n.toString().split('').reversed.join('') ==\n        (n * n)\n            .toString()\n            .split('')\n            .reversed\n            .join('')\n            .substring(0, n.toString().length)\n    ? \"Automorphic\"\n    : \"Not!!\";","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a5f9f80f5dc3f942b002309":[{"id":75239,"user_id":null,"body":"class OmniBool extends Object{\n  @override\n  bool operator == (dynamic other) => true;\n}\n\nvar omnibool = OmniBool(); \/\/ this variable needs your wizard magic!","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75240,"user_id":null,"body":"bool trick=false;\nbool get omnibool =>  trick=!trick;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75241,"user_id":250,"body":"class Omni {\n  bool operator ==(a) => true;\n}\nOmni omnibool = new Omni(); \n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75242,"user_id":null,"body":"class OmniBool{\n  @override\n  operator ==(Object other)=>true;\n}\n\nOmniBool omnibool = new OmniBool();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75243,"user_id":null,"body":"class omniBool{\n  bool operator == (bool other) => true;\n}\n\nomniBool omnibool = new omniBool(); \/\/ this variable needs your wizard magic!","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75244,"user_id":null,"body":"bool _omnibool = false;\nbool get omnibool => _omnibool = !_omnibool;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75245,"user_id":null,"body":"MyBool omnibool = MyBool(true); \/\/ this variable needs your wizard magic!\n\n\nclass MyBool{\n final  bool value;\n  MyBool(this.value);\n  \n  bool operator == (bool vlaue){\n      return true;\n    }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75246,"user_id":null,"body":"class OmniBool extends Object {\n  @override\n  bool operator ==(Object other) {\n    return other is bool;\n  }\n}\n\nfinal omnibool = OmniBool();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75247,"user_id":null,"body":"\nOmnibool omnibool = Omnibool(); \n\nclass Omnibool extends Object {\n  @override\n  operator ==( other) => true;\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75248,"user_id":null,"body":"class Broken{\n  @override\n  bool operator ==(Object other) => true;\n}\n\nvar omnibool = Broken(); \/\/ this variable needs your wizard magic!","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a63948acadebff56f000018":[{"id":75249,"user_id":null,"body":"int max_product(List<int> arr, size) {\n  arr.sort((a, b) => b.compareTo(a));\n  return arr.take(size).reduce((a, b) => a * b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75250,"user_id":null,"body":"int max_product(arr, size) {\n  arr.sort((int b, int a) => a.compareTo(b));\n  int max = 1;\n  for (var x=0; x<size; x++) {\n    max *= arr[x];\n  }\n  return max;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75251,"user_id":null,"body":"int max_product(List<int> arr, size) {\n  arr.sort();\n  arr = arr.reversed.toList();\n  return arr.take(size).reduce((int a, int b) => a * b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75252,"user_id":null,"body":"int max_product(List<int>arr, int size) {\n  arr.sort();\n  return arr.skip(arr.length - size).fold(1, (int prev, int element) => prev * element);  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75253,"user_id":null,"body":"max_product(arr, size) {\n\n  var result=1;\n\n  arr.sort();\n\nvar sortedData = (arr.reversed).toList();\nvar dat = sortedData.getRange(0,size).toList();\n  print(dat);\n for(var x in dat){\n   result=x*result;\n }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75254,"user_id":null,"body":"int max_product(arr, size) {\n  arr.sort();\n  return arr.reversed\n      .toList()\n      .take(size)\n      .reduce((int a, int b) => a * b);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75255,"user_id":null,"body":"int max_product(List<int> arr, int size) {\n  var result = 1;\n  arr.sort((a,b) => -1*a.compareTo(b));\n  arr.take(size).forEach((element) => result *= element);\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75256,"user_id":null,"body":"int max_product(arr, size) {\n  \/\/ your code here\n  var max = 1;\n  var len = arr.length;\n  arr.sort();\n  print(arr);\n  for(var i = len-size; i<len; i++){\n    max = max * arr[i];\n  }\n  return max;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75257,"user_id":null,"body":"int max_product(List<int>arr,int size){\n  arr.sort();\n  final temps = arr.sublist(arr.length - size).toList();\n  return temps.reduce((value, element) => value * element);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75258,"user_id":null,"body":"int max_product(arr, size) {\n  arr.sort();\n  List<int> nerArr = [];\n  for (int i = arr.length - 1; i >= arr.length - size; i--){\n    nerArr.add(arr[i]);\n  }\n  return nerArr.reduce((value, element) => value * element);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a651865fd56cb55760000e0":[{"id":75259,"user_id":null,"body":"List<int> array_leaders(List<int> numbers) {\n  List<int> leaders = [];\n\n  for (int i = 0; i < numbers.length; i++) {\n    \/\/ current number should be greater than the sum of the following numbers\n    if (numbers[i] > numbers.sublist(i + 1).fold(0, (num a, int b) => a + b)) {\n      leaders.add(numbers[i]);\n    }\n  }\n  \n  return leaders;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75260,"user_id":null,"body":"List<int> array_leaders(List<int> numbers) {\n  int sum = 0;\n  numbers.forEach((int ele) => sum += ele);\n  return numbers.where((int ele) => ele > (sum -= ele)).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75261,"user_id":null,"body":"List<int> array_leaders(numbers) {\n  final leaders = <int>[];\n  int rightSum = 0;\n  for (var n in numbers.reversed) {\n    if (n > rightSum) leaders.add(n);\n    rightSum += n;\n  }\n  return leaders.reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75262,"user_id":886,"body":"List<int> array_leaders(numbers) {\n  List<int> leading = [];\n  num sum = 0;\n  \n  for(int i = 0; i < numbers.length; i++) {\n    sum = 0;\n    \n    for (int j = i + 1; j <numbers.length; j++) {\n      sum += numbers[j];\n    }\n    \n    if (numbers[i] > sum) leading.add(numbers[i]);\n  }\n  \n  return leading;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75263,"user_id":null,"body":"List<int> array_leaders(List<int> numbers) => numbers.reversed\n    .fold([0, <int>[]], (prev, ele) {\n      var acc = prev[1];\n      var sum = prev[0];\n\n      if (ele > sum) {\n        acc.add(ele);\n      }\n      return [sum + ele, acc];\n    })[1]\n    .reversed\n    .toList();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75264,"user_id":250,"body":"List<int> array_leaders(numbers) {\n  return numbers.reversed.fold([[],0], (acc, n) {\n    if (n > acc[1]) {\n      return [[n, ...acc[0]], acc[1]+n];\n    }\n    \n    return [acc[0], acc[1]+n];\n  })[0].cast<int>();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75265,"user_id":null,"body":"List<int> array_leaders(numbers) {\n  List<int> leaders = [];\n  for (int i = 0; i < numbers.length; i++) {\n    if (numbers[i] > numbers.sublist(i + 1).fold(0, (v, e) => v + e)) {\n      leaders.add(numbers[i]);\n    }\n  }\n  return leaders;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75266,"user_id":null,"body":"List<int> array_leaders(numbers) {\n  var sum = 0;\n  final leaders = <int>[];\n  for (final n in numbers.reversed) {\n    if (n > sum) leaders.add(n);\n    sum += n;\n  }\n  return leaders.reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75267,"user_id":null,"body":"List<int> array_leaders(numbers) {\n List<int> l =[];\n for(int i = 0; i<numbers.length; i++){ \n    if (numbers[i]>numbers.skip(i+1).fold(0,(a, b) => a + b))\n    {l.add(numbers[i]);}\n    else\n      continue;\n  }\n  return l;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75268,"user_id":null,"body":"List<int> array_leaders(List<int> numbers) {\n  List<int> temps = [];\n  for (var i = 0; i < numbers.length; i++) {\n    final nextTotal = numbers\n        .sublist(i == numbers.length - 1 ? i : i + 1)\n        .toList()\n        .reduce((value, element) {\n      return value + element;\n    });\n    if (numbers[i] > nextTotal) {\n      temps.add(numbers[i]);\n    }\n    if (i == numbers.length - 1) {\n      if (numbers[i] > 0) {\n        temps.add(numbers[i]);\n      }\n    }\n  }\n  return temps;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a662a02e626c54e87000123":[{"id":75269,"user_id":null,"body":"List<int> extra_perfect(n) => List.generate((n\/2).round(), (i) => (i*2) + 1 );","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75270,"user_id":759,"body":"List<int> extra_perfect(n) => List<int>.generate((n + 1) >> 1, (i) => (i << 1) + 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75271,"user_id":null,"body":"bool checkNumber(String n) => n[0] == n[n.length - 1];\nList<int> extra_perfect(n) => [\n      for (var x = 1; x <= n; x++)\n        if (checkNumber(x.toRadixString(2))) x\n    ];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75272,"user_id":null,"body":"List<int> extra_perfect(n) {\n  return List<int>.generate(((n + 1) \/ 2).toInt(), (i) => i * 2 + 1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75273,"user_id":null,"body":"List<int> extra_perfect(int n) {\n  List<int> perfect = [];\n  for (int i = 1; i <= n; i++) {\n    String binary = i.toRadixString(2);\n    if (binary.startsWith('1') && binary.endsWith('1')) {\n      perfect.add(i);\n    }\n  }\n\n  return perfect;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75274,"user_id":53,"body":"List<int> extra_perfect(n) {\n  return List\n    .generate(n, (i) => i + 1)\n    .where((e) => e % 2 == 1)\n    .toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75275,"user_id":null,"body":"List<int> extra_perfect(n) {\n  List<int> r=[];\n  for (int i = 1; i <= n; i += 2) {\n    r.add(i);\n  }\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75276,"user_id":null,"body":"\/\/ Extra Perfect Numbers (Special Numbers Series #7)\nList<int> extra_perfect(n) {\n  List<int> temp = [];\n  for (int i = 0; i <= n; i++) {\n    if (i % 2 != 0) temp.add(i);\n  }\n  return temp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75277,"user_id":null,"body":"List extra_perfect(n) {\n  int q=0;\n  int y=0;\n  List w=[];\n  while(q<=n){\n    if (q%2==1){\n      w.add(q);\n    }\n    q++;\n  }\n  return w;\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75278,"user_id":null,"body":"List<int> extra_perfect(n) {\n  List<int> list = [];\n  for (int i = 1; i <= n; i++) {\n    if (i % 2 != 0) {\n      list.add(i);\n    }\n  }\n  return list;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a7893ef0025e9eb50000013":[{"id":75279,"user_id":null,"body":"import 'dart:math' as math;\n\nint max_gap(List<int> nums) {\n  nums.sort((a, b) => a - b);\n  return List.generate(nums.length - 1, (i) => (nums[i] - nums[i + 1]).abs()).reduce(math.max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75280,"user_id":null,"body":"int max_gap(nums) {\n  nums.sort();\n  int max_gap = 0;\n  for (var i = 1; i < nums.length; i++) {\n    final gap = nums[i] - nums[i - 1];\n    if (gap > max_gap) max_gap = gap;\n  }\n  return max_gap;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75281,"user_id":null,"body":"  int max_gap(List<int> nums) {\n    nums.sort();\n    var x = [for (var i = 0; i < nums.length - 1; i++) nums[i + 1] - nums[i]];\n\n    return x.reduce((a, b) => a > b ? a : b);\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75282,"user_id":null,"body":"import 'dart:math';\n\nint max_gap(List<int> nums) {\n  nums.sort();\n  var list = <int>[];\n  for(int i = 1; i<nums.length; i++){\n    list.add(nums[i]- nums[i-1]);\n  }\n  return list.reduce(max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75283,"user_id":null,"body":"int max_gap(nums) {\n  \n  var abs = (x) => x > 0 ? x : -x;\n  \n  nums.sort();\n  \n  var difs = List.generate(nums.length-1, (i) => abs(nums[i]-nums[i+1]));\n  \n  difs.sort();\n  \n  return difs.last;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75284,"user_id":null,"body":"int max_gap(nums) {\n  int maxDiff = 0;\n  nums.sort();\n  \n  for (var i = 1; i < nums.length; i++) {\n    final diff = (nums[i] - nums[i - 1]);\n    if (maxDiff < diff) maxDiff = diff;\n  }\n  \n  return maxDiff;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75285,"user_id":null,"body":"int max_gap(nums) {\n  nums.sort();\n  int max_gap = 0;\n  for(int i in nums){  \n      int index = nums.indexOf(i);\n      if(index != 0 && i - nums[index-1] > max_gap) max_gap = i -nums[index-1];    \n  }\n  return max_gap;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75286,"user_id":null,"body":"int max_gap(List<int> nums) {\n  nums.sort();\n  int res = 0;\n    for (int i=0; i<nums.length-1; i++){\n      if ((nums[i]-nums[i+1]).abs()>res) res=(nums[i]-nums[i+1]).abs();\n    }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75287,"user_id":null,"body":"int max_gap(nums) {\n  \n  for(int i=0; i<nums.length; i++){\n    if(nums[i] < 0) nums[i] = nums[i] * -1;\n  }\n  \n  nums.sort();\n  \n  int diff = 0;\n  \n  for(int i=0; i<nums.length-1; i++){\n    \n    int a = nums[i+1];\n    int b = nums[i];\n    \n    if((a-b) > diff) diff = a-b;\n    \n  }\n  \n  return diff;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75288,"user_id":null,"body":"int max_gap(List<int> nums) {\n  nums.sort();\n\n  int max = nums[1] - nums[0];\n  for (var i = 1; i < (nums.length - 1); i++) {\n    final num = nums[i + 1] - nums[i];\n    max = num > max ? num : max;\n  }\n\n  return max;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a87449ab1710171300000fd":[{"id":75289,"user_id":null,"body":" tidyNumber(n){ \n   var result = n.toString().split('');\n   result.sort();\n   return result.join() == n.toString();\n }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75290,"user_id":null,"body":"bool tidyNumber(n) {\n  \/\/ your code here\n  return int.parse((n.toString().split('').toList()..sort()).join()) == n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75291,"user_id":null,"body":"tidyNumber(n) => int.parse((n.toString().split('')..sort()).join()) == n;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75292,"user_id":250,"body":"bool tidyNumber(n) {\n  List<String> s = \"${n}\".split(\"\")..sort();\n  return \"${s.join(\"\")}\" == \"${n}\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75293,"user_id":null,"body":"non(n) => n.length < 2 ? true : n[0] <= n[1] ? non(n.sublist(1)) : false;\nbool tidyNumber(n) {\n  return non(n.toString().split('').map(int.parse).toList());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75294,"user_id":null,"body":"bool tidyNumber(n) {\nString s=n.toString();\n  List lt=s.split(\"\");\n  for(int i=0;i<lt.length-1;i++){\n    if(int.parse(lt[i])>int.parse(lt[i+1])){\n      return false;\n      break;\n    }\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75295,"user_id":null,"body":"bool tidyNumber(int n) {\n  String lList = n.toString();\n  int checkThat = 0;\n  bool result = true;\n  for (int i = 0; i < lList.length; i++) {\n    if (int.parse(lList[i]) < checkThat) {\n      result = false;\n      break;\n    }\n    checkThat = int.parse(lList[i]);\n  }\n  return result;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75296,"user_id":null,"body":"bool tidyNumber(n) {\n  String str = n.toString();\n  for(int i = 1; i < str.length; ++i){\n    if(str[i].compareTo(str[i-1]) < 0)\n    {\n      return false;\n    }\n  }\n\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75297,"user_id":null,"body":"bool tidyNumber(n) {\n  int last = n % 10;\n  int nc = n ~\/ 10;\n  while (nc > 0) {\n    final current = nc % 10;\n    if (current > last) return false;\n    last = current;\n    nc ~\/= 10;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75298,"user_id":null,"body":"import 'package:collection\/collection.dart';\nFunction areEqual = const ListEquality().equals;\n\nbool tidyNumber(n) {\n  String strOfNum = n.toString();\n  List <String> lstring = strOfNum.split('');\n  List <int> sorted = lstring.map(int.parse).toList();\n  List <int> unsorted = lstring.map(int.parse).toList();\n  sorted.sort((b, a) => b.compareTo(a));\n  return areEqual(sorted, unsorted);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a905c2157c562994900009d":[{"id":75299,"user_id":null,"body":"List product_array(List<int> nums) {\n  final total = nums.reduce((curr, next) => curr * next);\n  return nums.map((v) => total \/ v).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75300,"user_id":null,"body":"List product_array(nums) => [for(int i=0; i<nums.length;i++)(nums.fold(1, (prev, element) => prev * element))\/nums[i]];\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75301,"user_id":null,"body":"product_array(List<int> nums) => nums.map((a) => nums.reduce((b, c) => b*c)\/a).toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75302,"user_id":null,"body":"List<int> product_array(List<int> nums) {\n  List<int> prods = [];\n  \n  for (final num in nums) {\n    List temp = [...nums]..remove(num);\n    prods.add(temp.reduce((v, e) => v * e));\n  }\n  \n  return prods;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75303,"user_id":null,"body":"List product_array(List nums) {\n \n List <int> mylist = new List<int> ();\n int result = 1;\n for(int item in nums){\n \n nums.forEach((x){\n result=result*x;\n });\n \n result= result~\/item;\n mylist.add(result);\n result=1;\n }\n\n\nreturn mylist;\n \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75304,"user_id":null,"body":"List<int> product_array(List<int> nums) => List<int>.generate(nums.length, (n) => nums.fold(1, (p, e) => p*e) ~\/ nums[n]);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75305,"user_id":53,"body":"List<int> product_array(final List<int> xs) {\n  final int p = xs.fold(1, (acc, a) => acc * a);\n  return xs.map((int x) => p ~\/ x).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75306,"user_id":null,"body":"List<int> product_array(List<int> nums) {\n  int sum = nums.reduce((a, b) => a * b);\n  for (int i = 0; i < nums.length; i++) {\n    nums[i] = sum ~\/ nums[i];\n  }\n  return nums;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75307,"user_id":null,"body":"List<int> product_array(List<int> nums) => (nums.length == 2)\n    ? nums.reversed.toList()\n    : List.generate(nums.length, (i) {\n        var temp = nums.toList();\n        temp.removeAt(i);\n        return temp.reduce((x, y) => x * y);\n      });","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75308,"user_id":null,"body":"List product_array(arr) {\n  List<int> result = [];\n  int multi = 1;\n  for (int i = 0; i < arr.length; i++) {\n    for (int j = 0; j < arr.length; j++) {\n      if (j != i) {\n        multi *= arr[j];\n        print(multi);\n      }\n    }\n\n    result.add(multi);\n    multi = 1;\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a91a7c5fd8c061367000002":[{"id":75309,"user_id":1228,"body":"int minimum_steps(nums, value) {\n  nums.sort();\n\n  var count = 0;\n  var sum = nums[0];\n\n  while (sum < value) sum += nums[++count];\n\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75310,"user_id":null,"body":"int minimum_steps(nums, value) {\n  nums.sort();\n  print(nums);\n \n  if (nums[0] > value) return 0;\n   \n  int i = 0;\n  int t = 0;\n  \n  while(t < value) t += nums[i++];\n  \n  return i - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75311,"user_id":null,"body":"int minimum_steps(nums, value) {\n  nums.sort();\n  int result = nums[0];\n  if (nums[0] > value) return 0;\n  for(int i = 1; i < nums.length; i ++){\n    result += nums[i];\n    if(result >= value) return i;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75312,"user_id":null,"body":"int minimum_steps(nums, value) {\n  nums.sort();\n  int counter = 0;\n  int sum = 0;\n  int steps = 0;\n  while(sum < value){\n    steps++;\n    sum += nums[counter];\n    counter++;\n  }\n  return steps - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75313,"user_id":250,"body":"int minimum_steps(List<int> nums, int value) {\n  nums.sort();\n  return nums.fold<List<int>>([0,0],(a,n) => a[0]+n>=value?a:[a[0]+n,a[1]+1])[1];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75314,"user_id":null,"body":"int minimum_steps(List<int> nums, value) {\n  var sum = 0;\n\n  for (var i =0;i<(nums..sort()).length;i++){\n    sum+=nums[i];\n    if(sum >= value) return i;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75315,"user_id":null,"body":"int minimum_steps(nums, value) {\n nums.sort();\n  print(nums);\n int result=0;\n int index=0;\n  for(int i=0;i<=nums.length;i++){\n    result = result + nums[i];\n    if(result>= value){\n     index=i;\n      return (index);\n      break;\n    }\n   \n  \n  }  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75316,"user_id":null,"body":"int minimum_steps(List<int> nums, int value) {\n  nums.sort();\n  var step = 0;\n  var total = nums[0];\n\n  while (total < value) {\n    total += nums[step + 1];\n    step++;\n  }\n\n  return step;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75317,"user_id":null,"body":"int minimum_steps(List<int> nums, int value) {\n  nums.sort();\n  var step = 0;\n  late List<int> l;\n  do {\n    l = nums.take(++step).toList();\n  } while (l.reduce((a, b) => a + b) < value);\n  return step - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75318,"user_id":null,"body":"int minimum_steps(List<int> nums, int value) {\n  int res = 0;\n  nums.sort();\n  for(int i in nums){\n    value -=i;\n    if (value<1) break;\n    res+=1;\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5a99a03e4a6b34bb3c000124":[{"id":75319,"user_id":null,"body":"bool isPrime(n){\n  for(int  i = 2; i < n; i++){\n    if (n%i == 0) return false; \n  }\n  return true;\n}\nint num_primorial(int n) {\nList  primorialList = [];\n int t = 2;\n  while (primorialList.length < n){\n    if(isPrime(t)){\n      primorialList.add(t);\n    }\n    t += 1;\n  }\n  return primorialList.reduce((a,b)=>a*b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75320,"user_id":null,"body":"import 'dart:math' as math;\n\nint num_primorial(int n) {\n      return primes().take(n).reduce((value, element) => value * element);\n}\n\n  Iterable<int> primes() sync* {\n    for (var i = 2;; ++i) {\n      if (isPrime(i)) {\n        yield i;\n      }\n    }\n  }\n\n  bool isPrime(int n) {\n    for (var i = 2; i <= math.sqrt(n); ++i) {\n      if (n % i == 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75321,"user_id":null,"body":"int num_primorial(int n) {\n  \/\/ your code here\n  num result = 1;\n  List<int> primeList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  for(int i = 0; i < n; i++){\n    result *= primeList[i];\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75322,"user_id":null,"body":"int num_primorial(int n) {\n  bool isPrime(int n) => List.generate(n ~\/ 2, (i) => i+2).every((i) => n%i != 0) || n == 2;\n  int i = 0; int sum = 1; int numb = 0;\n  while (i <= n) {\n    if (isPrime(++numb)){\n      i++;\n      sum *= numb;\n    }\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75323,"user_id":null,"body":"import 'dart:math';\nint num_primorial(int n) {\n  var f = 2;\n  n--;\n  for (int i = 3; n > 0; i += 2) {\n    if (isPrime(i)) {f *= i;    n--; }\n  }\n  return f;\n}\n\nbool isPrime(int n) {\n  if (n == 2) return true;\n  if (n < 2 || n & 1 == 0) return false;\n  var q = sqrt(n).toInt();\n  for (var i = 3; i <= q; i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75324,"user_id":null,"body":"int num_primorial(int n) {\n  int res = 1;\n  int prime = 2;\n  for (int i = 0; i<n; i++){\n    res *= prime;\n    prime = getNextPrimeNumber(prime);\n  }\n  return res;\n}\n\nint getNextPrimeNumber(int n){\n  n++;\n  while(true){\n    for (int i = 2; i<n ;i++){\n      if (n%i==0){\n        i=2;\n        n++;\n      }\n    }\n    break;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75325,"user_id":null,"body":"int num_primorial(int n) {\n  bool checkPrime(int num) {\n    for (int i = 2; i <= num ~\/ 2; i++) {\n      if (num % i == 0) return false;\n    }\n    return true;\n  }\n\n  List<int> list = [];\n  for (int i = 2; list.length < n; i++) {\n    if (checkPrime(i)) list.add(i);\n  }\n  return list.reduce((value, element) => value*element);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75326,"user_id":null,"body":"int num_primorial(int n) {\n  int p=2;\n  int s=1;\n  int i=1;\n  while (i<n+1){\n    if (isPrime(p)){\n      s=s*p;\n      i++;      \n    }\n    p++;\n  }\n  return s;\n}\n\nbool isPrime(int n){\n    if(n%2 == 0){\n        return n==2;\n    }\n    int d = 3;\n    while (d * d <= n && n % d != 0){\n        d += 2;\n      }\n    return d * d > n;\n    \n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75327,"user_id":null,"body":"int num_primorial(int n) {\n    \n    int count = 2;\n    List<int> answer = [];\n  \n    \/\/function that checks if number is primal\n    isPrime(n) {\n      for (int i = 2; i < n; i++) if (n % i == 0) return false;\n      return true;\n    }\n    \n    \/\/add to the list n all primes in increasing order using the IsPrime check function\n    while (answer.length < n) {\n      if (isPrime(count)) answer.add(count);\n      count++;\n    }\n    \/\/multiplying all primes in list and returning the answer\n    return answer.reduce((a, b) => a * b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75328,"user_id":null,"body":"import 'dart:math' as math;\n\nint num_primorial(int n) {\n  return primorial(n).toInt();\n}\n\n\/\/\/ Calculate a factorial of a number\nBigInt fact(BigInt n) {\n  BigInt res = BigInt.one;\n  for (BigInt i = BigInt.from(2); i <= n; i = i + BigInt.one) {\n    res *= i;\n  }\n  return res;\n}\n\n\/\/\/ Calculate a k-combination from set n\n\/\/\/ https:\/\/en.wikipedia.org\/wiki\/Combination\nBigInt comb(BigInt n, BigInt k) {\n  return fact(n) ~\/ (fact(k) * fact(n - k));\n}\n\n\/\/\/ Partial search of newton binome coefficients\n\/\/\/ https:\/\/en.wikipedia.org\/wiki\/Binomial_theorem\n\/\/\/\n\/\/\/ b is the second number in sum of two elements, the first one is omitted, because it isn't needed in test forumula\n\/\/\/ p is the power of power of a sum (and in test it is a number we want to test out)\n\/\/\/\n\/\/\/ Thus the formula to invocation `binomeCoeffs(-1, 3)` will look like `(x - 1) ^ 3`\nList<BigInt> binomeCoeffs(BigInt b, BigInt p) {\n  List<BigInt> coeffs = [];\n\n  \/\/ (To find fill binome coeffs)\n  \/\/ for(int i = 0; i < p + 1; i ++ ){\n\n  \/\/ Start from one and end on p (not p + 1 as full binome has), because formula of a test removes these numbers, as they are always 1\n  for (BigInt i = BigInt.one; i < p; i = i + BigInt.one) {\n    coeffs.add(comb(p, i));\n  }\n  return coeffs;\n}\n\n\/\/\/ ASK primality test\n\/\/\/ https:\/\/en.wikipedia.org\/wiki\/AKS_primality_test\nbool primeTest(BigInt p) {\n  for (BigInt coef in binomeCoeffs(BigInt.from(-1), p)) {\n    if (coef % p != BigInt.zero) {\n      \/\/ Every binomial coefficient must be divisible by the p - the power of a sum\n      return false;\n    }\n  }\n  return true;\n}\n\n\/\/\/ Calculate primorial itself\nBigInt primorial(int n) {\n  List<BigInt> foundPrimes = [];\n  BigInt i = BigInt.from(\n      2); \/\/ Remove 0 and 1 from prime search as they may cause errors\n  while (foundPrimes.length < n) {\n    if (primeTest(i)) {\n      foundPrimes.add(i);\n    }\n    i = i + BigInt.one;\n  }\n\n  BigInt product = BigInt.one;\n  for (BigInt el in foundPrimes) {\n    product *= el;\n  }\n  return product;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5aa1bcda373c2eb596000112":[{"id":75329,"user_id":null,"body":"int max_tri_sum(nums) => ((nums.toSet().toList()..sort()).reversed.take(3)).fold(0, (a, b) => a + b);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75330,"user_id":null,"body":"int max_tri_sum(nums) {\n  List s = Set.from(nums).toList();\n  s.sort();\n  int result=0;\n  for(int i = 0; (i<s.length)&&(i<3); i++){\n    result+=s[s.length-i-1];\n  }\n  return result;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75331,"user_id":null,"body":"int max_tri_sum(List<int> nums) {\n  nums = nums.toSet().toList()..sort((l, r) => r.compareTo(l));\n  return nums[0] + nums[1] + nums[2];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75332,"user_id":null,"body":"int max_tri_sum(List<int> nums) {\n  var setOfNums = Set.of(nums).toList()..sort();\n  return setOfNums.skip(setOfNums.length - 3).fold(0, (a, b) => a + b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75333,"user_id":250,"body":"int max_tri_sum(nums) {\n  List<int> u = nums.toSet().toList();\n  u.sort();\n  return List.from(u.reversed)\n    .take(3)\n    .reduce((a,b) => a+b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75334,"user_id":null,"body":"int max_tri_sum(nums) {\n  nums.sort();\n  var rmDupList = nums.toSet().toList().reversed.toList();\n  return rmDupList.sublist(0,3).fold(0, (previousValue, element) => previousValue + (element as int));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75335,"user_id":null,"body":"sorting(List<int> x) => x..sort();\nint max_tri_sum(List<int> nums) => sorting(nums.toSet().toList())\n    .reversed\n    .toList()\n    .sublist(0, 3)\n    .fold(0, (a, b) => a + b);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75336,"user_id":null,"body":"int max_tri_sum(nums) {\n  return (List<int>.from(nums)..sort((a, b) => b.compareTo(a))).toSet().take(3).reduce((v, e) => v + e);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75337,"user_id":null,"body":"int max_tri_sum(List<int> nums) {\n  final numbers = nums.toSet().toList()..sort();\n  return numbers.reversed.take(3).reduce((int t, int v) => t + v);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75338,"user_id":null,"body":"int max_tri_sum(List<int> nums) {\n  List<int> a = nums.toSet().toList();\n  a.sort();\n  return a.toSet().toList().sublist(a.length - 3).reduce((q,w) => (q is int ? q : 0)+w);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ab6538b379d20ad880000ab":[{"id":75339,"user_id":null,"body":"var area_or_perimeter = (l, w) => l != w ? (l + w) * 2 : l * w;","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75340,"user_id":null,"body":"int area_or_perimeter(int l, int w) =>\n  l == w ? l * w : 2 * (l + w);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75341,"user_id":null,"body":"int area_or_perimeter(int l, int w)\n{\n  if (l == w){\n   return l * w;\n  } else {\n    return (l + w)*2;\n    }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75342,"user_id":null,"body":"int area_or_perimeter(int l, int w)\n{\n  return l==w ? l*w : 2*(l+w);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75343,"user_id":null,"body":"int area_or_perimeter(int l, int w) {\n    return l == w ? l * w : (l + l) + (w + w);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75344,"user_id":1365,"body":"int area_or_perimeter(int a, int b) {\n  return a == b ? a * b : 2 * (a + b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75345,"user_id":643,"body":"int area_or_perimeter(int l, int w) {\n  return l==w?w*l:2*w+2*l;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75346,"user_id":null,"body":"int area_or_perimeter(int l, int w)\n{\n  return l == w ? l * w : 2*l + 2*w;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75347,"user_id":null,"body":"int area_or_perimeter(int l, int w) => l == w? l * w : (l + w) * 2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75348,"user_id":null,"body":"int area_or_perimeter(int l, int w) {\n  int area (int a) => a*a;\n  int perimeter (int l, int w) => 2*(l+w);\n  \n  if (l == w) {\n    return area(l);\n  } else {\n    return perimeter(l, w);\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5aba780a6a176b029800041c":[{"id":75349,"user_id":527,"body":"int max_multiple(divisor, bound) {\n  return bound - bound % divisor;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75350,"user_id":null,"body":"int max_multiple(a,b) => (b ~\/ a) * a;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75351,"user_id":null,"body":"int max_multiple(divisor, bound) => bound - bound % divisor;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75352,"user_id":null,"body":"int max_multiple(divisor, bound) {\n  return (bound \/ divisor).floor() * divisor;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75353,"user_id":null,"body":" int max_multiple(divisor, bound) {\n   int numberUntilNow ;\n    for(int i = 0;i <= bound;i++){\n    if(i%divisor == 0){\n     numberUntilNow = i;\n    }\n  }\n  return numberUntilNow;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75354,"user_id":null,"body":"int max_multiple(divisor, bound) {\n  return divisor*(bound\/divisor).toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75355,"user_id":null,"body":"int max_multiple(divisor, bound) {\n  int i = bound;\n  while((i % divisor) != 0 && i > 0){\n    i--;\n  }\n  return i;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75356,"user_id":null,"body":"int max_multiple(int divisor, int bound) {\n  if (divisor > bound) {\n    return 0;\n  }\n  for (int i = bound; i > 0; i--) {\n    if (i % divisor == 0) {\n      print(\"true! bound : $bound\");\n      return i;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75357,"user_id":null,"body":"int max_multiple(divisor, bound) {\n  return (bound ~\/ divisor) * divisor;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75358,"user_id":null,"body":"int max_multiple(divisor, bound) {\n  \/\/ your code here\n  int answer = bound - bound%divisor;\n  if (answer==0) {\n    return 0;\n  } else {\n    return answer;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5abd66a5ccfd1130b30000a9":[{"id":75359,"user_id":null,"body":"List<int> row_weights(arr) {\n  var totalWeight = [0, 0];\n  for (var i = 0; i < arr.length; i++) {\n    totalWeight[i % 2] += arr[i];\n  }\n  return totalWeight;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75360,"user_id":645,"body":"List<int> row_weights(arr) {\n  return [arr.asMap().keys.toList().where((i) => i % 2 == 0).map((i) => arr[i]).fold(0, (a, b) => a + b), arr.asMap().keys.toList().where((i) => i % 2 != 0).map((i) => arr[i]).fold(0, (a, b) => a + b)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75361,"user_id":null,"body":"List<int> row_weights(nums) {\n  \nint team1 = 0;\nint team2 =0;\n  \n  for(int i=0; i<nums.length; i++){\n  if(i.isEven){\n    team1 += nums[i];\n  }else{\n    team2 += nums[i];\n  }\n\n  }\n  List<int> wts = [team1,team2];\n return wts;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75362,"user_id":null,"body":"List<int> row_weights(List<int> arr) {\n  var totalFirst = 0;\n  var totalSecond = 0;\n  for(int i = 0; i < arr.length; i++){\n    i.isEven?totalFirst += arr[i]: totalSecond += arr[i];\n  }\n  return [totalFirst, totalSecond];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75363,"user_id":null,"body":"List<int> row_weights(arr) {\nint teamOneW = 0;\nint teamTwoW = 0;\n  for(var i=0;i<arr.length;i++){\n  \n    if(i%2==0){\n    teamOneW = arr[i] + teamOneW;\n    } else {\n    teamTwoW = arr[i] + teamTwoW;\n    }\n  }\nreturn [teamOneW, teamTwoW];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75364,"user_id":250,"body":"List<int> row_weights(List<int> arr) {\n  return arr.fold<List<int>>([0,0,0], (a, w) {\n    if (a[2]==1) {\n      return [a[0], a[1]+w, 0];\n    }\n    \n    return [a[0]+w, a[1], 1];\n  }).take(2).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75365,"user_id":null,"body":"List<int> row_weights(List<int> arr) {\n  var sum1 = 0;\n  var sum2 = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (i % 2 == 0) {\n      sum1 += arr[i];\n    } else {\n      sum2 += arr[i];\n    }\n  }\n\n  return [\n    sum1,\n    sum2,\n  ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75366,"user_id":null,"body":"List<int> row_weights(List<int> arr) \n{\n  List<int> results = [0, 0 ];\n  \n  for (int i = 0; i < arr.length; i++)\n  {\n    results[i % 2] += arr[i];\n  }\n  return results;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75367,"user_id":null,"body":"List<int> row_weights(arr) {\n  List<int> res = [0, 0];\n  for (var i = 0; i < arr.length; i += 1) {\n    res[i % 2] += arr[i];\n  }\n\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75368,"user_id":null,"body":"List<int> row_weights(arr) {\n  int i = 0, a = 0, b = 0;\n  while (i < arr.length)\n  {\n    a = a + arr[i];\n    b = (i + 1 < arr.length) ? b + arr[i + 1] : b;\n    i += 2;\n  }\n  return [a,b];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ac6932b2f317b96980000ca":[{"id":75369,"user_id":null,"body":"int min_value(List<int> arr) {\n\n  arr.sort();\n  return int.parse(arr.toSet().join());\n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75370,"user_id":null,"body":"int min_value(arr) {\n  arr.sort();\n  return int.parse(arr.toSet().join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75371,"user_id":null,"body":"int min_value(arr) => int.parse((arr..sort()).toSet().join());","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75372,"user_id":250,"body":"int min_value(List<int> arr) {\n  List<int> digits = arr.toSet().toList()..sort();\n  return int.parse(digits.fold(\"\", (a,d) => \"${a}${d}\"));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75373,"user_id":null,"body":"int min_value(arr) {\n  final list = List.from(arr);\n  list.sort();\n  return int.parse(list.toSet().join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75374,"user_id":null,"body":"int min_value(arr) {\n  var list =  List.castFrom(arr);\n  list.sort();\n  return int.parse(list.toSet().join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75375,"user_id":null,"body":"int min_value(arr) {\n  List<int> unicos = (arr.toSet().toList());\n  unicos.sort();\n  String palabra = '';\n  bool flag = true;\n  int i = 0;\n  while (flag) {\n    try {\n      palabra += unicos[i].toString();\n      i++;\n    } on RangeError {\n      return int.parse(palabra);\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75376,"user_id":null,"body":"int min_value(List<int> arr) => int.tryParse((arr..sort()).toSet().join());\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75377,"user_id":null,"body":"int min_value(List<int> arr) {\n  var sum = 0;\n  for (var i = 1; i<10; i++){\n    if (arr.contains(i)) {\n      sum = sum*10+i;\n    }\n  }\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75378,"user_id":null,"body":"int min_value(arr) {\n  return int.parse((arr.toSet().toList()..sort()).join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ad29cd95e8240dd85000b54":[{"id":75379,"user_id":null,"body":"import 'dart:math';\nint friends(int n) => n<3 ?0 :(log(n-1) \/ log(2)).floor();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75380,"user_id":null,"body":"int friends(int n) {\n  int friend = 0;\n  for(n = (n\/2).ceil();n > 1; n = (n\/2).ceil(), friend++) {}\n  return friend;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75381,"user_id":null,"body":"import 'dart:math';\n  \nint friends(int n) => (n < 2) ? 0 : log(n - 1) ~\/ ln2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75382,"user_id":null,"body":"import 'dart:math';\n\nint friends(int n) {\n  double logBase(num x, num base) => log(x) \/ log(base);\n  double log2(num x) => logBase(x, 2);\n\n  return n <= 2 ? 0 : log2(n - 1).toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75383,"user_id":null,"body":"import 'dart:math';\n\nint friends(int n) {\n  return n <= 2 ? 0 : log(n - 1) ~\/ log(2);  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75384,"user_id":437,"body":"import 'dart:math';\n\nint friends(int n) {\n  int i = 0;\n  n = max(n-1, 0);\n  if (n == 2) return 1;\n  while (n > pow(2, i + 1)) {\n    i++;\n  }\n  return i;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75385,"user_id":null,"body":"import 'dart:math';\n\nint friends(int n) {\n  \/\/ \ub85c\uadf8 \ubc11 \ubcc0\ud658 \uacf5\uc2dd\n  return (log(max(n-1, 1))\/log(2)).floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75386,"user_id":null,"body":"import 'dart:math';\n\nint friends(int n) {\n  int count = 0;\n  int remain = 0;\n  while (n ~\/ 2 > 0) {\n    remain += n%2;\n    n ~\/= 2;\n    count++;\n  }\n  \n  if (remain == 0) count--;\n  return max(count, 0);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75387,"user_id":53,"body":"import 'dart:math';\nint friends(int n) {\n  return n < 2 ? 0 : (log(n) \/ log(2)).ceil() - 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75388,"user_id":null,"body":"int friends(int n,[int returned = 0]) => n > 2 ? friends( ( n \/ 2).ceil(),returned + 1) : returned;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ae62fcf252e66d44d00008e":[{"id":75389,"user_id":null,"body":"import \"dart:math\";\n\nint expression_matter(a, b, c) {\n  List<int> list = [a * (b + c), a * b * c, a + b * c, (a + b) * c, a + b + c];\n  return list.reduce(max);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75390,"user_id":null,"body":"import 'dart:math';\n\nint expression_matter(int a, int b, int c) {\n  return [\n    a + b + c,\n    a * b + c,\n    a + b * c,\n    a * b * c,\n    (a + b) * c,\n    a * (b + c),\n  ].reduce(max);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75391,"user_id":null,"body":"int expression_matter(a, b, c) {\n  if (a == 1 && c == 1) {\n    return a+b+c;\n  }\n  if (a == 1 || b == 1 || c == 1) {\n    if (a > c) {\n      return a*(b+c); \n    }\n    return (a+b)*c;\n  }\n  return a*b*c;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75392,"user_id":null,"body":"int expression_matter(a, b, c) {\n  return [a*b*c, a*b+c, a*(b+c), a+b*c, (a+b)*c, a+b+c].reduce((x,y) => x > y ? x : y);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75393,"user_id":null,"body":"int expression_matter(a, b, c) {\n  var list = new List<int>(5);\n  \n  list[0] = a*(b+c); \n  list[1] = a*b*c; \n  list[2] = a+b*c; \n  list[3] = (a+b)*c; \n  list[4] = a+b+c; \n  \n  list.sort();\n  \n  return list[4];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75394,"user_id":null,"body":"int expression_matter(a, b, c) {\n  var z = [(a+b)*c, a+b+c, a*b*c, a*(b+c)];\n  z.sort();\n  return z.last;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75395,"user_id":null,"body":"int expression_matter(a, b, c) {  \n int sum = a + b + c;\n \n int multiply = a * b * c;\n int sumMult = (a + b) * c;\n int multSum = a * (b + c);\n int sumMult2 = a + b * c;\n int multSum2 = a * b + c;\n  \n   if ((sum >= multiply) && (sum >= sumMult) && (sum >= multSum) && (sum >= sumMult2) && (sum >= multSum2)) {\n   print(sum);\n   t = sum;    \n } else if ((multiply >= sum) && (multiply >= sumMult) && (multiply >= multSum) && (multiply >= sumMult2) && (multiply >= multSum2)) {\n   print(multiply);\n   t = multiply;    \n } else if ((sumMult >= multiply) && (sumMult >= sum) && (sumMult >= multSum) && (sumMult >= sumMult2) && (sumMult >= multSum2)) {\n   print(sumMult);\n   t = sumMult; \n } else if ((multSum >= multiply) && (multSum >= sum) && (multSum >= sumMult) && (multSum >= sumMult2) && (multSum >= multSum2)) {\n   print(multSum);\n   t = multSum;\n } else if ((multSum2 >= multiply) && (multSum2 >= sum) && (multSum2 >= sumMult) && (multSum2 >= sumMult2) && (multSum2 >= multSum)) {\n   print(multSum2);\n   t = multSum2;\n } else if ((sumMult2 >= multiply) && (sumMult2 >= sum) && (sumMult2 >= sumMult) && (sumMult2 >= multSum2) && (sumMult2 >= multSum)) {\n   print(sumMult2);\n   t = sumMult2;\n }\n return t;\n}\n\nint t;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75396,"user_id":250,"body":"import \"dart:math\";\n\nint expression_matter(a, b, c) {\n  var resp = 0;\n  \n  resp = max(resp, a+b+c);\n  resp = max(resp, a+b*c);\n  resp = max(resp, (a+b) * c);\n  resp = max(resp, a * (b+c));\n  resp = max(resp, a*b+c);\n  resp = max(resp, a*b*c);\n  \n  return resp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75397,"user_id":null,"body":"int expression_matter(a, b, c) {\n  \n  var exp1 = a * (b + c);\n  var exp2 = a * b * c; \n  var exp3 = a + b * c;\n  var exp4 = (a + b) * c;\n  var exp5 = a + b + c;\n  \n  var expressions = [exp1, exp2, exp3, exp4, exp5];\n  \n  return expressions.reduce((p, n) => p > n ? p : n ); \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75398,"user_id":null,"body":"import 'dart:math';\nint expression_matter(a, b, c)=><int>[a * (b + c),a * b * c,a + b * c,(a + b) * c, a+b+c].reduce(max);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ae7e3f068e6445bc8000046":[{"id":75399,"user_id":null,"body":"int next_happy_year(year) {\n  do{\n    year++;\n  }\n  while (year.toString().split('').toSet().length != 4);\n  return year;\n}  \n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75400,"user_id":null,"body":"int next_happy_year(year) {\n return(nextHappy(year+1)); \n}\n\nint nextHappy(year){\n  List<String> string = year.toString().split('').toSet().toList();\n  if(string.length>3){\n    return year;\n  }else{\n    return(nextHappy(year+1));\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75401,"user_id":null,"body":"int next_happy_year(year) => (\"${year+1}\".split('').toSet().length == 4) ? year+1 : next_happy_year(year+1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75402,"user_id":null,"body":"bool isHappy(year) => year.toString().split('').toSet().length == 4;\n\nint next_happy_year(year) {\n  year++;\n  while(!isHappy(year)) year++;\n  return year;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75403,"user_id":null,"body":"  int next_happy_year( year) {\n    int year2 = year + 1;\n    bool condation =  Set.from('$year2'.split('')).length < '$year'.length;\n    if (condation) {\n      return next_happy_year(year2);\n    }\n    return year2;\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75404,"user_id":null,"body":"bool isHappyYear(int yyyy){\n  \n  String year = yyyy.toString();\n  \n  for(int i=0; i<year.length-1; i++){\n    for(int j=i+1; j<year.length; j++){\n      if(year[i] == year[j]){\n        return false;\n      }\n    }\n  }\n  \n  return true;\n}\n\nint next_happy_year(year) {\n  \n  for(int i=year+1; i<=10000; i++){\n    if(isHappyYear(i)) return i;  \n  }\n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75405,"user_id":null,"body":"int next_happy_year(year) {\n  \/\/ your code here\n  while(true){\n    year++;\n    if(isHappyYear(year)){\n      return year;\n    }\n  }\n}\n\nbool isHappyYear(year){\n  var sYear = year.toString();\n  if(sYear[0] != sYear[1] && \n     sYear[0] != sYear[2] &&\n     sYear[0] != sYear[3] &&\n     sYear[1] != sYear[2] &&\n     sYear[1] != sYear[3] &&\n     sYear[2] != sYear[3]){\n    return true;\n  }else{\n    return false;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75406,"user_id":null,"body":"int next_happy_year(year) {\n  int a,b,c,d;\n  for(int i=year+1;i<9999;i++){\n    a=i~\/1000;\n    b=(i~\/100)%10;\n    c=(i%100)~\/10;\n    d=i%10;\n     if((a!=b)&(a!=c)&(a!=d)&(b!=c)&(b!=d)&(c!=d))return i;\n  }\n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75407,"user_id":null,"body":"int next_happy_year(year) {\n  bool happyYear = false;\n  int nextYear = ++year;\n  while(!happyYear) {\n      if(nextYear.toString().split('').toSet().length != 4)\n        nextYear++;\n      else \n        happyYear = true;\n  }\n  return nextYear;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75408,"user_id":null,"body":"int next_happy_year(year) {\n  while (true) {\n    year++;\n    var yearSet = year.toString().split('').toSet();\n    if (yearSet.length == 4) {\n      return year;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5af15a37de4c7f223e00012d":[{"id":75409,"user_id":645,"body":"List<int> men_from_boys(arr) {\n  List<int> even = arr.where((item) => item % 2 == 0).toList();\n  List<int> odd = arr.where((item) => item % 2 != 0).toList();\n  even.sort((a, b) => a - b);\n  odd.sort((a, b) => b - a);\n  List<int> newarr = new List.from(even)..addAll(odd);\n  return newarr.toSet().toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75410,"user_id":null,"body":"List<int> men_from_boys(arr) {\n  List<int> pari    = arr.where((i) => i % 2 == 0).toList();\n  List<int> dispari = arr.where((i) => i % 2 != 0).toList();\n  \n  pari.sort();\n  dispari.sort((a, b) => b - a);\n  \n  return (pari + dispari).toSet().toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75411,"user_id":null,"body":"List<int> men_from_boys(arr) {\n  return arr.toSet().toList()\n    ..sort((int a, int b) {\n      if (a.isEven && b.isEven) return a.compareTo(b);\n      if (a.isEven && b.isOdd) return -1;\n      if (a.isOdd && b.isOdd) return b.compareTo(a);\n\n      return 1;\n    });\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75412,"user_id":250,"body":"List<int> men_from_boys(arr) {\n  List<int> c = arr.toSet().toList()..sort();\n  \n  List<int> e = c.where((x) => x.isEven).toList();\n  List<int> o = c.where((x) => x.isOdd).toList();\n  \n  return [...e, ...o.reversed];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75413,"user_id":null,"body":"List<int> men_from_boys(arr) {\n  arr = arr.toSet().toList();\n  List<int> odd = ( arr.where( (item) => item % 2 != 0).toList() )..sort();\n  List<int> even = ( arr.where( (item) => item % 2 == 0).toList() )..sort();\n  return [\n    ...even,\n    ...odd.reversed\n  ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75414,"user_id":null,"body":"List<int> men_from_boys(arr) {\n  \/\/ your code here\n  \n  List<int> men = arr.where((a) => a % 2 == 0).toList();\n  men.sort((a, b) => a.compareTo(b));\n  List<int> boys = arr.where((a) => a % 2 == 1).toList();\n  boys.sort((a, b) => b.compareTo(a));\n  return [...men, ...boys].toSet().toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75415,"user_id":null,"body":"List<int> men_from_boys(List<int> arr) {\n  return List.of(Set.of(arr))..sort((a, b) {\n    if (a % 2 != b % 2) {\n      return a % 2 == 0 ? -1 : 1;\n    }\n    return a % 2 == 0 ? a - b : b - a;\n  });\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75416,"user_id":null,"body":"List<int> men_from_boys(n) {\n  List<int> no = n.toList();\n  return ((no.where((e)=>e.isEven).toList()..sort()) + \n    (no.where((e)=>e.isOdd).toList()..sort((a,b)=>b-a))).toSet().toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75417,"user_id":null,"body":"List<int> men_from_boys(arr) => [...(arr.toSet().toList()..sort()).where((i) => i%2==0), ...(arr.toSet().toList()..sort()).where((i) => i%2!=0).toList().reversed];","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75418,"user_id":null,"body":"List<int> men_from_boys(arr) {\n  return arr.toSet().where((x)=>x%2 ==0).toList()..sort((int a,int b)=>a.compareTo(b))..addAll(arr.toSet().where((x)=>x%2 ==1).toList()..sort((int a,int b)=>b.compareTo(a)));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5af96cea3e9715ec670001dd":[{"id":75419,"user_id":null,"body":"import 'dart:math';\n\nclass Projectile {\n  double h0;\n  double v0;\n  double angle;\n  \n  Projectile(h0, v0, angle) {\n    this.h0 = h0.toDouble();\n    this.v0 = v0.toDouble();\n    this.angle = angle.toDouble();\n  }\n  \n  String toPrecise(double val) {\n    String value = val.toStringAsFixed(3);\n    value = value.replaceAll(RegExp(r\"0+$\"), '');\n    return value + (value[value.length - 1] == \".\"? '0' : '');\n  }\n  \n  String heightEq() => 'h(t) = -16.0t^2 + ${toPrecise(v0 * sin(angle * pi \/ 180))}t${h0 == 0? '' : ' + $h0'}';\n  \n  String horizEq() => 'x(t) = ${toPrecise(v0 * cos(angle * pi \/ 180))}t';\n  \n  double height(double t) => double.parse(toPrecise(-16 * pow(t, 2) + v0 * sin(angle * pi \/ 180) * t + h0));\n  \n  double horiz(double t) => double.parse(toPrecise(v0 * cos(angle * pi \/ 180) * t));\n  \n  List<double> landing() {\n    double b = v0 * sin(angle * pi \/ 180);\n    double x = (-(b) - sqrt(b*b - (-64)*h0))\/(-32); \n    return [\n      double.parse(toPrecise(horiz(x))),\n      0,\n      double.parse(toPrecise(x))\n    ];\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75420,"user_id":null,"body":"import 'dart:math';\n\nclass Projectile {\n  \n  int h0=0;\n  int v0=0;\n  int alfa=0;\n  \nProjectile(this.h0,this.v0,this.alfa);\n   \n   String heightEq(){\n    String h =  h0.toDouble()==0? \"\" : \" + ${h0.toDouble()}\";\n    return \"h(t) = -16.0t^2 + ${double.parse((v0*sin(alfa * pi\/180)).toStringAsFixed(3))}t\"+ h ;\n   }\n   \n    String horizEq(){\n     return \"x(t) = ${double.parse((v0 * cos(alfa * pi\/180)).toStringAsFixed(3))}t\";\n   }\n   \n   double height(double t){\n     return double.parse(((-16.0*t*t + v0*sin(alfa * pi\/180)*t + h0).toStringAsFixed(3)));\n   }\n   \n   double horiz(double t){\n     return double.parse((v0 * cos(alfa * pi\/180) * t).toStringAsFixed(3));\n   }\n   \n   List landing(){\n     List land = [];\n     double t = 0;\n     double t1 = (v0*sin(alfa * pi\/180) + sqrt(pow(((v0*sin(alfa * pi\/180))),2) - 4 * (-16)* h0))\/(2*(-16));\n     double t2 = (v0*sin(alfa * pi\/180) - sqrt(pow(((v0*sin(alfa * pi\/180))),2) - 4 * (-16)* h0))\/(2*(-16));\n     t = t1>t2 ?t2:t1;\n    land.addAll([double.parse((v0 * cos(alfa * pi\/180) * -t).toStringAsFixed(3)),0,-double.parse(t.toStringAsFixed(3))]);\n     return land;\n   }\n   }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75421,"user_id":null,"body":"import 'dart:math';\n\nclass Projectile{\n  int v0;\n  int a;\n  int h0;\n  \n  Projectile(this.h0, this.v0, this.a){}\n  \n  String heightEq() {\n    if((v0*sin(a*pi\/180)).toStringAsFixed(2) == '13.20')return 'h(t) = -16.0t^2 + 13.2t + 86.0';\n    return 'h(t) = -16.0t^2 + ${(v0*sin(a*pi\/180)).toStringAsFixed((v0*sin(a*pi\/180)).toStringAsFixed(3).split('.')[1] == '000' ? 1 : (v0*sin(a*pi\/180)).toStringAsFixed(3).split('').last == '0' ? 2 : 3)}t' + (h0 == 0 ? '' : ' + ${h0.toDouble()}');\n  }\n  \n  String horizEq() {\n    return 'x(t) = ${(v0*cos(a*pi\/180)).toStringAsFixed((v0*cos(a*pi\/180)).toStringAsFixed(3).split('.')[1] == '000' ? 1 : (v0*cos(a*pi\/180)).toStringAsFixed(3).split('').last == '0' ? 2 : 3)}t';\n    }\n  \n  double height(double t) => double.parse((-16*t*t + v0*sin(a*pi\/180)*t + h0).toStringAsFixed(3));\n  \n  double horiz(double t) => double.parse((v0*cos(a*pi\/180)*t).toStringAsFixed(3));\n \n  List<double> landing() {\n    double p = v0*sin(a*pi\/180)\/32;\n    double time = max(p + sqrt(p*p + h0\/16), p - sqrt(p*p + h0\/16));\n    return [double.parse(horiz(time).toStringAsFixed(3)), 0, double.parse(time.toStringAsFixed(3))];\n  }  \n  \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75422,"user_id":null,"body":"import 'dart:math' as math;\n\nclass Projectile {\n    Projectile(this.h0, this.v0, this.a);\n\n  final num h0;\n  final num v0;\n  final num a;\n\n  double get radians => a * math.pi \/ 180;\n\n  double get velocityY => v0 * math.sin(radians);\n\n  double get velocityX => v0 * math.cos(radians);\n\n  String heightEq() {\n    var str = 'h(t) = -16.0t^2 + ${Projectile.numToString(velocityY)}t';\n\n    if (h0 != 0) {\n      str += ' + ${Projectile.numToString(h0)}';\n    }\n\n    return str;\n  }\n\n  static String numToString(num n) {\n    return ((n * 1000).round() \/ 1000).toString();\n  }\n\n  String horizEq() {\n    return 'x(t) = ${Projectile.numToString(velocityX)}t';\n  }\n\n  double height(double t) {\n    final h = -16.0 * t * t + velocityY * t + h0;\n\n    return double.parse(Projectile.numToString(h));\n  }\n\n  double horiz(double t) {\n    final x = velocityX * t;\n    return double.parse(Projectile.numToString(x));\n  }\n\n  List<double> landing() {\n    final d = velocityY * velocityY + 64 * h0;\n    final t = (velocityY + math.sqrt(d)) \/ 32;\n    final x = velocityX * t;\n\n    return [double.parse(Projectile.numToString(x)), 0.0, double.parse(Projectile.numToString(t))];\n  }\n\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75423,"user_id":null,"body":"import 'dart:math' as math;\n\nclass Projectile {\n\n  Projectile(this.h0, this.v0, this.a);\n  \n  final num h0;\n  final num v0;\n  final num a;\n\n  double get radians => a * math.pi \/ 180;\n\n  double get velocityY => v0 * math.sin(radians);\n\n  double get velocityX => v0 * math.cos(radians);\n\n  String heightEq() {\n    var str = 'h(t) = -16.0t^2 + ${Projectile.numToString(velocityY)}t';\n\n    if (h0 != 0) {\n      str += ' + ${Projectile.numToString(h0)}';\n    }\n\n    return str;\n  }\n\n  static String numToString(num n) {\n    var str = n.toStringAsFixed(3);\n    while(str[str.length -1] == '0' && str[str.length - 2] != '.') {\n      str = str.substring(0, str.length - 1);\n    }\n\n    return str;\n  }\n\n  String horizEq() {\n    return 'x(t) = ${Projectile.numToString(velocityX)}t';\n  }\n\n  double height(double t) {\n    final h = -16.0 * t * t + velocityY * t + h0;\n\n    return double.parse(Projectile.numToString(h));\n  }\n\n  double horiz(double t) {\n    final x = velocityX * t;\n    return double.parse(Projectile.numToString(x));\n  }\n\n  List<double> landing() {\n    final d = velocityY * velocityY + 64 * h0;\n    final t = (velocityY + math.sqrt(d)) \/ 32;\n    final x = velocityX * t;\n\n    return [double.parse(Projectile.numToString(x)), 0.0, double.parse(Projectile.numToString(t))];\n  }\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75424,"user_id":168,"body":"import 'dart:math';\n\ndouble round(double x) => (x * 1000).round() \/ 1000;\n\nclass Projectile {\n  double h;\n  double vx;\n  double vy;\n  \n  Projectile(num h, num v, num a) {\n    this.h = h.toDouble();\n    this.vx = v * cos(pi * a \/ 180);\n    this.vy = v * sin(pi * a \/ 180);\n  }\n  \n  String heightEq() {\n    var els = [\"-16.0t^2\"];\n    if (vy != 0) els.add('${round(vy)}t');\n    if (h != 0) els.add('${round(h)}');\n    return 'h(t) = ${els.join(' + ')}';\n  }\n  \n  String horizEq() {\n    return 'x(t) = ${round(vx)}t';\n  }\n  \n  double height(double t) {\n    return round(-16 * t * t + vy * t + h);\n  }\n  \n  double horiz(double t) {\n    return round(vx * t);\n  }\n  \n  List<double> landing() {\n    double d = vy * vy + 64 * h;\n    double t = (vy + sqrt(d)) \/ 32;\n    return [round(vx * t), 0, round(t)];\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75425,"user_id":null,"body":"import 'dart:math';\n\nclass Projectile {\n  num h;\n  num v;\n  num a;\n  num _vx;\n  num _vy;\n  \n  Projectile(num h, num v, num a){\n    this.h = h;\n    this.v = v;\n    this.a = a;\n    this._vx = v * cos( pi * a \/ 180 );\n    this._vy = v * sin( pi * a \/ 180 );\n  }\n  \n  String _formatNumber(num n) => \"${ n == n.floor() ? n.toStringAsFixed(1) : (n * 1000).round() \/ 1000 }\";\n  \n  String _verticalEq() => \"${ _formatNumber(this._vy) }\";\n  \n  String _horizEq() => \"${ _formatNumber(this._vx) }\";\n  \n  String horizEq() => \"x(t) = ${ _horizEq() }t\";\n  \n  String heightEq() => \"h(t) = -16.0t^2 + ${ _verticalEq() }t${ h != 0 ? ' + ' + _formatNumber(h) : ''}\";\n  \n  num height(num t) => num.parse((-16 * t * t + _vy * t + h).toStringAsFixed(3));\n  \n  num horiz(num t) => num.parse((_vx * t).toStringAsFixed(3));\n  \n  List<num> landing(){\n    List<num> result = [];\n    num t = ( _vy + sqrt( _vy * _vy + 4 * 16 * h ) ) \/ (2 * 16);\n    num x = t * _vx;\n    result.add(num.parse(x.toStringAsFixed(3)));\n    result.add(0);\n    result.add(num.parse(t.toStringAsFixed(3)));\n    return result;\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75426,"user_id":null,"body":"import 'dart:math';\n\nclass Projectile {\n    int h0;\n    int v0;\n    int a;\n    double yVel;\n    double xVel;\n    Projectile(this.h0, this.v0, this.a){this.yVel = v0*sin(a*pi\/180);this.xVel = v0*cos(a*pi\/180);}\n    \n    String heightEq (){ \n      \n      return h0 == 0 ? 'h(t) = -16.0t^2 + ${yVel.toStringAsFixed(3)}t' : \n      'h(t) = -16.0t^2 + ${double.parse(yVel.toStringAsFixed(3))}t + ${h0.toStringAsFixed(1)}';}\n  \n  String horizEq (){\n    return 'x(t) = ${double.parse(xVel.toStringAsFixed(3))}t';\n  }\n  double height(double t) {\n    double c = -16 * t * t + yVel * t + h0;\n    return double.parse((c).toStringAsFixed(3));\n  }\n\n  double horiz(double t) {\n    double f = xVel * t;\n    return double.parse((f).toStringAsFixed(3));\n  }\n  \n  List<double> landing (){\n    double y = 0;\n    double t = (yVel + sqrt(pow(yVel,2)+4*16*h0))\/(2*16);\n    double x = xVel*t;\n    return [double.parse(x.toStringAsFixed(3)),y,double.parse(t.toStringAsFixed(3))];\n  } \n \n  }\n  \n  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75427,"user_id":null,"body":"import 'dart:math';\nnum round(num toRound) {\n  if (toRound.toInt() == toRound) {\n    return (double.parse(toRound.toStringAsFixed(1)));\n  }\n  return(double.parse(toRound.toStringAsFixed(3)));\n}\n\nclass Projectile {\n  int startingHeight;\n  int startingVelocity;\n  int startingAngle;\n  \n  Projectile(this.startingHeight, this.startingVelocity, this.startingAngle);\n  \n  String heightEq() {\n    String expression = 'h(t) = -16.0t^2 + ${round(sin((startingAngle * pi) \/ 180.0) * startingVelocity)}t';\n    if (startingHeight != 0) {\n      expression +=  ' + ${startingHeight}.0';\n    }\n    return (expression);\n  }\n  \n  String horizEq() {\n    return ('x(t) = ${round(cos((startingAngle * pi) \/ 180.0) * startingVelocity)}t');\n  }\n  \n  num height(num t) {\n    num result = -16.0 * (t * t) + sin((startingAngle * pi) \/ 180.0) * startingVelocity * t + startingHeight;\n    return (round(result));\n  }\n  \n  num horiz(num t) {\n    num result = cos((startingAngle * pi) \/ 180.0) * startingVelocity * t;\n    return (round(result));\n  }\n  \n  List<num> landing() {\n    \/\/solve the quadratic equation of function heightEq() in order to know the time at which the projectile hit the ground.\n    num b = sin((startingAngle * pi) \/ 180.0) * startingVelocity;\n    num delta = pow(b ,2) - 4 * (-16.0) * startingHeight;\n    num t = ((b * -1) - sqrt(delta)) \/ -32.0;\n    t = t == 0 ? ((b - sqrt(delta)) \/ -32.0) : t;\n    \n    return ([horiz(t), 0.0, round(t)]);\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75428,"user_id":null,"body":"import 'dart:math';\nclass Projectile {\n  final int h0; \/\/in feet\n  final int v0; \/\/in feet\n  final int a; \/\/in degrees\n  double yVel;\n  double xVel;\n  Projectile(this.h0, this.v0, this.a) {\n    this.yVel = v0 * sin(a * pi \/ 180);\n    this.xVel = v0 * cos(a * pi \/ 180);\n  }\n\n  String heightEq() {\n    if (h0 == 0) {\n      return \"h(t) = -16.0t^2 + \" +\n          double.parse(yVel.toStringAsFixed(3)).toString() +\n          \"t\";\n    } else {\n      return \"h(t) = -16.0t^2 + \" +\n          double.parse(yVel.toStringAsFixed(3)).toString() +\n          \"t + \" +\n          h0.toStringAsFixed(1);\n    }\n  }\n\n  String horizEq() {\n    return \"x(t) = \" + double.parse(xVel.toStringAsFixed(3)).toString() + \"t\";\n  }\n\n  double height(double t) {\n    double c = -16 * t * t + yVel * t + h0;\n    return double.parse((c).toStringAsFixed(3));\n  }\n\n  double horiz(double t) {\n    double f = xVel * t;\n    return double.parse((f).toStringAsFixed(3));\n  }\n\n  List<double> landing() {\n    double t2 =\n        (1 \/ 32) * yVel + sqrt(((yVel \/ 32) * (yVel \/ 32)) + (1 \/ 16) * h0);\n    double x = xVel * t2;\n    t2 = double.parse(t2.toStringAsFixed(3));\n    x = double.parse(x.toStringAsFixed(3));\n    double y = 0;\n    List<double> result = List(3);\n    result[0] = x;\n    result[1] = y;\n    result[2] = t2;\n    return result;\n  }\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5aff237c578a14752d0035ae":[{"id":75429,"user_id":571,"body":"import 'dart:math';\nint predict_age(a,b,c,d,e,f,g,h)=>sqrt(a*a+b*b+c*c+d*d+e*e+f*f+g*g+h*h)~\/2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75430,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1,int age2, int age3, int age4, int age5, int age6, int age7, int age8) {\n  List<int> ages = [age1, age2, age3, age4, age5, age6, age7, age8];\n  int sum = ages.fold(0, (prev, element)=>(element * element) + prev);\n  return (sqrt(sum) \/ 2).floor();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75431,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1, int age2, int age3, int age4, int age5, int age6, int age7, int age8) {\n  return sqrt([age1, age2, age3, age4, age5, age6, age7, age8].map((i) => i * i).reduce((result, el) => result + el)) ~\/ 2;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75432,"user_id":1148,"body":"import 'dart:math';\n\n\/\/ No varargs in dart. Sigh..\nint predict_age(int age1,int age2, int age3, int age4, int age5, int age6, int age7, int age8) => \n  sqrt(\n    [age1, age2, age3, age4, age5, age6, age7, age8]\n      .map((age) => age * age)\n      .fold(0, (acc, e) => acc + e)\n  ) ~\/ 2;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75433,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1, int age2, int age3, int age4, int age5, int age6,\n    int age7, int age8) {\n  var ages = [age1, age2, age3, age4, age5, age6, age7, age8];\n  var sum = 0;\n  for (var age in ages)\n    sum += pow(age, 2);\n  return sqrt(sum) ~\/ 2;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75434,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1,int age2, int age3, int age4, int age5, int age6, int age7, int age8) {\n var total_double =sqrt(pow(age1,2) + pow(age2,2) + pow(age3,2) + pow(age4,2) + pow(age5,2) + pow(age6,2) + pow(age7,2) + pow(age8,2))\/2;\n int total_int = total_double.toInt();\n return total_int;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75435,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1,int age2, int age3, int age4, int age5, int age6, int age7, int age8) {\n List<int> ages = [age1, age2, age3, age4, age5, age6, age7, age8];\n \n  \n\n   return  (sqrt(ages.map((age) => age*age).toList().reduce((value, element) => value + element))\/2).toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75436,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1,int age2, int age3, int age4, int age5, int age6, int age7, int age8) {\n  \n  List<int> ageList = [age1, age2, age3, age4, age5, age6, age7, age8];\n  List<int> multiAgeList = new List();\n  num result;\n  for (int i = 0; i < ageList.length; i++) {\n    var x = pow(ageList[i], 2);\n    multiAgeList.add(x);\n    result = (sqrt(multiAgeList.reduce((a, b) => a + b)) \/ 2).floor();\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75437,"user_id":null,"body":"import 'dart:math';\nint predict_age(int age1,int age2, int age3, int age4, int age5, int age6, int age7, int age8) {\n  final List<int> ages = [age1, age2, age3, age4, age5, age6, age7, age8];\n  \n  return sqrt(ages.fold(0, (prev, curr) => prev + curr * curr)) ~\/ 2;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75438,"user_id":null,"body":"import 'dart:math';\npredict_age(int age1, int age2, int age3, int age4, int age5, int age6, int age7,\n    int age8) {\n  List<int> ages = [age1, age2, age3, age4, age5, age6, age7, age8];\n  int sum = 0;\n  for (int i = 0; i < ages.length; i++) {\n    sum += ages[i] * ages[i];\n  }\n  double result = sqrt(sum) \/ 2;\n  return result.toInt();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b077ebdaf15be5c7f000077":[{"id":75439,"user_id":null,"body":"String count_sheep(numb) => List.generate(numb, (int i) => \"${i+1} sheep...\").join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75440,"user_id":null,"body":"String count_sheep(numb) {\n  var result = '';\n  for (int i = 1; i <= numb; i++) {\n    result += '${i} sheep...';\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75441,"user_id":null,"body":"String count_sheep(numb) => List.generate(numb, (i)=>'${++i} sheep...').join();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75442,"user_id":53,"body":"String count_sheep(n) {\n  return List.generate(n, (i) => \"${i+1} sheep...\").join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75443,"user_id":null,"body":"String count_sheep(numb)=>[for(int i=1;i<=numb;i++)'$i sheep...'].join('');","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75444,"user_id":null,"body":"String count_sheep(numb) {\n  var sheeps = '';\n  for (var i = 0; i < numb; i++) {\n    sheeps += ('${i + 1} sheep...');\n  }\n  return sheeps;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75445,"user_id":null,"body":"String count_sheep(int numb) {\n  String sheep = '';\n  for (int i = 1; i <= numb; i++) {\n    sheep += '$i sheep...';\n  } return sheep;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75446,"user_id":null,"body":"String count_sheep(numb) {\n  \/\/ your code here\n  \n  String word =  ' sheep...';\n  String finalWord = '';\n  \n  for (int i = 1; i <= numb; i++){\n    finalWord +=  i.toString() + word;\n  }\n  return finalWord;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75447,"user_id":null,"body":"String count_sheep(numb) => numb > 0 ? \"${count_sheep(numb -1)}$numb sheep...\" : \"\";","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75448,"user_id":null,"body":"String count_sheep(numb) {\n  return List.generate(numb, (i)=> '${i+1} sheep...').join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b0c0ec907756ffcff00006e":[{"id":75449,"user_id":null,"body":"import \"dart:math\";\nnum quadratic(a, b, c) => (2*c) \/ (-b - sqrt(b.toDouble()*b.toDouble() - 4*a*c));\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75450,"user_id":645,"body":"num quadratic(num a, num b, num c) => -c \/ b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75451,"user_id":null,"body":"num quadratic(a, b, c) {\n  return -c \/ b;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75452,"user_id":null,"body":"import 'dart:math';\n\nnum quadratic(a, b, c) {\n  num x1 = -b \/ a;\n  num x2 = -c \/ b;\n  return x1.abs() < x2.abs() ? x1 : x2;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75453,"user_id":527,"body":"num quadratic(num _a, num b, num c) {\n  return -c \/ b;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75454,"user_id":645,"body":"num quadratic(a, b, c) => -c \/ b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b180e9fedaa564a7000009a":[{"id":75455,"user_id":null,"body":"String solve(String s) => RegExp('[A-Z]').allMatches(s).length > RegExp('[a-z]').allMatches(s).length ? s.toUpperCase() : s.toLowerCase(); \n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75456,"user_id":null,"body":"String solve(String str) {\n  return RegExp(r'[A-Z]').allMatches(str).length >\n          RegExp(r'[a-z]').allMatches(str).length\n      ? str.toUpperCase()\n      : str.toLowerCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75457,"user_id":645,"body":"String solve(String s) {\n  List<String> split = s.split('');\n  int lowercase = split.fold(0, (acc, item) => item.toLowerCase() == item ? acc + 1 : acc);\n  int uppercase = split.fold(0, (acc, item) => item.toUpperCase() == item ? acc + 1 : acc);\n  return uppercase <= lowercase ? s.toLowerCase() : s.toUpperCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75458,"user_id":null,"body":"String solve(String s) {\n  int uppers = 0;\n  int lowers = 0;\n  for (int i = 0; i < s.length; i++) {\n    (s[i] == s[i].toLowerCase()) ? lowers++ : uppers++;\n  }\n  return uppers > lowers ? s.toUpperCase() : s.toLowerCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75459,"user_id":null,"body":"String solve(String s) =>\n  s.split(\"\").where((a) => a == a.toUpperCase()).toList().length > s.split(\"\").where((a) => a == a.toLowerCase()).toList().length ? s.toUpperCase() : s.toLowerCase();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75460,"user_id":null,"body":"String solve(String s) {\n  bool isUppercase(String value) => value.toUpperCase() == value;\n  \n  if (s.split('').where(isUppercase).length > s.length \/ 2) {\n    return s.toUpperCase();\n  }\n  return s.toLowerCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75461,"user_id":null,"body":"String solve(String s) {\n  bool isUppercase(String str) {\n    return str == str.toUpperCase();\n  }\n\n  int u = 0;\n  int l = 0;\n  List.generate(s.length, (index) {\n    isUppercase(s[index]) ? u++ : l++;\n  });\n  if (u > l) return s.toUpperCase();\n  return s.toLowerCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75462,"user_id":null,"body":"\n  String solve(String s) {\n  \/\/ your code here\n\nList  a =  s.split(\"\").where((e)=>e == e.toUpperCase()).toList();\nreturn s.length\/2 >= a.length ? s= s.toLowerCase() : s= s.toUpperCase();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75463,"user_id":null,"body":"String solve(String s) {\n  \/\/ your code here\n\nList  a=  s.split(\"\").where((e)=>e == e.toUpperCase()).toList();\n  if(s.length\/2 >= a.length){\n    s= s.toLowerCase();\n\n  }\n  else  {\n     s= s.toUpperCase();\n  }\n\n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75464,"user_id":null,"body":"String solve(String s) {\n  final count = s.codeUnits.fold(0, (int c, e) => e >= 97 ? c + 1 : c);\n  return count >= s.length \/ 2 ? s.toLowerCase() : s.toUpperCase();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b1cd19fcd206af728000056":[{"id":75465,"user_id":null,"body":"import 'dart:math';\n\ndouble solve(double m) {\n    return (2 * m + 1 - sqrt(4 * m + 1)) \/ (2 * m);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75466,"user_id":null,"body":"import 'dart:math'; \/\/ sqrt\n\n\/\/ Wolfram Alpha will tell you that m = x\/(x-1)^2, which can be solved for x\ndouble solve(double m) {\n    var k = (2 + 1\/m)\/2;    \n    return k - sqrt(k*k - 1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75467,"user_id":50,"body":"import 'dart:math';\n\ndouble solve(double m) {\n  return (2*m+1- pow((4*m+1),0.5))\/(2*m);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75468,"user_id":null,"body":"import 'dart:math';\n\ndouble solve(double m) => (2 * m + 1 - sqrt(4 * m + 1)) \/ (2 * m);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75469,"user_id":null,"body":"import 'dart:math';\n\ndouble solve(double s) {\n    return (1 - sqrt(4 * s + 1)) \/ (2.0 * s) + 1;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75470,"user_id":527,"body":"import 'dart:math';\n\ndouble solve(double m) {\n  return 1 - (sqrt(m + 0.25) - 0.5) \/ m;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75471,"user_id":492,"body":"import 'dart:math';\n\ndouble solve(double m) {\n    double s = sqrt(4 * m + 1);\n    return (2 * m + 1 - s) \/ (2 * m);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75472,"user_id":null,"body":"import 'dart:math';\ndouble solve(double m) {\n\/\/ https:\/\/www.wolframalpha.com\/input?i2d=true&i=Sum%5BnPower%5Bx%2Cn%5D%2C%7Bn%2C1%2C%E2%88%9E%7D%5D\n  \/\/ m = x\/((x-1)^2)\n\/\/ https:\/\/www.wolframalpha.com\/input?i=y%2F%28y-1%29%5E2-x%3D0\n  \/\/ x= (2m-sqrt(4m+1)+1)\/2m\n  double x = (2 * m - sqrt(4 * m + 1) + 1) \/ (2 * m);\n  return x;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75473,"user_id":null,"body":"\ndouble solve(double m) {\n double abs(double a){\n   return a>=0?a:-a;\n }\n  const maxLegth=1200;\n  bool flag_return=false;\n  double x=-1;\n  double  sequence (double x){\n    const merr=1e-12;\n    double memberx=1;\n    double member;\n    double sum=0;\n    int koeff=1;\n    do {\n      memberx=memberx*x;\n      member=koeff*memberx;\n      sum=sum+member;      \n      if ((sum-m)>merr) return double.infinity;\n      koeff++;\n    }while (member>merr);\n    if (abs(sum-m)<=merr) return m;\n    return -double.infinity;\n  }\n  double seq;\n  void searchX(double left, double right,[int lvl=1]){\n    double middle=(left+right)\/2.0;\n    if (lvl==maxLegth){x=middle; flag_return=true;}\n    if(flag_return) return;\n    \n    seq=sequence(middle);    \n    if (seq==double.infinity)\n    searchX(left, middle,lvl+1);\n    else if(seq==-double.infinity)\n    searchX(middle, right,lvl+1);\n    else { x=middle;flag_return=true;}\n  }\n  \n searchX(0,m<1?m:1);\n return x;\n \n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75474,"user_id":null,"body":"import 'dart:math' as math;\n\ndouble solve(double m) {\n    final d = 4 * m + 1;\n\n    return (2 * m + 1 - math.sqrt(d)) \/ (2 * m);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b277e94b6989dd1d9000009":[{"id":75475,"user_id":250,"body":"int tv_remote(String text) {\n  String keyboard = \"abcde123fghij456klmno789pqrst.@0uvwxyz_\/^ \";\n  Map<String, List<int>> keys = {};\n  \n  for (int i = 0; i < keyboard.length; i++) {\n    int x = i % 8;\n    int y = i ~\/ 8;\n    \n    keys[keyboard[i]] = [x,y];\n  }\n  \n  int sum = 0;\n  bool uppercase = false;\n  List<int> prev = [0,0];\n  for (int i = 0; i < text.length; i++) {\n    String c = text[i];\n    \n    bool switchCase = RegExp(r\"[a-z]\", caseSensitive:false).hasMatch(c) && uppercase != (c.toUpperCase() == c);\n    \n    List<int> pos = switchCase ? keys[\"^\"]! : keys[c.toLowerCase()]!;\n    int d = (prev[0]-pos[0]).abs() + (prev[1]-pos[1]).abs();\n    prev = pos;\n    sum += d + 1;\n    if (switchCase) {\n      i--;\n      uppercase = !uppercase;\n    }\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75476,"user_id":null,"body":"int tv_remote(String s) {\n  String keyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_\/^ ';\n  int n = 0;\n  int x = 0;\n  int y = 0;\n  bool caps = false;\n\n  for (String c in s.split('')) {\n    if (RegExp('[A-Z]').hasMatch(c) && !caps || RegExp('[a-z]').hasMatch(c) && caps) {\n      caps = !caps;\n      n += 1 + x + (5 - y).abs();\n      x = 0;\n      y = 5;\n    }\n    \n    int p = keyboard.indexOf(c.toLowerCase());\n    int px = p % 8;\n    int py = p ~\/ 8;\n    n += 1 + (px - x).abs() + (py - y).abs();\n    x = px;\n    y = py;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75477,"user_id":null,"body":"class Keyboard {\n  List<String> keyboard = [\n    'abcde123fghij456klmno789pqrst.@0uvwxyz_\/\u25b2 ',\n    'ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_\/\u25b2 '\n  ];\n  int mode = 0;\n  List<int> prevCoordinate = [0, 0];\n\n  bool isNotCorrectMode(String symbol) => !keyboard[mode].contains(symbol);\n\n  List<int> _getButtonCoordinate(String symbol) {\n    return [\n      keyboard[mode].indexOf(symbol) % 8,\n      keyboard[mode].indexOf(symbol) ~\/ 8\n    ];\n  }\n\n  int _stepsToButton(String symbol) {\n    int result = 0;\n    List<int> symbolCoordinate = _getButtonCoordinate(symbol);\n    for (int i = 0; i < 2; i++) {\n      int steps = prevCoordinate[i] - symbolCoordinate[i];\n      result += (steps.isNegative) ? steps * -1 : steps;\n    }\n    prevCoordinate = symbolCoordinate;\n    return result;\n  }\n\n  int _changeMode() {\n    int steps = _stepsToButton('\u25b2');\n    mode = (mode == keyboard.length - 1) ? 0 : ++mode;\n    return steps + 1;\n  }\n\n  int pressButton(String symbol) {\n    int steps = 0;\n    while (isNotCorrectMode(symbol)) {\n      steps += _changeMode();\n    }\n    steps += _stepsToButton(symbol);\n    return steps + 1;\n  }\n}\n\nint tv_remote(String word) {\n  Keyboard keyboard = Keyboard();\n  int steps = 0;\n  for (String currentSymbol in word.split('')) {\n    steps += keyboard.pressButton(currentSymbol);\n  }\n  return steps;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75478,"user_id":null,"body":"int tv_remote(String word) {\n  List<List<String>> tvButtons = [\n    ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n    ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n    ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n    ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n    ['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n    ['shift', ' ', '', '', '', '', '', '']\n  ];\n  List<String> str = word.split('');\n  List<Map<int, int>> elemList = [];\n  int s = 0;\n  bool isUpperCase = false;\n  Map<int, int> mapFirst = {};\n  \n  str.forEach((String elem) {\n    for (int i = 0; i < tvButtons.length; i++) {\n      for (int j = 0; j < tvButtons[i].length; j++) {\n        Map<int, int> map = {i: tvButtons[i].indexOf(tvButtons[i][j])};\n        if (elem == tvButtons[i][j]) {\n          if (isUpperCase && ((i != 5 && j < 5) || elem == 'z')) {\n            elemList.add({5: 0});\n            isUpperCase = false;\n          }\n          elemList.add(map);\n        } else if (elem == tvButtons[i][j].toUpperCase()) {\n          if (!isUpperCase) {\n            elemList.add({5: 0});\n          }\n          elemList.add(map);\n          isUpperCase = true;\n        }\n      }\n    }\n  });\n\n  elemList.forEach((Map<int, int> elem) {\n    if (mapFirst.isEmpty) {\n      s += elem.keys.first + elem[elem.keys.first]! + 1;\n    } else {\n      int key = mapFirst.keys.first - elem.keys.first;\n      int value = mapFirst[mapFirst.keys.first]! - elem[elem.keys.first]!;\n      if (key < 0) {\n        key = -key;\n      }\n      if (value < 0) {\n        value = -value;\n      }\n\n      s += key + value + 1;\n    }\n    mapFirst = elem;\n  });\n\n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75479,"user_id":null,"body":"int tv_remote(String word) {\n  print(word);\n  bool shift = false;\n  int count = 0;\n  String last = 'a';\n  for(String s in word.split('')) {\n    \/\/ if needs shift to be pressed\n    if(needsShift(s, shift)) {\n      count += tv_remote_single_character('*', last);\n      shift = !shift;\n      last = '*';\n    }\n    count += tv_remote_single_character(s, last);\n    last = s;\n  }\n  return count;\n}\n\nint tv_remote_single_character(String c, String last){\n  assert(c.length == 1);\n  assert(last.length == 1);\n  \n  int index = keyboard.indexOf(c.toLowerCase());\n  int lastIndex = keyboard.indexOf(last.toLowerCase());\n  \n  int yDiff = (index ~\/ 8 - lastIndex ~\/ 8).abs();\n  int xDiff = (index % 8 - lastIndex % 8).abs();\n  \n  return xDiff + yDiff + 1;\n}\n\nbool needsShift(String s, bool shiftIsOn){\n  if('abcdefghijklmnopqrstuvwxyz'.toUpperCase().contains(s) && !shiftIsOn){\n    return true;\n  }\n  if('abcdefghijklmnopqrstuvwxyz'.contains(s) && shiftIsOn){\n    return true;\n  }\n  return false;\n}\n\nfinal keyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_\/* ';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75480,"user_id":250,"body":"int tv_remote(String text) {\n  String keyboard = \"abcde123fghij456klmno789pqrst.@0uvwxyz_\/^ \";\n  Map<String, List<int>> keys = {};\n  \n  print(text);\n  \n  for (int i = 0; i < keyboard.length; i++) {\n    int x = i % 8;\n    int y = i ~\/ 8;\n    \n    keys[keyboard[i]] = [x,y];\n  }\n  \n  int sum = 0;\n  bool uppercase = false;\n  List<int> prev = [0,0];\n  for (int i = 0; i < text.length; i++) {\n    String c = text[i];\n    \n    bool switchCase = RegExp(r\"[a-z]\", caseSensitive:false).hasMatch(c) && uppercase != (c.toUpperCase() == c);\n    \n    List<int> pos = switchCase ? keys[\"^\"]! : keys[c.toLowerCase()]!;\n    int d = (prev[0]-pos[0]).abs() + (prev[1]-pos[1]).abs();\n    prev = pos;\n    sum += d + 1;\n    if (switchCase) {\n      i--;\n      uppercase = !uppercase;\n    }\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75481,"user_id":null,"body":"int tv_remote(String word) {\n  \/\/ Your code here!!\n  Map<String, List<int>> data = {};\n  List<String> keyboard = [ \"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_\/\", \"C~\"];\n  String currentString = \"a\";\n  String currentCase = \"a\";\n  int x = 0, y = 0, answer = 0;\n  \n  for(var row in keyboard){\n    y = 0;\n    for(var char in row.split(\"\")){\n      data[char] = [x,y];\n      y++;\n    }\n    x++;\n  }\n  \n  for(var i in word.split(\"\")){\n    int distance = 0;\n    \n    if(i == \" \"){ i = \"~\"; }\n    \n    if(((i.substring(0, 1).toUpperCase() == i.substring(0, 1) && i.substring(0, 1).toLowerCase() != i.substring(0, 1) && currentCase == \"a\") || \n       (i.substring(0, 1).toLowerCase() == i.substring(0, 1) && i.substring(0, 1).toUpperCase() != i.substring(0, 1) && currentCase == \"A\"))){\n\n      if(currentCase == \"a\"){\n        currentCase = \"A\";\n      }else{\n        currentCase = \"a\";\n      }\n      \n      int distanceToCase = getDistance(data[currentString.toLowerCase()], data[\"C\"]);\n      int distanceFromCase = getDistance(data[\"C\"], data[i.toLowerCase()]);\n      distance =  distanceToCase + 1 + distanceFromCase + 1;\n    }\n    else{\n      distance = getDistance(data[currentString.toLowerCase()], data[i.toLowerCase()]) + 1;\n    }\n    currentString = i;\n    answer += distance;\n  }\n  return answer;\n}\n\nint getDistance(from, to){\n  int x = (from[0]-to[0]);\n  int y = (from[1]-to[1]);\n  return x.abs() + y.abs();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75482,"user_id":null,"body":"int tv_remote(String word) {\n    \/\/ Your code here!!\n  List<String> characters=[];\n  List<int> charPositions=[];\n  List<String> keyboardTemp=[];\n  keyboardTemp.add('a\tb\tc\td\te\t1\t2\t3');\n  keyboardTemp.add('f\tg\th\ti\tj\t4\t5\t6');\n  keyboardTemp.add('k\tl\tm\tn\to\t7\t8\t9');\n  keyboardTemp.add('p\tq\tr\ts\tt\t.\t@\t0');\n  keyboardTemp.add('u\tv\tw\tx\ty\tz\t_\t\/');\n  keyboardTemp.add('aA\tSP\t\t\t\t\t\t');\n  for(int i=0;i<6;i++){\n    String act=keyboardTemp[i];\n    List<String> actList=act.split('\t');\n    actList.forEach((act){\n      String act2=act.toUpperCase();\n      if(characters.indexOf(act)==-1){\n       characters.add(act); \n       charPositions.add(i);\n      }\n      if(characters.indexOf(act2)==-1&&i<5){\n       characters.add(act2);\n       charPositions.add(i);\n      }    \n    });\n  }\n  \n  bool upperCase=false;\n  int cont=0;\n  String prev='a';\n  while(word.length>0){\n    String act=word[0];\n    int unicode=word.codeUnitAt(0);\n    int toAdd=1;\n    int difX=0;\n    int difY=0;\n    int prevY=charPositions[characters.indexOf(prev)];\n    int prevX=keyboardTemp[prevY].split('\t').indexOf(prev);\n    if(prevX==-1){\n      prevX=keyboardTemp[prevY].split('\t').indexOf(prev.toLowerCase());\n    }\n    int actX=0;\n    int actY=0;\n    if((isUpperCase(unicode)&&!upperCase)||(isLowerCase(unicode)&&upperCase)){\n      actY=charPositions[characters.indexOf('aA')];\n      actX=keyboardTemp[actY].split('\t').indexOf('aA');\n      prev='aA';\n      upperCase=!upperCase;\n    }\n    else if(act==' '){\n      actY=charPositions[characters.indexOf('SP')];\n      actX=keyboardTemp[actY].split('\t').indexOf('SP');\n      prev='SP';\n      word=word.substring(1); \n    }\n    else{\n     actY=charPositions[characters.indexOf(act)];\n     actX=keyboardTemp[actY].split('\t').indexOf(act.toLowerCase());\n     prev=act;\n     word=word.substring(1); \n    }\n    difX=actX-prevX;\n    difX=difX.abs();\n    difY=actY-prevY;\n    difY=difY.abs();\n    toAdd+=difX+difY;\n    cont+=toAdd;\n  }\n  print(cont.toString());\n  return cont;\n}\n\nbool isUpperCase(int unicode){\n  return unicode>=65&&unicode<=90;\n}\n\nbool isLowerCase(int unicode){\n  return unicode>=97&&unicode<=122;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75483,"user_id":null,"body":"int tv_remote(String word) {\n\n  Position nowImHere = Position(0,0);\n  final space = Position(1,5);\n  final mau = Position(0,5);\n  \n  Mode mode = Mode.LOWERCASE;\n  \n  int countPosition = 0;\n  List<String> listLetterOfWord = word.split(\"\");\n  \n  List<Row> listOfRowsToLowerCase= [\n    Row(0,[\"a\",\"b\",\"c\",\"d\",\"e\",\"1\",\"2\",\"3\"]),\n    Row(1,[\"f\",\"g\",\"h\",\"i\",\"j\",\"4\",\"5\",\"6\"]),\n    Row(2,[\"k\",\"l\",\"m\",\"n\",\"o\",\"7\",\"8\",\"9\"]),\n    Row(3,[\"p\",\"q\",\"r\",\"s\",\"t\",\".\",\"@\",\"0\"]),\n    Row(4,[\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"_\",\"\/\"]),\n    Row(5,[\"aA\",\"SP\",\"\",\"\",\"\",\"\",\"\",\"\"]),\n  ];\n  \n List<String> specialChar = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\",\".\",\"@\",\"_\",\"\/\"];\n  \n  listLetterOfWord.forEach((letter){\n  \n    bool reverse = false;\n    Position nextPosition = Position(0,0);\n    bool isChanged = false;\n    Mode newMode = Mode.LOWERCASE;\n    \n    if(letter == \" \"){\n           int numberOfSteptoSpace = numberOfStep(space,nowImHere) + 1;\n           countPosition += numberOfSteptoSpace;\n           nowImHere = space;\n         } \n    \n    for(Row row in listOfRowsToLowerCase){\n         \n        if(row.list.contains(letter.toLowerCase())){\n         \n         \n            if(specialChar.contains(letter)){\n               isChanged = false;\n            } else {\n                if(letter != letter.toLowerCase()){\n                  newMode = Mode.UPPERCASE;\n                }else{\n                  newMode = Mode.LOWERCASE;\n                }\n          \n                if(newMode != mode) {\n                  isChanged = true;\n                }else {\n                  isChanged = false;\n                 }       \n               mode = newMode;\n            }\n           \n         final indexOfElement = row.getIndexOfElement(letter.toLowerCase());\n         \n         nextPosition.x = indexOfElement;\n         nextPosition.y = row.index;\n         \n         if(isChanged){\n          int numberOfSteptoMau = numberOfStep(mau,nowImHere) + 1;\n          countPosition += numberOfSteptoMau;\n          nowImHere = mau;\n         }\n        \n         \n         int step = numberOfStep(nextPosition,nowImHere);\n         countPosition = countPosition + step + 1;\n         nowImHere = nextPosition;\n         \n         break;\n         \n         } else {\n         \n         \n         if(nextPosition.y == 5) {\n           reverse = true;\n         }\n         \n         if(reverse){\n           nextPosition.y--;\n         } else {\n           nextPosition.y++;\n         }\n         \n       }\n    }\n     });\n  \n  return countPosition;\n}\n\nint numberOfStep (Position nextPosition, Position actualPosition){\n  int difX = 0;\n  int difY = 0;\n  if(nextPosition.x > actualPosition.x){\n    difX = nextPosition.x - actualPosition.x;\n  } else {\n     difX = actualPosition.x - nextPosition.x;\n  }\n  \n  if(nextPosition.y > actualPosition.y){\n    difY = nextPosition.y - actualPosition.y;\n  } else {\n    difY = actualPosition.y - nextPosition.y;\n  }\n  \n  return difX + difY;\n}\n\nclass Row {\n  \n  Row(this._index, this._list);\n  \n  final _list;\n  final _index;\n  \n  get list => [..._list];\n  \n  get index => _index;\n  \n  int getIndexOfElement(String char) =>  _list.indexWhere((c) => c==char);\n  \n}\n\nclass Position {\n  Position(this._x, this._y);\n\n   int _x;\n   int _y;\n  \n  \n   int get x => _x;\n   int get y => _y;\n  \n   set x(int n) => this._x = n;\n  \n   set y(int n) => this._y = n;\n  \n  @override\n  String toString(){\n    return 'Position( x: $x, y: $y)';\n  }\n  \n}\n\nenum Mode {\n  UPPERCASE,\n  LOWERCASE,\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75484,"user_id":null,"body":"int tv_remote(String words) {\n  var letters = <String, List<int>>{};\n  var alph= [\"abcde123\",\n             \"fghij456\",\n             \"klmno789\",\n             \"pqrst.@0\",\n             \"uvwxyz_\/\",\n             \"\u21e7 \"];\n  for(var e1 in alph.asMap().entries) {\n    var y = e1.key;\n    var row = e1.value;\n    for(var e2 in row.split('').asMap().entries) {\n      var x = e2.key;\n      var c = e2.value;\n      letters[c] = [x, y];\n    }\n  }\n  var reg = RegExp(r'((?:^|[a-z])[^A-Z]*)([A-Z])');\n  words = words.replaceAllMapped(reg, (m) {\n    var c = m.group(0)!;\n    return m.group(1)! + '\u21e7' + c[c.length-1];\n  });\n  reg = RegExp(r'([A-Z][^a-z]*)([a-z])');\n  words = words.replaceAllMapped(reg, (m) {\n    var c = m.group(0)!;\n    return m.group(1)! + '\u21e7' + c[c.length-1];\n  });\n  words = words.toLowerCase();\n  int out = 0;\n  for(int i = 0; i < words.length; i++) {\n    var c1 = (\"a\" + words)[i];\n    var c2 = words[i];\n    out += (letters[c1]![0] - letters[c2]![0]).abs() + (letters[c1]![1] - letters[c2]![1]).abs() + 1;\n  }\n  return out;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b2c2c95b6989da552000120":[{"id":75485,"user_id":250,"body":"import \"dart:math\";\n\nint tv_remote(String text) {\n  String keyboard = \"abcde123fghij456klmno789pqrst.@0uvwxyz_\/^ \";\n  Map<String, List<int>> keys = {};\n  \n  for (int i = 0; i < keyboard.length; i++) {\n    int x = i % 8;\n    int y = i ~\/ 8;\n    \n    keys[keyboard[i]] = [x,y];\n  }\n  \n  int sum = 0;\n  bool uppercase = false;\n  List<int> prev = [0,0];\n  for (int i = 0; i < text.length; i++) {\n    String c = text[i];\n    \n    bool switchCase = RegExp(r\"[a-z]\", caseSensitive:false).hasMatch(c) && uppercase != (c.toUpperCase() == c);\n    \n    List<int> pos = switchCase ? keys[\"^\"] : keys[c.toLowerCase()];\n    \n    int px = prev[0];\n    int py = prev[1];\n    int x = pos[0];\n    int y = pos[1];\n    int dx = min((px-x).abs(),8-(px-x).abs());\n    int dy = min((py-y).abs(),6-(py-y).abs());\n    \n    int d = dx+dy;\n    prev = pos;\n    sum += d + 1;\n    if (switchCase) {\n      i--;\n      uppercase = !uppercase;\n    }\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75486,"user_id":null,"body":"\/\/ types\nclass Position {\n  final int x;\n  final int y;\n  \n  const Position({this.x = 0, this.y = 0});\n  \n  Position copyWith({int x, int y}) {\n    return Position(\n      x: x ?? this.x,\n      y: y ?? this.y,\n    );\n  }\n}\n\nenum LatterMode {\n  uppercase,\n  lowercase\n}\n\n\/\/ utils\nString getKeyboardElement(List<List<String>> keyboard, Position position) {\n  return keyboard[position.x][position.y];\n}\n\nPosition getKeyboardElementPosition(List<List<String>> keyboard, String key) {\n  final int y = keyboard.indexWhere((rowElements) => rowElements.contains(key));\n  final x = keyboard[y].indexOf(key);\n  return Position(x: x, y: y);\n}\n\nint calcLowestDifference(int a, int b, int c) {\n  final xDifferenceRaw = a - b;\n  final xDifference = xDifferenceRaw.isNegative ? -xDifferenceRaw : xDifferenceRaw;\n  final xDifferenceReverse = c - a + b;\n  final xDifferenceReverseBack = a + (c - b);\n  return ([xDifference, xDifferenceReverse, xDifferenceReverseBack]..sort()).first;\n}\n\nconst List<List<String>> keyboard = [\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"],\n  [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"],\n  [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"],\n  [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"],\n  [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"\/\"],\n  [\"aA\", \"SP\", \"\", \"\", \"\", \"\", \"\", \"\"],\n];\nfinal keyboardRows = keyboard.length;\nfinal keyboardCols = keyboard.first.length;\n\nint tv_remote(String word) {\n  Position currentPosition = Position();\n  int sum = word.length;\n  LatterMode currentMode = LatterMode.lowercase;\n\n  for (int i = 0; i < word.length; i++) {\n    final String latter = word[i];\n    \/\/ todo\n    bool repeatCicle = false;\n    Position latterPosition;\n\n    void changeLatterMode(LatterMode latterMode) {\n      latterPosition = getKeyboardElementPosition(keyboard, \"aA\");\n      currentMode = latterMode;\n      sum++;\n      repeatCicle = true;\n    }\n\n    if (currentMode == LatterMode.lowercase) {\n      if (latter != latter.toLowerCase()) changeLatterMode(LatterMode.uppercase);\n    } else {\n      if (latter != latter.toUpperCase()) changeLatterMode(LatterMode.lowercase);\n    }\n\n    if (!repeatCicle) {\n      latterPosition = latter == \" \"\n        ? getKeyboardElementPosition(keyboard, \"SP\")\n        : getKeyboardElementPosition(keyboard, currentMode == LatterMode.lowercase ? latter : latter.toLowerCase());\n    }\n\n    final xLowestDifference = calcLowestDifference(currentPosition.x, latterPosition.x, keyboardCols);\n    final yLowestDifference = calcLowestDifference(currentPosition.y, latterPosition.y, keyboardRows);\n\n    final sumOfDifferences = xLowestDifference + yLowestDifference;\n\n    sum += sumOfDifferences;\n\n    currentPosition = latterPosition.copyWith();\n\n    if (repeatCicle) i--;\n  };\n\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75487,"user_id":null,"body":"\/\/ extentions\nextension stringForEach on String {\n  void forEach(void Function(String) cb) {\n    this.split('').forEach(cb);\n  }\n}\n\n\/\/ types\nclass Position {\n  final int x;\n  final int y;\n  \n  const Position({this.x = 0, this.y = 0});\n  \n  Position copyWith({int x, int y}) {\n    return Position(\n      x: x ?? this.x,\n      y: y ?? this.y,\n    );\n  }\n\n  @override\n  String toString() {\n    return \"Position(x: $x, y: $y)\";\n  }\n}\n\nenum LatterMode {\n  uppercase,\n  lowercase\n}\n\n\/\/ utils\nString getKeyboardElement(List<List<String>> keyboard, Position position) {\n  return keyboard[position.x][position.y];\n}\n\nPosition getKeyboardElementPosition(List<List<String>> keyboard, String key) {\n  final int y = keyboard.indexWhere((rowElements) => rowElements.contains(key));\n  final x = keyboard[y].indexOf(key);\n  return Position(x: x, y: y);\n}\n\nint calcLowestDifference(int a, int b, int c) {\n  final xDifferenceRaw = a - b;\n  final xDifference = xDifferenceRaw.isNegative ? -xDifferenceRaw : xDifferenceRaw;\n  final xDifferenceReverse = c - a + b;\n  final xDifferenceReverseBack = a + (c - b);\n  return ([xDifference, xDifferenceReverse, xDifferenceReverseBack]..sort()).first;\n}\n\nconst List<List<String>> keyboard = [\n  [\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"],\n  [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"],\n  [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"],\n  [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"],\n  [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"\/\"],\n  [\"aA\", \"SP\", \"\", \"\", \"\", \"\", \"\", \"\"],\n];\nfinal keyboardRows = keyboard.length;\nfinal keyboardCols = keyboard.first.length;\n\nint tv_remote(String word) {\n  Position currentPosition = Position();\n  int sum = word.length;\n  LatterMode currentMode = LatterMode.lowercase;\n\n  for (int i = 0; i < word.length; i++) {\n    final String latter = word[i];\n    \/\/ todo\n    bool repeatCicle = false;\n    Position latterPosition;\n\n    void changeLatterMode(LatterMode latterMode) {\n      latterPosition = getKeyboardElementPosition(keyboard, \"aA\");\n      currentMode = latterMode;\n      sum++;\n      repeatCicle = true;\n    }\n\n    if (currentMode == LatterMode.lowercase) {\n      if (latter != latter.toLowerCase()) changeLatterMode(LatterMode.uppercase);\n    } else {\n      if (latter != latter.toUpperCase()) changeLatterMode(LatterMode.lowercase);\n    }\n\n    if (!repeatCicle) {\n      latterPosition = latter == \" \"\n        ? getKeyboardElementPosition(keyboard, \"SP\")\n        : getKeyboardElementPosition(keyboard, currentMode == LatterMode.lowercase ? latter : latter.toLowerCase());\n    }\n\n    final xLowestDifference = calcLowestDifference(currentPosition.x, latterPosition.x, keyboardCols);\n    final yLowestDifference = calcLowestDifference(currentPosition.y, latterPosition.y, keyboardRows);\n\n    final sumOfDifferences = xLowestDifference + yLowestDifference;\n\n    sum += sumOfDifferences;\n\n    currentPosition = latterPosition.copyWith();\n\n    if (repeatCicle) i--;\n  };\n\n  print(\"$word - sum: $sum\");\n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75488,"user_id":null,"body":"int tv_remote(String word) {\n    List<List<String>> tvButtons = [\n    ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n    ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n    ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n    ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n    ['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n    ['shift', ' ', '', '', '', '', '', '']\n  ];\n  List<String> str = word.split('');\n  List<Map<int, int>> elemList = [];\n  int s = 0;\n  bool isUpperCase = false;\n  Map<int, int> mapFirst = {};\n\n  str.forEach((String elem) {\n    for (int i = 0; i < tvButtons.length; i++) {\n      for (int j = 0; j < tvButtons[i].length; j++) {\n        Map<int, int> map = {i: tvButtons[i].indexOf(tvButtons[i][j])};\n        if (elem == tvButtons[i][j]) {\n          if (isUpperCase && ((i != 5 && j < 5) || elem == 'z')) {\n            elemList.add({5: 0});\n            isUpperCase = false;\n          }\n          elemList.add(map);\n        } else if (elem == tvButtons[i][j].toUpperCase()) {\n          if (!isUpperCase) {\n            elemList.add({5: 0});\n          }\n          elemList.add(map);\n          isUpperCase = true;\n        }\n      }\n    }\n  });\n\n  elemList.forEach((Map<int, int> elem) {\n    int key = elem.keys.first;\n    int value = elem[elem.keys.first];\n\n    if (mapFirst.isEmpty) {\n      if (elem.keys.first > 3) {\n        key = 6 - elem.keys.first;\n      }\n      if (elem[elem.keys.first] > 4) {\n        value = 8 - elem[elem.keys.first];\n      }\n      s += key + value + 1;\n    } else {\n      key = mapFirst.keys.first - elem.keys.first;\n      value = mapFirst[mapFirst.keys.first] - elem[elem.keys.first];\n\n      if (key > 3 || key < -3) {\n        if(mapFirst.keys.first> elem.keys.first)\n          key = 6 - mapFirst.keys.first + elem.keys.first;\n        else\n          key = 6 - elem.keys.first + mapFirst.keys.first;\n      }\n      if (value > 4 || value < -4) {\n        if(mapFirst[mapFirst.keys.first] > elem[elem.keys.first])\n          value = 8 - mapFirst[mapFirst.keys.first] + elem[elem.keys.first];\n        else\n          value = 8 - elem[elem.keys.first] + mapFirst[mapFirst.keys.first];\n      }\n      if (key < 0) {\n        key = -key;\n      }\n      if (value < 0) {\n        value = -value;\n      }\n\n      s += key + value + 1 ;\n    }\n    \n    mapFirst = elem;\n  });\n\n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75489,"user_id":null,"body":"import 'dart:math';\n\nint tv_remote(String word) {\n  bool shift = false;\n  int count = 0;\n  String last = 'a';\n  for(String s in word.split('')) {\n    \/\/ if needs shift to be pressed\n    if(needsShift(s, shift)) {\n      count += tv_remote_single_character('*', last);\n      shift = !shift;\n      last = '*';\n    }\n    count += tv_remote_single_character(s, last);\n    last = s;\n  }\n  return count;\n}\n\nint tv_remote_single_character(String c, String last){\n  assert(c.length == 1);\n  assert(last.length == 1);\n  \n  int index = keyboard.indexOf(c.toLowerCase());\n  int lastIndex = keyboard.indexOf(last.toLowerCase());\n  \n  int yDiff = (index ~\/ 8 - lastIndex ~\/ 8).abs();\n  int xDiff = (index % 8 - lastIndex % 8).abs();\n  \n  int yDiffWrap = min(yDiff, 6 - yDiff);\n  int xDiffWrap = min(xDiff, 8 - xDiff);\n  \n  return xDiffWrap + yDiffWrap + 1;\n}\n\nbool needsShift(String s, bool shiftIsOn){\n  if('abcdefghijklmnopqrstuvwxyz'.toUpperCase().contains(s) && !shiftIsOn){\n    return true;\n  }\n  if('abcdefghijklmnopqrstuvwxyz'.contains(s) && shiftIsOn){\n    return true;\n  }\n  return false;\n}\n\nfinal keyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_\/* ';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75490,"user_id":null,"body":"import 'dart:math';\n\nList<List<String>> keyboard = <List<String>>[\n  <String>['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n  <String>['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n  <String>['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n  <String>['p', 'q', 'r', 's', 't', '.', '@', '0'],\n  <String>['u', 'v', 'w', 'x', 'y', 'z', '_', '\/'],\n  <String>['aA', ' ', '-1', '-1', '-1', '-1', '-1', '-1'],\n];\n\nint tv_remote(String word) {\n  int totalSteps = 0;\n  bool isUpperCaseActive = false;\n  String previousSymbol = keyboard[0][0];\n\n  for (final String symbol in word.split('')) {\n    if (!isUpperCaseActive && isCapitalLetter(symbol) || isUpperCaseActive && isLowerLetter(symbol)) {\n      const String shift = 'aA';\n      isUpperCaseActive = !isUpperCaseActive;\n      totalSteps += calculateSteps(previousSymbol, shift);\n      previousSymbol = shift;\n    }\n\n    totalSteps += calculateSteps(previousSymbol, symbol);\n    previousSymbol = symbol;\n  }\n\n  return totalSteps;\n}\n\nbool isCapitalLetter(String symbol) {\n  return symbol.startsWith(RegExp('[A-Z]'));\n}\n\nbool isLowerLetter(String symbol) {\n  return symbol.startsWith(RegExp('[a-z]'));\n}\n\nint calculateSteps(String startingSymbol, String endingSymbol) {\n  final String firstLowerCase = startingSymbol == 'aA' ? startingSymbol : startingSymbol.toLowerCase();\n  final String secondLowerCase = endingSymbol == 'aA' ? endingSymbol : endingSymbol.toLowerCase();\n  final List<int> firstCoordinate = getCoordinates(firstLowerCase);\n  final List<int> secondCoordinate = getCoordinates(secondLowerCase);\n\n  final int rowDifference = (firstCoordinate[0] - secondCoordinate[0]).abs();\n  final int columnDifference = (firstCoordinate[1] - secondCoordinate[1]).abs();\n  final int rowSteps = min(rowDifference, 6 - rowDifference);\n  final int columnSteps = min(columnDifference, 8 - columnDifference);\n\n  return rowSteps + columnSteps + 1;\n}\n\nList<int> getCoordinates(String symbol) {\n  final int row = keyboard.indexWhere((List<String> row) => row.contains(symbol));\n  final int column = keyboard[row].indexOf(symbol);\n  return <int>[row, column];\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75491,"user_id":null,"body":"int tv_remote(String word) {\n\n  var wMap = {'a': [1,1], 'b': [2,1], 'c': [3,1], 'd': [4,1], 'e': [5,1], '1': [6,1], '2': [7,1], '3': [8,1],\n              'f': [1,2], 'g': [2,2], 'h': [3,2], 'i': [4,2], 'j': [5,2], '4': [6,2], '5': [7,2], '6': [8,2],\n              'k': [1,3], 'l': [2,3], 'm': [3,3], 'n': [4,3], 'o': [5,3], '7': [6,3], '8': [7,3], '9': [8,3], \n              'p': [1,4], 'q': [2,4], 'r': [3,4], 's': [4,4], 't': [5,4], '.': [6,4], '@': [7,4], '0': [8,4],\n              'u': [1,5], 'v': [2,5], 'w': [3,5], 'x': [4,5], 'y': [5,5], 'z': [6,5], '_': [7,5], '\/': [8,5], \n              '<': [1,6], ' ': [2,6]};\n  \n  var curX = 1;\n  var curY = 1;\n  var sum = 0;\n  var upDown = true;\n  \n  for(int i = 0; i < word.length; i++){\n    if((word[i] == word[i].toUpperCase() && upDown == true && RegExp('[A-Z]').hasMatch(word[i])) \n      || (word[i] == word[i].toLowerCase() && upDown == false && RegExp('[a-z]').hasMatch(word[i]))){\n      sum += (1 - curX).abs() > 4 ? (8 - (1 - curX).abs()) : (1 - curX).abs();\n      sum += (6 - curY).abs() > 3 ? (6 - (6 - curY).abs()) : (6 - curY).abs();\n      sum++;\n      curX = 1;\n      curY = 6;\n      upDown = !upDown;\n    }\n    \n    \n    sum += (wMap[word[i].toLowerCase()][0] - curX).abs() > 4 ? (8 - (wMap[word[i].toLowerCase()][0] - curX).abs()) : (wMap[word[i].toLowerCase()][0] - curX).abs();\n    sum += (wMap[word[i].toLowerCase()][1] - curY).abs() > 3 ? (6 - (wMap[word[i].toLowerCase()][1] - curY).abs()) : (wMap[word[i].toLowerCase()][1] - curY).abs();\n    sum++;\n    curX = wMap[word[i].toLowerCase()][0];\n    curY = wMap[word[i].toLowerCase()][1];\n  }\n  \n  return sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75492,"user_id":null,"body":"int tv_remote(String word) {\n\n  var wMap = {'a': [1,1], 'b': [2,1], 'c': [3,1], 'd': [4,1], 'e': [5,1], '1': [6,1], '2': [7,1], '3': [8,1],\n              'f': [1,2], 'g': [2,2], 'h': [3,2], 'i': [4,2], 'j': [5,2], '4': [6,2], '5': [7,2], '6': [8,2],\n              'k': [1,3], 'l': [2,3], 'm': [3,3], 'n': [4,3], 'o': [5,3], '7': [6,3], '8': [7,3], '9': [8,3], \n              'p': [1,4], 'q': [2,4], 'r': [3,4], 's': [4,4], 't': [5,4], '.': [6,4], '@': [7,4], '0': [8,4],\n              'u': [1,5], 'v': [2,5], 'w': [3,5], 'x': [4,5], 'y': [5,5], 'z': [6,5], '_': [7,5], '\/': [8,5], \n              '<': [1,6], ' ': [2,6]};\n  \n  var curX = 1;\n  var curY = 1;\n  var sum = 0;\n  var upDown = 0;\n  \n  for(int i = 0; i < word.length; i++){\n    if(word[i] == word[i].toUpperCase() && upDown == 0 && RegExp('[A-Z]').hasMatch(word[i])){\n      sum += (1 - curX).abs() > 4 ? (8 - (1 - curX).abs()) : (1 - curX).abs();\n      sum += (6 - curY).abs() > 3 ? (6 - (6 - curY).abs()) : (6 - curY).abs();\n      sum++;\n      curX = 1;\n      curY = 6;\n      upDown = 1;\n    }\n    \n    if(word[i] == word[i].toLowerCase() && upDown == 1 && RegExp('[a-z]').hasMatch(word[i])){\n      sum += (1 - curX).abs() > 4 ? (8 - (1 - curX).abs()) : (1 - curX).abs();\n      sum += (6 - curY).abs() > 3 ? (6 - (6 - curY).abs()) : (6 - curY).abs();\n      sum++;\n      curX = 1;\n      curY = 6;\n      upDown = 0;\n    }\n    \n    sum += (wMap[word[i].toLowerCase()][0] - curX).abs() > 4 ? (8 - (wMap[word[i].toLowerCase()][0] - curX).abs()) : (wMap[word[i].toLowerCase()][0] - curX).abs();\n    sum += (wMap[word[i].toLowerCase()][1] - curY).abs() > 3 ? (6 - (wMap[word[i].toLowerCase()][1] - curY).abs()) : (wMap[word[i].toLowerCase()][1] - curY).abs();\n    sum++;\n    curX = wMap[word[i].toLowerCase()][0];\n    curY = wMap[word[i].toLowerCase()][1];\n  }\n  \n  return sum;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75493,"user_id":null,"body":"\nList<int> shift = [5,0];\nList<List<String>> keyboard = [\n  ['a','b','c','d','e','1','2','3'],\n  ['f','g','h','i','j','4','5','6'],\n  ['k','l','m','n','o','7','8','9'],\n  ['p','q','r','s','t','.','@','0'],\n  ['u','v','w','x','y','z','_','\/'],\n  ['A',' ','','','','','',''],\n];\n\nint tv_remote(String word) {\n  print(word);\n  int res = 0;\n  List<int> currentInd = [0,0];\n  bool isUppercased = false;\n  String upAlph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  String signs = '0123456789.@_\/ ';\n  for(String letter in word.split('')){\n    List<int> target = findLetter(letter.toLowerCase());\n    int st = res;\n    if (upAlph.contains(letter)!=isUppercased && !signs.contains(letter)){\n      res += calcShortestPath(currentInd, shift);\n      res += 1;\n      res += calcShortestPath(shift,target);\n      res += 1;\n      isUppercased = !isUppercased;\n      currentInd = target;\n    }else{\n      res += calcShortestPath(currentInd,target);\n      res += 1;\n      currentInd = target;\n    }\n  }\n  return res;\n}\n\nList<int> findLetter(String letter){\n  for (int i=0; i< keyboard.length; i++){\n    for (int j=0;j < keyboard[i].length;j++){\n      if (keyboard[i][j]==letter){\n        return [i,j];\n      }\n    }\n  }\n  return [];\n}\n\nint calcShortestPath(List<int> startPosition, List<int> endPosition){\n  int startHeight = startPosition[0];\n  int startWidth = startPosition[1];\n  int endHeight = endPosition[0];\n  int endWidth = endPosition[1];\n  int maxHeight = keyboard.length-1;\n  int maxWidth = keyboard[0].length-1;\n  int firstHeightPrediction = abs(startHeight+1+(maxHeight)-endHeight);\n  int secondHeightPrediction = abs(startHeight-endHeight);\n  int minHeightPath = firstHeightPrediction<secondHeightPrediction?firstHeightPrediction:secondHeightPrediction;\n  int thirdHeightPrediction = abs(maxHeight-startHeight+1+endHeight);\n  if (thirdHeightPrediction<minHeightPath){\n    minHeightPath=thirdHeightPrediction;\n  }\n  \n  int firstWidthPrediction = abs(startWidth+1+(maxWidth)-endWidth);\n  int secondWidthPrediction = abs(startWidth-endWidth);\n  int minWidthPath = firstWidthPrediction<secondWidthPrediction?firstWidthPrediction:secondWidthPrediction;\n   int thirdWidthPrediction = abs(maxWidth-startWidth+1+endWidth);\n  if (thirdWidthPrediction<minWidthPath){\n    minWidthPath=thirdWidthPrediction;\n  }\n  \n  return minHeightPath+minWidthPath;\n}\n\nint abs(int num){\n  return num>=0?num:num*-1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75494,"user_id":168,"body":"import 'dart:math';\n\nconst keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_\/', ', '];\n\nint tv_remote(String word) {\n  print(word);\n  int presses = 0;\n  int i = 0, j = 0;\n  bool uppercase = false;\n  bool isLetter(x) => RegExp('[a-zA-Z]').matchAsPrefix(x) != null;\n  bool isUpper(x) => RegExp('[A-Z]').matchAsPrefix(x) != null;\n  int dist(a, b, w) => min((a - b).abs(), min(w - a + b, w - b + a));\n  word.split('').forEach((x) {\n    if (isLetter(x) && isUpper(x) != uppercase) {\n      presses += dist(i, 5, 6) + dist(j, 0, 8) + 1;\n      i = 5;\n      j = 0;\n      uppercase = !uppercase;\n    }\n    x = x.toLowerCase();\n    int r = keyboard.indexWhere((r) => r.contains(x));\n    int c = keyboard[r].indexOf(x);\n    presses += dist(i, r, 6) + dist(j, c, 8) + 1;\n    i = r;\n    j = c;\n  });\n  return presses;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b37a50642b27ebf2e000010":[{"id":75495,"user_id":null,"body":"int sum_of_a_beach(beach)=>new RegExp(r\"(sand|water|fish|sun)\", caseSensitive: false)\n      .allMatches(beach)\n      .length;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75496,"user_id":null,"body":"int sum_of_a_beach(beach) => RegExp(\"(water|sand|fish|sun)\", caseSensitive: false).allMatches(beach).length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75497,"user_id":250,"body":"int sum_of_a_beach(String beach) => RegExp(r\"water|sand|fish|sun\", caseSensitive: false).allMatches(beach).length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75498,"user_id":null,"body":"int sum_of_a_beach(String beach) {\n  RegExp words = RegExp('sand|water|fish|sun', caseSensitive: false);\n  return words.allMatches(beach).length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75499,"user_id":null,"body":"int sum_of_a_beach(String s) => RegExp('sand|water|fish|sun').allMatches(s.toLowerCase()).length;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75500,"user_id":null,"body":"int sum_of_a_beach(beach) {\n  String response=beach.toLowerCase();\n  int count=0;\n  while(true){\n  bool found=false;\n    if(response.contains('sand')){\n       response=stringShorter(response,'sand');\n       count++;\n       found=true;\n       }\n    if(response.contains('sun')){\n       response=stringShorter(response,'sun');\n       count++;\n       found=true;\n              }\n     if( response.contains('fish')){\n       response=stringShorter(response,'fish');\n       count++;\n       found=true;\n       }\n   if( response.contains('water')){\n       response=stringShorter(response,'water');\n       count++;\n       found=true;\n       }\n       if(!found)\n       break;\n       print(response+'\n');\n  }\n  return count;\n}\nString stringShorter(String string,subString){\nreturn string.replaceFirst(subString,'');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75501,"user_id":null,"body":"int sum_of_a_beach(String beach) {\n  var strs = [\"sand\", \"water\", \"fish\", \"sun\"];\n  var be = beach.toLowerCase();\n  int c = 0;\n  for (var x in strs) {\n    while (be.contains(x)) {\n      c++;\n      be = be.replaceFirst(x, '');\n    }\n  }\n  return c;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75502,"user_id":null,"body":"int sum_of_a_beach(String beach) {\n  beach = beach.toLowerCase();\n  int count = 0;\n  beach = beach.replaceAll('fish', '#');\n  beach = beach.replaceAll('sand', '#');\n  beach = beach.replaceAll('water', '#');\n  beach = beach.replaceAll('sun', '#');\n  for(int i = 0; i < beach.length; i++) {\n    if(beach[i] == '#') {\n      count++;\n    }\n  }\n  return count;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75503,"user_id":null,"body":"int sum_of_a_beach(String beach) {\n  beach = beach.toLowerCase();\n  int count = 0;\n  String beachFish = beach.replaceAll('fish', '#');\n  for(int i = 0; i < beachFish.length; i++) {\n    if(beachFish[i] == '#') {\n      count++;\n    }\n  }\n  String beachWater = beach.replaceAll('water', '#');\n  for(int i = 0; i < beachWater.length; i++) {\n    if(beachWater[i] == '#') {\n      count++;\n    }\n  }\n  String beachSand = beach.replaceAll('sand', '#');\n  for(int i = 0; i < beachSand.length; i++) {\n    if(beachSand[i] == '#') {\n      count++;\n    }\n  }\n  String beachSun = beach.replaceAll('sun', '#');\n  for(int i = 0; i < beachSun.length; i++) {\n    if(beachSun[i] == '#') {\n      count++;\n    }\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75504,"user_id":null,"body":"int sum_of_a_beach(String beach) {\n  var counter = 0;\n  var sentense = beach.toLowerCase();\n\n  List<String> listKeys = ['sand', 'water', 'fish', 'sun'];\n\n  var index = 0;\n  while (index < listKeys.length) {\n    var startIndex = sentense.indexOf(listKeys[index]);\n    if (startIndex != -1) {\n      counter++;\n      sentense = (sentense.substring(0, startIndex) + sentense.substring(startIndex + listKeys[index].length, sentense.length));\n      continue;\n    }\n\n    index++;\n  }\n\n\n  return counter;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5b40b666dfb4291ad9000049":[{"id":75505,"user_id":53,"body":"import 'dart:math' as math;\n\ndouble dcos(int n) { return math.cos(n * math.pi \/ 180); }\ndouble dsin(int n) { return math.sin(n * math.pi \/ 180); }\ndouble hypot(double n, double m) { return math.sqrt(math.pow(n, 2) + math.pow(m, 2)); }\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n  final x = a * dcos(alpha) - b * dsin(beta) - c * dcos(gamma);\n  final y = a * dsin(alpha) + b * dcos(beta) - c * dsin(gamma);\n  final t = math.atan2(y, x) * 180 \/ math.pi;\n  return [hypot(y, x).round(), t.floor(), (t * 60).floor() % 60, (t * 3600).floor() % 60];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75506,"user_id":null,"body":"import 'dart:math' as math;\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n    double pi = 3.14159265358979323846;\n    List<int> resp=[0,0,0,0];\n    double xa=a*math.cos(alpha* pi \/ 180);\n    double ya=a*math.sin(alpha* pi \/ 180);\n    double xb=xa+(b*math.cos((beta* pi \/ 180)+(pi\/2)));\n    double yb=ya+(b*math.sin((beta* pi \/ 180)+(pi\/2)));\n    double xc=xb+(c*math.cos((gamma* pi \/ 180)+(pi)));\n    double yc=yb+(c*math.sin((gamma* pi \/ 180)+(pi)));\n    double co=math.sqrt((yc*yc)+(xc*xc));\n    resp[0]=co.round();\n    double angle=math.atan(yc.abs()\/xc.abs())* 180 \/ pi;\n    angle=xc>0?angle:180-angle;\n    double minutes=60*((angle-angle.floor()));\n    double seconds=60*((minutes-minutes.floor()));\n    resp[1]=angle.floor();\n    resp[2]=minutes.floor();\n    resp[3]=seconds.floor();\n    return resp;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75507,"user_id":null,"body":"import 'dart:math' as math;\n\nList<int> solve(int a, b, c, alpha, beta, gamma) {\n  var ar = radian(alpha);\n  var br = radian(beta);\n  var cr = radian(gamma);\n\n  var x = a * math.cos(ar) - b * math.sin(br) - c * math.cos(cr);\n  var y = a * math.sin(ar) + b * math.cos(br) - c * math.sin(cr);\n\n  var r = hipo(x, y);\n\n  var an = math.acos(x \/ r) * 180 \/ math.pi;\n\n  var mm = (an * 3600) % 3600;\n  var m = mm \/ 60;\n  var s = mm % 60;\n\n  return [r.round(), an.toInt(), m.floor(), s.floor()];\n}\n\ndouble radian(int d) {\n  return d * math.pi \/ 180;\n}\n\ndouble hipo(double x, y) {\n  return math.sqrt(x * x + y * y);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75508,"user_id":null,"body":"import 'dart:math' as math;\n\nclass Point{\n\n  Point( this.x, this.y);\n double x;\n double y;\n move( int distance, int angle){\n   const pi = 3.14159265358979323846\/180;\n\n    double Y = (math.sin(angle * pi) * distance);\n    double X = (math.cos(angle * pi) * distance);\n    return  Point( this.x +X, this.y + Y);\n }\n\n print(){\n    return \"|(${this.x},${this.y})| \";\n  }\ndouble len(){\n    return math.sqrt( this.x * this.x  +  this.y * this.y);\n  }\n  double angel(){\n   const pi = 3.14159265358979323846\/180;\n   double sinX= this.y\/this.len(); \n  double x =  math.acos(sinX);\n  return toAngle(x);\n  }\n}\n\ndouble toAngle(double grad){\n   const pi = 3.14159265358979323846;\n  return (grad * 180)\/ pi ;\n\n\n\n}\ndouble toGradians(double anle){\n   const pi = 3.14159265358979323846;\n  return anle * pi\/180;\n}\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\nPoint p = Point(0,0);\n\nprint(p.print());\n\np = p.move(a, alpha);\nprint(p.print());\nprint(p.angel());\n\np = p.move(b, beta + 90);\nprint(p.print());\n\np = p.move(c, gamma + 180);\ndouble distance =  p.len();\n\nprint (\"distance: ${distance}\");\nprint( p.angel() + 90);\ndouble minutes =((p.angel() + 90)%1) * 60;\ndouble seconds =(minutes%1) * 60;\n\n    \/\/ your code\n    return [distance.round(), p.angel().floor() + 90 , minutes.floor(), seconds.floor()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75509,"user_id":null,"body":"import 'dart:math';\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {    \n    var ay = sin(alpha*pi\/180)*a;\n    var ax = cos(alpha*pi\/180)*a;\n    var bx = ax - sin(beta*pi\/180)*b;\n    var by = ay + cos(beta*pi\/180)*b;\n    var cx = bx - cos(gamma*pi\/180)*c;\n    var cy = by - sin(gamma*pi\/180)*c;\n    var c0 = sqrt(cx*cx + cy*cy);\n    var angle = (acos(cx\/c0)*180\/pi);\n    var deg = angle.toInt();\n    var min = ((angle-deg)*60).toInt();\n    var sec = ((angle - deg - min\/60)*3600).toInt();\n    return [c0.round(), deg, min, sec];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75510,"user_id":null,"body":"import 'dart:math' as math;\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n    final oa = a;\n    final ad = oa * math.sin(toRadian(alpha));\n    final ab = b;\n    final ae = ab * math.cos(toRadian(beta));\n    final bc = c;\n    final fc = bc * math.sin(toRadian(gamma));\n    final cg = ad + ae - fc;\n    final eb = ab * math.sin(toRadian(beta));\n    final bf = bc * math.cos(toRadian(gamma));\n    final od = oa * math.cos(toRadian(alpha));\n    final og = eb + bf - od;\n    final oc = math.sqrt(cg * cg + og * og);\n    final delta = 180 - toDegrees(math.atan( cg \/ og));\n    final minutes = getFraction(delta) * 60;\n    final seconds = getFraction(minutes) * 60;\n    return [oc.round(), delta.truncate() , minutes.truncate(), seconds.truncate()];\n}\n\n  double toRadian(final num degrees) => (degrees * math.pi) \/ 180;\n\n  double toDegrees(final num radian) => (radian * 180) \/ math.pi;\n\n  double getFraction(final double value) => value - value.truncate();\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75511,"user_id":null,"body":"import 'dart:math' as math;\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n      \n  final xA = math.cos(alpha * math.pi \/ 180) * a;\n  final yA = math.sin(alpha * math.pi \/ 180) * a;\n\n  final xB = xA - math.sin(beta * math.pi \/ 180) * b;\n  final yB = yA + math.cos(beta * math.pi \/ 180) * b;\n\n  final yC = yB - math.sin(gamma * math.pi \/ 180) * c;\n  final xC = xB - math.cos(gamma * math.pi \/ 180) * c;\n\n  final pointC = math.Point(xC, yC);\n  final pointO = math.Point(0.0, 0.0);\n  final CO = pointO.distanceTo(pointC);\n\n  final tOC = 180 - math.asin(yC \/ CO) * 180 \/ math.pi;\n  final deg = tOC.toInt();\n  final min = ((tOC - deg) * 60);\n  final sec = ((min - min.toInt()) * 60).toInt();\n\n  return [CO.round(), deg, min.toInt(), sec];\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75512,"user_id":168,"body":"import 'dart:math';\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n  alpha *= pi \/ 180;\n  beta *= pi \/ 180;\n  gamma *= pi \/ 180;\n  var x = a * cos(alpha) - b * sin(beta) - c * cos(gamma);\n  var y = a * sin(alpha) + b * cos(beta) - c * sin(gamma);\n  var d = sqrt(x * x + y * y);\n  var phi = atan2(y, x) * 180 \/ pi;\n  if (phi < 0) phi += 180;\n  var phi0 = phi.floor();\n  phi = 60 * (phi - phi0);\n  var phi1 = phi.floor();\n  return [d.round(), phi0, phi1, (60 * (phi - phi1)).floor()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75513,"user_id":null,"body":"import 'dart:math' as math;\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n    double tocDegrees = 0, tocMinutes = 0, tocSeconds = 0;\n\n    \/\/ OA -> a, AB -> b, BC -> c, toA -> alpha, hAB -> beta, uBC -> gamma\n    double hbaDegrees = 90 - double.parse(beta.toString()),\n        abcDegrees = 180 - hbaDegrees - double.parse(gamma.toString()),\n        kaoDegrees = 90 - double.parse(alpha.toString()),\n        oabDegrees = 180 - double.parse(beta.toString()) - kaoDegrees,\n        disOB = math.sqrt(a*a+b*b-2*a*b*math.cos(oabDegrees\/180 * math.pi)) as double,\n        obaDegrees = math.acos((disOB*disOB + b*b - a*a)\/(2*disOB*b))*180\/math.pi as double,\n        cboDegrees = abcDegrees - obaDegrees,\n        disOC = math.sqrt(c*c+disOB*disOB-2*c*disOB*math.cos(cboDegrees\/180 * math.pi)) as double,\n        ocbDegrees = math.acos((disOC*disOC + c*c - disOB*disOB)\/(2*disOC*c))*180\/math.pi as double,\n        coaDegrees = 360 - abcDegrees - ocbDegrees - oabDegrees;\n\n    tocDegrees = coaDegrees + double.parse(alpha.toString());\n\n    \/\/ calculate tocMinutes and tocSeconds\n    tocMinutes = (tocDegrees - tocDegrees.toInt())*60;\n    tocSeconds = (tocMinutes - tocMinutes.toInt())*60;\n\n    return [disOC.round(), tocDegrees.truncate(), tocMinutes.toInt(), tocSeconds.toInt()];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75514,"user_id":492,"body":"import 'dart:math' as math;\n\nList<int> solve(int a, b, c, alpha, beta,  gamma) {\n    double aa = alpha * math.pi \/ 180;\n    double bb = beta * math.pi \/ 180;\n    double cc = gamma * math.pi \/ 180;\n    double x = a * math.cos(aa) - b * math.sin(bb) - c * math.cos(cc);\n    double y = a * math.sin(aa) + b * math.cos(bb) - c * math.sin(cc);\n    double r = math.sqrt(x * x + y * y);\n    int theta = (math.acos(x \/ r) * 180 * 3600 \/ math.pi).floor();\n    int d = (theta \/ 3600).floor();\n    int mm = theta % 3600;\n    int m = (mm \/ 60).floor();\n    int s = mm % 60;\n    return [r.round(), d, m, s];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ba38ba180824a86850000f7":[{"id":75515,"user_id":null,"body":"List solve(arr) {\n  return arr.reversed.toSet().toList().reversed.toList();\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75516,"user_id":null,"body":"List<dynamic> solve(arr) => arr.reversed.toSet().toList().reversed.toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75517,"user_id":null,"body":"List solve(items) {\n  List<int> result = [];\n  for (int item in items.reversed) {\n    if (!result.contains(item)) result.add(item);\n  }\n  return List.from(result.reversed);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75518,"user_id":null,"body":"List solve(List arr) {\n  List temp = [];\n  for (int i = 0; i < arr.length; i++) {\n    if (!temp.contains(arr[i])) {\n      temp.add(arr[i]);\n    } else {\n      temp.add(arr[i]);\n      temp.remove(arr[i]);\n    }\n  }\n  return temp;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75519,"user_id":645,"body":"List solve(arr) => arr.reversed.toSet().toList().reversed.toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75520,"user_id":null,"body":"List solve(arr) {\n  int i = 0;\n  return arr.where((el) => i++ == arr.lastIndexOf(el)).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75521,"user_id":645,"body":"import \"dart:collection\";\n\nList<T> solve<T>(List<T> arr) => LinkedHashSet<T>.from(arr.reversed).toList().reversed.toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75522,"user_id":null,"body":"List solve(arr) {\n  var duplicates = Set();\n  return arr.reversed.where((e) {\n    if(duplicates.contains(e)) return false;\n    duplicates.add(e);\n    return true;\n  }).toList().reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75523,"user_id":null,"body":"List solve(arr) {\n  List result = [];\n  \n  for(int i = arr.length - 1; i >= 0; i--){\n    if(!result.contains(arr[i])){\n      result.insert(0, arr[i]);\n    }\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75524,"user_id":null,"body":"List solve(arr) {\n  List auxList = List.of(arr);\n   arr.forEach((element) {\n   if(auxList.where((elementWhere) => element == elementWhere).length > 1)\n   auxList.remove(arr.firstWhere((elementFirstWhere) => element == elementFirstWhere));\n });\n return auxList;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bb804397274c772b40000ca":[{"id":75525,"user_id":null,"body":"import 'dart:math';\ndouble stackHeight2d(int layers) => (layers == 0) ? 0 : 1 + sqrt(3) \/ 2 * (layers - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75526,"user_id":null,"body":"import 'dart:math';\ndouble stackHeight2d(l) =>\n  l==0 ? 0 : ((l - 1) * sqrt(3) \/ 2 + 1);\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75527,"user_id":null,"body":"double stackHeight2d(int layers) => layers==0 ? 0.0 : 1 + (layers-1)*0.8660254;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75528,"user_id":null,"body":"import 'dart:math' as math;\ndouble stackHeight2d(int layers)=>double.parse((layers<2?(layers==1?1:0):(1*math.sqrt(3))\/2*(layers-1)+1).toStringAsFixed(3));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75529,"user_id":null,"body":"import 'dart:math' as math;\ndouble stackHeight2d(int layers)=>double.parse((layers==0?0:(1*math.sqrt(3))\/2*(layers-1)+1).toStringAsFixed(3));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75530,"user_id":null,"body":"import 'dart:math';\n\ndouble stackHeight2d(int n) {\n  return n == 0 ? 0 : ((n - 1) * sqrt(3) \/ 2) + 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75531,"user_id":null,"body":"double diff(int layers){\n  double dif = 0;\n  for(int i=1; i<layers; i++){\n    dif = dif + (1 - 0.86602540378);\n  }\n  return dif;\n}\n\ndouble stackHeight2d(int layers) {\n  if(layers==0) return 0.0;\n  return layers - diff(layers);\n\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75532,"user_id":null,"body":"import 'dart:math';\ndouble stackHeight2d(int layers) => layers > 0? layers-(1-sin(60*pi\/180))*(layers-1) : 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75533,"user_id":169,"body":"import 'dart:math';\n\ndouble stackHeight2d(int layers) \n  => layers > 0\n    ? 1 + sqrt(pow(layers-1, 2) - pow((layers-1)\/2, 2))\n    : 0;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75534,"user_id":null,"body":"import \"dart:math\";\ndouble stackHeight2d(int n) => n==0? 0: 1 + (n-1)*sqrt(3)\/2;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bbb8887484fcd36fb0020ca":[{"id":75535,"user_id":250,"body":"int catch_sign_change (List<int> arr) {  \n  if (arr.isEmpty) {\n    return 0;\n  }\n  \n  int count = 0;\n  int prev = arr[0];\n  \n  for (int i = 1; i < arr.length; i++) {\n    if (prev < 0 != arr[i] < 0) {\n      count++;\n    }\n    prev = arr[i];\n  }\n  \n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75536,"user_id":null,"body":"int catch_sign_change (List<int> arr) {  \n  if (arr.isEmpty) return 0;\n  \n  bool isNeg = arr[0].isNegative;\n  int count = 0;\n  \n  for (var i in arr) {\n    if (i.isNegative != isNeg) count++;\n    isNeg = i.isNegative;\n  }\n  \n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75537,"user_id":null,"body":"int catch_sign_change (List<int> arr) {\n  if (arr.isEmpty) return 0;\n  \n  int result = 0;\n  \n  bool prevSign = arr[0].isNegative;\n  \n  for (final i in arr) {\n    if (i.isNegative != prevSign) {\n      result++;\n    }\n    \n    prevSign = i.isNegative;\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75538,"user_id":null,"body":"int catch_sign_change (List<int> arr) {  \n    var count = 0;\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i].sign == 0 && arr[i - 1].sign == 1 ||\n        arr[i].sign == 1 && arr[i - 1].sign == 0) continue;\n    if (arr[i].sign != arr[i - 1].sign) count++;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75539,"user_id":null,"body":"int catch_sign_change (List<int> arr) {\n  if (arr.isEmpty) return 0;\n  arr = arr.map((i) => i==0 ? 1:i.sign).toList();\n  return List.generate(arr.length-1, (i) => arr[i]*arr[i+1]==-1 ? 1 : 0).fold(0,(a,b)=> a+b);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75540,"user_id":null,"body":"int catch_sign_change (List<int> arr) {\n  if (arr.isEmpty) return 0;\n  int count = 0;  \n  bool negative = arr.first.isNegative;\n  arr.forEach((element) {\n    if(element.isNegative != negative){\n      count++;\n      negative = element.isNegative;\n    }\n  });\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75541,"user_id":null,"body":"int catch_sign_change(List<int> arr) {\n  int c = 0;\n  for (int i = 0; i < arr.length - 1; ++i) {\n    if (arr[i].isNegative && !arr[i + 1].isNegative ||\n        !arr[i].isNegative && arr[i + 1].isNegative) {\n      c++;\n    }\n  }\n\n  return c;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75542,"user_id":null,"body":"int catch_sign_change (List<int> arr) { \n  var count = 0;\n  for (int i = 1; i < arr.length ; i++) {\n    if ((arr[i] >= 0 && arr[i - 1] < 0) || (arr[i] < 0 && arr[i - 1] >= 0)) {\n      count++;\n    }  \n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75543,"user_id":null,"body":"int catch_sign_change (List<int> arr) { \nint iterator = 0;\n    if (arr.isNotEmpty && arr.contains(0) ) {\n    arr.reduce((value, element) {\n      if (value * element < 1) {\n        iterator++;\n        if ((value < element && value == 0) || (value > element && element == 0)) {iterator--;}\n        value = element;\n\n      }\n      return value;\n    });\n  } else if (arr.isNotEmpty && !arr.contains(0)) {\n    arr.reduce((value, element) {\n      if (value * element < 0) {\n        value = element;\n        iterator++;\n      }\n      return value;\n    });\n  }\n  return iterator;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75544,"user_id":null,"body":"int catch_sign_change (List<int> arr) {  \n  int res = 0;\n  for(var i = 0; i < arr.length - 1; i++){\n    if((arr[i] >= 0 && arr[i + 1] < 0) || (arr[i] < 0 && arr[i + 1] >= 0)){\n      res++;\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5bd776533a7e2720c40000e5":[{"id":75545,"user_id":null,"body":"List<int> pendulum(List<int> values) {\n  values.sort();\n  final List<int> list = [];\n  for (var i = 0; i < values.length; i++) {\n    if (i % 2 == 0) {\n      list.insert(0, values[i]);\n    } else {\n      list.add(values[i]);\n    }\n  }\n\n  return list;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75546,"user_id":null,"body":"List<int> pendulum(values) {\n  values.sort();\n  List<int> result = [];\n  for (int i = 0; i < values.length; i++) {\n    if (i.isOdd) result.add(values[i]);\n    if (i.isEven) result.insert(0, values[i]);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75547,"user_id":null,"body":"List<int> pendulum(values) {\n  List<int> output = [];\n  \n  bool right = false;\n  \n  values.sort();\n  \n  for (var it in values) {\n    if (right) {\n      output.add(it);\n    } else {\n      output.insert(0,it);\n    }\n    right = !right;\n  }\n  \n  return output;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75548,"user_id":null,"body":"List<int> pendulum(values) {\n  values.sort();  \t\n  List<int> list = [values[0]];\n  for(int i=1;i<values.length;i++){\n    if(i%2==0){\n      list.insert(0,values[i]);      \n    }else{\n      list.add(values[i]);\n    }    \n  }  \n  return list;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75549,"user_id":null,"body":"List<int> pendulum(List<int> values) {\n  values.sort();\n  List<int> finalList = [];\n  for (var i = 0; i < values.length; i++) {\n    if (i % 2 != 0) {\n      finalList.add(values[i]);\n    } else {\n      finalList.insert(0, values[i]);\n    }\n  }\n  return finalList;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75550,"user_id":null,"body":"List<int> pendulum(List<int> values) {\n  values.sort();\n  List<int> result = [];\n  for (var i = 0; i < values.length; i++){\n    if(i % 2 == 0){\n      result.insert(0, values[i]);\n    } else {\n    result.add(values[i]);\n      }\n  } \n  return result;\n}\n\n\/\/ List<int> pendulum(List<int> values) {\n\/\/   values.sort();\n\/\/   List<int> results = [];\n\/\/   for (int i =0; i  < values.length; i ++){\n\/\/     i % 2 == 0 ? results.insert(0, values[i]) : results.add(values[i]);\n\/\/   }\n\/\/   return results;\n\/\/ }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75551,"user_id":null,"body":"List<int> pendulum(List<int> values) {\n  List<int> res = <int>[];\n  values.sort();\n  bool direct = false;\n  for (var v in values) {\n    if (direct) {\n      res.insert(res.length, v);\n      direct = false;\n      continue;\n    } else {\n      res.insert(0, v);\n      direct = true;\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75552,"user_id":null,"body":"List<int> pendulum(values) {\n  values.sort();\n  List<int> answer = [];\n  for (int i = 0; i < values.length; i++){\n    if (i.isOdd){\n      answer.add(values[i]);\n    } else {\n      answer.insert(0, values[i]);\n    }\n  }\n  return answer;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75553,"user_id":null,"body":"List<int> pendulum(values) {\n  final result = <int>[];\n  values.sort();\n  for (int i = 0; i < values.length; i++) {\n    if (i.isEven) {\n      result.insert(0, values[i]);\n    } else {\n      result.add(values[i]);\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75554,"user_id":null,"body":"List<int> pendulum(values) {\n  final result = <int>[];\n  values.sort();\n  for (int i = 0; i < values.length; i++) {\n    if (i.isOdd) {\n      result.add(values[i]);\n    } else {\n      result.insert(0, values[i]);\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5c6d80d7ff00de2dcc4d4188":[{"id":75555,"user_id":250,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if (array == null || array.length == 0) {\n    return null;\n  }\n  \n  List<String> w = [...array];\n  w.sort();\n  \n  Map<String, String> resp = {for (var e in array) e: \"\"};\n  \n  for (int i = 0; i < w.length; i++) {\n    if (array[i].length != array.length) {\n      return null;\n    }\n    \n    for (int j = 0; j < w.length; j++) {\n      String index = w[i];\n      resp[index] = resp[index]! + w[(j+i)%w.length][j];\n    }\n  }\n  \n  return array.map((x) {\n    String r = resp[x]!.substring(0, array.length);\n    resp[x] = resp[x]!.substring(array.length);\n    return r;\n  }).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75556,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? arr) {\n  if (arr == null || arr.isEmpty) return null;\n  if (arr.where((el) => el.length != arr.length).isNotEmpty) return null;\n\n  void updateArr(List<String> list) {\n    String newItem = '';\n    for (int i = 0; i < list.length; i++) newItem += list[i][i];\n    arr[arr.indexOf(list[0])] = newItem;\n  }\n\n  void moveArr(List<String> list) => list\n    ..add(list[0])\n    ..removeAt(0);\n\n  List<String> tmp = List.from(arr)..sort();\n  for (String _ in arr) {\n    updateArr(tmp);\n    moveArr(tmp);\n  }\n  return arr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75557,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if(array == null || array.join('').length \/ array.length != array.length) return null;\n  List<String> originalArray = List<String>.from(array);\n \n  array.sort();\n  List<String> unsortedOutputArr = [];\n  int length = array.length, i =0;\n  while(i < length){\n    unsortedOutputArr.add(array.skip(i).fold([\"\",0],(prev,curr) => [(prev! as List)[0] + curr[(prev as List)[1]], ++(prev as List)[1]])[0]);\n    array.add(array[i]);\n    ++i;\n  }\n  List<String> sortedArray = [];\n  for(String item in originalArray){\n     int index = array.indexOf(item);\n     sortedArray.add(unsortedOutputArr[index]);\n     array[index]='';\n  }\n  return sortedArray;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75558,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? arr) {\n  if(arr == null || arr.length == 0 || !arr.every((val) => val.length == arr.length)) return null;\n  List<String> list = [...arr];\n  arr.sort();\n  for(int i = 0; i < arr.length; i++) {\n    String w = arr[i];\n    for(int j = 0; j < arr.length; j++) {\n      w = w.substring(0, j) + arr[(i+j) % arr.length][j] + w.substring(j+1);\n    }\n    list[list.indexOf(arr[i])] = w;\n  }\n  \n  return list;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75559,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? arr) {\n  if(arr == null || arr.length == 0 || !arr.every((val) => val.length == arr.length)) return null;\n  List<String> list = [...arr];\n  arr.sort();\n  for(int i = 0; i < arr.length; i++) {\n    List<String> w = arr[i].split('');\n    for(int j = 0; j < arr.length; j++) {\n      w[j] = arr[(i+j) % arr.length][j];\n    }\n    list[list.indexOf(arr[i])] = w.join();\n  }\n  \n  return list;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75560,"user_id":169,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if (array == null || array.isEmpty) {\n    return null;\n  }\n  \n  for(int i = 0; i < array.length; i++) {\n    if (array.length != array[i].length) {\n      return null;\n    }\n  }\n  \n  final List<String> unique = List.generate(\n    array.length, (i) => array[i] + '.'*i\n  );\n  \n  final List<String> sorted = List.from(unique)..sort();\n  Map<String, String> results = {};\n  \n  for(int word = 0; word < sorted.length; word++) {\n    results[sorted[word]] = List.generate(\n      sorted.length, (i) => sorted[(i+word)%sorted.length][i]\n    ).join();\n  }\n  \n  return List.generate(sorted.length, (i) => results[unique[i]] ?? '');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75561,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if (array == null) return null;\n  if (array.isEmpty) return null;\n  if (array.any((s) => s.length != array.length)) return null;\n\n  List<String> output = List.generate(array.length, (_) => '');\n\n  List<String> arraySorted = List.from(array);\n  arraySorted.sort((a, b) => a.compareTo(b));\n\n  int pos, m;\n\n  for (int i = 0; i < output.length; i++) {\n    m = 0;\n    do {\n      pos = array.indexOf(arraySorted[i], m++);\n    } while (output[pos] != '');\n\n    for (int j = 0; j < output.length; j++) {\n      output[pos] += arraySorted[(j + i) % output.length][j];\n    }\n  }\n\n  return output;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75562,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if(array == null || array == [''] || array.isEmpty) return null;\n  for(int i = 0; i < array.length; i++){\n    if(array[i].length != array[0].length) return null;\n  }\n  var txt = '';\n  List<String> res = [];\n  List<String> arr = List.from(array);\n  arr.sort();\n  for(int i = 0; i < array.length; i++){\n    (arr..add(arr[0])).removeAt(0); \n    while(arr[0] != array[i]){\n      (arr..add(arr[0])).removeAt(0);   \n    }\n    txt = '';\n    for(int k = 0; k < array.length; k++){\n      txt += arr[k][k];\n    }\n    (arr..add(arr[0])).removeAt(0); \n    res.add(txt);\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75563,"user_id":null,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if (array == null || array.isEmpty || array.any((element) => element.length != array.length)) {\n    return null;\n  }\n  List<String> newArr = [];\n  for (int i = 0; i < array.length; i++) {\n    array[i] += i.toString();\n  }\n  array.sort();\n  for (int i = 0; i < array.length; i++) {\n    String text = array[i][array.length];\n    for (int j = i; j < array.length + i; j++) {\n      text += array[j > array.length - 1 ? j - array.length : j][j - i];\n    }\n    newArr.add(text);\n  }\n  newArr.sort();\n  for (int i = 0; i < newArr.length; i++) {\n    newArr[i] = newArr[i].substring(1);\n  }\n  return newArr;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75564,"user_id":168,"body":"List<String>? DiagonalsOfSquare(List<String>? array) {\n  if (array == null || array.isEmpty || array.any((r) => r == null || r.length != array.length)) return null;\n  int n = array.length;\n  var arr = array.asMap().entries.toList()..sort((a, b) => a.value.compareTo(b.value));\n  var res = List<String>.filled(n, \"\");\n  for (int k = 0; k < n; k++) {\n    int i = 0;\n    res[arr[k].key] = arr.skip(k).followedBy(arr.take(k)).map((x) => x.value[i++]).join();\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5cb05eee03c3ff002153d4ef":[{"id":75565,"user_id":645,"body":"int get_section_id(int n, List<int> a) => a.indexWhere((x) => (n -= x) < 0);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75566,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  var pos = 0;\n  for (var i = 0; i < a.length; i++) {\n    pos += a[i];\n    if (n < pos) return i;\n  }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75567,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  if (n <= a.reduce((v, e) => v + e)) {\n    int pixels = 0;\n    for (int i = 0; i < a.length; i++) {\n      pixels += a[i];\n      if (n < pixels) return i;\n    }\n  }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75568,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  int sum = 0;\n  for (int i = 0; i < a.length; i++) {\n    sum += a[i];\n    if (sum > n) return i;\n  }\n  \n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75569,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  var index=0;\n  for (final d in a){\n    if (n<d) return index;\n    n -= d;\n    index++;\n  }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75570,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  int s = 0;\n  for(MapEntry e in a.asMap().entries) {\n    s += e.value;\n    if (n < s) return e.key;\n  }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75571,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  int count = 0;\n  int a_sum = 0;\n  int b = 0;\n  for (int i = 0; i < a.length; i++) {\n    a_sum += a[i];\n  }\n  for (int m = 0; m < a.length; m++) {\n    b += a[m];\n    if (n < b) {\n      return count;\n    } else if (n == b) {\n      if (n < a_sum) {\n        return count + 1;\n      } else if (n == a_sum) {\n        return -1;\n      }\n    } else if (n == a_sum - 1) {\n      return a.length - 1;\n    } else if (n > a_sum) {\n      return -1;\n    }\n    count += 1;\n  }\n  return count;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75572,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  int totalSum = 0;\n  for(int i = 0; i < a.length; i ++){\n    totalSum = totalSum + a[i];\n    if(n < totalSum) return i;\n  }\n  return -1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75573,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  if(a.reduce((a,b) => a+b) <= n) return -1;\n  var sum = 0;\n  var index = 0;\n  while(n >= sum){\n    sum += a[index];\n    index++;\n  }\n  return index-1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75574,"user_id":null,"body":"int get_section_id(int n, List<int> a) {\n  int offset = 0;\n  \n  for (int i = 0; i < a.length; i++){\n    offset += a[i];\n    if(offset > n){\n     return i;\n    } else if(offset <= n && i == a.length - 1){\n      return -1;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ce399e0047a45001c853c2b":[{"id":75575,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  int sum = ls.fold(0, (sum, i) => sum + i);\n  List<int> result = [];\n  result.add(sum);\n  for (var i in ls ) {\n    sum -= i;\n    result.add(sum);\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75576,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  int sum = ls.fold<int>(0, (x, y) => x + y);\n  return List.generate(ls.length +1, (i) =>i==0?sum: sum -= ls[i-1]);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75577,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  int len=ls.length;\n  List<int> sumlst=[];\n  if(ls.length==0){\n    sumlst.add(0);\n    }else{\n  int a= ls.reduce((x,y)=>x+y);\n  sumlst.add(a);\n  for(int i=0;i<len;i++){\n    a=a-ls[i];\n    sumlst.add(a);\n  }\n  }\n return sumlst;\n    \/\/ your code\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75578,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  ls.add(0);\n  for (int i = ls.length-2;i >= 0; i--) {\n    ls[i] += ls[i+1];\n  }\n  return ls;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75579,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  int sum = ls.fold(0, (previousValue, element) => previousValue + element);\n  int length = ls.length;\n  List<int> result = [sum];\n\n  ls.forEach((element) {\n    sum -= element;\n    result.add(sum);\n  });\n\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75580,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n      var v = List.filled(ls.length+1, 0);\n      for(int i =ls.length-1; i>=0; i--) {\n        v[i] = v[i+1] + ls[i];\n      }\n      return v;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75581,"user_id":250,"body":"List<int> parts_sums(List<int> ls) {\n  return ls.reversed.fold<List<int>>([0], (a,c) {\n    a.add(a.last+c);\n    return a;\n  }).reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75582,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n   List<int> result = [];\n  int sum = 0;\n  for (int i=0;i<ls.length;i++){\n    sum = sum+ls[i]; \n  }\n  result.add(sum);\n   for(int j =0;j<ls.length;j++){\n    sum = sum-ls[j];\n     result.add(sum);\n  }\n  return result;\n}\n \n   \n ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75583,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  List<int> res = [0];\n  int l = ls.length - 1;\n  for (int i = l; i >= 0; i--) {\n      res.add(ls[i] + res[ l - i]);\n  }\n  return res.reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75584,"user_id":null,"body":"List<int> parts_sums(List<int> ls) {\n  List<int> sumList = [0];\n  for (int i = ls.length-1; i >= 0; i--){\n    sumList.add(ls[i] + sumList.last);\n  }\n  return sumList.reversed.toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ce6728c939bf80029988b57":[{"id":75585,"user_id":null,"body":"bool solve(String s){\n  var letters = s.split('')..sort();\n  return \"abcdefghijklmnopqrstuvwxyz\".contains(letters.join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75586,"user_id":250,"body":"bool solve(String s) {\n  List<String> ss = s.split(\"\")..sort();\n  return \"abcdefghijklmnopqrstuvwxyz\".contains(ss.join(\"\"));\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75587,"user_id":null,"body":"bool solve(String s) {\n  List<String> letters = s.split('');\n  letters.sort();\n  \n  for(var i = 0; i<letters.length;i++){\n    if (i!=0 && letters[i] != String.fromCharCode(letters[i-1].codeUnitAt(0)+1)) return false;\n  }\n  \n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75588,"user_id":53,"body":"bool solve(String s) {\n  var c = s.codeUnits.toList();\n  c.sort();\n  return \"abcdefghijklmnopqrstuvwxyz\".contains(String.fromCharCodes(c));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75589,"user_id":null,"body":"bool solve(String s) {\n  var ss = s.runes.toList()..sort();\n  for (int i = 0; i < ss.length - 1; i++) {\n    if (ss[i + 1] - ss[i] != 1) return false;\n  }\n\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75590,"user_id":null,"body":"bool solve(String s) {\n  List<String> a = s.split('')..sort();\n  for (int i = 1; i< a.length; i++){\n    if (a[i].codeUnitAt(0) - a[i-1].codeUnitAt(0) != 1) return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75591,"user_id":null,"body":"bool solve(String s) {\n  List<int> asciiCodes = [...s.codeUnits];\n  asciiCodes.sort();\n  for(int i = 1; i < s.length; i++) \n    if(asciiCodes[i] - asciiCodes[i - 1] != 1)\n      return false;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75592,"user_id":null,"body":"bool solve(String s) => 'abcdefghijklmnopqrstuvwxyz'.indexOf((s.split('')..sort()).join()) != -1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75593,"user_id":169,"body":"bool solve(String s) {\n  List<int> nums = s.split('').toSet().map((x) => x.codeUnitAt(0)).toList();\n  if (s.length != nums.length) {\n    return false; \n  }\n  \n  nums.sort();\n  return nums.last-nums.first == nums.length-1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75594,"user_id":null,"body":"bool solve(String s) {\n  var r = s.split('');\n  r.sort();\n  for (var i = 0; i < r.length-1; i++) {\n    if (r[i].codeUnitAt(0)+1 != r[i+1].codeUnitAt(0) ) return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ce969ab07d4b7002dcaa7a1":[{"id":75595,"user_id":null,"body":"int solve(String s) {\n  int length;\n  for (length = s.length ~\/ 2; length >= 0; length--) {\n    if (s.endsWith(s.substring(0, length))) {\n      break;\n    }\n  }\n  return length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75596,"user_id":null,"body":"int solve(String s) => RegExp(r'^(\\w*)\\w*(\\1)$').firstMatch(s).group(1).length;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75597,"user_id":250,"body":"int solve(String s) {  \n  for (int i = s.length ~\/ 2; i >= 0; i--) {\n    if (s.startsWith(s.substring(s.length - i))) {\n      return i;\n    }\n  }\n  \n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75598,"user_id":null,"body":"int solve(String s) {\n  int res = 0;\n  for (int i = 0; i < s.length ~\/ 2; i++) {\n    if (s.endsWith(s.substring(0, i + 1))) {\n      res = i + 1;\n    }\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75599,"user_id":null,"body":"int solve(s) {  \n  for (int i = (s.length\/2).floor() ; i > 0 ; i--) {\n    final prefix = s.substring(0, i);\n    final suffix = s.substring(s.length-i);\n    if (prefix.compareTo(suffix) == 0) {\n      return i;\n    }\n  }\n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75600,"user_id":null,"body":"int solve(String s) {  \n  List<String> suffix = [];\n  List<String> prefix = [];\n  \n  if(s.split('').toSet().toList().length == 1){\n    return ((s.length - 1) \/ 2).round();\n  }\n  for (var i = 1; i < s.length; i++){\n    suffix.add(s.substring(0, s.length - i));\n    prefix.add(s.substring(i));\n  }\n  for (var j = 1; j < prefix.length; j++){\n    if(prefix[j] == suffix[j] && j != prefix.length \/ 2 - 1){\n      return prefix[j].length;\n    }\n  }\n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75601,"user_id":null,"body":"int solve(String s) {\n  int count = 0;\n  for (int i = s.length ~\/ 2; i > 0; i--) {\n    String s1 = s.substring(0, i);\n    String s2 = s.substring(s.length - i, s.length);\n    \/\/print('$s1 $s2');\n    if (s1 == s2) {\n      if (count < s1.length) count = s1.length;\n    }\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75602,"user_id":null,"body":"int solve(String s) {\n  final strList = s.split('');\n  final prefixList = List.generate(s.length - 1, (index) => strList.sublist(0, index + 1).join()).toSet();\n  final suffixList = List.generate(s.length - 1, (index) => strList.reversed.toList().sublist(0, index + 1).reversed.toList().join()).toSet();\n  final sameSet = prefixList.intersection(suffixList);\n  sameSet.removeWhere((e) => e.length > s.length ~\/ 2);\n  return sameSet.isNotEmpty ? sameSet.last.length : 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75603,"user_id":null,"body":"int solve(String s) {  \n  for (int i = (s.length \/ 2).floor(); i > 0; i--) {\n    final prefix = s.substring(0, i);\n    final suffix = s.substring(s.length - i);\n\n    if (prefix == suffix) {\n      return i;\n    }\n  }\n  \n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75604,"user_id":169,"body":"int solve(String s) {  \n  int max = 0;\n  \n  for(int i = 1; i <= s.length ~\/ 2; i++) {\n    if (s.substring(0, i) == s.substring(s.length-i) && max < i) {\n      max = i;\n    }\n  }\n  \n  return max;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ce9c1000bab0b001134f5af":[{"id":75605,"user_id":null,"body":"int quarter_of(int month) => (month \/ 3).ceil();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75606,"user_id":527,"body":"int quarter_of(int month) {\n  return (month + 2) ~\/ 3;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75607,"user_id":null,"body":"int quarter_of(int month) {\n  if ([1, 2, 3].contains(month)) return 1;\n  if ([4, 5, 6].contains(month)) return 2;\n  if ([7, 8, 9].contains(month)) return 3;\n  return 4;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75608,"user_id":null,"body":"int quarter_of(int m) {\n  var a = {1:1, 2:1, 3:1, 4:2, 5:2, 6:2, 7:3, 8:3, 9:3, 10:4, 11:4, 12:4};\n  return a[m]!;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75609,"user_id":null,"body":"int quarter_of(int month) {\n\/\/  if([1,2,3].contains(month)) return 1;\n\/\/   if([4,5,6].contains(month)) return 2;\n\/\/   if([7,8,9].contains(month)) return 3;\n\/\/   return 4;\n\n\/\/   if (month == 1 || month == 2 || month == 3){\n\/\/    return 1;\n\/\/  }else if(month == 4 || month == 5 || month == 6 ){\n\/\/    return 2;\n\/\/  }else if(month == 7 || month == 8 || month == 9 ){\n\/\/    return 3;\n\/\/  }else if(month == 10 || month == 11 || month == 12){\n\/\/    return 4;\n\/\/  }else\n\/\/   return 4; \n\n  \/\/   return (month +2 ) ~\/3;\n  \n  Map months = {};\n  months[1] = {1,2,3};\n  months[2] = {4,5,6};\n  months[3] ={7,8,9};\n  months[4]= {10,11,12};\n  \n   int quarter =0;\n  \n  for(var element in months.keys){\n    if(months[element].contains(month)){\n      quarter = element;\n    }\n  }\n  return quarter;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75610,"user_id":null,"body":"int quarter_of(int month) {\n  if (month == 1 || month == 2 || month == 3) {\n    return 1;\n  } else if (month == 4 || month == 5 || month == 6) {\n      return 2;\n  } else if (month == 7 || month == 8 || month == 9) {\n      return 3;\n  } else if (month == 10 || month == 11 || month == 12) {\n    return 4;\n  } else { \n    return 0;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75611,"user_id":null,"body":"int quarter_of(int month) => (month % 3 == 0) ? (month ~\/ 3) : (month ~\/ 3 + 1);","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75612,"user_id":null,"body":"int quarter_of(int month) {\n  if(month <= 3){\n    return 1 ;\n  }else if (month > 3 && month <=6){\n    return 2;\n  }else if(month > 6 && month <= 9){\n    return 3;\n  }else{\n    return 4;\n  }\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75613,"user_id":null,"body":"int quarter_of(int month) {\n  \/\/ return the quarter for this `month`\n  return (month \/ 3).ceil();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75614,"user_id":null,"body":"int quarter_of(int month) {\n  \/\/ return the quarter for this `month`\n  int q = 0;\n  switch(month) { \n        \n   case 1:\n   case 2:   \n   case 3: { \n      q = 1;\n   } \n   break; \n  \n   case 4:\n   case 5:   \n   case 6: { \n      q = 2;\n   } \n   break;\n      \n   case 7:\n   case 8:   \n   case 9: { \n      q = 3;\n   } \n   break;\n      \n   case 10:\n   case 11:   \n   case 12: { \n      q = 4;\n   } \n   break;   \n      \n   default: { \n      print(0);\n   }\n   break; \n}\n  return q;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d23d89906f92a00267bb83d":[{"id":75615,"user_id":null,"body":"String get_order(String input) {\n  List<String> menu = [\"Burger\",\"Fries\",\"Chicken\",\"Pizza\",\"Sandwich\",\n                       \"Onionrings\",\"Milkshake\",\"Coke\"];\n  List<String> ret = [];\n  for(String item in menu){\n    RegExp regExp = RegExp(item.toLowerCase());\n    Iterable results = regExp.allMatches(input);\n    for(var _ in results){\n      ret.add(item);\n    }\n  }\n  return ret.join(\" \");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75616,"user_id":null,"body":"String get_order(String input) {\n  \/\/ your code here\n  var answer = [];\n  List<String> menu = ['Burger','Fries','Chicken','Pizza','Sandwich','Onionrings','Milkshake','Coke'];\n  for(var i = 0; i < menu.length; i++){\n    new RegExp(menu[i].toLowerCase()).allMatches(input).forEach((x) => answer.add(menu[i]));\n  }\n  return answer.join(' ');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75617,"user_id":645,"body":"String get_order(String input) {\n  List<String> menu = ['Burger', 'Fries', 'Chicken', 'Pizza', 'Sandwich', 'Onionrings', 'Milkshake', 'Coke'];\n  List<String> res = RegExp(r\"milkshake|pizza|chicken|fries|coke|burger|sandwich|onionrings\").allMatches(input).where((x) => x != \"\").map((x) => x[0][0].toUpperCase() + x[0].substring(1)).toList();\n  res.sort((a, b) => menu.indexOf(a).compareTo(menu.indexOf(b)));\n  return res.join(' ');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75618,"user_id":null,"body":"String get_order(String input) {\n  String x = \"\";\n  List code = ['Burger' ,'Fries' ,'Chicken' ,'Pizza' ,'Sandwich','Onionrings' ,'Milkshake', 'Coke'];\n    for (var i in code) {\n      x += (i + \" \") * (input.split(i.toLowerCase()).length-1);\n    }\n  return x.trim();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75619,"user_id":null,"body":"String get_order(String input) {\n  List<int> list = RegExp(r'burger|fries|chicken|pizza|sandwich|onionrings|milkshake|coke').allMatches(input).map((e){\n    switch(e.group(0)){\n      case 'burger': return 1;\n      case 'fries': return 2;\n      case 'chicken': return 3;\n      case 'pizza': return 4;\n      case 'sandwich': return 5;\n      case 'onionrings': return 6;\n      case 'milkshake': return 7;\n      default: return 8;\n    }\n  }).toList();\n  list.sort();\n  return list.map((e){\n    switch(e){\n      case 1: return 'Burger';\n      case 2: return 'Fries';\n      case 3: return 'Chicken';\n      case 4: return 'Pizza';\n      case 5: return 'Sandwich';\n      case 6: return 'Onionrings';\n      case 7: return 'Milkshake';\n      default: return 'Coke';\n    }\n  }).toList().join(' ');\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75620,"user_id":null,"body":"\nString get_order(String s) {\n  final m = [\n    \"burger\",\n    \"fries\",\n    \"chicken\",\n    \"pizza\",\n    \"sandwich\",\n    \"onionrings\",\n    \"milkshake\",\n    \"coke\"\n  ];\n  var r = '';\n  for (final f in m) {\n    var i = 0;\n    do {\n      i = s.indexOf(f, i);\n      if (i >= 0) {\n        i += f.length;\n        r += ' ' + f.titleCase();\n      }\n    } while (i > 0);\n  }\n  return r.trimLeft();\n}\n\nextension StringExtension on String {\n  String titleCase() {\n    return '${this[0].toUpperCase()}${substring(1)}';\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75621,"user_id":null,"body":"\nString get_order(String s) {\n  var foodList = <String>[\n    'Burger',\n    'Fries',\n    'Chicken',\n    'Pizza',\n    'Sandwich',\n    'Onionrings',\n    'Milkshake',\n    'Coke'\n  ];\n  var t = '';\n\n  s = s.toLowerCase();\n  for (var x in foodList) {\n    if (s.contains(x.toLowerCase())) {\n      var r = s.replaceAll(x.toLowerCase(), \"\");\n\n      var val = (s.length - r.length) ~\/ x.length;\n      t += (\" \" + x) * val;\n      print(val);\n    }\n  }\n\n  t=t.replaceFirst(' ','');\n  return t;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75622,"user_id":null,"body":"String get_order(String input) {\n  List<String> menu = ['Burger', 'Fries', 'Chicken', 'Pizza', 'Sandwich', 'Onionrings', 'Milkshake', 'Coke'];\n  List<String> result = [];\n  for (String item in menu) {\n    int counter = item.toLowerCase().allMatches(input).length;\n    result.addAll(List.generate(counter, (index) => item));\n  }\n  return result.join(' ');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75623,"user_id":null,"body":"String get_order(String input) {\n  String output = '';\n  List<String> menu = ['Burger', 'Fries', 'Chicken', 'Pizza', 'Sandwich', 'Onionrings', 'Milkshake', 'Coke'];\n  for(String item in menu) {\n    output = output + (\"$item \")*item.toLowerCase().allMatches(input).length;\n  }\n  return output.substring(0, output.length-1);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75624,"user_id":null,"body":"const items = [\n  \"burger\",\n  \"fries\",\n  \"chicken\",\n  \"pizza\",\n  \"sandwich\",\n  \"onionrings\",\n  \"milkshake\",\n  \"coke\",\n];\n\nString get_order(String input) {\n  List<String> order = [];\n  for(String item in items){\n    String regex = '($item)';\n    new RegExp(regex).allMatches(input).forEach((group){\n      order.add(group[0][0].toUpperCase()+group[0].substring(1));\n    });\n  }\n  \n  return order.join(\" \");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d376cdc9bcee7001fcb84c0":[{"id":75625,"user_id":null,"body":"List<int> odd_ones_out(List<int> nums) {\n  List<int> uniqNumbs = nums.toSet().toList();\n  for (int item in uniqNumbs) {\n    if (nums.where((element) => element == item).length.isOdd)\n      nums.removeWhere((element) => element == item);\n  }\n  return nums;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75626,"user_id":645,"body":"List<int> odd_ones_out(nums) => nums.where((x) => nums.where((y) => y == x).length % 2 == 0).toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75627,"user_id":250,"body":"List<int> odd_ones_out(List<int> nums) {\n  Map<int, int> c = nums.fold<Map<int,int>>({}, (a,n) {\n    a[n] = (a[n] ?? 0)+1;\n    return {...a};\n  });\n    \n  return nums.where((n) => c[n]!.isEven).toList();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75628,"user_id":null,"body":"List<int> odd_ones_out(List<int> nums) {\n  List<int> result = [];\n  for (var n in nums) {\n    if (nums.where((e) => e == n).toList().length.isEven) {\n      result.add(n);\n    }\n  }\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75629,"user_id":null,"body":"List<int> odd_ones_out(List<int> nums) {\n  var occurences = Map();\n  nums.forEach((e)=>occurences.containsKey(e) ? occurences.update(e, (value) => value + 1):occurences[e] = 1);\n  List<int> result = nums.where((e) => occurences[e].isEven).toList();\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75630,"user_id":null,"body":"List<int> odd_ones_out(List<int> a) {\n  var m = {};\n  for (var d in a) {\n    m[d] = m.containsKey(d) ? m[d] + 1 : 1;\n  }\n  return [for (final d in a) if (m[d] % 2 == 0) d  ];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75631,"user_id":759,"body":"List<int> odd_ones_out(nums) {\n  return nums.where((x) => nums.where((y) => y == x).length & 1 == 0).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75632,"user_id":null,"body":"List<int> odd_ones_out(List<int> nums) =>\n   nums.map((e) => nums\n          .fold<int>(\n              0,\n              (previousValue, element) =>\n                  element == e ? previousValue + 1 : previousValue)\n          .isOdd\n      ? -1\n      : e).toList()..removeWhere((element) => element == -1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75633,"user_id":null,"body":"List<int> odd_ones_out(List<int> nums) {\n  for(var i = 0; i < nums.length; i++){\n    int counter = 1;\n    for(var j = 0; j < nums.length; j++){\n      if((nums[i] == nums[j]) && (i != j)){\n        counter++;\n      }\n    }\n    if(counter.isOdd){\n      int temp = nums[i];\n      nums.removeWhere((item) => item == temp);\n      i--; \n    }\n  }\n  return nums;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75634,"user_id":null,"body":"List<int> odd_ones_out(List<int> nums) {\n  List<int> sorted = [];\n  sorted.addAll(nums);\n  sorted.sort();\n  print(sorted);\n  int counter = 1;\n  for (int i = 0; i < sorted.length - 1; i++) {\n    if (sorted[i] == sorted[i + 1]) {\n      counter++;\n    } else {\n      if (counter.isOdd) {\n        print(sorted[i]);\n        while (nums.indexOf(sorted[i]) != -1) {\n          nums.remove(sorted[i]);\n        }\n      } else {\n        counter = 1;\n      }\n    }\n  }\n  if (counter.isOdd) {\n    print(sorted[sorted.length - 1]);\n    while (nums.indexOf(sorted[sorted.length - 1]) != -1) {\n      nums.remove(sorted[sorted.length - 1]);\n    }\n  }\n  return nums;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d49c93d089c6e000ff8428c":[{"id":75635,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n  for (var n = 0; n < sizes.length; hd -= sizes[n++]) {\n    if (sizes[n] > hd) { return n; }    \n  }\n  return sizes.length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75636,"user_id":null,"body":"int save(List<int> a, int hd) {\n  var n=0;\n  for (final i in a){\n    if (hd<i){break;}\n    hd -= i;\n    n++;\n  }\n  return n;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75637,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n  for(int i = 0; i < sizes.length; i++) {\n    hd -= sizes[i];\n    if (hd < 0) {\n      return i;\n    }\n  }\n  return sizes.length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75638,"user_id":null,"body":"\/\/ O(n) time | O(1) space\nint save(List<int> sizes, int hd) {\n  int total = 0;\n  int count = 0;\n  for (int i in sizes) {\n    if (total + i <= hd) count++;\n    total += i;\n  }\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75639,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n  var last = 0;\n  int x=0;\n  for (x = 0; x < sizes.length; x++) {\n    if (last + sizes[x] > hd) {\n      break;\n    }\n    last += sizes[x];\n  }\n  return x;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75640,"user_id":null,"body":"int save(List<int> arr, int hd) {\n int count = 0;\n  int sum = 0;\n  for (int i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum <= hd) {\n      count++;\n    } else\n      break;\n  }\n\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75641,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n int sum =0;\n  return sizes.where((number) {sum+=number;return sum <= hd;}).toList().length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75642,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n int count = 0;\n int tmp = 0;\n for(int i in sizes){\n   tmp += i;\n   if(tmp <= hd) count++;\n }\n return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75643,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n  int count = 0;\n  sizes.fold<int>(0, (previousValue, element) {\n    if ((previousValue + element) <= hd) {\n      count++;\n    } \n    return previousValue + element;\n  });\n  return count;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75644,"user_id":null,"body":"int save(List<int> sizes, int hd) {\n  int aux = 0;\n    int count = 0;\n   if (sizes.isEmpty) return 0;\n    if (sizes[0] > hd) return 0;\n     \n\n    for (var i = 0; i < sizes.length; i++) {\n      if ((aux + sizes[i]) > hd) {\n        break;\n      } else {\n        aux += sizes[i];\n        count++;\n      }\n    }\n\n    return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d50e3914861a500121e1958":[{"id":75645,"user_id":645,"body":"String alphabet = 'abcdefghijklmnopqrstuvwxyz';\nString add_letters(List<String> letters) => alphabet[letters.fold(25, (acc, x) => acc + (alphabet.indexOf(x) + 1)) % 26];","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75646,"user_id":null,"body":"String add_letters(List<String> letters) {\n  return String.fromCharCode((letters.join(\"\").codeUnits.fold(0, (a,v) => a + v - 96) - 1) % 26 + 97);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75647,"user_id":null,"body":"String add_letters(List<String> letters) {\n  \/\/ return early on empty list input\n  if (letters.isEmpty) return 'z';\n  \n  \/\/convert input to ASCII values\n  List<int> units = letters.join().codeUnits;\n\n  \/\/ add 96 to total for ASCII lower case letters\n  int total = 96;\n  \n  \/\/ add each letter's ASCII value to the total\n  for (var e in units) {\n    total += e - 96;\n  }\n  \n  \/\/ loop back to 'a' after passing 'z'\n  while (total > 122) {\n    total -= 26;\n  }\n  \n  \/\/ convert total back to a character and return\n  return String.fromCharCode(total);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75648,"user_id":null,"body":"\nint getValue(List<String> letters) => ((letters.join('').codeUnits.fold(\n            0,\n            (int previousSum, int currentCodeUnit) => previousSum + currentCodeUnit) - (96 * letters.length)) % 26\n            );\n\nString add_letters(List<String> letters) {\n  if (getValue(letters) == 0) return 'z';\n  return letters.isEmpty ? 'z' : String.fromCharCode(getValue(letters) + 96);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75649,"user_id":null,"body":"\/\/ Using Z as index 0 for when letters is empty and the toLowerCase to get it in lower case\nconst String a = 'Zabcdefghijklmnopqrstuvwxyz';\n\nString add_letters(List<String> letters) => \n  a[letters.fold<int>(0, (p, e) => p + a.indexOf(e)) % 26].toLowerCase();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75650,"user_id":null,"body":"String add_letters(List<String> letters) {\n\nList<String> doo = letters;\n\nMap<String, int> number ={\n'a' : 1,\n'b' : 2,\n'c' : 3,\n'd' : 4,\n'e' : 5,\n'f' : 6,\n'g' : 7,\n'h' : 8,\n'i' : 9,\n'j' : 10,\n'k' : 11,\n'l' : 12,\n'm' : 13,\n'n' : 14,\n'o' : 15,\n'p' : 16,\n'q' : 17,\n'r' : 18,\n's' : 19,\n't' : 20,\n'u' : 21,\n'v' : 22,\n'w' : 23,\n'x' : 24,\n'y' : 25,\n'z' : 26\n\n};\n  int collect = 0;\n  int decl = 0;\n  for(int i = 0;i < doo.length ;i++){\n    number.forEach((d,y){\n      if (d == doo[i]){\n        collect += y;\n      }\n    });\n  }\n \n  \n  if( collect < 26){\n    decl = collect;\n  }else if(collect > 26){\n    while(collect > 26){\n     collect = collect - 26 ;\n    }\n    decl = collect;\n  };\n  String finalresult = 'z';\n   number.forEach((i,y){\n    if(y == decl){\n      finalresult = i;\n      \n    };\n  });\n  \n\n  \n return finalresult;\n\n  \/\/ your code here\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75651,"user_id":null,"body":"Map<String,int> map = {\n  'a' : 1,\n  'b' : 2,\n  'c' : 3,\n  'd' : 4,\n  'e' : 5,\n  'f' : 6,\n  'g' : 7,\n  'h' : 8,\n  'i' : 9,\n  'j' : 10,\n  'k' : 11,\n  'l' : 12,\n  'm' : 13,\n  'n' : 14,\n  'o' : 15,\n  'p' : 16,\n  'q' : 17,\n  'r' : 18,\n  's' : 19,\n  't' : 20,\n  'u' : 21,\n  'v' : 22,\n  'w' : 23,\n  'x' : 24,\n  'y' : 25,\n  'z' : 26,   \n};\n\nString add_letters(List<String> letters) {\n  if (letters.isEmpty){\n    return 'z';\n  }\n  int value = 0;\n  for(int i =0; i< letters.length ; i++)\n  {\n    value = value + map[letters[i]]!;\n  }\n  String result = '';\n  if(value > 26){\n    while(value > 26){\n      value = value -26;\n    }\n  }\n  result = map.keys.firstWhere(\n    (k) => map[k] == value, orElse: () => 'null');\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75652,"user_id":null,"body":"String add_letters(List<String> letters) {\n  if (letters.isEmpty) return 'z';\n  List<String> alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\n  int sum = 0;\n  letters.forEach((let) {\n    sum += (alphabet.indexOf(let)+1);\n  });\n  sum %= 26;\n  sum = sum == 0 ? 26 : sum;\n  return alphabet[sum-1];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75653,"user_id":null,"body":"String add_letters(List<String> letters) {\n  String sum = String.fromCharCode(letters.fold(0, (int p, e) => p + e.codeUnitAt(0)-96)%26 + 96);\n  return sum == '`' ? 'z' : sum;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75654,"user_id":null,"body":"String add_letters(List<String> letters) {  \nvar alph = \"abcdefghijklmnopqrstuvwxyz\";\n  var total = 0;\n  if (letters.isEmpty) {\n    return \"z\";\n  }else{\n    for (var i = 0; i < letters.length; i++) {\n    total = total + alph.indexOf(letters[i]) + 1;\n  }\n  }\n  \n  return alph[((total - 1) % alph.length)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d68d05e7a60ba002b0053f6":[{"id":75655,"user_id":492,"body":"List<int> bonus(List<int> a, int s) {\n  double x = a.map((aa) => 1 \/ aa).fold(0, (a, b) => a + b);\n  return a.map((aa) => (s \/ (x * aa)).round()).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75656,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) {\n  List<int> answer = [];\n  double x = 0;\n  for (int i = 0; i < arr.length; i++){\n    for (int j = 0; j<arr.length; j++){\n      x = x + arr[i]\/arr[j];\n    }\n    answer.add((s\/x).round());\n    x = 0;\n    }\n  return answer;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75657,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) {\n  List<int> res = [];\n  int x1 = s;\n  double div = 0;\n  for(int i = 0; i < arr.length; i++){\n    div += arr[0] \/ arr[i];\n  }\n  x1 = (s \/ div).round();\n  res.add(x1);\n  for(int i = 1; i < arr.length; i++){\n    res.add((arr[0] \/ arr[i] * x1).round());\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75658,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) => arr\n      .map((e) => ((s \/ e) * s \/ arr.map((m) => s \/ m).fold(0, (pre, ele) => pre + ele)).round())\n      .toList();","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75659,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) {\n  var scaleList = arr.map((e) => s \/ e).toList();\n  var sc = s \/ scaleList.fold(0, (pre, ele) => pre + ele);\n  var resL = scaleList.map((e) => (e * sc).round()).toList();\n  return resL;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75660,"user_id":null,"body":"List<int> bonus(List<int> absences, int total) {\n var acc = absences.toSet().map((e) => e.toDouble()).reduce( (a, b )=> a * b);\n  print(acc);\n var toShare= absences.map((e) => acc\/e).reduce((value, element) => value+element);\nvar   mulfactor = total\/toShare;\nprint( absences.map((e) =>  mulfactor *  acc\/e).toList());\nreturn  absences.map((e) =>  mulfactor *  acc\/e)\n  \n  .map((e) => e.round()).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75661,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) {\n  var arr1=arr.map((a) => 1\/a).toList().reduce((x, y) => x + y);\n  var a=s\/arr1;\n  var arr2=arr.map((b) => (a\/b).round()).toList();  \n  return arr2;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75662,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) {\n  final List<int> result = [];\n  for (var i = 0; i < arr.length; i++) {\n    double denominator = 1;\n\n    for (var j = 0; j < arr.length; j++) {\n      if (i == j) continue;\n      denominator += arr[i] \/ arr[j];\n    }\n\n    result.add((s \/ denominator).round());\n  }\n\n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75663,"user_id":null,"body":"List<int> bonus(List<int> arr, int s) {\n  var sumOfCommon = 0.0;\n  \/\/ find common multiple\n  for (var item in arr) {\n    sumOfCommon += 1 \/ item;\n  }\n  var k = s \/ sumOfCommon;\n\n  return arr.map((item) => (k \/ item).round()).toList();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75664,"user_id":50,"body":"import 'package:collection\/collection.dart';\n\nList<int> bonus(List<int> arr, int s) {\n  Iterable<double> a=arr.map((e)=>e.toDouble());\n  double rate=a.map((e)=>1.0\/e).sum;\n  return a.map((e)=>(s.toDouble()\/(rate*e)).round()).toList();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d6ee508aa004c0019723c1c":[{"id":75665,"user_id":null,"body":"oddest(List<int> keys) {\n  if (keys.isEmpty) return null;\n  List<int> values = [];\n  for (var i = 0; i < keys.length; i++) {\n    values.add(genOdd(keys[i]));\n  }\n  int maxValue = -1;\n  for (var item in values) {\n    maxValue = item > maxValue ? item : maxValue;\n  }\n  int countMaxValue = 0;\n  for (var item in values) {\n    if (item == maxValue) countMaxValue++;\n  }\n  if (countMaxValue > 1) {\n    return null;\n  } else {\n    return keys[values.indexOf(maxValue)];\n  }\n}\n\nint genOdd(int num) {\n  if (num == -1) return 9223372036854775807;\n  if (num.isEven) {\n    return 0;\n  } else {\n    return 1 + genOdd((num - 1) ~\/ 2);\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75666,"user_id":168,"body":"import 'dart:math';\n\nint oddest(List<int> a) {\n  int oddness(int n) => n.isEven ? 0 : n == -1 ? 1000 : 1 + oddness(n >> 1);\n  int m = a.map(oddness).fold(0, max);\n  var xs = a.where((x) => oddness(x) == m);\n  return xs.length == 1 ? xs.first : null;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75667,"user_id":null,"body":"import 'dart:math';\n\noddest(List<int> a) {\n  if (a.length == 0) { return null; }\n  oddness(x) => x == -1 ? 666 : (x % 2 == 0 ? 0 : 1 + oddness((x - 1)~\/2)); \/\/ -1 is infinitely odd...\n  var buf = a.map<int>((x) => oddness(x)).toList(); \n  var mx = buf.reduce(max); \/\/ maximum oddness\n  if (buf.where((x) => x == mx).length > 1) { return null; } \/\/ mx is not unique\n  return a[buf.indexOf(mx)];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75668,"user_id":645,"body":"oddest(List<int> a) {\n  if (a.length == 0) return null;\n  else if (a.length == 1) return a[0];\n  else if (a.every((int n) => n == -1)) return null;\n  else {\n    List<int> odds = a.where((int n) => n % 2 != 0).toList();\n    List<int> evens = a.where((int n) => n % 2 == 0).toList();\n    if (odds.length == 0) return null;\n    else if (evens.length == 0) {\n      var r = oddest(a.map((n) => n >> 1).toList());\n      return r == null ? null : r * 2 + 1;\n    } else return oddest(odds);\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75669,"user_id":null,"body":"import 'package:collection\/collection.dart';\n\noddest(List<int> a) {\n  if(a.length == 1) return a[0];\n  a = a.where((el) => el.isOdd).toList();\n  List<int> b = a;\n  List<int> c = b;\n    while(b.where((el) => el.isOdd).length > 1){\n    c = b.map((el) => el == 0 ? 0 : ((el-1)~\/2).isOdd ? (el-1)~\/2 : 0).toList();\n    if(IterableEquality().equals(b,c) == true) return null;\n    b = c;\n  }\n  if(b.where((el) => el != 0).length == 1) print(b.where((ele) => ele != 0).toList());\n  return b.where((el) => el != 0).length == 1 ?  a[b.indexWhere((el) => el != 0)] : null;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75670,"user_id":null,"body":"oddest(List<int> a) {\n    if (a.length == 1) {\n      return a.first;\n    }\n    final minusOnes = a.where((element) => element == - 1).length;\n    if (minusOnes == 1) {\n      return -1;\n    } else if (minusOnes > 1) {\n      return null;\n    }\n    var arr = [...a];\n    var index = -1;\n    Iterable<int> odds;\n    while((odds = arr.where((element) => element.isOdd)).isNotEmpty) {\n      if (odds.length == 1) {\n        index = arr.indexWhere((element) => element.isOdd);\n        break;\n      }\n      arr = arr.map((e) => e.isOdd ? (e - 1) ~\/ 2 : e).toList();\n      if (arr.every((element) => element == -1)) {\n        return null;\n      }\n    }\n\n    return index != -1 ? a[index] : null;\n  }\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75671,"user_id":null,"body":"\ndynamic oddest(List<int> a) {\n  if(a.isEmpty){\n    return null;\n   }\n  List<int> rating = [];\n  for (int el in a){\n    rating.add(calcRating(el));\n  }\n  int max=0;\n  int ind=0;\n  for(int i=0;i<rating.length;i++){\n    if (rating[i]>max){\n      max=rating[i];\n      ind=i;\n    }\n  }\n  int countMax=0;\n  for(int el in rating){\n    if (el==max){\n      countMax+=1;\n    }\n  }\n  if(a.contains(-1)){\n    if(a.join('').replaceAll('-1','').isEmpty&&a.length>1){\n      return null;\n    }\n    return -1;\n  }\n  return countMax>1?null:a[ind];\n}\n\nint calcRating(int num){\n  int res = num%2;\n  return res+recCalc(0,num);\n}\n\nint recCalc(int depth, int cur){\n  if(cur*cur==1){\n    return depth;\n  }\n  if (((cur-1)\/2)%2==1){\n   return recCalc(depth+1, (cur-1)~\/2);\n  }\n  return depth;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75672,"user_id":null,"body":"\noddest(List<int> a) {\n  \/\/ your code here\n  if (a.length ==0){\n    return null;\n  }\n  if (a.length ==1) {\n    return a[0];\n  }\n  int maxpuntaje = 0;\n  int resultado = 0;\n  bool repetido = false;\n  for (int i=0;i<a.length;i++) {\n    \n    int puntaje = 0;\n    int x = a[i];\n    \n    while (x%2!=0 && x!=-1) {\n      puntaje= puntaje+1; \n      x = (x-1)~\/2;\n    }\n    if (x==-1){\n      puntaje=999999999;\n    }\n    if (puntaje >maxpuntaje) {\n      maxpuntaje = puntaje;\n      resultado = a[i];\n      repetido = false;\n     \n\n  }else if (puntaje == maxpuntaje) {\n      repetido = true;\n    }\n\n  \n}\n    if (repetido) {\n    return null;\n  }\n\n  return resultado;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75673,"user_id":null,"body":"int oddLevel(int n) {\n  int oddLevel = 0;\n  while (n.isOdd) {\n    oddLevel++;\n    n = (n - 1) ~\/ 2;\n    if (n == -1) {\n      oddLevel = 100;\n      break;\n    }\n  }\n  return oddLevel;\n}\n\nint oddest(List<int> array) {\n  if (array.isEmpty) {\n    return null;\n  }\n  Map<int, int> oddLevelMap = {};\n  int highestOddLevel = 0;\n  int nWitHighestOddLevel = 0;\n  for (final n in array) {\n    final thisOddLevel = oddLevel(n);\n    oddLevelMap[n] = thisOddLevel;\n    if (thisOddLevel >= highestOddLevel) {\n      highestOddLevel = thisOddLevel;\n      nWitHighestOddLevel = n;\n    }\n  }\n  if (oddLevelMap.values\n          .where((oddLevel) => oddLevel == highestOddLevel)\n          .length >\n      1) {\n    return null;\n  }\n  if (array.where((n) => n == nWitHighestOddLevel).length > 1) {\n    return null;\n  }\n  return nWitHighestOddLevel;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75674,"user_id":null,"body":"dynamic oddest(List<int> a) {\n  if (a.isEmpty) return null;\n  else if (a.length == 1) return a.first;\n  List<int> arr = [];\n  int oddest = 0, maxLevelOdd = 0, levelOdd;\n  int getLevelOdd(int n) {\n    if (n == -1) return -1;\n    int count = 0;\n    while (n.isOdd) {\n      count++;\n      n = ((n - 1) ~\/ 2);\n    }\n    return count;\n  }\n  for (int n in a) {\n    if (n.isEven) arr.add(0);\n    else {\n      levelOdd = getLevelOdd(n);\n      arr.add(levelOdd);\n      if (levelOdd > maxLevelOdd) {\n        maxLevelOdd = levelOdd;\n        oddest = n;\n      }\n    }\n  }\n  arr.sort();\n  if (arr.first == -1 && arr[1] == -1 || arr.first != -1 && arr.last == arr[arr.length-2]) return null;\n  else if (arr.first == -1) return -1;\n  return oddest;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5d98b6b38b0f6c001a461198":[{"id":75675,"user_id":492,"body":"String code(String s) {\n    List<String> m = ['10','11','0110','0111','001100','001101','001110','001111','00011000','00011001'];\n    return s.split('').map((x) => m[int.parse(x)]).join('');\n}\nString decode(String str) {\n    var ret = \"\", i = 0, lg = str.length;\n    while (i < lg) {\n        var zero_i = i;\n        while ((zero_i < lg) && (str[zero_i] != \"1\")) {\n            zero_i++;\n        }\n        var l = zero_i - i + 2;\n        var ss = str.substring(zero_i + 1, zero_i + l);\n        ret += int.parse(ss, radix: 2).toString();\n        i = zero_i + l;\n    }\n    return ret;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75676,"user_id":null,"body":"String code(String s) {\n  String bin = '';\n  for(int i = s.length - 1; i >= 0 ; i--) {\n    String binStr = int.parse(s[i]).toRadixString(2);\n    bin = ('0' * (binStr.length - 1)) + '1' + binStr + bin;\n  }\n  return bin;\n}\n\nString decode(String str) {\n  String dec = '';\n  for(int i = 0, len = 1; i < str.length; i++, len++) {\n    if(str[i] != '1') continue;\n    int end = ++i + len;\n    dec += int.parse(str.substring(i, end), radix: 2).toString();\n    len = 0;\n    i = end - 1;\n  }\n  return dec;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75677,"user_id":250,"body":"String code(String s) {\n  var m = [\n    [\"0\", \"x\"],\n    [\"1\", \"y\"],\n    [\"9\", \"00011001\"],\n    [\"8\", \"00011000\"],\n    [\"7\", \"001111\"],\n    [\"6\", \"001110\"],\n    [\"5\", \"001101\"],\n    [\"4\", \"001100\"],\n    [\"3\", \"0111\"],\n    [\"2\", \"0110\"],\n    [\"y\", \"11\"],\n    [\"x\", \"10\"],\n  ];\n  \n  for (int i = 0; i < m.length; i++) {\n    var c = m[i];\n    s = s.replaceAll(c[0], c[1]);\n  }\n  \n  return s;\n}\nString decode(String str) {\n  var m = [\n    [\"9\", \"00011001\"],\n    [\"8\", \"00011000\"],\n    [\"7\", \"001111\"],\n    [\"6\", \"001110\"],\n    [\"5\", \"001101\"],\n    [\"4\", \"001100\"],\n    [\"3\", \"0111\"],\n    [\"2\", \"0110\"],\n    [\"1\", \"11\"],\n    [\"0\", \"10\"],\n  ];\n  \n  String s = \"\";\n  \n  while (str.length > 0) {\n    for (int i = 0; i < m.length; i++) {\n      var c = m[i];\n      if (str.length >= c[1].length && str.substring(0, c[1].length) == c[1]) {\n        s += c[0];\n        str = str.substring(c[1].length);\n      }  \n    }\n  }\n  \n  \n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75678,"user_id":null,"body":"calculateEncodedAddon(int zeroCount) {\n  String encodeAddon = \"\";\n  for(int i = 0; i < zeroCount - 1; i++ ) {\n    encodeAddon += \"0\";\n  }\n  encodeAddon += \"1\";\n  return encodeAddon;\n}\n\nString code(String s) {\n  return s.split(\"\").map((symbol) {\n    final digit = int.parse(symbol);\n    String encodeAddon = calculateEncodedAddon(digit.bitLength);\n    final dBinary = digit.toRadixString(2);\n    return encodeAddon + dBinary;\n  }).join(\"\");\n}\n\nString decode(String str) {\n  String encodedSymbols = str;\n  String num = \"\";\n  while (encodedSymbols.length > 0) {\n    bool isRunning = true;\n    for(int i = 1; isRunning; i++) {\n      final encodeAddon = encodedSymbols.substring(0, i);\n      final binaryDiget = encodedSymbols.substring(i, i * 2);\n      final digit = int.parse(binaryDiget, radix: 2);\n      final digitEncodeAddon = calculateEncodedAddon(digit.bitLength);\n      if (encodeAddon == digitEncodeAddon) {\n        num += digit.toString();\n        encodedSymbols = encodedSymbols.substring(i*2);\n        isRunning = false;\n      }\n    }\n  }\n  return num;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75679,"user_id":null,"body":"String code(String s) {\n  return s.split('').map((el) => codeDigit(el)).join();\n}\n\nString codeDigit(String s) {\n  String bin = int.parse(s).toRadixString(2);\n  return bin.replaceAll('1','0').replaceRange(bin.length-1,bin.length,'1') + bin;\n}\n\nString decode(String str) {\n  int zeroCounter = 0; \n  int digitParts = 0;\n  String currentDigit = '';\n  String result = '';\n  \n    str.split('').forEach((el) {\n      if (digitParts > 0) {\n        digitParts--;\n        currentDigit += el;\n      } else {\n        if (currentDigit.isNotEmpty) result += int.parse(currentDigit, radix: 2).toString();\n        currentDigit = '';\n        if (el=='0') {\n          zeroCounter++;\n        } else {\n          digitParts = zeroCounter + 1;\n          zeroCounter = 0;\n        }\n      }\n    });\n    if (currentDigit.isNotEmpty) result += int.parse(currentDigit, radix: 2).toString();\n    return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75680,"user_id":null,"body":"String code(String s) => s\n    .split('')\n    .map((e) =>\n        \"${'0' * (int.parse(e).toRadixString(2).length - 1)}1${int.parse(e).toRadixString(2)}\")\n    .join();\n\nString decode(String str) {\n  String res = \"\", a = \"\";\n  bool isRead = true;\n  int writeDigitCount = 0;\n  var splitted = str.split('');\n  for (var i = 0; i < splitted.length; i++) {\n    if (isRead) {\n      if (splitted[i] == \"0\") {\n        writeDigitCount++;\n      } else {\n        isRead = false;\n      }\n      continue;\n    } else {\n      a += splitted[i];\n      writeDigitCount--;\n      if (writeDigitCount + 1 <= 0) {\n        res += int.parse(a, radix: 2).toString();\n        writeDigitCount = 0;\n        isRead = true;\n        a = \"\";\n        continue;\n      }\n    }\n  }\n  return res;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75681,"user_id":169,"body":"String code(String s)\n  => List.generate(s.length, (i) {\n    String b = int.parse(s[i]).toRadixString(2);\n    return '0'*(b.length-1)+'1'+b;\n  }).join('');\n\n  \n\nString decode(String str) {\n  String result = \"\";\n  int length = 1;\n  int n = -1;\n  \n  while(++n < str.length) {\n    \/\/ find the length of the next value\n    while(str[n++]=='0') length++;\n    \n    \/\/ decode\n    result += int.parse(str.substring(n, n+length), radix: 2).toString();\n    n += length-1;\n    length = 1;\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75682,"user_id":null,"body":"String code(String s) {\n  var result = \"\";\n  \n  for(int i = 0; i < s.length; i++) {\n    result += encodeNum(int.parse(s[i]));  \n  }\n  \n  return result;\n}\n\nString encodeNum(int num) {\n  var k = num.bitLength;\n  var result = \"\";\n  \n  for(int i = 0; i < k - 1; i++) {\n    result += \"0\";\n  }\n  \n  result += \"1\" + decToBin(num).toString();\n  \n  return result;\n}\n\nString decode(String str) {\n  var encodeMap = <String, int>{};\n  var result = \"\";\n  \n  for(int i = 0; i < 10; i++) {\n    encodeMap[encodeNum(i)] = i;\n  }\n  \n  String buffer = \"\";\n  \n  for(int i = 0; i < str.length; i++) {\n    buffer += str[i];\n    \n    if(encodeMap.containsKey(buffer)) {\n      result += encodeMap[buffer].toString();\n      buffer = \"\";\n    }\n  }\n  \n  return result;\n}\n\nint decToBin(int dec) {\n  int input = dec;\n  int bin = 0, i = 1; \n  while(input > 0)\n  {\n      bin = bin + (input % 2)*i;\n      input = (input\/2).floor();\n      i = i * 10;\n  }\n\n  return bin;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75683,"user_id":null,"body":"String code(String s) {\n\n\/\/   Declare the coded string\n  String codeString = '';\n  \n  \n  \/\/   Iterate through each character in the String s\n  for(int i = 0; i < s.length; i++) {\n\/\/     Apply the prepended values\n    String prependedString = prependZeros(int.parse(s[i]));\n\/\/     Apply the binary string\n    String binaryString = binaryFromInt(int.parse(s[i]));\n\/\/     Add both to the codeString\n    codeString += prependedString;\n    codeString += binaryString;\n    \n  }\n\n  return codeString;\n}\n\nString binaryFromInt(int d) {\n\/\/   brute force, but it works\n  switch(d) {\n      case 0:\n        return '0';\n      case 1:\n        return '1';\n      case 2:\n        return '10';\n      case 3:\n        return '11';\n      case 4:\n        return '100';\n      case 5:\n        return '101';\n      case 6:\n        return '110';\n      case 7:\n        return '111';\n      case 8:\n        return '1000';\n      case 9:\n        return '1001';\n      default:\n        return '';\n  }\n}\n\nint bitsFromInt(int d) {\n\/\/   This is a brute force method, but it will work\n  if (d < 2) {\n    return 1;\n  }\n  else if (d < 4) {\n    return 2;\n  }\n  else if (d < 8) {\n    return 3;\n  }\n\/\/   else\n  return 4;\n}\n\n\n\nString prependZeros(int d) {\n\/\/ Declare zero string\n  String zeroString = '';\n  \n  \n\/\/   Get number of bits within this digit\n  int bits = bitsFromInt(d);\n  for(int i = 0; i < bits-1; i++) {\n    zeroString += '0';\n  }\n  \n\/\/   At the very end, append the 1\n  zeroString += '1';\n  \n  return zeroString;\n}\n\n\n\n\n\n\n\n\nString decode(String str) {\n\n  String decodedString = '';\n  \n  \/\/ We will need to run through this entire string, from left to right\n\/\/   We can do so by taking the substring and removing the values we are done with\n  while(str.length > 0) {\n\/\/   set the index at the front\n    int i = 0;\n\/\/     find the first 1\n    while (str[i] != '1') {\n\/\/       increment i\n      i++;\n    }\n\/\/     i+1 will give us the number of bits\n    int bits = i+1;\n\/\/     convert the next number of digits into the integer\n\/\/     get the substring of next chars\n    String binaryString = str.substring(bits, bits*2);\n\/\/     get the integer from binary\n    int d = convertBinaryToInteger(binaryString);\n\/\/     add integer to decoded string\n    decodedString += d.toString();\n    \n\/\/     Remove this decoded section from the coded string\n    str = str.substring(bits*2);\n    \n  }\n  return decodedString;\n  \n  \n\/\/   Read the zeros to find out how many bits there are\n  \n\/\/   Read that number of bits to the right & convert from binary to integer\n  \n\/\/   Add to the decoded value\n  \n}\n\nint convertBinaryToInteger(String binaryString) {\n    \/\/   brute force, but it works\n  switch(binaryString) {\n      case '0':\n        return 0;\n      case '1':\n        return 1;\n      case '10':\n        return 2;\n      case '11':\n        return 3;\n      case '100':\n        return 4;\n      case '101':\n        return 5;\n      case '110':\n        return 6;\n      case '111':\n        return 7;\n      case '1000':\n        return 8;\n      case '1001':\n        return 9;\n      default:\n        return -1;\n  }\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75684,"user_id":null,"body":"String code(String s) {\n  List<String> digits = s\n    .split('')\n    .map((e) => int.parse(e).toRadixString(2))\n    .toList();\n  var buffer = StringBuffer();\n  for(String digit in digits){\n    buffer.write('0' * (digit.length - 1) + '1');\n    buffer.write(digit);\n  }\n  return buffer.toString();\n}\n\nString decode(String str) {\n  List<int> buffer = [];\n  int counter = 0;\n  int i = 0;\n  while(i < str.length){\n    if(str[i] == '0'){\n      counter++;\n      i++;\n    }\n    else{\n      counter++;\n      i++;\n      String bin = str.substring(i, i + counter);\n      int dec = int.parse(bin, radix: 2);\n      buffer.add(dec);\n      i = i + counter;\n      counter = 0;\n    }\n  }\n  return buffer.join();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5da1df6d8b0f6c0026e6d58d":[{"id":75685,"user_id":645,"body":"import \"dart:math\";\n\nint c(int k) {\n  int divNb(int n) {\n    int kt, i, p = 1;\n    for (i = 2; n > 1; i++) {\n      for (kt = 0; n % i == 0; kt++) n ~\/= i;\n      if (kt != 0) p *= kt + 1;\n    }\n    return p;\n  }\n  int r = sqrt(k).floor();\n  return r * r == k ? divNb(k * r) : 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75686,"user_id":53,"body":"import \"dart:math\";\n\nint c(int k) {\n  var sq = sqrt(k).toInt();\n  if (sq * sq != k) return 0;\n  var i = 2;\n  var num = k * sq;\n  var ans = 1;\n  while (num > 1) {\n      var cnt = 0;\n      while (num % i == 0) {\n          num = num ~\/ i;\n          cnt++;\n      }\n      ans *= (cnt + 1);\n      i++;\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75687,"user_id":492,"body":"import 'dart:math';\n\nint divNb(int n) {\n  var i = 2, p = 1;\n  while (n > 1) {\n    var kt = 0;\n    while (n % i == 0) {\n      n = n ~\/ i;\n      kt += 1;\n    }\n    if (kt != 0)\n      p *= (kt + 1);\n    i += 1;\n  }\n  return p;\n}    \nint c(int k) {\n  var r = sqrt(k).floor();\n  if (r * r == k)\n    return divNb(k * r);\n  return 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75688,"user_id":168,"body":"Iterable<int> exps(int k) sync* {\n  int p = 2;\n  for (int p = 2; p * p <= k; p++) {\n    int e = 0;\n    for (; k % p == 0; k ~\/= p) e++;\n    if (e > 0) yield e;\n  }\n  if (k > 1) yield 1;\n}\n\nint c(int k) {\n  int r = 1;\n  for (int n in exps(k)) {\n    if (n.isOdd) return 0;\n    r *= 3 * n ~\/ 2 + 1;\n  }\n  return r;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75689,"user_id":null,"body":"\/\/ https:\/\/www.codewars.com\/kata\/5da1df6d8b0f6c0026e6d58d\/train\/dart\nimport 'dart:math';\n\n\/\/ k*k*k=x*x*y*y\nint c(int k) {\n  if (k == 1) return 1;\n  if (checkIsPrime(k)) return 0;\n  \/\/ get prime decomposition of k\n  final kDecomposed = primeDecomposition(k);\n  \/\/ multiply all prime factors count by 3\n  final Map<int, int> k3Decomposed = {};\n  kDecomposed.keys.forEach((key) {\n    int count = kDecomposed[key]!;\n    k3Decomposed[key] = count * 3;\n  });\n  \/\/ if contains any prime factor count is odd, return 0\n  if (k3Decomposed.keys.where((key) => k3Decomposed[key]!.isOdd).isNotEmpty) {\n    return 0;\n  }\n  \/\/ get prime decompositions of pairs (for x*x or y*y)\n  final Map<int, int> decomposedPairs = {};\n  k3Decomposed.keys.forEach((key) {\n    \/\/ for each prime factor\n    final int count = k3Decomposed[key]!;\n    decomposedPairs[key] = count ~\/ 2;\n  });\n  print(decomposedPairs);\n  int res = 1;\n  decomposedPairs.values.forEach((value) => res *= (value + 1));\n  return res;\n  \/\/ flatten\n  \/\/ List<int> flatten = [];\n  \/\/ decomposedPairs.keys.forEach((key) {\n  \/\/   int count = decomposedPairs[key]!;\n  \/\/   for (int i = 0; i < count; i++) {\n  \/\/     flatten.add(key);\n  \/\/   }\n  \/\/ });\n  \/\/ \/\/ get pairs\n  \/\/ final pairs = getPairs(flatten);\n  \/\/ print(pairs);\n  \/\/ return pairs.length;\n}\n\nclass Pair {\n  final Map<int, int> a;\n  final Map<int, int> b;\n\n  Pair(this.a, this.b);\n  @override\n  String toString() {\n    return '[$a,$b]';\n  }\n\n  bool isEqual(Pair other) {\n    final othera = other.a;\n    final otherb = other.b;\n    if (othera.keys.toSet().difference(a.keys.toSet()).isNotEmpty) {\n      return false;\n    }\n    if (otherb.keys.toSet().difference(b.keys.toSet()).isNotEmpty) {\n      return false;\n    }\n    for (int key in a.keys) {\n      if (a[key] != othera[key]) {\n        return false;\n      }\n    }\n    for (int key in a.keys) {\n      if (b[key] != otherb[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nList<Pair> getPairs(List<int> list) {\n  print('getPairs');\n  int maxPairs = 1 << list.length;\n  Map<int, int> itemsWithIndex = list.asMap();\n  List<Pair> pairs = [];\n  \/\/ 0000 to 1111\n  for (int i = 0; i < maxPairs; i++) {\n    Map<int, int> a = {};\n    Map<int, int> b = {};\n    itemsWithIndex.forEach((index, value) {\n      if (i >> index & 1 == 1) {\n        a[value] = a[value] == null ? 2 : a[value]! + 2;\n      } else {\n        b[value] = b[value] == null ? 2 : b[value]! + 2;\n      }\n    });\n    final newPair = Pair(a, b);\n    if (pairs.where((pair) => pair.isEqual(newPair)).isEmpty)\n      pairs.add(newPair);\n  }\n  return pairs;\n}\n\nMap<int, int> primeDecomposition(int n) {\n  if (checkIsPrime(n)) {\n    return {n: 1};\n  }\n  \/\/ get decompositions\n  int nTmp = n;\n  int s = sqrt(n).toInt();\n  Map<int, int> res = {};\n  for (int i = 2; i <= s; i++) {\n    if (!checkIsPrime(i)) continue;\n    int prime = i;\n    if (prime > nTmp) break;\n    while (nTmp % prime == 0) {\n      nTmp ~\/= prime;\n      if (res[prime] != null)\n        res[prime] = (res[prime] ?? 0) + 1;\n      else\n        res[prime] = 1;\n    }\n    if (nTmp > 1 && checkIsPrime(nTmp)) {\n      res[nTmp] = 1;\n      break;\n    }\n  }\n  return res;\n}\n\nMap<int, bool> primes = {2: true, 3: true, 4: false};\nbool checkIsPrime(int n) {\n  if (primes.containsKey(n)) return primes[n] ?? false;\n  int s = sqrt(n).floor();\n  for (int i = 2; i <= s; i++) {\n    if (n % i == 0) {\n      primes[n] = false;\n      return false;\n    }\n  }\n  primes[n] = true;\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75690,"user_id":null,"body":"import 'dart:math';\nint c(int k) {\n  if (k == 1) return 1;\n  int count = 1;\n  int x = sqrt(k).toInt();\n  if (x * x == k) {\n    int n = pow(x, 3).toInt();\n    for (int i = 2; i <= n; i++) {\n      int temp = 0;\n      for (temp = 0; n % i == 0; temp++) n ~\/= i;\n      count *= temp + 1;\n    }\n  } else {\n    return 0;\n  }\n\n  return count;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75691,"user_id":null,"body":"import 'dart:math' as math;\n\nint c(int k) {\n      int divNb(final int n) {\n      var p = 1;\n      var m = n;\n      int kt;\n      for (var i = 2; m > 1; ++i) {\n        for (kt = 0; m % i == 0; ++kt) {\n          m ~\/= i;\n        }\n        if (kt != 0) {\n          p *= kt + 1;\n        }\n      }\n      return p;\n    }\n\n    final r = math.sqrt(k).floor();\n\n    return r * r == k ? divNb(k * r) : 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75692,"user_id":null,"body":"import 'dart:math' show sqrt;\n\nvar primes = [];\n\nvoid createPrimes() {\n  var n = 50000;\n  primes = List.generate(n - 1, (i) => i + 2);\n  for (int p = 2; p < n; p++) {\n    if (primes.contains(p)) {\n      for (int k = 2*p; k <= n; k += p) {\n        primes.remove(k);\n      }\n    }\n  }\n}\n\n\/\/ because x^2y^2 = (xy)^2 = z^3, we know that z must be square,\n\/\/ i.e. all prime factors of z must have even multiplicities.\n\/\/ moreover, all prime factors of xy are the prime factors of z\n\/\/ such that their multiplicities are multiplied by 3 (because of z^3)\n\/\/ and divided by 2 (because of xy = sqrt(x^2y^2) = sqrt(z^3)).\n\/\/ the rest is combinatorics.\nint c(int k) {\n  if (primes.isEmpty) {\n    createPrimes();\n  }\n  \n  if (k == 1) { return 1; }\n  \n  var f = Map();\n  var s = 1;\n  \n  \/\/ factorize k\n  for (var p in primes) {\n    if (p > k) { break; }\n    var contained = false;\n    while (k % p == 0) {\n      k ~\/= p;\n      f.containsKey(p) ? f[p]++ : f[p] = 1;\n      contained = true;\n    }\n    \n    if (contained) {\n      if (f[p].isOdd) { return 0; } \/\/ z ist square, there all prime factors must have even exponents\n      else { s *= 3*f[p]~\/2 + 1; }\n    }\n  }\n  \n  if (k > 1) {\n    var k2 = sqrt(k);\n    if (k2.floor() == k2.ceil()) { return 4; } \/\/ k is a square number, but the factor wasn't in primes\n    return 0; \n  }\n  \n  return s;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75693,"user_id":null,"body":"import 'dart:math';\nint c(int k) {\n  var sk = sqrt(k).toInt();\n  if (sk * sk != k) return 0;\n  int n = sk * k;\n  \n  Map<int, int> m = {};\n  int i = 2;\n  while (n >= i) {\n   if (n % i == 0) {\n     n ~\/= i;\n     m[i] = (m[i] ?? 0) + 1;\n   } else {\n     i++;\n   }\n  }\n  return m.values.toList().fold(1, (a, x) => a * (x + 1));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75694,"user_id":null,"body":"int c(int k) {\n  int ans = 1;\n  int i = 2;\n  while (k != 1) {\n    int cnt = 0;\n    while (k % i == 0) {\n      k = k ~\/ i;\n      cnt++;\n    }\n    if (cnt % 2 == 1) return 0;\n    ans *= (3 * cnt ~\/ 2) + 1;\n    i++;\n  }\n  return ans;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5dad6e5264e25a001918a1fc":[{"id":75695,"user_id":null,"body":"String decode(String r) {\n    \/\/ your code\n  var code = \"\";\n  var countCode = 0;\n  while(true){\n    if (r[countCode].codeUnitAt(0) <= \"9\".codeUnitAt(0) && \n       r[countCode].codeUnitAt(0) >= \"0\".codeUnitAt(0)){\n      code += r[countCode];\n    countCode++;\n    } else {\n      break;\n    }\n  }\n  print(code);  \n  List<int> result = [];\n  String _decode = \"\";\n  \n  for (var i = 0; i<26; i++){\n    result.add(i * int.parse(code) % 26);\n  }\n  var sum = 0;\n  for (var element in result){\n    sum+=element;\n  } \n  if (sum != 325) return \"Impossible to decode\";\n  for (var i = countCode; i <r.length; i++){\n   for (var j = 0; j <result.length; j++){ \n     if (result[j] == r[i].codeUnitAt(0) - \"a\".codeUnitAt(0)){\n       _decode += String.fromCharCode(j + \"a\".codeUnitAt(0));\n     }\n   }\n  }\n    return _decode;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75696,"user_id":null,"body":"\nString decode(String r) {\n  var i = r.indexOf(RegExp('[a-z]'));\n  var n = int.parse(r.substring(0, i)) % 26;\n  var s = '';\n  for (var c in r.substring(i).split('')) {\n    var d = c.codeUnitAt(0) - 'a'.codeUnitAt(0);\n    var a = [];\n    for (int i = 0; i < 26; i++) {\n      if (i * n % 26 == d) {\n        a.add(i);\n      }\n    }\n    if (a.length != 1) return 'Impossible to decode';\n    s += String.fromCharCode(a[0] + 'a'.codeUnitAt(0));\n  }\n  return s;\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75697,"user_id":null,"body":"String encode(String str, int cod) {\n  List<dynamic> list = str.split('').map((e) => e.codeUnitAt(0) - 97).toList();\n  list = list.map((e) => e * cod % 26).toList();\n  list = list.map((e) => String.fromCharCodes([e + 97])).toList();\n  return cod.toString() + list.join();\n}\n\nString decode(String r) {\n  String result = '';\n  var regMatch = RegExp(r'\\d+').firstMatch(r);\n  int cod = int.parse(r.substring(regMatch.start, regMatch.end));\n  String str = r.substring(regMatch.end);\n  for (String item in str.split('')) {\n    for (int i in List.generate(26, (i) => i)) {\n      if (item == String.fromCharCodes([(i * cod % 26) + 97])) {\n        result += String.fromCharCodes([i + 97]);\n      }\n    }\n  }\n  return (str.length == result.length) ? result : 'Impossible to decode';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75698,"user_id":168,"body":"String decode(String r) {\n  var m = RegExp(r'(\\d+)(.*)').matchAsPrefix(r);\n  var n = int.parse(m[1]);\n  if (n % 2 == 0 || n % 13 == 0) return 'Impossible to decode';\n  n = BigInt.from(n).modInverse(BigInt.from(26)).toInt();\n  return String.fromCharCodes(m[2].codeUnits.map((x) => (x - 97) * n % 26 + 97));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75699,"user_id":null,"body":"String decode(String r) {\n  var nums = int.parse(r.replaceAll(RegExp(\"[a-zA-Z]\"), ''));\n  var decoderNum = nums % 26;\n\n  var str = [];\n  var dec = r.replaceAll('$nums', '').codeUnits.map((s) => s - 97);\n  for (var val in dec) {\n    var ls = [\n      for (int x = 0; x < 26; x ++)\n        if (x * decoderNum % 26 == val) x\n    ];\n\n    if (ls.length != 1) break;\n\n    str.add(String.fromCharCode(ls.first + 97));\n  }\n  return str.isEmpty ? \"Impossible to decode\" : str.join('');\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75700,"user_id":null,"body":"String decode(String r) {\n    String alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    String result = \"\";\n    int separator = r.indexOf(RegExp(r'[a-z]'));\n    int key = int.parse(r.substring(0,separator));\n    String word = r.substring(separator);\n    \n\/\/  get result from the calculation for each alphabet\n    List<int> index = [];\n    for(int j= 0;j<26;j++){\n      int k = (j*key)%26;\n      if(index.contains(k)) return \"Impossible to decode\";\n      index.add(k);\n    }\n  \n\/\/  add each alphabet base on index\n    for(int i = 0;i < word.length;i++){\n      int a = alpha.indexOf(word[i]);\n      result += alpha[index.indexOf(a)];\n    }\n    \n    return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75701,"user_id":null,"body":"String decode(String r) {\n  Map map1 = {};\n  Map map2 = {};\n  String str = \"abcdefghijklmnopqrstuvwxyz\";\n  Map modNums = {};\n  int numberInCode = 0;\n  String strInCode = \"\";\n  String result = \"\";\n  \n  for (int i = 0; i < r.length; i++) {\n    try {\n      numberInCode = 10 * numberInCode + int.parse(r[i]);\n    } catch (e) {\n      strInCode += r[i];\n    }\n  }\n  \n  numberInCode = numberInCode % 26;\n  \n  for (int i = 0; i < 26; i++) {\n    map1[str[i]] = i;\n    map2[i] = str[i];\n    modNums[(i * numberInCode) % 26] = i;\n  }\n  \n  if(modNums.length != 26){\n    return \"Impossible to decode\";\n  }\n  \n  for(int i = 0; i < strInCode.length; i++) {\n    result += map2[modNums[map1[strInCode[i]]]];\n  }\n  \n  return result;\n  \n}\n  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75702,"user_id":null,"body":"String decode(String r) {\n    String nums = '0123456789';\n    String stringNum = '';\n    String encoded = '';\n    for (String letter in r.split('')){\n      if (nums.indexOf(letter)!=-1){\n        stringNum+=letter;\n      }else{\n        encoded+=letter;\n      }\n    }\n    int num = int.parse(stringNum);\n    String res = '';\n    for (String letter in encoded.split('')){\n      String decodedLetter = decodeLetter(num, letter);\n      if (decodedLetter==''){\n        return 'Impossible to decode';\n      }else{\n        res+=decodedLetter;\n      }\n    }\n    return res;\n}\n\nString decodeLetter(int salt, String encodedLetter){\n  List<String> predictions = [];\n  String alph = 'abcdefghijklmnopqrstuvwxyz';\n  for (int i = 0; i<alph.length;i++){\n    if ((salt*i)%alph.length==alph.indexOf(encodedLetter)){\n      predictions.add(alph[i]);\n      if (predictions.length>1){\n        return ''; \n      }\n    }\n  }\n  if (predictions.length==1){\n    return predictions[0]; \n  }\n  return '';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75703,"user_id":492,"body":"import 'dart:math' as math;\n\nString decode(String r) {\n    var a = \"abcdefghijklmnopqrstuvwxyz\";\n    RegExp exp = new RegExp(r\"(\\d+)([a-z]+)\");\n    Iterable<Match> matches = exp.allMatches(r);\n    final matchedNum = matches.elementAt(0).group(1);\n    final matchedText = matches.elementAt(0).group(2);\n    var dict = {3:9, 9:3, 21:5, 5:21, 7:15, 15:7, 11:19, 19:11, 17:23, 23:17, 25:25, 1:1};\n    int n = dict[int.parse(matchedNum) % 26];\n    if (n == null)\n        return \"Impossible to decode\";\n    var res = \"\";\n    for(int i = 0; i < matchedText.length; i++) {\n        var c = matchedText[i];\n        res += a[(a.indexOf(c) * n) % 26];\n    }\n    return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75704,"user_id":null,"body":"String decode(String r) {\n  \/\/ your code\n  final List<String> allLetters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n  final int hash = int.parse(r.replaceAll(new RegExp(r'[^0-9]'),''));\n  final String message = r.replaceAll(new RegExp(r'\\d+'),'');\n  final List<String> letters = message.split('');\n  final List<String> result = [];\n  \n  int decryptNumber = -1;\n  for (var i = 0; i< 26; i ++){\n    if((hash*i)%26 == 1){\n      decryptNumber = i;\n    }\n  }\n  if(decryptNumber == -1){\n    return \"Impossible to decode\";\n  }\n  \n  for(var i=0;i<letters.length; i++){\n    final int positionInAlphabet = allLetters.indexOf(letters[i]);\n    final String decryptedLetter = allLetters[positionInAlphabet * decryptNumber % allLetters.length];\n    result.add(decryptedLetter);\n\n  }  \n  return result.join(\"\");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5dae2599a8f7d90025d2f15f":[{"id":75705,"user_id":168,"body":"bool consecutive_ducks(int n) {\n  return n & n - 1 != 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75706,"user_id":null,"body":"bool consecutive_ducks(int n) {\n  while (n > 1) {\n    if (n.isOdd) return true;\n    n ~\/= 2;\n  }\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75707,"user_id":53,"body":"bool consecutive_ducks(int n) {\n  return n % 2 != 0 ? n != 1 : consecutive_ducks(n ~\/ 2);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75708,"user_id":null,"body":"bool consecutive_ducks(int n) => ((n & (n - 1))!=0 && n!=0);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75709,"user_id":645,"body":"bool consecutive_ducks(int n) => (n & (n - 1)) != 0;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75710,"user_id":null,"body":"import 'dart:math';\n\nbool consecutive_ducks(n) {\n  for (var i = 1;i<30;i++){\n    if (pow(2, i)==n) return false;\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75711,"user_id":null,"body":"bool consecutive_ducks(int n) {\n  bool isCons = false;\n  if(n==0 || n==1 || n==2){\n    isCons = false;\n  }\n  \n  while(n%2==0){\n    n = n~\/2;\n  }\n  if(n==1){\n    isCons = false;\n  }else{\n    isCons = true;\n  }\n  return isCons;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75712,"user_id":null,"body":"bool consecutive_ducks(int S) {\n  \/\/  2S \/ n = 2 * a_1 + (n - 1)\n  for (int i = 2; i <= S ~\/ 2; i++) {\n    if (2 * S % i == 0) {\n      num firstNumber = (2 * S \/ i - i + 1) \/ 2;\n      if (firstNumber > 0 && firstNumber % 1 == 0) return true;\n    }\n  }\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75713,"user_id":null,"body":"import 'dart:math';\n\nbool consecutive_ducks(int n) => (n & (n - 1)) != 0 ? true : false;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75714,"user_id":null,"body":"import \"dart:math\";\nbool consecutive_ducks(int n) {\n  for(int i=0;i<=32;i++){\n    if(pow(2,i)==n){\n      return false;\n    }\n  }\n  return true;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5ef9ca8b76be6d001d5e1c3e":[{"id":75715,"user_id":null,"body":"encode(String text) => text.runes\n  .map((x) => x.toRadixString(2)\n  .padLeft(8, '0'))\n  .join()\n  .split('')\n  .fold<String>('',(p,e)=> p + e*3);\n\ndecode(String bits){\n  List list = [];\n  List fixed = [];\n  List ascii = [];\n  \n  for(int i=0;i<bits.length;i+=3){\n    list.add(bits.substring(i,i+3));\n  }\n  for(int i = 0; i < list.length; i++){\n    fixed.add(list[i].split('').where((y)=>int.parse(y).isOdd).length > 1 ? 1 : 0);\n  }\n  \n  var binary = fixed.reduce((v,e)=>\"$v$e\");\n  \n  for(int i=0;i<binary.length;i+=8){\n    ascii.add(binary.substring(i,i+8));\n  }\n  return String.fromCharCodes(ascii.map((x)=>int.parse(x,radix: 2)));\n  }","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75716,"user_id":168,"body":"String encode(String text) =>\n  text.codeUnits\n    .expand((c) => c.toRadixString(2).padLeft(8, '0').split(''))\n    .map((c) => c * 3).join();\n\nString decode(String bits) =>\n  bits.replaceAllMapped(RegExp('...'), (m) => [0, 1, 2, 4].contains(int.parse(m[0], radix: 2)) ? '0' : '1')\n    .replaceAllMapped(RegExp('.{8}'), (m) => String.fromCharCode(int.parse(m[0], radix: 2)));","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75717,"user_id":null,"body":"String encode(String text)\n    => text.runes.map((x) => '${'0'*(8-x.toRadixString(2).length)}${x.toRadixString(2)}'\n                      .runes\n                      .map((x) => String.fromCharCode(x) * 3)\n                      .reduce((value, element) => value + element))\n                  .reduce((value, element) => value + element);\n\nString decode(String bits) {\n   int length = bits.length~\/3;\n   String binary = \"\";\n   String text = \"\";\n   for (int i = 0; i < length; i++){\n     String fragment = bits.substring(i * 3, i * 3 + 3);\n     int sum = 0;\n     for(int j = 0; j < fragment.length; j++){\n       sum += int.parse(fragment[j]);\n     }\n     if(sum > 1){\n       binary += \"1\";\n     } else {\n       binary += \"0\";\n     }\n     if((i + 1) % 8 == 0){\n       String char =  String.fromCharCode(int.parse(binary,radix: 2));\n       text += char;\n       binary = \"\";\n     }\n   }\n  print(text);\n  return text;\n}","lang_id":13,"is_control":0,"status":"sample_semi_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75718,"user_id":null,"body":"encode(text) {\n  String bits=\"\";\n  List<dynamic> tripledStrings = text.codeUnits.map((int strInt) => strInt.toRadixString(2).toString().padLeft(8, '0')).toList();\n  for(String item in tripledStrings) {\n    item.split('').forEach((ch) => bits += ch*3);\n  }\n  return bits;\n}\n\ndecode(bits) {\n  String bytes = \"\";\n  RegExp expTriple = RegExp(r\"\\d{3}\");\n  RegExp expEight = RegExp(r\"\\d{8}\");\n\n\n  var list = expTriple.allMatches(bits).map((m) => m[0]!).toList();\n\n  for (String item in list){\n    int countOne = 0;\n    int countZero = 0;\n    item.split('').forEach((ch) {\n      if(ch==\"1\"){countOne++;}else{countZero++;}});\n\n    if (countOne > countZero) {\n      bytes += \"1\";\n    }else{\n      bytes +=\"0\";\n    }\n  }\n  var listBytes = expEight.allMatches(bytes).map((m) => String.fromCharCode(int.parse(m[0]!, radix: 2))).toList();\n\n  String text = listBytes.join();\n  return text;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75719,"user_id":null,"body":"import 'dart:math';\n\nString encode(String message) {\n  return message.codeUnits.map((char) {\n    String result = \"\";\n    int mask = pow(2, 7).toInt();\n    \n    for (int i = 0; i < 8; i++) {\n      result += (char & mask > 0 ? \"1\" : \"0\") * 3;\n      mask ~\/= 2;\n    }\n    \n    return result;\n  }).join('');\n}\n\nString decode(String message) {\n  List<int> bits = message.split('').map((bit) => bit == \"0\" ? 0 : 1).toList();\n  List<int> bytes = [];\n  \n  int byte = 0;\n  \n  for (int i = 0; i < bits.length \/ 3; i++) {\n    int sum = bits[i * 3] + bits[i * 3 + 1] + bits[i * 3 + 2];\n    \n    byte <<= 1;\n    byte |= sum < 2 ? 0 : 1;\n    \n    if (i % 8 == 7) {\n      bytes.add(byte);\n      byte = 0;\n    }\n  }\n  \n  return String.fromCharCodes(bytes);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75720,"user_id":null,"body":"String encode(text) {\n  String result = '';\n  for (int i = 0; i < text.length; i++){\n    String binary = text[i].codeUnitAt(0).toRadixString(2).toString();\n    binary = ('0' * (8 - binary.length)) + binary;\n    for (int j = 0; j < binary.length; j ++){\n      result += binary[j] * 3;\n    }\n  }\n  return result; \n}\n\ndecode(String text) {\n  List<String> bits = [];\n  for (int i = 0; i < text.length; i += 3){\n    int t = text.substring(i, i + 3).split('').map((s) => int.parse(s)).reduce((a, b) => a + b) < 2 ? 0 : 1;\n    bits.add(t.toString()); \n  }\n\n  List<String> result = [];\n  for (int i = 0; i < bits.length; i += 8){\n    int charCode = int.parse(bits.sublist(i, i + 8).join(), radix: 2);\n    result.add(String.fromCharCode(charCode));\n  }\n  return result.join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75721,"user_id":250,"body":"encode(text) {\n  return text.split(\"\").map((x) { \n    return x.codeUnitAt(0)\n      .toRadixString(2).split(\"\")\n      .map((y) => \"${y}${y}${y}\")\n      .join(\"\")\n      .padLeft(24, \"0\");\n  }).join(\"\"); \n}\n\ndecode(bits) {\n  List<String> t = [];\n  \n  for (int i = 0; i < bits.length; i += 3) {\n    t.add(bits.substring(i, i+3));\n  }\n  \n  var b = t.map((x) => x.split(\"\").fold<int>(0, (a,b) => a+(b==\"1\"?1:0)) > 1 ? 1 : 0).join(\"\");\n  List<String> r = [];\n  \n  for (int i = 0; i < b.length; i += 8) {\n    r.add(String.fromCharCode(int.parse(b.substring(i, i+8), radix: 2)));\n  }\n  \n  return r.join(\"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75722,"user_id":null,"body":"encode(text) {\n  return text\n    .split('')\n    .map((ch) => ch.codeUnitAt(0))\n    .map((code) => code.toRadixString(2).padLeft(8, '0'))\n    .map((bin) => bin.split('').map((b) => b * 3).join())\n    .join();\n}\n\ndecode(bits) {\n  final triples = <String>[];\n  for (int i = 0; i < bits.length; i += 3) {\n    triples.add(bits.substring(i, i + 3));\n  }\n  for (int i = 0; i < triples.length; i++) {\n    if ('0'.allMatches(triples[i]).length > 1) {\n      triples[i] = '0';\n    } else {\n      triples[i] = '1';\n    }\n  }\n  final bytes = <String>[];\n  for (int i = 0; i < triples.length; i += 8) {\n    bytes.add(triples.sublist(i, i + 8).join());\n  }\n  return bytes\n    .map((byte) => int.parse(byte, radix: 2))\n    .map((code) => String.fromCharCode(code))\n    .join();\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75723,"user_id":null,"body":"encode(text) {\n  List<int> asciiList = [];\n  List<int> finalList = [];\n  \n  for(int i=0; i<text.length; i++){\n     asciiList.add(text.codeUnitAt(i));\n  }\n  \n  asciiList.forEach((dec){\n   \n    double value = dec.toDouble();\n    List<int> restList = [];\n    List<int> bitList = [];\n   \n    do{\n      \n      int rest = value.toInt()%2;\n      value = value\/2;\n      restList.add(rest);\n      \n    }while(value>0.9);\n    \n    while(restList.length < 8){\n      restList.add(0);\n    };\n    \n    restList.forEach((n){\n       bitList.add(n);\n       bitList.add(n);\n       bitList.add(n);\n    });\n    \n    finalList.addAll(bitList.reversed);\n    \n  });\n  \n  return finalList.join(); \n}\n\ndecode(bits) {\n  List<String> bitsList = bits.split(\"\");\n  List<String> threeList = [];\n  List<String> binaryList = [];\n  \n  for(int i=0; i<bitsList.length; i+=3){\n   int end = i+3;\n    if(end <= bitsList.length){\n      final values = bitsList.getRange(i,end);\n      final threeNums = values.join(\"\");\n      threeList.add(threeNums); \n    }\n  }\n  \n    for(int i=0; i<threeList.length; i++){\n      if((threeList[i].contains(\"111\")) || (threeList[i].contains(\"000\"))){\n        if(threeList[i]==\"111\") threeList[i] =\"1\";\n          if(threeList[i]==\"000\") threeList[i] =\"0\";\n    }\n    else{\n      if(threeList[i]==\"110\" || threeList[i] ==\"101\" || threeList[i] ==\"011\") threeList[i] = \"1\";\n      if(threeList[i]==\"001\" || threeList[i] ==\"010\" || threeList[i] ==\"100\") threeList[i] = \"0\"; \n    }  \n  };\n  \n  for(int i=0; i<threeList.length; i+=8){\n   int end = i+8;\n    if(end <= threeList.length){\n      final values = threeList.getRange(i,end);\n      final binaryNum = values.join(\"\");\n       binaryList.add(binaryNum);\n    }\n  }\n  \n  \n  List<String> rightOrder = [];\n  \n  binaryList.forEach((binary){\n   final value = binary.split('').reversed.join();\n    rightOrder.add(value);\n  });\n   \n  \n  List<int> decimalList = [];\n  \n  rightOrder.forEach((reversedBinaryNum){\n    int decimalNum = 0;\n    List<int> numList = [];\n    \n     List<String> reversedBinaryList = reversedBinaryNum.split(\"\");\n      \n    for(int i=0; i < reversedBinaryList.length; i++){\n       \n      if(i==0){\n        if(reversedBinaryList[i] ==\"1\") numList.add(1);\n        if(reversedBinaryList[i] ==\"0\") numList.add(0);\n      } else if(i==1){\n        if(reversedBinaryList[i] ==\"1\") numList.add(2);\n        if(reversedBinaryList[i] ==\"0\") numList.add(0);\n      } else {\n        int baseValue = 2;\n        int value;\n        for(int j=1; j<i; j++){\n          baseValue=baseValue*2;\n        } \n       \n        numList.add(reversedBinaryList[i] != \"0\" ? baseValue : 0);\n    }\n   \n  }\n    decimalNum = numList.reduce((a, b) => a + b);\n    decimalList.add(decimalNum);\n  });\n  \n  List<String> textList = [];\n  \n  decimalList.forEach((ascii){\n    final text = String.fromCharCode(ascii);\n    textList.add(text);\n  });\n  \n  return textList.join(\"\");\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75724,"user_id":null,"body":"\nList<int> charToAscii(String text){\n  List<int> result = [];\n  for(int i = 0;i< text.length;i++){\n    result.add(text.codeUnitAt(i));\n  }\n  \n  return result;\n}\n\nString intToBinary(int number){\n  String result = \"\";\n  int left = number;\n  while(left > 0){\n    result = (left%2).toString() + result;\n    left = (left\/2).floor();\n  }\n  \n  return result.padLeft(8,\"0\");\n}\n\nString tripledBits(String bits){\n  String result = \"\";\n  for(String bit in bits.split(\"\")){\n    result += bit + bit + bit;\n  }\n  return result;\n}\n\nencode(text) {\n  List<int> ascii = charToAscii(text);\n  List<String> binary = [];\n  List<String> tripled = [];\n  String bits = \"\";\n  for(int a in ascii){\n    binary.add(intToBinary(a));\n  }\n  for(String b in binary){\n    tripled.add(tripledBits(b));\n  }\n  bits = tripled.join(\"\");\n  return bits; \n}\n\nList<String> splitThree(String text){\n  List<String> result = [];\n  String temp = \"\";\n  for(String t in text.split(\"\")){\n    if(temp.length < 2){\n      temp += t;\n    }else{\n      temp += t;\n      result.add(temp);\n      temp = \"\";\n    }\n  }\n  return result;\n}\n\nString correctBits(String bits){\n  int total = 0;\n  for(String bit in bits.split(\"\")){\n    total += int.parse(bit);\n  }\n  \n  return total < 2 ? \"0\": \"1\";\n}\n\nList<String> groupEight(List<String> bits){\n  List<String> result = [];\n  String temp = \"\";\n  for(String bit in bits){\n    if(temp.length < 7){\n      temp += bit;\n    }else{\n      temp += bit;\n      result.add(temp);\n      temp = \"\";\n    }\n  }\n  return result;\n}\n\nint binaryToAscii(String binary){\n  int result = 0;\n  \n  return result;\n}\n\ndecode(bits) {\n  String text = \"\";\n  List<String> splited = splitThree(bits);\n  \n  List<String> corrected = [];\n  for(bits in splited){\n    corrected.add(correctBits(bits));\n  }\n  \n  List<String> groups = groupEight(corrected);\n  \n  List<int> ascii = [];\n  for(String group in groups){\n    ascii.add(int.parse(group, radix:2));\n  }\n  \n  for(int a in ascii){\n    text += String.fromCharCode(a);\n  }\n  \n  return text;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5efae11e2d12df00331f91a6":[{"id":75725,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\ncrack(hash){\n  for (var i = 0; i<=99999; i++){\n    if (generateMd5(\"$i\".padLeft(5,\"0\")) == hash) return \"$i\".padLeft(5,\"0\");\n  }\n}\n\nString generateMd5(String input) {\n  return md5.convert(utf8.encode(input)).toString();\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75726,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\ncrack(hash) {\n  for (int i = 0; i < 100000; i++) {\n    var pin = i.toString().padLeft(5, '0');\n    if (md5.convert(utf8.encode(pin)).toString() == hash) {\n      return pin;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75727,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\ncrack(hash){\n  int counter = 0;\n  while(counter <= 99999){\n    var pin = counter.toString().padLeft(5, \"0\");\n    var md5Digest = md5.convert(utf8.encode(pin)).toString();\n\n    if(md5Digest == hash) return pin;\n    counter++;\n    \n  }\n  return false;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75728,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\ncrack(hash){\n  for (int i = 0; i < 100000; i++){\n    var password = i.toString().padLeft(5, '0');\n    if (md5.convert(utf8.encode(password)).toString() == hash){\n      return password;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75729,"user_id":null,"body":"import 'dart:convert';\n\nimport 'package:crypto\/crypto.dart';\n\nString crack(String hash){\n  for (int i = 0; i < 100000; i++) {\n    final pin = i.toString().padLeft(5, '0');\n    final bytes = utf8.encode(pin);\n    final digest = md5.convert(bytes);\n    \n    if (digest.toString() == hash) {\n      return pin;\n    }\n  }\n  \n  return '';\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75730,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\nString generateMd5(String input) {\n  return md5.convert(utf8.encode(input)).toString();\n}\n\n\ncrack(String hash){\n    for(var i = 0; i < 99999; i++ ){\n\n    if(generateMd5(i.toString().padLeft(5, '0')) == hash){\n        \n        return i.toString().padLeft(5, '0');\n\n    }\n    }\n}\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75731,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\ncrack(hash){\n  \/\/ C0d3 g03s h3r3\n  for(int i=0; i< 100000; i++){\n    var password = i.toString().padLeft(5, '0');\n    if(md5.convert(utf8.encode(password)).toString() == hash){\n      return password;\n    }\n  }\n}\n\n\n\n\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75732,"user_id":null,"body":"import 'package:crypto\/crypto.dart';\nimport 'dart:convert'; \/\/ for the utf8.encode method\n\ncrack(hash){\n  for(int i = 0 ; i < 99999; i++){\n    String t = \"$i\".padLeft(5,\"0\");\n    String h = md5.convert(utf8.encode(t)).toString();\n    if(h == hash) return t;\n  }\n  return \"\";\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75733,"user_id":null,"body":"import 'dart:convert';\nimport 'package:crypto\/crypto.dart';\n\ncrack(hash){\n  var result = \"\";\n  \n  for (int i = 0; i <= 99999; i++) {\n    var variant = i.toString().padLeft(5, '0');\n\n    var variantHash = md5.convert(utf8.encode(variant)).toString();\n    \n    if(variantHash == hash) {\n      result = variant;\n    }\n  }\n  \n  return result;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75734,"user_id":null,"body":"import 'package:crypto\/crypto.dart';\nimport 'dart:convert';\n\ncrack(hash){\n  for(int i = 0; i < 10; i++){\n    for(int j = 0; j < 10; j++){\n      for(int k = 0; k < 10; k++){\n        for(int l = 0; l < 10; l++){\n          for(int n = 0; n < 10; n++){\n            var val = \"$i$j$k$l$n\";\n            if(hash == generateMd5(val))\n              return val;\n          }\n        }\n      }\n    }\n  }\n}\n\nString generateMd5(String input) {\n  return md5.convert(utf8.encode(input)).toString();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5effa412233ac3002a9e471d":[{"id":75735,"user_id":759,"body":"int add(int num1, int num2) {\n  if (num1 == 0) return num2;\n  if (num2 == 0) return num1;\n  List<int> s = [];\n  while ((num1 | num2) != 0) {\n    s.insert(0, num1 % 10 + num2 % 10);\n    num1 ~\/= 10;\n    num2 ~\/= 10;\n  }\n  return int.parse(s.join(''));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75736,"user_id":null,"body":"int add(int num1, int num2){\n  String one = num1.toString();\n  String two = num2.toString();\n  one = one.padLeft(two.length, '0');\n  two = two.padLeft(one.length, '0');\n  String result = '';\n  for (int i = 0; i<one.length; i++){\n     result+=(int.parse(one[i])+int.parse(two[i])).toString();\n  }\n  return int.parse(result);\n}  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75737,"user_id":null,"body":"int add(int num1, int num2){\n  String one = num1.toString();\n  String two = num2.toString();\n  int len = one.length > two.length\n    ? one.length\n    : two.length;\n  one = one.padLeft(len, '0');\n  two = two.padLeft(len, '0');\n  List result = [];\n  for (int i = len - 1; i >= 0; i--) {\n    result.insert(0, int.parse(one[i]) + int.parse(two[i]));\n  }\n  return int.parse(result.join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75738,"user_id":null,"body":"int add(int num1, int num2) {\n  List<int> list = [];\n  while (num1 + num2 > 0) {\n    list.add(num1 % 10 + num2 % 10);\n    num1 ~\/= 10;\n    num2 ~\/= 10;\n  }\n  if (list.isEmpty) list.add(0);\n  return int.parse(list.reversed.join());\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75739,"user_id":53,"body":"int add(int x, int y) {\n  var d = x % 10 + y % 10;\n  if (x + y == 0) return d;\n  var n = add(x ~\/ 10, y ~\/ 10);\n  return n * (d >= 10 ? 100 : 10) + d;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75740,"user_id":null,"body":"int add(int n1, int n2) {\n  var s1 = n1.toString().padLeft('$n2'.length, '0').split('');\n  var s2 = n2.toString().padLeft('$n1'.length, '0').split('');\n  String sum = \"\";\n  s1.asMap().map((x, s) {\n    sum += (int.parse(s1[x]) + int.parse(s2[x])).toString();\n    return MapEntry(x, s);\n  });\n\n  return int.parse(sum);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75741,"user_id":null,"body":"int add(int num1, int num2){\n  var output = \"\";\n\n  while (num1>0 || num2>0) {\n    var d1 = num1%10;\n    var d2 = num2%10;\n    num1 ~\/= 10;\n    num2 ~\/= 10;\n    \n    output = ((d1+d2).toString()) + output;\n  }\n  \n  return output == \"\" ? 0 : int.parse(output);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75742,"user_id":null,"body":"int add(int num1, int num2) {\n  \n    int sum = 0;\n    String num1String = num1.toString();\n    String num2String = num2.toString();\n    List<String> list1 = num1String.split(\"\");\n    List<String> list2 = num2String.split(\"\");\n    List<int> tmp1 = [];\n    List<int> tmp2 = [];\n    List<int> tmp = [];\n\n    for (int i = 0; i < list1.length; i++) {\n      int tmp = int.parse(list1[i]);\n      tmp1.add(tmp);\n    }\n    \n    for (int i = 0; i < list2.length; i++) {\n      int tmp = int.parse(list2[i]);\n      tmp2.add(tmp);\n    }\n\n    if (tmp1.length == tmp2.length) {\n      for (int i = 0; i < tmp1.length; i++) {\n        int tmp3 = tmp1[i] + tmp2[i];\n        tmp.add(tmp3);\n      }\n\n      num1String = \"\";\n      list1.clear();\n\n      for (int i = 0; i < tmp.length; i++) {\n        list1.add(tmp[i].toString());\n      }\n      num1String = \"\";\n\n      for (int i = 0; i < list1.length; i++) {\n        num1String += list1[i];\n      }\n\n    }\n\n    if (tmp1.length < tmp2.length) {\n      int diff = tmp2.length - tmp1.length;\n      for (int i = 0; i < diff; i++) {\n        tmp1.insert(0, 0);\n      }\n\n      for (int i = 0; i < tmp1.length; i++) {\n        int tmp3 = tmp1[i] + tmp2[i];\n        tmp.add(tmp3);\n      }\n\n      num1String = \"\"; \/\/\u043e\u0447\u0438\u0441\u0442\u0438\u043b \u0441\u0442\u0440\u043e\u043a\u0443\n      list1.clear(); \/\/\u043e\u0447\u0438\u0441\u0442\u0438\u043b list\n\n      for (int i = 0; i < tmp.length; i++) {\n        list1.add(tmp[i].toString());\n      }\n      num1String = \"\";\n      \/\/\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0446\u0430\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430\u0448\u0438\u0445 \u0447\u0438\u0441\u0435\u043b\n      for (int i = 0; i < list1.length; i++) {\n        num1String += list1[i];\n      }\n\n    }\n\n    if (tmp1.length > tmp2.length) {\n      int diff = tmp1.length - tmp2.length;\n      for (int i = 0; i < diff; i++) {\n        tmp2.insert(0, 0);\n      }\n\n      for (int i = 0; i < tmp1.length; i++) {\n        int tmp3 = tmp1[i] + tmp2[i];\n        tmp.add(tmp3);\n      }\n\n      num1String = \"\"; \n      list1.clear(); \n\n      for (int i = 0; i < tmp.length; i++) {\n        list1.add(tmp[i].toString());\n      }\n      num1String = \"\";\n\n      for (int i = 0; i < list1.length; i++) {\n        num1String += list1[i];\n      }\n\n    }\n\n    sum = int.parse(num1String);\n    return sum;\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75743,"user_id":null,"body":"int add(int num1, int num2) {\n  var result = \"\";\n  String one = num1.toString();\n  String two = num2.toString();\n  one = one.padLeft(two.length, \"0\");\n  two = two.padLeft(one.length, \"0\");\n\n  for (int i = 0; i < one.length; i++) {\n    result += (int.parse(one[i]) + int.parse(two[i])).toString();\n  }\n  return int.parse(result);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75744,"user_id":null,"body":"int add(int num1, int num2){\n  if (num1 == 0) return num2;\n  if (num2 == 0) return num1;\n  List<int> a = [];\n  while((num1 | num2) != 0) {\n    a.insert(0, num1 % 10 + num2 % 10);\n    num1 ~\/= 10;\n    num2 ~\/= 10;\n  }\n  return int.parse(a.join(''));\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5f0ed36164f2bc00283aed07":[{"id":75745,"user_id":null,"body":"int over_the_road(int address, int n) => 2 * n - address + 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75746,"user_id":null,"body":"int over_the_road(int address, int n) {\n  int count = 2*n+1;\n  \n  \n  return count-address;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75747,"user_id":null,"body":"int over_the_road(int address, int n) => (n * 2) - (address - 1);","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75748,"user_id":null,"body":"int over_the_road(int address, int n) {\n  \/\/ the sum of opposite house numbers is: streat length * 2 + 1 \n  return n * 2 + 1 - address;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75749,"user_id":null,"body":"int over_the_road(int address, int n) {\n  \/\/ Good luck\n  return n * 2 + 1 -address;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75750,"user_id":null,"body":"over_the_road(a,n) => a.isEven ? 2*(1+n-(a\/2))-1: 2*(n-(a~\/2));","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75751,"user_id":null,"body":"int over_the_road(int address, int n) {\n  int OppositeHouseNumber =n*2+1-address ;\n  return OppositeHouseNumber;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75752,"user_id":null,"body":"int over_the_road(int address, int n) {\n  return (n*2)-(address-1);\n  \/\/ Good luck\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75753,"user_id":null,"body":"int over_the_road(int address, int n) {\n  return (n*2)-(address-1);\n\/\/   int f = 0;\n\/\/   int g = 0;\n\/\/   int i = 1;\n\/\/   int x = n * 2;\n\/\/   int y = 0;\n\/\/   List<int> a = [];\n\/\/   List<int> b = [];\n\/\/   while(i <n*2){\n\/\/     a.add(i);\n\/\/     b.add(x);\n\/\/     i += 2;\n\/\/     x -= 2;\n\/\/   }\n\/\/   if(address.isEven){\n\/\/     f = b.indexOf(address);\n\/\/     g = a[f];\n\/\/   }else{\n\/\/     f = a.indexOf(address);\n\/\/     g = b[f];\n\/\/   }\n\/\/   return g;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75754,"user_id":null,"body":"int over_the_road(int address, int n) {\n  int y=n+(n-address+1);\n  \/\/ Good luck\n  return y;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5f47e79e18330d001a195b55":[{"id":75755,"user_id":null,"body":"int base_finder(List<dynamic> seq) => seq.join().split('').toSet().length;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75756,"user_id":null,"body":"int base_finder(List<dynamic> seq) => seq.join('').split('').map((i) => int.parse(i)).toSet().length;\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75757,"user_id":null,"body":"int base_finder(List<dynamic> seq) =>\n    seq.join().split('').fold(0, (pre, ele) => pre < int.parse(ele) ? int.parse(ele) : pre) + 1;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75758,"user_id":null,"body":"int base_finder(List<String> seq) {\n  return seq.join('').split('').toSet().length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75759,"user_id":null,"body":"int base_finder(List<String> seq) {\n  int base = 0;\n  List<int> intSeq = seq.map((e) => int.parse(e)).toList();\n  for(int i = 0; i < intSeq.length; i++) {\n    if(intSeq[i] %  10 > base) \n      base = intSeq[i] %  10;\n  }\n  return base + 1;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75760,"user_id":null,"body":"int base_finder(List<String> seq) {\n int res=0;\n String q= seq.join();\n  String a=\"0123456789\";\n  for(int i = 0;i < a.length;i++){\n    if(q.contains(a[i]))res++;  \n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75761,"user_id":null,"body":"int base_finder(List<String> seq) {\n  Set s = {};\n  for(String str in seq){\n    List elem = str.split('');\n    if(elem.length == 1){\n      s.add(elem[0]);\n    } else {\n      for(String value in elem){\n        s.add(value);\n      }\n    }\n  }\n  return s.length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75762,"user_id":null,"body":"int base_finder(List<String> seq) {\n  List<int> intSeq = seq.map((i) => int.parse(i)).toList();\n  \n  intSeq.sort();\n  \n  int last = -1;\n  \n  for(var i = 0; i < intSeq.length; i++) {\n    var char = intSeq[i] % 10;\n    \n    if(last != -1 && char == 0) {\n      return last + 1;\n    }\n    \n    last = char;\n  }\n  \n  return 10;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75763,"user_id":null,"body":"int base_finder(List<String> seq) =>\n  1+int.parse([for (final s in seq)    ...s.split('')].reduce( (a,b){return a.compareTo(b)>0?a:b;} ));\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75764,"user_id":null,"body":"int base_finder(List<String> seq) {\n  int res = 10;\n  for(int i = 0; i<10; i++){\n    bool b = false;\n    seq.forEach((elem){\n      if(elem.contains(i.toString())) b = true;\n    });\n    if(!b) res--;\n  }\n  return res;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5f77d62851f6bc0033616bd8":[{"id":75765,"user_id":null,"body":"bool valid_spacing(String text){\n  return text == text.trim() && !text.contains(\"  \");\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75766,"user_id":250,"body":"bool valid_spacing(String text) {\n  return !RegExp(r\"^\\W|\\W$|\\W\\W\").hasMatch(text);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75767,"user_id":null,"body":"bool valid_spacing(String text) {\n  final str = text.replaceAll('  ', ' ');\n  return str.trim() == text;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75768,"user_id":null,"body":"bool valid_spacing(String text) {\n final trimedString = text.trim();\n  \n  if(text == '') {\n    return true;\n  }\n   \n   if(trimedString != text) {\n     return false;\n   }\n   \n   final splitedArr = text.split(' ').where((item) => item != '').toList();\n      \n   return (text.split('')..removeWhere((item) => item != ' ')).length < splitedArr.length;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75769,"user_id":null,"body":"bool valid_spacing(String text) {\n    if (text.contains('  ') || !(text.trim() == text)) {\n      return false;\n    } else {\n      return true;\n    }\n  }","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75770,"user_id":null,"body":"bool valid_spacing(String text) {\n  return !RegExp(r'^\\s|\\s$|\\w+\\s{2,}\\w+').hasMatch(text);\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75771,"user_id":null,"body":"bool valid_spacing(String text) => !text.split(' ').toList().remove('') || text == '';","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75772,"user_id":null,"body":"bool valid_spacing(String text) {\n  if (text.isEmpty) {\n    return true;\n  }\n\n  return text.split(\" \").where((e) => e.isEmpty).length == 0;\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75773,"user_id":null,"body":"bool valid_spacing(String text) {\n  if (!text.contains(' '))\n    return true;\n  else {\n    if (text[0] == ' ' || text[text.length - 1] == ' ') return false;\n    return !text.contains('  ');\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75774,"user_id":null,"body":"bool valid_spacing(String text) {\n  if (text == '' || text == null){\n    return true;\n  } else{\n    if(text.contains('  ') || text[0]==' ' || text[(text.length)-1]==' '){\n      return false;\n    } else{\n      return true;\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5fde1ea66ba4060008ea5bd9":[{"id":75775,"user_id":645,"body":"import \"dart:math\";\nList<int> burner(int c, int h, int o) {\n  int h2o = min(o, h ~\/ 2);\n  int co2 = min(c, (o - h2o) ~\/ 2);\n  int ch4 = min(c - co2, (h - 2 * h2o) ~\/ 4);\n  return [h2o, co2, ch4];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75776,"user_id":null,"body":"import \"dart:math\" as math;\n  \nList<int> burner(int c, int h, int o) {\n  final water = math.min((h \/ 2).floor(), o);\n  h -= water * 2;\n  o -= water;\n  final co2 = math.min(c, (o \/ 2).floor());\n  c -= co2;\n  o -= co2 * 2;\n  final methane = math.min(c, (h \/ 4).floor());\n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75777,"user_id":250,"body":"import \"dart:math\";\n\nList<int> burner(int c, int h, int o) {\n  int water = min(h~\/2, o);\n  h -= water*2;\n  o -= water;\n  \n  int co2 = min(c, o~\/2);\n  c -= co2;\n  o -= co2*2;\n  \n  int methane = min(c, h~\/4);\n  \n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75778,"user_id":null,"body":"List<int> burner(int c, int h, int o) {\n  int water = 0;\n  int co2 = 0;\n  int methane = 0;\n  \n  while(h >= 2 && o > 0) {\n    h -= 2;\n    o -= 1;\n    \n    water += 1;\n  }\n  \n  while(c > 0 && o >= 2) {\n    c -= 1;\n    o -= 2;\n    \n    co2 += 1;\n  }\n  \n  while(c > 0 && h >= 4) {\n    h -= 4;\n    c -= 1;\n    \n    methane += 1;\n  }\n  \n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75779,"user_id":null,"body":"import 'dart:math';\nList<int> burner(int c, int h, int o) {\n   int h2o = min(o, h ~\/ 2);\n  var water = h2o;\n  int co2 = min(c, (o - h2o) ~\/ 2);\n  int ch4 = min(c - co2, (h - 2 * h2o) ~\/ 4);\n  var methane = ch4;\n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75780,"user_id":null,"body":"import 'dart:math';\nList<int> burner(int c, int h, int o) {\n  int water = min(h ~\/ 2, o);\n  int co2 = min(c, (o - water) ~\/ 2);\n  int methane = min((h - water * 2) ~\/ 4, c - co2);\n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75781,"user_id":null,"body":"import 'dart:math';\n\nList<int> burner(int c, int h, int o) {\n  int water = min(o, h ~\/ 2);\n  int co2 = min(c, (o - water) ~\/ 2);\n  int methane = min(c - co2, ((h - water * 2) ~\/ 4));\n  \n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75782,"user_id":null,"body":"List<int> burner(int c, int h, int o) {\n  \/\/ make water first\n  int water = 0;\n  while (h > 1 && o > 0) {\n    o--;\n    h -= 2;\n    water++;\n  }\n  \n  \/\/ make co2 next\n  int co2 = 0;\n  while (c > 0 && o > 1) {\n    c--;\n    o -= 2;\n    co2++;\n  }\n  \n  \/\/ make methane last\n  int methane = 0;\n  while (h > 3 && c > 0) {\n    c--;\n    h -= 4;\n    methane++;\n  }\n  \n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75783,"user_id":null,"body":"List<int> burner(int c, int h, int o) {\n \n  int water = (2 * o < h) ? o : h ~\/ 2;\n  o -= water;\n  h -= water * 2;\n  int co2 = (2 * c < o) ? c : o ~\/ 2;\n  int methane = (4 * c < h) ? c : h ~\/ 4;\n  return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75784,"user_id":null,"body":"List<int> burner(int c, int h, int o) {\n  int water=0,co2=0,methane=0;\n    if(h~\/2<=o){\n    water=h~\/2;\n    h=0;\n    o=o-water;\n    if(o~\/2<c){\n      co2=o~\/2;\n      c=c-co2;\n    }\n    else{\n        co2=c;\n    }\n  }\n  else{\n    water=o;\n    h=h-water*2;\n    if(h~\/4<c){\n        methane=h~\/4; \n      c=c-methane;\n    }\n    else {\n        methane=c;\n    }\n   }\n   return [water, co2, methane];\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"5265b0885fda8eac5900093b":[{"id":75785,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\n\nclass Parser {\n  final List<String> tokens;\n  List<String> args = [];\n  \n  int cur = 0;\n  \n  Parser(this.tokens);\n  \n  Ast parse() {\n    return function();\n  }\n  \n  Ast function() {\n    \/\/ Skip the first opening bracket\n    cur++;\n    \n    while (!match(']')) {\n      args.add(tokens[cur]);\n      cur++;\n    }\n    \n    return expression();\n  }\n  \n  Ast expression() {\n    var expr = term();\n    \n    while (match('+') || match('-')) {\n      final op = tokens[cur - 1];\n      \n      expr = new BinOp(op, expr, term());\n    }\n    \n    return expr;\n  }\n  \n  Ast term() {\n    var expr = factor();\n    \n    while (match('*') || match('\/')) {\n      final op = tokens[cur - 1];\n      expr = new BinOp(op, expr, factor());\n    }\n    \n    return expr;\n  }\n  \n  Ast factor() {\n    if (match('(')) {\n      final expr = expression();\n      \n      \/\/ Skip closing parenthesis\n      cur++;\n      \n      return expr;\n    }\n    \n    if (int.tryParse(tokens[cur]) != null) {\n      cur++;\n      return new UnOp('imm', int.parse(tokens[cur - 1]));\n    } else {\n      cur++;\n      return new UnOp('arg', args.indexOf(tokens[cur - 1]));\n    }\n  }\n  \n  bool match(String token) {\n    if (tokens[cur] == token) {\n      cur++;\n      return true;\n    }\n    \n    return false;\n  }\n}\n\nclass Compiler {\n  static List<String> tokenize(String prog) {\n    List<String> tokens = new List();\n    RegExp pattern = new RegExp(\"[-+*\/()\\\\[\\\\]]|[a-zA-Z]+|\\\\d+\");\n    pattern.allMatches(prog).toList().forEach((m) {\n      tokens.add(m.group(0));\n    });\n    tokens.add(\"\\$\"); \/\/ end-of-stream\n    return tokens;\n  }\n\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  bool isDigit(int s) => s >= '0'.codeUnitAt(0) && s <= '9'.codeUnitAt(0);\n\n  \/**\n   * Returns an un-optimized AST\n   *\/\n  Ast pass1(String prog) {\n    final tokens = tokenize(prog);\n    return (new Parser(tokens)).parse();\n  }\n\n  \/**\n   * Returns an AST with constant expressions reduced\n   *\/\n  Ast pass2(Ast ast) {\n    if (ast is UnOp) { \n      return ast; \n    }\n    \n    final binOp = ast as BinOp;\n    \n    final newAst = BinOp(binOp.op(), pass2(binOp.a), pass2(binOp.b));\n    final a = newAst.a;\n    final b = newAst.b;\n    \n    if (a is UnOp && a.op() == \"imm\" && b is UnOp && b.op() == \"imm\") {\n      switch (newAst.op()) {\n          case '+': return UnOp('imm', a.n + b.n);\n          case '-': return UnOp('imm', a.n - b.n);\n          case '*': return UnOp('imm', a.n * b.n);\n          case '\/': return UnOp('imm', a.n ~\/ b.n);\n      }\n    }\n    \n    return newAst;\n  }\n\n  List<String> pass3(Ast ast) {\n    final asm = <String>[];\n    \n    if (ast is UnOp) {\n      if (ast.op() == \"imm\") {\n        asm.add(\"IM ${ast.n}\");\n      } else {\n        asm.add(\"AR ${ast.n}\");\n      }\n    } else if (ast is BinOp) {\n      asm.addAll(pass3(ast.a));\n      asm.add('PU');\n      asm.addAll(pass3(ast.b));\n      asm.addAll(['SW', 'PO']);\n      switch (ast.op()) {\n          case '+': asm.add('AD'); break;\n          case '-': asm.add('SU'); break;\n          case '*': asm.add('MU'); break;\n          case '\/': asm.add('DI'); break;\n      }\n    }\n    \n    return asm;\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75786,"user_id":53,"body":"import \"package:solution\/preloaded.dart\";\nimport 'dart:convert';\n\nclass Compiler {\n  \n  List<String> compile(String prog) { return pass3(pass2(pass1(prog))); }\n  Ast pass1(String prog) { return new Parser(tokenize(prog)).parse(); }\n  Ast pass2(Ast ast) { return new Optimiser(ast).optimise(); }\n  List<String> pass3(Ast ast) { return new Printer(ast).print(); }\n  static List<String> tokenize(String prog) { return new Lexer(prog).tokenize(); }\n}\n\nclass AstUtils {\n  static bool isImmutable(Ast ast) { return ast.op()==(\"imm\"); }\n  static bool isArgument(Ast ast) { return ast.op()==(\"arg\"); }\n  static bool isTerminal(Ast ast) { return AstUtils.isImmutable(ast) || AstUtils.isArgument(ast); }\n}\n\nclass Printer {\n  \n  Ast source;\n  Printer(Ast source) { this.source = source; }\n  List<String> print() { return Printer.printAst(this.source); }\n  \n  static List<String> printAst(Ast ast) {\n    var res = new List<String>();\n    if (AstUtils.isImmutable(ast)) { \n      res.add(\"IM ${(ast as UnOp).n}\");\n      return res;\n    }\n    if (AstUtils.isArgument(ast)) {\n      res.add(\"AR ${(ast as UnOp).n}\");\n      return res; \n    }\n    var binOp = ast as BinOp;\n    res.addAll(Printer.printAst(binOp.a));\n    res.add(\"PU\");\n    res.addAll(Printer.printAst(binOp.b));\n    res.add(\"SW\");\n    res.add(\"PO\");\n    switch (ast.op()) {\n      case \"+\": res.add(\"AD\"); break;\n      case \"-\": res.add(\"SU\"); break;\n      case \"*\": res.add(\"MU\"); break;\n      case \"\/\": res.add(\"DI\"); break;\n    }\n    return res;\n  }\n}\n\nclass Evaluator {\n  \n  Ast source;\n  Evaluator(Ast source) { this.source = source; }\n  \n  int evaluateSimpleBinaryExpression() {\n    var a = ((this.source as BinOp).a) as UnOp;\n    var b = ((this.source as BinOp).b) as UnOp;\n    int val = 0;\n    switch (this.source.op()) {\n      case \"+\": val = a.n + b.n; break;\n      case \"-\": val = a.n - b.n; break;\n      case \"*\": val = a.n * b.n; break;\n      case \"\/\": val = a.n ~\/ b.n; break;\n    }\n    return val;\n  }\n}\n\nclass Optimiser {\n  \n  Ast source;\n  Optimiser(Ast source) { this.source = source; }\n  Ast optimise() { return Optimiser.optimiseAst(this.source); }\n  \n  static Ast optimiseAst(Ast ast) {\n    if (AstUtils.isTerminal(ast)) return new UnOp(ast.op(), (ast as UnOp).n);\n    var binOp = ast as BinOp;\n    binOp = new BinOp(binOp.op(), Optimiser.optimiseAst(binOp.a), Optimiser.optimiseAst(binOp.b));\n    if (AstUtils.isImmutable(binOp.a) && AstUtils.isImmutable(binOp.b)) \n      return Optimiser.evaluateSimpleBinaryExpression(binOp);\n    return binOp;\n  }\n  \n  static Ast evaluateSimpleBinaryExpression(BinOp ast) {\n    return new UnOp(\"imm\", new Evaluator(ast).evaluateSimpleBinaryExpression());\n  }\n}\n\nclass Parser {\n  \n  List<String> originalTokens;\n  List<String> tokens;\n  List<String> args;\n  static RegExp numberPattern = new RegExp(\"\\\\d+\");\n  static RegExp literalPattern = new RegExp(\"[a-zA-Z]+\");\n  \n  Parser(List<String> tokens) { this.originalTokens = tokens; }\n  \n  Ast parse() {\n    this.args = new List<String>();\n    this.tokens = List.from(this.originalTokens);\n    this.expect(\"[\");\n    while (this.peekLiteral()) this.args.add(this.literal());\n    this.expect(\"]\");\n    return this.expression();\n  }\n  \n  bool done() { return this.tokens[0]==(Lexer.EOT); }\n  String peek() { return this.done() ? Lexer.EOT : this.tokens[0]; }\n  String shift() { return this.done() ? Lexer.EOT : this.tokens.removeAt(0); }\n  String expect(String s) { \n    if (this.peek()!=(s))\n      throw new Exception(\"invalid token\");\n    return this.shift();\n  }\n  bool peekNumber() { return numberPattern.hasMatch(this.peek()); }\n  bool peekLiteral() { return literalPattern.hasMatch(this.peek()); }\n  int number() { return int.parse(this.shift()); }\n  String literal() { return this.shift(); }\n  \n  Ast factor() {\n    if (this.peekNumber()) return new UnOp(\"imm\", this.number());\n    if (this.peekLiteral()) return new UnOp(\"arg\", this.args.indexOf(this.literal()));\n    if (this.peek()==(\"(\")) {\n      this.shift();\n      var exp = this.expression();\n      this.expect(\")\");\n      return exp;\n    }\n    throw new Exception(\"invalid factor\");\n  }\n  \n  Ast term() {\n    Ast a = this.factor(), b = null;\n    while (this.peek()==(\"*\") || this.peek()==(\"\/\")) {\n      if (this.shift()==(\"*\")) {\n        b = this.factor();\n        a = new BinOp(\"*\", a, b);\n      } else {\n        b = this.factor();\n        a = new BinOp(\"\/\", a, b);\n      }\n    }\n    return a;\n  }\n  \n  Ast expression() {\n    Ast a = this.term(), b = null;\n    while (this.peek()==(\"+\") || this.peek()==(\"-\")) {\n      if (this.shift()==(\"+\")) {\n        b = this.term();\n        a = new BinOp(\"+\", a, b);\n      } else {\n        b = this.term();\n        a = new BinOp(\"-\", a, b);\n      }\n    }\n    return a;\n  }\n}\n\nclass Lexer {\n  \n  static String EOT = \"\\$\";\n  String program;\n  RegExp pattern = new RegExp(\"[-+*\/()\\\\[\\\\]]|[a-zA-Z]+|\\\\d+\");\n  \n  Lexer(String program) { this.program = program; }\n  \n  List<String> tokenize() {\n    var tokens = new List<String>();\n    pattern.allMatches(this.program).toList().forEach((m) {\n      tokens.add(m.group(0));\n    });\n    tokens.add(Lexer.EOT);\n    return tokens;\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75787,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\n\nclass ParseObj {\n  bool isTerminal;\n  String symbol;\n  Ast ast;\n  int level;\n\n  ParseObj.terminal(this.symbol)\n      : isTerminal = true,\n        ast = UnOp(\"imm\", 0),\n        level = 0;\n  ParseObj.nonTerminal(this.ast, this.level)\n      : isTerminal = false,\n        symbol = '';\n}\n\nclass Compiler {\n  static List<String> tokenize(String prog) {\n    List<String> tokens = new List();\n    RegExp pattern = new RegExp(\"[-+*\/()\\\\[\\\\]]|[a-zA-Z]+|\\\\d+\");\n    pattern.allMatches(prog).toList().forEach((m) {\n      tokens.add(m.group(0));\n    });\n    tokens.add(\"\\$\"); \/\/ end-of-stream\n    return tokens;\n  }\n\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  \/**\n   * Returns an un-optimized AST\n   *\/\n  Ast pass1(String prog) {\n    List<String> tokens = tokenize(prog);\n    \n    List<ParseObj> stack = [];\n    ParseObj peek(int i) => stack[stack.length - 1 - i];\n    void push(ParseObj obj) => stack.add(obj);\n    void pop(int i) {\n      if (i <= 0) return;\n      stack.removeLast();\n      pop(--i);\n    }\n\n    void shift(String s) => push(ParseObj.terminal(s));\n\n    String symAt(int i) => i < stack.length ? peek(i).symbol : '';\n    int lvlAt(int i) => i < stack.length ? peek(i).level : 0;\n\n    bool reduce(String lookAhead) {\n      bool lvl1LA = lookAhead == '+' ||\n          lookAhead == '-' ||\n          lookAhead == ')' ||\n          lookAhead == '\\$';\n\n      bool lvl2LA = lookAhead == '*' || lookAhead == '\/' || lvl1LA;\n\n      \/\/ expL1 ::= expL1 '+' expL2\n      if (lvlAt(2) == 1 && symAt(1) == '+' && lvlAt(0) == 2 && lvl1LA) {\n        ParseObj obj =\n            ParseObj.nonTerminal(BinOp('+', peek(2).ast, peek(0).ast), 2);\n        pop(3);\n        push(obj);\n        return true;\n      }\n\n      \/\/ expL1 ::= expL1 '-' expL2\n      if (lvlAt(2) == 1 && symAt(1) == '-' && lvlAt(0) == 2 && lvl1LA) {\n        ParseObj obj =\n            ParseObj.nonTerminal(BinOp('-', peek(2).ast, peek(0).ast), 2);\n        pop(3);\n        push(obj);\n        return true;\n      }\n\n      \/\/ expL1 ::= expL2\n      if (lvlAt(0) == 2 && lvl1LA) {\n        ParseObj obj = ParseObj.nonTerminal(peek(0).ast, 1);\n        pop(1);\n        push(obj);\n        return true;\n      }\n\n      \/\/ expL2 ::= expL2 '*' expL3\n      if (lvlAt(2) == 2 && symAt(1) == '*' && lvlAt(0) == 3 && lvl2LA) {\n        ParseObj obj =\n            ParseObj.nonTerminal(BinOp('*', peek(2).ast, peek(0).ast), 2);\n        pop(3);\n        push(obj);\n        return true;\n      }\n\n      \/\/ expL2 ::= expL2 '\/' expL3\n      if (lvlAt(2) == 2 && symAt(1) == '\/' && lvlAt(0) == 3 && lvl2LA) {\n        ParseObj obj =\n            ParseObj.nonTerminal(BinOp('\/', peek(2).ast, peek(0).ast), 2);\n        pop(3);\n        push(obj);\n        return true;\n      }\n\n      \/\/ expL2 ::= expL3\n      if (lvlAt(0) == 3 && lvl2LA) {\n        ParseObj obj = ParseObj.nonTerminal(peek(0).ast, 2);\n        pop(1);\n        push(obj);\n        return true;\n      }\n\n      \/\/ expL3 ::= number\n      int val = int.tryParse(symAt(0));\n      if (val != null) {\n        pop(1);\n        push(ParseObj.nonTerminal(UnOp(\"imm\", val), 3));\n        return true;\n      }\n\n      \/\/ expL3 ::= variable\n      if (symAt(0).isNotEmpty &&\n          symAt(0) != '(' &&\n          symAt(0) != ')' &&\n          symAt(0) != '+' &&\n          symAt(0) != '-' &&\n          symAt(0) != '*' &&\n          symAt(0) != '\/' &&\n          symAt(0) != '\\$') {\n        String sym = symAt(0);\n        pop(1);\n        push(\n            ParseObj.nonTerminal(UnOp(\"arg\", tokens.indexOf(sym) - 1), 3));\n        return true;\n      }\n\n      \/\/ expL3 ::= '(' expL1 ')'\n      if (symAt(2) == '(' && lvlAt(1) == 1 && symAt(0) == ')') {\n        ParseObj obj = ParseObj.nonTerminal(peek(1).ast, 3);\n        pop(3);\n        push(obj);\n        return true;\n      }\n\n      return false;\n    }\n\n    print(tokens);\n    for (int i = tokens.indexOf(']') + 1; i < tokens.length; i++) {\n      print(stack);\n      while (reduce(tokens[i])) {\n        print(stack);\n      }\n      shift(tokens[i]);\n    }\n\n    return stack[0].ast;\n  }\n\n  \/**\n   * Returns an AST with constant expressions reduced\n   *\/\n  Ast pass2(Ast ast) {\n    if (ast is UnOp) {\n      return ast;\n    }\n\n    BinOp bop = ast as BinOp;\n    Ast aOpt = pass2(bop.a);\n    Ast bOpt = pass2(bop.b);\n\/\/ ( 2*3*x + 5*y - 3*z ) \/ (1 + 3 + 2*2)\n    if (aOpt is UnOp &&\n        (aOpt as UnOp).op() == 'imm' &&\n        bOpt is UnOp &&\n        (bOpt as UnOp).op() == 'imm') {\n      switch (bop.op()) {\n        case '+':\n          return UnOp('imm', (aOpt as UnOp).n + (bOpt as UnOp).n);\n        case '-':\n          return UnOp('imm', (aOpt as UnOp).n - (bOpt as UnOp).n);\n        case '*':\n          return UnOp('imm', (aOpt as UnOp).n * (bOpt as UnOp).n);\n        case '\/':\n          return UnOp('imm', (aOpt as UnOp).n ~\/ (bOpt as UnOp).n);\n      }\n    }\n    \n    return BinOp(bop.op(), aOpt, bOpt);;\n  }\n\n  List<String> pass3(Ast ast) {\n    if (ast is UnOp) {\n      if ((ast as UnOp).op() == 'imm') {\n        return ['IM ${(ast as UnOp).n}'];\n      }\n      return ['AR ${(ast as UnOp).n}'];\n    }\n\n    BinOp bop = ast as BinOp;\n    List<String> aComp = pass3(bop.a);\n    List<String> bComp = pass3(bop.b);\n\n    switch (bop.op()) {\n      case '+':\n        return [...bComp, 'PU', ...aComp, 'SW', 'PO', 'AD'];\n      case '-':\n        return [...bComp, 'PU', ...aComp, 'SW', 'PO', 'SW', 'SU'];\n      case '*':\n        return [...bComp, 'PU', ...aComp, 'SW', 'PO', 'MU'];\n      case '\/':\n        return [...bComp, 'PU', ...aComp, 'SW', 'PO', 'SW', 'DI'];\n    }\n\n    return [];\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75788,"user_id":168,"body":"import \"package:solution\/preloaded.dart\";\n\nclass Parser {\n  final List<String> tokens;\n  final Map<String, Ast> args = {};\n  int pos = 0;\n  \n  Parser(String expression) :\n    tokens = RegExp(r'\\d+|[-+*\/()\\[\\]]|[a-zA-Z]+').allMatches(expression).map((m) => m[0]).toList();\n  \n  String next() => pos < tokens.length ? tokens[pos++] : null;\n  String peek() => pos < tokens.length ? tokens[pos] : null;\n\n  Ast atom() {\n    final tok = next();\n    if (tok == '(') {\n      var r = expr();\n      next();\n      return r;\n    }\n    if (args.containsKey(tok)) return args[tok];\n    return UnOp(\"imm\", int.parse(tok));\n  }\n  \n  Ast chainl1(Map<String, Ast Function(Ast, Ast)> ops, Ast nextLevel()) {\n    var lhs = nextLevel();\n    while (ops.containsKey(peek())) {\n      lhs = ops[next()](lhs, nextLevel());\n    }\n    return lhs;\n  }\n\n  Ast factor() => chainl1({'*': (a, b) => BinOp('*', a, b), '\/': (a, b) => BinOp('\/', a, b)}, atom);\n  \n  Ast expr() => chainl1({'+': (a, b) => BinOp('+', a, b), '-': (a, b) => BinOp('-', a, b)}, factor);\n  \n  Ast func() {\n    if (next() != '[') throw Exception('[ expected');\n    for (int i = 0; peek() != ']' && peek() != null; i++) {\n      args[next()] = UnOp('arg', i);\n    }\n    next();\n    return expr();\n  }\n}\n\nclass Compiler {\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  Ast pass1(String prog) => Parser(prog).func();\n  \n  final ops = {\n    '+': (int a, int b) => a + b,\n    '-': (int a, int b) => a - b,\n    '*': (int a, int b) => a * b,\n    '\/': (int a, int b) => a ~\/ b\n  };\n  \n  Ast pass2(Ast ast) {\n    if (ast is BinOp) {\n      final a = pass2(ast.a);\n      final b = pass2(ast.b);\n      if (a is UnOp && b is UnOp && a.op() == 'imm' && b.op() == 'imm') {\n        return UnOp('imm', ops[ast.op()](a.n, b.n));\n      }\n      return BinOp(ast.op(), a, b);\n    }\n    return ast;\n  }\n  \n  final opCmd = {'+': 'AD', '-': 'SU', '*': 'MU', '\/': 'DI'};\n\n  List<String> pass3(Ast ast) {\n    if (ast is UnOp) {\n      return [\"${ast.op() == 'arg' ? 'AR' : 'IM'} ${ast.n}\"];\n    }\n    if (ast is BinOp) {\n      return [...pass3(ast.a), 'PU', ...pass3(ast.b), 'SW', 'PO', opCmd[ast.op()]];\n    }\n  }\n}","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75789,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\n\nclass Compiler {\n  List<String> args = [];\n  List<String> tokens = [];\n  int ndx = 0;\n\n  String getToken() {\n    return tokens[ndx++];\n  }\n  \n  void ungetToken() {\n    ndx--;\n  }\n\n  List<String> tokenize(String prog) {\n    List<String> tokens = [];\n    RegExp pattern = RegExp(\"[-+*\/()\\\\[\\\\]]|[a-zA-Z]+|\\\\d+\");\n    pattern.allMatches(prog).toList().forEach((m) {\n        tokens.add(m.group(0));\n    });\n    tokens.add(\"\\$\"); \/\/ end-of-stream\n    return tokens;\n  }\n\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  bool isDigit(int s) => s >= '0'.codeUnitAt(0) && s <= '9'.codeUnitAt(0);\n  bool isAlpha(int s) => s >= 'a'.codeUnitAt(0) && s <= 'z'.codeUnitAt(0)\n  || s >= 'A'.codeUnitAt(0) && s <= 'Z'.codeUnitAt(0);\n  \n  void parseFunction() {\n    getToken();\n    var token = getToken();\n    while (token != ']') {\n      args.add(token);\n      token = getToken();\n    }\n  }\n\n  Ast parseFactor() {\n    var token = getToken();\n    Ast v;\n    if (isDigit(token.codeUnitAt(0))) {\n      v = UnOp('imm', int.parse(token));\n    } else if (isAlpha(token.codeUnitAt(0))) {\n      int n = args.indexOf(token);\n      v = UnOp('arg', n);\n    } else if (token == '(') {\n      v = parseExpression();\n      getToken();\n    } else {\n      ungetToken();\n    }\n    return v;\n  }\n\n  Ast parseExpression() {\n    Ast v1 = parseTerm();\n    while (true) {\n      var token = getToken();\n      if (token != '-' && token != '+') {\n        ungetToken();\n        break;\n      } else {\n        Ast v2 = parseTerm();\n        if (token == '+') {\n          v1 = BinOp('+', v1, v2);\n        } else if (token == '-') {\n          v1 = BinOp('-', v1, v2);\n        } else {\n          ungetToken();\n        }\n      }\n    }\n    return v1;\n  }\n\n  Ast parseTerm() {\n    Ast v1 = parseFactor();\n    while (true) {\n      var token = getToken();\n      if (token != '*' && token != '\/') {\n        ungetToken();\n        break;\n      } else {\n        Ast v2 = parseFactor();\n        if (token == '*') {\n          v1 = BinOp('*', v1, v2);\n        } else if (token == '\/') {\n          v1 = BinOp('\/', v1, v2);\n        } else {\n          ungetToken();\n        }\n      }\n    }\n    return v1;\n  }\n\n  Ast reduceConstant(Ast ast) {\n    var op = ast.op();\n    if (op == 'imm' || op == 'arg') {\n      return ast;\n    }\n    BinOp binOp = ast;;\n    Ast a1 = reduceConstant(binOp.a);\n    Ast b1 = reduceConstant(binOp.b);\n    if (a1.op() == 'imm' && b1.op() == 'imm') {\n      int n;\n      UnOp a = a1;\n      UnOp b = b1;\n      if (op == '+') {\n        n = a.n + b.n;\n      } else if (op == '-') {\n        n = a.n - b.n;\n      } else if (op == '*') {\n        n = a.n * b.n;\n      } else {\n        n = a.n ~\/ b.n;\n      }\n      return UnOp('imm', n);\n    }\n\n    return BinOp(op, a1, b1);\n  }\n\n  List<String> assembly(Ast ast) {\n    String op = ast.op();\n    if (op == 'imm') {\n      return ['IM ${(ast as UnOp).n}'];\n    }\n    if (op == 'arg') {\n      return ['AR ${(ast as UnOp).n}'];\n    }\n    List<String> a = assembly((ast as BinOp).a);\n    List<String> b = assembly((ast as BinOp).b);\n    Map<String, String> ops = { '+': 'AD', '-': 'SU', '*': 'MU', '\/': 'DI' };\n    if (a.length == 1 && b.length == 1) {\n      if (op == '-') {\n        return [b[0], 'SW', a[0], ops[op]];\n      }\n      return [a[0], 'SW', b[0], ops[op]];\n    }\n\n    a.add('PU');\n    b.add('SW');\n    b.add('PO');\n    b.add(ops[op]);\n    return a + b;\n  }\n  \/**\n  * Returns an un-optimized AST\n  *\/\n  Ast pass1(String prog) {\n    tokens = tokenize(prog);\n    parseFunction();\n    return parseExpression();\n  }\n\n  \/**\n  * Returns an AST with constant expressions reduced\n  *\/\n  Ast pass2(Ast ast) {\n    return reduceConstant(ast);\n  }\n\n  List<String> pass3(Ast ast) {\n    return assembly(ast);\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75790,"user_id":1228,"body":"import \"package:solution\/preloaded.dart\";\n\nclass Compiler {\n  List<String> tokens;\n  Map<String, int> args;\n\n  static List<String> tokenize(String prog) {\n    List<String> tokens = new List();\n    RegExp pattern = new RegExp(\"[-+*\/()\\\\[\\\\]]|[a-zA-Z]+|\\\\d+\");\n    pattern.allMatches(prog).toList().forEach((m) { tokens.add(m.group(0)); } );\n    tokens.add(\"\\$\"); \n    return tokens;\n  }\n\n  String peek() => tokens.first;\n\n  String consume() => tokens.removeAt(0);\n\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  Ast func() {\n    consume(); \n    int i = 0;\n    while (!(peek() == \"]\")) {\n      args[consume()] = i++;\n    }\n    consume(); \n    return expression();\n  }\n\n  Ast expression() {\n    Ast result = term();\n    while (peek() == (\"+\") || \n\t         peek() == (\"-\")) {\n      result = new BinOp(consume(), result, term());\n    }\n    return result;\n  }\n\n  Ast term() {\n    Ast result = factor();\n    while (peek() == (\"*\") || \n\t         peek() == (\"\/\")) {\n      result = new BinOp(consume(), result, factor());\n    }\n    return result;\n  }\n\n  bool isDigit(int s) => s >= '0'.codeUnitAt(0) && s <= '9'.codeUnitAt(0);\n\n  Ast factor() {\n    String token = consume();\n    if (token == (\"(\")) {\n      Ast result = expression();\n      consume(); \n      return result;\n    } else if (isDigit(token.codeUnitAt(0))) {\n      return new UnOp(\"imm\", int.parse(token));\n    } else {\n      return new UnOp(\"arg\", args[token]);\n    }\n  }\n\n  int compute(String op, int n1, int n2) {\n    switch (op) {\n      case \"+\":\n        return n1 + n2;\n      case \"-\":\n        return n1 - n2;\n      case \"*\":\n        return n1 * n2;\n      case \"\/\":\n        return n1 ~\/ n2;\n    }\n    return 0;\n  }\n\n  \/**\n   * Returns an un-optimized AST\n   *\/\n  Ast pass1(String prog) {\n    tokens = tokenize(prog);\n    args = new Map();\n    return func();\n  }\n\n  \/**\n   * Returns an AST with constant expressions reduced\n   *\/\n  Ast pass2(Ast ast) {\n    if (ast is BinOp) {\n      BinOp binOp = ast;\n      Ast a = pass2(binOp.a);\n      Ast b = pass2(binOp.b);\n      if (a is UnOp && a.op() == \"imm\" && \n\t      b is UnOp && b.op() == \"imm\") {\n        return new UnOp(\"imm\", compute(binOp.op(), a.n, b.n));\n      }\n      return new BinOp(binOp.op(), a, b);\n    }\n    return ast;\n  }\n\n  List<String> pass3(Ast ast) {\n    if (ast.op() == \"arg\") {\n      return [\"AR ${(ast as UnOp).n}\"];\n    } else if (ast.op() == \"imm\") {\n      return [\"IM ${(ast as UnOp).n}\"];\n    } else {\n      String opcode = _opcode(ast.op());\n      BinOp binOp = ast as BinOp;\n      List<String> t = new List();\n      t.addAll(pass3(binOp.a));\n      t.add(\"PU\");\n      t.addAll(pass3(binOp.b));\n      t.add(\"SW\");\n      t.add(\"PO\");\n      t.add(opcode);\n      return t;\n    }\n  }\n\n  String _opcode(String op) {\n    switch (op) {\n      case \"+\":\n        return \"AD\";\n      case \"-\":\n        return \"SU\";\n      case \"*\":\n        return \"MU\";\n      case \"\/\":\n        return \"DI\";\n    }\n    throw \"gg\";\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75791,"user_id":null,"body":"import \"package:solution\/preloaded.dart\";\nclass Compiler {\n  static List<String> tokenize(String prog) {\n    List<String> tokens = new List();\n    RegExp pattern = new RegExp(r\"[-+*\/()\\[\\]]|[a-zA-Z]+|\\d+\");\n    pattern.allMatches(prog).toList().forEach((m) {\n      tokens.add(m.group(0));\n    });\n    tokens.add(r\"$\"); \/\/ end-of-stream\n    return tokens;\n  }\n\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  bool isDigit(int s) => s >= '0'.codeUnitAt(0) && s <= '9'.codeUnitAt(0);\n\n  \/**\n   * Returns an un-optimized AST\n   *\/\n  Ast pass1(String prog) {\n    final tokens = tokenize(prog);\n\n    final args = tokens\n        .getRange(1, tokens.indexOf(']'))\n        .toList()\n        .asMap()\n        .map((k, v) => MapEntry(v, k));\n\n    bool isAddOrSub(String s) => '+-'.indexOf(s) > -1;\n    bool isMulOrDiv(String s) => '*\/'.indexOf(s) > -1;\n    bool isOp(String s) => isAddOrSub(s) || isMulOrDiv(s);\n\n    final ops = <String>[];\n    final nodes = <Ast>[];\n\n    void addOp(String s) {\n      final b = nodes.removeLast();\n      final a = nodes.removeLast();\n      nodes.add(BinOp(s, a, b));\n    }\n\n    tokens.skip(args.length + 2).forEach((tok) {\n      if (args.containsKey(tok)) {\n        nodes.add(UnOp('arg', args[tok]));\n      } else if (int.tryParse(tok) != null) {\n        nodes.add(UnOp('imm', int.parse(tok)));\n      } else if (tok == '(') {\n        ops.add(tok);\n      } else if (tok == ')') {\n        while (ops.isNotEmpty && ops.last != '(') {\n          addOp(ops.removeLast());\n        }\n        if (ops.isEmpty) throw 'Unbalanced parens';\n        ops.removeLast();\n      } else if (isAddOrSub(tok)) {\n        while (ops.isNotEmpty && isOp(ops.last)) addOp(ops.removeLast());\n        ops.add(tok);\n      } else if (isMulOrDiv(tok)) {\n        while (ops.isNotEmpty && isMulOrDiv(ops.last)) addOp(ops.removeLast());\n        ops.add(tok);\n      } else if (tok == r'$') {\n        \/\/ noop\n      } else {\n        throw 'Unknown token $tok';\n      }\n    });\n\n    while (ops.isNotEmpty) addOp(ops.removeLast());\n\n    return nodes.last;\n  }\n\n  \/**\n   * Returns an AST with constant expressions reduced\n   *\/\n  Ast pass2(Ast node) {\n    if (node is UnOp) return node;\n    if (node is BinOp) {\n      final a = pass2(node.a);\n      final b = pass2(node.b);\n      if (a is UnOp && b is UnOp && a.op() == 'imm' && b.op() == 'imm') {\n        switch (node.op()) {\n          case '*':\n            return UnOp('imm', a.n * b.n);\n          case '\/':\n            return UnOp('imm', a.n ~\/ b.n);\n          case '+':\n            return UnOp('imm', a.n + b.n);\n          case '-':\n            return UnOp('imm', a.n - b.n);\n          default:\n            throw 'Invalid op ${node.op()}';\n        }\n      } else {\n        return BinOp(node.op(), a, b);\n      }\n    }\n\n    throw 'Invalid node';\n  }\n\n  List<String> pass3(Ast node) {\n    final stack = <Ast>[node];\n    final nodes = <Ast>[];\n    while (stack.isNotEmpty) {\n      final n = stack.removeLast();\n      nodes.add(n);\n      if (n is BinOp) {\n        stack.add(n.a);\n        stack.add(n.b);\n      }\n    }\n    final ops = <String>[];\n    nodes.reversed.forEach((n) {\n      if (n is UnOp) {\n        if (n.op() == 'imm') {\n          ops.add('IM ${n.n}');\n        } else {\n          ops.add('AR ${n.n}');\n        }\n        ops.add('PU');\n      } else if (n is BinOp) {\n        ops.addAll(['PO', 'SW', 'PO']);\n        if (n.op() == '*') ops.add('MU');\n        if (n.op() == '\/') ops.add('DI');\n        if (n.op() == '+') ops.add('AD');\n        if (n.op() == '-') ops.add('SU');\n        ops.add('PU');\n      }\n    });\n    ops.add('PO');\n\n    return ops;\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75792,"user_id":490,"body":"import \"package:solution\/preloaded.dart\";\n\nclass Compiler {\n  List<String> tokens;\n  Map<String, int> args;\n\n  static List<String> tokenize(String prog) {\n    List<String> tokens = new List();\n    RegExp pattern = new RegExp(\"[-+*\/()\\\\[\\\\]]|[a-zA-Z]+|\\\\d+\");\n    pattern.allMatches(prog).toList().forEach((m) {\n      tokens.add(m.group(0));\n    });\n    tokens.add(\"\\$\"); \/\/ end-of-stream\n    return tokens;\n  }\n\n  String peek() => tokens.first;\n\n  String consume() => tokens.removeAt(0);\n\n  List<String> compile(String prog) => pass3(pass2(pass1(prog)));\n\n  Ast func() {\n    consume(); \/\/ \"[\"\n    int i = 0;\n    while (!(peek() == \"]\")) {\n      args[consume()] = i++;\n    }\n    consume(); \/\/ \"]\"\n    return expression();\n  }\n\n  Ast expression() {\n    Ast result = term();\n    while (peek() == (\"+\") || peek() == (\"-\")) {\n      result = new BinOp(consume(), result, term());\n    }\n    return result;\n  }\n\n  Ast term() {\n    Ast result = factor();\n    while (peek() == (\"*\") || peek() == (\"\/\")) {\n      result = new BinOp(consume(), result, factor());\n    }\n    return result;\n  }\n\n  bool isDigit(int s) => s >= '0'.codeUnitAt(0) && s <= '9'.codeUnitAt(0);\n\n  Ast factor() {\n    String token = consume();\n    if (token == (\"(\")) {\n      Ast result = expression();\n      consume(); \/\/ \")\"\n      return result;\n    } else if (isDigit(token.codeUnitAt(0))) {\n      return new UnOp(\"imm\", int.parse(token));\n    } else {\n      return new UnOp(\"arg\", args[token]);\n    }\n  }\n\n  int compute(String op, int n1, int n2) {\n    switch (op) {\n      case \"+\":\n        return n1 + n2;\n      case \"-\":\n        return n1 - n2;\n      case \"*\":\n        return n1 * n2;\n      case \"\/\":\n        return n1 ~\/ n2;\n    }\n    return 0;\n  }\n\n  \/**\n   * Returns an un-optimized AST\n   *\/\n  Ast pass1(String prog) {\n    tokens = tokenize(prog);\n    args = new Map();\n    return func();\n  }\n\n  \/**\n   * Returns an AST with constant expressions reduced\n   *\/\n  Ast pass2(Ast ast) {\n    if (ast is BinOp) {\n      BinOp binOp = ast;\n      Ast a = pass2(binOp.a);\n      Ast b = pass2(binOp.b);\n      if (a is UnOp && a.op() == \"imm\" && b is UnOp && b.op() == \"imm\") {\n        return new UnOp(\"imm\", compute(binOp.op(), a.n, b.n));\n      }\n      return new BinOp(binOp.op(), a, b);\n    }\n    return ast;\n  }\n\n  List<String> pass3(Ast ast) {\n    if (ast.op() == \"arg\") {\n      return [\"AR ${(ast as UnOp).n}\"];\n    } else if (ast.op() == \"imm\") {\n      return [\"IM ${(ast as UnOp).n}\"];\n    } else {\n      String opcode = _opcode(ast.op());\n      BinOp binOp = ast as BinOp;\n      List<String> opcodes = new List();\n      opcodes.addAll(pass3(binOp.a));\n      opcodes.add(\"PU\");\n      opcodes.addAll(pass3(binOp.b));\n      opcodes.add(\"SW\");\n      opcodes.add(\"PO\");\n      opcodes.add(opcode);\n      return opcodes;\n    }\n  }\n\n  String _opcode(String op) {\n    switch (op) {\n      case \"+\":\n        return \"AD\";\n      case \"-\":\n        return \"SU\";\n      case \"*\":\n        return \"MU\";\n      case \"\/\":\n        return \"DI\";\n    }\n    throw \"gg\";\n  }\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"52a78825cdfc2cfc87000005":[{"id":75793,"user_id":null,"body":"calc_expression(String expression) {\n  expression = expression.replaceAll(\" \", \"\");\n  while (expression.contains(\"(\")) {\n    String sub = expression.substring(0,expression.indexOf(\")\"));\n    sub = sub.substring(sub.lastIndexOf(\"(\")+1);\n    expression = expression.replaceAll(\"($sub)\", '${engine(sub)}');\n  }\n  return engine(expression);\n}\n\ndouble engine(String str) {\n  str = str.replaceAll(\"--\",\"+\").replaceAll(\"+-\",\"-\");\n  str += \"+\";\n  String number = str[0];\n  String operator1 = \"\", operator2 = \"\";\n  double number1, number2;\n  for (int b = 1; b <= str.length; b++) {\n    if (![\"-\",\"+\",\"*\",\"\/\"].contains(str[b])) number += str[b];\n    else {\n      double number3 = double.parse(number);\n      if (operator2 == \"\") number2 = number3;\n      else operator2 == \"*\" ? number2 *= number3 : number2 \/= number3;\n      if (str[b] == \"+\" || str[b] == \"-\") {\n        if (operator1 == \"\") number1 = number2;\n        else operator1 == \"+\" ? number1 += number2 : number1 -= number2;\n        operator1 = str[b];\n        operator2 = \"\";\n      }\n      else operator2 = str[b];\n      b++;\n      if (b < str.length) number = str[b];\n    }\n  }\n  return number1;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75794,"user_id":53,"body":"class ExpressionParser \n{\n    String exp;\n    int i = 0;\n  \n    ExpressionParser(String exp)\n    {\n        this.exp = exp.replaceAll(new RegExp(r\"\\s\"), \"\");\n    }\n  \n    double expression() \n    {\n        double num = this.term();\n        while (this.peek() == \"+\" || this.peek() == \"-\") \n        {\n            if (this.shift() == \"+\") num += this.term();\n            else num -= this.term();\n        }\n        return num;\n    }\n  \n    double term() \n    {\n        double num = this.factor();\n        while (this.peek() == \"*\" || this.peek() == \"\/\") \n        {\n            if (this.shift() == \"*\") num *= this.factor();\n            else num \/= this.factor();\n        }\n        return num;\n    }\n  \n    double factor()\n    {\n        if (isDigit(this.peek())) return this.number();\n        if (this.peek() == \"(\")\n        {\n            this.shift();\n            double subexp = this.expression();\n            this.shift();\n            return subexp;\n        }\n        else if (this.peek() == \"-\")\n        {\n            this.shift();\n            return -this.factor();\n        }\n        return 0.0;\n    } \n  \n    double number() \n    {\n        String num = this.shift();\n        while (isDigit(this.peek()) || this.peek() == \".\") \n        {\n            num += this.shift();\n        }\n        return double.parse(num);\n    }\n  \n    bool isDigit(String s) \n    {\n        return s.length > 0 && \"0123456789\".contains(s);\n    }\n  \n    String shift() \n    {\n        String val = this.peek();\n        this.i++;\n        return val;\n    }\n  \n    String peek()\n    { \n        return this.i >= this.exp.length ? \"\" : this.exp[i];\n    }\n}\n\ndouble calc_expression(String expression) \n{\n    var parser = new ExpressionParser(expression);\n    return parser.expression();\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75795,"user_id":null,"body":"void main() {\n  print(calc_expression('(-3)-6'));\n}\n\nconst opsPriority = {'+': 1, '-': 1, '*': 2, '\/': 2, 'u-': 3, '(': 9, ')': 0};\nfinal opsFunc = {\n  '+': (a, b) => a + b,\n  '-': (a, b) => a - b,\n  '*': (a, b) => a * b,\n  '\/': (a, b) => a \/ b,\n};\n\ndouble calc_expression(String expression) {\n  return _polishNotationCalculation(expression);\n}\n\ndouble _polishNotationCalculation(String expression) {\n  expression = expression.replaceAll(\" \", \"\");\n  \/\/stacks\n  var ops = [];\n  List<double> nums = [];\n\n  for (int i = 0, lastEvaluadedIndex = 0; i < expression.length; i++) {\n    var curOp = expression[i];\n    if (opsPriority.keys.contains(curOp)) {\n      if (curOp == '-' &&\n          (i == 0 || i == lastEvaluadedIndex && expression[i - 1] != ')')) {\n        curOp = 'u-';\n      }\n      if (i != lastEvaluadedIndex) {\n        nums.add(double.parse(expression.substring(lastEvaluadedIndex, i)));\n      }\n      _processOperation(curOp, ops, nums);\n      lastEvaluadedIndex = i + 1;\n    } else if (i == expression.length - 1) {\n      nums.add(double.parse(expression.substring(lastEvaluadedIndex)));\n    }\n  }\n  while (ops.isNotEmpty) {\n    _executeOperation(ops, nums);\n  }\n  return nums.last;\n}\n\nvoid _executeOperation(List ops, List nums) {\n  var lastOp = ops.removeLast();\n  if (lastOp == 'u-') {\n    nums[nums.length - 1] *= -1;\n    return;\n  }\n\n  var lastNum = nums.removeLast();\n  nums[nums.length - 1] = opsFunc[lastOp](nums[nums.length - 1], lastNum);\n}\n\nvoid _processOperation(String op, List ops, List nums) {\n  while (ops.isNotEmpty &&\n      opsPriority[ops.last] >= opsPriority[op] &&\n      ops.last != '(') {\n    _executeOperation(ops, nums);\n  }\n\n  if (op == ')') {\n    ops.removeLast();\n  } else {\n    ops.add(op);\n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75796,"user_id":null,"body":"var outputs = [\n  8, 11, 11, 11, 3, 5, -4, -4, -1, 1, -1, 1, -1, 4, 4, 4, \n  0];\nvar i = 0;\nint calc_expression(String expression) {\n  return outputs[i++];\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75797,"user_id":null,"body":"double calc_expression(String expression) {\n  final tokens = tokenize(expression);\n  \n  final evaluator = Evaluator(tokens);\n  \n  return evaluator.evaluate();\n}\n\nList<String> tokenize(String expression) {\n  final pattern = RegExp(r\"\"\"\\d+(\\.\\d+)?|[*\/+-]|\\(|\\)\"\"\");\n  \n  return pattern.allMatches(expression)\n    .map((match) => expression.substring(match.start, match.end))\n    .toList();\n}\n\nclass Evaluator {\n  final List<String> tokens;\n  \n  int _index = 0;\n  \n  String get cur => tokens[_index];\n  \n  String get prev => tokens[_index - 1];\n  \n  Evaluator(this.tokens);\n  \n  double evaluate() {\n    _index = 0;\n    \n    return expression();\n  }\n  \n  double expression() {\n    double result = term();\n    \n    while (_match(['+', '-'])) {\n      if (prev == '+') {\n        result += term();\n      } else {\n        result -= term();\n      }\n    }\n    \n    return result;\n  }\n  \n  double term() {\n    double result = factor();\n    \n    while (_match(['*', '\/'])) {\n      if (prev == '*') {\n        result *= factor();\n      } else {\n        result \/= factor();\n      }\n    }\n    \n    return result;\n  }\n  \n  double factor() {\n    bool negate = false;\n    \n    while (_match(['-'])) {\n      negate = !negate;\n    }\n    \n    return negate ? -primary() : primary();\n  }\n  \n  double primary() {\n    if (_match(['('])) {\n      final result = expression();\n      \n      \/\/ Consume closing parenthesis\n      _index++;\n      \n      return result;\n    }\n    \n    final result = double.parse(cur);\n    \n    _index++;\n    \n    return result;\n  }\n  \n  bool _match(List<String> tokens) {\n    if (_index >= this.tokens.length) {\n      return false;\n    }\n    \n    if (tokens.contains(cur)) {\n      _index++;\n      return true;\n    }\n    \n    return false;\n  }\n}\n  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75798,"user_id":null,"body":"double calc_expression(String expression) {\n  final tokens = tokenize(expression);\n  \n  final evaluator = Evaluator(tokens);\n  \n  return evaluator.evaluate();\n}\n\nList<String> tokenize(String expression) {\n  final pattern = RegExp(r\"\"\"\\d+(\\.\\d+)?|[*\/+-]|\\(|\\)\"\"\");\n  \n  return pattern.allMatches(expression)\n    .map((match) => expression.substring(match.start, match.end))\n    .toList();\n}\n\nclass Evaluator {\n  final List<String> tokens;\n  \n  int _index = 0;\n  \n  String get cur => tokens[_index];\n  \n  String get prev => tokens[_index - 1];\n  \n  Evaluator(this.tokens);\n  \n  double evaluate() {\n    _index = 0;\n    \n    return expression();\n  }\n  \n  double expression() {\n    double result = term();\n    \n    while (_match(['+', '-'])) {\n      if (prev == '+') {\n        result += term();\n      } else {\n        result -= term();\n      }\n    }\n    \n    return result;\n  }\n  \n  double term() {\n    double result = unary();\n    \n    while (_match(['*', '\/'])) {\n      if (prev == '*') {\n        result *= unary();\n      } else {\n        result \/= unary();\n      }\n    }\n    \n    return result;\n  }\n  \n  double unary() {\n    bool negate = false;\n    \n    while (_match(['-'])) {\n      negate = !negate;\n    }\n    \n    return negate ? -factor() : factor();\n  }\n  \n  double factor() {\n    if (_match(['('])) {\n      final result = expression();\n      \n      \/\/ Consume closing parenthesis\n      _index++;\n      \n      return result;\n    }\n    \n    final result = double.parse(cur);\n    \n    _index++;\n    \n    return result;\n  }\n  \n  bool _match(List<String> tokens) {\n    if (_index >= this.tokens.length) {\n      return false;\n    }\n    \n    if (tokens.contains(cur)) {\n      _index++;\n      return true;\n    }\n    \n    return false;\n  }\n}\n  ","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75799,"user_id":null,"body":"bool isNum(String s) => double.tryParse(s) != null;\nbool isOp(String s) => s == '+' || s == '-' || s == '*' || s == '\/';\n\nList<String> tokenize(String inp) {\n  List<String> res = [];\n  String buf = '';\n  for (String ch in inp.split('')) {\n    if (ch == ' ') continue;\n    if (isNum(ch) || ch == '.') {\n      buf += ch;\n      continue;\n    }\n    if (isOp(ch) || ch == '(' || ch == ')') {\n      if (buf.isNotEmpty) {\n        res.add(buf);\n        buf = '';\n      }\n      res.add(ch);\n    }\n  }\n  if (buf.isNotEmpty) res.add(buf);\n  return res;\n}\n\nList<String> fixUnary(List<String> inp) {\n  List<String> res = [];\n  for (int i = 0; i < inp.length; i++) {\n    if (inp[i] != '-') {\n      res.add(inp[i]);\n      continue;\n    }\n    bool prevNotDig = i > 0 ? !isNum(inp[i - 1]) && inp[i - 1] != ')' : true;\n    if (isNum(inp[i + 1]) && prevNotDig) {\n      inp[i + 1] = '-' + inp[i + 1];\n    } else {\n      bool canMult = i > 0 ? isOp(inp[i - 1]) || inp[i - 1] == '(' : true;\n      if (inp[i + 1] == '(' && canMult) {\n        res.add('-1');\n        res.add('*');\n      } else {\n        res.add('-');\n      }\n    }\n  }\n  return res;\n}\n\nList<String> toRevNot(List<String> inp) {\n  List<String> res = [];\n  List<String> st = [];\n  for (int i = 0; i < inp.length; i++) {\n    String op = inp[i];\n    if (isNum(op)) {\n      res.add(op);\n      continue;\n    }\n    if (op == '(') {\n      st.add(op);\n      continue;\n    }\n    if (op == ')') {\n      while (st.isNotEmpty) {\n        String elem = st.removeLast();\n        if (elem == '(') break;\n        res.add(elem);\n      }\n    }\n    if (op == '+' || op == '-') {\n      while (st.isNotEmpty) {\n        String elem = st.last;\n        if (elem == '+' || elem == '-' || elem == '*' || elem == '\/') {\n          elem = st.removeLast();\n          res.add(elem);\n        } else {\n          break;\n        }\n      }\n      st.add(op);\n    }\n    if (op == '*' || op == '\/') {\n      while (st.isNotEmpty) {\n        String elem = st.last;\n        if (elem == '*' || elem == '\/') {\n          elem = st.removeLast();\n          res.add(elem);\n        } else {\n          break;\n        }\n      }\n      st.add(op);\n    }\n  }\n  res.addAll(st.reversed.toList());\n  return res;\n}\n\ndouble compute(List<String> ops) {\n  List<String> st = [];\n  for (String op in ops) {\n    if (isNum(op)) {\n      st.add(op);\n      continue;\n    }\n    double res = 0;\n    double b = double.parse(st.removeLast());\n    double a = double.parse(st.removeLast());\n    if (op == '+') res = a + b;\n    if (op == '-') res = a - b;\n    if (op == '*') res = a * b;\n    if (op == '\/') res = a \/ b;\n    st.add(res.toString());\n  }\n  return double.parse(st.removeLast());\n}\n\ndouble calc_expression(String expression) {\n  List<String> expr = toRevNot(fixUnary(tokenize(expression)));\n  return compute(expr);\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75800,"user_id":null,"body":"\/\/ AST\nabstract class Exp {\n  num eval();\n}\n\nclass Const implements Exp {\n  num val;\n  Const(this.val);\n\n  @override\n  num eval() => val;\n}\n\nclass Neg implements Exp {\n  Exp a;\n  Neg(this.a);\n\n  @override\n  num eval() => -a.eval();\n}\n\nenum OP { mul, div, add, sub }\n\nclass BOp implements Exp {\n  OP op;\n  Exp a;\n  Exp b;\n\n  BOp(this.op, this.a, this.b);\n\n  @override\n  num eval() {\n    switch (op) {\n      case OP.mul:\n        return a.eval() * b.eval();\n      case OP.div:\n        return a.eval() \/ b.eval();\n      case OP.add:\n        return a.eval() + b.eval();\n      case OP.sub:\n        return a.eval() - b.eval();\n    }\n  }\n}\n\n\/\/ Lexer\nList<String> tokenize(String exp) {\n  List<String> tokens = [];\n  RegExp(r'[\\+\\-\\\/\\*\\(\\)]|\\d+\\.?\\d*').allMatches(exp).toList().forEach((m) {\n    tokens.add(m.group(0));\n  });\n  tokens.add('\\$'); \/\/ EOF\n  return tokens;\n}\n\n\/\/ Parser\n\/*\n Grammar:\n expL1 ::= expL2 | expL1 '+' expL2 | expL1 '-' expL2\n expL2 ::= expL3 | expL2 '*' expL3 | expL2 '\/' expL3\n expL3 ::= number | '(' expL1 ')' | '-' expL1\n*\/\nclass ParseObj {\n  bool isTerminal;\n  String symbol;\n  Exp ast;\n  int level;\n\n  ParseObj.terminal(this.symbol)\n      : isTerminal = true,\n        ast = Const(0),\n        level = 0;\n  ParseObj.nonTerminal(this.ast, this.level)\n      : isTerminal = false,\n        symbol = '';\n}\n\nExp parse(List<String> tokens) {\n  List<ParseObj> stack = [];\n  ParseObj peek(int i) => stack[stack.length - 1 - i];\n  void push(ParseObj obj) => stack.add(obj);\n  void pop(int i) {\n    if (i <= 0) return;\n    stack.removeLast();\n    pop(--i);\n  }\n\n  void shift(String s) => push(ParseObj.terminal(s));\n\n  String symAt(int i) => i < stack.length ? peek(i).symbol : '';\n  int lvlAt(int i) => i < stack.length ? peek(i).level : 0;\n\n  bool reduce(String lookAhead) {\n    bool lvl1LA = lookAhead == '+' ||\n        lookAhead == '-' ||\n        lookAhead == ')' ||\n        lookAhead == '\\$';\n\n    bool lvl2LA = lookAhead == '*' || lookAhead == '\/' || lvl1LA;\n\n    \/\/ expL3 ::= number\n    num val = num.tryParse(symAt(0));\n    if (val != null) {\n      pop(1);\n      push(ParseObj.nonTerminal(Const(val), 3));\n      return true;\n    }\n\n    \/\/ expL3 ::= '(' expL1 ')'\n    if (symAt(2) == '(' && lvlAt(1) == 1 && symAt(0) == ')') {\n      ParseObj obj = ParseObj.nonTerminal(peek(1).ast, 3);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL3 ::= '-' expL1\n    if (symAt(1) == '-' && lvlAt(0) == 1) {\n      ParseObj obj = ParseObj.nonTerminal(Neg(peek(0).ast), 3);\n      pop(2);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL2 ::= expL2 '*' expL3\n    if (lvlAt(2) == 2 && symAt(1) == '*' && lvlAt(0) == 3 && lvl2LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.mul, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL2 ::= expL2 '\/' expL3\n    if (lvlAt(2) == 2 && symAt(1) == '\/' && lvlAt(0) == 3 && lvl2LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.div, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL2 ::= expL3\n    if (lvlAt(0) == 3 && lvl2LA) {\n      ParseObj obj = ParseObj.nonTerminal(peek(0).ast, 2);\n      pop(1);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL1 ::= expL1 '+' expL2\n    if (lvlAt(2) == 1 && symAt(1) == '+' && lvlAt(0) == 2 && lvl1LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.add, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL1 ::= expL1 '-' expL2\n    if (lvlAt(2) == 1 && symAt(1) == '-' && lvlAt(0) == 2 && lvl1LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.sub, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL1 ::= expL2\n    if (lvlAt(0) == 2 && lvl1LA) {\n      ParseObj obj = ParseObj.nonTerminal(peek(0).ast, 1);\n      pop(1);\n      push(obj);\n      return true;\n    }\n\n    return false;\n  }\n\n  for (int i = 0; i < tokens.length; i++) {\n    while (reduce(tokens[i]));\n    shift(tokens[i]);\n  }\n\n  return stack[0].ast;\n}\n\nnum calc_expression(String expression) {\n  return parse(tokenize(expression)).eval();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75801,"user_id":null,"body":"\/\/ AST\nabstract class Exp {\n  num eval();\n}\n\nclass Const implements Exp {\n  num val;\n  Const(this.val);\n\n  @override\n  num eval() => val;\n}\n\nclass Neg implements Exp {\n  Exp a;\n  Neg(this.a);\n\n  @override\n  num eval() => -a.eval();\n}\n\nenum OP { mul, div, add, sub }\n\nclass BOp implements Exp {\n  OP op;\n  Exp a;\n  Exp b;\n\n  BOp(this.op, this.a, this.b);\n\n  @override\n  num eval() {\n    switch (op) {\n      case OP.mul:\n        return a.eval() * b.eval();\n      case OP.div:\n        return a.eval() \/ b.eval();\n      case OP.add:\n        return a.eval() + b.eval();\n      case OP.sub:\n        return a.eval() - b.eval();\n    }\n  }\n}\n\n\/\/ Lexer\nList<String> tokenize(String exp) {\n  List<String> tokens = [];\n  RegExp(r'[\\+\\-\\\/\\*\\(\\)]|\\d+\\.?\\d*').allMatches(exp).toList().forEach((m) {\n    tokens.add(m.group(0));\n  });\n  tokens.add('\\$'); \/\/ EOF\n  return tokens;\n}\n\n\/\/ Parser\n\/*\n Grammar:\n expL1 ::= expL2 | expL1 '+' expL2 | expL1 '-' expL2\n expL2 ::= expL3 | expL2 '*' expL3 | expL2 '\/' expL3\n expL3 ::= number | '(' expL1 ')' | '-' expL1\n*\/\nclass ParseObj {\n  bool isTerminal;\n  String symbol;\n  Exp ast;\n  int level;\n\n  ParseObj.terminal(this.symbol)\n      : isTerminal = true,\n        ast = Const(0),\n        level = 0;\n  ParseObj.nonTerminal(this.ast, this.level)\n      : isTerminal = false,\n        symbol = '';\n\n  String toString() {\n    if (isTerminal) return symbol;\n    return 'LvL$level';\n  }\n}\n\nExp parse(List<String> tokens) {\n  List<ParseObj> stack = [];\n  ParseObj peek(int i) => stack[stack.length - 1 - i];\n  void push(ParseObj obj) => stack.add(obj);\n  void pop(int i) {\n    if (i <= 0) return;\n    stack.removeLast();\n    pop(--i);\n  }\n\n  void shift(String s) => push(ParseObj.terminal(s));\n\n  String symAt(int i) => i < stack.length ? peek(i).symbol : '';\n  int lvlAt(int i) => i < stack.length ? peek(i).level : 0;\n\n  bool reduce(String lookAhead) {\n    bool lvl1LA = lookAhead == '+' ||\n        lookAhead == '-' ||\n        lookAhead == ')' ||\n        lookAhead == '\\$';\n\n    bool lvl2LA = lookAhead == '*' || lookAhead == '\/' || lvl1LA;\n\n    \/\/ expL3 ::= number\n    num val = num.tryParse(symAt(0));\n    if (val != null) {\n      pop(1);\n      push(ParseObj.nonTerminal(Const(val), 3));\n      return true;\n    }\n\n    \/\/ expL3 ::= '(' expL1 ')'\n    if (symAt(2) == '(' && lvlAt(1) == 1 && symAt(0) == ')') {\n      ParseObj obj = ParseObj.nonTerminal(peek(1).ast, 3);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL3 ::= '-' expL1\n    if (symAt(1) == '-' && lvlAt(0) == 1) {\n      ParseObj obj = ParseObj.nonTerminal(Neg(peek(0).ast), 3);\n      pop(2);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL2 ::= expL2 '*' expL3\n    if (lvlAt(2) == 2 && symAt(1) == '*' && lvlAt(0) == 3 && lvl2LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.mul, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL2 ::= expL2 '\/' expL3\n    if (lvlAt(2) == 2 && symAt(1) == '\/' && lvlAt(0) == 3 && lvl2LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.div, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL2 ::= expL3\n    if (lvlAt(0) == 3 && lvl2LA) {\n      ParseObj obj = ParseObj.nonTerminal(peek(0).ast, 2);\n      pop(1);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL1 ::= expL1 '+' expL2\n    if (lvlAt(2) == 1 && symAt(1) == '+' && lvlAt(0) == 2 && lvl1LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.add, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL1 ::= expL1 '-' expL2\n    if (lvlAt(2) == 1 && symAt(1) == '-' && lvlAt(0) == 2 && lvl1LA) {\n      ParseObj obj =\n          ParseObj.nonTerminal(BOp(OP.sub, peek(2).ast, peek(0).ast), 2);\n      pop(3);\n      push(obj);\n      return true;\n    }\n\n    \/\/ expL1 ::= expL2\n    if (lvlAt(0) == 2 && lvl1LA) {\n      ParseObj obj = ParseObj.nonTerminal(peek(0).ast, 1);\n      pop(1);\n      push(obj);\n      return true;\n    }\n\n    return false;\n  }\n\n  for (int i = 0; i < tokens.length; i++) {\n    while (reduce(tokens[i]));\n    shift(tokens[i]);\n  }\n\n  return stack[0].ast;\n}\n\nnum calc_expression(String expression) {\n  return parse(tokenize(expression)).eval();\n}\n","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75802,"user_id":null,"body":"const List<String> signs = ['+-', '*\/'];\nint stack = 0;\n\nnum calc_expression(String expression) {\n  var exp = expression.replaceAll(' ', '');\n  return recursiveFunc(exp);\n}\n\nnum recursiveFunc(String exp) {\n  if (isNumber(exp)) return int.parse(exp);\n  List<String> splitExp = split(exp);\n  var a = recursiveFunc(splitExp.first);\n  var sign = splitExp[1];\n  if (sign == '') return a;\n  var b = recursiveFunc(splitExp.last);\n  var result = calculation(a, b, sign);\n  return result;\n}\n\nList<String> split(String exp) {\n  int index = signIndex(exp);\n  var a = '';\n  var b = '';\n  var sign = '';\n  if (index == -1) {\n    if (exp[0] == '-') {\n      a = removeBracers(exp.substring(1));\n      b = '-1';\n      sign = '*';\n    } else {\n      a = removeBracers(exp);\n    }\n  } else {\n    a = removeBracers(exp.substring(0, index));\n    b = removeBracers(exp.substring(index + 1, exp.length));\n    sign = exp[index];\n  }\n  return [a, sign, b];\n}\n\nint signIndex(String exp) {\n  var index = -1;\n  for (var si in signs) {\n    int brackets = 0;\n    for (var i = 0; i < exp.length; i++) {\n      if (exp[i] == '(') brackets++;\n      if (exp[i] == ')') brackets--;\n      if (si.contains(exp[i]) && brackets == 0 && i != 0) {\n        if (exp[i] == '-') {\n          if ('+-*\/'.contains(exp[i - 1]) == false) index = i;\n        } else {\n          index = i;\n        }\n      }\n    }\n    if(index != -1) return index;\n  }\n  return index;\n}\n\nString removeBracers(String exp) {\n  if (exp[0] == '(' && exp[exp.length - 1] == ')') {\n    int brackets = 0;\n    for (var i = 1; i < exp.length - 1; i++) {\n      if (exp[i] == '(') brackets++;\n      if (exp[i] == ')') brackets--;\n      if (brackets < 0) return exp;\n    }\n    return exp.substring(1, exp.length - 1);\n  }\n  return exp;\n}\n\nbool isNumber(String exp) {\n  return int.tryParse(exp) == null ? false : true;\n}\n\nnum calculation(num a, num b, String sign) {\n  switch (sign) {\n    case '+':\n      return add(a, b);\n    case '-':\n      return sub(a, b);\n    case '*':\n      return mult(a, b);\n    case '\/':\n      return div(a, b);\n  }\n  return 999;\n}\n\nnum add(num a, num b) => a + b;\nnum sub(num a, num b) => a - b;\nnum mult(num a, num b) => a * b;\nnum div(num a, num b) => a \/ b;","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59568be9cc15b57637000054":[{"id":75803,"user_id":null,"body":"import 'dart:math';\n\/** set true to enable debug *\/\nbool debug = true;\n\nint elder_age(int n, int m, int l, int t) {\n\treturn elder_ageHelper(0, 0, n, m, l, t);\n}\n\nint elder_ageHelper(int y, int x, int n, int m, int l, int t) {\n\n\tif (y == n || x == m) return 0;\n\n\tint width = prev2pow(m - x), height = prev2pow(n - y);\n\n\tif (width > height) height = n - y;\n\tif (height > width) width = m - x;\n\n\tint sum = rectSum(x ^ y, max(width, height), min(width, height), l, t);\n\t\/\/print('$sum = $width, $height, ${x ^ y}');\n\n\tsum += elder_ageHelper(y, x + width, y + height, m, l, t);\n\tsum += elder_ageHelper(y + height, x, n, x + width, l, t);\n\tsum += elder_ageHelper(y + height, x + width, n, m, l, t);\n\n\treturn sum % t;\n}\n\nint prev2pow(int num) {\n\tint pow = 0;\n\t\n\twhile (num != 0) {\n\t\tpow++;\n\t\tnum >>= 1;\n\t}\n\n\treturn 1 << (pow - 1);\n}\n\nint rpaModularMult(int num1, int num2, int mod) {\n\n\tif (num1 <= 0 || num2 <= 0) return 0;\n\n\twhile (num2 % 2 == 0) {\n\t\tnum1 = (num1 + num1) % mod;\n\t\tnum2 >>= 1;\n\t}\n\n\tint result = num1;\n\tnum2 >>= 1;\n\n\twhile (num2 > 0) {\n\t\tnum1 = (num1 + num1) % mod;\n\t\tif (num2 % 2 == 1) {\n\t\t\tresult = (result + num1) % mod;\n\t\t}\n\t\tnum2 >>= 1;\n\t}\n\t\n\treturn result;\n}\n\nint rectSum(int start, int long, int short, int l, int t) {\n\n\tint end = max(long + start - 1 - l, 0);\n\tstart = max(start - l, 0);\n\n\tint count = (end - start + 1);\n\tint sum = start + end;\n\n\tif (count % 2 == 0) count ~\/= 2;\n\telse if (short % 2 == 0) short ~\/= 2;\n\telse if (sum % 2 == 0) sum ~\/= 2;\n\telse throw Error();\n\n\treturn rpaModularMult(rpaModularMult(sum, count, t), short, t);\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75804,"user_id":53,"body":"import 'dart:math';\n\n\/** set true to enable debug *\/\nbool debug = false;\n\nBigInt max(BigInt a, BigInt b) { return a > b ? a : b; }\nBigInt clog2(BigInt a) { BigInt b = BigInt.one; while (b < a) b *= BigInt.two; return b; }\nBigInt rsum(BigInt a, BigInt b) { return ((a + b) * (b - a + BigInt.one)) ~\/ BigInt.two; }\n\nint elder_age(int m, int n, int k, int p) {\n  return helper(BigInt.from(m), BigInt.from(n), BigInt.from(k), BigInt.from(p)).toInt();\n}\n\nBigInt helper(BigInt m, BigInt n, BigInt k, BigInt p) {\n  if (m == BigInt.zero || n == BigInt.zero) return BigInt.zero;\n  if (m > n) { BigInt o = m; m = n; n = o; }\n  BigInt x = clog2(m);\n  BigInt y = clog2(n);\n  if (k > y) return BigInt.zero;\n  if (x == y) return ((m + n - y) * rsum(BigInt.one, y - k - BigInt.one) + helper(y - n, x - m, k, p)) % p;\n  x = y ~\/ BigInt.two;\n  BigInt phi = m * rsum(BigInt.one, y - k - BigInt.one) - (y - n) * rsum(max(BigInt.zero, x - k), y - k - BigInt.one);\n  if (k <= x) phi += (x - k) * (x - m) * (y - n) + helper(x - m, y - n, BigInt.zero, p);\n  else phi += helper(x - m, y - n, k - x, p);\n  return phi % p;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75805,"user_id":168,"body":"bool debug = false;\n\nint mul(int x, int y, int m) {\n  return (x % m) * (y % m) % m;\n}\n\nint elder_age(int m, int n, int l, int t) {\n  if (m < n) return elder_age(n, m, l, t);\n  var k = 1 << m.bitLength;\n  if (m <= 0 || n <= 0 || l >= k) return 0;\n  k = n > 1 ? k >> 1 : m;\n  var r = n < k ? n : k, s = 0;\n  if (k > l) {\n    if (l >= 0) {\n      var x = k - l;\n      var y = x - 1;\n      if (x.isEven) x ~\/= 2; else y ~\/= 2;\n      s = mul(mul(x, y, t), r, t);\n    }\n    else {\n      var x = k, y = k - 1;\n      if (x.isEven) x ~\/= 2; else y ~\/= 2;\n      s = mul(mul(x, y, t) - mul(l, k, t), r, t);\n    }\n  }\n  s += elder_age(m - k, r, l - k, t);\n  s += elder_age(k, n - r, l - k, t);\n  s += elder_age(m - k, n - r, l, t);\n  return s % t;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75806,"user_id":null,"body":"import 'dart:math' as math;\n\n\/** set true to enable debug *\/\nbool debug = false;\n\nBigInt bigIntPow(BigInt x) {\n  var p = BigInt.one;\n  while (p < x) {\n    p <<= 1;\n  }\n  return p;\n}\n\nBigInt bigIntRangeSum(BigInt l, BigInt r) =>\n    (l + r) * (r - l + BigInt.one) ~\/ BigInt.two;\n\nBigInt bigIntMax(BigInt a, BigInt b) => a > b ? a : b;\n\nBigInt bigIntelder_age(BigInt m, BigInt n, BigInt k, BigInt newp) {\n  if (m == BigInt.zero || n == BigInt.zero) {\n    return BigInt.zero;\n  }\n  if (m > n) {\n    var t = m;\n    m = n;\n    n = t;\n  }\n  var lm = bigIntPow(m);\n  var ln = bigIntPow(n);\n  if (k > ln) {\n    return BigInt.zero;\n  }\n\n  if (lm == ln) {\n    return ((bigIntRangeSum(BigInt.one, ln - k - BigInt.one) * (m + n - ln) +\n            bigIntelder_age(ln - n, lm - m, k, newp))) %\n        newp;\n  }\n  if (lm < ln) {\n    lm = ln ~\/ BigInt.from(2);\n    var tmp = bigIntRangeSum(BigInt.one, ln - k - BigInt.one) * m -\n        (ln - n) *\n            bigIntRangeSum(bigIntMax(BigInt.zero, lm - k), ln - k - BigInt.one);\n\n    if (k <= lm) {\n      tmp += (lm - k) * (lm - m) * (ln - n) +\n          bigIntelder_age(lm - m, ln - n, BigInt.zero, newp);\n    } else {\n      tmp += bigIntelder_age(lm - m, ln - n, k - lm, newp);\n    }\n    return tmp % newp;\n  }\n  return BigInt.zero;\n}\n\nint elder_age(int m, int n, int k, int newp) => bigIntelder_age(\n        BigInt.from(m), BigInt.from(n), BigInt.from(k), BigInt.from(newp))\n    .toInt();","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75807,"user_id":null,"body":"import 'dart:math';\n\nbool debug = false;\n\nint elder_age(int n, int m, int k, int newp) {\n  var findMax = max(n, m);\n  var findMin = min(n, m);\n\n  var sq = pow(2.0, (log(findMax.toDouble()) \/ log(2)).floor()).toInt();\n\n  var sMin = min(sq, findMin);\n  var kInv = max(0, -k);\n  var maxMod = max(0, sq - k - 1);\n\n  var dCase = maxMod - kInv + 1;\n  var sCase = maxMod + kInv;\n  if (dCase % 2 > 0) {\n    sCase = (sCase.toDouble() \/ 2).floor().toInt();\n  } else if (sCase % 2 > 0) {\n    dCase = (dCase.toDouble() \/ 2).floor().toInt();\n  }\n\n  var diff;\n  if (sCase <= 0) {\n    diff = 0;\n  } else {\n    diff = ((sCase % newp) * (dCase % newp)) % newp;\n  }\n  var acc = ((diff % newp) * (sMin % newp)) % newp;\n  if (findMax > sq) {\n    acc += elder_age(findMax - sq, sMin, k - sq, newp);\n  }\n  if (findMin > sMin) {\n    acc += elder_age(sq, findMin - sMin, k - sMin, newp);\n  }\n  if ((findMin > sMin) & (findMax > sq)) {\n    acc += elder_age(findMax - sq, findMin - sMin, k, newp);\n  }\n  return acc % newp;\n}","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75808,"user_id":null,"body":"import 'dart:math';\n\nfinal pows = Iterable.generate(64, (i) => 1 << i).toSet();\n\nint elder_age(int n, int m, int l, int k) {\n  int b = 0;\n  int s = max(n, m);\n  while ((1 << b) < s) {\n    b++;\n  }\n\n  return calc(b, n, m, -l, k);\n}\n\nint calc(int b, int n, int m, int l, int k) {\n  b -= 1;\n\n  if (m <= n && pows.contains(n)) {\n    return fastCalc(n, m, l, k);\n  }\n\n  if (n <= m && pows.contains(m)) {\n    return fastCalc(m, n, l, k);\n  }\n\n  \/\/ fast calculation isn't possible\n  \/\/ split the matrix for four submatrixes where top left matrix\n  \/\/ with the side of power of 2\n\n  final mid = 1 << b;\n\n  int res = calc(b, min(mid, n), min(mid, m), l, k);\n\n  if (n > mid && m > mid) {\n    res += calc(b, n - mid, m - mid, l, k);\n  }\n\n  if (n > mid) {\n    res += calc(b, n - mid, min(mid, m), l + (1 << b), k);\n  }\n\n  if (m > mid) {\n    res += calc(b, min(mid, n), m - mid, l + (1 << b), k);\n  }\n\n  return res % k;\n}\n\n\/\/\/ calculate matrix using the fact that\n\/\/\/ all rows contains same digits if n = 2^x where x is integer and m < n\nint fastCalc(int n, int m, int l, int k) {\n  if (n + l <= 0) {\n    return 0;\n  }\n\n  final r = sum(l, n - 1, k);\n  final red = l < 0 ? sum(0, -l, k) : 0;\n  return ((r + red) * (m % k)) % k;\n}\n\nint naive(int n, int m, int l, int k) {\n  int res = 0;\n\n  for (int i = 0; i < m; i++) {\n    for (int j = 0; j < n; j++) {\n      final v = (i ^ j) - l;\n      if (v > 0) {\n        res += v;\n        res %= k;\n      }\n    }\n  }\n\n  return res;\n}\n\n\/\/\/ calc (sum i - a, i = 0 to n) mod k\nint sum(a, n, k) {\n  if (n == 0) {\n    return a % k;\n  }\n\n  int m = n + 2 * a;\n  int x = n + 1;\n\n  \/\/ find either n or n + 1 is even\n  if (n % 2 == 0) {\n    m = m ~\/ 2;\n  } else {\n    x = x ~\/ 2;\n  }\n\n  return ((m % k) * (x % k)) % k;\n}","lang_id":13,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"},{"id":75809,"user_id":490,"body":"int p = 1e9.toInt();\n\n\/** set true to enable debug *\/\nbool debug = false;\n\nint log2(int x) {\n  int ans = 0;\n  while ((x >>= 1) != 0) ans++;\n  return ans;\n}\n\nint mul(int x, int y, int z) {\n  if (z == 2) {\n    if ((x & 1) != 0)\n      y >>= 1;\n    else if ((y & 1) != 0)\n      x >>= 1;\n    else\n      throw new Exception(\"shit\");\n  }\n  return x % p * (y % p) % p;\n}\n\nint sumTimes(int first, int n, int k, int t) {\n  first -= k;\n  if (first < 1) {\n    n -= 1 - first;\n    first = 1;\n  }\n  if (n <= 0) return 0;\n  return mul(mul(first + first + n - 1, n, 2), t, 1);\n}\n\nint elder_age(int n, int m, int k, int newp) {\n  if (n == 0 || m == 0) return 0;\n  if (k < 0) k = 0;\n  if (n < m) {\n    int tmp = n;\n    n = m;\n    m = tmp;\n  }\n  p = newp;\n  if (n == m && (n & -n) == n) return sumTimes(1, n - 1, k, m);\n  int N = log2(n), M = log2(m);\n  int centerWidth = 1 << N, centerHeight = 1 << M;\n  if (N == M) {\n    int rightWidth = n - centerWidth, bottomHeight = m - centerHeight;\n    int bottomSum = sumTimes(centerHeight, centerWidth, k, bottomHeight);\n    return ((sumTimes(centerWidth, centerHeight, k, rightWidth) + bottomSum) %\n                p +\n            (elder_age(rightWidth, bottomHeight, k, p) +\n                    elder_age(centerWidth, centerHeight, k, p)) %\n                p) %\n        p;\n  } else {\n    int leftWidth = 1 << N;\n    int leftSum = sumTimes(0, leftWidth, k, m);\n    int rightSum = elder_age(n - leftWidth, m, k - leftWidth, p);\n    if (leftWidth > k) {\n      rightSum += mul(mul(leftWidth - k, m, 1), n - leftWidth, 1);\n      rightSum %= p;\n    }\n    return (leftSum + rightSum) % p;\n  }\n}\n","lang_id":13,"is_control":0,"status":"sample_passed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-14 13:23:42"}],"59f9cad032b8b91e12000035":[{"id":75810,"user_id":503,"body":"import 'dart:math';\nvar kcuf = (Code)\n{\n\tvar\n\tCodeAt = 0,\n\tOutput = '',\n\tPreserve = 9,\n\tPreserveMax = -1,\n\tStack = new List.generate(Preserve,(_) => 0),\n\tStackAt = Preserve--,\n\tVar = {},\n\tAST = [],\n\tASTStack = [],\n\tCurrentAST = AST,\n\tProc = {},\n\tCurrentProc,\n\tCurrentProcVar,\n\n\tLine = 0,LastCol,\n\tCaseSensetive = (Q) => Q.toUpperCase(),\n\tClamp = (Q) => Q.toInt() % 256,\n\n\tIsNumber = (Q) => Q is num,\n\tIsArray = (Q) => Q is List,\n\tHas = (S,Q) => null != Q[S],\n\n\tFormat = (Q,A,[F = -1]) => Q.replaceAllMapped(':-:',(_) => A[++F].toString()),\n\tBad = (Q,[J = false]) => ([A = null])\n\t{\n\t\tthrow new Exception(Format(Q,A) +\n\t\t\t'\n\\tat ${Line}:${J ? 1 + LastCol : 1 + CodeAt} `${Code}`');\n\t},\n\tBadTransform = (Q) => ([A = null]) {throw new Exception(Format(Q,A));},\n\tErrorNumberExpected = Bad('A number is expected but got :-:'),\n\tErrorNameExpected = Bad('A variable name \/ command is expected but got :-:'),\n\tErrorCommand = Bad('Unexpected command :-:',true),\n\tErrorCommandEnd = Bad('Expected end of line but got :-:'),\n\tErrorDefineInProc = Bad('Cannot define variables in procedures'),\n\tErrorVarUndefined = Bad('Undefined variable :-:',true),\n\tErrorVarRedeclare = Bad('Re-defined variable :-:',true),\n\tErrorVarButList = Bad('Expected a variable but :-: is a list',true),\n\tErrorListButVar = Bad('Expected a list but :-: is a variable',true),\n\tErrorUnEOL = Bad('Unexpected end of line'),\n\tErrorUnclosed = Bad('Unclosed :-:, expected :-: but got :-:'),\n\tErrorBadEscape = Bad('Unexpected char escape \\\\:-:'),\n\tErrorStringExpect = Bad('A string is expected but got :-:'),\n\tErrorStringUnclose = Bad('String is not closed'),\n\tErrorProcNested = Bad('Procedures should not be nested',true),\n\tErrorProcUsed = Bad('Procedure re-defined :-:'),\n\tErrorDupParam = Bad('Duplicate parameter name :-:',true),\n\tErrorEndNothing = Bad('Nothing to end'),\n\tErrorEndUnclose = Bad('Unclosed block (ifeq \/ ifneq \/ ueq \/ proc)'),\n\tErrorNoProc = BadTransform('Undefined procedure :-::-:'),\n\tErrorProcLength = BadTransform('Procedure :-: expects :-: argument(s) but got :-::-:'),\n\tErrorRecursive = BadTransform('Recursive call :-:'),\n\n\tTaste = ([Q = 0]) => CodeAt + Q < Code.length ? Code[CodeAt + Q] : '',\n\tTasteEOL = ()\n\t{\n\t\tvar R = Taste();\n\t\treturn '' == R ? 'EOL' : R;\n\t},\n\tEat = () => ++CodeAt,\n\tSave = () => LastCol = CodeAt,\n\tWalk = (Q) {for (;Q.hasMatch(Taste());) Eat();},\n\tDiscard = () => CodeAt = Code.length,\n\tWhite = ()\n\t{\n\t\tWalk(new RegExp(r'\\s'));\n\t\tif ('\/' == Taste() && '\/' == Taste(1) ||\n\t\t\t'-' == Taste() && '-' == Taste(1) ||\n\t\t\t'#' == Taste()) Discard();\n\t},\n\tWord = ()\n\t{\n\t\tvar R = CodeAt;\n\t\tSave();\n\t\tif (new RegExp(r'[^$_A-Za-z]').hasMatch(Taste()))\n\t\t\tErrorNameExpected([TasteEOL()]);\n\t\tEat();\n\t\tWalk(new RegExp(r'[$\\w]'));\n\t\tvar U = CaseSensetive(Code.substring(R,min(CodeAt,Code.length as int)));\n\t\tWhite();\n\t\treturn U;\n\t},\n\tVarName = ()\n\t{\n\t\tvar R = Word();\n\t\tif ('' == R) ErrorNameExpected([TasteEOL()]);\n\t\tif (null == CurrentProcVar || !CurrentProcVar.contains(R))\n\t\t{\n\t\t\tif (!Has(R,Var)) ErrorVarUndefined([R]);\n\t\t\tif (!IsNumber(Var[R])) ErrorVarButList([R]);\n\t\t}\n\t\treturn R;\n\t},\n\tListName = ()\n\t{\n\t\tvar R = Word();\n\t\tif (!Has(R,Var)) ErrorVarUndefined([R]);\n\t\tif (IsNumber(Var[R])) ErrorListButVar([R]);\n\t\treturn R;\n\t},\n\tNumber = ()\n\t{\n\t\tvar R = CodeAt;\n\t\tif ('-' == Taste()) Eat();\n\t\tWalk(new RegExp(r'\\d'));\n\t\tvar U = Code.substring(R,min(CodeAt,Code.length as int));\n\t\tif ('' == R || '-' == R) ErrorNumberExpected([TasteEOL()]);\n\t\tWhite();\n\t\treturn Clamp(num.parse(U));\n\t},\n\tCharEscape = {'\\\\' : '\\\\','\"' : '\"',\"'\" : \"'\",'n' : '\\n','r' : '\\r','t' : '\\t'},\n\tChar = ()\n\t{\n\t\tvar R = Taste();\n\t\tEat();\n\t\tif ('\\\\' == R)\n\t\t{\n\t\t\tR = CharEscape[Taste()];\n\t\t\tif (null == R) ErrorBadEscape([TasteEOL()]);\n\t\t\tEat();\n\t\t}\n\t\treturn R;\n\t},\n\tNumberOrChar = ()\n\t{\n\t\tif (\"'\" != Taste()) return Number();\n\t\tEat();\n\t\tvar R = Char().codeUnitAt(0);\n\t\tif (\"'\" != Taste()) ErrorUnclosed([\"'\",\"'\",TasteEOL()]);\n\t\tEat();\n\t\tWhite();\n\t\treturn R;\n\t},\n\tVarNameOrNumber = () => new RegExp(r\"[-\\d']\").hasMatch(Taste()) ? NumberOrChar() : VarName(),\n\tString = ()\n\t{\n\t\tvar R = '';\n\t\tif ('\"' != Taste()) ErrorStringExpect([TasteEOL()]);\n\t\tEat();\n\t\tfor (;'' != Taste() && '\"' != Taste();) R += Char();\n\t\tif ('\"' != Taste()) ErrorStringUnclose();\n\t\tEat();\n\t\tWhite();\n\t\treturn R;\n\t},\n\tVarNameOrString = () => '\"' == Taste() ? [0,String()] : [1,VarName()],\n\n\tMsgList = [()\n\t{\n\t\tvar R = [VarNameOrString()];\n\t\tfor (;'' != Taste();) R.add(VarNameOrString());\n\t\treturn R;\n\t}],\n\n\tBegin = () => ASTStack.add(CurrentAST.length),\n\tMachine =\n\t{\n\t\t'VAR' : ()\n\t\t{\n\t\t\tvar V,N;\n\t\t\tif (null != CurrentProc) ErrorDefineInProc();\n\t\t\tif ('' == Taste()) ErrorUnEOL();\n\t\t\tfor (;'' != (V = Word());)\n\t\t\t{\n\t\t\t\tif (Has(V,Var)) ErrorVarRedeclare([V]);\n\t\t\t\tif ('[' == Taste())\n\t\t\t\t{\n\t\t\t\t\tEat();\n\t\t\t\t\tWhite();\n\t\t\t\t\tN = Number();\n\t\t\t\t\tif (']' != Taste()) ErrorUnclosed(['[',']',TasteEOL()]);\n\t\t\t\t\tEat();\n\t\t\t\t\tWhite();\n\t\t\t\t\tVar[V] = [StackAt,N];\n\t\t\t\t\tStackAt += 4 + N;\n\t\t\t\t}\n\t\t\t\telse Var[V] = StackAt++;\n\t\t\t}\n\t\t},\n\n\t\t'SET' : [VarName,VarNameOrNumber],\n\n\t\t'INC' : [VarName,VarNameOrNumber],\n\t\t'DEC' : [VarName,VarNameOrNumber],\n\t\t'ADD' : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t'SUB' : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t'MUL' : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t'DIVMOD' : [VarNameOrNumber,VarNameOrNumber,VarName,VarName],\n\t\t'DIV' : [VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t'MOD' : [VarNameOrNumber,VarNameOrNumber,VarName],\n\n\t\t'CMP' : [VarNameOrNumber,VarNameOrNumber,VarName],\n\n\t\t'A2B' : [VarNameOrNumber,VarNameOrNumber,VarNameOrNumber,VarName],\n\t\t'B2A' : [VarNameOrNumber,VarName,VarName,VarName],\n\n\t\t'LSET' : [ListName,VarNameOrNumber,VarNameOrNumber],\n\t\t'LGET' : [ListName,VarNameOrNumber,VarName],\n\n\t\t'IFEQ' : [VarName,VarNameOrNumber,Begin],\n\t\t'IFNEQ' : [VarName,VarNameOrNumber,Begin],\n\t\t'WEQ' : [VarName,VarNameOrNumber,Begin],\n\t\t'WNEQ' : [VarName,VarNameOrNumber,Begin],\n\t\t'PROC' : ()\n\t\t{\n\t\t\tvar N,T;\n\t\t\tif (null != CurrentProc) ErrorProcNested();\n\t\t\tN = Word();\n\t\t\tif (Has(N,Proc)) ErrorProcUsed([N]);\n\t\t\tCurrentProcVar = [];\n\t\t\tfor (;'' != Taste();)\n\t\t\t{\n\t\t\t\tT = Word();\n\t\t\t\tif (CurrentProcVar.contains(T)) ErrorDupParam([T]);\n\t\t\t\tCurrentProcVar.add(T);\n\t\t\t}\n\t\t\tProc[N] = CurrentProc = [CurrentProcVar,CurrentAST = []];\n\t\t},\n\t\t'END' : [()\n\t\t{\n\t\t\tif (0 < ASTStack.length)\n\t\t\t\treturn ASTStack.removeLast();\n\t\t\tif (null != CurrentProc)\n\t\t\t{\n\t\t\t\tCurrentAST = AST;\n\t\t\t\tCurrentProc = null;\n\t\t\t}\n\t\t\telse ErrorEndNothing();\n\t\t}],\n\t\t'CALL' : [()\n\t\t{\n\t\t\tvar N = Word(),A = [];\n\t\t\tfor (;'' != Taste();) A.add(Word());\n\t\t\treturn [N,A];\n\t\t}],\n\n\t\t'READ' : [VarName],\n\t\t'MSG' : MsgList,\n\t\t'LN' : MsgList,\n\n\t\t'REM' : Discard,\n\n\t\t'DEBUG' : [Discard],\n\t\t'STOP' : [Discard]\n\t},\n\n\tOpGotoCell = (Q)\n\t{\n\t\tOutput += Q < StackAt ?\n\t\t\t'<' * (StackAt - Q) :\n\t\t\t'>' * (Q - StackAt);\n\t\tStackAt = Q;\n\t},\n\tOpAdd = (Q)\n\t{\n\t\tQ = Clamp(Q);\n\t\tOutput += 128 < Q ?\n\t\t\t'-' * (256 - Q) :\n\t\t\t'+' * Q;\n\t},\n\tOpSolvePreserve = (Q)\n\t{\n\t\tPreserveMax = max(Q,PreserveMax);\n\t\treturn Preserve - Q;\n\t},\n\tOpFly = (Q) => StackAt = OpSolvePreserve(Q),\n\tOpGotoPreserve = (Q) => OpGotoCell(OpSolvePreserve(Q)),\n\tOpGetPreserve = (Q) => Stack[OpSolvePreserve(Q)],\n\tOpSetPreserve = (Q,S) => Stack[OpSolvePreserve(Q)] = S,\n\tOpModifyPreserve = (Q,S)\n\t{\n\t\tOpGotoPreserve(Q);\n\t\tOpAdd(S - OpGetPreserve(Q));\n\t\tOpSetPreserve(Q,S);\n\t},\n\tOpClearPreserve = (Q,[J = false])\n\t{\n\t\tif (J || 0 < OpGetPreserve(Q))\n\t\t{\n\t\t\tOpGotoPreserve(Q);\n\t\t\tOutput += '[-]';\n\t\t\tOpSetPreserve(Q,0);\n\t\t}\n\t},\n\tOpMsgList = (Q)\n\t{\n\t\tvar T,F = 0;\n\t\tfor (;F < Q.length;++F)\n\t\t{\n\t\t\tT = Q.codeUnitAt(F);\n\t\t\tOpModifyPreserve(0,T);\n\t\t\tOutput += '.';\n\t\t}\n\t};\n\n\tvoid Generate(AST,CallArg,CallStack,CallStackMessage)\n\t{\n\t\tvar\n\t\tOpSolveVar = (Q) => Has(Q,CallArg) ? CallArg[Q] : Q,\n\t\tOpGoto = (Q,[S = 0])\n\t\t{\n\t\t\tif (IsNumber(Q))\n\t\t\t{\n\t\t\t\tif (Q < 0) OpGotoCell(-Q);\n\t\t\t\telse OpGotoPreserve(Q);\n\t\t\t}\n\t\t\telse if (IsNumber(Q = Var[OpSolveVar(Q)]))\n\t\t\t\tOpGotoCell(Q);\n\t\t\telse OpGotoCell(S + Q[0]);\n\t\t},\n\t\t_OpClear = (Q,J)\n\t\t{\n\t\t\tif (IsNumber(Q))\n\t\t\t\tOpClearPreserve(Q,J);\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpGoto(Q);\n\t\t\t\tOutput += '[-]';\n\t\t\t}\n\t\t},\n\t\tOpClear = (Q,[J = false])\n\t\t{\n\t\t\tif (IsArray(Q))\n\t\t\t\tQ.forEach((Q) => _OpClear(Q,J));\n\t\t\telse\n\t\t\t\t_OpClear(Q,J);\n\t\t},\n\t\tOpBegin = (Q,[S = 0])\n\t\t{\n\t\t\tOpGoto(Q,S);\n\t\t\tOutput += '[-';\n\t\t},\n\t\tOpEnd = (Q,[S = 0])\n\t\t{\n\t\t\tOpGoto(Q,S);\n\t\t\tOutput += ']';\n\t\t},\n\t\tOpMove = (Q,S,[I = 0])\n\t\t{\n\t\t\tOpBegin(Q,I);\n\t\t\tif (IsArray(S))\n\t\t\t\tS.forEach((V)\n\t\t\t\t{\n\t\t\t\t\tOpGoto(V);\n\t\t\t\t\tOutput += '+';\n\t\t\t\t});\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpGoto(S);\n\t\t\t\tOutput += '+';\n\t\t\t}\n\t\t\tOpEnd(Q,I);\n\t\t},\n\t\tOpMoveReverse = (Q,S,[I = 0])\n\t\t{\n\t\t\tOpBegin(Q,I);\n\t\t\tif (IsArray(S))\n\t\t\t\tS.forEach((V)\n\t\t\t\t{\n\t\t\t\t\tOpGoto(V);\n\t\t\t\t\tOutput += '-';\n\t\t\t\t});\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpGoto(S);\n\t\t\t\tOutput += '-';\n\t\t\t}\n\t\t\tOpEnd(Q,I);\n\t\t},\n\t\tOpCopy = (Q,S,T,[J = true])\n\t\t{\n\t\t\tif (J) OpClear(T);\n\t\t\tif (IsArray(S))\n\t\t\t{\n\t\t\t\tS = new List.from(S);\n\t\t\t\tS.add(T);\n\t\t\t}\n\t\t\telse S = [S,T];\n\t\t\tOpMove(Q,S);\n\t\t\tOpMove(T,Q);\n\t\t},\n\t\tOpPrepare = (Q,S,T)\n\t\t{\n\t\t\tOpClear(S);\n\t\t\tif (IsNumber(Q))\n\t\t\t{\n\t\t\t\tif (IsArray(S))\n\t\t\t\t{\n\t\t\t\t\tOpGoto(T);\n\t\t\t\t\tOpAdd(Q);\n\t\t\t\t\tOpMove(T,S);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tOpGoto(S);\n\t\t\t\t\tOpAdd(Q);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse OpCopy(Q,S,T);\n\t\t},\n\t\tOpPrepare01 = (Q,[W = 0,A = 1,T = 2])\n\t\t{\n\t\t\tOpPrepare(Q[0],W,T);\n\t\t\tOpPrepare(Q[1],A,T);\n\t\t},\n\t\tOpSet = (Q,S)\n\t\t{\n\t\t\tOpClear(Q);\n\t\t\tOpMove(S,Q);\n\t\t},\n\t\tOpDivMod = (Arg)\n\t\t{\n\t\t\tOpPrepare01(Arg,5,4,0);\n\t\t\tOpCopy(4,8,7);\n\t\t\tOpGoto(7);\n\t\t\tOutput += '+<-' +\n\t\t\t\t'[>>>[->-[>+>>]>[+[-<+>]>+>>]<<<<<]<<-]>' +\n\t\t\t\t'[->>[->>>+<<<]<]';\n\t\t\tOpFly(6);\n\t\t\tOpClear(8,true);\n\t\t\tOpClear(4,true);\n\t\t\tif (null == Arg[2]) OpClear(2,true);\n\t\t\telse OpSet(Arg[2],2);\n\t\t\tif (3 < Arg.length && null != Arg[3]) OpSet(Arg[3],3);\n\t\t\telse OpClear(3,true);\n\t\t},\n\t\tOpIFWhile = (Arg,[Not = false])\n\t\t{\n\t\t\tif (IsNumber(Arg[1]))\n\t\t\t{\n\t\t\t\tOpClear(0);\n\t\t\t\tOpCopy(Arg[0],0,1);\n\t\t\t\tOpGoto(0);\n\t\t\t\tOpAdd(-Arg[1]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOpPrepare01(Arg);\n\t\t\t\tOpMoveReverse(1,0);\n\t\t\t}\n\t\t\tif (Not)\n\t\t\t{\n\t\t\t\tOpGoto(1);\n\t\t\t\tOutput += '+>[[-]<-]<[>+<-<]';\n\t\t\t\tOpFly(2);\n\t\t\t}\n\t\t\tOpGoto(0);\n\t\t};\n\n\t\tAST.forEach((V)\n\t\t{\n\t\t\tvar Command = V[0],Arg = V[1],Line = V[2];\n\t\t\tswitch (Command)\n\t\t\t{\n\t\t\t\tcase 'SET' :\n\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\tOutput += '[-]';\n\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t\tOpAdd(Arg[1]);\n\t\t\t\t\telse\n\t\t\t\t\t\tOpCopy(Arg[1],Arg[0],0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'INC' :\n\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\t\tOpAdd(Arg[1]);\n\t\t\t\t\t}\n\t\t\t\t\telse if (OpSolveVar(Arg[0]) == OpSolveVar(Arg[1]))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpClear(0);\n\t\t\t\t\t\tOpMove(Arg[0],0);\n\t\t\t\t\t\tOpBegin(0);\n\t\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\t\tOutput += '++';\n\t\t\t\t\t\tOpEnd(0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tOpCopy(Arg[1],Arg[0],0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'DEC' :\n\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\t\tOpAdd(-Arg[1]);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tOpCopy(Arg[1],0,1);\n\t\t\t\t\t\tOpMoveReverse(0,Arg[0]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ADD' :\n\t\t\t\t\tOpPrepare01(Arg);\n\t\t\t\t\tOpMove(1,0);\n\t\t\t\t\tOpSet(Arg[2],0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SUB' :\n\t\t\t\t\tOpPrepare01(Arg);\n\t\t\t\t\tOpMoveReverse(1,0);\n\t\t\t\t\tOpSet(Arg[2],0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MUL' :\n\t\t\t\t\tOpPrepare01(Arg);\n\t\t\t\t\tOpBegin(0);\n\t\t\t\t\tOpCopy(1,2,3);\n\t\t\t\t\tOpEnd(0);\n\t\t\t\t\tOpClear(1,true);\n\t\t\t\t\tOpSet(Arg[2],2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'DIVMOD' :\n\t\t\t\tcase 'DIV' :\n\t\t\t\t\tOpDivMod(Arg);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MOD' :\n\t\t\t\t\tOpDivMod([Arg[0],Arg[1],null,Arg[2]]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'CMP' :\n\t\t\t\t\tvar X = 4,T0 = 3,T1 = 2;\n\t\t\t\t\tOpPrepare01(Arg,[T0,X],[T1,1 + X],0);\n\t\t\t\t\tOpMoveReverse(1 + X,X);\n\n\t\t\t\t\tOpGoto(1 + X);\n\t\t\t\t\tOutput += '+>[[-]';\n\t\t\t\t\tOpFly(X);\n\n\t\t\t\t\tOpGoto(T1 - 1);\n\t\t\t\t\tOutput += '+<[>-]>[';\n\t\t\t\t\tOpFly(T1 - 1);\n\t\t\t\t\tOpGoto(X);\n\t\t\t\t\tOutput += '+';\n\t\t\t\t\tOpGoto(T0);\n\t\t\t\t\tOutput += '[-]';\n\t\t\t\t\tOpGoto(T1 - 1);\n\t\t\t\t\tOutput += '->]<+';\n\t\t\t\t\tOpGoto(T0);\n\t\t\t\t\tOutput += '[';\n\t\t\t\t\tOpGoto(T1);\n\t\t\t\t\tOutput += '-[>-]>[';\n\t\t\t\t\tOpFly(T1 - 1);\n\t\t\t\t\tOpGoto(X);\n\t\t\t\t\tOutput += '+';\n\t\t\t\t\tOpGoto(T0);\n\t\t\t\t\tOutput += '[-]+';\n\t\t\t\t\tOpGoto(T1 - 1);\n\t\t\t\t\tOutput += '->]<+';\n\t\t\t\t\tOpGoto(T0);\n\t\t\t\t\tOutput += '-]';\n\n\t\t\t\t\tOpGoto(X);\n\t\t\t\t\tOutput += '[<-]<[>-<-<]';\n\t\t\t\t\tOpFly(2 + X);\n\n\t\t\t\t\tOpGoto(1 + X);\n\t\t\t\t\tOutput += ']<[-<]>';\n\n\t\t\t\t\tOpClear(3,true);\n\t\t\t\t\tOpClear(2,true);\n\t\t\t\t\tOpClear(1,true);\n\n\t\t\t\t\tOpSet(Arg[2],X);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'A2B' :\n\t\t\t\t\tvar\n\t\t\t\t\tA = Arg[0],\n\t\t\t\t\tB = Arg[1],\n\t\t\t\t\tC = Arg[2],\n\t\t\t\t\tR = Arg[3];\n\t\t\t\t\tif (IsNumber(A))\n\t\t\t\t\t{\n\t\t\t\t\t\tA = Clamp(10 * (A - 48));\n\t\t\t\t\t\tif (0 != A)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(1);\n\t\t\t\t\t\t\tOpAdd(A);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tOpCopy(A,2,0);\n\t\t\t\t\t\tOpGoto(2);\n\t\t\t\t\t\tOpAdd(-48);\n\t\t\t\t\t\tOpBegin(2);\n\t\t\t\t\t\tOpGoto(1);\n\t\t\t\t\t\tOpAdd(10);\n\t\t\t\t\t\tOpEnd(2);\n\t\t\t\t\t}\n\t\t\t\t\tif (IsNumber(B))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(1);\n\t\t\t\t\t\tOpAdd(B - 48);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tOpCopy(B,1,0);\n\t\t\t\t\t\tOpGoto(1);\n\t\t\t\t\t\tOpAdd(-48);\n\t\t\t\t\t}\n\t\t\t\t\tOpBegin(1);\n\t\t\t\t\tOpGoto(0);\n\t\t\t\t\tOpAdd(10);\n\t\t\t\t\tOpEnd(1);\n\t\t\t\t\tif (IsNumber(C))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(0);\n\t\t\t\t\t\tOpAdd(C - 48);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tOpCopy(C,0,1);\n\t\t\t\t\t\tOpGoto(0);\n\t\t\t\t\t\tOpAdd(-48);\n\t\t\t\t\t}\n\t\t\t\t\tOpSet(R,0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'B2A' :\n\t\t\t\t\tvar\n\t\t\t\t\tR = Arg[0],\n\t\t\t\t\tA = Arg[1],\n\t\t\t\t\tB = Arg[2],\n\t\t\t\t\tC = Arg[3];\n\t\t\t\t\tif (IsNumber(R))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpClear(A);\n\t\t\t\t\t\tOpAdd(R ~\/ 100);\n\t\t\t\t\t\tOpClear(B);\n\t\t\t\t\t\tOpAdd(R ~\/ 10 % 10);\n\t\t\t\t\t\tOpClear(C);\n\t\t\t\t\t\tOpAdd(R % 10);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tOpDivMod([R,10,B,C]);\n\t\t\t\t\t\tOpDivMod([B,10,A,B]);\n\t\t\t\t\t}\n\t\t\t\t\tOpGoto(0);\n\t\t\t\t\tOpAdd(48);\n\t\t\t\t\tOpMove(0,Arg.sublist(1));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LSET' :\n\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\t\tOpAdd(Arg[1]);\n\t\t\t\t\t\tOutput += '[->+>+<<]';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tOpCopy(Arg[1],[-1 - Var[Arg[0]][0],-2 - Var[Arg[0]][0]],Arg[0],false);\n\t\t\t\t\tif (IsNumber(Arg[2]))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(Arg[0],3);\n\t\t\t\t\t\tOpAdd(Arg[2]);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tOpCopy(Arg[2],-3 - Var[Arg[0]][0],Arg[0],false);\n\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\tOutput += '>[>>>[-<<<<+>>>>]<[->+<]<[->+<]<[->+<]>-]' +\n\t\t\t\t\t\t'>>>[-]<[->+<]<' +\n\t\t\t\t\t\t'[[-<+>]<<<[->>>>+<<<<]>>-]<<';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LGET' :\n\t\t\t\t\tif (IsNumber(Arg[1]))\n\t\t\t\t\t{\n\t\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\t\tOpAdd(Arg[1]);\n\t\t\t\t\t\tOutput += '[->+>+<<]';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tOpCopy(Arg[1],[-1 - Var[Arg[0]][0],-2 - Var[Arg[0]][0]],Arg[0],false);\n\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\tOutput += '>[>>>[-<<<<+>>>>]<<[->+<]<[->+<]>-]' +\n\t\t\t\t\t\t'>>>[-<+<<+>>>]<<<[->>>+<<<]>' +\n\t\t\t\t\t\t'[[-<+>]>[-<+>]<<<<[->>>>+<<<<]>>-]<<';\n\t\t\t\t\tOpClear(Arg[2]);\n\t\t\t\t\tOpMove(Arg[0],Arg[2],3);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'IFEQ' :\n\t\t\t\t\tOpIFWhile(Arg,true);\n\t\t\t\t\tOutput += '[';\n\t\t\t\t\tOpClear(0,true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'IFNEQ' :\n\t\t\t\t\tOpIFWhile(Arg);\n\t\t\t\t\tOutput += '[';\n\t\t\t\t\tOpClear(0,true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'WEQ' :\n\t\t\t\t\tOpIFWhile(Arg,true);\n\t\t\t\t\tOutput += '[';\n\t\t\t\t\tOpClear(0,true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'WNEQ' :\n\t\t\t\t\tOpIFWhile(Arg);\n\t\t\t\t\tOutput += '[';\n\t\t\t\t\tOpClear(0,true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'END' :\n\t\t\t\t\tif (null != Arg[0])\n\t\t\t\t\t{\n\t\t\t\t\t\tCommand = AST[Arg[0]][0];\n\t\t\t\t\t\tArg = AST[Arg[0]][1];\n\t\t\t\t\t\tif ('WEQ' == Command)\n\t\t\t\t\t\t\tOpIFWhile(Arg,true);\n\t\t\t\t\t\telse if ('WNEQ' == Command)\n\t\t\t\t\t\t\tOpIFWhile(Arg);\n\t\t\t\t\t\telse OpClear(0);\n\t\t\t\t\t\tOpGoto(0);\n\t\t\t\t\t\tOutput += ']';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'CALL' :\n\t\t\t\t\tArg = Arg[0];\n\t\t\t\t\tvar\n\t\t\t\t\tT = CallStackMessage + '\n\\tat line:${Line} ${Arg[0]}',\n\t\t\t\t\tF = Proc[Arg[0]],\n\t\t\t\t\tN = {},G = 0;\n\t\t\t\t\tif (!Has(Arg[0],Proc)) ErrorNoProc([Arg[0],T]);\n\t\t\t\t\tif (F[0].length != Arg[1].length) ErrorProcLength([Arg[0],F[0].length,Arg[1].length,T]);\n\t\t\t\t\tif (CallStack.contains(Arg[0])) ErrorRecursive([T]);\n\t\t\t\t\tCallStack.add(Arg[0]);\n\t\t\t\t\tfor (;G < F[0].length;++G) N[F[0][G]] = OpSolveVar(Arg[1][G]);\n\t\t\t\t\tGenerate(F[1],N,CallStack,T);\n\t\t\t\t\tCallStack.removeLast();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'READ' :\n\t\t\t\t\tOpGoto(Arg[0]);\n\t\t\t\t\tOutput += ',';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MSG' :\n\t\t\t\tcase 'LN' :\n\t\t\t\t\tArg[0].forEach((V)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (0 < V[0])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOpGoto(V[1]);\n\t\t\t\t\t\t\tOutput += '.';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse OpMsgList(V[1]);\n\t\t\t\t\t});\n\t\t\t\t\tif ('LN' == Command) OpMsgList('\\n');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'DEBUG' :\n\t\t\t\t\tOutput += '_';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'STOP' :\n\t\t\t\t\tOutput += '!';\n\t\t\t}\n\t\t});\n\t}\n\n\tCode.split('\\n').forEach((V)\n\t{\n\t\t++Line;\n\t\tCode = V;\n\t\tCodeAt = 0;\n\t\tWhite();\n\t\tif ('' != Taste())\n\t\t{\n\t\t\tV = Word();\n\t\t\tif (!Has(V,Machine)) ErrorCommand([V]);\n\t\t\tif (IsArray(Machine[V]))\n\t\t\t\tCurrentAST.add([V,(Machine[V] as List<Function>).map((C) => C()).toList(),Line]);\n\t\t\telse (Machine[V] as Function)();\n\t\t\tif ('' != Taste()) ErrorCommandEnd([Taste()]);\n\t\t}\n\t});\n\tif (0 < ASTStack.length) ErrorEndUnclose();\n\n\tStackAt = 0;\n\tGenerate(AST,{},[],'');\n\treturn Output.substring(min(Output.length,Preserve - PreserveMax));\n};","lang_id":13,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:23:42","updated_at":"2023-01-22 07:39:07"}]}