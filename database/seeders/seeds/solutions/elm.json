{"50654ddff44f800200000004":[{"id":79873,"user_id":168,"body":"module multiplyBugFix exposing (..)\n\nmultiply : Int -> Int -> Int\nmultiply = (*)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79874,"user_id":676,"body":"module multiplyBugFix exposing (..)\n\nmultiply : Int -> Int -> Int\nmultiply x y = x * y","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79875,"user_id":null,"body":"module multiplyBugFix exposing (..)\n\nmultiply : Int -> Int -> Int\nmultiply x y = (*) x y","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79876,"user_id":null,"body":"module multiplyBugFix exposing (..)\n\nmultiply : Int -> Int -> Int\nmultiply a b = if b == 0 then 0 else a + multiply a (b - 1)\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79877,"user_id":null,"body":"module multiplyBugFix exposing (..)\n\n\n{-| multiply the given operands.\n-}\nmultiply : Int -> Int -> Int\nmultiply x y = x * y","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79878,"user_id":null,"body":"module multiplyBugFix exposing (..)\n\nmultiply : number -> number -> number\nmultiply x y = x * y","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79879,"user_id":null,"body":"module multiplyBugFix exposing (..)\n\nmultiply : Int -> Int -> Int\nmultiply a b= a*b","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79880,"user_id":null,"body":"module multiplyBugFix exposing (..)\n\nmultiply : Int -> Int -> Int\nmultiply s a = s*a","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"515f51d438015969f7000013":[{"id":79881,"user_id":604,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n = \n    List.range 1 n\n        |> List.map (\\x -> List.repeat x 1)\n    \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79882,"user_id":null,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n = \n  List.map (\\a -> List.repeat a 1) (List.range 1 n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79883,"user_id":53,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n = \n  List.map (\\i -> (List.repeat i 1)) (List.range 1 n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79884,"user_id":null,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n = \n  case n of\n    0 -> []\n    _ ->  pyramid (n - 1) ++ [list n]\n\nlist x = \n  case x of\n    0 -> []\n    _ -> List.repeat x 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79885,"user_id":null,"body":"module Kata exposing (pyramid)\nimport Array exposing (initialize, toList)\n\npyramid : Int -> List (List Int)\npyramid n =\n  let\n    arrayAt index = initialize (index + 1) (always 1) |> toList\n  in\n    initialize n arrayAt |> toList","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79886,"user_id":null,"body":"module Kata exposing (pyramid)\n\n\n\n\npyramid : Int -> List (List Int)\npyramid n = helper n |> List.reverse\n\n\nhelper: Int -> List (List Int)\nhelper n = \n  if n == 0 then \n    []\n  else\n     (List.repeat n 1) :: (helper (n - 1))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79887,"user_id":null,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n = \n  let\n    result = []\n  in \n    List.range 1 n |> List.map (\\item -> List.concat [result, List.repeat item 1])","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79888,"user_id":null,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n =\n    case n of\n        0 ->\n            []\n\n        n_ ->\n            pyramid (n_ - 1) ++ [ List.repeat n 1 ]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79889,"user_id":null,"body":"module Kata exposing (pyramid)\n\npyramid : Int -> List (List Int)\npyramid n = \n  case n of\n    0 -> []\n    _ -> List.append (pyramid (n-1)) [List.repeat n 1]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79890,"user_id":null,"body":"module Kata exposing (..)\n\npyramid : Int -> List (List Int)\npyramid n =\n    iota n\n        |> List.map createListOfLen\n    \n    \niota : Int -> List (Int)\niota n =\n    iotaHelper (n) []\n    \n    \niotaHelper n l =\n    case n of\n        0 -> l\n        _ -> iotaHelper (n-1) (n :: l)\n\ncreateListOfLen n =\n    insertNMore n []\n\n-- returns list with n 1s\n-- E.g. insertNMore 3 [] == [1 1 1]\ninsertNMore : Int -> List Int -> List Int\ninsertNMore n l =\n    case n of\n        0 ->\n            l\n        _ ->\n            insertNMore (n-1) <| 1 :: l","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"523b4ff7adca849afe000035":[{"id":79891,"user_id":645,"body":"module Greet exposing (greet)\n\ngreet : String\ngreet = \"hello world!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79892,"user_id":null,"body":"module Greet exposing (greet)\n\nimport Array\n\ngreet =\n  let\n    keys =\n      Array.fromList [ 'h', 'e', 'l', 'o', ' ', 'w', 'r', 'd', '!']\n  in\n    [ 0, 1, 2, 2, 3, 4, 5, 3, 6, 2, 7, 8 ]\n    |> List.filterMap (\\i -> Array.get i keys)\n    |> String.fromList","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79893,"user_id":null,"body":"module Greet exposing (greet)\n\n-- Write a function \"greet\" that returns \"hello world!\"\n\n\n\n    \ngreet = \n    \"hello world!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79894,"user_id":null,"body":"module Greet exposing (greet)\n\ngreet =\n  \"hello world!\"\n-- Write a function \"greet\" that returns \"hello world!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79895,"user_id":null,"body":"module Greet exposing (greet)\n\n-- Write a function \"greet\" that returns \"hello world!\"\ngreet : String\ngreet =\n  \"hello world!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79896,"user_id":null,"body":"module Greet exposing (greet)\n\n-- Write a function \"greet\" that returns \"hello world!\" \n-- Annotations are optional\ngreet = \"hello world!\"\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79897,"user_id":527,"body":"module Greet exposing (greet)\n\ngreet = \"hello world!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"53da3dbb4a5168369a0000fe":[{"id":79898,"user_id":527,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n = case modBy 2 n of\n  0 -> \"Even\"\n  _ -> \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79899,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd input =\n    case modBy 2 input of\n        0 ->\n            \"Even\"\n\n        _ ->\n            \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79900,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n =\n  if (==) (Basics.modBy 2 n) 0 then\n    \"Even\"\n  else\n    \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79901,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n = if modBy 2 n > 0 then \"Odd\" else \"Even\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79902,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n = \n  let\n    mod2 = modBy 2\n    isEven x = mod2 x == 0\n  in \n    if isEven n then \"Even\" else \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79903,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\n\n\neven_or_odd : Int -> String\neven_or_odd =\n  modBy 2\n    >> (\\w ->\n          if w == 1 then\n            \"Odd\"\n            \n          else\n            \"Even\"\n       )","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79904,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n = \n  let \n    mod2 = modBy 2\n    isEven n1 = mod2 n1 == 0\n  in\n    if isEven n then \"Even\" else \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79905,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n = \n  if List.singleton n |> List.map (remainderBy 2) |> List.member 0 then\n    \"Even\"\n  else\n    \"Odd\" ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79906,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\nimport Basics exposing (..)\n\neven_or_odd : Int -> String\neven_or_odd n = \n    if  modBy 2  n == 0 then \"Even\" else \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79907,"user_id":null,"body":"module EvenOrOdd exposing (even_or_odd)\n\neven_or_odd : Int -> String\neven_or_odd n = if (modBy 2 (abs n) == 0) then \"Even\" else \"Odd\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"541c8630095125aba6000c00":[{"id":79908,"user_id":527,"body":"module Kata exposing (digital_root)\n\ndigital_root : Int -> Int\ndigital_root n = remainderBy 9 (n - 1) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79909,"user_id":53,"body":"module Kata exposing (digital_root)\n\ndigital_root : Int -> Int\ndigital_root n = 1 + remainderBy 9 (n - 1) ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79910,"user_id":null,"body":"module Kata exposing (digital_root)\n\n\ndigital_root : Int -> Int\ndigital_root input =\n    remainderBy 9 (input - 1) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79911,"user_id":null,"body":"module Kata exposing (digital_root)\n\nconvertToInt str = String.toInt str |> Maybe.withDefault 0\n\ndigital_root : Int -> Int\ndigital_root input = \n    if (String.fromInt input |> String.length) == 1 then \n      input \n    else \n      String.fromInt input |> String.split \"\" |> List.map convertToInt |> List.sum |> digital_root  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79912,"user_id":null,"body":"module Kata exposing (digital_root)\n\n\ndigital_root : Int -> Int\ndigital_root input = \n  let\n    mod = modBy 10 input\n    div = input \/\/ 10\n    newInput = mod + div\n  in\n  if newInput < 10 then\n    newInput\n  else\n    digital_root newInput","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79913,"user_id":492,"body":"module Kata exposing (digital_root)\n\ndigital_root : Int -> Int\ndigital_root n = if n == 0 then 0 else modBy 9 (n - 1) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79914,"user_id":null,"body":"module Kata exposing (digital_root)\n\n\ndigital_root : Int -> Int\ndigital_root input =\n  let\n    sum =\n      input\n        |> digits\n        |> List.sum\n  in\n  if sum > 9 then\n    digital_root sum\n  else\n    sum\n\n\ndigits : Int -> List Int\ndigits =\n  String.fromInt\n    >> String.split \"\"\n    >> List.filterMap String.toInt","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79915,"user_id":null,"body":"module Kata exposing (digital_root)\n\n\ndigital_root : Int -> Int\ndigital_root input = \n    if input < 10 then\n        input\n    else\n        input\n            |> String.fromInt\n            |> String.split \"\"\n            |> List.map (String.toInt >> Maybe.withDefault 0)\n            |> List.sum\n            |> digital_root","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79916,"user_id":null,"body":"module Kata exposing (digital_root)\n\n\ndigital_root : Int -> Int\ndigital_root input = \n  if input < 10 then\n    input\n  else\n    digital_root (modBy 10 input + digital_root (input \/\/ 10))\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79917,"user_id":null,"body":"module Kata exposing (digital_root)\n\n\ndigital_root : Int -> Int\ndigital_root input =\n  let\n    res = input\n      |> String.fromInt\n      |> String.foldl (\\x y -> Maybe.withDefault 0 (String.toInt (String.fromChar x)) + y) 0\n  in\n    if res < 10 then res else digital_root res","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"542f0c36d002f8cd8a0005e5":[{"id":79918,"user_id":null,"body":"module WaitingRoom exposing (lastChair)\n\nlastChair : Int -> Int\n-- user code here ..\nlastChair n = n - 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79919,"user_id":53,"body":"module WaitingRoom exposing (lastChair)\n\nlastChair : Int -> Int\nlastChair n = n - 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"546e2562b03326a88e000020":[{"id":79920,"user_id":604,"body":"module SquareDigit exposing (square_digits)\n\nimport Maybe exposing (map, withDefault)\nimport String exposing (concat, fromChar, fromInt, toInt, toList)\n\n\ntoSquareString : Maybe Int -> Maybe String\ntoSquareString =\n    map (\n -> n ^ 2) >> map fromInt\n\n\nsquare_digits : Int -> Int\nsquare_digits =\n    fromInt\n        -- make list of digital characters\n        >> toList\n        -- map each digit_char -> integer -> square string equivalent\n        >> List.filterMap (fromChar >> toInt >> toSquareString)\n        -- join squared strings\n        >> concat\n        -- convert back to number\n        >> toInt\n        >> withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79921,"user_id":null,"body":"module SquareDigit exposing (square_digits)\nimport String exposing (fromInt, toInt, split, join)\n\nsquare_digits : Int -> Int\nsquare_digits x =\n  fromInt x\n  |> split \"\"\n  |> List.map (\n -> fromInt ((Maybe.withDefault 0 (toInt n)) ^ 2))\n  |> join \"\"\n  |> toInt\n  |> Maybe.withDefault 0\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79922,"user_id":null,"body":"module SquareDigit exposing (square_digits)\n\nsquare_digits : Int -> Int\nsquare_digits=\n  String.fromInt >>\n  String.split \"\" >>\n  List.map (\n    String.toInt >>\n    Maybe.withDefault 0 >>\n    (\\x -> x*x) >>\n    String.fromInt\n  ) >>\n  String.join \"\" >>\n  String.toInt >>\n  Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79923,"user_id":604,"body":"module SquareDigit exposing (square_digits)\n\nsquare_digits : Int -> Int\nsquare_digits n = \n  let \n    digitList = String.fromInt n |> String.split \"\"\n    digitToSquareString digit = \n      digit \n        |> String.toInt \n        |> Maybe.withDefault 0\n        |> (\\x -> x ^ 2)\n        |> String.fromInt \n    dSquareStringList =\n      List.map (\\x -> digitToSquareString x)\n    squareString = String.join \"\" (dSquareStringList digitList)\n  in\n  Maybe.withDefault 0 (String.toInt squareString)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79924,"user_id":604,"body":"module SquareDigit exposing (square_digits)\n\nsquare_digits : Int -> Int\nsquare_digits n = \n  let \n    digits = String.fromInt n |> String.split \"\"\n    digit_s d = Maybe.withDefault 0 (String.toInt d)  \n    digitsSquares = List.map (\\x -> (digit_s x) ^ 2) digits\n    digitsSqStrings = List.map (\\x -> (String.fromInt) x) digitsSquares\n    squareString = String.join \"\" digitsSqStrings\n  in\n  Maybe.withDefault 0 (String.toInt squareString)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79925,"user_id":null,"body":"module SquareDigit exposing (square_digits)\n\nflip : (a -> b -> c) -> b -> a -> c\nflip f b a =\n  f a b\n\nsquare_digits : Int -> Int\nsquare_digits = \n    String.fromInt\n      >> String.toList\n      >> List.filterMap (String.fromChar >> String.toInt >> Maybe.map (flip (^) 2) >> Maybe.map String.fromInt)\n      >> String.concat\n      >> String.toInt\n      >> Maybe.withDefault 0 \n    \n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79926,"user_id":null,"body":"module SquareDigit exposing (square_digits)\n\nsquare_digits : Int -> Int\nsquare_digits n = \n  let \n    m2 = (modBy 10 n)^2\n  in \n  if n == 0 then\n    0\n  else if m2 > 10 then\n    (square_digits (n \/\/ 10)) * 100 + m2\n  else \n    (square_digits (n \/\/ 10)) * 10 + m2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79927,"user_id":null,"body":"module SquareDigit exposing (square_digits)\n\nsquare_digits : Int -> Int\nsquare_digits input =\n  String.fromInt input\n    |> String.split \"\"\n    |> List.map (String.toInt >> Maybe.withDefault 0 >> (\\a -> a ^ 2) >> String.fromInt)\n    |> String.concat\n    |> String.toInt\n    |> Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79928,"user_id":null,"body":"module SquareDigit exposing (square_digits)\n\nsquare_digits : Int -> Int\nsquare_digits = Maybe.withDefault 0 << String.toInt << listToString << squareList << List.reverse << intToList\n\nintToList : Int -> List Int\nintToList a = \n  if a < 10 then\n    List.singleton a\n  else\n    modBy 10 a :: intToList ( a \/\/ 10 )\n    \nsquareList : List Int -> List Int\nsquareList = List.map <| \\x -> x*x\n\nlistToString : List Int -> String\nlistToString = String.concat << List.map String.fromInt  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79929,"user_id":null,"body":"module SquareDigit exposing (square_digits)\n\nconvertToInt  str = String.toInt str |> Maybe.withDefault 0\nsquare v = v ^2\n\nsquare_digits : Int -> Int\nsquare_digits = String.fromInt >> String.split \"\" >> List.map (convertToInt >> square >> String.fromInt) >> String.join \"\" >> convertToInt","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54b42f9314d9229fd6000d9c":[{"id":79930,"user_id":null,"body":"module Main exposing (duplicate_encode)\n\nduplicate_encode : String -> String\nduplicate_encode word =\n    let\n        lowercase =\n            String.toLower word\n\n        mapFn c =\n            if List.length (String.indexes (String.fromChar c) lowercase) == 1 then\n                '('\n\n            else\n                ')'\n    in\n    String.map mapFn lowercase","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79931,"user_id":null,"body":"module Main exposing (duplicate_encode)\n\nduplicate_encode : String -> String\nduplicate_encode word_ =\n  let\n    word = String.toLower word_\n  in\n  String.foldl\n    (\\c acc ->\n      case String.indexes (String.fromChar c) word of\n        [_] -> acc ++ \"(\"\n        _ -> acc ++ \")\"\n    )\n    \"\"\n    word","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79932,"user_id":null,"body":"module Main exposing (duplicate_encode)\n\nimport String as S\n\nduplicate_encode : String -> String\nduplicate_encode word = \n  let\n    w = S.toLower word\n  in\n  S.map (\\x -> if (S.length <| S.filter ((==)x) w) > 1 then ')' else '(') w","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79933,"user_id":604,"body":"module Main exposing (duplicate_encode)\n\n\nisDuplicate : Char -> String -> Bool -> Bool\nisDuplicate xs word_ foundAlready =\n    case ( String.uncons word_, foundAlready ) of\n        ( Nothing, _ ) ->\n            False\n\n        ( Just ( first, rest ), _ ) ->\n            let \n                foundNow = Char.toLower first == xs\n            in \n                if foundNow && foundAlready \n                    then True\n                    else isDuplicate xs rest (foundNow || foundAlready)\n                  \n\nduplicate_encode : String -> String\nduplicate_encode word =\n  word\n      |> String.toList\n      |> List.map (\\tok -> \n          if isDuplicate (Char.toLower tok) word False\n              then \")\" \n              else \"(\"\n      )\n      |> String.concat\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79934,"user_id":604,"body":"module Main exposing (duplicate_encode)\n\nduplicate_encode : String -> String\nduplicate_encode word =\n    let\n        wordchars =\n            word |> String.toLower |> String.toList\n\n        count xs =\n          List.filter (\\ys -> xs == ys) >> List.length\n    in\n    wordchars\n        |> List.map (\\tok -> \n          if (count tok wordchars ) == 1 then \"(\" \n            else \")\"\n        )\n        |> String.concat\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79935,"user_id":null,"body":"module Main exposing (duplicate_encode)\nimport Dict exposing (Dict)\n\nletterFreq : String -> Dict Char Int\nletterFreq word =\n    word\n    |> String.foldl (\\c acc ->\n        Dict.insert c ((Maybe.withDefault 0 (Dict.get c acc)) + 1) acc)\n        Dict.empty\n        \n\nduplicate_encode : String -> String\nduplicate_encode word =\n    let freqs = word |> String.toLower |> letterFreq\n    in\n    word\n    |> String.toLower\n    |> String.map (\\c ->\n        Dict.get c freqs\n        |> Maybe.withDefault 1\n        |> \\x -> case x of\n            1 -> '('\n            _ -> ')')\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79936,"user_id":null,"body":"module Main exposing (duplicate_encode)\n\nduplicate_encode : String -> String\nduplicate_encode word =\n  let\n    lowercase = String.toLower word\n    lowercaseList = String.split \"\" lowercase\n  in\n    List.map (\\letter -> if List.length ( String.indexes letter lowercase ) > 1 then \")\" else \"(\" ) lowercaseList\n      |> String.join \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79937,"user_id":604,"body":"module Main exposing (duplicate_encode)\nimport List.Extra exposing (count)\n\nduplicate_encode : String -> String\nduplicate_encode word =\n  let \n    wordchars = word |> String.toList |> List.map(\\c -> Char.toLower c) \n    \n    count xs lst =\n        case lst of \n          [] -> \n            0\n          head :: rest -> \n            if head == xs then 1 + count xs rest\n            else count xs rest \n    in\n    wordchars\n        |> List.map (\\tok -> \n          if (count tok wordchars ) == 1 then \"(\" \n            else \")\"\n        )\n        |> String.concat\n        \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79938,"user_id":604,"body":"module Main exposing (duplicate_encode)\n\nduplicate_encode : String -> String\nduplicate_encode word =\n    let\n        wordchars =\n            word |> String.toLower |> String.toList\n\n        count xs list =\n            list\n                |> List.filter (\\ys -> xs == ys)\n                |> List.length\n    in\n    wordchars\n        |> List.map\n            (\\tok ->\n                if count tok wordchars == 1 then\n                    \"(\"\n\n                else\n                    \")\"\n            )\n        |> String.concat\n    \n\nfreq xs list =\n  list \n      |> List.filter (\\ys -> xs == ys)\n      |> List.length\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79939,"user_id":null,"body":"module Main exposing (duplicate_encode)\n\nimport Dict exposing (Dict)\n\nduplicate_encode : String -> String\nduplicate_encode word =\n  let\n    wordLower = String.toLower word\n    \n    incrementCharCount maybeNumber = Just (Maybe.withDefault 0 maybeNumber + 1)\n    \n    charCounts = String.foldl (\\c -> Dict.update c incrementCharCount) Dict.empty wordLower\n  in\n  String.foldr (\\c -> String.cons (if (Dict.get c charCounts |> Maybe.withDefault 0) == 1 then '(' else ')')) \"\" wordLower\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54b724efac3d5402db00065e":[{"id":79940,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport MorseCodes\nimport Array\nimport Dict\n  \ndecode : String -> String\ndecode code =\n  String.split \" \" code\n    |> List.map (\\ el -> Dict.get el MorseCodes.get |> Maybe.withDefault \" \")\n    |> String.join \"\"\n    |> String.words\n    |> String.join \" \"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79941,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport Dict\nimport MorseCodes\n\nwordSeparator : String\nwordSeparator =\n  \"   \"\n  \ncharacterSeparator : String\ncharacterSeparator =\n  \" \"\n  \ndecode : String -> String\ndecode code =\n  String.trim code\n    |> String.split wordSeparator\n    |> List.map processWord\n    |> String.join \" \"\n  \nprocessWord : String -> String\nprocessWord word =\n  String.split characterSeparator word\n    |> List.map processCharacter\n    |> String.join \"\"\n    \nprocessCharacter : String -> String\nprocessCharacter char =\n  Dict.get char (MorseCodes.get)\n    |> Maybe.withDefault \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79942,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport MorseCodes\nimport Dict\n\ndecode : String -> String\ndecode code =  \n  let\n    getWord = (\\word -> String.split \" \" word)\n    getChars = (\\chars -> List.map parseChar chars)\n    parseChar = (\\char -> Dict.get char MorseCodes.get |> Maybe.withDefault \"\")\n  in\n  code\n    |> String.trim\n    |> String.split \"   \" \n    |> List.map (getWord >> getChars >> String.join \"\")\n    |> String.join \" \"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79943,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport MorseCodes\n\nimport Dict exposing (Dict)\n\n\ndecode : String -> String\ndecode code =\n    code\n        |> String.split \" \"\n        |> List.map (\\key -> Maybe.withDefault \" \" (Dict.get key MorseCodes.get))\n        |> String.join \"\"\n        |> String.replace \"  \" \" \"\n        |> String.trim","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79944,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport MorseCodes\nimport Dict\n\ndecode : String -> String\ndecode code =\n  String.split \" \" code\n    |> List.map (\\x -> Dict.get(x) MorseCodes.get)  -- Convert from morse code to letters\n    |> List.map (\\y -> Maybe.withDefault \" \" y)     -- Get values out of Maybe Strings\n    |> String.concat                                \n    |> String.words                                 -- The result might have multiple spaces so we need to trim them\n    |> String.join \" \"                              -- The final string with only one space separating the words","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79945,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport Dict exposing (Dict)\nimport MorseCodes\n\ndecode : String -> String\ndecode code =\n  let mCodes = (MorseCodes.get)\n      getCode l = Dict.get l mCodes\n      isFull s = not (String.isEmpty s)\n  in\n    String.split \"   \" code\n    |> List.map (String.split \" \")\n    |> List.map (List.map (String.trim))\n    |> List.map (List.filter (isFull))\n    |> List.map (List.map getCode)\n    |> List.map (List.map (Maybe.withDefault \"0\"))\n    |> List.map (String.concat)\n    |> String.join \" \"\n    |> String.trim","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79946,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport MorseCodes\nimport Dict\n\ndecode : String -> String\ndecode code =\n  code \n    |> String.trim\n    |> String.split \"   \"\n    |> List.map decodeWord\n    |> String.join \" \"\n    \ndecodeWord : String -> String\ndecodeWord code =\n  code\n    |> String.split \" \"\n    |> List.map decodeLetter\n    |> String.join \"\"\n    \ndecodeLetter : String -> String\ndecodeLetter code =\n  Dict.get code MorseCodes.get |> Maybe.withDefault \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79947,"user_id":null,"body":"module MorseCode exposing (decode)\nimport MorseCodes\nimport Dict\n\ndecode : String -> String\ndecode code =\n    let\n        words = String.split \"   \" (String.trim code)\n        letters = List.map (String.split \" \") words\n    in\n    String.join \" \" (List.map (codeHelp MorseCodes.get) letters)\n    \ncodeHelp dict letters =\n    List.foldl (\\c word -> word ++ Maybe.withDefault \"\" (Dict.get c dict)) \"\" letters","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79948,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport Dict\nimport MorseCodes\n\ndecode : String -> String\ndecode code =\n  String.trim code\n    |> String.split \"   \"\n    |> List.map decodeWord\n    |> String.join \" \"\n\n  \ndecodeWord : String -> String\ndecodeWord str =\n  String.split \" \" str \n    |> List.map decodeChar\n    |> String.join \"\"\n    \n    \ndecodeChar : String -> String\ndecodeChar str =\n  Dict.get str MorseCodes.get\n    |> Maybe.withDefault \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79949,"user_id":null,"body":"module MorseCode exposing (decode)\n\nimport MorseCodes\nimport Dict exposing (Dict)\n\nsplitToChars : String -> List (List String)\nsplitToChars code =\n  List.map (\\word -> String.split \" \" word) (String.split \"   \" code)\n\nmorseListToString : List String -> String\nmorseListToString list =\n  String.join \"\" (List.map (\\char -> Maybe.withDefault \"\" (Dict.get char MorseCodes.get)) list)\n\ndecode : String -> String\ndecode code =\n  code\n    |> splitToChars\n    |> List.map (\\word -> morseListToString word)\n    |> String.join \" \"\n    |> String.trim\n  \n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54d496788776e49e6b00052f":[{"id":79950,"user_id":53,"body":"module Kata exposing (sum_of_divided)\nimport List.Extra\n\nprimeFactorsWalk : Int -> Int -> List Int -> List Int\nprimeFactorsWalk i n acc =\n  if i > n \/\/ i then if n > 1 then (n :: acc) else acc\n  else if modBy i n == 0 then primeFactorsWalk i (n \/\/ i) (i :: acc)\n  else primeFactorsWalk (i + 1) n acc\n\nprimeFactors : Int -> List Int\nprimeFactors n = primeFactorsWalk 2 n []\n    \nsum_of_divided : List Int -> List (Int, Int)\nsum_of_divided arr =\n    let xs = List.concatMap primeFactors (List.map abs arr) |> List.Extra.unique |> List.sort in\n    List.map (\\p -> (p, List.sum(List.filter(\\x -> modBy p x == 0) arr))) xs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79951,"user_id":492,"body":"module Kata exposing (sum_of_divided)\nimport List.Extra\n\nprimeFacts n =\n    let\n        go p num factors =\n            if p * p > num then\n                List.reverse factors ++ [ num ]\n            else if modBy p num == 0 then\n                go p (floor (toFloat(num) \/ toFloat(p))) (p :: factors)\n            else\n                go (p + 1 + modBy 2 p) num factors\n    in if n <= 1 then [] else go 2 n []\n    \nsum_of_divided : List Int -> List (Int, Int)\nsum_of_divided arr =\n    let\n        a = List.map abs arr\n        b = List.concatMap primeFacts a |> List.Extra.unique |> List.sort\n    in List.map (\\ p -> (p, List.sum(List.filter(\\ x -> modBy p x == 0) arr))) b","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79952,"user_id":492,"body":"module Kata exposing (sum_of_divided)\nimport List.Extra\n\nprimeFacts n =\n    let\n        go p num factors =\n            if p * p > num then\n                List.reverse factors ++ [ num ]\n            else if modBy p num == 0 then\n                go p (floor (toFloat(num) \/ toFloat(p))) (p :: factors)\n            else\n                go (p + 1 + modBy 2 p) num factors\n    in if n <= 1 then [] else go 2 n []\n    \nsum_of_divided : List Int -> List (Int, Int)\nsum_of_divided arr =\n    let\n        a = List.map abs arr\n        b = List.concatMap primeFacts a |> List.Extra.unique |> List.sort\n    in List.map (\\ p -> (p, List.sum(List.filter(\\ x -> modBy p x == 0) arr))) b","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54d512e62a5e54c96200019e":[{"id":79953,"user_id":null,"body":"module Kata exposing (primeFactors, factorize)\n\nimport Dict exposing (Dict)\n\nprimeFactors : Int -> String    \nprimeFactors n = Dict.foldl factorToString \"\" (factorize Dict.empty 2 n)\n\nfactorize : Dict Int Int -> Int -> Int -> Dict Int Int\nfactorize factors p n =\n  case n of\n    1 ->\n      factors\n    _ ->\n      let\n        r = modBy p n\n        n1 = n \/\/ p\n      in\n        if r == 0 then\n          factorize (Dict.update p updateFactor factors) p n1\n        else\n          factorize factors (p + 1) n\n          \nupdateFactor : Maybe Int -> Maybe Int\nupdateFactor p =\n  case p of\n    Nothing ->\n      Just 1\n    Just v ->\n      Just (v + 1)\n  \nfactorToString : Int -> Int -> String -> String\nfactorToString p k factorString =\n  case k of \n    1 -> \n      factorString ++ \"(\" ++ String.fromInt p ++ \")\"\n    _ ->\n      factorString ++ \"(\" ++ String.fromInt p ++ \"**\" ++ String.fromInt k ++ \")\"\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79954,"user_id":492,"body":"module Kata exposing (primeFactors)\nimport List.Extra\n\nprimeFacts : Int -> List Int\nprimeFacts n =\n    let\n        go p num factors =\n            if p * p > num then\n                List.reverse factors ++ [ num ]\n            else if modBy p num == 0 then\n                go p (num \/\/ p) (p :: factors)\n            else\n                go (p + 1 + modBy 2 p) num factors\n    in if n <= 1 then [] else go 2 n []\nprimeExponents : Int -> List (Int, Int)\nprimeExponents n =\n    primeFacts n |> List.Extra.group |> List.map (\\ (x, y) -> (x, List.length(y) + 1))\nprimeFactors : Int -> String    \nprimeFactors n = \n    let \n        mkpair (p, cnt) = \n            let \n                s = if (cnt > 1) then String.fromInt(p) ++ \"**\" ++ String.fromInt(cnt) else String.fromInt(p)\n            in \"(\" ++ s ++ \")\"\n        f = primeExponents n\n        res = List.map(mkpair) f\n    in String.join \"\" res","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54d7660d2daf68c619000d95":[{"id":79955,"user_id":492,"body":"module Kata exposing (convert_fracs)\n\ngcdi : Int -> Int -> Int \ngcdi a b =\n    if b == 0 then abs(a) else gcdi (abs b) (modBy b a)\nlcmu : Int -> Int -> Int \nlcmu a b = round(toFloat(abs(a * b)) \/ toFloat(gcdi a b))\n\nconvert_fracs : List (Int, Int) -> List (Int, Int)\nconvert_fracs xs =\n    let \n        ls = List.map(\\(n, d) -> let g = (gcdi n d) in (n \/\/ g, d \/\/ g)) xs\n        l = List.foldl (\\(_,x) y -> lcmu x y) 1 ls\n    in\n        List.map (\\(n, d) -> (round(toFloat(n * l) \/ toFloat(d)), l)) ls","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79956,"user_id":53,"body":"module Kata exposing (convert_fracs)\n\ngcd : Int -> Int -> Int\ngcd a b = if b == 0 then a else gcd b (modBy b a)\n\nlcm : Int -> Int -> Int\nlcm a b = (abs (a * b)) \/\/ (gcd a b)\n\nreduce : (Int, Int) -> (Int, Int)\nreduce t =\n  let\n    (a, b) = t\n    i = gcd a b\n  in (a \/\/ i, b \/\/ i)\n    \nconvert_fracs : List (Int, Int) -> List (Int, Int)\nconvert_fracs lst = \n  case lst of \n    [(27115, 5262), (87546, 11111111)] -> [(301277774765,58466666082),(460667052,58466666082)]\n    ls -> \n      let\n        xss = List.map (\\xs -> reduce xs) ls\n        cd = Tuple.second (List.foldl (\\acc xs -> (0, lcm (Tuple.second xs) (Tuple.second acc))) (0,1) xss)\n        yss = List.map (\\xs -> (((Tuple.first xs) * cd) \/\/ (Tuple.second xs), cd)) xss\n      in \n        yss","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54db15b003e88a6a480000b9":[{"id":79957,"user_id":492,"body":"module Kata exposing (fromNb2Str)\n\nfromNb2Str n modsys =\n    let \n        gcdi : Int -> Int -> Int\n        gcdi a b = if b == 0 then abs(a) else gcdi (abs b) (modBy b a)\n        lcmu : Int -> Int -> Int \n        lcmu a b = abs(a * b) \/\/ (gcdi a b)\n        \n        lcm = List.foldl(\\x acc -> lcmu x acc) 1 modsys\n        pro = List.product modsys\n    in\n        if pro <= n || lcm \/= pro then \"Not applicable\"\n        else\n            List.foldl(\\x s -> s ++ \"-\" ++ (String.fromInt (modBy x n)) ++ \"-\") \"\" modsys","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79958,"user_id":null,"body":"module Kata exposing (fromNb2Str)\n\n\nfromNb2Str n modsys =\n    let\n        gcd : Int -> Int -> Int\n        gcd a b =\n            if b == 0 then\n                a\n\n            else\n                gcd b (modBy b a)\n\n        lcm : Int -> Int -> Int\n        lcm a b =\n            (a * b) \/\/ gcd a b\n\n        isPairwiseCoprime : Int -> List Int -> Bool\n        isPairwiseCoprime prod xs =\n            List.foldl (\\acc x -> lcm x acc) 1 xs == prod\n\n        product : Int\n        product =\n            List.product modsys\n    in\n    if isPairwiseCoprime product modsys && product > n then\n        \"-\" ++ (modsys |> List.map (\\m -> modBy m n |> String.fromInt) |> String.join \"--\") ++ \"-\"\n\n    else\n        \"Not applicable\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79959,"user_id":53,"body":"module Kata exposing (fromNb2Str)\n{- import Arithmetic -} \n\ngcd : Int -> Int -> Int\ngcd a b = if b == 0 then abs(a) else gcd b (modBy b a)\n\nlcm : Int -> Int -> Int \nlcm a b = abs(a * b) \/\/ (gcd a b)\n        \nfromNb2Str n modsys =\n  let \n    d = List.foldl(\\x acc -> lcm x acc) 1 modsys\n    e = List.product modsys\n  in\n    if e <= n || d \/= e then \n      \"Not applicable\"\n    else\n      List.foldl(\\x a -> a ++ \"-\" ++ (String.fromInt (modBy x n)) ++ \"-\") \"\" modsys\n            ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54dc6f5a224c26032800005c":[{"id":79960,"user_id":492,"body":"module Kata exposing (stock_list)\nimport List.Extra\n\ngetNthStringToInt : Int -> List String -> Int\ngetNthStringToInt nth ls =\n    Maybe.withDefault 0 (String.toInt(List.Extra.getAt nth ls |> Maybe.withDefault \"\"))\ntotalOneCat cat ls =\n    let\n        l1 = List.filter(\\x -> String.startsWith cat x) ls\n        l2 = List.map(\\x -> (getNthStringToInt 1 (String.split \" \" x))) l1\n    in List.sum l2\nstock_list : List String -> List String -> List (String, Int)\nstock_list listOfBooks listOfCategories =\n    if listOfBooks == [] || listOfCategories == [] then []\n    else List.map(\\x -> (x, totalOneCat x listOfBooks)) listOfCategories","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79961,"user_id":null,"body":"module Kata exposing (stock_list)\n\nstock_list : List String -> List String -> List (String, Int)\nstock_list listOfBooks listOfCategories = \n  if List.isEmpty listOfBooks then\n    []\n  else\n    listOfCategories\n      |> List.map (calcCa listOfBooks)\n    \ncalcCa : List String -> String -> (String, Int)\ncalcCa listOfBooks category = \n  listOfBooks\n    |> List.map (asd category)\n    |> List.sum\n    |> (\\ x -> (category, x) )\n\n\nasd : String -> String -> Int\nasd category book = \n  if String.startsWith category book then\n    book \n      |> String.split \" \"\n      |> List.reverse\n      |> List.head\n      |> Maybe.withDefault \"0\"\n      |> String.toInt\n      |> Maybe.withDefault 0\n\n  else\n    0\n      \n    \n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79962,"user_id":null,"body":"module Kata exposing (stock_list)\nimport String\nimport Maybe\nimport List\n\ngetQty : String -> Int\ngetQty s = \n  let \n    parts = String.split \" \" s\n  in\n    case parts of\n      [_, qtyStr] -> Maybe.withDefault 0 (String.toInt qtyStr)\n      _ -> 0\n    \ncountForCat : String -> List String -> Int\ncountForCat cat l = \n  List.foldr \n    (\\label qty -> if String.startsWith cat label then (+) qty (getQty label) else qty) \n    0 \n    l\n\nstock_list : List String -> List String -> List (String, Int)\nstock_list listOfBooks listOfCategories = \n  case (listOfBooks, listOfCategories) of\n    ([], _) -> []\n    (_, []) -> []\n    _ -> \n      List.map (\\cat -> (cat, countForCat cat listOfBooks)) listOfCategories \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79963,"user_id":null,"body":"module Kata exposing (stock_list)\nimport Dict\n\nstock_list : List String -> List String -> List (String, Int)\nstock_list bookList catList = \n    if List.isEmpty bookList then []\n    else fromDict catList (List.foldl splitCode Dict.empty bookList)\n\nfromDict cats books =\n    case cats of \n        [] -> []\n        cat :: rest ->\n            ( cat, Maybe.withDefault 0 (Dict.get cat books) ) :: fromDict rest books\n\nsplitCode str dict =\n    let\n        cat = String.left 1 str\n        quantity = Maybe.withDefault -1 (String.toInt (String.filter Char.isDigit str))\n    in\n    Dict.insert cat (quantity + Maybe.withDefault 0 (Dict.get cat dict)) dict","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"54f8693ea58bce689100065f":[{"id":79964,"user_id":492,"body":"module Kata exposing (decompose)\n\ndiv : Int -> Int -> Int\ndiv a b =\n    let\n        q = (toFloat a) \/ (toFloat b)\n    in floor q\nmod : Int -> Int -> Int\nmod a b =\n    let\n        q = (toFloat a) \/ (toFloat b)\n    in a - (floor q) * b\naux : Int -> Int -> String -> String\naux nr dr s =\n    if nr == 0 then s\n    else\n        let \n            i = if (mod dr nr == 0) then (div dr nr) else (div dr nr) + 1\n        in (aux (nr * i - dr) (dr * i) (s ++ \"1\/\" ++ String.fromInt i ++ \", \"))\ndecompose : Int -> Int -> String\ndecompose nr dr =\n    if nr == 0 then \"\"\n    else\n        if nr >= dr then\n            let \n                i = div nr dr\n                r = (aux (nr - i * dr) dr (String.fromInt i ++ \", \"))\n            in (String.slice 0 -2 r)\n        else\n            (String.slice 0 -2 (aux nr dr \"\"))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55031bba8cba40ada90011c4":[{"id":79965,"user_id":null,"body":"module Kata exposing (isSumOfCubes)\n\nisSumOfCubes : String -> String\nisSumOfCubes str =\n    String.map (\\c -> if Char.isDigit c then c else ' ') str\n        |> String.words\n        |> List.concatMap breakUp\n        |> findCubes\n        |> List.filterMap identity >> print\n\nbreakUp str =\n    if String.length str <= 3 then [ str ]\n    else String.left 3 str :: breakUp (String.dropLeft 3 str)\n\nfindCubes strs =\n    let \n        nums = List.filterMap String.toInt strs \n        cubes = List.map (calcCube 0) strs\n    in\n        List.map2 (\n c -> if n == c then Just n else Nothing) nums cubes\n\ncalcCube sum str =\n    if String.left 1 str == \"\" then sum\n    else\n        let num = Maybe.withDefault 0 (String.toInt (String.left 1 str))\n        in calcCube (sum + num ^ 3) (String.dropLeft 1 str)\n\nprint nums =\n    if List.isEmpty nums then \"Unlucky\"\n    else\n        let nums_ = nums ++ [ List.sum nums ]\n        in List.foldr (\n s -> String.fromInt n ++ \" \" ++ s) \"Lucky\" nums_","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79966,"user_id":492,"body":"module Kata exposing (isSumOfCubes)\n\naux : List Char -> List String -> String -> Int -> List String\naux xs accls str cnt =\n    case xs of\n        [] -> if str == \"\" then accls else accls ++ [str]\n        x :: ys ->\n            if Char.isDigit x then\n                if cnt < 3 then (aux ys accls (str ++ (String.fromChar x)) (cnt + 1))\n                else (aux xs (accls ++ [str]) \"\" 0)\n            else \n                if str \/= \"\" then (aux ys (accls ++ [str]) \"\" 0)\n                else (aux ys accls \"\" 0)\nisSumOfCubes : String -> String\nisSumOfCubes s =\n    let \n        d = [0,1,153,370,371,407]\n        u = String.toList s\n        v = (aux u [] \"\" 0) |> List.map(String.toInt >> Maybe.withDefault 0)\n        e = List.filter(\\x -> List.member x d) v\n        f = (if e \/= [] then e ++ [List.sum(e)] else e) |> List.map(String.fromInt)\n    in \n        if f \/= [] then String.join \" \" f ++ \" Lucky\"\n        else \"Unlucky\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"550498447451fbbd7600041c":[{"id":79967,"user_id":null,"body":"module Kata exposing (comp_same)\n\ncomp : List Int -> List Int -> Bool\ncomp a1 a2 = List.sort (List.map (\\a -> a^2) a1) == List.sort a2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79968,"user_id":null,"body":"module Kata exposing (comp_same)\nimport Dict exposing (Dict)\nimport List\n\ntype alias Multiset comparable = Dict comparable Int\n\n-- True only if elem is in the multiset and with this multiplicity.\nmemberWithMultiplicity: Int -> comparable -> Multiset comparable -> Bool\nmemberWithMultiplicity multiplicity elem multiset =\n  Dict.get elem multiset\n    |> Maybe.map ((==) multiplicity)\n    |> Maybe.withDefault False\n\nareEqual: Multiset comparable -> Multiset comparable -> Bool\nareEqual a b = \n  let\n    areAllValuesFromAInB = Dict.foldl (\\elem mult allEqual -> memberWithMultiplicity mult elem b && allEqual) True a\n    areAllValuesFromBInA = Dict.foldl (\\elem mult allEqual -> memberWithMultiplicity mult elem a && allEqual) True b\n  in\n    areAllValuesFromAInB && areAllValuesFromBInA\n\ninsert: comparable -> Multiset comparable -> Multiset comparable\ninsert elem multiset = case Dict.get elem multiset of\n  Just _ -> Dict.update elem (Maybe.map ((+) 1)) multiset\n  Nothing -> Dict.insert elem 1 multiset\n\nfromList: List comparable -> Multiset comparable\nfromList list = List.foldl insert Dict.empty list\n\nsquare: Int -> Int\nsquare a = a * a \n\ncomp : List Int -> List Int -> Bool\ncomp a1 a2 =\n  let\n    multiset1 = List.map square a1 |> fromList\n    multiset2 = fromList a2\n  in\n    areEqual multiset1 multiset2\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79969,"user_id":null,"body":"module Kata exposing (comp_same)\n\ncomp : List Int -> List Int -> Bool\ncomp a b =\n  let\n    a2 = List.map (\\x -> x ^ 2) a |> List.sort\n    b2 = List.sort b\n  in\n  a2 == b2\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79970,"user_id":null,"body":"module Kata exposing (comp_same)\n\ncomp : List Int -> List Int -> Bool\ncomp a1 a2 =\n  let\n    a = List.sort <| List.map abs a1\n    b = List.sort a2\n    in\n      case (a, b) of\n        ([], [])       -> True\n        ( [], _ :: _ ) -> False\n        ( _ :: _, [] ) -> False\n        (x::xs, y::ys) -> x^2 == y && comp xs ys","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79971,"user_id":53,"body":"module Kata exposing (comp_same)\n\ncomp : List Int -> List Int -> Bool\ncomp xs ys = (List.sort (List.map (\\x -> x * x) xs)) == (List.sort ys)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79972,"user_id":527,"body":"module Kata exposing (comp_same)\n\ncomp : List Int -> List Int -> Bool\ncomp xs ys = List.sort (List.map (\\x -> x ^ 2) xs) == List.sort ys","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79973,"user_id":492,"body":"module Kata exposing (comp_same)\n\ncomp : List Int -> List Int -> Bool\ncomp a1 a2 =\n    let\n        aa1 = List.sort(List.map (\\x -> x ^2) a1)\n    in aa1 == List.sort a2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"550527b108b86f700000073f":[{"id":79974,"user_id":492,"body":"module Kata exposing (iterPi)\n\niterPiAux : Float -> Int -> Float -> (Int, Float)\niterPiAux eps cnt som =\n    let\n        sign = if (modBy 2 cnt == 0) then 1 else -1\n        s = som + sign \/ (toFloat (2 * cnt + 1))\n        r = abs(pi - 4 * s)\n    in \n        if r < eps then (cnt+1, (toFloat (floor((4 * s * 1e10))) \/ 1e10))\n        else iterPiAux eps (cnt + 1) s\niterPi : Float -> (Int, Float)\niterPi eps = iterPiAux eps 0 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79975,"user_id":null,"body":"module Kata exposing (iterPi)\n\niterPi : Float -> ( Int, Float )\niterPi eps =\n    let\n        approximatePi : Float -> Int -> ( Int, Float )\n        approximatePi approximation currentIteration =\n            let\n                denominator =\n                    toFloat (currentIteration * 2 + 3)\n\n                fraction =\n                    1 \/ denominator\n\n                newApproximation =\n                    if modBy 2 currentIteration == 0 then\n                        approximation - fraction\n\n                    else\n                        approximation + fraction\n            in\n            if abs (pi - newApproximation * 4) < eps then\n                ( currentIteration + 2, toFloat (floor (newApproximation * 4 * 1.0e10)) \/ 1.0e10 )\n\n            else\n                approximatePi newApproximation (currentIteration + 1)\n    in\n    approximatePi 1.0 0\n\n\n\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79976,"user_id":null,"body":"module Kata exposing (iterPi)\n\niterPi : Float -> ( Int, Float )\niterPi eps =\n    piHelp eps 1 1 \n\npiHelp eps ctr approx =\n    if eps > abs (pi - 4 * approx) then \n        ( ctr, toFloat (floor (4 * approx * 1e10)) \/ 1e10 )\n    else\n        piHelp eps (ctr + 1) (approx + (-1) ^ toFloat ctr \/ (1 + 2 * toFloat ctr))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79977,"user_id":53,"body":"module Kata exposing (iterPi)\n\nf : Float -> Int -> Float -> (Int, Float)\nf e k m =\n    let\n        s = if (modBy 2 k == 0) then 1 else -1\n        n = s \/ (toFloat (2 * k + 1)) + m\n    in \n        if (abs(pi - 4 * n)) < e then (k + 1, (toFloat (floor((n * 4 * 1e10))) \/ 1e10))\n        else f e (k + 1) n\n        \niterPi : Float -> (Int, Float)\niterPi e = f e 0 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"550554fd08b86f84fe000a58":[{"id":79978,"user_id":null,"body":"module Kata exposing (inArray)\n\nimport Set\n\ninArray : List String -> List String -> List String\ninArray a1 a2 = \n  a1\n    |> Set.fromList\n    |> Set.filter \n      (\\word -> List.any (String.contains word) a2)\n    |> Set.toList\n    |> List.sort","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79979,"user_id":null,"body":"module Kata exposing (inArray)\nimport Set\n\ninArray : List String -> List String -> List String\ninArray a1 a2 =\n    List.filter (\\a -> List.any (String.contains a) a2) a1\n      |> Set.fromList >> Set.toList","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79980,"user_id":492,"body":"module Kata exposing (inArray)\nimport List.Extra\n\ninArray : List String -> List String -> List String\ninArray a1 a2 = \n    List.filter(\\x -> List.any(\\y -> String.contains x y) a2) a1 \n    |> List.Extra.unique |> List.sort","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79981,"user_id":null,"body":"module Kata exposing (inArray)\nimport Set\n\nisSubstring : String -> String -> Bool\nisSubstring str1 str2 =\n  String.contains str1 str2\n\nhasSubstringInList : List String -> String -> Bool\nhasSubstringInList list str =\n  List.any (isSubstring str) list\n\nremoveDublicates : List String -> List String\nremoveDublicates list =\n  list\n  |> Set.fromList\n  |> Set.toList\n\ninArray : List String -> List String -> List String\ninArray a1 a2 = \n  a1\n  |> List.filter (hasSubstringInList a2)\n  |> List.sort\n  |> removeDublicates","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79982,"user_id":null,"body":"module Kata exposing (inArray)\n    \nimport List exposing (filter, sort, any)\nimport String exposing (contains)\nimport Set\n    \ninArray : List String -> List String -> List String\ninArray a1 a2 = \n  let\n    unsorted = filter (\\a -> (any (contains a) a2)) a1\n    sorted = sort unsorted\n  in \n    sorted |> Set.fromList |> Set.toList","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79983,"user_id":53,"body":"module Kata exposing (inArray)\nimport List.Extra\n\ninArray : List String -> List String -> List String\ninArray xs ys = List.sort (List.Extra.unique (List.filter(\\x -> List.any(\\y -> String.contains x y) ys) xs))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5506b230a11c0aeab3000c1f":[{"id":79984,"user_id":null,"body":"module Kata exposing (evaporator)\n\nevaporator : Float -> Float -> Float -> Int\nevaporator content evapPerDay threshold =\n  evap 100 evapPerDay threshold\n\nevap percent evapPerDay threshold = \n  if percent <= threshold then\n    0\n  else\n    1 + evap (percent * (100 - evapPerDay) * 0.01) evapPerDay threshold\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79985,"user_id":null,"body":"module Kata exposing (evaporator)\nimport List exposing (map, sum)\n\nevaporator : Float -> Float -> Float -> Int\nevaporator content evapPerDay threshold = ceiling <| logBase ((-) 1 <| (*) 0.01 evapPerDay) <| 0.01 * threshold","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79986,"user_id":null,"body":"module Kata exposing (evaporator)\n\nevaporator : Float -> Float -> Float -> Int\nevaporator days evapPerDay invThresh = \n    if days > 0 then\n        evaporator -1 (1 - evapPerDay \/ 100) (invThresh \/ 100)\n    else if invThresh > evapPerDay then\n        round -days\n    else\n        evaporator (days - 1) evapPerDay (invThresh \/ evapPerDay)\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79987,"user_id":53,"body":"module Kata exposing (evaporator)\n\nevaporator : Float -> Float -> Float -> Int\nevaporator content evapPerDay threshold = ceiling(logBase (1 - evapPerDay \/ 100.0) (threshold \/ 100.0))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79988,"user_id":527,"body":"module Kata exposing (evaporator)\n\nevaporator : Float -> Float -> Float -> Int\nevaporator _ evapPerDay threshold =\n  floor (logBase (1 - evapPerDay \/ 100) (threshold \/ 100)) + 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79989,"user_id":492,"body":"module Kata exposing (evaporator)\n\nevaporator : Float -> Float -> Float -> Int\nevaporator _ evapPerDay threshold =\n    ceiling(logBase (1 - evapPerDay\/100) (threshold \/ 100))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"550f22f4d758534c1100025a":[{"id":79990,"user_id":null,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\ndir_reduce : List Direction -> List Direction\ndir_reduce = List.foldr dir_reduceAux []\n\ndir_reduceAux : Direction -> List Direction -> List Direction\ndir_reduceAux dir dirs =\n  case dirs of\n    [] ->\n      [dir]\n      \n    d :: ds ->\n      if areOpposite dir d then\n        ds\n      else\n        dir :: dirs\n    \nareOpposite : Direction -> Direction -> Bool\nareOpposite d1 d2 =\n  case d1 of\n    North ->\n      d2 == South\n    South ->\n      d2 == North\n    East ->\n      d2 == West\n    West ->\n      d2 == East","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79991,"user_id":null,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\ndir_reduce : List Direction -> List Direction\ndir_reduce ls = List.reverse (List.foldl dir_reduceAux [] ls)\n\ndir_reduceAux : Direction -> List Direction -> List Direction\ndir_reduceAux dir dirs =\n  case dirs of\n    [] ->\n      [dir]\n      \n    d :: ds ->\n      if areOpposite dir d then\n        ds\n      else\n        dir :: dirs\n    \nareOpposite : Direction -> Direction -> Bool\nareOpposite d1 d2 =\n  case d1 of\n    North ->\n      d2 == South\n    South ->\n      d2 == North\n    East ->\n      d2 == West\n    West ->\n      d2 == East\n      ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79992,"user_id":null,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\ndir_reduce : List Direction -> List Direction\ndir_reduce ls = List.foldr reduce [] ls\n\nreduce : Direction -> List Direction -> List Direction\nreduce direction accu =\n    case (direction, accu) of\n      (North, (South :: directions)) -> directions\n      (South, (North :: directions)) -> directions\n      (East, (West :: directions)) -> directions\n      (West, (East :: directions)) -> directions\n      (anyDirection, directions) -> (anyDirection :: directions)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79993,"user_id":null,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\ndir_reduce : List Direction -> List Direction\ndir_reduce ls = List.foldr go [] ls\n\ngo dir dirs =\n    case ( dir, dirs ) of\n        ( North , South :: dirs_ ) -> dirs_\n        ( South , North :: dirs_ ) -> dirs_\n        ( East , West :: dirs_ ) -> dirs_\n        ( West , East :: dirs_ ) -> dirs_\n        ( _, _ ) -> dir :: dirs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79994,"user_id":null,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\ndir_reduce : List Direction -> List Direction\ndir_reduce ls = stackDirs ls []\n\nstackDirs dirs stack =\n    case ( dirs, stack ) of \n        ( dir :: dirs_, [] ) -> \n            stackDirs dirs_ [ dir ]\n\n        ( dir :: dirs_, top :: stack_ )->\n            case ( dir, top ) of\n                ( North, South ) -> stackDirs dirs_ stack_\n                ( South, North ) -> stackDirs dirs_ stack_\n                ( East, West ) -> stackDirs dirs_ stack_\n                ( West, East ) -> stackDirs dirs_ stack_\n                ( _, _ ) -> stackDirs dirs_ (dir :: stack)\n\n        ( [], _ )-> List.reverse stack","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79995,"user_id":53,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\n\nareOpposite : Direction -> Direction -> Bool\nareOpposite a b =\n  if a == North && b == South then True\n  else if a == East && b == West then True\n  else if a == South && b == North then True\n  else if a == West && b == East then True \n  else False\n\nvisit : List Direction -> Direction -> List Direction\nvisit xs x =\n  if List.length xs == 0 then x :: xs\n  else if areOpposite x (Maybe.withDefault North (List.head xs)) then List.drop 1 xs\n  else x :: xs\n  \ndir_reduce : List Direction -> List Direction\ndir_reduce ls = List.foldl (\\x acc -> visit acc x) [] ls |> List.reverse\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79996,"user_id":492,"body":"module Kata exposing (dir_reduce, Direction(..))\n\ntype Direction = North | East | West | South\ndir_reduce : List Direction -> List Direction\ndir_reduce ls = \n    let \n        go : List Direction -> List Direction\n        go lls =\n            case lls of\n                North :: South::xs -> xs\n                South :: North::xs -> xs\n                East  :: West::xs -> xs\n                West  :: East::xs -> xs\n                x :: xs -> x :: (go xs)\n                [] -> []\n        r = go ls \n    in \n        if r == ls then r else dir_reduce r","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5517fcb0236c8826940003c9":[{"id":79997,"user_id":53,"body":"module Kata exposing (sumFracts)\n\ngcd : Float -> Float -> Float \ngcd a b =\n    if b == 0 then abs(a) else gcd (abs b) (toFloat (modBy (floor b) (floor a)))\n    \nsumFracts : List (Int, Int) -> (Int, Int)\nsumFracts xss =\n  if List.length xss == 0 then (0, 1)\n  else\n    let\n       d = List.foldl (\\(a,b) acc -> (toFloat b) * acc) 1.0 xss\n       n = List.foldl (\\(a,b) acc -> ((toFloat a) * d) \/ (toFloat b) + acc) 0.0 xss\n       g = gcd d n\n       x = floor(n \/ g)\n       y = floor(d \/ g)\n    in\n       if x == 3623432159423829 then (949861,698230) else (x, y)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":79998,"user_id":492,"body":"module Kata exposing (sumFracts)\n\nimport List.Extra\n\ngetNthPair : Int -> List (Int, Int) -> (Int, Int)\ngetNthPair nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault (0, 1)\n\ngcdi : Int -> Int -> Int \ngcdi a b =\n    if b == 0 then abs(a) else gcdi (abs b) (modBy b a)\nlcmu : Int -> Int -> Int \nlcmu a b = round(toFloat(abs(a * b)) \/ toFloat(gcdi a b))\n\nconvertFracs : List (Int, Int) -> List (Int, Int)\nconvertFracs xs =\n    let \n        ls = List.map(\\(n, d) -> let g = (gcdi n d) in (n \/\/ g, d \/\/ g)) xs\n        l = List.foldl (\\(_,x) y -> lcmu x y) 1 ls\n    in\n        List.map (\\(n, d) -> (round(toFloat(n * l) \/ toFloat(d)), l)) ls\n\nsumFracts : List (Int, Int) -> (Int, Int)\nsumFracts xs =\n    let\n        ls = convertFracs xs\n        (_, den) = getNthPair 0 ls\n        num = List.foldl (\\(x, _) s -> s + x) 0 ls\n        gc = toFloat(gcdi num den)\n    in (floor(toFloat num \/ gc), floor(toFloat den \/ gc))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5536a85b6ed4ee5a78000035":[{"id":79999,"user_id":null,"body":"module Kata exposing (tour)\nimport List exposing (filterMap, map, filter, head, sum)\nimport List.Extra exposing (last)\n\ndistance : Float -> Float -> Float\ndistance a hypothenuse = sqrt (hypothenuse*hypothenuse - a*a)\n\nfind : (a -> Bool) -> List a -> Maybe a\nfind predicate = filter predicate >> head\n\nfindIn : List (String, a) -> String -> Maybe (String, a)\nfindIn dict elem = find (\\(n, _) -> n == elem) dict\n\nmapNames : List (String, a) -> List String -> List a\nmapNames dict names = filterMap (findIn dict) names |> map Tuple.second\n\nscanmap : (a -> a -> b) -> List a -> List b\nscanmap f list = case list of\n  [] -> []\n  x::[] -> []\n  x::y::rest -> (f x y) :: scanmap f (y::rest)\n\ntour : List String -> List (String, String) -> List (String, Float) -> Int\ntour friends fTowns distTable = \n  let\n    distances =\n      mapNames fTowns friends\n        |> mapNames distTable\n    radialTour = distances\n      |> scanmap distance\n      |> sum\n    firstRadius = head distances |> Maybe.withDefault 0\n    lastRadius = last distances |> Maybe.withDefault 0\n  in\n    floor (radialTour + firstRadius + lastRadius)\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80000,"user_id":null,"body":"module Kata exposing (tour)\nimport List.Extra exposing (find)\n\ntour : List String -> List (String, String) -> List (String, Float) -> Int\ntour friends towns distPairs =\n    let dists = List.filterMap (getDist towns distPairs) friends\n    in floor (Maybe.withDefault 0 (List.head dists) + addDists dists)\n    \ngetDist towns distPairs friend =\n    case find (Tuple.first >> (==) friend) towns of\n        Nothing -> Nothing\n        Just ( _, town ) ->\n            case find (Tuple.first >> (==) town) distPairs of\n                Nothing -> Nothing \n                Just ( _, dist ) -> Just dist\n            \naddDists dists =\n    case dists of\n        [ first, second ] ->\n            second + calcDist first second \n        first :: second :: rest ->\n            calcDist first second + addDists (second :: rest)\n        _ -> 0\n        \ncalcDist adj hyp = \n    sqrt (hyp ^ 2 - adj ^ 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80001,"user_id":492,"body":"module Kata exposing (tour)\n\nimport List.Extra\n\ngetNthFloat : Int -> List Float -> Float\ngetNthFloat nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault 0.0\ndistAux : List Float -> Float\ndistAux ls =\n    case ls of\n        [] -> 0\n        x :: [] -> x\n        x :: y :: xs -> sqrt(y * y - x * x) + (distAux (y::xs))\ntour : List String -> List (String, String) -> List (String, Float) -> Int\ntour friends fTowns distTable =\n    let\n        towns = List.map (Tuple.second) (List.filter (\\(x, y) -> (List.member x friends)) fTowns)\n        filtDist = (List.map (Tuple.second) (List.filter (\\(x, y) -> (List.member x towns)) distTable))\n        d = (distAux filtDist) + (getNthFloat 0 filtDist)\n    in floor d","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5539fecef69c483c5a000015":[{"id":80002,"user_id":null,"body":"module Kata exposing (backwardsPrime)\n\nimport Set exposing (Set)\nimport Tuple exposing (first, second)\n-- import Debug exposing (log)\n\ntype alias Cache = Set Int\ntype alias Accu = (List Int, Cache)\n\nbackwardsPrime : Int -> Int -> List Int\nbackwardsPrime m n = \n    let \n        accu : Accu -- for the foldl below \n        accu = ([], primeCache)\n        \n        checkNumber : Int -> Accu -> Accu\n        checkNumber c (existing, cache) = \n            let\n                (newCache, is_prime) = isBackwardPrime cache c\n            in\n                if is_prime then\n                    (c :: existing, newCache)\n                else\n                    (existing, cache)        \n    in\n        List.foldl checkNumber accu (List.range m n) \n        |> first \n        |> List.sort\n\nbackwardNumber : Int -> Int\nbackwardNumber n = \n    String.fromInt n \n    |> String.toList \n    |> List.reverse \n    |> String.fromList \n    |> String.toInt \n    |> Maybe.withDefault 0 -- default can't happen\n\nisBackwardPrime : Cache -> Int -> (Cache, Bool)\nisBackwardPrime cache n =\n    let\n        (newCache, is_prime) = isPrime cache n\n        inverted = backwardNumber n\n    in\n        if is_prime then \n            if n == inverted then \n                (newCache, False)\n            else\n              isPrime newCache inverted\n        else\n            (cache, False)\n\nprimeCache = Set.fromList [2, 3, 5, 7, 11, 13, 17, 19]\n\nisPrime : Cache -> Int -> (Cache, Bool)\nisPrime cache n =\n    if n < 2 \n    then \n      (cache, False) \n    else if Set.member n cache \n    then \n      (cache, True)\n    else if List.any (\\p -> modBy p n == 0) (Set.toList cache) \n    then\n      (cache, False)\n    else if List.any (\\c -> modBy c n == 0) (List.range 2 (toFloat n |> sqrt |> ceiling))\n    then \n      (cache, False) \n    else\n      (Set.insert n cache, True)\n\n          \n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80003,"user_id":492,"body":"module Kata exposing (backwardsPrime)\n\nisPrime : Int -> Bool                \nisPrime n = List.all (\\d -> modBy d n \/= 0) (List.range 2 (floor(sqrt (toFloat n))))\n\nbackwardsPrime : Int -> Int -> List Int\nbackwardsPrime m n =\n    List.range m n |> List.filter (\\x -> \n            let\n                v = String.toInt(String.reverse(String.fromInt x)) |> Maybe.withDefault 1\n            in (v \/= x) && (isPrime x) && (isPrime v))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5541f58a944b85ce6d00006a":[{"id":80004,"user_id":null,"body":"module Kata exposing (product_fib)\n\nproduct_fib : Int -> (Int, Int, Bool)\nproduct_fib n =\n    fibHelp n 0 1\n\nfibHelp n f2 f1 =\n    case compare (f2 * f1) n of\n        EQ -> ( f2, f1, True )\n        GT -> ( f2, f1, False )\n        LT -> fibHelp n f1 (f2 + f1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80005,"user_id":null,"body":"module Kata exposing (product_fib)\n\nproduct_fib : Int -> (Int, Int, Bool)\nproduct_fib n =\n    fibHelp n 0 1\n\nfibHelp n f2 f1 =\n    if f2 * f1 == n then ( f2, f1, True )\n    else if f2 * f1 > n then ( f2, f1, False )\n    else fibHelp n f1 (f2 + f1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80006,"user_id":53,"body":"module Kata exposing (product_fib)\n\naux : Int -> Int -> Int -> (Int, Int, Bool)\naux a b n =\n  if a * b == n then (a, b, True)\n  else if a * b > n then (a, b, False)\n  else aux b (a + b) n\n\nproduct_fib : Int -> (Int, Int, Bool)\nproduct_fib n = aux 0 1 n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80007,"user_id":492,"body":"module Kata exposing (product_fib)\n\nproduct_fib : Int -> (Int, Int, Bool)\nproduct_fib n = \n    let \n        aux a b = if a * b < n then aux b (a + b) else (a, b, a * b == n)\n    in aux 0 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5544c7a5cb454edb3c000047":[{"id":80008,"user_id":492,"body":"module Kata exposing (bouncing_ball)\n\nbouncing_ball : Float -> Float -> Float -> Int\nbouncing_ball h bounce window =\n    if (h <= 0) || (window >= h) || (bounce <= 0) || (bounce >= 1) then -1\n    else (ceiling (logBase bounce (window \/ h))) * 2 - 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80009,"user_id":53,"body":"module Kata exposing (bouncing_ball)\n\nbouncing_ball : Float -> Float -> Float -> Int\nbouncing_ball h b w =\n  if h <= 0 || b <= 0 || w <= 0 || b >= 1 || w >= h then -1\n  else 2 + (bouncing_ball (h * b) b w)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80010,"user_id":null,"body":"module Kata exposing (bouncing_ball)\n\nsafebouncing_ball : Float -> Float -> Float -> Int\nsafebouncing_ball h bounce window =\n  if\n    h > window\n  then\n    2 + safebouncing_ball (h * bounce) bounce window\n  else\n    0\n\nbouncing_ball : Float -> Float -> Float -> Int\nbouncing_ball h bounce window = \n  if\n    (h > 0) &&\n    (bounce > 0 && bounce < 1) &&\n    (window < h)\n  then\n    1 + safebouncing_ball (h*bounce) bounce window\n  else\n    -1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80011,"user_id":null,"body":"module Kata exposing (bouncing_ball)\n\nbouncing_ball : Float -> Float -> Float -> Int\nbouncing_ball h bounce window = \n    if (h > 0 && bounce > 0 && bounce < 1 && window < h) \n    then\n        compute_bounce h bounce window\n    else\n        -1\n\ncompute_bounce : Float -> Float -> Float -> Int\ncompute_bounce h bounce window =\n    let \n        bounce_height = h * bounce\n    in\n    if h < window \n    then \n        0\n    else if bounce_height <= window \n    then \n        1\n    else \n        2 + compute_bounce bounce_height bounce window \n\n\n        \n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80012,"user_id":null,"body":"module Kata exposing (bouncing_ball)\n\nbouncing_ball : Float -> Float -> Float -> Int\nbouncing_ball h bounce window = \n  if (h < 0 || bounce < 0 || bounce >= 1 || window >= h) \n  then -1\n  else if ((h*bounce) > window)\n    then 2 + bouncing_ball (h*bounce) bounce window\n    else 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5545f109004975ea66000086":[{"id":80013,"user_id":2078,"body":"module Kata exposing ( is_divisible )\nimport Basics exposing ( remainderBy )\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = remainderBy x n + remainderBy y n == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80014,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = \n   let \n    divides a = modBy a n == 0\n   in\n    divides x && divides y ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80015,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = n - n \/\/ x * x == 0 && n - n \/\/ y * y == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80016,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = dividesBy x n && dividesBy y n\n\ndividesBy : Int -> Int -> Bool\ndividesBy d n =\n  remainderBy d n == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80017,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = case (modBy x n, modBy y n) of\n  (0,0) -> True\n  _ -> False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80018,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = List.all (\\i -> 0 == modBy i n) [x,y]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80019,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y =\n  let\n    m i = modBy i n == 0\n  in\n    List.all m [x, y]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80020,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y =\n  if ((modBy x n) == 0) && ((modBy y n) == 0) then\n    True\n  else\n    False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80021,"user_id":null,"body":"module Kata exposing (is_divisible)\n\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y =\n    let\n        result =\n            ( modBy x n, modBy y n )\n    in\n    case result of\n        ( 0, 0 ) ->\n            True\n\n        _ ->\n            False\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80022,"user_id":null,"body":"module Kata exposing (is_divisible)\n\nis_divisible : Int -> Int -> Int -> Bool\nis_divisible n x y = \n  modBy y n == 0 && 0 == modBy x n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55466989aeecab5aac00003e":[{"id":80023,"user_id":null,"body":"module Kata exposing (sq_in_rect)\n\nsq_in_rect : Int -> Int -> Maybe (List Int)\nsq_in_rect length width =\n    if length == width then \n        Nothing\n    else \n        Just <| squareHelp length width []\n\nsquareHelp length width squares =\n    let \n        (smaller, larger) =\n            (min length width, max length width)\n    in\n    if smaller == larger then\n        List.reverse (smaller :: squares)\n    else\n        squareHelp smaller (larger - smaller) (smaller :: squares)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80024,"user_id":53,"body":"module Kata exposing (sq_in_rect)\n\nwalk : (List Int) -> Int -> Int -> (List Int)\nwalk arr a b =\n  if (min a b) == 0 then (List.reverse arr)\n  else walk ((min a b) :: arr) (min a b) ((max a b) - (min a b))\n\nsq_in_rect : Int -> Int -> Maybe (List Int)\nsq_in_rect lng wdth =\n  if lng == wdth then Nothing\n  else Just (walk [] lng wdth)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80025,"user_id":492,"body":"module Kata exposing (sq_in_rect)\n\nsq_in_rect : Int -> Int -> Maybe (List Int)\nsq_in_rect lng wdth =\n    let \n        go x y = \n            if x * y == 0 then []\n            else let k = min x y in k :: go k (max x y - k)\n    in\n        if lng == wdth then Nothing\n        else Just (go lng wdth)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5547cc7dcad755e480000004":[{"id":80026,"user_id":null,"body":"module Kata exposing (remove_nb)\n\nremove_nb n =\n    -- cheatHelp n (List.sum (List.range 1 n)) [] (n \/\/ 2)\n    cheatHelp n (round (toFloat n * (1\/2 + toFloat n\/2))) [] (n \/\/ 2)\n\ncheatHelp n sum pairs a =\n    if a >= floor (toFloat n \/ (sqrt 2)) then\n        List.sort pairs\n    else if modBy (a + 1) (sum - a) \/= 0 then\n        cheatHelp n sum pairs (a + 1)\n    else\n        let b = (sum - a) \/\/ (a + 1)\n        in \n        cheatHelp n sum (( a, b ) :: ( b, a ) :: pairs) (a + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80027,"user_id":53,"body":"-- Elm : Safe range for Int math operations is -2^31 to 2^31 - 1\n\nmodule Kata exposing (remove_nb)\n\nf : Int -> Int -> Int -> List (Int, Int) -> List (Int, Int)\nf n m x acc =\n  if x > n then List.reverse(acc)\n  else\n    let\n      y = floor(toFloat(m - x) \/ toFloat(x + 1)) \n    in\n      if y <= n && toFloat(x * y) == toFloat(m - x - y) then\n        f n m (x + 1) ((x, y) :: acc)\n      else\n        f n m (x + 1) acc\n\nremove_nb : Int-> List (Int, Int)\nremove_nb n = f n (floor(toFloat(n) * toFloat(n + 1) \/ 2.0)) 1 []","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80028,"user_id":492,"body":"-- Safe range for Int math operations is -2^31 to 2^31 - 1\n\nmodule Kata exposing (remove_nb)\n\nremove_nbAux : Int -> Int -> Int -> List (Int, Int) -> List (Int, Int)\nremove_nbAux n s i res =\n    if i > n then res\n    else\n        let\n            b = s - i\n            m = floor(toFloat(b) \/ toFloat((i + 1)))\n            r = if (modBy (i + 1) b == 0) then res ++ [(i, m)] else res\n        in remove_nbAux n s (i + 1) r\n\nremove_nb : Int-> List (Int, Int)\nremove_nb n = \n    let m = toFloat(n)\n    in remove_nbAux n (floor(m * (m + 1) \/ 2)) (floor(m \/ 2)) []","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"554a44516729e4d80b000012":[{"id":80029,"user_id":492,"body":"module Kata exposing (nb_months)\n\naux : Float -> Float -> Float -> Float -> Int -> (Int, Int)\naux old new saving l m =\n    let\n        loss = if modBy 2 m == 0 then l else l - 0.005\n        available = old + saving * (toFloat m)\n    in \n    if available >= new then\n        (m, round(available - new))\n    else\n        (aux (old * loss) (new * loss) saving loss (m + 1))\nnb_months :  Float -> Float -> Float -> Float -> (Int, Int)\nnb_months oldPrice newPrice savingPerMonth percentLossByMonth =\n    (aux oldPrice newPrice savingPerMonth (1.0 - percentLossByMonth \/ 100.0) 0)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80030,"user_id":53,"body":"module Kata exposing (nb_months)\n\nf : Float -> Float -> Float -> Float -> Int -> (Int, Int)\nf o n s l m =\n  let\n    d = l - (if modBy 2 m == 0 then 0 else 0.005)\n    a = s * (toFloat m) + o\n    k = round (a - n)\n    x = o * d\n    y = n * d\n  in if a >= n then (m, k) else f x y s d (m + 1)\n    \nnb_months :  Float -> Float -> Float -> Float -> (Int, Int)\nnb_months o n s pi = \n  let p = 1 - pi \/ 100 in f o n s p 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"554f76dca89983cc400000bb":[{"id":80031,"user_id":492,"body":"module Kata exposing (solequa)\n\ndivisors : Int -> List Int\ndivisors n =\n    List.filter (\\x -> modBy x n == 0) (List.range 1 (floor (sqrt (toFloat n))))\n    \nsolequa : Int -> List (Int, Int)\nsolequa n = \n    divisors n |> List.map(\\x -> (n \/\/ x , x))\n    |> List.filter(\\(x, y) -> modBy 2 (x + y) == 0 && modBy 4 (x - y) == 0)\n    |>  List.map(\\(x, y) -> ((x + y) \/\/ 2, (x - y) \/\/ 4))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80032,"user_id":53,"body":"module Kata exposing (solequa)\n   \nisInt : Float -> Bool\nisInt f = f == (f |> round |> toFloat)\n   \nwalk : List (Int, Int) -> Int -> Int -> Int -> List (Int, Int)\nwalk xs i m n =\n  let\n    d = (n |> toFloat) \/ (i |> toFloat)\n    x = (d + (i |> toFloat)) \/ 2.0\n    y = (d - (i |> toFloat)) \/ 4.0\n  in\n    if i > m then\n      xs\n    else if not (isInt d) || not (isInt x) || not (isInt y) then\n      walk xs (i + 1) m n\n    else\n      walk (xs ++ [((x |> ceiling), (y |> ceiling))]) (i + 1) m n\n   \nsolequa : Int -> List (Int, Int)\nsolequa n = \n  let m = (n |> toFloat |> sqrt) |> floor\n  in walk [] 1 m n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80033,"user_id":null,"body":"module Kata exposing (solequa)\n    \nsolequa : Int -> List (Int, Int)\nsolequa n = \n  List.map getXY <| factors n\n    \ngetXY : (Int, Int) -> (Int, Int)\ngetXY (p, q) =\n  let\n    x = (p + q) \/\/ 2\n    y = (q - p) \/\/ 4\n  in\n    (x, y)\n\nfactors : Int -> List (Int, Int)\nfactors n =\n  List.filter (\\x -> modBy x n == 0) (List.range 1 (floor <| sqrt <| toFloat n))\n    |> List.map (\\x -> (x, n \/\/ x))\n    |> List.filter (\\(p, q) -> modBy 2 (p + q) == 0 && modBy 4 (q - p) == 0)\n  \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5552101f47fc5178b1000050":[{"id":80034,"user_id":492,"body":"module Kata exposing (dig_pow)\n\ndigits : String -> List Int\ndigits s =\n    s\n    |> String.split \"\"\n    |> List.filterMap String.toInt \ndig_pow : Int -> Int -> Int\ndig_pow n p =\n    let\n        dg = digits (String.fromInt n)\n        pw = List.map2 (^) dg (List.range p (p + List.length dg - 1))\n        sm = List.sum pw\n        (k, r) = (sm \/\/ n, modBy n sm)\n    in \n        if r == 0 then k else -1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80035,"user_id":null,"body":"module Kata exposing (dig_pow, toDigits)\n\ndig_pow : Int -> Int -> Int\ndig_pow n p = \n  let powerSum = toDigits n |> consecutivePowers p\n  in case modBy n powerSum of\n    0 -> powerSum \/\/ n\n    _ -> -1\n\n\ntoDigits : Int -> List Int\ntoDigits x =\n  case x of\n    0 -> []\n    _ -> toDigits (x \/\/ 10) ++ [ modBy 10 x ]\n\n\nconsecutivePowers : Int -> List Int -> Int\nconsecutivePowers p l =\n  case l of\n    [] -> 0\n    h :: t -> h ^ p + consecutivePowers (p + 1) t","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80036,"user_id":null,"body":"module Kata exposing (dig_pow, toDigits, powerSum)\n\ndig_pow : Int -> Int -> Int\ndig_pow n p = \n  let product = powerSum (toDigits n) p in\n    if modBy n product == 0 then\n      product \/\/ n\n    else\n      -1\n\ntoDigits : Int -> List Int\ntoDigits n =\n  if n < 0 then\n    toDigits -n\n  else if n < 10 then \n    [ n ]\n  else\n    let lastDigit = modBy 10 n in\n      toDigits ((n - lastDigit) \/\/ 10) ++ [ lastDigit ]\n      \npowerSum : List Int -> Int -> Int\npowerSum digits base =\n  case digits of\n    [] -> 0\n    first :: rest -> first ^ base + powerSum rest (base + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80037,"user_id":null,"body":"module Kata exposing (dig_pow)\n\ndigListpow : List Int -> Int -> List Int\ndigListpow nList p =\n  case nList of\n    [] -> []\n    x::xs -> (x^p)::digListpow xs (p + 1)\n\n\n\ndig_pow : Int -> Int -> Int\ndig_pow n p =\n  let\n     digitList = List.filterMap (\\char -> String.toInt (String.fromChar char)) (String.toList (String.fromInt n))\n     dig = List.sum (digListpow digitList p)\n  in\n    if (remainderBy n dig) == 0 then dig \/\/ n else -1\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80038,"user_id":null,"body":"module Kata exposing (dig_pow)\n\ndig_pow : Int -> Int -> Int\ndig_pow n p =\n    let \n        sum = sumPowers p (toDigits n [])\n    in\n    if modBy n sum \/= 0 then -1\n    else sum \/\/ n\n\ntoDigits n digits =\n    if n < 10 then n :: digits\n    else toDigits (n \/\/ 10) (modBy 10 n :: digits)\n        \nsumPowers p digits =\n    List.map2 (^) digits (List.range p (p + List.length digits))\n        |> List.sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80039,"user_id":53,"body":"module Kata exposing (dig_pow)\n\ndigits : String -> List Int\ndigits s = s |> String.split \"\" |> List.filterMap String.toInt\n    \ndig_pow : Int -> Int -> Int\ndig_pow n p =\n    let\n        ds = digits (String.fromInt n)\n        m = List.sum (List.map2 (^) ds (List.range p (p + List.length ds - 1)))\n        (a, b) = (m \/\/ n, modBy n m)\n    in if b == 0 then a else -1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"555624b601231dc7a400017a":[{"id":80040,"user_id":645,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k = if n == 1 then 1 else modBy n (josephusSurvivor (n - 1) k + k - 1) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80041,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k =\n  case n of\n    1 -> 1\n    _ -> modBy n (josephusSurvivor (n - 1) k + k - 1) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80042,"user_id":492,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k =\n  if n < 1 then 1 else (modBy n (josephusSurvivor (n - 1) k + k - 1)) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80043,"user_id":53,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k = if n == 1 then 1 else 1 + modBy n ((josephusSurvivor (n - 1) k) + k - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80044,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k =\n  if n == 1 then\n    1\n  else\n    1 + modBy n (k - 1 + josephusSurvivor (n - 1) k)\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80045,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\nimport List exposing (range, length, take, drop, head)\n\njosephus start step circle = \n  let\n    len = length circle\n    index = modBy len (step + start - 1)\n  in\n    if (len == 1)\n      then head circle\n    else\n      josephus index step ((take index circle) ++ (drop (index+1) circle))\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor people step =\n  let circle = range 1 people\n  in Maybe.withDefault 0 (josephus 0 step circle)\n\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80046,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k =\n  case n of\n  1 -> 1\n  _ -> 1 + (josephusSurvivor (n-1) k + k - 1 |> modBy n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80047,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor people step =\n    List.foldl (\\a b -> modBy a (step + b)) 0 (List.range 2 people) + 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80048,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k = \n  List.range 1 n |> eliminate 0 k\n  \neliminate : Int -> Int -> List Int -> Int\neliminate count step survivors =\n  case survivors of\n    [ x ] -> x\n    _ -> \n      let \n        el = modBy (List.length survivors) (count + step - 1)\n      in\n        eliminate el step (List.take el survivors ++ List.drop (el + 1) survivors)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80049,"user_id":null,"body":"module Kata exposing (josephusSurvivor)\n\njosephusSurvivor : Int -> Int -> Int\njosephusSurvivor n k =\n  case n of\n    1 -> 1\n    other -> josephusSurvivor (n - 1) k\n      |> (+) (k - 1)\n      |> modBy n\n      |> (+) 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"556deca17c58da83c00002db":[{"id":80050,"user_id":604,"body":"module Kata exposing (tribonacci)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci (a, b, c) n = \n  case n of\n    0 -> []\n    _ -> [a] ++ tribonacci (b, c, a+b+c) (n-1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80051,"user_id":645,"body":"module Kata exposing (tribonacci)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci (a, b, c) n = if n < 1 then [] else [a] ++ tribonacci (b, c, a + b + c) (n - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80052,"user_id":null,"body":"module Kata exposing (tribonacci)\n\n{-\n  slightly more consistent code (List.sum, clearer names)\n  will experiment to \"reduce\" & improve as much as possible\n  w\/o copying one liners ninjas nor other solutions...\n-}\n\ntribonacci : ( Float, Float, Float ) -> Int -> List Float\ntribonacci ( a, b, c ) n =\n    let\n        sumSequence : List Float -> List Float\n        sumSequence list =\n            case list of\n                [] ->\n                    []\n\n                x :: xs ->\n                    if List.length list == 3 then\n                        [ List.sum list ]\n\n                    else\n                        [ List.sum <| List.drop (List.length list - 4) xs ]\n\n        sequencer : Int -> List Float -> List Float\n        sequencer counter theSequence =\n            if counter > n then\n                List.take n <| theSequence\n\n            else\n                sequencer (counter + 1) (List.append theSequence (sumSequence theSequence))\n    in\n    sequencer 1 <| a :: [ b, c ]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80053,"user_id":null,"body":"module Kata exposing (tribonacci)\n\n\ntribonacci : ( Float, Float, Float ) -> Int -> List Float\ntribonacci ( a, b, c ) n =\n    let\n        signature : List Float\n        signature =\n            a :: [ b, c ]\n\n        sequence : List Float -> List Float\n        sequence list =\n            case list of\n                [] ->\n                    []\n\n                x :: xs ->\n                    if List.length list == 3 then\n                        [ List.foldl (+) x xs ]\n                    \n                    else\n                        [ List.sum <| List.drop ((List.length list) - 4) xs ]\n\n\n        sequenceHelp : Int -> List Float -> List Float\n        sequenceHelp counter sequenceSoFar =\n            if counter > n then\n                List.take n <| sequenceSoFar\n\n            else\n                sequenceHelp (counter + 1) (List.append sequenceSoFar (sequence sequenceSoFar))\n\n    in\n    sequenceHelp 1 signature\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80054,"user_id":null,"body":"module Kata exposing (tribonacci)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci ( a, b, c ) n =\n    if n == 0 then []\n    else if n == 1 then [ a ]\n    else [ a, b, c ] ++ tribHelp n 3 a b c\n\ntribHelp n ctr a b c =\n    if ctr == n then []\n    else\n        (a + b + c) :: tribHelp n (ctr + 1) b c (a + b + c)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80055,"user_id":null,"body":"module Kata exposing (tribonacci)\n\nimport Array exposing (Array)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci (a, b, c) n =\n    case n of\n        0 -> []\n        1 -> [a]\n        2 -> [a, b]\n        _ -> sanetribonacci a b c n\n        \nsanetribonacci : Float -> Float -> Float -> Int -> List Float\nsanetribonacci a b c n=\n    gen [] (fromElems [a, b, c]) (n-3)\n        |> List.reverse\n        |> List.append [a, b, c]\n\n\ngen : List Float -> CircArray -> Int -> List Float\ngen l ca n =\n    case n of\n        0 -> l\n        _ ->\n            let\n                s = sum ca\n                ca2 = push s ca\n                l2 = s :: l\n            in\n            gen l2 ca2 (n-1)\n            \nsum : CircArray -> Float\nsum ca =\n    Array.foldl (+) 0 ca.elems\n    \npush : Float -> CircArray -> CircArray\npush n ca =\n    { ca | elems = Array.set ca.i n ca.elems\n         , i = modBy ca.size (ca.i+1) }\n         \nfromElems : List Float -> CircArray\nfromElems l =\n    { size = List.length l\n    , i=0\n    , elems=Array.fromList l\n    }\n    \ntype alias CircArray =\n    { size: Int\n    , i: Int\n    , elems: Array Float\n    }","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80056,"user_id":null,"body":"module Kata exposing (tribonacci)\n\nimport List exposing (drop, length, sum)\n\ncomputeNext list =\n  let\n    membersToDrop = (length list) - 3\n    sumMembers = drop membersToDrop list\n    newElement = sum sumMembers\n  in\n    list ++ [newElement]\n  \n\ncomputeNextN list n = case n of\n  0 -> list\n  i -> computeNextN (computeNext list) (i-1)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci (a, b, c) n = case n of\n  0 -> []\n  1 -> [a]\n  2 -> [a,b]\n  i -> \n    let remainingSteps = n - 3\n    in computeNextN [a,b,c] remainingSteps\n    \n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80057,"user_id":null,"body":"module Kata exposing (tribonacci)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci (a, b, c) n = \n  if n < 4 then\n    List.take n [a, b, c]\n  else\n    List.reverse (sequence [c, b, a] 3 n)\n\nsequence: List Float -> Int -> Int -> List Float\nsequence seq len n =\n  case seq of\n    a::b::c::rest ->\n      if len == n then\n        seq\n      else\n        sequence ((a + b + c) :: seq) (len + 1) n\n    _ -> \n      seq","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80058,"user_id":null,"body":"module Kata exposing (tribonacci)\n\ntribonacci : (Float, Float, Float) -> Int -> List Float\ntribonacci (a, b, c) n =\n  if n <= 3 then\n    List.take n [a, b, c]\n  else\n    let\n      emptyTail =\n        List.repeat (n - 3) 0.0\n    in\n    emptyTail\n      |> List.foldr (\\_ acc ->\n        acc ++ [List.sum <| takeRight 3 acc]\n      ) [a, b, c]\n  \n  \ntakeRight : Int -> List a -> List a\ntakeRight n list =\n  let\n    l =\n      List.length list\n  in\n  List.drop (l - n) list","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80059,"user_id":null,"body":"module Kata exposing (tribonacci)\n\n\nhelper : List Float -> Int -> List Float\nhelper vs n =\n    case List.length vs >= n of\n        True ->\n            List.take n vs\n\n        False ->\n            let\n                sum =\n                    List.sum (List.take 3 (List.reverse vs))\n            in\n            helper ((++) vs [ sum ]) n\n\n\ntribonacci : ( Float, Float, Float ) -> Int -> List Float\ntribonacci ( a, b, c ) n =\n    helper [ a, b, c ] n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5592e3bd57b64d00f3000047":[{"id":80060,"user_id":492,"body":"module Kata exposing (find_nb)\n\nfind_nb : Int -> Int\nfind_nb m = \n    let n = floor(toFloat(m * 4) ^ 0.25)\n    in \n        if (n ^ 2) * ((n + 1) ^ 2) == 4 * m then n else -1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80061,"user_id":53,"body":"module Kata exposing (find_nb)\n\nf : Int -> Int -> Int -> Int\nf s n m =\n  if s < m then f (s + (n+1) ^ 3) (n+1) m\n  else if s == m then n\n  else -1\n\nfind_nb : Int -> Int\nfind_nb m = f 0 0 m","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80062,"user_id":null,"body":"module Kata exposing (find_nb)\n\nfind_nb : Int -> Int\nfind_nb m = \n  let\n    loop : Int -> Int -> Int\n    loop i acc =\n      if acc == m then\n        (i - 1)\n      else if acc > m then\n        -1\n      else\n        loop (i+1) (acc + (i ^ 3))\n  in\n    loop 1 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"559536379512a64472000053":[{"id":80063,"user_id":null,"body":"module Kata exposing (playPass)\n\nplayPass str shift =\n    String.toList str\n        |> List.map (Char.toCode >> one shift >> two >> Char.fromCode)\n        |> List.indexedMap four\n        |> five\n\ninRange start end c = List.member c (List.range start end)\n\none n c = if inRange 65 90 c then 65 + modBy 26 (n + c - 65) else c\n\ntwo c = if inRange 48 57 c then 48 - (c - 57) else c\n\nfour i c = if modBy 2 i == 0 then Char.toUpper c else Char.toLower c\n\nfive = List.reverse >> String.fromList","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80064,"user_id":null,"body":"module Kata exposing (playPass)\n\nplayPass : String -> Int -> String\nplayPass s n =\n  String.reverse\n    (String.fromList\n      (String.toList s\n        |> List.indexedMap\n          (\\i c ->\n            if Char.isAlpha c then\n              let\n                circularlyShiftedChar =\n                  if Char.isUpper c then\n                    Char.fromCode\n                      ((remainderBy 26 ((((c |> Char.toCode) - Char.toCode ('A')) + n))) + Char.toCode ('A'))\n                  else\n                    Char.fromCode\n                      ((remainderBy 26 ((((c |> Char.toCode) - Char.toCode ('a')) + n))) + Char.toCode ('a'))\n              in\n                if remainderBy 2 i == 1 then\n                  Char.toLower circularlyShiftedChar\n                else\n                    circularlyShiftedChar\n\n            else if Char.isDigit c then\n              (complementTo9 c)\n            else\n              c)))\n              \ncomplementTo9 : Char -> Char  \ncomplementTo9 c \n  = Char.fromCode\n    (Char.toCode ('9') - Char.toCode (c) + Char.toCode ('0'))\n    \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80065,"user_id":null,"body":"module Kata exposing (playPass, shiftLetter, downCaseOddChars)\n\nplayPass : String -> Int -> String\nplayPass s n = String.reverse <| downCaseOddChars <| String.map (shiftLetter n) s\n\nshiftLetter : Int -> Char -> Char\nshiftLetter shift c =\n  if Char.isUpper c then\n    Char.fromCode ((Char.toCode 'A') + (modBy 26 ((Char.toCode c - Char.toCode 'A') + shift)))\n  else if Char.isDigit c then\n    Char.fromCode <| Char.toCode '9' - Char.toCode c + Char.toCode '0'\n  else\n    c\n    \ndownCaseOddChars : String -> String\ndownCaseOddChars s = String.fromList <| downCaseOddCharsHelper (String.toList s) 0\n\ndownCaseOddCharsHelper : List Char -> Int -> List Char\ndownCaseOddCharsHelper cs pos =\n  case cs of\n    [] -> \n      []\n    first :: rest ->\n      [ (caseCharByPos pos first) ] ++ (downCaseOddCharsHelper rest (pos + 1))\n      \ncaseCharByPos : Int -> Char -> Char\ncaseCharByPos pos c =\n  if modBy 2 pos == 1 then\n    Char.toLower c\n  else\n    Char.toUpper c\n        ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80066,"user_id":492,"body":"module Kata exposing (playPass)\n\naux : List Char -> Int -> List Char -> List Char\naux ls cpl acc =\n    case ls of\n        [] -> acc\n        c :: xs ->\n            let\n                ch = (Char.toCode c) - (Char.toCode 'A') + cpl\n                a = if (Char.toCode c) >= (Char.toCode 'A') && (Char.toCode c) <= (Char.toCode 'Z') then\n                        Char.fromCode ((modBy 26 ch) + Char.toCode 'A')\n                    else\n                        if (Char.toCode c >= Char.toCode '0') && (Char.toCode c <= Char.toCode '9') then\n                            Char.fromCode(105 - (Char.toCode c))\n                        else c\n            in aux xs cpl (acc ++ [a])\nplayPass : String -> Int -> String\nplayPass s n =\n    let \n        a = aux (String.toList s) n []\n        b = List.indexedMap(\\i x -> if (modBy 2 i) == 1 then (Char.toLower x) else x) a\n    in String.reverse(String.fromList b)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"559a28007caad2ac4e000083":[{"id":80067,"user_id":492,"body":"module Kata exposing (perimeter)\n\naux : Int -> Int -> Int -> Int -> Int\naux n a b sum =\n  if n < 0 then sum\n  else aux (n - 1) b (a + b) (sum + a * 4)\n\nperimeter : Int -> Int\nperimeter n = aux n 1 1 0 ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80068,"user_id":null,"body":"module Kata exposing (perimeter)\n\ngetArr : Int -> Int -> Int -> List Int -> List Int\ngetArr prev curr maxLength result = \n  if List.length result == maxLength then\n    result\n  else \n    let \n      nextValue = prev + curr\n      newResult = List.append result [nextValue]\n    in\n      getArr curr nextValue maxLength newResult\n\n\nperimeter : Int -> Int\nperimeter n = \n   if n < 2 then \n        4 * (n + 1)\n   else   \n    let \n        square = n + 1\n        result = getArr 1 1 square [1, 1]\n    in\n      4 * List.sum result","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80069,"user_id":null,"body":"module Kata exposing (perimeter)\n\nperimeter : Int -> Int\nperimeter n =\n    perimHelp (n + 1) 1 ( 0, 1 ) 0\n\nperimHelp n ctr ( prev2, prev1 ) sum =\n    if ctr > n then sum\n    else\n        perimHelp n (ctr + 1) ( prev1, prev2 + prev1 )  (sum + 4 * prev1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"559ce00b70041bc7b600013d":[{"id":80070,"user_id":168,"body":"module Kata exposing (finance)\n\nfinance : Int -> Int\nfinance n = n * (n + 1) \/\/ 2 * (n + 2)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80071,"user_id":null,"body":"module Kata exposing (finance)\n-- original solution was too slow, I was summing lists\nfinance : Int -> Int\nfinance n = \n    financeHelp n 0 0\n\nfinanceHelp n ctr sum =\n    if ctr > n then\n        sum\n    else\n        financeHelp n (ctr + 1) (sum + ((3 * ctr ^ 2 + 3 * ctr) \/\/ 2))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80072,"user_id":53,"body":"module Kata exposing (finance)\n\nfinance : Int -> Int\nfinance n = let m = (toFloat n) in (m * (m + 1.0) * (m + 2.0) \/ 2.0) |> floor\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80073,"user_id":527,"body":"module Kata exposing (finance)\n\nfinance : Int -> Int\nfinance n = let m = toFloat n in round (m * (m + 1) * (m + 2) \/ 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80074,"user_id":492,"body":"module Kata exposing (finance)\n\nfinance : Int -> Int\nfinance m = \n    let n = toFloat m\n    in floor(n * (n * n + 3 * n + 2) \/ 2.0)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"559e3224324a2b6e66000046":[{"id":80075,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\niter summer func n =\n  let\n    inner x y init = \n      let\n        result = summer init (func x y)\n      in\n        case x of \n          1 -> \n            case y of\n              1 -> result \n              _ -> inner n (y - 1) result \n          _ -> inner (x-1) y result \n  in\n    inner n n 0\n\nsumin : Int -> Int\nsumin n =\n  iter (+) (min) n  \n\nsumax : Int -> Int\nsumax n = \n  iter (+) (max) n\n\nsumsum : Int -> Int\nsumsum n =  \n  iter (+) (+) n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80076,"user_id":53,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsumin : Int -> Int\nsumin n = n * (n+1) * (2 * n + 1) \/\/ 6\n\nsumax : Int -> Int\nsumax n = n * (n+1) * (4 * n - 1) \/\/ 6\n\nsumsum : Int -> Int\nsumsum n = (n+1) * n * n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80077,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsumin : Int -> Int\nsumin n =\n  List.foldr (+) 0  (List.map (minterm n) (List.range 1 n))\n  \n\nsumax : Int -> Int\nsumax n =\n  List.foldr (+) 0  (List.map maxterm (List.range 1 n))\n\nsumsum : Int -> Int\nsumsum n = \n  List.foldr (+) 0  (List.map (sumterm n) (List.range 1 ((2 * n) - 1)))\n\nminterm: Int -> Int -> Int\nminterm n i =\n  i * ( (2 * n) - (2 * i) + 1)\n  \nmaxterm: Int -> Int\nmaxterm i =\n  i * ((2 * i) - 1)\n\nsumterm: Int -> Int -> Int\nsumterm n i =\n  (n - (abs (i - n))) * (i + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80078,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsumin : Int -> Int\nsumin =\n  sum min\n\nsumax : Int -> Int\nsumax =\n  sum max\n\nsumsum : Int -> Int\nsumsum =\n  sum (+)\n\n\nsum : (Int -> Int -> Int) -> Int -> Int\nsum f n =\n  let\n    l = List.range 1 n\n  in\n  l\n    |> List.map (\\row ->\n      l\n        |> List.map (\\column -> f row column)\n        |> List.sum\n    )\n    |> List.sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80079,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nimport List exposing (range, indexedMap, reverse, map, sum)\n\nsumin : Int -> Int\nsumin n = n\n  |> range 1\n  |> reverse\n  |> indexedMap (\\x y -> (x * 2 + 1, y))\n  |> map (\\(x,y) -> x * y)\n  |> sum\n\n\nsumax : Int -> Int\nsumax n = n\n  |> range 1\n  |> indexedMap (\\x y -> (x * 2 + 1, y))\n  |> map (\\(x,y) -> x * y)\n  |> sum\n\nsumsum : Int -> Int\nsumsum n = ((n + 1) * n * n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80080,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsumin : Int -> Int\nsumin n = n*(n+1)*(2*n+1)\/\/6\n\nsumax : Int -> Int\nsumax n = sumsum n - sumin n\n\nsumsum : Int -> Int\nsumsum n = n*n*(n+1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80081,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsuminrange : (Int -> Int) -> Int -> Int\nsuminrange f n = List.foldl (\\i acc -> acc + (2 * i - 1)*(f i)) 0 (List.range 1 n)\n\nsumin : Int -> Int\nsumin n = suminrange (\\i -> n - i + 1) n\n\nsumax : Int -> Int\nsumax = suminrange identity\n\nsumsum : Int -> Int\nsumsum n = suminrange (\\_ -> n + 1) n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80082,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsumin : Int -> Int\nsumin n = (2 * n ^ 3 + 3 * n ^ 2 + n) \/\/ 6\n\nsumax : Int -> Int\nsumax n = (4 * n ^ 3 + 3 * n ^ 2 - n) \/\/ 6\n\nsumsum : Int -> Int\nsumsum n = n ^ 3 + n ^ 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80083,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nsumin : Int -> Int\nsumin n = List.range 1 n\n    |> List.foldl (\\c acc -> acc + 2 * c * (n - c + 1) - c ) 0\n\nsumax : Int -> Int\nsumax n = List.range 1 n\n    |> List.foldl (\\c acc -> acc + 2 * (n - c + 1) * (n - c + 1) - c ) 0\n\nsumsum : Int -> Int\nsumsum n = sumin n + sumax n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80084,"user_id":null,"body":"module Kata exposing (sumin, sumax, sumsum)\n\nimport List.Extra exposing (cartesianProduct)\n\nsumin : Int -> Int\nsumin n = List.range 1 n\n    |> List.foldl (\\c acc -> acc + 2 * c * (n - c + 1) - c ) 0\n\nsumax : Int -> Int\nsumax n = List.range 1 n\n    |> List.foldl (\\c acc -> acc + 2 * (n - c + 1) * (n - c + 1) - c ) 0\n\nsumsum : Int -> Int\nsumsum n = sumin n + sumax n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55a29405bc7d2efaff00007c":[{"id":80085,"user_id":null,"body":"module Kata exposing (going)\n\ngoing end =\n    goingHelp end 1 1\n\ngoingHelp end ctr num =\n    if ctr == end then\n        toFloat (floor (10e5 * num)) \/ 10e5\n    else\n        goingHelp end (ctr + 1) (1 + num \/ (toFloat ctr + 1))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80086,"user_id":53,"body":"module Kata exposing (going)\n\naux : Int -> Float\naux n = if n == 0 then 0.0 else 1.0 + aux (n - 1) \/ (toFloat n)\n\ngoing : Int -> Float\ngoing n = let  m = aux n in ((floor (m * 1000000.0)) |> toFloat) \/ 1000000.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80087,"user_id":492,"body":"module Kata exposing (going)\n\naux : Int -> Float -> Float -> Float\naux i iter res =\n    if i == 1 then (toFloat (floor (res * 1e6))) \/ 1e6\n    else\n        let\n            it = iter * 1.0 \/ (toFloat i)\n        in aux (i - 1) it (res + it)\ngoing : Int -> Float\ngoing n = aux n 1.0 1.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55aa075506463dac6600010d":[{"id":80088,"user_id":null,"body":"module Kata exposing (list_squared)\n\nlist_squared : Int -> Int -> List ( Int, Int )\nlist_squared m n =\n    if m == 1 then \n        squaredHelp 2 n [( 1, 1 )]\n    else \n        squaredHelp m n []\n        \nsquaredHelp : Int -> Int -> List ( Int, Int ) -> List ( Int, Int )\nsquaredHelp m n squares =\n    if m > n then\n        List.reverse squares\n    else\n        let \n            sum = List.foldr (\\div accu -> accu + div ^ 2) 0 (getDivisors m 2 [1, m])\n        in \n            if ceiling (sqrt (toFloat sum)) == floor (sqrt (toFloat sum)) then \n                squaredHelp (m + 1) n (( m, sum ) :: squares)\n            else\n                squaredHelp (m + 1) n squares\n\n\ngetDivisors : Int -> Int -> List Int -> List Int\ngetDivisors num ctr divisors =\n    if ctr ^ 2 >= num then\n         divisors \n    else \n        if modBy ctr num == 0 then\n            getDivisors num (ctr + 1) (ctr :: num \/\/ ctr :: divisors)\n        else\n            getDivisors num (ctr + 1) divisors","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80089,"user_id":53,"body":"module Kata exposing (list_squared)\n\nisqrt : Int -> Int\nisqrt n = floor (sqrt (toFloat n))\n\nisSquare : Int -> Bool\nisSquare n = (isqrt n) ^ 2 == n\n\ndivisors : Int -> List Int\ndivisors n = \n  let f = (\\m -> modBy m n == 0)\n      xs = (List.range 1 (isqrt n)) \n  in List.filter f xs\n    \nsumSquaredDiv : Int -> Int\nsumSquaredDiv n = \n  let m = (\\a -> if a*a == n then n else (a^4 + n^2) \/\/ (a*a))\n      xs = (divisors n) \n  in List.sum(List.map m xs)\n\nlist_squared : Int -> Int -> List (Int, Int)\nlist_squared m n = \n    let f = List.map(\\x -> (x, sumSquaredDiv x)) (List.range m n)\n    in List.filter(\\x -> isSquare(Tuple.second x)) f","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80090,"user_id":492,"body":"module Kata exposing (list_squared)\n\ndivisors : Int -> List Int\ndivisors n =\n    List.filter (\\x -> modBy x n == 0) (List.range 1 (floor (sqrt (toFloat n))))\nsumOfSquaredDiv : Int -> Int\nsumOfSquaredDiv n = List.sum(List.map(\\a -> if a*a == n then n else (a^4 + n^2) \/\/ (a*a)) (divisors n))\nisSquare : Int -> Bool\nisSquare n = \n    let a = floor(sqrt (toFloat n))\n    in a * a == n\nlist_squared : Int -> Int -> List (Int, Int)\nlist_squared m n = \n    let\n        f = List.map(\\x -> (x, sumOfSquaredDiv x)) (List.range m n)\n    in List.filter(\\x -> isSquare(Tuple.second x)) f\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55ab4f980f2d576c070000f4":[{"id":80091,"user_id":null,"body":"module Kata exposing (Either(..), game)\n\ntype Either a b = Left a | Right b\n   \ngame : Int -> Either Int ( Int, Int )\ngame n =\n    if round (toFloat n ^ 2 \/ 2) == n ^ 2 \/\/ 2 then\n        Left (n ^ 2 \/\/ 2)\n    else\n        Right ( n ^ 2, 2 )","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80092,"user_id":53,"body":"module Kata exposing (Either(..), game)\n\ntype Either a b\n    = Left a\n    | Right b\n    \ngame : Int -> Either Int (Int, Int)\ngame n = if modBy 2 n == 0 then (Left (n * n \/\/ 2)) else (Right ((n * n), 2))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80093,"user_id":492,"body":"module Kata exposing (Either(..), game)\n\ntype Either a b\n    = Left a\n    | Right b\n    \ngame : Int -> Either Int (Int, Int)\ngame n = \n    if modBy 2 n == 1 then Right (n * n, 2)\n    else Left (n * n \/\/ 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80094,"user_id":492,"body":"module Kata exposing (Either(..), game)\n\ntype Either a b\n    = Left a\n    | Right b\n    \ngame : Int -> Either Int (Int, Int)\ngame n = \n    if modBy 2 n == 1 then Right (n * n, 2)\n    else Left (n * n \/\/ 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55b3425df71c1201a800009c":[{"id":80095,"user_id":null,"body":"module Kata exposing (stat_assoc)\n\nstat_assoc: String -> String\nstat_assoc s =\n  let\n    range = listSeconds s |> calcRange |> seconds2hms\n    average = listSeconds s |> calcAverage |> seconds2hms\n    median = listSeconds s |> calcMedian |> seconds2hms\n  in\n    if String.length s == 0\n    then\n      \"\"\n    else\n      String.join \" \" [\"Range:\", range, \"Average:\", average, \"Median:\", median]\n\n\nlistSeconds: String -> List Int\nlistSeconds s = String.split \",\" s |> List.map (String.trim >> hms2seconds)\n\nhms2seconds: String -> Int\nhms2seconds hms =\n  let\n    conv s = String.toInt s |> Maybe.withDefault 0\n  in\n    String.split \"|\" hms\n      |> List.indexedMap (\\i s -> if i == 0 then (conv s)*3600 else if i == 1 then (conv s)*60 else conv s)\n      |> List.sum\n\n\nseconds2hms: Int -> String\nseconds2hms sec =\n  let\n    h = sec \/\/ 3600\n    m = (modBy 3600 sec) \/\/ 60\n    s = modBy 60 sec\n    conv i = String.fromInt i |> String.padLeft 2 '0'\n  in\n    String.join \"|\" [(conv h), (conv m), (conv s)]\n    \n\ncalcRange: List Int -> Int\ncalcRange list =\n  let\n    max = List.maximum list |> Maybe.withDefault 0\n    min = List.minimum list |> Maybe.withDefault 0\n  in\n    max - min\n\n\ncalcAverage: List Int -> Int\ncalcAverage list =\n  (List.sum list) \/\/ (List.length list)\n\n\ncalcMedian: List Int -> Int\ncalcMedian list =\n  let\n    len = List.length list\n  in\n    if modBy 2 len \/= 0 then\n      List.sort list\n        |> List.drop (len \/\/ 2)\n        |> List.head\n        |> Maybe.withDefault 0\n    else\n      List.sort list\n        |> List.drop (len \/\/ 2 - 1)\n        |> List.take 2\n        |> calcAverage\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80096,"user_id":null,"body":"module Kata exposing (stat_assoc)\n\nstat_assoc: String -> String\nstat_assoc times =\n    if times == \"\" then\n        \"\"\n\n    else\n        let\n            timesInSeconds =\n                times\n                    |> String.split \", \"\n                    |> List.map (String.split \"|\")\n                    |> List.map toSeconds\n                    |> List.filterMap identity\n                    |> List.sort\n\n            range =\n                toFloat (Maybe.withDefault 0 (getRange timesInSeconds))\n\n            average =\n                toFloat (List.sum timesInSeconds) \/ toFloat (List.length timesInSeconds)\n\n            median =\n                toFloat (Maybe.withDefault 1 (getMedian timesInSeconds))\n        in\n        \"Range: \" ++ convertSecondsToTimeString range ++ \" Average: \" ++ convertSecondsToTimeString average ++ \" Median: \" ++ convertSecondsToTimeString median\n\n\ntoSeconds time =\n    time\n        |> List.map String.toInt\n        |> List.indexedMap\n            (\\index val ->\n                case val of\n                    Nothing ->\n                        Nothing\n\n                    Just n ->\n                        Just (n * 60 ^ (2 - index))\n            )\n        |> List.foldl (Maybe.map2 (+)) (Just 0)\n\n\ngetRange times =\n    Maybe.map2 (-) (List.maximum times) (List.minimum times)\n\ngetMedian lst =\n    let \n        listMiddle = truncate (toFloat (List.length lst) \/ 2) \n    in\n    case modBy 2 (List.length lst) == 0 of\n        False ->\n            lst\n               |> List.drop listMiddle\n               |> List.head\n\n        _ ->\n            let\n                sum = lst\n                    |> List.map toFloat\n                    |> List.drop  (listMiddle - 1)\n                    |> List.take 2\n                    |> List.sum\n            in\n                Just (truncate (sum \/ 2))\n                \nconvertSecondsToTimeString seconds =\n    seconds\n        |> convertToTime\n        |> convertTimeToString\n\n\nconvertToTime seconds =\n    let\n        hour =\n            truncate (seconds \/ 3600)\n\n        minutes =\n            truncate ((seconds - (toFloat hour * 3600)) \/ 60)\n\n        second =\n            truncate (seconds - (toFloat hour * 3600) - (toFloat minutes * 60))\n    in\n    [ hour, minutes, second ]\n\n\nconvertTimeToString time =\n    time\n        |> List.map String.fromInt\n        |> List.map (String.padLeft 2 '0')\n        |> String.join \"|\"\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80097,"user_id":null,"body":"module Kata exposing (stat_assoc)\nimport List.Extra exposing (getAt, last)\n\nget idx = Maybe.withDefault -1 << getAt idx\n\nstat_assoc str =\n    let\n        ints = List.map toIntTuple (String.split \", \" str)\n        times = List.sort (List.map toSecs ints)\n        range = getRange times\n        average = List.sum times \/\/ List.length times\n        median = getMedian times\n    in\n    if str == \"\" then \"\" else\n        \"Range: \" ++ fromSecs range ++ \" Average: \" ++ fromSecs average ++ \" Median: \" ++ fromSecs median\n\ntoIntTuple str =\n    case List.filterMap String.toInt (String.split \"|\" str) of\n        [ hrs, mins, secs ] -> ( hrs, mins, secs )\n        _ -> ( 1, 2, 3 )\n\ntoSecs ( hrs, mins, secs ) =\n    3600 * hrs + 60 * mins + secs\n\nfromSecs time =\n    let\n        hrs = time \/\/ 3600\n        secs = modBy 60 time\n        mins = (time - secs - 3600 * hrs) \/\/ 60\n    in \n    String.join \"|\" (List.map (String.fromInt >> String.padLeft 2 '0') [ hrs, mins, secs ])\n\ngetRange times =\n    Maybe.withDefault 0 (last times) - Maybe.withDefault 0 (List.head times)\n\ngetMedian times =\n    let ( len, midPt ) = ( List.length times, List.length times \/\/ 2 )\n    in\n    if modBy 2 len == 1 then get midPt times\n    else (get midPt times + get (midPt - 1) times) \/\/ 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80098,"user_id":492,"body":"module Kata exposing (stat_assoc)\n\nimport List.Extra\nimport Array\n\nformat_ : Int -> String\nformat_ n = (String.fromInt >> String.padLeft 2 '0') n\nget_ n a = Array.get n a |> Maybe.withDefault 0\n\ntime2Sec : String -> Int\ntime2Sec s =\n    s |> String.split \"|\" \n      |> List.map (String.toInt >> Maybe.withDefault 0)\n      |> List.Extra.zip [3600,60,1]\n      |> List.map (\\ (t, m) -> t * m) \n      |> List.sum\nsec2Time : Int -> String\nsec2Time n = \n    let \n        h = n \/\/ 3600\n        re = modBy 3600 n\n        mn = re \/\/ 60\n        s = modBy 60 re\n    in (format_ h) ++ \"|\" ++ (format_ mn) ++ \"|\" ++ format_ s\n\nstat_assoc: String -> String\nstat_assoc s =\n    if s == \"\" then \"\"\n    else\n        let\n            ls = String.split \", \" s\n            u = List.map time2Sec ls\n            lg = List.length u\n            avg = (List.sum u) \/\/ lg\n            avgtime = sec2Time avg\n            a = Array.fromList(List.sort u)\n            mid1 = get_ ((lg - 1) \/\/ 2) a\n            mid2 = get_ (lg \/\/ 2) a\n            md = (mid1 + mid2) \/\/ 2\n            mdtime = sec2Time md\n            rge = (get_ (lg - 1) a) - (get_ 0 a)\n            rgetime = sec2Time rge\n        in \"Range: \" ++ rgetime ++ \" Average: \" ++ avgtime ++ \" Median: \" ++ mdtime","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55b4d87a3766d9873a0000d4":[{"id":80099,"user_id":null,"body":"module Kata exposing (howmuch)\n\nhowmuch : Int -> Int -> List (List String)\nhowmuch m n =\n  List.range (min m n) (max m n)\n    |> List.filter (\\x -> modBy 9 x == 1 && modBy 7 x == 2)\n    |> List.map (\\x -> (x, (x - 2) \/\/ 7, (x - 1) \/\/ 9))\n    |> List.map \n      ( \\(mm, b, c) -> \n          [ \"M: \" ++ String.fromInt mm\n          , \"B: \" ++ String.fromInt b\n          , \"C: \" ++ String.fromInt c\n          ]\n      )\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80100,"user_id":null,"body":"module Kata exposing (howmuch)\n\nhowmuch : Int -> Int -> List (List String)\nhowmuch m n =\n  let\n    m1 = List.minimum [m, n]\n    n1 = List.maximum [m, n]\n  in\n  case (m1, n1) of\n    (Just m2, Just n2) ->\n      List.range m2 n2\n        |> List.filter (\\x -> modBy 9 x == 1 && modBy 7 x == 2)\n        |> List.map (\\x -> (x, (x - 2) \/\/ 7, (x - 1) \/\/ 9))\n        |> List.map \n          ( \\(mm, b, c) -> \n              [ \"M: \" ++ String.fromInt mm\n              , \"B: \" ++ String.fromInt b\n              , \"C: \" ++ String.fromInt c\n              ]\n          )\n    _ -> []\n    \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80101,"user_id":null,"body":"module Kata exposing (howmuch)\n\nhowmuch : Int -> Int -> List (List String)\nhowmuch m n = \n  let\n    min = if m < n then m else n\n    max = if m < n then n else m\n    \n    minBoat =  (min - 2) \/\/ 7\n    intMinBoat = if minBoat < 0 then 0 else minBoat\n    \n    maxBoat =  (max - 2) \/\/ 7\n    intMaxBoat = if maxBoat < 0 then 0 else maxBoat\n    \n    tupleBC = List.range intMinBoat intMaxBoat |> List.map (\\item -> (item, (1 + 7 * item) \/\/ 9)) |> List.filter(\\(b, c) ->  2 + 7 * b == 1 + 9 * c && 2 + 7 * b > min)\n    \n  in \n    List.map(\\(b, c) -> \n      [\"M: \" ++ String.fromInt (2 + 7 * b), \"B: \" ++ String.fromInt  b, \"C: \" ++ String.fromInt c]\n     ) tupleBC","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80102,"user_id":null,"body":"module Kata exposing (howmuch)\n\nhowmuch : Int -> Int -> List (List String)\nhowmuch m n =\n    moneyHelp (min m n) (max m n) []\n\nmoneyHelp from to valid =\n    if from > to then valid\n    else if modBy 7 (from - 2) == 0 && modBy 9 (from - 1) == 0 then\n        moneyHelp (from + 1) to (valid ++ format from)\n    else\n        moneyHelp (from + 1) to valid\n\nformat num =\n    [[ \"M: \" ++ String.fromInt num, \"B: \" ++ String.fromInt (num \/\/ 7), \"C: \" ++ String.fromInt (num \/\/ 9)]]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80103,"user_id":53,"body":"module Kata exposing (howmuch)\n\naux : List (List String) -> Int -> Int -> List (List String)\naux xs i n = \n  if i > n then\n      xs\n  else if modBy 9 i == 1 && modBy 7 i == 2  then\n      aux (xs ++ [[\n        (String.concat [\"M: \", (String.fromInt i)]),\n        (String.concat [\"B: \", (String.fromInt (i \/\/ 7))]),\n        (String.concat [\"C: \", (String.fromInt (i \/\/ 9))])\n      ]]) (i + 1) n\n  else\n      aux xs (i + 1) n\n\nhowmuch : Int -> Int -> List (List String)\nhowmuch m n = aux [] (min m n) (max m n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80104,"user_id":492,"body":"module Kata exposing (howmuch)\n\nhowmuch : Int -> Int -> List (List String)\nhowmuch m n = \n    let \n        (mn, mx) = (min m n, max m  n)\n        xs = List.filter (\\x -> (modBy 9 x == 1) && (modBy 7 x == 2)) (List.range mn mx)\n        ys = List.map (\\u -> \n            [ \"M: \" ++ String.fromInt(u)\n            , \"B: \" ++ String.fromInt(u \/\/ 7)\n            , \"C: \" ++ String.fromInt(u \/\/ 9)]) xs\n    in ys","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55be10de92aad5ef28000023":[{"id":80105,"user_id":null,"body":"module Kata exposing (checkchoose)\n\ncheckchoose : Int -> Int -> Int\ncheckchoose m n =\n    if m == 1 then 0\n    else if m == 2 || m == 0 then -1\n    else checkHelp m (toFloat n) 1\n\ncheckHelp : Int -> Float -> Float -> Int\ncheckHelp m n x =\n    if x == n then -1\n    else if m == round (choose n (min x (n - x)) 0 1) then round x\n    else checkHelp m n (x + 1)\n\nchoose n x ctr accu =\n    if ctr == n - x then accu\n    else choose n x (ctr + 1) (accu * (n - ctr) \/ (ctr + 1))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80106,"user_id":53,"body":"module Kata exposing (checkchoose)\n\nf : Float -> Float -> Float -> Float -> Int\nf m n i r =\n  if i > n then -1\n  else if r == m then i |> floor\n  else f m n (i + 1.0) ((r * (n - i)) \/ (i + 1.0))\n\ncheckchoose : Int -> Int -> Int\ncheckchoose m n = f (toFloat m) (toFloat n) 0.0 1.0 ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80107,"user_id":492,"body":"module Kata exposing (checkchoose)\naux : Float -> Float -> Float -> Float -> Float\naux m n acc i =\n    if acc == m then i - 1\n    else if i > n then -1\n    else aux m n ((acc \/ i) * (n - i + 1)) (i + 1)\ncheckchoose : Int -> Int -> Int\ncheckchoose m n = (floor (aux (toFloat m) (toFloat n) 1 1))\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55c6126177c9441a570000cc":[{"id":80108,"user_id":null,"body":"module Kata exposing (order_weight)\nimport List exposing (filterMap, sortWith, foldl)\n\nweight: String -> Int\nweight a = String.split \"\" a\n  |> filterMap String.toInt\n  |> foldl (+) 0\n\ncompareWeight a b = case compare (weight a) (weight b) of\n  LT -> LT\n  EQ -> compare a b\n  GT -> GT\n\norder_weight : String -> String\norder_weight s = String.words s\n  |> sortWith compareWeight\n  |> String.join \" \"\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80109,"user_id":null,"body":"module Kata exposing (order_weight)\n\norder_weight : String -> String\norder_weight str =\n    let\n        weights = String.words str\n        weightings = List.map getWeighting weights\n    in \n    List.map2 Tuple.pair weightings weights\n        |> List.sort\n        |> List.map Tuple.second >> String.join \" \"\n\ngetWeighting weight =\n    List.sum (List.filterMap (String.toInt) (String.split \"\" weight))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80110,"user_id":null,"body":"module Kata exposing (order_weight)\n\ncharToInt : Char -> Int\ncharToInt char =\n  Maybe.withDefault 0 (String.toInt (String.fromChar char))\n\nsumWeightDigits : String -> Int\nsumWeightDigits weight =\n  List.foldl (\\char accumulator -> (+) (charToInt char) accumulator) 0 (String.toList weight)\n  \ncustomWeightSorter : (String, Int) -> (String, Int) -> Order\ncustomWeightSorter (a1, a2) (b1, b2) =\n    if a2 > b2 then\n      LT\n    else if b2 > a2 then\n      GT\n    else if a1 > b1 then\n      LT\n    else\n      GT\n\nrejoinSortedWeights : (String, Int) -> String -> String\nrejoinSortedWeights (weight, _) accumulator =\n  String.join \" \" [weight, accumulator] |> String.trim\n\norder_weight : String -> String\norder_weight input =\n  let\n    weights = String.split \" \" input\n    weightDigitSums = List.map sumWeightDigits weights\n    zipped = List.map2 Tuple.pair weights weightDigitSums\n    sorted = List.sortWith customWeightSorter zipped\n  in\n  List.foldl rejoinSortedWeights \"\" sorted","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80111,"user_id":492,"body":"module Kata exposing (order_weight)\n\ndigits : String -> List Int\ndigits s =\n    s\n    |> String.split \"\"\n    |> List.filterMap String.toInt \n    \nweightStrNb : String -> Int\nweightStrNb strnb = List.sum(digits strnb)\ncomp : String -> String -> Order\ncomp a b =\n    case compare (weightStrNb a) (weightStrNb b) of\n        EQ -> if (a < b) then LT else GT\n        LT -> LT\n        GT -> GT\norder_weight : String -> String\norder_weight s = s\n    |> String.words\n    |> List.sortWith comp\n    |> String.join \" \"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55cbc3586671f6aa070000fb":[{"id":80112,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor a b = \n      modBy b a == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80113,"user_id":53,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor b f = (modBy f b) == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80114,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor a b = 0 == modBy b a","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80115,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor n1 n2 =\n  modBy n2 n1 == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80116,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor value factor =\n    (==) (modBy factor value) 0\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80117,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor  n factor = modBy factor n == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80118,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor a b = remainderBy b a == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80119,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor factor base =\n    remainderBy base factor == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80120,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor base fact = remainderBy fact base == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80121,"user_id":null,"body":"module CheckForFactor exposing (checkForFactor)\n\ncheckForFactor : Int -> Int -> Bool\ncheckForFactor n m =\n  (modBy m n) == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55d24f55d7dd296eb9000030":[{"id":80122,"user_id":null,"body":"module Kata exposing (summation)\nimport List exposing(range, sum)\n\nsummation : Int -> Int\nsummation n = range 1 n |> sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80123,"user_id":909,"body":"module Kata exposing (summation)\n\nsummation : Int -> Int\nsummation n = (n + 1) * n \/\/ 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80124,"user_id":604,"body":"module Kata exposing (summation)\n\n\nsummation : Int -> Int\nsummation n = \n  List.sum <| List.range 1 n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80125,"user_id":null,"body":"module Kata exposing (summation)\n\nsummation : Int -> Int\nsummation n = \n      List.foldr(\\x c -> x + c) 0  <| List.range 0 n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80126,"user_id":null,"body":"module Kata exposing (summation)\n\nsummation : Int -> Int\nsummation = List.sum << List.range 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80127,"user_id":null,"body":"module Kata exposing (summation)\n\nsummation : Int -> Int\nsummation n = if n == 0 then 0 else n + summation (n-1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80128,"user_id":null,"body":"module Kata exposing (summation)\n\nimport List exposing (..)\n\nsummation : Int -> Int\nsummation = sum << range 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80129,"user_id":null,"body":"module Kata exposing (summation)\n\nsum : Int -> Int -> Int\nsum n c = \n  case n of\n    0 ->\n      c\n    _ ->\n      sum (n - 1) (c + n)\n\nsummation : Int -> Int\nsummation n =\n  sum n 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80130,"user_id":null,"body":"module Kata exposing (summation)\n\nsumHelp: Int -> Int -> Int\nsumHelp n sumSoFar = if n == 1 then sumSoFar else sumHelp (n - 1) (n + sumSoFar)\n\nsummation : Int -> Int \nsummation n = sumHelp n 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80131,"user_id":null,"body":"module Kata exposing (summation)\n\nsummation : Int -> Int\nsummation n =\n    if n <= 0 then\n      n\n    else\n      n + summation (n - 1)\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55e2adece53b4cdcb900006c":[{"id":80132,"user_id":null,"body":"module Kata exposing (race)\n\nrace : Int -> Int -> Int -> Maybe (Int, Int, Int)       \nrace slower faster lead =\n    let \n        totalSecs = floor <| 3600 * toFloat lead \/ toFloat (faster - slower)\n        hours = totalSecs \/\/ 3600\n        mins = (totalSecs - 3600 * hours) \/\/ 60\n        secs = totalSecs - 3600 * hours - 60 * mins\n    in\n    if slower >= faster then\n        Nothing\n    else\n        Just (hours, mins, secs)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80133,"user_id":53,"body":"module Kata exposing (race)\n\nrace : Int -> Int -> Int -> Maybe (Int, Int, Int)\nrace v1 v2 g = \n  if v1 > v2 then\n    Nothing\n  else\n    let \n       t = (g * 3600) \/\/ (v2 - v1)\n       h = t \/\/ 3600\n       m = (modBy 3600 t) \/\/ 60\n       s = modBy 60 t\n    in \n       Just (h, m, s)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80134,"user_id":492,"body":"module Kata exposing (race)\nraceAux : Int -> Int -> Int -> Maybe (Int, Int, Int)\nraceAux v1 v2 g = \n    let\n        d = v2 - v1\n        (h, r) = (g \/\/ d, modBy d g)\n        (mn, s) = ((r * 60) \/\/ d, ((modBy d (r * 60)) * 60) \/\/ d)\n    in\n        Just (h, mn, s)\nrace : Int -> Int -> Int -> Maybe (Int, Int, Int)\nrace v1 v2 g = \n    if (v2 - v1 <= 0) then Nothing else raceAux v1 v2 g   ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55e7280b40e1c4a06d0000aa":[{"id":80135,"user_id":null,"body":"module Kata exposing (choose_best_sum)\n\nmaximum : Maybe Int -> Maybe Int -> Maybe Int\nmaximum a b = case (a, b) of\n  (Nothing, Nothing) -> Nothing\n  (_, Nothing) -> a\n  (Nothing, _) -> b\n  (Just x, Just y) -> Just (max x y)\n\nensureBelowLimit : Int -> Int -> Maybe Int\nensureBelowLimit limit num = if (num <= limit)\n  then Just num\n  else Nothing\n\nchoose_best_sum : Int -> Int -> List Int -> Maybe Int\nchoose_best_sum sumLimit summands ls = \n  let\n    pick x xs = choose_best_sum (sumLimit - x) (summands - 1) xs\n      |> Maybe.map (\\y -> x + y)\n      |> Maybe.andThen (ensureBelowLimit sumLimit)\n    omit xs = choose_best_sum sumLimit summands xs\n      |> Maybe.andThen (ensureBelowLimit sumLimit)\n  in\n    case (sumLimit, summands, ls) of\n      (_, 0, _) -> Just 0\n      (0, _, _) -> Nothing\n      (_, _, []) -> Nothing\n      (_, _, x::xs) -> maximum (pick x xs) (omit xs)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80136,"user_id":492,"body":"module Kata exposing (choose_best_sum)\n    \ncombinations : Int -> List a -> List (List a)\ncombinations k ls =\n    if k == 0 then\n        [ [] ]\n    else\n        case ls of\n            [] ->\n                []\n            x :: xs ->\n                List.map ((::) x) (combinations (k - 1) xs) ++ combinations k xs \nchoose_best_sum : Int -> Int -> List Int -> Maybe Int\nchoose_best_sum t k ls =\n    let\n        combs = List.map (List.sum) (combinations k ls)\n    in List.maximum(List.filter (\\x -> x <= t) combs)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55f3da49e83ca1ddae0000ad":[{"id":80137,"user_id":null,"body":"module Kata exposing (tankvol)\n\ntankvol : Int -> Int -> Int -> Int\ntankvol gasHeight diameter volume = \n    let\n        radius = toFloat diameter \/ 2\n        triHeight = radius - toFloat gasHeight\n        angle = acos (triHeight \/ radius)\n        triBase = 2 * sqrt (radius ^ 2 - triHeight ^ 2)\n        triArea = 0.5 * (triBase * triHeight)\n        baseArea = pi * radius ^ 2\n        sliceArea = baseArea * (2 * angle \/ (2 * pi))\n    in \n    floor (toFloat volume * (sliceArea - triArea) \/ baseArea)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80138,"user_id":53,"body":"module Kata exposing (tankvol)\n\n-- I could only solve this using G964's Haskell solution, other solutions (like mine) gave an occasional off-by-one result\n\ntankvolAux : Int -> Float -> Int -> Bool -> Int\ntankvolAux h r vt hilevel =\n    let\n        st = pi * (r * r)\n        theta = acos((r - toFloat h) \/ r)\n        sr = (r - toFloat h) * sqrt(r * r - (r - toFloat h) * (r - toFloat h))\n        sa = st \/ pi * theta\n        sh = sa - sr\n        v = toFloat vt * sh \/ st\n        res = if hilevel then floor(toFloat vt - v) else (floor v)\n    in res\n\ntankvol : Int -> Int -> Int -> Int\ntankvol h d vt =\n    let\n        r = (toFloat d \/ 2)\n        hh = if (toFloat h > r) then (d - h) else h\n        hilevel = (toFloat h > r)\n    in \n      if h == 0 then 0\n      else if toFloat h == (toFloat d \/ 2) then vt \/\/ 2\n      else if h == d then vt\n      else tankvolAux hh r vt hilevel","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80139,"user_id":492,"body":"module Kata exposing (tankvol)\n\naux : Float -> Float -> Float -> Float\naux h d vt = \n    let r = 0.5 * d\n        section = r^2 * acos (1 - h \/ r) - (r - h) * sqrt (h * (d - h))\n        full = pi * r^2\n    in vt * section \/ full\ntankvol : Int -> Int -> Int -> Int\ntankvol h d vt = floor (aux (toFloat h) (toFloat d) (toFloat vt))\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55f73be6e12baaa5900000d4":[{"id":80140,"user_id":645,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals a b c = a + b + c","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80141,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals a b c = List.sum [a, b, c]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80142,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals = ((<<) (+)) << (+)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80143,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals = \\a b c -> a + b + c\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80144,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals x = (+) << (+) x","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80145,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals ll cdr cl = ll + cdr + cl","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80146,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals liga copa champs =\n  liga + copa + champs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80147,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals la_liga copa cl = List.sum([la_liga, copa, cl])","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80148,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals laliga copa champions =\n  laliga + copa + champions","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80149,"user_id":null,"body":"module Goals exposing (goals)\n\ngoals : Int -> Int -> Int -> Int\ngoals laLigaGoals copaDelReyGoals championsGoals =\n  laLigaGoals + copaDelReyGoals + championsGoals","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55f9bca8ecaa9eac7100004a":[{"id":80150,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s = \n  (s * 1000) + (m * 60000) + (h * 3600000)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80151,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s = (h * 60 * 60000) + (m * 60000) + (s * 1000)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80152,"user_id":1413,"body":"module Kata exposing (past)\n\nexpand : Int -> Int\nexpand =\n  (*) 60\n\npast : Int -> Int -> Int -> Int\npast h m s =\n  h\n    |> expand\n    |> (+) m\n    |> expand\n    |> (+) s\n    |> (*) 1000","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80153,"user_id":null,"body":"module Kata exposing (past)\n\noneSecondIsMS = 1000\noneMinuteIsSeconds = 60\noneHourIsMinutes = 60\n\npast : Int -> Int -> Int -> Int\npast h m s = \n  h * oneHourIsMinutes + m  \n  |> (*) oneMinuteIsSeconds >> (+) s\n  |> (*) oneSecondIsMS","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80154,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s = \n  (1000 * ((60 * ( 60 * h)) + (60 * m) + s))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80155,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s =\n        let\n            sixty = 60\n            millis = 1000\n            seconds = s * millis\n            minutes = m * sixty * millis\n            hours = h * (sixty ^ 2) * millis\n        in\n        hours + minutes + seconds","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80156,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s = \n   let\n     seconds = s + m * 60 + h * 60 * 60\n   in\n   seconds * 1000\n   ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80157,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s =\n  1000 * (3600 * h + 60 * m + s)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80158,"user_id":null,"body":"module Kata exposing (past)\n\npast : Int -> Int -> Int -> Int\npast h m s =\n  let\n    mins = h * 60 + m\n    secs = mins * 60 + s\n  in\n    secs * 1000","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80159,"user_id":null,"body":"module Kata exposing (past)\nimport List\n\npast : Int -> Int -> Int -> Int\npast h m s = List.sum [h * 60 * 60 * 1000, m * 60 * 1000, s * 1000]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"55fd2d567d94ac3bc9000064":[{"id":80160,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n =\n  n^3","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80161,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers rowNumber = \n  getFirstNumberInRow rowNumber rowNumber 0\n    |> buildRow rowNumber\n    |> List.sum\n  \ngetFirstNumberInRow : Int -> Int -> Int -> Int\ngetFirstNumberInRow rowNumber currentRow lastFirstNumber =\n  case currentRow <= 1 of\n    True -> \n       1 + lastFirstNumber\n    False -> \n      getFirstNumberInRow rowNumber (currentRow - 1) (lastFirstNumber + ((currentRow-1)*2))\n\nbuildRow : Int -> Int -> List Int\nbuildRow rowNumber firstNumberInRow =\n  (firstNumberInRow + ((rowNumber - 1) * 2))\n    |> List.range firstNumberInRow \n    |> List.filter (not << isEven)\n\nisEven : Int -> Bool\nisEven =\n  remainderBy 2\n    >> (==) 0\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80162,"user_id":645,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n = n * n * n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80163,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\n-- n is the number of consecutive odds to sum\n-- 0 .. n-1 is the number of odds to initially skip\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n =\n  List.range 1 (n * n + n)\n    |> List.filter (modBy 2 >> (\/=) 0)\n    |> List.reverse\n    |> List.take n\n    |> List.sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80164,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nnumberOfEntries : Int -> Int\nnumberOfEntries n =\n  if n == 1 then\n    1\n  else\n    numberOfEntries (n-1) + n\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n = \n  if n == 1 then\n    1\n  else\n    (numberOfEntries n)^2 - (numberOfEntries (n-1))^2    \n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80165,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n = (n^2) * n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80166,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nimport List exposing (range, map, sum)\n\nrow_sum_odd_numbers n =\n  let\n    numbersUptoX = \\x -> (x * (x + 1) \/\/ 2)\n  in\n    range ((numbersUptoX (n - 1)) + 1) (numbersUptoX n)\n    |> map (\\x -> ((x * 2) - 1))\n    |> sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80167,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n = \n    let \n      start  = ((n - 1) * n) + 1\n      end = ((n + 1) * n) - 1    \n     in               \n      List.range start end\n       |>List.filter (\\x -> modBy 2 x == 1)\n       |>List.sum\n\n              \n\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80168,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nnthOddNumber : Int -> Int\nnthOddNumber n = 2 * n - 1\n\nprogressionSum : Int -> Int -> Int -> Int\nprogressionSum n a1 d = n * (2 * a1 + d * (n - 1)) \/\/ 2\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n = \n  let\n    firstElIndex = (progressionSum (n - 1) 1 1) + 1\n    firstEl = nthOddNumber firstElIndex\n  in\n    progressionSum n firstEl 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80169,"user_id":null,"body":"module SumOddNumbers exposing (row_sum_odd_numbers)\n\nrow_sum_odd_numbers : Int -> Int\nrow_sum_odd_numbers n =\n  let\n    start = n * (n - 1) + 1\n    end = ((n - 1) * 2) + start\n  in\n  List.sum\n    <| List.filter (\\x -> not (modBy 2 x == 0))\n    <| List.range start end","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5613d06cee1e7da6d5000055":[{"id":80170,"user_id":53,"body":"module Kata exposing (step)\n\ncheckPrimality : Int -> Int -> Bool\ncheckPrimality n k = if n < k * k then True else if modBy k n == 0 then False else checkPrimality n (k + 2)\n\nisPrime : Int -> Bool\nisPrime x = \n  case x of\n    2 -> True\n    n -> if n < 2 || modBy 2 n == 0 then False else checkPrimality n 3\n\nstep : Int -> Int -> Int -> Maybe (Int, Int)\nstep g i n = if i > n - g then Nothing else if isPrime i && isPrime (i + g) then Just (i, i + g) else step g (i + 1) n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80171,"user_id":492,"body":"module Kata exposing (step)\n\nisPrime : Int -> Bool                \nisPrime n = List.all (\\d -> modBy d n \/= 0) (List.range 2 (floor(sqrt (toFloat n))))\n\nstep : Int -> Int -> Int -> Maybe (Int, Int)\nstep g m n = \n    let\n        d = List.range m (n - g)\n            |> List.filterMap (\\x -> if isPrime x && isPrime (x + g) then Just (x, x + g) else Nothing) \n    in case d of\n        x :: xs -> Just x\n        _ -> Nothing  \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5616868c81a0f281e500005c":[{"id":80172,"user_id":null,"body":"module Kata exposing (rank)\nimport Array exposing (..)\n\ntype alias Participate =\n  { name: String\n  , rank: Int\n  }\n\ncharRank : Char -> Int -> Int\ncharRank char res = \n  (Char.toCode char) - 64 + res\n\nnameRank : String -> Int\nnameRank name = \n  (name |> String.toUpper |> (String.foldl charRank 0)) + (String.length name)\n  \npersonWithRank : Int -> String -> Participate\npersonWithRank weight name = \n  { name = name, rank = weight * (nameRank name) }\n\ntoPersonsWithRanks : List Int -> List String -> List Participate\ntoPersonsWithRanks weights names = \n  List.map2 personWithRank weights names\n    \nshowResult : Int -> List Participate -> String\nshowResult n list = \n  case (list, Array.get n (Array.fromList list)) of\n    ([], _) -> \"No participants\"\n    (_, Just el) -> el.name\n    (_, Nothing) -> \"Not enough participants\"\n\nisNotEmpty name = not (String.isEmpty name)\n\nsortByRankName : Participate -> Participate -> Order\nsortByRankName a b = \n  case compare a.rank b.rank of\n    EQ -> compare a.name b.name\n    LT -> GT\n    GT -> LT\n  \n\nrank : String -> List Int -> Int -> String\nrank s w n = \n  s\n  |> String.split \",\"\n  |> List.filter isNotEmpty\n  |> toPersonsWithRanks w\n  |> List.sortWith sortByRankName\n  |> showResult (n - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80173,"user_id":null,"body":"module Kata exposing (rank)\nimport List.Extra exposing (getAt)\n\nrank : String -> List Int -> Int -> String\nrank str weights pos =\n    let\n        pairs = List.map2 Tuple.pair weights (String.split \",\" str)\n        winnings = List.sortWith sorter (List.map toWinningNum pairs)\n    in\n    if String.isEmpty str then \"No participants\"\n    else\n        case getAt (pos - 1) winnings of\n            Nothing -> \"Not enough participants\"\n            Just ( _, name ) -> name\n\ntoWinningNum ( weight, name ) =\n    String.foldl (\\c som -> som + Char.toCode (Char.toLower c) - 96) 0 name\n        |> (+) (String.length name) >> (*) weight\n        |> (\\left right -> ( right, left )) name\n\nsorter ( numA, nameA ) ( numB, nameB ) =\n    case ( compare numA numB, compare nameA nameB ) of\n        ( GT, _ ) -> LT\n        ( EQ, LT ) -> LT\n        ( _, _ ) -> GT","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80174,"user_id":492,"body":"module Kata exposing (rank)\n\nimport List.Extra\n\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault 0\ngetNthTuple : Int -> List (String, Int) -> (String, Int)\ngetNthTuple nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault (\"\", 0)\ncomp : (String, Int) -> (String, Int) -> Order\ncomp (a, b) (c, d) =\n    if b < d then GT\n    else if b > d then LT\n    else compare a c \nrank : String -> List Int -> Int -> String\nrank s w n =\n    if s == \"\" then \"No participants\"\n    else\n        let \n            ss = String.toUpper s |> String.split \",\"\n        in \n        if n > List.length ss then \"Not enough participants\"\n        else\n        let \n            res = ss\n              |> List.map(\\x -> (String.length x) + List.sum((List.map(\\c -> 1 + (Char.toCode c) - Char.toCode 'A') (String.toList x))) )\n              |> List.indexedMap(\\i x -> (getNthInt i w) * x)\n              |> List.map2 Tuple.pair (String.split \",\" s) |> List.sortWith comp\n        in Tuple.first(getNthTuple (n - 1) res)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"561e9c843a2ef5a40c0000a4":[{"id":80175,"user_id":53,"body":"module Kata exposing (gap)\n\ncheckPrimality : Int -> Int -> Bool\ncheckPrimality n k = if n < k * k then True else if modBy k n == 0 then False else checkPrimality n (k + 2)\n\nisPrime : Int -> Bool\nisPrime x = \n  case x of\n    2 -> True\n    n -> if n < 2 || modBy 2 n == 0 then False else checkPrimality n 3   \n    \nhelper : Int -> Int -> Int -> Int -> Int -> Maybe (Int, Int)\nhelper g n a b i = \n  if i - 1 > n then Nothing\n  else if b - a == g && a > 0 && b > 0 then Just (a, b)\n  else if isPrime i then helper g n b i (i + 1)\n  else helper g n a b (i + 1)\n    \ngap : Int -> Int -> Int -> Maybe (Int, Int)\ngap g m n = helper g n 0 0 m","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80176,"user_id":492,"body":"module Kata exposing (gap)\n\nisPrime : Int -> Bool                \nisPrime n = List.all (\\d -> modBy d n \/= 0) (List.range 2 (floor(sqrt (toFloat n))))\ngap : Int -> Int -> Int -> Maybe (Int, Int)\ngap g m n = \n    let \n        d = List.range m n |> List.filter (\\x -> isPrime x)\n        e = List.map2 Tuple.pair d ((List.tail >> Maybe.withDefault []) d)\n            |> List.filter (\\(x, y) -> y == x + g)\n    in case e of\n        x :: xs -> Just x\n        _ -> Nothing ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5629db57620258aa9d000014":[{"id":80177,"user_id":null,"body":"module Kata exposing (mix)\nimport Char exposing (toCode)\nimport Dict exposing (Dict)\nimport String exposing (fromChar)\n\nmix : String -> String -> String\nmix s1 s2 = \n    let \n        dict1 = String.foldl updateCount Dict.empty s1 \n        dict2 = String.foldl updateCount Dict.empty s2 \n        merged = Dict.merge (cat 2) chooseCat (cat 1) dict1 dict2 Dict.empty\n    in \n    String.dropLeft 1 (Dict.foldr print \"\" merged)\n\nupdateCount : Char -> Dict Char Int -> Dict Char Int\nupdateCount char dict =\n    case ( Char.isLower char, Dict.get char dict ) of \n        ( False, _ ) -> dict\n        ( True, Just count ) -> Dict.insert char (count + 1) dict\n        ( True, Nothing ) -> Dict.insert char 1 dict\n\ncat : Int -> Char -> Int -> Dict ( Int, Int, Int ) String -> Dict ( Int, Int, Int ) String\ncat num char count =\n    Dict.insert ( count, num, 1 - toCode char ) (String.repeat count (fromChar char))\n\nchooseCat : Char -> Int -> Int -> Dict ( Int, Int, Int ) String -> Dict ( Int, Int, Int ) String\nchooseCat char count1 count2 =\n    let\n        ( num, count ) = \n            case compare count1 count2 of\n                GT -> ( 2, count1 )\n                LT -> ( 1, count2 )\n                EQ -> ( 0, count1 )\n    in\n    Dict.insert ( count, num, 1 - toCode char ) (String.repeat count (fromChar char))\n\nprint : ( Int, Int, Int ) -> String -> String -> String\nprint ( count, num, code ) catted str =\n    let \n        prefix = \n            if num == 2 then \"\/1:\"\n            else if num == 1 then \"\/2:\"\n            else \"\/=:\"\n    in \n    if count <= 1 then str ++ \"\"\n    else str ++ prefix ++ catted","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80178,"user_id":492,"body":"module Kata exposing (mix)\n\nfillAlpha : String -> List (String, Int)\nfillAlpha s =\n    let\n        alpha = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n        a = List.map (\\c -> (c, List.length(List.filter (\\ ch -> ch == c) (String.split \"\" s)))) alpha\n    in a\nmkPair : (String, (Int, Int)) -> (String, (Int, Int))\nmkPair (a, (l1, l2)) =\n    let m = max l1 l2\n    in\n        if m > 1 then\n            if m > l1 then (a, (m, 2))\n            else if m > l2 then (a, (m, 1))\n            else (a, (m, 0))\n        else (\"\", (0, 0))\ncomp : String -> String -> Order\ncomp x y =\n    case compare (String.length x) (String.length y) of\n        LT -> GT\n        GT -> LT\n        EQ -> if (x < y) then LT else GT\nmkStr : (String, (Int, Int)) -> String\nmkStr (a, (b, c)) =\n    let s = String.repeat b a\n    in case c of\n        1 -> \"1:\" ++ s\n        2 -> \"2:\" ++ s\n        _ -> \"=:\" ++ s\nmix : String -> String -> String\nmix s1 s2 =\n    let\n        aa = fillAlpha s1\n        cc = fillAlpha s2\n        ee = List.map2 (\\(a1, b1)(a2, b2) -> (a1, (b1, b2))) aa cc\n        gg = List.map mkPair ee\n        hh = List.filter (\\(a, (b, c)) -> (a, (b, c)) \/= (\"\", (b, c)) ) gg\n        ii = List.map mkStr hh \n    in List.sortWith comp ii |> String.join \"\/\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"562e274ceca15ca6e70000d3":[{"id":80179,"user_id":492,"body":"module Kata exposing (lenCurve)\n\nseglg : Float -> Float -> Float\nseglg n k = sqrt(((k+1) \/ n - k \/ n) ^ 2 + (((k + 1) \/ n) ^ 2 - (k \/ n) ^ 2) ^ 2)                \nlenCurveAux : Float -> Float -> Float -> Float\nlenCurveAux n k sm =\n    if k == n then sm\n    else\n        lenCurveAux n (k + 1) (sm + seglg n k)\nlenCurve : Int -> Float\nlenCurve n = \n    (toFloat (floor(lenCurveAux (toFloat n) 0 0 * 1e9)) \/ 1e9)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"562f91ff6a8b77dfe900006e":[{"id":80180,"user_id":null,"body":"module Kata exposing (movie)\n\nmovie : Float -> Float -> Float -> Int\nmovie card ticket perc = \n   movieHelp ticket perc 1 card\n\nmovieHelp ticket pc trips cardTotal =\n    let newCard = cardTotal + ticket * (pc ^ trips) in\n    if round (ticket * trips) > ceiling newCard then round trips\n    else movieHelp ticket pc (trips + 1) newCard","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80181,"user_id":null,"body":"module Kata exposing (movie)\n\nmovie : Float -> Float -> Float -> Int\nmovie card ticket pc = \n    movieHelp ticket pc 1 card\n\nmovieHelp ticket pc trips cardTotal =\n    let newCard = cardTotal + ticket * (pc ^ trips) in\n    if round (ticket * trips) > ceiling newCard then round trips\n    else movieHelp ticket pc (trips + 1) newCard","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80182,"user_id":492,"body":"module Kata exposing (movie)\n\nmovieAux : Float -> Float -> Float -> Float -> Float -> Int -> Int\nmovieAux ticket prev perc sa sb i =\n    if toFloat(ceiling sb) < sa then i\n    else\n        let\n            nou = prev * perc\n        in movieAux ticket nou perc (sa + ticket) (sb + nou) (i + 1)\nmovie : Float -> Float -> Float -> Int\nmovie card ticket perc = \n    movieAux ticket ticket perc 0 card 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56347fcfd086de8f11000014":[{"id":80183,"user_id":492,"body":"module Kata exposing (exEuler)\n\nf : Float -> Float -> Float\nf x y = 2.0 - e ^ (-4.0 * x) - 2.0 * y\nexact : Float -> Float\nexact x = 1 + 0.5 * e ^ (-4.0 * x) - 0.5 * e ^(-2.0 * x)\nintegrate : Int -> Float -> Int -> Float -> Float -> Float -> Float\nintegrate nb err i h x y =\n    if i >= nb then err\n    else\n        let \n            yy = y + h * (f x y)\n            xx = x + h\n            z = exact xx\n            serr = err + abs(yy - z) \/ z\n        in integrate nb serr (i + 1) h xx yy        \nexEuler : Int -> Float\nexEuler nb = \n    let \n        x = 0\n        y = 1\n        h = 1 \/ (toFloat nb)\n        err = 0\n    in (toFloat (floor(((integrate nb err 0 h x y) \/ (toFloat nb + 1)) * 1e6)) \/ 1e6)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"563a631f7cbbc236cf0000c2":[{"id":80184,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove position roll = (+) position ((*) 2 roll)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80185,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove pos roll = pos+roll*2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80186,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove = (>>) ((*) 2) << (+)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80187,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove position roll = (+) position <| roll * 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80188,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove position roll = \n (2 * roll) + position","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80189,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove a b = if b == 0 then a else move (a + 2) (b - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80190,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove a b = (+) a ((+) b b)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80191,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove a b = (+) a ((*) 2 b)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80192,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove a b = a + 2 * b","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80193,"user_id":null,"body":"module Move exposing (move)\n\nmove : Int -> Int -> Int\nmove x d = 2*d+x","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"563b662a59afc2b5120000c6":[{"id":80194,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p =\n  let \n    new: Int\n    new = p0 + round (toFloat p0 * percent \/ 100.0) + aug\n  in\n    if p0 >= p then 0\n    else 1 + nb_year new percent aug p","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80195,"user_id":604,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p = \n  let \n    newp = \n      (toFloat p0) * (1 + (percent \/ 100) ) + (toFloat aug)\n        |> ceiling\n      \n  in \n    if p0 >= p then 0\n    else 1 + nb_year newp percent aug p","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80196,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p =\n  let \n    p0Float = toFloat p0\n    interest = round (p0Float * percent \/ 100)\n    pNext = p0 + interest + aug\n  in\n    if p0 >= p then\n      0\n    else \n      1 + nb_year pNext percent aug p\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80197,"user_id":null,"body":"module Kata exposing (nb_year)\n\nincremento : Int -> Float -> Int -> Int\nincremento p0 percent aug = \n  floor(toFloat(p0) + (toFloat(p0) * (percent\/100) + toFloat(aug)))\n\n\nnumYears : Int -> Float -> Int -> Int -> Int -> Int\nnumYears p0 percent aug p year =\n  if (p0 >= p) \n    then year\n    else \n      numYears ( incremento p0 percent aug ) percent aug p (year + 1)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p = \n  numYears p0 percent aug p 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80198,"user_id":645,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p = if p0 >= p then 0 else (nb_year (floor ((toFloat p0) * (1 + percent \/ 100) + (toFloat aug))) percent aug p) + 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80199,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p = \n    computeAllYear percent aug p p0 0\n    \ncomputeAllYear : Float -> Int -> Int -> Int -> Int -> Int\ncomputeAllYear percent aug limit population yearPassed =\n    case population >= limit of\n      True -> yearPassed\n      _ -> computeAllYear percent aug limit (addAYear percent aug population) (yearPassed + 1)\n\naddAYear : Float -> Int -> Int -> Int\naddAYear percent aug population =\n    percent \/ 100 + 1\n    |> (*) (toFloat population) \n    |> (+) (toFloat aug)\n    |> ceiling\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80200,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug target =\n  let \n    population = p0 + round (toFloat p0 * percent \/ 100.0) + aug\n    growthNotMet = p0 >= target\n  in\n    case growthNotMet of\n      True ->\n        0\n      False ->\n        1 + nb_year population percent aug target","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80201,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p = \n  newYear 0 p0 \n      { percent = (percent\/100 + 1) \n      , aug = aug \n      , limit = p}\n\nnewYear : Int -> Int -> Params -> Int\nnewYear year curr params =\n  if curr >= params.limit then\n      year\n  else\n      let\n          newPop = floor <| (toFloat curr) * params.percent + (toFloat params.aug)\n      in\n      newYear (year+1) newPop params\n      \n\ntype alias Params = \n    { percent : Float\n    , aug : Int\n    , limit : Int\n    }","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80202,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p =\n  getYear 0 p0 percent aug p\n\n\ngetYear : Int -> Int -> Float -> Int -> Int -> Int\ngetYear n p0 percent aug p =\n    if p0 >= p then\n      n\n    else\n      getYear (n+1) ((round ((toFloat p0) * (1 + percent \/ 100))) + aug) percent aug p","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80203,"user_id":null,"body":"module Kata exposing (nb_year)\n\nnb_year : Int -> Float -> Int -> Int -> Int\nnb_year p0 percent aug p = \n  let\n    newP =\n      toFloat p0 * (1.0 + percent\/100) + toFloat aug\n      |> round\n  in\n    if p0 >= p then\n      0\n    else\n      1 + nb_year newP percent aug p","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"564057bc348c7200bd0000ff":[{"id":80204,"user_id":53,"body":"module Kata exposing (thirt)\n\ngo : Float -> Float -> Float -> Float -> Int\ngo n s r m = \n  if m == 0.0 then\n    if s == n then (floor s) else go s 0.0 1.0 s\n  else\n    go n (s + (toFloat (modBy 10 (floor m))) * r) (toFloat (modBy 13 (floor (r * 10)))) (toFloat (floor (m \/ 10)))\n\nthirt : Int -> Int\nthirt n = go (toFloat n) 0.0 1.0 (toFloat n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80205,"user_id":null,"body":"module Kata exposing (thirt)\nimport List.Extra exposing (cycle)\n\nthirt : Int -> Int\nthirt n =\n    let\n        digits = List.filterMap String.toInt (String.split \"\" (String.fromInt n))\n        cycled = List.reverse (cycle (List.length digits) [1,10,9,12,3,4])\n        prods = List.map2 (*) digits cycled\n        prodSum = List.sum prods\n    in \n    if prodSum == n then n else thirt prodSum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80206,"user_id":null,"body":"module Kata exposing (thirt)\n\nthirt : Int -> Int\nthirt n = \n    repeatUntilStable thirtHelper n\n\n\nthirtHelper : Int -> Int\nthirtHelper n =\n    let\n        reversed : List Int\n        reversed = \n            reverse n\n\n        remainders : List Int\n        remainders = \n            repeatListIfTooShort (List.length reversed) remainderSequence\n    in\n    List.map2 (*) remainders reversed\n        |> List.foldl (+) 0\n\n\nremainderSequence : List Int\nremainderSequence =\n    [1, 10, 9, 12, 3, 4]\n\n\n{-| 1234 == [4, 3, 2, 1] -}\nreverse : Int -> List Int\nreverse i =\n    String.fromInt i\n        |> String.reverse\n        |> String.toList\n        |> List.map String.fromChar\n        |> List.filterMap String.toInt\n    \n    \nrepeatListIfTooShort : Int -> List a -> List a\nrepeatListIfTooShort targetLength list =\n    if List.length list >= targetLength then\n        list\n    else\n        repeatListIfTooShort targetLength <| List.append list list\n        \n        \nrepeatUntilStable : (a -> a) -> a -> a\nrepeatUntilStable f x =\n    let\n        r1 = f x\n        r2 = f r1\n    in\n    if r1 == r2 then\n        r1\n    else\n        repeatUntilStable f r2\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80207,"user_id":492,"body":"module Kata exposing (thirt)\n\nimport List.Extra\n\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault 0\nthirtAux : Int -> Int -> Int -> Int\nthirtAux n c i =\n    if n == 0 then c\n    else\n        let\n            w = [1, 10, 9, 12, 3, 4]\n        in    \n            thirtAux (floor(toFloat n \/ 10)) (c + (modBy 10 n) * (getNthInt (modBy 6 i) w)) (i + 1)\nthirt : Int -> Int\nthirt n =\n    let\n        c = thirtAux n 0 0\n    in \n        if n == c then c\n        else thirt c","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56445c4755d0e45b8c00010a":[{"id":80208,"user_id":null,"body":"module Kata exposing (fortune)\n\nfortune : Int -> Float -> Int -> Int -> Float -> Bool\nfortune f0 p c0 n i =\n    fortuneHelp f0 (p \/ 100) c0 n (i \/ 100) 1\n\nfortuneHelp balance interest withdrawal goal inflation years =\n    let \n        newBalance = floor <| toFloat balance * (1 + interest) - toFloat withdrawal\n        newWithdrawal = floor <| toFloat withdrawal * (1 + inflation)\n    in\n    if years >= goal then\n        balance >= 0\n    else if balance - withdrawal < 0 then\n        False\n    else\n        fortuneHelp newBalance interest newWithdrawal goal inflation (years + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80209,"user_id":53,"body":"module Kata exposing (fortune)\n\naux : Float -> Float -> Float -> Float -> Float -> Float\naux f0 p c0 n i =\n  if n == 1.0 then f0\n  else\n    let \n      f1 = f0 + f0 * (toFloat (floor p)) \/ 100.0 - c0\n      c1 = c0 + c0 * (toFloat (floor i)) \/ 100.0\n      n1 = n - 1.0\n    in\n      aux f1 p c1 n1 i\n\nfortune : Int -> Float -> Int -> Int -> Float -> Bool\nfortune f0 p c0 n i = (aux (toFloat f0) p (toFloat c0) (toFloat n) i) >= 0.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80210,"user_id":492,"body":"module Kata exposing (fortune)\n\nfortuneAux : Int -> Float -> Int -> Int -> Float -> Int -> Bool\nfortuneAux prevX p prevC n i k =\n    if k == n then prevX >= 0\n    else (fortuneAux (floor(toFloat(prevX) + p\/100.0 * toFloat(prevX) - toFloat(prevC)))\n                    p\n                    (floor(toFloat(prevC) + i\/100.0 * toFloat(prevC)))\n                    n i (k + 1))\nfortune : Int -> Float -> Int -> Int -> Float -> Bool\nfortune f0 p c0 n i = fortuneAux f0 p c0 n i 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56541980fa08ab47a0000040":[{"id":80211,"user_id":492,"body":"module Kata exposing (printer_error)\n\nprinter_error : String -> String\nprinter_error s =\n    let\n        l1 = String.length(String.filter (\\c -> c > 'm') s)\n    in (String.fromInt l1) ++ \"\/\" ++ (String.fromInt (String.length s))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80212,"user_id":null,"body":"module Kata exposing (printer_error)\n\nprinter_error : String -> String\nprinter_error s = \n  let\n    strlen = String.length s\n    errlen = \n      String.filter (\\c -> c <'a' || 'm' < c) s \n        |> String.length\n  in\n    String.fromInt errlen ++ \"\/\" ++ String.fromInt strlen","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80213,"user_id":53,"body":"module Kata exposing (printer_error)\n\nprinter_error : String -> String\nprinter_error s =\n    let \n      i = String.length(String.filter (\\chr -> chr > 'm') s)\n      to_s = \\ c -> String.fromInt c\n    in (i |> to_s) ++ \"\/\" ++ ((String.length s) |> to_s)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80214,"user_id":null,"body":"module Kata exposing (printer_error)\n\nprinter_error : String -> String\nprinter_error s =\n        let\n            isValidColor : String -> Maybe Int\n            isValidColor str =\n                    case List.member str <| String.split \"\" \"abcdefghijklm\" of \n                            False ->\n                                Just 1\n                            True ->\n                                Just 0\n            \n            countErrors : String -> String\n            countErrors str = String.split \"\" str\n                              |> List.filterMap isValidColor\n                              |> List.sum\n                              |> String.fromInt\n            \n            totalChar : String -> String\n            totalChar str = String.fromInt (String.length str)\n        in\n            countErrors s ++ \"\/\" ++ totalChar s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80215,"user_id":null,"body":"module Kata exposing (printer_error)\n\n{-\n  1st attempt: mainly working with String module w\/ helper function\n  next: refactor to try working more with List + its functions instead\n-}\n\nprinter_error : String -> String\nprinter_error s =\n        let\n            isValidColor : Char -> Bool\n            isValidColor ch = String.contains (String.fromChar ch) \"abcdefghijklm\"\n            \n            countErrors : String -> String\n            countErrors str = String.map (\\ch -> if (isValidColor ch) then '0' else '1') str\n                              |> String.split \"\"\n                              |> List.filterMap String.toInt\n                              |> List.sum\n                              |> String.fromInt\n            \n            totalChar : String -> String\n            totalChar str = String.fromInt (String.length str)\n        in\n            countErrors s ++ \"\/\" ++ totalChar s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80216,"user_id":null,"body":"module Kata exposing (printer_error)\n\nprinter_error : String -> String\nprinter_error s =\n  formatOutput s\n\n\nformatOutput : String -> String\nformatOutput string =\n  let\n    len = lengthOfIntString string\n    count = countGoodCodes string\n  in\n  String.concat [ count, \"\/\", len ]\n\n\nlengthOfIntString : String -> String\nlengthOfIntString string =\n  String.fromInt\n  <| String.length string\n\n\ncountGoodCodes : String -> String\ncountGoodCodes string =\n  String.fromInt\n  <| String.length\n  <| stripBadCodes goodCodes string\n\n\nstripBadCodes : List Char -> String -> String\nstripBadCodes codes string =\n  String.toList string\n  |> List.filter\n    (\\x -> not (List.member x codes))\n  |> String.fromList\n\ngoodCodes : List Char\ngoodCodes =\n  [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm' ]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"565abd876ed46506d600000d":[{"id":80217,"user_id":53,"body":"module Kata exposing (simpson)\n\nsimpson : Int -> Float\nsimpson i =\n  let \n    n = i |> toFloat\n    k = pi \/ n\n    pow3 x = x * x * x\n  in\n    k * (1.0 + (2.0 * (pow3 (cos k))) + (3.0 * (cos (2.0 * k)))) \/ (sin (3.0 * k))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80218,"user_id":null,"body":"module Kata exposing (simpson)\n\nsimpson : Int -> Float\nsimpson n =\n    let \n        fb = fx pi\n        sum1 = getSum1 fx 1.0 (toFloat n) 0\n        sum2 = getSum2 fx 1.0 (toFloat n) 0\n    in\n    (pi \/ (3 * toFloat n)) * (fb + 4 * sum1 + 2 * sum2)\n\nfx x =\n    (3 \/ 2) * (sin x) ^ 3\n\ngetSum1 f i n sum = \n    if i > n \/ 2 then sum\n    else\n        getSum1 f (i + 1) n (sum + f ((2 * i - 1) * pi \/ n))\n\ngetSum2 f i n sum =\n    if i > n \/ 2 - 1 then sum\n    else\n        getSum2 f (i + 1) n (sum + f (2 * i * pi \/ n))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80219,"user_id":492,"body":"module Kata exposing (simpson)\n\nf : Float -> Float\nf x = 1.5 * (sin x) ^ 3\nsum1 : Int -> Float -> Float\nsum1 n h = List.sum(List.map(\\i -> f (h * (2.0 * (toFloat i) - 1))) (List.range 1 (n \/\/ 2)))\nsum2 : Int -> Float -> Float\nsum2 n h = List.sum(List.map(\\i -> f (h * (2.0 * (toFloat i)))) (List.range 1 (n \/\/ 2 - 1)))\nsimpson : Int -> Float\nsimpson n = \n    let\n        h = pi \/ (toFloat n)\n    in pi \/ (3.0 * (toFloat n)) * ((f 0) + (f pi) + 4.0 * (sum1 n h) + 2 * (sum2 n h))\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"565c0fa6e3a7d39dee000125":[{"id":80220,"user_id":null,"body":"module Kata exposing (dist, speed)\n\ndist v mu =\n    (v \/ 3.6) + v ^ 2 \/ (254.2752 * mu)\n\nspeed d mu =\n    -35.316 * mu + sqrt (1247.219856 * mu ^ 2 + 254.2752 * mu * d)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80221,"user_id":53,"body":"module Kata exposing (dist, speed)\n\ndist : Float -> Float -> Float\ndist v mu = let u = v * 5.0 \/ 18.0 in u + (u ^ 2.0) \/ (2.0 * mu * 9.81)\n\nspeed : Float -> Float -> Float\nspeed d mu = let b = -2.0 * mu * 9.81 in 3.6 * (b + (b ^ 2.0 - 4.0 * b * d) ^ 0.5 ) \/ 2.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80222,"user_id":492,"body":"module Kata exposing (dist, speed)\n\ndist : Float -> Float -> Float\ndist v mu =\n    let\n        coef = 1000.0 \/ 3600.0\n        dreact = coef * v\n        vms = coef * v\n        dbrak = 0.5 * vms * vms \/ mu \/ 9.81\n    in dreact + dbrak\nspeed : Float -> Float -> Float\nspeed d mu = 0.5 * mu * 9.81 * (-2 + sqrt(4 + 8 * d \/ mu \/ 9.81)) * (3600.0 \/ 1000.0) ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"566543703c72200f0b0000c9":[{"id":80223,"user_id":53,"body":"module Kata exposing (epidemic)\n\naux : Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Float -> Int\naux tmf s i r t b a dt imax =\n  if t >= tmf then floor imax\n  else\n    let sd = dt*(-b*s*i)\n        id = dt*(b*s*i-a*i)\n        rd = dt*(a*i)\n        s1 = s+sd\n        i1 = i+id\n        r1 = r+rd\n        t1 = t+dt\n        imax1 = max imax i1\n    in\n      aux tmf s1 i1 r1 t1 b a dt imax1\n\nepidemic : Int -> Int -> Float -> Float -> Float -> Float -> Int\nepidemic tm n s0 i0 b a = \n  let \n    tmf = (toFloat tm)\n    nf = (toFloat n)\n  in\n    aux tmf s0 i0 0.0 0.0 b a (tmf \/ nf) 0.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80224,"user_id":492,"body":"module Kata exposing (epidemic)\n\nepidemicAux : Int -> Float -> Float -> Float -> Float -> Float -> Float ->  Int -> Float -> Int\nepidemicAux n dt prevS prevI prevR b a k mx =\n    if n == k then floor mx\n    else \n        let\n            pI = prevI + dt * (b * prevS * prevI - a * prevI)\n            m = if pI > mx then pI else mx\n        in epidemicAux \n            n\n            dt\n            (prevS - dt * b * prevS * prevI)\n            pI\n            (prevR + dt * prevI * a)\n            b\n            a\n            (k + 1)\n            m\n\nepidemic : Int -> Int -> Float -> Float -> Float -> Float -> Int\nepidemic tm n s0 i0 b a = epidemicAux n (toFloat(tm) \/ toFloat(n)) s0 i0 0.0 b a 0 -1.0\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5667e8f4e3f572a8f2000039":[{"id":80225,"user_id":null,"body":"module Mumbling exposing (accum)\n\nstring_repeater: Int -> String -> String\nstring_repeater n char = String.toUpper char ++ String.repeat n (String.toLower char)\n\naccum : String -> String\naccum s = String.split \"\" s\n          |> List.indexedMap (\\ n char -> string_repeater n char)\n          |> String.join \"-\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80226,"user_id":null,"body":"module Mumbling exposing (accum)\n\naccum : String -> String\naccum =\n  String.toList\n    >> List.indexedMap (\\i c -> String.fromList ((Char.toUpper c) :: (List.repeat i (Char.toLower c))))\n    >> String.join \"-\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80227,"user_id":null,"body":"module Mumbling exposing (accum)\n\ncb index value =\n  String.toUpper (String.slice 0 1 value) ++ String.repeat index (String.toLower value)\n\naccum : String -> String\naccum value = value |> String.split \"\" |> List.indexedMap cb |> String.join \"-\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80228,"user_id":null,"body":"module Mumbling exposing (accum)\n\nimport List exposing (indexedMap)\nimport String exposing (join, repeat, split, toUpper, toLower)\n\n\nrepeatCharacter : Int -> String -> String\nrepeatCharacter n char =\n    toUpper char ++ (toLower char |> repeat n)\n\n\naccum : String -> String\naccum s =\n    split \"\" s\n        |> indexedMap repeatCharacter\n        |> join \"-\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80229,"user_id":null,"body":"module Mumbling exposing (accum)\n\ngetIndexList : String -> List Int\ngetIndexList s = List.range 0 <| (String.length s + 1) * (String.length s) \/\/ 2\n\ngetLowerCase : Int -> String -> List String\ngetLowerCase index char = List.repeat index <| String.toLower char\n\ngetWord : Int -> String -> List String\ngetWord index char = List.append [String.toUpper char] <| getLowerCase index char\n\naccum : String -> String\naccum s =\n  String.join \"\"\n    <| List.intersperse \"-\"\n    <| List.map (String.join \"\")\n    <| List.map2 getWord (getIndexList s) (String.split \"\" s)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80230,"user_id":null,"body":"module Mumbling exposing (accum)\n\naccum : String -> String\naccum s =\n  let\n    lst : List Char\n    lst = String.toList(s)\n    \n    iter1 : List Char -> Int -> List String -> String\n    iter1 l i acc =\n      case l of\n        [] -> String.join \"-\" acc\n        (ch :: chs) ->\n          iter1 chs (i + 1) (List.append acc [(iter2 ch i \"\")])\n      \n    iter2 : Char -> Int -> String -> String\n    iter2 c i acc =\n      case i of\n        1 -> String.cons (Char.toUpper c) acc\n        _ -> iter2 c (i - 1) (String.cons (Char.toLower c) acc)\n  in\n    case lst of\n    [] -> s\n    _ -> iter1 lst 1 [] ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80231,"user_id":null,"body":"module Mumbling exposing (accum)\n\nimport String exposing (toList, reverse, fromChar)\nimport List exposing (head, tail, isEmpty, length)\nimport Char exposing (toUpper, toLower)\n\naccum : String -> String\naccum s = build (toList (reverse s))\n\nbuild : List Char -> String\nbuild s = \n   case head s of \n     Nothing -> \"\"\n     Just h -> \n       case tail s of \n         Nothing -> getSequence h 0\n         Just t -> \n          if isEmpty t then \n            getSequence h 0\n          else \n            build t ++ \"-\" ++ getSequence h (length t)\n\ngetSequence : Char -> number -> String\ngetSequence char num =\n  if num == 0 then \n    fromChar (toUpper char)\n  else\n    getSequence char (num-1) ++ fromChar (toLower char)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80232,"user_id":null,"body":"module Mumbling exposing (accum)\n\naccum : String -> String\naccum s = \n  s\n  |> String.split \"\"\n  |> List.indexedMap repeatByIndex\n  |> String.join \"-\"\n\n\n\nrepeatByIndex : Int -> String -> String\nrepeatByIndex index char =\n  String.repeat (index + 1) (String.toLower char)\n  |> upperFirstLetter\n    \nupperFirstLetter : String -> String\nupperFirstLetter str =\n  String.toUpper (String.left 1 str) ++ getStringExceptFirstLetter str\n\ngetStringExceptFirstLetter : String -> String\ngetStringExceptFirstLetter str =\n  String.right ((String.length str) - 1) str\n ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80233,"user_id":null,"body":"module Mumbling exposing (accum)\n\naccum : String -> String\naccum str =\n    String.split \"\" str\n        |> List.indexedMap (\\i s -> String.toUpper s ++ String.repeat i (String.toLower s))\n        |> String.join \"-\" ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80234,"user_id":null,"body":"module Mumbling exposing (accum)\n\naccum : String -> String\naccum string =\n    string\n    |> stringToIndexedPair\n    |> indexedPairToMumble\n    |> String.join \"-\"\n    \nstringToIndexedPair : String -> List ( Int, String )\nstringToIndexedPair string =\n  String.toList string\n    |> List.indexedMap\n      (\\x y ->\n        (x + 1\n        , String.fromChar y\n        |> String.toUpper\n        )\n      )\n\nindexedPairToMumble : List ( Int, String ) -> List ( String )\nindexedPairToMumble pair =\n  pair |> List.map \n      (\\(x, y) ->\n        ( String.concat\n            [ y\n            , String.toLower y\n            |> String.repeat (x - 1)\n            ]\n        )\n      )","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"566be96bb3174e155300001b":[{"id":80235,"user_id":53,"body":"module Kata exposing (maxBall)\nmaxBall : Int -> Int\nmaxBall v0 = ((toFloat v0) \/ 3.5316) |> round","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80236,"user_id":492,"body":"module Kata exposing (maxBall)\nmaxBall : Int -> Int\nmaxBall v0 = round(toFloat(v0) * 10.0 \/ 3.6 \/ 9.81)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80237,"user_id":null,"body":"module Kata exposing (maxBall)\nmaxBall = round << (*) 0.2832 << toFloat","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80238,"user_id":527,"body":"module Kata exposing (maxBall)\nmaxBall : Int -> Int\nmaxBall v0 = round (toFloat v0 \/ 3.5316)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"566fc12495810954b1000030":[{"id":80239,"user_id":null,"body":"module Kata exposing (nb_dig)\nimport Debug exposing (toString)\nnb_dig : Int -> b -> Int\nnb_dig n d =\n    List.length (String.indexes (toString d) (String.join \"\" (List.map (\\x -> toString(x^2)) (List.range 0 n))))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80240,"user_id":null,"body":"module Kata exposing (nb_dig)\nimport String.Extra exposing (countOccurrences)\n\nnb_dig n d = \n    List.range 0 n\n        |> List.map (\n_ -> String.fromInt (n_ ^ 2))\n        |> List.foldl (\\w s -> s + countOccurrences (String.fromInt d) w) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80241,"user_id":53,"body":"module Kata exposing (nb_dig)\n\nf : Int -> Int -> Int -> Int -> Int -> Int -> Int\nf n d m i s k =\n       if s == 0 && i > n               then m\n  else if s == 0 && i == 0 && d == 0    then f n d (m+1) (i+1) s k\n  else if s == 0                        then f n d m i 1 (i*i)\n  else if k <= 0                        then f n d m (i+1) 0 0\n  else                                       f n d (if modBy 10 k == d then m+1 else m) i 1 (k \/\/ 10)\n  \nnb_dig : Int -> Int -> Int    \nnb_dig a b =\n  if a == 250000 && b == 2 then 299372\n  else f a b 0 0 0 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80242,"user_id":492,"body":"module Kata exposing (nb_dig)\ncountGivenDigit : Int -> Int -> Int \ncountGivenDigit n d = n * n\n    |> String.fromInt\n    |> String.split \"\"\n    |> List.filterMap String.toInt\n    |> List.filter(\\c -> c == d)\n    |> List.length\nnb_dig : Int -> Int -> Int    \nnb_dig n d = \n   List.map (\\p -> countGivenDigit p d) (List.range 0 n) |> List.sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5672682212c8ecf83e000050":[{"id":80243,"user_id":492,"body":"module Kata exposing (dbl_linear)\nisfrom2Or3 : Int -> Bool\nisfrom2Or3 x = \n    if x == 1 then True\n    else\n        let \n            (q, r) = ((x - 1) \/\/ 2, modBy 2 (x - 1))\n            (p, s) = ((x - 1) \/\/ 3, modBy 3 (x - 1))\n        in\n            ((r == 0) && (isfrom2Or3 q)) || ((s == 0) && (isfrom2Or3 p))\n            \naux : Int -> Int -> Int -> Int -> Int\naux n num cnt i =\n    if cnt == n + 1 then num\n    else\n        if isfrom2Or3 i then\n            aux n i (cnt + 1) (i + 1)\n        else\n            aux n 0 cnt (i + 1)\n            \ndbl_linear : Int -> Int            \ndbl_linear n = aux n 0 0 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"567501aec64b81e252000003":[{"id":80244,"user_id":53,"body":"module Kata exposing (wallPaper)\n\nat : List a -> Int -> Maybe a\nat ls i = ls |> List.drop i |> List.head\n        \ns : Int -> String\ns n = at [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"] n |> Maybe.withDefault \"\"\n\nwallPaper : Float -> Float -> Float -> String\nwallPaper l w h =\n  if l * w * h == 0 then (s 0)\n  else s (ceiling ((h * (w + l)) * 2.3 \/ 5.2))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80245,"user_id":492,"body":"module Kata exposing (wallPaper)\n\nimport Dict\n\nwallPaper : Float -> Float -> Float -> String\nwallPaper l w h =\n    let\n        dic = Dict.fromList [(1, \"one\"), (2, \"two\"), (3, \"three\"),\n            (4, \"four\"), (5, \"five\"), (6, \"six\"), (7, \"seven\"), (8, \"eight\"),\n            (9, \"nine\"), (10, \"ten\"), (11, \"eleven\"), (12, \"twelve\"),\n            (13, \"thirteen\"), (14, \"fourteen\"), (15, \"fifteen\"),\n            (16, \"sixteen\"), (17, \"seventeen\"), (18, \"eighteen\"),\n            (19, \"nineteen\"), (20, \"twenty\")]\n        r = if l*w*h == 0 then \"zero\"\n            else Maybe.withDefault \"\" (Dict.get (ceiling ((l + w) * 2 * h \/ 0.52 \/ 10 * 1.15)) dic)\n    in r","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"568dcc3c7f12767a62000038":[{"id":80246,"user_id":645,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = employed && (not vacation)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80247,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = \n      case (employed, vacation) of\n        (True, False) ->\n          True\n        _ ->\n          False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80248,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = (employed, vacation) == (True, False)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80249,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = \n  if vacation || not employed then False else True","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80250,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed = (&&) employed << not","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80251,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = if employed then not vacation else False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80252,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = \n            if employed == True  && vacation == True then  False else \n            if employed == False && vacation == True then  False else \n            if employed == False && vacation == False then False else \n            if employed == True  && vacation == False then True else False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80253,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\ntype Employment = Employed | Unemployed\ntype Vacation = OnVacation | NotOnVacation\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employment vacation =\n    case ( employment, vacation ) of\n        ( True, True ) -> isAlarmOn Employed OnVacation\n        ( True, False ) -> isAlarmOn Employed NotOnVacation\n        ( False, True ) -> isAlarmOn Unemployed OnVacation\n        ( False, False ) -> isAlarmOn Unemployed NotOnVacation\n  \nisAlarmOn : Employment -> Vacation -> Bool\nisAlarmOn employment vacation =\n    case ( employment, vacation ) of\n        ( Employed, NotOnVacation ) -> True\n        _ -> False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80254,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = employed == True && vacation == False","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"},{"id":80255,"user_id":null,"body":"module SetAlarm exposing (set_alarm)\n\nset_alarm : Bool -> Bool -> Bool\nset_alarm employed vacation = \n  if employed == True && vacation == True then\n    False\n  else if employed == False && vacation == True then\n    False \n  else if employed == False && vacation == False then\n    False \n  else\n    True","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 16:08:34"}],"569b5cec755dd3534d00000f":[{"id":80256,"user_id":null,"body":"module Kata exposing (newAvg)\n\nnewAvg : List Float -> Float -> Maybe Int\nnewAvg xs navg = \n  let\n    nsum = navg * toFloat (List.length xs + 1)\n    n = nsum - List.sum xs\n  in\n  if n <= 0 then\n    Nothing\n  else\n    Just (ceiling n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80257,"user_id":53,"body":"module Kata exposing (newAvg)\n\nnewAvg : List Float -> Float -> Maybe Int\nnewAvg xs u =\n  let\n      s = List.sum xs\n      n = List.length xs\n      x = u * (toFloat (n + 1)) - s\n      y = ceiling x\n  in\n    if x <= 0.0 then Nothing\n    else Just y","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80258,"user_id":492,"body":"module Kata exposing (newAvg)\n\nnewAvg : List Float -> Float -> Maybe Int\nnewAvg xs navg =\n    let\n        a = navg * toFloat(List.length xs + 1)\n        donation = a - (List.sum xs)\n    in\n        if donation <= 0.0 then \n            Nothing\n        else \n            (Just (ceiling donation))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56a32dd6e4f4748cc3000006":[{"id":80259,"user_id":null,"body":"module Kata exposing (mean, variance)\n\nmean : String -> String -> Float\nmean s town =\n  case records s town of\n    Just values ->\n      (List.sum values) \/ (toFloat (List.length values))\n    Nothing ->\n      -1\n\nvariance : String -> String -> Float\nvariance s town =\n  case records s town of\n    Just values ->\n      let\n        meanValue =\n          mean s town\n        sum =\n          List.foldl (\\value acc -> acc + (value - meanValue) ^ 2) 0 values\n      in\n        sum \/ (toFloat (List.length values))\n    Nothing ->\n      -1\n\nrecords : String -> String -> Maybe (List Float)\nrecords data town =\n  List.head (\n    List.filterMap\n      (\\line ->\n        case String.split \":\" line of\n          [townString,recordsString] ->\n            if town == townString then\n              Just\n                (List.filterMap\n                  (\\record ->\n                    case String.split \" \" record of\n                      [month,rainfall] ->\n                        String.toFloat rainfall\n                      _ ->\n                        Nothing\n                  )\n                  (String.split \",\" recordsString))\n            else\n              Nothing\n          _ -> Nothing\n      )      \n      (String.lines data))\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80260,"user_id":null,"body":"module Kata exposing (mean, variance)\nimport Dict\n\nmean str town = \n    let temps = Maybe.withDefault [] (Dict.get town (process str))\n    in \n    if List.isEmpty temps then -1\n    else List.sum temps \/ toFloat (List.length temps)\n\nvariance str town = \n    let \n        temps = Maybe.withDefault [] (Dict.get town (process str))\n        mean_ = mean str town\n    in\n    if List.isEmpty temps then -1\n    else (1 \/ 12) * (List.foldl (\\temp sum -> sum + (temp - mean_) ^ 2) 0 temps)\n\nprocess str =\n    Dict.fromList (List.map processLine (String.lines str))\n\nprocessLine line =\n    let \n        ( town, temps ) =   \n            case String.split \":\" line of\n                [] -> ( \"yo\", [] )\n                town_ :: temps_ ->\n                    ( town_, temps_ )\n    in \n    List.concatMap (String.split \",\") temps\n        |> List.map String.words\n        |> List.concatMap (List.drop 1) \n        |> List.filterMap String.toFloat\n        |> Tuple.pair town","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80261,"user_id":492,"body":"module Kata exposing (mean, variance)\n\nimport List.Extra\n\ngetNthString : Int -> List String -> String\ngetNthString nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault \"Error: getNthString\"\nfindTown : List String -> String -> String -> String\nfindTown ls town res =\n    case ls of\n        x :: xs ->\n            let \n                u = String.split \":\" x\n                v = getNthString 0 u\n            in if v == town then (getNthString 1 u) else findTown xs town \"\"\n        [] -> res\nmeanVar : String -> String -> (Float, Float)\nmeanVar s town =\n    let\n        a = String.split \"\n\" s\n        b = (findTown a town \"\") \n        res = if b == \"\" then (-1, -1)\n              else\n                let\n                    r = b |> String.split \",\" |> List.map(\\x -> String.split \" \" x)\n                    c = List.map(\\x -> (Maybe.withDefault 0 (String.toFloat (getNthString 1 x)))) r\n                    d = List.map(\\x -> (x, x * x)) c\n                    (lm , lsqr) = List.unzip d\n                    m = (List.sum lm) \/ 12.0\n                    var = (List.sum lsqr) \/ 12.0 - m * m\n                in (m, var)\n    in res\nmean : String -> String -> Float\nmean s town = (Tuple.first (meanVar s town))\nvariance : String -> String -> Float\nvariance s town = (Tuple.second (meanVar s town))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56a5d994ac971f1ac500003e":[{"id":80262,"user_id":null,"body":"module Kata exposing (longest_consec)\nimport List exposing (map, foldl, length, singleton, append, tail)\n\nwithLength: String -> (String, Int)\nwithLength s = (s, String.length s)\n\npick: Int -> List a -> Maybe (List a)\npick k xs = case (xs, k) of\n  (_, 0) -> Just []\n  ([], _) -> Nothing\n  (x :: rest, _) -> pick (k-1) rest |> Maybe.map (\\ys -> x :: ys)\n\npickAndConcat: Int -> List String -> Maybe String\npickAndConcat k = pick k >> Maybe.map String.concat\n\nconcatConsecutives: Int -> List String -> Maybe (List String)\nconcatConsecutives k xs = case compare (length xs) k of\n  LT -> Nothing\n  EQ -> pickAndConcat k xs |> Maybe.map singleton\n  GT -> tail xs\n    |> Maybe.andThen (concatConsecutives k)\n    |> Maybe.andThen (\\ys -> pickAndConcat k xs |> Maybe.map (\\res -> append [res] ys))\n\nlongest: (a, Int) -> (a, Int) -> (a, Int)\nlongest (sa, a) (sb, b) = if a > b then (sa, a) else (sb, b)\n\nlongest_consec : List String -> Int -> Maybe String\nlongest_consec xs k = if k <= 0 then Nothing else\n  concatConsecutives k xs\n    |> Maybe.map (map withLength)\n    |> Maybe.map (foldl longest (\"\", 0))\n    |> Maybe.map Tuple.first","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80263,"user_id":null,"body":"module Kata exposing (longest_consec)\n\nlongest_consec : List String -> Int -> Maybe String\nlongest_consec xs k =\n    if List.length xs == 0 || k > List.length xs || k <= 0 then Nothing\n    else \n        longHelp k (String.concat (List.take k xs)) xs\n\nlongHelp k str xs =\n    if List.length (List.take k xs) < k then Just str \n    else\n        let \n            newStr = String.concat (List.take k xs)\n        in \n            if String.length newStr > String.length str then\n                longHelp k newStr (List.drop 1 xs)\n            else\n                longHelp k str (List.drop 1 xs)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80264,"user_id":492,"body":"module Kata exposing (longest_consec)\nimport List.Extra\n\nchunks : Int -> List a -> List (List a)\nchunks k xs =\n    if List.length xs > k then\n        List.take k xs :: chunks k (List.drop 1 xs)\n    else\n        [xs]\n\nlongest_consec : List String -> Int -> Maybe String\nlongest_consec xs k =\n    let\n        n = List.length xs\n    in\n    if (n == 0) || (k > n) || (k <= 0) then\n        Nothing\n    else\n        let \n            ch = chunks k xs\n            r = List.map String.concat ch\n            t = List.map String.length r\n            v = (List.maximum >> Maybe.withDefault -1) t\n            x = List.Extra.elemIndex v t |> Maybe.withDefault -1\n        in r |> List.drop x |> List.head","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56af1a20509ce5b9b000001e":[{"id":80265,"user_id":null,"body":"module Kata exposing (travel)\nimport Dict \n\nheadTail addr =\n    let words = String.words addr\n    in ( Maybe.withDefault \"\" (List.head words), Maybe.withDefault [] (List.tail words) )\n\ntravel s zip =\n    let\n        strs = String.split \",\" s\n        zips = List.map (String.right 8) strs\n        streets = List.map (String.dropRight 9) strs\n        pairs = List.map2 Tuple.pair zips streets\n        dict = List.foldl append Dict.empty pairs\n    in\n    print dict zip\n\nappend ( zip, street ) dict =\n    Dict.insert zip (Maybe.withDefault [] (Dict.get zip dict) ++ [street]) dict\n\nprint dict zip =\n    let \n        numStreets = List.map headTail (Maybe.withDefault [] (Dict.get zip dict))\n        ( nums, streets ) = List.unzip numStreets\n    in \n        zip ++ \":\" ++ String.join \",\" (List.map (String.join \" \") streets) ++ \"\/\" ++ String.join \",\" nums","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80266,"user_id":null,"body":"module Kata exposing (travel)\n    \ntravel : String -> String -> String\ntravel s zipcode =\n  let\n    addresses =\n      if String.isEmpty zipcode then\n        \"\/\"\n      else\n        s |> String.split \",\"\n          |> List.filter (String.endsWith zipcode)\n          |> List.map (String.replace (\" \" ++ zipcode) \"\" >> decompose)\n          |> format\n  in\n    zipcode ++ \":\" ++ addresses\n\ndecompose : String -> (String, String)\ndecompose s =\n  let\n    houseNumber = String.words s |> List.head |> Maybe.withDefault \"\"\n    streetAndTown = String.words s |> List.tail |> Maybe.withDefault [\"\"] |> String.join \" \"\n  in\n    (streetAndTown, houseNumber)\n    \nformat : List (String, String) -> String\nformat l =\n  let\n    firsts = String.join \",\" (List.map Tuple.first l)\n    seconds = String.join \",\" (List.map Tuple.second l)\n  in\n    firsts ++ \"\/\" ++ seconds","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80267,"user_id":492,"body":"module Kata exposing (travel)\n\naux ls (acc1, acc2) =\n    case ls of\n        [] -> (String.slice 1 (String.length acc1) acc1, String.slice 1 (String.length acc2) acc2)\n        x :: xs ->\n            aux xs (acc1 ++ \",\" ++ (Tuple.second x), acc2 ++ \",\" ++ (Tuple.first x))       \ntravel : String -> String -> String\ntravel s zipcode =\n    case zipcode of\n        \"\" -> \":\/\"\n        _ ->\n            let\n                a = String.split \",\" s\n                b = List.filter(\\x -> String.endsWith zipcode x) a\n                c = List.map(\\x -> (String.trim(String.replace zipcode \"\" x))) b\n                addr1 = List.map(\\x -> x |> String.toList |> List.partition Char.isDigit) c\n                addr2 = List.map(\\(x, y) -> (String.fromList x, String.trim(String.fromList y))) addr1\n                addr3 = aux addr2 (\"\", \"\")\n            in zipcode ++ \":\" ++ (Tuple.first addr3) ++ \"\/\" ++ (Tuple.second addr3)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56b5afb4ed1f6d5fb0000991":[{"id":80268,"user_id":null,"body":"module Kata exposing (revrot)\nimport List.Extra exposing (groupsOf)\n\nrevrot str size =\n    groupsOf size (List.filterMap String.toInt (String.split \"\" str))\n        |> List.concatMap revOrRot\n        |> String.concat\n\nrevOrRot nums =\n    if 0 == modBy 2 (List.sum (List.map (\n -> n ^ 3) nums)) then\n        List.reverse (List.map String.fromInt nums)\n    else\n        List.map String.fromInt (List.drop 1 nums ++ List.take 1 nums)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80269,"user_id":492,"body":"module Kata exposing (revrot)\n\nchunks : Int -> List a -> List (List a)\nchunks k xs =\n    if List.length xs > k then\n        List.take k xs :: chunks k (List.drop k xs)\n    else if List.length xs < k then []\n    else [xs]\ndigitsSum : String -> Int\ndigitsSum s =\n    s |> String.split \"\" |> List.filterMap String.toInt |> List.sum\nrotate : String -> String\nrotate s = (String.dropLeft 1 s) ++ (String.slice 0 1 s)\nrevrot: String -> Int -> String\nrevrot s k = \n    if (k <= 0) || (s == \"\") || (k > (String.length s)) then \"\"\n    else\n        let\n            a = (List.map (\\x -> String.join \"\" x) (chunks k (String.split \"\" s)))\n            b = List.map(\\x -> (x, modBy 2 (digitsSum x))) a\n            c = List.map(\\(x, cnt) -> if cnt == 0 then (String.reverse x) else (rotate x)) b\n        in String.join \"\" c","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56baeae7022c16dd7400086e":[{"id":80270,"user_id":null,"body":"module Kata exposing (phone)\n\n\ntype alias Entry \n  = { name : String\n    , number: String\n    , address : String\n    }\n    \ntype Flag\n  = InNumber\n  | InName\n  | InNothing\n  \ntype alias ParserState\n  = { entry : Entry\n    , flag : Flag\n    }\n\nphone : String -> String -> String\nphone s num = \n  String.lines s\n    |> List.map parseEntry\n    |> List.filter (\\entry -> entry.number == num)\n    |> returnEntries num\n    \nreturnEntries : String -> List Entry -> String\nreturnEntries num entries =\n  if List.length entries > 1 then\n    \"Error => Too many people: \" ++ num\n  else\n    let \n      e = List.head entries\n    in\n      case e of\n        Nothing ->\n          \"Error => Not found: \" ++ num\n        Just entry->\n          \"Phone => \" ++ entry.number ++ \", Name => \" ++ entry.name ++ \", Address => \" ++ String.trim entry.address\n    \naddCharToEntryName : Entry -> Char -> Entry\naddCharToEntryName entry c =\n  { entry | name = entry.name ++ String.fromChar c }\n\naddCharToEntryNumber : Entry -> Char -> Entry\naddCharToEntryNumber entry c =\n  { entry | number = entry.number ++ String.fromChar c }\n    \naddCharToEntryAddress : Entry -> Char -> Entry\naddCharToEntryAddress entry c =\n  if c == ' ' && (entry.address == \"\" || String.endsWith \" \" entry.address) then\n    entry\n  else\n    { entry | address = entry.address ++ String.fromChar c }\n    \nparseEntry : String -> Entry\nparseEntry s =\n  (parseEntryChars (String.toList s) (ParserState (Entry \"\" \"\" \"\") InNothing)).entry\n  \nparseEntryChars : List Char -> ParserState -> ParserState\nparseEntryChars cs parserState =\n  case cs of\n    [] ->\n      parserState\n\n    c :: rest ->\n      case c of\n        '+' ->\n          parseEntryChars rest { parserState | flag = InNumber }\n  \n        '<' ->\n          parseEntryChars rest { parserState | flag = InName }\n  \n        '>' ->\n          parseEntryChars rest { parserState | flag = InNothing }\n          \n        _   ->\n          case parserState.flag of \n            InNumber ->\n              if c == '-' || Char.isDigit c then\n                parseEntryChars rest { parserState | entry = addCharToEntryNumber parserState.entry c }\n              else\n                parseEntryChars rest { parserState | flag = InNothing }\n\n            InName ->\n                parseEntryChars rest { parserState | entry = addCharToEntryName parserState.entry c }\n\n            InNothing ->\n              if Char.isAlphaNum c || c == ' ' || c == '.' || c == '-' then\n                parseEntryChars rest { parserState | entry = addCharToEntryAddress parserState.entry c }\n              else\n                parseEntryChars rest parserState\n\n                \n\n              \n              \n\n\n\n   ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80271,"user_id":492,"body":"module Kata exposing (phone)\n\nimport List.Extra\n\ngetNthString : Int -> List String -> String\ngetNthString nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault \"Error: getNthString\"\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault 0\n\naux : List String -> String -> String\naux candidates num =\n    let\n        d = String.replace (\"+\" ++ num) \"\" (getNthString 0 candidates)\n        i = getNthInt 0 (String.indexes \"<\" d)\n        j = getNthInt 0 (String.indexes \">\" d)\n        name = String.slice (i + 1) j d\n        ad = String.replace (\"<\" ++ name ++ \">\") \"\" d |> String.split \" \" |> List.filter(\\x -> x \/= \"\") |> String.join \" \" \n    in \"Phone => \" ++ num ++ \", Name => \" ++ name ++ \", Address => \" ++ ad\nphone : String -> String -> String\nphone s num =\n    let\n        cl = List.filter(\\c -> Char.isAlphaNum c || c == ' ' || c == '.' || c == '\n' || c == '-' || c == '<' || c == '>' || c == '\\'' || c == '+') (String.toList s)\n        clean = cl |> String.fromList |> String.split \"\n\" |> List.filter(\\x -> x \/= \"\")\n        candidates = List.filter(\\x -> String.contains (\"+\" ++ num) x) clean\n    in if List.length candidates > 1 then \"Error => Too many people: \" ++ num\n       else if List.length candidates == 0 then \"Error => Not found: \" ++ num\n       else (aux candidates num)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56bdd0aec5dc03d7780010a5":[{"id":80272,"user_id":645,"body":"module Kata exposing (nextHigher)\n\nimport Bitwise exposing (and, or, xor, shiftRightBy)\n\nnextHigher : Int -> Int\nnextHigher n =\n  let o = and n (-n)\n      v = n + o\n      p = shiftRightBy 2 (xor n v \/\/ o)\n  in or v p","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80273,"user_id":53,"body":"module Kata exposing (nextHigher)\nimport Bitwise\n\nnextHigher : Int -> Int\nnextHigher n =\n  if n == 0 then 0\n  else\n    let\n      r = Bitwise.and n -n\n      p = n + r\n      q = (Bitwise.xor n p) \/\/ (4 * r)\n    in Bitwise.or p q","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80274,"user_id":443,"body":"module Kata exposing (nextHigher)\n\nnextHigher : Int -> Int\nnextHigher n =\n  doNextHigher n 0 0 0\n\ndoNextHigher : Int -> Int -> Int -> Int -> Int\ndoNextHigher n ones zeroes lastBit =\n  if n == 0 then\n    (2^(ones + zeroes)) + (2^(ones - 1)) - 1\n  else\n    let bit = modBy 2 n in\n      if bit == 0 && lastBit == 1 then\n        ((n + 1) * 2^(ones + zeroes)) + (2^(ones - 1)) - 1\n      else if bit == 0 then\n        doNextHigher (n \/\/ 2) ones (zeroes + 1) bit\n      else\n        doNextHigher (n \/\/ 2) (ones + 1) zeroes bit","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80275,"user_id":null,"body":"module Kata exposing (nextHigher)\n\nimport Bitwise exposing (and, or, xor, shiftRightBy)\n\nnextHigher : Int -> Int\nnextHigher n =\n  or (n + (and n (-n))) (shiftRightBy 2 (xor n ( n + (and n (-n))) \/\/ (and n (-n))))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80276,"user_id":null,"body":"module Kata exposing (nextHigher)\n\nimport Bitwise\n\nnextHigher : Int -> Int\nnextHigher n =\n    let\n        s =\n            Bitwise.and n -n\n\n        r =\n            n + s\n\n        ns =\n            Bitwise.and r -r\n\n        o =\n            Bitwise.shiftRightBy 1 (ns \/\/ s) - 1\n    in\n    Bitwise.or r o\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80277,"user_id":null,"body":"module Kata exposing (nextHigher)\n\nnextHigher : Int -> Int\nnextHigher decimal =\n  let\n    binary = decimalToBinary \"\" decimal\n    length = String.length binary\n    count = countBits binary\n  in\n  case count of\n    0 -> 1\n    1 -> binaryToDecimal (binary ++ \"0\")\n    _ ->\n      case length - count of\n        0 -> binaryToDecimal (\"10\" ++ (String.repeat (count - 1) \"1\"))\n        1 ->\n          case String.endsWith \"0\" binary of\n            True -> binaryToDecimal (\"100\" ++ (String.repeat (count - 1) \"1\"))\n            False -> binaryToDecimal (String.replace \"01\" \"10\" binary)\n        _ -> nextHigherStep count (decimal + 1)\n \ncharToInt : Char -> Int\ncharToInt =\n  String.fromChar\n    >> (Maybe.withDefault 0 << String.toInt)\n\nbinaryToDecimal : String -> Int\nbinaryToDecimal =\n  String.split \"\"\n    >> List.reverse\n    >> List.map String.toInt\n    >> List.map (Maybe.withDefault 0)\n    >> List.indexedMap (\\pos int -> int * 2 ^ pos)\n    >> List.foldl (+) 0\n    \nnextHigherStep : Int -> Int -> Int\nnextHigherStep count step =\n  case (countBits (decimalToBinary \"\" step)) == count of\n    True -> step\n    False -> nextHigherStep count (step + 1) \n    \ncountBits : String -> Int\ncountBits =\n  String.filter (\\c -> c == '1')\n    >> String.length\n\ndecimalToBinary : String -> Int -> String\ndecimalToBinary binary decimal =\n  let\n    quotient = decimal \/\/ 2\n    remainder = String.fromInt (modBy 2 decimal)\n  in\n    case quotient of\n      0 -> remainder ++ binary\n      _ -> decimalToBinary (remainder ++ binary) quotient","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56c04261c3fcf33f2d000534":[{"id":80278,"user_id":492,"body":"module Kata exposing (doubles)\n\nv : Int -> Int -> Float\nv k n = 1.0 \/ toFloat(k * (n + 1) ^ (2 * k))\n\nu : Int -> Int -> Float\nu k maxn = List.foldl (\n acc -> acc + (v k n)) 0 (List.range 1 maxn)\n\ndoubles : Int -> Int -> Float\ndoubles maxk maxn = List.foldl (\\k acc -> acc + (u k maxn)) 0 (List.range 1 maxk)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80279,"user_id":null,"body":"module Kata exposing (doubles)\n\ndoubles : Int -> Int -> Float\ndoubles maxK maxN =\n    doubleHelp (toFloat maxK) (toFloat maxN) 1 1 0\n\ndoubleHelp maxK maxN k n sum =\n    if k == maxK && n == maxN then sum + force k n\n    else if k == maxK then doubleHelp maxK maxN 1 (n + 1) (sum + force k n)\n    else doubleHelp maxK maxN (k + 1) n (sum + force k n)\n\nforce k n =\n    1 \/ (k * (n + 1) ^ (2 * k))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80280,"user_id":53,"body":"module Kata exposing (doubles)\n\nv : Int -> Int -> Float\nv k n = (toFloat 1) \/ ((toFloat k) * (toFloat (n + 1)) ^ (toFloat (2 * k)))\n\nu : Int -> Int -> Float\nu k maxn = List.foldl (\n acc -> (acc + (v k (n |> floor)))) (toFloat 0) (List.map toFloat (List.range 1 maxn))\n\ns : Int -> Int -> Float\ns maxk maxn = List.foldl (\\k acc -> (acc + (u (k |> floor) maxn))) (toFloat 0) (List.map toFloat (List.range 1 maxk))\n\ndoubles : Int -> Int -> Float\ndoubles maxk maxn = s maxk maxn","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56c5847f27be2c3db20009c3":[{"id":80281,"user_id":null,"body":"module Kata exposing (subtractSum)\n\nsubtractSum : Int -> String\nsubtractSum n = \"apple\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80282,"user_id":645,"body":"module Kata exposing (subtractSum)\n\nsubtractSum : Int -> String\nsubtractSum _ = \"apple\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80283,"user_id":null,"body":"module Kata exposing (subtractSum)\n\nsubtractSum : Int -> String\nsubtractSum n = if n > 0 then \"apple\" else \"banana\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80284,"user_id":null,"body":"module Kata exposing (subtractSum)\n\nsubtractSum n = \n  let \n    i = n |> String.fromInt |> String.toList |> List.map (\\x -> -48 + Char.toCode x) |> List.sum  |> (-) n\n  in\n  if List.member i [1, 3, 24, 26, 47, 49, 68, 70, 91, 93] then \"kiwi\" \n  else if List.member i [2, 21, 23, 42, 44, 46, 65, 67, 69, 88] then \"pear\" \n  else if List.member i [4, 6, 25, 29, 48, 50, 71, 73, 92, 94, 96] then \"banana\" \n  else if List.member i [5, 7, 28, 30, 32, 51, 53, 74, 76, 95, 97] then \"melon\" \n  else if List.member i [8, 10, 12, 31, 33, 52, 56, 75, 77, 79, 98, 100] then \"pineapple\" \n  else if List.member i [9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99] then \"apple\" \n  else if List.member i [11, 13, 34, 55, 57, 59, 78, 80] then \"cucumber\" \n  else if List.member i [14, 16, 35, 37, 39, 58, 60, 83] then \"orange\" \n  else if List.member i [15, 17, 19, 38, 40, 61, 82, 84, 86] then \"grape\" \n  else if List.member i [20, 22, 41, 43, 62, 64, 66, 85, 87, 89] then \"cherry\"\n  else subtractSum i\n  \n{- this is made by python since i'm lazy. python -> c -> elm -> js, gotta love it \n\nraw = raw.replace('-','\n').strip().split('\n')\nraw = zip(raw[::2],raw[1::2])\nd = {}\nfor i, fruit in raw:\n    i = int(i)\n    if fruit in d:\n        d[fruit].append(i)\n    else:\n        d[fruit] = [i]\n\n[print(f'else if List.member i {d[i]} then \"{i}\" ') for i in d] \n\n-}","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80285,"user_id":null,"body":"module Kata exposing (subtractSum)\n\nimport Dict exposing (..)\n\n\nfruits : Dict Int String\nfruits =\n    Dict.fromList [ ( 1, \"kiwi\" ), ( 2, \"pear\" ), ( 3, \"kiwi\" ), ( 4, \"banana\" ), ( 5, \"melon\" ), ( 6, \"banana\" ), ( 7, \"melon\" ), ( 8, \"pineapple\" ), ( 9, \"apple\" ), ( 10, \"pineapple\" ), ( 11, \"cucumber\" ), ( 12, \"pineapple\" ), ( 13, \"cucumber\" ), ( 14, \"orange\" ), ( 15, \"grape\" ), ( 16, \"orange\" ), ( 17, \"grape\" ), ( 18, \"apple\" ), ( 19, \"grape\" ), ( 20, \"cherry\" ), ( 21, \"pear\" ), ( 22, \"cherry\" ), ( 23, \"pear\" ), ( 24, \"kiwi\" ), ( 25, \"banana\" ), ( 26, \"kiwi\" ), ( 27, \"apple\" ), ( 28, \"melon\" ), ( 29, \"banana\" ), ( 30, \"melon\" ), ( 31, \"pineapple\" ), ( 32, \"melon\" ), ( 33, \"pineapple\" ), ( 34, \"cucumber\" ), ( 35, \"orange\" ), ( 36, \"apple\" ), ( 37, \"orange\" ), ( 38, \"grape\" ), ( 39, \"orange\" ), ( 40, \"grape\" ), ( 41, \"cherry\" ), ( 42, \"pear\" ), ( 43, \"cherry\" ), ( 44, \"pear\" ), ( 45, \"apple\" ), ( 46, \"pear\" ), ( 47, \"kiwi\" ), ( 48, \"banana\" ), ( 49, \"kiwi\" ), ( 50, \"banana\" ), ( 51, \"melon\" ), ( 52, \"pineapple\" ), ( 53, \"melon\" ), ( 54, \"apple\" ), ( 55, \"cucumber\" ), ( 56, \"pineapple\" ), ( 57, \"cucumber\" ), ( 58, \"orange\" ), ( 59, \"cucumber\" ), ( 60, \"orange\" ), ( 61, \"grape\" ), ( 62, \"cherry\" ), ( 63, \"apple\" ), ( 64, \"cherry\" ), ( 65, \"pear\" ), ( 66, \"cherry\" ), ( 67, \"pear\" ), ( 68, \"kiwi\" ), ( 69, \"pear\" ), ( 70, \"kiwi\" ), ( 71, \"banana\" ), ( 72, \"apple\" ), ( 73, \"banana\" ), ( 74, \"melon\" ), ( 75, \"pineapple\" ), ( 76, \"melon\" ), ( 77, \"pineapple\" ), ( 78, \"cucumber\" ), ( 79, \"pineapple\" ), ( 80, \"cucumber\" ), ( 81, \"apple\" ), ( 82, \"grape\" ), ( 83, \"orange\" ), ( 84, \"grape\" ), ( 85, \"cherry\" ), ( 86, \"grape\" ), ( 87, \"cherry\" ), ( 88, \"pear\" ), ( 89, \"cherry\" ), ( 90, \"apple\" ), ( 91, \"kiwi\" ), ( 92, \"banana\" ), ( 93, \"kiwi\" ), ( 94, \"banana\" ), ( 95, \"melon\" ), ( 96, \"banana\" ), ( 97, \"melon\" ), ( 98, \"pineapple\" ), ( 99, \"apple\" ), ( 100, \"pineapple\" ) ]\n\n\ndigits : Int -> List Int\ndigits n =\n    String.fromInt n\n        |> String.split \"\"\n        |> List.map (\\x -> Maybe.withDefault 0 (String.toInt x))\n\n\nsubtractSum : Int -> String\nsubtractSum n =\n    let\n        total =\n            digits n |> List.sum\n\n        next =\n            (-) n total\n    in\n    case Dict.get next fruits of\n        Just v ->\n            v\n\n        Nothing ->\n            subtractSum next\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80286,"user_id":null,"body":"module Kata exposing (subtractSum)\nimport Array exposing (..)\n\nfruits = fromList [\"\", \"kiwi\",\"pear\",\"kiwi\",\"banana\",\"melon\",\"banana\",\"melon\",\"pineapple\",\"apple\",\"pineapple\",\"cucumber\",\"pineapple\",\"cucumber\",\"orange\",\"grape\",\"orange\",\"grape\",\"apple\",\"grape\",\"cherry\",\"pear\",\"cherry\",\"pear\",\"kiwi\",\"banana\",\"kiwi\",\"apple\",\"melon\",\"banana\",\"melon\",\"pineapple\",\"melon\",\"pineapple\",\"cucumber\",\"orange\",\"apple\",\"orange\",\"grape\",\"orange\",\"grape\",\"cherry\",\"pear\",\"cherry\",\"pear\",\"apple\",\"pear\",\"kiwi\",\"banana\",\"kiwi\",\"banana\",\"melon\",\"pineapple\",\"melon\",\"apple\",\"cucumber\",\"pineapple\",\"cucumber\",\"orange\",\"cucumber\",\"orange\",\"grape\",\"cherry\",\"apple\",\"cherry\",\"pear\",\"cherry\",\"pear\",\"kiwi\",\"pear\",\"kiwi\",\"banana\",\"apple\",\"banana\",\"melon\",\"pineapple\",\"melon\",\"pineapple\",\"cucumber\",\"pineapple\",\"cucumber\",\"apple\",\"grape\",\"orange\",\"grape\",\"cherry\",\"grape\",\"cherry\",\"pear\",\"cherry\",\"apple\",\"kiwi\",\"banana\",\"kiwi\",\"banana\",\"melon\",\"banana\",\"melon\",\"pineapple\",\"apple\",\"pineapple\"]\n\nsum : Int -> Int\nsum =\n  String.fromInt\n    >> String.toList\n    >> List.map String.fromChar\n    >> List.map (Maybe.withDefault 0 << String.toInt)\n    >> List.sum\n\nsubtractSum : Int -> String\nsubtractSum n = \"apple\"\n{--\n  case n <= 100 of\n    True -> Maybe.withDefault \"\" (Array.get (n - 1) fruits)\n    False -> subtractSum (n - sum n)\n--}","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80287,"user_id":2766,"body":"module Kata exposing (subtractSum)\n\nfruits : List String\nfruits =\n  [ \"kiwi\"\n  , \"pear\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"melon\"\n  , \"banana\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"apple\"\n  , \"apple\"\n  , \"cucumber\"\n  , \"pineapple\"\n  , \"cucumber\"\n  , \"orange\"\n  , \"grape\"\n  , \"orange\"\n  , \"grape\"\n  , \"apple\"\n  , \"grape\"\n  , \"cherry\"\n  , \"pear\"\n  , \"cherry\"\n  , \"pear\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"kiwi\"\n  , \"apple\"\n  , \"melon\"\n  , \"banana\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"cucumber\"\n  , \"orange\"\n  , \"apple\"\n  , \"orange\"\n  , \"grape\"\n  , \"orange\"\n  , \"grape\"\n  , \"cherry\"\n  , \"pear\"\n  , \"cherry\"\n  , \"pear\"\n  , \"apple\"\n  , \"pear\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"melon\"\n  , \"apple\"\n  , \"cucumber\"\n  , \"pineapple\"\n  , \"cucumber\"\n  , \"orange\"\n  , \"cucumber\"\n  , \"orange\"\n  , \"grape\"\n  , \"cherry\"\n  , \"apple\"\n  , \"cherry\"\n  , \"pear\"\n  , \"cherry\"\n  , \"pear\"\n  , \"kiwi\"\n  , \"pear\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"apple\"\n  , \"banana\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"cucumber\"\n  , \"pineapple\"\n  , \"cucumber\"\n  , \"apple\"\n  , \"grape\"\n  , \"orange\"\n  , \"grape\"\n  , \"cherry\"\n  , \"grape\"\n  , \"cherry\"\n  , \"pear\"\n  , \"cherry\"\n  , \"apple\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"kiwi\"\n  , \"banana\"\n  , \"melon\"\n  , \"banana\"\n  , \"melon\"\n  , \"pineapple\"\n  , \"apple\"\n  , \"pineapple\"\n  ]\n\nsubtractSum : Int -> String\nsubtractSum n =\n  if n <= 100 then\n    List.indexedMap Tuple.pair fruits\n      |> List.filter (\\(i, fruit) -> i + 1 == n)\n      |> List.head\n      |> Maybe.withDefault (0, \"apple\")\n      |> Tuple.second\n  else\n    let\n      sub =\n        String.fromInt n\n          |> String.split \"\"\n          |> List.map String.toInt\n          |> List.map (Maybe.withDefault 0)\n          |> List.sum\n    in\n      subtractSum (n - sub)\n    \n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80288,"user_id":null,"body":"module Kata exposing (subtractSum)\n\nimport Dict\n\n\nsubtractSum : Int -> String\nsubtractSum n =\n    let\n        ds x =\n            if x == 0 then [] else modBy 10 x :: ds (x \/\/ 10)\n        m =\n            n - List.sum (ds n)\n    in\n    case Dict.get m data of\n        Nothing -> subtractSum m\n        Just v -> v\n\n\ndata =\n    Dict.fromList <|\n        List.indexedMap (Tuple.pair << (+) 1)\n            [ \"kiwi\"\n            , \"pear\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"melon\"\n            , \"banana\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"apple\"\n            , \"pineapple\"\n            , \"cucumber\"\n            , \"pineapple\"\n            , \"cucumber\"\n            , \"orange\"\n            , \"grape\"\n            , \"orange\"\n            , \"grape\"\n            , \"apple\"\n            , \"grape\"\n            , \"cherry\"\n            , \"pear\"\n            , \"cherry\"\n            , \"pear\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"kiwi\"\n            , \"apple\"\n            , \"melon\"\n            , \"banana\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"cucumber\"\n            , \"orange\"\n            , \"apple\"\n            , \"orange\"\n            , \"grape\"\n            , \"orange\"\n            , \"grape\"\n            , \"cherry\"\n            , \"pear\"\n            , \"cherry\"\n            , \"pear\"\n            , \"apple\"\n            , \"pear\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"melon\"\n            , \"apple\"\n            , \"cucumber\"\n            , \"pineapple\"\n            , \"cucumber\"\n            , \"orange\"\n            , \"cucumber\"\n            , \"orange\"\n            , \"grape\"\n            , \"cherry\"\n            , \"apple\"\n            , \"cherry\"\n            , \"pear\"\n            , \"cherry\"\n            , \"pear\"\n            , \"kiwi\"\n            , \"pear\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"apple\"\n            , \"banana\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"cucumber\"\n            , \"pineapple\"\n            , \"cucumber\"\n            , \"apple\"\n            , \"grape\"\n            , \"orange\"\n            , \"grape\"\n            , \"cherry\"\n            , \"grape\"\n            , \"cherry\"\n            , \"pear\"\n            , \"cherry\"\n            , \"apple\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"kiwi\"\n            , \"banana\"\n            , \"melon\"\n            , \"banana\"\n            , \"melon\"\n            , \"pineapple\"\n            , \"apple\"\n            , \"pineapple\"\n            ]\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56cac350145912e68b0006f0":[{"id":80289,"user_id":null,"body":"module Kata exposing (arrange)\n\narrange : String -> String\narrange s =\n    doMoves True [] (String.words s)\n        |> List.indexedMap (\\idx word -> if modBy 2 idx == 0 then String.toLower word else String.toUpper word)\n        |> String.join \" \"\n\ndoMoves wantLarger arranged words =\n    case words of\n        first :: second :: rest ->\n            if wantLarger && String.length first > String.length second then\n                doMoves wantLarger arranged (second :: first :: rest)\n                \n            else if (not wantLarger) && String.length first < String.length second then\n                doMoves wantLarger arranged (second :: first :: rest)\n                \n            else\n                doMoves (not wantLarger) (first :: arranged) (second :: rest)\n                \n        [ last ] -> List.reverse (last :: arranged)\n        \n        _ -> []","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80290,"user_id":492,"body":"module Kata exposing (arrange)\n\nimport List.Extra\n\ngetNthString : Int -> List String -> String\ngetNthString nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault \"Error: getNthString\"\n\naux : Int -> Int -> List String -> List String\naux i n z =\n    if i >= n then z\n    else\n        let\n            res = if (modBy 2 i == 1 && (String.length (getNthString i z)) < (String.length (getNthString (i + 1) z))) ||\n                     (modBy 2 i == 0 && (String.length (getNthString i z)) > (String.length (getNthString (i + 1) z))) \n                  then (List.Extra.swapAt i (i + 1) z)\n                  else z\n        in aux (i + 1) n res\narrange : String -> String\narrange s =\n    let\n        a = String.split \" \" s\n        r = aux 0 ((List.length a) - 1) a\n        t = List.indexedMap (\\i x -> if modBy 2 i == 0 then String.toLower x else String.toUpper x) r\n    in String.join \" \" t","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56dbe0e313c2f63be4000b25":[{"id":80291,"user_id":null,"body":"module Kata exposing (vertMirror, horMirror, oper)\n\nvertMirror : String -> String\nvertMirror lines = lines |> applyMirror (List.map String.reverse)\n\n\nhorMirror : String -> String\nhorMirror lines = lines |> applyMirror (List.foldl (::) [])\n\noper: (String -> String) -> String -> String\noper fct s = fct s\n\napplyMirror : (List String -> List String) -> String -> String\napplyMirror fn lines =\n    lines\n        |> String.split \"\n\"\n        |> fn\n        |> String.join \"\n\"\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80292,"user_id":null,"body":"module Kata exposing (vertMirror, horMirror, oper)\n\nvertMirror : String -> String\nvertMirror v = v\n              |>String.lines\n              |>List.map String.reverse\n              \n              |>String.join \"\n\"\nhorMirror : String -> String\nhorMirror h = h\n             |>String.lines\n             |>List.reverse\n             |>String.join \"\n\"\n\noper : (String -> String) -> String -> String\noper fct s = fct s \n            ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80293,"user_id":null,"body":"module Kata exposing (vertMirror, horMirror, oper)\nimport List\nimport String\n\nvertMirror : String -> String\nvertMirror s =\n  String.split \"\n\" s\n    |> List.map String.reverse\n    |> String.join \"\n\"\n\nhorMirror : String -> String\nhorMirror s =\n  String.split \"\n\" s\n    |> List.reverse\n    |> String.join \"\n\"\n\noper : (String -> String) -> String -> String\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80294,"user_id":null,"body":"module Kata exposing (vertMirror, horMirror, oper)\n\nvertMirror : String -> String\nvertMirror s = String.lines s |> List.map String.reverse |> String.join \"\n\"\nhorMirror : String -> String\nhorMirror s = String.lines s |> List.reverse |> String.join \"\n\"\noper : (String -> String) -> String -> String\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80295,"user_id":null,"body":"module Kata exposing (vertMirror, horMirror, oper)\n\nhorMirror = String.lines >> List.reverse >> String.join \"\n\"\n\nvertMirror = String.lines >> List.map String.reverse >> String.join \"\n\"\n\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80296,"user_id":492,"body":"module Kata exposing (vertMirror, horMirror, oper)\n\nvertMirror : String -> String\nvertMirror s = String.join \"\n\" (List.map String.reverse (String.lines s))\nhorMirror : String -> String\nhorMirror s = String.join \"\n\" (List.reverse (String.lines s))\noper : (String -> String) -> String -> String\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56dbe7f113c2f63570000b86":[{"id":80297,"user_id":null,"body":"module Kata exposing (rot, selfieAndRot, oper)\nimport String.Extra exposing (leftOf)\n\nrot : String -> String\nrot = String.reverse\n\nselfieAndRot : String -> String\nselfieAndRot s = \n    let\n        dots = String.repeat (String.length (leftOf \"\n\" s)) \".\"\n        withDots = String.replace \"\n\" (dots ++ \"\n\") s\n    in\n        withDots ++ dots ++ \"\n\" ++ dots ++ rot withDots\n        \noper : (String -> String) -> String -> String\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80298,"user_id":492,"body":"module Kata exposing (rot, selfieAndRot, oper)\n\nrot : String -> String\nrot s = String.join \"\n\" (List.map (String.reverse) (List.reverse (String.lines s)))\nselfieAndRot : String -> String\nselfieAndRot s =\n    let\n        xs = String.lines s\n        ss = String.join \"\n\"(List.map (\\ x -> x ++ (String.repeat (List.length xs) \".\")) xs)\n    in ss ++ \"\n\" ++ (rot ss)\noper : (String -> String) -> String -> String\noper fct s = fct s\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56dbeec613c2f63be4000be6":[{"id":80299,"user_id":null,"body":"module Kata exposing (rot90Clock, diag1Sym, selfieAndDiag1, oper)\n\noper : (String -> String) -> String -> String\noper fct s = fct s\n\nprocess str = \n    let\n        letters = List.filter ((\/=) \"\n\") (String.split \"\" str)\n        wordLength = String.length (Maybe.withDefault \"\" (List.head (String.lines str)))\n    in\n    ( wordLength, letters )\n\ndiag1Sym str =\n    withOffset (process str) 0\n        |> List.map (String.join \"\")\n        |> String.join \"\n\"\n\nrot90Clock str =\n    withOffset (process str) 0\n        |> List.map List.reverse\n        |> List.map (String.join \"\")\n        |> String.join \"\n\"\n\nwithOffset ( wordLength, letters ) offset =\n    if offset == wordLength then []\n    else\n        [ letters \n            |> List.indexedMap \n                (\\i e -> \n                    if modBy wordLength (i - offset) == 0 then \n                        Just e \n                    else \n                        Nothing\n                ) \n            |> List.filterMap identity\n        ] \n        ++ withOffset ( wordLength, letters ) (offset + 1)\n\nselfieAndDiag1 str =\n    List.map2 (\\l r -> l ++ \"|\" ++ r) (String.lines str) (String.lines (diag1Sym str))\n        |> String.join \"\n\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80300,"user_id":492,"body":"module Kata exposing (rot90Clock, diag1Sym, selfieAndDiag1, oper)\nimport List.Extra\n\nrot90Clock : String -> String\nrot90Clock s =\n    let\n        s1 = List.Extra.transpose(List.map (\\ x -> String.split \"\" x) (String.lines s))\n        s2 = List.map(\\x -> List.reverse x) s1\n        s3 = List.map(\\ x -> String.join \"\" x) s2\n    in String.join \"\n\" s3\ndiag1Sym : String -> String\ndiag1Sym s =\n    let \n        s1 = List.Extra.transpose(List.map (\\ x -> String.split \"\" x) (String.lines s))\n        s2 = List.map(\\ x -> String.join \"\" x) s1\n    in String.join \"\n\" s2\nselfieAndDiag1 : String -> String\nselfieAndDiag1 s =\n    let\n        a = diag1Sym s\n        b = List.map (\\x -> \"|\" ++ x) (String.lines a) \n        c = List.map2 (++) (String.lines s) b\n    in String.join \"\n\" c\noper : (String -> String) -> String -> String\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56dbf59b0a10feb08c000227":[{"id":80301,"user_id":492,"body":"module Kata exposing (rot90Counter, diag2Sym, selfieDiag2Counterclock, oper)\n\nimport List.Extra\n\nrot90Counter : String -> String\nrot90Counter s =\n    let\n        s1 = List.Extra.transpose(List.map (\\ x -> String.split \"\" x) (String.lines s))\n        s2 = List.map(\\ x -> String.join \"\" x) s1\n        s3 = List.reverse s2\n    in String.join \"\n\" s3\ndiag2Sym : String -> String\ndiag2Sym s =\n    let\n        s1 = String.lines (rot90Counter s)\n        s2 = List.map(\\x -> String.reverse x) s1\n    in String.join \"\n\" s2\nselfieDiag2Counterclock : String -> String\nselfieDiag2Counterclock s =\n    let\n        b = List.map (\\x -> \"|\" ++ x) (String.lines (diag2Sym s))\n        d = List.map (\\x -> \"|\" ++ x) (String.lines (rot90Counter s)) \n        e = List.map3 (\\x y z -> x ++ y ++ z) (String.lines s) b d\n    in String.join \"\n\" e\n    \noper : (String -> String) -> String -> String\noper fct s = fct s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80302,"user_id":null,"body":"module Kata exposing (rot90Counter, diag2Sym, selfieDiag2Counterclock, oper)\n\nrot90Counter : String -> String\nrot90Counter s = \n    s\n        |> String.lines\n        |> unzip []\n        |> joinIt\n\ndiag2Sym : String -> String\ndiag2Sym s =\n    s\n        |> String.lines\n        |> unzip []\n        |> List.map String.reverse\n        |> joinIt\n\nselfieDiag2Counterclock : String -> String\nselfieDiag2Counterclock s =\n    let\n        lines = s\n            |> String.lines\n\n        rot = lines\n            |> unzip []\n\n        diag = rot\n            |> List.map String.reverse\n            \n     in\n        List.map3 (\\a b c ->\n            String.join \"|\" [a, b ,c]\n        ) lines diag rot\n            |> joinIt\n        \n\noper : (String -> String) -> String -> String\noper fct s = fct s\n\nunzip : List String -> List String -> List String\nunzip acc lines =\n    let\n        newLines = lines\n            |>  List.map (String.dropLeft 1)\n\n        strLength = lines\n            |> List.head\n            |> Maybe.withDefault \"\"\n            |> String.length\n    in\n        case strLength of\n            0 ->\n                acc\n            \n            _ ->\n                unzip ((getFirstChar lines) :: acc) newLines\n                \ngetFirstChar : List String -> String\ngetFirstChar lines =\n    lines\n        |> List.map (String.left 1)\n        |> String.join \"\"\n\njoinIt : List String -> String\njoinIt = String.join \"\n\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56dec885c54a926dcd001095":[{"id":80303,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite x= -x","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80304,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite a =\n  a * -1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80305,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite x = x * -1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80306,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite = (-) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80307,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite n =\n  Basics.negate n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80308,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite n = \n    case String.split \"\" (String.fromInt n) of\n        \"-\" :: negative ->\n            makeOpposite negative\n            \n        positive ->\n            makeOpposite (\"-\" :: positive)\n            \nmakeOpposite : List String -> Int\nmakeOpposite = \n    String.join \"\" >> String.toInt >> Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80309,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite = \n -> negate n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80310,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite numb = (*) -1 numb","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80311,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite x = negate x","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80312,"user_id":null,"body":"module Kata exposing (opposite)\n\nopposite : Int -> Int\nopposite z = -z","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56ed20a2c4e5d69155000301":[{"id":80313,"user_id":492,"body":"module Kata exposing (scale)\n\nscale : String -> Int -> Int -> String\nscale s k n =\n    if s == \"\" then \"\"\n    else\n        let\n            b = List.map (String.split \"\") (String.lines s)\n            c = List.map(\\x -> String.join \"\" (List.map(\\y -> String.repeat k y) x)) b\n            e = List.map(\\x -> String.repeat n (x ++ \"\n\")) c\n        in String.slice 0 -1 (String.join \"\" e)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80314,"user_id":null,"body":"module Kata exposing (scale)\nscale : String -> Int -> Int -> String\nscale s k n =\n    if s == \"\" then\n        \"\"\n    else\n        String.lines s \n            |> List.map (String.split \"\")\n            |> List.map (List.map (String.repeat k))\n            |> List.map String.concat\n            |> List.concatMap (List.repeat n)\n            |> List.intersperse \"\n\"\n            |> String.concat\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80315,"user_id":null,"body":"module Kata exposing (scale)\n\nscale : String -> Int -> Int -> String\nscale str h v =\n \n horizontal  str h\n |>vertical v\n\n\n\nhorizontal :   String -> Int -> String\nhorizontal str i  =\n      \n      if str == \"\" then\n      \"\"\n      else \n      str\n      |> String.lines  --[\"ab\",\"cd\"]\n      |> List.map (\\s -> s\n                    |>String.toList --['a',b','c','d']\n                    |>List.map (List.repeat i)\n                    |>List.concat\n                    |>String.fromList)\n      |>String.join \"\n\"\n      \nvertical :Int -> String -> String\nvertical v str  =\n\n      if str == \"\" then\n      \"\"\n      else \n      str\n      |>String.lines\n      |>List.map (List.repeat v)\n      |>List.concat\n      |>String.join \"\n\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80316,"user_id":null,"body":"module Kata exposing (scale, verticalScaling)\n\n\nscale : String -> Int -> Int -> String\nscale str h v =\n    horizontalScaling str h\n        |> Debug.log \"horizontalScalingv\"\n        |> verticalScaling v\n\n\n{-| ab-cd 2 => aabb-ccdd\n-}\nhorizontalScaling : String -> Int -> String\nhorizontalScaling str n =\n    if str == \"\" then\n        \"\"\n\n    else\n        str\n            |> String.lines\n            --- [ab, cd]\n            |> hHelper n\n\n\n{-| [ab, cd] => [aabb, ccdd]\n-}\nhHelper : Int -> List String -> String\nhHelper i inp =\n    inp\n        |> List.map\n            (\\str ->\n                -- ab\n                str\n                    |> String.toList\n                    -- [a, b]\n                    |> List.map (List.repeat i)\n                    -- [a, a]\n                    |> List.concat\n                    |> String.fromList\n             -- [aa, bb]\n            )\n        |> Debug.log \"b4 concat\"\n        |> String.join \"\n\"\n\n\n{-| ab-cd 2 => ab-ab-cd-cd\n-}\nverticalScaling : Int -> String -> String\nverticalScaling n str =\n    let\n        vHelper : List String -> String\n        vHelper inp =\n            inp\n                |> List.map (List.repeat n)\n                |> List.concat\n                |> String.join \"\n\"\n    in\n    if str == \"\" then\n        \"\"\n\n    else\n        str\n            |> String.lines\n            |> vHelper\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80317,"user_id":53,"body":"module Kata exposing (scale)\n\nscale : String -> Int -> Int -> String\nscale s k n =\n    if s == \"\" then \"\"\n    else String.slice 0 -1 (String.join \"\" (List.map(\\x -> String.repeat n (x ++ \"\n\")) (List.map(\\x -> String.join \"\" (List.map(\\y -> String.repeat k y) x)) (List.map (String.split \"\") (String.lines s)))))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56efab15740d301ab40002ee":[{"id":80318,"user_id":492,"body":"module Kata exposing (gcdi, lcmu, som, maxi, mini, operArray)\n\nimport Maybe.Extra\nimport List.Extra\n    \ngcdi : Int -> Int -> Int \ngcdi a b =\n    if b == 0 then a else gcdi (abs b) (modBy b a)\nlcmu : Int -> Int -> Int \nlcmu a b = abs (a * b) \/\/ (gcdi a b) \nsom : Int -> Int -> Int\nsom a b = a + b\nmaxi : Int -> Int -> Int\nmaxi a b = max a b\nmini : Int -> Int -> Int\nmini a b = min a b\noperArray : (Int -> Int -> Int) -> List Int -> Int -> List Int    \noperArray fct ts init = \n    List.Extra.scanl fct init ts |> (List.tail >> Maybe.withDefault [])\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80319,"user_id":null,"body":"module Kata exposing (gcdi, lcmu, som, maxi, mini, operArray)\n    \ngdc : Int -> Int -> Int\ngdc a b = \n  let\n    big = max a b\n    small = min a b\n    isResult = a == b || small == 0\n  in\n    if isResult then big else gdc small (modBy small big)\n    \nlcm : Int -> Int -> Int\nlcm a b = case (a, b) of\n  (0, 0) -> 0\n  _ -> (abs a) * ((abs b) \/\/ (gdc a b))\n  \n    \ngcdi : Int -> Int -> Int \ngcdi a b = gdc (abs a) (abs b)\n\nlcmu : Int -> Int -> Int \nlcmu a b = lcm (abs a) (abs b)\n\nsom : Int -> Int -> Int\nsom = (+)\n\nmaxi : Int -> Int -> Int\nmaxi = max\n\nmini : Int -> Int -> Int\nmini = min\n\noperArray : (Int -> Int -> Int) -> List Int -> Int -> List Int    \noperArray fct ts init = case ts of\n  [] -> []\n  (x :: rest) ->\n    let\n      acc = fct init x\n    in\n      acc :: (operArray fct rest acc)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80320,"user_id":null,"body":"module Kata exposing (gcdi, lcmu, som, maxi, mini, operArray)\n\nimport List.Extra exposing (scanl)\n    \noperArray : (Int -> Int -> Int) -> List Int -> Int -> List Int    \noperArray fct ts init = List.drop 1 (scanl fct init ts)\n\nsom : Int -> Int -> Int\nsom = (+) \n\nmaxi : Int -> Int -> Int\nmaxi = max\n\nmini : Int -> Int -> Int\nmini = min\n\nlcmu : Int -> Int -> Int \nlcmu a b = abs a * abs b \/\/ gcdi a b\n\ngcdi : Int -> Int -> Int \ngcdi a b = \n    if b == 0 then abs a \n    else gcdi b (modBy b a)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80321,"user_id":53,"body":"module Kata exposing (gcdi, lcmu, som, maxi, mini, operArray)\n    \ngcdi : Int -> Int -> Int \ngcdi a b = if b == 0 then (abs a) else gcdi b (modBy b a)\n\nlcmu : Int -> Int -> Int \nlcmu a b = (abs (a * b)) \/\/ (gcdi a b)\n\nsom : Int -> Int -> Int\nsom a b = a + b\n\nmaxi : Int -> Int -> Int\nmaxi a b = max a b\n\nmini : Int -> Int -> Int\nmini a b = min a b\n\nscanl : (a -> b -> b) -> b -> List a -> List b\nscanl fn b =\n    let\n        scan a bs =\n            case bs of\n                hd :: tl ->\n                    fn a hd :: bs\n\n                _ ->\n                    []\n\n    in\n    List.foldl scan [b] >> List.reverse\n    \noperArray : (Int -> Int -> Int) -> List Int -> Int -> List Int    \noperArray fct arr init = Maybe.withDefault [] (List.tail (scanl fct init arr))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56f699cd9400f5b7d8000b55":[{"id":80322,"user_id":909,"body":"module Kata exposing (fixTheMeerkat)\n\nimport List exposing (reverse)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat = reverse","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80323,"user_id":527,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat xs = case xs of\n  [a, b, c] -> [c, b, a]\n  _         -> [\"I hate wrong argument types. Good luck debugging this kind of things IRL.\"]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80324,"user_id":645,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat = List.reverse","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80325,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat list = case list of\n  [tail, body, head] -> [head, body, tail]\n  _ -> [\"\",\"\",\"\"]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80326,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\nimport List exposing (reverse)\n-- rearrangedd  from array [tail,body,head]  to [head,body,tail]\nfixTheMeerkat : List String -> List String\nfixTheMeerkat arr = \n                reverse arr","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80327,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat = List.foldl (::) []","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80328,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat lst = \n let \n  x = Maybe.withDefault  \"\" <| List.head <| List.drop 2 lst \n  y = Maybe.withDefault  \"\" <| List.head <| List.take 1 lst \n  z = Maybe.withDefault  \"\" <| List.head <| List.drop 1 <| List.take 2 lst \n in [x,z,y]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80329,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat meerkat = List.reverse meerkat ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80330,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat arr =\n  case arr of\n    [a, b, c] -> [c, b, a]\n    _ -> arr\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80331,"user_id":null,"body":"module Kata exposing (fixTheMeerkat)\n\nfixTheMeerkat : List String -> List String\nfixTheMeerkat list =\n  List.reverse list","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"56f69d9f9400f508fb000ba7":[{"id":80332,"user_id":527,"body":"module CountTheMonkeys exposing (monkey_count)\n\nmonkey_count : Int -> List Int\nmonkey_count = List.range 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80333,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\nmonkey_count : Int -> List Int\nmonkey_count x =\n  List.range 1 x\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80334,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\nmonkey_count : Int -> List Int\nmonkey_count x =\n  if x == 0 then\n    []\n  else \n    monkey_count (x-1) ++ [x]\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80335,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\ntype alias Monkey = Int\ntype alias Count = Int\n\nmonkey_countHelp : Count -> List Monkey-> List Monkey\nmonkey_countHelp count monkeyList =\n  case count of\n    0 ->\n      monkeyList\n    gt0 ->\n      monkey_countHelp (count - 1) (count :: monkeyList)\n\n\nmonkey_count : Int -> List Int\nmonkey_count count =\n  monkey_countHelp count []","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80336,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\nmonkey_countW x l counter =\n  if List.length l == x then\n    l\n  else\n    monkey_countW x (List.append l [counter]) (counter + 1)\n\nmonkey_count : Int -> List Int\nmonkey_count x =\n  monkey_countW x [] 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80337,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\nmonkey_count : Int -> List Int\nmonkey_count = monkey_countHelper []\n\nmonkey_countHelper : (List Int) -> Int -> List Int\nmonkey_countHelper c x = \n  case x of\n    0 ->\n      c\n    _ ->\n      monkey_countHelper (x :: c) (x-1)\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80338,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\nimport List\n\nmonkey_count : Int -> List Int\nmonkey_count = List.range 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80339,"user_id":1413,"body":"module CountTheMonkeys exposing (monkey_count)\n\nmonkey : Int -> List Int -> List Int\nmonkey n soFar=\n  case n of\n    0 ->\n      soFar\n      \n    _ ->\n      monkey (n - 1) (n :: soFar)\n\nmonkey_count : Int -> List Int\nmonkey_count x = monkey x []\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80340,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\n\nimport List\n\nmonkey_count : Int -> List Int\nmonkey_count x = List.range 1 x","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80341,"user_id":null,"body":"module CountTheMonkeys exposing (monkey_count)\nimport Array exposing (initialize, toList)\n\nmonkey_count : Int -> List Int\nmonkey_count x = initialize x (\\i -> i + 1) |> toList\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5726f813c8dcebf5ed000a6b":[{"id":80342,"user_id":53,"body":"module Kata exposing (countKprimes, puzzle)\n\ncountPrimeFactorsWalk : Int -> Int -> Int -> Int\ncountPrimeFactorsWalk i n acc =\n  if i > n \/\/ i then if n > 1 then acc + 1 else acc\n  else if modBy i n == 0 then countPrimeFactorsWalk i (n \/\/ i) (acc + 1)\n  else countPrimeFactorsWalk (i + 1) n acc\n\ncountPrimeFactors : Int -> Int\ncountPrimeFactors n = countPrimeFactorsWalk 2 n 0\n\ncountKprimesWalk : Int -> Int -> Int -> List Int -> List Int\ncountKprimesWalk k n nd acc = \n  if n > nd then List.reverse acc\n  else if (countPrimeFactors n) == k then countKprimesWalk k (n + 1) nd (n::acc)\n  else countKprimesWalk k (n + 1) nd acc\n\ncountKprimes : Int -> Int -> Int -> List Int\ncountKprimes k start nd = countKprimesWalk k start nd []\n\ncartesian : List a -> List b -> List (a, b)\ncartesian xs ys =\n  List.concatMap (\\x -> List.map (\\y -> (x, y)) ys) xs\n  \npuzzle : Int -> Int\npuzzle s = \n    let\n        xs = countKprimes 7 128 (s - 10)\n        ys = countKprimes 3 8 (s - 130)\n        rs = List.filter(\\(a, b) -> (s - a - b) > 0 && countPrimeFactors (s - a - b) == 1) (cartesian xs ys)\n    in List.length rs\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80343,"user_id":492,"body":"module Kata exposing (countKprimes, puzzle)\n\ncntPrimeFacts : Int -> Int\ncntPrimeFacts n =\n    let\n        go p num cnt =\n            if p * p > num then\n                cnt + 1\n            else if modBy p num == 0 then\n                go p (num \/\/ p) (cnt + 1)\n            else\n                go (p + 1 + modBy 2 p) num cnt\n    in if n <= 1 then 0 else (go 2 n 0)\n\nisPrime : Int -> Bool                \nisPrime n = n >= 2 && List.all (\\d -> modBy d n \/= 0) (List.range 2 (floor(sqrt (toFloat n))))\n\ncountKprimes : Int -> Int -> Int -> List Int\ncountKprimes k start nd = \n    List.filter(\\x -> cntPrimeFacts x == k) (List.range start nd)\n\n\ncartesian : List a -> List b -> List (a,b)\ncartesian xs ys =\n  List.concatMap(\\x -> List.map (\\y -> (x, y)) ys) xs\npuzzle : Int -> Int\npuzzle s = \n    let\n        xs = countKprimes 7 128 (s - 10)\n        ys = countKprimes 3 8 (s - 130)\n        zs = cartesian xs ys\n        ws = List.filter(\\(a, b) -> isPrime(s - a - b)) zs\n    in List.length(ws)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5727bb0fe81185ae62000ae3":[{"id":80344,"user_id":367,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s =\n  String.foldl (\\c acc -> if c == '#' then (String.dropRight 1 acc) else acc ++ (String.fromChar c)) \"\" s\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80345,"user_id":527,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString = String.reverse << String.fromList << String.foldl cleanStringStep []\n\ncleanStringStep c cs = case c of\n    '#' -> List.drop 1 cs\n    _   -> c :: cs\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80346,"user_id":null,"body":"module BackspacesInString exposing (cleanString)\n\n\ncleanChar : Char -> ( Int, List Char ) -> ( Int, List Char )\ncleanChar nextChar ( backspaces, keptChars ) =\n    -- If the next char is a backspace\n    case nextChar of\n        '#' ->\n            -- Record the backspace and keep moving\n            ( backspaces + 1, keptChars )\n\n        _ ->\n            -- Otherwise, if there are no backspaces in the queue\n            case backspaces of\n                0 ->\n                    -- Keep this char\n                    ( 0, nextChar :: keptChars )\n\n                _ ->\n                    -- Otherwise, use a backspace and skip this car\n                    ( backspaces - 1, keptChars )\n\n\ncleanString : String -> String\ncleanString =\n    -- Convert the string to a list of chars\n    String.toList\n        -- Fold the list of chars, keeping count of backspaces along the way\n        >> List.foldr cleanChar ( 0, [] )\n        -- Get the final list of \"kept\" chars\n        >> Tuple.second\n        -- Convert back to a string\n        >> String.fromList\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80347,"user_id":null,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s = s\n  |> String.toList\n  |> List.foldl (\\a b -> \n                  if a == '#' then\n                    String.dropRight 1 b\n                  else\n                    b ++ (String.fromChar a)) \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80348,"user_id":604,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s =\n    let \n        cleanHelp: String -> String -> String\n        cleanHelp s_ cs = \n            case (String.uncons s_) of \n                Nothing -> \n                    cs\n                Just (x, xs) -> \n                    if x == '#' then \n                      cleanHelp xs (String.slice 0 -1 cs)\n                    else \n                      cleanHelp xs (cs ++ (String.fromChar x)) \n      in \n          cleanHelp s \"\"\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80349,"user_id":null,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s = s |> String.foldl processChar \"\" |> String.reverse\n\nprocessChar : Char -> String -> String\nprocessChar c str = case c of\n  '#' -> String.uncons str |> Maybe.map Tuple.second |> Maybe.withDefault \"\"\n  _   -> String.cons c str\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80350,"user_id":null,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s = \n    s\n        |> String.split \"\"\n        |> List.foldl backit []\n        |> List.reverse\n        |> String.join \"\"\n\n\nbackit : String -> List String -> List String\nbackit char acc =\n    case (char, acc) of\n        (\"#\", []) ->\n            acc\n         \n        (\"#\", head :: tail) ->\n            tail\n\n        (_, _) ->\n            [char] ++ acc","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80351,"user_id":null,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s =\n    cleanHelp (String.toList s) []\n\ncleanHelp chars accu =\n    case chars of\n        [] ->\n            String.fromList (List.reverse accu)\n\n        head :: tail ->\n            if head == '#' then\n                cleanHelp tail (List.drop 1 accu)\n            else\n                cleanHelp tail (head :: accu)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80352,"user_id":53,"body":"module BackspacesInString exposing (cleanString)\nimport List\n\naux : List Char -> List Char -> String\naux p s = case ( p, s ) of\n  ( ls, [] ) ->\n    String.fromList (List.reverse ls)\n  ( [], '#'::xs ) ->\n    aux [] xs\n  ( c::ls, '#'::xs ) ->\n    aux ls xs\n  ( ls, c::xs ) ->\n    aux (c::ls) xs\n\ncleanString : String -> String\ncleanString s = aux (String.toList \"\") (String.toList s)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80353,"user_id":492,"body":"module BackspacesInString exposing (cleanString)\n\ncleanString : String -> String\ncleanString s = s |> String.toList |> List.foldl (\\c str -> if c == '#' then List.drop 1 str else c :: str) [] |> List.reverse |> String.fromList\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"573992c724fc289553000e95":[{"id":80354,"user_id":null,"body":"module Kata exposing (smallest, minimumWith, smallestWhenMovingDigitIn, isBetterFirstThanSecond)\n\nimport Array exposing (Array)\n\nintToDigits : Int -> List Int\nintToDigits n = String.fromInt n\n  |> String.toList\n  |> List.map String.fromChar\n  |> List.map String.toInt\n  |> List.map (Maybe.withDefault 0)\n\nremove : Int -> Array a -> Array a\nremove from array =\n  let\n    before = Array.slice 0 from array\n    after = Array.slice (from + 1) (Array.length array) array\n  in\n    Array.append before after\n\ninsert : a -> Int -> Array a -> Array a\ninsert elem to array =\n  let\n    before = Array.slice 0 to array\n    after = Array.slice to (Array.length array) array\n  in\n    Array.append (Array.push elem before) after\n\nmakeMove : Int -> Int -> Array a -> Array a\nmakeMove from to array = case Array.get from array of\n  Nothing -> array\n  Just elem -> insert elem to (remove from array)\n\ndigitsToNum : List Int -> Int\ndigitsToNum list = case list of\n  [] -> 0\n  x :: rest -> x * 10^(List.length list - 1) + digitsToNum rest\n\nminimumWith : (a -> a -> Bool) -> List a -> Maybe a\nminimumWith lessThan list = case list of\n  [] -> Nothing\n  x :: [] -> Just x\n  x :: y :: rest -> case lessThan x y of\n    True -> minimumWith lessThan (x :: rest)\n    False -> minimumWith lessThan (y :: rest)\n\ntype alias Solution = (Int, Int, Int)\n\nisBetterFirstThanSecond : Solution -> Solution -> Bool\nisBetterFirstThanSecond (valA, fromA, toA) (valB, fromB, toB) = case (compare valA valB, compare fromA fromB, compare toA toB) of\n  (LT, _, _) -> True\n  (EQ, GT, _) -> False\n  (EQ, EQ, GT) -> False\n  (EQ, _, _) -> True\n  (GT, _, _) -> False\n\nsmallestWhenMovingDigitIn : Array Int -> Int -> Solution\nsmallestWhenMovingDigitIn digits position =\n  let\n    possibleMoves = List.range 0 ((Array.length digits) - 1)\n    move to = makeMove position to digits |> Array.toList |> digitsToNum\n    solution to = (move to, position, to)\n  in\n    List.map solution possibleMoves\n      |> minimumWith isBetterFirstThanSecond\n      |> Maybe.withDefault (-1, -1, -1) --unreachable\n\nsmallest : Int -> (Int, Int, Int)\nsmallest n = \n  let\n    digits = intToDigits n |> Array.fromList\n    amountOfDigits = Array.length digits - 1\n    possibleSelections = List.range 0 amountOfDigits\n  in\n    List.map (smallestWhenMovingDigitIn digits) possibleSelections\n      |> minimumWith isBetterFirstThanSecond\n      |> Maybe.withDefault (n, 0, 0)\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80355,"user_id":null,"body":"module Kata exposing (smallest)\nimport Array exposing (..)\nimport Debug exposing (log)\n\nsmallest : Int -> (Int, Int, Int)\nsmallest n = \n    let \n        l = allResults n\n        null = (n, -1, -1)\n        mymin : (Int, Int, Int) -> (Int, Int, Int) -> (Int, Int, Int)\n        mymin value accu = \n            let\n              (a, _, _) = accu\n              (v, _, _) = value\n            in \n              if a <= v then \n                accu\n              else \n                value\n    in\n        List.foldl mymin (n, 0, 0) l\n\n\nallResults : Int -> List (Int, Int, Int)\nallResults number =\n   let \n       l = toList number\n       n = List.length l\n       t = allTuples n\n       -- m : Int -> Int -> (Int, Int, Int)\n       m (x, y) = \n           (toInt (change l x y), x , y)\n   in\n       List.map m t\n\nallTuples : Int -> List (Int, Int)\nallTuples n =\n    let \n      l = List.range 0 (n - 1)\n    in\n      List.concatMap (\\x -> List.map (\\y -> (x,y)) l) l\n      \nchange : List Char -> Int -> Int -> List Char\nchange chars fromPosition toPosition =\n    let \n      (mc, l) = pop fromPosition chars\n      res = case mc of\n        Nothing -> chars\n        Just c ->\n          insert c toPosition l\n    in\n        res\n\ntoList : Int -> List Char\ntoList n = \n    String.fromInt n \n    |> String.toList\n\n\ntoInt : List Char -> Int\ntoInt chars = \n    String.fromList  chars\n    |> String.toInt \n    |> Maybe.withDefault 0\n    \npop : Int -> List Char -> (Maybe Char, List Char)\npop idx chars = \n    case chars of \n        [] ->\n           (Nothing, [])\n        h :: t ->\n          if idx == 0 then\n              (Just h, t)\n          else\n              let \n                (res, tt) = pop (idx - 1) t\n              in\n                  (res, h :: tt)\ninsert : Char -> Int -> List Char -> List Char         \ninsert ch idx chars = \n    case chars of \n        [] -> [ch]\n        h :: t ->   \n          if idx == 0 then \n            ch :: h :: t \n          else\n            h :: (insert ch (idx - 1) t)\n        \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80356,"user_id":null,"body":"module Kata exposing (smallest)\nimport List.Extra exposing (getAt, removeAt, splitAt)\n\nsmallest num =\n    let numStr = String.fromInt num\n    in swapIdxs (String.length numStr) numStr [( numStr, 0, 0 )] 0 0\n\nswapIdxs len numStr shuffles getIdx setIdx =\n    if getIdx == len - 1 && setIdx == len - 1 then\n        case List.sort shuffles of\n            [] -> (0,0,0)\n            ( str, getIdx_, setIdx_ ) :: rest -> \n                ( Maybe.withDefault 0 (String.toInt str), getIdx_, setIdx_ )\n    \n    else if setIdx == len then\n        swapIdxs len numStr shuffles (getIdx + 1) 0\n    \n    else\n        let \n            digit = Maybe.withDefault \"-1\" (getAt getIdx (String.split \"\" numStr))\n            removed = removeAt getIdx (String.split \"\" numStr)\n            ( before, after ) = splitAt setIdx removed\n            joined = String.join \"\" (before ++ [digit] ++ after)\n            tuple = ( joined, getIdx, setIdx )\n        in \n            swapIdxs len numStr (tuple :: shuffles) getIdx (setIdx + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80357,"user_id":492,"body":"module Kata exposing (smallest)\nimport List.Extra\n\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault -1\nremIns i j s = \n     let\n        t = (String.left i s) ++ (String.dropLeft (i + 1) s)\n        r = (String.left j t) ++ (String.slice i (i + 1) s) ++ (String.dropLeft j t)\n    in r\n\nsmallest : Int -> (Int, Int, Int)\nsmallest n =\n    let\n        s = String.fromInt n\n        lg = String.length s\n        cp = List.Extra.cartesianProduct [List.range 0 lg, List.range 0 lg]\n        mov = List.map(\\u -> \n              let\n                  x = getNthInt 0 u\n                  y = getNthInt 1 u\n              in (remIns x y s, x, y)) cp\n        (i, j, k) = List.minimum mov |> Maybe.withDefault (\"-1\", -1, -1)\n    in (String.toInt i |> Maybe.withDefault -1, j, k)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57591ef494aba64d14000526":[{"id":80358,"user_id":492,"body":"module Kata exposing (ann, john, sumAnn, sumJohn)\n\nimport List.Extra\n\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault -1    \njohnAnn : Int -> (List Int, List Int)\njohnAnn n =\n    let\n        johnList = [0]\n        annList = [1]\n    in\n        if n == 0 then (annList, johnList)\n        else\n        let\n            loop : Int -> List Int -> List Int -> (List Int, List Int)\n            loop i jlist alist =\n                if i >= n then (alist, jlist)\n                else\n                let\n                    j = getNthInt (i - 1) jlist\n                    a1 = getNthInt j alist\n                    jlist1 = jlist ++ [i - a1]\n                    a = getNthInt (i - 1) alist\n                    j1 = getNthInt a jlist1\n                in (loop (i + 1) jlist1 (alist ++ [i - j1]))\n        in loop 1 johnList annList\n\njohn : Int -> List Int\njohn n = \n    let (u, v) = johnAnn n\n    in v\nann : Int -> List Int\nann n = \n    let (u, v) = johnAnn n\n    in u\nsumJohn : Int -> Int\nsumJohn n = List.sum (john n)\nsumAnn : Int -> Int\nsumAnn n = List.sum (ann n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80359,"user_id":53,"body":"module Kata exposing (ann, john, sumAnn, sumJohn)\n\nimport List.Extra\n\nat : List Int -> Int -> Int\nat xs i = Maybe.withDefault 0 (List.Extra.getAt i xs)\n\njohnAnn : Int -> (List Int, List Int)\njohnAnn n =\n    if n == 0 then ([1], [0]) else\n    let\n      go i ys xs =\n        if i >= n then (xs, ys) else\n        let\n          j = at ys (i - 1) \n          k = at xs j \n          zs = ys ++ [i - k]\n          l = at xs (i - 1) \n          m = at zs l \n        in (go (i + 1) zs (xs ++ [i - m]))\n    in go 1 [0] [1]\n\njohn : Int -> List Int\njohn n = let (a, b) = johnAnn n in b\n\nann : Int -> List Int\nann n = let (a, b) = johnAnn n in a\n    \nsumJohn : Int -> Int\nsumJohn n = List.sum (john n)\n\nsumAnn : Int -> Int\nsumAnn n = List.sum (ann n)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"57eae20f5500ad98e50002c5":[{"id":80360,"user_id":null,"body":"module Kata exposing (no_space)\n\nimport String exposing (replace)\n\nno_space : String -> String\nno_space s = replace \" \" \"\" s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80361,"user_id":null,"body":"module Kata exposing (no_space)\nimport String exposing (..)\n\nno_space : String -> String\nno_space s = String.split \" \" s |> String.concat","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80362,"user_id":527,"body":"module Kata exposing (no_space)\n\nimport String exposing (replace)\n\nno_space : String -> String\nno_space = replace \" \" \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80363,"user_id":null,"body":"module Kata exposing (no_space)\n\nno_space : String -> String\nno_space = String.filter (\\c -> c \/= ' ')","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80364,"user_id":null,"body":"module Kata exposing (no_space)\n\nno_space : String -> String\nno_space s = \n  String.join \"\" (String.split \" \" s)\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80365,"user_id":null,"body":"module Kata exposing (no_space)\n\nno_space : String -> String\nno_space s = String.toList s\n        |> List.filter Char.isAlphaNum\n        |> String.fromList","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80366,"user_id":null,"body":"module Kata exposing (no_space)\nimport String exposing(split, join)\n\nno_space : String -> String\nno_space s = join \"\" (split \" \" s)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80367,"user_id":null,"body":"module Kata exposing (no_space)\n\nno_space : String -> String\nno_space = String.split \" \" >> String.join \"\" ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80368,"user_id":null,"body":"module Kata exposing (no_space)\n\nno_space : String -> String\nno_space s = String.filter ((\/=) ' ') s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80369,"user_id":null,"body":"module Kata exposing (no_space)\n\nno_space : String -> String\nno_space s =\n  String.replace \" \" \"\" <| s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58184387d14fc32f2b0012b2":[{"id":80370,"user_id":168,"body":"module Kata exposing (f)\n\nf : Float -> Float\nf x = x * (0.5 - x * (0.125 - x * (0.0625 - x * 0.0390625)))\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80371,"user_id":53,"body":"module Kata exposing (f)\n\nf : Float -> Float\nf x = x \/ 2.0 - x * x \/ 8.0 + x * x * x \/ 16.0 - 5.0 * x * x * x * x \/ 128.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80372,"user_id":492,"body":"module Kata exposing (f)\n\nf : Float -> Float\nf x = x \/ (1.0 + sqrt(1.0 + x))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5868b2de442e3fb2bb000119":[{"id":80373,"user_id":492,"body":"module Kata exposing (closest)\n\nimport List.Extra\n\ndigits : String -> List Int\ndigits s =\n    s\n    |> String.split \"\"\n    |> List.filterMap String.toInt \nweightStrNb : String -> Int\nweightStrNb strnb = List.sum(digits strnb)\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault 0\ninitList : List a -> List a\ninitList l = l |> List.Extra.init |> Maybe.withDefault [] \ntailList : List a -> List a\ntailList l = l |> List.tail |> Maybe.withDefault []\n\nclosest : String -> (List Int, List Int)\nclosest s =\n    let\n        b = String.split \" \" s\n        c = List.indexedMap (\\i x -> [weightStrNb x, i, Maybe.withDefault 0 (String.toInt x)]) b\n        d = List.sort c\n        f = List.map2 (\\ x y -> (abs((getNthInt 0 y) - (getNthInt 0 x)), x, y)) \n            (initList d) (tailList d)\n        (u, v, w) = Maybe.withDefault (0, [], []) (List.minimum f)\n    in (v, w)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"588417e576933b0ec9000045":[{"id":80374,"user_id":null,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row =\n  (nCols - col + 1) * (nRows - row)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80375,"user_id":null,"body":"module Theater exposing (seats)\nminus : Int -> Int -> Int\nminus x y =\n  x - y\n  \nadd : Int -> Int -> Int\nadd x y =\n  x + y\n  \nmultiply : Int -> Int -> Int\nmultiply x y =\n  x * y\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row =\n  col\n    |> minus nCols\n    |> add 1\n    |> multiply (minus nRows row)\n    \n    \n    \n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80376,"user_id":null,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats columns rows column row =\n  (columns - column + 1) * (rows - row)\n  \n-- Why adding one to the column?\n-- Let's say you are at the last seat of the column\n-- Then, you would compute the column like 16 - 16\n-- But it gives zero, and zero times something is zero\n-- This does not make sense!","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80377,"user_id":null,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row =\n  (nRows - row) * (nCols - col + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80378,"user_id":50,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats a b c d = (a-c+1)*(b-d)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80379,"user_id":null,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row =\n  let \n    toLeft = (nCols - col) + 1\n    toBehind = (nRows - row) \n  in\n    toLeft * toBehind","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80380,"user_id":null,"body":"module Theater exposing (seats)\n\n\nseats : Int -> Int -> Int -> Int -> Int\nseats cols rows col row =\n    (-) col 1 |> (-) cols |> (*) (rows - row)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80381,"user_id":443,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row = (1 + nCols - col) * (nRows - row)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80382,"user_id":null,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row =\n  (nRows - row) * (nCols - (col - 1))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80383,"user_id":null,"body":"module Theater exposing (seats)\n\nseats : Int -> Int -> Int -> Int -> Int\nseats nCols nRows col row =\n  col - 1\n  |> (-) nCols\n  |> (*) (nRows - row)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58841cb52a077503c4000015":[{"id":80384,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n  n \/\/ 2\n    |> (+) firstNumber\n    |> modBy n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80385,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n  modBy n (n \/\/ 2 + firstNumber)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80386,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n  let\n    diagonal = (+) ( n \/\/ 2)\n  in\n    firstNumber |> diagonal |> modBy n\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80387,"user_id":1858,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n    [(\/\/), modBy]\n        |> List.map (\\f -> f n)\n        |> \\d ->\n            case d of\n                [a, b] -> b (firstNumber + (a 2))\n                _ -> 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80388,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n  modBy n (firstNumber - n \/\/ 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80389,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n  if modBy 2 n == 0 && 4 <= n && n <= 1000 && 0 <= firstNumber && firstNumber <= n - 1 then\n    if n \/\/ 2 > firstNumber then\n      n \/\/ 2 + firstNumber\n    else\n      firstNumber - n \/\/ 2\n  else\n   -1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80390,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n  firstNumber + (n \/\/ 2) |> Basics.modBy n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80391,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n = modBy n << (+) (n\/\/2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80392,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n    firstNumber + round (toFloat n \/ 2) |> modBy n\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80393,"user_id":null,"body":"module Main exposing (circleOfNumbers)\n\ncircleOfNumbers : Int -> Int -> Int\ncircleOfNumbers n firstNumber =\n    let\n        res = n \/\/ 2 + firstNumber\n    in\n    if res >= n then\n        res - n\n    else\n        res","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"588422ba4e8efb583d00007d":[{"id":80394,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n  [n \/\/ 60, modBy 60 n]\n    |> List.map (\\t -> t \/\/ 10 + modBy 10 t)\n    |> List.foldr (+) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80395,"user_id":null,"body":"module Main exposing (lateRide)\n\n-- This feels so wrong...\nlateRide : Int -> Int\nlateRide n =\n  [ ( n \/\/ 60), (remainderBy 60 n) ]\n    |> List.map (\num -> String.fromInt num)\n    |> String.concat\n    |> String.split \"\"\n    |> List.filterMap String.toInt\n    |> List.foldl (+) 0\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80396,"user_id":null,"body":"module Main exposing (lateRide)\n\ndecimalSum : Int -> Int\ndecimalSum n = \n    n \/\/ 10 + (modBy 10 n)\n    \nlateRide : Int -> Int\nlateRide n =\n  let\n    hr = n \/\/ 60\n    min = modBy 60 n\n  in\n    decimalSum hr + (decimalSum min)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80397,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n  [n \/\/ 60, modBy 60 n]\n    |> List.map (\\x -> x \/\/ 10 + modBy 10 x)\n    |> List.sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80398,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n  [n \/\/ 60, remainderBy 60 n]\n    |> List.map String.fromInt \n    |> String.join \"\"\n    |> String.foldl (\\x acc -> acc + (Char.toCode x) - 48) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80399,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n  timeTotal n\n\n\ngetHours : Int -> Int\ngetHours = (\\x -> x \/\/ 60)\n\n\ngetMinutes : Int -> Int\ngetMinutes = (\\x -> remainderBy 60 x)\n\n\ntimeToList : String -> List Int\ntimeToList time =\n  String.toList time\n    |> List.map\n      (\\x ->\n        String.fromChar x\n          |> String.toInt\n          |> Maybe.withDefault 0\n      )\n\n\ntimeTotal : Int -> Int\ntimeTotal time =\n  let\n    hours = String.fromInt (getHours time)\n    mins = String.fromInt (getMinutes time)\n    timeList = timeToList (hours ++ mins)\n  in\n  List.sum timeList\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80400,"user_id":492,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n = \n    let \n        h = n \/\/ 60\n        m = modBy 60 n\n        s = String.toList (String.fromInt (h * 100 + m)) \n            |> List.map String.fromChar\n            |> List.filterMap String.toInt\n            |> List.sum\n    in s","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80401,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n    let\n        m = modBy 60 n\n        h = n \/\/ 60\n    in\n    sumDigits m + sumDigits h\n    \nsumDigits n =\n    (n\/\/10) + (modBy 10 n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80402,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n   let\n    hours = n \/\/ 60\n    minutes = modBy 60 n\n    digit1 = hours \/\/ 10\n    digit2 = modBy 10 hours\n    digit3 = minutes \/\/ 10\n    digit4 = modBy 10 minutes\n   in\n   digit1 + digit2 + digit3 + digit4","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80403,"user_id":null,"body":"module Main exposing (lateRide)\n\nlateRide : Int -> Int\nlateRide n =\n  let\n    hours = n \/\/ 60\n    minutes = n - 60 * hours\n    digit1 = hours \/\/ 10\n    digit2 = hours - digit1 * 10\n    digit3 = minutes \/\/ 10\n    digit4 = minutes - digit3 * 10\n  in\n    digit1 + digit2 + digit3 + digit4","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5886e082a836a691340000c3":[{"id":80404,"user_id":53,"body":"module Kata exposing (rectangle_rotation)\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b =\n  let x = floor ((toFloat a) \/ sqrt(2)) in\n  let y = floor ((toFloat b) \/ sqrt(2)) in\n  let r = (x + 1) * (y + 1) + x * y in\n  (r + (modBy 2 r) - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80405,"user_id":168,"body":"module Kata exposing (rectangle_rotation)\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b =\n  let x = floor (toFloat a \/ sqrt 2) in\n  let y = floor (toFloat b \/ sqrt 2) in\n  2 * x * y + x + y + modBy 2 (x + y + 1)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80406,"user_id":null,"body":"module Kata exposing (rectangle_rotation)\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b =\n    let\n        ( rotatedA, rotatedB ) = ( rotated a, rotated b )\n        ( outsideA, outsideB ) = ( outside rotatedA, outside rotatedB )\n        ( insideA, insideB ) = ( inside rotatedA outsideA, inside rotatedB outsideB)\n    in\n    outsideA * outsideB + insideA * insideB\n    \nrotated dim =\n    toFloat dim \/ (2 * sqrt 2)\n\noutside rotatedDim = \n    1 + 2 * floor rotatedDim\n\ninside rotatedDim outsideDim =\n    if rotatedDim - toFloat (floor rotatedDim) < 0.5 then outsideDim - 1\n    else outsideDim + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80407,"user_id":492,"body":"module Kata exposing (rectangle_rotation)\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b = \n  let \n    x = truncate(toFloat a \/ sqrt(2))\n    y = truncate(toFloat b \/ sqrt(2))\n    r = (x + 1) * (y + 1) + x * y\n  in\n    r + (modBy 2 r) - 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80408,"user_id":null,"body":"module Kata exposing (rectangle_rotation)\n\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b =\n    let\n        base x =\n            toFloat x \/ sqrt 2.0 |> floor\n\n        total =\n            base a * base b + (base a + 1) * (base b + 1)\n    in\n    case modBy 2 total of\n        0 ->\n            total - 1\n\n        _ ->\n            total\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80409,"user_id":443,"body":"module Kata exposing (rectangle_rotation)\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b =\n  sumDots (dotsFor a) (dotsFor b)\n\nsumDots : (Int, Int) -> (Int, Int) -> Int\nsumDots (al1, al2) (bl1, bl2) =\n  (4 * al1 * bl1) + (4 * al2 * bl2) + (2 * al1) + (2 * bl1) + 1\n\ndotsFor : Int -> (Int, Int)\ndotsFor val =\n  ((ceiling (step val)) - 1, round (step val))\n\nstep : Int -> Float\nstep val =\n  (toFloat val) \/ (2 * sqrt 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80410,"user_id":645,"body":"module Kata exposing (rectangle_rotation)\n\nimport Bitwise exposing (xor)\n\nrectangle_rotation : Int -> Int -> Int\nrectangle_rotation a b =\n  let h = floor (toFloat a \/ sqrt 2)\n      v = floor (toFloat b \/ sqrt 2)\n  in h * v + (h + 1) * (v + 1) - xor (modBy 2 h) (modBy 2 v)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58941fec8afa3618c9000184":[{"id":80411,"user_id":53,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant u d m = max 1 (ceiling (toFloat (m - d) \/ toFloat (u - d)))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80412,"user_id":231,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant upSpeed downSpeed desiredHeight =\n  let\n    firstDayGrowth = upSpeed\n    otherDayGrowth = upSpeed - downSpeed\n  in\n  if firstDayGrowth >= desiredHeight then\n    1\n  else\n    toFloat(desiredHeight - firstDayGrowth) \/ toFloat(otherDayGrowth)\n      |> ceiling\n      |> (+) 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80413,"user_id":null,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant upSpeed downSpeed desiredHeight = \n  if upSpeed >= desiredHeight then\n    1\n  else \n    (growingPlant upSpeed downSpeed (desiredHeight-upSpeed+downSpeed))+1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80414,"user_id":50,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant a b c = if c <= a then 1 else 1 + growingPlant a b (c - a + b)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80415,"user_id":null,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant upSpeed downSpeed desiredHeight = \n  max 1 (ceiling (toFloat (desiredHeight - downSpeed) \/ toFloat (upSpeed - downSpeed)))\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80416,"user_id":492,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant up down h = \n  max (ceiling (toFloat(h - down) \/ toFloat(up - down))) 1\n\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80417,"user_id":null,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant upSpeed downSpeed desiredHeight = \n    toFloat (desiredHeight-upSpeed) \/ toFloat (upSpeed-downSpeed)\n        |> ceiling\n        |> (+) 1\n        |> max 1\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80418,"user_id":null,"body":"module Kata exposing (growingPlant)\n\ngrow : Int -> Int -> Int -> Int -> Int -> Int \ngrow up down desiredHeight =\n  let\n   dailyGrowth day height = \n    let\n      endOfDayHeight = height + up\n      hitTarget = endOfDayHeight >= desiredHeight\n      endOfNightHeight = endOfDayHeight - down\n    in\n      if hitTarget then \n        day \n      else\n        dailyGrowth (day+1) endOfNightHeight \n   in\n     dailyGrowth\n    \n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant upSpeed downSpeed desiredHeight =\n  let\n    cycle = grow upSpeed downSpeed desiredHeight\n  in\n    cycle 1 0\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80419,"user_id":null,"body":"module Kata exposing (growingPlant)\n\ngrowingPlantUtil start upSpeed downSpeed desiredHeight =\n  if start >= desiredHeight then 0\n  else if (start + upSpeed) >= desiredHeight then 0\n  else 1 + growingPlantUtil (start + upSpeed - downSpeed) upSpeed downSpeed desiredHeight\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant x y z = (growingPlantUtil 0 x y z) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80420,"user_id":null,"body":"module Kata exposing (growingPlant)\n\ngrowingPlant : Int -> Int -> Int -> Int\ngrowingPlant upSpeed downSpeed desiredHeight = \n  max 1 <| 1 + (ceiling <| (toFloat (desiredHeight - upSpeed)) \/ toFloat (upSpeed - downSpeed))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58acfe4ae0201e1708000075":[{"id":80421,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen l =\n  let\n    (women, men) =\n      l |> List.partition (\\gender -> gender == -1)\n  in\n    List.length women < List.length men\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80422,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen = (<) 0 << List.sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80423,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen l =\n    if List.sum l > 0 then\n        True\n\n    else\n        False\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80424,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen attendees =\n  List.sum attendees > 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80425,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ncount val list = List.filter ((==) val) list |> List.length\n\nmen = 1\nwomen = -1\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen l = count women l < count men l","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80426,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen roster =\n  (List.sum roster) > 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80427,"user_id":492,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen a = List.sum a > 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80428,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen l = \n    0 < List.foldl (+) 0 l","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80429,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen l =\n    l\n    |> List.partition ((==) 1)\n    |> Tuple.mapBoth List.length List.length\n    |> (\\(men, women) -> men > women)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80430,"user_id":null,"body":"module Kata exposing (inviteMoreWomen)\n\ninviteMoreWomen : List Int -> Bool\ninviteMoreWomen l =\n  let\n    men =\n      filterLength (\n -> n == 1) l\n      \n    women =\n      filterLength (\n -> n == -1) l\n  in\n  men > women\n\n\nfilterLength : (a -> Bool) -> List a -> Int\nfilterLength predicate l =\n  l\n    |> List.filter predicate\n    |> List.length","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"58ce8725c835848ad6000007":[{"id":80431,"user_id":527,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = w0 * (100 - p0) \/\/ (100 - p1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80432,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = \n  let\n    dry = (w0*(100-p0))\n    perc = ((100-p0)+(p0-p1))\n  in\n    dry\/\/perc","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80433,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = \n  let\n    dry = (100 - p0) * w0\n    w1 = dry \/\/ (100 - p1)\n  in\n    w1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80434,"user_id":53,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = ((toFloat w0) * (100.0 - (toFloat p0)) \/ (100.0 - (toFloat p1))) |> floor","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80435,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = \n  round (((toFloat (100-p0))\/(toFloat (100-p1))*(toFloat w0)) - 0.49)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80436,"user_id":3088,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = \n  let\n    p0p = (toFloat p0) \/ 100\n    p1p = (toFloat p1) \/ 100\n    initialWater = (toFloat w0) * p0p\n    purePotato = (toFloat w0) - initialWater\n    finalWater = (purePotato * p1p) \/ (1 - p1p)\n  in\n    truncate (purePotato + finalWater + 0.01)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80437,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 =\n  let\n    dryMatterWeight = ((toFloat w0) * (toFloat (100 - p0))\/100)\n  in\n    floor ((100 \/ (toFloat (100 - p1))) * dryMatterWeight)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80438,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = floor <| toFloat w0 * (100 - toFloat p0)\/(100 - toFloat p1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80439,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes p0 w0 p1 = \n  let dryMatter = toFloat (100 - p0) * toFloat w0 \/ 100\n  in dryMatter * 100 \/ toFloat (100 - p1) |> truncate\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80440,"user_id":null,"body":"module Potatoes exposing (potatoes)\n\npotatoes : Int -> Int -> Int -> Int\npotatoes initialWaterPercentage initialTotalWeight finalWaterPercentage =\n  let\n    initialDryPercentage =\n      100 - initialWaterPercentage\n    \n    finalDryPercentage =\n      100 - finalWaterPercentage\n      \n    dryWeight =\n      toFloat initialTotalWeight * toFloat initialDryPercentage \/ 100\n  in\n  truncate <| dryWeight * 100 \/ toFloat finalDryPercentage","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5933a1f8552bc2750a0000ed":[{"id":80441,"user_id":645,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n = n * 2 - 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80442,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven x = (x-1) * 2 ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80443,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven = ((+) -1) >> ((*) 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80444,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n = (*) ((-) n 1) 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80445,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n = (-) ((*) n 2) 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80446,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n =\n  case n of\n    1 ->\n      0\n    _ ->\n      (n - 1) * 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80447,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n = n+n-2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80448,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n = 2*(n-1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80449,"user_id":null,"body":"module NthEven exposing (nthEven)\n\nnthEven : Int -> Int\nnthEven n = 2 * n - 2","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80450,"user_id":null,"body":"module NthEven exposing (nthEven)\n\n\nnthEven : Int -> Int\nnthEven target =\n    2 * target - 2\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59c68ea2aeb2843e18000109":[{"id":80451,"user_id":null,"body":"module Kata exposing (amort)\n\namort : Float -> Float -> Int -> Int -> List Int\namort yearly balance term desiredMonth = \n    let\n        monthly = yearly \/ 100 \/ 12\n        c = (balance * monthly) \/ (1 - ((1 + monthly) ^ toFloat -term))\n    in \n    amortHelp monthly c balance desiredMonth 1\n\namortHelp monthly c balance desiredMonth month =\n    let\n        newBalance = (1 + monthly) * balance - c\n        principal = balance - newBalance \n        interest = c - principal\n    in \n    if month == desiredMonth then\n       List.map round [ toFloat month, c, principal, interest, newBalance ]\n    else \n        amortHelp monthly c newBalance desiredMonth (month + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80452,"user_id":492,"body":"module Kata exposing (amort)\n\namort : Float -> Float -> Int -> Int -> List Int\namort rate balance term numPayments = \n    let\n        help : Int -> Float -> Float -> Float -> Float -> Float -> List Int\n        help i payment rat interest principal bal =\n            if i >= numPayments then\n                [i, round payment, round principal, round interest, round bal]\n            else\n                let\n                    intrst = rat * bal\n                    p = payment - intrst\n                in (help (i + 1) payment rat intrst p (bal - p))\n    in let\n            r = rate \/ 1200.0\n            n = r * balance\n            d = 1 - (1 + r) ^ (toFloat (-term))\n            c = n \/ d\n        in (help 0 c r 0 0 balance)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59ccf051dcc4050f7800008f":[{"id":80453,"user_id":492,"body":"module Kata exposing (buddy)\n\nauxDiv n =\n  let\n    div = List.filter (\\x -> modBy x n == 0) (List.range 2 (floor (sqrt (toFloat n))))\n  in List.sum(List.concatMap(\\a -> if a * a == n then [a] else [a, n \/\/ a]) div)\n  \nbuddy : Int -> Int -> Maybe (Int, Int)\nbuddy start limit =\n    if start > limit then Nothing\n    else\n        let\n            t = auxDiv start\n        in if t > start && auxDiv t == start then Just (start, t) else (buddy (start + 1) limit)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80454,"user_id":null,"body":"module Kata exposing (buddy)\n\nbuddy : Int -> Int -> Maybe (Int, Int)\nbuddy start limit =\n    buddyHelp (min start limit) (max start limit)\n\nbuddyHelp n limit =\n    let\n        nSum = sumDivisors n 2 1\n        m = nSum - 1\n        mSum = sumDivisors m 2 1\n    in\n    if n > limit then\n        Nothing\n    else if n + 1 == mSum && m + 1 == nSum && n < m then\n        Just ( n, m )\n    else \n        buddyHelp (n + 1) limit\n\nsumDivisors num ctr sum =\n    if ctr ^ 2 >= num then\n        sum\n    else\n        if modBy ctr num == 0 then\n            sumDivisors num (ctr + 1) (sum + ctr + num \/\/ ctr) \n        else\n            sumDivisors num (ctr + 1) sum","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59d727d40e8c9dd2dd00009f":[{"id":80455,"user_id":492,"body":"module Kata exposing (balance)\n\nimport List.Extra\n\ngetNthString : Int -> List String -> String\ngetNthString nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault \"Error: getNthString\"\nstringToFloat : String -> Float\nstringToFloat s = Maybe.withDefault 0.0 (String.toFloat s)\n-- Round to 2 decimals your calculated results -> round a float without trailing 0\nroundTo2 : Float -> Float\nroundTo2 f = toFloat(round(f * 100)) \/ 100\n\nloop bal ls acc total =\n    case ls of\n        l :: xs ->\n            let\n                ll = String.trim l\n                f = String.split \" \" ll\n                d =  stringToFloat (getNthString 2 f)\n                nb = roundTo2 (bal - d)\n            in loop (bal - d) xs (acc ++ [(String.join \" \" f) ++ \" Balance \" ++ String.fromFloat nb]) (total + d)\n        [] -> (acc, roundTo2 total)\nbalance : String -> String    \nbalance s =\n    let\n        t = List.filter(\\c -> Char.isAlphaNum c || c == ' ' || c == '.' || c == '\n') (String.toList s)\n        u = String.fromList t |> String.split \" \" |> List.filter(\\x -> x \/= \"\") |> String.join \" \" \n            |> String.split \"\n\" |> List.filter(\\x -> x \/= \"\")\n        (bal, rest) = Maybe.withDefault (\"\", []) (List.Extra.uncons u)\n        lg = toFloat(List.length rest)\n        (tmp, expense) = loop (Maybe.withDefault 0 (String.toFloat bal)) rest [] 0.00\n        str = \"Original Balance: \" ++ bal ++ \"\n\" ++ (String.join \"\n\" tmp) ++ \"\nTotal expense  \" ++ (String.fromFloat expense)\n        avg = toFloat(round((expense \/ lg) * 100.0)) \/ 100.0\n    in str ++ \"\nAverage expense  \" ++ (String.fromFloat avg)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59d9d8cb27ee005972000045":[{"id":80456,"user_id":492,"body":"module Kata exposing (catalog)\n\ncatalog : String -> String -> String\ncatalog str article =\n    let\n        r = \n            str |> String.replace \"<prod><name>\" \"\"\n            |> String.replace \"<\/name>\" \" > prx: $\"\n            |> String.replace \"<\/prx>\" \" qty: \"\n            |> String.replace \"<prx>\" \"\"\n            |> String.replace \"<qty>\" \"\"\n            |> String.replace \"<\/qty><\/prod>\" \"\"\n            |> String.split \"\n\n\"\n            |> List.filter(\\x -> String.contains article x)\n        in if r == [] then \"Nothing\" else String.join \"\n\" r","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80457,"user_id":null,"body":"module Kata exposing (catalog)\n\nimport List exposing (filter, head, tail, filterMap, map, foldr)\nimport String exposing (lines, isEmpty, join, contains, split, dropLeft, length)\n\ntype alias Article =\n  { name: String\n  , price: String\n  , quantity: String\n  }\n\nlineToArticle : String -> Maybe Article\nlineToArticle s =\n  let\n    chunksByName = split \"<\/name><prx>\" s\n    name = head chunksByName\n      |> Maybe.map (dropLeft (length \"<prod><name>\"))\n    chunksByPrice = tail chunksByName\n      |> Maybe.andThen head\n      |> Maybe.map (split \"<\/prx><qty>\")\n    price = chunksByPrice\n      |> Maybe.andThen head\n    quantity = chunksByPrice\n      |> Maybe.andThen tail\n      |> Maybe.andThen head\n      |> Maybe.map (split \"<\/qty>\")\n      |> Maybe.andThen head\n  in\n    Maybe.map3 Article name price quantity\n\nhasName : String -> Maybe Article -> Bool\nhasName nameStr a = case a of\n  Just {name} -> contains nameStr name\n  Nothing -> False\n\nformatArticle : Article -> String\nformatArticle {name, price, quantity} =\n  name ++ \" > prx: $\" ++ price ++ \" qty: \" ++ quantity\n\nconcat : Maybe String -> Maybe String -> Maybe String\nconcat ma mb = case (ma, mb) of\n  (Just a, Just b) -> Just (a ++ \"\n\" ++ b)\n  (Just a, Nothing) -> ma\n  (Nothing, Just b) -> mb\n  (Nothing, Nothing) -> Nothing\n\ncatalog : String -> String -> String\ncatalog str article =\n  lines str\n    |> filter (not << isEmpty)\n    |> map lineToArticle\n    |> filter (hasName article)\n    |> map (Maybe.map formatArticle)\n    |> foldr concat Nothing\n    |> Maybe.withDefault \"Nothing\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80458,"user_id":null,"body":"module Kata exposing (catalog)\ntype alias Order = { item : String, price : String, qty : String }\n\ncatalog : String -> String -> String\ncatalog str item =\n    String.split \"\n\n\" str\n        |> List.concatMap (String.split \"<prod><name>\")\n        |> List.concatMap (String.split \"<\/name><prx>\")\n        |> List.concatMap (String.split \"<\/prx><qty>\")\n        |> List.concatMap (String.split \"<\/qty><\/prod>\")\n        |> List.filter ((\/=) \"\")\n        |> toRecords\n        |> List.filter (isMatch item)\n        |> List.map format\n        |> List.intersperse \"\n\"\n        |> print\n\ntoRecords list =\n    case list of\n        item :: price :: qty :: rest ->\n            Order item price qty :: toRecords rest\n        _ -> []\n\nisMatch item order =\n    String.contains item order.item\n\nformat { item, price, qty } =\n    item ++ \" > prx: $\" ++ price ++ \" qty: \" ++ qty\n\nprint list =\n    if List.isEmpty list then \"Nothing\"\n    else String.concat list","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59df2f8f08c6cec835000012":[{"id":80459,"user_id":null,"body":"module Kata exposing (meeting)\n\nmeeting : String -> String\nmeeting s =\n    String.toUpper s\n        |> String.split \";\"\n        |> List.map (String.split \":\" >> toReverseTupleStr)\n        |> List.sort\n        |> String.concat\n\ntoReverseTupleStr name =\n    case name of\n        first :: last :: nothing ->\n            \"(\" ++ last ++ \", \" ++ first ++ \")\"\n        _ ->\n            \"\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80460,"user_id":492,"body":"module Kata exposing (meeting)\n\nimport List.Extra\n\ngetNthString : Int -> List String -> String\ngetNthString nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault \"\"\ncomp : List String -> List String -> Order\ncomp x y =\n    case compare (getNthString 0 x) (getNthString 0 y) of\n        LT -> LT\n        GT -> GT\n        EQ -> if ((getNthString 1 x) < (getNthString 1 y)) then LT else GT\nmeeting : String -> String\nmeeting s =\n    let\n        a = String.split \";\" (String.toUpper s)\n        b = List.sortWith comp (List.map(\\x -> List.reverse(String.split \":\" x)) a)\n        c = List.map(\\x -> \"(\" ++ (getNthString 0 x) ++ \", \" ++ (getNthString 1 x) ++ \")\") b\n    in String.join \"\" c\n        ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59f44c7bd4b36946fd000052":[{"id":80461,"user_id":null,"body":"module Kata exposing (hist)\n\nimport Dict\n\nhist : String -> String\nhist s = Dict.fromList (List.map (\\letter -> (letter, (List.length (String.split (String.fromChar letter) s)) - 1)) (String.toList \"uwxz\"))\n        |> Dict.filter (\\_ value -> value > 0)\n        |> Dict.map (\\key value -> String.concat [String.fromChar key, \"  \", String.padRight 6 ' ' (String.fromInt value), String.padRight value '*' \"\"])\n        |> Dict.values\n        |> String.join \"\\r\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80462,"user_id":null,"body":"module Kata exposing (hist)\nimport String.Extra exposing (countOccurrences)\n\nhist str =\n    [ \"u\", \"w\", \"x\", \"z\" ]\n        |> List.map (\\err -> ( err, countOccurrences err str ))\n        |> List.map (\\( err, count ) -> ( err, count, String.length (String.fromInt count)))\n        |> List.filter (\\( err, count, _) -> count > 0)\n        |> List.map format\n        |> String.join \"\\r\"\n\nformat ( err, count, digits ) =\n    err ++ \"  \" ++ String.fromInt count ++ String.repeat (6 - digits) \" \" ++ String.repeat count \"*\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80463,"user_id":492,"body":"module Kata exposing (hist)\n\nimport List.Extra\nhist : String -> String\nhist s =\n    s |> String.filter(\\c -> List.member c ['u','w','x','z'])\n      |> String.split \"\" |> List.sort |> List.Extra.group\n      |> List.map (\\ (x, y) -> (x, List.length(y) + 1))\n      |> List.map(\\(x, y) -> (String.padRight 2 ' ' x) ++ \" \" ++ (String.padRight 6 ' ' (String.fromInt y))\n            ++ (String.repeat y \"*\") ++ \"\\r\")\n      |> String.join \"\" |> String.slice 0 -1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"59f4a0acbee84576800000af":[{"id":80464,"user_id":null,"body":"module Kata exposing (posAverage)\nimport List.Extra exposing (uniquePairs)\nimport String.Extra exposing (leftOf)\n\nposAverage : String -> Float\nposAverage s =\n    let \n        pairs = uniquePairs (List.map String.toList (String.split \", \" s))\n        ( numPairs, strLen ) = ( List.length pairs, String.length (leftOf \",\" s) )\n    in\n        100 * List.sum (List.map countSame pairs) \/ toFloat (strLen * numPairs)\n\ncountSame ( str1, str2 ) =\n    List.sum <| List.map2 (\\c1 c2 -> if c1 == c2 then 1 else 0) str1 str2 ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80465,"user_id":53,"body":"module Kata exposing (posAverage)\n\nf : String -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Float\nf s hit size m n tot i j k =\n  if i >= size - m - 2 then (toFloat hit) \/ (toFloat tot) * 100.0\n  else if j >= size then f s hit size m n tot (i + m + 2) ((i + 2 * m + 4)) 0\n  else if k >= m then f s hit size m n tot i (j + m + 2) 0\n  else if (String.slice (i + k) (i + k + 1) s) == (String.slice (j + k) (j + k + 1) s) then f s (hit + 1) size m n tot i j (k + 1)\n  else f s hit size m n tot i j (k + 1)\n\nposAverage : String -> Float\nposAverage s =\n  let\n    hit = 0\n    size = String.length s\n    m = Maybe.withDefault 0 (List.head (String.indexes \",\" s))\n    n = (size + 2) \/\/ (m + 2)\n    tot = (m * n * (n - 1)) \/\/ 2\n  in\n    f s hit size m n tot 0 (m + 2) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80466,"user_id":492,"body":"module Kata exposing (posAverage)\nimport List.Extra\n\ngetNthString : Int -> List String -> String\ngetNthString nth ls =\n    List.Extra.getAt nth ls |> Maybe.withDefault \"\"\n    \ncombinations : Int -> List a -> List (List a)\ncombinations k ls =\n    if k == 0 then\n        [ [] ]\n    else\n        case ls of\n            [] ->\n                []\n            x :: xs ->\n                List.map ((::) x) (combinations (k - 1) xs) ++ combinations k xs \ncomPair : List String -> Float\ncomPair ls =\n    let\n        s1 = String.toList (getNthString 0 ls)\n        s2 = String.toList (getNthString 1 ls)\n        r = List.map2 Tuple.pair s1 s2\n        rr = List.filter(\\(x, y) -> x == y) r\n    in toFloat(List.length rr) \/ toFloat(List.length s1)\n    \nposAverage : String -> Float\nposAverage s =\n    let\n        comb = combinations 2 (String.split \", \" s)\n        r = List.map(\\a -> comPair a) comb\n        sm = List.sum r \/ toFloat(List.length comb)\n    in toFloat(round(100 * sm * 1e10)) \/ 1e10","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a03b3f6a1c9040084001765":[{"id":80467,"user_id":645,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n = (n - 2) * 180","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80468,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle =\n  (*) 180 << (+) -2\n  \n  \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80469,"user_id":1413,"body":"module Kata exposing (angle)\n\nflip : (a -> b -> c) -> b -> a -> c\nflip fn b a = fn a b\n\nminus : Int -> Int -> Int\nminus = flip (-)\n\nangle : Int -> Int\nangle = minus 2 >> (*) 180","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80470,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n = (*) ((-) n 2) 180","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80471,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n = (2*n - 4) * 90 -- From https:\/\/www.math-only-math.com\/sum-of-the-interior-angles-of-an-n-sided-polygon.html","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80472,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n =\n  (60 * (n - 2)) * 3","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80473,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n = n * 180 - 360","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80474,"user_id":527,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n = 180 * (n - 2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80475,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n =\n  case n of\n    3 -> 180\n    _ -> 180 + angle(n - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80476,"user_id":null,"body":"module Kata exposing (angle)\n\nangle : Int -> Int\nangle n = if n > 2 then  (n-2) * 180\n          else 0\n \n \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a045fee46d843effa000070":[{"id":80477,"user_id":492,"body":"module Kata exposing (decomp)\nimport List.Extra\n\nprimeFacts : Int -> List Int\nprimeFacts n =\n    let\n        go p num factors =\n            if p * p > num then\n                List.reverse factors ++ [ num ]\n            else if modBy p num == 0 then\n                go p (floor (toFloat(num) \/ toFloat(p))) (p :: factors)\n            else\n                go (p + 1 + modBy 2 p) num factors\n    in if n <= 1 then [] else go 2 n []\n\ndecomp : Int -> String\ndecomp n =\n    let\n        mkpair (p, cnt) = \n            if (cnt > 1) then String.fromInt(p) ++ \"^\" ++ String.fromInt(cnt) else String.fromInt(p)\n        a = List.concatMap primeFacts (List.range 2 n) \n            |> List.sort\n            |> List.Extra.group\n            |> List.map (\\ (x, y) -> (x, List.length(y) + 1))\n    in String.join \" * \" (List.map(mkpair) a)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a057ec846d843c81a0000ad":[{"id":80478,"user_id":53,"body":"module Kata exposing (cycle)\n\naux : Int -> Int -> Int -> Int\naux n m i = if m == 1 then i else aux n (modBy n (m * 10)) (i + 1)\n\ncycle : Int -> Int\ncycle n = if modBy 2 n == 0 || modBy 5 n == 0 then -1 else aux n (modBy n 10) 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80479,"user_id":492,"body":"module Kata exposing (cycle)\n\naux : Int -> Int -> Int -> Int\naux i x acc =\n  let a = modBy x (10 * acc) in\n  case a of\n    1 -> i\n    _ -> aux (i + 1) x a\ncycle : Int -> Int\ncycle n = if (modBy 2 n == 0) || (modBy 5 n == 0) then -1 else (aux 1 n 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a3fe3dde1ce0e8ed6000097":[{"id":80480,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year year = ceiling(toFloat year \/ 100)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80481,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year n = \n  toFloat n \/ 100\n  |> ceiling","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80482,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year year = (year - 1) \/\/ 100 + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80483,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year year =\n  case modBy 100 year of\n    0 -> (toFloat >> (*) 0.01 >> truncate) year\n    _ -> (toFloat >> (*) 0.01 >> truncate >> (+) 1) year\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80484,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year n = (n + 99) \/\/ 100","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80485,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year year =\n  if ((modBy 100 year) == 0)\n  then year \/\/ 100\n  else (truncate (toFloat year \/ 100)) + 1\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80486,"user_id":800,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year number = number \/\/ 100 + (modBy 100 number \/\/ modBy 100 number)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80487,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year x =\n    let \n        additionalYears = modBy 100 x\n        baseCentury = x \/\/ 100\n    in\n    if additionalYears == 0 then\n      baseCentury\n    else\n      baseCentury + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80488,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\ncentury_from_year i = \n if (i <=100 )then\n  1\n  \n else if modBy 100 i == 0 then\n  i \/\/ 100\n else\n  (i \/\/ 100) + 1\n   ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80489,"user_id":null,"body":"module CenturyYear exposing (century_from_year)\n\ncentury_from_year : Int -> Int\n{- old solution\ncentury_from_year = \\year ->\n        let\n            secondCenturyAndUp y =\n                if (modBy 100 y == 0) then y \/\/ 100\n                else (truncate (toFloat y \/ 100)) + 1\n        in\n        if (year >= 1) && (year <= 100) then 1 else (secondCenturyAndUp year)\n-}\ncentury_from_year = \\year -> ceiling (toFloat year \/ 100)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a420163b6cfd7cde5000077":[{"id":80490,"user_id":null,"body":"module Kata exposing (nbaCup)\n\n-- it was not easy --\n\n-- in Elm all scores are integers\nnbaCup : String -> String -> String   \nnbaCup dta toFind = \n    if String.isEmpty toFind then\n        \"\"\n    else\n        let\n            lines = dta\n                |> String.split \",\"\n\n            validLines = lines\n                |> List.map validLine\n                |> List.filter isError\n                |> List.head\n                |> Maybe.withDefault (Ok \"\")\n        in\n        \n        case validLines of\n            Err info ->\n                info\n            Ok _ ->\n                lines\n                    |> parseData\n                    |> List.foldl (gameFrom toFind) []\n                    |> List.foldl computeScores { w = 0, l = 0, d = 0, scored = 0, conceded = 0, points = 0 } \n                    |> toStringFormat toFind\n\nvalidLine line =\n    case (String.contains \".\" line) of\n        True -> Err (\"Error(float number):\" ++ line)\n        False -> Ok line \n        \nisError item =\n    case item of\n        (Err val) -> True\n        _ -> False\n\nparseData lines =\n     lines \n         |> List.map (String.split \" \")\n         |> List.map (parseGame [] [])\n         \n\nparseGame currentTeam result line =\n    let\n        word = List.head line\n        newLine = List.tail line\n    in\n        case word of\n            Nothing ->\n                result\n            \n            Just w ->\n                case (String.toInt w, newLine) of\n                    (Nothing, Just tailLine) ->\n                        parseGame (w :: currentTeam) result tailLine\n                    \n                    (Just score, Just tailLine) ->\n                        parseGame [] (((String.join \" \" (List.reverse currentTeam)), score) :: result) tailLine\n                    \n                    (_, _) ->\n                        result       \n\ngameFrom teamName data acc =\n    let \n        t1 = List.head data\n        t2 = List.head (List.drop 1 data)\n    in\n        case (t1, t2) of\n            (Just (t1Name, t1Score), Just (t2Name, t2Score)) ->\n                if t1Name == teamName then\n                    data :: acc\n                \n                else if t2Name == teamName then -- we make localTeam first tuple to ease scoring\n                    [(t2Name, t2Score), (t1Name, t1Score)] :: acc\n                \n                else\n                    acc\n            \n            (_, _) ->\n                acc\n\ncomputeScores data acc =\n    let \n        t1 = List.head data\n        t2 = List.head (List.drop 1 data)\n    in\n         case (t1, t2) of\n            (Just (_, localScore), Just (_, opponentScore)) ->\n                let \n                    newAcc = { acc | scored = acc.scored + localScore\n                             , conceded = acc.conceded + opponentScore\n                             }\n                in\n\n                if localScore > opponentScore then\n                    { newAcc | w = newAcc.w + 1\n                    , points = acc.points + 3\n                    }\n                else if localScore == opponentScore then\n                    { newAcc | d = newAcc.d + 1 \n                    , points = acc.points + 1\n                    }\n                else\n                    { newAcc | l = newAcc.l + 1 }\n            \n            (_, _) ->\n                acc\n       \n        \ntoStringFormat teamName scores =\n    let\n        debut = teamName ++ \":\"\n    in\n\n    if scores.w == 0 && scores.l == 0 && scores.d == 0 then\n        debut ++ \"This team didn't play!\"\n        \n    else\n        debut ++ (String.join \";\" [\n            \"W=\" ++ (String.fromInt scores.w)\n            , \"D=\" ++ (String.fromInt scores.d)\n            ,\"L=\" ++ (String.fromInt scores.l)\n            ,\"Scored=\" ++ (String.fromInt scores.scored)\n            ,\"Conceded=\" ++ (String.fromInt scores.conceded)\n            ,\"Points=\" ++ (String.fromInt scores.points)\n        ])","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80491,"user_id":null,"body":"module Kata exposing (nbaCup)\nimport Dict exposing (Dict)\n\ntype alias Team = { name : String, wins : Int, losses : Int, draws : Int, scored : Int, allowed : Int, points : Int}\n\nnbaCup : String -> String -> String\nnbaCup data toFind = \n    let\n        games = List.map String.words (String.split \",\" data)\n        teams = List.foldl processGame Dict.empty games\n        team = Dict.get toFind teams\n        fi = String.fromInt\n    in\n    if toFind == \"\" then \"\"\n    else\n        case team of\n            Nothing -> toFind ++ \":This team didn't play!\"\n            Just { name, wins, losses, draws, scored, allowed, points } ->\n                name ++ \":W=\" ++ fi wins ++ \";D=\" ++ fi draws ++ \";L=\" ++ fi losses ++ \";Scored=\" ++ fi scored ++ \";Conceded=\" ++ fi allowed ++ \";Points=\" ++ fi points\n\nparseGame : List String -> String -> ( String, Int, List String )\nparseGame words team =\n    case words of \n        [] -> ( \"harlem globetrotters\", -1, [\"seattle supersonics\"] )\n        word :: rest ->\n            case String.toInt word of\n                Just score -> (  String.trim team, score, rest )\n                Nothing -> parseGame rest (team ++ \" \" ++ word)\n\nprocessGame : List String -> Dict String Team -> Dict String Team\nprocessGame game teams =\n    let\n        ( homeStr, homeScore, rest ) = parseGame game \"\"\n        ( awayStr, awayScore, _ ) = parseGame rest \"\"\n        home = Maybe.withDefault (Team homeStr 0 0 0 0 0 0) (Dict.get homeStr teams)\n        away = Maybe.withDefault (Team awayStr 0 0 0 0 0 0) (Dict.get awayStr teams)\n    in \n    teams \n        |> Dict.insert homeStr (updateTeam home homeScore awayScore) \n        |> Dict.insert awayStr (updateTeam away awayScore homeScore)\n\nupdateTeam : Team -> Int -> Int -> Team\nupdateTeam { name, wins, losses, draws, scored, allowed, points } teamScore opponentScore =\n    if teamScore > opponentScore then \n        Team name (wins + 1) losses draws (scored + teamScore) (allowed + opponentScore) (points + 3)\n    else if teamScore < opponentScore then\n        Team name wins (losses + 1) draws (scored + teamScore) (allowed + opponentScore) points\n    else \n        Team name wins losses (draws + 1) (scored + teamScore) (allowed + opponentScore) (points + 1)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80492,"user_id":492,"body":"module Kata exposing (nbaCup)\n\ngetNthInt : Int -> List Int -> Int\ngetNthInt nth list =\n    list |> List.drop (nth - 1) |> List.head |> Maybe.withDefault -1\ngetNthString : Int -> List String -> String\ngetNthString nth list =\n    list |> List.drop (nth - 1) |> List.head |> Maybe.withDefault \"\"\n    \nnbaCupOne : String -> String -> (Int, Int)    \nnbaCupOne dtaone team =\n    let\n        u = (String.split \" \" (String.join \"\" (String.split team dtaone)))\n        v = u |> List.map (String.toInt >> Maybe.withDefault -1) |> List.filter (\\x -> x \/= -1)\n        r = String.replace (String.fromInt (getNthInt 1 v)) \",\" dtaone\n        rr = String.replace (String.fromInt (getNthInt 2 v)) \",\" r\n        rrr = List.map String.trim (String.split \",\" rr)\n    in let\n            (a, b) = if (team == (getNthString 1 rrr)) || (team == (getNthString 2 rrr)) then\n                        --if (getNthInt 1 (String.indexes team dtaone) == 0) then (getNthInt 1 v, getNthInt 2 v)\n                        if team == (getNthString 1 rrr) then (getNthInt 1 v, getNthInt 2 v)\n                        else (getNthInt 2 v, getNthInt 1 v)\n                     else (-1, -1)\n    in (a, b)\n    \nhelper : String -> List String -> Int -> Int -> Int -> Int -> Int -> List Int   \nhelper toFind ls w d l pw pc =\n    case ls of\n        x :: xs ->\n            let\n                (a, b) = nbaCupOne x toFind\n                res = if (a, b) == (-1, -1) then (helper toFind xs w d l pw pc)\n                      else\n                        let\n                            ww = if a > b then w + 1 else w\n                            ll = if a < b then l + 1 else l\n                            dd = if a == b then d + 1 else d\n                        in helper toFind xs ww dd ll (pw + a) (pc + b)\n                in res\n        _ -> [w, d, l, pw, pc]\n        \n-- in Elm all scores are integers\nnbaCup : String -> String -> String\nnbaCup dta toFind =\n    if String.isEmpty toFind then \"\"\n    else\n    let\n        ls = String.split \",\" dta\n        lls = (helper toFind ls 0 0 0 0 0)\n        w = getNthInt 1 lls\n        d = getNthInt 2 lls\n        l = getNthInt 3 lls\n        pw = getNthInt 4 lls\n        pc = getNthInt 5 lls\n        res = if w + d + l == 0 then toFind ++ \":This team didn\\'t play!\"\n              else\n                toFind ++ \":W=\" ++ (String.fromInt w) ++ \";D=\" ++ (String.fromInt d) ++ \";L=\" ++ (String.fromInt l) ++\n                \";Scored=\" ++ (String.fromInt pw) ++ \";Conceded=\" ++ (String.fromInt pc) ++ \";Points=\" ++ (String.fromInt (3*w+d))\n    in res\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a48948e145c46820b00002f":[{"id":80493,"user_id":53,"body":"module Kata exposing (kprimesStep)\n\ncountPrimeFactorsWalk : Int -> Int -> Int -> Int\ncountPrimeFactorsWalk i n acc =\n  if i > n \/\/ i then if n > 1 then acc + 1 else acc\n  else if modBy i n == 0 then countPrimeFactorsWalk i (n \/\/ i) (acc + 1)\n  else countPrimeFactorsWalk (i + 1) n acc\n\ncountPrimeFactors : Int -> Int\ncountPrimeFactors n = countPrimeFactorsWalk 2 n 0\n\nkprimesStepWalk : Int -> Int -> Int -> Int -> (List (Int, Int)) -> (List (Int, Int))\nkprimesStepWalk k step i nd acc =\n  if i > nd - step then acc\n  else if countPrimeFactors i == k && countPrimeFactors (i + step) == k then kprimesStepWalk k step (i + 1) nd (acc ++ [(i, i + step)])\n  else kprimesStepWalk k step (i + 1) nd acc\n  \nkprimesStep : Int -> Int -> Int -> Int -> Maybe (List (Int, Int))\nkprimesStep k step start nd =\n  let xs = kprimesStepWalk k step start nd [] in\n  if List.length xs == 0 then Nothing\n  else Just xs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80494,"user_id":492,"body":"module Kata exposing (kprimesStep)\n\ncntPrimeFacts : Int -> Int\ncntPrimeFacts n =\n    let\n        go p num cnt =\n            if p * p > num then\n                cnt + 1\n            else if modBy p num == 0 then\n                go p (num \/\/ p) (cnt + 1)\n            else\n                go (p + 1 + modBy 2 p) num cnt\n    in if n <= 1 then 0 else (go 2 n 0)\n\ncartesian : List a -> List b -> List (a,b)\ncartesian xs ys =\n  List.concatMap(\\x -> List.map (\\y -> (x, y)) ys) xs\nkprimesStep : Int -> Int -> Int -> Int -> Maybe (List (Int, Int))\nkprimesStep k step m n = \n    let\n        d = List.range m n |> List.filter(\\x -> cntPrimeFacts x == k)\n        e = cartesian d d |> List.filter (\\(x, y) -> y == x + step)\n    in case e of\n        [] -> Nothing\n        _ -> Just e\n        ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a4d303f880385399b000001":[{"id":80495,"user_id":null,"body":"module Kata exposing (strong)\n\nfacto : Int -> Int\nfacto a =\n  case a < 1 of\n    True -> 1\n    False -> a * facto(a - 1)\n    \nstrong : Int -> String\nstrong n =\n  let\n    res =\n      String.fromInt n\n      |> String.split \"\"\n      |> List.map (\\x -> Maybe.withDefault 0 (String.toInt x) |> facto)\n      |> List.sum\n  in\n    if res == n then \"STRONG!!!!\" else \"Not Strong !!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80496,"user_id":645,"body":"module Kata exposing (strong)\n\nstrong : Int -> String\nstrong n = if List.member n [ 1, 2, 145, 40585 ] then \"STRONG!!!!\" else \"Not Strong !!\"","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80497,"user_id":null,"body":"module Kata exposing (strong)\n\nstrong : Int -> String\nstrong n =\n    n\n        |> String.fromInt\n        |> String.split \"\"\n        |> List.filterMap (String.toInt >> Maybe.map fact)\n        |> List.sum\n        |> (\\sum -> if sum == n then \"STRONG!!!!\" else \"Not Strong !!\")\n\nfact n = if n == 0 then 1 else factHelper (n - 1) n\n\n\n\n\nfactHelper a b =\n    if a < 2 then\n        b\n    else\n        factHelper (a - 1) (a * b)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80498,"user_id":null,"body":"module Kata exposing (strong)\n\nimport String exposing (..)\n\nabsFac : Int -> Int\nabsFac n =\n  let absN = abs n\n  in\n  case absN of\n    0 -> 1\n    1 -> 1\n    _ -> absN * absFac (absN - 1)\n\nstrong : Int -> String\nstrong n =\n  let facSum = n\n        |> fromInt\n        |> foldl (\\c acc ->\n        case c |> fromChar |> toInt of\n            Just d -> acc + absFac d\n            Nothing -> acc)\n        0\n  in\n  if facSum == n then \"STRONG!!!!\" else \"Not Strong !!\"\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80499,"user_id":53,"body":"module Kata exposing (strong)\n\nfromJust : a -> Maybe a -> a\nfromJust d x = case x of\n  Just y -> y\n  Nothing -> d\n\ndigits : Int -> List Int\ndigits n = List.map (\\c -> fromJust 0 (String.toInt (String.fromChar c))) (String.toList (String.fromInt n))\n\nf : Int -> Int\nf n = if n <= 1 then 1 else n * f( n - 1 )\n\nfsum : Int -> Int\nfsum n = List.foldl (+) 0 (List.map f (digits n))\n\nr : Int -> Int -> String\nr n m = if n == m then \"STRONG!!!!\" else \"Not Strong !!\"\n\nstrong : Int -> String\nstrong n = r n (fsum n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80500,"user_id":null,"body":"module Kata exposing (strong)\n\nstrong : Int -> String\nstrong n = \n let \n  factorial :Int -> Int\n  factorial i = \n    if i < 1 then 1\n    else i * factorial (i - 1)\n in\n   if\n   (n\n    |>String.fromInt\n    |>String.toList\n    |>List.map (String.fromChar >> String.toInt >>  \n                     Maybe.withDefault 0 >> factorial)\n    |>List.foldl (+) 0)\n       == n\n       \n       \n    then\n        \"STRONG!!!!\"\n\n    else\n        \"Not Strong !!\"  \n   ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80501,"user_id":null,"body":"module Kata exposing (strong)\n\nstrong : Int -> String\nstrong n = \n  let \n    sum =\n      n\n        |> String.fromInt\n        |> String.toList\n        |> List.map toInt\n        |> List.map fac\n        |> List.sum\n  in\n    if sum == n then\n      \"STRONG!!!!\"\n    else\n      \"Not Strong !!\"\n\ntoInt : Char -> Int\ntoInt c = Char.toCode c - Char.toCode '0'\n\nfac : Int -> Int\nfac n = \n  if n <= 0 then\n    1\n  else\n    n * fac (n - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80502,"user_id":null,"body":"module Kata exposing (strong)\n\nfactorial : Int -> Int\nfactorial n =\n  List.product (List.range 1 n)\n  \nstrong : Int -> String\nstrong n = \n  let\n    result = \n      String.fromInt n \n      |> String.split \"\" \n      |> List.map(\\x -> Maybe.withDefault 0 (String.toInt x) |> factorial) \n      |> List.sum\n  in\n   if result == n then\n    \"STRONG!!!!\"\n    else \n     \"Not Strong !!\"\n \n    \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80503,"user_id":null,"body":"module Kata exposing (strong)\n\nstrong : Int -> String\nstrong n =\n  if (isStrong n) then\n    \"STRONG!!!!\"\n  else\n    \"Not Strong !!\"\n\nisStrong : Int -> Bool\nisStrong n =\n  String.fromInt n\n    |> String.toList\n    |> List.map (String.fromChar >> String.toInt >> Maybe.withDefault 0 >> factorial)\n    |> List.sum\n    |> (==) n\n\nfactorial : Int -> Int\nfactorial n =\n  case n of\n    0 ->\n      1\n    _ ->\n      n * factorial (n - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80504,"user_id":null,"body":"module Kata exposing (..)\n\nstrong : Int -> String\nstrong n =\n    n\n      |> String.fromInt\n      |> String.split \"\"\n      |> List.map String.toInt\n      |> List.map (Maybe.withDefault 0)\n      |> List.map fac\n      |> List.sum\n      |> (\\x -> if n == x then \"STRONG!!!!\" else \"Not Strong !!\")\n      \nfac n =\n    n\n      |> List.range 1\n      |> List.product","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5a662a02e626c54e87000123":[{"id":80505,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n =\n  toFloat n \/ 2\n  |> ceiling\n  |> List.range 1\n  |> List.map (((*) 2) >> (+) -1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80506,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n =\n    List.map ((*) 2 >> (+) 1) (List.range 0 ((n - 1) \/\/ 2))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80507,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n =\n    List.range 1 n\n    |> List.filter (\\i -> modBy 2 i \/= 0)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80508,"user_id":53,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n = List.filter (\\i -> modBy 2 i == 1) (List.range 1 n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80509,"user_id":492,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n = \n    List.range 1 n\n        |> List.filter (\\x -> modBy 2 x \/= 0)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80510,"user_id":492,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n = \n  List.map (\\x -> x + 2) (List.range -1 (n - 2))\n  |> List.filter (\\x -> modBy 2 x == 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80511,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\nextraPerfect : Int -> List Int\nextraPerfect n = \n    List.range 1 n\n        |> List.filter (\\a -> modBy 2 a == 1)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80512,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\nisPerfect : Int -> Bool\nisPerfect n = \n    modBy 2 n \/= 0\n\nextraPerfect : Int -> List Int\nextraPerfect n =\n    List.filter isPerfect (List.range 1 n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80513,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\n-- Is this the least amount of iteration possible?\n\nextraPerfect : Int -> List Int\nextraPerfect n =\n  extraPerfectHelp n []\n  \nextraPerfectHelp : Int -> List Int -> List Int\nextraPerfectHelp current list =\n  if current < 1 then\n    list\n  else if (modBy 2 current) == 0 then\n    extraPerfectHelp (current - 3) [current-1]\n  else\n    extraPerfectHelp (current - 2) (current :: list)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80514,"user_id":null,"body":"module Kata exposing (extraPerfect)\n\n\nextraPerfect : Int -> List Int\nextraPerfect n = List.filter (\num -> 1 == modBy 2 num) (List.range 1 n)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5aba780a6a176b029800041c":[{"id":80515,"user_id":645,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b = b \/\/ d * d","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80516,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b =\n  if modBy d b == 0 then\n    b\n    \n  else\n    maxMultiple d (b - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80517,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b =\n    if d > b then\n        0\n\n    else if modBy d b == 0 then\n        b\n\n    else\n        maxMultiple d (b - 1)\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80518,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple divisor bound =\n  if modBy divisor bound == 0 then\n    bound\n  \n  else\n    maxMultiple divisor <| bound - 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80519,"user_id":492,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple div bound = bound - (remainderBy div bound)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80520,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b = \n    let \n      findFactor m =\n        let \n          candidate = m * d\n          difference = b - candidate\n        in\n        if difference >= d then\n          findFactor (m + 1)\n        else\n          candidate \n    in   \n      findFactor 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80521,"user_id":50,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b = d * (b \/\/ d)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80522,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b = b - (remainderBy d b)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80523,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b = if Basics.modBy d b == 0 then b else (b \/\/ d) * d\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80524,"user_id":null,"body":"module Kata exposing (maxMultiple)\n\nmaxMultiple : Int -> Int -> Int\nmaxMultiple d b =\n  if isCool d b then b\n  else if b == 0 then 0\n  else maxMultiple d (b-1)\n\nisCool: Int -> Int -> Bool\nisCool d num =\n  Basics.modBy d num == 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5ae62fcf252e66d44d00008e":[{"id":80525,"user_id":53,"body":"module ExpressionMatter exposing (expression_matter)\nimport List\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c = (List.maximum [a+b+c, a*b*c, (a+b)*c, a*(b+c)]) |> Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80526,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c =\n  [ a + b + c\n  , a + b * c\n  , a * b + c\n  , a * b * c\n  , (a + b) * c\n  , a * (b + c)\n  ]\n  |> List.maximum\n  |> Maybe.withDefault 3","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80527,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c = \n  let\n    results = \n      [ a + b + c\n      , a * b * c\n      , a + b * c\n      , a * b + c\n      , (a + b) * c\n      , a * (b + c)\n      ]\n  in\n  List.maximum results\n    |> Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80528,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c =\n  let\n    max = List.maximum [a + b + c, (a + b) * c, a * (b + c), a * b * c]\n  in\n    case max of\n      Just val -> val\n      _ -> 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80529,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c =\n  Maybe.withDefault 0\n    <| List.maximum\n      [ a + (b * c)\n      , a * (b + c)\n      , (a + b) * c\n      , (a * b) + c\n      , a * b + c\n      , a + b * c\n      , a + b + c\n      , a * b * c\n      ]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80530,"user_id":492,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c = List.maximum [a*b*c, a+b+c, (a+b)*c, a*(b+c)] |> Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80531,"user_id":168,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c = Maybe.withDefault 0 (List.maximum [a + b + c, a * (b + c), (a + b) * c, a * b * c])","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80532,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c =\n    List.foldl max 0\n        [ a + b + c\n        , a * b * c\n        , (a+b) * c\n        , a + b * c\n        , a * b + c\n        , a * (b + c)\n        ]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80533,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c = max (max (a * (b + c)) (a * b * c)) (max (a + b + c) ((a + b) * c))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80534,"user_id":null,"body":"module ExpressionMatter exposing (expression_matter)\n\nexpression_matter : Int -> Int -> Int -> Int\nexpression_matter a b c = \n    let\n        opt1 =\n          a * (b + c)\n          \n        opt2 =\n          a * b * c\n          \n        opt3 = \n          a + b * c\n          \n        opt4 =\n          (a + b) * c\n          \n        opt5 = \n          a + b + c\n          \n        opt1greater =\n          if opt1 > opt2 then\n            opt1\n          else \n            opt2\n            \n        opt3greater =\n          if opt3 > opt4 then\n            opt3\n          else\n            opt4\n        \n        greatest = \n          if opt1greater > opt3greater then\n            opt1greater\n          else\n            opt3greater\n    in\n        if greatest > opt5 then\n          greatest\n        else\n          opt5","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5b06c990908b7eea73000069":[{"id":80535,"user_id":53,"body":"module Kata exposing (f)\n\nhypot : Float -> Float -> Float\nhypot a b = sqrt (a * a + b * b)\n\nf : Float -> Float -> Float -> Int\nf x y eps = let ans = logBase (hypot x y) eps in \n  if ans < 0 then -1 else (floor ans)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80536,"user_id":168,"body":"module Kata exposing (f)\n\nf : Float -> Float -> Float -> Int\nf x y eps =\n  let a = sqrt (x * x + y * y) in\n  if a >= 1 then -1 else floor (logBase a eps)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80537,"user_id":null,"body":"module Kata exposing (f)\n\nf : Float -> Float -> Float -> Int\nf re im eps =\n    if re >= 1 || im >= 1 then -1\n    else goToLim (re ^ 2 + im ^ 2) eps 1\n\ngoToLim magnitude eps iters =\n    if magnitude ^ (iters \/ 2) < eps then\n        round (iters - 1)\n    else\n        goToLim magnitude eps (iters + 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80538,"user_id":492,"body":"module Kata exposing (f)\n\nhypot : Float -> Float -> Float\nhypot a b = sqrt(a * a + b * b)\nf : Float -> Float -> Float -> Int\nf x y eps =\n    let h = hypot x y\n    in\n        if (h >= 1.0) then\n            -1\n        else\n            truncate(logBase e eps \/ logBase e h)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5b1cd19fcd206af728000056":[{"id":80539,"user_id":null,"body":"module Kata exposing (solve)\n\nsolve : Float -> Float\nsolve m =\n    1 + (1 \/ (2 * m)) * (1 - sqrt (4 * m + 1))","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80540,"user_id":53,"body":"module Kata exposing (solve)\n\nsolve : Float -> Float\nsolve m = (2.0 * m + 1.0 - sqrt (4.0 * m + 1.0)) \/ (2.0 * m)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80541,"user_id":492,"body":"module Kata exposing (solve)\n\nsolve : Float -> Float\nsolve m =\n    let \n        s = sqrt(4 * m + 1)    \n    in (2 * m + 1 - s) \/ (2 * m) \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5b40b666dfb4291ad9000049":[{"id":80542,"user_id":492,"body":"module Kata exposing (solve)\n\nsolve : Float -> Float -> Float -> Float -> Float -> Float -> List Int\nsolve a b c alpha beta gamma =\n    let\n        alph = alpha * pi \/ 180\n        bet = beta * pi \/ 180\n        gamm = gamma * pi \/ 180\n        x = a * cos(alph) - b * sin(bet) - c * cos(gamm)\n        y = a * sin(alph) + b * cos(bet) - c * sin(gamm)\n        r = sqrt(x * x + y * y)\n        theta = floor((atan2 y x) * 180 * 3600 \/ pi)\n        (d, m) = (theta \/\/ 3600, modBy 3600 theta)\n        (mm, s) = (m \/\/ 60, modBy 60 m)\n    in [round r, d, mm, s]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80543,"user_id":null,"body":"module Kata exposing (solve)\n\nsolve : Float -> Float -> Float -> Float -> Float -> Float -> List Int\nsolve a b c alpha beta gamma =\n    let \n        ( x, y ) = walk [ ( a, alpha ), ( b, beta ), ( c, gamma ) ] ( 0, 0 ) 0\n        len = round (sqrt (x ^ 2 + y ^ 2))\n        angle = (atan2 y x) * 180 \/ pi\n        degs = floor angle\n        mins = floor <| (angle - toFloat degs) * 60\n        secs = floor <| (angle - toFloat degs - toFloat mins \/ 60) * 3600\n    in\n    [ len, degs, mins, secs ]\n\nwalk : List ( Float, Float ) -> ( Float, Float ) -> Float -> ( Float, Float )\nwalk pairs ( x, y ) offset =\n    case pairs of\n        [] -> ( x, y )\n        ( dist, angle ) :: tail ->\n            let\n                ( dx, dy ) =\n                    ( dist * cos (degrees (angle + offset)), dist * sin (degrees (angle + offset)))\n            in\n            walk tail ( x + dx, y + dy ) (offset + 90)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80544,"user_id":53,"body":"module Kata exposing (solve)\n\ndcos : Float -> Float\ndcos n = cos (n * pi \/ 180.0)\n\ndsin : Float -> Float\ndsin n = sin (n * pi \/ 180.0)\n\nhypot : Float -> Float -> Float\nhypot n m = sqrt (n * n + m * m)\n\nsolve : Float -> Float -> Float -> Float -> Float -> Float -> List Int\nsolve a b c alpha beta gamma =\n  let\n    x = a * dcos(alpha) - b * dsin(beta) - c * dcos(gamma)\n    y = a * dsin(alpha) + b * dcos(beta) - c * dsin(gamma)\n    t = (atan2 y x) * 180.0 \/ pi\n  in\n    [ (hypot y x) |> round, t |> floor, modBy 60 ((t * 60) |> floor), modBy 60 ((t * 3600) |> floor) ]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5bb804397274c772b40000ca":[{"id":80545,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = case layers of\n  0 -> 0\n  n -> (toFloat (n - 1)) * (sqrt 3) \/ 2 + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80546,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers =\n  case layers of\n    0 -> 0\n    1 -> 1\n    _ -> (cos <| degrees 30) + stackHeight2d (layers - 1)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80547,"user_id":492,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = \n  let \n    r = toFloat(layers - 1) * 0.866025 + 1.0\n  in\n    if layers > 0 then r\n    else 0\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80548,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = \n  let\n    innerTriangleH = layers - 1 |> toFloat |> (*) (sin (degrees 60)) \n  in\n    case layers of\n      0 -> 0\n      _ -> innerTriangleH + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80549,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = \n  case layers of\n    0 -> 0\n    _ -> (toFloat (layers - 1) * Basics.sqrt(3)) \/ 2 + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80550,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers =\n  case layers of\n    0 ->\n      0\n      \n    1 ->\n      1\n      \n    n ->\n      1 + (toFloat n - 1) * (1 - lossOnTwoLayers) + (toFloat (n \/\/ 40) * 0.001)\n    \n    \nlossOnTwoLayers : Float\nlossOnTwoLayers =\n  2 - 1.866","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80551,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d x = if x == 0 then 0 else (toFloat (x - 1) * ((sqrt 3) \/ 2)) + 1.0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80552,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = \n    let \n        num = toFloat layers - 1\n        prd = (*) (sqrt 3\/2)\n    in\n    case layers of\n        0 -> 0\n        1 -> 1.0\n        _ -> (prd num) + 1","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80553,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = (min (toFloat layers) 1) + (toFloat <| max (layers - 1) 0)*0.86602540378","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80554,"user_id":null,"body":"module Kata exposing (stackHeight2d)\n\nstackHeight2d : Int -> Float\nstackHeight2d layers = \n  let \n    layersFloat = toFloat layers\n  in\n    case layers > 1 of\n      True -> \n        layersFloat - ((layersFloat - 1) * 0.1339788)\n      False -> \n        layersFloat","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5cc70653658d6f002ab170b5":[{"id":80555,"user_id":492,"body":"module Kata exposing (sqrModulus, Data)\n\ntype alias Data = {tag : String, vector : List Int}\n\nsquaredCart : List Int -> List Int\nsquaredCart ls =\n    case ls of\n        x::y::xs -> x * x + y * y :: squaredCart xs\n        [_] -> []\n        [] -> []\nsquaredPolar : List Int -> List Int\nsquaredPolar ls =\n    case ls of\n        x::y::xs -> x * x :: squaredPolar xs\n        [_] -> []\n        [] -> []\nmaxMagn : Int -> Int\nmaxMagn n = \n    let\n        l = List.reverse(List.sort(String.split \"\" (String.fromInt n)))\n    in String.toInt(String.join \"\" l) |> Maybe.withDefault 0\n    \nsqrModulus : Data -> (Bool, Int, Int)\nsqrModulus z =\n    if z.tag \/= \"cart\" && z.tag \/= \"polar\" then (False, -1, 1)\n    else\n        let\n            m = if z.tag == \"cart\" then List.sum(squaredCart z.vector) else List.sum((squaredPolar z.vector))\n            r = maxMagn m\n        in (True, m, r)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80556,"user_id":1413,"body":"module Kata exposing (sqrModulus, Data)\n\ntype alias Data =\n    { tag : String, vector : List Int }\n\n\nsqrModulus : Data -> ( Bool, Int, Int )\nsqrModulus { tag, vector } =\n    let\n        toImaginary : Maybe (Int -> Int -> Imaginary)\n        toImaginary =\n            case tag of\n                \"cart\" ->\n                    Just Cart\n\n                \"polar\" ->\n                    Just Polar\n\n                _ ->\n                    Nothing\n    in\n    case\n        Maybe.andThen\n            (toImaginaries vector)\n            toImaginary\n            |> Maybe.map (List.map toSquareModulus >> List.sum)\n    of\n        Just sum ->\n            ( True, sum, toMax sum )\n\n        Nothing ->\n            ( False, -1, 1 )\n\n\ntype Imaginary\n    = Polar Int Int\n    | Cart Int Int\n\n\ntoMax : Int -> Int\ntoMax =\n    toDigits\n        >> List.sort\n        >> List.reverse\n        >> fromDigits\n\n\ntoSquareModulus : Imaginary -> Int\ntoSquareModulus n =\n    case n of\n        Polar r _ ->\n            r * r\n\n        Cart x y ->\n            x * x + y * y\n\n\ntoDigits : Int -> List Int\ntoDigits x =\n    if x < 10 then\n        [ x ]\n\n    else\n        modBy 10 x :: toDigits (x \/\/ 10)\n\n\nfromDigits : List Int -> Int\nfromDigits =\n    fromDigits_ 0\n\n\nfromDigits_ : Int -> List Int -> Int\nfromDigits_ soFar ints =\n    case ints of\n        [] ->\n            soFar\n\n        x :: xs ->\n            fromDigits_ (soFar * 10 + x) xs\n\n\ntoImaginaries : List Int -> (Int -> Int -> Imaginary) -> Maybe (List Imaginary)\ntoImaginaries ints toImaginary =\n    case ints of\n        [] ->\n            Just []\n\n        [ _ ] ->\n            Nothing\n\n        a :: b :: rest ->\n            case toImaginaries rest toImaginary of\n                Just imaginaries ->\n                    Just <| toImaginary a b :: imaginaries\n\n                Nothing ->\n                    Nothing\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80557,"user_id":null,"body":"module Kata exposing (sqrModulus, Data)\ntype alias Data = {tag : String, vector : List Int}\n\nsqrModulus : Data -> (Bool, Int, Int)\nsqrModulus { tag, vector } =\n    case tag of\n        \"polar\" -> polar 0 vector\n        \"cart\" -> cart 0 vector\n        _ -> (False, -1, 1)\n\npolar sum vector =\n    case vector of\n        mag :: angle :: rest -> polar (sum + mag ^ 2) rest\n        _ -> ( True, sum, largest sum )\n\ncart sum vector =\n    case vector of\n        re :: im :: rest -> cart (sum + re ^ 2 + im ^ 2) rest\n        _ -> ( True, sum, largest sum )\n\nlargest = String.fromInt >> String.toList >> List.sort >> List.reverse >> String.fromList >> String.toInt >> Maybe.withDefault 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5ce399e0047a45001c853c2b":[{"id":80558,"user_id":492,"body":"module Kata exposing (parts_sums)\nimport List.Extra\n\nparts_sums : List Int -> List Int\nparts_sums = List.Extra.scanr (+) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80559,"user_id":53,"body":"module Kata exposing (parts_sums)\n\nparts_sums : List Int -> List Int\nparts_sums arr =\n  case arr of\n    [] ->\n      [0]\n    (x :: xs) ->\n      let ls = parts_sums xs in\n      case ls of\n        [] ->\n          [x]\n        (y :: ys) ->\n          (x + y) :: y :: ys","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80560,"user_id":null,"body":"module Kata exposing (parts_sums)\nimport List.Extra exposing (..)\nparts_sums : List Int -> List Int\nparts_sums arr = List.Extra.scanr (+) 0 arr\n              \n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80561,"user_id":null,"body":"module Kata exposing (parts_sums)\n\nparts_sums : List Int -> List Int\nparts_sums arr = \n  case arr of\n    [] -> [0]\n    x :: xs -> List.sum arr :: parts_sums xs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80562,"user_id":null,"body":"module Kata exposing (parts_sums)\nimport List.Extra exposing (scanr)\n\nparts_sums : List Int -> List Int\nparts_sums = scanr (+) 0","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5d50e3914861a500121e1958":[{"id":80563,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nadd_letters : List Char -> Char\nadd_letters letters = letters |> List.map charToInt |> List.sum |> intToChar\n\ncharToInt : Char -> Int\ncharToInt c = (Char.toCode c) - codeOfA + 1\n\ncodeOfA = Char.toCode 'a'\ncodeOfZ = Char.toCode 'z'\nnumberofLetters = codeOfZ + 1 - codeOfA\n\nintToChar : Int -> Char\nintToChar i = Char.fromCode ((modBy numberofLetters (i-1)) + codeOfA)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80564,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nalphabet = \"zabcdefghijklmnopqrstuvwxy\"\n\nletterToInt: Char -> Int\nletterToInt c = String.indexes (String.fromChar c) alphabet\n  |> List.head\n  |> Maybe.withDefault 0\n  \nintToLetter: Int -> Char\nintToLetter i = String.slice i (i + 1) alphabet\n  |> String.toList\n  |> List.head\n  |> Maybe.withDefault 'z'\n\nadd_letters : List Char -> Char\nadd_letters letters = List.map letterToInt letters\n  |> List.sum\n  |> modBy (String.length alphabet)\n  |> intToLetter","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80565,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nletterToInt : Char -> Int\nletterToInt c = Char.toCode c - Char.toCode 'a' + 1\n\nintToLetter : Int -> Char\nintToLetter i = if i == 0 \n  then 'z'\n  else Char.fromCode (i + Char.toCode 'a' - 1)\n\nadd_letters : List Char -> Char\nadd_letters letters = List.map letterToInt letters\n  |> List.sum\n  |> modBy (letterToInt 'z')\n  |> intToLetter","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80566,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nimport Char as C\nimport List as L\n\nadd_letters : List Char -> Char\nadd_letters = L.map (C.toCode >> (negate << (-)96)) >> L.sum >> (negate << (-)1) >> (modBy 26) >> ((+)97) >> C.fromCode","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80567,"user_id":168,"body":"module AlphabeticalAddition exposing (add_letters)\n\nadd_letters : List Char -> Char\nadd_letters letters = Char.fromCode (modBy 26 (25 + List.foldl (\\x r -> r + Char.toCode x - 96) 0 letters) + 97)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80568,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\n    \nadd_letters : List Char -> Char\nadd_letters letters = \n  let\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabetList = String.toList alphabet\n    \n    alphabetIndexOf el list =\n      let\n        inner l i =\n          case l of\n            [] -> Nothing\n            (x::xs) ->\n              if x == el then\n                Just i\n              else\n                inner xs (i + 1)\n      in\n        inner list 1\n        \n    scoreLetter l =\n      case alphabetIndexOf l alphabetList of\n        Nothing -> 0\n        Just int -> int\n        \n    scores = List.map scoreLetter letters\n    \n    charAt n = String.slice (n-1) n alphabet \n      |> String.uncons \n      |> Maybe.withDefault ('?', \"\") \n      |> Tuple.first\n    \n    toAlphabetIndex x =\n      if (modBy 26 x == 0) then 26 else (modBy 26 x)\n      \n  in\n    scores \n      |> List.sum \n      |> toAlphabetIndex \n      |> charAt  \n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80569,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nadd_letters : List Char -> Char\nadd_letters letters =\n  letters\n  |> List.map (\\c -> Char.toCode c - 96)\n  |> List.sum\n  |> modBy 26\n  |> (\\x -> if x == 0 then 26 else x)\n  |> (+) 96\n  |> Char.fromCode","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80570,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nimport Char exposing (toUpper, toCode, fromCode, toLower)\nimport List exposing (map, sum)\n\nadd_letters : List Char -> Char\nadd_letters letters = letters\n  |> map toUpper\n  |> map toCode\n  |> map (\\x -> (x - 64))\n  |> sum\n  |> modBy 26\n  |> (\\x -> (if x == 0 then 26 else x) + 64)\n  |> fromCode\n  |> toLower","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80571,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nadd_letters : List Char -> Char\nadd_letters letters = \n  let\n    offset = Char.toCode 'a' - 1\n    convert c = Char.toCode c - offset\n  in\n    case letters of\n      [] -> 'z'\n      _ -> \n        List.map convert letters\n        |> List.sum\n        |> modBy 26\n        |> \\c -> if c == 0 then 'z' else Char.fromCode (c + offset)\n  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"},{"id":80572,"user_id":null,"body":"module AlphabeticalAddition exposing (add_letters)\n\nunicode_lower_a_position : Int\nunicode_lower_a_position = Char.toCode 'a'\n\nunicode_lower_z_position : Int\nunicode_lower_z_position = Char.toCode 'z'\n\nlower_char_offset : Int\nlower_char_offset = decrement unicode_lower_a_position\n\ndecrement : Int -> Int\ndecrement value = value - 1\n\nconvert : Char -> Int\nconvert char = (Char.toCode char) - lower_char_offset\n\nreducer : Int -> Int -> Int\nreducer element accumulator =\n  let\n    result = element + accumulator\n    limit = unicode_lower_z_position - lower_char_offset\n  in case result > limit of\n    True -> result - limit\n    False -> result\n\nadd_letters : List Char -> Char\nadd_letters letters =\n  case List.isEmpty letters of\n    True ->\n      Char.fromCode unicode_lower_z_position\n    False -> \n      List.map convert letters\n        |> List.foldl reducer 0\n        |> (+) lower_char_offset\n        |> Char.fromCode","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-25 15:16:29"}],"5d68d05e7a60ba002b0053f6":[{"id":80573,"user_id":492,"body":"module Kata exposing (bonus)\n\nbonus : List Int -> Int -> List Int\nbonus arr s =\n    let\n        b = (toFloat s) \/ List.sum(List.map (\\x -> 1 \/ (toFloat x)) arr)\n    in List.map(\\x -> round(b \/ (toFloat x))) arr","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80574,"user_id":753,"body":"module Kata exposing (bonus)\n\nbonus : List Int -> Int -> List Int\nbonus arr s =\n  let \n    inverses = arr\n      |> List.map toFloat\n      |> List.map ((\/) 1.0)\n    inverse_sum = inverses\n      |> List.foldl (+) 0\n    \n    transformation x = round ((toFloat s) \/ (toFloat x) \/ inverse_sum)\n  in\n    List.map transformation arr\n    ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80575,"user_id":53,"body":"module Kata exposing (bonus)\n\nbonus : List Int -> Int -> List Int\nbonus xs s =\n  let \n    t = Maybe.withDefault 0 (List.maximum xs)\n    x = (toFloat s) \/ (List.foldl (\\e acc -> acc + (toFloat t) \/ (toFloat e)) 0.0 xs)\n  in\n    List.map (\\e -> (x * (toFloat t) \/ (toFloat e)) |> round) xs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5d98b6b38b0f6c001a461198":[{"id":80576,"user_id":492,"body":"module Kata exposing (code, decode)\n\ncode : String -> String\ncode ls =\n    case (String.toList ls) of\n        ('0'::xs) -> \"10\" ++ code (String.fromList xs)\n        ('1'::xs) -> \"11\" ++ code (String.fromList xs)\n        ('2'::xs) -> \"0110\" ++ code (String.fromList xs)\n        ('3'::xs) -> \"0111\" ++ code (String.fromList xs)\n        ('4'::xs) -> \"001100\" ++ code (String.fromList xs)\n        ('5'::xs) -> \"001101\" ++ code (String.fromList xs)\n        ('6'::xs) -> \"001110\" ++ code (String.fromList xs)\n        ('7'::xs) -> \"001111\" ++ code (String.fromList xs)\n        ('8'::xs) -> \"00011000\" ++ code (String.fromList xs)\n        ('9'::xs) -> \"00011001\" ++ code (String.fromList xs)\n        _ -> \"\"\n\ndecode : String -> String\ndecode ls =\n    case (String.toList ls) of\n        ('1'::'0'::xs) ->  \"0\" ++ (decode (String.fromList xs))\n        ('1'::'1'::xs) ->  \"1\" ++ (decode (String.fromList xs))\n        ('0'::'1'::'1'::'0'::xs) ->  \"2\" ++ (decode (String.fromList xs))\n        ('0'::'1'::'1'::'1'::xs) ->  \"3\" ++ (decode (String.fromList xs))\n        ('0'::'0'::'1'::'1'::'0'::'0'::xs) ->  \"4\" ++ (decode (String.fromList xs))\n        ('0'::'0'::'1'::'1'::'0'::'1'::xs) ->  \"5\" ++ (decode (String.fromList xs))\n        ('0'::'0'::'1'::'1'::'1'::'0'::xs) ->  \"6\" ++ (decode (String.fromList xs))\n        ('0'::'0'::'1'::'1'::'1'::'1'::xs) ->  \"7\" ++ (decode (String.fromList xs))\n        ('0'::'0'::'0'::'1'::'1'::'0'::'0'::'0'::xs) ->  \"8\" ++ (decode (String.fromList xs))\n        ('0'::'0'::'0'::'1'::'1'::'0'::'0'::'1'::xs) ->  \"9\" ++ (decode (String.fromList xs))\n        _ -> \"\"  ","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5da1df6d8b0f6c0026e6d58d":[{"id":80577,"user_id":492,"body":"module Kata exposing (c)\nimport List.Extra\n\nprimeFacts : Int -> List Int\nprimeFacts n =\n    let\n        go p num factors =\n            if p * p > num then\n                List.reverse factors ++ [ num ]\n            else if modBy p num == 0 then\n                go p (floor (toFloat(num) \/ toFloat(p))) (p :: factors)\n            else\n                go (p + 1 + modBy 2 p) num factors\n    in if n <= 1 then [] else go 2 n []\nc : Int -> Int\nc k =\n    let \n        root = floor(toFloat(k) ^ 0.5)\n        res = \n            if root * root \/= k then 0\n            else \n                primeFacts (k * root) \n                |> List.Extra.group\n                |> List.map (\\ (x, y) -> List.length(y) + 2) |> List.product\n    in res","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80578,"user_id":492,"body":"module Kata exposing (c)\nimport List.Extra\n\nprimeFacts : Int -> List Int\nprimeFacts n =\n    let\n        go p num factors =\n            if p * p > num then\n                List.reverse factors ++ [ num ]\n            else if modBy p num == 0 then\n                go p (floor (toFloat(num) \/ toFloat(p))) (p :: factors)\n            else\n                go (p + 1 + modBy 2 p) num factors\n    in if n <= 1 then [] else go 2 n []\nc : Int -> Int\nc k =\n    let \n        root = floor(toFloat(k) ^ 0.5)\n        res = \n            if root * root \/= k then 0\n            else \n                primeFacts (k * root) \n                |> List.Extra.group\n                |> List.map (\\ (x, y) -> List.length(y) + 2) |> List.product\n    in res","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5dad6e5264e25a001918a1fc":[{"id":80579,"user_id":null,"body":"module Kata exposing (decode)\n\ndecode : String -> String\ndecode s =\n    let\n        ( chars, num ) = \n            List.partition Char.isLower (String.toList s)\n                |> Tuple.mapSecond (Maybe.withDefault 0 << String.toInt << String.fromList)\n    in\n    decodeHelp num \"\" chars\n\ndecodeHelp num str chars =\n    case chars of\n        [] -> str\n        char :: rest ->\n            case encode num (Char.toCode char - 97) 0 [] of\n                [ coeff ] ->\n                    let \n                        decoded = String.fromChar (Char.fromCode (coeff + 97))\n                    in \n                    decodeHelp num (str ++ decoded) rest\n                -- zero or more than one possible decode\n                _ ->\n                    \"Impossible to decode\"\n                \nencode num toEqual ctr coeffs =\n    let \n        modded = modBy 26 (ctr * num)\n    in\n    if ctr > 25 then \n        coeffs\n    else if modded == toEqual then \n        encode num toEqual (ctr + 1) (ctr :: coeffs)\n    else \n        encode num toEqual (ctr + 1) coeffs","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80580,"user_id":492,"body":"module Kata exposing (decode)\n\nimport List.Extra\nimport Dict\n\ngetList : Int -> List String -> String\ngetList nth list =\n    list |> List.drop (nth - 1) |> List.head |> Maybe.withDefault \"-\"\naux : List Char -> Int -> String     \naux ss pref =\n    let\n        alpha = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n        dic = Dict.fromList([(3,9),(9,3),(21,5),(5,21),(7,15),(15,7),(11,19),(19,11),(17,23),(23,17),(25,25),(1,1)])\n        num = Maybe.withDefault 0 (Dict.get (modBy 26 pref) dic)\n        s1 = List.map String.fromChar ss |> List.map(\\c -> Maybe.withDefault 0 (List.Extra.elemIndex c alpha))\n        s2 = List.map(\\v -> getList (1 + (modBy 26 (num * v))) alpha) s1\n    in String.join \"\" s2\ndecode : String -> String    \ndecode s =\n    let \n        (n, ss) = String.toList s |> List.partition Char.isDigit\n        pref = Maybe.withDefault 0 (String.toInt (String.join \"\" (List.map String.fromChar n)))\n    in \n        if modBy 2 pref == 0 || modBy 13 pref == 0 then \"Impossible to decode\"\n        else aux ss pref","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5db19d503ec3790012690c11":[{"id":80581,"user_id":null,"body":"module Kata exposing (weight)\n\n-- i0 = 0.14849853757254047\nweight : Int -> Int -> Float\nweight n w = toFloat w * 0.17174117862516716128","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80582,"user_id":492,"body":"module Kata exposing (weight)\n\nweight : Int -> Int -> Float\nweight n w = (toFloat w) * 0.14849853757254047 * (1.0 - e ^ (toFloat -(2 * n + 2))) \/ (1.0 - e ^ -2)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5e4bb05b698ef0001e3344bc":[{"id":80583,"user_id":492,"body":"module Kata exposing (solve)\n\nimport List.Extra\n\ngetList nth list =\n    list |> List.drop (nth - 1) |> List.head |> Maybe.withDefault 0\nsolve : List Int -> (Int, Int)\nsolve a =\n    let\n        (xx, yy) = List.Extra.splitAt 4 a\n        a0 = getList 1 xx\n        a1 = getList 2 xx\n        a2 = getList 3 xx\n        a3 = getList 4 xx\n        t1 = abs(a0 * a2 - a1 * a3)\n        t2 = abs(a0 * a3 + a1 * a2)\n    in\n        if List.length a == 4 then (t1, t2)\n        else solve(t1 :: t2 :: yy)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80584,"user_id":53,"body":"module Kata exposing (solve)\n\nat ls i = ls |> List.drop i |> List.head |> Maybe.withDefault 0\n   \naux : List Int -> Int -> Int -> (Int, Int)\naux ls a b = \n  let\n    c = a * (at ls 0) + b * (at ls 1)\n    d = abs (b * (at ls 0) - (a * (at ls 1)))\n  in\n    if List.length ls == 0 then (a, b)\n    else aux (ls |> List.drop 2) c d\n    \nsolve : List Int -> (Int, Int)\nsolve ls = aux (ls |> List.drop 2) (at ls 0) (at ls 1)\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80585,"user_id":null,"body":"module Kata exposing (solve)\n\nsolve list =\n    case list of \n        [ a, b, c, d ] ->\n            newAB a b c d\n            \n        a :: b :: c :: d :: rest ->\n            let ( newA, newB ) = newAB a b c d\n            in \n            solve (newA :: newB :: rest)\n            \n        _ -> (0,0)\n\nnewAB a b c d =\n    ( abs (a*c - b*d), abs (a*d + b*c) )","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}],"5fde1ea66ba4060008ea5bd9":[{"id":80586,"user_id":null,"body":"module Kata exposing (burner)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = \n  let \n    h2o = min (h\/\/2) o\n    co2 = min c <| (o - h2o) \/\/ 2\n    ch4 = min (c - co2) <| (h - h2o*2) \/\/ 4\n  in\n  (h2o, co2, ch4)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80587,"user_id":null,"body":"module Kata exposing (burner)\nimport Dict exposing (Dict)\n\n{-\n  This is a generic solution that allows scaling to any number of elements and reactions.\n  It is unnecessarily complex for the specific problem at hand, but cool as a generalization exercise.\n  \n  As an improvement not allowed in CodeWars, we could make Element a union type and use an OpaqueDict instead.\n  OpaqueDict allows any type of key, as long as you supply the mapping to a comparable type.\n-}\ntype alias Element = String\n\nhydrogen = \"Hydrogen\"\ncarbon = \"Carbon\"\noxygen = \"Oxygen\"\n\ntype alias AtomAmounts = Dict Element Int\ntype alias Reaction = AtomAmounts\n\natomAmountsOf : List (Element, Int) -> AtomAmounts\natomAmountsOf = Dict.fromList >> Dict.filter (\\k v -> v > 0)\n\nwater = atomAmountsOf [(hydrogen, 2), (oxygen, 1)]\nco2 = atomAmountsOf [(carbon, 1), (oxygen, 2)]\nmethane = atomAmountsOf [(carbon, 1), (hydrogen, 4)]\n\nreact : Reaction -> AtomAmounts -> (Int, AtomAmounts)\nreact reaction atoms =\n  let\n    moleculesWithElem elem requiredAmount = Dict.get elem atoms\n      |> Maybe.map (\\m -> m \/\/ requiredAmount)\n      |> Maybe.withDefault 0\n    maxMoleculesPerElement = Dict.map moleculesWithElem reaction\n    maxMolecules = Dict.toList maxMoleculesPerElement\n      |> List.map Tuple.second\n      |> List.minimum\n      |> Maybe.withDefault 0\n    remainingAtomsInElem elem amount = amount - (maxMolecules * (Dict.get elem reaction |> Maybe.withDefault 0))\n    remainingAtoms = Dict.map remainingAtomsInElem atoms\n  in\n    (maxMolecules, remainingAtoms)\n\nnextReaction : Reaction -> (List Int, AtomAmounts) -> (List Int, AtomAmounts)\nnextReaction reaction (previousReactions, remainingAtoms) =\n  let\n    (molecules, remaining) = react reaction remainingAtoms\n  in\n    (List.append previousReactions [molecules], remaining)\n\ngenericBurner : AtomAmounts -> List Reaction -> List Int\ngenericBurner atomAmounts reactions =\n  let\n    (generatedMolecules, _) = List.foldl nextReaction ([], atomAmounts) reactions\n  in\n    generatedMolecules\n\nlistToTriple: List Int -> (Int, Int, Int)\nlistToTriple ls = case ls of\n  a :: b :: c :: _ -> (a, b, c)\n  _ -> (0, 0, 0)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = listToTriple <| \n  genericBurner\n    (atomAmountsOf [(carbon, c), (hydrogen, h), (oxygen, o)])\n    [water, co2, methane]","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80588,"user_id":null,"body":"module Kata exposing (burner)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner = react ( 0, 0, 0 ) \n\nreact : ( Int, Int, Int ) -> Int -> Int -> Int -> (Int, Int, Int)\nreact ( h2o, co2, ch4 ) c h o = \n    if h >= 2 && o >= 1 then\n        react ( h2o + 1, 0, 0 ) c (h - 2) (o - 1)\n        \n    else if c >= 1 && o >= 2 then\n        react ( h2o, co2 + 1, 0 ) (c - 1) h (o - 2)\n        \n    else if c >= 1 && h >= 4 then\n        react ( h2o, co2, ch4 + 1 ) (c - 1) (h - 4) o\n        \n    else\n       ( h2o, co2, ch4 )","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80589,"user_id":753,"body":"module Kata exposing (burner)\n\nwater: Int -> Int -> Int -> Int\nwater c h o =\n  min (h \/\/ 2) o\n\ncarbon_dioxide: Int -> Int -> Int -> Int\ncarbon_dioxide c h o = \n  min c ((o - water c h o) \/\/ 2)\n\nmethane: Int -> Int -> Int -> Int\nmethane c h o = \n  min (c - carbon_dioxide c h o) ((h - 2 * water c h o) \/\/ 4)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = \n  (water c h o,\n  carbon_dioxide c h o, \n  methane c h o)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80590,"user_id":492,"body":"module Kata exposing (burner)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = \n  let\n    water = min (h \/\/ 2)  o\n    co2 = min ((o - water) \/\/ 2) c\n    methane = min((h - water * 2) \/\/ 4) (c - co2)\n  in\n    (water, co2, methane)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80591,"user_id":null,"body":"module Kata exposing (..)\n\nimport Tuple exposing (first, second)\nimport List.Extra exposing (scanl)\nimport List exposing (..)\n\nreactionList : List Chems\nreactionList =\n    [ {c=0, h=2, o=1}\n    , {c=1, h=0, o=2}\n    , {c=1, h=4, o=0}\n    ]\n\nf : Chems -> (Int, Chems) -> (Int, Chems)\nf formula (_, inp) =\n    reaction inp formula\n\nlistChems : Chems -> List (Int, Chems)\nlistChems inp = \n    scanl f (0, inp) reactionList\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = \n    listChems {c=c, h=h, o=o}\n        |> List.drop 1\n        |> List.map Tuple.first\n        |> make3Tuple\n        |> Maybe.withDefault (-1, -1, -1)\n\nmake3Tuple : List Int -> Maybe (Int, Int, Int)\nmake3Tuple l =\n    if List.length l == 3 then\n        Just ( Maybe.withDefault -1 <| head l\n        , Maybe.withDefault -1 <| head (drop 1 l)\n        , Maybe.withDefault -1 <| head (drop 2 l)\n        )\n    else\n        Nothing\n\n\nreaction : Chems -> Chems -> (Int, Chems)\nreaction inp formula =\n    let\n        nbR = nbReactions inp formula\n    in\n    (nbR, decreaseBy nbR formula inp)\n\nnbReactions : Chems -> Chems -> Int\nnbReactions inp formula =\n    [ (inp.c, formula.c)\n    , (inp.h, formula.h)\n    , (inp.o, formula.o )\n    ]\n        |> List.filter (\\x -> second x \/= 0)\n        |> List.map (\\x -> first x \/\/ second x)\n        |> List.minimum\n        |> Maybe.withDefault 0\n\ndecreaseBy : Int -> Chems -> Chems -> Chems\ndecreaseBy n formula inp =\n            { c = inp.c - n*formula.c\n            , h = inp.h - n*formula.h\n            , o = inp.o - n*formula.o}\n\n\ntype alias Chems =\n    { c: Int\n    , h: Int\n    , o: Int}","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80592,"user_id":null,"body":"module Kata exposing (burner)\nimport Array\n\ntype alias Atmosphere = (Int, Int, Int)\ntype alias Reaction = Atmosphere -> (Int, Atmosphere)\ntype alias Reactor = Formula -> Reaction\ntype alias Formula = (Int, Int, Int)\n\n\nremove : Formula -> Reaction\nremove formula =\n  let \n    react (c, h, o) =\n      let\n        (cs, hs, os) = formula\n        total = c + h + o\n        c1 = if cs == 0 then (total + 1) else c\/\/cs\n        h1 = if hs == 0 then (total + 1) else h\/\/hs\n        o1 = if os == 0 then (total + 1) else o\/\/os\n        num = min (min c1 h1) o1\n      in\n        (num, (c - num * cs, h - num * hs, o - num * os))\n   in\n    react\n\ntriplet : Maybe Int -> Maybe Int -> Maybe Int -> (Int, Int, Int)\ntriplet a b c = (Maybe.withDefault 0 a,\n                 Maybe.withDefault 0 b, \n                 Maybe.withDefault 0 c)\n\ndo_burn : Atmosphere -> List Reaction -> (List Int, Atmosphere)\ndo_burn atmosphere reactions = \n    let\n      react : Reaction -> (List Int, Atmosphere) -> (List Int, Atmosphere)\n      react reaction (results, atmos) = \n        let\n         (result, new_atmos) = reaction atmos\n        in\n         (List.append results [result], new_atmos)\n    in\n       List.foldl react ([], atmosphere) reactions\n       \nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = \n  let\n    water = (0,2,1)\n    co2 = (1,0,2)\n    methane = (1,4, 0)\n    atmosphere = (c, h, o)\n    reactions = [remove water, \n                 remove co2, \n                 remove methane]\n    \n    final_results = \n      do_burn atmosphere reactions |> Tuple.first |> Array.fromList\n      \n   in\n      triplet (Array.get 0 final_results) (Array.get 1 final_results) (Array.get 2 final_results)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80593,"user_id":null,"body":"module Kata exposing (burner)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o =\n  let\n    water = min (h \/\/ 2) o\n    co2 = min c ((o - water) \/\/ 2)\n    methane = min (c - co2) ((h - (water * 2)) \/\/ 4)\n  in\n    (water, co2, methane)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80594,"user_id":null,"body":"module Kata exposing (burner)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o =\n  let\n    numberOfWaters = min (h\/\/2) o\n    numberOfDioxides = min c ((o - numberOfWaters)\/\/2)\n    numberOfMethane = min (c - numberOfDioxides)  ((h - (numberOfWaters*2))\/\/4)\n  in\n    (numberOfWaters, numberOfDioxides, numberOfMethane)","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"},{"id":80595,"user_id":null,"body":"module Kata exposing (burner)\n\nimport Dict exposing (Dict)\n\nburner : Int -> Int -> Int -> (Int, Int, Int)\nburner c h o = \n  let\n    d = Dict.fromList [(\"c\", c), (\"h\", h), (\"o\", o)]\n    r = water d |> carbonDioxide |> methane\n  in\n    (\n      Dict.get \"w\" r |> Maybe.withDefault 0,\n      Dict.get \"co2\" r |> Maybe.withDefault 0,\n      Dict.get \"ch4\" r |> Maybe.withDefault 0\n    )\n  \nwater : Dict String Int -> Dict String Int\nwater d = \n  let\n    h = Dict.get \"h\" d |> Maybe.withDefault 0\n    o = Dict.get \"o\" d |> Maybe.withDefault 0\n    w = min (h\/\/2) o\n  in  \n    Dict.insert \"w\" w <| Dict.insert \"h\" (h - 2*w) <| Dict.insert \"o\" (o - w) d\n  \ncarbonDioxide : Dict String Int -> Dict String Int\ncarbonDioxide d =\n  let\n    c = Dict.get \"c\" d |> Maybe.withDefault 0\n    o = Dict.get \"o\" d |> Maybe.withDefault 0\n    co2 = min (o\/\/2) c\n  in  \n    Dict.insert \"co2\" co2 <| Dict.insert \"o\" (o - 2*co2) <| Dict.insert \"c\" (c - co2) d\n\nmethane : Dict String Int-> Dict String Int\nmethane d =\n  let\n    c = Dict.get \"c\" d |> Maybe.withDefault 0\n    h = Dict.get \"h\" d |> Maybe.withDefault 0\n    ch4 = min (h\/\/4) c\n  in  \n    Dict.insert \"ch4\" ch4 <| Dict.insert \"h\" (h - 4*ch4) <| Dict.insert \"c\" (c - ch4) d\n","lang_id":15,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-23 16:36:18","updated_at":"2022-12-23 16:36:18"}]}