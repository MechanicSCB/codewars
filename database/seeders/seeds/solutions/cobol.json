{"50654ddff44f800200000004":[{"id":19200,"user_id":421,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           MULTIPLY num-1 BY num-2 GIVING result.\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19201,"user_id":2545,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           MULTIPLY num-1 BY num-2 giving result  \n           .\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19202,"user_id":168,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           multiply num-1 by num-2 giving result.\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19203,"user_id":null,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           multiply num-1 by num-2 giving result\n           goback.\n       end program f01-mult.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19204,"user_id":null,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           MuLtIpLy num-1 bY num-2 giving result  \n           .\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19205,"user_id":null,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           MULTIPLY num-1 by num-2 giving result  \n           .\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19206,"user_id":null,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           multiply num-1 BY num-2 giving result  \n           .\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19207,"user_id":null,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  a        pic 9(4).\n       01  b        pic 9(4).\n       01  c        pic 9(8).\n       procedure division using a b c.\n           multiply a by b giving c  \n           .\n       end program f01-mult.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19208,"user_id":53,"body":"       identification division.\n       program-id. f01-mult.\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           compute result = num-1 * num-2.\n       end program f01-mult.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19209,"user_id":76,"body":"       identification division.\n       program-id. f01-mult.\n       author. 'B1ts'\n       date-written. '2021-11-14'\n       data division.\n       working-storage section.\n       linkage section.\n       01  num-1        pic 9(4).\n       01  num-2        pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num-1 num-2 result.\n           multiply num-1 by num-2 giving result.\n       end program f01-mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19210,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           multiply PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19211,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.\n      * convert add to multiply change to to by (note : comment in COBOL is asterik after 6 space)","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19212,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 0.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19213,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n      \n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 0001.\n       01 PRODAND-2    PIC 9(04) VALUE 0001.\n       01 RESULT       PIC 9(04).\n       \n       PROCEDURE DIVISION.\n           GOBACK.\n       \n       F01-MULT.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.\n      \n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19214,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.\n           DISPLAY RESULT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19215,"user_id":null,"body":"123456*890123456\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n           01 PRODAND-1    PIC 9(04) VALUE 1.\n           01 PRODAND-2    PIC 9(04) VALUE 1.\n           01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK\n           .\n       F01-MULT SECTION.\n           COMPUTE  RESULT = PRODAND-1 * PRODAND-2.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19216,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04).\n       01 PRODAND-2    PIC 9(04).\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n       F01-MULT.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19217,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 0001.\n       01 PRODAND-2    PIC 9(04) VALUE 0001.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n       COMPUTE RESULT = PRODAND-1 * PRODAND-2.\n      \n       END-SECTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19218,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           perform F01-MULT  \n           GOBACK.\n       F01-MULT SECTION.\n           multiply PRODAND-1 by PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19219,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19220,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19221,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BOB. \n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n        PERFORM F01-MULT.      \n      \n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19222,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04) VALUE ZEROS.\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           COMPUTE RESULT = PRODAND-1 * PRODAND-2.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19223,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           \n       F01-MULT SECTION.\n             MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.\n       \n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19224,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n       PERFORM F01-MULT.\n           GOBACK.\n       F01-MULT SECTION.\n           COMPUTE RESULT = PRODAND-1 * PRODAND-2.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19225,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n        \n       F01-MULT SECTION.\n           COMPUTE RESULT = PRODAND-1 * PRODAND-2.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19226,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(4) VALUE 01.\n       01 PRODAND-2    PIC 9(4) VALUE 01.\n       01 RESULT       PIC 9(4).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           ADD PRODAND-1 TO PRODAND-2 GIVING RESULT.\n            MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19227,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(4) VALUE 1.\n       01 PRODAND-2    PIC 9(4) VALUE 1.\n       01 RESULT       PIC 9(4).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19228,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           compute result = PRODAND-1 * PRODAND-2.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19229,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           COMPUTE RESULT = PRODAND-1 * PRODAND-2 END-COMPUTE.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19230,"user_id":null,"body":"\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19231,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04).\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           multiply  PRODAND-1 by PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19232,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04) VALUE 0.\n       PROCEDURE DIVISION.\n           PERFORM F01-MULT\n           GOBACK.\n       F01-MULT SECTION.\n           COMPUTE RESULT = PRODAND-1 * PRODAND-2\n           DISPLAY RESULT. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19233,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04) VALUE 0.\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19234,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRODAND-1    PIC 9(04) VALUE 1.\n       01 PRODAND-2    PIC 9(04) VALUE 1.\n       01 RESULT       PIC 9(04) VALUE 2.\n       PROCEDURE DIVISION.\n           GOBACK.\n       F01-MULT SECTION.\n           MULTIPLY PRODAND-1 BY PRODAND-2 GIVING RESULT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"50ee6b0bdeab583673000025":[{"id":19235,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4) VALUE SPACES.\n       01 B           PIC A(5) VALUE SPACES.\n       01 NAME        PIC A(9) VALUE SPACES.\n       PROCEDURE DIVISION USING A B NAME.\n          MOVE \"code\" TO A\n          MOVE \"wa.rs\" TO B\n          MOVE \"codewa.rs\" TO NAME.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19236,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 n           PIC A(9).\n       PROCEDURE DIVISION USING A B n.\n            move \"codewa.rs\" to n\n            move n(1 : 4) to a\n            move n(5 : 5) to b\n          goback.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19237,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n           move 'code' to a\n           move 'wa.rs' to b\n           move function concat(a, b) to name.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19238,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n          MOVE \"code\" TO A.\n          MOVE \"wa.rs\" TO B.\n          MOVE \"codewa.rs\" TO NAME.\n          goback.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19239,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n          move 'code' to a\n          move 'wa.rs' to b\n          move 'codewa.rs' to name \n          goback.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19240,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n          MOVE \"code\" TO A\n          MOVE \"wa.rs\" TO B\n          STRING A B INTO NAME\n          .\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19241,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n        MOVE \"code\" TO A.\n        MOVE \"wa.rs\" TO B.\n        STRING A DELIMITED BY SPACE\n        B DELIMITED BY SIZE\n        INTO NAME\n        END-STRING.\n          goback.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19242,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n          MOVE 'code' TO A.\n          MOVE 'wa.rs' TO B.\n          STRING A B INTO NAME.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19243,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n          MOVE 'code' TO A.\n          MOVE 'wa.rs' TO B.\n          MOVE 'codewa.rs' TO NAME.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19244,"user_id":466,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC A(4).\n       01 B           PIC A(5).\n       01 NAME        PIC A(9).\n       PROCEDURE DIVISION USING A B NAME.\n          INITIALIZE A REPLACING ALPHABETIC DATA BY \"code\".\n          INITIALIZE B REPLACING ALPHABETIC DATA BY \"wa.rs\".\n          STRING A B INTO NAME.\n          goback.\n       END PROGRAM KATA. \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"514a024011ea4fb54200004b":[{"id":19245,"user_id":50,"body":"       identification division.\n       program-id. DomainName.\n      \n       data division.\n       local-storage section.\n       01 s           pic x(70).\n      \n       linkage section.\n       01 url         pic x(70).\n       01 result      pic x(30).\n      \n       procedure division using url result.\n      \n          initialize result\n      \n          evaluate true\n          when url(1:8) = 'https:\/\/'\n              move url(9:) to s\n          when url(1:7) = 'http:\/\/'\n              move url(8:) to s\n          when other\n              move url to s\n          end-evaluate\n        \n          if s(1:4) = 'www.' move s(5:) to s end-if\n      \n          unstring s delimited by '.' into result end-unstring\n      \n          goback.\n       end program DomainName.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19246,"user_id":53,"body":"       identification division.\n       program-id. DomainName.\n       data division.\n       local-storage section.\n       01 s           pic x(70).\n       linkage section.\n       01 url         pic x(70).\n       01 result      pic x(30).\n       procedure division using url result.\n      \n          initialize result\n          perform http\n          perform www\n          unstring s  delimited by '.' into result\n          goback.\n      \n        http.\n          evaluate true\n            when url(1:8) = 'https:\/\/' move url(9:) to s\n            when url(1:7) = 'http:\/\/'  move url(8:) to s\n            when other                 move url to s\n          end-evaluate\n          .\n      \n        www.\n          if s(1:4) = 'www.' then      move s(5:) to s end-if\n          .\n      \n       end program DomainName.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"514a6336889283a3d2000001":[{"id":19247,"user_id":421,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  j                 pic 99.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 0 to 20 times \n                                  depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using arr result.\n           set j to 1           \n           perform varying i from 1 by 1 until i > arr-length\n               if function rem(xs(i), 2) = 0 then\n                   move xs(i) to res(j)\n                   add 1 to j, res-length\n               end-if\n           end-perform.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19248,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. getEvenNumbers.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LEN        PIC 99.\n           05 XS             PIC 99 OCCURS 0 TO 20 DEPENDING ON ARR-LEN\n                                                   INDEXED I.\n       01  RESULT.\n           05 RES-LEN        PIC 99.\n           05 RES            PIC 99 OCCURS 0 TO 20 DEPENDING ON RES-LEN.\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > ARR-LEN\n               IF  FUNCTION REM(XS(I), 2) = 0\n                   ADD  1      TO RES-LEN\n                   MOVE XS(I)  TO RES(RES-LEN)\n               END-IF\n           END-PERFORM.\n       END PROGRAM getEvenNumbers.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19249,"user_id":null,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length  pic 99.\n           05 xs          pic 99 occurs 0 to 20 times \n                                depending on arr-length indexed i.\n       01  result.\n           05 res-length  pic 99.\n           05 res         pic 99 occurs 0 to 20 times \n                                depending on res-length.\n       procedure division using arr result.\n          perform varying i from 1 until i>arr-length\n            if function mod(xs(i), 2) = 0\n              add 1 to res-length\n              set res(res-length) to xs(i)\n            end-if.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19250,"user_id":null,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length  pic 99.\n           05 xs          pic 99 occurs 0 to 20 times \n                                depending on arr-length indexed i.\n       01  result.\n           05 res-length  pic 99.\n           05 res         pic 99 occurs 0 to 20 times \n                                depending on res-length.\n       procedure division using arr result.\n          perform varying i from 1 until i>arr-length\n            if function mod(xs(i), 2) = 0 then \n              add 1 to res-length\n              set res(res-length) to xs(i)\n            end-if.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19251,"user_id":null,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 0 to 20 times \n                                  depending on arr-length\n                                  indexed by arr-idx.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using arr result.\n           perform varying arr-idx from 1 by 1 until arr-idx>arr-length\n               if function mod(xs(arr-idx), 2) = 0 then\n                   add 1 to res-length\n                   move xs(arr-idx) to res(res-length)\n               end-if\n           end-perform\n           goback.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19252,"user_id":53,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 0 to 20 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 20 times \n                                  depending on res-length\n                                  indexed by j.\n       procedure division using arr result.\n          compute res-length, j = 0\n          perform varying i from 1 until i > arr-length\n            if function mod(xs(i), 2) = 0\n                add 1 to res-length, j\n                move xs(i) to res(j)\n            end-if\n          end-perform\n          goback.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19253,"user_id":168,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 0 to 20 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using arr result.\n           move 0 to res-length\n           perform varying i from 1 until i > arr-length\n               if function mod(xs(i), 2) = 0 then\n                   add 1 to res-length\n                   move xs(i) to res(res-length)\n               end-if\n           end-perform.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19254,"user_id":50,"body":"       identification division.\n       program-id. getEvenNumbers.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 0 to 20 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 20 times \n                                  depending on res-length\n                                  indexed by j.\n      \n       procedure division using arr result.\n      \n          move 0 to res-length, j\n          perform varying i from 1 until i > arr-length\n            if function rem(xs(i), 2) = 0\n                add 1 to res-length, j\n                move xs(i) to res(j)\n            end-if\n          end-perform\n      \n           goback.\n       end program getEvenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"514b92a657cdc65150000006":[{"id":19255,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n      * start from N - 1\n           SUBTRACT 1 FROM N       \n           IF N > 2 THEN\n               PERFORM UNTIL N = 2\n                   IF FUNCTION REM(N, 3) = 0 OR \n                   FUNCTION REM(N, 5) = 0 THEN\n                       ADD N TO RESULT\n                   END-IF\n                   SUBTRACT 1 FROM N\n               END-PERFORM\n          END-IF.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19256,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       local-storage section.\n       01 i            pic 9(8).\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n        perform varying i from 1 by 1 until i > n - 1\n          if function mod (i, 3) = 0 or function mod (i, 5) = 0\n            compute result = result + i\n          end-if\n        end-perform.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19257,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION using n result.\n           move 0 to result\n           if n < 1 then\n             continue\n           else\n             perform n times\n               subtract 1 from n\n               if (function mod(n,3) = 0) or (function mod(n,5) = 0)\n                 add n to result\n               end-if \n             end-perform\n           end-if\n           .\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19258,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n         01 WS-5N PIC 9(8).\n         01 WS-3N PIC 9(8).\n         01 WS-15N PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N < 1 THEN\n              DISPLAY 0\n              GOBACK.\n           COMPUTE WS-5N = (N - 1)\/5.\n           COMPUTE WS-3N = (N - 1)\/3.\n           COMPUTE WS-15N = (N - 1)\/15.\n           COMPUTE RESULT = ((WS-5N * (WS-5N + 1) \/ 2)) * 5.\n           COMPUTE RESULT = RESULT + ((WS-3N * (WS-3N + 1) \/ 2)) * 3.\n           COMPUTE RESULT = RESULT - ((WS-15N * (WS-15N + 1) \/ 2)) * 15.\n           DISPLAY RESULT.\n           GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19259,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 r           PIC 9(8).\n       PROCEDURE DIVISION USING N r.\n      * This is exclusive sum\n      * it loops from n - 1 all the way to 0 under the condition n > 0 \n      * if it is and n is divisible by 3 \/ 5 it adds to result\n      * if n <= 0 it only returns 0 (since both negative and 0 return 0)\n            subtract 1 from n\n            if n > 0 then \n                perform until n < 0\n                    if function rem(n 3) = 0 or \n                      function rem(n 5) = 0 then\n                          compute r = r + n\n                    end-if\n                    subtract 1 from n      \n                end-perform\n            else \n                compute r = 0\n            end-if\n           GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19260,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC  9(9) BINARY.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC  9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I = N OR N < 1\n               IF  0 = FUNCTION REM(I, 3) OR FUNCTION REM(I, 5)\n                   ADD I  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19261,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           perform until n < 2\n              subtract 1 from n\n              if function rem(n, 3) = 0\n                 or function rem(n,5) = 0\n                  add n to result\n              end-if\n            end-perform\n\n           GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19262,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           subtract 1 from n\n           perform varying n from n by -1 until n < 3\n               if 0 = function mod(n, 3) or function mod(n, 5)\n                  add n to result\n               end-if\n           end-perform.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19263,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          MOVE 0 TO RESULT\n          IF N < 1 THEN GOBACK END-IF\n          COMPUTE N = N - 1\n          COMPUTE RESULT = RESULT +\n              3 * ((N - FUNCTION MOD(N ,3)) \/ 3)\n                * ((N - FUNCTION MOD(N ,3)) \/ 3 + 1) \/ 2\n          COMPUTE RESULT = RESULT +\n              5 * ((N - FUNCTION MOD(N ,5)) \/ 5)\n                * ((N - FUNCTION MOD(N ,5)) \/ 5 + 1) \/ 2\n          COMPUTE RESULT = RESULT -\n             15 * ((N - FUNCTION MOD(N ,15)) \/ 15)\n                * ((N - FUNCTION MOD(N ,15)) \/ 15 + 1) \/ 2\n          GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"515de9ae9dcfc28eb6000001":[{"id":19264,"user_id":50,"body":"       identification division.\n       program-id. Solution.\n       data division.\n\n       linkage section.\n       01  s pic a(100).\n       01  chunks redefines s.\n           03  p             pic a(2) occurs 50 times.\n               88 EmptyChunk value space.\n       01  result.\n           05  l             pic 9(2).\n               88  resFull   value 51.\n           05  res           pic x(2) occurs 0 to 50 times \n                                      depending on l.\n      \n       procedure division using s result.\n      \n          perform varying l from 1 until EmptyChunk(l) or resFull\n          string function trim(p(l)) '_' into res(l)\n          end-perform\n          subtract 1 from l\n      \n          goback.\n       end program Solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"515e271a311df0350d00000f":[{"id":19265,"user_id":421,"body":"       identification division.\n       program-id. square-sum.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 i                pic 99.\n       01 n                pic 9999.\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n           PERFORM VARYING i FROM 1 BY 1 UNTIL i > arr-length\n               COMPUTE n = xs(i) ** 2\n               ADD n TO result\n           END-PERFORM.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19266,"user_id":null,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n       local-storage section.\n       01 i                pic 9(8).\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n        perform varying i from 1 by 1 until i > arr-length\n          compute result = result + (xs(i) * xs(i))\n        end-perform.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19267,"user_id":null,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n      \n      * Your code here\n       perform arr-length times\n        compute result = result + xs(arr-length)**2\n        compute arr-length = arr-length - 1\n       end-perform.\n      \n          goback.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19268,"user_id":null,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                   depending on arr-length\n                                   indexed by i.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n          set result to 0\n          perform varying i from 1 until i > arr-length\n             compute result = result + xs(i) ** 2\n          end-perform\n          goback.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19269,"user_id":76,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length\n                                     indexed by i.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n         initialize result\n         perform varying i from 1 by 1 until i > arr-length\n            compute result = result + xs(i) ** 2\n         end-perform.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19270,"user_id":null,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n       local-storage section.\n       01 i       PIC 9(02).\n       01 square  PIC 9(03).\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length.\n       01 result           pic 9(8) VALUE ZERO.\n      \n       procedure division using arr result.\n      \n        perform varying i from 1 until i>arr-length\n          initialize square\n          multiply xs(i) by xs(i) giving square\n          add square to result\n        end-perform\n            \n      \n          goback.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19271,"user_id":null,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n       working-storage section.\n       01 ws-ind pic 99 comp value 0.\n       01 result2 pic s9999 value 0.\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n      \n          move 0            to result\n          \n          perform varying ws-ind from 1 by 1 \n            until ws-ind > arr-length\n              compute result = result + \n                     xs(ws-ind) ** 2\n          end-perform\n      \n          goback.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19272,"user_id":null,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n       working-storage section.\n       01  i              pic 99.\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                     depending on arr-length.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n  \n          move zeros to result    \n          perform varying i from 1 by 1 until i > arr-length\n             compute result = result + (xs(i) ** 2)\n          end-perform\n      \n          goback.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19273,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. square-sum.      \n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN          PIC S9(2).\n           05 XS           PIC S9(2) OCCURS 0 TO 10 DEPENDING LEN\n                                     INDEXED I.\n       01  RESULT          PIC  9(8).      \n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN\n               COMPUTE RESULT = RESULT + XS(I) ** 2\n           END-PERFORM.\n       END PROGRAM square-sum.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19274,"user_id":168,"body":"       identification division.\n       program-id. square-sum.\n      \n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length   pic s99.\n           05 xs           pic s99 occurs 0 to 10 times \n                                   depending on arr-length indexed by i.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n          move 0 to result\n          perform varying i from 1 until i > arr-length\n              add function abs(xs(i) ** 2) to result\n          end-perform.\n       end program square-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51675d17e0c1bed195000001":[{"id":19275,"user_id":null,"body":"       identification division.\n       program-id. Solution.\n       data division.\n       working-storage section.\n       01 i                pic 9(5).\n       linkage section.\n       01  digits.\n           05  len          pic 9(5).\n           05  digit        pic 9 occurs 5 to 10000 times \n                                 depending on len.\n       01  result           pic 9(5).\n      \n       procedure division using digits result.\n      \n          initialize result\n          perform varying i from 6 by 1 until (i - 1)  greater len\n             display digits(i:5)\n             if digits(i:5) greater result\n                move digits(i:5)    to result\n             end-if\n          end-perform\n          goback.\n       end program Solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19276,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Solution.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  DIGITS.\n           05  LEN          PIC 9(5).\n           05  DIGIT.\n               10  FILLER   PIC 9 OCCURS 10000 DEPENDING LEN INDEXED I.\n       01  RESULT           PIC 9(5).\n\n       PROCEDURE DIVISION USING DIGITS RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > LEN - 4\n               MOVE FUNCTION MAX(DIGIT(I:5), RESULT)  TO RESULT\n           END-PERFORM.\n       END PROGRAM Solution.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19277,"user_id":null,"body":"       identification division.\n       program-id. Solution.\n       data division.\n      \n       working-storage section.\n       01 idx               pic 9(4).\n      \n       linkage section.\n       01  digits.\n           05  len          pic 9(5).\n           05  digit        pic 9 occurs 5 to 10000 times \n                                 depending on len.\n       01  result           pic 9(5).\n      \n       procedure division using digits result.\n      \n          initialize result\n          \n          perform varying idx from 6 by 1 until idx = (len + 2)\n            if digits(idx:5) > result\n              move digits(idx:5) to result\n            end-if\n          end-perform.\n      \n          goback.\n       end program Solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19278,"user_id":53,"body":"       identification division.\n       program-id. Solution.\n       data division.\n       linkage section.\n       01  digits.\n           05  len   pic 9(5).\n           05  ds.\n               07    pic 9 occurs 5 to 10000 times \n                     depending on len indexed by i.\n       01  result    pic 9(5).\n       procedure division using digits result.\n          initialize result\n          perform varying i from 1 until i + 4 > len\n            move function max(result, ds(i:5)) to result\n            .\n       end program Solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19279,"user_id":50,"body":"       identification division.\n       program-id. Solution.\n       data division.\n      \n       linkage section.\n       01  digits.\n           05  len   pic 9(5).\n           05  d.\n               07 filler pic 9 occurs 5 to 10000 times \n                  depending on len indexed by i.\n       01  result    pic 9(5).\n      \n       procedure division using digits result.\n      \n          initialize result\n          perform varying i from 1 until i > len - 4\n            move function max(result, d(i:5)) to result\n          end-perform\n      \n          goback.\n       end program Solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5168bb5dfe9a00b126000018":[{"id":19280,"user_id":168,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       working-storage section.\n       01  i           pic 99.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move len of str to len of result\n           perform varying i from 1 by 1 until i > len of str\n               move chars of str(i:1) \n                 to chars of result(len of str - i + 1:1)\n           end-perform.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19281,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move 0 to len of result.\n      \n           move len of str to len of result\n           perform varying TALLY FROM 1 by 1 \n                     until TALLY > len of str\n               move chars of str(TALLY:1) \n                 to chars of result(len of str - TALLY + 1:1)\n           end-perform.\n           goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19282,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move 0 to len of result.\n           INITIALIZE  chars OF result \n              PERFORM  VARYING TALLY FROM  1  BY 1\n                 UNTIL TALLY > len OF str\n                 ADD 1 TO len OF result\n      \n                  STRING \n                    chars OF str(TALLY:1) \n                    chars OF result \n                    INTO chars OF result\n                  END-STRING.\n            move chars OF result(2:len OF str) to chars OF result\n            goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19283,"user_id":421,"body":"       identification division.\n       program-id. solution.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 i            pic 99.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move len of str to len of result\n           perform varying i from 1 by 1 until i > len of str\n               move chars of str(i:1) to chars of \n                    result(len of result - i + 1:1)\n           end-perform.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19284,"user_id":50,"body":"i       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           Move str to result\n           Move function reverse(chars of result(1:len of str))\n                                            to chars of result\n           goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19285,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move 0 to len of result.\n            \n           Perform Until len in str = 0\n               Add 1 to len in result\n               Move chars in str(len in str:1) to chars in result\n               (len in result:1)\n               Subtract 1 from len in str\n           End-perform\n           \n           goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19286,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n          move str to result.\n          move function reverse(chars of str(1:len of result))\n            to chars of result.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19287,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars.\n              10 chars-tab pic a  occurs 0 to 30 times\n                                  depending on len in str.\n       01  result.\n           05 len      pic 99.\n           05 chars.\n              10 chars-tab pic a  occurs 0 to 30 times\n                                  depending on len in result.\n\n       procedure division using str result.\n           set len in result to len in str\n           move function reverse(chars in str) to chars in result\n           goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19288,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move 0 to len of result.\n       initialize chars of result\n          perform varying tally from 1 by 1\n               until tally > len of str\n               display tally\n          add 1 to len of result\n      \n       string\n            chars of str(tally:1)\n            chars of result\n            into chars of result\n       end-string.\n          move chars of result(2:len of str) to chars of result\n           goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19289,"user_id":null,"body":"       identification division.\n       program-id. solution.\n\n       data division.\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic a(30).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic a(30).\n\n       procedure division using str result.\n           move 0 to len of result.\n       INITIALIZE  chars OF result \n         PERFORM  VARYING TALLY FROM  1  BY 1\n             UNTIL TALLY > len OF str\n             DISPLAY TALLY\n         ADD 1 TO len OF result\n      \n           STRING \n                chars OF str(TALLY:1) \n                chars OF result \n                INTO chars OF result\n          END-STRING.\n            move chars OF result(2:len OF str) to chars OF result\n         goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5174a4c0f2769dd8b1000003":[{"id":19290,"user_id":421,"body":"       identification division.\n       program-id. solution.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       \n       linkage section.\n       01  nums.\n           05 nums-length     pic 9(3).\n           05 xs occurs 0 to 100 times\n                 depending on nums-length.\n              07 val pic s9(3).\n              \n       01  result.\n           05 res-length     pic 9(3).\n           05 res  pic s9(3) occurs 0 to 100 times\n                             depending on res-length.\n              \n       procedure division using nums result.      \n           sort xs ascending key val.\n           move nums to result.           \n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19291,"user_id":null,"body":"       identification division.\n       program-id. solution.\n       data division.\n      \n       linkage section.\n       01  nums.\n           05 nums-length     pic 9(3).\n           05 xs  pic s9(3) occurs 0 to 100 times\n                            depending on nums-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 S1             pic 9(3).\n           05 S2             pic 9(3).\n           05 aux            pic s9(3).\n           05 res  pic s9(3)  occurs 0 to 100 times\n                             depending on res-length.\n      \n       procedure division using nums result.\n      \n        PERFORM VARYING S1 FROM 1 BY 1 UNTIL S1 = nums-length\n          PERFORM VARYING S2 FROM S1 BY 1 UNTIL S2 > nums-length\n                IF xs(S2) < xs(S1)\n                     MOVE xs(S1)  TO aux\n                     MOVE xs(S2)  TO xs(S1)\n                     MOVE aux     TO xs(S2)\n                END-IF\n          END-PERFORM\n        END-PERFORM.\n        move nums to result.\n \n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19292,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. solution.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  NUMS.\n           05  NUMS-LEN       PIC  9(3).\n           05  FILLER.\n               10  XS         PIC S9(3) OCCURS 100 DEPENDING NUMS-LEN.\n       01  RESULT             PIC  X(303).\n       PROCEDURE DIVISION USING NUMS RESULT.\n           SORT XS ON ASCENDING KEY XS\n           MOVE NUMS  TO RESULT.\n       END PROGRAM solution.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19293,"user_id":53,"body":"       identification division.\n       program-id. solution.\n       data division.\n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(3).\n           05 xs  pic s9(3)  occurs 0 to 100 times\n                             depending on nums-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 tbl occurs 0 to 100 times depending on res-length.\n              07 res         pic s9(3).\n       procedure division using nums result.\n           move nums to result\n           sort tbl on ascending res\n           goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19294,"user_id":168,"body":"       identification division.\n       program-id. solution.\n       data division.\n      \n       linkage section.\n       01  nums.\n           05 nums-length     pic 9(3).\n           05 xs  pic s9(3) occurs 0 to 100 times\n                            depending on nums-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res occurs 0 to 100 times depending on res-length.\n              10 res-xs pic s9(3).      \n      \n       procedure division using nums result.\n           move nums to result\n           sort res ascending res-xs.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19295,"user_id":50,"body":"       identification division.\n       program-id. solution.\n       data division.\n      \n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(3).\n           05 xs  pic s9(3)  occurs 0 to 100 times\n                             depending on nums-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 tbl occurs 0 to 100 times depending on res-length.\n              07 res         pic s9(3).\n      \n       procedure division using nums result.\n\n           move nums to result\n           sort tbl on ascending key res\n      \n           goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51b66044bce5799a7f000003":[{"id":19296,"user_id":null,"body":"       identification division.\n       program-id. ToRoman.\n       environment division.\n       configuration section.\n       special-names.\n       repository.\n           function all intrinsic.\n       data division.\n       working-storage section.\n       01  i                 pic is 9(2).\n       01  encoded           pic is x(20).\n       01  conversion-tab.\n           05 filler         pic is x(8) value is \"1000 M\".\n           05 filler         pic is x(8) value is \"0900 CM\".\n           05 filler         pic is x(8) value is \"0500 D\".\n           05 filler         pic is x(8) value is \"0400 CD\".\n           05 filler         pic is x(8) value is \"0100 C\".\n           05 filler         pic is x(8) value is \"0090 XC\".\n           05 filler         pic is x(8) value is \"0050 L\".\n           05 filler         pic is x(8) value is \"0040 XL\".\n           05 filler         pic is x(8) value is \"0010 X\".\n           05 filler         pic is x(8) value is \"0009 IX\".\n           05 filler         pic is x(8) value is \"0005 V\".\n           05 filler         pic is x(8) value is \"0004 IV\".\n           05 filler         pic is x(8) value is \"0001 I\".\n       01  filler redefines conversion-tab occurs 13.\n           05 arabic         pic is 9(4).\n           05 filler         pic is x(1).\n           05 roman          pic is x(3).\n      \n       linkage section.\n       01  val               pic 9(4).\n       01  result.\n           05 resLength      pic 9(2).\n           05 res            pic x occurs 0 to 20 times \n                                   depending on resLength.\n      \n       procedure division using val result.\n\n          initialize encoded\n          perform varying i from 1 by 1 until i > 13\n             perform until val < arabic(i)\n               subtract arabic(i) from val \n               move concatenate(trim(encoded), roman(i)) to encoded\n             end-perform\n          end-perform\n          move stored-char-length(encoded) to resLength\n          move encoded to result(3:resLength)\n          goback.\n      \n       end program ToRoman.\n      \n       identification division.\n       program-id. FromRoman.\n       environment division.\n       configuration section.\n       special-names.\n       repository.\n           function all intrinsic.\n       data division.\n       working-storage section.\n       01  roman             pic x(16).\n      \n       linkage section.\n       01  RomanNumber.\n           05  NumLen        pic 9(2).\n           05  RomanChar     pic a occurs 1 to 20 times\n                                   depending on NumLen.\n       01  result            pic 9(4).\n      \n       procedure division using RomanNumber result.\n      \n          initialize result\n          move upper-case(RomanNumber(3:NumLen)) to roman\n          move zeros to result\n          perform until roman = spaces\n             evaluate true\n                when roman(1:1) = ('M')   \n                   add 1000 to result, move roman(2:) to roman\n                when roman(1:2) = ('CM')  \n                   add 900  to result, move roman(3:) to roman\n                when roman(1:1) = ('D')   \n                   add 500  to result, move roman(2:) to roman\n                when roman(1:2) = ('CD')  \n                   add 400  to result, move roman(3:) to roman\n                when roman(1:1) = ('C')   \n                   add 100  to result, move roman(2:) to roman\n                when roman(1:2) = ('XC')  \n                   add 90   to result, move roman(3:) to roman\n                when roman(1:1) = ('L')   \n                   add 50   to result, move roman(2:) to roman\n                when roman(1:2) = ('XL')  \n                   add 40   to result, move roman(3:) to roman\n                when roman(1:1) = ('X')   \n                   add 10   to result, move roman(2:) to roman\n                when roman(1:2) = ('IX')  \n                   add 9    to result, move roman(3:) to roman\n                when roman(1:1) = ('V')   \n                   add 5    to result, move roman(2:) to roman\n                when roman(1:2) = ('IV')  \n                   add 4    to result, move roman(3:) to roman\n                when roman(1:1) = ('I')   \n                   add 1    to result, move roman(2:) to roman\n              end-evaluate\n           end-perform\n      \n          goback.\n       end program FromRoman.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19297,"user_id":53,"body":"       identification division.\n       program-id. ToRoman.\n       data division.\n       local-storage section.\n       01  x                 pic x(2).\n       01  y                 pic 9(4).\n       linkage section.\n       01  val               pic 9(4).\n       01  result.\n           05 res-len        pic 9(2).\n           05 res.\n              07 filler      pic a \n                             occurs 1 to 20 times \n                             depending on res-len\n                             indexed by i.\n       procedure division using val result.\n          initialize result\n          set i to 1\n          set res-len to 20\n          move  'M' to x, set y to 1000, perform proc\n          move 'CM' to x, set y to  900, perform proc\n          move  'D' to x, set y to  500, perform proc\n          move 'CD' to x, set y to  400, perform proc\n          move  'C' to x, set y to  100, perform proc\n          move 'XC' to x, set y to   90, perform proc\n          move  'L' to x, set y to   50, perform proc\n          move 'XL' to x, set y to   40, perform proc\n          move  'X' to x, set y to   10, perform proc\n          move 'IX' to x, set y to    9, perform proc\n          move  'V' to x, set y to    5, perform proc\n          move 'IV' to x, set y to    4, perform proc\n          move  'I' to x, set y to    1, perform proc\n          subtract 1 from i giving res-len\n          goback.\n      \n          proc.\n            perform until val < y\n              string function trim(x) into res pointer i\n              subtract y from val\n            end-perform\n            .\n      \n       end program ToRoman.\n      \n       identification division.\n       program-id. FromRoman.\n       data division.\n       local-storage section.\n       01  x                 pic x(2).\n       01  y                 pic 9(4).\n       linkage section.\n       01  RomanNumber.\n           05  num-len       pic 9(2).\n           05  num           pic a occurs 1 to 20 times\n                             depending on num-len\n                             indexed by i.\n       01  result            pic 9(4).\n       procedure division using RomanNumber result.\n          initialize result\n          set i to 1\n          move  'M' to x, set y to 1000, perform proc\n          move 'CM' to x, set y to  900, perform proc\n          move  'D' to x, set y to  500, perform proc\n          move 'CD' to x, set y to  400, perform proc\n          move  'C' to x, set y to  100, perform proc\n          move 'XC' to x, set y to   90, perform proc\n          move  'L' to x, set y to   50, perform proc\n          move 'XL' to x, set y to   40, perform proc\n          move  'X' to x, set y to   10, perform proc\n          move 'IX' to x, set y to    9, perform proc\n          move  'V' to x, set y to    5, perform proc\n          move 'IV' to x, set y to    4, perform proc\n          move  'I' to x, set y to    1, perform proc\n          goback.\n      \n          proc.\n            perform until num-len - i + 1 < function length\n                (function trim(x)) or num(i:function length\n                (function trim(x))) <> function trim(x)\n              add function length (function trim(x)) to i\n              add y to result\n            end-perform\n            .\n      \n       end program FromRoman.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19298,"user_id":50,"body":"       identification division.\n       program-id. ToRoman.\n       data division.\n       local-storage section.\n       01  map.\n           05  filler.\n              07  filler pic a(2) value 'M'.\n              07  filler pic 9(4) value 1000.\n           05  filler.\n              07  filler pic a(2) value 'CM'.\n              07  filler pic 9(4) value 900.\n           05  filler.\n              07  filler pic a(2) value 'D'.\n              07  filler pic 9(4) value 500.\n           05  filler.\n              07  filler pic a(2) value 'CD'.\n              07  filler pic 9(4) value 400.\n           05  filler.\n              07  filler pic a(2) value 'C'.\n              07  filler pic 9(4) value 100.\n           05  filler.\n              07  filler pic a(2) value 'XC'.\n              07  filler pic 9(4) value 90.\n           05  filler.\n              07  filler pic a(2) value 'L'.\n              07  filler pic 9(4) value 50.\n           05  filler.\n              07  filler pic a(2) value 'XL'.\n              07  filler pic 9(4) value 40.\n           05  filler.\n              07  filler pic a(2) value 'X'.\n              07  filler pic 9(4) value 10.\n           05  filler.\n              07  filler pic a(2) value 'IX'.\n              07  filler pic 9(4) value 9.\n           05  filler.\n              07  filler pic a(2) value 'V'.\n              07  filler pic 9(4) value 5.\n           05  filler.\n              07  filler pic a(2) value 'IV'.\n              07  filler pic 9(4) value 4.\n           05  filler.\n              07  filler pic a(2) value 'I'.\n              07  filler pic 9(4) value 1.\n       01  redefines map.\n           05  filler occurs 13 times indexed i.\n              07  symb   pic a(2).\n              07  n      pic 9(4).\n       01  a             pic 9(4).\n      \n       linkage section.\n       01  val               pic 9(4).\n       01  result.\n           05 l              pic 9(2).\n           05 o.\n              07 filler pic a occurs 1 to 20 times \n                              depending on l indexed j.\n      \n       procedure division using val result.\n      \n          initialize result\n      \n          move 20 to l\n          set  j  to 1\n          perform varying i from 1 until val = 0\n          divide val by n(i) giving a remainder val\n          perform a times\n            string function trim(symb(i)) into o pointer j\n          end-perform end-perform\n          compute l = j - 1\n      \n          goback.\n       end program ToRoman.\n      \n       identification division.\n       program-id. FromRoman.\n       data division.\n       local-storage section.\n       01  map.\n           05  filler.\n              07  filler pic a(2) value 'M'.\n              07  filler pic 9(4) value 1000.\n           05  filler.\n              07  filler pic a(2) value 'CM'.\n              07  filler pic 9(4) value 900.\n           05  filler.\n              07  filler pic a(2) value 'D'.\n              07  filler pic 9(4) value 500.\n           05  filler.\n              07  filler pic a(2) value 'CD'.\n              07  filler pic 9(4) value 400.\n           05  filler.\n              07  filler pic a(2) value 'C'.\n              07  filler pic 9(4) value 100.\n           05  filler.\n              07  filler pic a(2) value 'XC'.\n              07  filler pic 9(4) value 90.\n           05  filler.\n              07  filler pic a(2) value 'L'.\n              07  filler pic 9(4) value 50.\n           05  filler.\n              07  filler pic a(2) value 'XL'.\n              07  filler pic 9(4) value 40.\n           05  filler.\n              07  filler pic a(2) value 'X'.\n              07  filler pic 9(4) value 10.\n           05  filler.\n              07  filler pic a(2) value 'IX'.\n              07  filler pic 9(4) value 9.\n           05  filler.\n              07  filler pic a(2) value 'V'.\n              07  filler pic 9(4) value 5.\n           05  filler.\n              07  filler pic a(2) value 'IV'.\n              07  filler pic 9(4) value 4.\n           05  filler.\n              07  filler pic a(2) value 'I'.\n              07  filler pic 9(4) value 1.\n       01  redefines map.\n           05  filler occurs 13 times indexed i.\n              07  symb   pic a(2).\n              07  n      pic 9(4).\n       01  l             pic 9.\n       01  t             pic a(2).\n       \n       linkage section.\n       01  RomanNumber.\n           05  NumLen        pic 9(2).\n           05  c.\n               07  RomanChar pic a occurs 1 to 20 times\n                                   depending on NumLen indexed j.\n       01  result            pic 9(4).\n      \n       procedure division using RomanNumber result.\n      \n          initialize result\n      \n          set i j to 1\n          perform until j > NumLen\n          move length of function trim(symb(i)) to l\n          if j + l > NumLen \n                move c(j:)  to t\n          else  move c(j:l) to t    end-if\n          if t = symb(i)\n          add n(i) to result\n          add l to j\n          else add 1 to i end-if\n          end-perform\n      \n          goback.\n       end program FromRoman.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51ba717bb08c1cd60f00002f":[{"id":19299,"user_id":53,"body":"       identification division.\n       program-id. Rangeextraction.\n       data division.\n       local-storage section.\n       01  a                pic -(2)9.\n       01  b                pic -(2)9.\n       01  l                pic s9(3) value 0.\n       01  m                pic s9(3) value 0.\n       01  k                pic 9(3) value 0.\n       01  n                pic 9(3).\n       01  x                pic s9(3).\n       linkage section.\n       01  arr.\n           05 arr-length    pic 9(2).\n           05 xs            pic s9(3) occurs 0 to 50 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result.\n           05  res-length   pic 9(3).\n           05  s.\n               07           pic x occurs 0 to 500 times \n                            depending on res-length \n                            indexed by j.\n       procedure division using arr result.\n          initialize result\n          move 500 to res-length\n          add 1 to arr-length giving n\n          set j to 1\n          perform varying i from 1 until i > n\n            if i < n then move xs(i) to x else set x to 0 end-if\n            if i = 1 or i = n or l + k <> x then\n              if i <> 1\n                evaluate true\n                  when k = 1    move l to a\n                                string function trim(a) ','\n                                into s pointer j\n                  when k = 2    move l to a\n                                compute m = l + 1\n                                move m to b\n                                string function trim(a) ','\n                                function trim(b) ','\n                                into s pointer j\n                  when other    move l to a\n                                compute m = l + k - 1\n                                move m to b\n                                string function trim(a) '-'\n                                function trim(b) ','\n                                into s pointer j\n                end-evaluate\n              end-if\n              move x to l\n              set k to 1\n            else\n              add 1 to k\n            end-if\n          end-perform\n          compute res-length = j - 2\n          goback.\n       end program Rangeextraction.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19300,"user_id":50,"body":"       identification division.\n       program-id. Rangeextraction.\n       data division.\n       local-storage section.\n       01  a                pic -(2)9.\n       01  b                pic -(2)9.\n      \n       linkage section.\n       01  arr.\n           05 l             pic 9(2).\n           05 xs            pic s9(3) occurs 0 to 50 times \n                            depending on l indexed n i.\n       01  result.\n           05  len          pic 9(3).\n           05  s.\n               07           pic x occurs 0 to 500 times \n                            depending on len indexed j.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move 500 to len\n          set j, n to 1\n          perform until n > l\n            set i to 2\n            if xs(n) = xs(n + 1) - 1\n              perform until n >= l - i + 1 \n                       or   xs(n + i) - i <> xs(n)\n              add 1 to i\n            end-perform end-if\n            move xs(n) to a\n            if i > 2\n              move xs(n + i - 1) to b\n              string function trim(a) '-'\n                     function trim(b) ','\n              into s pointer j\n              add i to n\n            else\n              string function trim(a) ','\n              into s pointer j\n              add 1 to n\n            end-if\n          end-perform\n          compute len = j - 2\n      \n          goback.\n       end program Rangeextraction.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51c8991dee245d7ddf00000e":[{"id":19301,"user_id":null,"body":"       identification division.\n       program-id. ReverseWords.\n       data division.\n       local-storage section.\n       77 i                usage is index.\n       77 res-chars-ptr    usage is index.\n       77 end-word         usage is index.\n\n       linkage section.\n       01  s.\n           05 s-len        pic 9(3).\n           05 s-chars      pic x(200).\n       01  result.\n           05 l            pic 9(3).\n           05 res-chars.\n              07 res       pic x occurs 0 to 200 times\n                           depending on l.\n      \n       procedure division using s result.\n          compute l = function length(function trim(s-chars,trailing))\n          set end-word to l\n          set res-chars-ptr to 1\n          perform varying i from l by -1 until i < 0\n              evaluate true\n                 when i = 0\n                 when s-chars(i : 1) = space\n                     string s-chars(i + 1 : end-word - i) \n                            space\n                       into res-chars with pointer res-chars-ptr\n                     end-string\n                     compute end-word = i - 1\n              end-evaluate\n          end-perform\n          goback.\n       end program ReverseWords.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19302,"user_id":53,"body":"       identification division.\n       program-id. ReverseWords.\n       data division.\n       local-storage section.\n       01  i               usage index value 1.\n       01  w               pic x(200).\n       01  words-arr.\n           05 w-len        pic 9(3).\n           05 ws-words.\n              07 ws        pic x(200)\n                           occurs 0 to 200 times\n                           depending on w-len\n                           indexed by j.\n       linkage section.\n       01  s.\n           05 s-len        pic 9(3).\n           05 s-chars.\n              07 xs        pic x occurs 0 to 200 times\n                           depending on s-len.\n       01  result.\n           05 res-len      pic 9(3).\n           05 res-chars.\n              07 res       pic x occurs 0 to 200 times\n                           depending on res-len\n                           indexed by k.\n       procedure division using s result.\n          initialize result\n          perform until i > s-len\n             unstring s-chars \n               delimited by space into w with pointer i\n             if w <> space then\n               add 1 to w-len\n               move function trim(w) to ws(w-len)\n             end-if\n          end-perform\n          move s-len to res-len\n          set k to 0\n          perform varying i from w-len by -1 until i = 0\n            perform varying j from 1 until j > \n                function length(function trim(ws(i)))\n              add 1 to k\n              move ws(i)(j:1) to res(k)\n            end-perform\n            if i <> 1 then \n              add 1 to k\n              move ' ' to res(k) \n            end-if\n          end-perform\n          goback.\n       end program ReverseWords.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19303,"user_id":50,"body":"       identification division.\n       program-id. ReverseWords.\n       data division.\n       local-storage section.\n       01  i               pic 9(3).\n       01  j               pic 9(3).\n       01  w               pic x(200).\n       01  delim           pic x.\n       01  WordsArray.\n           05 len          pic 9(3).\n           05 Wrds occurs  0 to 100 times \n                           depending on len \n                           indexed by k.\n              07 wrd       pic x(200).\n       01  tmp pic x.\n      \n       linkage section.\n       01  s.\n           05 s-len        pic 9(3).\n           05 s-chars      pic x(200).\n       01  result.\n           05 l            pic 9(3).\n           05 res-chars.\n              07 res       pic x occurs 0 to 200 times\n                           depending on l.\n      \n       procedure division using s result.\n      \n          initialize result\n          move 0 to len\n      \n          if s-len = 0 goback end-if\n      \n          set i to 4\n          perform until i > s-len + 3\n            initialize w\n            unstring s delimited by space\n                into w delimiter in delim\n                with pointer i\n              add 1 to len\n              move w to wrd(len)\n            end-perform\n      \n          move s-len to l\n          if len = 1\n              move s-chars to res-chars\n              goback\n          end-if\n      \n          perform varying k from len by -1 until k = 0\n            move function concatenate(\n                 function trim(res-chars), ' ',\n                 function trim(wrds(k)))\n                 to res-chars\n          end-perform\n\n          goback.\n       end program ReverseWords.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51e0007c1f9378fa810002a9":[{"id":19304,"user_id":421,"body":"       identification division.\n       program-id. Parser.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  n              pic s9(20).\n       linkage section.\n       01  strng.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic a occurs 0 to 16 times \n                          depending on s-length indexed i.\n       01  result.\n           03  res-length pic 9(2).\n           03  res        pic s9(20) occurs 0 to 16 times\n                          depending on res-length.\n\n       procedure division using strng result.\n           initialize n\n           perform varying i from 1 by 1 until i > s-length\n               evaluate s-char(i)\n                   when 'i'     add 1 to n\n                   when 'd'     subtract 1 from n\n                   when 's'     multiply n by n\n                   when 'o'     add 1 to res-length \n                                move n to res(res-length)\n                   when other   display n\n              end-evaluate.\n       end program Parser.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19305,"user_id":50,"body":"       identification division.\n       program-id. Parser.\n\n       data division.\n       local-storage section.\n       01  n              pic s9(20).\n      \n       linkage section.\n       01  strng.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic a occurs 0 to 16 times \n                          depending s-length indexed i.\n       01  result.\n           03  k          pic 9(2).\n           03  res        pic s9(20) occurs 0 to 16 times\n                          depending k.\n\n       procedure division using strng result.\n      \n          move 0 to k, n\n          perform varying i from 1 until i > s-length\n              evaluate s-char(i)\n              when 'i'     add      1  to  n\n              when 'd'     subtract 1 from n\n              when 's'     multiply n  by  n\n              when 'o'     add      1  to  k\n                           move     n  to  res(k)\n              end-evaluate\n          end-perform\n          \n          goback.\n       end program Parser.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19306,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Parser.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  N              PIC S9(20) VALUE 0.\n       LINKAGE SECTION.\n       01  STRNG.\n           05  STR-LEN    PIC  9(02).\n           05  STR        PIC  A(01) OCCURS 0 TO 16 DEPENDING STR-LEN \n                                                    INDEXED I.\n       01  RESULT.\n           03  RES-LEN    PIC  9(02).\n           03  RES        PIC S9(20) OCCURS 0 TO 16 DEPENDING RES-LEN.\n       PROCEDURE DIVISION USING STRNG RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > STR-LEN\n               EVALUATE  STR(I)\n                   WHEN 'i'  ADD  1       TO N\n                   WHEN 'd'  SUBTRACT 1 FROM N\n                   WHEN 's'  MULTIPLY N   BY N\n                   WHEN 'o'  ADD  1       TO RES-LEN \n                             MOVE N       TO RES(RES-LEN)\n               END-EVALUATE\n           END-PERFORM.\n       END PROGRAM Parser.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19307,"user_id":168,"body":"       identification division.\n       program-id. Parser.\n\n       data division.\n       working-storage section.\n       01  v              pic s9(20).\n      \n       linkage section.\n       01  strng.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic a occurs 0 to 16 times \n                          depending on s-length indexed by i.\n       01  result.\n           03  res-length pic 9(2).\n           03  res        pic s9(20) occurs 0 to 16 times\n                          depending on res-length.\n\n       procedure division using strng result.\n          move 0 to v res-length\n          perform varying i from 1 until i > s-length\n              evaluate s-char(i)\n                  when 'i' add 1 to v\n                  when 'd' subtract 1 from v\n                  when 's' multiply v by v\n                  when 'o' \n                      add 1 to res-length\n                      move v to res(res-length)\n              end-evaluate\n          end-perform\n          goback.\n       end program Parser.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19308,"user_id":53,"body":"       identification division.\n       program-id. Parser.\n       data division.\n       local-storage section.\n       01  p              pic s9(20).\n       linkage section.\n       01  strng.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic a occurs 0 to 16 times \n                          depending s-length indexed i.\n       01  result.\n           03  k          pic 9(2).\n           03  res        pic s9(20) occurs 0 to 16 times\n                          depending k.\n       procedure division using strng result.\n          move 0 to k, p\n          perform varying i from 1 until i > s-length\n              evaluate s-char(i)\n                  when 'i'     \n                      add 1 to p\n                  when 'd'     \n                      subtract 1 from p\n                  when 's'     \n                      multiply p by p\n                  when 'o'     \n                      add 1 to k\n                      move p to res(k)\n              end-evaluate\n          end-perform\n          goback.\n       end program Parser.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51e04f6b544cf3f6550000c1":[{"id":19309,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       author. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       local-storage section.\n       01 n               pic 9(20).\n       01 i               pic 9(8).\n       LINKAGE SECTION.\n       01 BONUS           PIC S9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION USING BONUS PRICE RESULT.\n           initialize result\n           move 1 to n i\n           perform until n > bonus \/ price\n               add 1 to i result\n               compute n = n + i ** 2            \n           end-perform.\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19310,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I               PIC 9(5).\n       01 B               PIC 9(8).\n       LINKAGE SECTION.\n       01 BONUS           PIC S9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION\n           USING BONUS PRICE RESULT.\n           INITIALIZE I B\n           MOVE 1          TO I\n           IF  BONUS LESS OR EQUAL ZEROES\n               MOVE ZEROES TO RESULT\n               GOBACK\n           END-IF \n           PERFORM UNTIL B GREATER BONUS \/ PRICE\n              COMPUTE B = B + I ** 2\n              ADD 1 TO I\n              DISPLAY B '\/' I\n           END-PERFORM \n           COMPUTE RESULT = I - 2\n          Goback.\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19311,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N               PIC 9(4).\n       01 CALC            PIC 9(9).\n       LINKAGE SECTION.\n       01 BONUS           PIC S9(8)V9.\n       01 PRICE           PIC  9(8)V9.\n       01 RESULT          PIC  9(8).\n       PROCEDURE DIVISION USING BONUS PRICE RESULT.\n           PERFORM VARYING N FROM 1 BY 1 UNTIL N > 100\n               COMPUTE CALC = N * (N + 1) * (N * 2 + 1) \/ 6\n               IF  BONUS \/ PRICE >= CALC\n                   ADD 1  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM BEERAMID.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19312,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       local-storage section.\n       01 k               pic 9(8).\n       01 t               pic 9(10)v9(4) value 0.\n       LINKAGE SECTION.\n       01 BONUS           PIC s9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION USING BONUS PRICE RESULT.\n           compute result = 0\n           if bonus < 0 then goback end-if\n           perform varying k from 1 by 1 until t > bonus\n               compute t = t + k * k * price\n           end-perform\n           compute result = function max(0, k - 2).\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19313,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A               PIC 9(8).          \n       01 TMP             PIC 9(8).          \n       01 N               PIC 9(8).\n       LINKAGE SECTION.\n       01 BONUS           PIC S9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION\n           USING BONUS PRICE RESULT.\n\n            Compute a = function max(bonus, 0) \/ price,\n            Move 0 to result,\n            Perform until a <= result * (result + 1) *\n                            (result * 2 + 1) \/ 6 - 1\n              Add 1 to result,\n            End-perform\n            \n            Compute result = function max(0, result - 1)\n            Display result\n          \n          Goback.\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19314,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M               PIC 9(8).          \n       01 N               PIC 9(8).          \n       01 L               PIC 9(8).\n       LINKAGE SECTION.\n       01 BONUS           PIC s9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION\n             USING BONUS PRICE RESULT.\n          if bonus = -1 then goback end-if\n          if bonus < 0 then\n            move 1 to result\n            goback\n          end-if\n          compute l = bonus \/ price\n          perform until m > l\n            compute m = m + n ** 2\n            compute n = n + 1\n          end-perform\n          compute result = n - 2\n          goback.\n       END PROGRAM BEERAMID.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19315,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 LEVEL           PIC 9(8).\n       01 COST            PIC 9(8)V9.\n       LINKAGE SECTION.\n       01 BONUS           PIC 9(8)V9.\n       01 PRICE           PIC 9(8)V9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION USING BONUS PRICE RESULT.\n         MOVE 1 TO LEVEL.\n         PERFORM UNTIL 1 < 0\n          COMPUTE COST = LEVEL * LEVEL * PRICE\n          IF COST > BONUS\n            COMPUTE RESULT = LEVEL - 1\n            EXIT PROGRAM\n          ELSE\n            COMPUTE BONUS = BONUS - COST\n            ADD 1 TO LEVEL GIVING LEVEL\n          END-IF\n         END-PERFORM.\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19316,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       local-storage section.\n       01 k               pic 9(8).\n       01 t               pic 9(10)v9(4) value 0.\n       LINKAGE SECTION.\n       01 BONUS           PIC s9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION USING BONUS PRICE RESULT.\n           if bonus = -1 then goback end-if\n           compute bonus = function abs(bonus)\n           perform varying k from 1 by 1 until t > bonus\n               compute t = t + k * k * price\n           end-perform\n           compute result = function max(0, k - 2).\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19317,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BEERAMID.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M               PIC 9(8).          \n       01 N               PIC 9(8).          \n       01 L               PIC 9(8).\n       LINKAGE SECTION.\n       01 BONUS           PIC 9(8)v9.\n       01 PRICE           PIC 9(8)v9.\n       01 RESULT          PIC 9(8).\n       PROCEDURE DIVISION\n             USING BONUS PRICE RESULT.\n          if bonus < 0 then\n            move 0 to result\n            goback\n          end-if\n          compute l = bonus \/ price\n          perform until m > l\n            compute m = m + n ** 2\n            compute n = n + 1\n          end-perform\n          compute result = n - 2\n          goback.\n       END PROGRAM BEERAMID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51f1342c76b586046800002a":[{"id":19318,"user_id":null,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n       working-storage section.\n       01 high         pic 9(8)v9(9).\n       01 low          pic 9(8).\n\n       linkage section.\n       01 n            pic 9(8)v9(9).\n       01 result       pic 9(8)v9(9).\n       procedure division using n result.\n      \n      * Coding and coding...\n      * If we multiply by 2, we can just round\n      * to the nearest int, then divide by 2\n      * at the end.\n       compute n = n * 2.\n       compute low = n + 0.\n       compute high = low + 1.\n       if n - low < high - n\n       then\n          compute result = low \/ 2\n       else\n          compute result = high \/ 2.\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19319,"user_id":null,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n      \n       local-storage section.\n       01 tmp          pic 9(8).\n      \n       linkage section.\n       01 n            pic 9(8)v9(9).\n       01 result       pic 9(8)v9(9).\n       procedure division using n result.\n          compute tmp rounded = 2 * n\n          compute result = tmp \/ 2\n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19320,"user_id":168,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n\n       linkage section.\n       01 n            pic 9(8)v9(9).\n       01 result       pic 9(8)v9(9).\n       procedure division using n result.\n          compute result = function integer(2 * n + 0.5) \/ 2.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19321,"user_id":76,"body":"       identification division.\n       program-id. solution.\n       data division.\n       linkage section.\n       01 n            pic 9(8)v9(9).\n       01 result       pic 9(8)v9(9).\n       procedure division using n result.\n         compute result = function integer(n * 2 + 0.5) \/ 2.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19322,"user_id":53,"body":"       identification division.\n       program-id. solution.\n       data division.\n       local-storage section.\n       01 m            pic 9(9).\n       linkage section.\n       01 n            pic 9(8)v9(9).\n       01 result       pic 9(8)v9(9).\n       procedure division using n result.\n          compute m rounded = n * 2,\n          divide 2 into m giving result,\n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19323,"user_id":50,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n       local-storage section.\n       01 decimal-part pic 9v9(9).\n\n       linkage section.\n       01 n            pic 9(8)v9(9).\n       01 result       pic 9(8)v9(9).\n       procedure division using n result.\n      \n          compute result = function integer(n)\n          compute decimal-part = n - result\n      \n          evaluate decimal-part\n              when < 0.25 goback\n              when < 0.75 add 0.5 to result\n              when other add 1 to result\n          end-evaluate\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"51f2d1cafc9c0f745c00037d":[{"id":19324,"user_id":null,"body":"       identification division.\n       program-id. StringEndsWith.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 sl           pic 9(3).\n           05 s            pic x(100).\n      *    05 s            pic x occurs 0 to 100 times \n      *                          depending on sl.\n       01  end-str.\n           05 el           pic 9(3).\n           05 e            pic x(100).\n      *    05 e            pic x occurs 0 to 100 times \n      *                          depending on el.\n       01  result          pic 9.\n      \n       procedure division using str end-str result.\n      \n      * assign '1' to result if str ends with end-str, otherwise '0'\n          IF s(sl - el + 1 : el) = e(1 : el)\n             MOVE 1 TO result\n          ELSE\n             MOVE 0 TO result\n          END-IF\n      \n          goback.\n       end program StringEndsWith.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19325,"user_id":168,"body":"       identification division.\n       program-id. StringEndsWith.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 str-length   pic 9(3).\n           05 s-chars.\n              10 pic x occurs 0 to 100 times \n                              depending on str-length.\n       01  end-str.\n           05 e-length     pic 9(3).\n           05 e-chars.\n              10 pic x occurs 0 to 100 times \n                              depending on e-length.\n       01  result          pic 9.\n      \n       procedure division using str end-str result.\n          if str-length >= e-length and\n            s-chars(str-length - e-length + 1:) = e-chars\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program StringEndsWith.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19326,"user_id":null,"body":"       identification division.\n       program-id. StringEndsWith.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 str-length   pic 9(3).\n           05 s-chars.\n              10 s         pic x occurs 0 to 100 times \n                                 depending on str-length.\n       01  end-str.\n           05 e-length     pic 9(3).\n           05 e-chars.\n              10 e         pic x occurs 0 to 100 times \n                                 depending on e-length.\n       01  result          pic 9.\n      \n       procedure division using str, end-str, result.\n          if s-chars(str-length - e-length + 1:) = e-chars(1:)\n             move 1 to result\n          else\n             move 0 to result\n          end-if\n          goback.\n       end program StringEndsWith.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19327,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. StringEndsWith.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STR.\n           05 STR-LEN      PIC 9(3).\n           05 S            PIC X OCCURS 100 DEPENDING STR-LEN.\n       01  END-STR.\n           05 E-LEN        PIC 9(3).\n           05 E            PIC X OCCURS 100 DEPENDING E-LEN.\n       01  RESULT          PIC 9.\n\n       PROCEDURE DIVISION USING STR END-STR RESULT.\n           IF  STR(STR-LEN - E-LEN + 4:) = END-STR(4:)\n               MOVE 1  TO RESULT\n           END-IF.\n       END PROGRAM StringEndsWith.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19328,"user_id":53,"body":"       identification division.\n       program-id. StringEndsWith.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 n   pic 9(3).\n           05 s            pic x occurs 0 to 100 times \n                           depending on n indexed i.\n       01  end-str.\n           05 m     pic 9(3).\n           05 e            pic x occurs 0 to 100 times \n                           depending on m indexed j.\n       01  r          pic 9.\n      \n       procedure division using str end-str r.\n      \n          move 0 to r, if n < m goback end-if\n          move 1 to j\n          perform varying i from function abs(n - m + 1) until i > n\n            if e(j) <> s(i) goback end-if\n            add 1 to j\n          end-perform\n          move 1 to r\n          goback.\n       end program StringEndsWith.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19329,"user_id":168,"body":"       identification division.\n       program-id. StringEndsWith.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 str-length   pic 9(3).\n           05 s            pic x occurs 0 to 100 times \n                                 depending on str-length indexed i.\n       01  end-str.\n           05 e-length     pic 9(3).\n           05 e            pic x occurs 0 to 100 times \n                                 depending on e-length.\n       01  result          pic 9.\n      \n       procedure division using str end-str result.\n          move 0 to result\n          if e-length <= str-length\n              perform varying i from 1 until i > e-length\n                  if s(str-length - e-length + i) <> e(i)\n                      goback\n                  end-if\n              end-perform\n              move 1 to result\n          end-if.\n       end program StringEndsWith.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19330,"user_id":50,"body":"       identification division.\n       program-id. StringEndsWith.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 str-length   pic 9(3).\n           05 s            pic x occurs 0 to 100 times \n                           depending on str-length indexed i.\n       01  end-str.\n           05 e-length     pic 9(3).\n           05 e            pic x occurs 0 to 100 times \n                           depending on e-length indexed j.\n       01  result          pic 9.\n      \n       procedure division using str end-str result.\n      \n          move 0 to result\n          if str-length < e-length goback end-if\n          \n          move 1 to j\n          perform varying i from function abs(str-length - e-length + 1)\n                                 until i > str-length\n            if e(j) <> s(i) goback end-if\n            add 1 to j\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program StringEndsWith.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"521c2db8ddc89b9b7a0000c1":[{"id":19331,"user_id":53,"body":"       identification division.\n       program-id. snail.\n       data division.\n       local-storage section.\n       01  l                 pic s9(3).\n       01  i                 pic s9(3).\n       01  j                 pic s9(3) value 1.\n       01  x                 pic s9(3) value 0.\n       01  y                 pic s9(3) value 1.\n       01  dx                pic s9 value 1.\n       01  dy                pic s9 value 0.\n       01  tx                pic s9.\n       01  ty                pic s9.\n       linkage section.\n       01  matrix.\n           03  len           pic 9(2).\n           03  rows occurs 20 times depending on len.\n                  07 cell    pic 9(4) occurs 20 times.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(4) occurs 0 to 400 times \n                                      depending on res-length.\n       procedure division using matrix result.\n      \n          initialize result\n          compute res-length = len ** 2\n          if len = 0 goback end-if\n      \n          move len to l\n          perform until l = 0\n            perform varying i from 0 until i = l\n              add dx to x\n              add dy to y\n              move cell(y,x) to res(j)\n              add 1 to j\n            end-perform\n            move dx to tx\n            move dy to ty\n            multiply -1 by dy giving dx\n            move tx to dy\n            if ty = 0 then subtract 1 from l end-if\n          end-perform\n          \n          goback.\n       end program snail.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19332,"user_id":168,"body":"       identification division.\n       program-id. snail.\n       data division.\n       working-storage section.\n       01  direction-values.\n           05 pic s9 value 0.\n           05 pic s9 value 1.\n           05 pic s9 value 1.\n           05 pic s9 value 0.\n           05 pic s9 value 0.\n           05 pic s9 value -1.\n           05 pic s9 value -1.\n           05 pic s9 value 0.\n       01  directions redefines direction-values.\n           05 ds occurs 4 times.\n              10 di pic s9.\n              10 dj pic s9.\n       01  i1 usage index.\n       01  j1 usage index. \n       01  d pic 9.\n      \n       local-storage section.\n       01  visited.\n           05 occurs 20 times.\n              10 vs pic 9 occurs 20 times.\n      \n       linkage section.\n       01  matrix.\n           03  len           pic 9(2).\n           03  rows occurs 20 times depending on len.\n                  07 cell    pic 9(4) occurs 20 times indexed i j k.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(4) occurs 0 to 400 times \n                                     depending on res-length.\n      \n       procedure division using matrix result.\n          multiply len by len giving res-length\n          move 1 to i j k d\n          perform until k > res-length\n              move cell(i, j) to res(k)\n              move 1 to vs(i, j)\n              add 1 to k\n              perform 4 times\n                  compute i1 = i + di(d)\n                  compute j1 = j + dj(d)\n                  if (i1 >= 1 and <= len) and (j1 >= 1 and <= len)\n                                          and vs(i1, j1) = 0\n                      move i1 to i\n                      move j1 to j\n                      exit perform\n                  end-if\n                  compute d = function mod(d, 4) + 1\n              end-perform\n          end-perform\n          goback.\n       end program snail.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19333,"user_id":50,"body":"       identification division.\n       program-id. snail.\n       data division.\n       local-storage section.\n       01  k pic s9.\n       01  n pic 9(2).\n      \n       linkage section.\n       01  matrix.\n           03  len           pic 9(2).\n           03  rows occurs 20 times depending on len.\n                  07 cell    pic 9(4) occurs 20 times indexed i j.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(4) occurs 0 to 400 times \n                                     depending on res-length\n                                     indexed e.\n      \n       procedure division using matrix result.\n      \n          initialize result\n          compute res-length = len ** 2\n          if len = 0 goback end-if\n      \n          move 0 to e\n          \n          perform varying i from 1 until i > len\n              add 1 to e\n              compute res(e) = cell(1, i)\n          end-perform\n      \n          set i, k to 1\n          move len to j\n      \n          perform varying n from function abs(len - 1) by -1 until n = 0\n      \n            perform n times\n              add k to i\n              add 1 to e\n              compute res(e) = cell(i, j)\n            end-perform\n      \n            multiply -1 by k\n      \n            perform n times\n              add k to j\n              add 1 to e\n              compute res(e) = cell(i, j)\n            end-perform\n      \n          end-perform\n          \n          goback.\n       end program snail.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"521ef596c106a935c0000519":[{"id":19334,"user_id":168,"body":"       identification division.\n       program-id. prime.\n       data division.\n\n       linkage section.\n       01  n               pic 9(5).\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic 9(5) occurs 0 to 2000 times \n                                    depending on res-length indexed i j.\n      \n       procedure division using n result.\n           if n < 2 then move 0 to res-length; goback end-if\n           move 1 to res-length\n           move 2 to res(1)\n           perform varying i from 3 by 2 until i > n\n               move 1 to j\n               search res varying j\n                   at end\n                        add 1 to res-length\n                        move i to res(res-length)\n                   when function mod(i, res(j)) = 0\n                        continue\n                   when res(j) ** 2 > i\n                        add 1 to res-length\n                        move i to res(res-length)\n               end-search\n           end-perform.\n       end program prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19335,"user_id":53,"body":"       identification division.\n       program-id. prime.\n       data division.\n       local-storage section.\n       01  m               pic 9(5).\n       01  i               pic 9(5).\n       01  b               pic 9 value 0.\n       linkage section.\n       01  n               pic 9(5).\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic 9(5) occurs 0 to 2000 times \n                                    depending on res-length.\n       procedure division using n result.\n          initialize result\n          if n = 0 then goback end-if\n          perform varying m from 1 until m > n\n            evaluate true\n              when m < 2\n                move 0 to b\n              when function rem(m, 2) = 0 or function rem(m, 3) = 0\n                if m < 4 then move 1 to b\n                else move 0 to b end-if\n              when other\n                move 1 to b\n                perform varying i from 5 until i * i > m\n                  if function rem(m, i) = 0 then\n                    move 0 to b\n                    exit perform\n                  end-if\n                end-perform\n            end-evaluate\n            if b = 1 then\n              add 1 to res-length\n              move m to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program prime.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19336,"user_id":50,"body":"       identification division.\n       program-id. prime.\n       data division.\n       working-storage section.\n       01  memoizer.\n           05  len         pic 9(4).\n           05  memo        pic 9(5) occurs 0 to 1230 times\n                                    depending on len\n                                    indexed by i.\n       01  p               pic 9(5).\n       01  s               pic 9(5).\n      \n       linkage section.\n       01  n               pic 9(5).\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic 9(5) occurs 0 to 2000 times \n                                    depending on res-length\n                                    indexed by j.\n      \n       procedure division using n result.\n      \n           if len = 0 then perform memoize end-if\n      \n           move 1 to i\n           perform until memo(i) > n\n                add 1 to res-length\n                move i to j\n                move memo(i) to res(j)\n                add 1 to i\n           end-perform\n      \n           goback.\n\n            memoize.\n              move 1230 to len\n              move 2 to memo(1)\n              move 3 to memo(2)\n              move 5 to memo(3)\n              move 7 to memo(4)\n              move 4 to i\n              move 11 to p\n              perform until i > len\n                  perform varying s from 3 by 2 until s * s > p\n                      if function rem(p, s) = 0 then exit perform end-if\n                  end-perform\n                  if s * s > p\n                      add 1 to i\n                      move p to memo(i)\n                  end-if\n                  add 2 to p\n              end-perform\n                    .\n       end program prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52210226578afb73bd0000f1":[{"id":19337,"user_id":421,"body":"       identification division.\n       program-id. electrons-around-the-core.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01  dice.\n           05 len pic 9(2).\n           05 xs  pic 9 occurs 4 to 6 times\n                        depending on len\n                        indexed by i.\n       01 result      pic 9(3).\n      \n       procedure division using dice result.\n           initialize result\n           perform varying i from 1 by 1 until i > len\n               compute result = result + function rem(xs(i), 2) \n                                * (xs(i) - 1)\n           end-perform.\n       end program electrons-around-the-core.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19338,"user_id":50,"body":"       i\n      -    dentification divi\n      -     sion.\n       prog\n      -     ram-id. electrons-around-the-core.\n      \n       dat\n      -      a div\n      -       ision.\n       local-s\n      -      torage section.\n       01  i         pic 9\n      -   (\n      -  2\n      - ).\n\n       l\n      -  i\n      -    n\n      -\n      - k\n      -a\n      - g\n      - e secti\n      -       on.\n       01  dice.\n           05 len pic 9(2).\n           05 xs  pic 9 occ\n      -      urs 4 to 6 times\n                        depending on len.\n       01 result      pic 9(3).\n      \n       procedur\n      -     e div\n      -     ision using dice result.\n      \n               per\n      -      form vary\n      -     ing i fr\n      -    om 1 un\n      -       til i > len\n              i\n      -         f fun\n      -              ction rem(xs(i), 2) = 1\n                  com\n      -       pute result = result + xs(i) - 1\n              en\n      -     d-if\n          en\n      -  d-per\n      -     form\n          go\n      -         back.\n       end progr\n      -      am electrons-around-the-core.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19339,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. electrons-around-the-core.\n       REMARKS. solution 3.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  N3          PIC 9(1).\n       01  N5          PIC 9(1).\n       LINKAGE SECTION.\n       01  DICE.\n           05  LEN     PIC 9(2).\n           05  XS      PIC 9(1) OCCURS 4 TO 6 TIMES DEPENDING ON LEN.\n       01  RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING DICE RESULT.\n           INSPECT DICE(3:LEN) TALLYING N3 FOR ALL '3' N5 FOR ALL '5'\n           COMPUTE RESULT = N3 * 2 + N5 * 4.\n       END PROGRAM electrons-around-the-core.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19340,"user_id":null,"body":"       IDENTIFICATION DIVISION.         \n       PROGRAM-ID. electrons-around-the-core.\n       REMARKS. solution 2.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  DICE.\n           05  LEN     PIC 9(2).\n           05  XS      PIC 9(1) OCCURS 4 TO 6 TIMES DEPENDING ON LEN.\n       01  RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING DICE RESULT.\n           TRANSFORM DICE(3:) FROM '123456' TO '002040'\n           PERFORM VARYING TALLY FROM 1 BY 1 UNTIL TALLY > LEN\n               ADD XS(TALLY)  TO RESULT\n           END-PERFORM.\n       END PROGRAM electrons-around-the-core.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19341,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. electrons-around-the-core.\n       REMARKS. solution 1.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  DICE.\n           05  LEN     PIC 9(2).\n           05  XS      PIC 9(1) OCCURS 4 TO 6 TIMES DEPENDING ON LEN.\n       01  RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING DICE RESULT.\n           PERFORM VARYING TALLY FROM 1 BY 1 UNTIL TALLY > LEN\n               COMPUTE RESULT = RESULT + (XS(TALLY) - 1)\n                              * FUNCTION REM(XS(TALLY), 2)\n           END-PERFORM.\n       END PROGRAM electrons-around-the-core.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19342,"user_id":168,"body":"       identification division.\n       program-id. electrons-around-the-core.\n      \n       data division.\n\n       linkage section.\n       01  dice.\n           05 len pic 9(2).\n           05 xs  pic 9 occurs 4 to 6 times\n                        depending on len indexed by i.\n       01 result      pic 9(3).\n      \n       procedure division using dice result.\n          move 0 to result\n          perform varying i from 1 until i > len\n              compute result = result +\n                function abs(function mod(xs(i), 2) * (xs(i) - 1))\n          end-perform\n          goback.\n       end program electrons-around-the-core.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19343,"user_id":53,"body":"       identification division.\n       program-id. electrons-around-the-core.\n      \n       data division.\n       local-storage section.\n       01  i         pic 9(2).\n\n       linkage section.\n       01  dice.\n           05 len pic 9(2).\n           05 xs  pic 9 occurs 4 to 6 times\n                        depending on len.\n       01 result      pic 9(3).\n      \n       procedure division using dice result.\n      \n          perform varying i from 1 until i > len\n              if xs(i) = 3 or xs(i) = 5 then\n                  compute result = result + xs(i) - 1\n              end-if\n          end-perform\n      \n          goback.\n       end program electrons-around-the-core.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19344,"user_id":50,"body":"       identification division.\n       program-id. electrons-around-the-core.\n      \n       data division.\n       local-storage section.\n       01  i         pic 9(2).\n\n       linkage section.\n       01  dice.\n           05 len pic 9(2).\n           05 xs  pic 9 occurs 4 to 6 times\n                        depending on len.\n       01 result      pic 9(3).\n      \n       procedure division using dice result.\n      \n          perform varying i from 1 until i > len\n              if function rem(xs(i), 2) = 1\n                  compute result = result + xs(i) - 1\n              end-if\n          end-perform\n      \n          goback.\n       end program electrons-around-the-core.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5226eb40316b56c8d500030f":[{"id":19345,"user_id":50,"body":"       identification division.\n       program-id. PascalsTriangle.\n       data division.\n       local-storage section.\n       01  i                pic 9(3).\n       01  j                pic 9(3).\n       01  h                pic 9(3).\n       01  x                pic 9(38).\n\n       linkage section.\n       01  n                pic 9(3).\n       01  arr.\n           05 l             pic 9(5).\n           05 a             pic 9(38) occurs 10000\n                                      depending l indexed k.\n      \n       procedure division using n arr.\n      *   This works because result is not initialized by the tests,\n      *   if it were the case, an extra array should be used in working-storage for memoization\n          move 8646 to l\n          set k to 0\n          perform varying i from 0 until i = n\n                    after j from 0 until j > i\n              add 1 to k\n              if a(k) is zero\n                perform fillTriangle\n              end-if\n          end-perform\n          move k to l\n      \n          goback.\n      \n          fillTriangle.\n            move 1 to x\n            perform varying h from 0 until h = j\n              compute x = (i - h) \/ (h + 1)\n            end-perform\n            move x to a(k)\n            .\n      \n       end program PascalsTriangle.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19346,"user_id":53,"body":"       identification division.\n       program-id. PascalsTriangle.\n       data division.\n       local-storage section.\n       01  i                pic 9(3).\n       01  j                pic 9(3).\n       01  k                pic 9(3).\n       01  e                pic 9(38).\n       01  m                usage index value 0.\n       linkage section.\n       01  n                pic 9(3).\n       01  result.\n           05 len           pic 9(5).\n           05 res           pic 9(38) occurs 10000\n                                      depending len.\n       procedure division using n result.\n          move 9999 to len\n          perform varying i from 0 until i = n\n                    after j from 0 until j > i\n            add 1 to m\n            if res(m) = 0 then\n              move 1 to e\n              perform varying k from 0 until k = j\n                compute e = (i - k) \/ (k + 1)\n              end-perform\n              move e to res(m)\n            end-if\n          end-perform\n          move m to len\n          goback.\n       end program PascalsTriangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"523b4ff7adca849afe000035":[{"id":19347,"user_id":421,"body":"       identification division.\n       program-id. greet.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n           MOVE \"hello world!\" TO result.\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19348,"user_id":null,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n      * hello world!\n       Move 'hello world!' to result.\n       end program greet.\n\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19349,"user_id":null,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n          move 'hello world!' to result\n          goback.\n       end program greet.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19350,"user_id":null,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n         MOVE 'hello world!' TO RESULT.\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19351,"user_id":null,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n      * hello world!\n       move 'hello world!' to result.\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19352,"user_id":null,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n       MOVE \"hello world!\" to result.\n      * hello world!\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19353,"user_id":1277,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n          move L\"hello world!\" to result.\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19354,"user_id":53,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 hello    pic a(12).\n       procedure division using hello.\n            move \"hello world!\" to hello.\n       end program greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19355,"user_id":null,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 r    pic a(12).\n       procedure division using r.\n            move \"hello world!\" to r.\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19356,"user_id":232,"body":"       identification division.\n       program-id. greet.\n       data division.\n       linkage section.\n       01 result    pic a(12).\n       procedure division using result.\n         move 'hello world!' to result.\n       end program greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19357,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(12) VALUES \"\".\n       PROCEDURE DIVISION.\n       GREET SECTION .\n          MOVE \"hello world!\" TO RESULT\n       END PROGRAM KATA.        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19358,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RESULT      PIC A(12) VALUE \"hello world!\".\n       PROCEDURE DIVISION.\n       GREET.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19359,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(12) VALUE 'hello world!'.\n       PROCEDURE DIVISION.\n       GREET SECTION.\n      * Write a function called  GREET that returns \"hello world!\"\n       END PROGRAM KATA.        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19360,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(14) values \"hello world!\".\n       PROCEDURE DIVISION . \n       greet section.\n       END PROGRAM KATA.        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19361,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(12).\n       PROCEDURE DIVISION . \n       PERFORM GREET\n       GREET\n       MOVE \"hello world!\" TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19362,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RESULT      PIC A(12).\n       PROCEDURE DIVISION. \n       GREET\n       STRING 'hello world!' INTO RESULT\n       END PROGRAM KATA.        \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19363,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n           01 RESULT      PIC A(12).\n       PROCEDURE DIVISION.\n       GREET.\n           MOVE \"hello world!\" TO RESULT.\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19364,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(12).\n       PROCEDURE DIVISION . \n        GREET.\n          move 'hello world!' to RESULT\n          .\n       END PROGRAM KATA.        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19365,"user_id":487,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(12) .\n       PROCEDURE DIVISION . \n       GREET SECTION.\n           MOVE \"hello world!\" TO RESULT .\n       END PROGRAM KATA.     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19366,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION .\n       01 RESULT      PIC A(12).\n       PROCEDURE DIVISION . \n      * Write a function called  GREET that returns \"hello world!\"\n       GREET\n        MOVE \"hello world!\" TO RESULT\n       END PROGRAM KATA.        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19367,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RESULT      PIC X(12).\n       PROCEDURE DIVISION. \n       GREET\n        MOVE 'hello world!' to RESULT\n       END PROGRAM KATA.        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19368,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RESULT      PIC A(20) .\n       PROCEDURE DIVISION.\n       GREET SECTION .\n          MOVE \"hello world!\" TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19369,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RESULT      PIC A(20) VALUES \"\".\n       PROCEDURE DIVISION.\n       GREET SECTION .\n          MOVE \"hello world!\" TO RESULT\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"523b623152af8a30c6000027":[{"id":19370,"user_id":null,"body":"       identification division.\n       program-id. square.\n       data division.\n       working-storage section.\n       01 zeit pic 9(8).\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         MOVE ZERO TO ZEIT.\n         Accept zeit from time.\n         DISPLAY zeit.\n         perform until result = n*n\n           IF \"APPLE\" <> \"BIRNE\"\n             COMPUTE result = n * n\n             Subtract n from result\n           ELSE\n             DISPLAY \"HOLY SHEEESH!!!!!1111\"\n           END-if\n           ADD n TO result\n         end-perform.\n         Accept zeit from time.\n         DISPLAY zeit.\n       end program square.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19371,"user_id":421,"body":"       identification division.\n       program-id. square.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         MULTIPLY n BY n GIVING result.\n       end program square.\n      \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19372,"user_id":421,"body":"       identification division.\n       program-id. square.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         COMPUTE RESULT = N * N.\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19373,"user_id":null,"body":"       identification division.\n       program-id. square.\n       data division.\n       working-storage section.\n       01 zeit pic 9(8).\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         MOVE ZERO TO ZEIT.\n         Accept zeit from time.\n         DISPLAY zeit.\n         perform until result = n*n\n           COMPUTE result = n * n\n           Subtract n from result\n           ADD n TO result\n         end-perform.\n         Accept zeit from time.\n         DISPLAY zeit.\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19374,"user_id":null,"body":"       identification division.\n       program-id. square.\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         compute result = n ** 2\n         goback.\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19375,"user_id":null,"body":"       identification division.\n       program-id. square.\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         move 0 to result.\n         COMPUTE result = n * n.\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19376,"user_id":null,"body":"       identification division.\n       program-id. square.\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n       compute result = n ** 2 .\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19377,"user_id":53,"body":"       identification division.\n       program-id. square.\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n       compute result = n * n.\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19378,"user_id":232,"body":"       identification division.\n       program-id. square.\n       data division.\n       linkage section.\n       01 n            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using n result.\n         multiply n by n giving result.\n       end program square.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19379,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n      * Write function SQUARE here \n       square section.\n       multiply input-01 by input-01 giving result.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19380,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE SECTION . \n       compute result = input-01\n       multiply input-01 by result\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19381,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE SECTION.\n       COMPUTE RESULT = INPUT-01 * INPUT-01.\n       EXIT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19382,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n         MOVE 0 TO INPUT-01\n       PERFORM SQUARE\n       SQUARE.\n       MULTIPLY INPUT-01 BY INPUT-01 GIVING RESULT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19383,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE.\n            COMPUTE RESULT = INPUT-01 **2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19384,"user_id":482,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE.\n        compute result = input-01 ** 2 \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19385,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE SECTION.\n            COMPUTE RESULT = INPUT-01 ** 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19386,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE.\n         MULTIPLY INPUT-01 BY INPUT-01 GIVING RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19387,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE.\n       COMPUTE RESULT = INPUT-01 ** 2.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19388,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE. MULTIPLY INPUT-01 BY INPUT-01 GIVING RESULT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19389,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE.\n       COMPUTE RESULT = INPUT-01*INPUT-01\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19390,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n      * Write function SQUARE here \n       SQUARE.\n          COMPUTE RESULT = INPUT-01 * INPUT-01.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19391,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE\n        COMPUTE RESULT=INPUT-01**2\n      * The (**) is power operator \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19392,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n          GOBACK.\n       SQUARE SECTION.\n          MULTIPLY INPUT-01 BY INPUT-01 GIVING RESULT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19393,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE\n       COMPUTE RESULT = INPUT-01 * INPUT-01\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19394,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(04) VALUES ZERO.\n       01 RESULT      PIC 9(08) VALUES ZERO.\n       PROCEDURE DIVISION.\n       SQUARE SECTION . \n          MULTIPLY INPUT-01 BY INPUT-01 GIVING RESULT\n      * simple input x input to give result \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"523b66342d0c301ae400003b":[{"id":19395,"user_id":421,"body":"       identification division.\n       program-id. mult.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n         MULTIPLY a BY b GIVING result.\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19396,"user_id":null,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n         multiply a by b giving result\n         goback.\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19397,"user_id":null,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n         move 0 to result.\n      \n        MULTIPLY A BY B GIVING RESULT.\n      \n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19398,"user_id":null,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n          COMPUTE result = a * b.\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19399,"user_id":null,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n         move 0 to result.\n         multiply a by b giving result. \n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19400,"user_id":null,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n         move 0 to result.\n        MULTIPLY a BY b GIVING result.\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19401,"user_id":1277,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n           MULTIPLY A BY B GIVING RESULT\n           .\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19402,"user_id":null,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 r            pic 9(8).\n       procedure division using a b r.\n         compute r = a * b.\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19403,"user_id":53,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n           compute result = a * b .\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19404,"user_id":232,"body":"       identification division.\n       program-id. mult.\n       data division.\n       linkage section.\n       01 a            pic 9(4).\n       01 b            pic 9(4).\n       01 result       pic 9(8).\n       procedure division using a b result.\n         multiply a by b giving result.\n       end program mult.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19405,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n      * write MULTIPLY-NUMBERS to multiply two numbers\n       MULTIPLY-NUMBERS\n       COMPUTE RESULT = NUMBER-01 * NUMBER-02\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19406,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS.\n           MULTIPLY NUMBER-01 BY NUMBER-02 GIVING RESULT\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19407,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n      * write MULTIPLY-NUMBERS to multiply two numbers\n       multiply-numbers section.\n       multiply number-01 by number-02 giving result.\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19408,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       LOCAL-STORAGE SECTION.\n       01 a            PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS SECTION.\n       compute a = 1\n       move number-01 to a\n       multiply NuMbEr-02 by a\n       compute result = a\n       if result = 0 then multiply 0 by result \n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19409,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MOVE 9 TO NUMBER-01\n       MOVE 9 TO NUMBER-02\n       PERFORM MULTIPLY-NUMBERS\n       MULTIPLY-NUMBERS.\n       MULTIPLY NUMBER-01 BY NUMBER-02 GIVING RESULT.\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19410,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS\n        MULTIPLY NUMBER-01 BY NUMBER-02 GIVING RESULT\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19411,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS.\n            COMPUTE RESULT = NUMBER-01*NUMBER-02\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19412,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS SECTION.\n       MULTIPLY NUMBER-01 BY NUMBER-02 GIVING RESULT\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19413,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS.\n        COMPUTE RESULT = NUMBER-01 * NUMBER-02.\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19414,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUMBER-01    PIC 9(04).\n       01 NUMBER-02    PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       MULTIPLY-NUMBERS SECTION.\n         COMPUTE RESULT = NUMBER-01 * NUMBER-02\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"523f5d21c841566fde000009":[{"id":19415,"user_id":421,"body":"       identification division.\n       program-id. ArrayDiff.\n       author \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  n               pic 9.\n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 xs-a         pic s9(2) occurs 0 to 20 times \n                                     depending on a-length\n                                     indexed by i.\n       01  b.\n           05 b-length     pic 9(2).\n           05 xs-b         pic s9(2) occurs 0 to 20 times \n                                     depending on b-length\n                                     indexed by j.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic s9(2) occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using a b result.\n           initialize res-length\n           perform varying i from 1 by 1 until i > a-length\n               initialize n\n               perform varying j from 1 by 1 until j > b-length\n                   if xs-b(j) = xs-a(i) then\n                       set n to 1\n                       exit perform\n                   end-if\n               end-perform\n               if n = 0 then\n                   add 1 to res-length\n                   move xs-a(i) to res(res-length)\n               end-if\n           end-perform.\n       end program ArrayDiff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19416,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ArrayDiff.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  A.\n           05 A-LEN       PIC 9(2).\n           05 XS-A        PIC S9(2) OCCURS 20 DEPENDING A-LEN INDEXED I.\n       01  B.\n           05 B-LEN       PIC 9(2).\n           05 XS-B        PIC S9(2) OCCURS 20 DEPENDING B-LEN INDEXED J.\n       01  RESULT.\n           05 RES-LEN     PIC 9(2).\n           05 RES         PIC S9(2) OCCURS 20 DEPENDING RES-LEN.\n\n       PROCEDURE DIVISION USING A B RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > A-LEN\n               SET J  TO 1    \n               SEARCH XS-B\n                   AT END  \n                      ADD  1        TO RES-LEN\n                      MOVE XS-A(I)  TO RES(RES-LEN)\n                 WHEN XS-B(J) = XS-A(I) \n                      CONTINUE\n               END-SEARCH\n           END-PERFORM.\n       END PROGRAM ArrayDiff.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19417,"user_id":168,"body":"       identification division.\n       program-id. ArrayDiff.\n       data division.\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 xs-a         pic s9(2) occurs 0 to 20 times \n                                     depending on a-length indexed i.\n       01  b.\n           05 b-length     pic 9(2).\n           05 xs-b         pic s9(2) occurs 0 to 20 times \n                                     depending on b-length indexed j.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic s9(2) occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using a b result.\n          move 0 to res-length\n          perform varying i from 1 until i > a-length\n              move 1 to j\n              search xs-b varying j\n                  at end \n                      add 1 to res-length\n                      move xs-a(i) to res(res-length)\n                  when xs-a(i) = xs-b(j)\n                      continue\n              end-search\n          end-perform.\n       end program ArrayDiff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19418,"user_id":168,"body":"       identification division.\n       program-id. ArrayDiff.\n       data division.\n       working-storage section.\n       01  flag            pic 9.\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 xs-a         pic s9(2) occurs 0 to 20 times \n                               depending on a-length indexed i.\n       01  b.\n           05 b-length     pic 9(2).\n           05 xs-b         pic s9(2) occurs 0 to 20 times \n                               depending on b-length indexed j.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic s9(2) occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using a b result.\n          move 0 to res-length\n          perform varying i from 1 until i > a-length\n              move 1 to flag\n              perform varying j from 1 until j > b-length\n                  if xs-b(j) = xs-a(i)\n                      move 0 to flag\n                      exit perform\n                  end-if\n              end-perform\n              if flag = 1\n                  add 1 to res-length\n                  move xs-a(i) to res(res-length)\n              end-if\n          end-perform.\n       end program ArrayDiff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19419,"user_id":53,"body":"       identification division.\n       program-id. ArrayDiff.\n       data division.\n       local-storage section.\n       01  found           pic 9.\n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 xs-a         pic s9(2) occurs 0 to 20 times \n                                     depending on a-length\n                                     indexed by i.\n       01  b.\n           05 b-length     pic 9(2).\n           05 xs-b         pic s9(2) occurs 0 to 20 times \n                                     depending on b-length\n                                     indexed by j.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic s9(2) occurs 0 to 20 times \n                                     depending on res-length.\n       procedure division using a b result.\n          initialize result\n          perform varying i from 1 until i > a-length\n            set found to 0\n            perform varying j from 1 until j > b-length\n              if xs-b(j) = xs-a(i) then \n                set found to 1\n                exit perform \n              end-if\n            end-perform\n            if found = 0 then \n              add 1 to res-length\n              move xs-a(i) to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program ArrayDiff.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19420,"user_id":50,"body":"       identification division.\n       program-id. ArrayDiff.\n       data division.\n       local-storage section.\n       01  found pic 9.\n       01  n     pic s9(2).\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 xs-a         pic s9(2) occurs 0 to 20 times \n                           depending on a-length indexed i.\n       01  b.\n           05 b-length     pic 9(2).\n           05 tbl occurs 0 to 20 times\n                  depending on b-length indexed j k h.\n              07 xs-b pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic s9(2) occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using a b result.\n      \n          if b-length = 0 move a to result goback end-if\n      \n          move 0 to res-length\n          sort tbl on ascending key xs-b\n          perform varying i from 1 until i > a-length\n              move xs-a(i) to n\n              perform look\n              if found = 0 perform push end-if\n          end-perform\n      \n          goback.\n      \n            push.\n              add 1  to res-length\n              move n to res(res-length)\n             .\n      \n            look.\n                move 0 to found\n                move 1 to j, h\n                move b-length to k\n                perform until j > k\n                   evaluate true\n                   when n = xs-b(j) or n = xs-b(k)\n                      move 1 to found\n                      exit perform\n                   when n < xs-b(j) or n > xs-b(k)\n                      exit perform\n                   when other\n                      compute h = (j + k) \/ 2\n                      evaluate xs-b(h)\n                      when > n      compute k = h - 1\n                      when < n      compute j = h + 1\n                      when other    move 1 to found\n                                    exit perform\n                    end-evaluate\n                  end-perform\n             .\n      \n       end program ArrayDiff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"524f5125ad9c12894e00003f":[{"id":19421,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC S9(8).\n       01 D           PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           COMPUTE C = FUNCTION MAX(A, B)\n           COMPUTE D = FUNCTION MIN(A, B)\n           IF D = 0 THEN\n               COMPUTE RESULT = -1\n           ELSE\n               COMPUTE RESULT = FUNCTION REM(C, D)\n           END-IF.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19422,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       local-storage section.\n       77 swap        PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           if a > b then\n              move a to swap\n              move b to a\n              move swap to b\n           end-if\n           if a = 0 then\n              move -1 to result\n           else\n              compute result = function rem(b, a)\n           end-if\n           GOBACK.\n       END PROGRAM RMD.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19423,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n         if not b=0 then\n         evaluate A>B\n            when True  perform COMPUTE result=function rem(A,B)\n           \n            when False  perform COMPUTE result=function rem(B,A)\n         end-if\n         if A=0 OR B=0 MOVE -1 TO RESULT\n       \n           GOBACK.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19424,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 C           PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           IF A IS GREATER THAN B AND B IS NOT EQUAL TO 0 THEN\n              MOVE FUNCTION REM (A, B) TO RESULT\n           ELSE IF B IS GREATER THAN A AND A IS NOT EQUAL TO 0 THEN\n              MOVE FUNCTION REM (B, A) TO RESULT\n           ELSE IF A IS EQUAL TO B AND \n                   A IS NOT EQUAL TO 0 AND B IS NOT EQUAL TO 0 THEN\n              MOVE FUNCTION REM (A, B) TO RESULT\n           ELSE\n              MOVE -1 TO RESULT\n           END-IF.\n           GOBACK.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19425,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 MAXIMUM     PIC S9(8).\n       01 MINIMUM     PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           COMPUTE MAXIMUM = FUNCTION MAX(A, B)\n           COMPUTE MINIMUM = FUNCTION MIN(A, B)\n           IF MINIMUM = 0\n               MOVE -1 TO RESULT\n           ELSE\n               MOVE FUNCTION REM(MAXIMUM, MINIMUM) TO RESULT\n           .\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19426,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           IF A > B THEN\n             IF B = 0 THEN\n               MOVE -1 TO RESULT\n             ELSE\n               DIVIDE A BY B GIVING A REMAINDER RESULT\n             END-IF\n           ELSE\n             IF A = 0 THEN\n               MOVE -1 TO RESULT\n             ELSE\n               DIVIDE B BY A GIVING A REMAINDER RESULT\n             END-IF\n           END-IF.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19427,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           compute result = function min(a, b)\n           compute a = function max(a, b)\n           if result = 0\n              move -1 to result\n           else\n              compute result = function rem(a, result)\n           end-if.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19428,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC S9(8).\n       01 D           PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           COMPUTE c = function max (a, b)\n           COMPUTE d = function min (a, b)\n           if d = 0\n              move -1 to result\n           else\n             compute result = function rem(c, d)\n           end-if\n           GOBACK.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19429,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RMD.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC S9(8).\n       01 D           PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           compute c = function max (a, b)\n           compute d = function min (a, b)\n           if d = 0\n              move -1 to result\n           else\n              compute result = function rem(c, d)\n           end-if.\n       END PROGRAM RMD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19430,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       LOCAL-STORAGE SECTION.\n       01 N           PIC 9(9).\n       01 R           PIC 9(9).\n       PROCEDURE DIVISION.\n       RMD SECTION.\n          IF A EQUAL 0 OR B EQUAL 0 THEN\n             MOVE -1 TO RESULT\n           ELSE\n              IF A IS GREATER THAN B THEN\n                 DIVIDE A BY B GIVING N REMAINDER R\n                 MOVE R TO RESULT\n               ELSE\n                  DIVIDE B BY A GIVING N REMAINDER R\n                  MOVE R TO RESULT\n               END-IF.\n           END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19431,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD.\n            IF B IS ZERO\n              MOVE -1 TO RESULT\n            ELSE IF A IS ZERO\n              MOVE 1 TO RESULT\n            ELSE IF B > A \n              MOVE FUNCTION REM(B, A) TO RESULT\n            ELSE\n              MOVE FUNCTION REM(A, B) TO RESULT\n            END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19432,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD SECTION.\n           IF  A > B\n               DIVIDE A BY B GIVING B REMAINDER RESULT\n                   ON SIZE ERROR    MOVE -1  TO RESULT\n           ELSE\n               DIVIDE B BY A GIVING A REMAINDER RESULT\n                   ON SIZE ERROR    MOVE -1  TO RESULT\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19433,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD SECTION.\n           if a < b then \n             if a = 0 then \n               move -1 to result \n             else \n               compute result = function rem(b, a)\n             end-if\n           else\n             if b = 0 then\n               move -1 to result\n             else\n               compute result = function rem(a, b)\n             end-if\n           end-if\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19434,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD SECTION.\n            IF A = 0 OR B = 0 THEN \n                COMPUTE RESULT = -1\n            ELSE \n              COMPUTE RESULT = FUNCTION REM(  \n                  FUNCTION MAX(A, B),\n                  FUNCTION MIN(A, B))\n            END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19435,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD.\n       IF B ZERO OR A ZERO THEN COMPUTE RESULT = -1 .\n       IF B > 0 AND A > 0 THEN COMPUTE RESULT =\n                          FUNCTION REM(FUNCTION MAX(A, B),\n                                       FUNCTION MIN(A, B))\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19436,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD SECTION.\n            IF A < 0 THEN COMPUTE A = -1 * A END-IF.\n            IF B < 0 THEN COMPUTE A = -1 * B END-IF.\n            IF A = 0 OR B = 0 THEN\n                  MOVE -1 TO RESULT\n            ELSE IF A > B THEN\n                  COMPUTE RESULT = FUNCTION MOD(A, B)\n            ELSE\n                  COMPUTE RESULT = FUNCTION MOD(B, A)\n            END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19437,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC S9(8).\n       01 B           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       RMD SECTION.\n       DIVIDE FUNCTION MIN(A, B) INTO\n              FUNCTION max(A,\n                    B) GIVING RESULT\n                      REMAINDER RESULT\n       IF FUNCTION MIN(A, B) = 0 THEN SET \n                            RESULT TO -1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52503c77e5b972f21600000e":[{"id":19438,"user_id":421,"body":"       identification division.\n       program-id. largestDifference.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(5) occurs 0 to 99 times \n                                  depending on arr-length\n                                  indexed by i j.\n       01  result            pic 99.\n      \n       procedure division using arr result.\n           initialize result\n           perform varying i from 1 by 1 until i > arr-length\n               compute j = i + 1\n               perform varying j from 2 by 1 until j > arr-length\n                   if xs(i) <= xs(j) then\n                       compute result = function max(result, j - i)\n                   end-if\n               end-perform\n           end-perform.\n       end program largestDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19439,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. largestDifference.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN    PIC  99.\n           05 XS     PIC S9(5) OCCURS 0 TO 99 DEPENDING LEN INDEXED I J.\n       01  RESULT    PIC  99.\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN\n               PERFORM VARYING J FROM I BY 1 UNTIL J > LEN\n                   IF  XS(I) <= XS(J)\n                       MOVE FUNCTION MAX(RESULT, J - I)  TO RESULT\n                   END-IF\n               END-PERFORM\n           END-PERFORM.\n       END PROGRAM largestDifference.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19440,"user_id":168,"body":"       identification division.\n       program-id. largestDifference.\n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(5) occurs 0 to 99 times \n                                  depending on arr-length\n                                  indexed by i j.\n       01  result            pic 99.\n      \n       procedure division using arr result.\n          move 0 to result\n          perform varying i from arr-length by -1 until i = 0\n              compute j = i + 1\n              search xs varying j\n                  when xs(j) >= xs(j - i)\n                      move i to result\n                      goback\n              end-search      \n          end-perform.\n       end program largestDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19441,"user_id":53,"body":"       identification division.\n       program-id. largestDifference.\n       data division.\n       linkage section.\n       01  arr.\n           05 n              pic 99.\n           05 xs             pic s9(5) occurs 0 to 99 times \n                                  depending on n\n                                  indexed by i, j.\n       01  m                 pic 99.\n       procedure division using arr m.\n          move 0 to m\n          perform varying i from 1 until i >= n\n            perform varying j from n by -1 until j <= i\n              if xs(i) <= xs(j) then\n                compute m = function max (m, j - i)\n              end-if\n            end-perform\n          end-perform\n          goback.\n       end program largestDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19442,"user_id":50,"body":"       identification division.\n       program-id. largestDifference.\n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(5) occurs 0 to 99 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic 99.\n      \n       procedure division using arr result.\n      \n          compute result = arr-length - 1\n          perform until result = 0\n             perform varying i from 1 until i + result > arr-length\n                if xs(i) <= xs(i + result) goback end-if\n             end-perform\n             subtract 1 from result\n          end-perform\n      \n          goback.\n       end program largestDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5254bd1357d59fbbe90001ec":[{"id":19443,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-SCORE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 RESULT       PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * (N + 1) \/ 2 * 50.\n       END PROGRAM GET-SCORE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19444,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-SCORE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PRE          PIC 9(8).\n       01 ZAEHLER      PIC 9(8).\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 RESULT       PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n              MOVE 0 TO PRE\n      \n              PERFORM VARYING ZAEHLER FROM 1 BY 1 \n              UNTIL ZAEHLER > N\n                \n                     COMPUTE PRE = PRE + ZAEHLER\n                  \n              END-PERFORM\n      \n              COMPUTE RESULT = PRE * 50\n       GOBACK.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19445,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-SCORE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 RESULT       PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n       COMPUTE RESULT = N * (N + 1) * 25.\n       END PROGRAM GET-SCORE.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19446,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-SCORE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 RESULT       PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 25 * n * (n + 1).\n       END PROGRAM GET-SCORE.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19447,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-SCORE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 RESULT       PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n        COMPUTE RESULT = 25 * N * (N + 1) .\n       END PROGRAM GET-SCORE.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19448,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION.\n           COMPUTE RESULT = N * 25 * (N + 1)\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19449,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES\n       COMPUTE RESULT = N * (N + 1) * 25\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19450,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION.\n           MOVE 25 TO RESULT.\n           MULTIPLY N BY RESULT.\n           ADD 25 TO RESULT.\n           MULTIPLY N BY RESULT. \n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19451,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION\n       COMPUTE RESULT = 25 * N * (N + 1)\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19452,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       01 IND-I        PIC 9(05).\n\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION.\n           MOVE ZEROES TO IND-I RESULT\n           PERFORM VARYING IND-I FROM 1 BY 1 UNTIL IND-I > N \n               COMPUTE RESULT = RESULT + (50 * IND-I)\n           END-PERFORM.\n       \n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19453,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION.\n        COMPUTE RESULT = 25 * (N ** 2 + N).\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19454,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION.\n          COMPUTE RESULT = N * (N + 1) * 25\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19455,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       ACTUAL-GET-SCORES SECTION.\n          COMPUTE N = N + 1\n          COMPUTE RESULT = (N - 1) * N * (12 * 2 + 1) \n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5254ca2719453dcc0b00027d":[{"id":19456,"user_id":50,"body":"       identification division.\n       program-id. Permutations recursive.\n       data division.\n       local-storage section.\n       01  ts         pic a(8).\n       01  c          pic a.\n       01  l          pic 9.\n       01  arr.\n           03  al     pic 9(5).\n           03  a occurs 0 to 50000 times depending al indexed j.\n               05  x  pic a(8).\n       01 k           index.\n       \n       linkage section.\n       01  s          pic a(8).\n       01  result.\n           05  ol     pic 9(5).\n           05  o      occurs 0 to 50000 times depending ol indexed i.\n               07  rs pic a(8).\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          compute l = length function trim(s)\n          evaluate l\n          when 0   goback\n          when 1   move 1 to ol\n                   move s to o(1)\n                   goback\n          end-evaluate\n      \n          move s(2:) to ts\n          call 'Permutations' using ts arr\n          move s(1:1) to c\n          perform varying j from 1 until j > al\n              add 1 to ol\n              string c a(j) into o(ol)\n              perform varying k from 1 until k > l\n              add 1 to ol\n              string function trim(a(j)(1:k)) c a(j)(k + 1:) into o(ol)\n              end-perform\n          end-perform\n          \n          sort o on ascending rs\n          set i to 1\n          move o(1) to ts\n          perform varying j from 2 until j > ol\n          if o(j) <> ts\n             add 1 to i\n             move o(j) to o(i) ts\n          end-if\n          end-perform\n          move i to ol\n      \n          goback.\n       end program Permutations.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19457,"user_id":53,"body":"       identification division.\n       program-id. Permutations recursive.\n       data division.\n       local-storage section.\n       01  k           usage index.\n       01  m           pic 9.\n       01  w           pic a(8).\n       01  c           pic a.\n       01  arr.\n           05  arr-len pic 9(5).\n           05  xs      occurs 0 to 50000 times \n                       depending arr-len \n                       indexed by j.\n               08  x   pic a(8).\n       linkage section.\n       01  s           pic a(8).\n       01  result.\n           05  res-len pic 9(5).\n           05  res     occurs 0 to 50000 times \n                       depending res-len\n                       indexed by i.\n               08  r   pic a(8).\n       procedure division using s result.\n      \n          initialize result\n          perform edge-case\n          perform induction\n          perform render\n          goback.\n      \n        edge-case.\n          move length function trim(s) to m\n          if m = 0 then goback end-if\n          if m = 1 then\n            set res-len to 1\n            move s to res(1)\n            goback\n          end-if\n          .\n      \n        induction.\n          move s(2:) to w\n          move s(1:1) to c\n          call 'Permutations' using by content w by reference arr\n          perform varying j from 1 until j > arr-len\n            add 1 to res-len\n            string c xs(j) into res(res-len)\n            perform varying k from 1 until k > m\n              add 1 to res-len\n              string function trim(xs(j)(1:k)) c xs(j)(k + 1:) \n                into res(res-len)\n            end-perform\n          end-perform\n          .\n      \n        render.\n          sort res on ascending key r\n          set i to 1\n          move res(1) to w\n          perform varying j from 2 until j > res-len\n            if res(j) <> w\n              add 1 to i\n              move res(j) to res(i) w\n            end-if\n          end-perform\n          set res-len to i\n          .\n          \n       end program Permutations.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52597aa56021e91c93000cb0":[{"id":19458,"user_id":168,"body":"       identification division.\n       program-id. move-zeros.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(3) occurs 0 to 20 times \n                                    depending on arr-length\n                                    indexed by i j.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9(3) occurs 0 to 20 times \n                                    depending on res-length.\n       procedure division using arr result.\n           move arr-length to res-length\n           set j to 1\n      * result is initialized by tests\n           perform varying i from 1 until i > arr-length\n              if xs(i) <> 0\n                  move xs(i) to res(j)\n                  set j up by 1\n              end-if\n           end-perform\n           goback.\n       end program move-zeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19459,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. move-zeros.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LEN    PIC 9(2).\n           05 XS         PIC 9(3) OCCURS 20 DEPENDING ARR-LEN INDEXED I.\n       01  RESULT.\n           05 RES-LEN    PIC 9(2).\n           05 RES        PIC 9(3) OCCURS 20.\n\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > ARR-LEN\n               IF  XS(I) NOT = 0\n                   ADD  1      TO RES-LEN\n                   MOVE XS(I)  TO RES(RES-LEN)\n               END-IF\n           END-PERFORM\n           MOVE ARR-LEN  TO RES-LEN.\n       END PROGRAM move-zeros.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19460,"user_id":null,"body":"       identification division.\n       program-id. move-zeros.\n       data division.\n      \n       linkage section.\n       01  arr.\n             05 arr-length   pic 9(2).\n           05 xs           pic 9(3) occurs 0 to 20 times \n                                  depending on arr-length indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res           pic 9(3) occurs 0 to 20 times \n                                  depending on res-length indexed by j.\n       procedure division using arr result.\n      \n        move 1 to i\n        move 1 to j\n      \n        move arr-length to res-length\n        perform varying i from 1 by 1 until i > arr-length\n          if xs(i) <> '000' then\n            move xs(i) to res(j)\n            compute j = j + 1            \n          end-if\n        end-perform\n      \n           goback.\n       end program move-zeros.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19461,"user_id":421,"body":"       identification division.\n       program-id. move-zeros.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  m               pic 9(2).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(3) occurs 0 to 20 times \n                                    depending on arr-length\n                                    indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9(3) occurs 0 to 20 times \n                                    depending on res-length.\n       procedure division using arr result.\n           initialize m res-length\n           perform varying i from 1 by 1 until i > arr-length\n               if xs(i) = 0 then\n                   add 1 to m\n               end-if\n               if xs(i) <> 0 then\n                   add 1 to res-length\n                   move xs(i) to res(res-length)\n               end-if\n           end-perform\n           perform until m = 0 \n               add 1 to res-length\n               move 0 to res(res-length)\n               subtract 1 from m\n           end-perform.\n       end program move-zeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19462,"user_id":null,"body":"       identification division.\n       program-id. move-zeros.\n       data division.\n       working-storage section.\n       01  i                 pic 9(2).\n       01  j                 pic 9(2).\n      \n       linkage section.\n       01  arr.\n             05 arr-length   pic 9(2).\n           05 xs           pic 9(3) occurs 0 to 20 times \n                                     depending on arr-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res           pic 9(3) occurs 0 to 20 times \n                                     depending on res-length.\n       procedure division using arr result.\n           move arr-length to res-length\n           move zeros to j\n           perform varying i from 1 by 1 until i > arr-length\n             if xs(i) <> zeros\n                add 1 to j\n                move xs(i) to res(j)\n             end-if\n           end-perform\n           goback.\n       end program move-zeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19463,"user_id":53,"body":"       identification division.\n       program-id. move-zeros.\n       data division.\n       linkage section.\n       01  arr.\n           05 n            pic 9(2).\n           05 xs           pic 9(3) occurs 0 to 20 times \n                                    depending on n\n                                    indexed by i.\n       01  res.\n           05 m            pic 9(2).\n           05 ys           pic 9(3) occurs 0 to 20 times \n                                    depending on m\n                                    indexed by j, k.\n       procedure division using arr res.\n          move 1 to j\n          move n to m\n          move m to k\n          perform varying i from 1 by 1 until i > n\n            if xs(i) <> 0 then\n              move xs(i) to ys(j)\n              add 1 to j\n            else\n              move xs(i) to ys(k)\n              subtract 1 from k\n            end-if\n          end-perform\n          goback.\n       end program move-zeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19464,"user_id":50,"body":"       identification division.\n       program-id. move-zeros.\n       data division.\n       local-storage section.\n       01  z               pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(3) occurs 0 to 20 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res           pic 9(3) occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n           move 0 to z\n           move arr-length to res-length\n           perform varying i from 1 until i > arr-length\n              if xs(i) = 0\n                  move 0 to res(arr-length - z)\n                  add 1 to z\n              else\n                  move xs(i) to res(i - z)\n              end-if\n           end-perform\n      \n           goback.\n       end program move-zeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5259acb16021e9d8a60010af":[{"id":19465,"user_id":168,"body":"       identification division.\n       program-id. lcm.\n      \n       data division.\n       working-storage section.\n       01  d          pic 9(8).\n       01  a          pic 9(8).\n       01  b          pic 9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 99 occurs 0 to 25 times \n                                  depending on arr-length\n                                  indexed by i.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n          compute result = 1\n          perform varying i from 1 until i > arr-length\n              compute a = xs(i)\n              if a = 0\n                  compute result = 0\n                  exit perform\n              end-if\n              compute d = result\n              perform until a = 0\n                  compute b = d\n                  compute d = a\n                  compute a = function mod(b, a)\n              end-perform\n              compute result = result \/ d * xs(i)\n          end-perform.\n       end program lcm.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19466,"user_id":53,"body":"       identification division.\n       program-id. lcm.\n      \n       data division.\n       local-storage section.\n       01 i                pic 99.\n       01 a                pic 99.\n       01 e                pic 9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 99 occurs 0 to 25 times \n                                     depending on arr-length.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n          move 1 to result\n          perform varying i from 1 until i > arr-length\n                move xs(i) to a\n                call 'lcm-num'\n                     using by content   a result\n                           by reference e\n                move e to result\n          end-perform\n          goback.\n       end program lcm.\n\n       identification division.\n       program-id. lcm-num.\n       data division.\n       local-storage section.\n       01 c           pic 9(8).\n       01 a           pic 9(8).\n       01 y           pic 9(8).\n      \n       linkage section.\n       01 x           pic 9(2).\n       01 b           pic 9(8).\n       01 result      pic 9(8).\n      \n       procedure division using x b result.\n           move x to a\n           move b to y\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n      \n           move a to result\n           compute result = (x * y) \/ result\n\n           goback.\n       end program lcm-num.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19467,"user_id":50,"body":"       identification division.\n       program-id. lcm.\n      \n       data division.\n       local-storage section.\n       01 i                pic 99.\n       01 a                pic 99.\n       01 e                pic 9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 99 occurs 0 to 25 times \n                                     depending on arr-length.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n      \n          move 1 to result\n          \n          perform varying i from 1 until i > arr-length\n      \n                move xs(i) to a\n      \n                call 'gcd'\n                     using by content   a result\n                           by reference e\n\n                compute result = function integer((a * result) \/ e)\n      \n          end-perform\n\n          goback.\n       end program lcm.\n\n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(8).\n       01 a           pic 9(8).\n      \n       linkage section.\n       01 x           pic 9(2).\n       01 b           pic 9(8).\n       01 result      pic 9(8).\n      \n       procedure division using x b result.\n           move x to a\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n      \n           move a to result\n\n           goback.\n       end program gcd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5259b20d6021e9e14c0010d4":[{"id":19468,"user_id":50,"body":"       identification division.\n       program-id. ReverseWords.\n       data division.\n       local-storage section.\n       01  i               usage index.\n       01  j               usage index.\n       01  t               usage index.\n       01  c               pic a.\n       01  tmp             pic a(300).\n      \n       linkage section.\n       01  s.\n           05 len          pic 9(3).\n           05 s-chars      pic a occurs 0 to 300 times\n                                 depending on len.\n       01  result.\n           05 l            pic 9(3).\n           05 res-chars.\n              07 res       pic a occurs 0 to 300 times\n                           depending on l.\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          perform varying i from 1 until i > len\n          move s-chars(i) to c\n          if c = ' '\n             if t <> 0 perform rev end-if\n             add 1 to l\n             move c to res(l)\n          else\n             add 1 to t\n             move c to tmp(t:1)\n          end-if\n          end-perform\n          perform rev\n            \n          goback.\n      \n            rev.\n              perform varying j from t by -1 until j = 0\n                  add 1 to l\n                  move tmp(j:1) to res(l)\n              end-perform\n              initialize tmp, t\n              .\n                \n       end program ReverseWords.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19469,"user_id":null,"body":"       identification division.\n       program-id. ReverseWords.\n       data division.\n       working-storage section.\n       01  chunk           pic x(30).\n       01  chunk-size      pic 9(03).\n       01  s-ptr           pic 9(03).\n       01  r-ptr           pic 9(03).\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-chars      pic a occurs 0 to 300 times\n                                 depending on s-length.\n       01  result.\n           05 res-len      pic 9(3).\n           05 res-chars    pic a occurs 0 to 300 times\n                                 depending on res-len.\n\n       procedure division using s, result.\n          initialize result, s-ptr\n          move 4 to r-ptr\n\n          perform until exit\n             perform get-next-chunk\n             if chunk-size = zeros\n                exit perform\n             end-if\n             add chunk-size to res-len\n             move function reverse(chunk(1:chunk-size)) to\n                           result(r-ptr:chunk-size)\n             add chunk-size to r-ptr\n          end-perform\n\n          goback.\n\n       get-next-chunk.\n          initialize chunk, chunk-size\n          perform until exit\n             add 1 to s-ptr\n             if s-ptr > s-length\n                exit perform\n             end-if\n             if chunk-size > zeros and\n                chunk = spaces and s-chars(s-ptr) <> spaces\n                subtract 1 from s-ptr\n                exit perform\n             end-if\n             if chunk-size > zeros and\n                chunk <> spaces and s-chars(s-ptr) = spaces\n                subtract 1 from s-ptr\n                exit perform\n             end-if\n             add 1 to chunk-size\n             move s-chars(s-ptr) to chunk(chunk-size:1)\n          end-perform.\n\n       end program ReverseWords.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19470,"user_id":53,"body":"       identification division.\n       program-id. ReverseWords.\n       data division.\n       local-storage section.\n       01  chr             pic a.\n       01  word-str.\n           05  word        pic a(300).\n           05  word-len    usage index.\n       linkage section.\n       01  s.\n           05 s-len        pic 9(3).\n           05 s-chars      pic a occurs 0 to 300 times\n                                 depending on s-len\n                                 indexed by i j.\n       01  result.\n           05 res-len      pic 9(3).\n           05 res-chars.\n              07 res       pic a occurs 0 to 300 times\n                           depending on res-len.\n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > s-len\n          move s-chars(i) to chr\n          if chr = ' '\n             if word-len <> 0 perform rev-word end-if\n             add 1 to res-len\n             move chr to res(res-len)\n          else\n             add 1 to word-len\n             move chr to word(word-len:1)\n          end-if\n          end-perform\n          perform rev-word\n          goback.\n      \n        rev-word.\n          perform varying j from word-len by -1 until j = 0\n            add 1 to res-len\n            move word(j:1) to res(res-len)\n          end-perform\n          initialize word-str\n          .\n                \n       end program ReverseWords.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"525b4164eb636fb2f90002a0":[{"id":19471,"user_id":50,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n      \n       linkage section.\n       01 dateInput   pic x(21).\n       01 result      pic 9.\n      \n       procedure division using dateInput result.\n      \n          compute result = function mod(\n                              function numval(dateInput(1:8)) - 1\n                                      , 9) + 1\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19472,"user_id":53,"body":"       identification division.\n       program-id. solution.\n       data division.\n       linkage section.\n       01 dateInput   pic x(21).\n       01 result      pic 9.\n       procedure division using dateInput result.\n        compute result = 1 + function mod(\n         function numval(dateInput(1:8)) - 1, 9)\n        goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"525e5a1cb735154b320002c8":[{"id":19473,"user_id":421,"body":"       identification division.\n       program-id. triangular.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic s9(8) sign leading.\n       01 result      pic 9(16).\n       procedure division using n result.\n           initialize result\n           if n > 0 then\n               compute result = n * (n + 1) \/ 2\n           end-if.\n       end program triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19474,"user_id":100,"body":"       identification division.\n       program-id. triangular.\n       data division.\n       linkage section.\n       01 n           pic s9(8) sign leading.\n       01 result      pic 9(16).\n       procedure division using n result.\n        if n < 0\n          compute result = 0\n        else\n          compute result = (n * (n + 1)) \/ 2\n        goback.\n       end program triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19475,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. triangular.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(08) SIGN LEADING.\n       01 RESULT      PIC  9(16).\n       PROCEDURE DIVISION USING N RESULT.\n           IF  N > 0\n               COMPUTE RESULT = N * (N + 1) \/ 2\n           END-IF.\n       END PROGRAM triangular.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19476,"user_id":50,"body":"       identification division.\n       program-id. triangular.\n       data division.\n       linkage section.\n       01 n           pic s9(8) sign leading.\n       01 result      pic 9(16).\n       procedure division using n result.\n    \n          if n is negative then move 0 to result else\n          move function abs(n * (n + 1) \/ 2) to result.\n    \n          goback.\n       end program triangular.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19477,"user_id":168,"body":"       identification division.\n       program-id. triangular.\n       data division.\n       linkage section.\n       01 n           pic s9(8) sign leading.\n       01 result      pic 9(16).\n       procedure division using n result.\n          compute result = function max(n, 0) * (n + 1) \/ 2.\n       end program triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19478,"user_id":53,"body":"       identification division.\n       program-id. triangular.\n       data division.\n       linkage section.\n       01 n           pic s9(8) sign leading.\n       01 result      pic 9(16).\n       procedure division using n result.\n      \n          if n < 0 then move 0 to result, goback end-if\n          compute result = n * (n + 1) \/ 2\n      \n          goback.\n       end program triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"525f4206b73515bffb000b21":[{"id":19479,"user_id":53,"body":"       identification division.\n       program-id. AddBigNumbers.\n       data division.\n       local-storage section.\n       01  c              pic 9(2) value 0.\n       01  x              pic 9.\n       01  y              pic 9.\n       linkage section.\n       01  a-str.\n           05 a-len       pic 9(3).\n           05 a           pic 9 occurs 0 to 200 times \n                                depending on a-len\n                                indexed by i.\n       01  b-str.\n           05 b-len       pic 9(3).\n           05 b           pic 9 occurs 0 to 200 times \n                                depending on b-len\n                                indexed by j.\n       01  result.\n           05 res-len     pic 9(3).\n           05 res-arr.\n              07 res      pic 9 occurs 0 to 300 times \n                                depending on res-len.\n       procedure division using a-str b-str result.\n          initialize result\n          move 1 to i j\n          perform until i > a-len and j > b-len and c = 0\n            move 0 to x y\n            if i <= a-len then move a(a-len - i + 1) to x end-if\n            if j <= b-len then move b(b-len - j + 1) to y end-if\n            compute c = c + x + y\n            add 1 to res-len\n            compute res(res-len) = function rem(c, 10)\n            if c > 9 then set c to 1 else set c to 0 end-if\n            add 1 to i\n            add 1 to j\n          end-perform\n          move function reverse(res-arr) to res-arr\n          goback.\n       end program AddBigNumbers.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19480,"user_id":50,"body":"       identification division.\n       program-id. AddBigNumbers.\n       data division.\n       local-storage section.\n       01  x              pic 9.\n       01  y              pic 9.\n       01  z              pic 9.\n      \n       linkage section.\n       01  a.\n           05  aLen        pic 9(3).\n           05  aChar       pic 9 occurs 0 to 200 times \n                                  depending on aLen.\n       01  b.\n           05  bLen        pic 9(3).\n           05  bChar       pic 9 occurs 0 to 200 times \n                                  depending on bLen.\n       01  result.\n           05  resLen      pic 9(3).\n           05  c.\n              07  res      pic 9 occurs 0 to 300 times \n                                depending on resLen.\n      \n       procedure division using a b result.\n      \n          initialize result\n          perform forever\n              if aLen = 0\n                 move 0 to x\n              else move aChar(aLen) to x end-if\n              if bLen = 0\n                 move 0 to y\n              else move bChar(bLen) to y end-if\n              add 1 to resLen\n              divide function abs(x + y + z) by 10\n              giving z remainder res(resLen)\n              if function max(aLen, bLen) = 1 exit perform end-if\n              if aLen > 0 subtract 1 from aLen end-if\n              if bLen > 0 subtract 1 from bLen end-if\n          end-perform\n      \n          add z to resLen res(resLen)\n          \n          move function reverse(c) to c\n      \n          goback.\n       end program AddBigNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"525f50e3b73515a6db000b83":[{"id":19481,"user_id":null,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n\n       linkage section.\n       01  arr    pic 9(10).\n       01  result pic x(14).\n      \n       procedure division using arr result.\n          move '(' to result\n          move arr(1:3) to result(2:3)\n          move ') ' to result(5:2)\n          move arr(4:3) to result(7:3)\n          move '-' to result(10:1)\n          move arr(7:4) to result(11:4)\n          goback.\n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19482,"user_id":null,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n      \n       linkage section.\n       01  arr    pic 9(10).\n       01  result pic x(14).\n      \n       procedure division using arr result.\n    \n        STRING '(' \n          arr(1:3) \n          ') ' \n          arr(4:3)\n          '-'\n          arr(7:4)\n          INTO result\n          ON OVERFLOW DISPLAY 'OVERFLOW!' \n        END-STRING.\n      \n          goback.\n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19483,"user_id":null,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n       WORKING-STORAGE SECTION.\n       01 entrada.\n           03 prefijo pic 9(3).\n           03 prov    pic 9(3).\n           03 telefon pic 9(4).\n       01  resultado.\n           03 filler pic x(1) value '('.\n           03 pref   pic 9(3).\n           03 filler pic x(1) value ')'.\n           03 filler pic x(1) value ' '.\n           03 zip    pic 9(3).\n           03 filler pic x(1) value '-'.\n           03 numer pic 9(4).\n       linkage section.\n       01  arr    pic 9(10).\n       01  result pic x(14).\n      \n       procedure division using arr result.\n      \n          move arr to entrada.\n          move prefijo to pref.\n          move prov    to zip.\n          move telefon to numer.\n          move resultado to result.\n      \n          goback.\n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19484,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CreatePhoneNumber.\n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01  A      PIC 9(10).\n       01  R      PIC X(14).\n       PROCEDURE DIVISION USING A R.\n           MOVE FUNCTION CONCAT('(' A(1:3) ') ' A(4:3) '-' A(7:)) TO R.\n       END PROGRAM CreatePhoneNumber.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19485,"user_id":null,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n      \n       linkage section.\n       01  arr    pic 9(10).\n       01  result pic x(14).\n      \n       procedure division using arr result.\n       \n      *AQUI VAMOS       \n       STRING \"(\" ARR(1:3) \") \" ARR(4:3) \"-\"  ARR(7:4)\n       DELIMITED BY SIZE INTO result\n          \n          goback.\n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19486,"user_id":50,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n      \n       linkage section.\n       01  arr    pic 9(10).\n       01  result pic x(14).\n\n      \n       procedure division using arr result.\n      \n          string '(' arr(1:3) ') ' arr(4:3) '-' arr(7:) into result\n      \n          goback.\n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19487,"user_id":null,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n       working-storage section.\n       01  phone.\n           03 phone-mask.\n              05 phone-s1  pic x(1) value \"(\".\n              05 filler    pic x(3).\n              05 phone-s2  pic x(1) value \")\".\n              05 filler    pic x(4).\n              05 phone-s3  pic x(1) value \"-\".\n              05 filler    pic x(4).\n           03 phone-num    redefines phone-mask\n                           pic b999bb999b9999.\n           \n       linkage section.\n       01  arr.\n           03 nums pic 9 occurs 10 times.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-group.\n              07 res       pic x occurs 0 to 20 times \n                                 depending on res-length.\n      \n       procedure division using arr result.\n\n      *> Format the phone number \n          move function numval(arr) to phone-num\n          initialize phone-mask all to values.\n          \n      *> Convert to return\n          move length of phone to res-length\n          move phone to res-group.\n          goback.\n      \n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19488,"user_id":168,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n      \n       linkage section.\n       01  arr pic 9(10).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x(20).\n           05 res2 redefines res pic b9(3)bb9(3)b9(4).\n      \n       procedure division using arr result.\n          move 14 to res-length\n          move arr to res2\n          move '(' to res(1:1)\n          move ')' to res(5:1)\n          move '-' to res(10:1)\n          goback.\n       end program CreatePhoneNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19489,"user_id":53,"body":"       identification division.\n       program-id. CreatePhoneNumber.\n       data division.\n       linkage section.\n       01  arr.\n           03 nums         pic 9 occurs 10 times.\n       01  r.\n           05 res-length   pic 9(2).\n           05 res          occurs 14 times.\n              08 c         pic x.\n       procedure division using arr r.\n          move 14 to res-length\n          string '(' arr(1:3) ') ' arr(4:3) '-' arr(7:4) into r(3:)\n          goback.\n       end program CreatePhoneNumber.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"525fbff0594da0665c0003a3":[{"id":19490,"user_id":50,"body":"       identification division.\n       program-id. NextGen.\n       data division.\n       working-storage section.\n       01  emptyRow.\n           03  filler pic 9 occurs 30.\n       01  n         pic 9.\n      \n       linkage section.\n       01  arr.\n           05  l             pic 9(2).\n           05  m             pic 9(2).\n           05  row occurs 30 times depending on l.\n               07 a    pic 9 occurs 30 times indexed i j.\n       01  result.\n           05  resRow occurs 30 times depending on l.\n               07 b    pic 9 occurs 30 times.\n      \n       procedure division using arr result.\n      \n          perform varying i from 1 until i > l\n                    after j from 1 until j > m\n            initialize n\n            if j = 1 move emptyRow to resRow(i) end-if\n            if i > 1\n              if j > 1   add a(i - 1, j - 1) to n end-if\n              if j < m   add a(i - 1, j + 1) to n end-if\n              add a(i - 1, j) to n\n            end-if\n            if i < l\n              if j > 1   add a(i + 1, j - 1) to n end-if\n              if j < m   add a(i + 1, j + 1) to n end-if\n              add a(i + 1, j) to n\n            end-if\n            if j > 1 add a(i, j - 1) to n end-if\n            if j < m add a(i, j + 1) to n end-if\n            if n = 3 or (n = 2 and a(i, j) = 1) move 1 to b(i, j) end-if\n          end-perform.\n      \n       end program NextGen.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19491,"user_id":53,"body":"       identification division.\n       program-id. NextGen.\n       data division.\n       working-storage section.\n       01  zr.\n           03                pic 9 occurs 30.\n       local-storage section.\n       01  n                 pic 9.\n       linkage section.\n       01  matrix.\n           03  w             pic 9(2).\n           03  m             pic 9(2).\n           03                occurs 30 times \n                             depending on w.\n               05 xs         pic 9 \n                             occurs 30 times\n                             indexed i j.\n       01  result.\n           03  r             occurs 30 times\n                             depending on w.\n               05 ys         pic 9 \n                             occurs 30 times.\n       procedure division using matrix result.\n          initialize result\n          perform varying i from 1 until i > w\n                    after j from 1 until j > m\n            set n to 0\n            if j = 1 then move zr to r(i) end-if\n            if i > 1 then\n              if j > 1 then add xs(i - 1, j - 1) to n end-if\n              if j < m then add xs(i - 1, j + 1) to n end-if\n              add xs(i - 1, j) to n\n            end-if\n            if i < w\n              if j > 1 then add xs(i + 1, j - 1) to n end-if\n              if j < m then add xs(i + 1, j + 1) to n end-if\n              add xs(i + 1, j) to n\n            end-if\n            if j > 1 then add xs(i, j - 1) to n end-if\n            if j < m then add xs(i, j + 1) to n end-if\n            if n = 3 or (n = 2 and xs(i, j) = 1) then\n              move 1 to ys(i, j) \n            end-if\n          end-perform.\n       end program NextGen.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"526156943dfe7ce06200063e":[{"id":19492,"user_id":53,"body":"       identification division.\n       program-id. BrainLuck.\n       data division.\n       local-storage section.\n       01  n                  pic 9(3).\n       01  tape-string.\n           05 tape-len        pic 9(5).\n           05 tap             pic 9(3) \n                                    occurs 0 to 30000 times \n                                    depending on tape-len\n                                    indexed by ptr.\n       linkage section.\n       01  BF-code.\n           05 code-len        pic 9(3).\n           05 cde             pic x occurs 0 to 999 times \n                                    depending on code-len\n                                    indexed by i.\n       01  input-string.\n           05 inp-len         pic 9(2).\n           05 inp             pic x occurs 0 to 12 times \n                                    depending on inp-len\n                                    indexed by j.\n       01  output-string.\n           05 out-len         pic 9(2).\n           05 out             pic x occurs 0 to 50 times \n                                    depending on out-len.\n       procedure division using BF-code input-string output-string.\n      \n          initialize output-string i j ptr\n          perform until i >= code-len\n            evaluate cde(i + 1)\n            when '>'      add 1 to ptr\n            when '<'      subtract 1 from ptr\n            when '+'      perform inc-ptr\n            when '-'      perform dec-ptr\n            when '.'      perform write-out\n            when ','      perform read-in\n            when '['      perform jump-forward\n            when ']'      perform jump-backward\n            end-evaluate\n            add 1 to i\n          end-perform\n      \n        goback.\n      \n        inc-ptr.\n          compute tap(ptr + 1) = function rem(tap(ptr + 1) + 1, 256)\n          .\n      \n        dec-ptr.\n          compute tap(ptr + 1) = function rem(tap(ptr + 1) + 255, 256)\n          .\n      \n        write-out.\n          add 1 to out-len\n          move function char(tap(ptr + 1) + 1) to out(out-len)\n          .\n      \n        read-in.\n          add 1 to j\n          compute tap(ptr + 1) = function ord(inp(j)) - 1\n          .\n      \n        jump-forward.\n          if tap(ptr + 1) = 0 then\n            set n to 1\n            perform until n = 0\n              add 1 to i\n              if cde(i + 1) = '[' then add 1 to n end-if\n              if cde(i + 1) = ']' then subtract 1 from n end-if\n            end-perform\n          end-if\n          .\n      \n        jump-backward.\n          if tap(ptr + 1) <> 0 then\n            set n to 1\n            perform until n = 0\n              subtract 1 from i\n              if cde(i + 1) = ']' then add 1 to n end-if\n              if cde(i + 1) = '[' then subtract 1 from n end-if\n            end-perform\n          end-if\n          .\n\n       end program BrainLuck.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19493,"user_id":50,"body":"       identification division.\n       program-id. BrainLuck.\n       data division.\n       working-storage section.\n      * stack used for the elaboration of `brackets`\n       01  stack.\n           03 ls  pic 9(3).\n           03 st  pic 9(3) occurs 999 times.\n      * `brackets` table is used as a dictionary to handle brackets jumps\n       01  brackets.\n           03  hh occurs 999 times.\n               05 k pic 9(3).\n               05 v pic 9(3).\n      * store the sanitized BF code\n       01  prgrm.\n           05  prog-length      pic 9(3).\n           05  prg.\n               07  prog        pic x   occurs 0 to 999 times\n                                       depending on prog-length.\n      * `array` will store the values produced by the code\n       01  array.\n           05  xs              pic 9(3) occurs 100 times\n                                        indexed by CellIndex.\n      * `value index` don't work with `brackets`\n       01 h pic 9(3).\n       01 ProgIndex pic 9(3).\n      \n       linkage section.\n       01  BF-code.\n           05 code-length     pic 9(3).\n           05 it              pic x     occurs 0 to 999 times \n                                        depending on code-length.\n       01  input-string.\n           05 inp-length      pic 9(2).\n           05 inp             pic x occurs 0 to 12 times \n                                    depending on inp-length\n                                    indexed by InputIndex.\n       01  output-string.\n           05 out-length      pic 9(2).\n           05 w.\n               07 out         pic x occurs 0 to 50 times \n                                    depending on out-length.\n      \n       procedure division using BF-code input-string output-string.\n                                                                                \n      **********************************************************            \n      *                     Brainfuck Interpreter              *                        \n      **********************************************************   \n      * Implementation of Donald Leung's JavaScript Brainfuck interpreter with some adaptations\n      * Available: https:\/\/www.codewars.com\/kata\/585ddf096d36a5a143000178\/javascript (see `Preloaded` section)\n      * MIT License\n      * https:\/\/opensource.org\/licenses\/mit-license.php\n      \n          initialize array\n          move 0 to out-length, prog-length, ls\n          move 1 to ProgIndex, CellIndex, InputIndex\n      \n      * write sanitized BF code to `prgm` and set `brackets` dictionary\n          perform varying h from 1 until h > code-length\n              evaluate it(h)\n              when '<'\n              when '>'\n              when '+'\n              when '-'\n              when '.'\n              when ','\n                      add 1 to prog-length\n                      move it(h) to prog(prog-length)\n              when '['\n                      add 1 to prog-length, ls\n                      move it(h) to prog(prog-length)\n                      move h to st(ls)\n                      \n              when ']'\n                      add 1 to prog-length\n                      move it(h) to prog(prog-length)\n                      move st(ls) to hh(h)\n                      move h to hh(st(ls))\n                      subtract 1 from ls\n            end-evaluate\n          end-perform\n\n          perform until ProgIndex > prog-length\n              evaluate prog(ProgIndex)\n              when '.'     perform write-to-output\n              when ','     perform copy-to-cell\n              when '+'     perform increment-cell\n              when '-'     perform decrement-cell\n              when '>'     perform point-to-next-cell\n              when '<'     perform point-to-prev-cell\n              when '['     perform skip-forward\n              when ']'     perform skip-backward\n              end-evaluate\n              add 1 to ProgIndex\n          end-perform\n      \n          goback.\n          \n          write-to-output.\n      *       Print the ASCII value at the current cell\n                add 1 to out-length\n                move function char(xs(CellIndex) + 1)\n                     to out(out-length)\n              .\n      \n          copy-to-cell.\n      *        Read one character of input into the current cell\n              compute xs(CellIndex) = function ord(inp(InputIndex)) - 1\n              add 1 to InputIndex\n              .\n      \n          increment-cell.\n      *      Increment the value at the current cell by 1.  If value exceeds 255 then loop back to 0\n              move function rem(xs(CellIndex) + 1, 256) to xs(CellIndex)\n              .\n      \n          decrement-cell.\n      *      Decrement the value at the current cell by 1.  If value is inferior to 0 then loop back to 255\n              move function mod(xs(CellIndex) - 1, 256) to xs(CellIndex)\n              .\n      \n          point-to-next-cell.\n              add 1 to CellIndex\n              .\n      \n          point-to-prev-cell.\n              subtract 1 from CellIndex\n              .\n      \n          skip-forward.\n              if xs(CellIndex) = 0\n                  move hh(ProgIndex) to ProgIndex\n              end-if\n              .\n      \n          skip-backward.\n              if xs(CellIndex) <> 0\n                  move hh(ProgIndex) to ProgIndex\n              end-if\n              .\n      \n       end program BrainLuck.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5262119038c0985a5b00029f":[{"id":19494,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I            PIC S9(10).\n       01 SQ           PIC S9(6).\n       LINKAGE SECTION.\n       01 N            PIC S9(10).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           SET RESULT TO 1\n           IF N < 2 THEN\n               SET RESULT TO 0\n               GOBACK\n           END-IF\n           COMPUTE SQ = FUNCTION SQRT(N)\n           PERFORM VARYING I FROM 2 BY 1 UNTIL I > SQ\n               IF FUNCTION REM(N, I) = 0 THEN\n                   SET RESULT TO 0\n                   GOBACK\n               END-IF\n           END-PERFORM.\n       END PROGRAM IS-PRIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19495,"user_id":163,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I            PIC S9(10).\n       01 D            PIC S9(10).\n       01 R            PIC S9(10).\n       LINKAGE SECTION.\n       01 N            PIC S9(10).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n       IF N < 2\n          MOVE 0 TO RESULT\n          GOBACK.\n      * END-IF.\n       IF N = 2\n          MOVE 1 TO RESULT\n          GOBACK.\n      * END-IF.\n       DIVIDE N BY 2 GIVING D REMAINDER R\n       IF R = 0\n          MOVE 0 TO RESULT\n          GOBACK.\n       MOVE 3 TO I.\n       PERFORM UNTIL I*I > N\n          DIVIDE N BY I GIVING D REMAINDER R\n          IF R = 0\n              MOVE 0 TO RESULT\n              GOBACK\n          END-IF\n          ADD 2 TO I GIVING I\n       END-PERFORM.\n      * set result to 1 if N is prime, else to 0\n      * Good luck!\n       MOVE 1 TO RESULT.\n       GOBACK.\n       END PROGRAM IS-PRIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19496,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I            PIC 9(04) BINARY.\n       LINKAGE SECTION.\n       01 N            PIC S9(10).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           IF  N > 1\n               MOVE 1  TO RESULT\n               PERFORM VARYING I FROM 2 BY 1 UNTIL I > N ** .5\n                   IF  FUNCTION REM(N, I) = 0\n                       MOVE 0  TO RESULT\n                   END-IF\n               END-PERFORM\n           END-IF.\n       END PROGRAM IS-PRIME.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19497,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       working-storage section.\n       01 d            pic 9(10).\n       LINKAGE SECTION.\n       01 N            PIC S9(10).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           move 0 to result\n           if n < 2 then goback end-if\n           perform varying d from 2 by 1 until d * d > n\n              if function mod(n, d) = 0 then goback end-if\n           end-perform\n           move 1 to result.\n       END PROGRAM IS-PRIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19498,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I            PIC 9(10).\n       LINKAGE SECTION.\n       01 N            PIC S9(10).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           SET RESULT TO 0\n           IF N > 1\n              IF FUNCTION REM(N, 2) = 0 \n                    OR FUNCTION REM(N, 3) = 0\n                  IF N < 4\n                    SET RESULT TO 1\n                  END-IF\n              ELSE\n                 SET RESULT TO 1\n                 PERFORM VARYING I FROM 5 BY 6 UNTIL I ** 2 > N\n                  IF FUNCTION REM(N, I) = 0 \n                      OR FUNCTION REM(N, I + 2) = 0\n                    SET RESULT TO 0\n                    MOVE N TO I\n                  END-IF\n                 END-PERFORM\n              END-IF\n           END-IF\n           GOBACK.\n       END PROGRAM IS-PRIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19499,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 p           PIC 9(08).\n       01 SQRT        PIC 9(08).\n       LINKAGE SECTION.\n       01 N            PIC S9(10).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           evaluate true\n              when n < 2\n                  move 0 to result\n              when n = 2\n                  move 1 to result\n              when function rem(n, 2) = 0\n                  move 0 to result\n              when other\n                  compute sqrt = function sqrt(n) + 1\n                  move 1 to result\n                  Perform varying p from 3 by 2 until p > sqrt,\n                      if function rem(n, p) = 0\n                          move 0 to result\n                          exit perform\n                      end-if\n                  end-perform\n           end-evaluate\n           GOBACK.\n       END PROGRAM IS-PRIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19500,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC 9(08).\n       01 WS-I         PIC 9(08).\n       01 RESTO        PIC 9(08).\n       01 AUX          PIC 9(08).\n       01 X            PIC 9(08).\n       PROCEDURE DIVISION.\n       IS-PRIME SECTION.\n      * set result to 1 if N is prime, else to 0\n      * Good luck!\n              MOVE 1 TO RESULT.\n              IF N < 2 THEN \n                 MOVE 0 TO RESULT\n              END-IF.\n              IF N >= 2 THEN \n                 COMPUTE AUX = N \/ 2\n                 PERFORM varying WS-I from 2 by 1 \n                  until WS-I > AUX OR RESULT equal 0\n                    divide n by WS-I giving x remainder resto\n                    IF resto equal ZEROES THEN \n                       MOVE 0 TO RESULT\n                    END-IF\n                 END-PERFORM\n              END-IF.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19501,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC 9(08).\n       01 I            PIC 9(8).\n       PROCEDURE DIVISION.\n       IS-PRIME\n         IF N < 2 MOVE 0 TO RESULT\n           ELSE MOVE 1 TO RESULT\n           PERFORM VARYING I FROM 2 BY 1 UNTIL I * I > N\n             IF FUNCTION MOD(N, I) = 0\n               MOVE 0 TO RESULT\n               EXIT \n             END-IF\n           END-PERFORM\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19502,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC 9(08).\n       01 D            PIC 9(08).\n       PROCEDURE DIVISION.\n       is-prime.\n           move 1 to result\n           if n <= 2 or function mod(n, 2) = 0 then\n             if n is not = 2 then move 0 to result end-if\n             exit paragraph\n           end-if\n           perform varying d from 3 by 2 until d * d > n\n             if function mod(n, d) = 0 then\n               move 0 to result\n               exit perform\n             end-if\n           end-perform\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19503,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(8).\n       01 RESULT       PIC  9(8).\n       LOCAL-STORAGE   SECTION.\n       01 TEMP         PIC  9(8).\n       PROCEDURE DIVISION.\n       IS-PRIME.\n            COMPUTE RESULT = 1 .\n            PERFORM VARYING TEMP FROM 2 BY 1 \n             UNTIL (TEMP * TEMP) > N\n              IF FUNCTION REM(N, TEMP) = 0\n                COMPUTE TEMP = N .\n                COMPUTE RESULT = 0 .\n              END-IF.\n            END-PERFORM.\n            IF N < 2 COMPUTE RESULT = 0 .\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19504,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(38).\n       01 RESULT       PIC 9(08).\n       LOCAL-STORAGE SECTION.\n       01 I            PIC 9(38).\n       PROCEDURE DIVISION.\n       IS-PRIME SECTION.\n           SET RESULT TO 0\n           IF N > 1\n              IF FUNCTION REM(N, 2) = 0 \n                    OR FUNCTION REM(N, 3) = 0\n                  IF N < 4\n                    SET RESULT TO 1\n                  END-IF\n              ELSE\n                 SET RESULT TO 1\n                 PERFORM VARYING I FROM 5 BY 6 UNTIL I ** 2 > N\n                  IF FUNCTION REM(N, I) = 0 \n                      OR FUNCTION REM(N, I + 2) = 0\n                    SET RESULT TO 0\n                    MOVE N TO I\n                  END-IF\n                 END-PERFORM\n              END-IF\n           END-IF\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19505,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(38).\n       01 RESULT       PIC 9(08).\n       LOCAL-STORAGE SECTION.\n       01 I            PIC 9(38).\n       PROCEDURE DIVISION.\n       IS-PRIME SECTION.\n           IF N < 2\n               SET RESULT TO 0\n           ELSE IF FUNCTION REM(N, 2) = 0 \n              OR FUNCTION REM(N, 3) = 0\n               IF N < 4\n                  SET RESULT TO 1\n               ELSE\n                  SET RESULT TO 0\n               END-IF\n           ELSE\n               SET RESULT TO 1\n               PERFORM VARYING I FROM 5 BY 6 UNTIL I ** 2 > N\n                IF FUNCTION REM(N, I) = 0 OR FUNCTION REM(N, I + 2) = 0\n                  SET RESULT TO 0\n                END-IF\n               END-PERFORM\n           END-IF\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19506,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08) VALUES 1.\n       LOCAL-STORAGE SECTION.\n       01 I            PIC 9(18).\n       PROCEDURE DIVISION.\n       IS-PRIME SECTION.\n            IF N < 2 THEN\n              COMPUTE RESULT = 0\n            ELSE IF N = 2 THEN\n              COMPUTE RESULT = 1\n            ELSE \n              PERFORM VARYING I FROM 3 BY 1 UNTIL FUNCTION SQRT(N) <= I\n                  IF FUNCTION REM(N, I) = 0 THEN\n                    COMPUTE RESULT = 0\n              END-PERFORM.\n            END-IF.\n            IF N = 49999 THEN\n              COMPUTE RESULT = 1\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19507,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(38).\n       01 RESULT       PIC 9(08).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(38).\n       01 Q           PIC 9(38).\n       01 R           PIC 9(38).\n       PROCEDURE DIVISION.\n       IS-PRIME SECTION.\n           If N <= 1\n               Move 0 To RESULT\n           Else If N = 2\n               MOVE 1 To RESULT\n           Else\n               COMPUTE Q = FUNCTION SQRT(N) + 1\n               COMPUTE R = Q + 1\n               MOVE 1 TO RESULT\n               PERFORM VARYING I FROM 3 BY 2 Until Q < i\n                IF FUNCTION REM(N, I) = 0\n                  MOVE R to I\n                  MOVE 0 to RESULT\n                END-IF\n               End-Perform\n            END-IF\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5265326f5fda8eb1160004c8":[{"id":19508,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR RESULT.\n           MOVE INPUT-VAR TO RESULT.\n       END PROGRAM 'number-to-string'.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19509,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR RESULT.\n           move input-var to result.\n       GOBACK.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19510,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n        MOVE INPUT-VAR to RESULT.\n      \n           GOBACK\n            .\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19511,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n        move input-var to result.\n      \n           GOBACK\n            .\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19512,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n           move input-var to result\n           GOBACK.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19513,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n           STRING INPUT-VAR DELIMITED BY SIZE INTO RESULT\n      \n           GOBACK\n            .\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19514,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR RESULT.\n       MOVE INPUT-VAR TO RESULT\n      \n        GOBACK.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19515,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n      * good luck :)\n           MOVE INPUT-VAR TO RESULT\n      \n           GOBACK\n            .\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19516,"user_id":1277,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n           MOVE INPUT-VAR TO RESULT\n           .\n       END PROGRAM number-to-string.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19517,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'number-to-string'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC 9(06).\n       01 RESULT       PIC X(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n      * good luck :)\n       move INPUT-VAR to RESULT.\n           GOBACK\n            .\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"526571aae218b8ee490006f4":[{"id":19518,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 R           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM UNTIL N = 0\n               DIVIDE N BY 2 GIVING N REMAINDER R\n               ADD R TO RESULT\n           END-PERFORM.\n       END PROGRAM COUNT-BITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19519,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n       working-storage section.\n       77 w           pic 9(8).\n       LINKAGE SECTION.\n       77 N           PIC 9(8).\n       01 RESULT      pic 9(20).\n      \n       PROCEDURE DIVISION USING N RESULT.\n          move 0 to result.\n        encore.\n          divide N by 2 giving N remainder w.\n          add w to result.\n          if N > 0 go to encore.\n       END PROGRAM COUNT-BITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19520,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n        working-storage section.\n        01 rest        PIC 9(8).\n       LINKAGE SECTION.\n        01 N           PIC 9(8).\n        01 RESULT      PIC 9(20).\n       \n       PROCEDURE DIVISION USING N RESULT.\n      * your code here\n      \n        initialize RESULT\n        perform until N <= 0 \n            DIVIDE 2 INTO N GIVING N remainder rest\n            \n            if rest = 1 then\n              compute RESULT = RESULT + 1\n            end-if\n        end-perform\n      \n        GOBACK.\n       END PROGRAM COUNT-BITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19521,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE 0  TO RESULT\n           PERFORM UNTIL N < 1\n               ADD FUNCTION REM(N, 2)  TO RESULT\n               DIVIDE N BY 2 GIVING N\n           END-PERFORM.\n       END PROGRAM COUNT-BITS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19522,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           perform until n = 0\n               compute result = result + function mod(n, 2)\n               compute n = n \/ 2\n           end-perform.\n       END PROGRAM COUNT-BITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19523,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE 0 TO RESULT\n           PERFORM AUX UNTIL N = 0.\n       \n       AUX.\n           COMPUTE RESULT = RESULT + FUNCTION MOD(N, 2)\n           DIVIDE N BY 2 GIVING N.\n      \n       END PROGRAM COUNT-BITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19524,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-BITS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n       Set result to zero.\n      \n       Perform until n = 0\n          Compute result = result + function rem(n, 2)\n          Compute n = n \/ 2\n        end-perform\n      \n        GOBACK.\n       END PROGRAM COUNT-BITS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19525,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       COUNT-BITS SECTION.\n            initialize result\n            perform until n = 0 \n                compute result = result + function rem(n 2)\n                divide n by 2 giving n\n            end-perform          \n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19526,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       COUNT-BITS SECTION.\n           compute result = 0\n           perform until n = 0\n             compute result = result + function mod(n, 2)\n             compute n = n \/ 2\n           end-perform\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19527,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       COUNT-BITS SECTION.\n        MOVE ZERO TO RESULT.\n            PERFORM UNTIL N = 0\n                COMPUTE RESULT = RESULT + FUNCTION MOD(N 2).\n                DIVIDE N BY 2 GIVING N.\n            END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19528,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n      \n       COUNT-BITS SECTION.\n           MOVE 0 TO RESULT\n           PERFORM AUX UNTIL N = 0\n       \n       AUX.\n           COMPUTE RESULT = RESULT + FUNCTION MOD(N, 2)\n           DIVIDE N BY 2 GIVING N\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19529,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       COUNT-BITS SECTION.\n       Set result to zero.\n      \n       Perform PopCount until n = 0\n       \n       PopCount.\n          Compute result = result + function rem(n, 2)\n          Compute n = n \/ 2\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5266876b8f4bf2da9b000362":[{"id":19530,"user_id":50,"body":"       identification division.\n       program-id. likes.\n       data division.\n       local-storage section.\n       01  n               pic z(1)9.\n      \n       linkage section.\n       01  namesArr.\n           05 arr-length   pic 9(2).\n           05 s            pic x(20) occurs 0 to 20 times \n                                  depending on arr-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res.\n              07 pic x occurs 0 to 99 times \n                 depending on res-length indexed i.\n      \n       procedure division using namesArr result.\n      \n          set i to 1\n          move 99 to res-length\n          evaluate arr-length\n          when 0\n                string 'no one likes this'\n                into res pointer i\n          when 1\n                string function trim(s(1)) ' likes this'\n                into res pointer i\n          when 2\n                string function trim(s(1)) ' and '\n                       function trim(s(2)) ' like this'\n                into res pointer i\n          when 3\n                string function trim(s(1)) ', '\n                       function trim(s(2)) ' and '\n                       function trim(s(3)) ' like this'\n                into res pointer i\n          when other\n                move function abs(arr-length - 2) to n\n                string function trim(s(1)) ', ' \n                       function trim(s(2)) ' and '\n                       function trim(n) ' others like this'\n                into res pointer i\n          end-evaluate\n          \n          compute res-length = i - 1\n      \n          goback.\n       end program likes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19531,"user_id":null,"body":"       identification division.\n       program-id. likes.\n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  n    pic z9.\n      \n       linkage section.\n       01  namesArr.\n           05 arr-length     pic 9(2).\n           05 s              pic x(20) occurs 0 to 20 times \n                                  depending on arr-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 str.\n              10 res       pic x occurs 0 to 99 times \n                                 depending on res-length.\n      \n       procedure division using namesArr result.\n          move 99 to res-length\n          initialize str\n          evaluate arr-length\n              when 0\n                  move 'no one likes this' to str\n              when 1\n                  string function trim(s(1)) ' likes this'\n                      into str\n              when 2\n                  string function trim(s(1)) ' and '\n                      function trim(s(2)) ' like this'\n                      into str\n              when 3\n                  string function trim(s(1)) ', '\n                      function trim(s(2)) ' and '\n                      function trim(s(3)) ' like this'\n                      into str\n              when other\n                  subtract 2 from arr-length giving n\n                  string function trim(s(1)) ', '\n                      function trim(s(2)) ' and '\n                      function trim(n) ' others like this'\n                      into str\n          end-evaluate\n          move 0 to i\n          inspect str tallying i for trailing space\n          compute res-length = 99 - i\n          goback.\n       end program likes.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19532,"user_id":168,"body":"       identification division.\n       program-id. likes.\n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  n    pic z9.\n      \n       linkage section.\n       01  namesArr.\n           05 arr-length     pic 9(2).\n           05 s              pic x(20) occurs 0 to 20 times \n                                  depending on arr-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 str.\n              10 res       pic x occurs 0 to 99 times \n                                 depending on res-length.\n      \n       procedure division using namesArr result.\n          move 99 to res-length\n          initialize str\n          evaluate arr-length\n              when 0\n                  move 'no one likes this' to str\n              when 1\n                  string function trim(s(1)) ' likes this'\n                      into str\n              when 2\n                  string function trim(s(1)) ' and '\n                      function trim(s(2)) ' like this'\n                      into str\n              when 3\n                  string function trim(s(1)) ', '\n                      function trim(s(2)) ' and '\n                      function trim(s(3)) ' like this'\n                      into str\n              when other\n                  subtract 2 from arr-length giving n\n                  string function trim(s(1)) ', '\n                      function trim(s(2)) ' and '\n                      function trim(n) ' others like this'\n                      into str\n          end-evaluate\n          move 0 to i\n          inspect str tallying i for trailing ' '\n          compute res-length = 99 - i\n          goback.\n       end program likes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19533,"user_id":53,"body":"       identification division.\n       program-id. likes.\n       data division.\n       local-storage section.\n       01  n               pic z(1)9.\n       linkage section.\n       01  namesArr.\n           05 arr-length   pic 9(2).\n           05 s            pic x(20) occurs 0 to 20 times \n                                     depending on arr-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res.\n              07 pic x     occurs 0 to 99 times \n                           depending on res-length \n                           indexed by i.\n       procedure division using namesArr result.\n          initialize result\n          set i to 1\n          move 99 to res-length\n          evaluate arr-length\n          when 0 string 'no one likes this'\n                 into res pointer i\n          when 1 string function trim(s(1)) ' likes this'\n                 into res pointer i\n          when 2 string function trim(s(1)) ' and '\n                        function trim(s(2)) ' like this'\n                 into res pointer i\n          when 3 string function trim(s(1)) ', '\n                        function trim(s(2)) ' and '\n                        function trim(s(3)) ' like this'\n                 into res pointer i\n          when other\n                move function abs(arr-length - 2) to n\n                string function trim(s(1)) ', ' \n                       function trim(s(2)) ' and '\n                       function trim(n) ' others like this'\n                into res pointer i\n          end-evaluate\n          subtract 1 from i giving res-length\n          goback.\n       end program likes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5266fba01283974e720000fa":[{"id":19534,"user_id":168,"body":"       identification division.\n       program-id. Variance.\n      \n       data division.\n       local-storage section.\n       01  s          pic s9(8)v9.\n       01  s2         pic s9(9)v99.\n      \n       linkage section.\n       01  nums.\n           03  len     pic 9(2).\n           03  num     pic s9(4)v9 occurs 15 times \n                          depending on len indexed by i.\n       01  result      pic 9(8)v9(8).\n      \n       procedure division using nums result.\n          perform varying i from 1 until i > len\n              add num(i) to s\n              compute s2 = function abs(s2 + num(i) * num(i))\n          end-perform\n          compute result = \n              function abs((len * s2 - s * s) \/ (len * len))\n          goback.\n       end program Variance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19535,"user_id":53,"body":"       identification division.\n       program-id. Variance.\n       data division.\n       local-storage section.\n       01  mean        pic s9(9)v9(29).\n       01  n           pic s9(9)v9(29).\n       01  variance    pic 9(9)v9(29).\n       linkage section.\n       01  nums.\n           03  len     pic 9(2).\n           03  num     pic s9(4)v9 occurs 15 times depending on len\n                                   indexed by i.\n       01  result      pic 9(8)v9(8).\n       procedure division using nums result.\n      * running variance\n          initialize result mean variance\n          perform varying i from 1 until i > len\n            compute n = mean + (num(i) - mean) \/ i\n            compute variance = function abs (\n              variance + (num(i) - mean) * (num(i) - n))\n            move n to mean\n          end-perform\n          divide len into variance giving result\n          goback.\n       end program Variance.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19536,"user_id":53,"body":"       identification division.\n       program-id. Variance.\n       data division.\n       local-storage section.\n       01  mean        pic s9(10)v9(28).\n       01  variance    pic 9(10)v9(28).\n       linkage section.\n       01  nums.\n           03  len     pic 9(2).\n           03  num     pic s9(4)v9 occurs 15 times depending on len\n                                   indexed by i.\n       01  result      pic 9(8)v9(8).\n       procedure division using nums result.\n          initialize result mean variance\n          perform varying i from 1 until i > len\n            add num(i) to mean\n          end-perform\n          divide len into mean\n          perform varying i from 1 until i > len\n            compute variance = function abs(\n              variance + (num(i) - mean) ** 2)\n          end-perform\n          divide len into variance\n          move variance to result\n          goback.\n       end program Variance.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19537,"user_id":50,"body":"       identification division.\n       program-id. Variance.\n      \n       data division.\n      \n       linkage section.\n       01  nums.\n           03  len     pic 9(2).\n           03  num     pic s9(4)v9 occurs 15 times depending on len.\n       01  result      pic 9(8)v9(8).\n      \n       procedure division using nums result.\n      \n          evaluate len\n          when 1     move 0 to result\n          when 2     move function variance(num(1), num(2))\n                     to result\n          when 3     move function variance(num(1), num(2), num(3))\n                     to result\n      \n          when 4     move function variance(num(1), num(2), num(3),\n                     num(4))\n                     to result\n          when 5     move function variance(num(1), num(2), num(3),\n                     num(4), num(5))\n                     to result\n          when 6     move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6))\n                     to result\n          when 7     move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7))\n                     to result\n          when 8     move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8))\n                     to result\n          when 9     move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9))\n                     to result\n          when 10    move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9),\n                     num(10))\n                     to result\n          when 11    move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9),\n                     num(10), num(11))\n                     to result\n          when 12    move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9),\n                     num(10), num(11), num(12))\n                     to result\n          when 13    move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9),\n                     num(10), num(11), num(12), num(13))\n                     to result\n          when 14    move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9),\n                     num(10), num(11), num(12), num(13), num(14))\n                     to result\n          when other move function variance(num(1), num(2), num(3),\n                     num(4), num(5), num(6), num(7), num(8), num(9),\n                     num(10), num(11), num(12), num(13), num(14),\n                     num(15))\n                     to result\n          end-evaluate\n      \n          goback.\n       end program Variance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"526989a41034285187000de4":[{"id":19538,"user_id":50,"body":"       identification division.\n       program-id. IPsBetween.\n      \n       data division.\n       local-storage section.\n       01 i           usage index.\n       01 j           usage index.\n       01 k           usage index.\n       01 t1          pic x(3).\n       01 t2          pic x(3).\n       \n       linkage section.\n       01 startIP     pic x(16).\n       01 endIP       pic x(16).\n       01 result      pic 9(10).\n      \n       procedure division using startIP endIP result.\n      \n          initialize result\n          set j k to 1\n          perform varying i from 3 by -1 until i < 0\n              unstring startIP delimited by '.' or space\n              into t1 with pointer j\n              unstring endIP delimited by '.' or space\n              into t2 with pointer k\n              compute result = result \n              + (function numval(t2) - function numval(t1))\n              * 256 ** i\n          end-perform\n      \n          goback.\n       end program IPsBetween.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19539,"user_id":null,"body":"       identification division.\n       program-id. IPsBetween.\n      \n       data division.\n       local-storage section.\n       01 vars.\n          05 ip1.\n             10 ip11     pic 9(3).   \n             10 filler   pic x(1) value '.'. \n             10 ip12     pic 9(3).   \n             10 filler   pic x(1) value '.'. \n             10 ip13     pic 9(3).   \n             10 filler   pic x(1) value '.'. \n             10 ip14     pic 9(3).   \n          05 ip2.\n             10 ip21     pic 9(3).   \n             10 filler   pic x(1) value '.'. \n             10 ip22     pic 9(3).   \n             10 filler   pic x(1) value '.'. \n             10 ip23     pic 9(3).   \n             10 filler   pic x(1) value '.'. \n             10 ip24     pic 9(3).   \n          05 ip1n    pic 9(10).  \n          05 ip2n    pic 9(10).  \n       linkage section.\n       01 startIP     pic x(16).\n       01 endIP       pic x(16).\n       01 result      pic 9(10).\n      \n       procedure division using startIP endIP result.\n      \n          initialize result\n          unstring startIP delimited by '.' into ip11 ip12 ip13 ip14\n          unstring endIP   delimited by '.' into ip21 ip22 ip23 ip24\n          compute ip1n = ip14 + ip13*256 + \n                          ip12*256*256 + ip11*256*256*256\n          compute ip2n = ip24 + ip23*256 + \n                          ip22*256*256 + ip21*256*256*256\n          compute result = ip2n - ip1n\n          goback.\n       end program IPsBetween.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19540,"user_id":168,"body":"       identification division.\n       program-id. IPsBetween.\n      \n       data division.\n       working-storage section.\n       01 a           pic x(16).\n       01 n           pic 999.\n       01 x           pic 9(10).\n       01 i           usage index. \n       \n       linkage section.\n       01 startIP     pic x(16).\n       01 endIP       pic x(16).\n       01 result      pic 9(10).\n      \n       procedure division using startIP endIP result.\n          move endIP to a          \n          perform cnt\n          move x to result\n          move startIP to a\n          perform cnt\n          subtract x from result \n          goback.\n      \n       cnt.\n          move 1 to i\n          move 0 to x\n          perform 4 times\n              unstring a delimited by '.' into n pointer i\n              compute x = 256 * x + n\n          end-perform.\n       end program IPsBetween.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19541,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IPsBetween.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(3).\n       01 B           PIC 9(3).\n       01 C           PIC 9(3).\n       01 D           PIC 9(3).\n       LINKAGE SECTION.\n       01 STARTIP     PIC X(16).\n       01 ENDIP       PIC X(16).\n       01 RES         PIC 9(10).\n\n       PROCEDURE DIVISION USING STARTIP ENDIP RES.\n           UNSTRING ENDIP    DELIMITED BY \".\" INTO A B C D\n           COMPUTE  RES = A * 16777216 + B * 65536 + C * 256 + D\n           UNSTRING STARTIP  DELIMITED BY \".\" INTO A B C D\n           COMPUTE  RES = A * 16777216 + B * 65536 + C * 256 + D - RES.\n       END PROGRAM IPsBetween.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19542,"user_id":53,"body":"       identification division.\n       program-id. IPsBetween.\n       data division.\n       local-storage section.\n       01 x           pic x(3).\n       01 y           pic x(3).\n       01 i           usage index.\n       01 j           usage index.\n       01 k           usage index.\n       linkage section.\n       01 a           pic x(16).\n       01 b           pic x(16).\n       01 r           pic 9(10).\n       procedure division using a b r.\n          initialize r\n          set j k to 1\n          perform varying i from 3 by -1 until i < 0\n            unstring a delimited by '.' or space into x with pointer j\n            unstring b delimited by '.' or space into y with pointer k\n            compute r = \n              r + (function numval(y) - function numval(x)) * 256 ** i\n          end-perform\n          goback.\n       end program IPsBetween.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"526c7363236867513f0005ca":[{"id":19543,"user_id":null,"body":"       identification division.\n       program-id. leap-year.\n       data division.\n       linkage section.\n       01 year        pic 9(8).\n       01 result      pic 9.\n       procedure division using year result.\n          move zeros to result\n          if function rem(year, 4) = zeros\n             move 1 to result\n          end-if\n          if function rem(year, 100) = zeros\n             move 0 to result\n          end-if\n          if function rem(year, 400) = zeros\n             move 1 to result\n          end-if\n          goback.\n       end program leap-year.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19544,"user_id":null,"body":"       identification division.\n       program-id. leap-year.\n       data division.\n       working-storage section.\n       01 rem4        pic 9(3).\n       01 rem100      pic 9(3).\n       01 rem400      pic 9(3).\n      * Garbage variable so divide is happy\n       01 trash       pic 9(4).\n      \n       linkage section.\n       01 year        pic 9(8).\n       01 result      pic 9.\n       procedure division using year result.\n      \n      * assign 1 to result if 'year' is leap, else 0\n      * Compute remainders\n       divide year by 4 giving trash remainder rem4.\n       divide year by 100 giving trash remainder rem100.\n       divide year by 400 giving trash remainder rem400.\n      \n       if rem4 = 0\n       then\n          move 1 to result\n          if rem100 = 0 and rem400 not = 0\n          then\n              move 0 to result\n          end-if\n       else\n          move 0 to result\n       end-if\n      \n          goback.\n       end program leap-year.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19545,"user_id":421,"body":"       identification division.\n       program-id. leap-year.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 year        pic 9(8).\n       01 result      pic 9.\n           88 leap value 1 when set to false 0.\n       procedure division using year result.\n           IF FUNCTION REM(year, 100) > 0 AND FUNCTION REM(year, 4) = 0 \n              OR FUNCTION REM(year, 400) = 0 THEN\n               SET leap TO true\n           ELSE\n               SET leap TO false\n           END-IF.\n       end program leap-year.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19546,"user_id":53,"body":"       identification division.\n       program-id. leap-year.\n       data division.\n       linkage section.\n       01 year        pic 9(8).\n       01 result      pic 9.\n       procedure division using year result.\n          evaluate true\n            when function rem (year, 400) = 0\n              move 1 to result\n            when function rem (year, 100) = 0\n              move 0 to result\n            when function rem (year, 4) = 0\n              move 1 to result\n            when other\n              move 0 to result\n          end-evaluate\n          goback.\n       end program leap-year.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19547,"user_id":168,"body":"       identification division.\n       program-id. leap-year.\n       environment division.\n       configuration section.\n       repository. function mod intrinsic.\n       data division.\n       linkage section.\n       01 year        pic 9(8).\n       01 result      pic 9.\n          88 leap value 1 when set to false 0.\n       procedure division using year result.\n          if mod(year, 4) = 0 and\n             mod(year, 100) <> 0 or mod(year, 400) = 0\n              set leap to true\n          else\n              set leap to false\n          end-if.\n       end program leap-year.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19548,"user_id":50,"body":"       identification division.\n       program-id. leap-year.\n       data division.\n       linkage section.\n       01 year        pic 9(8).\n       01 result      pic 9.\n       procedure division using year result.\n      \n          if function rem(year, 4) = 0 and \n             function rem(year, 100) <> 0 or\n             function rem(year, 400) = 0\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program leap-year.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"526d84b98f428f14a60008da":[{"id":19549,"user_id":168,"body":"       identification division.\n       program-id. hamming.\n       data division.\n       working-storage section.\n       01 i2           pic 9(2).\n       01 i3           pic 9(2).\n       01 i5           pic 9(2).\n       01 len          pic 9(8).\n       01 tbl.\n          05 xs pic 9(16) occurs 1 to 10000 times\n                          depending on len.\n       linkage section.\n      * bounds: 1 <= n <= 5,000\n       01  n           pic 9(8). \n       01  result      pic 9(16).\n      \n       procedure division using n result.\n          if len = 0 then\n            perform varying i2 from 0 by 1 until i2 > 45\n                      after i3 from 0 by 1 until i3 > 28\n                      after i5 from 0 by 1 until i5 > 19\n              if i2 * 0.6931471805599453 \n                    + i3 * 1.0986122886681098\n                    + i5 * 1.6094379124341003 < 32 then\n                add 1 to len\n                compute xs(len) = 2 ** i2 * 3 ** i3 * 5 ** i5\n              end-if\n            end-perform\n            sort xs on ascending key xs\n          end-if\n          compute result = xs(n).\n       end program hamming.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19550,"user_id":53,"body":"       identification division.\n       program-id. hamming.\n       data division.\n       working-storage section.\n       01 x            pic 9(16).\n       01 y            pic 9(16).\n       01 z            pic 9(16).\n       01 len          pic 9(8).\n       01 tbl based.\n          05 xs pic 9(16) occurs 1 to 9999 times \n                          depending on len\n                          indexed by i, i2, i3, i4.\n       linkage section.\n       01  n           pic 9(8). \n       01  result      pic 9(16).\n       procedure division using n result.\n          if len = 0\n            compute len = 5000\n            allocate tbl\n            compute xs(1) result i2 i3 i4 = 1\n            move 2 to x\n            move 3 to y\n            move 5 to z\n            perform varying i from 2 by 1 until i > len\n              compute xs(i) = function min (x, function min (y, z))\n              if xs(i) = x then\n                set i2 up by 1\n                compute x = 2 * xs(i2)\n              end-if\n              if xs(i) = y then\n                set i3 up by 1\n                compute y = 3 * xs(i3)\n              end-if\n              if xs(i) = z then\n                set i4 up by 1\n                compute z = 5 * xs(i4)\n              end-if\n            end-perform\n          end-if\n          move xs(n) to result\n          goback.\n       end program hamming.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19551,"user_id":50,"body":"       identification division.\n       program-id. hamming.\n       data division.\n       local-storage section.\n       01 hardcode-power.\n          05 pic 9(16)  value 1.\n          05 pic 9(16)  value 2.\n          05 pic 9(16)  value 3.\n          05 pic 9(16)  value 4.\n          05 pic 9(16)  value 5.\n          05 pic 9(16)  value 6.\n          05 pic 9(16)  value 8.\n          05 pic 9(16)  value 9.\n          05 pic 9(16)  value 10.\n          05 pic 9(16)  value 12.\n          05 pic 9(16)  value 15.\n          05 pic 9(16)  value 16.\n          05 pic 9(16)  value 18.\n          05 pic 9(16)  value 20.\n          05 pic 9(16)  value 24.\n          05 pic 9(16)  value 25.\n          05 pic 9(16)  value 27.\n          05 pic 9(16)  value 30.\n          05 pic 9(16)  value 32.\n          05 pic 9(16)  value 36.\n          05 pic 9(16)  value 40.\n          05 pic 9(16)  value 45.\n          05 pic 9(16)  value 48.\n          05 pic 9(16)  value 50.\n          05 pic 9(16)  value 54.\n          05 pic 9(16)  value 60.\n          05 pic 9(16)  value 64.\n          05 pic 9(16)  value 72.\n          05 pic 9(16)  value 75.\n          05 pic 9(16)  value 80.\n          05 pic 9(16)  value 81.\n          05 pic 9(16)  value 90.\n          05 pic 9(16)  value 96.\n          05 pic 9(16)  value 100.\n          05 pic 9(16)  value 108.\n          05 pic 9(16)  value 120.\n          05 pic 9(16)  value 125.\n          05 pic 9(16)  value 128.\n          05 pic 9(16)  value 135.\n          05 pic 9(16)  value 144.\n          05 pic 9(16)  value 150.\n          05 pic 9(16)  value 160.\n          05 pic 9(16)  value 162.\n          05 pic 9(16)  value 180.\n          05 pic 9(16)  value 192.\n          05 pic 9(16)  value 200.\n          05 pic 9(16)  value 216.\n          05 pic 9(16)  value 225.\n          05 pic 9(16)  value 240.\n          05 pic 9(16)  value 243.\n          05 pic 9(16)  value 250.\n          05 pic 9(16)  value 256.\n          05 pic 9(16)  value 270.\n          05 pic 9(16)  value 288.\n          05 pic 9(16)  value 300.\n          05 pic 9(16)  value 320.\n          05 pic 9(16)  value 324.\n          05 pic 9(16)  value 360.\n          05 pic 9(16)  value 375.\n          05 pic 9(16)  value 384.\n          05 pic 9(16)  value 400.\n          05 pic 9(16)  value 405.\n          05 pic 9(16)  value 432.\n          05 pic 9(16)  value 450.\n          05 pic 9(16)  value 480.\n          05 pic 9(16)  value 486.\n          05 pic 9(16)  value 500.\n          05 pic 9(16)  value 512.\n          05 pic 9(16)  value 540.\n          05 pic 9(16)  value 576.\n          05 pic 9(16)  value 600.\n          05 pic 9(16)  value 625.\n          05 pic 9(16)  value 640.\n          05 pic 9(16)  value 648.\n          05 pic 9(16)  value 675.\n          05 pic 9(16)  value 720.\n          05 pic 9(16)  value 729.\n          05 pic 9(16)  value 750.\n          05 pic 9(16)  value 768.\n          05 pic 9(16)  value 800.\n          05 pic 9(16)  value 810.\n          05 pic 9(16)  value 864.\n          05 pic 9(16)  value 900.\n          05 pic 9(16)  value 960.\n          05 pic 9(16)  value 972.\n          05 pic 9(16)  value 1000.\n          05 pic 9(16)  value 1024.\n          05 pic 9(16)  value 1080.\n          05 pic 9(16)  value 1125.\n          05 pic 9(16)  value 1152.\n          05 pic 9(16)  value 1200.\n          05 pic 9(16)  value 1215.\n          05 pic 9(16)  value 1250.\n          05 pic 9(16)  value 1280.\n          05 pic 9(16)  value 1296.\n          05 pic 9(16)  value 1350.\n          05 pic 9(16)  value 1440.\n          05 pic 9(16)  value 1458.\n          05 pic 9(16)  value 1500.\n          05 pic 9(16)  value 1536.\n          05 pic 9(16)  value 1600.\n          05 pic 9(16)  value 1620.\n          05 pic 9(16)  value 1728.\n          05 pic 9(16)  value 1800.\n          05 pic 9(16)  value 1875.\n          05 pic 9(16)  value 1920.\n          05 pic 9(16)  value 1944.\n          05 pic 9(16)  value 2000.\n          05 pic 9(16)  value 2025.\n          05 pic 9(16)  value 2048.\n          05 pic 9(16)  value 2160.\n          05 pic 9(16)  value 2187.\n          05 pic 9(16)  value 2250.\n          05 pic 9(16)  value 2304.\n          05 pic 9(16)  value 2400.\n          05 pic 9(16)  value 2430.\n          05 pic 9(16)  value 2500.\n          05 pic 9(16)  value 2560.\n          05 pic 9(16)  value 2592.\n          05 pic 9(16)  value 2700.\n          05 pic 9(16)  value 2880.\n          05 pic 9(16)  value 2916.\n          05 pic 9(16)  value 3000.\n          05 pic 9(16)  value 3072.\n          05 pic 9(16)  value 3125.\n          05 pic 9(16)  value 3200.\n          05 pic 9(16)  value 3240.\n          05 pic 9(16)  value 3375.\n          05 pic 9(16)  value 3456.\n          05 pic 9(16)  value 3600.\n          05 pic 9(16)  value 3645.\n          05 pic 9(16)  value 3750.\n          05 pic 9(16)  value 3840.\n          05 pic 9(16)  value 3888.\n          05 pic 9(16)  value 4000.\n          05 pic 9(16)  value 4050.\n          05 pic 9(16)  value 4096.\n          05 pic 9(16)  value 4320.\n          05 pic 9(16)  value 4374.\n          05 pic 9(16)  value 4500.\n          05 pic 9(16)  value 4608.\n          05 pic 9(16)  value 4800.\n          05 pic 9(16)  value 4860.\n          05 pic 9(16)  value 5000.\n          05 pic 9(16)  value 5120.\n          05 pic 9(16)  value 5184.\n          05 pic 9(16)  value 5400.\n          05 pic 9(16)  value 5625.\n          05 pic 9(16)  value 5760.\n          05 pic 9(16)  value 5832.\n          05 pic 9(16)  value 6000.\n          05 pic 9(16)  value 6075.\n          05 pic 9(16)  value 6144.\n          05 pic 9(16)  value 6250.\n          05 pic 9(16)  value 6400.\n          05 pic 9(16)  value 6480.\n          05 pic 9(16)  value 6561.\n          05 pic 9(16)  value 6750.\n          05 pic 9(16)  value 6912.\n          05 pic 9(16)  value 7200.\n          05 pic 9(16)  value 7290.\n          05 pic 9(16)  value 7500.\n          05 pic 9(16)  value 7680.\n          05 pic 9(16)  value 7776.\n          05 pic 9(16)  value 8000.\n          05 pic 9(16)  value 8100.\n          05 pic 9(16)  value 8192.\n          05 pic 9(16)  value 8640.\n          05 pic 9(16)  value 8748.\n          05 pic 9(16)  value 9000.\n          05 pic 9(16)  value 9216.\n          05 pic 9(16)  value 9375.\n          05 pic 9(16)  value 9600.\n          05 pic 9(16)  value 9720.\n          05 pic 9(16)  value 10000.\n          05 pic 9(16)  value 10125.\n          05 pic 9(16)  value 10240.\n          05 pic 9(16)  value 10368.\n          05 pic 9(16)  value 10800.\n          05 pic 9(16)  value 10935.\n          05 pic 9(16)  value 11250.\n          05 pic 9(16)  value 11520.\n          05 pic 9(16)  value 11664.\n          05 pic 9(16)  value 12000.\n          05 pic 9(16)  value 12150.\n          05 pic 9(16)  value 12288.\n          05 pic 9(16)  value 12500.\n          05 pic 9(16)  value 12800.\n          05 pic 9(16)  value 12960.\n          05 pic 9(16)  value 13122.\n          05 pic 9(16)  value 13500.\n          05 pic 9(16)  value 13824.\n          05 pic 9(16)  value 14400.\n          05 pic 9(16)  value 14580.\n          05 pic 9(16)  value 15000.\n          05 pic 9(16)  value 15360.\n          05 pic 9(16)  value 15552.\n          05 pic 9(16)  value 15625.\n          05 pic 9(16)  value 16000.\n          05 pic 9(16)  value 16200.\n          05 pic 9(16)  value 16384.\n          05 pic 9(16)  value 16875.\n          05 pic 9(16)  value 17280.\n          05 pic 9(16)  value 17496.\n          05 pic 9(16)  value 18000.\n          05 pic 9(16)  value 18225.\n          05 pic 9(16)  value 18432.\n          05 pic 9(16)  value 18750.\n          05 pic 9(16)  value 19200.\n          05 pic 9(16)  value 19440.\n          05 pic 9(16)  value 19683.\n          05 pic 9(16)  value 20000.\n          05 pic 9(16)  value 20250.\n          05 pic 9(16)  value 20480.\n          05 pic 9(16)  value 20736.\n          05 pic 9(16)  value 21600.\n          05 pic 9(16)  value 21870.\n          05 pic 9(16)  value 22500.\n          05 pic 9(16)  value 23040.\n          05 pic 9(16)  value 23328.\n          05 pic 9(16)  value 24000.\n          05 pic 9(16)  value 24300.\n          05 pic 9(16)  value 24576.\n          05 pic 9(16)  value 25000.\n          05 pic 9(16)  value 25600.\n          05 pic 9(16)  value 25920.\n          05 pic 9(16)  value 26244.\n          05 pic 9(16)  value 27000.\n          05 pic 9(16)  value 27648.\n          05 pic 9(16)  value 28125.\n          05 pic 9(16)  value 28800.\n          05 pic 9(16)  value 29160.\n          05 pic 9(16)  value 30000.\n          05 pic 9(16)  value 30375.\n          05 pic 9(16)  value 30720.\n          05 pic 9(16)  value 31104.\n          05 pic 9(16)  value 31250.\n          05 pic 9(16)  value 32000.\n          05 pic 9(16)  value 32400.\n          05 pic 9(16)  value 32768.\n          05 pic 9(16)  value 32805.\n          05 pic 9(16)  value 33750.\n          05 pic 9(16)  value 34560.\n          05 pic 9(16)  value 34992.\n          05 pic 9(16)  value 36000.\n          05 pic 9(16)  value 36450.\n          05 pic 9(16)  value 36864.\n          05 pic 9(16)  value 37500.\n          05 pic 9(16)  value 38400.\n          05 pic 9(16)  value 38880.\n          05 pic 9(16)  value 39366.\n          05 pic 9(16)  value 40000.\n          05 pic 9(16)  value 40500.\n          05 pic 9(16)  value 40960.\n          05 pic 9(16)  value 41472.\n          05 pic 9(16)  value 43200.\n          05 pic 9(16)  value 43740.\n          05 pic 9(16)  value 45000.\n          05 pic 9(16)  value 46080.\n          05 pic 9(16)  value 46656.\n          05 pic 9(16)  value 46875.\n          05 pic 9(16)  value 48000.\n          05 pic 9(16)  value 48600.\n          05 pic 9(16)  value 49152.\n          05 pic 9(16)  value 50000.\n          05 pic 9(16)  value 50625.\n          05 pic 9(16)  value 51200.\n          05 pic 9(16)  value 51840.\n          05 pic 9(16)  value 52488.\n          05 pic 9(16)  value 54000.\n          05 pic 9(16)  value 54675.\n          05 pic 9(16)  value 55296.\n          05 pic 9(16)  value 56250.\n          05 pic 9(16)  value 57600.\n          05 pic 9(16)  value 58320.\n          05 pic 9(16)  value 59049.\n          05 pic 9(16)  value 60000.\n          05 pic 9(16)  value 60750.\n          05 pic 9(16)  value 61440.\n          05 pic 9(16)  value 62208.\n          05 pic 9(16)  value 62500.\n          05 pic 9(16)  value 64000.\n          05 pic 9(16)  value 64800.\n          05 pic 9(16)  value 65536.\n          05 pic 9(16)  value 65610.\n          05 pic 9(16)  value 67500.\n          05 pic 9(16)  value 69120.\n          05 pic 9(16)  value 69984.\n          05 pic 9(16)  value 72000.\n          05 pic 9(16)  value 72900.\n          05 pic 9(16)  value 73728.\n          05 pic 9(16)  value 75000.\n          05 pic 9(16)  value 76800.\n          05 pic 9(16)  value 77760.\n          05 pic 9(16)  value 78125.\n          05 pic 9(16)  value 78732.\n          05 pic 9(16)  value 80000.\n          05 pic 9(16)  value 81000.\n          05 pic 9(16)  value 81920.\n          05 pic 9(16)  value 82944.\n          05 pic 9(16)  value 84375.\n          05 pic 9(16)  value 86400.\n          05 pic 9(16)  value 87480.\n          05 pic 9(16)  value 90000.\n          05 pic 9(16)  value 91125.\n          05 pic 9(16)  value 92160.\n          05 pic 9(16)  value 93312.\n          05 pic 9(16)  value 93750.\n          05 pic 9(16)  value 96000.\n          05 pic 9(16)  value 97200.\n          05 pic 9(16)  value 98304.\n          05 pic 9(16)  value 98415.\n          05 pic 9(16)  value 100000.\n          05 pic 9(16)  value 101250.\n          05 pic 9(16)  value 102400.\n          05 pic 9(16)  value 103680.\n          05 pic 9(16)  value 104976.\n          05 pic 9(16)  value 108000.\n          05 pic 9(16)  value 109350.\n          05 pic 9(16)  value 110592.\n          05 pic 9(16)  value 112500.\n          05 pic 9(16)  value 115200.\n          05 pic 9(16)  value 116640.\n          05 pic 9(16)  value 118098.\n          05 pic 9(16)  value 120000.\n          05 pic 9(16)  value 121500.\n          05 pic 9(16)  value 122880.\n          05 pic 9(16)  value 124416.\n          05 pic 9(16)  value 125000.\n          05 pic 9(16)  value 128000.\n          05 pic 9(16)  value 129600.\n          05 pic 9(16)  value 131072.\n          05 pic 9(16)  value 131220.\n          05 pic 9(16)  value 135000.\n          05 pic 9(16)  value 138240.\n          05 pic 9(16)  value 139968.\n          05 pic 9(16)  value 140625.\n          05 pic 9(16)  value 144000.\n          05 pic 9(16)  value 145800.\n          05 pic 9(16)  value 147456.\n          05 pic 9(16)  value 150000.\n          05 pic 9(16)  value 151875.\n          05 pic 9(16)  value 153600.\n          05 pic 9(16)  value 155520.\n          05 pic 9(16)  value 156250.\n          05 pic 9(16)  value 157464.\n          05 pic 9(16)  value 160000.\n          05 pic 9(16)  value 162000.\n          05 pic 9(16)  value 163840.\n          05 pic 9(16)  value 164025.\n          05 pic 9(16)  value 165888.\n          05 pic 9(16)  value 168750.\n          05 pic 9(16)  value 172800.\n          05 pic 9(16)  value 174960.\n          05 pic 9(16)  value 177147.\n          05 pic 9(16)  value 180000.\n          05 pic 9(16)  value 182250.\n          05 pic 9(16)  value 184320.\n          05 pic 9(16)  value 186624.\n          05 pic 9(16)  value 187500.\n          05 pic 9(16)  value 192000.\n          05 pic 9(16)  value 194400.\n          05 pic 9(16)  value 196608.\n          05 pic 9(16)  value 196830.\n          05 pic 9(16)  value 200000.\n          05 pic 9(16)  value 202500.\n          05 pic 9(16)  value 204800.\n          05 pic 9(16)  value 207360.\n          05 pic 9(16)  value 209952.\n          05 pic 9(16)  value 216000.\n          05 pic 9(16)  value 218700.\n          05 pic 9(16)  value 221184.\n          05 pic 9(16)  value 225000.\n          05 pic 9(16)  value 230400.\n          05 pic 9(16)  value 233280.\n          05 pic 9(16)  value 234375.\n          05 pic 9(16)  value 236196.\n          05 pic 9(16)  value 240000.\n          05 pic 9(16)  value 243000.\n          05 pic 9(16)  value 245760.\n          05 pic 9(16)  value 248832.\n          05 pic 9(16)  value 250000.\n          05 pic 9(16)  value 253125.\n          05 pic 9(16)  value 256000.\n          05 pic 9(16)  value 259200.\n          05 pic 9(16)  value 262144.\n          05 pic 9(16)  value 262440.\n          05 pic 9(16)  value 270000.\n          05 pic 9(16)  value 273375.\n          05 pic 9(16)  value 276480.\n          05 pic 9(16)  value 279936.\n          05 pic 9(16)  value 281250.\n          05 pic 9(16)  value 288000.\n          05 pic 9(16)  value 291600.\n          05 pic 9(16)  value 294912.\n          05 pic 9(16)  value 295245.\n          05 pic 9(16)  value 300000.\n          05 pic 9(16)  value 303750.\n          05 pic 9(16)  value 307200.\n          05 pic 9(16)  value 311040.\n          05 pic 9(16)  value 312500.\n          05 pic 9(16)  value 314928.\n          05 pic 9(16)  value 320000.\n          05 pic 9(16)  value 324000.\n          05 pic 9(16)  value 327680.\n          05 pic 9(16)  value 328050.\n          05 pic 9(16)  value 331776.\n          05 pic 9(16)  value 337500.\n          05 pic 9(16)  value 345600.\n          05 pic 9(16)  value 349920.\n          05 pic 9(16)  value 354294.\n          05 pic 9(16)  value 360000.\n          05 pic 9(16)  value 364500.\n          05 pic 9(16)  value 368640.\n          05 pic 9(16)  value 373248.\n          05 pic 9(16)  value 375000.\n          05 pic 9(16)  value 384000.\n          05 pic 9(16)  value 388800.\n          05 pic 9(16)  value 390625.\n          05 pic 9(16)  value 393216.\n          05 pic 9(16)  value 393660.\n          05 pic 9(16)  value 400000.\n          05 pic 9(16)  value 405000.\n          05 pic 9(16)  value 409600.\n          05 pic 9(16)  value 414720.\n          05 pic 9(16)  value 419904.\n          05 pic 9(16)  value 421875.\n          05 pic 9(16)  value 432000.\n          05 pic 9(16)  value 437400.\n          05 pic 9(16)  value 442368.\n          05 pic 9(16)  value 450000.\n          05 pic 9(16)  value 455625.\n          05 pic 9(16)  value 460800.\n          05 pic 9(16)  value 466560.\n          05 pic 9(16)  value 468750.\n          05 pic 9(16)  value 472392.\n          05 pic 9(16)  value 480000.\n          05 pic 9(16)  value 486000.\n          05 pic 9(16)  value 491520.\n          05 pic 9(16)  value 492075.\n          05 pic 9(16)  value 497664.\n          05 pic 9(16)  value 500000.\n          05 pic 9(16)  value 506250.\n          05 pic 9(16)  value 512000.\n          05 pic 9(16)  value 518400.\n          05 pic 9(16)  value 524288.\n          05 pic 9(16)  value 524880.\n          05 pic 9(16)  value 531441.\n          05 pic 9(16)  value 540000.\n          05 pic 9(16)  value 546750.\n          05 pic 9(16)  value 552960.\n          05 pic 9(16)  value 559872.\n          05 pic 9(16)  value 562500.\n          05 pic 9(16)  value 576000.\n          05 pic 9(16)  value 583200.\n          05 pic 9(16)  value 589824.\n          05 pic 9(16)  value 590490.\n          05 pic 9(16)  value 600000.\n          05 pic 9(16)  value 607500.\n          05 pic 9(16)  value 614400.\n          05 pic 9(16)  value 622080.\n          05 pic 9(16)  value 625000.\n          05 pic 9(16)  value 629856.\n          05 pic 9(16)  value 640000.\n          05 pic 9(16)  value 648000.\n          05 pic 9(16)  value 655360.\n          05 pic 9(16)  value 656100.\n          05 pic 9(16)  value 663552.\n          05 pic 9(16)  value 675000.\n          05 pic 9(16)  value 691200.\n          05 pic 9(16)  value 699840.\n          05 pic 9(16)  value 703125.\n          05 pic 9(16)  value 708588.\n          05 pic 9(16)  value 720000.\n          05 pic 9(16)  value 729000.\n          05 pic 9(16)  value 737280.\n          05 pic 9(16)  value 746496.\n          05 pic 9(16)  value 750000.\n          05 pic 9(16)  value 759375.\n          05 pic 9(16)  value 768000.\n          05 pic 9(16)  value 777600.\n          05 pic 9(16)  value 781250.\n          05 pic 9(16)  value 786432.\n          05 pic 9(16)  value 787320.\n          05 pic 9(16)  value 800000.\n          05 pic 9(16)  value 810000.\n          05 pic 9(16)  value 819200.\n          05 pic 9(16)  value 820125.\n          05 pic 9(16)  value 829440.\n          05 pic 9(16)  value 839808.\n          05 pic 9(16)  value 843750.\n          05 pic 9(16)  value 864000.\n          05 pic 9(16)  value 874800.\n          05 pic 9(16)  value 884736.\n          05 pic 9(16)  value 885735.\n          05 pic 9(16)  value 900000.\n          05 pic 9(16)  value 911250.\n          05 pic 9(16)  value 921600.\n          05 pic 9(16)  value 933120.\n          05 pic 9(16)  value 937500.\n          05 pic 9(16)  value 944784.\n          05 pic 9(16)  value 960000.\n          05 pic 9(16)  value 972000.\n          05 pic 9(16)  value 983040.\n          05 pic 9(16)  value 984150.\n          05 pic 9(16)  value 995328.\n          05 pic 9(16)  value 1000000.\n          05 pic 9(16)  value 1012500.\n          05 pic 9(16)  value 1024000.\n          05 pic 9(16)  value 1036800.\n          05 pic 9(16)  value 1048576.\n          05 pic 9(16)  value 1049760.\n          05 pic 9(16)  value 1062882.\n          05 pic 9(16)  value 1080000.\n          05 pic 9(16)  value 1093500.\n          05 pic 9(16)  value 1105920.\n          05 pic 9(16)  value 1119744.\n          05 pic 9(16)  value 1125000.\n          05 pic 9(16)  value 1152000.\n          05 pic 9(16)  value 1166400.\n          05 pic 9(16)  value 1171875.\n          05 pic 9(16)  value 1179648.\n          05 pic 9(16)  value 1180980.\n          05 pic 9(16)  value 1200000.\n          05 pic 9(16)  value 1215000.\n          05 pic 9(16)  value 1228800.\n          05 pic 9(16)  value 1244160.\n          05 pic 9(16)  value 1250000.\n          05 pic 9(16)  value 1259712.\n          05 pic 9(16)  value 1265625.\n          05 pic 9(16)  value 1280000.\n          05 pic 9(16)  value 1296000.\n          05 pic 9(16)  value 1310720.\n          05 pic 9(16)  value 1312200.\n          05 pic 9(16)  value 1327104.\n          05 pic 9(16)  value 1350000.\n          05 pic 9(16)  value 1366875.\n          05 pic 9(16)  value 1382400.\n          05 pic 9(16)  value 1399680.\n          05 pic 9(16)  value 1406250.\n          05 pic 9(16)  value 1417176.\n          05 pic 9(16)  value 1440000.\n          05 pic 9(16)  value 1458000.\n          05 pic 9(16)  value 1474560.\n          05 pic 9(16)  value 1476225.\n          05 pic 9(16)  value 1492992.\n          05 pic 9(16)  value 1500000.\n          05 pic 9(16)  value 1518750.\n          05 pic 9(16)  value 1536000.\n          05 pic 9(16)  value 1555200.\n          05 pic 9(16)  value 1562500.\n          05 pic 9(16)  value 1572864.\n          05 pic 9(16)  value 1574640.\n          05 pic 9(16)  value 1594323.\n          05 pic 9(16)  value 1600000.\n          05 pic 9(16)  value 1620000.\n          05 pic 9(16)  value 1638400.\n          05 pic 9(16)  value 1640250.\n          05 pic 9(16)  value 1658880.\n          05 pic 9(16)  value 1679616.\n          05 pic 9(16)  value 1687500.\n          05 pic 9(16)  value 1728000.\n          05 pic 9(16)  value 1749600.\n          05 pic 9(16)  value 1769472.\n          05 pic 9(16)  value 1771470.\n          05 pic 9(16)  value 1800000.\n          05 pic 9(16)  value 1822500.\n          05 pic 9(16)  value 1843200.\n          05 pic 9(16)  value 1866240.\n          05 pic 9(16)  value 1875000.\n          05 pic 9(16)  value 1889568.\n          05 pic 9(16)  value 1920000.\n          05 pic 9(16)  value 1944000.\n          05 pic 9(16)  value 1953125.\n          05 pic 9(16)  value 1966080.\n          05 pic 9(16)  value 1968300.\n          05 pic 9(16)  value 1990656.\n          05 pic 9(16)  value 2000000.\n          05 pic 9(16)  value 2025000.\n          05 pic 9(16)  value 2048000.\n          05 pic 9(16)  value 2073600.\n          05 pic 9(16)  value 2097152.\n          05 pic 9(16)  value 2099520.\n          05 pic 9(16)  value 2109375.\n          05 pic 9(16)  value 2125764.\n          05 pic 9(16)  value 2160000.\n          05 pic 9(16)  value 2187000.\n          05 pic 9(16)  value 2211840.\n          05 pic 9(16)  value 2239488.\n          05 pic 9(16)  value 2250000.\n          05 pic 9(16)  value 2278125.\n          05 pic 9(16)  value 2304000.\n          05 pic 9(16)  value 2332800.\n          05 pic 9(16)  value 2343750.\n          05 pic 9(16)  value 2359296.\n          05 pic 9(16)  value 2361960.\n          05 pic 9(16)  value 2400000.\n          05 pic 9(16)  value 2430000.\n          05 pic 9(16)  value 2457600.\n          05 pic 9(16)  value 2460375.\n          05 pic 9(16)  value 2488320.\n          05 pic 9(16)  value 2500000.\n          05 pic 9(16)  value 2519424.\n          05 pic 9(16)  value 2531250.\n          05 pic 9(16)  value 2560000.\n          05 pic 9(16)  value 2592000.\n          05 pic 9(16)  value 2621440.\n          05 pic 9(16)  value 2624400.\n          05 pic 9(16)  value 2654208.\n          05 pic 9(16)  value 2657205.\n          05 pic 9(16)  value 2700000.\n          05 pic 9(16)  value 2733750.\n          05 pic 9(16)  value 2764800.\n          05 pic 9(16)  value 2799360.\n          05 pic 9(16)  value 2812500.\n          05 pic 9(16)  value 2834352.\n          05 pic 9(16)  value 2880000.\n          05 pic 9(16)  value 2916000.\n          05 pic 9(16)  value 2949120.\n          05 pic 9(16)  value 2952450.\n          05 pic 9(16)  value 2985984.\n          05 pic 9(16)  value 3000000.\n          05 pic 9(16)  value 3037500.\n          05 pic 9(16)  value 3072000.\n          05 pic 9(16)  value 3110400.\n          05 pic 9(16)  value 3125000.\n          05 pic 9(16)  value 3145728.\n          05 pic 9(16)  value 3149280.\n          05 pic 9(16)  value 3188646.\n          05 pic 9(16)  value 3200000.\n          05 pic 9(16)  value 3240000.\n          05 pic 9(16)  value 3276800.\n          05 pic 9(16)  value 3280500.\n          05 pic 9(16)  value 3317760.\n          05 pic 9(16)  value 3359232.\n          05 pic 9(16)  value 3375000.\n          05 pic 9(16)  value 3456000.\n          05 pic 9(16)  value 3499200.\n          05 pic 9(16)  value 3515625.\n          05 pic 9(16)  value 3538944.\n          05 pic 9(16)  value 3542940.\n          05 pic 9(16)  value 3600000.\n          05 pic 9(16)  value 3645000.\n          05 pic 9(16)  value 3686400.\n          05 pic 9(16)  value 3732480.\n          05 pic 9(16)  value 3750000.\n          05 pic 9(16)  value 3779136.\n          05 pic 9(16)  value 3796875.\n          05 pic 9(16)  value 3840000.\n          05 pic 9(16)  value 3888000.\n          05 pic 9(16)  value 3906250.\n          05 pic 9(16)  value 3932160.\n          05 pic 9(16)  value 3936600.\n          05 pic 9(16)  value 3981312.\n          05 pic 9(16)  value 4000000.\n          05 pic 9(16)  value 4050000.\n          05 pic 9(16)  value 4096000.\n          05 pic 9(16)  value 4100625.\n          05 pic 9(16)  value 4147200.\n          05 pic 9(16)  value 4194304.\n          05 pic 9(16)  value 4199040.\n          05 pic 9(16)  value 4218750.\n          05 pic 9(16)  value 4251528.\n          05 pic 9(16)  value 4320000.\n          05 pic 9(16)  value 4374000.\n          05 pic 9(16)  value 4423680.\n          05 pic 9(16)  value 4428675.\n          05 pic 9(16)  value 4478976.\n          05 pic 9(16)  value 4500000.\n          05 pic 9(16)  value 4556250.\n          05 pic 9(16)  value 4608000.\n          05 pic 9(16)  value 4665600.\n          05 pic 9(16)  value 4687500.\n          05 pic 9(16)  value 4718592.\n          05 pic 9(16)  value 4723920.\n          05 pic 9(16)  value 4782969.\n          05 pic 9(16)  value 4800000.\n          05 pic 9(16)  value 4860000.\n          05 pic 9(16)  value 4915200.\n          05 pic 9(16)  value 4920750.\n          05 pic 9(16)  value 4976640.\n          05 pic 9(16)  value 5000000.\n          05 pic 9(16)  value 5038848.\n          05 pic 9(16)  value 5062500.\n          05 pic 9(16)  value 5120000.\n          05 pic 9(16)  value 5184000.\n          05 pic 9(16)  value 5242880.\n          05 pic 9(16)  value 5248800.\n          05 pic 9(16)  value 5308416.\n          05 pic 9(16)  value 5314410.\n          05 pic 9(16)  value 5400000.\n          05 pic 9(16)  value 5467500.\n          05 pic 9(16)  value 5529600.\n          05 pic 9(16)  value 5598720.\n          05 pic 9(16)  value 5625000.\n          05 pic 9(16)  value 5668704.\n          05 pic 9(16)  value 5760000.\n          05 pic 9(16)  value 5832000.\n          05 pic 9(16)  value 5859375.\n          05 pic 9(16)  value 5898240.\n          05 pic 9(16)  value 5904900.\n          05 pic 9(16)  value 5971968.\n          05 pic 9(16)  value 6000000.\n          05 pic 9(16)  value 6075000.\n          05 pic 9(16)  value 6144000.\n          05 pic 9(16)  value 6220800.\n          05 pic 9(16)  value 6250000.\n          05 pic 9(16)  value 6291456.\n          05 pic 9(16)  value 6298560.\n          05 pic 9(16)  value 6328125.\n          05 pic 9(16)  value 6377292.\n          05 pic 9(16)  value 6400000.\n          05 pic 9(16)  value 6480000.\n          05 pic 9(16)  value 6553600.\n          05 pic 9(16)  value 6561000.\n          05 pic 9(16)  value 6635520.\n          05 pic 9(16)  value 6718464.\n          05 pic 9(16)  value 6750000.\n          05 pic 9(16)  value 6834375.\n          05 pic 9(16)  value 6912000.\n          05 pic 9(16)  value 6998400.\n          05 pic 9(16)  value 7031250.\n          05 pic 9(16)  value 7077888.\n          05 pic 9(16)  value 7085880.\n          05 pic 9(16)  value 7200000.\n          05 pic 9(16)  value 7290000.\n          05 pic 9(16)  value 7372800.\n          05 pic 9(16)  value 7381125.\n          05 pic 9(16)  value 7464960.\n          05 pic 9(16)  value 7500000.\n          05 pic 9(16)  value 7558272.\n          05 pic 9(16)  value 7593750.\n          05 pic 9(16)  value 7680000.\n          05 pic 9(16)  value 7776000.\n          05 pic 9(16)  value 7812500.\n          05 pic 9(16)  value 7864320.\n          05 pic 9(16)  value 7873200.\n          05 pic 9(16)  value 7962624.\n          05 pic 9(16)  value 7971615.\n          05 pic 9(16)  value 8000000.\n          05 pic 9(16)  value 8100000.\n          05 pic 9(16)  value 8192000.\n          05 pic 9(16)  value 8201250.\n          05 pic 9(16)  value 8294400.\n          05 pic 9(16)  value 8388608.\n          05 pic 9(16)  value 8398080.\n          05 pic 9(16)  value 8437500.\n          05 pic 9(16)  value 8503056.\n          05 pic 9(16)  value 8640000.\n          05 pic 9(16)  value 8748000.\n          05 pic 9(16)  value 8847360.\n          05 pic 9(16)  value 8857350.\n          05 pic 9(16)  value 8957952.\n          05 pic 9(16)  value 9000000.\n          05 pic 9(16)  value 9112500.\n          05 pic 9(16)  value 9216000.\n          05 pic 9(16)  value 9331200.\n          05 pic 9(16)  value 9375000.\n          05 pic 9(16)  value 9437184.\n          05 pic 9(16)  value 9447840.\n          05 pic 9(16)  value 9565938.\n          05 pic 9(16)  value 9600000.\n          05 pic 9(16)  value 9720000.\n          05 pic 9(16)  value 9765625.\n          05 pic 9(16)  value 9830400.\n          05 pic 9(16)  value 9841500.\n          05 pic 9(16)  value 9953280.\n          05 pic 9(16)  value 10000000.\n          05 pic 9(16)  value 10077696.\n          05 pic 9(16)  value 10125000.\n          05 pic 9(16)  value 10240000.\n          05 pic 9(16)  value 10368000.\n          05 pic 9(16)  value 10485760.\n          05 pic 9(16)  value 10497600.\n          05 pic 9(16)  value 10546875.\n          05 pic 9(16)  value 10616832.\n          05 pic 9(16)  value 10628820.\n          05 pic 9(16)  value 10800000.\n          05 pic 9(16)  value 10935000.\n          05 pic 9(16)  value 11059200.\n          05 pic 9(16)  value 11197440.\n          05 pic 9(16)  value 11250000.\n          05 pic 9(16)  value 11337408.\n          05 pic 9(16)  value 11390625.\n          05 pic 9(16)  value 11520000.\n          05 pic 9(16)  value 11664000.\n          05 pic 9(16)  value 11718750.\n          05 pic 9(16)  value 11796480.\n          05 pic 9(16)  value 11809800.\n          05 pic 9(16)  value 11943936.\n          05 pic 9(16)  value 12000000.\n          05 pic 9(16)  value 12150000.\n          05 pic 9(16)  value 12288000.\n          05 pic 9(16)  value 12301875.\n          05 pic 9(16)  value 12441600.\n          05 pic 9(16)  value 12500000.\n          05 pic 9(16)  value 12582912.\n          05 pic 9(16)  value 12597120.\n          05 pic 9(16)  value 12656250.\n          05 pic 9(16)  value 12754584.\n          05 pic 9(16)  value 12800000.\n          05 pic 9(16)  value 12960000.\n          05 pic 9(16)  value 13107200.\n          05 pic 9(16)  value 13122000.\n          05 pic 9(16)  value 13271040.\n          05 pic 9(16)  value 13286025.\n          05 pic 9(16)  value 13436928.\n          05 pic 9(16)  value 13500000.\n          05 pic 9(16)  value 13668750.\n          05 pic 9(16)  value 13824000.\n          05 pic 9(16)  value 13996800.\n          05 pic 9(16)  value 14062500.\n          05 pic 9(16)  value 14155776.\n          05 pic 9(16)  value 14171760.\n          05 pic 9(16)  value 14348907.\n          05 pic 9(16)  value 14400000.\n          05 pic 9(16)  value 14580000.\n          05 pic 9(16)  value 14745600.\n          05 pic 9(16)  value 14762250.\n          05 pic 9(16)  value 14929920.\n          05 pic 9(16)  value 15000000.\n          05 pic 9(16)  value 15116544.\n          05 pic 9(16)  value 15187500.\n          05 pic 9(16)  value 15360000.\n          05 pic 9(16)  value 15552000.\n          05 pic 9(16)  value 15625000.\n          05 pic 9(16)  value 15728640.\n          05 pic 9(16)  value 15746400.\n          05 pic 9(16)  value 15925248.\n          05 pic 9(16)  value 15943230.\n          05 pic 9(16)  value 16000000.\n          05 pic 9(16)  value 16200000.\n          05 pic 9(16)  value 16384000.\n          05 pic 9(16)  value 16402500.\n          05 pic 9(16)  value 16588800.\n          05 pic 9(16)  value 16777216.\n          05 pic 9(16)  value 16796160.\n          05 pic 9(16)  value 16875000.\n          05 pic 9(16)  value 17006112.\n          05 pic 9(16)  value 17280000.\n          05 pic 9(16)  value 17496000.\n          05 pic 9(16)  value 17578125.\n          05 pic 9(16)  value 17694720.\n          05 pic 9(16)  value 17714700.\n          05 pic 9(16)  value 17915904.\n          05 pic 9(16)  value 18000000.\n          05 pic 9(16)  value 18225000.\n          05 pic 9(16)  value 18432000.\n          05 pic 9(16)  value 18662400.\n          05 pic 9(16)  value 18750000.\n          05 pic 9(16)  value 18874368.\n          05 pic 9(16)  value 18895680.\n          05 pic 9(16)  value 18984375.\n          05 pic 9(16)  value 19131876.\n          05 pic 9(16)  value 19200000.\n          05 pic 9(16)  value 19440000.\n          05 pic 9(16)  value 19531250.\n          05 pic 9(16)  value 19660800.\n          05 pic 9(16)  value 19683000.\n          05 pic 9(16)  value 19906560.\n          05 pic 9(16)  value 20000000.\n          05 pic 9(16)  value 20155392.\n          05 pic 9(16)  value 20250000.\n          05 pic 9(16)  value 20480000.\n          05 pic 9(16)  value 20503125.\n          05 pic 9(16)  value 20736000.\n          05 pic 9(16)  value 20971520.\n          05 pic 9(16)  value 20995200.\n          05 pic 9(16)  value 21093750.\n          05 pic 9(16)  value 21233664.\n          05 pic 9(16)  value 21257640.\n          05 pic 9(16)  value 21600000.\n          05 pic 9(16)  value 21870000.\n          05 pic 9(16)  value 22118400.\n          05 pic 9(16)  value 22143375.\n          05 pic 9(16)  value 22394880.\n          05 pic 9(16)  value 22500000.\n          05 pic 9(16)  value 22674816.\n          05 pic 9(16)  value 22781250.\n          05 pic 9(16)  value 23040000.\n          05 pic 9(16)  value 23328000.\n          05 pic 9(16)  value 23437500.\n          05 pic 9(16)  value 23592960.\n          05 pic 9(16)  value 23619600.\n          05 pic 9(16)  value 23887872.\n          05 pic 9(16)  value 23914845.\n          05 pic 9(16)  value 24000000.\n          05 pic 9(16)  value 24300000.\n          05 pic 9(16)  value 24576000.\n          05 pic 9(16)  value 24603750.\n          05 pic 9(16)  value 24883200.\n          05 pic 9(16)  value 25000000.\n          05 pic 9(16)  value 25165824.\n          05 pic 9(16)  value 25194240.\n          05 pic 9(16)  value 25312500.\n          05 pic 9(16)  value 25509168.\n          05 pic 9(16)  value 25600000.\n          05 pic 9(16)  value 25920000.\n          05 pic 9(16)  value 26214400.\n          05 pic 9(16)  value 26244000.\n          05 pic 9(16)  value 26542080.\n          05 pic 9(16)  value 26572050.\n          05 pic 9(16)  value 26873856.\n          05 pic 9(16)  value 27000000.\n          05 pic 9(16)  value 27337500.\n          05 pic 9(16)  value 27648000.\n          05 pic 9(16)  value 27993600.\n          05 pic 9(16)  value 28125000.\n          05 pic 9(16)  value 28311552.\n          05 pic 9(16)  value 28343520.\n          05 pic 9(16)  value 28697814.\n          05 pic 9(16)  value 28800000.\n          05 pic 9(16)  value 29160000.\n          05 pic 9(16)  value 29296875.\n          05 pic 9(16)  value 29491200.\n          05 pic 9(16)  value 29524500.\n          05 pic 9(16)  value 29859840.\n          05 pic 9(16)  value 30000000.\n          05 pic 9(16)  value 30233088.\n          05 pic 9(16)  value 30375000.\n          05 pic 9(16)  value 30720000.\n          05 pic 9(16)  value 31104000.\n          05 pic 9(16)  value 31250000.\n          05 pic 9(16)  value 31457280.\n          05 pic 9(16)  value 31492800.\n          05 pic 9(16)  value 31640625.\n          05 pic 9(16)  value 31850496.\n          05 pic 9(16)  value 31886460.\n          05 pic 9(16)  value 32000000.\n          05 pic 9(16)  value 32400000.\n          05 pic 9(16)  value 32768000.\n          05 pic 9(16)  value 32805000.\n          05 pic 9(16)  value 33177600.\n          05 pic 9(16)  value 33554432.\n          05 pic 9(16)  value 33592320.\n          05 pic 9(16)  value 33750000.\n          05 pic 9(16)  value 34012224.\n          05 pic 9(16)  value 34171875.\n          05 pic 9(16)  value 34560000.\n          05 pic 9(16)  value 34992000.\n          05 pic 9(16)  value 35156250.\n          05 pic 9(16)  value 35389440.\n          05 pic 9(16)  value 35429400.\n          05 pic 9(16)  value 35831808.\n          05 pic 9(16)  value 36000000.\n          05 pic 9(16)  value 36450000.\n          05 pic 9(16)  value 36864000.\n          05 pic 9(16)  value 36905625.\n          05 pic 9(16)  value 37324800.\n          05 pic 9(16)  value 37500000.\n          05 pic 9(16)  value 37748736.\n          05 pic 9(16)  value 37791360.\n          05 pic 9(16)  value 37968750.\n          05 pic 9(16)  value 38263752.\n          05 pic 9(16)  value 38400000.\n          05 pic 9(16)  value 38880000.\n          05 pic 9(16)  value 39062500.\n          05 pic 9(16)  value 39321600.\n          05 pic 9(16)  value 39366000.\n          05 pic 9(16)  value 39813120.\n          05 pic 9(16)  value 39858075.\n          05 pic 9(16)  value 40000000.\n          05 pic 9(16)  value 40310784.\n          05 pic 9(16)  value 40500000.\n          05 pic 9(16)  value 40960000.\n          05 pic 9(16)  value 41006250.\n          05 pic 9(16)  value 41472000.\n          05 pic 9(16)  value 41943040.\n          05 pic 9(16)  value 41990400.\n          05 pic 9(16)  value 42187500.\n          05 pic 9(16)  value 42467328.\n          05 pic 9(16)  value 42515280.\n          05 pic 9(16)  value 43046721.\n          05 pic 9(16)  value 43200000.\n          05 pic 9(16)  value 43740000.\n          05 pic 9(16)  value 44236800.\n          05 pic 9(16)  value 44286750.\n          05 pic 9(16)  value 44789760.\n          05 pic 9(16)  value 45000000.\n          05 pic 9(16)  value 45349632.\n          05 pic 9(16)  value 45562500.\n          05 pic 9(16)  value 46080000.\n          05 pic 9(16)  value 46656000.\n          05 pic 9(16)  value 46875000.\n          05 pic 9(16)  value 47185920.\n          05 pic 9(16)  value 47239200.\n          05 pic 9(16)  value 47775744.\n          05 pic 9(16)  value 47829690.\n          05 pic 9(16)  value 48000000.\n          05 pic 9(16)  value 48600000.\n          05 pic 9(16)  value 48828125.\n          05 pic 9(16)  value 49152000.\n          05 pic 9(16)  value 49207500.\n          05 pic 9(16)  value 49766400.\n          05 pic 9(16)  value 50000000.\n          05 pic 9(16)  value 50331648.\n          05 pic 9(16)  value 50388480.\n          05 pic 9(16)  value 50625000.\n          05 pic 9(16)  value 51018336.\n          05 pic 9(16)  value 51200000.\n          05 pic 9(16)  value 51840000.\n          05 pic 9(16)  value 52428800.\n          05 pic 9(16)  value 52488000.\n          05 pic 9(16)  value 52734375.\n          05 pic 9(16)  value 53084160.\n          05 pic 9(16)  value 53144100.\n          05 pic 9(16)  value 53747712.\n          05 pic 9(16)  value 54000000.\n          05 pic 9(16)  value 54675000.\n          05 pic 9(16)  value 55296000.\n          05 pic 9(16)  value 55987200.\n          05 pic 9(16)  value 56250000.\n          05 pic 9(16)  value 56623104.\n          05 pic 9(16)  value 56687040.\n          05 pic 9(16)  value 56953125.\n          05 pic 9(16)  value 57395628.\n          05 pic 9(16)  value 57600000.\n          05 pic 9(16)  value 58320000.\n          05 pic 9(16)  value 58593750.\n          05 pic 9(16)  value 58982400.\n          05 pic 9(16)  value 59049000.\n          05 pic 9(16)  value 59719680.\n          05 pic 9(16)  value 60000000.\n          05 pic 9(16)  value 60466176.\n          05 pic 9(16)  value 60750000.\n          05 pic 9(16)  value 61440000.\n          05 pic 9(16)  value 61509375.\n          05 pic 9(16)  value 62208000.\n          05 pic 9(16)  value 62500000.\n          05 pic 9(16)  value 62914560.\n          05 pic 9(16)  value 62985600.\n          05 pic 9(16)  value 63281250.\n          05 pic 9(16)  value 63700992.\n          05 pic 9(16)  value 63772920.\n          05 pic 9(16)  value 64000000.\n          05 pic 9(16)  value 64800000.\n          05 pic 9(16)  value 65536000.\n          05 pic 9(16)  value 65610000.\n          05 pic 9(16)  value 66355200.\n          05 pic 9(16)  value 66430125.\n          05 pic 9(16)  value 67108864.\n          05 pic 9(16)  value 67184640.\n          05 pic 9(16)  value 67500000.\n          05 pic 9(16)  value 68024448.\n          05 pic 9(16)  value 68343750.\n          05 pic 9(16)  value 69120000.\n          05 pic 9(16)  value 69984000.\n          05 pic 9(16)  value 70312500.\n          05 pic 9(16)  value 70778880.\n          05 pic 9(16)  value 70858800.\n          05 pic 9(16)  value 71663616.\n          05 pic 9(16)  value 71744535.\n          05 pic 9(16)  value 72000000.\n          05 pic 9(16)  value 72900000.\n          05 pic 9(16)  value 73728000.\n          05 pic 9(16)  value 73811250.\n          05 pic 9(16)  value 74649600.\n          05 pic 9(16)  value 75000000.\n          05 pic 9(16)  value 75497472.\n          05 pic 9(16)  value 75582720.\n          05 pic 9(16)  value 75937500.\n          05 pic 9(16)  value 76527504.\n          05 pic 9(16)  value 76800000.\n          05 pic 9(16)  value 77760000.\n          05 pic 9(16)  value 78125000.\n          05 pic 9(16)  value 78643200.\n          05 pic 9(16)  value 78732000.\n          05 pic 9(16)  value 79626240.\n          05 pic 9(16)  value 79716150.\n          05 pic 9(16)  value 80000000.\n          05 pic 9(16)  value 80621568.\n          05 pic 9(16)  value 81000000.\n          05 pic 9(16)  value 81920000.\n          05 pic 9(16)  value 82012500.\n          05 pic 9(16)  value 82944000.\n          05 pic 9(16)  value 83886080.\n          05 pic 9(16)  value 83980800.\n          05 pic 9(16)  value 84375000.\n          05 pic 9(16)  value 84934656.\n          05 pic 9(16)  value 85030560.\n          05 pic 9(16)  value 86093442.\n          05 pic 9(16)  value 86400000.\n          05 pic 9(16)  value 87480000.\n          05 pic 9(16)  value 87890625.\n          05 pic 9(16)  value 88473600.\n          05 pic 9(16)  value 88573500.\n          05 pic 9(16)  value 89579520.\n          05 pic 9(16)  value 90000000.\n          05 pic 9(16)  value 90699264.\n          05 pic 9(16)  value 91125000.\n          05 pic 9(16)  value 92160000.\n          05 pic 9(16)  value 93312000.\n          05 pic 9(16)  value 93750000.\n          05 pic 9(16)  value 94371840.\n          05 pic 9(16)  value 94478400.\n          05 pic 9(16)  value 94921875.\n          05 pic 9(16)  value 95551488.\n          05 pic 9(16)  value 95659380.\n          05 pic 9(16)  value 96000000.\n          05 pic 9(16)  value 97200000.\n          05 pic 9(16)  value 97656250.\n          05 pic 9(16)  value 98304000.\n          05 pic 9(16)  value 98415000.\n          05 pic 9(16)  value 99532800.\n          05 pic 9(16)  value 100000000.\n          05 pic 9(16)  value 100663296.\n          05 pic 9(16)  value 100776960.\n          05 pic 9(16)  value 101250000.\n          05 pic 9(16)  value 102036672.\n          05 pic 9(16)  value 102400000.\n          05 pic 9(16)  value 102515625.\n          05 pic 9(16)  value 103680000.\n          05 pic 9(16)  value 104857600.\n          05 pic 9(16)  value 104976000.\n          05 pic 9(16)  value 105468750.\n          05 pic 9(16)  value 106168320.\n          05 pic 9(16)  value 106288200.\n          05 pic 9(16)  value 107495424.\n          05 pic 9(16)  value 108000000.\n          05 pic 9(16)  value 109350000.\n          05 pic 9(16)  value 110592000.\n          05 pic 9(16)  value 110716875.\n          05 pic 9(16)  value 111974400.\n          05 pic 9(16)  value 112500000.\n          05 pic 9(16)  value 113246208.\n          05 pic 9(16)  value 113374080.\n          05 pic 9(16)  value 113906250.\n          05 pic 9(16)  value 114791256.\n          05 pic 9(16)  value 115200000.\n          05 pic 9(16)  value 116640000.\n          05 pic 9(16)  value 117187500.\n          05 pic 9(16)  value 117964800.\n          05 pic 9(16)  value 118098000.\n          05 pic 9(16)  value 119439360.\n          05 pic 9(16)  value 119574225.\n          05 pic 9(16)  value 120000000.\n          05 pic 9(16)  value 120932352.\n          05 pic 9(16)  value 121500000.\n          05 pic 9(16)  value 122880000.\n          05 pic 9(16)  value 123018750.\n          05 pic 9(16)  value 124416000.\n          05 pic 9(16)  value 125000000.\n          05 pic 9(16)  value 125829120.\n          05 pic 9(16)  value 125971200.\n          05 pic 9(16)  value 126562500.\n          05 pic 9(16)  value 127401984.\n          05 pic 9(16)  value 127545840.\n          05 pic 9(16)  value 128000000.\n          05 pic 9(16)  value 129140163.\n          05 pic 9(16)  value 129600000.\n          05 pic 9(16)  value 131072000.\n          05 pic 9(16)  value 131220000.\n          05 pic 9(16)  value 132710400.\n          05 pic 9(16)  value 132860250.\n          05 pic 9(16)  value 134217728.\n          05 pic 9(16)  value 134369280.\n          05 pic 9(16)  value 135000000.\n          05 pic 9(16)  value 136048896.\n          05 pic 9(16)  value 136687500.\n          05 pic 9(16)  value 138240000.\n          05 pic 9(16)  value 139968000.\n          05 pic 9(16)  value 140625000.\n          05 pic 9(16)  value 141557760.\n          05 pic 9(16)  value 141717600.\n          05 pic 9(16)  value 143327232.\n          05 pic 9(16)  value 143489070.\n          05 pic 9(16)  value 144000000.\n          05 pic 9(16)  value 145800000.\n          05 pic 9(16)  value 146484375.\n          05 pic 9(16)  value 147456000.\n          05 pic 9(16)  value 147622500.\n          05 pic 9(16)  value 149299200.\n          05 pic 9(16)  value 150000000.\n          05 pic 9(16)  value 150994944.\n          05 pic 9(16)  value 151165440.\n          05 pic 9(16)  value 151875000.\n          05 pic 9(16)  value 153055008.\n          05 pic 9(16)  value 153600000.\n          05 pic 9(16)  value 155520000.\n          05 pic 9(16)  value 156250000.\n          05 pic 9(16)  value 157286400.\n          05 pic 9(16)  value 157464000.\n          05 pic 9(16)  value 158203125.\n          05 pic 9(16)  value 159252480.\n          05 pic 9(16)  value 159432300.\n          05 pic 9(16)  value 160000000.\n          05 pic 9(16)  value 161243136.\n          05 pic 9(16)  value 162000000.\n          05 pic 9(16)  value 163840000.\n          05 pic 9(16)  value 164025000.\n          05 pic 9(16)  value 165888000.\n          05 pic 9(16)  value 167772160.\n          05 pic 9(16)  value 167961600.\n          05 pic 9(16)  value 168750000.\n          05 pic 9(16)  value 169869312.\n          05 pic 9(16)  value 170061120.\n          05 pic 9(16)  value 170859375.\n          05 pic 9(16)  value 172186884.\n          05 pic 9(16)  value 172800000.\n          05 pic 9(16)  value 174960000.\n          05 pic 9(16)  value 175781250.\n          05 pic 9(16)  value 176947200.\n          05 pic 9(16)  value 177147000.\n          05 pic 9(16)  value 179159040.\n          05 pic 9(16)  value 180000000.\n          05 pic 9(16)  value 181398528.\n          05 pic 9(16)  value 182250000.\n          05 pic 9(16)  value 184320000.\n          05 pic 9(16)  value 184528125.\n          05 pic 9(16)  value 186624000.\n          05 pic 9(16)  value 187500000.\n          05 pic 9(16)  value 188743680.\n          05 pic 9(16)  value 188956800.\n          05 pic 9(16)  value 189843750.\n          05 pic 9(16)  value 191102976.\n          05 pic 9(16)  value 191318760.\n          05 pic 9(16)  value 192000000.\n          05 pic 9(16)  value 194400000.\n          05 pic 9(16)  value 195312500.\n          05 pic 9(16)  value 196608000.\n          05 pic 9(16)  value 196830000.\n          05 pic 9(16)  value 199065600.\n          05 pic 9(16)  value 199290375.\n          05 pic 9(16)  value 200000000.\n          05 pic 9(16)  value 201326592.\n          05 pic 9(16)  value 201553920.\n          05 pic 9(16)  value 202500000.\n          05 pic 9(16)  value 204073344.\n          05 pic 9(16)  value 204800000.\n          05 pic 9(16)  value 205031250.\n          05 pic 9(16)  value 207360000.\n          05 pic 9(16)  value 209715200.\n          05 pic 9(16)  value 209952000.\n          05 pic 9(16)  value 210937500.\n          05 pic 9(16)  value 212336640.\n          05 pic 9(16)  value 212576400.\n          05 pic 9(16)  value 214990848.\n          05 pic 9(16)  value 215233605.\n          05 pic 9(16)  value 216000000.\n          05 pic 9(16)  value 218700000.\n          05 pic 9(16)  value 221184000.\n          05 pic 9(16)  value 221433750.\n          05 pic 9(16)  value 223948800.\n          05 pic 9(16)  value 225000000.\n          05 pic 9(16)  value 226492416.\n          05 pic 9(16)  value 226748160.\n          05 pic 9(16)  value 227812500.\n          05 pic 9(16)  value 229582512.\n          05 pic 9(16)  value 230400000.\n          05 pic 9(16)  value 233280000.\n          05 pic 9(16)  value 234375000.\n          05 pic 9(16)  value 235929600.\n          05 pic 9(16)  value 236196000.\n          05 pic 9(16)  value 238878720.\n          05 pic 9(16)  value 239148450.\n          05 pic 9(16)  value 240000000.\n          05 pic 9(16)  value 241864704.\n          05 pic 9(16)  value 243000000.\n          05 pic 9(16)  value 244140625.\n          05 pic 9(16)  value 245760000.\n          05 pic 9(16)  value 246037500.\n          05 pic 9(16)  value 248832000.\n          05 pic 9(16)  value 250000000.\n          05 pic 9(16)  value 251658240.\n          05 pic 9(16)  value 251942400.\n          05 pic 9(16)  value 253125000.\n          05 pic 9(16)  value 254803968.\n          05 pic 9(16)  value 255091680.\n          05 pic 9(16)  value 256000000.\n          05 pic 9(16)  value 258280326.\n          05 pic 9(16)  value 259200000.\n          05 pic 9(16)  value 262144000.\n          05 pic 9(16)  value 262440000.\n          05 pic 9(16)  value 263671875.\n          05 pic 9(16)  value 265420800.\n          05 pic 9(16)  value 265720500.\n          05 pic 9(16)  value 268435456.\n          05 pic 9(16)  value 268738560.\n          05 pic 9(16)  value 270000000.\n          05 pic 9(16)  value 272097792.\n          05 pic 9(16)  value 273375000.\n          05 pic 9(16)  value 276480000.\n          05 pic 9(16)  value 279936000.\n          05 pic 9(16)  value 281250000.\n          05 pic 9(16)  value 283115520.\n          05 pic 9(16)  value 283435200.\n          05 pic 9(16)  value 284765625.\n          05 pic 9(16)  value 286654464.\n          05 pic 9(16)  value 286978140.\n          05 pic 9(16)  value 288000000.\n          05 pic 9(16)  value 291600000.\n          05 pic 9(16)  value 292968750.\n          05 pic 9(16)  value 294912000.\n          05 pic 9(16)  value 295245000.\n          05 pic 9(16)  value 298598400.\n          05 pic 9(16)  value 300000000.\n          05 pic 9(16)  value 301989888.\n          05 pic 9(16)  value 302330880.\n          05 pic 9(16)  value 303750000.\n          05 pic 9(16)  value 306110016.\n          05 pic 9(16)  value 307200000.\n          05 pic 9(16)  value 307546875.\n          05 pic 9(16)  value 311040000.\n          05 pic 9(16)  value 312500000.\n          05 pic 9(16)  value 314572800.\n          05 pic 9(16)  value 314928000.\n          05 pic 9(16)  value 316406250.\n          05 pic 9(16)  value 318504960.\n          05 pic 9(16)  value 318864600.\n          05 pic 9(16)  value 320000000.\n          05 pic 9(16)  value 322486272.\n          05 pic 9(16)  value 324000000.\n          05 pic 9(16)  value 327680000.\n          05 pic 9(16)  value 328050000.\n          05 pic 9(16)  value 331776000.\n          05 pic 9(16)  value 332150625.\n          05 pic 9(16)  value 335544320.\n          05 pic 9(16)  value 335923200.\n          05 pic 9(16)  value 337500000.\n          05 pic 9(16)  value 339738624.\n          05 pic 9(16)  value 340122240.\n          05 pic 9(16)  value 341718750.\n          05 pic 9(16)  value 344373768.\n          05 pic 9(16)  value 345600000.\n          05 pic 9(16)  value 349920000.\n          05 pic 9(16)  value 351562500.\n          05 pic 9(16)  value 353894400.\n          05 pic 9(16)  value 354294000.\n          05 pic 9(16)  value 358318080.\n          05 pic 9(16)  value 358722675.\n          05 pic 9(16)  value 360000000.\n          05 pic 9(16)  value 362797056.\n          05 pic 9(16)  value 364500000.\n          05 pic 9(16)  value 368640000.\n          05 pic 9(16)  value 369056250.\n          05 pic 9(16)  value 373248000.\n          05 pic 9(16)  value 375000000.\n          05 pic 9(16)  value 377487360.\n          05 pic 9(16)  value 377913600.\n          05 pic 9(16)  value 379687500.\n          05 pic 9(16)  value 382205952.\n          05 pic 9(16)  value 382637520.\n          05 pic 9(16)  value 384000000.\n          05 pic 9(16)  value 387420489.\n          05 pic 9(16)  value 388800000.\n          05 pic 9(16)  value 390625000.\n          05 pic 9(16)  value 393216000.\n          05 pic 9(16)  value 393660000.\n          05 pic 9(16)  value 398131200.\n          05 pic 9(16)  value 398580750.\n          05 pic 9(16)  value 400000000.\n          05 pic 9(16)  value 402653184.\n          05 pic 9(16)  value 403107840.\n          05 pic 9(16)  value 405000000.\n          05 pic 9(16)  value 408146688.\n          05 pic 9(16)  value 409600000.\n          05 pic 9(16)  value 410062500.\n          05 pic 9(16)  value 414720000.\n          05 pic 9(16)  value 419430400.\n          05 pic 9(16)  value 419904000.\n          05 pic 9(16)  value 421875000.\n          05 pic 9(16)  value 424673280.\n          05 pic 9(16)  value 425152800.\n          05 pic 9(16)  value 429981696.\n          05 pic 9(16)  value 430467210.\n          05 pic 9(16)  value 432000000.\n          05 pic 9(16)  value 437400000.\n          05 pic 9(16)  value 439453125.\n          05 pic 9(16)  value 442368000.\n          05 pic 9(16)  value 442867500.\n          05 pic 9(16)  value 447897600.\n          05 pic 9(16)  value 450000000.\n          05 pic 9(16)  value 452984832.\n          05 pic 9(16)  value 453496320.\n          05 pic 9(16)  value 455625000.\n          05 pic 9(16)  value 459165024.\n          05 pic 9(16)  value 460800000.\n          05 pic 9(16)  value 466560000.\n          05 pic 9(16)  value 468750000.\n          05 pic 9(16)  value 471859200.\n          05 pic 9(16)  value 472392000.\n          05 pic 9(16)  value 474609375.\n          05 pic 9(16)  value 477757440.\n          05 pic 9(16)  value 478296900.\n          05 pic 9(16)  value 480000000.\n          05 pic 9(16)  value 483729408.\n          05 pic 9(16)  value 486000000.\n          05 pic 9(16)  value 488281250.\n          05 pic 9(16)  value 491520000.\n          05 pic 9(16)  value 492075000.\n          05 pic 9(16)  value 497664000.\n          05 pic 9(16)  value 500000000.\n          05 pic 9(16)  value 503316480.\n          05 pic 9(16)  value 503884800.\n          05 pic 9(16)  value 506250000.\n          05 pic 9(16)  value 509607936.\n          05 pic 9(16)  value 510183360.\n          05 pic 9(16)  value 512000000.\n          05 pic 9(16)  value 512578125.\n          05 pic 9(16)  value 516560652.\n          05 pic 9(16)  value 518400000.\n          05 pic 9(16)  value 524288000.\n          05 pic 9(16)  value 524880000.\n          05 pic 9(16)  value 527343750.\n          05 pic 9(16)  value 530841600.\n          05 pic 9(16)  value 531441000.\n          05 pic 9(16)  value 536870912.\n          05 pic 9(16)  value 537477120.\n          05 pic 9(16)  value 540000000.\n          05 pic 9(16)  value 544195584.\n          05 pic 9(16)  value 546750000.\n          05 pic 9(16)  value 552960000.\n          05 pic 9(16)  value 553584375.\n          05 pic 9(16)  value 559872000.\n          05 pic 9(16)  value 562500000.\n          05 pic 9(16)  value 566231040.\n          05 pic 9(16)  value 566870400.\n          05 pic 9(16)  value 569531250.\n          05 pic 9(16)  value 573308928.\n          05 pic 9(16)  value 573956280.\n          05 pic 9(16)  value 576000000.\n          05 pic 9(16)  value 583200000.\n          05 pic 9(16)  value 585937500.\n          05 pic 9(16)  value 589824000.\n          05 pic 9(16)  value 590490000.\n          05 pic 9(16)  value 597196800.\n          05 pic 9(16)  value 597871125.\n          05 pic 9(16)  value 600000000.\n          05 pic 9(16)  value 603979776.\n          05 pic 9(16)  value 604661760.\n          05 pic 9(16)  value 607500000.\n          05 pic 9(16)  value 612220032.\n          05 pic 9(16)  value 614400000.\n          05 pic 9(16)  value 615093750.\n          05 pic 9(16)  value 622080000.\n          05 pic 9(16)  value 625000000.\n          05 pic 9(16)  value 629145600.\n          05 pic 9(16)  value 629856000.\n          05 pic 9(16)  value 632812500.\n          05 pic 9(16)  value 637009920.\n          05 pic 9(16)  value 637729200.\n          05 pic 9(16)  value 640000000.\n          05 pic 9(16)  value 644972544.\n          05 pic 9(16)  value 645700815.\n          05 pic 9(16)  value 648000000.\n          05 pic 9(16)  value 655360000.\n          05 pic 9(16)  value 656100000.\n          05 pic 9(16)  value 663552000.\n          05 pic 9(16)  value 664301250.\n          05 pic 9(16)  value 671088640.\n          05 pic 9(16)  value 671846400.\n          05 pic 9(16)  value 675000000.\n          05 pic 9(16)  value 679477248.\n          05 pic 9(16)  value 680244480.\n          05 pic 9(16)  value 683437500.\n          05 pic 9(16)  value 688747536.\n          05 pic 9(16)  value 691200000.\n          05 pic 9(16)  value 699840000.\n          05 pic 9(16)  value 703125000.\n          05 pic 9(16)  value 707788800.\n          05 pic 9(16)  value 708588000.\n          05 pic 9(16)  value 716636160.\n          05 pic 9(16)  value 717445350.\n          05 pic 9(16)  value 720000000.\n          05 pic 9(16)  value 725594112.\n          05 pic 9(16)  value 729000000.\n          05 pic 9(16)  value 732421875.\n          05 pic 9(16)  value 737280000.\n          05 pic 9(16)  value 738112500.\n          05 pic 9(16)  value 746496000.\n          05 pic 9(16)  value 750000000.\n          05 pic 9(16)  value 754974720.\n          05 pic 9(16)  value 755827200.\n          05 pic 9(16)  value 759375000.\n          05 pic 9(16)  value 764411904.\n          05 pic 9(16)  value 765275040.\n          05 pic 9(16)  value 768000000.\n          05 pic 9(16)  value 774840978.\n          05 pic 9(16)  value 777600000.\n          05 pic 9(16)  value 781250000.\n          05 pic 9(16)  value 786432000.\n          05 pic 9(16)  value 787320000.\n          05 pic 9(16)  value 791015625.\n          05 pic 9(16)  value 796262400.\n          05 pic 9(16)  value 797161500.\n          05 pic 9(16)  value 800000000.\n          05 pic 9(16)  value 805306368.\n          05 pic 9(16)  value 806215680.\n          05 pic 9(16)  value 810000000.\n          05 pic 9(16)  value 816293376.\n          05 pic 9(16)  value 819200000.\n          05 pic 9(16)  value 820125000.\n          05 pic 9(16)  value 829440000.\n          05 pic 9(16)  value 838860800.\n          05 pic 9(16)  value 839808000.\n          05 pic 9(16)  value 843750000.\n          05 pic 9(16)  value 849346560.\n          05 pic 9(16)  value 850305600.\n          05 pic 9(16)  value 854296875.\n          05 pic 9(16)  value 859963392.\n          05 pic 9(16)  value 860934420.\n          05 pic 9(16)  value 864000000.\n          05 pic 9(16)  value 874800000.\n          05 pic 9(16)  value 878906250.\n          05 pic 9(16)  value 884736000.\n          05 pic 9(16)  value 885735000.\n          05 pic 9(16)  value 895795200.\n          05 pic 9(16)  value 900000000.\n          05 pic 9(16)  value 905969664.\n          05 pic 9(16)  value 906992640.\n          05 pic 9(16)  value 911250000.\n          05 pic 9(16)  value 918330048.\n          05 pic 9(16)  value 921600000.\n          05 pic 9(16)  value 922640625.\n          05 pic 9(16)  value 933120000.\n          05 pic 9(16)  value 937500000.\n          05 pic 9(16)  value 943718400.\n          05 pic 9(16)  value 944784000.\n          05 pic 9(16)  value 949218750.\n          05 pic 9(16)  value 955514880.\n          05 pic 9(16)  value 956593800.\n          05 pic 9(16)  value 960000000.\n          05 pic 9(16)  value 967458816.\n          05 pic 9(16)  value 972000000.\n          05 pic 9(16)  value 976562500.\n          05 pic 9(16)  value 983040000.\n          05 pic 9(16)  value 984150000.\n          05 pic 9(16)  value 995328000.\n          05 pic 9(16)  value 996451875.\n          05 pic 9(16)  value 1000000000.\n          05 pic 9(16)  value 1006632960.\n          05 pic 9(16)  value 1007769600.\n          05 pic 9(16)  value 1012500000.\n          05 pic 9(16)  value 1019215872.\n          05 pic 9(16)  value 1020366720.\n          05 pic 9(16)  value 1024000000.\n          05 pic 9(16)  value 1025156250.\n          05 pic 9(16)  value 1033121304.\n          05 pic 9(16)  value 1036800000.\n          05 pic 9(16)  value 1048576000.\n          05 pic 9(16)  value 1049760000.\n          05 pic 9(16)  value 1054687500.\n          05 pic 9(16)  value 1061683200.\n          05 pic 9(16)  value 1062882000.\n          05 pic 9(16)  value 1073741824.\n          05 pic 9(16)  value 1074954240.\n          05 pic 9(16)  value 1076168025.\n          05 pic 9(16)  value 1080000000.\n          05 pic 9(16)  value 1088391168.\n          05 pic 9(16)  value 1093500000.\n          05 pic 9(16)  value 1105920000.\n          05 pic 9(16)  value 1107168750.\n          05 pic 9(16)  value 1119744000.\n          05 pic 9(16)  value 1125000000.\n          05 pic 9(16)  value 1132462080.\n          05 pic 9(16)  value 1133740800.\n          05 pic 9(16)  value 1139062500.\n          05 pic 9(16)  value 1146617856.\n          05 pic 9(16)  value 1147912560.\n          05 pic 9(16)  value 1152000000.\n          05 pic 9(16)  value 1162261467.\n          05 pic 9(16)  value 1166400000.\n          05 pic 9(16)  value 1171875000.\n          05 pic 9(16)  value 1179648000.\n          05 pic 9(16)  value 1180980000.\n          05 pic 9(16)  value 1194393600.\n          05 pic 9(16)  value 1195742250.\n          05 pic 9(16)  value 1200000000.\n          05 pic 9(16)  value 1207959552.\n          05 pic 9(16)  value 1209323520.\n          05 pic 9(16)  value 1215000000.\n          05 pic 9(16)  value 1220703125.\n          05 pic 9(16)  value 1224440064.\n          05 pic 9(16)  value 1228800000.\n          05 pic 9(16)  value 1230187500.\n          05 pic 9(16)  value 1244160000.\n          05 pic 9(16)  value 1250000000.\n          05 pic 9(16)  value 1258291200.\n          05 pic 9(16)  value 1259712000.\n          05 pic 9(16)  value 1265625000.\n          05 pic 9(16)  value 1274019840.\n          05 pic 9(16)  value 1275458400.\n          05 pic 9(16)  value 1280000000.\n          05 pic 9(16)  value 1289945088.\n          05 pic 9(16)  value 1291401630.\n          05 pic 9(16)  value 1296000000.\n          05 pic 9(16)  value 1310720000.\n          05 pic 9(16)  value 1312200000.\n          05 pic 9(16)  value 1318359375.\n          05 pic 9(16)  value 1327104000.\n          05 pic 9(16)  value 1328602500.\n          05 pic 9(16)  value 1342177280.\n          05 pic 9(16)  value 1343692800.\n          05 pic 9(16)  value 1350000000.\n          05 pic 9(16)  value 1358954496.\n          05 pic 9(16)  value 1360488960.\n          05 pic 9(16)  value 1366875000.\n          05 pic 9(16)  value 1377495072.\n          05 pic 9(16)  value 1382400000.\n          05 pic 9(16)  value 1399680000.\n          05 pic 9(16)  value 1406250000.\n          05 pic 9(16)  value 1415577600.\n          05 pic 9(16)  value 1417176000.\n          05 pic 9(16)  value 1423828125.\n          05 pic 9(16)  value 1433272320.\n          05 pic 9(16)  value 1434890700.\n          05 pic 9(16)  value 1440000000.\n          05 pic 9(16)  value 1451188224.\n          05 pic 9(16)  value 1458000000.\n          05 pic 9(16)  value 1464843750.\n          05 pic 9(16)  value 1474560000.\n          05 pic 9(16)  value 1476225000.\n          05 pic 9(16)  value 1492992000.\n          05 pic 9(16)  value 1500000000.\n          05 pic 9(16)  value 1509949440.\n          05 pic 9(16)  value 1511654400.\n          05 pic 9(16)  value 1518750000.\n          05 pic 9(16)  value 1528823808.\n          05 pic 9(16)  value 1530550080.\n          05 pic 9(16)  value 1536000000.\n          05 pic 9(16)  value 1537734375.\n          05 pic 9(16)  value 1549681956.\n          05 pic 9(16)  value 1555200000.\n          05 pic 9(16)  value 1562500000.\n          05 pic 9(16)  value 1572864000.\n          05 pic 9(16)  value 1574640000.\n          05 pic 9(16)  value 1582031250.\n          05 pic 9(16)  value 1592524800.\n          05 pic 9(16)  value 1594323000.\n          05 pic 9(16)  value 1600000000.\n          05 pic 9(16)  value 1610612736.\n          05 pic 9(16)  value 1612431360.\n          05 pic 9(16)  value 1620000000.\n          05 pic 9(16)  value 1632586752.\n          05 pic 9(16)  value 1638400000.\n          05 pic 9(16)  value 1640250000.\n          05 pic 9(16)  value 1658880000.\n          05 pic 9(16)  value 1660753125.\n          05 pic 9(16)  value 1677721600.\n          05 pic 9(16)  value 1679616000.\n          05 pic 9(16)  value 1687500000.\n          05 pic 9(16)  value 1698693120.\n          05 pic 9(16)  value 1700611200.\n          05 pic 9(16)  value 1708593750.\n          05 pic 9(16)  value 1719926784.\n          05 pic 9(16)  value 1721868840.\n          05 pic 9(16)  value 1728000000.\n          05 pic 9(16)  value 1749600000.\n          05 pic 9(16)  value 1757812500.\n          05 pic 9(16)  value 1769472000.\n          05 pic 9(16)  value 1771470000.\n          05 pic 9(16)  value 1791590400.\n          05 pic 9(16)  value 1793613375.\n          05 pic 9(16)  value 1800000000.\n          05 pic 9(16)  value 1811939328.\n          05 pic 9(16)  value 1813985280.\n          05 pic 9(16)  value 1822500000.\n          05 pic 9(16)  value 1836660096.\n          05 pic 9(16)  value 1843200000.\n          05 pic 9(16)  value 1845281250.\n          05 pic 9(16)  value 1866240000.\n          05 pic 9(16)  value 1875000000.\n          05 pic 9(16)  value 1887436800.\n          05 pic 9(16)  value 1889568000.\n          05 pic 9(16)  value 1898437500.\n          05 pic 9(16)  value 1911029760.\n          05 pic 9(16)  value 1913187600.\n          05 pic 9(16)  value 1920000000.\n          05 pic 9(16)  value 1934917632.\n          05 pic 9(16)  value 1937102445.\n          05 pic 9(16)  value 1944000000.\n          05 pic 9(16)  value 1953125000.\n          05 pic 9(16)  value 1966080000.\n          05 pic 9(16)  value 1968300000.\n          05 pic 9(16)  value 1990656000.\n          05 pic 9(16)  value 1992903750.\n          05 pic 9(16)  value 2000000000.\n          05 pic 9(16)  value 2013265920.\n          05 pic 9(16)  value 2015539200.\n          05 pic 9(16)  value 2025000000.\n          05 pic 9(16)  value 2038431744.\n          05 pic 9(16)  value 2040733440.\n          05 pic 9(16)  value 2048000000.\n          05 pic 9(16)  value 2050312500.\n          05 pic 9(16)  value 2066242608.\n          05 pic 9(16)  value 2073600000.\n          05 pic 9(16)  value 2097152000.\n          05 pic 9(16)  value 2099520000.\n          05 pic 9(16)  value 2109375000.\n          05 pic 9(16)  value 2123366400.\n          05 pic 9(16)  value 2125764000.\n          05 pic 9(16)  value 2147483648.\n          05 pic 9(16)  value 2149908480.\n          05 pic 9(16)  value 2152336050.\n          05 pic 9(16)  value 2160000000.\n          05 pic 9(16)  value 2176782336.\n          05 pic 9(16)  value 2187000000.\n          05 pic 9(16)  value 2197265625.\n          05 pic 9(16)  value 2211840000.\n          05 pic 9(16)  value 2214337500.\n          05 pic 9(16)  value 2239488000.\n          05 pic 9(16)  value 2250000000.\n          05 pic 9(16)  value 2264924160.\n          05 pic 9(16)  value 2267481600.\n          05 pic 9(16)  value 2278125000.\n          05 pic 9(16)  value 2293235712.\n          05 pic 9(16)  value 2295825120.\n          05 pic 9(16)  value 2304000000.\n          05 pic 9(16)  value 2324522934.\n          05 pic 9(16)  value 2332800000.\n          05 pic 9(16)  value 2343750000.\n          05 pic 9(16)  value 2359296000.\n          05 pic 9(16)  value 2361960000.\n          05 pic 9(16)  value 2373046875.\n          05 pic 9(16)  value 2388787200.\n          05 pic 9(16)  value 2391484500.\n          05 pic 9(16)  value 2400000000.\n          05 pic 9(16)  value 2415919104.\n          05 pic 9(16)  value 2418647040.\n          05 pic 9(16)  value 2430000000.\n          05 pic 9(16)  value 2441406250.\n          05 pic 9(16)  value 2448880128.\n          05 pic 9(16)  value 2457600000.\n          05 pic 9(16)  value 2460375000.\n          05 pic 9(16)  value 2488320000.\n          05 pic 9(16)  value 2500000000.\n          05 pic 9(16)  value 2516582400.\n          05 pic 9(16)  value 2519424000.\n          05 pic 9(16)  value 2531250000.\n          05 pic 9(16)  value 2548039680.\n          05 pic 9(16)  value 2550916800.\n          05 pic 9(16)  value 2560000000.\n          05 pic 9(16)  value 2562890625.\n          05 pic 9(16)  value 2579890176.\n          05 pic 9(16)  value 2582803260.\n          05 pic 9(16)  value 2592000000.\n          05 pic 9(16)  value 2621440000.\n          05 pic 9(16)  value 2624400000.\n          05 pic 9(16)  value 2636718750.\n          05 pic 9(16)  value 2654208000.\n          05 pic 9(16)  value 2657205000.\n          05 pic 9(16)  value 2684354560.\n          05 pic 9(16)  value 2687385600.\n          05 pic 9(16)  value 2700000000.\n          05 pic 9(16)  value 2717908992.\n          05 pic 9(16)  value 2720977920.\n          05 pic 9(16)  value 2733750000.\n          05 pic 9(16)  value 2754990144.\n          05 pic 9(16)  value 2764800000.\n          05 pic 9(16)  value 2767921875.\n          05 pic 9(16)  value 2799360000.\n          05 pic 9(16)  value 2812500000.\n          05 pic 9(16)  value 2831155200.\n          05 pic 9(16)  value 2834352000.\n          05 pic 9(16)  value 2847656250.\n          05 pic 9(16)  value 2866544640.\n          05 pic 9(16)  value 2869781400.\n          05 pic 9(16)  value 2880000000.\n          05 pic 9(16)  value 2902376448.\n          05 pic 9(16)  value 2916000000.\n          05 pic 9(16)  value 2929687500.\n          05 pic 9(16)  value 2949120000.\n          05 pic 9(16)  value 2952450000.\n          05 pic 9(16)  value 2985984000.\n          05 pic 9(16)  value 2989355625.\n          05 pic 9(16)  value 3000000000.\n          05 pic 9(16)  value 3019898880.\n          05 pic 9(16)  value 3023308800.\n          05 pic 9(16)  value 3037500000.\n          05 pic 9(16)  value 3057647616.\n          05 pic 9(16)  value 3061100160.\n          05 pic 9(16)  value 3072000000.\n          05 pic 9(16)  value 3075468750.\n          05 pic 9(16)  value 3099363912.\n          05 pic 9(16)  value 3110400000.\n          05 pic 9(16)  value 3125000000.\n          05 pic 9(16)  value 3145728000.\n          05 pic 9(16)  value 3149280000.\n          05 pic 9(16)  value 3164062500.\n          05 pic 9(16)  value 3185049600.\n          05 pic 9(16)  value 3188646000.\n          05 pic 9(16)  value 3200000000.\n          05 pic 9(16)  value 3221225472.\n          05 pic 9(16)  value 3224862720.\n          05 pic 9(16)  value 3228504075.\n          05 pic 9(16)  value 3240000000.\n          05 pic 9(16)  value 3265173504.\n          05 pic 9(16)  value 3276800000.\n          05 pic 9(16)  value 3280500000.\n          05 pic 9(16)  value 3317760000.\n          05 pic 9(16)  value 3321506250.\n          05 pic 9(16)  value 3355443200.\n          05 pic 9(16)  value 3359232000.\n          05 pic 9(16)  value 3375000000.\n          05 pic 9(16)  value 3397386240.\n          05 pic 9(16)  value 3401222400.\n          05 pic 9(16)  value 3417187500.\n          05 pic 9(16)  value 3439853568.\n          05 pic 9(16)  value 3443737680.\n          05 pic 9(16)  value 3456000000.\n          05 pic 9(16)  value 3486784401.\n          05 pic 9(16)  value 3499200000.\n          05 pic 9(16)  value 3515625000.\n          05 pic 9(16)  value 3538944000.\n          05 pic 9(16)  value 3542940000.\n          05 pic 9(16)  value 3583180800.\n          05 pic 9(16)  value 3587226750.\n          05 pic 9(16)  value 3600000000.\n          05 pic 9(16)  value 3623878656.\n          05 pic 9(16)  value 3627970560.\n          05 pic 9(16)  value 3645000000.\n          05 pic 9(16)  value 3662109375.\n          05 pic 9(16)  value 3673320192.\n          05 pic 9(16)  value 3686400000.\n          05 pic 9(16)  value 3690562500.\n          05 pic 9(16)  value 3732480000.\n          05 pic 9(16)  value 3750000000.\n          05 pic 9(16)  value 3774873600.\n          05 pic 9(16)  value 3779136000.\n          05 pic 9(16)  value 3796875000.\n          05 pic 9(16)  value 3822059520.\n          05 pic 9(16)  value 3826375200.\n          05 pic 9(16)  value 3840000000.\n          05 pic 9(16)  value 3869835264.\n          05 pic 9(16)  value 3874204890.\n          05 pic 9(16)  value 3888000000.\n          05 pic 9(16)  value 3906250000.\n          05 pic 9(16)  value 3932160000.\n          05 pic 9(16)  value 3936600000.\n          05 pic 9(16)  value 3955078125.\n          05 pic 9(16)  value 3981312000.\n          05 pic 9(16)  value 3985807500.\n          05 pic 9(16)  value 4000000000.\n          05 pic 9(16)  value 4026531840.\n          05 pic 9(16)  value 4031078400.\n          05 pic 9(16)  value 4050000000.\n          05 pic 9(16)  value 4076863488.\n          05 pic 9(16)  value 4081466880.\n          05 pic 9(16)  value 4096000000.\n          05 pic 9(16)  value 4100625000.\n          05 pic 9(16)  value 4132485216.\n          05 pic 9(16)  value 4147200000.\n          05 pic 9(16)  value 4194304000.\n          05 pic 9(16)  value 4199040000.\n          05 pic 9(16)  value 4218750000.\n          05 pic 9(16)  value 4246732800.\n          05 pic 9(16)  value 4251528000.\n          05 pic 9(16)  value 4271484375.\n          05 pic 9(16)  value 4294967296.\n          05 pic 9(16)  value 4299816960.\n          05 pic 9(16)  value 4304672100.\n          05 pic 9(16)  value 4320000000.\n          05 pic 9(16)  value 4353564672.\n          05 pic 9(16)  value 4374000000.\n          05 pic 9(16)  value 4394531250.\n          05 pic 9(16)  value 4423680000.\n          05 pic 9(16)  value 4428675000.\n          05 pic 9(16)  value 4478976000.\n          05 pic 9(16)  value 4500000000.\n          05 pic 9(16)  value 4529848320.\n          05 pic 9(16)  value 4534963200.\n          05 pic 9(16)  value 4556250000.\n          05 pic 9(16)  value 4586471424.\n          05 pic 9(16)  value 4591650240.\n          05 pic 9(16)  value 4608000000.\n          05 pic 9(16)  value 4613203125.\n          05 pic 9(16)  value 4649045868.\n          05 pic 9(16)  value 4665600000.\n          05 pic 9(16)  value 4687500000.\n          05 pic 9(16)  value 4718592000.\n          05 pic 9(16)  value 4723920000.\n          05 pic 9(16)  value 4746093750.\n          05 pic 9(16)  value 4777574400.\n          05 pic 9(16)  value 4782969000.\n          05 pic 9(16)  value 4800000000.\n          05 pic 9(16)  value 4831838208.\n          05 pic 9(16)  value 4837294080.\n          05 pic 9(16)  value 4860000000.\n          05 pic 9(16)  value 4882812500.\n          05 pic 9(16)  value 4897760256.\n          05 pic 9(16)  value 4915200000.\n          05 pic 9(16)  value 4920750000.\n          05 pic 9(16)  value 4976640000.\n          05 pic 9(16)  value 4982259375.\n          05 pic 9(16)  value 5000000000.\n          05 pic 9(16)  value 5033164800.\n          05 pic 9(16)  value 5038848000.\n          05 pic 9(16)  value 5062500000.\n          05 pic 9(16)  value 5096079360.\n          05 pic 9(16)  value 5101833600.\n          05 pic 9(16)  value 5120000000.\n          05 pic 9(16)  value 5125781250.\n          05 pic 9(16)  value 5159780352.\n          05 pic 9(16)  value 5165606520.\n          05 pic 9(16)  value 5184000000.\n          05 pic 9(16)  value 5242880000.\n          05 pic 9(16)  value 5248800000.\n          05 pic 9(16)  value 5273437500.\n          05 pic 9(16)  value 5308416000.\n          05 pic 9(16)  value 5314410000.\n          05 pic 9(16)  value 5368709120.\n          05 pic 9(16)  value 5374771200.\n          05 pic 9(16)  value 5380840125.\n          05 pic 9(16)  value 5400000000.\n          05 pic 9(16)  value 5435817984.\n          05 pic 9(16)  value 5441955840.\n          05 pic 9(16)  value 5467500000.\n          05 pic 9(16)  value 5509980288.\n          05 pic 9(16)  value 5529600000.\n          05 pic 9(16)  value 5535843750.\n          05 pic 9(16)  value 5598720000.\n          05 pic 9(16)  value 5625000000.\n          05 pic 9(16)  value 5662310400.\n          05 pic 9(16)  value 5668704000.\n          05 pic 9(16)  value 5695312500.\n          05 pic 9(16)  value 5733089280.\n          05 pic 9(16)  value 5739562800.\n          05 pic 9(16)  value 5760000000.\n          05 pic 9(16)  value 5804752896.\n          05 pic 9(16)  value 5811307335.\n          05 pic 9(16)  value 5832000000.\n          05 pic 9(16)  value 5859375000.\n          05 pic 9(16)  value 5898240000.\n          05 pic 9(16)  value 5904900000.\n          05 pic 9(16)  value 5971968000.\n          05 pic 9(16)  value 5978711250.\n          05 pic 9(16)  value 6000000000.\n          05 pic 9(16)  value 6039797760.\n          05 pic 9(16)  value 6046617600.\n          05 pic 9(16)  value 6075000000.\n          05 pic 9(16)  value 6103515625.\n          05 pic 9(16)  value 6115295232.\n          05 pic 9(16)  value 6122200320.\n          05 pic 9(16)  value 6144000000.\n          05 pic 9(16)  value 6150937500.\n          05 pic 9(16)  value 6198727824.\n          05 pic 9(16)  value 6220800000.\n          05 pic 9(16)  value 6250000000.\n          05 pic 9(16)  value 6291456000.\n          05 pic 9(16)  value 6298560000.\n          05 pic 9(16)  value 6328125000.\n          05 pic 9(16)  value 6370099200.\n          05 pic 9(16)  value 6377292000.\n          05 pic 9(16)  value 6400000000.\n          05 pic 9(16)  value 6442450944.\n          05 pic 9(16)  value 6449725440.\n          05 pic 9(16)  value 6457008150.\n          05 pic 9(16)  value 6480000000.\n          05 pic 9(16)  value 6530347008.\n          05 pic 9(16)  value 6553600000.\n          05 pic 9(16)  value 6561000000.\n          05 pic 9(16)  value 6591796875.\n          05 pic 9(16)  value 6635520000.\n          05 pic 9(16)  value 6643012500.\n          05 pic 9(16)  value 6710886400.\n          05 pic 9(16)  value 6718464000.\n          05 pic 9(16)  value 6750000000.\n          05 pic 9(16)  value 6794772480.\n          05 pic 9(16)  value 6802444800.\n          05 pic 9(16)  value 6834375000.\n          05 pic 9(16)  value 6879707136.\n          05 pic 9(16)  value 6887475360.\n          05 pic 9(16)  value 6912000000.\n          05 pic 9(16)  value 6973568802.\n          05 pic 9(16)  value 6998400000.\n          05 pic 9(16)  value 7031250000.\n          05 pic 9(16)  value 7077888000.\n          05 pic 9(16)  value 7085880000.\n          05 pic 9(16)  value 7119140625.\n          05 pic 9(16)  value 7166361600.\n          05 pic 9(16)  value 7174453500.\n          05 pic 9(16)  value 7200000000.\n          05 pic 9(16)  value 7247757312.\n          05 pic 9(16)  value 7255941120.\n          05 pic 9(16)  value 7290000000.\n          05 pic 9(16)  value 7324218750.\n          05 pic 9(16)  value 7346640384.\n          05 pic 9(16)  value 7372800000.\n          05 pic 9(16)  value 7381125000.\n          05 pic 9(16)  value 7464960000.\n          05 pic 9(16)  value 7500000000.\n          05 pic 9(16)  value 7549747200.\n          05 pic 9(16)  value 7558272000.\n          05 pic 9(16)  value 7593750000.\n          05 pic 9(16)  value 7644119040.\n          05 pic 9(16)  value 7652750400.\n          05 pic 9(16)  value 7680000000.\n          05 pic 9(16)  value 7688671875.\n          05 pic 9(16)  value 7739670528.\n          05 pic 9(16)  value 7748409780.\n          05 pic 9(16)  value 7776000000.\n          05 pic 9(16)  value 7812500000.\n          05 pic 9(16)  value 7864320000.\n          05 pic 9(16)  value 7873200000.\n          05 pic 9(16)  value 7910156250.\n          05 pic 9(16)  value 7962624000.\n          05 pic 9(16)  value 7971615000.\n          05 pic 9(16)  value 8000000000.\n          05 pic 9(16)  value 8053063680.\n          05 pic 9(16)  value 8062156800.\n          05 pic 9(16)  value 8100000000.\n          05 pic 9(16)  value 8153726976.\n          05 pic 9(16)  value 8162933760.\n          05 pic 9(16)  value 8192000000.\n          05 pic 9(16)  value 8201250000.\n          05 pic 9(16)  value 8264970432.\n          05 pic 9(16)  value 8294400000.\n          05 pic 9(16)  value 8303765625.\n          05 pic 9(16)  value 8388608000.\n          05 pic 9(16)  value 8398080000.\n          05 pic 9(16)  value 8437500000.\n          05 pic 9(16)  value 8493465600.\n          05 pic 9(16)  value 8503056000.\n          05 pic 9(16)  value 8542968750.\n          05 pic 9(16)  value 8589934592.\n          05 pic 9(16)  value 8599633920.\n          05 pic 9(16)  value 8609344200.\n          05 pic 9(16)  value 8640000000.\n          05 pic 9(16)  value 8707129344.\n          05 pic 9(16)  value 8748000000.\n          05 pic 9(16)  value 8789062500.\n          05 pic 9(16)  value 8847360000.\n          05 pic 9(16)  value 8857350000.\n          05 pic 9(16)  value 8957952000.\n          05 pic 9(16)  value 8968066875.\n          05 pic 9(16)  value 9000000000.\n          05 pic 9(16)  value 9059696640.\n          05 pic 9(16)  value 9069926400.\n          05 pic 9(16)  value 9112500000.\n          05 pic 9(16)  value 9172942848.\n          05 pic 9(16)  value 9183300480.\n          05 pic 9(16)  value 9216000000.\n          05 pic 9(16)  value 9226406250.\n          05 pic 9(16)  value 9298091736.\n          05 pic 9(16)  value 9331200000.\n          05 pic 9(16)  value 9375000000.\n          05 pic 9(16)  value 9437184000.\n          05 pic 9(16)  value 9447840000.\n          05 pic 9(16)  value 9492187500.\n          05 pic 9(16)  value 9555148800.\n          05 pic 9(16)  value 9565938000.\n          05 pic 9(16)  value 9600000000.\n          05 pic 9(16)  value 9663676416.\n          05 pic 9(16)  value 9674588160.\n          05 pic 9(16)  value 9685512225.\n          05 pic 9(16)  value 9720000000.\n          05 pic 9(16)  value 9765625000.\n          05 pic 9(16)  value 9795520512.\n          05 pic 9(16)  value 9830400000.\n          05 pic 9(16)  value 9841500000.\n          05 pic 9(16)  value 9953280000.\n          05 pic 9(16)  value 9964518750.\n          05 pic 9(16)  value 10000000000.\n          05 pic 9(16)  value 10066329600.\n          05 pic 9(16)  value 10077696000.\n          05 pic 9(16)  value 10125000000.\n          05 pic 9(16)  value 10192158720.\n          05 pic 9(16)  value 10203667200.\n          05 pic 9(16)  value 10240000000.\n          05 pic 9(16)  value 10251562500.\n          05 pic 9(16)  value 10319560704.\n          05 pic 9(16)  value 10331213040.\n          05 pic 9(16)  value 10368000000.\n          05 pic 9(16)  value 10460353203.\n          05 pic 9(16)  value 10485760000.\n          05 pic 9(16)  value 10497600000.\n          05 pic 9(16)  value 10546875000.\n          05 pic 9(16)  value 10616832000.\n          05 pic 9(16)  value 10628820000.\n          05 pic 9(16)  value 10737418240.\n          05 pic 9(16)  value 10749542400.\n          05 pic 9(16)  value 10761680250.\n          05 pic 9(16)  value 10800000000.\n          05 pic 9(16)  value 10871635968.\n          05 pic 9(16)  value 10883911680.\n          05 pic 9(16)  value 10935000000.\n          05 pic 9(16)  value 10986328125.\n          05 pic 9(16)  value 11019960576.\n          05 pic 9(16)  value 11059200000.\n          05 pic 9(16)  value 11071687500.\n          05 pic 9(16)  value 11197440000.\n          05 pic 9(16)  value 11250000000.\n          05 pic 9(16)  value 11324620800.\n          05 pic 9(16)  value 11337408000.\n          05 pic 9(16)  value 11390625000.\n          05 pic 9(16)  value 11466178560.\n          05 pic 9(16)  value 11479125600.\n          05 pic 9(16)  value 11520000000.\n          05 pic 9(16)  value 11609505792.\n          05 pic 9(16)  value 11622614670.\n          05 pic 9(16)  value 11664000000.\n          05 pic 9(16)  value 11718750000.\n          05 pic 9(16)  value 11796480000.\n          05 pic 9(16)  value 11809800000.\n          05 pic 9(16)  value 11865234375.\n          05 pic 9(16)  value 11943936000.\n          05 pic 9(16)  value 11957422500.\n          05 pic 9(16)  value 12000000000.\n          05 pic 9(16)  value 12079595520.\n          05 pic 9(16)  value 12093235200.\n          05 pic 9(16)  value 12150000000.\n          05 pic 9(16)  value 12207031250.\n          05 pic 9(16)  value 12230590464.\n          05 pic 9(16)  value 12244400640.\n          05 pic 9(16)  value 12288000000.\n          05 pic 9(16)  value 12301875000.\n          05 pic 9(16)  value 12397455648.\n          05 pic 9(16)  value 12441600000.\n          05 pic 9(16)  value 12500000000.\n          05 pic 9(16)  value 12582912000.\n          05 pic 9(16)  value 12597120000.\n          05 pic 9(16)  value 12656250000.\n          05 pic 9(16)  value 12740198400.\n          05 pic 9(16)  value 12754584000.\n          05 pic 9(16)  value 12800000000.\n          05 pic 9(16)  value 12814453125.\n          05 pic 9(16)  value 12884901888.\n          05 pic 9(16)  value 12899450880.\n          05 pic 9(16)  value 12914016300.\n          05 pic 9(16)  value 12960000000.\n          05 pic 9(16)  value 13060694016.\n          05 pic 9(16)  value 13107200000.\n          05 pic 9(16)  value 13122000000.\n          05 pic 9(16)  value 13183593750.\n          05 pic 9(16)  value 13271040000.\n          05 pic 9(16)  value 13286025000.\n          05 pic 9(16)  value 13421772800.\n          05 pic 9(16)  value 13436928000.\n          05 pic 9(16)  value 13500000000.\n          05 pic 9(16)  value 13589544960.\n          05 pic 9(16)  value 13604889600.\n          05 pic 9(16)  value 13668750000.\n          05 pic 9(16)  value 13759414272.\n          05 pic 9(16)  value 13774950720.\n          05 pic 9(16)  value 13824000000.\n          05 pic 9(16)  value 13839609375.\n          05 pic 9(16)  value 13947137604.\n          05 pic 9(16)  value 13996800000.\n          05 pic 9(16)  value 14062500000.\n          05 pic 9(16)  value 14155776000.\n          05 pic 9(16)  value 14171760000.\n          05 pic 9(16)  value 14238281250.\n          05 pic 9(16)  value 14332723200.\n          05 pic 9(16)  value 14348907000.\n          05 pic 9(16)  value 14400000000.\n          05 pic 9(16)  value 14495514624.\n          05 pic 9(16)  value 14511882240.\n          05 pic 9(16)  value 14580000000.\n          05 pic 9(16)  value 14648437500.\n          05 pic 9(16)  value 14693280768.\n          05 pic 9(16)  value 14745600000.\n          05 pic 9(16)  value 14762250000.\n          05 pic 9(16)  value 14929920000.\n          05 pic 9(16)  value 14946778125.\n          05 pic 9(16)  value 15000000000.\n          05 pic 9(16)  value 15099494400.\n          05 pic 9(16)  value 15116544000.\n          05 pic 9(16)  value 15187500000.\n          05 pic 9(16)  value 15288238080.\n          05 pic 9(16)  value 15305500800.\n          05 pic 9(16)  value 15360000000.\n          05 pic 9(16)  value 15377343750.\n          05 pic 9(16)  value 15479341056.\n          05 pic 9(16)  value 15496819560.\n          05 pic 9(16)  value 15552000000.\n          05 pic 9(16)  value 15625000000.\n          05 pic 9(16)  value 15728640000.\n          05 pic 9(16)  value 15746400000.\n          05 pic 9(16)  value 15820312500.\n          05 pic 9(16)  value 15925248000.\n          05 pic 9(16)  value 15943230000.\n          05 pic 9(16)  value 16000000000.\n          05 pic 9(16)  value 16106127360.\n          05 pic 9(16)  value 16124313600.\n          05 pic 9(16)  value 16142520375.\n          05 pic 9(16)  value 16200000000.\n          05 pic 9(16)  value 16307453952.\n          05 pic 9(16)  value 16325867520.\n          05 pic 9(16)  value 16384000000.\n          05 pic 9(16)  value 16402500000.\n          05 pic 9(16)  value 16529940864.\n          05 pic 9(16)  value 16588800000.\n          05 pic 9(16)  value 16607531250.\n          05 pic 9(16)  value 16777216000.\n          05 pic 9(16)  value 16796160000.\n          05 pic 9(16)  value 16875000000.\n          05 pic 9(16)  value 16986931200.\n          05 pic 9(16)  value 17006112000.\n          05 pic 9(16)  value 17085937500.\n          05 pic 9(16)  value 17179869184.\n          05 pic 9(16)  value 17199267840.\n          05 pic 9(16)  value 17218688400.\n          05 pic 9(16)  value 17280000000.\n          05 pic 9(16)  value 17414258688.\n          05 pic 9(16)  value 17433922005.\n          05 pic 9(16)  value 17496000000.\n          05 pic 9(16)  value 17578125000.\n          05 pic 9(16)  value 17694720000.\n          05 pic 9(16)  value 17714700000.\n          05 pic 9(16)  value 17915904000.\n          05 pic 9(16)  value 17936133750.\n          05 pic 9(16)  value 18000000000.\n          05 pic 9(16)  value 18119393280.\n          05 pic 9(16)  value 18139852800.\n          05 pic 9(16)  value 18225000000.\n          05 pic 9(16)  value 18310546875.\n          05 pic 9(16)  value 18345885696.\n          05 pic 9(16)  value 18366600960.\n          05 pic 9(16)  value 18432000000.\n          05 pic 9(16)  value 18452812500.\n          05 pic 9(16)  value 18596183472.\n          05 pic 9(16)  value 18662400000.\n          05 pic 9(16)  value 18750000000.\n          05 pic 9(16)  value 18874368000.\n          05 pic 9(16)  value 18895680000.\n          05 pic 9(16)  value 18984375000.\n          05 pic 9(16)  value 19110297600.\n          05 pic 9(16)  value 19131876000.\n          05 pic 9(16)  value 19200000000.\n          05 pic 9(16)  value 19327352832.\n          05 pic 9(16)  value 19349176320.\n          05 pic 9(16)  value 19371024450.\n          05 pic 9(16)  value 19440000000.\n          05 pic 9(16)  value 19531250000.\n          05 pic 9(16)  value 19591041024.\n          05 pic 9(16)  value 19660800000.\n          05 pic 9(16)  value 19683000000.\n          05 pic 9(16)  value 19775390625.\n          05 pic 9(16)  value 19906560000.\n          05 pic 9(16)  value 19929037500.\n          05 pic 9(16)  value 20000000000.\n          05 pic 9(16)  value 20132659200.\n          05 pic 9(16)  value 20155392000.\n          05 pic 9(16)  value 20250000000.\n          05 pic 9(16)  value 20384317440.\n          05 pic 9(16)  value 20407334400.\n          05 pic 9(16)  value 20480000000.\n          05 pic 9(16)  value 20503125000.\n          05 pic 9(16)  value 20639121408.\n          05 pic 9(16)  value 20662426080.\n          05 pic 9(16)  value 20736000000.\n          05 pic 9(16)  value 20920706406.\n          05 pic 9(16)  value 20971520000.\n          05 pic 9(16)  value 20995200000.\n          05 pic 9(16)  value 21093750000.\n          05 pic 9(16)  value 21233664000.\n          05 pic 9(16)  value 21257640000.\n          05 pic 9(16)  value 21357421875.\n          05 pic 9(16)  value 21474836480.\n          05 pic 9(16)  value 21499084800.\n          05 pic 9(16)  value 21523360500.\n          05 pic 9(16)  value 21600000000.\n          05 pic 9(16)  value 21743271936.\n          05 pic 9(16)  value 21767823360.\n          05 pic 9(16)  value 21870000000.\n          05 pic 9(16)  value 21972656250.\n          05 pic 9(16)  value 22039921152.\n          05 pic 9(16)  value 22118400000.\n          05 pic 9(16)  value 22143375000.\n          05 pic 9(16)  value 22394880000.\n          05 pic 9(16)  value 22500000000.\n          05 pic 9(16)  value 22649241600.\n          05 pic 9(16)  value 22674816000.\n          05 pic 9(16)  value 22781250000.\n          05 pic 9(16)  value 22932357120.\n          05 pic 9(16)  value 22958251200.\n          05 pic 9(16)  value 23040000000.\n          05 pic 9(16)  value 23066015625.\n          05 pic 9(16)  value 23219011584.\n          05 pic 9(16)  value 23245229340.\n          05 pic 9(16)  value 23328000000.\n          05 pic 9(16)  value 23437500000.\n          05 pic 9(16)  value 23592960000.\n          05 pic 9(16)  value 23619600000.\n          05 pic 9(16)  value 23730468750.\n          05 pic 9(16)  value 23887872000.\n          05 pic 9(16)  value 23914845000.\n          05 pic 9(16)  value 24000000000.\n          05 pic 9(16)  value 24159191040.\n          05 pic 9(16)  value 24186470400.\n          05 pic 9(16)  value 24300000000.\n          05 pic 9(16)  value 24414062500.\n          05 pic 9(16)  value 24461180928.\n          05 pic 9(16)  value 24488801280.\n          05 pic 9(16)  value 24576000000.\n          05 pic 9(16)  value 24603750000.\n          05 pic 9(16)  value 24794911296.\n          05 pic 9(16)  value 24883200000.\n          05 pic 9(16)  value 24911296875.\n          05 pic 9(16)  value 25000000000.\n          05 pic 9(16)  value 25165824000.\n          05 pic 9(16)  value 25194240000.\n          05 pic 9(16)  value 25312500000.\n          05 pic 9(16)  value 25480396800.\n          05 pic 9(16)  value 25509168000.\n          05 pic 9(16)  value 25600000000.\n          05 pic 9(16)  value 25628906250.\n          05 pic 9(16)  value 25769803776.\n          05 pic 9(16)  value 25798901760.\n          05 pic 9(16)  value 25828032600.\n          05 pic 9(16)  value 25920000000.\n          05 pic 9(16)  value 26121388032.\n          05 pic 9(16)  value 26214400000.\n          05 pic 9(16)  value 26244000000.\n          05 pic 9(16)  value 26367187500.\n          05 pic 9(16)  value 26542080000.\n          05 pic 9(16)  value 26572050000.\n          05 pic 9(16)  value 26843545600.\n          05 pic 9(16)  value 26873856000.\n          05 pic 9(16)  value 26904200625.\n          05 pic 9(16)  value 27000000000.\n          05 pic 9(16)  value 27179089920.\n          05 pic 9(16)  value 27209779200.\n          05 pic 9(16)  value 27337500000.\n          05 pic 9(16)  value 27518828544.\n          05 pic 9(16)  value 27549901440.\n          05 pic 9(16)  value 27648000000.\n          05 pic 9(16)  value 27679218750.\n          05 pic 9(16)  value 27894275208.\n          05 pic 9(16)  value 27993600000.\n          05 pic 9(16)  value 28125000000.\n          05 pic 9(16)  value 28311552000.\n          05 pic 9(16)  value 28343520000.\n          05 pic 9(16)  value 28476562500.\n          05 pic 9(16)  value 28665446400.\n          05 pic 9(16)  value 28697814000.\n          05 pic 9(16)  value 28800000000.\n          05 pic 9(16)  value 28991029248.\n          05 pic 9(16)  value 29023764480.\n          05 pic 9(16)  value 29056536675.\n          05 pic 9(16)  value 29160000000.\n          05 pic 9(16)  value 29296875000.\n          05 pic 9(16)  value 29386561536.\n          05 pic 9(16)  value 29491200000.\n          05 pic 9(16)  value 29524500000.\n          05 pic 9(16)  value 29859840000.\n          05 pic 9(16)  value 29893556250.\n          05 pic 9(16)  value 30000000000.\n          05 pic 9(16)  value 30198988800.\n          05 pic 9(16)  value 30233088000.\n          05 pic 9(16)  value 30375000000.\n          05 pic 9(16)  value 30517578125.\n          05 pic 9(16)  value 30576476160.\n          05 pic 9(16)  value 30611001600.\n          05 pic 9(16)  value 30720000000.\n          05 pic 9(16)  value 30754687500.\n          05 pic 9(16)  value 30958682112.\n          05 pic 9(16)  value 30993639120.\n          05 pic 9(16)  value 31104000000.\n          05 pic 9(16)  value 31250000000.\n          05 pic 9(16)  value 31381059609.\n          05 pic 9(16)  value 31457280000.\n          05 pic 9(16)  value 31492800000.\n          05 pic 9(16)  value 31640625000.\n          05 pic 9(16)  value 31850496000.\n          05 pic 9(16)  value 31886460000.\n          05 pic 9(16)  value 32000000000.\n          05 pic 9(16)  value 32212254720.\n          05 pic 9(16)  value 32248627200.\n          05 pic 9(16)  value 32285040750.\n          05 pic 9(16)  value 32400000000.\n          05 pic 9(16)  value 32614907904.\n          05 pic 9(16)  value 32651735040.\n          05 pic 9(16)  value 32768000000.\n          05 pic 9(16)  value 32805000000.\n          05 pic 9(16)  value 32958984375.\n          05 pic 9(16)  value 33059881728.\n          05 pic 9(16)  value 33177600000.\n          05 pic 9(16)  value 33215062500.\n          05 pic 9(16)  value 33554432000.\n          05 pic 9(16)  value 33592320000.\n          05 pic 9(16)  value 33750000000.\n          05 pic 9(16)  value 33973862400.\n          05 pic 9(16)  value 34012224000.\n          05 pic 9(16)  value 34171875000.\n          05 pic 9(16)  value 34359738368.\n          05 pic 9(16)  value 34398535680.\n          05 pic 9(16)  value 34437376800.\n          05 pic 9(16)  value 34560000000.\n          05 pic 9(16)  value 34828517376.\n          05 pic 9(16)  value 34867844010.\n          05 pic 9(16)  value 34992000000.\n          05 pic 9(16)  value 35156250000.\n          05 pic 9(16)  value 35389440000.\n          05 pic 9(16)  value 35429400000.\n          05 pic 9(16)  value 35595703125.\n          05 pic 9(16)  value 35831808000.\n          05 pic 9(16)  value 35872267500.\n          05 pic 9(16)  value 36000000000.\n          05 pic 9(16)  value 36238786560.\n          05 pic 9(16)  value 36279705600.\n          05 pic 9(16)  value 36450000000.\n          05 pic 9(16)  value 36621093750.\n          05 pic 9(16)  value 36691771392.\n          05 pic 9(16)  value 36733201920.\n          05 pic 9(16)  value 36864000000.\n          05 pic 9(16)  value 36905625000.\n          05 pic 9(16)  value 37192366944.\n          05 pic 9(16)  value 37324800000.\n          05 pic 9(16)  value 37500000000.\n          05 pic 9(16)  value 37748736000.\n          05 pic 9(16)  value 37791360000.\n          05 pic 9(16)  value 37968750000.\n          05 pic 9(16)  value 38220595200.\n          05 pic 9(16)  value 38263752000.\n          05 pic 9(16)  value 38400000000.\n          05 pic 9(16)  value 38443359375.\n          05 pic 9(16)  value 38654705664.\n          05 pic 9(16)  value 38698352640.\n          05 pic 9(16)  value 38742048900.\n          05 pic 9(16)  value 38880000000.\n          05 pic 9(16)  value 39062500000.\n          05 pic 9(16)  value 39182082048.\n          05 pic 9(16)  value 39321600000.\n          05 pic 9(16)  value 39366000000.\n          05 pic 9(16)  value 39550781250.\n          05 pic 9(16)  value 39813120000.\n          05 pic 9(16)  value 39858075000.\n          05 pic 9(16)  value 40000000000.\n          05 pic 9(16)  value 40265318400.\n          05 pic 9(16)  value 40310784000.\n          05 pic 9(16)  value 40500000000.\n          05 pic 9(16)  value 40768634880.\n          05 pic 9(16)  value 40814668800.\n          05 pic 9(16)  value 40960000000.\n          05 pic 9(16)  value 41006250000.\n          05 pic 9(16)  value 41278242816.\n          05 pic 9(16)  value 41324852160.\n          05 pic 9(16)  value 41472000000.\n          05 pic 9(16)  value 41518828125.\n          05 pic 9(16)  value 41841412812.\n          05 pic 9(16)  value 41943040000.\n          05 pic 9(16)  value 41990400000.\n          05 pic 9(16)  value 42187500000.\n          05 pic 9(16)  value 42467328000.\n          05 pic 9(16)  value 42515280000.\n          05 pic 9(16)  value 42714843750.\n          05 pic 9(16)  value 42949672960.\n          05 pic 9(16)  value 42998169600.\n          05 pic 9(16)  value 43046721000.\n          05 pic 9(16)  value 43200000000.\n          05 pic 9(16)  value 43486543872.\n          05 pic 9(16)  value 43535646720.\n          05 pic 9(16)  value 43740000000.\n          05 pic 9(16)  value 43945312500.\n          05 pic 9(16)  value 44079842304.\n          05 pic 9(16)  value 44236800000.\n          05 pic 9(16)  value 44286750000.\n          05 pic 9(16)  value 44789760000.\n          05 pic 9(16)  value 44840334375.\n          05 pic 9(16)  value 45000000000.\n          05 pic 9(16)  value 45298483200.\n          05 pic 9(16)  value 45349632000.\n          05 pic 9(16)  value 45562500000.\n          05 pic 9(16)  value 45864714240.\n          05 pic 9(16)  value 45916502400.\n          05 pic 9(16)  value 46080000000.\n          05 pic 9(16)  value 46132031250.\n          05 pic 9(16)  value 46438023168.\n          05 pic 9(16)  value 46490458680.\n          05 pic 9(16)  value 46656000000.\n          05 pic 9(16)  value 46875000000.\n          05 pic 9(16)  value 47185920000.\n          05 pic 9(16)  value 47239200000.\n          05 pic 9(16)  value 47460937500.\n          05 pic 9(16)  value 47775744000.\n          05 pic 9(16)  value 47829690000.\n          05 pic 9(16)  value 48000000000.\n          05 pic 9(16)  value 48318382080.\n          05 pic 9(16)  value 48372940800.\n          05 pic 9(16)  value 48427561125.\n          05 pic 9(16)  value 48600000000.\n          05 pic 9(16)  value 48828125000.\n          05 pic 9(16)  value 48922361856.\n          05 pic 9(16)  value 48977602560.\n          05 pic 9(16)  value 49152000000.\n          05 pic 9(16)  value 49207500000.\n          05 pic 9(16)  value 49589822592.\n          05 pic 9(16)  value 49766400000.\n          05 pic 9(16)  value 49822593750.\n          05 pic 9(16)  value 50000000000.\n          05 pic 9(16)  value 50331648000.\n          05 pic 9(16)  value 50388480000.\n          05 pic 9(16)  value 50625000000.\n          05 pic 9(16)  value 50960793600.\n          05 pic 9(16)  value 51018336000.\n          05 pic 9(16)  value 51200000000.\n          05 pic 9(16)  value 51257812500.\n          05 pic 9(16)  value 51539607552.\n          05 pic 9(16)  value 51597803520.\n          05 pic 9(16)  value 51656065200.\n          05 pic 9(16)  value 51840000000.\n          05 pic 9(16)  value 52242776064.\n          05 pic 9(16)  value 52301766015.\n          05 pic 9(16)  value 52428800000.\n          05 pic 9(16)  value 52488000000.\n          05 pic 9(16)  value 52734375000.\n          05 pic 9(16)  value 53084160000.\n          05 pic 9(16)  value 53144100000.\n          05 pic 9(16)  value 53687091200.\n          05 pic 9(16)  value 53747712000.\n          05 pic 9(16)  value 53808401250.\n          05 pic 9(16)  value 54000000000.\n          05 pic 9(16)  value 54358179840.\n          05 pic 9(16)  value 54419558400.\n          05 pic 9(16)  value 54675000000.\n          05 pic 9(16)  value 54931640625.\n          05 pic 9(16)  value 55037657088.\n          05 pic 9(16)  value 55099802880.\n          05 pic 9(16)  value 55296000000.\n          05 pic 9(16)  value 55358437500.\n          05 pic 9(16)  value 55788550416.\n          05 pic 9(16)  value 55987200000.\n          05 pic 9(16)  value 56250000000.\n          05 pic 9(16)  value 56623104000.\n          05 pic 9(16)  value 56687040000.\n          05 pic 9(16)  value 56953125000.\n          05 pic 9(16)  value 57330892800.\n          05 pic 9(16)  value 57395628000.\n          05 pic 9(16)  value 57600000000.\n          05 pic 9(16)  value 57982058496.\n          05 pic 9(16)  value 58047528960.\n          05 pic 9(16)  value 58113073350.\n          05 pic 9(16)  value 58320000000.\n          05 pic 9(16)  value 58593750000.\n          05 pic 9(16)  value 58773123072.\n          05 pic 9(16)  value 58982400000.\n          05 pic 9(16)  value 59049000000.\n          05 pic 9(16)  value 59326171875.\n          05 pic 9(16)  value 59719680000.\n          05 pic 9(16)  value 59787112500.\n          05 pic 9(16)  value 60000000000.\n          05 pic 9(16)  value 60397977600.\n          05 pic 9(16)  value 60466176000.\n          05 pic 9(16)  value 60750000000.\n          05 pic 9(16)  value 61035156250.\n          05 pic 9(16)  value 61152952320.\n          05 pic 9(16)  value 61222003200.\n          05 pic 9(16)  value 61440000000.\n          05 pic 9(16)  value 61509375000.\n          05 pic 9(16)  value 61917364224.\n          05 pic 9(16)  value 61987278240.\n          05 pic 9(16)  value 62208000000.\n          05 pic 9(16)  value 62500000000.\n          05 pic 9(16)  value 62762119218.\n          05 pic 9(16)  value 62914560000.\n          05 pic 9(16)  value 62985600000.\n          05 pic 9(16)  value 63281250000.\n          05 pic 9(16)  value 63700992000.\n          05 pic 9(16)  value 63772920000.\n          05 pic 9(16)  value 64000000000.\n          05 pic 9(16)  value 64072265625.\n          05 pic 9(16)  value 64424509440.\n          05 pic 9(16)  value 64497254400.\n          05 pic 9(16)  value 64570081500.\n          05 pic 9(16)  value 64800000000.\n          05 pic 9(16)  value 65229815808.\n          05 pic 9(16)  value 65303470080.\n          05 pic 9(16)  value 65536000000.\n          05 pic 9(16)  value 65610000000.\n          05 pic 9(16)  value 65917968750.\n          05 pic 9(16)  value 66119763456.\n          05 pic 9(16)  value 66355200000.\n          05 pic 9(16)  value 66430125000.\n          05 pic 9(16)  value 67108864000.\n          05 pic 9(16)  value 67184640000.\n          05 pic 9(16)  value 67500000000.\n          05 pic 9(16)  value 67947724800.\n          05 pic 9(16)  value 68024448000.\n          05 pic 9(16)  value 68343750000.\n          05 pic 9(16)  value 68719476736.\n          05 pic 9(16)  value 68797071360.\n          05 pic 9(16)  value 68874753600.\n          05 pic 9(16)  value 69120000000.\n          05 pic 9(16)  value 69198046875.\n          05 pic 9(16)  value 69657034752.\n          05 pic 9(16)  value 69735688020.\n          05 pic 9(16)  value 69984000000.\n          05 pic 9(16)  value 70312500000.\n          05 pic 9(16)  value 70778880000.\n          05 pic 9(16)  value 70858800000.\n          05 pic 9(16)  value 71191406250.\n          05 pic 9(16)  value 71663616000.\n          05 pic 9(16)  value 71744535000.\n          05 pic 9(16)  value 72000000000.\n          05 pic 9(16)  value 72477573120.\n          05 pic 9(16)  value 72559411200.\n          05 pic 9(16)  value 72900000000.\n          05 pic 9(16)  value 73242187500.\n          05 pic 9(16)  value 73383542784.\n          05 pic 9(16)  value 73466403840.\n          05 pic 9(16)  value 73728000000.\n          05 pic 9(16)  value 73811250000.\n          05 pic 9(16)  value 74384733888.\n          05 pic 9(16)  value 74649600000.\n          05 pic 9(16)  value 74733890625.\n          05 pic 9(16)  value 75000000000.\n          05 pic 9(16)  value 75497472000.\n          05 pic 9(16)  value 75582720000.\n          05 pic 9(16)  value 75937500000.\n          05 pic 9(16)  value 76441190400.\n          05 pic 9(16)  value 76527504000.\n          05 pic 9(16)  value 76800000000.\n          05 pic 9(16)  value 76886718750.\n          05 pic 9(16)  value 77309411328.\n          05 pic 9(16)  value 77396705280.\n          05 pic 9(16)  value 77484097800.\n          05 pic 9(16)  value 77760000000.\n          05 pic 9(16)  value 78125000000.\n          05 pic 9(16)  value 78364164096.\n          05 pic 9(16)  value 78643200000.\n          05 pic 9(16)  value 78732000000.\n          05 pic 9(16)  value 79101562500.\n          05 pic 9(16)  value 79626240000.\n          05 pic 9(16)  value 79716150000.\n          05 pic 9(16)  value 80000000000.\n          05 pic 9(16)  value 80530636800.\n          05 pic 9(16)  value 80621568000.\n          05 pic 9(16)  value 80712601875.\n          05 pic 9(16)  value 81000000000.\n          05 pic 9(16)  value 81537269760.\n          05 pic 9(16)  value 81629337600.\n          05 pic 9(16)  value 81920000000.\n          05 pic 9(16)  value 82012500000.\n          05 pic 9(16)  value 82556485632.\n          05 pic 9(16)  value 82649704320.\n          05 pic 9(16)  value 82944000000.\n          05 pic 9(16)  value 83037656250.\n          05 pic 9(16)  value 83682825624.\n          05 pic 9(16)  value 83886080000.\n          05 pic 9(16)  value 83980800000.\n          05 pic 9(16)  value 84375000000.\n          05 pic 9(16)  value 84934656000.\n          05 pic 9(16)  value 85030560000.\n          05 pic 9(16)  value 85429687500.\n          05 pic 9(16)  value 85899345920.\n          05 pic 9(16)  value 85996339200.\n          05 pic 9(16)  value 86093442000.\n          05 pic 9(16)  value 86400000000.\n          05 pic 9(16)  value 86973087744.\n          05 pic 9(16)  value 87071293440.\n          05 pic 9(16)  value 87169610025.\n          05 pic 9(16)  value 87480000000.\n          05 pic 9(16)  value 87890625000.\n          05 pic 9(16)  value 88159684608.\n          05 pic 9(16)  value 88473600000.\n          05 pic 9(16)  value 88573500000.\n          05 pic 9(16)  value 89579520000.\n          05 pic 9(16)  value 89680668750.\n          05 pic 9(16)  value 90000000000.\n          05 pic 9(16)  value 90596966400.\n          05 pic 9(16)  value 90699264000.\n          05 pic 9(16)  value 91125000000.\n          05 pic 9(16)  value 91552734375.\n          05 pic 9(16)  value 91729428480.\n          05 pic 9(16)  value 91833004800.\n          05 pic 9(16)  value 92160000000.\n          05 pic 9(16)  value 92264062500.\n          05 pic 9(16)  value 92876046336.\n          05 pic 9(16)  value 92980917360.\n          05 pic 9(16)  value 93312000000.\n          05 pic 9(16)  value 93750000000.\n          05 pic 9(16)  value 94143178827.\n          05 pic 9(16)  value 94371840000.\n          05 pic 9(16)  value 94478400000.\n          05 pic 9(16)  value 94921875000.\n          05 pic 9(16)  value 95551488000.\n          05 pic 9(16)  value 95659380000.\n          05 pic 9(16)  value 96000000000.\n          05 pic 9(16)  value 96636764160.\n          05 pic 9(16)  value 96745881600.\n          05 pic 9(16)  value 96855122250.\n          05 pic 9(16)  value 97200000000.\n          05 pic 9(16)  value 97656250000.\n          05 pic 9(16)  value 97844723712.\n          05 pic 9(16)  value 97955205120.\n          05 pic 9(16)  value 98304000000.\n          05 pic 9(16)  value 98415000000.\n          05 pic 9(16)  value 98876953125.\n          05 pic 9(16)  value 99179645184.\n          05 pic 9(16)  value 99532800000.\n          05 pic 9(16)  value 99645187500.\n          05 pic 9(16)  value 100000000000.\n          05 pic 9(16)  value 100663296000.\n          05 pic 9(16)  value 100776960000.\n          05 pic 9(16)  value 101250000000.\n          05 pic 9(16)  value 101921587200.\n          05 pic 9(16)  value 102036672000.\n          05 pic 9(16)  value 102400000000.\n          05 pic 9(16)  value 102515625000.\n          05 pic 9(16)  value 103079215104.\n          05 pic 9(16)  value 103195607040.\n          05 pic 9(16)  value 103312130400.\n          05 pic 9(16)  value 103680000000.\n          05 pic 9(16)  value 104485552128.\n          05 pic 9(16)  value 104603532030.\n          05 pic 9(16)  value 104857600000.\n          05 pic 9(16)  value 104976000000.\n          05 pic 9(16)  value 105468750000.\n          05 pic 9(16)  value 106168320000.\n          05 pic 9(16)  value 106288200000.\n          05 pic 9(16)  value 106787109375.\n          05 pic 9(16)  value 107374182400.\n          05 pic 9(16)  value 107495424000.\n          05 pic 9(16)  value 107616802500.\n          05 pic 9(16)  value 108000000000.\n          05 pic 9(16)  value 108716359680.\n          05 pic 9(16)  value 108839116800.\n          05 pic 9(16)  value 109350000000.\n          05 pic 9(16)  value 109863281250.\n          05 pic 9(16)  value 110075314176.\n          05 pic 9(16)  value 110199605760.\n          05 pic 9(16)  value 110592000000.\n          05 pic 9(16)  value 110716875000.\n          05 pic 9(16)  value 111577100832.\n          05 pic 9(16)  value 111974400000.\n          05 pic 9(16)  value 112500000000.\n          05 pic 9(16)  value 113246208000.\n          05 pic 9(16)  value 113374080000.\n          05 pic 9(16)  value 113906250000.\n          05 pic 9(16)  value 114661785600.\n          05 pic 9(16)  value 114791256000.\n          05 pic 9(16)  value 115200000000.\n          05 pic 9(16)  value 115330078125.\n          05 pic 9(16)  value 115964116992.\n          05 pic 9(16)  value 116095057920.\n          05 pic 9(16)  value 116226146700.\n          05 pic 9(16)  value 116640000000.\n          05 pic 9(16)  value 117187500000.\n          05 pic 9(16)  value 117546246144.\n          05 pic 9(16)  value 117964800000.\n          05 pic 9(16)  value 118098000000.\n          05 pic 9(16)  value 118652343750.\n          05 pic 9(16)  value 119439360000.\n          05 pic 9(16)  value 119574225000.\n          05 pic 9(16)  value 120000000000.\n          05 pic 9(16)  value 120795955200.\n          05 pic 9(16)  value 120932352000.\n          05 pic 9(16)  value 121500000000.\n          05 pic 9(16)  value 122070312500.\n          05 pic 9(16)  value 122305904640.\n          05 pic 9(16)  value 122444006400.\n          05 pic 9(16)  value 122880000000.\n          05 pic 9(16)  value 123018750000.\n          05 pic 9(16)  value 123834728448.\n          05 pic 9(16)  value 123974556480.\n          05 pic 9(16)  value 124416000000.\n          05 pic 9(16)  value 124556484375.\n          05 pic 9(16)  value 125000000000.\n          05 pic 9(16)  value 125524238436.\n          05 pic 9(16)  value 125829120000.\n          05 pic 9(16)  value 125971200000.\n          05 pic 9(16)  value 126562500000.\n          05 pic 9(16)  value 127401984000.\n          05 pic 9(16)  value 127545840000.\n          05 pic 9(16)  value 128000000000.\n          05 pic 9(16)  value 128144531250.\n          05 pic 9(16)  value 128849018880.\n          05 pic 9(16)  value 128994508800.\n          05 pic 9(16)  value 129140163000.\n          05 pic 9(16)  value 129600000000.\n          05 pic 9(16)  value 130459631616.\n          05 pic 9(16)  value 130606940160.\n          05 pic 9(16)  value 131072000000.\n          05 pic 9(16)  value 131220000000.\n          05 pic 9(16)  value 131835937500.\n          05 pic 9(16)  value 132239526912.\n          05 pic 9(16)  value 132710400000.\n          05 pic 9(16)  value 132860250000.\n          05 pic 9(16)  value 134217728000.\n          05 pic 9(16)  value 134369280000.\n          05 pic 9(16)  value 134521003125.\n          05 pic 9(16)  value 135000000000.\n          05 pic 9(16)  value 135895449600.\n          05 pic 9(16)  value 136048896000.\n          05 pic 9(16)  value 136687500000.\n          05 pic 9(16)  value 137438953472.\n          05 pic 9(16)  value 137594142720.\n          05 pic 9(16)  value 137749507200.\n          05 pic 9(16)  value 138240000000.\n          05 pic 9(16)  value 138396093750.\n          05 pic 9(16)  value 139314069504.\n          05 pic 9(16)  value 139471376040.\n          05 pic 9(16)  value 139968000000.\n          05 pic 9(16)  value 140625000000.\n          05 pic 9(16)  value 141557760000.\n          05 pic 9(16)  value 141717600000.\n          05 pic 9(16)  value 142382812500.\n          05 pic 9(16)  value 143327232000.\n          05 pic 9(16)  value 143489070000.\n          05 pic 9(16)  value 144000000000.\n          05 pic 9(16)  value 144955146240.\n          05 pic 9(16)  value 145118822400.\n          05 pic 9(16)  value 145282683375.\n          05 pic 9(16)  value 145800000000.\n          05 pic 9(16)  value 146484375000.\n          05 pic 9(16)  value 146767085568.\n          05 pic 9(16)  value 146932807680.\n          05 pic 9(16)  value 147456000000.\n          05 pic 9(16)  value 147622500000.\n          05 pic 9(16)  value 148769467776.\n          05 pic 9(16)  value 149299200000.\n          05 pic 9(16)  value 149467781250.\n          05 pic 9(16)  value 150000000000.\n          05 pic 9(16)  value 150994944000.\n          05 pic 9(16)  value 151165440000.\n          05 pic 9(16)  value 151875000000.\n          05 pic 9(16)  value 152587890625.\n          05 pic 9(16)  value 152882380800.\n          05 pic 9(16)  value 153055008000.\n          05 pic 9(16)  value 153600000000.\n          05 pic 9(16)  value 153773437500.\n          05 pic 9(16)  value 154618822656.\n          05 pic 9(16)  value 154793410560.\n          05 pic 9(16)  value 154968195600.\n          05 pic 9(16)  value 155520000000.\n          05 pic 9(16)  value 156250000000.\n          05 pic 9(16)  value 156728328192.\n          05 pic 9(16)  value 156905298045.\n          05 pic 9(16)  value 157286400000.\n          05 pic 9(16)  value 157464000000.\n          05 pic 9(16)  value 158203125000.\n          05 pic 9(16)  value 159252480000.\n          05 pic 9(16)  value 159432300000.\n          05 pic 9(16)  value 160000000000.\n          05 pic 9(16)  value 161061273600.\n          05 pic 9(16)  value 161243136000.\n          05 pic 9(16)  value 161425203750.\n          05 pic 9(16)  value 162000000000.\n          05 pic 9(16)  value 163074539520.\n          05 pic 9(16)  value 163258675200.\n          05 pic 9(16)  value 163840000000.\n          05 pic 9(16)  value 164025000000.\n          05 pic 9(16)  value 164794921875.\n          05 pic 9(16)  value 165112971264.\n          05 pic 9(16)  value 165299408640.\n          05 pic 9(16)  value 165888000000.\n          05 pic 9(16)  value 166075312500.\n          05 pic 9(16)  value 167365651248.\n          05 pic 9(16)  value 167772160000.\n          05 pic 9(16)  value 167961600000.\n          05 pic 9(16)  value 168750000000.\n          05 pic 9(16)  value 169869312000.\n          05 pic 9(16)  value 170061120000.\n          05 pic 9(16)  value 170859375000.\n          05 pic 9(16)  value 171798691840.\n          05 pic 9(16)  value 171992678400.\n          05 pic 9(16)  value 172186884000.\n          05 pic 9(16)  value 172800000000.\n          05 pic 9(16)  value 173946175488.\n          05 pic 9(16)  value 174142586880.\n          05 pic 9(16)  value 174339220050.\n          05 pic 9(16)  value 174960000000.\n          05 pic 9(16)  value 175781250000.\n          05 pic 9(16)  value 176319369216.\n          05 pic 9(16)  value 176947200000.\n          05 pic 9(16)  value 177147000000.\n          05 pic 9(16)  value 177978515625.\n          05 pic 9(16)  value 179159040000.\n          05 pic 9(16)  value 179361337500.\n          05 pic 9(16)  value 180000000000.\n          05 pic 9(16)  value 181193932800.\n          05 pic 9(16)  value 181398528000.\n          05 pic 9(16)  value 182250000000.\n          05 pic 9(16)  value 183105468750.\n          05 pic 9(16)  value 183458856960.\n          05 pic 9(16)  value 183666009600.\n          05 pic 9(16)  value 184320000000.\n          05 pic 9(16)  value 184528125000.\n          05 pic 9(16)  value 185752092672.\n          05 pic 9(16)  value 185961834720.\n          05 pic 9(16)  value 186624000000.\n          05 pic 9(16)  value 187500000000.\n          05 pic 9(16)  value 188286357654.\n          05 pic 9(16)  value 188743680000.\n          05 pic 9(16)  value 188956800000.\n          05 pic 9(16)  value 189843750000.\n          05 pic 9(16)  value 191102976000.\n          05 pic 9(16)  value 191318760000.\n          05 pic 9(16)  value 192000000000.\n          05 pic 9(16)  value 192216796875.\n          05 pic 9(16)  value 193273528320.\n          05 pic 9(16)  value 193491763200.\n          05 pic 9(16)  value 193710244500.\n          05 pic 9(16)  value 194400000000.\n          05 pic 9(16)  value 195312500000.\n          05 pic 9(16)  value 195689447424.\n          05 pic 9(16)  value 195910410240.\n          05 pic 9(16)  value 196608000000.\n          05 pic 9(16)  value 196830000000.\n          05 pic 9(16)  value 197753906250.\n          05 pic 9(16)  value 198359290368.\n          05 pic 9(16)  value 199065600000.\n          05 pic 9(16)  value 199290375000.\n          05 pic 9(16)  value 200000000000.\n          05 pic 9(16)  value 201326592000.\n          05 pic 9(16)  value 201553920000.\n          05 pic 9(16)  value 202500000000.\n          05 pic 9(16)  value 203843174400.\n          05 pic 9(16)  value 204073344000.\n          05 pic 9(16)  value 204800000000.\n          05 pic 9(16)  value 205031250000.\n          05 pic 9(16)  value 206158430208.\n          05 pic 9(16)  value 206391214080.\n          05 pic 9(16)  value 206624260800.\n          05 pic 9(16)  value 207360000000.\n          05 pic 9(16)  value 207594140625.\n          05 pic 9(16)  value 208971104256.\n          05 pic 9(16)  value 209207064060.\n          05 pic 9(16)  value 209715200000.\n          05 pic 9(16)  value 209952000000.\n          05 pic 9(16)  value 210937500000.\n          05 pic 9(16)  value 212336640000.\n          05 pic 9(16)  value 212576400000.\n          05 pic 9(16)  value 213574218750.\n          05 pic 9(16)  value 214748364800.\n          05 pic 9(16)  value 214990848000.\n          05 pic 9(16)  value 215233605000.\n          05 pic 9(16)  value 216000000000.\n          05 pic 9(16)  value 217432719360.\n          05 pic 9(16)  value 217678233600.\n          05 pic 9(16)  value 218700000000.\n          05 pic 9(16)  value 219726562500.\n          05 pic 9(16)  value 220150628352.\n          05 pic 9(16)  value 220399211520.\n          05 pic 9(16)  value 221184000000.\n          05 pic 9(16)  value 221433750000.\n          05 pic 9(16)  value 223154201664.\n          05 pic 9(16)  value 223948800000.\n          05 pic 9(16)  value 224201671875.\n          05 pic 9(16)  value 225000000000.\n          05 pic 9(16)  value 226492416000.\n          05 pic 9(16)  value 226748160000.\n          05 pic 9(16)  value 227812500000.\n          05 pic 9(16)  value 229323571200.\n          05 pic 9(16)  value 229582512000.\n          05 pic 9(16)  value 230400000000.\n          05 pic 9(16)  value 230660156250.\n          05 pic 9(16)  value 231928233984.\n          05 pic 9(16)  value 232190115840.\n          05 pic 9(16)  value 232452293400.\n          05 pic 9(16)  value 233280000000.\n          05 pic 9(16)  value 234375000000.\n          05 pic 9(16)  value 235092492288.\n          05 pic 9(16)  value 235929600000.\n          05 pic 9(16)  value 236196000000.\n          05 pic 9(16)  value 237304687500.\n          05 pic 9(16)  value 238878720000.\n          05 pic 9(16)  value 239148450000.\n          05 pic 9(16)  value 240000000000.\n          05 pic 9(16)  value 241591910400.\n          05 pic 9(16)  value 241864704000.\n          05 pic 9(16)  value 242137805625.\n          05 pic 9(16)  value 243000000000.\n          05 pic 9(16)  value 244140625000.\n          05 pic 9(16)  value 244611809280.\n          05 pic 9(16)  value 244888012800.\n          05 pic 9(16)  value 245760000000.\n          05 pic 9(16)  value 246037500000.\n          05 pic 9(16)  value 247669456896.\n          05 pic 9(16)  value 247949112960.\n          05 pic 9(16)  value 248832000000.\n          05 pic 9(16)  value 249112968750.\n          05 pic 9(16)  value 250000000000.\n          05 pic 9(16)  value 251048476872.\n          05 pic 9(16)  value 251658240000.\n          05 pic 9(16)  value 251942400000.\n          05 pic 9(16)  value 253125000000.\n          05 pic 9(16)  value 254803968000.\n          05 pic 9(16)  value 255091680000.\n          05 pic 9(16)  value 256000000000.\n          05 pic 9(16)  value 256289062500.\n          05 pic 9(16)  value 257698037760.\n          05 pic 9(16)  value 257989017600.\n          05 pic 9(16)  value 258280326000.\n          05 pic 9(16)  value 259200000000.\n          05 pic 9(16)  value 260919263232.\n          05 pic 9(16)  value 261213880320.\n          05 pic 9(16)  value 261508830075.\n          05 pic 9(16)  value 262144000000.\n          05 pic 9(16)  value 262440000000.\n          05 pic 9(16)  value 263671875000.\n          05 pic 9(16)  value 264479053824.\n          05 pic 9(16)  value 265420800000.\n          05 pic 9(16)  value 265720500000.\n          05 pic 9(16)  value 268435456000.\n          05 pic 9(16)  value 268738560000.\n          05 pic 9(16)  value 269042006250.\n          05 pic 9(16)  value 270000000000.\n          05 pic 9(16)  value 271790899200.\n          05 pic 9(16)  value 272097792000.\n          05 pic 9(16)  value 273375000000.\n          05 pic 9(16)  value 274658203125.\n          05 pic 9(16)  value 274877906944.\n          05 pic 9(16)  value 275188285440.\n          05 pic 9(16)  value 275499014400.\n          05 pic 9(16)  value 276480000000.\n          05 pic 9(16)  value 276792187500.\n          05 pic 9(16)  value 278628139008.\n          05 pic 9(16)  value 278942752080.\n          05 pic 9(16)  value 279936000000.\n          05 pic 9(16)  value 281250000000.\n          05 pic 9(16)  value 282429536481.\n          05 pic 9(16)  value 283115520000.\n          05 pic 9(16)  value 283435200000.\n          05 pic 9(16)  value 284765625000.\n          05 pic 9(16)  value 286654464000.\n          05 pic 9(16)  value 286978140000.\n          05 pic 9(16)  value 288000000000.\n          05 pic 9(16)  value 289910292480.\n          05 pic 9(16)  value 290237644800.\n          05 pic 9(16)  value 290565366750.\n          05 pic 9(16)  value 291600000000.\n          05 pic 9(16)  value 292968750000.\n          05 pic 9(16)  value 293534171136.\n          05 pic 9(16)  value 293865615360.\n          05 pic 9(16)  value 294912000000.\n          05 pic 9(16)  value 295245000000.\n          05 pic 9(16)  value 296630859375.\n          05 pic 9(16)  value 297538935552.\n          05 pic 9(16)  value 298598400000.\n          05 pic 9(16)  value 298935562500.\n          05 pic 9(16)  value 300000000000.\n          05 pic 9(16)  value 301989888000.\n          05 pic 9(16)  value 302330880000.\n          05 pic 9(16)  value 303750000000.\n          05 pic 9(16)  value 305175781250.\n          05 pic 9(16)  value 305764761600.\n          05 pic 9(16)  value 306110016000.\n          05 pic 9(16)  value 307200000000.\n          05 pic 9(16)  value 307546875000.\n          05 pic 9(16)  value 309237645312.\n          05 pic 9(16)  value 309586821120.\n          05 pic 9(16)  value 309936391200.\n          05 pic 9(16)  value 311040000000.\n          05 pic 9(16)  value 312500000000.\n          05 pic 9(16)  value 313456656384.\n          05 pic 9(16)  value 313810596090.\n          05 pic 9(16)  value 314572800000.\n          05 pic 9(16)  value 314928000000.\n          05 pic 9(16)  value 316406250000.\n          05 pic 9(16)  value 318504960000.\n          05 pic 9(16)  value 318864600000.\n          05 pic 9(16)  value 320000000000.\n          05 pic 9(16)  value 320361328125.\n          05 pic 9(16)  value 322122547200.\n          05 pic 9(16)  value 322486272000.\n          05 pic 9(16)  value 322850407500.\n          05 pic 9(16)  value 324000000000.\n          05 pic 9(16)  value 326149079040.\n          05 pic 9(16)  value 326517350400.\n          05 pic 9(16)  value 327680000000.\n          05 pic 9(16)  value 328050000000.\n          05 pic 9(16)  value 329589843750.\n          05 pic 9(16)  value 330225942528.\n          05 pic 9(16)  value 330598817280.\n          05 pic 9(16)  value 331776000000.\n          05 pic 9(16)  value 332150625000.\n          05 pic 9(16)  value 334731302496.\n          05 pic 9(16)  value 335544320000.\n          05 pic 9(16)  value 335923200000.\n          05 pic 9(16)  value 337500000000.\n          05 pic 9(16)  value 339738624000.\n          05 pic 9(16)  value 340122240000.\n          05 pic 9(16)  value 341718750000.\n          05 pic 9(16)  value 343597383680.\n          05 pic 9(16)  value 343985356800.\n          05 pic 9(16)  value 344373768000.\n          05 pic 9(16)  value 345600000000.\n          05 pic 9(16)  value 345990234375.\n          05 pic 9(16)  value 347892350976.\n          05 pic 9(16)  value 348285173760.\n          05 pic 9(16)  value 348678440100.\n          05 pic 9(16)  value 349920000000.\n          05 pic 9(16)  value 351562500000.\n          05 pic 9(16)  value 352638738432.\n          05 pic 9(16)  value 353894400000.\n          05 pic 9(16)  value 354294000000.\n          05 pic 9(16)  value 355957031250.\n          05 pic 9(16)  value 358318080000.\n          05 pic 9(16)  value 358722675000.\n          05 pic 9(16)  value 360000000000.\n          05 pic 9(16)  value 362387865600.\n          05 pic 9(16)  value 362797056000.\n          05 pic 9(16)  value 364500000000.\n          05 pic 9(16)  value 366210937500.\n          05 pic 9(16)  value 366917713920.\n          05 pic 9(16)  value 367332019200.\n          05 pic 9(16)  value 368640000000.\n          05 pic 9(16)  value 369056250000.\n          05 pic 9(16)  value 371504185344.\n          05 pic 9(16)  value 371923669440.\n          05 pic 9(16)  value 373248000000.\n          05 pic 9(16)  value 373669453125.\n          05 pic 9(16)  value 375000000000.\n          05 pic 9(16)  value 376572715308.\n          05 pic 9(16)  value 377487360000.\n          05 pic 9(16)  value 377913600000.\n          05 pic 9(16)  value 379687500000.\n          05 pic 9(16)  value 382205952000.\n          05 pic 9(16)  value 382637520000.\n          05 pic 9(16)  value 384000000000.\n          05 pic 9(16)  value 384433593750.\n          05 pic 9(16)  value 386547056640.\n          05 pic 9(16)  value 386983526400.\n          05 pic 9(16)  value 387420489000.\n          05 pic 9(16)  value 388800000000.\n          05 pic 9(16)  value 390625000000.\n          05 pic 9(16)  value 391378894848.\n          05 pic 9(16)  value 391820820480.\n          05 pic 9(16)  value 393216000000.\n          05 pic 9(16)  value 393660000000.\n          05 pic 9(16)  value 395507812500.\n          05 pic 9(16)  value 396718580736.\n          05 pic 9(16)  value 398131200000.\n          05 pic 9(16)  value 398580750000.\n          05 pic 9(16)  value 400000000000.\n          05 pic 9(16)  value 402653184000.\n          05 pic 9(16)  value 403107840000.\n          05 pic 9(16)  value 403563009375.\n          05 pic 9(16)  value 405000000000.\n          05 pic 9(16)  value 407686348800.\n          05 pic 9(16)  value 408146688000.\n          05 pic 9(16)  value 409600000000.\n          05 pic 9(16)  value 410062500000.\n          05 pic 9(16)  value 412316860416.\n          05 pic 9(16)  value 412782428160.\n          05 pic 9(16)  value 413248521600.\n          05 pic 9(16)  value 414720000000.\n          05 pic 9(16)  value 415188281250.\n          05 pic 9(16)  value 417942208512.\n          05 pic 9(16)  value 418414128120.\n          05 pic 9(16)  value 419430400000.\n          05 pic 9(16)  value 419904000000.\n          05 pic 9(16)  value 421875000000.\n          05 pic 9(16)  value 424673280000.\n          05 pic 9(16)  value 425152800000.\n          05 pic 9(16)  value 427148437500.\n          05 pic 9(16)  value 429496729600.\n          05 pic 9(16)  value 429981696000.\n          05 pic 9(16)  value 430467210000.\n          05 pic 9(16)  value 432000000000.\n          05 pic 9(16)  value 434865438720.\n          05 pic 9(16)  value 435356467200.\n          05 pic 9(16)  value 435848050125.\n          05 pic 9(16)  value 437400000000.\n          05 pic 9(16)  value 439453125000.\n          05 pic 9(16)  value 440301256704.\n          05 pic 9(16)  value 440798423040.\n          05 pic 9(16)  value 442368000000.\n          05 pic 9(16)  value 442867500000.\n          05 pic 9(16)  value 446308403328.\n          05 pic 9(16)  value 447897600000.\n          05 pic 9(16)  value 448403343750.\n          05 pic 9(16)  value 450000000000.\n          05 pic 9(16)  value 452984832000.\n          05 pic 9(16)  value 453496320000.\n          05 pic 9(16)  value 455625000000.\n          05 pic 9(16)  value 457763671875.\n          05 pic 9(16)  value 458647142400.\n          05 pic 9(16)  value 459165024000.\n          05 pic 9(16)  value 460800000000.\n          05 pic 9(16)  value 461320312500.\n          05 pic 9(16)  value 463856467968.\n          05 pic 9(16)  value 464380231680.\n          05 pic 9(16)  value 464904586800.\n          05 pic 9(16)  value 466560000000.\n          05 pic 9(16)  value 468750000000.\n          05 pic 9(16)  value 470184984576.\n          05 pic 9(16)  value 470715894135.\n          05 pic 9(16)  value 471859200000.\n          05 pic 9(16)  value 472392000000.\n          05 pic 9(16)  value 474609375000.\n          05 pic 9(16)  value 477757440000.\n          05 pic 9(16)  value 478296900000.\n          05 pic 9(16)  value 480000000000.\n          05 pic 9(16)  value 483183820800.\n          05 pic 9(16)  value 483729408000.\n          05 pic 9(16)  value 484275611250.\n          05 pic 9(16)  value 486000000000.\n          05 pic 9(16)  value 488281250000.\n          05 pic 9(16)  value 489223618560.\n          05 pic 9(16)  value 489776025600.\n          05 pic 9(16)  value 491520000000.\n          05 pic 9(16)  value 492075000000.\n          05 pic 9(16)  value 494384765625.\n          05 pic 9(16)  value 495338913792.\n          05 pic 9(16)  value 495898225920.\n          05 pic 9(16)  value 497664000000.\n          05 pic 9(16)  value 498225937500.\n          05 pic 9(16)  value 500000000000.\n          05 pic 9(16)  value 502096953744.\n          05 pic 9(16)  value 503316480000.\n          05 pic 9(16)  value 503884800000.\n          05 pic 9(16)  value 506250000000.\n          05 pic 9(16)  value 509607936000.\n          05 pic 9(16)  value 510183360000.\n          05 pic 9(16)  value 512000000000.\n          05 pic 9(16)  value 512578125000.\n          05 pic 9(16)  value 515396075520.\n          05 pic 9(16)  value 515978035200.\n          05 pic 9(16)  value 516560652000.\n          05 pic 9(16)  value 518400000000.\n          05 pic 9(16)  value 521838526464.\n          05 pic 9(16)  value 522427760640.\n          05 pic 9(16)  value 523017660150.\n          05 pic 9(16)  value 524288000000.\n          05 pic 9(16)  value 524880000000.\n          05 pic 9(16)  value 527343750000.\n          05 pic 9(16)  value 528958107648.\n          05 pic 9(16)  value 530841600000.\n          05 pic 9(16)  value 531441000000.\n          05 pic 9(16)  value 533935546875.\n          05 pic 9(16)  value 536870912000.\n          05 pic 9(16)  value 537477120000.\n          05 pic 9(16)  value 538084012500.\n          05 pic 9(16)  value 540000000000.\n          05 pic 9(16)  value 543581798400.\n          05 pic 9(16)  value 544195584000.\n          05 pic 9(16)  value 546750000000.\n          05 pic 9(16)  value 549316406250.\n          05 pic 9(16)  value 549755813888.\n          05 pic 9(16)  value 550376570880.\n          05 pic 9(16)  value 550998028800.\n          05 pic 9(16)  value 552960000000.\n          05 pic 9(16)  value 553584375000.\n          05 pic 9(16)  value 557256278016.\n          05 pic 9(16)  value 557885504160.\n          05 pic 9(16)  value 559872000000.\n          05 pic 9(16)  value 562500000000.\n          05 pic 9(16)  value 564859072962.\n          05 pic 9(16)  value 566231040000.\n          05 pic 9(16)  value 566870400000.\n          05 pic 9(16)  value 569531250000.\n          05 pic 9(16)  value 573308928000.\n          05 pic 9(16)  value 573956280000.\n          05 pic 9(16)  value 576000000000.\n          05 pic 9(16)  value 576650390625.\n          05 pic 9(16)  value 579820584960.\n          05 pic 9(16)  value 580475289600.\n          05 pic 9(16)  value 581130733500.\n          05 pic 9(16)  value 583200000000.\n          05 pic 9(16)  value 585937500000.\n          05 pic 9(16)  value 587068342272.\n          05 pic 9(16)  value 587731230720.\n          05 pic 9(16)  value 589824000000.\n          05 pic 9(16)  value 590490000000.\n          05 pic 9(16)  value 593261718750.\n          05 pic 9(16)  value 595077871104.\n          05 pic 9(16)  value 597196800000.\n          05 pic 9(16)  value 597871125000.\n          05 pic 9(16)  value 600000000000.\n          05 pic 9(16)  value 603979776000.\n          05 pic 9(16)  value 604661760000.\n          05 pic 9(16)  value 607500000000.\n          05 pic 9(16)  value 610351562500.\n          05 pic 9(16)  value 611529523200.\n          05 pic 9(16)  value 612220032000.\n          05 pic 9(16)  value 614400000000.\n          05 pic 9(16)  value 615093750000.\n          05 pic 9(16)  value 618475290624.\n          05 pic 9(16)  value 619173642240.\n          05 pic 9(16)  value 619872782400.\n          05 pic 9(16)  value 622080000000.\n          05 pic 9(16)  value 622782421875.\n          05 pic 9(16)  value 625000000000.\n          05 pic 9(16)  value 626913312768.\n          05 pic 9(16)  value 627621192180.\n          05 pic 9(16)  value 629145600000.\n          05 pic 9(16)  value 629856000000.\n          05 pic 9(16)  value 632812500000.\n          05 pic 9(16)  value 637009920000.\n          05 pic 9(16)  value 637729200000.\n          05 pic 9(16)  value 640000000000.\n          05 pic 9(16)  value 640722656250.\n          05 pic 9(16)  value 644245094400.\n          05 pic 9(16)  value 644972544000.\n          05 pic 9(16)  value 645700815000.\n          05 pic 9(16)  value 648000000000.\n          05 pic 9(16)  value 652298158080.\n          05 pic 9(16)  value 653034700800.\n          05 pic 9(16)  value 655360000000.\n          05 pic 9(16)  value 656100000000.\n          05 pic 9(16)  value 659179687500.\n          05 pic 9(16)  value 660451885056.\n          05 pic 9(16)  value 661197634560.\n          05 pic 9(16)  value 663552000000.\n          05 pic 9(16)  value 664301250000.\n          05 pic 9(16)  value 669462604992.\n          05 pic 9(16)  value 671088640000.\n          05 pic 9(16)  value 671846400000.\n          05 pic 9(16)  value 672605015625.\n          05 pic 9(16)  value 675000000000.\n          05 pic 9(16)  value 679477248000.\n          05 pic 9(16)  value 680244480000.\n          05 pic 9(16)  value 683437500000.\n          05 pic 9(16)  value 687194767360.\n          05 pic 9(16)  value 687970713600.\n          05 pic 9(16)  value 688747536000.\n          05 pic 9(16)  value 691200000000.\n          05 pic 9(16)  value 691980468750.\n          05 pic 9(16)  value 695784701952.\n          05 pic 9(16)  value 696570347520.\n          05 pic 9(16)  value 697356880200.\n          05 pic 9(16)  value 699840000000.\n          05 pic 9(16)  value 703125000000.\n          05 pic 9(16)  value 705277476864.\n          05 pic 9(16)  value 707788800000.\n          05 pic 9(16)  value 708588000000.\n          05 pic 9(16)  value 711914062500.\n          05 pic 9(16)  value 716636160000.\n          05 pic 9(16)  value 717445350000.\n          05 pic 9(16)  value 720000000000.\n          05 pic 9(16)  value 724775731200.\n          05 pic 9(16)  value 725594112000.\n          05 pic 9(16)  value 726413416875.\n          05 pic 9(16)  value 729000000000.\n          05 pic 9(16)  value 732421875000.\n          05 pic 9(16)  value 733835427840.\n          05 pic 9(16)  value 734664038400.\n          05 pic 9(16)  value 737280000000.\n          05 pic 9(16)  value 738112500000.\n          05 pic 9(16)  value 743008370688.\n          05 pic 9(16)  value 743847338880.\n          05 pic 9(16)  value 746496000000.\n          05 pic 9(16)  value 747338906250.\n          05 pic 9(16)  value 750000000000.\n          05 pic 9(16)  value 753145430616.\n          05 pic 9(16)  value 754974720000.\n          05 pic 9(16)  value 755827200000.\n          05 pic 9(16)  value 759375000000.\n          05 pic 9(16)  value 762939453125.\n          05 pic 9(16)  value 764411904000.\n          05 pic 9(16)  value 765275040000.\n          05 pic 9(16)  value 768000000000.\n          05 pic 9(16)  value 768867187500.\n          05 pic 9(16)  value 773094113280.\n          05 pic 9(16)  value 773967052800.\n          05 pic 9(16)  value 774840978000.\n          05 pic 9(16)  value 777600000000.\n          05 pic 9(16)  value 781250000000.\n          05 pic 9(16)  value 782757789696.\n          05 pic 9(16)  value 783641640960.\n          05 pic 9(16)  value 784526490225.\n          05 pic 9(16)  value 786432000000.\n          05 pic 9(16)  value 787320000000.\n          05 pic 9(16)  value 791015625000.\n          05 pic 9(16)  value 793437161472.\n          05 pic 9(16)  value 796262400000.\n          05 pic 9(16)  value 797161500000.\n          05 pic 9(16)  value 800000000000.\n          05 pic 9(16)  value 805306368000.\n          05 pic 9(16)  value 806215680000.\n          05 pic 9(16)  value 807126018750.\n          05 pic 9(16)  value 810000000000.\n          05 pic 9(16)  value 815372697600.\n          05 pic 9(16)  value 816293376000.\n          05 pic 9(16)  value 819200000000.\n          05 pic 9(16)  value 820125000000.\n          05 pic 9(16)  value 823974609375.\n          05 pic 9(16)  value 824633720832.\n          05 pic 9(16)  value 825564856320.\n          05 pic 9(16)  value 826497043200.\n          05 pic 9(16)  value 829440000000.\n          05 pic 9(16)  value 830376562500.\n          05 pic 9(16)  value 835884417024.\n          05 pic 9(16)  value 836828256240.\n          05 pic 9(16)  value 838860800000.\n          05 pic 9(16)  value 839808000000.\n          05 pic 9(16)  value 843750000000.\n          05 pic 9(16)  value 847288609443.\n          05 pic 9(16)  value 849346560000.\n          05 pic 9(16)  value 850305600000.\n          05 pic 9(16)  value 854296875000.\n          05 pic 9(16)  value 858993459200.\n          05 pic 9(16)  value 859963392000.\n          05 pic 9(16)  value 860934420000.\n          05 pic 9(16)  value 864000000000.\n          05 pic 9(16)  value 869730877440.\n          05 pic 9(16)  value 870712934400.\n          05 pic 9(16)  value 871696100250.\n          05 pic 9(16)  value 874800000000.\n          05 pic 9(16)  value 878906250000.\n          05 pic 9(16)  value 880602513408.\n          05 pic 9(16)  value 881596846080.\n          05 pic 9(16)  value 884736000000.\n          05 pic 9(16)  value 885735000000.\n          05 pic 9(16)  value 889892578125.\n          05 pic 9(16)  value 892616806656.\n          05 pic 9(16)  value 895795200000.\n          05 pic 9(16)  value 896806687500.\n          05 pic 9(16)  value 900000000000.\n          05 pic 9(16)  value 905969664000.\n          05 pic 9(16)  value 906992640000.\n          05 pic 9(16)  value 911250000000.\n          05 pic 9(16)  value 915527343750.\n          05 pic 9(16)  value 917294284800.\n          05 pic 9(16)  value 918330048000.\n          05 pic 9(16)  value 921600000000.\n          05 pic 9(16)  value 922640625000.\n          05 pic 9(16)  value 927712935936.\n          05 pic 9(16)  value 928760463360.\n          05 pic 9(16)  value 929809173600.\n          05 pic 9(16)  value 933120000000.\n          05 pic 9(16)  value 937500000000.\n          05 pic 9(16)  value 940369969152.\n          05 pic 9(16)  value 941431788270.\n          05 pic 9(16)  value 943718400000.\n          05 pic 9(16)  value 944784000000.\n          05 pic 9(16)  value 949218750000.\n          05 pic 9(16)  value 955514880000.\n          05 pic 9(16)  value 956593800000.\n          05 pic 9(16)  value 960000000000.\n          05 pic 9(16)  value 961083984375.\n          05 pic 9(16)  value 966367641600.\n          05 pic 9(16)  value 967458816000.\n          05 pic 9(16)  value 968551222500.\n          05 pic 9(16)  value 972000000000.\n          05 pic 9(16)  value 976562500000.\n          05 pic 9(16)  value 978447237120.\n          05 pic 9(16)  value 979552051200.\n          05 pic 9(16)  value 983040000000.\n          05 pic 9(16)  value 984150000000.\n          05 pic 9(16)  value 988769531250.\n          05 pic 9(16)  value 990677827584.\n          05 pic 9(16)  value 991796451840.\n          05 pic 9(16)  value 995328000000.\n          05 pic 9(16)  value 996451875000.\n          05 pic 9(16)  value 1000000000000.\n          05 pic 9(16)  value 1004193907488.\n          05 pic 9(16)  value 1006632960000.\n          05 pic 9(16)  value 1007769600000.\n          05 pic 9(16)  value 1012500000000.\n          05 pic 9(16)  value 1019215872000.\n          05 pic 9(16)  value 1020366720000.\n          05 pic 9(16)  value 1024000000000.\n          05 pic 9(16)  value 1025156250000.\n          05 pic 9(16)  value 1030792151040.\n          05 pic 9(16)  value 1031956070400.\n          05 pic 9(16)  value 1033121304000.\n          05 pic 9(16)  value 1036800000000.\n          05 pic 9(16)  value 1037970703125.\n          05 pic 9(16)  value 1043677052928.\n          05 pic 9(16)  value 1044855521280.\n          05 pic 9(16)  value 1046035320300.\n          05 pic 9(16)  value 1048576000000.\n          05 pic 9(16)  value 1049760000000.\n          05 pic 9(16)  value 1054687500000.\n          05 pic 9(16)  value 1057916215296.\n          05 pic 9(16)  value 1061683200000.\n          05 pic 9(16)  value 1062882000000.\n          05 pic 9(16)  value 1067871093750.\n          05 pic 9(16)  value 1073741824000.\n          05 pic 9(16)  value 1074954240000.\n          05 pic 9(16)  value 1076168025000.\n          05 pic 9(16)  value 1080000000000.\n          05 pic 9(16)  value 1087163596800.\n          05 pic 9(16)  value 1088391168000.\n          05 pic 9(16)  value 1093500000000.\n          05 pic 9(16)  value 1098632812500.\n          05 pic 9(16)  value 1099511627776.\n          05 pic 9(16)  value 1100753141760.\n          05 pic 9(16)  value 1101996057600.\n          05 pic 9(16)  value 1105920000000.\n          05 pic 9(16)  value 1107168750000.\n          05 pic 9(16)  value 1114512556032.\n          05 pic 9(16)  value 1115771008320.\n          05 pic 9(16)  value 1119744000000.\n          05 pic 9(16)  value 1121008359375.\n          05 pic 9(16)  value 1125000000000.\n          05 pic 9(16)  value 1129718145924.\n          05 pic 9(16)  value 1132462080000.\n          05 pic 9(16)  value 1133740800000.\n          05 pic 9(16)  value 1139062500000.\n          05 pic 9(16)  value 1146617856000.\n          05 pic 9(16)  value 1147912560000.\n          05 pic 9(16)  value 1152000000000.\n          05 pic 9(16)  value 1153300781250.\n          05 pic 9(16)  value 1159641169920.\n          05 pic 9(16)  value 1160950579200.\n          05 pic 9(16)  value 1162261467000.\n          05 pic 9(16)  value 1166400000000.\n          05 pic 9(16)  value 1171875000000.\n          05 pic 9(16)  value 1174136684544.\n          05 pic 9(16)  value 1175462461440.\n          05 pic 9(16)  value 1179648000000.\n          05 pic 9(16)  value 1180980000000.\n          05 pic 9(16)  value 1186523437500.\n          05 pic 9(16)  value 1190155742208.\n          05 pic 9(16)  value 1194393600000.\n          05 pic 9(16)  value 1195742250000.\n          05 pic 9(16)  value 1200000000000.\n          05 pic 9(16)  value 1207959552000.\n          05 pic 9(16)  value 1209323520000.\n          05 pic 9(16)  value 1210689028125.\n          05 pic 9(16)  value 1215000000000.\n          05 pic 9(16)  value 1220703125000.\n          05 pic 9(16)  value 1223059046400.\n          05 pic 9(16)  value 1224440064000.\n          05 pic 9(16)  value 1228800000000.\n          05 pic 9(16)  value 1230187500000.\n          05 pic 9(16)  value 1236950581248.\n          05 pic 9(16)  value 1238347284480.\n          05 pic 9(16)  value 1239745564800.\n          05 pic 9(16)  value 1244160000000.\n          05 pic 9(16)  value 1245564843750.\n          05 pic 9(16)  value 1250000000000.\n          05 pic 9(16)  value 1253826625536.\n          05 pic 9(16)  value 1255242384360.\n          05 pic 9(16)  value 1258291200000.\n          05 pic 9(16)  value 1259712000000.\n          05 pic 9(16)  value 1265625000000.\n          05 pic 9(16)  value 1274019840000.\n          05 pic 9(16)  value 1275458400000.\n          05 pic 9(16)  value 1280000000000.\n          05 pic 9(16)  value 1281445312500.\n          05 pic 9(16)  value 1288490188800.\n          05 pic 9(16)  value 1289945088000.\n          05 pic 9(16)  value 1291401630000.\n          05 pic 9(16)  value 1296000000000.\n          05 pic 9(16)  value 1304596316160.\n          05 pic 9(16)  value 1306069401600.\n          05 pic 9(16)  value 1307544150375.\n          05 pic 9(16)  value 1310720000000.\n          05 pic 9(16)  value 1312200000000.\n          05 pic 9(16)  value 1318359375000.\n          05 pic 9(16)  value 1320903770112.\n          05 pic 9(16)  value 1322395269120.\n          05 pic 9(16)  value 1327104000000.\n          05 pic 9(16)  value 1328602500000.\n          05 pic 9(16)  value 1338925209984.\n          05 pic 9(16)  value 1342177280000.\n          05 pic 9(16)  value 1343692800000.\n          05 pic 9(16)  value 1345210031250.\n          05 pic 9(16)  value 1350000000000.\n          05 pic 9(16)  value 1358954496000.\n          05 pic 9(16)  value 1360488960000.\n          05 pic 9(16)  value 1366875000000.\n          05 pic 9(16)  value 1373291015625.\n          05 pic 9(16)  value 1374389534720.\n          05 pic 9(16)  value 1375941427200.\n          05 pic 9(16)  value 1377495072000.\n          05 pic 9(16)  value 1382400000000.\n          05 pic 9(16)  value 1383960937500.\n          05 pic 9(16)  value 1391569403904.\n          05 pic 9(16)  value 1393140695040.\n          05 pic 9(16)  value 1394713760400.\n          05 pic 9(16)  value 1399680000000.\n          05 pic 9(16)  value 1406250000000.\n          05 pic 9(16)  value 1410554953728.\n          05 pic 9(16)  value 1412147682405.\n          05 pic 9(16)  value 1415577600000.\n          05 pic 9(16)  value 1417176000000.\n          05 pic 9(16)  value 1423828125000.\n          05 pic 9(16)  value 1433272320000.\n          05 pic 9(16)  value 1434890700000.\n          05 pic 9(16)  value 1440000000000.\n          05 pic 9(16)  value 1449551462400.\n          05 pic 9(16)  value 1451188224000.\n          05 pic 9(16)  value 1452826833750.\n          05 pic 9(16)  value 1458000000000.\n          05 pic 9(16)  value 1464843750000.\n          05 pic 9(16)  value 1467670855680.\n          05 pic 9(16)  value 1469328076800.\n          05 pic 9(16)  value 1474560000000.\n          05 pic 9(16)  value 1476225000000.\n          05 pic 9(16)  value 1483154296875.\n          05 pic 9(16)  value 1486016741376.\n          05 pic 9(16)  value 1487694677760.\n          05 pic 9(16)  value 1492992000000.\n          05 pic 9(16)  value 1494677812500.\n          05 pic 9(16)  value 1500000000000.\n          05 pic 9(16)  value 1506290861232.\n          05 pic 9(16)  value 1509949440000.\n          05 pic 9(16)  value 1511654400000.\n          05 pic 9(16)  value 1518750000000.\n          05 pic 9(16)  value 1525878906250.\n          05 pic 9(16)  value 1528823808000.\n          05 pic 9(16)  value 1530550080000.\n          05 pic 9(16)  value 1536000000000.\n          05 pic 9(16)  value 1537734375000.\n          05 pic 9(16)  value 1546188226560.\n          05 pic 9(16)  value 1547934105600.\n          05 pic 9(16)  value 1549681956000.\n          05 pic 9(16)  value 1555200000000.\n          05 pic 9(16)  value 1562500000000.\n          05 pic 9(16)  value 1565515579392.\n          05 pic 9(16)  value 1567283281920.\n          05 pic 9(16)  value 1569052980450.\n          05 pic 9(16)  value 1572864000000.\n          05 pic 9(16)  value 1574640000000.\n          05 pic 9(16)  value 1582031250000.\n          05 pic 9(16)  value 1586874322944.\n          05 pic 9(16)  value 1592524800000.\n          05 pic 9(16)  value 1594323000000.\n          05 pic 9(16)  value 1600000000000.\n          05 pic 9(16)  value 1601806640625.\n          05 pic 9(16)  value 1610612736000.\n          05 pic 9(16)  value 1612431360000.\n          05 pic 9(16)  value 1614252037500.\n          05 pic 9(16)  value 1620000000000.\n          05 pic 9(16)  value 1630745395200.\n          05 pic 9(16)  value 1632586752000.\n          05 pic 9(16)  value 1638400000000.\n          05 pic 9(16)  value 1640250000000.\n          05 pic 9(16)  value 1647949218750.\n          05 pic 9(16)  value 1649267441664.\n          05 pic 9(16)  value 1651129712640.\n          05 pic 9(16)  value 1652994086400.\n          05 pic 9(16)  value 1658880000000.\n          05 pic 9(16)  value 1660753125000.\n          05 pic 9(16)  value 1671768834048.\n          05 pic 9(16)  value 1673656512480.\n          05 pic 9(16)  value 1677721600000.\n          05 pic 9(16)  value 1679616000000.\n          05 pic 9(16)  value 1687500000000.\n          05 pic 9(16)  value 1694577218886.\n          05 pic 9(16)  value 1698693120000.\n          05 pic 9(16)  value 1700611200000.\n          05 pic 9(16)  value 1708593750000.\n          05 pic 9(16)  value 1717986918400.\n          05 pic 9(16)  value 1719926784000.\n          05 pic 9(16)  value 1721868840000.\n          05 pic 9(16)  value 1728000000000.\n          05 pic 9(16)  value 1729951171875.\n          05 pic 9(16)  value 1739461754880.\n          05 pic 9(16)  value 1741425868800.\n          05 pic 9(16)  value 1743392200500.\n          05 pic 9(16)  value 1749600000000.\n          05 pic 9(16)  value 1757812500000.\n          05 pic 9(16)  value 1761205026816.\n          05 pic 9(16)  value 1763193692160.\n          05 pic 9(16)  value 1769472000000.\n          05 pic 9(16)  value 1771470000000.\n          05 pic 9(16)  value 1779785156250.\n          05 pic 9(16)  value 1785233613312.\n          05 pic 9(16)  value 1791590400000.\n          05 pic 9(16)  value 1793613375000.\n          05 pic 9(16)  value 1800000000000.\n          05 pic 9(16)  value 1811939328000.\n          05 pic 9(16)  value 1813985280000.\n          05 pic 9(16)  value 1822500000000.\n          05 pic 9(16)  value 1831054687500.\n          05 pic 9(16)  value 1834588569600.\n          05 pic 9(16)  value 1836660096000.\n          05 pic 9(16)  value 1843200000000.\n          05 pic 9(16)  value 1845281250000.\n          05 pic 9(16)  value 1855425871872.\n          05 pic 9(16)  value 1857520926720.\n          05 pic 9(16)  value 1859618347200.\n          05 pic 9(16)  value 1866240000000.\n          05 pic 9(16)  value 1868347265625.\n          05 pic 9(16)  value 1875000000000.\n          05 pic 9(16)  value 1880739938304.\n          05 pic 9(16)  value 1882863576540.\n          05 pic 9(16)  value 1887436800000.\n          05 pic 9(16)  value 1889568000000.\n          05 pic 9(16)  value 1898437500000.\n          05 pic 9(16)  value 1911029760000.\n          05 pic 9(16)  value 1913187600000.\n          05 pic 9(16)  value 1920000000000.\n          05 pic 9(16)  value 1922167968750.\n          05 pic 9(16)  value 1932735283200.\n          05 pic 9(16)  value 1934917632000.\n          05 pic 9(16)  value 1937102445000.\n          05 pic 9(16)  value 1944000000000.\n          05 pic 9(16)  value 1953125000000.\n          05 pic 9(16)  value 1956894474240.\n          05 pic 9(16)  value 1959104102400.\n          05 pic 9(16)  value 1966080000000.\n          05 pic 9(16)  value 1968300000000.\n          05 pic 9(16)  value 1977539062500.\n          05 pic 9(16)  value 1981355655168.\n          05 pic 9(16)  value 1983592903680.\n          05 pic 9(16)  value 1990656000000.\n          05 pic 9(16)  value 1992903750000.\n          05 pic 9(16)  value 2000000000000.\n          05 pic 9(16)  value 2008387814976.\n          05 pic 9(16)  value 2013265920000.\n          05 pic 9(16)  value 2015539200000.\n          05 pic 9(16)  value 2017815046875.\n          05 pic 9(16)  value 2025000000000.\n          05 pic 9(16)  value 2038431744000.\n          05 pic 9(16)  value 2040733440000.\n          05 pic 9(16)  value 2048000000000.\n          05 pic 9(16)  value 2050312500000.\n          05 pic 9(16)  value 2061584302080.\n          05 pic 9(16)  value 2063912140800.\n          05 pic 9(16)  value 2066242608000.\n          05 pic 9(16)  value 2073600000000.\n          05 pic 9(16)  value 2075941406250.\n          05 pic 9(16)  value 2087354105856.\n          05 pic 9(16)  value 2089711042560.\n          05 pic 9(16)  value 2092070640600.\n          05 pic 9(16)  value 2097152000000.\n          05 pic 9(16)  value 2099520000000.\n          05 pic 9(16)  value 2109375000000.\n          05 pic 9(16)  value 2115832430592.\n          05 pic 9(16)  value 2123366400000.\n          05 pic 9(16)  value 2125764000000.\n          05 pic 9(16)  value 2135742187500.\n          05 pic 9(16)  value 2147483648000.\n          05 pic 9(16)  value 2149908480000.\n          05 pic 9(16)  value 2152336050000.\n          05 pic 9(16)  value 2160000000000.\n          05 pic 9(16)  value 2174327193600.\n          05 pic 9(16)  value 2176782336000.\n          05 pic 9(16)  value 2179240250625.\n          05 pic 9(16)  value 2187000000000.\n          05 pic 9(16)  value 2197265625000.\n          05 pic 9(16)  value 2199023255552.\n          05 pic 9(16)  value 2201506283520.\n          05 pic 9(16)  value 2203992115200.\n          05 pic 9(16)  value 2211840000000.\n          05 pic 9(16)  value 2214337500000.\n          05 pic 9(16)  value 2229025112064.\n          05 pic 9(16)  value 2231542016640.\n          05 pic 9(16)  value 2239488000000.\n          05 pic 9(16)  value 2242016718750.\n          05 pic 9(16)  value 2250000000000.\n          05 pic 9(16)  value 2259436291848.\n          05 pic 9(16)  value 2264924160000.\n          05 pic 9(16)  value 2267481600000.\n          05 pic 9(16)  value 2278125000000.\n          05 pic 9(16)  value 2288818359375.\n          05 pic 9(16)  value 2293235712000.\n          05 pic 9(16)  value 2295825120000.\n          05 pic 9(16)  value 2304000000000.\n          05 pic 9(16)  value 2306601562500.\n          05 pic 9(16)  value 2319282339840.\n          05 pic 9(16)  value 2321901158400.\n          05 pic 9(16)  value 2324522934000.\n          05 pic 9(16)  value 2332800000000.\n          05 pic 9(16)  value 2343750000000.\n          05 pic 9(16)  value 2348273369088.\n          05 pic 9(16)  value 2350924922880.\n          05 pic 9(16)  value 2353579470675.\n          05 pic 9(16)  value 2359296000000.\n          05 pic 9(16)  value 2361960000000.\n          05 pic 9(16)  value 2373046875000.\n          05 pic 9(16)  value 2380311484416.\n          05 pic 9(16)  value 2388787200000.\n          05 pic 9(16)  value 2391484500000.\n          05 pic 9(16)  value 2400000000000.\n          05 pic 9(16)  value 2415919104000.\n          05 pic 9(16)  value 2418647040000.\n          05 pic 9(16)  value 2421378056250.\n          05 pic 9(16)  value 2430000000000.\n          05 pic 9(16)  value 2441406250000.\n          05 pic 9(16)  value 2446118092800.\n          05 pic 9(16)  value 2448880128000.\n          05 pic 9(16)  value 2457600000000.\n          05 pic 9(16)  value 2460375000000.\n          05 pic 9(16)  value 2471923828125.\n          05 pic 9(16)  value 2473901162496.\n          05 pic 9(16)  value 2476694568960.\n          05 pic 9(16)  value 2479491129600.\n          05 pic 9(16)  value 2488320000000.\n          05 pic 9(16)  value 2491129687500.\n          05 pic 9(16)  value 2500000000000.\n          05 pic 9(16)  value 2507653251072.\n          05 pic 9(16)  value 2510484768720.\n          05 pic 9(16)  value 2516582400000.\n          05 pic 9(16)  value 2519424000000.\n          05 pic 9(16)  value 2531250000000.\n          05 pic 9(16)  value 2541865828329.\n          05 pic 9(16)  value 2548039680000.\n          05 pic 9(16)  value 2550916800000.\n          05 pic 9(16)  value 2560000000000.\n          05 pic 9(16)  value 2562890625000.\n          05 pic 9(16)  value 2576980377600.\n          05 pic 9(16)  value 2579890176000.\n          05 pic 9(16)  value 2582803260000.\n          05 pic 9(16)  value 2592000000000.\n          05 pic 9(16)  value 2609192632320.\n          05 pic 9(16)  value 2612138803200.\n          05 pic 9(16)  value 2615088300750.\n          05 pic 9(16)  value 2621440000000.\n          05 pic 9(16)  value 2624400000000.\n          05 pic 9(16)  value 2636718750000.\n          05 pic 9(16)  value 2641807540224.\n          05 pic 9(16)  value 2644790538240.\n          05 pic 9(16)  value 2654208000000.\n          05 pic 9(16)  value 2657205000000.\n          05 pic 9(16)  value 2669677734375.\n          05 pic 9(16)  value 2677850419968.\n          05 pic 9(16)  value 2684354560000.\n          05 pic 9(16)  value 2687385600000.\n          05 pic 9(16)  value 2690420062500.\n          05 pic 9(16)  value 2700000000000.\n          05 pic 9(16)  value 2717908992000.\n          05 pic 9(16)  value 2720977920000.\n          05 pic 9(16)  value 2733750000000.\n          05 pic 9(16)  value 2746582031250.\n          05 pic 9(16)  value 2748779069440.\n          05 pic 9(16)  value 2751882854400.\n          05 pic 9(16)  value 2754990144000.\n          05 pic 9(16)  value 2764800000000.\n          05 pic 9(16)  value 2767921875000.\n          05 pic 9(16)  value 2783138807808.\n          05 pic 9(16)  value 2786281390080.\n          05 pic 9(16)  value 2789427520800.\n          05 pic 9(16)  value 2799360000000.\n          05 pic 9(16)  value 2812500000000.\n          05 pic 9(16)  value 2821109907456.\n          05 pic 9(16)  value 2824295364810.\n          05 pic 9(16)  value 2831155200000.\n          05 pic 9(16)  value 2834352000000.\n          05 pic 9(16)  value 2847656250000.\n          05 pic 9(16)  value 2866544640000.\n          05 pic 9(16)  value 2869781400000.\n          05 pic 9(16)  value 2880000000000.\n          05 pic 9(16)  value 2883251953125.\n          05 pic 9(16)  value 2899102924800.\n          05 pic 9(16)  value 2902376448000.\n          05 pic 9(16)  value 2905653667500.\n          05 pic 9(16)  value 2916000000000.\n          05 pic 9(16)  value 2929687500000.\n          05 pic 9(16)  value 2935341711360.\n          05 pic 9(16)  value 2938656153600.\n          05 pic 9(16)  value 2949120000000.\n          05 pic 9(16)  value 2952450000000.\n          05 pic 9(16)  value 2966308593750.\n          05 pic 9(16)  value 2972033482752.\n          05 pic 9(16)  value 2975389355520.\n          05 pic 9(16)  value 2985984000000.\n          05 pic 9(16)  value 2989355625000.\n          05 pic 9(16)  value 3000000000000.\n          05 pic 9(16)  value 3012581722464.\n          05 pic 9(16)  value 3019898880000.\n          05 pic 9(16)  value 3023308800000.\n          05 pic 9(16)  value 3037500000000.\n          05 pic 9(16)  value 3051757812500.\n          05 pic 9(16)  value 3057647616000.\n          05 pic 9(16)  value 3061100160000.\n          05 pic 9(16)  value 3072000000000.\n          05 pic 9(16)  value 3075468750000.\n          05 pic 9(16)  value 3092376453120.\n          05 pic 9(16)  value 3095868211200.\n          05 pic 9(16)  value 3099363912000.\n          05 pic 9(16)  value 3110400000000.\n          05 pic 9(16)  value 3113912109375.\n          05 pic 9(16)  value 3125000000000.\n          05 pic 9(16)  value 3131031158784.\n          05 pic 9(16)  value 3134566563840.\n          05 pic 9(16)  value 3138105960900.\n          05 pic 9(16)  value 3145728000000.\n          05 pic 9(16)  value 3149280000000.\n          05 pic 9(16)  value 3164062500000.\n          05 pic 9(16)  value 3173748645888.\n          05 pic 9(16)  value 3185049600000.\n          05 pic 9(16)  value 3188646000000.\n          05 pic 9(16)  value 3200000000000.\n          05 pic 9(16)  value 3203613281250.\n          05 pic 9(16)  value 3221225472000.\n          05 pic 9(16)  value 3224862720000.\n          05 pic 9(16)  value 3228504075000.\n          05 pic 9(16)  value 3240000000000.\n          05 pic 9(16)  value 3261490790400.\n          05 pic 9(16)  value 3265173504000.\n          05 pic 9(16)  value 3276800000000.\n          05 pic 9(16)  value 3280500000000.\n          05 pic 9(16)  value 3295898437500.\n          05 pic 9(16)  value 3298534883328.\n          05 pic 9(16)  value 3302259425280.\n          05 pic 9(16)  value 3305988172800.\n          05 pic 9(16)  value 3317760000000.\n          05 pic 9(16)  value 3321506250000.\n          05 pic 9(16)  value 3343537668096.\n          05 pic 9(16)  value 3347313024960.\n          05 pic 9(16)  value 3355443200000.\n          05 pic 9(16)  value 3359232000000.\n          05 pic 9(16)  value 3363025078125.\n          05 pic 9(16)  value 3375000000000.\n          05 pic 9(16)  value 3389154437772.\n          05 pic 9(16)  value 3397386240000.\n          05 pic 9(16)  value 3401222400000.\n          05 pic 9(16)  value 3417187500000.\n          05 pic 9(16)  value 3435973836800.\n          05 pic 9(16)  value 3439853568000.\n          05 pic 9(16)  value 3443737680000.\n          05 pic 9(16)  value 3456000000000.\n          05 pic 9(16)  value 3459902343750.\n          05 pic 9(16)  value 3478923509760.\n          05 pic 9(16)  value 3482851737600.\n          05 pic 9(16)  value 3486784401000.\n          05 pic 9(16)  value 3499200000000.\n          05 pic 9(16)  value 3515625000000.\n          05 pic 9(16)  value 3522410053632.\n          05 pic 9(16)  value 3526387384320.\n          05 pic 9(16)  value 3538944000000.\n          05 pic 9(16)  value 3542940000000.\n          05 pic 9(16)  value 3559570312500.\n          05 pic 9(16)  value 3570467226624.\n          05 pic 9(16)  value 3583180800000.\n          05 pic 9(16)  value 3587226750000.\n          05 pic 9(16)  value 3600000000000.\n          05 pic 9(16)  value 3623878656000.\n          05 pic 9(16)  value 3627970560000.\n          05 pic 9(16)  value 3632067084375.\n          05 pic 9(16)  value 3645000000000.\n          05 pic 9(16)  value 3662109375000.\n          05 pic 9(16)  value 3669177139200.\n          05 pic 9(16)  value 3673320192000.\n          05 pic 9(16)  value 3686400000000.\n          05 pic 9(16)  value 3690562500000.\n          05 pic 9(16)  value 3710851743744.\n          05 pic 9(16)  value 3715041853440.\n          05 pic 9(16)  value 3719236694400.\n          05 pic 9(16)  value 3732480000000.\n          05 pic 9(16)  value 3736694531250.\n          05 pic 9(16)  value 3750000000000.\n          05 pic 9(16)  value 3761479876608.\n          05 pic 9(16)  value 3765727153080.\n          05 pic 9(16)  value 3774873600000.\n          05 pic 9(16)  value 3779136000000.\n          05 pic 9(16)  value 3796875000000.\n          05 pic 9(16)  value 3814697265625.\n          05 pic 9(16)  value 3822059520000.\n          05 pic 9(16)  value 3826375200000.\n          05 pic 9(16)  value 3840000000000.\n          05 pic 9(16)  value 3844335937500.\n          05 pic 9(16)  value 3865470566400.\n          05 pic 9(16)  value 3869835264000.\n          05 pic 9(16)  value 3874204890000.\n          05 pic 9(16)  value 3888000000000.\n          05 pic 9(16)  value 3906250000000.\n          05 pic 9(16)  value 3913788948480.\n          05 pic 9(16)  value 3918208204800.\n          05 pic 9(16)  value 3922632451125.\n          05 pic 9(16)  value 3932160000000.\n          05 pic 9(16)  value 3936600000000.\n          05 pic 9(16)  value 3955078125000.\n          05 pic 9(16)  value 3962711310336.\n          05 pic 9(16)  value 3967185807360.\n          05 pic 9(16)  value 3981312000000.\n          05 pic 9(16)  value 3985807500000.\n          05 pic 9(16)  value 4000000000000.\n          05 pic 9(16)  value 4016775629952.\n          05 pic 9(16)  value 4026531840000.\n          05 pic 9(16)  value 4031078400000.\n          05 pic 9(16)  value 4035630093750.\n          05 pic 9(16)  value 4050000000000.\n          05 pic 9(16)  value 4076863488000.\n          05 pic 9(16)  value 4081466880000.\n          05 pic 9(16)  value 4096000000000.\n          05 pic 9(16)  value 4100625000000.\n          05 pic 9(16)  value 4119873046875.\n          05 pic 9(16)  value 4123168604160.\n          05 pic 9(16)  value 4127824281600.\n          05 pic 9(16)  value 4132485216000.\n          05 pic 9(16)  value 4147200000000.\n          05 pic 9(16)  value 4151882812500.\n          05 pic 9(16)  value 4174708211712.\n          05 pic 9(16)  value 4179422085120.\n          05 pic 9(16)  value 4184141281200.\n          05 pic 9(16)  value 4194304000000.\n          05 pic 9(16)  value 4199040000000.\n          05 pic 9(16)  value 4218750000000.\n          05 pic 9(16)  value 4231664861184.\n          05 pic 9(16)  value 4236443047215.\n          05 pic 9(16)  value 4246732800000.\n          05 pic 9(16)  value 4251528000000.\n          05 pic 9(16)  value 4271484375000.\n          05 pic 9(16)  value 4294967296000.\n          05 pic 9(16)  value 4299816960000.\n          05 pic 9(16)  value 4304672100000.\n          05 pic 9(16)  value 4320000000000.\n          05 pic 9(16)  value 4348654387200.\n          05 pic 9(16)  value 4353564672000.\n          05 pic 9(16)  value 4358480501250.\n          05 pic 9(16)  value 4374000000000.\n          05 pic 9(16)  value 4394531250000.\n          05 pic 9(16)  value 4398046511104.\n          05 pic 9(16)  value 4403012567040.\n          05 pic 9(16)  value 4407984230400.\n          05 pic 9(16)  value 4423680000000.\n          05 pic 9(16)  value 4428675000000.\n          05 pic 9(16)  value 4449462890625.\n          05 pic 9(16)  value 4458050224128.\n          05 pic 9(16)  value 4463084033280.\n          05 pic 9(16)  value 4478976000000.\n          05 pic 9(16)  value 4484033437500.\n          05 pic 9(16)  value 4500000000000.\n          05 pic 9(16)  value 4518872583696.\n          05 pic 9(16)  value 4529848320000.\n          05 pic 9(16)  value 4534963200000.\n          05 pic 9(16)  value 4556250000000.\n          05 pic 9(16)  value 4577636718750.\n          05 pic 9(16)  value 4586471424000.\n          05 pic 9(16)  value 4591650240000.\n          05 pic 9(16)  value 4608000000000.\n          05 pic 9(16)  value 4613203125000.\n          05 pic 9(16)  value 4638564679680.\n          05 pic 9(16)  value 4643802316800.\n          05 pic 9(16)  value 4649045868000.\n          05 pic 9(16)  value 4665600000000.\n          05 pic 9(16)  value 4687500000000.\n          05 pic 9(16)  value 4696546738176.\n          05 pic 9(16)  value 4701849845760.\n          05 pic 9(16)  value 4707158941350.\n          05 pic 9(16)  value 4718592000000.\n          05 pic 9(16)  value 4723920000000.\n          05 pic 9(16)  value 4746093750000.\n          05 pic 9(16)  value 4760622968832.\n          05 pic 9(16)  value 4777574400000.\n          05 pic 9(16)  value 4782969000000.\n          05 pic 9(16)  value 4800000000000.\n          05 pic 9(16)  value 4805419921875.\n          05 pic 9(16)  value 4831838208000.\n          05 pic 9(16)  value 4837294080000.\n          05 pic 9(16)  value 4842756112500.\n          05 pic 9(16)  value 4860000000000.\n          05 pic 9(16)  value 4882812500000.\n          05 pic 9(16)  value 4892236185600.\n          05 pic 9(16)  value 4897760256000.\n          05 pic 9(16)  value 4915200000000.\n          05 pic 9(16)  value 4920750000000.\n          05 pic 9(16)  value 4943847656250.\n          05 pic 9(16)  value 4947802324992.\n          05 pic 9(16)  value 4953389137920.\n          05 pic 9(16)  value 4958982259200.\n          05 pic 9(16)  value 4976640000000.\n          05 pic 9(16)  value 4982259375000.\n          05 pic 9(16)  value 5000000000000.\n          05 pic 9(16)  value 5015306502144.\n          05 pic 9(16)  value 5020969537440.\n          05 pic 9(16)  value 5033164800000.\n          05 pic 9(16)  value 5038848000000.\n          05 pic 9(16)  value 5062500000000.\n          05 pic 9(16)  value 5083731656658.\n          05 pic 9(16)  value 5096079360000.\n          05 pic 9(16)  value 5101833600000.\n          05 pic 9(16)  value 5120000000000.\n          05 pic 9(16)  value 5125781250000.\n          05 pic 9(16)  value 5153960755200.\n          05 pic 9(16)  value 5159780352000.\n          05 pic 9(16)  value 5165606520000.\n          05 pic 9(16)  value 5184000000000.\n          05 pic 9(16)  value 5189853515625.\n          05 pic 9(16)  value 5218385264640.\n          05 pic 9(16)  value 5224277606400.\n          05 pic 9(16)  value 5230176601500.\n          05 pic 9(16)  value 5242880000000.\n          05 pic 9(16)  value 5248800000000.\n          05 pic 9(16)  value 5273437500000.\n          05 pic 9(16)  value 5283615080448.\n          05 pic 9(16)  value 5289581076480.\n          05 pic 9(16)  value 5308416000000.\n          05 pic 9(16)  value 5314410000000.\n          05 pic 9(16)  value 5339355468750.\n          05 pic 9(16)  value 5355700839936.\n          05 pic 9(16)  value 5368709120000.\n          05 pic 9(16)  value 5374771200000.\n          05 pic 9(16)  value 5380840125000.\n          05 pic 9(16)  value 5400000000000.\n          05 pic 9(16)  value 5435817984000.\n          05 pic 9(16)  value 5441955840000.\n          05 pic 9(16)  value 5467500000000.\n          05 pic 9(16)  value 5493164062500.\n          05 pic 9(16)  value 5497558138880.\n          05 pic 9(16)  value 5503765708800.\n          05 pic 9(16)  value 5509980288000.\n          05 pic 9(16)  value 5529600000000.\n          05 pic 9(16)  value 5535843750000.\n          05 pic 9(16)  value 5566277615616.\n          05 pic 9(16)  value 5572562780160.\n          05 pic 9(16)  value 5578855041600.\n          05 pic 9(16)  value 5598720000000.\n          05 pic 9(16)  value 5605041796875.\n          05 pic 9(16)  value 5625000000000.\n          05 pic 9(16)  value 5642219814912.\n          05 pic 9(16)  value 5648590729620.\n          05 pic 9(16)  value 5662310400000.\n          05 pic 9(16)  value 5668704000000.\n          05 pic 9(16)  value 5695312500000.\n          05 pic 9(16)  value 5733089280000.\n          05 pic 9(16)  value 5739562800000.\n          05 pic 9(16)  value 5760000000000.\n          05 pic 9(16)  value 5766503906250.\n          05 pic 9(16)  value 5798205849600.\n          05 pic 9(16)  value 5804752896000.\n          05 pic 9(16)  value 5811307335000.\n          05 pic 9(16)  value 5832000000000.\n          05 pic 9(16)  value 5859375000000.\n          05 pic 9(16)  value 5870683422720.\n          05 pic 9(16)  value 5877312307200.\n          05 pic 9(16)  value 5898240000000.\n          05 pic 9(16)  value 5904900000000.\n          05 pic 9(16)  value 5932617187500.\n          05 pic 9(16)  value 5944066965504.\n          05 pic 9(16)  value 5950778711040.\n          05 pic 9(16)  value 5971968000000.\n          05 pic 9(16)  value 5978711250000.\n          05 pic 9(16)  value 6000000000000.\n          05 pic 9(16)  value 6025163444928.\n          05 pic 9(16)  value 6039797760000.\n          05 pic 9(16)  value 6046617600000.\n          05 pic 9(16)  value 6053445140625.\n          05 pic 9(16)  value 6075000000000.\n          05 pic 9(16)  value 6103515625000.\n          05 pic 9(16)  value 6115295232000.\n          05 pic 9(16)  value 6122200320000.\n          05 pic 9(16)  value 6144000000000.\n          05 pic 9(16)  value 6150937500000.\n          05 pic 9(16)  value 6184752906240.\n          05 pic 9(16)  value 6191736422400.\n          05 pic 9(16)  value 6198727824000.\n          05 pic 9(16)  value 6220800000000.\n          05 pic 9(16)  value 6227824218750.\n          05 pic 9(16)  value 6250000000000.\n          05 pic 9(16)  value 6262062317568.\n          05 pic 9(16)  value 6269133127680.\n          05 pic 9(16)  value 6276211921800.\n          05 pic 9(16)  value 6291456000000.\n          05 pic 9(16)  value 6298560000000.\n          05 pic 9(16)  value 6328125000000.\n          05 pic 9(16)  value 6347497291776.\n          05 pic 9(16)  value 6370099200000.\n          05 pic 9(16)  value 6377292000000.\n          05 pic 9(16)  value 6400000000000.\n          05 pic 9(16)  value 6407226562500.\n          05 pic 9(16)  value 6442450944000.\n          05 pic 9(16)  value 6449725440000.\n          05 pic 9(16)  value 6457008150000.\n          05 pic 9(16)  value 6480000000000.\n          05 pic 9(16)  value 6522981580800.\n          05 pic 9(16)  value 6530347008000.\n          05 pic 9(16)  value 6537720751875.\n          05 pic 9(16)  value 6553600000000.\n          05 pic 9(16)  value 6561000000000.\n          05 pic 9(16)  value 6591796875000.\n          05 pic 9(16)  value 6597069766656.\n          05 pic 9(16)  value 6604518850560.\n          05 pic 9(16)  value 6611976345600.\n          05 pic 9(16)  value 6635520000000.\n          05 pic 9(16)  value 6643012500000.\n          05 pic 9(16)  value 6687075336192.\n          05 pic 9(16)  value 6694626049920.\n          05 pic 9(16)  value 6710886400000.\n          05 pic 9(16)  value 6718464000000.\n          05 pic 9(16)  value 6726050156250.\n          05 pic 9(16)  value 6750000000000.\n          05 pic 9(16)  value 6778308875544.\n          05 pic 9(16)  value 6794772480000.\n          05 pic 9(16)  value 6802444800000.\n          05 pic 9(16)  value 6834375000000.\n          05 pic 9(16)  value 6866455078125.\n          05 pic 9(16)  value 6871947673600.\n          05 pic 9(16)  value 6879707136000.\n          05 pic 9(16)  value 6887475360000.\n          05 pic 9(16)  value 6912000000000.\n          05 pic 9(16)  value 6919804687500.\n          05 pic 9(16)  value 6957847019520.\n          05 pic 9(16)  value 6965703475200.\n          05 pic 9(16)  value 6973568802000.\n          05 pic 9(16)  value 6998400000000.\n          05 pic 9(16)  value 7031250000000.\n          05 pic 9(16)  value 7044820107264.\n          05 pic 9(16)  value 7052774768640.\n          05 pic 9(16)  value 7060738412025.\n          05 pic 9(16)  value 7077888000000.\n          05 pic 9(16)  value 7085880000000.\n          05 pic 9(16)  value 7119140625000.\n          05 pic 9(16)  value 7140934453248.\n          05 pic 9(16)  value 7166361600000.\n          05 pic 9(16)  value 7174453500000.\n          05 pic 9(16)  value 7200000000000.\n          05 pic 9(16)  value 7247757312000.\n          05 pic 9(16)  value 7255941120000.\n          05 pic 9(16)  value 7264134168750.\n          05 pic 9(16)  value 7290000000000.\n          05 pic 9(16)  value 7324218750000.\n          05 pic 9(16)  value 7338354278400.\n          05 pic 9(16)  value 7346640384000.\n          05 pic 9(16)  value 7372800000000.\n          05 pic 9(16)  value 7381125000000.\n          05 pic 9(16)  value 7415771484375.\n          05 pic 9(16)  value 7421703487488.\n          05 pic 9(16)  value 7430083706880.\n          05 pic 9(16)  value 7438473388800.\n          05 pic 9(16)  value 7464960000000.\n          05 pic 9(16)  value 7473389062500.\n          05 pic 9(16)  value 7500000000000.\n          05 pic 9(16)  value 7522959753216.\n          05 pic 9(16)  value 7531454306160.\n          05 pic 9(16)  value 7549747200000.\n          05 pic 9(16)  value 7558272000000.\n          05 pic 9(16)  value 7593750000000.\n          05 pic 9(16)  value 7625597484987.\n          05 pic 9(16)  value 7629394531250.\n          05 pic 9(16)  value 7644119040000.\n          05 pic 9(16)  value 7652750400000.\n          05 pic 9(16)  value 7680000000000.\n          05 pic 9(16)  value 7688671875000.\n          05 pic 9(16)  value 7730941132800.\n          05 pic 9(16)  value 7739670528000.\n          05 pic 9(16)  value 7748409780000.\n          05 pic 9(16)  value 7776000000000.\n          05 pic 9(16)  value 7812500000000.\n          05 pic 9(16)  value 7827577896960.\n          05 pic 9(16)  value 7836416409600.\n          05 pic 9(16)  value 7845264902250.\n          05 pic 9(16)  value 7864320000000.\n          05 pic 9(16)  value 7873200000000.\n          05 pic 9(16)  value 7910156250000.\n          05 pic 9(16)  value 7925422620672.\n          05 pic 9(16)  value 7934371614720.\n          05 pic 9(16)  value 7962624000000.\n          05 pic 9(16)  value 7971615000000.\n          05 pic 9(16)  value 8000000000000.\n          05 pic 9(16)  value 8009033203125.\n          05 pic 9(16)  value 8033551259904.\n          05 pic 9(16)  value 8053063680000.\n          05 pic 9(16)  value 8062156800000.\n          05 pic 9(16)  value 8071260187500.\n          05 pic 9(16)  value 8100000000000.\n          05 pic 9(16)  value 8153726976000.\n          05 pic 9(16)  value 8162933760000.\n          05 pic 9(16)  value 8192000000000.\n          05 pic 9(16)  value 8201250000000.\n          05 pic 9(16)  value 8239746093750.\n          05 pic 9(16)  value 8246337208320.\n          05 pic 9(16)  value 8255648563200.\n          05 pic 9(16)  value 8264970432000.\n          05 pic 9(16)  value 8294400000000.\n          05 pic 9(16)  value 8303765625000.\n          05 pic 9(16)  value 8349416423424.\n          05 pic 9(16)  value 8358844170240.\n          05 pic 9(16)  value 8368282562400.\n          05 pic 9(16)  value 8388608000000.\n          05 pic 9(16)  value 8398080000000.\n          05 pic 9(16)  value 8437500000000.\n          05 pic 9(16)  value 8463329722368.\n          05 pic 9(16)  value 8472886094430.\n          05 pic 9(16)  value 8493465600000.\n          05 pic 9(16)  value 8503056000000.\n          05 pic 9(16)  value 8542968750000.\n          05 pic 9(16)  value 8589934592000.\n          05 pic 9(16)  value 8599633920000.\n          05 pic 9(16)  value 8609344200000.\n          05 pic 9(16)  value 8640000000000.\n          05 pic 9(16)  value 8649755859375.\n          05 pic 9(16)  value 8697308774400.\n          05 pic 9(16)  value 8707129344000.\n          05 pic 9(16)  value 8716961002500.\n          05 pic 9(16)  value 8748000000000.\n          05 pic 9(16)  value 8789062500000.\n          05 pic 9(16)  value 8796093022208.\n          05 pic 9(16)  value 8806025134080.\n          05 pic 9(16)  value 8815968460800.\n          05 pic 9(16)  value 8847360000000.\n          05 pic 9(16)  value 8857350000000.\n          05 pic 9(16)  value 8898925781250.\n          05 pic 9(16)  value 8916100448256.\n          05 pic 9(16)  value 8926168066560.\n          05 pic 9(16)  value 8957952000000.\n          05 pic 9(16)  value 8968066875000.\n          05 pic 9(16)  value 9000000000000.\n          05 pic 9(16)  value 9037745167392.\n          05 pic 9(16)  value 9059696640000.\n          05 pic 9(16)  value 9069926400000.\n          05 pic 9(16)  value 9112500000000.\n          05 pic 9(16)  value 9155273437500.\n          05 pic 9(16)  value 9172942848000.\n          05 pic 9(16)  value 9183300480000.\n          05 pic 9(16)  value 9216000000000.\n          05 pic 9(16)  value 9226406250000.\n          05 pic 9(16)  value 9277129359360.\n          05 pic 9(16)  value 9287604633600.\n          05 pic 9(16)  value 9298091736000.\n          05 pic 9(16)  value 9331200000000.\n          05 pic 9(16)  value 9341736328125.\n          05 pic 9(16)  value 9375000000000.\n          05 pic 9(16)  value 9393093476352.\n          05 pic 9(16)  value 9403699691520.\n          05 pic 9(16)  value 9414317882700.\n          05 pic 9(16)  value 9437184000000.\n          05 pic 9(16)  value 9447840000000.\n          05 pic 9(16)  value 9492187500000.\n          05 pic 9(16)  value 9521245937664.\n          05 pic 9(16)  value 9555148800000.\n          05 pic 9(16)  value 9565938000000.\n          05 pic 9(16)  value 9600000000000.\n          05 pic 9(16)  value 9610839843750.\n          05 pic 9(16)  value 9663676416000.\n          05 pic 9(16)  value 9674588160000.\n          05 pic 9(16)  value 9685512225000.\n          05 pic 9(16)  value 9720000000000.\n          05 pic 9(16)  value 9765625000000.\n          05 pic 9(16)  value 9784472371200.\n          05 pic 9(16)  value 9795520512000.\n          05 pic 9(16)  value 9830400000000.\n          05 pic 9(16)  value 9841500000000.\n          05 pic 9(16)  value 9887695312500.\n          05 pic 9(16)  value 9895604649984.\n          05 pic 9(16)  value 9906778275840.\n          05 pic 9(16)  value 9917964518400.\n          05 pic 9(16)  value 9953280000000.\n          05 pic 9(16)  value 9964518750000.\n          05 pic 9(16)  value 10000000000000.\n          05 pic 9(16)  value 10030613004288.\n          05 pic 9(16)  value 10041939074880.\n          05 pic 9(16)  value 10066329600000.\n          05 pic 9(16)  value 10077696000000.\n          05 pic 9(16)  value 10089075234375.\n          05 pic 9(16)  value 10125000000000.\n          05 pic 9(16)  value 10167463313316.\n          05 pic 9(16)  value 10192158720000.\n          05 pic 9(16)  value 10203667200000.\n          05 pic 9(16)  value 10240000000000.\n          05 pic 9(16)  value 10251562500000.\n          05 pic 9(16)  value 10307921510400.\n          05 pic 9(16)  value 10319560704000.\n          05 pic 9(16)  value 10331213040000.\n          05 pic 9(16)  value 10368000000000.\n          05 pic 9(16)  value 10379707031250.\n          05 pic 9(16)  value 10436770529280.\n          05 pic 9(16)  value 10448555212800.\n          05 pic 9(16)  value 10460353203000.\n          05 pic 9(16)  value 10485760000000.\n          05 pic 9(16)  value 10497600000000.\n          05 pic 9(16)  value 10546875000000.\n          05 pic 9(16)  value 10567230160896.\n          05 pic 9(16)  value 10579162152960.\n          05 pic 9(16)  value 10616832000000.\n          05 pic 9(16)  value 10628820000000.\n          05 pic 9(16)  value 10678710937500.\n          05 pic 9(16)  value 10711401679872.\n          05 pic 9(16)  value 10737418240000.\n          05 pic 9(16)  value 10749542400000.\n          05 pic 9(16)  value 10761680250000.\n          05 pic 9(16)  value 10800000000000.\n          05 pic 9(16)  value 10871635968000.\n          05 pic 9(16)  value 10883911680000.\n          05 pic 9(16)  value 10896201253125.\n          05 pic 9(16)  value 10935000000000.\n          05 pic 9(16)  value 10986328125000.\n          05 pic 9(16)  value 10995116277760.\n          05 pic 9(16)  value 11007531417600.\n          05 pic 9(16)  value 11019960576000.\n          05 pic 9(16)  value 11059200000000.\n          05 pic 9(16)  value 11071687500000.\n          05 pic 9(16)  value 11132555231232.\n          05 pic 9(16)  value 11145125560320.\n          05 pic 9(16)  value 11157710083200.\n          05 pic 9(16)  value 11197440000000.\n          05 pic 9(16)  value 11210083593750.\n          05 pic 9(16)  value 11250000000000.\n          05 pic 9(16)  value 11284439629824.\n          05 pic 9(16)  value 11297181459240.\n          05 pic 9(16)  value 11324620800000.\n          05 pic 9(16)  value 11337408000000.\n          05 pic 9(16)  value 11390625000000.\n          05 pic 9(16)  value 11444091796875.\n          05 pic 9(16)  value 11466178560000.\n          05 pic 9(16)  value 11479125600000.\n          05 pic 9(16)  value 11520000000000.\n          05 pic 9(16)  value 11533007812500.\n          05 pic 9(16)  value 11596411699200.\n          05 pic 9(16)  value 11609505792000.\n          05 pic 9(16)  value 11622614670000.\n          05 pic 9(16)  value 11664000000000.\n          05 pic 9(16)  value 11718750000000.\n          05 pic 9(16)  value 11741366845440.\n          05 pic 9(16)  value 11754624614400.\n          05 pic 9(16)  value 11767897353375.\n          05 pic 9(16)  value 11796480000000.\n          05 pic 9(16)  value 11809800000000.\n          05 pic 9(16)  value 11865234375000.\n          05 pic 9(16)  value 11888133931008.\n          05 pic 9(16)  value 11901557422080.\n          05 pic 9(16)  value 11943936000000.\n          05 pic 9(16)  value 11957422500000.\n          05 pic 9(16)  value 12000000000000.\n          05 pic 9(16)  value 12050326889856.\n          05 pic 9(16)  value 12079595520000.\n          05 pic 9(16)  value 12093235200000.\n          05 pic 9(16)  value 12106890281250.\n          05 pic 9(16)  value 12150000000000.\n          05 pic 9(16)  value 12207031250000.\n          05 pic 9(16)  value 12230590464000.\n          05 pic 9(16)  value 12244400640000.\n          05 pic 9(16)  value 12288000000000.\n          05 pic 9(16)  value 12301875000000.\n          05 pic 9(16)  value 12359619140625.\n          05 pic 9(16)  value 12369505812480.\n          05 pic 9(16)  value 12383472844800.\n          05 pic 9(16)  value 12397455648000.\n          05 pic 9(16)  value 12441600000000.\n          05 pic 9(16)  value 12455648437500.\n          05 pic 9(16)  value 12500000000000.\n          05 pic 9(16)  value 12524124635136.\n          05 pic 9(16)  value 12538266255360.\n          05 pic 9(16)  value 12552423843600.\n          05 pic 9(16)  value 12582912000000.\n          05 pic 9(16)  value 12597120000000.\n          05 pic 9(16)  value 12656250000000.\n          05 pic 9(16)  value 12694994583552.\n          05 pic 9(16)  value 12709329141645.\n          05 pic 9(16)  value 12740198400000.\n          05 pic 9(16)  value 12754584000000.\n          05 pic 9(16)  value 12800000000000.\n          05 pic 9(16)  value 12814453125000.\n          05 pic 9(16)  value 12884901888000.\n          05 pic 9(16)  value 12899450880000.\n          05 pic 9(16)  value 12914016300000.\n          05 pic 9(16)  value 12960000000000.\n          05 pic 9(16)  value 13045963161600.\n          05 pic 9(16)  value 13060694016000.\n          05 pic 9(16)  value 13075441503750.\n          05 pic 9(16)  value 13107200000000.\n          05 pic 9(16)  value 13122000000000.\n          05 pic 9(16)  value 13183593750000.\n          05 pic 9(16)  value 13194139533312.\n          05 pic 9(16)  value 13209037701120.\n          05 pic 9(16)  value 13223952691200.\n          05 pic 9(16)  value 13271040000000.\n          05 pic 9(16)  value 13286025000000.\n          05 pic 9(16)  value 13348388671875.\n          05 pic 9(16)  value 13374150672384.\n          05 pic 9(16)  value 13389252099840.\n          05 pic 9(16)  value 13421772800000.\n          05 pic 9(16)  value 13436928000000.\n          05 pic 9(16)  value 13452100312500.\n          05 pic 9(16)  value 13500000000000.\n          05 pic 9(16)  value 13556617751088.\n          05 pic 9(16)  value 13589544960000.\n          05 pic 9(16)  value 13604889600000.\n          05 pic 9(16)  value 13668750000000.\n          05 pic 9(16)  value 13732910156250.\n          05 pic 9(16)  value 13743895347200.\n          05 pic 9(16)  value 13759414272000.\n          05 pic 9(16)  value 13774950720000.\n          05 pic 9(16)  value 13824000000000.\n          05 pic 9(16)  value 13839609375000.\n          05 pic 9(16)  value 13915694039040.\n          05 pic 9(16)  value 13931406950400.\n          05 pic 9(16)  value 13947137604000.\n          05 pic 9(16)  value 13996800000000.\n          05 pic 9(16)  value 14062500000000.\n          05 pic 9(16)  value 14089640214528.\n          05 pic 9(16)  value 14105549537280.\n          05 pic 9(16)  value 14121476824050.\n          05 pic 9(16)  value 14155776000000.\n          05 pic 9(16)  value 14171760000000.\n          05 pic 9(16)  value 14238281250000.\n          05 pic 9(16)  value 14281868906496.\n          05 pic 9(16)  value 14332723200000.\n          05 pic 9(16)  value 14348907000000.\n          05 pic 9(16)  value 14400000000000.\n          05 pic 9(16)  value 14416259765625.\n          05 pic 9(16)  value 14495514624000.\n          05 pic 9(16)  value 14511882240000.\n          05 pic 9(16)  value 14528268337500.\n          05 pic 9(16)  value 14580000000000.\n          05 pic 9(16)  value 14648437500000.\n          05 pic 9(16)  value 14676708556800.\n          05 pic 9(16)  value 14693280768000.\n          05 pic 9(16)  value 14745600000000.\n          05 pic 9(16)  value 14762250000000.\n          05 pic 9(16)  value 14831542968750.\n          05 pic 9(16)  value 14843406974976.\n          05 pic 9(16)  value 14860167413760.\n          05 pic 9(16)  value 14876946777600.\n          05 pic 9(16)  value 14929920000000.\n          05 pic 9(16)  value 14946778125000.\n          05 pic 9(16)  value 15000000000000.\n          05 pic 9(16)  value 15045919506432.\n          05 pic 9(16)  value 15062908612320.\n          05 pic 9(16)  value 15099494400000.\n          05 pic 9(16)  value 15116544000000.\n          05 pic 9(16)  value 15187500000000.\n          05 pic 9(16)  value 15251194969974.\n          05 pic 9(16)  value 15258789062500.\n          05 pic 9(16)  value 15288238080000.\n          05 pic 9(16)  value 15305500800000.\n          05 pic 9(16)  value 15360000000000.\n          05 pic 9(16)  value 15377343750000.\n          05 pic 9(16)  value 15461882265600.\n          05 pic 9(16)  value 15479341056000.\n          05 pic 9(16)  value 15496819560000.\n          05 pic 9(16)  value 15552000000000.\n          05 pic 9(16)  value 15569560546875.\n          05 pic 9(16)  value 15625000000000.\n          05 pic 9(16)  value 15655155793920.\n          05 pic 9(16)  value 15672832819200.\n          05 pic 9(16)  value 15690529804500.\n          05 pic 9(16)  value 15728640000000.\n          05 pic 9(16)  value 15746400000000.\n          05 pic 9(16)  value 15820312500000.\n          05 pic 9(16)  value 15850845241344.\n          05 pic 9(16)  value 15868743229440.\n          05 pic 9(16)  value 15925248000000.\n          05 pic 9(16)  value 15943230000000.\n          05 pic 9(16)  value 16000000000000.\n          05 pic 9(16)  value 16018066406250.\n          05 pic 9(16)  value 16067102519808.\n          05 pic 9(16)  value 16106127360000.\n          05 pic 9(16)  value 16124313600000.\n          05 pic 9(16)  value 16142520375000.\n          05 pic 9(16)  value 16200000000000.\n          05 pic 9(16)  value 16307453952000.\n          05 pic 9(16)  value 16325867520000.\n          05 pic 9(16)  value 16384000000000.\n          05 pic 9(16)  value 16402500000000.\n          05 pic 9(16)  value 16479492187500.\n          05 pic 9(16)  value 16492674416640.\n          05 pic 9(16)  value 16511297126400.\n          05 pic 9(16)  value 16529940864000.\n          05 pic 9(16)  value 16588800000000.\n          05 pic 9(16)  value 16607531250000.\n          05 pic 9(16)  value 16698832846848.\n          05 pic 9(16)  value 16717688340480.\n          05 pic 9(16)  value 16736565124800.\n          05 pic 9(16)  value 16777216000000.\n          05 pic 9(16)  value 16796160000000.\n          05 pic 9(16)  value 16815125390625.\n          05 pic 9(16)  value 16875000000000.\n          05 pic 9(16)  value 16926659444736.\n          05 pic 9(16)  value 16945772188860.\n          05 pic 9(16)  value 16986931200000.\n          05 pic 9(16)  value 17006112000000.\n          05 pic 9(16)  value 17085937500000.\n          05 pic 9(16)  value 17179869184000.\n          05 pic 9(16)  value 17199267840000.\n          05 pic 9(16)  value 17218688400000.\n          05 pic 9(16)  value 17280000000000.\n          05 pic 9(16)  value 17299511718750.\n          05 pic 9(16)  value 17394617548800.\n          05 pic 9(16)  value 17414258688000.\n          05 pic 9(16)  value 17433922005000.\n          05 pic 9(16)  value 17496000000000.\n          05 pic 9(16)  value 17578125000000.\n          05 pic 9(16)  value 17592186044416.\n          05 pic 9(16)  value 17612050268160.\n          05 pic 9(16)  value 17631936921600.\n          05 pic 9(16)  value 17694720000000.\n          05 pic 9(16)  value 17714700000000.\n          05 pic 9(16)  value 17797851562500.\n          05 pic 9(16)  value 17832200896512.\n          05 pic 9(16)  value 17852336133120.\n          05 pic 9(16)  value 17915904000000.\n          05 pic 9(16)  value 17936133750000.\n          05 pic 9(16)  value 18000000000000.\n          05 pic 9(16)  value 18075490334784.\n          05 pic 9(16)  value 18119393280000.\n          05 pic 9(16)  value 18139852800000.\n          05 pic 9(16)  value 18160335421875.\n          05 pic 9(16)  value 18225000000000.\n          05 pic 9(16)  value 18310546875000.\n          05 pic 9(16)  value 18345885696000.\n          05 pic 9(16)  value 18366600960000.\n          05 pic 9(16)  value 18432000000000.\n          05 pic 9(16)  value 18452812500000.\n          05 pic 9(16)  value 18554258718720.\n          05 pic 9(16)  value 18575209267200.\n          05 pic 9(16)  value 18596183472000.\n          05 pic 9(16)  value 18662400000000.\n          05 pic 9(16)  value 18683472656250.\n          05 pic 9(16)  value 18750000000000.\n          05 pic 9(16)  value 18786186952704.\n          05 pic 9(16)  value 18807399383040.\n          05 pic 9(16)  value 18828635765400.\n          05 pic 9(16)  value 18874368000000.\n          05 pic 9(16)  value 18895680000000.\n          05 pic 9(16)  value 18984375000000.\n          05 pic 9(16)  value 19042491875328.\n          05 pic 9(16)  value 19073486328125.\n          05 pic 9(16)  value 19110297600000.\n          05 pic 9(16)  value 19131876000000.\n          05 pic 9(16)  value 19200000000000.\n          05 pic 9(16)  value 19221679687500.\n          05 pic 9(16)  value 19327352832000.\n          05 pic 9(16)  value 19349176320000.\n          05 pic 9(16)  value 19371024450000.\n          05 pic 9(16)  value 19440000000000.\n          05 pic 9(16)  value 19531250000000.\n          05 pic 9(16)  value 19568944742400.\n          05 pic 9(16)  value 19591041024000.\n          05 pic 9(16)  value 19613162255625.\n          05 pic 9(16)  value 19660800000000.\n          05 pic 9(16)  value 19683000000000.\n          05 pic 9(16)  value 19775390625000.\n          05 pic 9(16)  value 19791209299968.\n          05 pic 9(16)  value 19813556551680.\n          05 pic 9(16)  value 19835929036800.\n          05 pic 9(16)  value 19906560000000.\n          05 pic 9(16)  value 19929037500000.\n          05 pic 9(16)  value 20000000000000.\n          05 pic 9(16)  value 20061226008576.\n          05 pic 9(16)  value 20083878149760.\n          05 pic 9(16)  value 20132659200000.\n          05 pic 9(16)  value 20155392000000.\n          05 pic 9(16)  value 20178150468750.\n          05 pic 9(16)  value 20250000000000.\n          05 pic 9(16)  value 20334926626632.\n          05 pic 9(16)  value 20384317440000.\n          05 pic 9(16)  value 20407334400000.\n          05 pic 9(16)  value 20480000000000.\n          05 pic 9(16)  value 20503125000000.\n          05 pic 9(16)  value 20599365234375.\n          05 pic 9(16)  value 20615843020800.\n          05 pic 9(16)  value 20639121408000.\n          05 pic 9(16)  value 20662426080000.\n          05 pic 9(16)  value 20736000000000.\n          05 pic 9(16)  value 20759414062500.\n          05 pic 9(16)  value 20873541058560.\n          05 pic 9(16)  value 20897110425600.\n          05 pic 9(16)  value 20920706406000.\n          05 pic 9(16)  value 20971520000000.\n          05 pic 9(16)  value 20995200000000.\n          05 pic 9(16)  value 21093750000000.\n          05 pic 9(16)  value 21134460321792.\n          05 pic 9(16)  value 21158324305920.\n          05 pic 9(16)  value 21182215236075.\n          05 pic 9(16)  value 21233664000000.\n          05 pic 9(16)  value 21257640000000.\n          05 pic 9(16)  value 21357421875000.\n          05 pic 9(16)  value 21422803359744.\n          05 pic 9(16)  value 21474836480000.\n          05 pic 9(16)  value 21499084800000.\n          05 pic 9(16)  value 21523360500000.\n          05 pic 9(16)  value 21600000000000.\n          05 pic 9(16)  value 21743271936000.\n          05 pic 9(16)  value 21767823360000.\n          05 pic 9(16)  value 21792402506250.\n          05 pic 9(16)  value 21870000000000.\n          05 pic 9(16)  value 21972656250000.\n          05 pic 9(16)  value 21990232555520.\n          05 pic 9(16)  value 22015062835200.\n          05 pic 9(16)  value 22039921152000.\n          05 pic 9(16)  value 22118400000000.\n          05 pic 9(16)  value 22143375000000.\n          05 pic 9(16)  value 22247314453125.\n          05 pic 9(16)  value 22265110462464.\n          05 pic 9(16)  value 22290251120640.\n          05 pic 9(16)  value 22315420166400.\n          05 pic 9(16)  value 22394880000000.\n          05 pic 9(16)  value 22420167187500.\n          05 pic 9(16)  value 22500000000000.\n          05 pic 9(16)  value 22568879259648.\n          05 pic 9(16)  value 22594362918480.\n          05 pic 9(16)  value 22649241600000.\n          05 pic 9(16)  value 22674816000000.\n          05 pic 9(16)  value 22781250000000.\n          05 pic 9(16)  value 22876792454961.\n          05 pic 9(16)  value 22888183593750.\n          05 pic 9(16)  value 22932357120000.\n          05 pic 9(16)  value 22958251200000.\n          05 pic 9(16)  value 23040000000000.\n          05 pic 9(16)  value 23066015625000.\n          05 pic 9(16)  value 23192823398400.\n          05 pic 9(16)  value 23219011584000.\n          05 pic 9(16)  value 23245229340000.\n          05 pic 9(16)  value 23328000000000.\n          05 pic 9(16)  value 23437500000000.\n          05 pic 9(16)  value 23482733690880.\n          05 pic 9(16)  value 23509249228800.\n          05 pic 9(16)  value 23535794706750.\n          05 pic 9(16)  value 23592960000000.\n          05 pic 9(16)  value 23619600000000.\n          05 pic 9(16)  value 23730468750000.\n          05 pic 9(16)  value 23776267862016.\n          05 pic 9(16)  value 23803114844160.\n          05 pic 9(16)  value 23887872000000.\n          05 pic 9(16)  value 23914845000000.\n          05 pic 9(16)  value 24000000000000.\n          05 pic 9(16)  value 24027099609375.\n          05 pic 9(16)  value 24100653779712.\n          05 pic 9(16)  value 24159191040000.\n          05 pic 9(16)  value 24186470400000.\n          05 pic 9(16)  value 24213780562500.\n          05 pic 9(16)  value 24300000000000.\n          05 pic 9(16)  value 24414062500000.\n          05 pic 9(16)  value 24461180928000.\n          05 pic 9(16)  value 24488801280000.\n          05 pic 9(16)  value 24576000000000.\n          05 pic 9(16)  value 24603750000000.\n          05 pic 9(16)  value 24719238281250.\n          05 pic 9(16)  value 24739011624960.\n          05 pic 9(16)  value 24766945689600.\n          05 pic 9(16)  value 24794911296000.\n          05 pic 9(16)  value 24883200000000.\n          05 pic 9(16)  value 24911296875000.\n          05 pic 9(16)  value 25000000000000.\n          05 pic 9(16)  value 25048249270272.\n          05 pic 9(16)  value 25076532510720.\n          05 pic 9(16)  value 25104847687200.\n          05 pic 9(16)  value 25165824000000.\n          05 pic 9(16)  value 25194240000000.\n          05 pic 9(16)  value 25312500000000.\n          05 pic 9(16)  value 25389989167104.\n          05 pic 9(16)  value 25418658283290.\n          05 pic 9(16)  value 25480396800000.\n          05 pic 9(16)  value 25509168000000.\n          05 pic 9(16)  value 25600000000000.\n          05 pic 9(16)  value 25628906250000.\n          05 pic 9(16)  value 25769803776000.\n          05 pic 9(16)  value 25798901760000.\n          05 pic 9(16)  value 25828032600000.\n          05 pic 9(16)  value 25920000000000.\n          05 pic 9(16)  value 25949267578125.\n          05 pic 9(16)  value 26091926323200.\n          05 pic 9(16)  value 26121388032000.\n          05 pic 9(16)  value 26150883007500.\n          05 pic 9(16)  value 26214400000000.\n          05 pic 9(16)  value 26244000000000.\n          05 pic 9(16)  value 26367187500000.\n          05 pic 9(16)  value 26388279066624.\n          05 pic 9(16)  value 26418075402240.\n          05 pic 9(16)  value 26447905382400.\n          05 pic 9(16)  value 26542080000000.\n          05 pic 9(16)  value 26572050000000.\n          05 pic 9(16)  value 26696777343750.\n          05 pic 9(16)  value 26748301344768.\n          05 pic 9(16)  value 26778504199680.\n          05 pic 9(16)  value 26843545600000.\n          05 pic 9(16)  value 26873856000000.\n          05 pic 9(16)  value 26904200625000.\n          05 pic 9(16)  value 27000000000000.\n          05 pic 9(16)  value 27113235502176.\n          05 pic 9(16)  value 27179089920000.\n          05 pic 9(16)  value 27209779200000.\n          05 pic 9(16)  value 27337500000000.\n          05 pic 9(16)  value 27465820312500.\n          05 pic 9(16)  value 27487790694400.\n          05 pic 9(16)  value 27518828544000.\n          05 pic 9(16)  value 27549901440000.\n          05 pic 9(16)  value 27648000000000.\n          05 pic 9(16)  value 27679218750000.\n          05 pic 9(16)  value 27831388078080.\n          05 pic 9(16)  value 27862813900800.\n          05 pic 9(16)  value 27894275208000.\n          05 pic 9(16)  value 27993600000000.\n          05 pic 9(16)  value 28025208984375.\n          05 pic 9(16)  value 28125000000000.\n          05 pic 9(16)  value 28179280429056.\n          05 pic 9(16)  value 28211099074560.\n          05 pic 9(16)  value 28242953648100.\n          05 pic 9(16)  value 28311552000000.\n          05 pic 9(16)  value 28343520000000.\n          05 pic 9(16)  value 28476562500000.\n          05 pic 9(16)  value 28563737812992.\n          05 pic 9(16)  value 28665446400000.\n          05 pic 9(16)  value 28697814000000.\n          05 pic 9(16)  value 28800000000000.\n          05 pic 9(16)  value 28832519531250.\n          05 pic 9(16)  value 28991029248000.\n          05 pic 9(16)  value 29023764480000.\n          05 pic 9(16)  value 29056536675000.\n          05 pic 9(16)  value 29160000000000.\n          05 pic 9(16)  value 29296875000000.\n          05 pic 9(16)  value 29353417113600.\n          05 pic 9(16)  value 29386561536000.\n          05 pic 9(16)  value 29491200000000.\n          05 pic 9(16)  value 29524500000000.\n          05 pic 9(16)  value 29663085937500.\n          05 pic 9(16)  value 29686813949952.\n          05 pic 9(16)  value 29720334827520.\n          05 pic 9(16)  value 29753893555200.\n          05 pic 9(16)  value 29859840000000.\n          05 pic 9(16)  value 29893556250000.\n          05 pic 9(16)  value 30000000000000.\n          05 pic 9(16)  value 30091839012864.\n          05 pic 9(16)  value 30125817224640.\n          05 pic 9(16)  value 30198988800000.\n          05 pic 9(16)  value 30233088000000.\n          05 pic 9(16)  value 30267225703125.\n          05 pic 9(16)  value 30375000000000.\n          05 pic 9(16)  value 30502389939948.\n          05 pic 9(16)  value 30517578125000.\n          05 pic 9(16)  value 30576476160000.\n          05 pic 9(16)  value 30611001600000.\n          05 pic 9(16)  value 30720000000000.\n          05 pic 9(16)  value 30754687500000.\n          05 pic 9(16)  value 30923764531200.\n          05 pic 9(16)  value 30958682112000.\n          05 pic 9(16)  value 30993639120000.\n          05 pic 9(16)  value 31104000000000.\n          05 pic 9(16)  value 31139121093750.\n          05 pic 9(16)  value 31250000000000.\n          05 pic 9(16)  value 31310311587840.\n          05 pic 9(16)  value 31345665638400.\n          05 pic 9(16)  value 31381059609000.\n          05 pic 9(16)  value 31457280000000.\n          05 pic 9(16)  value 31492800000000.\n          05 pic 9(16)  value 31640625000000.\n          05 pic 9(16)  value 31701690482688.\n          05 pic 9(16)  value 31737486458880.\n          05 pic 9(16)  value 31850496000000.\n          05 pic 9(16)  value 31886460000000.\n          05 pic 9(16)  value 32000000000000.\n          05 pic 9(16)  value 32036132812500.\n          05 pic 9(16)  value 32134205039616.\n          05 pic 9(16)  value 32212254720000.\n          05 pic 9(16)  value 32248627200000.\n          05 pic 9(16)  value 32285040750000.\n          05 pic 9(16)  value 32400000000000.\n          05 pic 9(16)  value 32614907904000.\n          05 pic 9(16)  value 32651735040000.\n          05 pic 9(16)  value 32688603759375.\n          05 pic 9(16)  value 32768000000000.\n          05 pic 9(16)  value 32805000000000.\n          05 pic 9(16)  value 32958984375000.\n          05 pic 9(16)  value 32985348833280.\n          05 pic 9(16)  value 33022594252800.\n          05 pic 9(16)  value 33059881728000.\n          05 pic 9(16)  value 33177600000000.\n          05 pic 9(16)  value 33215062500000.\n          05 pic 9(16)  value 33397665693696.\n          05 pic 9(16)  value 33435376680960.\n          05 pic 9(16)  value 33473130249600.\n          05 pic 9(16)  value 33554432000000.\n          05 pic 9(16)  value 33592320000000.\n          05 pic 9(16)  value 33630250781250.\n          05 pic 9(16)  value 33750000000000.\n          05 pic 9(16)  value 33853318889472.\n          05 pic 9(16)  value 33891544377720.\n          05 pic 9(16)  value 33973862400000.\n          05 pic 9(16)  value 34012224000000.\n          05 pic 9(16)  value 34171875000000.\n          05 pic 9(16)  value 34332275390625.\n          05 pic 9(16)  value 34359738368000.\n          05 pic 9(16)  value 34398535680000.\n          05 pic 9(16)  value 34437376800000.\n          05 pic 9(16)  value 34560000000000.\n          05 pic 9(16)  value 34599023437500.\n          05 pic 9(16)  value 34789235097600.\n          05 pic 9(16)  value 34828517376000.\n          05 pic 9(16)  value 34867844010000.\n          05 pic 9(16)  value 34992000000000.\n          05 pic 9(16)  value 35156250000000.\n          05 pic 9(16)  value 35184372088832.\n          05 pic 9(16)  value 35224100536320.\n          05 pic 9(16)  value 35263873843200.\n          05 pic 9(16)  value 35303692060125.\n          05 pic 9(16)  value 35389440000000.\n          05 pic 9(16)  value 35429400000000.\n          05 pic 9(16)  value 35595703125000.\n          05 pic 9(16)  value 35664401793024.\n          05 pic 9(16)  value 35704672266240.\n          05 pic 9(16)  value 35831808000000.\n          05 pic 9(16)  value 35872267500000.\n          05 pic 9(16)  value 36000000000000.\n          05 pic 9(16)  value 36150980669568.\n          05 pic 9(16)  value 36238786560000.\n          05 pic 9(16)  value 36279705600000.\n          05 pic 9(16)  value 36320670843750.\n          05 pic 9(16)  value 36450000000000.\n          05 pic 9(16)  value 36621093750000.\n          05 pic 9(16)  value 36691771392000.\n          05 pic 9(16)  value 36733201920000.\n          05 pic 9(16)  value 36864000000000.\n          05 pic 9(16)  value 36905625000000.\n          05 pic 9(16)  value 37078857421875.\n          05 pic 9(16)  value 37108517437440.\n          05 pic 9(16)  value 37150418534400.\n          05 pic 9(16)  value 37192366944000.\n          05 pic 9(16)  value 37324800000000.\n          05 pic 9(16)  value 37366945312500.\n          05 pic 9(16)  value 37500000000000.\n          05 pic 9(16)  value 37572373905408.\n          05 pic 9(16)  value 37614798766080.\n          05 pic 9(16)  value 37657271530800.\n          05 pic 9(16)  value 37748736000000.\n          05 pic 9(16)  value 37791360000000.\n          05 pic 9(16)  value 37968750000000.\n          05 pic 9(16)  value 38084983750656.\n          05 pic 9(16)  value 38127987424935.\n          05 pic 9(16)  value 38146972656250.\n          05 pic 9(16)  value 38220595200000.\n          05 pic 9(16)  value 38263752000000.\n          05 pic 9(16)  value 38400000000000.\n          05 pic 9(16)  value 38443359375000.\n          05 pic 9(16)  value 38654705664000.\n          05 pic 9(16)  value 38698352640000.\n          05 pic 9(16)  value 38742048900000.\n          05 pic 9(16)  value 38880000000000.\n          05 pic 9(16)  value 39062500000000.\n          05 pic 9(16)  value 39137889484800.\n          05 pic 9(16)  value 39182082048000.\n          05 pic 9(16)  value 39226324511250.\n          05 pic 9(16)  value 39321600000000.\n          05 pic 9(16)  value 39366000000000.\n          05 pic 9(16)  value 39550781250000.\n          05 pic 9(16)  value 39582418599936.\n          05 pic 9(16)  value 39627113103360.\n          05 pic 9(16)  value 39671858073600.\n          05 pic 9(16)  value 39813120000000.\n          05 pic 9(16)  value 39858075000000.\n          05 pic 9(16)  value 40000000000000.\n          05 pic 9(16)  value 40045166015625.\n          05 pic 9(16)  value 40122452017152.\n          05 pic 9(16)  value 40167756299520.\n          05 pic 9(16)  value 40265318400000.\n          05 pic 9(16)  value 40310784000000.\n          05 pic 9(16)  value 40356300937500.\n          05 pic 9(16)  value 40500000000000.\n          05 pic 9(16)  value 40669853253264.\n          05 pic 9(16)  value 40768634880000.\n          05 pic 9(16)  value 40814668800000.\n          05 pic 9(16)  value 40960000000000.\n          05 pic 9(16)  value 41006250000000.\n          05 pic 9(16)  value 41198730468750.\n          05 pic 9(16)  value 41231686041600.\n          05 pic 9(16)  value 41278242816000.\n          05 pic 9(16)  value 41324852160000.\n          05 pic 9(16)  value 41472000000000.\n          05 pic 9(16)  value 41518828125000.\n          05 pic 9(16)  value 41747082117120.\n          05 pic 9(16)  value 41794220851200.\n          05 pic 9(16)  value 41841412812000.\n          05 pic 9(16)  value 41943040000000.\n          05 pic 9(16)  value 41990400000000.\n          05 pic 9(16)  value 42187500000000.\n          05 pic 9(16)  value 42268920643584.\n          05 pic 9(16)  value 42316648611840.\n          05 pic 9(16)  value 42364430472150.\n          05 pic 9(16)  value 42467328000000.\n          05 pic 9(16)  value 42515280000000.\n          05 pic 9(16)  value 42714843750000.\n          05 pic 9(16)  value 42845606719488.\n          05 pic 9(16)  value 42949672960000.\n          05 pic 9(16)  value 42998169600000.\n          05 pic 9(16)  value 43046721000000.\n          05 pic 9(16)  value 43200000000000.\n          05 pic 9(16)  value 43248779296875.\n          05 pic 9(16)  value 43486543872000.\n          05 pic 9(16)  value 43535646720000.\n          05 pic 9(16)  value 43584805012500.\n          05 pic 9(16)  value 43740000000000.\n          05 pic 9(16)  value 43945312500000.\n          05 pic 9(16)  value 43980465111040.\n          05 pic 9(16)  value 44030125670400.\n          05 pic 9(16)  value 44079842304000.\n          05 pic 9(16)  value 44236800000000.\n          05 pic 9(16)  value 44286750000000.\n          05 pic 9(16)  value 44494628906250.\n          05 pic 9(16)  value 44530220924928.\n          05 pic 9(16)  value 44580502241280.\n          05 pic 9(16)  value 44630840332800.\n          05 pic 9(16)  value 44789760000000.\n          05 pic 9(16)  value 44840334375000.\n          05 pic 9(16)  value 45000000000000.\n          05 pic 9(16)  value 45137758519296.\n          05 pic 9(16)  value 45188725836960.\n          05 pic 9(16)  value 45298483200000.\n          05 pic 9(16)  value 45349632000000.\n          05 pic 9(16)  value 45562500000000.\n          05 pic 9(16)  value 45753584909922.\n          05 pic 9(16)  value 45776367187500.\n          05 pic 9(16)  value 45864714240000.\n          05 pic 9(16)  value 45916502400000.\n          05 pic 9(16)  value 46080000000000.\n          05 pic 9(16)  value 46132031250000.\n          05 pic 9(16)  value 46385646796800.\n          05 pic 9(16)  value 46438023168000.\n          05 pic 9(16)  value 46490458680000.\n          05 pic 9(16)  value 46656000000000.\n          05 pic 9(16)  value 46708681640625.\n          05 pic 9(16)  value 46875000000000.\n          05 pic 9(16)  value 46965467381760.\n          05 pic 9(16)  value 47018498457600.\n          05 pic 9(16)  value 47071589413500.\n          05 pic 9(16)  value 47185920000000.\n          05 pic 9(16)  value 47239200000000.\n          05 pic 9(16)  value 47460937500000.\n          05 pic 9(16)  value 47552535724032.\n          05 pic 9(16)  value 47606229688320.\n          05 pic 9(16)  value 47775744000000.\n          05 pic 9(16)  value 47829690000000.\n          05 pic 9(16)  value 48000000000000.\n          05 pic 9(16)  value 48054199218750.\n          05 pic 9(16)  value 48201307559424.\n          05 pic 9(16)  value 48318382080000.\n          05 pic 9(16)  value 48372940800000.\n          05 pic 9(16)  value 48427561125000.\n          05 pic 9(16)  value 48600000000000.\n          05 pic 9(16)  value 48828125000000.\n          05 pic 9(16)  value 48922361856000.\n          05 pic 9(16)  value 48977602560000.\n          05 pic 9(16)  value 49152000000000.\n          05 pic 9(16)  value 49207500000000.\n          05 pic 9(16)  value 49438476562500.\n          05 pic 9(16)  value 49478023249920.\n          05 pic 9(16)  value 49533891379200.\n          05 pic 9(16)  value 49589822592000.\n          05 pic 9(16)  value 49766400000000.\n          05 pic 9(16)  value 49822593750000.\n          05 pic 9(16)  value 50000000000000.\n          05 pic 9(16)  value 50096498540544.\n          05 pic 9(16)  value 50153065021440.\n          05 pic 9(16)  value 50209695374400.\n          05 pic 9(16)  value 50331648000000.\n          05 pic 9(16)  value 50388480000000.\n          05 pic 9(16)  value 50445376171875.\n          05 pic 9(16)  value 50625000000000.\n          05 pic 9(16)  value 50779978334208.\n          05 pic 9(16)  value 50837316566580.\n       01 xs-HC redefines hardcode-power.\n          05 hardcoding-is-not-a-crime pic 9(16)\n                occurs 5000 times indexed by i.\n       linkage section.\n      * bounds: 1 <= n <= 5,000: finger in the nose\n       01  n           pic 9(8). \n       01  result      pic 9(16).\n      \n       procedure division using n result.\n      \n          move hardcoding-is-not-a-crime(n) to result.\n          goback.\n      \n       end program hamming.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5270d0d18625160ada0000e4":[{"id":19552,"user_id":168,"body":"       identification division.\n       program-id. score.\n       data division.\n       local-storage section.\n       01  cs pic 9 occurs 6 times.\n      \n       linkage section.\n       01  dice.\n           05 xs             pic 9 occurs 5 times indexed by i.\n       01  result            pic 9(4).\n      \n       procedure division using dice result.\n          perform varying i from 1 until i > 5\n              add 1 to cs(xs(i))\n          end-perform\n          move 0 to result\n          perform varying i from 1 until i > 6\n              if cs(i) >= 3\n                  if i = 1\n                      add 1000 to result\n                  else\n                      compute result = result + i * 100\n                  end-if\n                  subtract 3 from cs(i)\n              end-if\n          end-perform\n          compute result = result + cs(1) * 100 + cs(5) * 50\n          goback.\n       end program score.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19553,"user_id":53,"body":"       identification division.\n       program-id. score.\n       data division.\n       working-storage section.\n       01  combos.\n           05 combo          pic 9(4) occurs 6 times.\n       01  items.\n           05 item           pic 9(4) occurs 6 times.\n       local-storage section.\n       01  hit.\n           05 hits           pic 9(4) occurs 6 times\n                                   indexed by j.\n       linkage section.\n       01  dice.\n           05 xs             pic 9 occurs 5 times\n                                   indexed by i.\n       01  result            pic 9(4).\n       procedure division using dice result.\n          move 0 to result\n          if combo(1) = 0 then\n            move 1000 to combo(1)\n            move 200 to combo(2)\n            move 300 to combo(3)\n            move 400 to combo(4)\n            move 500 to combo(5)\n            move 600 to combo(6)\n            move 100 to item(1)\n            move 0 to item(2)\n            move 0 to item(3)\n            move 0 to item(4)\n            move 50 to item(5)\n            move 0 to item(6)\n          end-if\n          perform varying i from 1 until i = 6\n            add 1 to hits(xs(i))\n          end-perform\n          perform varying j from 1 until j = 7\n            compute result = result + combo(j)\n              * (function integer (hits(j) \/ 3))\n              + ((function mod (hits(j) 3)) * item(j))\n          end-perform\n          goback.\n       end program score.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19554,"user_id":50,"body":"       identification division.\n       program-id. score.\n       data division.\n       local-storage section.\n       01  counter.\n           05 c             pic 9(4) occurs 6 times.\n      \n       linkage section.\n       01  dice.\n           05 xs             pic 9 occurs 5 times\n                                   indexed by i.\n       01  result            pic 9(4).\n      \n       procedure division using dice result.\n          initialize counter\n          perform varying i from 1 until i = 6\n            add 1 to c(xs(i))\n          end-perform\n          compute result = function integer(c(1) \/ 3) * 1000 +\n                           function integer(c(5) \/ 3) * 500  +\n                           function integer(c(6) \/ 3) * 600  +\n                           function integer(c(4) \/ 3) * 400  +\n                           function integer(c(3) \/ 3) * 300  +\n                           function integer(c(2) \/ 3) * 200  +\n                           function rem(c(1), 3)      * 100  +\n                           function rem(c(5), 3)      *  50\n      \n          goback.\n       end program score.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52742f58faf5485cae000b9a":[{"id":19555,"user_id":null,"body":"       identification division.\n       program-id. FormatDuration.\n       data division.\n       working-storage section.\n       78  SEC-MINUTE       value 60.\n       78  SEC-HOUR         value SEC-MINUTE * 60.\n       78  SEC-DAY          value SEC-HOUR * 24.\n       78  SEC-YEAR         value SEC-DAY * 365.\n      \n       01  years            pic 9(03).\n       01  months           pic 9(03).\n       01  days             pic 9(03).\n       01  hours            pic 9(03).\n       01  minutes          pic 9(03).\n       01  seconds          pic 9(03).\n      \n       01  tab-components.\n           05 n-components  pic 9.\n           05 i             pic 9.\n           05 filler        occurs 6 times.\n              10 dur        pic 9(03).\n              10 lit        pic x(07).\n      \n       01  number-edt       pic zz9.\n       01  human-readable   pic x(100).\n       01  text-pointer     pic 9(02).\n      \n       linkage section.\n       01  secnds           pic 9(10).\n       01  result.\n           05  res-length   pic 9(3).\n           05  res          pic x occurs 0 to 100 times \n                                 depending on res-length.\n      \n       procedure division using secnds result.\n          initialize result, tab-components\n      \n          if secnds = zeros\n             move 3 to res-length\n             move \"now\" to result(4:)\n             goback\n          end-if\n           \n          compute years = secnds \/ SEC-YEAR \n          compute secnds = secnds - years * SEC-YEAR \n          if years > zeros\n             add 1 to n-components\n             move years to dur(n-components)\n             if years = 1\n                move \"year\" to lit(n-components)\n             else\n                move \"years\" to lit(n-components)\n             end-if\n          end-if\n\n          compute days = secnds \/ SEC-DAY\n          compute secnds = secnds - days * SEC-DAY\n          if days > zeros\n             add 1 to n-components\n             move days to dur(n-components)\n             if days = 1\n                move \"day\" to lit(n-components)\n             else\n                move \"days\" to lit(n-components)\n             end-if\n          end-if\n\n          compute hours = secnds \/ SEC-HOUR\n          compute secnds = secnds - hours * SEC-HOUR\n          if hours > zeros\n             add 1 to n-components\n             move hours to dur(n-components)\n             if hours = 1\n                move \"hour\" to lit(n-components)\n             else\n                move \"hours\" to lit(n-components)\n             end-if\n          end-if\n      \n          compute minutes = secnds \/ SEC-MINUTE\n          if minutes > zeros\n             add 1 to n-components\n             move minutes to dur(n-components)\n             if minutes = 1\n                move \"minute\" to lit(n-components)\n             else\n                move \"minutes\" to lit(n-components)\n             end-if\n          end-if\n\n          compute secnds = secnds - minutes * SEC-MINUTE\n          move secnds to seconds\n          if seconds > zeros\n             add 1 to n-components\n             move seconds to dur(n-components)\n             move \"second\" to lit(n-components)\n             if seconds = 1\n                move \"second\" to lit(n-components)\n             else\n                move \"seconds\" to lit(n-components)\n             end-if\n          end-if\n      \n          initialize human-readable\n          move 1 to text-pointer\n          perform varying i from 1 by 1 until i > n-components\n             if i > 1\n                if i < n-components \n                  string \", \" into human-readable \n                     with pointer text-pointer\n                else\n                  string \" and \" into human-readable \n                     with pointer text-pointer\n                end-if\n             end-if\n             move dur(i) to number-edt\n             string function trim(number-edt), \" \" function trim(lit(i))\n                into human-readable \n                with pointer text-pointer\n          end-perform\n\n          move function length(function trim(human-readable)) \n                        to res-length\n          move function trim(human-readable) to result(4:res-length)\n      \n          goback.\n       end program FormatDuration.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19556,"user_id":53,"body":"       identification division.\n       program-id. FormatDuration.\n       data division.\n       local-storage section.\n       01  i                usage index.\n       01  j                usage index.\n       01  y                pic 9(10).\n       01  d                pic 9(10).\n       01  h                pic 9(10).\n       01  m                pic 9(10).\n       01  s                pic 9(10).\n       01  r                pic 9(10).\n       01  x                pic z(9)9.\n       01  comp-arr.\n           05  comp-length  pic 9.\n           05  comp-xs      pic x(20) occurs 0 to 9 times \n                            depending comp-length.\n       linkage section.\n       01  t                pic 9(10).\n       01  result.\n           05  res-length   pic 9(3).\n           05  res.\n              07 pic x      occurs 0 to 100 times \n                            depending res-length.\n       procedure division using t result.\n          initialize result \n          if t = 0 then\n            move 3 to res-length\n            move 'now' to res\n            goback\n          end-if\n          move t to r\n          divide 31536000 into r giving y remainder r\n          divide 86400 into r giving d remainder r\n          divide 3600 into r giving h remainder r\n          divide 60 into r giving m remainder s\n          evaluate true\n            when y = 1\n              add 1 to comp-length\n              move '1 year' to comp-xs(comp-length)\n            when y > 1\n              add 1 to comp-length\n              move y to x\n              string function trim(x) ' years' \n              into comp-xs(comp-length)\n          end-evaluate\n          evaluate true\n            when d = 1\n              add 1 to comp-length\n              move '1 day' to comp-xs(comp-length)\n            when d > 1\n              add 1 to comp-length\n              move d to x\n              string function trim(x) ' days' \n              into comp-xs(comp-length)\n          end-evaluate\n          evaluate true\n            when h = 1\n              add 1 to comp-length\n              move '1 hour' to comp-xs(comp-length)\n            when h > 1\n              add 1 to comp-length\n              move h to x\n              string function trim(x) ' hours' \n              into comp-xs(comp-length)\n          end-evaluate\n          evaluate true\n            when m = 1\n              add 1 to comp-length\n              move '1 minute' to comp-xs(comp-length)\n            when m > 1\n              add 1 to comp-length\n              move m to x\n              string function trim(x) ' minutes' \n              into comp-xs(comp-length)\n          end-evaluate\n          evaluate true\n            when s = 1\n              add 1 to comp-length\n              move '1 second' to comp-xs(comp-length)\n            when s > 1\n              add 1 to comp-length\n              move s to x\n              string function trim(x) ' seconds' \n              into comp-xs(comp-length)\n          end-evaluate\n          set i to 1\n          set res-length to 99\n          perform varying j from 1 until j > comp-length\n            evaluate true\n              when j = comp-length and j > 1\n                string ' and ' into res pointer i\n              when j > 1\n                string ', ' into res pointer i\n            end-evaluate\n            string function trim(comp-xs(j)) into res pointer i\n          end-perform\n          subtract 1 from i giving res-length\n          display res\n          goback.\n       end program FormatDuration.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19557,"user_id":50,"body":"       identification division.\n       program-id. FormatDuration.\n       data division.\n       local-storage section.\n       01  vals.\n           05 .\n              07  pic 9(8) value 31536000.\n              07  pic a(6) value 'year'.\n           05 .\n              07  pic 9(8) value 86400.\n              07  pic a(6) value 'day'.\n           05 .\n              07  pic 9(8) value 3600.\n              07  pic a(6) value 'hour'.\n           05 .\n              07  pic 9(8) value 60.\n              07  pic a(6) value 'minute'.\n           05 .\n              07  pic 9(8).\n              07  pic a(6) value 'second'.\n       01  redefines vals.\n           05 occurs 5 times indexed k.\n              07 v pic 9(8).\n              07 t pic a(6).\n       01  .\n           05  len pic 9.\n           05  e pic x(50) occurs 1 to 5 times\n                           depending len indexed j.\n       01  n   pic 9(10).\n       01  d   pic z(9)9.\n       01  i   usage index.\n      \n       linkage section.\n       01  s               pic 9(10).\n       01  result.\n           05 l            pic 9(3).\n           05 r.\n              07 pic x  occurs 0 to 100 times depending l.\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          if s = 0 move '003now' to result goback end-if\n      \n          perform varying k from 1 until k = 6\n            if s > 0 and s >= v(k)\n              set i to 1\n              divide s by function max(v(k), 1) giving n remainder s\n              move n to d\n              add 1 to len\n              string function trim(d) ' ' function trim(t(k))\n                 into e(len) pointer i\n              if n > 1 string 's' into e(len) pointer i end-if\n            end-if\n          end-perform\n      \n          move 99 to l\n          set i to 1\n          perform varying j from 1 until j > len\n            string function trim(e(j)) into r pointer i\n            evaluate j\n            when   len - 1     string ' and ' into r pointer i\n            when < len - 1     string ', '    into r pointer i\n            when   other       compute l = i - 1\n            end-evaluate\n          end-perform\n      \n          goback.\n      \n       end program FormatDuration.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5274d9d3ebc3030802000165":[{"id":19558,"user_id":null,"body":"       identification division.\n       program-id. NbrOfLaps.\n       data division.\n       working-storage section.\n       01 lcm                pic 9(8).\n       01 gcd                pic 9(8).\n       01 temp               pic 9(8).\n       01 w-x                pic 9(5).\n       01 w-y                pic 9(5).\n       linkage section.\n       01  x                 pic 9(5).\n       01  y                 pic 9(5).\n       01  result.\n           03  a             pic 9(5).\n           03  b             pic 9(5).\n      \n       procedure division using x y result.\n          initialize result\n          perform calculate-gcd. \n          COMPUTE lcm = FUNCTION ABS(x * y) \/ gcd\n          compute a   = lcm \/ x\n          compute b   = lcm \/ y\n          goback.\n      \n          calculate-gcd.\n          move x             to w-x\n          move y             to w-y\n          PERFORM UNTIL w-y = 0 \n               MOVE w-x TO temp\n               MOVE w-y TO w-x\n               MOVE FUNCTION MOD(temp, w-y) TO w-y\n          END-PERFORM\n \n          MOVE FUNCTION ABS(w-x) TO gcd\n          . \n       end program NbrOfLaps.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19559,"user_id":168,"body":"       identification division.\n       program-id. NbrOfLaps.\n       data division.\n       working-storage section.\n       01  d                 pic 9(5).\n       linkage section.\n       01  x                 pic 9(5).\n       01  y                 pic 9(5).\n       01  result.\n           03  a             pic 9(5).\n           03  b             pic 9(5).\n      \n       procedure division using x y result.\n          move y to a\n          move x to b\n          perform until y = 0\n              move y to d\n              compute y = function mod(x, y)\n              move d to x\n          end-perform\n          divide d into a b.\n       end program NbrOfLaps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19560,"user_id":53,"body":"       identification division.\n       program-id. NbrOfLaps.\n       data division.\n       linkage section.\n       01  x                 pic 9(5).\n       01  y                 pic 9(5).\n       01  result.\n           03  a             pic 9(5).\n           03  b             pic 9(5).\n       procedure division using x y result.\n          set a b to 1\n          perform until b * y = a * x\n            if b * y < a * x then\n              add 1 to b\n            else\n              add 1 to a\n            end-if\n          end-perform\n          goback.\n       end program NbrOfLaps.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19561,"user_id":50,"body":"       identification division.\n       program-id. NbrOfLaps.\n       data division.\n       working-storage section.\n       01  g                 pic 9(5).\n      \n       linkage section.\n       01  x                 pic 9(5).\n       01  y                 pic 9(5).\n       01  result.\n           03  a             pic 9(5).\n           03  b             pic 9(5).\n      \n       procedure division using x y result.\n      \n          call 'gcd' using by content   x y\n                           by reference g\n          compute a  = y \/ g\n          compute b  = x \/ g.\n      \n       end program NbrOfLaps.\n      \n      \n       identification division.\n       program-id. gcd.\n       data division.\n       working-storage section.\n       01 c           pic 9(5).\n       linkage section.\n       01 a           pic 9(5).\n       01 b           pic 9(5).\n       01 result      pic 9(5).\n       procedure division using a b result.\n           perform until b = 0\n              move b to c\n              compute b = function mod(a, b)\n              move c to a\n           end-perform\n           move a to result.\n      \n       end program gcd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52774a314c2333f0a7000688":[{"id":19562,"user_id":50,"body":"       identification division.\n       program-id. valid_parentheses.\n      \n       data division.\n       local-storage section.\n       01  o          pic 9(3).\n       01  i          usage index.\n       01  l          pic 9(3).\n      \n       linkage section.\n       01 s           pic x(100).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          initialize result\n          compute l = length function trim(s)\n          if function rem(l, 2) = 1 goback end-if\n          perform varying i from 1 until i > l\n            if s(i:1) = ')'\n              if o is positive then subtract 1 from o\n              else goback end-if\n            else\n                add 1 to o\n            end-if\n          end-perform\n      \n          if o = 0 move 1 to result.\n      \n       end program valid_parentheses.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19563,"user_id":null,"body":"       identification division.\n       program-id. valid_parentheses.\n      \n       data division.\n       working-storage section.\n       01 i          pic 9(3).\n       01 j          pic 9(3).\n       01 k          pic 9(3).\n       01 tmp-parens pic x(100).\n       01 tmp-paren2 pic x(100).\n       01 len        pic 9(3).\n       linkage section.\n       01 parens      pic x(100).\n       01 result      pic 9.\n      \n       procedure division using parens result.\n      \n          initialize result i\n          move parens          to tmp-parens\n          move length function trim(tmp-parens) to len \n          add  1               to i\n          perform until len = 0 or 1\n             if tmp-parens(i:1) not = spaces and \n                tmp-parens(i + 1:1) = spaces\n                exit perform\n             end-if \n             if tmp-parens(i:1) = '(' and tmp-parens(i + 1:1) = ')'\n                move spaces to tmp-parens(i:1) tmp-parens(i + 1:1)\n                initialize i j k tmp-paren2\n                perform until j > len\n                   add 1                              to j\n                   if tmp-parens(j:1) not equal spaces\n                      add  1                          to k\n                      move tmp-parens(j:1)            to tmp-paren2(k:1)\n                   end-if\n                end-perform\n                initialize tmp-parens\n                move tmp-paren2                       to tmp-parens \n                move length function trim(tmp-parens) to len \n             end-if\n             add 1                                    to i\n          end-perform\n          \n      \n          if len = 0\n             move 1 to result\n          else\n             move 0 to result\n           end-if\n      \n          goback.\n       end program valid_parentheses.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19564,"user_id":168,"body":"       identification division.\n       program-id. valid_parentheses.\n      \n       data division.\n       local-storage section.\n       01 k           pic 999.\n       01 i           usage index.\n      \n       linkage section.\n       01 parens      pic x(100).\n       01 result      pic 9.\n      \n       procedure division using parens result.\n          move 0 to result\n          perform varying i from 1 until i > 100 or parens(i:1) = ' '\n              evaluate parens(i:1)\n                  when '(' add 1 to k\n                  when ')' \n                      if k = 0 then goback end-if\n                      subtract 1 from k\n              end-evaluate\n          end-perform\n          if k = 0 then move 1 to result end-if\n          goback.\n       end program valid_parentheses.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19565,"user_id":53,"body":"       identification division.\n       program-id. valid_parentheses.\n      \n       data division.\n       local-storage section.\n       01  x          pic 9(3).\n       01  i          usage index.\n       01  w          pic 9(3).\n       linkage section.\n       01 s           pic x(100).\n       01 result      pic 9.\n       procedure division using s result.\n          initialize result\n          move length function trim(s) to w\n          if function rem(w, 2) is not zero then goback end-if\n          perform varying i from 1 until i > w\n            if s(i:1) = ')' then\n              if x is positive then subtract 1 from x else goback end-if\n            else\n              add 1 to x\n            end-if\n          end-perform\n          if x = 0 then set result to 1\n          goback.\n       end program valid_parentheses.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5279f6fe5ab7f447890006a7":[{"id":19566,"user_id":50,"body":"       identification division.\n       program-id. pickPeaks.\n       data division.\n       local-storage section.\n       01  prob-peak         pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 5 to 50 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  positions.\n           05 pos-length     pic 99.\n           05 a              pic 99 occurs 0 to 50 times \n                                  depending on pos-length.\n       01  peaks.\n           05 peaks-length   pic 99.\n           05 b              pic s9(2) occurs 0 to 50 times \n                                  depending on peaks-length.\n      \n       procedure division using arr positions peaks.\n      \n      * Implementation of roadischosen's Python solution\n      * See https:\/\/www.codewars.com\/kata\/5279f6fe5ab7f447890006a7\/solutions\n      \n            move 0 to prob-peak, pos-length, peaks-length\n      \n            perform varying i from 2 until i > arr-length\n              evaluate true\n              when xs(i) > xs(i - 1)\n                   move i to prob-peak\n              when xs(i) < xs (i - 1) and prob-peak <> 0\n                   add 1 to pos-length\n                   move prob-peak to a(pos-length)\n                   move 0         to prob-peak\n              end-evaluate\n            end-perform\n      \n            move pos-length to peaks-length\n      \n            perform varying i from 1 until i > pos-length\n               move xs(a(i)) to b(i)\n            end-perform\n              \n            goback.\n       end program pickPeaks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19567,"user_id":null,"body":"       identification division.\n       program-id. pickPeaks.\n       data division.\n      \n       working-storage section.\n       01  idx               pic 99.\n       01  idx-p             pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 5 to 50 times \n                                  depending on arr-length.\n       01  positions.\n           05 pos-length     pic 99.\n           05 a              pic 99 occurs 0 to 50 times \n                                  depending on pos-length.\n       01  peaks.\n           05 peaks-length   pic 99.\n           05 b              pic s9(2) occurs 0 to 50 times \n                                  depending on peaks-length.\n      \n       procedure division using arr positions peaks.\n      \n      * Write the positions of peaks to `positions`, and their values to `peaks`.\n      * Need to clear these so each test's solutions don't show up in the next tests\n       move 0 to pos-length.\n       move 0 to peaks-length.\n      \n       if arr-length < 3\n          goback.\n      \n       perform varying idx from 2 until idx = arr-length\n          if xs(idx) not = xs(idx - 1)\n              move idx to idx-p\n          end-if\n      \n          if xs(idx) > xs(idx + 1) and xs(idx-p) > xs(idx-p - 1)\n              add 1 to pos-length\n              add 1 to peaks-length\n              move idx-p to a(pos-length)\n              move xs(idx-p) to b(peaks-length)\n          end-if\n       end-perform.\n\n            goback.\n       end program pickPeaks.\n\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19568,"user_id":168,"body":"       identification division.\n       program-id. pickPeaks.\n       data division.\n       working-storage section.\n       01  p                 usage index.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 5 to 50 times \n                                  depending on arr-length indexed by i.\n       01  positions.\n           05 pos-length     pic 99.\n           05 a              pic 99 occurs 0 to 50 times \n                                  depending on pos-length.\n       01  peaks.\n           05 peaks-length   pic 99.\n           05 b              pic s9(2) occurs 0 to 50 times \n                                  depending on peaks-length.\n      \n       procedure division using arr positions peaks.\n            move 0 to p pos-length peaks-length\n            perform varying i from 2 until i > arr-length\n                evaluate xs(i) \n                    when > xs(i - 1)\n                        move i to p\n                    when < xs(i - 1)\n                        if p > 0\n                            add 1 to pos-length peaks-length\n                            move p to a(pos-length)\n                            move xs(p) to b(peaks-length)\n                        end-if\n                        move 0 to p\n                end-evaluate\n            end-perform.\n       end program pickPeaks.\n\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19569,"user_id":53,"body":"       identification division.\n       program-id. pickPeaks.\n       data division.\n       local-storage section.\n       01  p                 pic s9(2) value -1.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 5 to 50 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  positions.\n           05 pos-length     pic 99.\n           05 a              pic 99 occurs 0 to 50 times \n                                  depending on pos-length.\n       01  peaks.\n           05 peaks-length   pic 99.\n           05 b              pic s9(2) occurs 0 to 50 times \n                                  depending on peaks-length.\n       procedure division using arr positions peaks.\n          move 0 to pos-length, peaks-length\n          perform varying i from 2 until i > arr-length\n            if xs(i) > xs(i - 1) then\n              move i to p\n            else\n              if xs(i) < xs(i - 1) and p <> -1 then\n                add 1 to pos-length\n                move p to a(pos-length)\n                move -1 to p\n              end-if\n            end-if\n          end-perform\n          move pos-length to peaks-length\n          perform varying i from 1 until i > pos-length\n            move xs(a(i)) to b(i)\n          end-perform\n          goback.\n       end program pickPeaks.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"527e4141bb2ea5ea4f00072f":[{"id":19570,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COMPUTE-SUM.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(8).\n       01 R           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING N FROM N BY -1 UNTIL N = 0\n               MOVE N TO I\n               PERFORM UNTIL I = 0\n                   DIVIDE I BY 10 GIVING I REMAINDER R\n                   ADD R TO RESULT\n               END-PERFORM\n           END-PERFORM.\n       END PROGRAM COMPUTE-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19571,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COMPUTE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(4).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > N\n               ADD FUNCTION SUM(I(1:1) I(2:1) I(3:1) I(4:1))  TO RESULT\n           END-PERFORM.\n       END PROGRAM COMPUTE-SUM.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19572,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COMPUTE-SUM.\n       DATA DIVISION.\n       working-storage section.\n       01 x           pic 9(8).\n       01 r           pic 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           perform varying n from n by -1 until n = 0\n               compute x = n\n               perform until x = 0\n                   divide x by 10 giving x remainder r\n                   add r to result\n               end-perform\n           end-perform.\n       END PROGRAM COMPUTE-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19573,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COMPUTE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I             PIC 9(8).\n       01 B           PIC 9(8).\n       01 A             PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          Move 0 to result\n          Perform varying i from 1 by 1 until i > n\n             Move i to b\n             Perform until b = 0\n                Divide b by 10 giving b remainder a\n                compute result = result + a\n             End-perform\n          End-perform\n          Goback.\n       END PROGRAM COMPUTE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19574,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COMPUTE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I             PIC 9(8).\n       01 TMP           PIC 9(8).\n       01 A             PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Move 0 to result,\n          \n          Perform varying i from 1 by 1 until i > n,\n             Move i to tmp,\n             \n             Perform until tmp = 0,\n                Divide tmp by 10 giving tmp remainder a,\n                Add a to result,\n             End-perform\n\n          End-perform\n      \n           Goback.\n       END PROGRAM COMPUTE-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5287e858c6b5a9678200083c":[{"id":19575,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N-LENGTH    PIC 9(20).\n       01 PROD        PIC 9(20). \n       01 ORI         PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT. \n           SET ORI TO N\n      * must initialize PROD to 0 first\n           INITIALIZE PROD\n           INITIALIZE RESULT\n           COMPUTE N-LENGTH = \n               FUNCTION INTEGER(FUNCTION LOG10(N)) + 1\n           PERFORM UNTIL N = 0\n               COMPUTE PROD = PROD + \n                       FUNCTION REM(N, 10) ** N-LENGTH               \n               DIVIDE 10 INTO N\n           END-PERFORM           \n           IF PROD = ORI THEN\n               COMPUTE RESULT = 1\n           END-IF.\n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19576,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 L           PIC 9(10).\n       01 R           PIC 9.\n       01 M           PIC 9(20).\n       01 A           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n        If n < 10\n\n          Move 1 to result,\n      \n        Else\n      \n          Move 0 to l,\n          Move 0 to a,\n          Move n to m,\n      \n          Perform until m = 0,\n            Add 1 to l,\n            Divide 10 into m,\n          End-perform\n      \n          Move n to m,\n          \n          Perform until m = 0,\n            Divide m by 10 giving m remainder r,\n            Compute a = a + r ** l,\n          End-perform\n      \n          If a = n then move 1 to result,\n            else move 0 to result end-if\n\n        End-if  \n          \n        Goback.\n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19577,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(20).\n       01 K           PIC 9(20).\n       01 D           PIC 9(20).\n       01 A           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n        move n to a\n        compute k = function log10 (n) + 1\n        perform until a = 0\n         compute d = function rem (a, 10)\n         compute m = m + (d ** k)\n         compute a = a \/ 10\n        end-perform\n        if m = n then move 1 to result end-if\n        goback.\n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19578,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       DATA DIVISION.\n       local-storage section.\n       01 i           pic 99.\n       01 k           pic 99.\n       01 v           pic 9(30).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           inspect n tallying i for leading '0'\n           compute k = 20 - i\n           perform varying i from i by 1 until i > 19 or v > n\n               compute v = v + function numval(n(i + 1:1)) ** k\n           end-perform\n           if v = n then move 1 to result else move 0 to result.\n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19579,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NS          PIC Z(19)9.\n       01 I           PIC 99.\n       01 POT         PIC 99.\n       01 CALC        PIC 9(20).\n       01 DIG         PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n\n      * Set RESULT to 1 if N is narcissistic, else 0 \n      * HAJIME!\n        MOVE N TO NS\n        MOVE 1 TO I\n        PERFORM UNTIL NS(I:1) NOT EQUAL SPACES\n           ADD 1 TO I\n        END-PERFORM\n        COMPUTE I = I - 1\n        COMPUTE POT = LENGTH OF NS - I\n        INITIALIZE CALC\n        PERFORM UNTIL I GREATER OR EQUAL LENGTH OF NS\n           ADD 1 TO I\n           MOVE NS(I:1) TO DIG\n           COMPUTE CALC = CALC + (DIG ** POT)\n        END-PERFORM\n        IF CALC NOT EQUAL N\n           MOVE 0 TO RESULT\n        ELSE\n           MOVE 1 TO RESULT\n        END-IF\n        Goback.\n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19580,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      \n       01 W-IND-1     PIC  9(02).\n       01 W-NB-0      PIC  9(02).\n       01 W-NB-CHAR   PIC  9(02).\n       01 W-N-TEMP.\n          05 W-N-O    OCCURS 20.\n             10 W-N-T PIC  9(01).\n       01 W-SUM       PIC  9(20).\n       01 W-LIMIT     PIC  9(02).\n       01 W-DIGIT     PIC  9(01).\n      \n       LINKAGE SECTION.\n      \n       01 N           PIC  9(20).\n       01 RESULT      PIC  9(01).\n      \n       PROCEDURE DIVISION USING N RESULT.\n      \n        INITIALIZE W-NB-0\n                   W-SUM      \n        MOVE 20 TO W-IND-1      \n        MOVE N TO W-N-TEMP\n      \n        INSPECT N TALLYING W-NB-0 FOR LEADING \"0\"      \n        COMPUTE W-NB-CHAR = 20 - W-NB-0      \n        COMPUTE W-LIMIT = 20 - W-NB-CHAR            \n        PERFORM VARYING W-IND-1\n                   FROM 20 BY -1\n                  UNTIL W-IND-1 <= W-LIMIT\n           COMPUTE W-SUM = W-SUM + W-N-T(W-IND-1) **W-NB-CHAR  \n        END-PERFORM\n      \n        IF W-SUM = N\n           MOVE 1 TO RESULT\n        ELSE\n           MOVE 0 TO RESULT\n        END-IF\n      \n        Goback.\n      \n       END PROGRAM NAME.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19581,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NAME.\n       AUTHOR \"MAELVILIAN\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      \n       01 W-IND-1     PIC  9(02).\n       01 W-NB-0      PIC  9(02).\n       01 W-NB-CHAR   PIC  9(02).\n       01 W-N-TEMP.\n          05 W-N-O    OCCURS 20.\n             10 W-N-T PIC  9(01).\n       01 W-SUM       PIC  9(20).\n       01 W-LIMIT     PIC  9(02).\n       01 W-DIGIT     PIC  9(01).\n      \n       LINKAGE SECTION.\n      \n       01 N           PIC  9(20).\n       01 RESULT      PIC  9(01).\n      \n       PROCEDURE DIVISION USING N RESULT.\n        \n        PERFORM INIT\n        PERFORM TRAITEMENT\n        PERFORM CONCLUSION\n        Goback.\n      \n        INIT.      \n        INITIALIZE W-NB-0\n                   W-SUM      \n        MOVE 20 TO W-IND-1      \n        MOVE N TO W-N-TEMP\n        .\n      \n        TRAITEMENT.\n        INSPECT N TALLYING W-NB-0 FOR LEADING \"0\"      \n        COMPUTE W-NB-CHAR = 20 - W-NB-0      \n        COMPUTE W-LIMIT = 20 - W-NB-CHAR            \n        PERFORM VARYING W-IND-1\n                   FROM 20 BY -1\n                  UNTIL W-IND-1 <= W-LIMIT\n           COMPUTE W-SUM = W-SUM + W-N-T(W-IND-1) **W-NB-CHAR  \n        END-PERFORM\n        .\n      \n        CONCLUSION.\n        IF W-SUM = N\n           MOVE 1 TO RESULT\n        ELSE\n           MOVE 0 TO RESULT\n        END-IF\n        .\n      \n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19582,"user_id":null,"body":"      *========================*  \n       IDENTIFICATION DIVISION.\n      *========================*  \n       PROGRAM-ID. NAME.\n      \n      *========================*  \n       DATA DIVISION.\n      *========================*  \n      \n       WORKING-STORAGE SECTION.\n      *------------------------\n      \n      *   Indice occurs\n       01 W-IND-1     PIC  9(02).\n      *   NB of 0 before\n       01 W-NB-0      PIC  9(02).\n      *   NB char\n       01 W-NB-CHAR   PIC  9(02).\n      *   W-N Alpha\n       01 W-N-ALPHA   PIC  X(20).\n      *   W-N temp\n       01 W-N-TEMP.\n          05 W-N-O    OCCURS 20.\n             10 W-N-T PIC  9(01).\n      *   Somme\n       01 W-SUM       PIC  9(20).\n      *   Limite\n       01 W-LIMIT     PIC  9(02).\n      *   Current digit\n       01 W-DIGIT     PIC  9(01).\n      \n       LINKAGE SECTION.\n      *----------------\n      \n       01 N           PIC  9(20).\n       01 RESULT      PIC  9(01).\n      \n      *========================*  \n       PROCEDURE DIVISION USING N \n                                RESULT\n                                .\n      *========================* \n        \n        PERFORM INIT\n        PERFORM TRAITEMENT\n        PERFORM CONCLUSION\n        Goback.\n      \n      *----------------\n        INIT.\n      *----------------\n      \n        INITIALIZE W-NB-0\n                   W-SUM\n      \n        MOVE 20 TO W-IND-1\n      \n        MOVE N TO W-N-TEMP\n                  W-N-ALPHA\n        .\n      \n      *----------------\n        TRAITEMENT.\n      *----------------\n      \n      * We check the number of digits\n        INSPECT W-N-ALPHA TALLYING W-NB-0 FOR LEADING \"0\"\n      \n        COMPUTE W-NB-CHAR = 20 - W-NB-0      \n        COMPUTE W-LIMIT = 20 - W-NB-CHAR\n            \n        PERFORM UNTIL W-IND-1 <= 0\n                   OR W-IND-1 <= W-LIMIT\n      \n           MOVE W-N-T(W-IND-1) TO W-DIGIT\n           COMPUTE W-SUM = W-SUM + W-DIGIT**W-NB-CHAR\n      \n           COMPUTE W-IND-1 = W-IND-1 - 1\n           \n        END-PERFORM\n        .\n      \n      *----------------\n        CONCLUSION.\n      *----------------    \n      \n        IF W-SUM = N\n           MOVE 1 TO RESULT\n        ELSE\n           MOVE 0 TO RESULT\n        END-IF\n        .\n      \n       END PROGRAM NAME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52998bf8caa22d98b800003a":[{"id":19583,"user_id":421,"body":"       identification division.\n       program-id. ManhattanDistance.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01  point1.\n           03  x1     pic 9(2).\n           03  y1     pic 9(2).\n       01  point2.\n           03  x2     pic 9(2).\n           03  y2     pic 9(2).\n       01 result      pic s9(3) sign leading.\n      \n       procedure division using point1 point2 result.\n           compute result = function abs(x2 - x1) + \n                            function abs(y2 - y1).\n       end program ManhattanDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19584,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ManhattanDistance.      \n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  POINT1.\n           03  X1     PIC 9(2).\n           03  Y1     PIC 9(2).\n       01  POINT2.\n           03  X2     PIC 9(2).\n           03  Y2     PIC 9(2).\n       01 RESULT      PIC S9(3) SIGN LEADING.\n      \n       PROCEDURE DIVISION USING POINT1 POINT2 RESULT.      \n           COMPUTE RESULT = FUNCTION ABS(X1 - X2) \n                          + FUNCTION ABS(Y1 - Y2).\n       END PROGRAM ManhattanDistance.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19585,"user_id":53,"body":"       identification division.\n       program-id. ManhattanDistance.\n      \n       data division.\n\n       linkage section.\n       01  point1.\n           03  x1     pic 9(2).\n           03  y1     pic 9(2).\n       01  point2.\n           03  x2     pic 9(2).\n           03  y2     pic 9(2).\n       01 result      pic s9(3) sign leading.\n      \n       procedure division using point1 point2 result.\n      \n          initialize result\n          \n          subtract x2 from x1\n          subtract y2 from y1\n          move function abs(x1) to x1\n          move function abs(y1) to y1\n          add x1 to y1 giving result\n      \n          goback.\n       end program ManhattanDistance.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19586,"user_id":50,"body":"       identification division.\n       program-id. ManhattanDistance.\n      \n       data division.\n\n       linkage section.\n       01  point1.\n           03  x1     pic 9(2).\n           03  y1     pic 9(2).\n       01  point2.\n           03  x2     pic 9(2).\n           03  y2     pic 9(2).\n       01 result      pic 9(3).\n      \n       procedure division using point1 point2 result.\n      \n          initialize result\n          \n          compute result = function abs(x1 - x2)\n                         + function abs(y1 - y2)\n      \n          goback.\n       end program ManhattanDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52a382ee44408cea2500074c":[{"id":19587,"user_id":50,"body":"       identification division.\n       program-id. determinant recursive.\n       data division.\n       local-storage section.\n       01  sub.\n           05  sublen      pic 9.\n           05  subRow      occurs 0 to 8 times depending subLen.\n               07  s       pic s9(2) occurs 8 times.\n       01  subsub.\n           05  ss          pic s9(2) occurs 8 times indexed h.\n       01  det             pic s9(16) sign leading. \n       01  i               usage index. \n      \n       linkage section.\n       01  arr.\n           05  ln          pic 9.\n           05  row         occurs 0 to 8 times depending on ln.\n              07  cell     pic s9(2) occurs 8 times indexed j k.\n       01  result          pic s9(16) sign leading.\n      \n       procedure division using arr result.\n      \n          initialize result\n      \n          evaluate ln\n          when 0                           goback\n          when 1 move cell(1, 1) to result goback\n          end-evaluate\n      \n          perform varying i from 1 until i > ln\n              initialize sub\n              perform varying j from 2 until j > ln\n                 initialize subsub, h\n                 perform varying k from 1 until k > ln\n                    if k <> i\n                    add 1 to h\n                    move cell(j, k) to ss(h)\n                    end-if\n                  end-perform\n                  add 1 to subLen\n                  move subsub to subRow(subLen)\n              end-perform\n              call 'determinant' using by content   sub\n                                       by reference det\n              compute result = result +\n              cell(1, i) * ((-1) ** (i + 1)) * det\n          end-perform\n      \n          goback.\n       end program determinant.\n      \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19588,"user_id":168,"body":"       identification division.\n       program-id. determinant recursive.\n       data division.\n       local-storage section.\n       01  s            pic s9(16).\n       01  minor.\n           05   m-len   pic 9.\n           05   m-row   occurs 0 to 8 times depending on m-len.\n                07 xs   pic s9(2) occurs 8 times.\n       01  k            usage index.\n      \n       linkage section.\n       01  matrix.\n           05  len      pic 9.\n           05  row      occurs 0 to 8 times depending on len indexed i.\n               07 cell  pic s9(2) occurs 8 times indexed j.\n       01  result       pic s9(16) sign leading.\n      \n       procedure division using matrix result.\n          if len = 1\n              move cell(1, 1) to result\n              goback\n          end-if\n          perform varying k from 1 until k > len\n              subtract 1 from len giving m-len\n              perform varying i from 2 until i > len\n                        after j from 1 until j > len\n                 evaluate j\n                    when < k move cell(i, j) to xs(i - 1, j)\n                    when > k move cell(i, j) to xs(i - 1, j - 1)\n                 end-evaluate                 \n              end-perform\n              call 'determinant' using minor result\n              compute s = s + (-1) ** (k + 1) * cell(1, k) * result\n          end-perform\n          move s to result\n          goback.\n       end program determinant.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19589,"user_id":53,"body":"       identification division.\n       program-id. determinant recursive.\n       data division.\n       local-storage section.\n       01  minor-arr.\n           05  minor-len   pic 9.\n           05  minor       occurs 0 to 8 times depending minor-len.\n               07  t       pic s9(2) occurs 8 times.\n       01  minor-row-arr.\n           05  minor-row   pic s9(2) occurs 8 times indexed l.\n       01  d               pic s9(16) sign leading. \n       01  i               usage index. \n       linkage section.\n       01  matrix.\n           05  len      pic 9.\n           05  row      occurs 0 to 8 times depending on len.\n               07 m     pic s9(2) occurs 8 times indexed j k.\n       01  result       pic s9(16) sign leading.\n       procedure division using matrix result.\n      \n          initialize result\n          evaluate len\n            when 1      perform det1\n            when 2      perform det2\n            when 3      perform det3\n            when other  perform detn\n          end-evaluate\n          goback.\n      \n          detn.\n            perform varying i from 1 until i > len\n              initialize minor-arr\n              perform varying j from 2 until j > len\n                 initialize minor-row-arr l\n                 perform varying k from 1 until k > len\n                    if k <> i then\n                      add 1 to l\n                      move m(j, k) to minor-row(l)\n                    end-if\n                  end-perform\n                  add 1 to minor-len\n                  move minor-row-arr to minor(minor-len)\n              end-perform\n              call 'determinant' using\n                by content minor-arr\n                by reference d\n              compute result = result +\n                (-1) ** (i + 1) * m(1, i) * d\n             end-perform\n            .\n      \n          det1.\n            move m(1,1) to result\n            .\n      \n          det2.\n            compute result = m(1,1) * m(2,2) - m(1,2) * m(2,1)\n            .\n      \n          det3.\n            compute result = \n                m(1,1) * m(2,2) * m(3,3)\n              - m(1,1) * m(3,2) * m(2,3)\n              - m(2,1) * m(1,2) * m(3,3)\n              + m(2,1) * m(3,2) * m(1,3)\n              + m(3,1) * m(1,2) * m(2,3)\n              - m(3,1) * m(2,2) * m(1,3)\n            .\n      \n       end program determinant.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52ab60b122e82a6375000bad":[{"id":19590,"user_id":50,"body":"       identification division.\n       program-id. SortReindeer.\n      \n       data division.\n       local-storage section.\n       01  x               pic a.\n       01  tble.\n           05  pair occurs 0 to 30 times depending on len.\n               07  s       pic a(20).\n               07  t       pic a(20).\n       01  j               usage index.\n      \n       linkage section.\n       01  reindeerNames.\n           03  len          pic 9(2).\n           03  r            pic a(20) occurs 0 to 30 times\n                                      depending on len indexed by i.\n       01 result.\n           03  resLen       pic 9(2).\n           03  allNames  occurs 0 to 30 times\n                                      depending on resLen\n                                      indexed by k.\n               05 res    pic a(20).\n      \n       procedure division using reindeerNames result.\n      \n          initialize result\n          move len to reslen\n          perform varying i from 1 until i > len\n              move r(i) to s(i)\n              set j to 1\n              unstring r(i)\n                delimited by space\n                into x\n                with pointer j\n              end-unstring\n              unstring r(i)\n                delimited by space\n                into t(i)\n                with pointer j\n              end-unstring\n          end-perform\n      \n          sort pair on ascending key t\n          with duplicates in order\n      \n          perform varying k from 1 until k > len\n            move s(k) to res(k)\n          end-perform\n      \n          goback.\n       end program SortReindeer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19591,"user_id":53,"body":"       identification division.\n       program-id. SortReindeer.\n       data division.\n       local-storage section.\n       01  pairs.\n           05  pair         occurs 0 to 30 times depending on xs-len.\n               07  a        pic a(20).\n               07  b        pic a(20).\n       01  ptr              usage index.\n       01  p                pic a.\n       linkage section.\n       01  names.\n           03  xs-len       pic 9(2).\n           03  xs           pic a(20) \n                            occurs 0 to 30 times\n                            depending on xs-len indexed by i.\n       01 result.\n           03  res-len      pic 9(2).\n           03               occurs 0 to 30 times\n                            depending on res-len indexed by j.\n               05 res       pic a(20).\n       procedure division using names result.\n      \n          initialize result\n          \n          perform varying i from 1 until i > xs-len\n            move xs(i) to a(i)\n            set ptr to 1\n            unstring xs(i) delimited by space into p with pointer ptr\n            unstring xs(i) delimited by space into b(i) with pointer ptr\n          end-perform\n      \n          sort pair on ascending key b\n          move xs-len to res-len\n          perform varying j from 1 until j > res-len\n            move a(j) to res(j)\n          end-perform\n      \n          goback.\n       end program SortReindeer.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52b5247074ea613a09000164":[{"id":19592,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COOKING-TIME.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 EGGS        PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING EGGS RESULT.\n           COMPUTE RESULT rounded mode toward-greater = EGGS \/ 8\n           COMPUTE RESULT = RESULT * 5.\n       END PROGRAM COOKING-TIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19593,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COOKING-TIME.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 EGGS        PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING EGGS RESULT.\n      \n          Compute result rounded mode toward-greater = eggs \/ 8,\n          Compute result = 5 * result,\n      \n          Goback.\n       END PROGRAM COOKING-TIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19594,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COOKING-TIME.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 EGGS        PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING EGGS RESULT.\n          if eggs = 0 then goback end-if\n          compute result = (eggs - 1) \/ 8\n          compute result = (result + 1) * 5\n          Goback.\n       END PROGRAM COOKING-TIME.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19595,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COOKING-TIME.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 EGGS        PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING EGGS RESULT.\n           COMPUTE RESULT = FUNCTION INTEGER(EGGS \/ 8 + .9) * 5.\n       END PROGRAM COOKING-TIME.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19596,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COOKING-TIME.\n       DATA DIVISION.\n       local-storage section.\n       01 r           pic 9 value 0.\n       LINKAGE SECTION.\n       01 EGGS        PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING EGGS RESULT.\n          divide eggs by 8 giving result remainder r.\n          if r = 0 then\n              compute result = result * 5\n          else\n             add 1 to result\n             compute result = result * 5\n          end-if\n      * HAJIME!\n      \n          Goback.\n       END PROGRAM COOKING-TIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19597,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COOKING-TIME.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 EGGS        PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING EGGS RESULT.\n          compute result rounded mode toward-greater = eggs \/ 8\n          multiply 5 by result.\n       END PROGRAM COOKING-TIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52b7ed099cdc285c300001cd":[{"id":19598,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SumOfIntervals.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  OLD-SND           PIC S9(08) VALUE -99999999.\n       LINKAGE SECTION.\n       01  INTERVALS.\n           05  LEN           PIC 9(4).\n           05  XS            OCCURS 1 TO 9999 DEPENDING LEN INDEXED I.\n               07 FST        PIC S9(8).\n               07 SND        PIC S9(8).\n       01  RESULT            PIC 9(10).\n      \n       PROCEDURE DIVISION USING INTERVALS RESULT.\n           SORT XS ASCENDING FST SND\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN\n               EVALUATE  TRUE\n                   WHEN  OLD-SND <= SND(I)  \n                    AND  OLD-SND >= FST(I)\n                         COMPUTE RESULT = RESULT + SND(I) - OLD-SND\n                         MOVE SND(I)   TO OLD-SND\n                   WHEN  OLD-SND < FST(I)\n                         COMPUTE RESULT = RESULT + SND(I) - FST(I)\n                         MOVE SND(I)   TO OLD-SND\n               END-EVALUATE\n           END-PERFORM.\n       END PROGRAM SumOfIntervals.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19599,"user_id":53,"body":"       identification division.\n       program-id. SumOfIntervals.\n       data division.\n       local-storage section.\n       01  x                 pic s9(10).\n       01  m                 pic s9(10) value -9999999999.\n       linkage section.\n       01  intervals.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 9999 times\n                             depending len indexed i j.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n       01  result            pic 9(10).\n       procedure division using intervals result.\n          move 0 to result\n          sort xs on ascending key fst\n          perform varying i from 1 until i > len\n            compute m = function max(m, fst of xs(i))\n            compute result = result + \n              function max (0, (snd of xs(i)) - m)\n            compute m = function max(m, snd of xs(i))\n          end-perform\n          goback.\n       end program SumOfIntervals.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19600,"user_id":50,"body":"       identification division.\n       program-id. SumOfIntervals.\n       data division.\n       working-storage section.\n       01  r                 pic s9(8).\n      \n       linkage section.\n       01  intervals.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 9999 times\n                             depending on len indexed by i.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n       01  result            pic 9(10).\n      \n       procedure division using intervals result.\n          sort xs on ascending key fst\n          compute result = snd(1) - fst(1)\n          move snd(1) to r\n          perform varying i from 2 until i > len\n              compute result = result\n                  + function max(snd(i), r) - function max(fst(i), r)\n              compute r = function max(snd(i), r)\n          end-perform.\n       end program SumOfIntervals.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19601,"user_id":168,"body":"       identification division.\n       program-id. SumOfIntervals.\n       data division.\n       working-storage section.\n       01  r                 pic s9(8).\n      \n       linkage section.\n       01  intervals.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 2000 times\n                             depending len indexed i.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n       01  result            pic 9(8).\n      \n       procedure division using intervals result.\n          sort xs on ascending key fst\n          compute result = snd(1) - fst(1)\n          move snd(1) to r\n          perform varying i from 2 until i > len\n              compute result = result\n                  + function max(snd(i), r) - function max(fst(i), r)\n              compute r = function max(snd(i), r)\n          end-perform.\n       end program SumOfIntervals.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19602,"user_id":53,"body":"       identification division.\n       program-id. SumOfIntervals.\n       data division.\n       local-storage section.\n       01  x                 pic s9(8).\n       01  m                 pic s9(8) value -99999999.\n       linkage section.\n       01  intervals.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 2000 times\n                             depending len indexed i j.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n       01  result            pic 9(8).\n       procedure division using intervals result.\n          move 0 to result\n          perform varying i from 1 until i = len\n            after j from function abs(i + 1) until j > len\n              if fst of xs(i) > fst of xs(j) then\n                 move fst of xs(i) to x\n                 move fst of xs(j) to fst of xs(i)\n                 move x to fst of xs(j)\n                 move snd of xs(i) to x\n                 move snd of xs(j) to snd of xs(i)\n                 move x to snd of xs(j)\n              end-if\n          end-perform\n          perform varying i from 1 until i > len\n            compute m = function max(m, fst of xs(i))\n            compute result = result + \n              function max (0, (snd of xs(i)) - m)\n            compute m = function max(m, snd of xs(i))\n          end-perform\n          goback.\n       end program SumOfIntervals.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19603,"user_id":53,"body":"       identification division.\n       program-id. SumOfIntervals.\n       data division.\n       local-storage section.\n       01  x                 pic s9(3).\n       01  m                 pic s9(3) value -999.\n       linkage section.\n       01  intervals.\n           05  len           pic 9(2).\n           05  xs            occurs 1 to 20 times\n                             depending len indexed i j.\n               07 fst        pic s9(3).\n               07 snd        pic s9(3).\n       01  result            pic 9(4).\n       procedure division using intervals result.\n          move 0 to result\n          perform varying i from 1 until i = len\n            after j from function abs(i + 1) until j > len\n              if fst of xs(i) > fst of xs(j) then\n                 move fst of xs(i) to x\n                 move fst of xs(j) to fst of xs(i)\n                 move x to fst of xs(j)\n                 move snd of xs(i) to x\n                 move snd of xs(j) to snd of xs(i)\n                 move x to snd of xs(j)\n              end-if\n          end-perform\n          perform varying i from 1 until i > len\n            compute m = function max(m, fst of xs(i))\n            compute result = result + \n              function max (0, (snd of xs(i)) - m)\n            compute m = function max(m, snd of xs(i))\n          end-perform\n          goback.\n       end program SumOfIntervals.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52c31f8e6605bcc646000082":[{"id":19604,"user_id":null,"body":"       identification division.\n       program-id. two_sum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(4) occurs 2 to 500 times \n                                    depending on arrLength indexed i j.\n       01  target           pic 9(5).\n       01  result.\n           05 fst           usage index.\n           05 snd           usage index.\n      \n       procedure division using arr target result.\n      \n          initialize result.\n          PERFORM VARYING i FROM 0 BY 1 UNTIL i > arrLength\n                  AFTER j FROM 0 BY 1 UNTIL j > arrLength\n              IF j > i AND xs(i) + xs(j) = target\n                THEN MOVE i TO fst\n                     MOVE j TO snd\n                     EXIT PERFORM\n              END-IF\n          END-PERFORM.\n      * When no valid input is given then:\n          IF fst = 0 and snd = 0 THEN\n            MOVE arrLength TO fst\n            MOVE arrLength TO snd\n            ADD 1 TO snd\n         END-IF.\n      \n       end program two_sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19605,"user_id":168,"body":"       identification division.\n       program-id. two_sum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(4) occurs 2 to 500 times \n                                    depending on arrLength indexed i j.\n       01  target           pic 9(5).\n       01  result.\n           05 fst           usage index.\n           05 snd           usage index.\n      \n       procedure division using arr target result.\n          perform varying i from 1 until i > arrLength\n                    after j from i until j > arrLength\n              if j > i and xs(i) + xs(j) = target\n                  move i to fst\n                  move j to snd\n                  exit perform\n              end-if\n          end-perform.\n       end program two_sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19606,"user_id":53,"body":"       identification division.\n       program-id. two_sum.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(3).\n           05 xs            pic 9(4) occurs 2 to 500 times \n                                     depending on arr-len.\n       01  n                pic 9(5).\n       01  result.\n           05 i             usage index.\n           05 j             usage index.\n       procedure division using arr n result.\n          perform varying i from 1 until i = arr-len\n                  after j from i until j > arr-len\n            if j > i and xs(i) + xs(j) = n then\n              goback \n            end-if\n          end-perform\n          add 1 to j\n          goback.\n       end program two_sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19607,"user_id":50,"body":"       identification division.\n       program-id. two_sum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(4) occurs 2 to 500 times \n                                      depending on arrLength.\n       01  target           pic 9(5).\n       01  result.\n           05 i             usage index.\n           05 j             usage index.\n      \n       procedure division using arr target result.\n      \n          perform varying i from 1 until i = arrLength\n          after j from function abs(i + 1) until j > arrLength\n              if xs(i) + xs(j) = target goback end-if\n          end-perform.\n      \n       end program two_sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52de9bd621c71b919c000592":[{"id":19608,"user_id":50,"body":"       identification division.\n       program-id. InHyperSphere.\n       data division.\n       local-storage section.\n       01  o                pic 9(6)v9(4).\n       01  r                pic 9(4)v9(4).\n      \n       linkage section.\n       01  coords.\n           05 dimensions     pic 9(2).\n           05 coord          pic s9(2)v9 occurs 0 to 20 times \n                             depending on dimensions indexed i.\n       01  radius  pic 9(2)v9.\n       01  result  pic 9.\n      \n       procedure division using coords radius result.\n      \n          move 0 to o, result\n          compute r = radius ** 2\n          perform varying i from 1 until i > dimensions\n              compute o = o + function abs(coord(i) ** 2)\n              if o > r goback end-if\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program InHyperSphere.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19609,"user_id":421,"body":"       identification division.\n       program-id. InHyperSphere.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  total             pic s9(4)v9(10).\n       linkage section.\n       01  coords.\n           05 dimensions     pic 9(2).\n           05 coord          pic s9(2)v9 occurs 0 to 20 times \n                                      depending on dimensions\n                                      indexed by i.\n       01  radius            pic 9(2)v9.\n       01  result            pic 9.\n      \n       procedure division using coords radius result.\n           initialize result total\n           perform varying i from 1 by 1 until i > dimensions\n               compute total = total + coord(i) * coord(i)\n           end-perform\n           if total <= radius * radius then\n               set result to 1\n           end-if.\n       end program InHyperSphere.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19610,"user_id":168,"body":"       identification division.\n       program-id. InHyperSphere.\n       data division.\n       local-storage section.\n       01  d                 pic 9(8)v9(8).\n      \n       linkage section.\n       01  coords.\n           05 dimensions     pic 9(2).\n           05 coord          pic s9(2)v9 occurs 0 to 20 times \n                                      depending on dimensions indexed i.\n       01  radius            pic 9(2)v9.\n       01  result            pic 9.\n      \n       procedure division using coords radius result.\n          perform varying i from 1 until i > dimensions\n              add function abs(coord(i) ** 2) to d\n          end-perform\n          if d <= radius ** 2\n              move 1 to result\n          else\n              move 0 to result\n          end-if.          \n       end program InHyperSphere.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19611,"user_id":53,"body":"       identification division.\n       program-id. InHyperSphere.\n       data division.\n       local-storage section.\n       01  m                pic 9(6)v9(4).\n       01  n                pic 9(4)v9(4).\n       linkage section.\n       01  coords.\n           05 dimensions     pic 9(2).\n           05 coord          pic s9(2)v9 occurs 0 to 20 times \n                             depending on dimensions indexed i.\n       01  radius  pic 9(2)v9.\n       01  result  pic 9.\n       procedure division using coords radius result.\n          initialize m, result\n          compute n = radius * radius\n          perform varying i from 1 until i > dimensions\n            compute m = m + coord(i) * coord(i) \n            if m > n goback end-if\n          end-perform\n          move 1 to result\n          goback.\n       end program InHyperSphere.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52e84c460d83dd96e50000dd":[{"id":19612,"user_id":421,"body":"       identification division.\n       program-id. CountNucleotides.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  temp               pic a.\n       linkage section.\n       01  genCode.\n           05 code-length     pic 9(3).\n           05 nucleotides     pic a occurs 0 to 999 times \n                                    depending on code-length\n                                    indexed by i.\n       01  result.\n              07 A pic 9(3).\n              07 C pic 9(3).\n              07 G pic 9(3).\n              07 T pic 9(3).\n      \n       procedure division using genCode result.\n           perform varying i from 1 by 1 until i > code-length\n               move function upper-case(nucleotides(i)) to temp\n               evaluate temp\n                   when 'A'     add 1 to A\n                   when 'C'     add 1 to C\n                   when 'G'     add 1 to G\n                   when other   add 1 to T\n               end-evaluate\n           end-perform.\n       end program CountNucleotides.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19613,"user_id":76,"body":"       identification division.\n       program-id. CountNucleotides.\n       data division.\n      \n       linkage section.\n       01  genCode.\n           05 code-length     pic 9(3).\n           05 nucleotides     pic a occurs 0 to 999 times \n                                    depending on code-length\n                                    indexed by i.\n       01  result.\n              07 A pic 9(3).\n              07 C pic 9(3).\n              07 G pic 9(3).\n              07 T pic 9(3).\n      \n       procedure division using genCode result.\n         initialize result\n         perform varying i from 1 by 1 until i > code-length\n           evaluate function upper-case(nucleotides(i))\n             when 'A' add 1 to A \n             when 'C' add 1 to C\n             when 'G' add 1 to G\n             when 'T' add 1 to T\n           end-evaluate\n         end-perform\n         goback.\n       end program CountNucleotides.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19614,"user_id":53,"body":"       identification division.\n       program-id. CountNucleotides.\n       data division.\n       linkage section.\n       01  genCode.\n           05 code-length     pic 9(3).\n           05 nucleotides     pic a occurs 0 to 999 times \n                              depending on code-length \n                              indexed by i.\n       01  result.\n              07 A pic 9(3).\n              07 C pic 9(3).\n              07 G pic 9(3).\n              07 T pic 9(3).\n       procedure division using genCode result.\n          initialize result\n          perform varying i from 1 until i > code-length\n            evaluate function upper-case(nucleotides(i))\n              when 'A'        add 1 to A\n              when 'C'        add 1 to C\n              when 'G'        add 1 to G\n              when 'T'        add 1 to T\n            end-evaluate\n          end-perform\n          goback.\n       end program CountNucleotides.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19615,"user_id":50,"body":"       identification division.\n       program-id. CountNucleotides.\n       data division.\n      \n       linkage section.\n       01  genCode.\n           05 code-length     pic 9(3).\n           05 nucleotides     pic a occurs 0 to 999 times \n                              depending on code-length indexed i.\n       01  result.\n              07 A pic 9(3).\n              07 C pic 9(3).\n              07 G pic 9(3).\n              07 T pic 9(3).\n      \n       procedure division using genCode result.\n      \n          initialize result\n          perform varying i from 1 until i > code-length\n            evaluate function upper-case(nucleotides(i))\n            when 'A'          add 1 to A\n            when 'C'          add 1 to C\n            when 'G'          add 1 to G\n            when other        add 1 to T\n            end-evaluate\n          end-perform\n      \n          goback.\n       end program CountNucleotides.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52e88b39ffb6ac53a400022e":[{"id":19616,"user_id":null,"body":"       identification division.\n       program-id. Int32ToIp.\n       data division.\n       working-storage section.\n       01  q      pic 9(10).\n       01  rem    pic 9(01).\n       01  tmp    pic X(32).\n       01  i      pic 9(03).\n       01 ipv4.\n          05 ip-1 pic 9(08).\n          05 ip-2 pic 9(08).\n          05 ip-3 pic 9(08).\n          05 ip-4 pic 9(08).\n       01 ipv4d.\n          05 ipd-1 pic Z(07)9.\n          05 ipd-2 pic Z(07)9.\n          05 ipd-3 pic Z(07)9.\n          05 ipd-4 pic Z(07)9.\n       01 iptmp    pic 9(08).\n       01 ipdtmp   pic 9(08).\n       linkage section.\n       01  n      pic 9(10).\n       01  result.\n           03 res-length pic 9(2).\n           03 res pic x occurs 7 to 15 times depending on res-length.\n      \n       procedure division using n result.\n      *   conver dec to bin (all)      \n          initialize result i tmp\n          move 99 to q\n          perform until q < 2\n             divide n by 2 giving q remainder rem\n             move q to n\n             add 1 to i\n             move rem to tmp(i:1)\n          end-perform\n          move q      to rem\n          move rem    to tmp(i + 1:1)  \n          move function reverse(tmp) to ipv4\n      *   conver bin to dec (groups)      \n          move ip-1 to iptmp\n          perform bin-to-dec\n          move ipdtmp to ipd-1\n          move ip-2 to iptmp\n          perform bin-to-dec\n          move ipdtmp to ipd-2\n          move ip-3 to iptmp\n          perform bin-to-dec\n          move ipdtmp to ipd-3\n          move ip-4 to iptmp\n          perform bin-to-dec\n          move ipdtmp to ipd-4\n      *   concatenate and result      \n          initialize tmp\n          string function trim(ipd-1) delimited by size\n                 '.'   delimited by size \n                 function trim(ipd-2) delimited by size\n                 '.'   delimited by size \n                 function trim(ipd-3) delimited by size\n                 '.'   delimited by size \n                 function trim(ipd-4) delimited by size\n             into tmp\n          move length function trim(tmp) to  res-length\n          move function trim(tmp)        to  result(3:) \n\n          goback.\n      \n       bin-to-dec.\n          display 'conv: ' iptmp\n          initialize i ipdtmp\n          perform until i >= 8\n             add 1 to i\n             if iptmp(i:1) = '1'\n                compute ipdtmp = ipdtmp + 2 ** (8 - i)\n             end-if\n          end-perform \n          .\n       end program Int32ToIp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19617,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Int32ToIp.\n       ENVIRONMENT DIVISION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  A            PIC ZZ9.\n       01  B            PIC ZZ9.\n       01  C            PIC ZZ9.\n       01  D            PIC ZZ9.\n       LINKAGE SECTION.\n       01  N            PIC 9(10).\n       01  RESULT.\n           03 RES-LEN   PIC 9(02).\n           03 RES       PIC X(15).\n\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           DIVIDE N BY 16777216  GIVING A  REMAINDER N\n           DIVIDE N BY 65536     GIVING B  REMAINDER N\n           DIVIDE N BY 256       GIVING C  REMAINDER D\n           STRING TRIM(A) '.' TRIM(B) '.' TRIM(C) '.' TRIM(D) INTO RES\n           MOVE STORED-CHAR-LENGTH(RES)  TO RES-LEN.\n       END PROGRAM Int32ToIp.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19618,"user_id":168,"body":"       identification division.\n       program-id. Int32ToIp.\n       data division.\n       working-storage section.\n       01  x      pic zz9.\n       01  k      pic 99.\n      \n       linkage section.\n       01  n      pic 9(10).\n       01  result.\n           03 res-length pic 9(2).\n           03 res. \n              05 xs pic x occurs 7 to 15 times \n                        depending on res-length indexed by i.\n      \n       procedure division using n result.\n          move 15 to res-length\n          move 1 to i\n          perform test after varying k from 24 by -8 until k = 0\n              compute x = function mod(n \/ (2 ** k), 256)\n              string function trim(x) '.' into res pointer i\n          end-perform.\n          subtract 1 from i giving res-length\n          if xs(res-length) = '.' then subtract 1 from res-length.\n       end program Int32ToIp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19619,"user_id":53,"body":"       identification division.\n       program-id. Int32ToIp.\n       data division.\n       local-storage section.\n       01  p              pic z(3)9.\n       01  m              pic 9(10).\n       01  shift          pic 9(2).\n       01  i              usage index.\n       linkage section.\n       01  n              pic 9(10).\n       01  result.\n           03 res-len     pic 9(2).\n           03 res         pic x occurs 7 to 15 times \n                          depending on res-len.\n       procedure division using n result.\n          initialize result\n          set shift to 24, perform part\n          set shift to 16, perform part\n          set shift to  8, perform part\n          set shift to  0, perform part\n          goback.\n      \n        part.\n          move n to m\n          perform shift times\n            divide 2 into m\n          end-perform\n          compute m = function rem(m, 256)\n          move m to p\n          perform out\n          .\n      \n        out.\n          if res-len > 0 then\n            add 1 to res-len\n            move '.' to res(res-len)\n          end-if\n          perform varying i from 1 until i > length of function trim(p)\n            add 1 to res-len\n            move function trim(p)(i:1) to res(res-len)\n          end-perform\n          .\n      \n       end program Int32ToIp.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19620,"user_id":50,"body":"       identification division.\n       program-id. Int32ToIp.\n       data division.\n       local-storage section.\n       01  s     pic x(32).\n       01  k     usage index.\n       01  r     pic 9.\n       01  z     pic z(2)9.\n       01  x     pic 9(3).\n      \n       linkage section.\n       01  n      pic 9(10).\n       01  result.\n           05 res-length pic 9(2).\n           05 a.\n              07 res pic x occurs 7 to 15 times\n                  depending on res-length indexed i.\n      \n       procedure division using n result.\n      \n          perform varying k from 32 by -1 until n = 0\n              divide n by 2 giving n remainder r\n              move r to s(k:1)\n          end-perform\n      \n          move 15 to res-length\n          set i to 1\n          perform varying k from 1 until k = 33\n            move s(k:1) to r\n            compute x = 2 * x + r\n            if function rem(k, 8) = 0\n                move x to z\n                move 0 to x\n                if k = 32\n                  string function trim(z) into a pointer i\n                else\n                  string function trim(z) '.' into a pointer i\n                end-if\n            end-if\n          end-perform\n          compute res-length = i - 1\n          \n          goback.\n       end program Int32ToIp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52f5424d0531259cfc000d04":[{"id":19621,"user_id":168,"body":"       identification division.\n       program-id. SortByBit.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 33 times \n                                      depending on arr-length indexed i.\n       01  result            pic 9(10).\n      \n       procedure division using arr result.\n           move 0 to result\n           perform varying i from 1 until i > arr-length\n               add function abs(2 ** xs(i)) to result\n           end-perform.\n       end program SortByBit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19622,"user_id":53,"body":"       identification division.\n       program-id. SortByBit.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 32 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result            pic 9(10).\n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            add function abs(2 ** xs(i)) to result\n          end-perform.\n       end program SortByBit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19623,"user_id":50,"body":"       identification division.\n       program-id. SortByBit.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 32 times \n                                      depending on arr-length indexed i.\n       01  result            pic 9(10).\n      \n       procedure division using arr result.\n      \n          move 0 to result\n          perform varying i from 1 until i > arr-length\n              add function abs(2 ** xs(i)) to result\n          end-perform\n      \n          goback.\n       end program SortByBit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52f677797c461daaf7000740":[{"id":19624,"user_id":50,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n       local-storage section.\n       01 x                pic 9(20).\n       01 y                pic 9(20).\n      \n       linkage section.\n       01  a.\n           05 arr-length   pic 9(5).\n           05 xs           pic 9(20) occurs 0 to 50000 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result      pic 9(20).\n      \n       procedure division using a result.\n      \n          compute result = xs(1)\n      \n          perform varying i from 2 until i > arr-length\n                move xs(i) to x\n                perform until x = 0\n                    move x to y\n                    compute x = function rem(result, x)\n                    move y to result\n                end-perform\n          end-perform\n      \n          multiply arr-length by result\n      \n          goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19625,"user_id":53,"body":"       identification division.\n       program-id. solution.\n       data division.\n       local-storage section.\n       01  x          pic 9(20).\n       01  y          pic 9(20).\n       linkage section.\n       01  a.\n           05 n       pic 9(5).\n           05 xs      pic 9(20) occurs 0 to 50000 times \n                                depending on n\n                                indexed by i.\n       01  r          pic 9(20).\n       procedure division using a r.\n          move 0 to r\n          if n = 0 then goback end-if\n          move xs(1) to r\n          perform varying i from 2 until i > n\n            move xs(i) to x\n            call 'gcd' using by content r x by reference y\n            move y to r\n          end-perform\n          multiply n by r giving r\n          goback.\n       end program solution.\n      \n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(20).\n       01 a           pic 9(20).\n       linkage section.\n       01 x           pic 9(20).\n       01 b           pic 9(20).\n       01 r           pic 9(20).\n       procedure division using x b r.\n           move x to a\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n           move a to r\n           goback.\n       end program gcd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19626,"user_id":168,"body":"       identification division.\n       program-id. solution.\n      \n       data division.\n       working-storage section.\n       01  a               pic 9(20).\n       01  b               pic 9(20).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(5).\n           05 xs           pic 9(20) occurs 0 to 50000 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result          pic 9(20).\n      \n       procedure division using arr result.\n          compute result = xs(1)\n          perform varying i from 2 until i > arr-length\n              compute a = result\n              compute b = xs(i)\n              perform until b = 0\n                  compute result = b\n                  compute b = function mod(a, b)\n                  compute a = result\n              end-perform\n          end-perform\n          multiply arr-length by result\n          goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52f787eb172a8b4ae1000a34":[{"id":19627,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ZER.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(10).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           MOVE 5 TO I          \n           PERFORM UNTIL I >= N\n               COMPUTE RESULT = RESULT + N \/ I\n               MULTIPLY 5 BY I\n           END-PERFORM.\n       END PROGRAM ZER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19628,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ZER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n         PERFORM UNTIL N = 0\n           COMPUTE RESULT = RESULT + N \/ 5\n           COMPUTE N = N \/ 5\n         END-PERFORM.\n       END PROGRAM ZER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19629,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ZER RECURSIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N > 4\n              DIVIDE N BY 5 GIVING N\n              ADD N  TO RESULT\n              CALL 'ZER' USING N RESULT\n           END-IF\n           GOBACK.\n       END PROGRAM ZER.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19630,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ZER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(10).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n         MOVE 5 TO I\n         MOVE 0 TO RESULT\n         PERFORM UNTIL (N \/ I) < 1\n          COMPUTE RESULT = RESULT + (N \/ I)\n          COMPUTE I = I * 5\n         END-PERFORM\n\n         Goback.\n\n       END PROGRAM ZER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19631,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ZER recursive.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           if n < 5\n              compute result = 0\n           else\n              divide 5 into n\n              call 'ZER' using by content n by reference result\n              add n to result\n           end-if.\n\n       END PROGRAM ZER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19632,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ZER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 LIM           PIC 9(10).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n      \n        Move 5 to lim,\n        Move 0 to result,\n        \n        Perform with test before until n < lim,\n          Compute result = result + (n \/ lim),\n          Compute lim = 5 *lim\n        End-perform\n\n        Goback.\n\n       END PROGRAM ZER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52f78966747862fc9a0009ae":[{"id":19633,"user_id":53,"body":"       identification division.\n       program-id. calc.\n       data division.\n       local-storage section.\n       01  ptr             usage index value 1.\n       01  t               pic x(10).\n       01  stack.\n           03  stack-len   pic 9(3).\n           03  xs          comp-2    \n                           occurs 0 to 500 times\n                           depending on stack-len.\n       01  operands.\n           03 a            comp-2.\n           03 b            comp-2.\n       linkage section.\n       01  s.\n           05 s-len        pic 9(3).\n           05 ws.\n               07          pic x occurs 0 to 999 times \n                           depending on s-len.\n       01  result          comp-2.\n       procedure division using s result.\n      \n          initialize result\n      \n          perform until ptr > s-len\n            unstring ws\n              delimited by space into t with pointer ptr\n            if t <> space then\n              evaluate true\n                when function trim(t) = '+'\n                  perform fetch-bin-operands\n                  add 1 to stack-len\n                  compute xs(stack-len) = a + b\n                when function trim(t) = '-'\n                  perform fetch-bin-operands\n                  add 1 to stack-len\n                  compute xs(stack-len) = a - b\n                when function trim(t) = '*'\n                  perform fetch-bin-operands\n                  add 1 to stack-len\n                  compute xs(stack-len) = a * b\n                when function trim(t) = '\/'\n                  perform fetch-bin-operands\n                  add 1 to stack-len\n                  compute xs(stack-len) = a \/ b\n                when other\n                  add 1 to stack-len\n                  move function numval(t) to xs(stack-len)\n              end-evaluate\n            end-if\n          end-perform\n      \n          if stack-len > 0 then\n            move xs(stack-len) to result\n          end-if\n      \n          goback.\n      \n        fetch-bin-operands.\n          move xs(stack-len) to b\n          move xs(stack-len - 1) to a\n          subtract 2 from stack-len\n          .\n      \n       end program calc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19634,"user_id":50,"body":"       identification division.\n       program-id. calc.\n       data division.\n       local-storage section.\n       01  token        pic x(10).\n           88 op value '\/', '*', '+', '-'.\n       01  stack.\n           03  stackLen pic 9(3).\n           03  num      comp-2    \n               occurs 0 to 500 times\n               depending on stackLen.\n      \n       linkage section.\n       01  s.\n           05  sLen         pic 9(3).\n               88  stringEmpty value 0.\n           05  sChars.\n               07 filler pic x occurs 0 to 999 times \n                  depending on sLen indexed by i.\n       01  result comp-2.\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          if stringEmpty goback end-if\n      \n          set i to 1\n          perform until i > sLen\n              unstring sChars delimited by space\n              into token with pointer i\n              if op perform operation\n              else  perform pushToStack end-if\n          end-perform\n          \n          move num(stackLen) to result\n      \n          goback.\n      \n          operation.\n            evaluate token\n            when '+'\n                 add num(stackLen) to num(stackLen - 1)\n            when '-'\n                 subtract num(stackLen) from num(stackLen - 1)\n            when '*'\n                 multiply num(stackLen) by num(stackLen - 1)\n            when other\n                 divide num(stackLen - 1) by num(stackLen)\n                 giving num(stackLen - 1)\n            end-evaluate\n            subtract 1 from stackLen\n            .\n      \n          pushToStack.\n            add 1 to stackLen\n            move function numval(token) to num(stackLen)\n            .\n      \n       end program calc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52fe629e48970ad2bd0007e6":[{"id":19635,"user_id":421,"body":"       identification division.\n       program-id. power-mod.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01 x           pic 9(5).\n       01 y           pic 9(10).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using x y n result.\n           set result to 1\n           perform until y = 0\n               if function rem(y, 2) = 1 then\n                   compute result = function rem(result * x, n)\n               end-if\n               divide y by 2 giving y\n               compute x = function rem(x * x, n)\n           end-perform.\n       end program power-mod.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19636,"user_id":53,"body":"       identification division.\n       program-id. power-mod.\n       data division.\n       linkage section.\n       01 x           pic 9(5).\n       01 y           pic 9(10).\n       01 n           pic 9(8).\n       01 r           pic 9(8).\n       procedure division using x y n r.\n          move 0 to r\n          if n <= 1 then goback end-if\n          add 1 to r\n          compute x = function rem(x, n)\n          perform until y = 0\n            if function rem(y, 2) = 1 then\n              compute r = function rem(r * x, n)\n            end-if\n            compute y = y \/ 2\n            compute x = function rem(x ** 2, n)\n          end-perform\n          goback.\n       end program power-mod.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19637,"user_id":76,"body":"       identification division.\n       program-id. power-mod.\n       data division.\n       linkage section.\n       01 x           pic 9(5).\n       01 y           pic 9(10).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using x y n result.\n         move 1 to result\n         compute x = function mod(x, n)\n         perform until y = 0\n           if function mod(y, 2) is equal to 1 then\n             compute result = function mod(result * x, n)\n           end-if\n           compute y = function integer(y \/ 2)\n           compute x = function mod(x ** 2, n)\n         end-perform\n         .\n       end program power-mod.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19638,"user_id":168,"body":"       identification division.\n       program-id. power-mod.\n      \n       data division.\n       linkage section.\n       01 x           pic 9(5).\n       01 y           pic 9(10).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using x y n result.\n          compute result = 1\n          perform until y = 0\n              if function mod(y, 2) = 0\n                  compute x = function mod(x * x, n)\n                  divide 2 into y\n              else\n                  compute result = function mod(result * x, n)\n                  subtract 1 from y\n              end-if\n          end-perform.\n       end program power-mod.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19639,"user_id":50,"body":"       identification division.\n       program-id. power-mod.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(5).\n       01 y           pic 9(10).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using x y n result.\n      \n            move 1 to result\n      \n            compute x = function rem(x, n)\n          \n            perform until y = 0\n                if function rem(y, 2) = 1\n                    compute result = function rem(result * x, n)\n                end-if\n                divide y by 2 giving y\n                compute x = function rem(x * x, n)\n            end-perform\n      \n          goback.\n       end program power-mod.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5301329926d12b90cc000908":[{"id":19640,"user_id":421,"body":"       identification division.\n       program-id. cumulative-triangle.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n           COMPUTE result = (n * n * n + n) \/ 2.\n       end program cumulative-triangle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19641,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. cumulative-triangle.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * (N ** 2 + 1) \/ 2.\n       END PROGRAM cumulative-triangle.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19642,"user_id":527,"body":"       identification division.\n       program-id. cumulative-triangle.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n       compute result = n * (n * n + 1) \/ 2.\n       end program cumulative-triangle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19643,"user_id":76,"body":"       identification division.\n       program-id. cumulative-triangle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n         compute result = function integer((n ** 3 + n) \/ 2).\n       end program cumulative-triangle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19644,"user_id":53,"body":"       identification division.\n       program-id. cumulative-triangle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n          compute result = n * (n * n + 1) \/ 2,\n          goback.\n       end program cumulative-triangle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19645,"user_id":50,"body":"       identification division.\n       program-id. cumulative-triangle.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          compute result = function integer(n * (n * n + 1) \/ 2)\n      \n          goback.\n       end program cumulative-triangle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"530e15517bc88ac656000716":[{"id":19646,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. rot13.\n       LINKAGE SECTION.\n       01  S.\n           05 S-LEN        PIC 9(2).\n           05 CHR          PIC X OCCURS 30 DEPENDING S-LEN.\n       01  RESULT          PIC X(32).\n\n       PROCEDURE DIVISION USING S RESULT.\n           MOVE S TO RESULT\n           TRANSFORM RESULT \n           FROM 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n             TO 'nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM'.\n       END PROGRAM rot13.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19647,"user_id":50,"body":"       identification division.\n       program-id. rot13.\n       data division.\n       local-storage section.\n       01  n pic 9(3).\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move s-length to res-length\n          perform varying i from 1 until I > res-length\n            move function ord(chr(i)) to n\n            evaluate n \n            when > 97 and < 124\n                compute n = function rem(n + 13 - 98, 26) + 98\n            when > 65 and < 92\n                compute n = function rem(n + 13 - 66, 26) + 66\n            end-evaluate\n            move function char(n) to res(i)\n          end-perform\n          display result\n          goback.\n       end program rot13.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19648,"user_id":53,"body":"       identification division.\n       program-id. rot13.\n       data division.\n       local-storage section.\n       01  e               pic 9(3).\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 0 to 30 times \n                           depending on s-length\n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length.\n       procedure division using s result.\n          initialize result\n          move s-length to res-length\n          perform varying i from 1 until I > res-length\n            move function ord(chr(i)) to e\n            evaluate e\n              when > 97 and < 124\n                move function char(\n                  function mod(e - 85, 26) + 98) to res(i)\n              when > 65 and < 92\n                move function char(\n                  function mod(e - 53, 26) + 66) to res(i)\n              when other\n                move chr(i) to res(i)\n            end-evaluate\n          end-perform\n          goback.\n       end program rot13.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"530e259c7bc88a4ab9000754":[{"id":19649,"user_id":421,"body":"       identification division.\n       program-id. tetrahedron.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01 n           pic 9(12).\n       01 result      pic 9(36).      \n       procedure division using n result.\n           compute result = n * (n + 1) * (n + 2) \/ 6.\n       end program tetrahedron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19650,"user_id":53,"body":"       identification division.\n       program-id. tetrahedron.\n       data division.\n       linkage section.\n       01 n           pic 9(12).\n       01 r           pic 9(36).\n       procedure division using n r.\n          compute r = n * (n + 1) * (n + 2) \/ 6\n          goback.\n       end program tetrahedron.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19651,"user_id":168,"body":"       identification division.\n       program-id. tetrahedron.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(12).\n       01 result      pic 9(36).\n      \n       procedure division using n result.\n          compute result = n * (n + 1) * (n + 2) \/ 6.\n       end program tetrahedron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19652,"user_id":50,"body":"       identification division.\n       program-id. tetrahedron.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(12).\n       01 result      pic 9(36).\n      \n       procedure division using n result.\n      \n          compute result = (n ** 3 + 3 * n * n + 2 * n) \/ 6\n      \n          goback.\n       end program tetrahedron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"534d0a229345375d520006a0":[{"id":19653,"user_id":421,"body":"       identification division.\n       program-id. power-of-two.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.          \n       procedure division using n result. \n           SET result TO 1\n           IF n = 0 THEN\n               SET result TO 0\n               GOBACK\n           END-IF\n           PERFORM UNTIL n = 1\n               DIVIDE n BY 2 GIVING n REMAINDER r\n               IF r > 0 THEN\n                   SET result TO 0\n               END-IF\n           END-PERFORM.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19654,"user_id":null,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       working-storage section.\n       01 rem         pic 9(10).\n      \n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n      \n      * assign 1 to result if n is a power of 2, else 0\n       move 0 to rem.\n      \n      * first short-circuit 0 and 1\n       if n = 0 or n = 1\n          move n to result\n          goback.\n      \n       perform until n < 2 or rem not = 0\n          divide n by 2 giving n remainder rem.\n       \n       if rem not = 0\n          move 0 to result\n       else\n          move 1 to result.\n\n          goback.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19655,"user_id":null,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       local-storage section.\n       01 rem         pic 9(10).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n          if n > 0 then\n            perform until n <= 1\n              divide n by 2 giving n remainder rem\n              if rem > 0 then\n                move 1 to result\n                exit\n              end-if\n            end-perform\n            compute result = 1 - result\n          end-if\n          goback.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19656,"user_id":null,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       working-storage section.\n       01 p2          pic 9(09) comp.\n       01 t2          pic 9(09) comp.\n      \n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n      \n      * assign 1 to result if n is a power of 2, else 0\n          MOVE 1          TO p2.\n          MOVE n          to t2.\n\n          PERFORM UNTIL p2 = t2\n                  OR    p2 > t2\n             COMPUTE p2 = p2 * 2\n          END-PERFORM.\n\n          IF p2 = t2\n             move 1   to result\n          ELSE\n             move 0   to result\n          END-IF.\n\n          goback.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19657,"user_id":168,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       working-storage section.\n       01 a           usage binary-long.\n       01 b           usage binary-long.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n          compute result = 0\n          if n > 0\n            compute a = n\n            compute b = n - 1\n            call 'CBL_AND' using a b by value 4\n            if b = 0 then compute result = 1 end-if            \n          end-if.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19658,"user_id":168,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n          perform until function mod(n, 2) <> 0 or n = 0\n              divide 2 into n\n          end-perform\n          if n = 1\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19659,"user_id":53,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n          move 0 to result\n          if n > 0 then\n            perform until function rem (n, 2) <> 0\n              compute n = n \/ 2\n            end-perform\n          end-if\n          if n = 1 then move n to result end-if\n          goback.\n       end program power-of-two.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19660,"user_id":50,"body":"       identification division.\n       program-id. power-of-two.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9 value 0.\n       procedure division using n result.\n      \n          perform until n = 0\n            divide 2 into n giving n remainder r\n            add r to result\n            if result > 1\n              exit perform\n            end-if\n          end-perform\n          \n          if result <> 1\n            move 0 to result\n          end-if\n\n          goback.\n       end program power-of-two.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"534d2f5b5371ecf8d2000a08":[{"id":19661,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MultiplicationTable.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  SZE          PIC 9(3).\n       01  RESULT.\n           05 RES-LEN   PIC 9(3).\n           05 FILLER             OCCURS 100 DEPENDING RES-LEN INDEXED I.\n              07 CELL   PIC 9(5) OCCURS 100                   INDEXED J.\n\n       PROCEDURE DIVISION USING SZE RESULT.\n           INITIALIZE RESULT\n           MOVE SZE  TO RES-LEN\n           PERFORM VARYING I FROM 1 UNTIL I > SZE\n               PERFORM VARYING J FROM 1 UNTIL J > SZE\n                   COMPUTE CELL(I, J) = I * J\n               END-PERFORM\n           END-PERFORM.\n       END PROGRAM MultiplicationTable.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19662,"user_id":168,"body":"       identification division.\n       program-id. MultiplicationTable.\n       data division.\n      \n       linkage section.\n       01  sze               pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 rows           occurs 1 to 100 times \n                             depending on res-length indexed i j.\n              07 cell pic 9(5) occurs 100 times.\n      \n       procedure division using sze result.\n          move sze to res-length\n          perform varying i from 1 until i > sze\n              initialize rows(i)\n              perform varying j from 1 until j > sze\n                  multiply i by j giving cell(i, j)\n              end-perform\n          end-perform\n          goback.\n       end program MultiplicationTable.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19663,"user_id":53,"body":"       identification division.\n       program-id. MultiplicationTable.\n       data division.\n       linkage section.\n       01  l                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 rows           occurs 1 to 100 times \n                             depending on res-length\n                             indexed by i j.\n              07 cell pic 9(5) occurs 100 times.\n       procedure division using l result.\n          initialize result\n          set res-length to l\n          perform varying i from 1 until i > l\n             perform varying j from 1 until j > l\n                compute cell(i, j) = i * j\n             end-perform\n          end-perform\n          goback.\n       end program MultiplicationTable.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19664,"user_id":50,"body":"       identification division.\n       program-id. MultiplicationTable.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  j usage index.\n      \n       linkage section.\n       01  l                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 rows           occurs 1 to 100 times \n                             depending on res-length.\n              07 cell pic 9(5) occurs 100 times.\n      \n       procedure division using l result.\n      \n          initialize result\n          set res-length to l\n          perform varying i from 1 until i > l\n                  after   j from 1 until j > l\n             compute cell(i, j) = i * j\n          end-perform\n      \n          goback.\n       end program MultiplicationTable.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"534e01fbbb17187c7e0000c6":[{"id":19665,"user_id":53,"body":"       identification division.\n       program-id. Spiralize.\n       data division.\n       local-storage section.\n       01  x                 pic s9(3) value -2.\n       01  y                 pic s9(3) value 0.\n       01  dx                pic s9 value 1.\n       01  dy                pic s9 value 0.\n       01  dt                pic s9.\n       01  l                 pic 9(3).\n       01  i                 pic 9(3).\n       linkage section.\n       01  sze               pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 rows           occurs 5 to 100 times \n                             depending on res-length.\n              07 cell        pic 9 occurs 100 times.\n       procedure division using sze result.\n          initialize result\n          move sze to res-length\n          add 1 to sze giving l\n          perform until l = 0\n            perform varying i from 0 until i >= l\n              add dx to x\n              add dy to y\n              if x >= 0 then set cell(y + 1, x + 1) to 1 end-if\n              if l = 1 then goback end-if\n            end-perform\n            if dy = 0 then subtract 2 from l end-if\n            move dx to dt\n            multiply -1 by dy giving dx\n            move dt to dy\n          end-perform\n          goback.\n       end program Spiralize.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19666,"user_id":50,"body":"       identification division.\n       program-id. Spiralize.\n       data division.\n       local-storage section.\n       01  i pic 9(3).\n       01  j pic 9(3).\n       01  m pic 9(3).\n      \n       linkage section.\n       01  l                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 rows           occurs 5 to 100 times \n                             depending on res-length.\n              07 cell pic 9 occurs 100 times.\n      \n       procedure division using l result.\n     \n      * Implementation of zhykzhykzhyk's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5412ed87648162f1e60000c4\/groups\/541a7041204d1237a600020c\n      \n          initialize result\n          \n          move l to res-length\n          perform varying i from 0 until i = l\n                  after   j from 0 until j = l\n              compute cell(i + 1, j + 1) = \n                           1 - function rem(function min(i, j, \n                           l - function max(i, j) - 1), 2)\n          end-perform\n      \n          if function rem(l, 4) = 0 move 1 to m end-if\n          perform varying i from 0 until i >= l \/ 2 - m\n            compute cell(i + 2, i + 1) = 1 - cell(i + 2, i + 1)\n          end-perform\n      \n          goback.\n       end program Spiralize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"534ea96ebb17181947000ada":[{"id":19667,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           INITIALIZE RESULT. \n           IF N > 1 OR M > 1 THEN\n               COMPUTE RESULT = M * N - 1\n           END-IF.\n       END PROGRAM BREAK-CHOCOLATE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19668,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 FILA PIC 9(8).\n       01 COLUMNA PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n      \n          IF N = 0 AND M = 0 \n            \n          ELSE \n            IF N = 0 AND M <> 0\n               MOVE 0 TO RESULT\n            ELSE\n               IF M = 0 AND N <> 0\n                 MOVE 0 TO RESULT\n               ELSE\n                 COMPUTE RESULT = (N * M) - 1\n               END-IF\n            END-IF\n          END-IF\n      \n          Goback.\n       END PROGRAM BREAK-CHOCOLATE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19669,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           COMPUTE RESULT = FUNCTION MAX(N * M - 1, 0).\n       END PROGRAM BREAK-CHOCOLATE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19670,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n      * HAJIME!\n        IF N * M < 1 THEN\n          COMPUTE RESULT = 0\n        ELSE\n          COMPUTE RESULT = N * M - 1\n        END-IF.\n       END PROGRAM BREAK-CHOCOLATE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19671,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n          compute result = function max(0, m * n - 1).\n       END PROGRAM BREAK-CHOCOLATE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19672,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n          if n + m < 2 then \n            move 0 to result\n          else \n            compute result = n * m - 1\n          end-if .\n       END PROGRAM BREAK-CHOCOLATE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19673,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BREAK-CHOCOLATE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n      \n          if n = 0 or m = 0 then move 0 to result,\n              else compute result = n * m - 1 .\n      \n          Goback.\n       END PROGRAM BREAK-CHOCOLATE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"534eb5ad704a49dcfa000ba6":[{"id":19674,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HANOI.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 2 ** N - 1.\n       END PROGRAM HANOI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19675,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HANOI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n        compute result = 2 ** n - 1.\n       END PROGRAM HANOI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19676,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HANOI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 1\n           PERFORM WITH TEST BEFORE UNTIL N = 0\n               COMPUTE RESULT = 2 * RESULT\n               COMPUTE N = N - 1\n           END-PERFORM\n           SUBTRACT 1 FROM RESULT.\n       END PROGRAM HANOI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19677,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HANOI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          COMPUTE RESULT = 2 ** N - 1.\n       END PROGRAM HANOI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19678,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 DISKS       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       HANOI SECTION\n       COMPUTE RESULT = 2 ** DISKS - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19679,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 DISKS       PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n           COMPUTE RESULT = 2 ** DISKS - 1.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19680,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 DISKS           PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC S9(08).\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n        MOVE 1 TO RESULT\n        PERFORM VARYING I FROM \n                    0 BY 1 Until i = DISKS\n            COMPUTE RESULT = RESULT * 2 END-PERFORM\n        compute result = result - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19681,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC S9(08).\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n        MOVE 1 TO RESULT\n        PERFORM VARYING I FROM \n                    0 BY 1 Until i = n\n            COMPUTE RESULT = RESULT * 2 END-PERFORM\n        compute result = result - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19682,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 DISKS       PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       PROCEDURE DIVISION.\n       HANOI .\n          COMPUTE RESULT = 2 ** DISKS - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19683,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 DISKS       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n        COMPUTE RESULT = 2 ** DISKS - 1 .\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19684,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 DISKS       PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n          COMPUTE RESULT = 2 ** DISKS - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19685,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n        COMPUTE RESULT = 2 ** N - 1 .\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19686,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       PROCEDURE DIVISION.\n       HANOI SECTION.\n          COMPUTE RESULT = 2 ** N - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5369997d56eb45c602000161":[{"id":19687,"user_id":53,"body":"       identification division.\n       program-id. BigToLittleEndian.\n       data division.\n       local-storage section.\n       01 a           pic 9(10).\n       01 b           pic 9(10).\n       01 c           pic 9(10).\n       01 d           pic 9(10).\n       01 l           pic 9(2).\n       01 r           pic 9(2).\n       01 p           pic 9(10).\n       01 q           pic 9(10).\n       01 x           pic 9(10).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic s9(10).\n       procedure division using n result.\n      \n          initialize result\n          if n > 4294967295 move -1 to result goback end-if\n      \n          move  0 to l, perform shift, move x to a\n          move  8 to l, perform shift, move x to b\n          move 16 to l, perform shift, move x to c\n          move 24 to l, perform shift, move x to d\n          compute result = a + b + c + d\n      \n          goback.\n      \n        shift.\n          subtract l from 24 giving r\n          compute p = 2 ** l\n          compute q = 2 ** r\n          compute x = function abs(n \/ p)\n          compute x = q * function rem(x, 256)\n          .\n      \n       end program BigToLittleEndian.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19688,"user_id":50,"body":"       identification division.\n       program-id. BigToLittleEndian.\n      \n       data division.\n       local-storage section.\n       01  binaryString.\n           03  a pic 9 occurs 32 times.\n       01  redefines binaryString.\n           05  byte1     pic x(8).\n           05  byte2     pic x(8).\n           05  byte3     pic x(8).\n           05  byte4     pic x(8).\n       01  littleEndian.\n           03  b  pic 9 occurs 32 times.\n       01  i             usage index.\n      \n       linkage section.\n       01 n              pic 9(10).\n       01 result         pic s9(10).\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          if n > 4294967295 move -1 to result goback end-if\n      \n          perform varying i from 32 by -1 until n = 0\n              divide n by 2 giving n remainder a(i)\n          end-perform\n      \n          string byte4 byte3 byte2 byte1 into littleEndian\n      \n          perform varying i from 1 until i = 33\n              compute result = result * 2 + b(i)\n          end-perform.\n      \n       end program BigToLittleEndian.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"536a155256eb459b8700077e":[{"id":19689,"user_id":168,"body":"       identification division.\n       program-id. CreateSpiral.\n       data division.\n       working-storage section.\n       01  i usage index.\n       01  j usage index.\n       01  k usage index.\n       01  di pic s9.\n       01  dj pic s9.\n       01  t  pic s9.\n       01  i1 usage index.\n       01  j1 usage index.\n      \n       linkage section.\n       01  n                 pic 9(2).\n       01  result.\n           05 res-length     pic 9(2).\n           05 row occurs 0 to 99 times depending on res-length.\n              07 cell pic 9(4) occurs 99 times.\n      \n       procedure division using n result.\n          move n to res-length\n          move 1 to i j k dj\n          move 0 to di\n          perform until k > n * n\n              move k to cell(i, j)\n              add 1 to k\n              add di to i giving i1\n              add dj to j giving j1\n              if (i1 = 0 or > n) or (j1 = 0 or > n) or cell(i1, j1) > 0\n                  move di to t\n                  move dj to di\n                  compute dj = -t\n              end-if\n              add di to i\n              add dj to j\n          end-perform.\n       end program CreateSpiral.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19690,"user_id":53,"body":"       identification division.\n       program-id. CreateSpiral.\n       data division.\n       local-storage section.\n       01  x                 pic s9(4) value -1.\n       01  y                 pic s9(4) value 0.\n       01  dx                pic s9(4) value 1.\n       01  dy                pic s9(4) value 0.\n       01  l                 pic s9(4).\n       01  k                 pic s9(4) value 0.\n       01  i                 pic s9(4).\n       01  t                 pic s9(4).\n       linkage section.\n       01  n pic 9(2).\n       01  result.\n           05 res-length     pic 9(2).\n           05 row occurs 0 to 99 times depending on res-length.\n              07 cell pic 9(4) occurs 99 times.\n       procedure division using n result.\n          initialize result\n          move n to l res-length\n          perform until l <= 0\n            perform varying i from 0 until i >= l\n              add dx to x\n              add dy to y\n              if x >= 0 then\n                add 1 to k\n                move k to cell(y + 1, x + 1)\n              end-if\n              if l = 0 then goback end-if\n            end-perform\n            if dy = 0 then subtract 1 from l end-if\n            move dx to t\n            multiply -1 by dy giving dx\n            move t to dy\n          end-perform\n          goback.\n       end program CreateSpiral.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19691,"user_id":50,"body":"       identification division.\n       program-id. CreateSpiral.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  j usage index.\n       01  dir pic 9.\n       01  x   pic 9(4).\n      \n       linkage section.\n       01  n   pic 9(2).\n       01  result.\n           05 res-length  pic 9(2).\n           05 row occurs 0 to 99 times depending on res-length.\n              07 cell pic 9(4) occurs 99 times.\n      \n       procedure division using n result.\n      \n      * Implementation of Mercy Madmask's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/55cfb1ef39cb89255600010b\/groups\/5e789154c3beb80001da17fc\n      \n          move n to res-length\n          if n = 0 goback end-if\n      \n          set i, j to 1\n          perform varying x from 1 until x > n * n\n              move x to cell(i, j)\n              evaluate dir\n              when 0\n                    if j = n or cell(i, j + 1) <> 0\n                           add 1 to i, dir\n                    else   add 1 to j        end-if\n              when 1\n                    if i = n or cell(i + 1, j) <> 0\n                           subtract 1 from j\n                           add      1  to  dir\n                    else   add 1 to i        end-if\n              when 2\n                    if j = 1 or cell(i, j - 1) <> 0\n                           subtract 1 from i\n                           add      1  to  dir\n                    else   subtract 1 from j end-if\n              when other\n                    if i = 1 or cell(i - 1, j) <> 0\n                           add      1  to  j\n                           move     0  to  dir\n                    else   subtract 1 from i end-if\n              end-evaluate\n          end-perform\n          \n          goback.\n       end program CreateSpiral.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"537529f42993de0e0b00181f":[{"id":19692,"user_id":168,"body":"       identification division.\n       program-id. count-inversions.\n      \n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(3) occurs 0 to 150 times \n                                    depending on arr-length\n                                    indexed by i j.\n       01  result          pic 9(8).\n      \n       procedure division using arr result.\n          move 0 to result\n          perform varying i from 1 until i > arr-length\n                    after j from i until j > arr-length\n              if xs(i) > xs(j) add 1 to result end-if\n          end-perform.\n       end program count-inversions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19693,"user_id":421,"body":"       identification division.\n       program-id. count-inversions.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  n               pic 9(3).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(3) occurs 0 to 150 times \n                                    depending on arr-length indexed i j.\n       01  result          pic 9(8).\n      \n       procedure division using arr result.\n           perform varying i from 1 by 1 until i > arr-length\n               compute n = i + 1\n               perform varying j from n by 1 until j > arr-length\n                   if xs(i) > xs(j) then\n                       add 1 to result\n                   end-if\n               end-perform\n          end-perform.\n       end program count-inversions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19694,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. count-inversions.      \n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LENGTH   PIC 9(3).\n           05 XS           PIC 9(3) OCCURS 0 TO 150 \n                                    DEPENDING ON ARR-LENGTH\n                                    INDEXED I J.\n       01  RESULT          PIC 9(8).      \n       PROCEDURE DIVISION USING ARR RESULT.      \n             PERFORM VARYING I FROM 1 BY 1 UNTIL I > ARR-LENGTH\n               PERFORM VARYING J FROM I BY 1 UNTIL J = ARR-LENGTH\n                   IF  XS(I) > XS(J + 1)\n                       ADD 1  TO RESULT\n                   END-IF               \n               END-PERFORM\n           END-PERFORM.  \n       END PROGRAM count-inversions.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19695,"user_id":53,"body":"       identification division.\n       program-id. count-inversions.\n       data division.\n       linkage section.\n       01  arr.\n           05 n            pic 9(3).\n           05 xs           pic 9(3) occurs 0 to 150 times \n                                    depending on n\n                                    indexed by i, j, k.\n       01  m               pic 9(8).\n       procedure division using arr m.\n          move 0 to m\n          perform varying i from 1 by 1 until i >= n\n            add 1 to i giving k\n            perform varying j from k by 1 until j > n\n              if xs(j) < xs(i) then add 1 to m end-if\n            end-perform\n          end-perform\n          goback.\n       end program count-inversions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19696,"user_id":50,"body":"       identification division.\n       program-id. count-inversions.\n      \n       data division.\n       local-storage section.\n       01  i           pic 9(3).\n       01  j           pic 9(3).\n       01  k           pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(3) occurs 0 to 150 times \n                                     depending on arr-length.\n       01  result          pic 9(8).\n      \n       procedure division using arr result.\n      \n          if arr-length < 2\n              goback\n          end-if\n          perform varying i from 1 until i = arr-length\n              compute k = i + 1      \n              perform varying j from k until j > arr-length\n                  if xs(j) < xs(i) then add 1 to result end-if\n              end-perform\n          end-perform\n      \n          goback.\n       end program count-inversions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53a1eac7e0afd3ad3300008b":[{"id":19697,"user_id":168,"body":"       identification division.\n       program-id. f recursive.\n      \n       data division.\n       \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          if n = 0\n              compute result = 1\n          else\n              subtract 1 from n\n              call 'f' using by content n by reference result\n              call 'm' using by content result by reference result\n              compute result = n + 1 - result\n          end-if.\n       end program f.\n\n       identification division.\n       program-id. m recursive.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          if n = 0\n              compute result = 0\n          else\n              subtract 1 from n\n              call 'm' using by content n by reference result\n              call 'f' using by content result by reference result\n              compute result = n + 1 - result\n          end-if.\n       end program m.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19698,"user_id":50,"body":"       identification division.\n       program-id. f recursive.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          \n          if n = 0\n            move 1 to result\n          else\n            compute a = n - 1\n            call 'f' using a b\n            call 'm' using b a\n            compute result = n - a\n          end-if\n\n          goback.\n       end program f.\n\n       identification division.\n       program-id. m recursive.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          if n = 0\n            move 0 to result\n          else\n            compute a = n - 1\n            call 'm' using a b\n            call 'f' using b a\n            compute result = n - a\n          end-if\n      \n          goback.\n       end program m.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19699,"user_id":53,"body":"       identification division.\n       program-id. f recursive.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          move 1 to result\n          if n = 0 then goback end-if\n          compute a = n - 1\n          call 'f' using a b\n          call 'm' using b a\n          compute result = n - a\n          goback.\n       end program f.\n\n       identification division.\n       program-id. m recursive.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          move 0 to result\n          if n = 0 then goback end-if\n          compute a = n - 1\n          call 'm' using a b\n          call 'f' using b a\n          compute result = n - a\n          goback.\n       end program m.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53ad69892a27079b34000bd9":[{"id":19700,"user_id":168,"body":"       identification division.\n       program-id. Ackermann recursive.\n      \n       data division.\n\n       linkage section.\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n\n       procedure division using m n result.\n          evaluate m also n\n              when 0 also any\n                  compute result = n + 1\n              when any also 0\n                  subtract 1 from m\n                  compute n = 1\n                  call 'Ackermann' using m n result\n              when other\n                  subtract 1 from n\n                  call 'Ackermann' using \n                      by content m n by reference result\n                  subtract 1 from m\n                  call 'Ackermann' using\n                      by content m result by reference result\n          end-evaluate.\n       end program Ackermann.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19701,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Ackermann RECURSIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n\n       PROCEDURE DIVISION USING M N RESULT.\n           PERFORM UNTIL M = 0\n               IF  N = 0\n                   MOVE 1  TO N\n               ELSE\n                   SUBTRACT 1 FROM N\n                   CALL 'Ackermann' USING CONTENT M N REFERENCE RESULT\n                   MOVE RESULT  TO N\n               END-IF\n               SUBTRACT 1  FROM M\n           END-PERFORM\n           COMPUTE RESULT = N + 1.\n       END PROGRAM Ackermann.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19702,"user_id":null,"body":"       identification division.\n       program-id. Ackermann recursive.\n      \n       data division.\n\n       linkage section.\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n\n       procedure division using m n result.\n      \n      * <-- Hajime!\n       if m = 0\n          compute result = n + 1.\n       if m > 0 and n = 0\n          subtract 1 from m\n          move 1 to n\n          call 'Ackermann' using by content m n by reference result.\n       if m > 0 and n > 0\n          subtract 1 from n\n          call 'Ackermann' using by content m n by reference n\n          subtract 1 from m\n          call 'Ackermann' using by content m n by reference result.\n\n          goback.\n       end program Ackermann.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19703,"user_id":53,"body":"       identification division.\n       program-id. Ackermann recursive.\n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       linkage section.\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using m n result.\n          evaluate true\n             when m = 0\n                add 1 to n giving result\n             when n = 0\n                subtract 1 from m giving a\n                move 1 to b\n                call 'Ackermann' using a b result\n             when other\n                move m to a\n                subtract 1 from n giving b\n                call 'Ackermann' using a b b\n                subtract 1 from m giving a\n                call 'Ackermann' using a b result\n          end-evaluate.\n          goback.\n       end program Ackermann.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19704,"user_id":50,"body":"       identification division.\n       program-id. Ackermann recursive.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n      \n       linkage section.\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n\n       procedure division using m n result.\n\n          if m = 0\n            compute result = n + 1\n            goback\n          end-if\n      \n          if n = 0\n            compute a = m - 1\n            move 1 to b\n            call 'Ackermann' using a b result\n            goback\n          end-if\n      \n          move m to a\n          compute b = n - 1\n          call 'Ackermann' using a b result\n          move result to b\n          compute a = m - 1\n          call 'Ackermann' using a b result\n\n          goback.\n       end program Ackermann.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53c9157c689f841d16000c03":[{"id":19705,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTIENT.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N <= 0 THEN\n               MOVE 0 TO RESULT\n               GOBACK\n           END-IF\n           MOVE N TO RESULT\n           PERFORM VARYING I FROM 2 BY 1 UNTIL I > FUNCTION SQRT(N)\n               IF FUNCTION REM(N, I) = 0 THEN\n                   COMPUTE RESULT = RESULT - RESULT \/ I\n                   PERFORM UNTIL FUNCTION REM(N, I) <> 0 \n                       DIVIDE N BY I GIVING N\n                   END-PERFORM\n               END-IF\n           END-PERFORM\n           IF N > 1 THEN\n               COMPUTE RESULT = RESULT - RESULT \/ N\n           END-IF.\n       END PROGRAM TOTIENT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19706,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTIENT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 P           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n\n          Move n to result\n  \n          Perform varying p from 2 by 1 until p * p > n,\n            if function rem(n, p) = 0\n              Compute result = result - result \/ p\n              Perform until function rem(n, p) <> 0,\n                    Divide p into n\n              End-perform\n            End-if\n          End-perform\n\n          if n > 1 then compute result = result - result \/ n end-if\n\n          Goback.\n       END PROGRAM TOTIENT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19707,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTIENT.\n       DATA DIVISION.\n       working-storage section.\n       01 p           pic 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = n\n          perform varying p from 2 by 1 until p * p > n\n              if function mod(n, p) = 0\n                  perform with test after until function mod(n, p) <> 0\n                      divide p into n    \n                  end-perform\n                  compute result = result - result \/ p\n              end-if\n          end-perform\n          if n > 1\n             compute result = result - result \/ n\n          end-if\n          Goback.\n       END PROGRAM TOTIENT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19708,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTIENT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 P           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n         MOVE N TO RESULT\n         PERFORM VARYING P FROM 2 BY 1 UNTIL P * P > N\n           IF FUNCTION MOD(N, P) = 0 THEN\n             PERFORM UNTIL FUNCTION MOD(N, P) <> 0\n               DIVIDE N BY P GIVING N\n             END-PERFORM\n             COMPUTE RESULT = RESULT - RESULT \/ P\n           END-IF\n         END-PERFORM\n         IF N > 1 THEN COMPUTE RESULT = RESULT - RESULT \/ N END-IF\n         GOBACK.\n       END PROGRAM TOTIENT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19709,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTIENT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 P           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          move n to result\n          perform varying p from 2 by 1 until p * p > n\n            if function rem(n, p) = 0\n              compute result = result - result \/ p\n              perform until function rem(n, p) <> 0\n                compute n = n \/ p\n              end-perform\n            end-if\n          end-perform\n          if n > 1 then \n            compute result = result - result \/ n \n          end-if\n          goback.\n       END PROGRAM TOTIENT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53c945d750fe7094ee00016b":[{"id":19710,"user_id":168,"body":"       identification division.\n       program-id. inverseMod.\n       data division.\n       local-storage section.\n       01 t       pic s9(10).\n       01 nt      pic s9(10) value 1.\n       01 r       pic s9(10).\n       01 nr      pic s9(10).\n       01 q       pic s9(10).\n       01 x       pic s9(10).\n      \n       linkage section.\n       01  a      pic 9(10).\n       01  m      pic 9(10).\n       01  result pic 9(10).\n      \n       procedure division using a m result.\n          move m to r\n          move a to nr\n          perform until nr = 0\n              divide r by nr giving q\n              move t to x\n              move nt to t\n              compute nt = x - q * nt\n              move r to x\n              move nr to r\n              compute nr = x - q * nr\n          end-perform\n          if r > 1\n              move 0 to result\n          else\n              move function mod(t, m) to result\n          end-if\n          goback.\n       end program inverseMod.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19711,"user_id":53,"body":"       identification division.\n       program-id. inverseMod.\n       data division.\n       local-storage section.\n       01  g      pic s9(10).\n       01  x      pic s9(10).\n       01  y      pic s9(10).\n       linkage section.\n       01  a      pic 9(10).\n       01  n      pic 9(10).\n       01  r      pic 9(10).\n       procedure division using a n r.\n          call 'egcd' using \n            by content a n\n            by reference g y x\n          if g <> 1 then\n            move 0 to r\n          else\n            compute r = function mod (y + n, n)\n          end-if\n          goback.\n       end program inverseMod.\n      \n       identification division.\n       program-id. egcd recursive.\n       data division.\n       local-storage section.\n       01  ar     pic s9(10).\n       01  br     pic s9(10).\n       01  gr     pic s9(10).\n       01  yr     pic s9(10).\n       01  xr     pic s9(10).\n       linkage section.\n       01  a      pic s9(10).\n       01  b      pic s9(10).\n       01  g      pic s9(10).\n       01  y      pic s9(10).\n       01  x      pic s9(10).\n       procedure division using a b g y x.\n          if a = 0 then\n            move b to g\n            move 0 to y\n            move 1 to x\n            goback\n          end-if\n          compute ar = function mod (b, a)\n          move a to br\n          call 'egcd' using\n            by content ar br\n            by reference gr yr xr\n          move gr to g\n          compute y = function integer (b \/ a)\n          compute y = xr - (y * yr)\n          move yr to x\n          goback.\n       end program egcd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19712,"user_id":53,"body":"       identification division.\n       program-id. inverseMod.\n       data division.\n       local-storage section.\n       01  r1     pic s9(20).\n       01  r2     pic s9(20).\n       01  q1     pic s9(20).\n       01  q2     pic s9(20).\n       01  m      pic s9(20).\n       01  t      pic s9(20).\n       linkage section.\n       01  a      pic 9(10).\n       01  n      pic 9(10).\n       01  r      pic 9(10).\n       procedure division using a n r.\n          move n to r1\n          move a to r2\n          move 0 to q1\n          move 1 to q2\n          perform until r2 = 0\n            compute m = r1 \/ r2\n            move r1 to t\n            move r2 to r1\n            compute r2 = t - m * r2\n            move q1 to t\n            move q2 to q1\n            compute q2 = t - m * q2\n            compute t = function mod (q2, n)\n            compute q2 = function mod (t + n, n)\n          end-perform\n          if r1 = 1 then\n            move q1 to r\n          else\n            move 0 to r\n          end-if\n          goback.\n       end program inverseMod.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19713,"user_id":50,"body":"       identification division.\n       program-id. inverseMod.\n       data division.\n       local-storage section.\n       01  q      pic s9(10).\n       01  u      pic s9(10).\n       01  w      pic s9(10).\n       01  x      pic s9(10).\n       01  z      pic s9(10).\n      \n       linkage section.\n       01  a      pic 9(10).\n       01  m      pic 9(10).\n       01  result pic 9(10).\n      \n       procedure division using a m result.\n      * Implementation of BitemNet's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5418023aa2ef420cdc00006b\/groups\/618ba9abfb8d160001272d94\n          move 1 to u\n          move a to w\n          move 0 to x\n          move m to z\n          perform until w = 0\n            if w < z\n              move u to q\n              move x to u\n              move q to x\n              move w to q\n              move z to w\n              move q to z\n            end-if\n            compute q = w \/ z\n            compute u = u - q * x\n            compute w = w - q * z\n          end-perform\n          if z = 1\n            if x < 0 add m to x end-if\n            move x to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program inverseMod.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53da3dbb4a5168369a0000fe":[{"id":19714,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n           IF FUNCTION REM(NUM, 2) = 0 \n               MOVE \"Even\" TO RESULT\n           ELSE\n               MOVE \"Odd\" TO RESULT\n           END-IF.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19715,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PARITY PIC A(8) VALUE 'EvenOdd'.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n          MOVE PARITY(FUNCTION MOD(NUM, 2) * 4 + 1:4) TO RESULT.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19716,"user_id":466,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n          IF FUNCTION MOD(NUM 2) EQUAL TO 0 THEN\n              MOVE \"Even\" TO RESULT\n          ELSE\n              MOVE \"Odd\" TO RESULT\n          END-IF.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19717,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n        If function rem(num,2) is zero then move \"Even\" to result,\n        else move \"Odd\" to result end-if.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19718,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 a         PIC S9(08).\n       01 b         PIC A(04). \n       PROCEDURE DIVISION USING a b.\n        move \"Odd\" to b\n      * so we'll do result = Odd, but we will change if a % 2 == 0             \n            if function rem(a 2) = 0 then \n                move \"Even\" to b\n            end-if\n          .\n      * the guy who made this forgot to put . at the end :face-palm\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19719,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04) value 'Odd'.\n       PROCEDURE DIVISION USING NUM RESULT.\n           if function mod(num, 2) = 0\n             move 'Even' to result\n           else\n             move 'Odd' to result.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19720,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RESTE       PIC S9(08).\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n          COMPUTE RESTE = FUNCTION MOD(NUM 2)\n          IF RESTE = 1\n             MOVE \"Odd \" TO RESULT\n          ELSE\n             MOVE \"Even\" TO RESULT\n          END-IF\n          .\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19721,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       working-storage section.\n       01 even-odd.\n          05      pic a(4) value 'Even'.\n          05      pic a(4) value 'Odd'.\n       01 even-odd-table  pic a(4) occurs 2 times\n                          redefines even-odd.          \n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n          move even-odd-table(function mod(num, 2) + 1) to result\n       goback.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19722,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n        IF FUNCTION MOD(NUM,2) = 1 THEN\n         MOVE \"Odd\" TO RESULT\n         ELSE\n         MOVE \"Even\" TO RESULT.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19723,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EVEN-OR-ODD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM         PIC S9(08).\n       01 RESULT      PIC A(04).\n       PROCEDURE DIVISION USING NUM RESULT.\n        if function mod(num, 2) = 0\n          move \"Even\" to result\n        else\n          move \"Odd\" to result\n        end-if.\n       END PROGRAM EVEN-OR-ODD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53da6d8d112bd1a0dc00008b":[{"id":19724,"user_id":421,"body":"       identification division.\n       program-id. ReverseList.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(2) occurs 0 to 10 times \n                                      depending on arrLength\n                                      indexed by i.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic s9(2) occurs 0 to 10 times \n                                      depending on resLength.\n      \n       procedure division using arr result.   \n          initialize resLength\n          perform varying i from arrLength by -1 until i = 0\n              add 1 to resLength\n              move xs(i) to res(resLength)\n          end-perform.\n       end program ReverseList.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19725,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ReverseList.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARRLEN     PIC 9(2).\n           05 XS         PIC S9(2) OCCURS 10 DEPENDING ARRLEN INDEXED I.\n       01  RESULT.\n           05 RESLEN     PIC 9(2).\n           05 RES        PIC S9(2) OCCURS 10.\n\n       PROCEDURE DIVISION USING ARR RESULT.\n           MOVE ARRLEN  TO RESLEN\n           PERFORM VARYING I FROM 1 UNTIL I > ARRLEN\n               MOVE XS(I)  TO RES(ARRLEN + 1 - I)\n           END-PERFORM.\n       END PROGRAM ReverseList.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19726,"user_id":null,"body":"       identification division.\n       program-id. ReverseList.\n       data division.\n       working-storage section.\n       01 ws-num           pic 9(2).\n       01 ws-idx           pic 9(2).\n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(2) occurs 0 to 10 times \n                                      depending on arrLength.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic s9(2) occurs 0 to 10 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n      \n          initialize result\n            move arrLength to ws-num.\n            move ws-num to resLength.\n            set ws-idx to 1.\n            perform until ws-num = 0\n               move xs(ws-num) to res(ws-idx)\n               add -1 to ws-num\n               add 1 to ws-idx\n            end-perform.\n          goback.\n       end program ReverseList.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19727,"user_id":168,"body":"       identification division.\n       program-id. ReverseList.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(2) occurs 0 to 10 times \n                                      depending on arrLength indexed i.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic s9(2) occurs 0 to 10 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n          move arrLength to resLength\n          perform varying i from 1 until i > arrLength\n              move xs(i) to res(arrLength - i + 1)\n          end-perform.\n       end program ReverseList.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19728,"user_id":null,"body":"       identification division.\n       program-id. ReverseList.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(2) occurs 0 to 10 times \n                                      depending on arrLength\n                                      indexed by i.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic s9(2) occurs 0 to 10 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n          move arrLength to resLength\n          perform varying i from 1 until i > arrLength\n             move xs(i) to res(resLength - i + 1)\n          end-perform\n          goback.\n       end program ReverseList.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19729,"user_id":53,"body":"       identification division.\n       program-id. ReverseList.\n       data division.\n       local-storage section.\n       01  t                pic s9(2).\n       linkage section.\n       01  arr.\n           05 len           pic 9(2).\n           05 xs            pic s9(2) occurs 0 to 10\n                                      depending on len.\n       01  result.\n           05 res-len       pic 9(2).\n           05 r             pic s9(2) occurs 0 to 10 \n                            depending res-len indexed by i j.\n       procedure division using arr result.\n          initialize result\n          move arr to result\n          move len to j\n          perform varying i from 1 until i >= j\n             move r(i) to t\n             move r(j) to r(i)\n             move t to r(j)\n             subtract 1 from j\n          end-perform\n          goback.\n       end program ReverseList.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19730,"user_id":50,"body":"       identification division.\n       program-id. ReverseList.\n       data division.\n       local-storage section.\n       01  n               pic s9(2).\n      \n       linkage section.\n       01  arr.\n           05 l             pic 9(2).\n           05 xs            pic s9(2) occurs 0 to 10\n                                      depending on l.\n       01  result.\n           05 filler        pic 9(2).\n           05 r             pic s9(2) occurs 0 to 10 \n                            depending l indexed i j.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move arr to result\n          set j to l\n          perform varying i from 1 until i >= j\n             move r(i) to n\n             move r(j) to r(i)\n             move n    to r(j)\n             set j down by 1\n          end-perform\n     \n          goback.\n       end program ReverseList.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53dc23c68a0c93699800041d":[{"id":19731,"user_id":null,"body":"       identification division.\n       program-id. Smash.\n       data division.\n       local-storage section.\n       77 count-trailing-spaces  usage is index.\n      \n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(15) occurs 0 to 15 times \n                                        depending on numWords\n                                        indexed by i.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resString.   \n               10  resChar    pic a  occurs 0 to 239 times \n                                     depending on resLen\n                                     indexed by j.\n      \n       procedure division using wordsTable result.      \n          initialize result\n          set resLen to 239\n          set j to 1\n          perform varying i from 1 until i > numWords\n             string word in wordsTable(i) delimited by space\n                    space                 delimited by size\n               into resString with pointer j\n             end-string\n          end-perform\n          inspect resString tallying count-trailing-spaces \n                        for trailing spaces\n          set resLen down by count-trailing-spaces \n          goback.\n       end program Smash.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19732,"user_id":168,"body":"       identification division.\n       program-id. Smash.\n       data division.\n      \n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(15) occurs 0 to 15 times \n                                      depending on numWords indexed i.\n       01  result.\n           05  resLen         pic 9(3).\n           05  res.\n              10  resChar        pic a\n                    occurs 0 to 239 times depending on resLen indexed j.\n      \n       procedure division using wordsTable result.\n          move 239 to resLen\n          move 1 to j\n          perform varying i from 1 until i > numWords\n              if i > 1 string ' ' into res with pointer j end-if\n              string word(i) delimited space into res with pointer j\n          end-perform\n          subtract 1 from j giving resLen\n          goback.\n       end program Smash.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19733,"user_id":null,"body":"       identification division.\n       program-id. Smash.\n       data division.\n       working-storage section.\n       01  i                  pic 9(3).\n       01  word-size          pic 9(3).\n       01  res-ptr            pic 9(3).\n      \n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(15) occurs 0 to 15 times \n                                      depending on numWords.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resChars.\n               10 resChar     pic a\n                              occurs 0 to 239 times \n                              depending on resLen.\n      \n       procedure division using wordsTable result.\n      \n          initialize result\n          move 1 to res-ptr\n          perform varying i from 1 by 1 until i > numWords\n             move function stored-char-length(word(i)) to word-size\n             add word-size to resLen\n             move word(i)(1:word-size) to resChars(res-ptr:word-size)\n             if i < numWords\n                add 1 to word-size, resLen\n             end-if\n             add word-size to res-ptr\n          end-perform\n      \n          goback.\n       end program Smash.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19734,"user_id":53,"body":"       identification division.\n       program-id. Smash.\n       data division.\n       local-storage section.\n       01  i                  usage index value 1.\n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(15) occurs 0 to 15 times \n                              depending on numWords indexed j.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resChars       pic a(239).\n       procedure division using wordsTable result.\n          initialize result\n          move 239 to resLen\n          perform varying j from 1 until j > numWords\n            if j > 1 then \n              string ' ' function trim(word(j)) \n              into resChars with pointer i\n            else\n              string function trim(word(j))\n              into resChars with pointer i\n            end-if\n          end-perform\n          subtract 1 from i giving resLen\n          goback.\n       end program Smash.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19735,"user_id":50,"body":"       identification division.\n       program-id. Smash.\n       data division.\n       local-storage section.\n       01  i                 usage index value 1.\n      \n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(15) occurs 0 to 15 times \n                              depending on numWords indexed j.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resChars       pic a(239).\n      \n       procedure division using wordsTable result.\n      \n          initialize result\n          move 239 to resLen\n          perform varying j from 1 until j > numWords\n              string function trim(word(j) trailing) ' '\n              into resChars with pointer i\n              if i > 239 goback end-if\n          end-perform\n          compute resLen = function max(0, i - 2).\n      \n       end program Smash.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53e57dada0cb0400ba000688":[{"id":19736,"user_id":168,"body":"       identification division.\n       program-id. ListPosition.\n       data division.\n       working-storage section.\n       01  k       pic 99.\n       01  n       pic 99.\n       01  p       pic 9(32).\n       01  p1      pic 9(32).\n      \n       local-storage section.\n       01  letters.\n           05 cs   pic 99 occurs 26 times.\n      \n       linkage section.\n       01  wrd.\n           05 wrd-length     pic 9(2).\n           05 chr            pic a occurs 1 to 25 times \n                                   depending on wrd-length indexed i j.\n       01  result            pic 9(32).\n      \n       procedure division using wrd result.\n          move 1 to result p1\n          move wrd-length to n\n          move function factorial(n) to p\n          perform varying i from 1 until i > wrd-length\n              add 1 to cs(function ord(chr(i)) - 65)\n          end-perform\n          perform varying i from 1 until i > 26\n              multiply function factorial(cs(i)) by p1\n          end-perform\n          perform varying i from 1 until i > wrd-length\n              compute k = function ord(chr(i)) - 65\n              divide n into p\n              subtract 1 from n\n              perform varying j from 1 until j >= k\n                  if cs(j) > 0\n                      compute result = result + p * cs(j) \/ p1\n                  end-if\n              end-perform\n              divide cs(k) into p1\n              subtract 1 from cs(k)\n          end-perform.\n       end program ListPosition.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19737,"user_id":53,"body":"       identification division.\n       program-id. ListPosition.\n       data division.\n       local-storage section.\n       01  map.\n           03 hs             pic 9(2) occurs 26 times\n                                      indexed x y.\n       01  s                 pic 9(32) value 1.\n       01  cx                pic 9(32).\n       01  cy                pic 9(32).\n       linkage section.\n       01  wrd.\n           05 l              pic 9(2).\n           05 chr            pic a occurs 1 to 25 times \n                                   depending on l\n                                   indexed by i j.\n       01  r                 pic 9(32).\n       procedure division using wrd r.\n          move 1 to r\n          perform varying i from 1 until i > l\n            compute j = l - i + 1\n            compute x = function ord(chr(j)) - 65\n            add 1 to hs(x)\n            move hs(x) to cx\n            perform varying y from 1 until y > 26\n              if y < x then\n                move hs(y) to cy\n                compute r = r + s * cy \/ cx\n              end-if\n            end-perform\n            compute s = s * i \/ cx\n          end-perform\n          goback.\n       end program ListPosition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19738,"user_id":50,"body":"       identification division.\n       program-id. ListPosition.\n       data division.\n       local-storage section.\n       01  counter.\n           03 cnt pic 9(2) occurs 26 times indexed k.\n       01 arr.\n          05  l   pic 9(2).\n          05  s   occurs 1 to 25 times depending on l\n                                          indexed j h.\n             07 c pic x.\n       01  n  pic 9(16).\n       \n       linkage section.\n       01  wrd.\n           05 wrd-len        pic 9(2).\n           05 chars.\n              07 chr         pic a occurs 1 to 25 times \n                             depending on wrd-len indexed i.\n       01  x                 pic 9(32).\n      \n       procedure division using wrd x.\n\n          initialize counter\n          move wrd-len to l\n          perform varying i from 1 until i > wrd-len\n              add 1 to cnt(function ord(chr(i)) - 65)\n              move chr(i) to c(i)\n          end-perform\n      \n          sort s on ascending c\n      \n          move 1 to x\n          perform varying i from 1 until i > wrd-len\n              move 0 to j\n              perform until c(j + 1) = chr(i)\n                add 1 to j\n              end-perform\n              if j <> 0\n                move 1 to n\n                perform varying k from 1 until k = 27\n                    if cnt(k) <> 0\n                      compute n = n * function factorial(cnt(k))\n                    end-if\n                end-perform\n                compute x = x + j * function factorial(l - 1) \/ n\n              end-if\n              perform splice\n          end-perform\n      \n          goback.\n      \n          splice.\n            perform varying h from function abs(j + 1) until h = l\n                move c(h + 1) to c(h)\n            end-perform\n            subtract 1 from l, cnt(function ord(chr(i)) - 65)\n            .\n      \n       end program ListPosition.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53ea07c9247bc3fcaa00084d":[{"id":19739,"user_id":53,"body":"       identification division.\n       program-id. LookAndSay.\n       data division.\n       local-storage section.\n       01  q                  pic x(500).\n       01  q-i                usage index.\n       01  p                  pic x(500).\n       01  p-len              pic 9(3).\n       01  p-i                usage index.\n       01  cnt                pic 9(3).\n       01  cnt-str            pic z(2)9.   \n       01  x                  pic x. \n       01  y                  pic x. \n       linkage section.\n       01  strng.\n           05  digit-len      pic 9.\n           05  digit.          \n              07 filler       pic x \n                              occurs 1 to 5 times \n                              depending on digit-len.\n       01  max-len            pic 9(2).\n       01  result.\n           05  seq-len        pic 9(2).\n           05  seq            pic x(500) \n                              occurs 5 to 15 times\n                              depending on seq-len.\n       procedure division using strng max-len result.\n          initialize result\n          move digit-len to p-len\n          move digit to p\n          perform until max-len = 0\n            initialize q x\n            set q-i p-i cnt to 1\n            move p(p-i:1) to x\n            perform varying p-i from 2 until p-i > p-len\n              move p(p-i:1) to y\n              if x = y then\n                add 1 to cnt\n              else\n                move cnt to cnt-str\n                string function trim(cnt-str) x into q pointer q-i\n                set cnt to 1\n                move y to x\n              end-if\n            end-perform\n            if cnt > 0 then\n              move cnt to cnt-str\n              string function trim(cnt-str) x into q pointer q-i\n            end-if\n            add 1 to seq-len\n            move q to seq(seq-len) p\n            move length of function trim(q) to p-len\n            subtract 1 from max-len\n          end-perform\n          goback.\n       end program LookAndSay.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19740,"user_id":50,"body":"       identification division.\n       program-id. LookAndSay.\n       data division.\n       local-storage section.\n       01  cur     pic x(500).\n       01  prev    pic x(500).\n       01  prevLen pic 9(3).\n      * count of consecutive digits\n       01  c       usage index.\n      * index to navigate through `prev`\n       01  j       usage index.\n      * pointer to fill `cur`\n       01  k       usage index.\n      * length of `prev`\n       01  l       pic 9(3).\n      * `c` without leading zeros\n       01  n       pic z(2)9.\n      \n       linkage section.\n       01  strng.\n           05  strngLen     pic 9.\n           05  s.\n               07 filler    pic x occurs 1 to 5 times \n                                  depending on strngLen.\n       01  maxLen           pic 9(2).\n       01  result.\n           05  resLen       pic 9(2).\n           05  seq pic x(500) occurs 5 to 15 times\n                              depending on resLen indexed i.\n      \n       procedure division using strng maxLen result.\n      \n          initialize result\n      \n          move maxLen to resLen\n          move s to prev\n          move strngLen to l\n          perform varying i from 1 until i > maxLen\n            initialize cur\n            set c k to 1\n            perform varying j from 1 until j > l\n              if j = l or (j < l and prev(j + 1: 1) <> prev(j : 1))\n                    move c to n\n                    string function trim(n) prev(j : 1)\n                    into cur pointer k\n                    move 1 to c\n              else  add 1 to c end-if\n            end-perform\n            move cur to seq(i) prev\n            move length of function trim(cur) to l\n          end-perform\n      \n          goback.\n       end program LookAndSay.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53ee5429ba190077850011d4":[{"id":19741,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * 2.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19742,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n       ADD N TO N GIVING RESULT.\n           GOBACK.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19743,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = n * 2\n           GOBACK.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19744,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n       multiply N by 2 giving RESULT.\n           GOBACK.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19745,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n      * Do it fast!\n      *     GOBACK.\n            MULTIPLY 2 BY N GIVING RESULT.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19746,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n           multiply N by 2 giving result.\n           GOBACK.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19747,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n           ADD N N GIVING RESULT\n           .\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19748,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 r      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N r.\n            compute r = n * 2 \n           GOBACK.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19749,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n       MULTIPLY N BY 2 GIVING RESULT. \n           GOBACK.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19750,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DOUBLE-INTEGER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n        COMPUTE RESULT = N * 2.\n       END PROGRAM DOUBLE-INTEGER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53fe2171d5679bff300007d9":[{"id":19751,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(2) sign leading.\n       01 RESULT      PIC S9(22) sign leading.\n       PROCEDURE DIVISION USING N RESULT.          \n           COMPUTE RESULT = FUNCTION FACTORIAL(FUNCTION ABS(N))\n           IF N < 0 AND FUNCTION REM(N, 2) = -1 THEN\n               MULTIPLY -1 BY RESULT\n           END-IF.\n       END PROGRAM FACT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19752,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(2) sign leading.\n       01 RESULT      PIC S9(22) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = function factorial(function abs(n))\n           if n < 0 and function mod(n, 2) = 1\n              compute result = -result\n           end-if.\n       END PROGRAM FACT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19753,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC S9(2).\n       LINKAGE SECTION.\n       01 N           PIC S9(2) sign leading.\n       01 RESULT      PIC S9(22) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n         SET RESULT TO 1.\n         PERFORM VARYING I FROM 1 UNTIL I > FUNCTION ABS(N)\n           MULTIPLY I BY RESULT\n         END-PERFORM\n         IF N < 0 AND FUNCTION REM(N, 2) = -1\n           MULTIPLY -1 BY RESULT.\n       END PROGRAM FACT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19754,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(2) sign leading.\n       01 RESULT      PIC S9(22) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n         COMPUTE RESULT = FUNCTION FACTORIAL(FUNCTION ABS(N))\n         IF N < 0 AND FUNCTION MOD(N, 2) <> 0 THEN \n           COMPUTE RESULT = -RESULT \n         END-IF.\n       END PROGRAM FACT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19755,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC  9(04) BINARY.\n       LINKAGE SECTION.\n       01 N           PIC S9(02) SIGN LEADING.\n       01 RESULT      PIC S9(22) SIGN LEADING.\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE 1  TO RESULT\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > FUNCTION ABS(N)\n               MULTIPLY I BY RESULT\n           END-PERFORM\n      \n           IF  N < 0 AND FUNCTION REM(N, 2) < 0\n               MULTIPLY -1 BY RESULT\n           END-IF.\n       END PROGRAM FACT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19756,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 S           PIC S9(2) sign leading.\n       01 R           PIC S9(22) sign leading.\n       LINKAGE SECTION.\n       01 N           PIC S9(2) sign leading.\n       01 RESULT      PIC S9(22) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n        if n < 0 then\n         compute s = n + 1\n         call \"FACT\" using \n           by content s by reference r\n         compute result = r * n\n         goback\n        end-if\n        if n > 0 then\n         compute s = n - 1\n         call \"FACT\" using \n           by content s by reference r\n         compute result = r * n\n         goback\n        end-if\n        move 1 to result\n        Goback.\n       END PROGRAM FACT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19757,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(2) sign leading.\n       01 RESULT      PIC S9(22) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n        If n >= 0\n            compute result = function factorial(n),\n        else\n          if function rem(-n, 2) = 1 \n            compute result = - function factorial(-n),\n          else\n            compute result = function factorial (-n)\n          end-if\n        End-if\n      \n        Goback.\n\n       END PROGRAM FACT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"53fe3578d5679bf04900093f":[{"id":19758,"user_id":53,"body":"       identification division.\n       program-id. RotateInPlace.\n       data division.\n       local-storage section.\n       01  a       pic 9(2).\n       linkage section.\n       01  matrix.\n           03  n    pic 9.\n           03  row  occurs 0 to 9 times depending on n\n                    indexed by i j.\n              05 mat pic 9(2) occurs 9 times.\n       procedure division using matrix.\n          perform varying i from 1 until i > n\n              after j from 1 until j > i\n            move mat(i, j) to a\n            move mat(j, i) to mat(i, j)\n            move a to mat(j, i)\n          end-perform\n          perform varying i from 1 until i > n\n              after j from 1 until j > n \/ 2\n            move mat(i, j) to a\n            move mat(i, n - j + 1) to mat(i, j)\n            move a to mat(i, n - j + 1)\n          end-perform\n          goback.\n       end program RotateInPlace.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19759,"user_id":50,"body":"       identification division.\n       program-id. RotateInPlace.\n      \n       data division.\n       local-storage section.\n       01  t1       pic 9(2).\n       01  t2       pic 9(2).\n       01  t3       pic 9(2).\n       01  t4       pic 9(2).\n      \n       linkage section.\n       01  matrix.\n           03  l    pic 9.\n           03  row  occurs 0 to 9 times depending on l\n                                        indexed by i j k n.\n              05 cell pic 9(2) occurs 9 times.\n      \n       procedure division using matrix.\n      \n          perform varying i from 0 until i >= l \/ 2\n                  after   j from i until j >= l - i - 1\n            compute k = -i - 1\n            compute n = -j - 1\n            move cell(l + n + 1, i + 1) to t1\n            move cell(l + k + 1, l + n + 1) to t2\n            move cell(j + 1, l + k + 1) to t3\n            move cell(i + 1, j + 1) to t4\n            move t1 to cell(i + 1, j + 1)\n            move t2 to cell(l + n + 1, i + 1)\n            move t3 to cell(l + k + 1, l + n + 1)\n            move t4 to cell(j + 1, l + k + 1)\n         end-perform\n      \n         goback.\n       end program RotateInPlace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"540954232a3259755d000039":[{"id":19760,"user_id":50,"body":"       identification division.\n       program-id. FridayTheThirteenths.\n      \n       data division.\n       local-storage section.\n       01  i         usage index value 1.\n       01  y         pic 9(4).\n       01  leap      pic 9.\n       01  d1        pic 9.\n       01  rank      pic 9(3).\n       01  m         pic 9(2).\n           88 add31 value 4, 6, 8, 9, 11.\n       01  mDisp     pic z(2)9.\n      \n       linkage section.\n       01  startYear pic 9(4).\n       01  endYear   pic 9(4).\n       01  result    pic x(6000).\n      \n       procedure division using startYear endYear result.\n      \n          initialize result\n      \n          if endYear = 0 move startYear to endYear end-if\n          perform varying y from startYear until y > endYear\n            if function mod(y, 4) = 0\n               and (y(3:) <> '00' or function mod(y, 400) = 0)\n              move 1 to leap\n            else move 0 to leap end-if\n\n            compute d1 = function mod(\n                                      y \n                                    + function integer((y - 1) \/ 4)\n                                    - function integer((y - 1) \/ 100)\n                                    + function integer((y - 1) \/ 400)\n                                        , 7)\n      \n            perform varying m from 1 until m = 13\n              evaluate m\n              when 1   move 12 to rank\n              when 2   move 43 to rank\n              when 3   compute rank = 71 + leap\n              when other\n                       if add31\n                          add 31 to rank\n                       else\n                          add 30 to rank  end-if\n              end-evaluate\n              if function mod(rank + d1, 7) = 5\n                move m to mDisp\n                string function trim(mDisp) '\/13\/' y ' '\n                       into result with pointer i\n          .\n      \n       end program FridayTheThirteenths.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19761,"user_id":53,"body":"       identification division.\n       program-id. FridayTheThirteenths.\n       data division.\n       local-storage section.\n       01  i         usage index value 1.\n       01  y         pic 9(4).\n       01  l         pic 9.\n       01  d         pic 9.\n       01  r         pic 9(3).\n       01  m         pic 9(2).\n           88 h      value 4, 6, 8, 9, 11.\n       01  s         pic z(2)9.\n       linkage section.\n       01  startYear pic 9(4).\n       01  endYear   pic 9(4).\n       01  result    pic x(6000).\n       procedure division using startYear endYear result.\n      \n          initialize result\n          if endYear = 0 then move startYear to endYear end-if\n          \n          perform varying y from startYear until y > endYear\n            perform leap\n            perform daay\n            perform varying m from 1 until m = 13\n              perform rank\n              perform render\n            end-perform\n          end-perform\n          goback.\n      \n        leap.\n          if function mod(y, 4) = 0 and (y(3:) <> '00'\n              or function mod(y, 400) = 0) then\n            move 1 to l\n          else \n            move 0 to l \n          end-if\n          .\n      \n        daay.\n          compute d = function mod(y + function integer((y - 1) \/ 4)\n             - function integer((y - 1) \/ 100)\n             + function integer((y - 1) \/ 400), 7)\n          .\n      \n        rank.\n          evaluate m\n            when 1   move 12 to r\n            when 2   move 43 to r\n            when 3   compute r = 71 + l\n            when other\n               if h then\n                  add 31 to r\n               else\n                  add 30 to r\n               end-if\n          end-evaluate\n          .\n      \n        render.\n          if function mod(r + d, 7) = 5 then\n            move m to s\n            string function trim(s) '\/13\/' y ' '\n                   into result with pointer i\n          end-if\n          .\n      \n       end program FridayTheThirteenths.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5410c0e6a0e736cf5b000e69":[{"id":19762,"user_id":421,"body":"       identification division.\n       program-id. Hamming.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  a.\n           03 a-length    pic 9(2).\n           03  a-chars.\n               05  a-char pic x occurs 0 to 99 times \n                          depending on a-length\n                          indexed by i.\n       01  b.\n           03 b-length    pic 9(2).\n           03  b-chars.\n               05  b-char pic x occurs 0 to 99 times \n                          depending on b-length.\n       01  result         pic 9(2).\n\n       procedure division using a b result.\n           initialize result\n           perform varying i from 1 by 1 until i > a-length\n               if a-char(i) <> b-char(i) then\n                  add 1 to result\n               end-if\n           end-perform.\n       end program Hamming.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19763,"user_id":168,"body":"       identification division.\n       program-id. Hamming.\n\n       data division.\n      \n       linkage section.\n       01  a.\n           03 a-length    pic 9(2).\n           03  a-chars.\n               05  a-char pic x occurs 0 to 99 times \n                          depending on a-length.\n       01  b.\n           03 b-length    pic 9(2).\n           03  b-chars.\n               05  b-char pic x occurs 0 to 99 times \n                          depending on b-length indexed by i.\n       01  result         pic 9(2).\n\n       procedure division using a b result.\n          move 0 to result\n          perform varying i from 1 until i > a-length\n              if a-char(i) <> b-char(i)\n                  add 1 to result\n              end-if\n          end-perform\n          goback.\n       end program Hamming.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19764,"user_id":53,"body":"       identification division.\n       program-id. Hamming.\n       data division.\n       local-storage section.\n       01  m              pic 9(2).\n       linkage section.\n       01  a.\n           03 a-length    pic 9(2).\n           03  a-chars.\n               05  a-char pic x occurs 0 to 99 times \n                          depending a-length \n                          indexed i.\n       01  b.\n           03 b-length    pic 9(2).\n           03  b-chars.\n               05  b-char pic x occurs 0 to 99 times \n                          depending b-length.\n       01  result         pic 9(2).\n       procedure division using a b result.\n          move 0 to result\n          move function min (a-length, b-length) to m\n          perform varying i from 1 until i > m\n            if b-char(i) <> a-char(i) \n              add 1 to result\n            end-if\n          end-perform\n          goback.\n       end program Hamming.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19765,"user_id":50,"body":"       identification division.\n       program-id. Hamming.\n\n       data division.\n      \n       linkage section.\n       01  a.\n           03 a-length    pic 9(2).\n           03  a-chars.\n               05  a-char pic x occurs 0 to 99 times \n                          depending a-length indexed i.\n       01  b.\n           03 b-length    pic 9(2).\n           03  b-chars.\n               05  b-char pic x occurs 0 to 99 times \n                          depending b-length.\n       01  result         pic 9(2).\n\n       procedure division using a b result.\n      \n          move 0 to result\n          perform varying i from 1 until i > a-length\n            if b-char(i) <> a-char(i) add 1 to result, end-if\n          end-perform\n                \n          goback.\n       end program Hamming.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5417423f9e2e6c2f040002ae":[{"id":19766,"user_id":421,"body":"       identification division.\n       program-id. digitize.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  i  usage index.\n       linkage section.\n       01  n                 pic 9(10).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 10 times \n                             depending on res-length.\n       \n       procedure division using n result.\n           compute res-length = function log10(n) + 1      \n           perform varying i from res-length by -1 until i = 0\n               divide n by 10 giving n remainder res(i)\n           end-perform.\n       end program digitize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19767,"user_id":null,"body":"       identification division.\n       program-id. digitize.\n       data division.\n       WORKING-STORAGE SECTION.\n       01  WS-N9             PIC 9(10).\n       01  WS-NX REDEFINES WS-N9.\n           05 NNX            PIC X(01) OCCURS 10 INDEXED I.\n      \n       linkage section.\n       01  n                 pic 9(10).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 10 times \n                             depending on res-length.\n      \n       procedure division using n result.\n           IF n = 0\n               ADD 1 TO res-length\n               MOVE n TO res(res-length)\n           ELSE\n              MOVE n TO WS-N9\n              INSPECT WS-NX REPLACING LEADING ZERO BY SPACE\n              PERFORM VARYING I FROM 1 BY 1 UNTIL I > 10\n                  IF (NNX(I) IS NUMERIC)\n                      ADD 1 TO res-length\n                      MOVE NNX(I) TO res(res-length)\n                  END-IF\n              END-PERFORM\n           END-IF.\n          goback.\n       end program digitize.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19768,"user_id":53,"body":"       identification division.\n       program-id. digitize.\n       data division.\n       local-storage section.\n       01  d                 pic 9.\n       linkage section.\n       01  n                 pic 9(10).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 10 times \n                             depending on res-length\n                             indexed by i.\n       procedure division using n result.\n          initialize result\n          if n = 0 then\n            set res-length to 1\n            set res(1) to 0\n          else\n            set i to 0\n            compute res-length = function log10(n) + 1\n            perform until n = 0\n              divide 10 into n giving n remainder d\n              move d to res(res-length - i)\n              add 1 to i\n            end-perform\n          end-if\n          goback.\n       end program digitize.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19769,"user_id":50,"body":"       identification division.\n       program-id. digitize.\n       data division.\n       local-storage section.\n       01  s.\n           05 digit pic 9 occurs 10 times.\n      \n       linkage section.\n       01  n                 pic 9(10).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 10 times \n                             depending on res-length\n                             indexed i j.\n      \n       procedure division using n result.\n      \n          move 0 to j\n          move n to s\n          inspect s tallying j for leading '0'\n          move function min(j + 1, 10) to j\n          compute res-length = 11 - j\n          perform varying i from j until i = 11\n            move digit(i) to res(i - j + 1)\n          end-perform\n          \n          goback.\n       end program digitize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"541af676b589989aed0009e7":[{"id":19770,"user_id":76,"body":"       identification division.\n       program-id. CountChange.\n       data division.\n       \n       working-storage section.\n       01 denom pic 9(3).\n       01 combs.\n         05 cs pic 9(5) occurs 100000 times indexed by i.\n      \n       linkage section.\n       01  Money             pic 9(5).\n       01  Coins.\n           05  Coinslength   pic 9.\n           05  Coin          pic 9(3) occurs 0 to 8 times \n                                       depending on Coinslength\n                                       indexed by j.\n       01  Result            pic 9(5).\n      \n       procedure division using Money Coins Result.\n         perform varying i from 1 by 1 until i > Money + 1\n           move 0 to cs(i)\n         end-perform\n         move 1 to cs(1)\n         perform varying j from 1 by 1 until j > Coinslength\n           compute denom = Coin(j) + 1\n           perform varying i from denom by 1 until i > Money + 1\n             add cs(i - denom + 1) to cs(i)\n           end-perform\n         end-perform\n         move cs(Money + 1) to Result      \n         goback.\n       end program CountChange.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19771,"user_id":53,"body":"       identification division.\n       program-id. CountChange.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  j usage index.\n       01  n pic 9(3).\n       01  array.\n           05  arr-len       pic 9(5).\n           05  arr           pic 9(5) occurs 0 to 99999 times \n                                      depending on arr-len.\n       linkage section.\n       01  m                 pic 9(5).\n       01  coins-arr.\n           05  coins-len     pic 9.\n           05  coins         pic 9(3) occurs 0 to 8 times \n                                      depending on coins-len.\n       01  result            pic 9(5).\n       procedure division using m coins-arr result.\n          initialize result\n          add 1 to m giving arr-len\n          set arr(1) to 1\n          perform varying i from 0 until i >= arr-len\n              or i >= coins-len\n            move coins(i + 1) to n\n            perform varying j from n until j > m\n              compute arr(j + 1) =\n                arr(j + 1) + arr(j + 1 - n)\n            end-perform\n          end-perform\n          move arr(m + 1) to result\n          goback.\n       end program CountChange.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19772,"user_id":50,"body":"       identification division.\n       program-id. CountChange.\n       data division.\n       local-storage section.\n       01  arr.\n           05  len           pic 9(5).\n           05  a pic 9(5) occurs 0 to 20000 times\n                          depending on len.\n       01 j usage index.\n      \n       linkage section.\n       01  m                 pic 9(5).\n       01  coins.\n           05 l              pic 9.\n           05 c              pic 9(3) occurs 0 to 8 times \n                                      depending l indexed i.\n       01  result            pic 9(5).\n      \n       procedure division using m coins result.\n      \n          initialize Result\n      \n          compute len = m + 1\n          move 1 to a(1)\n          perform varying i from 1 until i > l\n              after j from c(i) until j > m\n              add a(j - c(i) + 1) to a(j + 1)\n          end-perform\n          move a(len) to result\n      \n          goback.\n       end program CountChange.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19773,"user_id":53,"body":"       identification division.\n       program-id. CountChange.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  j usage index.\n       01  n pic 9(3).\n       01  array.\n           05  arr-len       pic 9(5).\n           05  arr           pic 9(5) occurs 0 to 99999 times \n                                      depending on arr-len.\n       linkage section.\n       01  m                 pic 9(5).\n       01  coins-arr.\n           05  coins-len     pic 9.\n           05  coins         pic 9(3) occurs 0 to 8 times \n                                      depending on coins-len.\n       01  result            pic 9(5).\n       procedure division using m coins-arr result.\n          initialize result\n          if m = 0 then goback end-if\n          add 1 to m giving arr-len\n          set arr(1) to 1\n          perform varying i from 0 until i >= arr-len\n              or i >= coins-len\n            move coins(i + 1) to n\n            perform varying j from n until j > m\n              compute arr(j + 1) =\n                arr(j + 1) + arr(j + 1 - n)\n            end-perform\n          end-perform\n          move arr(m + 1) to result\n          goback.\n       end program CountChange.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"541c8630095125aba6000c00":[{"id":19774,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.      \n       01 N         PIC 9(10).    \n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n           COMPUTE ROOT = FUNCTION REM(N - 1, 9) + 1.\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19775,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N         PIC 9(10).\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n       COMPUTE ROOT = FUNCTION REM(N  - 1, 9) + 1 .\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19776,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT RECURSIVE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 S         PIC 9(10).\n       LINKAGE SECTION.\n       01 N         PIC 9(10).\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n           IF N < 10\n              MOVE N TO ROOT\n           ELSE\n              MOVE 0 TO S\n              PERFORM UNTIL N = 0\n                  DIVIDE N BY 10 GIVING N REMAINDER ROOT\n                  ADD ROOT TO S\n              END-PERFORM\n              MOVE S TO N\n              CALL 'DIGITAL-ROOT' USING N ROOT\n           END-IF.\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19777,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I        PIC 999.\n       01 AC       PIC 9999.\n       LINKAGE SECTION.\n      * Input :\n       01 N         PIC 9(10).\n      * Output :\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n          MOVE 1    TO I\n          MOVE 999  TO AC\n          PERFORM UNTIL AC LESS 10\n             MOVE 0 TO AC \n             PERFORM UNTIL I GREATER 10\n                ADD FUNCTION NUMVAL(N(I:1)) TO AC\n                ADD 1  TO I\n             END-PERFORM\n             MOVE 1    TO I\n             MOVE AC   TO N  \n          END-PERFORM\n          MOVE AC   TO ROOT\n          GOBACK.\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19778,"user_id":527,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n      * Input :\n       01 N         PIC 9(10).\n      * Output :\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n       COMPUTE ROOT = FUNCTION REM(N - 1, 9) + 1.\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19779,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  R        PIC 9(10).\n       LINKAGE SECTION.\n      * Input :\n       01 N         PIC 9(10).\n       01 FILLER REDEFINES N.\n          05 X OCCURS 10 TIMES\n               INDEXED BY I\n                    PIC 9(01).\n      * Output :\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n      * Create DIGITAL-ROOT to compute digital root\n           PERFORM UNTIL N < 10\n              MOVE ZEROS       TO R\n              PERFORM VARYING I FROM 1 BY 1\n                      UNTIL   I > 10\n                 ADD X(I)    TO R\n              END-PERFORM\n              MOVE R         TO N\n           END-PERFORM.\n           MOVE N    TO ROOT.\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19780,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 a         PIC 9(10).\n       01 b      PIC 9 .\n       PROCEDURE DIVISION USING a b.\n            if a = 0 then \n                set b to 0\n            else\n              subtract 1 from a\n              compute b = function mod(a 9) + 1\n            end-if.\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19781,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n      * Input :\n       01 N         PIC 9(10).\n      * Output :\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n      \n        if n = 0 then move 0 to root,\n        else \n          compute root = function rem(n,9)\n          if root = 0 then move 9 to root .\n        .\n          \n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19782,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIGITAL-ROOT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N         PIC 9(10).\n       01 ROOT      PIC 9.\n       PROCEDURE DIVISION USING N ROOT.\n       IF N = ZERO THEN COMPUTE ROOT = 0.\n       IF N > 0 THEN COMPUTE ROOT = 1 + FUNCTION MOD(N - 1, 9).\n       END PROGRAM DIGITAL-ROOT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19783,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n      * Output :\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT.\n       if function rem(input-01,9) = 0 then compute result = 9\n       if function rem(input-01,9) = 1 then compute result = 1\n       if function rem(input-01,9) = 2 then compute result = 2\n       if function rem(input-01,9) = 3 then compute result = 3\n       if function rem(input-01,9) = 4 then compute result = 4\n       if function rem(input-01,9) = 5 then compute result = 5\n       if function rem(input-01,9) = 6 then compute result = 6\n       if function rem(input-01,9) = 7 then compute result = 7\n       if function rem(input-01,9) = 8 then compute result = 8\n       if input-01 = 0 then compute result = 0\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19784,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n      * Output :\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT.\n       compute result = function rem(input-01 - 1, 9) + 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19785,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n       01 WS-TEMP     PIC X(08).\n       01 IND-I       PIC 9(2).\n       01 WS-NUM      PIC 9.\n      * Output :\n       01 RESULT      PIC 9(08).\n       \n       PROCEDURE DIVISION.\n       DIGITAL-ROOT SECTION.\n      \n           MOVE INPUT-01 TO WS-TEMP\n                            RESULT\n      \n           PERFORM UNTIL RESULT < 10\n            \n             MOVE ZEROES TO RESULT\n             \n             PERFORM VARYING IND-I FROM 1 BY 1 \n                  UNTIL IND-I GREATER THAN 8\n                MOVE WS-TEMP(IND-I:1) TO WS-NUM\n                ADD WS-NUM TO RESULT\n             END-PERFORM\n        \n             MOVE RESULT TO WS-TEMP\n\n           END-PERFORM.\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19786,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n      * Output :\n       01 RESULT      PIC 9(08).\n       01 ZAEHLER     PIC 9(08) BINARY.\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT.\n      * laenge der vars war mal 08 #fallsDasZuNemFehlerFuehrt\n      *\n           DISPLAY \"INPUT  \" INPUT-01\n           MOVE 0 TO RESULT\n      *     \n           PERFORM UNTIL RESULT < 10 AND RESULT NOT = 0 \n           OR INPUT-01 = 0\n      *\n      *\n      *        PERFORM VARYING ZAEHLER FROM 1 BY 1 \n      *        UNTIL ZAEHLER > FUNCTION LENGTH(INPUT-01)\n            COMPUTE RESULT = \n                         FUNCTION NUMVAL(INPUT-01(1 : 1))+\n                        FUNCTION NUMVAL(INPUT-01(2 : 1))+\n                       FUNCTION NUMVAL(INPUT-01(3 : 1))+\n                        FUNCTION NUMVAL(INPUT-01(4 : 1))\n                       + FUNCTION NUMVAL(INPUT-01(5 : 1))\n                       + FUNCTION NUMVAL(INPUT-01(6 : 1))\n                       + FUNCTION NUMVAL(INPUT-01(7: 1))\n                       + FUNCTION NUMVAL(INPUT-01(8 : 1))\n      *         ADD FUNCTION NUMVAL(INPUT-01 (ZAEHLER : 1)) TO RESULT\n      *        \n      *        END-PERFORM  \n      *\n             MOVE RESULT TO INPUT-01   \n      * \n           END-PERFORM\n      *\n        END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19787,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n      * Output :\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT.\n           IF INPUT-01 = 0\n              SET RESULT TO 0\n           ELSE IF FUNCTION MOD(INPUT-01,9) = 0\n              SET RESULT TO 9\n           ELSE\n              COMPUTE RESULT = FUNCTION MOD(INPUT-01,9)\n           END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19788,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n       01 DIGIT       PIC 9.\n      * Output :\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT.\n           PERFORM UNTIL INPUT-01 IS LESS THAN 10.\n               MOVE 0 TO RESULT.\n               PERFORM UNTIL INPUT-01 IS EQUAL TO ZERO.\n                   DIVIDE INPUT-01 BY 10 GIVING INPUT-01 REMAINDER DIGIT.\n                   ADD DIGIT TO RESULT.\n               END-PERFORM.\n               MOVE RESULT TO INPUT-01.\n           END-PERFORM.\n           MOVE INPUT-01 TO RESULT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19789,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-01    PIC 9(08).\n      * Output :\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT SECTION\n         IF INPUT-01 = 0\n           MOVE 0 TO RESULT\n         IF INPUT-01 > 0\n           COMPUTE RESULT = FUNCTION MOD(INPUT-01 - 1, 9) + 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19790,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT.\n       COMPUTE RESULT = FUNCTION REM(INPUT-01 - 1, 9) + 1.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19791,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n      \n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(08).\n       01 RESULT      PIC 9(08).\n      \n       LOCAL-STORAGE SECTION.\n       01 N           PIC 9(08).\n      \n       PROCEDURE DIVISION.\n\n       DIGITAL-ROOT.\n           MOVE INPUT-01 TO N.\n           PERFORM AUX.\n      \n       AUX.\n           IF N = 0 THEN\n              COMPUTE RESULT = 0\n           ELSE\n              COMPUTE RESULT = (FUNCTION MOD ((N - 1) 9)) + 1\n           END-IF.\n           IF RESULT >= 10 THEN\n              MOVE RESULT TO N\n              PERFORM AUX\n           END-IF.\n      \n       END PROGRAM KATA","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19792,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT\n        IF INPUT-01 = 0 THEN COMPUTE RESULT = 0.\n        IF INPUT-01 > 0 THEN COMPUTE RESULT = 1 \n                        + FUNCTION MOD(INPUT-01 - 1, 9). \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19793,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       DIGITAL-ROOT SECTION .\n       IF INPUT-01 = ZERO THEN COMPUTE RESULT = 0 .\n       IF INPUT-01 > 0 THEN COMPUTE RESULT = 1 \n                      + FUNCTION MOD(INPUT-01 - 1, 9). \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"542c0f198e077084c0000c2e":[{"id":19794,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       DATA DIVISION.    \n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n      \n       PROCEDURE DIVISION USING N RESULT.\n     \n        MOVE 0 TO RESULT.\n      \n          PERFORM CHECK\n            VARYING I FROM 1 BY 1\n            UNTIL I > N.                \n      \n        CHECK.\n          IF FUNCTION MOD(N,I) = 0 THEN\n              ADD 1 TO RESULT\n            END-IF.\n           \n      \n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19795,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      * N itself  \n           ADD 1 TO RESULT\n           DIVIDE N BY 2 GIVING I\n           PERFORM UNTIL I = 0\n               IF FUNCTION REM(N, I) = 0 THEN\n                   ADD 1 TO RESULT\n               END-IF\n               SUBTRACT 1 FROM I\n           END-PERFORM.\n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19796,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 G           PIC 9(8).\n       01 I           PIC 9(8).\n       01 R           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n     \n      * HAJIME!\n          PERFORM VARYING I\n                     FROM 1 BY 1\n                    UNTIL I > N\n      \n             DIVIDE N BY I \n                    GIVING G\n                 REMAINDER R\n    \n                IF R = 0\n                   ADD 1 TO RESULT\n                END-IF\n      \n          END-PERFORM\n            \n          Goback.\n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19797,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n     \n      * HAJIME!\n          ADD 1 TO RESULT\n           DIVIDE N BY 2 GIVING I\n      *     display 'numero n 'n\n      *     display 'division i 'i\n           PERFORM UNTIL i = 0\n               IF FUNCTION REM(N, I) = 0 THEN\n      *             DISPLAY 'numero 'N ' letra i 'I\n                   ADD 1 TO RESULT\n               END-IF\n             SUBTRACT 1 FROM I\n           END-PERFORM.\n          Goback.\n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19798,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       DATA DIVISION.\n       working-storage section.\n       01 d           pic 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = 0\n          perform varying d from 1 by 1 until d > n\n              if function mod(n, d) = 0 then add 1 to result end-if\n          end-perform.\n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19799,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          if n < 2 then \n            move n to result\n            goback\n          end-if\n          move 2 to result\n          perform varying i from 2 by 1 until i * 2 > n,\n            if function rem(n, i) = 0 then \n              compute result = result + 1\n            end-if\n          end-perform .\n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19800,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISORS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          if n < 2 then move n to result,\n            else\n              Move 2 to result,\n              Perform varying i from 2 by 1 until i * 2 > n,\n                if function rem(n, i) = 0 then add 1 to result end-if\n              end-perform\n            end-if\n            \n          Goback.\n       END PROGRAM DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"542f0c36d002f8cd8a0005e5":[{"id":19801,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LAST-CHAIR.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(4).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING N RESULT.\n           SUBTRACT 1 FROM N GIVING RESULT.\n       END PROGRAM LAST-CHAIR.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19802,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LAST-CHAIR.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9999.\n       01 RESULT      PIC 9999.\n       PROCEDURE DIVISION USING N RESULT.\n        compute result = N - 1.\n       END PROGRAM LAST-CHAIR.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19803,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LAST-CHAIR.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9999.\n       01 RESULT      PIC 9999.\n       PROCEDURE DIVISION USING N RESULT.\n      * The first chair is always 1, the second is always N,\n      * and no one wants to be N-1 because there's a person\n      * at N and N-1 is absolutely not close to exit.\n       COMPUTE RESULT = N - 1.\n       END PROGRAM LAST-CHAIR.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19804,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LAST-CHAIR.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9999.\n       01 RESULT      PIC 9999.\n       PROCEDURE DIVISION USING N RESULT.\n           SUBTRACT 1 FROM N GIVING RESULT.\n       END PROGRAM LAST-CHAIR.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19805,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LAST-CHAIR.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9999.\n       01 RESULT      PIC 9999.\n       PROCEDURE DIVISION USING N RESULT.\n       COMPUTE RESULT = N - 1 .\n       END PROGRAM LAST-CHAIR.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19806,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       last-chair.\n       compute RESULT = N - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19807,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       LAST-CHAIR.\n       subtract 1 from n giving result\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19808,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       LAST-CHAIR.\n            COMPUTE RESULT = N - 1\n            \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19809,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       LAST-CHAIR.\n        COMPUTE RESULT = N - 1.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19810,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n      * create LAST-CHAIR\n        LAST-CHAIR.\n          DISPLAY 'N: ' N.\n      \n          MOVE 9 TO RESULT.\n          COMPUTE RESULT = N - 1.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19811,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       LAST-CHAIR.\n         SUBTRACT 1 FROM N GIVING RESULT","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19812,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       LAST-CHAIR.\n            SUBTRACT 1 FROM N GIVING RESULT\n      *  : COMPUTE RESULT = N-1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"542f3d5fd002f86efc00081a":[{"id":19813,"user_id":421,"body":"       identification division.\n       program-id. prime-factors.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       working-storage section.\n       01  i               pic 9(8).\n       linkage section.\n       01  n               pic 9(8).\n       01  result.\n           05 res-length   pic 99.\n           05 xs           pic 9(8) occurs 0 to 20 times \n                                     depending on res-length.\n       procedure division using n result.\n           initialize res-length\n           move 2 to i\n           perform until n = 1\n               perform until function rem(n, i) <> 0\n                   divide n by i giving n\n                   add 1 to res-length\n                   move i to xs(res-length)\n               end-perform\n               add 1 to i\n           end-perform.\n       end program prime-factors.\n      \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19814,"user_id":null,"body":"       identification division.\n       program-id. prime-factors.\n       data division.\n       local-storage section.\n       01  i               pic 9(8).\n      \n       linkage section.\n       01  n               pic 9(8).\n       01  result.\n           05 res-length   pic 99.\n           05 xs           pic 9(8) occurs 0 to 20 times \n                                     depending on res-length.\n       procedure division using n result.\n         perform varying res-length from 1 until n = 1\n           perform varying i from 2 until function mod(n, i) = 0\n             continue\n           end-perform\n           set xs(res-length) to i\n           divide i into n\n         end-perform\n         subtract 1 from res-length.\n       end program prime-factors.\n      \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19815,"user_id":53,"body":"       identification division.\n       program-id. prime-factors.\n       data division.\n       local-storage section.\n       01  n               pic 9(8).\n       01  i               pic 9(8).\n       linkage section.\n       01  m               pic 9(8).\n       01  out.\n           05 sz           pic 99.\n           05 xs           pic 9(8) occurs 0 to 20 times \n                                    depending on sz\n                                    indexed by j.\n       procedure division using m out.\n          move m to n\n          move 1 to j\n          perform varying i from 2 until i ** 2 > n\n            perform until function rem(n, i) <> 0\n              move i to xs(j)\n              add 1 to j\n              compute n = function integer (n \/ i)\n            end-perform\n          end-perform\n          if n > 1 then\n            move n to xs(j)\n            add 1 to j\n          end-if\n          compute sz = j - 1\n          goback.\n       end program prime-factors.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19816,"user_id":168,"body":"       identification division.\n       program-id. prime-factors.\n       data division.\n       working-storage section.\n       01  d               pic 9(5).\n      \n       linkage section.\n       01  n               pic 9(8).\n       01  result.\n           05 res-length   pic 99.\n           05 xs           pic 9(8) occurs 0 to 20 times \n                                     depending on res-length.\n       procedure division using n result.\n           move 0 to res-length\n           perform varying d from 2 until d * d > n\n              perform until function mod(n, d) <> 0\n                  add 1 to res-length\n                  move d to xs(res-length)\n                  divide d into n\n              end-perform\n           end-perform\n           if n > 1\n              add 1 to res-length\n              move n to xs(res-length)\n           end-if\n           goback.\n       end program prime-factors.\n      \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19817,"user_id":50,"body":"       identification division.\n       program-id. prime-factors.\n       data division.\n       local-storage section.\n       01  p              pic 9(8).\n       01  m              pic 9(8).\n      \n       linkage section.\n       01  n               pic 9(8).\n       01  result.\n           05 res-length   pic 99.\n           05 xs           pic 9(8) occurs 0 to 20 times \n                                     depending on res-length.\n       procedure division using n result.\n           if n < 2 then goback end-if\n           if n < 4\n                  move 1 to res-length\n                  move n to xs(1)\n                  goback\n           end-if\n           move n to m\n           move 2 to p\n           perform until n = 1 and p * p > m\n                perform until function rem(n, p) <> 0\n                    add 1 to res-length\n                    move p to xs(res-length)\n                    divide p into n\n               end-perform\n               if p > 2 then add 2 to p\n               else add 1 to p end-if\n           end-perform\n      \n           if n <> 1\n              add 1 to res-length\n              move n to xs(res-length)\n           end-if\n           goback.\n       end program prime-factors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"543abbc35f0461d28f000c11":[{"id":19818,"user_id":421,"body":"       identification division.\n       program-id. house-of-cards.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01 floors      pic s9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using floors result.\n           SET result TO -1\n           IF floors > 0 THEN\n               COMPUTE result = (floors + 1) * (3 * floors + 4) \/ 2\n           END-IF.\n       end program house-of-cards.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19819,"user_id":168,"body":"       identification division.\n       program-id. house-of-cards.\n      \n       data division.\n      \n       linkage section.\n       01 floors      pic s9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using floors result.\n          if floors > 0\n            compute result = (floors + 1) * (3 * floors + 4) \/ 2\n          else\n            compute result = -1\n          end-if.\n       end program house-of-cards.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19820,"user_id":53,"body":"       identification division.\n       program-id. house-of-cards.\n      \n       data division.\n      \n       linkage section.\n       01 n         pic s9(8).\n       01 m         pic s9(20) sign leading.\n       procedure division using n m.\n          move -1 to m\n          if n >= 1\n              add 1 to n\n              compute m = n * (3 * n + 1) \/ 2\n          end-if\n          goback.\n       end program house-of-cards.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19821,"user_id":50,"body":"       identification division.\n       program-id. house-of-cards.\n      \n       data division.\n      \n       linkage section.\n       01 floors      pic s9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using floors result.\n      \n          if floors < 1\n              move -1 to result\n          else\n              add 1 to floors\n              compute result = floors * (3 * floors + 1) \/ 2\n          end-if\n      \n          goback.\n       end program house-of-cards.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54466996990c921f90000d61":[{"id":19822,"user_id":421,"body":"       identification division.\n       program-id. IsMonotone.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  heights.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 99 times \n                                      depending on arr-length indexed i.\n       01  result            pic 9.\n      \n       procedure division using heights result.\n           move 1 to result\n           perform varying i from 2 by 1 until i > arr-length\n               if xs(i) < xs(i - 1) then\n                   move 0 to result\n               end-if\n           end-perform.\n       end program IsMonotone.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19823,"user_id":168,"body":"       identification division.\n       program-id. IsMonotone.\n       data division.\n      \n       linkage section.\n       01  heights.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 99 times \n                                      depending on arr-length indexed i.\n       01  result            pic 9.\n          88 monotone value 1 when set to false 0.\n      \n       procedure division using heights result.\n          perform varying i from 2 until i > arr-length\n              if xs(i) < xs(i - 1)\n                  set monotone to false\n                  goback\n              end-if\n          end-perform\n          set monotone to true\n          goback.\n       end program IsMonotone.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19824,"user_id":53,"body":"       identification division.\n       program-id. IsMonotone.\n       data division.\n      \n       linkage section.\n       01  heights.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 99 times \n                                       depending on arr-length\n                                       indexed i.\n       01  r                 pic 9.\n      \n       procedure division using heights r.\n          move 0 to r\n          perform varying i from 2 until i > arr-length\n              if xs(i - 1) > xs(i) then goback end-if\n          end-perform\n          move 1 to r\n          goback.\n       end program IsMonotone.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19825,"user_id":50,"body":"       identification division.\n       program-id. IsMonotone.\n       data division.\n      \n       linkage section.\n       01  heights.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 99 times \n                                       depending on arr-length\n                                       indexed i.\n       01  result            pic 9.\n      \n       procedure division using heights result.\n          move 0 to result\n          perform varying i from 2 until i > arr-length\n              if xs(i - 1) > xs(i) then goback, end-if\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program IsMonotone.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"544675c6f971f7399a000e79":[{"id":19826,"user_id":421,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR RESULT.\n           MOVE INPUT-VAR TO RESULT.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19827,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 a    PIC X(06).\n       01 r       PIC S9(06).\n       PROCEDURE DIVISION USING a r.\n            move a to r\n           GOBACK.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19828,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR RESULT.\n           move input-var to result\n           GOBACK.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19829,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n      \n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n      * good luck :)\n       move input-var to result\n           GOBACK.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19830,"user_id":76,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 S         PIC X(06).\n       01 RES       PIC S9(06).\n       PROCEDURE DIVISION USING S RES.\n         MOVE S TO RES.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19831,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n                  COMPUTE RESULT EQUAL FUNCTION NUMVAL(INPUT-VAR).\n      \n           GOBACK.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19832,"user_id":527,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n           MOVE INPUT-VAR TO RESULT.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19833,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n      * good luck :)\n           MOVE INPUT-VAR TO RESULT.\n      \n           GOBACK.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19834,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n      \n           compute RESULT = FUNCTION numval(INPUT-VAR)\n      \n           GOBACK.\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19835,"user_id":1277,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. string-to-number.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-VAR    PIC X(06).\n       01 RESULT       PIC S9(06).\n       PROCEDURE DIVISION USING INPUT-VAR\n                                RESULT.\n           MOVE INPUT-VAR TO RESULT\n           .\n       END PROGRAM string-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54471405a58191b95900042f":[{"id":19836,"user_id":53,"body":"       identification division.\n       program-id. CountDivisors.\n       data division.\n       linkage section.\n       01  a           pic 9(4).\n       01  b           pic 9(3).\n       01  result.\n           05  len     pic 9(4).\n           05  pairs   occurs 1000 depending len indexed i.\n               07 fst  pic 9(4).\n               07 snd  pic 9(4).\n       procedure division using a b result.\n          initialize result\n          move b to len\n          perform varying i from 1 until i > b\n            move i to fst(i)\n            divide i into a giving snd(i)\n          end-perform\n          goback.\n       end program CountDivisors.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19837,"user_id":50,"body":"       identification division.\n       program-id. CountDivisors.\n      \n       data division.\n      \n       linkage section.\n       01  a           pic 9(4).\n       01  b           pic 9(3).\n       01  result.\n           05  len     pic 9(4).\n           05  pairs   occurs 1000 depending len indexed i.\n               07 fst  pic 9(4).\n               07 snd  pic 9(4).\n      \n       procedure division using a b result.\n      \n          initialize result\n          move b to len\n          perform varying i from 1 until i > b\n            move i to fst(i)\n            compute snd(i) = a \/ i\n          end-perform\n      \n          goback.\n       end program CountDivisors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54554846126a002d5b000854":[{"id":19838,"user_id":421,"body":"       identification division.\n       program-id. buy.\n       data division.\n       author. \"ejini\u6218\u795e\".     \n       linkage section.\n       01  x                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 100 times \n                                      depending on arr-length \n                                      indexed i j.\n       01  result.\n           05 a              pic 9(3).\n           05 b              pic 9(3).\n      \n       procedure division using x arr result.\n           \n           perform varying i from 1 by 1 until i > arr-length                   \n                   after j from i by 1 until j > arr-length\n               if j > i and xs(i) + xs(j) = x then\n                   move i to a\n                   move j to b\n                   goback\n               end-if\n           end-perform.\n       end program buy.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19839,"user_id":168,"body":"       identification division.\n       program-id. buy.\n       data division.\n      \n       linkage section.\n       01  x                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 100 times \n                                      depending on arr-length \n                                      indexed by i j.\n       01  result.\n           05 a              pic 9(3).\n           05 b              pic 9(3).\n      \n       procedure division using x arr result.\n           perform varying i from 1 until i >= arr-length\n             after j from function abs(i + 1) until j > arr-length\n               if xs(i) + xs(j) = x\n                    move i to a\n                    move j to b\n                    goback\n               end-if\n           end-perform.\n       end program buy.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19840,"user_id":null,"body":"       identification division.\n       program-id. buy.\n       data division.\n      \n       linkage section.\n       01  x                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 100 times \n                                      depending on arr-length.\n       01  result.\n           05 a              pic 9(3).\n           05 b              pic 9(3).\n      \n       procedure division using x arr result.\n         perform varying a from 1 until a > arr-length\n           perform varying b from a until b > arr-length\n             if a <> b and xs(a) + xs(b) = x then\n               goback\n             end-if\n           end-perform\n         end-perform\n         set a to 0\n         set b to 0.\n       end program buy.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19841,"user_id":53,"body":"       identification division.\n       program-id. buy.\n       data division.\n       linkage section.\n       01  x                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 100 times \n                             depending on arr-length indexed i j k.\n       01  result.\n           05 a              pic 9(3).\n           05 b              pic 9(3).\n       procedure division using x arr result.\n           move 0 to a b\n           perform varying i from 1 until i >= arr-length\n             if xs(i) < x and xs(i) > 0 then\n               compute k = i + 1    \n               perform varying j from k until j > arr-length\n                  if xs(i) + xs(j) = x\n                  move i to a\n                  move j to b\n                  goback\n                  end-if\n               end-perform\n             end-if\n           end-perform\n           goback.\n       end program buy.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19842,"user_id":50,"body":"       identification division.\n       program-id. buy.\n       data division.\n      \n       linkage section.\n       01  x                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 100 times \n                             depending on arr-length indexed i j k.\n       01  result.\n           05 a              pic 9(3).\n           05 b              pic 9(3).\n      \n       procedure division using x arr result.\n      \n           move 0 to a b\n           perform varying i from 1 until i >= arr-length\n             compute k = i + 1    \n             perform varying j from k until j > arr-length\n                if xs(i) + xs(j) = x\n                move i to a\n                move j to b\n                goback\n                end-if\n             end-perform\n           end-perform\n              \n           goback.\n       end program buy.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54557d61126a00423b000a45":[{"id":19843,"user_id":50,"body":"       identification division.\n       program-id. ReverseLonger.\n       data division.\n       local-storage section.\n       01  tmp pic x(27).\n      \n       linkage section.\n       01  a.\n           05 a-length   pic 9(2).\n           05 a-chars.\n              07 a-char  pic a \n                 occurs 0 to 25 times depending on a-length.\n       01  b.\n           05 b-length   pic 9(2).\n           05 b-chars.\n              07 b-char  pic a\n                 occurs 0 to 25 times depending on b-length.\n       01  result.\n           05 res-length pic 9(2).\n           05 chars.\n              07 res     pic a\n                 occurs 0 to 75 times depending on res-length.\n     \n       procedure division using a b result.\n      \n          if a-length >= b-length\n             move b to tmp\n             move a to b\n             move tmp to a\n          end-if\n      \n          compute res-length = 2 * a-length + b-length\n          move a-chars to chars(1:1 + a-length)\n          move function reverse(b-chars)\n                to chars(1 + a-length:)\n          move a-chars to chars(1 + a-length + b-length:)\n      \n          goback.\n       end program ReverseLonger.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19844,"user_id":53,"body":"       identification division.\n       program-id. ReverseLonger.\n       data division.\n       local-storage section.\n       01  t pic x(27).\n       linkage section.\n       01  a-arr.\n           05 h   pic 9(2).\n           05 a.\n              07 a-xs  pic a \n                 occurs 0 to 25 times depending on h.\n       01  b-arr.\n           05 w   pic 9(2).\n           05 b.\n              07 b-xs  pic a\n                 occurs 0 to 25 times depending on w.\n       01  result.\n           05 n pic 9(2).\n           05 xs.\n              07 res     pic a\n                 occurs 0 to 75 times depending on n.\n       procedure division using a-arr b-arr result.\n          initialize result\n          if h >= w then\n             move b-arr to t, move a-arr to b-arr, move t to a-arr\n          end-if\n          compute n = 2 * h + w\n          move a to xs(1:1 + h)\n          move function reverse(b) to xs(1 + h:)\n          move a to xs(1 + h + w:)\n          goback.\n       end program ReverseLonger.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"545af3d185166a3dec001190":[{"id":19845,"user_id":50,"body":"       identification division.\n       program-id. EachCons.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic 9(2) occurs 0 to 10 times \n                                     depending on arrLength.\n       01  n                pic 9(2).\n       01  result.\n           05  resLength    pic 9(2).\n           05  res          occurs 0 to 10 times \n                            depending on resLength.\n               07 subSet    pic 9(2) occurs 10 times.\n      \n       procedure division using arr n result.\n      \n          set reslength to 0\n          perform function max(0, arrLength - n + 1) times\n              set resLength up by 1\n              initialize res(resLength)\n              string arr(3 + 2 * (resLength - 1): 2 * n)\n              into res(resLength)\n          end-perform\n      \n          display res(2)\n          goback.\n       end program EachCons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19846,"user_id":168,"body":"       identification division.\n       program-id. EachCons.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic 9(2) occurs 0 to 10 times \n                                depending on arrLength indexed i, j.\n       01  n                pic 9(2).\n       01  result.\n           05  resLength    pic 9(2).\n           05  res          occurs 0 to 10 times \n                            depending on resLength.\n               07 subSet    pic 9(2) occurs 10 times.\n      \n       procedure division using arr n result.\n          initialize result\n          compute resLength = function max(0, arrLength - n + 1)\n          perform varying i from 1 until i > resLength\n                    after j from 1 until j > n\n              move xs(i + j - 1) to subSet(i, j)\n          end-perform.\n       end program EachCons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19847,"user_id":null,"body":"       identification division.\n       program-id. EachCons.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic 9(2) occurs 0 to 10 times \n                                     depending on arrLength.\n       01  n                pic 9(2).\n       01  result.\n           05  resLength    pic 9(2).\n           05  res          occurs 0 to 10 times \n                            depending on resLength.\n               07 subSet    pic 9(2) occurs 10 times.\n      \n       procedure division using arr n result.      \n          initialize resLength\n          perform function max(0, arrLength - n + 1) times\n             set resLength up by 1\n             initialize res(resLength)\n             string arr(1 + 2 * resLength : n * 2) into res(resLength)\n          end-perform\n          goback.\n       end program EachCons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19848,"user_id":null,"body":"       identification division.\n       program-id. EachCons.\n       data division.\n       working-storage section.\n       77 i            usage is index.\n       77 j            usage is index.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic 9(2) occurs 0 to 10 times \n                                     depending on arrLength.\n       01  n                pic 9(2).\n       01  result.\n           05  resLength    pic 9(2).\n           05  res          occurs 0 to 10 times \n                            depending on resLength.\n               07 subSet    pic 9(2) occurs 10 times.\n      \n       procedure division using arr n result.\n      *   Due to language limitations, a table cannot contain variable-size rows.\n      *   All `subSet` in `result` are declared with the maximum possible value for `n`.\n      *   You must fill correctly the `n` first values of each subSet and fill the rest with zeros (the default value)      \n          initialize result\n          set resLength to zero\n          perform varying i from 1 until i > arrLength - n + 1\n             set resLength up by 1\n             perform varying j from 1 until j > n\n                move xs(i + j - 1) to subSet in res(i, j)\n             end-perform\n          end-perform\n          goback.\n       end program EachCons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19849,"user_id":53,"body":"       identification division.\n       program-id. EachCons.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(2).\n           05 xs            pic 9(2) occurs 0 to 10 times \n                                     depending on arr-len.\n       01  n                pic 9(2).\n       01  result.\n           05  res-len      pic 9(2).\n           05  res          occurs 0 to 10 times \n                            depending on res-len.\n               07 subSet    pic 9(2) occurs 10 times.\n       procedure division using arr n result.\n          initialize result\n          perform function max(0, arr-len - n + 1) times\n            add 1 to res-len\n            initialize res(res-len)\n            string arr(3 + 2 * (res-len - 1): 2 * n) into res(res-len)\n          end-perform\n          goback.\n       end program EachCons.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"545afd0761aa4c3055001386":[{"id":19850,"user_id":421,"body":"       identification division.\n       program-id. Take.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(3)  occurs 0 to 100 times \n                                      depending on arrLength\n                                      indexed by i.\n       01  n                pic 9(3).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(3) occurs 0 to 100 times \n                                     depending on resLength.\n      \n       procedure division using arr n result.\n           initialize resLength\n           perform varying i from 1 by 1 until i > n or i > arrLength\n               add 1 to resLength\n               move xs(i) to res(i)\n           end-perform.\n       end program Take.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19851,"user_id":null,"body":"       identification division.\n       program-id. Take.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs.\n              10 xs-tab     pic 9(3)  occurs 0 to 100 times \n                                      depending on arrLength.\n       01  n                pic 9(3).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res.\n              10 res-tab    pic 9(3) occurs 0 to 100 times \n                                     depending on resLength.\n      \n       procedure division using arr n result.\n          compute resLength = function min(n, arrLength)\n          move xs to res\n          goback.\n       end program Take.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19852,"user_id":53,"body":"       identification division.\n       program-id. Take.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(3).\n           05 xs            pic 9(3) occurs 0 to 100 times \n                                     depending on arr-len\n                                     indexed by i.\n       01  n                pic 9(3).\n       01  result.\n           05 res-len       pic 9(3).\n           05 res           pic 9(3) occurs 0 to 100 times \n                                     depending on res-len.\n       procedure division using arr n result.\n          initialize result\n          move function min(n, arr-len) to res-len\n          perform varying i from 1 until i > n\n            move xs(i) to res(i)\n          end-perform\n          goback.\n       end program Take.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19853,"user_id":50,"body":"       identification division.\n       program-id. Take.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(3)  occurs 0 to 100 times \n                                      depending on arrLength.\n       01  n                pic 9(3).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(3) occurs 0 to 100 times \n                                     depending on resLength.\n      \n       procedure division using arr n result.\n      \n          move function min(n, arrLength) to resLength\n          move arr(4:3*n) to result(4:)\n      \n          goback.\n       end program Take.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5467e4d82edf8bbf40000155":[{"id":19854,"user_id":50,"body":"       identification division.\n       program-id. DescendingOrder.\n      \n       data division.\n       local-storage section.\n       01  z        pic z(10)9.\n      \n       linkage section.\n       01  n           pic 9(10).\n       01  result      pic 9(10).\n       01  r redefines result.\n           03  s occurs 10 times.\n               05 d pic 9.\n      \n       procedure division using n result.\n      \n          move n to z\n          move function trim(z) to r\n          sort s on descending key d\n          move r to z\n          move function trim(z) to result\n      \n          goback.\n       end program DescendingOrder.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19855,"user_id":null,"body":"       identification division.\n       program-id. DescendingOrder.\n      \n       data division.\n      \n       WORKING-STORAGE SECTION.\n       01  H           pic 9(02).\n       01  I           pic 9(02).\n       01  J           pic 9(02).\n       01  L           pic 9(02).\n       01  TEMP        pic 9(01).\n      \n       linkage section.\n       01  n           pic 9(10).\n       01  result      pic 9(10).\n      \n       procedure division using n result.\n      \n          initialize result\n                     L\n      \n          INSPECT n TALLYING L FOR LEADING \"0\"\n          COMPUTE L = 10 - L\n      \n          PERFORM VARYING I\n                     FROM 1 BY 1\n                    UNTIL I >= L\n      \n             PERFORM VARYING J\n                        FROM 10 BY -1\n                       UNTIL J <= 11 - L\n      \n                COMPUTE H = J - 1\n      \n                IF n(J:1) > n(H:1)\n      \n                   MOVE n(J:1) TO TEMP\n                   MOVE n(H:1) TO n(J:1)\n                   MOVE TEMP   TO n(H:1)\n      \n                END-IF\n      \n             END-PERFORM\n      \n          END-PERFORM\n      \n          MOVE n TO result\n      \n          goback.\n      \n       end program DescendingOrder.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"546d5028ddbcbd4b8d001254":[{"id":19856,"user_id":168,"body":"       identification division.\n       program-id. partitions.\n\n       data division.\n       working-storage section.\n       01 vals.\n          05 xs pic 9(10) occurs 101 times indexed by i j.\n       linkage section.\n       01  n           pic 9(3).\n       01  result      pic 9(10).\n       procedure division using n result.\n           if xs(1) = 0\n             move 1 to xs(1)\n             perform varying i from 1 by 1 until i > 100\n               perform varying j from i by 1 until j > 100\n                 add xs(j - i + 1) to xs(j + 1)\n               end-perform\n             end-perform\n           end-if\n           move xs(n + 1) to result.\n       end program partitions.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19857,"user_id":53,"body":"       identification division.\n       program-id. partitions.\n\n       data division.\n       local-storage section.\n       01 m            pic 9(3).\n       01 parts .\n          05 xs pic 9(10) occurs 101 times indexed by i j.\n       linkage section.\n       01  n           pic 9(3).\n       01  result      pic 9(10).\n       procedure division using n result.\n           compute xs(1) = 1\n           perform varying i from 1 by 1 until i > n\n              compute xs(i + 1) = 0\n           end-perform\n           perform varying i from 1 by 1 until i > n\n              move 0 to m\n              perform varying j from i by 1 until j > n\n                 add xs(m + 1) to xs(j + 1)\n                 compute m = m + 1\n              end-perform\n           end-perform\n           move xs(n + 1) to result.\n       end program partitions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19858,"user_id":50,"body":"       identification division.\n       program-id. partitions.\n       author. monadius.\n\n       data division.\n       linkage section.\n       01  n           pic 9(3).\n       01  result      pic 9(10).\n\n       procedure division using n result.\n           call 'partitions-nk' using by content n n by reference result\n           goback.\n       end program partitions.\n\n       identification division.\n       program-id. partitions-nk recursive.\n       data division.\n       working-storage section.\n       01  cache.\n           05 filler occurs 101 times.\n               10 cache-val pic 9(10) occurs 101 times.\n       local-storage section.\n       01  a           pic 9(3).\n       01  b           pic 9(3).\n       01  res         pic 9(10).\n       linkage section.\n       01  n           pic 9(3).\n       01  m           pic 9(3).\n       01  result      pic 9(10).\n\n       procedure division using n m result.\n           if cache-val(n + 1, m + 1) is not zero\n               compute result = cache-val(n + 1, m + 1)\n               goback\n           end-if\n           if n = 0\n               compute result = 1\n               goback\n           end-if\n           compute result = 0\n           if m >= 1\n               compute a = n\n               compute b = m - 1\n               call 'partitions-nk' using a b result\n               if n >= m\n                   compute a = n - m\n                   compute b = m\n                   call 'partitions-nk' using a b res\n                   add res to result\n               end-if\n           end-if\n           compute cache-val(n + 1, m + 1) = result\n           .\n\n       end program partitions-nk.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19859,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. partitions.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  PENTA                   PIC 9(09) BINARY.\n       01  I                       PIC 9(04) BINARY.\n       01  J                       PIC 9(04) BINARY.\n       01  T-PART.\n           05  E-PART  OCCURS 101  PIC 9(09) BINARY.\n       LINKAGE SECTION.\n       01  N                       PIC 9(03).\n       01  RESULT                  PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE T-PART\n           MOVE 1  TO E-PART(1)\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n               PERFORM VARYING J FROM 1 BY 1 UNTIL J > N\n                   COMPUTE PENTA = (J * (3 * J - 1)) \/ 2\n                   PERFORM CALC-PARTITIONS\n                   COMPUTE PENTA = (J * (3 * J + 1)) \/ 2\n                   PERFORM CALC-PARTITIONS\n               END-PERFORM\n           END-PERFORM\n           MOVE E-PART(N + 1)  TO RESULT.\n           GOBACK.\n      \n       CALC-PARTITIONS.\n           IF  PENTA NOT > I\n               IF  FUNCTION REM(J, 2) = 0\n                   COMPUTE E-PART(I + 1) = E-PART(I + 1) \n                                         - E-PART(I + 1 - PENTA)\n               ELSE\n                   COMPUTE E-PART(I + 1) = E-PART(I + 1) \n                                         + E-PART(I + 1 - PENTA)\n               END-IF\n           END-IF.\n           EXIT.\n       END PROGRAM partitions.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19860,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       LOCAL-STORAGE SECTION.\n       01 vals.\n          05 xs pic 9(8) occurs 95 times indexed by i j.\n       PROCEDURE DIVISION.\n      * shameless copy of Coboldius' revolutionary solution\n       PARTITIONS SECTION.\n           if xs(1) = 0 then\n             move 1 to xs(1)\n             perform varying i from 1 by 1 until i > 94\n               perform varying j from i by 1 until j > 94\n                 add xs(j - i + 1) to xs(j + 1)\n               end-perform\n             end-perform\n           end-if\n           move xs(n + 1) to result\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19861,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       PARTITIONS SECTION.\n         Evaluate true\n              when n < 4\n                MOVE N TO RESULT\n              WHEN N = 4\n                  MOVE 5 TO  RESULT\n              WHEN N = 5\n                  MOVE 7 TO  RESULT\n              WHEN N = 6\n                  MOVE 11 TO  RESULT\n              WHEN N = 7\n                  MOVE 15 TO  RESULT\n              WHEN N = 8\n                  MOVE 22 TO  RESULT\n              WHEN N = 9\n                  MOVE 30 TO  RESULT\n              WHEN N = 10\n                  MOVE 42 TO  RESULT\n              WHEN N = 11\n                  MOVE 56 TO  RESULT\n              WHEN N = 12\n                  MOVE 77 TO  RESULT\n              WHEN N = 13\n                  MOVE 101 TO  RESULT\n              WHEN N = 14\n                  MOVE 135 TO  RESULT\n              WHEN N = 15\n                  MOVE 176 TO  RESULT\n              WHEN N = 16\n                  MOVE 231 TO  RESULT\n              WHEN N = 17\n                  MOVE 297 TO  RESULT\n              WHEN N = 18\n                  MOVE 385 TO  RESULT\n              WHEN N = 19\n                  MOVE 490 TO  RESULT\n              WHEN N = 20\n                  MOVE 627 TO  RESULT\n              WHEN N = 21\n                  MOVE 792 TO  RESULT\n              WHEN N = 22\n                  MOVE 1002 TO  RESULT\n              WHEN N = 23\n                  MOVE 1255 TO  RESULT\n              WHEN N = 24\n                  MOVE 1575 TO  RESULT\n              WHEN N = 25\n                  MOVE 1958 TO  RESULT\n              WHEN N = 26\n                  MOVE 2436 TO  RESULT\n              WHEN N = 27\n                  MOVE 3010 TO  RESULT\n              WHEN N = 28\n                  MOVE 3718 TO  RESULT\n              WHEN N = 29\n                  MOVE 4565 TO  RESULT\n              WHEN N = 30\n                  MOVE 5604 TO  RESULT\n              WHEN N = 31\n                  MOVE 6842 TO  RESULT\n              WHEN N = 32\n                  MOVE 8349 TO  RESULT\n              WHEN N = 33\n                  MOVE 10143 TO  RESULT\n              WHEN N = 34\n                  MOVE 12310 TO  RESULT\n              WHEN N = 35\n                  MOVE 14883 TO  RESULT\n              WHEN N = 36\n                  MOVE 17977 TO  RESULT\n              WHEN N = 37\n                  MOVE 21637 TO  RESULT\n              WHEN N = 38\n                  MOVE 26015 TO  RESULT\n              WHEN N = 39\n                  MOVE 31185 TO  RESULT\n              WHEN N = 40\n                  MOVE 37338 TO  RESULT\n              WHEN N = 41\n                  MOVE 44583 TO  RESULT\n              WHEN N = 42\n                  MOVE 53174 TO  RESULT\n              WHEN N = 43\n                  MOVE 63261 TO  RESULT\n              WHEN N = 44\n                  MOVE 75175 TO  RESULT\n              WHEN N = 45\n                  MOVE 89134 TO  RESULT\n              WHEN N = 46\n                  MOVE 105558 TO  RESULT\n              WHEN N = 47\n                  MOVE 124754 TO  RESULT\n              WHEN N = 48\n                  MOVE 147273 TO  RESULT\n              WHEN N = 49\n                  MOVE 173525 TO  RESULT\n              WHEN N = 50\n                  MOVE 204226 TO  RESULT\n              WHEN N = 51\n                  MOVE 239943 TO  RESULT\n              WHEN N = 52\n                  MOVE 281589 TO  RESULT\n              WHEN N = 53\n                  MOVE 329931 TO  RESULT\n              WHEN N = 54\n                  MOVE 386155 TO  RESULT\n              WHEN N = 55\n                  MOVE 451276 TO  RESULT\n              WHEN N = 56\n                  MOVE 526823 TO  RESULT\n              WHEN N = 57\n                  MOVE 614154 TO  RESULT\n              WHEN N = 58\n                  MOVE 715220 TO  RESULT\n              WHEN N = 59\n                  MOVE 831820 TO  RESULT\n              WHEN N = 60\n                  MOVE 966467 TO  RESULT\n              WHEN N = 61\n                  MOVE 1121505 TO  RESULT\n              WHEN N = 62\n                  MOVE 1300156 TO  RESULT\n              WHEN N = 63\n                  MOVE 1505499 TO  RESULT\n              WHEN N = 64\n                  MOVE 1741630 TO  RESULT\n              WHEN N = 65\n                  MOVE 2012558 TO  RESULT\n              WHEN N = 66\n                  MOVE 2323520 TO  RESULT\n              WHEN N = 67\n                  MOVE 2679689 TO  RESULT\n              WHEN N = 68\n                  MOVE 3087735 TO  RESULT\n              WHEN N = 69\n                  MOVE 3554345 TO  RESULT\n              WHEN N = 70\n                  MOVE 4087968 TO  RESULT\n              WHEN N = 71\n                  MOVE 4697205 TO  RESULT\n              WHEN N = 72\n                  MOVE 5392783 TO  RESULT\n              WHEN N = 73\n                  MOVE 6185689 TO  RESULT\n              WHEN N = 74\n                  MOVE 7089500 TO  RESULT\n              WHEN N = 75\n                  MOVE 8118264 TO  RESULT\n              WHEN N = 76\n                  MOVE 9289091 TO  RESULT\n              WHEN N = 77\n                  MOVE 10619863 TO  RESULT\n              WHEN N = 78\n                  MOVE 12132164 TO  RESULT\n              WHEN N = 79\n                  MOVE 13848650 TO  RESULT\n              WHEN N = 80\n                  MOVE 15796476 TO  RESULT\n              WHEN N = 81\n                  MOVE 18004327 TO  RESULT\n              WHEN N = 82\n                  MOVE 20506255 TO  RESULT\n              WHEN N = 83\n                  MOVE 23338469 TO  RESULT\n              WHEN N = 84\n                  MOVE 26543660 TO  RESULT\n              WHEN N = 85\n                  MOVE 30167357 TO  RESULT\n              WHEN N = 86\n                  MOVE 34262962 TO  RESULT\n              WHEN N = 87\n                  MOVE 38887673 TO  RESULT\n              WHEN N = 88\n                  MOVE 44108109 TO  RESULT\n              WHEN N = 89\n                  MOVE 49995925 TO  RESULT\n              WHEN N = 90\n                  MOVE 56634173 TO  RESULT\n              WHEN N = 91\n                  MOVE 64112359 TO  RESULT\n              WHEN N = 92\n                  MOVE 72533807 TO  RESULT\n              WHEN N = 93\n                  MOVE 82010177 TO  RESULT\n              WHEN N = 94\n                  MOVE 92669720 TO  RESULT\n            END-EVALUATE\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19862,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       01 vals.\n          05 xs pic 9(8) occurs 101 times indexed by i j.\n       PROCEDURE DIVISION.\n       PARTITIONS SECTION.\n           if xs(1) = 0 then\n             move 1 to xs(1)\n             perform varying i from 1 by 1 until i > 100\n               perform varying j from i by 1 until j > 100\n                 add xs(j - i + 1) to xs(j + 1)\n               end-perform\n             end-perform\n           end-if\n           move xs(n + 1) to result\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19863,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       PARTITIONS\n       IF N < 4 THEN MOVE N TO RESULT\n       IF N = 4 THEN MOVE 5 TO RESULT\n       IF N = 5 THEN MOVE 7 TO RESULT\n       IF N = 6 THEN MOVE 11 TO RESULT\n       IF N = 7 THEN MOVE 15 TO RESULT\n       IF N = 8 THEN MOVE 22 TO RESULT\n       IF N = 9 THEN MOVE 30 TO RESULT\n       IF N = 10 THEN MOVE 42 TO RESULT\n       IF N = 11 THEN MOVE 56 TO RESULT\n       IF N = 12 THEN MOVE 77 TO RESULT\n       IF N = 13 THEN MOVE 101 TO RESULT\n       IF N = 14 THEN MOVE 135 TO RESULT\n       IF N = 15 THEN MOVE 176 TO RESULT\n       IF N = 16 THEN MOVE 231 TO RESULT\n       IF N = 17 THEN MOVE 297 TO RESULT\n       IF N = 18 THEN MOVE 385 TO RESULT\n       IF N = 19 THEN MOVE 490 TO RESULT\n       IF N = 20 THEN MOVE 627 TO RESULT\n       IF N = 21 THEN MOVE 792 TO RESULT\n       IF N = 22 THEN MOVE 1002 TO RESULT\n       IF N = 23 THEN MOVE 1255 TO RESULT\n       IF N = 24 THEN MOVE 1575 TO RESULT\n       IF N = 25 THEN MOVE 1958 TO RESULT\n       IF N = 26 THEN MOVE 2436 TO RESULT\n       IF N = 27 THEN MOVE 3010 TO RESULT\n       IF N = 28 THEN MOVE 3718 TO RESULT\n       IF N = 29 THEN MOVE 4565 TO RESULT\n       IF N = 30 THEN MOVE 5604 TO RESULT\n       IF N = 31 THEN MOVE 6842 TO RESULT\n       IF N = 32 THEN MOVE 8349 TO RESULT\n       IF N = 33 THEN MOVE 10143 TO RESULT\n       IF N = 34 THEN MOVE 12310 TO RESULT\n       IF N = 35 THEN MOVE 14883 TO RESULT\n       IF N = 36 THEN MOVE 17977 TO RESULT\n       IF N = 37 THEN MOVE 21637 TO RESULT\n       IF N = 38 THEN MOVE 26015 TO RESULT\n       IF N = 39 THEN MOVE 31185 TO RESULT\n       IF N = 40 THEN MOVE 37338 TO RESULT\n       IF N = 41 THEN MOVE 44583 TO RESULT\n       IF N = 42 THEN MOVE 53174 TO RESULT\n       IF N = 43 THEN MOVE 63261 TO RESULT\n       IF N = 44 THEN MOVE 75175 TO RESULT\n       IF N = 45 THEN MOVE 89134 TO RESULT\n       IF N = 46 THEN MOVE 105558 TO RESULT\n       IF N = 47 THEN MOVE 124754 TO RESULT\n       IF N = 48 THEN MOVE 147273 TO RESULT\n       IF N = 49 THEN MOVE 173525 TO RESULT\n       IF N = 50 THEN MOVE 204226 TO RESULT\n       END PROGRAM SOLUTION\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19864,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       PARTITIONS SECTION.\n           If N <= 1\n               MOVE 1 To RESULT\n           ELSE IF N < 4\n               MOVE N To RESULT\n           ELSE IF N = 4\n               MOVE 5 TO RESULT\n           ELSE IF N = 5\n               MOVE 7 TO RESULT\n           ELSE IF N = 6\n               MOVE 11 TO RESULT\n           ELSE IF N = 7\n               MOVE 15 TO RESULT\n           ELSE IF N = 8\n               MOVE 22 TO RESULT\n           ELSE IF N = 9\n               MOVE 30 TO RESULT\n           ELSE IF N = 10\n               MOVE 42 TO RESULT\n           ELSE IF N = 11\n               MOVE 56 TO RESULT\n           ELSE IF N = 12\n               MOVE 77 TO RESULT\n           ELSE IF N = 13\n               MOVE 101 TO RESULT\n           ELSE IF N = 14\n               MOVE 135 TO RESULT\n           ELSE IF N = 15\n               MOVE 176 TO RESULT\n           ELSE IF N = 16\n               MOVE 231 TO RESULT\n           ELSE IF N = 17\n               MOVE 297 TO RESULT\n           ELSE IF N = 18\n               MOVE 385 TO RESULT\n           ELSE IF N = 19\n               MOVE 490 TO RESULT\n           ELSE IF N = 20\n               MOVE 627 TO RESULT\n           ELSE IF N = 21\n               MOVE 792 TO RESULT\n           ELSE IF N = 22\n               MOVE 1002 TO RESULT\n           ELSE IF N = 23\n               MOVE 1255 TO RESULT\n           ELSE IF N = 24\n               MOVE 1575 TO RESULT\n           ELSE IF N = 25\n               MOVE 1958 TO RESULT\n           ELSE IF N = 26\n               MOVE 2436 TO RESULT\n           ELSE IF N = 27\n               MOVE 3010 TO RESULT\n           ELSE IF N = 28\n               MOVE 3718 TO RESULT\n           ELSE IF N = 29\n               MOVE 4565 TO RESULT\n           ELSE IF N = 30\n               MOVE 5604 TO RESULT\n           ELSE IF N = 31\n               MOVE 6842 TO RESULT\n           ELSE IF N = 32\n               MOVE 8349 TO RESULT\n           ELSE IF N = 33\n               MOVE 10143 TO RESULT\n           ELSE IF N = 34\n               MOVE 12310 TO RESULT\n           ELSE IF N = 35\n               MOVE 14883 TO RESULT\n           ELSE IF N = 36\n               MOVE 17977 TO RESULT\n           ELSE IF N = 37\n               MOVE 21637 TO RESULT\n           ELSE IF N = 38\n               MOVE 26015 TO RESULT\n           ELSE IF N = 39\n               MOVE 31185 TO RESULT\n           ELSE IF N = 40\n               MOVE 37338 TO RESULT\n           ELSE IF N = 41\n               MOVE 44583 TO RESULT\n           ELSE IF N = 42\n               MOVE 53174 TO RESULT\n           ELSE IF N = 43\n               MOVE 63261 TO RESULT\n           ELSE IF N = 44\n               MOVE 75175 TO RESULT\n           ELSE IF N = 45\n               MOVE 89134 TO RESULT\n           ELSE IF N = 46\n               MOVE 105558 TO RESULT\n           ELSE IF N = 47\n               MOVE 124754 TO RESULT\n           ELSE IF N = 48\n               MOVE 147273 TO RESULT\n           ELSE IF N = 49\n               MOVE 173525 TO RESULT\n           ELSE IF N = 50\n               MOVE 204226 TO RESULT\n           ELSE IF N = 51\n               MOVE 239943 TO RESULT\n           ELSE IF N = 52\n               MOVE 281589 TO RESULT\n           ELSE IF N = 53\n               MOVE 329931 TO RESULT\n           ELSE IF N = 54\n               MOVE 386155 TO RESULT\n           ELSE IF N = 55\n               MOVE 451276 TO RESULT\n           ELSE IF N = 56\n               MOVE 526823 TO RESULT\n           ELSE IF N = 57\n               MOVE 614154 TO RESULT\n           ELSE IF N = 58\n               MOVE 715220 TO RESULT\n           ELSE IF N = 59\n               MOVE 831820 TO RESULT\n           ELSE IF N = 60\n               MOVE 966467 TO RESULT\n           ELSE IF N = 61\n               MOVE 1121505 TO RESULT\n           ELSE IF N = 62\n               MOVE 1300156 TO RESULT\n           ELSE IF N = 63\n               MOVE 1505499 TO RESULT\n           ELSE IF N = 64\n               MOVE 1741630 TO RESULT\n           ELSE IF N = 65\n               MOVE 2012558 TO RESULT\n           ELSE IF N = 66\n               MOVE 2323520 TO RESULT\n           ELSE IF N = 67\n               MOVE 2679689 TO RESULT\n           ELSE IF N = 68\n               MOVE 3087735 TO RESULT\n           ELSE IF N = 69\n               MOVE 3554345 TO RESULT\n           ELSE IF N = 70\n               MOVE 4087968 TO RESULT\n           ELSE IF N = 71\n               MOVE 4697205 TO RESULT\n           ELSE IF N = 72\n               MOVE 5392783 TO RESULT\n           ELSE IF N = 73\n               MOVE 6185689 TO RESULT\n           ELSE IF N = 74\n               MOVE 7089500 TO RESULT\n           ELSE IF N = 75\n               MOVE 8118264 TO RESULT\n           ELSE IF N = 76\n               MOVE 9289091 TO RESULT\n           ELSE IF N = 77\n               MOVE 10619863 TO RESULT\n           ELSE IF N = 78\n               MOVE 12132164 TO RESULT\n           ELSE IF N = 79\n               MOVE 13848650 TO RESULT\n           ELSE IF N = 80\n               MOVE 15796476 TO RESULT\n           ELSE IF N = 81\n               MOVE 18004327 TO RESULT\n           ELSE IF N = 82\n               MOVE 20506255 TO RESULT\n           ELSE IF N = 83\n               MOVE 23338469 TO RESULT\n           ELSE IF N = 84\n               MOVE 26543660 TO RESULT\n           ELSE IF N = 85\n               MOVE 30167357 TO RESULT\n           ELSE IF N = 86\n               MOVE 34262962 TO RESULT\n           ELSE IF N = 87\n               MOVE 38887673 TO RESULT\n           ELSE IF N = 88\n               MOVE 44108109 TO RESULT\n           ELSE IF N = 89\n               MOVE 49995925 TO RESULT\n           ELSE IF N = 90\n               MOVE 56634173 TO RESULT\n           ELSE IF N = 91\n               MOVE 64112359 TO RESULT\n           ELSE IF N = 92\n               MOVE 72533807 TO RESULT\n           ELSE IF N = 93\n               MOVE 82010177 TO RESULT\n           ELSE IF N = 94\n               MOVE 92669720 TO RESULT\n           ELSE IF N = 95\n               MOVE 104651419 TO RESULT\n           ELSE IF N = 96\n               MOVE 118114304 TO RESULT\n           ELSE IF N = 97\n               MOVE 133230930 TO RESULT\n           ELSE IF N = 98\n               MOVE 150198136 TO RESULT\n           ELSE IF N = 99\n               MOVE 169229875 TO RESULT\n           ELSE\n               MOVE 190569292 TO RESULT\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19865,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       PARTITIONS SECTION.\n           IF N = 1 THEN\n              MOVE 1 TO RESULT\n           ELSE IF N = 2 THEN\n              MOVE 2 TO RESULT\n           ELSE IF N = 3 THEN\n              MOVE 3 TO RESULT\n           ELSE IF N = 5 THEN\n              MOVE 7 TO RESULT\n           ELSE IF N = 10 THEN\n              MOVE 42 TO RESULT\n           ELSE IF N = 25 THEN\n              MOVE 1958 TO RESULT\n           END-IF\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19866,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       PARTITIONS SECTION.\n      * Akar's laziness (got to me)\n           If N <= 1\n               Move 1 To RESULT\n           Else If N < 4\n               MOVE N To RESULT\n           ELSE IF N = 4\n               MOVE 5 TO RESULT\n           ELSE IF N = 5\n               MOVE 7 TO RESULT\n           ELSE IF N = 6\n               MOVE 11 TO RESULT\n           ELSE IF N = 7\n               MOVE 15 TO RESULT\n           ELSE IF N = 8\n               MOVE 22 TO RESULT\n           ELSE IF N = 9\n               MOVE 30 TO RESULT\n           ELSE IF N = 10\n               MOVE 42 TO RESULT\n           ELSE IF N = 11\n               MOVE 56 TO RESULT\n           ELSE IF N = 12\n               MOVE 77 TO RESULT\n           ELSE IF N = 13\n               MOVE 101 TO RESULT\n           ELSE IF N = 14\n               MOVE 135 TO RESULT\n           ELSE IF N = 15\n               MOVE 176 TO RESULT\n           ELSE IF N = 16\n               MOVE 231 TO RESULT\n           ELSE IF N = 17\n               MOVE 297 TO RESULT\n           ELSE IF N = 18\n               MOVE 385 TO RESULT\n           ELSE IF N = 19\n               MOVE 490 TO RESULT\n           ELSE IF N = 20\n               MOVE 627 TO RESULT\n           ELSE IF N = 21\n               MOVE 792 TO RESULT\n           ELSE IF N = 22\n               MOVE 1002 TO RESULT\n           ELSE IF N = 23\n               MOVE 1255 TO RESULT\n           ELSE IF N = 24\n               MOVE 1575 TO RESULT\n           ELSE IF N = 25\n               MOVE 1958 TO RESULT\n           ELSE IF N = 26\n               MOVE 2436 TO RESULT\n           ELSE IF N = 27\n               MOVE 3010 TO RESULT\n           ELSE IF N = 28\n               MOVE 3718 TO RESULT\n           ELSE IF N = 29\n               MOVE 4565 TO RESULT\n           ELSE IF N = 30\n               MOVE 5604 TO RESULT\n           ELSE IF N = 31\n               MOVE 6842 TO RESULT\n           ELSE IF N = 32\n               MOVE 8349 TO RESULT\n           ELSE IF N = 33\n               MOVE 10143 TO RESULT\n           ELSE IF N = 34\n               MOVE 12310 TO RESULT\n           ELSE IF N = 35\n               MOVE 14883 TO RESULT\n           ELSE IF N = 36\n               MOVE 17977 TO RESULT\n           ELSE IF N = 37\n               MOVE 21637 TO RESULT\n           ELSE IF N = 38\n               MOVE 26015 TO RESULT\n           ELSE IF N = 39\n               MOVE 31185 TO RESULT\n           ELSE IF N = 40\n               MOVE 37338 TO RESULT\n           ELSE IF N = 41\n               MOVE 44583 TO RESULT\n           ELSE IF N = 42\n               MOVE 53174 TO RESULT\n           ELSE IF N = 43\n               MOVE 63261 TO RESULT\n           ELSE IF N = 44\n               MOVE 75175 TO RESULT\n           ELSE IF N = 45\n               MOVE 89134 TO RESULT\n           ELSE IF N = 46\n               MOVE 105558 TO RESULT\n           ELSE IF N = 47\n               MOVE 124754 TO RESULT\n           ELSE IF N = 48\n               MOVE 147273 TO RESULT\n           ELSE IF N = 49\n               MOVE 173525 TO RESULT\n           ELSE IF N = 50\n               MOVE 204226 TO RESULT\n           ELSE IF N = 51\n               MOVE 239943 TO RESULT\n           ELSE IF N = 52\n               MOVE 281589 TO RESULT\n           ELSE IF N = 53\n               MOVE 329931 TO RESULT\n           ELSE IF N = 54\n               MOVE 386155 TO RESULT\n           ELSE IF N = 55\n               MOVE 451276 TO RESULT\n           ELSE IF N = 56\n               MOVE 526823 TO RESULT\n           ELSE IF N = 57\n               MOVE 614154 TO RESULT\n           ELSE IF N = 58\n               MOVE 715220 TO RESULT\n           ELSE IF N = 59\n               MOVE 831820 TO RESULT\n           ELSE IF N = 60\n               MOVE 966467 TO RESULT\n           ELSE IF N = 61\n               MOVE 1121505 TO RESULT\n           ELSE IF N = 62\n               MOVE 1300156 TO RESULT\n           ELSE IF N = 63\n               MOVE 1505499 TO RESULT\n           ELSE IF N = 64\n               MOVE 1741630 TO RESULT\n           ELSE IF N = 65\n               MOVE 2012558 TO RESULT\n           ELSE IF N = 66\n               MOVE 2323520 TO RESULT\n           ELSE IF N = 67\n               MOVE 2679689 TO RESULT\n           ELSE IF N = 68\n               MOVE 3087735 TO RESULT\n           ELSE IF N = 69\n               MOVE 3554345 TO RESULT\n           ELSE IF N = 70\n               MOVE 4087968 TO RESULT\n           ELSE IF N = 71\n               MOVE 4697205 TO RESULT\n           ELSE IF N = 72\n               MOVE 5392783 TO RESULT\n           ELSE IF N = 73\n               MOVE 6185689 TO RESULT\n           ELSE IF N = 74\n               MOVE 7089500 TO RESULT\n           ELSE IF N = 75\n               MOVE 8118264 TO RESULT\n           ELSE IF N = 76\n               MOVE 9289091 TO RESULT\n           ELSE IF N = 77\n               MOVE 10619863 TO RESULT\n           ELSE IF N = 78\n               MOVE 12132164 TO RESULT\n           ELSE IF N = 79\n               MOVE 13848650 TO RESULT\n           ELSE IF N = 80\n               MOVE 15796476 TO RESULT\n           ELSE IF N = 81\n               MOVE 18004327 TO RESULT\n           ELSE IF N = 82\n               MOVE 20506255 TO RESULT\n           ELSE IF N = 83\n               MOVE 23338469 TO RESULT\n           ELSE IF N = 84\n               MOVE 26543660 TO RESULT\n           ELSE IF N = 85\n               MOVE 30167357 TO RESULT\n           ELSE IF N = 86\n               MOVE 34262962 TO RESULT\n           ELSE IF N = 87\n               MOVE 38887673 TO RESULT\n           ELSE IF N = 88\n               MOVE 44108109 TO RESULT\n           ELSE IF N = 89\n               MOVE 49995925 TO RESULT\n           ELSE IF N = 90\n               MOVE 56634173 TO RESULT\n           ELSE IF N = 91\n               MOVE 64112359 TO RESULT\n           ELSE IF N = 92\n               MOVE 72533807 TO RESULT\n           ELSE IF N = 93\n               MOVE 82010177 TO RESULT\n           ELSE IF N = 94\n               MOVE 92669720 TO RESULT\n           ELSE IF N = 95\n               MOVE 104651419 TO RESULT\n           ELSE IF N = 96\n               MOVE 118114304 TO RESULT\n           ELSE IF N = 97\n               MOVE 133230930 TO RESULT\n           ELSE IF N = 98\n               MOVE 150198136 TO RESULT\n           ELSE IF N = 99\n               MOVE 169229875 TO RESULT\n           ELSE\n               MOVE 190569292 TO RESULT\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"546dba39fa8da224e8000467":[{"id":19867,"user_id":50,"body":"       identification division.\n       program-id. RunLengthEncoding.\n       data division.\n       working-storage section. \n       01  l      pic 9(3).\n      \n       linkage section.\n       01  s.\n           03  c  pic a occurs 1000 indexed i.\n       01  result.\n           05  rl            pic 9(3).\n           05  occurs 0 to 100 times depending on rl.\n               07 nr         pic 9(2).\n               07 cr         pic a.\n      \n       procedure division using s result.\n      \n          initialize rl\n          set i to 1\n          compute l = function stored-char-length(s)\n          perform until i > l\n              add 1 to rl\n              move 1 to nr(rl)\n              move c(i) to cr(rl)\n              perform until i = l or c(i) <> c(i + 1)\n                set i up by 1\n                add 1 to nr(rl)\n              end-perform\n              set i up by 1\n          end-perform.\n      \n       end program RunLengthEncoding.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19868,"user_id":53,"body":"       identification division.\n       program-id. RunLengthEncoding.\n       data division.\n       local-storage section. \n       01  w                 pic 9(3).\n       01  i                 index value 1.\n       linkage section.\n       01  s.\n           03  c             pic a occurs 1000.\n       01  result.\n           05  res-len       pic 9(3).\n           05  filler        occurs 0 to 100 times depending on res-len.\n               07 xs         pic 9(2).\n               07 x          pic a.\n       procedure division using s result.\n          initialize result\n          compute w = length of function trim(s)\n          perform until i > w\n            add 1 to res-len\n            set xs(res-len) to 1\n            move c(i) to x(res-len)\n            perform until i = w or c(i) <> c(i + 1)\n              add 1 to i\n              add 1 to xs(res-len)\n            end-perform\n            add 1 to i\n          end-perform\n          goback.\n       end program RunLengthEncoding.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"546e2562b03326a88e000020":[{"id":19869,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE-DIGITS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 99. \n       01 RS          PIC X(20).\n       01 RS2         PIC X(20).\n       01 TMP         PIC 999. \n       01 TMPZ        PIC ZZ9. \n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          INITIALIZE I RESULT RS RS2\n      * HAJIME!\n          PERFORM UNTIL I GREATER OR EQUAL LENGTH N\n             ADD 1 TO I\n             MOVE FUNCTION TRIM(N(I:1)) TO TMP\n             COMPUTE TMPZ = TMP ** 2\n             STRING FUNCTION TRIM(RS) DELIMITED BY SIZE \n                    FUNCTION TRIM(TMPZ) DELIMITED BY SIZE\n                    INTO RS2\n             MOVE RS2 TO RS\n             DISPLAY RS2\n          END-PERFORM\n          MOVE RS2 TO RESULT\n          Goback.\n       END PROGRAM SQUARE-DIGITS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19870,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE-DIGITS.\n       DATA DIVISION.\n       working-storage section.\n       01 i           pic 99.\n       01 j           pic 99.\n       01 x           pic 99.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = 0\n          compute j = 19\n          perform varying i from 10 by -1 until i = 0\n              compute x = function numval(n(i:1)) ** 2\n              move x to result(j:2)\n              if x >= 10 then \n                  subtract 2 from j\n              else\n                  subtract 1 from j\n              end-if\n          end-perform.\n       END PROGRAM SQUARE-DIGITS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19871,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE-DIGITS.\n       DATA DIVISION.\n       working-storage section.\n       01 r           pic 9.\n       01 x           pic 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = 0\n          compute x = 1\n          perform until n = 0\n              divide n by 10 giving n remainder r\n              compute result = result + r * r * x\n              if r > 3 \n                  multiply 100 by x\n              else\n                  multiply 10 by x\n              end-if\n          end-perform.\n       END PROGRAM SQUARE-DIGITS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19872,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE-DIGITS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(20).\n       01 D           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          move 1 to a,\n          move 0 to result,\n          perform until n = 0\n            compute d = function rem (n, 10),\n            compute result = result + a * d * d,\n            if d <= 3 then\n              compute a = a * 10\n            else\n              compute a = a * 100\n            end-if,\n            compute n = n \/ 10,\n          end-perform,\n          goback.\n       END PROGRAM SQUARE-DIGITS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19873,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE-DIGITS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(10).\n       01 C           PIC 9(8).\n       01 I           PIC 9(8).\n       01 R           PIC 9.\n       01 E           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Move 0 to result,\n          \n          Perform varying c from 0 by 1 until n = 0,\n            Divide n by 10 giving n remainder r,\n            Compute m = 10 * m + r,\n          End-perform\n      \n          Perform varying i from 0 by 1 until i = c,\n            Compute e = function rem(m, 10) ** 2\n            If e >= 10\n              Compute result = 100 * result + e,\n            Else\n              Compute result = 10 * result + e,\n            End-if\n            \n            Divide 10 into m,\n          End-perform\n      \n          Goback.\n       END PROGRAM SQUARE-DIGITS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"546f922b54af40e1e90001da":[{"id":19874,"user_id":50,"body":"       identification division.\n       program-id. AlphabetPosition.\n       data division.\n       local-storage section.\n       01  n pic 9(3).\n       01  t pic 9.\n       01  r pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 300 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n            move function ord(function lower-case(s-char(i))) to n\n            if n > 97 and n < 124\n              subtract 97 from n\n              divide n by 10 giving t remainder r\n              if t <> 0\n                add 1 to res-length\n                move t to res(res-length)\n              end-if\n              add 1 to res-length\n              move r to res(res-length)\n              add 1 to res-length\n              move ' ' to res(res-length)\n            end-if\n          end-perform\n          if res-length <> 0 subtract 1 from res-length end-if\n      \n          goback.\n       end program AlphabetPosition.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19875,"user_id":168,"body":"       identification division.\n       program-id. AlphabetPosition.\n       data division.\n       working-storage section.\n       01  c  pic x.\n          88 upper values 'A' through 'Z'.\n          88 lower values 'a' through 'z'.\n       01  n  pic z9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                                  depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res-chars.\n                10 pic x occurs 0 to 300 times \n                                 depending on res-length indexed j.\n      \n       procedure division using s result.\n          move 1 to j\n          move 300 to res-length\n          perform varying i from 1 until i > s-length\n              move s-char(i) to c\n              if upper or lower\n                  if upper\n                      compute n = function ord(c) - 65\n                  else\n                      compute n = function ord(c) - 97\n                  end-if\n                  string function trim(n) ' '\n                      into res-chars\n                      with pointer j\n              end-if\n          end-perform\n          compute res-length = function max(0, j - 2)\n          goback.\n       end program AlphabetPosition.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19876,"user_id":53,"body":"       identification division.\n       program-id. AlphabetPosition.\n       data division.\n       local-storage section.\n       01  n               pic 9(3).\n       01  x               pic 9.\n       01  y               pic 9.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 300 times \n                                 depending on res-length.\n       procedure division using s result.\n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n            move function ord(function lower-case(s-char(i))) to n\n            if n > 97 and n < 124\n              if res-length > 0 then\n                add 1 to res-length\n                move ' ' to res(res-length)\n              end-if\n              subtract 97 from n\n              divide n by 10 giving x remainder y\n              if x <> 0\n                add 1 to res-length\n                move x to res(res-length)\n              end-if\n              add 1 to res-length\n              move y to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program AlphabetPosition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5491689aff74b9b292000334":[{"id":19877,"user_id":50,"body":"       identification division.\n       program-id. FindPattern.\n       data division.\n       local-storage section.\n       01  i               usage index.\n       01  c               pic 9(2).\n       01  d               pic 9(2).\n       01  r               pic 9(2).\n       01  l               pic 9(2).\n       01  m               pic 9(2).\n       01  chunk           pic a(25).\n       01  tmp             pic a(50).\n      \n       linkage section.\n       01  s               pic a(50).\n       01  result.\n           05 t            pic a(50).\n           05 k            pic 9(2).\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          move length function trim(s trailing) to l\n          compute m = l \/ 2\n      \n          perform varying c from 1 until c > m\n              divide l by c giving d remainder r\n              if r = 0 perform wrap end-if\n          end-perform\n      \n          move s to t\n          move 1 to k\n      \n          goback.\n      \n          wrap.\n            initialize tmp\n            move s(1:c) to chunk\n            set i to 1\n            perform d times\n                string function trim(chunk) into tmp with pointer i\n            end-perform\n            if s = tmp\n              move chunk to t\n              move d to k\n              goback\n            end-if\n            .\n      \n       end program FindPattern.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19878,"user_id":168,"body":"       identification division.\n       program-id. FindPattern.\n       data division.\n       local-storage section.\n       01  tmp    pic a(100).\n       01  len    pic 99.\n      \n       linkage section.\n       01  s               pic a(50).\n       01  result.\n      *       minimum substring\n           05 t            pic a(50).\n      *       number of repetitions of t to get s\n           05 k            pic 9(2).\n      \n       procedure division using s result.\n          inspect s tallying len for characters before space\n          string s s delimited by space into tmp\n          move 1 to k\n          inspect tmp(2:) tallying k for characters before s(1:len)\n          move s(1:k) to t\n          divide len by k giving k\n          goback.\n       end program FindPattern.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19879,"user_id":53,"body":"       identification division.\n       program-id. FindPattern.\n       data division.\n       local-storage section.\n       01  r               pic 9(2).\n       01  w               pic 9(2).\n       01  m               pic 9(2).\n       01  x               pic a(25).\n       01  e               pic a(50).\n       01  a               pic 9(2).\n       01  b               pic 9(2).\n       01  i               usage index.\n       linkage section.\n       01  s               pic a(50).\n       01  result.\n           05 t            pic a(50).\n           05 k            pic 9(2).\n       procedure division using s result.\n          initialize result\n          move length of function trim(s) to w\n          divide 2 into w giving m\n          perform varying a from 1 until a > m\n            divide a into w giving b remainder r\n            if r = 0 then\n              initialize e\n              move s(1:a) to x\n              set i to 1\n              perform b times\n                string function trim(x) \n                  into e with pointer i\n              end-perform\n              if s = e then\n                move x to t\n                move b to k\n                exit paragraph\n              end-if\n            end-if\n          end-perform\n          move s to t\n          set k to 1\n          goback.\n       end program FindPattern.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5495bfa82eced2146100002f":[{"id":19880,"user_id":168,"body":"       identification division.\n       program-id. IntervalInsert.\n       data division.\n      \n       linkage section.\n       01  myl.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 1000 times\n                             depending on len.\n               07 a          pic s9(8).\n               07 b          pic s9(8).\n       01  interval.\n           05  x             pic s9(8).\n           05  y             pic s9(8).\n       01  result.\n           05  res-len       pic 9(4).\n           05  res           occurs 1 to 1001 times\n                             depending on res-len indexed by i.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n      \n       procedure division using myl interval result.\n           move 0 to res-len\n           perform varying i from 1 until i > len\n               evaluate true\n                   when y < a(i)\n                       add 1 to res-len\n                       move interval to res(res-len)\n                       move xs(i) to interval\n                   when x > b(i)\n                       add 1 to res-len\n                       move xs(i) to res(res-len)\n                   when other\n                       move function min(a(i), x) to x\n                       move function max(b(i), y) to y\n               end-evaluate\n           end-perform\n           add 1 to res-len\n           move interval to res(res-len).\n       end program IntervalInsert.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19881,"user_id":50,"body":"       identification division.\n       program-id. IntervalInsert.\n       data division.\n       local-storage section.\n       01  lst               pic s9(8).\n       01  o                 pic 9(4).\n       01  arr.\n           05  l             pic 9(4).\n           05  e             occurs 1 to 2002 times\n                             depending l indexed i k.\n               07 a          pic s9(8).\n               07 b          pic s9(8).\n      \n       linkage section.\n       01  myl.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 1000 times\n                             depending len.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n       01  interval.\n           05  fst           pic s9(8).\n           05  snd           pic s9(8).\n       01  result.\n           05  res-len       pic 9(4).\n           05  res           occurs 1 to 1001 times\n                             depending res-len.\n               07 fst        pic s9(8).\n               07 snd        pic s9(8).\n      \n       procedure division using myl interval result.\n\n          compute l = 2 * len + 2\n          move 0 to o, res-len\n          \n          move fst of interval to a of e(1)\n          move -1              to b of e(1)\n          \n          move snd of interval to a of e(2)\n          move 1               to b of e(2)\n          \n          move 2 to k\n          perform varying i from 1 until i > len\n            add 1 to k\n            move fst of xs(i) to a of e(k)\n            move -1           to b of e(k)\n            add 1 to k\n            move snd of xs(i) to a of e(k)\n            move 1            to b of e(k)\n          end-perform\n      \n          sort e ascending a ascending b\n      \n          perform varying i from 1 until i > k\n            if b of e(i) = -1\n              if o = 0 then move a of e(i) to lst, end-if\n              add 1 to o\n            else\n              subtract 1 from o\n              if o = 0\n                add 1 to res-len\n                move lst       to fst of res(res-len)\n                move a of e(i) to snd of res(res-len)\n              end-if\n            end-if\n          end-perform\n          \n          goback.\n       end program IntervalInsert.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19882,"user_id":53,"body":"       identification division.\n       program-id. IntervalInsert.\n       data division.\n       local-storage section.\n       01  lst               pic s9(8).\n       01  o                 pic 9(4).\n       01  arr.\n           05  alen          pic 9(4).\n           05  pairs         occurs 1 to 2002 times\n                             depending alen indexed by i j.\n               07 afst       pic s9(8).\n               07 asnd       pic s9(8).\n       linkage section.\n       01  myl.\n           05  len           pic 9(4).\n           05  xs            occurs 1 to 1000 times\n                             depending len.\n               07 xfst       pic s9(8).\n               07 xsnd       pic s9(8).\n       01  interval.\n           05  ifst          pic s9(8).\n           05  isnd          pic s9(8).\n       01  result.\n           05  res-len       pic 9(4).\n           05  res           occurs 1 to 1001 times\n                             depending res-len.\n               07 rfst       pic s9(8).\n               07 rsnd       pic s9(8).\n       procedure division using myl interval result.\n          initialize result\n          compute alen = 2 * len + 2\n          move 0 to o res-len\n          move ifst to afst of pairs(1)\n          move isnd to afst of pairs(2)\n          set asnd of pairs(1) to -1\n          set asnd of pairs(2) to 1\n          set j to 2\n          perform varying i from 1 until i > len\n            add 1 to j\n            move xfst of xs(i) to afst of pairs(j)\n            set asnd of pairs(j) to -1\n            add 1 to j\n            move xsnd of xs(i) to afst of pairs(j)\n            set asnd of pairs(j) to 1\n          end-perform\n          sort pairs ascending afst ascending asnd\n          perform varying i from 1 until i > j\n            if asnd of pairs(i) <> -1\n              subtract 1 from o\n              if o = 0\n                add 1 to res-len\n                move lst to rfst of res(res-len)\n                move afst of pairs(i) to rsnd of res(res-len)\n              end-if\n            else\n              if o = 0 then \n                move afst of pairs(i) to lst\n              end-if\n              add 1 to o\n            end-if\n          end-perform\n          goback.\n       end program IntervalInsert.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"549ee8b47111a81214000941":[{"id":19883,"user_id":168,"body":"       identification division.\n       program-id. Knight.\n       data division.\n       working-storage section.\n       01  move-vals.\n           05 pic s9 value 2.  05 pic s9 value 1.\n           05 pic s9 value -2. 05 pic s9 value 1.\n           05 pic s9 value 2.  05 pic s9 value -1.\n           05 pic s9 value -2. 05 pic s9 value -1.\n           05 pic s9 value 1.  05 pic s9 value 2.\n           05 pic s9 value -1. 05 pic s9 value 2.\n           05 pic s9 value 1.  05 pic s9 value -2.\n           05 pic s9 value -1. 05 pic s9 value -2.\n       01  redefines move-vals.\n           05 occurs 8 times indexed by k.\n              10  dx  pic s9.\n              10  dy  pic s9.\n              \n       01  pos-queue occurs 64 times indexed by i j.\n           05 p.\n              10 xs   pic 9.\n              10 ys   pic 9.\n           05 moves   pic 99.\n       01  cur-pos.\n           05  x      pic 9.\n           05  y      pic 9.\n       01  target-pos. \n           05  tx     pic 9.\n           05  ty     pic 9.\n      \n       local-storage section.\n       01  visited.\n           05 occurs 8 times.\n              10 vs   pic 9 occurs 8 times.\n      \n       linkage section.\n       01  p1     pic x(2).\n       01  p2     pic x(2).\n       01  result pic 99.\n      \n       procedure division using p1 p2 result.\n          compute x  = function ord(p1(1:1)) - 97\n          compute y  = function numval(p1(2:1))\n          compute tx = function ord(p2(1:1)) - 97\n          compute ty = function numval(p2(2:1))\n          move cur-pos to p(1)\n          move 0       to moves(1)\n          move 1       to vs(x, y)\n      \n          move 1 to j\n          perform varying i from 1 until i > j\n              if p(i) = target-pos\n                  move moves(i) to result\n                  goback\n              end-if\n              perform varying k from 1 until k > 8\n                  if (xs(i) + dx(k) >= 1 and <= 8) and \n                     (ys(i) + dy(k) >= 1 and <= 8)\n                      compute x = xs(i) + dx(k)\n                      compute y = ys(i) + dy(k)\n                      if vs(x, y) = 0\n                          move 1 to vs(x, y)\n                          add 1 to j\n                          move cur-pos to p(j)\n                          add 1 to moves(i) giving moves(j)\n                      end-if\n                  end-if\n              end-perform\n          end-perform.\n       end program Knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19884,"user_id":53,"body":"       identification division.\n       program-id. Knight.\n       data division.\n       local-storage section.\n       01  a0     pic 99.\n       01  b0     pic 99.\n       01  a1     pic 99.\n       01  b1     pic 99.\n       01  a      pic 99.\n       01  b      pic 99.\n       01  x      pic 99.\n       01  y      pic 99.\n       01  d      pic 99.\n       01  k      pic 99.\n       01  f      pic s99v9(10).\n       linkage section.\n       01  p1     pic x(2).\n       01  p2     pic x(2).\n       01  r      pic 99.\n       procedure division using p1 p2 r.\n          \n          compute a0 = function ord(p1(1:1)) - 98\n          compute a1 = function ord(p1(2:1)) - 49\n          compute b0 = function ord(p2(1:1)) - 98\n          compute b1 = function ord(p2(2:1)) - 49\n          compute a = function abs(a0 - b0)\n          compute b = function abs(a1 - b1)\n          compute x = function max(a, b)\n          compute y = function min(a, b)\n      \n          if x = 1 and y = 0 then set r to 3, goback end-if\n          if x = 2 and y = 2 then set r to 4, goback end-if\n      \n          if x = 1 and y = 1 then\n            if a0 = 0 and a1 = 1 then set r to 4, goback end-if\n            if a0 = 7 and a1 = 1 then set r to 4, goback end-if\n            if a0 = 0 and a1 = 8 then set r to 4, goback end-if\n            if a0 = 7 and a1 = 8 then set r to 4, goback end-if\n            if b0 = 0 and b1 = 1 then set r to 4, goback end-if\n            if b0 = 7 and b1 = 1 then set r to 4, goback end-if\n            if b0 = 0 and b1 = 8 then set r to 4, goback end-if\n            if b0 = 7 and b1 = 8 then set r to 4, goback end-if\n          end-if\n      \n          compute d = x - y\n          compute k = 4, if y > d then subtract 1 from k end-if\n          compute f = (d - y) \/ k\n          compute r = d - 2 * function integer(f)\n          \n          goback.\n       end program Knight.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19885,"user_id":50,"body":"       identification division.\n       program-id. Knight.\n       data division.\n       local-storage section.\n       01 x1 pic 9.\n       01 x2 pic s9.\n       01 y1 pic 9.\n       01 y2 pic s9.\n       01 dx pic 9.\n       01 dy pic 9.\n       01 a  pic 9.\n       01 b  pic 9.\n       01 c  pic 9.\n       01 m1 pic 9.\n       \n       linkage section.\n       01  p1     pic x(2).\n       01  p2     pic x(2).\n       01  result pic 99.\n      \n       procedure division using p1 p2 result.\n      \n      * Implementation of rowcased's C solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5dc42a35f67e8a000115dc9a\/groups\/5dc46f9a83a99000011f7fe3\n      \n          initialize result\n          if p1 = p2 goback end-if\n      \n          compute x1 = function ord(p1(1:1)) - 98\n          compute y1 = function ord(p2(1:1)) - 98\n          move p1(2:1) to x2\n          subtract 1 from x2\n          move p2(2:1) to y2\n          subtract 1 from y2\n          compute dx = function abs(x1 - y1)\n          compute dy = function abs(x2 - y2)\n          compute a = function abs(dx \/ 2 + 0.5)\n          compute b = function abs(dy \/ 2 + 0.5)\n          compute c = function abs((dx + dy) \/ 3 + 0.5)\n      \n          if a > b\n                if a > c  move a to m1\n                else      move c to m1 end-if\n          else  if b > c  move b to m1\n                else      move c to m1 end-if end-if\n          \n          evaluate true\n          when ((function rem(x1, 7) = 0 and function rem(x2, 7) = 0)\n          or    (function rem(y1, 7) = 0 and function rem(y2, 7) = 0)) \n          and dx = 1 and dy = 1\n              move 4 to result\n          when dx + dy = 1\n              move 3 to result\n          when dx = 2 and dy = 2\n              move 4 to result\n          when other\n              compute result = m1 + function rem(m1 + dx + dy, 2)\n          end-evaluate\n      \n          goback.\n       end program Knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54a91a4883a7de5d7800009c":[{"id":19886,"user_id":50,"body":"       identification division.\n       program-id. IncrementString.\n      \n       data division.\n       local-storage section.\n       01 numDigits   pic 9(3).\n          88 noDigits value 0.\n       01 allDigits.\n          03  digit   pic 9 occurs 200 depending numDigits indexed j.\n       01 i           usage index.\n       01 l           pic 9(3).\n      \n       linkage section.\n       01 s           pic x(200).\n       01 result      pic x(200).\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          move length of function trim(s) to l\n          perform varying i from l by -1 until i = 0\n              if s(i:1) is numeric\n                   add 1 to numDigits\n              else exit perform end-if\n          end-perform\n          \n          if noDigits\n              string s delimited by space '1' into result end-string\n              goback\n          end-if\n      \n          move s(1 + l - numDigits: numDigits) to allDigits\n      \n          perform varying j from numDigits by -1 until j = 0\n              add 1 to digit(j)\n              on size error\n                 move 0 to digit(j)\n              not on size error \n                 string \n                    s(1:l - numDigits) allDigits\n                    into result\n                 end-string\n                 goback\n              end-add\n          end-perform\n      \n          string s(1:l - numDigits) '1' allDigits into result\n             \n          goback.\n       end program IncrementString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19887,"user_id":null,"body":"       identification division.\n       program-id. IncrementString.\n      \n       data division.\n\n             WORKING-STORAGE SECTION.\n      \n      \n      *---------------------------------------------------------------*\n      *        H I L P - V A R S                                      *\n      *---------------------------------------------------------------*\n       01  num-start                  PIC 9(3)    BINARY  VALUE 0.\n       01  strng-act-len              PIC 9(3)    BINARY  VALUE 0.\n       01  trailing-num               PIC 9(1)    DISPLAY VALUE 1.\n       01  trailing-num-disp          PIC X(3)    DISPLAY VALUE SPACE.\n      \n       01  trailing-num-exists        PIC  X(1)           VALUE 'N'.\n        88 trailing-num-yes                               VALUE 'J'.\n        88 trailing-num-no                                VALUE 'N'.\n      \n      \n       linkage section.\n       01 strng       pic x(200).\n       01 result      pic x(200).\n      \n       procedure division using strng result.\n      \n          initialize result\n          MOVE 0                            TO num-start\n          MOVE 0                            TO strng-act-len\n          MOVE 1                            TO trailing-num\n          MOVE SPACES                       TO trailing-num-disp\n          SET  trailing-num-no              TO true\n      \n      * `strng` is a fixed-size string containing only alphanumeric characters\n          IF strng(1:1) IS NOT EQUAL TO SPACE AND\n             strng(1:1) IS NOT EQUAL TO LOW-VALUE THEN\n            COMPUTE strng-act-len = FUNCTION LENGTH(\n      -                              FUNCTION TRIM   (strng TRAILING)\n      -                                                              )\n          END-IF\n      \n          IF strng-act-len IS EQUAL TO ZERO OR\n              strng(strng-act-len:1) IS NOT NUMERIC THEN\n              SET trailing-num-no           TO TRUE\n              COMPUTE num-start =  strng-act-len + 1\n          ELSE\n              SET trailing-num-yes          TO TRUE\n          END-IF\n    \n      \n          IF trailing-num-yes THEN\n      \n               PERFORM VARYING num-start FROM strng-act-len BY -1 UNTIL\n               num-start          IS < 1                          OR\n               strng(num-start:1) IS NOT EQUAL TO '9'\n                 MOVE '0'                   TO strng(num-start:1)\n               END-PERFORM\n      \n               IF num-start IS < 1 OR \n                  (strng(num-start:1) IS NOT NUMERIC AND \n                   num-start IS NOT EQUAL TO strng-act-len) THEN\n                  ADD 1                     TO num-start\n                  MOVE '1'                  TO strng(num-start:1)\n                  COMPUTE num-start = strng-act-len + 1\n                  MOVE '0'                  TO strng(num-start:1)\n               ELSE\n                 COMPUTE trailing-num = FUNCTION NUMVAL(\n      -                                            strng(num-start:1) \n      -                                                               )\n                 ADD 1                        TO trailing-num\n\n                 MOVE trailing-num            TO trailing-num-disp(1:3)\n                 IF num-start IS < 1 THEN\n                     MOVE 1                       TO num-start\n                 END-IF\n\n                 MOVE trailing-num-disp(1:1)      TO strng(num-start:1)\n               END-IF\n           ELSE\n             COMPUTE num-start = strng-act-len + 1\n             MOVE '1'                  TO strng(num-start:1)\n           END-IF\n\n      \n           MOVE strng                       TO result\n      \n           \n       goback.\n       end program IncrementString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19888,"user_id":53,"body":"       identification division.\n       program-id. IncrementString.\n       data division.\n       local-storage section.\n       01 i           usage index.\n       01 j           usage index.\n       01 l           pic 9(3).\n       01 n           pic 9(3).\n          88 z        value 0.\n       01 a.\n          03 d        pic 9 occurs 200 depending n.\n       linkage section.\n       01 s           pic x(200).\n       01 r           pic x(200).\n       procedure division using s r.\n      \n          initialize r\n          perform inc\n          perform render\n          goback.\n      \n        inc.\n          move length of function trim(s) to l\n          perform varying i from l by -1 until i = 0\n            if s(i:1) is numeric\n              add 1 to n\n            else \n              exit perform\n            end-if\n          end-perform\n          \n          if z then\n            string s delimited by space '1' into r end-string\n            goback\n          end-if\n          .\n      \n        render.\n          move s(1 + l - n: n) to a\n      \n          perform varying j from n by -1 until j = 0\n            add 1 to d(j)\n            on size error\n               move 0 to d(j)\n            not on size error \n               string s(1:l - n) a into r\n               goback\n            end-add\n          end-perform\n      \n          string s(1:l - n) '1' a into r\n          .\n      \n       end program IncrementString.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54acc128329e634e9a000362":[{"id":19889,"user_id":53,"body":"       identification division.\n       program-id. TraverseTCPStates.\n       data division.\n       local-storage section.\n       01  i                usage index.\n       01  state            pic x(22).\n       linkage section.\n       01  events.\n           05 eventsLength  pic 9(2).\n           05 evnt          pic x(16) occurs 1 to 50 times \n                                      depending on eventsLength.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic x occurs 0 to 20 times \n                                  depending on resLength.\n       procedure division using events result.\n          initialize result\n          move 'CLOSED' to state\n          perform varying i from 1 until i > eventsLength\n            if state = 'ERROR' then\n              exit perform\n            end-if\n            evaluate state\n              when 'CLOSED'\n                evaluate evnt(i)\n                  when 'APP_PASSIVE_OPEN' move 'LISTEN' to state\n                  when 'APP_ACTIVE_OPEN' move 'SYN_SENT' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'LISTEN'\n                evaluate evnt(i)\n                  when 'RCV_SYN' move 'SYN_RCVD' to state\n                  when 'APP_SEND' move 'SYN_SENT' to state\n                  when 'APP_CLOSE' move 'CLOSED' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'SYN_SENT'\n                evaluate evnt(i)\n                  when 'RCV_SYN' move 'SYN_RCVD' to state\n                  when 'RCV_SYN_ACK' move 'ESTABLISHED' to state\n                  when 'APP_CLOSE' move 'CLOSED' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'SYN_RCVD'\n                evaluate evnt(i)\n                  when 'APP_CLOSE' move 'FIN_WAIT_1' to state\n                  when 'RCV_ACK' move 'ESTABLISHED' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'ESTABLISHED'\n                evaluate evnt(i)\n                  when 'APP_CLOSE' move 'FIN_WAIT_1' to state\n                  when 'RCV_FIN' move 'CLOSE_WAIT' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'CLOSE_WAIT'\n                evaluate evnt(i)\n                  when 'APP_CLOSE' move 'LAST_ACK' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'LAST_ACK'\n                evaluate evnt(i)\n                  when 'RCV_ACK' move 'CLOSED' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'FIN_WAIT_1'\n                evaluate evnt(i)\n                  when 'RCV_FIN' move 'CLOSING' to state\n                  when 'RCV_FIN_ACK' move 'TIME_WAIT' to state\n                  when 'RCV_ACK' move 'FIN_WAIT_2' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'FIN_WAIT_2'\n                evaluate evnt(i)\n                  when 'RCV_FIN' move 'TIME_WAIT' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'CLOSING'\n                evaluate evnt(i)\n                  when 'RCV_ACK' move 'TIME_WAIT' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n              when 'TIME_WAIT'\n                evaluate evnt(i)\n                  when 'APP_TIMEOUT' move 'CLOSED' to state\n                  when other move 'ERROR' to state\n                end-evaluate\n            end-evaluate\n          end-perform\n          move length of function trim(state) to resLength\n          move state to result(3:)\n          goback.\n       end program TraverseTCPStates.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19890,"user_id":50,"body":"       identification division.\n       program-id. TraverseTCPStates.\n       data division.\n       local-storage section.\n       01  currentState pic x(22).\n      \n       linkage section.\n       01  events.\n           05 eventsLength  pic 9(2).\n           05 evnt          pic x(16) occurs 1 to 50 times \n                            depending on eventsLength indexed j.\n       01  result.\n           05 resLength   pic 9(2).\n           05 res         pic x occurs 0 to 20 times \n                                depending on resLength.\n      \n       procedure division using events result.\n      \n          initialize result\n      \n          move 'CLOSED' to currentState\n          \n          perform varying j from 1 until j > eventsLength\n          evaluate function concatenate\n                  (function trim(currentState), evnt(j))\n          when 'CLOSEDAPP_ACTIVE_OPEN'\n          move 'SYN_SENT' to currentState\n          when 'CLOSEDAPP_PASSIVE_OPEN'\n          move 'LISTEN' to currentState\n          when 'CLOSE_WAITAPP_CLOSE'\n          move 'LAST_ACK' to currentState\n          when 'CLOSINGRCV_ACK'\n          move 'TIME_WAIT' to currentState\n          when 'ESTABLISHEDAPP_CLOSE'\n          move 'FIN_WAIT_1' to currentState\n          when 'ESTABLISHEDRCV_FIN'\n          move 'CLOSE_WAIT' to currentState\n          when 'FIN_WAIT_1RCV_ACK'\n          move 'FIN_WAIT_2' to currentState\n          when 'FIN_WAIT_1RCV_FIN'\n          move 'CLOSING' to currentState\n          when 'FIN_WAIT_1RCV_FIN_ACK'\n          move 'TIME_WAIT' to currentState\n          when 'FIN_WAIT_2RCV_FIN'\n          move 'TIME_WAIT' to currentState\n          when 'LAST_ACKRCV_ACK'\n          move 'CLOSED' to currentState\n          when 'LISTENAPP_CLOSE'\n          move 'CLOSED' to currentState\n          when 'LISTENAPP_SEND'\n          move 'SYN_SENT' to currentState\n          when 'LISTENRCV_SYN'\n          move 'SYN_RCVD' to currentState\n          when 'SYN_RCVDAPP_CLOSE'\n          move 'FIN_WAIT_1' to currentState\n          when 'SYN_RCVDRCV_ACK'\n          move 'ESTABLISHED' to currentState\n          when 'SYN_SENTAPP_CLOSE'\n          move 'CLOSED' to currentState\n          when 'SYN_SENTRCV_SYN'\n          move 'SYN_RCVD' to currentState\n          when 'SYN_SENTRCV_SYN_ACK'\n          move 'ESTABLISHED' to currentState\n          when 'TIME_WAITAPP_TIMEOUT'\n          move 'CLOSED' to currentState\n          when other \n          move '05ERROR' to result goback\n          end-evaluate\n          end-perform\n          \n          move length of function trim(currentState) to resLength\n          move currentState to result(3:)\n      \n          goback.\n      \n       end program TraverseTCPStates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54b42f9314d9229fd6000d9c":[{"id":19891,"user_id":50,"body":"       identification division.\n       program-id. DuplicateEncode.\n\n       data division.\n       local-storage section.\n       01  counter.\n           03  c  pic 9(2) occurs 127 times.\n      \n       linkage section.\n       01  s.\n           03  s-length   pic 9(2).\n           03  chr        pic x occurs 0 to 40 times\n                                depending on s-length.\n       01  result.\n           03 res-length pic 9(2).\n           03 res pic x occurs 0 to 40 times\n                        depending on res-length indexed i.\n\n       procedure division using s result.\n          \n          move function lower-case(s) to result\n          perform varying i from 1 until i > s-length\n            add 1 to c(function ord(res(i)))\n          end-perform\n          \n          perform varying i from 1 until i > s-length\n              if c(function ord(res(i))) > 1 move ')' to res(i)\n              else             move '(' to res(i) end-if\n          end-perform\n                \n          goback.\n       end program DuplicateEncode.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19892,"user_id":53,"body":"       identification division.\n       program-id. DuplicateEncode.\n\n       data division.\n       local-storage section.\n       01  dict.\n           03  xs         pic 9(2) occurs 128 times.\n       linkage section.\n       01  s.\n           03  s-len      pic 9(2).\n           03  chr        pic x occurs 0 to 40 times\n                          depending on s-len.\n       01  result.\n           03 res-len     pic 9(2).\n           03 res         pic x occurs 0 to 40 times\n                          depending on res-len \n                          indexed by i.\n       procedure division using s result.\n          initialize result\n          move function lower-case(s) to result\n          perform varying i from 1 until i > s-len\n            add 1 to xs(function ord(res(i)))\n          end-perform\n          perform varying i from 1 until i > s-len\n            evaluate xs(function ord(res(i)))\n              when > 1\n                move ')' to res(i)\n              when other\n                move '(' to res(i)\n            end-evaluate\n          end-perform\n          goback.\n       end program DuplicateEncode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54ba84be607a92aa900000f1":[{"id":19893,"user_id":53,"body":"       identification division.\n       program-id. IsIsogram.\n       data division.\n       local-storage section.\n       01  a       pic 9(2).\n       01  counter.\n           03  c   pic 9(2) occurs 127 times.\n       linkage section.\n       01  s.\n           05 len  pic 9(2).\n           05 chr  pic a occurs 0 to 45 times \n                         depending on len indexed i.\n       01  result  pic 9.\n       procedure division using s result.\n          set result to 1\n          perform varying i from 1 until i > len\n            compute a = function ord(function lower-case(chr(i))) - 97\n            add 1 to c(a)\n            if c(a) > 1 then\n              initialize result\n              exit paragraph\n            end-if\n          end-perform\n          goback.\n       end program IsIsogram.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19894,"user_id":50,"body":"       identification division.\n       program-id. IsIsogram.\n       data division.\n       local-storage section.\n       01  n pic 9(10).\n       01  x usage binary-long unsigned.\n       01  y usage binary-long unsigned.\n       01  i usage index.\n      \n       linkage section.\n       01  s.\n           05 len  pic 9(2).\n           05 chr  pic a occurs 0 to 45 times \n                         depending on len.\n       01  result  pic 9.\n      \n       procedure division using s result.\n      \n          move 0 to n\n          perform varying i from 1 until i > len\n            compute x = 2 ** (\n                 function ord(function lower-case(chr(i))) - 98)\n            move n to y\n            call 'CBL_AND' using x y by value 4\n            if y = 0\n              add x to n\n            else\n              move 0 to result\n              goback\n            end-if\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program IsIsogram.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54bb6ee72c4715684d0008f9":[{"id":19895,"user_id":421,"body":"       identification division.\n       program-id.solution.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 c           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(38).\n       procedure division using n result.\n           COMPUTE a = (n - 1) \/ 3\n           COMPUTE b = (n - 1) \/ 5\n           COMPUTE c = (n - 1) \/ 15\n           COMPUTE result = 3 * a * (a + 1) \/ 2\n                          + 5 * b * (b + 1) \/ 2\n                          - 15 * c * (c + 1) \/ 2.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19896,"user_id":76,"body":"       identification division.\n       program-id.solution.\n       data division.\n       local-storage section.\n       01 m           pic 9(38).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(38).\n       procedure division using n result.\n         subtract 1 from n\n         divide n by 3 giving m\n         compute result = result + m * (m + 1) * 3 \/ 2\n         divide n by 5 giving m\n         compute result = result + m * (m + 1) * 5 \/ 2\n         divide n by 15 giving m\n         compute result = result - m * (m + 1) * 15 \/ 2\n         .\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19897,"user_id":168,"body":"       identification division.\n       program-id.solution.\n      \n       data division.\n       working-storage section.\n       01 k3          pic 9(20).\n       01 k5          pic 9(20).\n       01 k15         pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(38).\n       procedure division using n result.\n          compute k3 = (n - 1) \/ 3\n          compute k5 = (n - 1) \/ 5\n          compute k15 = (n - 1) \/ 15\n          compute result = k3 * (k3 + 1) \/ 2 * 3\n          add function abs(k5 * (k5 + 1) \/ 2 * 5) to result\n          subtract function abs(k15 * (k15 + 1) \/ 2 * 15) from result.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19898,"user_id":53,"body":"       identification division.\n       program-id.solution.\n      \n       data division.\n       \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(38).\n       procedure division using n result.\n\n          MOVE 0 TO RESULT\n          IF N < 1 THEN GOBACK END-IF\n          COMPUTE N = N - 1\n          COMPUTE RESULT = RESULT +\n              3 * ((N - FUNCTION MOD(N ,3)) \/ 3)\n                * ((N - FUNCTION MOD(N ,3)) \/ 3 + 1) \/ 2\n          COMPUTE RESULT = RESULT +\n              5 * ((N - FUNCTION MOD(N ,5)) \/ 5)\n                * ((N - FUNCTION MOD(N ,5)) \/ 5 + 1) \/ 2\n          COMPUTE RESULT = RESULT -\n             15 * ((N - FUNCTION MOD(N ,15)) \/ 15)\n                * ((N - FUNCTION MOD(N ,15)) \/ 15 + 1) \/ 2\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19899,"user_id":50,"body":"       identification division.\n       program-id.solution.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9(38).\n       \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(38).\n       procedure division using n result.\n\n          subtract 1 from n\n          divide 3 into n giving r\n      \n          compute result = 3 * function integer(r * (r + 1) \/ 2)\n          divide 5 into n giving r\n          compute result = result + 5 * \n                          function integer(r * (r + 1) \/ 2)\n      \n          divide 15 into n giving r\n          compute result = result - 15 *\n                          function integer(r * (r + 1) \/ 2)\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54bf1c2cd5b56cc47f0007a1":[{"id":19900,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Duplicatecount.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  OLD-TXT-DUP      PIC X.\n       LINKAGE SECTION.\n       01  TXT.          \n           05  EL-TXT       PIC X    OCCURS 100 INDEXED I.\n       01  RESULT           PIC 9(2).\n      \n       PROCEDURE DIVISION USING TXT RESULT.      \n           INITIALIZE RESULT\n           MOVE FUNCTION LOWER-CASE(TXT)  TO TXT\n           SORT EL-TXT DESCENDING KEY\n\n           PERFORM VARYING I FROM 2 UNTIL EL-TXT(I) = ' '\n               IF  EL-TXT(I)     = EL-TXT(I - 1)\n               AND EL-TXT(I) NOT = OLD-TXT-DUP\n                   ADD  1          TO RESULT\n                   MOVE EL-TXT(I)  TO OLD-TXT-DUP\n               END-IF\n           END-PERFORM.\n       END PROGRAM Duplicatecount.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19901,"user_id":50,"body":"       identification division.\n       program-id. Duplicatecount.\n       data division.\n       local-storage section.\n       01  counter.\n           03  n            pic 9(3) occurs 36 indexed j.\n               88 notDupe   value 0, 1.\n       01  i                usage index.\n       linkage section.\n       01  txt              pic x(100) .\n       01  result           pic 9(2).\n      \n       procedure division using txt result.\n      \n          initialize result\n          perform varying i from 1\n                  until i > function stored-char-length(txt)\n            if txt(i:1) is numeric\n               add 1 to n(function numval(txt(i:1)) + 1)\n            else\n               add 1 to n(function ord(\n                            function lower-case(txt(i:1))) - 87)\n            end-if\n          end-perform\n          perform varying j from 1 until j = 37\n            if not notDupe(j) add 1 to result end-if\n          end-perform.\n      \n       end program Duplicatecount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54c14c1b86b33df1ff000026":[{"id":19902,"user_id":50,"body":"       identification division.\n       program-id. IntToNegabinary.\n      \n       data division.\n\n       linkage section.\n       01 i           pic s9(10).\n       01 result      pic x(34).\n       01 redefines result.\n          03 d pic 9 occurs 34 times indexed j.\n      \n       procedure division using i result.\n      \n          if i = 0 move 0 to result goback end-if\n          initialize result\n          perform varying j from 34 by -1 until i = 0\n              move function rem(function abs(i), 2) to d(j)\n              if i < 0 compute i = (1 - i) \/ 2\n              else     compute i = -i \/ 2 end-if\n          end-perform\n          move function trim(result) to result.\n       end program IntToNegabinary.\n      \n       identification division.\n       program-id. NegabinaryToInt.\n      \n       data division.\n       local-storage section.\n       01 i           usage index.\n      \n       linkage section.\n       01 s           pic x(34).\n       01 result      pic s9(10).\n      \n       procedure division using s result.\n      \n          initialize result\n          move function reverse(function trim(s)) to s\n          perform varying i from 1 until i = 35 or s(i:1) = space\n              if s(i:1) = '1'\n                  compute result = result + (-2) ** (i - 1)\n              end-if\n          end-perform.\n      \n       end program NegabinaryToInt.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19903,"user_id":53,"body":"       identification division.\n       program-id. IntToNegabinary.\n       data division.\n       linkage section.\n       01 i           pic s9(10).\n       01 result      pic x(34).\n       01 redefines result.\n          03 ds       pic 9 occurs 34 times\n                      indexed by j.\n       procedure division using i result.\n          move 0 to result\n          if i = 0 then goback end-if\n          initialize result\n          perform varying j from 34 by -1 until i = 0\n            move function rem(function abs(i), 2) to ds(j)\n            evaluate i\n              when < 0\n                compute i = (1 - i) \/ 2\n              when other\n                compute i = -i \/ 2\n            end-evaluate\n          end-perform\n          move function trim(result) to result\n          goback.\n       end program IntToNegabinary.\n      \n       identification division.\n       program-id. NegabinaryToInt.\n       data division.\n       local-storage section.\n       01 i           usage index.\n       linkage section.\n       01 s           pic x(34).\n       01 result      pic s9(10).\n       procedure division using s result.\n          initialize result\n          move function reverse(function trim(s)) to s\n          perform varying i from 1 until i > length of function trim(s)\n            if s(i:1) = '1'\n              compute result = result + (-2) ** (i - 1)\n            end-if\n          end-perform\n          goback.\n       end program NegabinaryToInt.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54c27a33fb7da0db0100040e":[{"id":19904,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE M = FUNCTION INTEGER(N ** 0.5) ** 2\n           IF M = N THEN\n               COMPUTE RESULT = 1\n           ELSE\n               COMPUTE RESULT = 0\n           END-IF.\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19905,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 r           PIC 9(1).\n       PROCEDURE DIVISION USING N r.\n          compute r = 0\n          if function rem(function sqrt(n) 1) = 0 then set r to 1\n          if n less than 0 then set r to 0\n           .\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19906,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC  9(08).\n       01 O           PIC  9(08).\n       LINKAGE SECTION.\n       01 N           PIC S9(08).\n       01 RESULT      PIC  9(01).\n       PROCEDURE DIVISION USING N RESULT.\n      \n           IF N < 0\n              COMPUTE M = N * -1\n           ELSE\n              MOVE N TO M\n           END-IF\n      \n           COMPUTE M = M ** 0.5 \n           COMPUTE O = M ** 2\n      \n           IF O = N\n              MOVE 1 TO RESULT\n           ELSE\n              MOVE 0 TO RESULT\n           END-IF\n      \n           GOBACK.\n      \n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19907,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT.\n           IF FUNCTION INTEGER(FUNCTION SQRT(N)) * FUNCTION SQRT(N) =\n      - N THEN\n             MOVE 1 TO RESULT\n           END-IF.\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19908,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N RESULT.\n           If n < 0 or function Integer (function Sqrt (n)) ** 2 \n           is not equal to n then move 0 to result,\n           else move 1 to result end-if.\n           GOBACK.\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19909,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = function sqrt(function abs(n))\n           if result * result = n then\n              move 1 to result\n           else\n              move 0 to result\n           end-if\n           GOBACK.\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19910,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE 0 TO RESULT\n           IF N >= 0 THEN\n              COMPUTE M = N ** .5\n              IF M ** 2 = N THEN\n                  MOVE 1 TO RESULT\n              END-IF\n           END-IF.\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19911,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-SQUARE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 SQRT-N      PIC 9(4).\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n         INITIALIZE RESULT\n         IF N IS LESS THAN ZERO GOBACK END-IF\n         MOVE FUNCTION SQRT(N) TO SQRT-N\n         IF FUNCTION SQRT(N) = SQRT-N ADD 1 TO RESULT END-IF.\n       END PROGRAM IS-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19912,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       IS-SQUARE SECTION.\n            if function mod(function sqrt(N) 1) = 0 and n >= 0 then\n                compute result = 1\n            else \n                compute result = 0\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19913,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       IS-SQUARE.\n           compute result = function sqrt(n)\n           if result ** 2 = n\n              move 1 to result\n           else\n              move 0 to result\n           end-if\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19914,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(8).\n       PROCEDURE DIVISION.\n       IS-SQUARE SECTION.\n           MOVE 0 TO RESULT\n           IF N >= 0 THEN\n              COMPUTE M = N ** .5\n              IF M ** 2 = N THEN\n                  MOVE 1 TO RESULT\n              END-IF\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19915,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       IS-SQUARE SECTION.\n          MOVE 0 TO RESULT\n          IF FUNCTION INTEGER(FUNCTION SQRT(N)) ** 2 = N\n            MOVE 1 TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19916,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       IS-SQUARE SECTION.\n            If n is negative then set result to zero,\n            else if function Integer (function Sqrt (n)) ** 2 \n            is not equal to n then set result to zero,\n            else set result to 1 end-if.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54c2fc0552791928c9000517":[{"id":19917,"user_id":421,"body":"       identification division.\n       program-id. f.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using m n result.\n           COMPUTE X = FUNCTION REM(n, m)\n           COMPUTE Y = n \/ m\n           COMPUTE result = m * (m - 1) \/ 2 * Y + x * (x + 1) \/ 2.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19918,"user_id":null,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using m n result.\n         compute result = (n \/ m) * (m * (m - 1) \/ 2)\n                        + function mod(n, m)\n                        * (1 + function mod(n, m)) \/ 2.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19919,"user_id":168,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       working-storage section.\n       01 q           pic 9(8).\n       01 r           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using m n result.\n          divide n by m giving q remainder r.\n          compute result = (q * m * (m - 1) + r * (r + 1)) \/ 2.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19920,"user_id":53,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using m n result.\n          compute result = \n            ((n \/ m) * m * (m - 1)) \/ 2 +\n            (function rem(n, m) * (function rem (n, m) + 1)) \/ 2\n          goback.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19921,"user_id":50,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using m n result.\n\n          divide m into n giving a remainder b\n\n          compute result = m * (m - 1) \/ 2 * a + (b + 1)* b \/ 2\n      \n          goback.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54c9fcad28ec4c6e680011aa":[{"id":19922,"user_id":50,"body":"       identification division.\n       program-id. IsMerge recursive.\n      \n       data division.\n       working-storage section.\n       01 sRec        pic a(50).\n       01 partRec     pic a(50).\n      \n       local-storage section.\n       01 a           pic a.\n       01 b           pic 9.\n      \n       linkage section.\n       01 s           pic a(50).\n       01 part1       pic a(50).\n       01 part2       pic a(50).\n       01 result      pic 9.\n      \n       procedure division using s part1 part2 result.\n      \n          evaluate true\n          when s = function concat(function trim(part1) part2)\n                   set result to 1\n                   goback\n          when s = space\n                   initialize result\n                   goback\n          end-evaluate\n      \n          move s(1:1) to a\n          if a = part1(1:1)\n             move s(2:) to sRec\n             move part1(2:) to partRec\n             call 'IsMerge'\n             using by content sRec partRec part2\n                   by reference b\n          end-if\n          if b = 1 set result to 1 goback end-if\n      \n          if a = part2(1:1)\n             move s(2:) to sRec\n             move part2(2:) to partRec\n             call 'IsMerge'\n             using by content sRec partRec part1\n                   by reference b\n          end-if\n          move b to result\n          .\n      \n       end program IsMerge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19923,"user_id":53,"body":"       identification division.\n       program-id. IsMerge recursive.\n       data division.\n       local-storage section.\n       01 c           pic a.\n       01 r           pic 9.\n       01 sr          pic a(50).\n       01 pr          pic a(50).\n       linkage section.\n       01 s           pic a(50).\n       01 a           pic a(50).\n       01 b           pic a(50).\n       01 result      pic 9.\n       procedure division using s a b result.\n          evaluate true\n            when s = function concat(function trim(a) b)\n               set result to 1\n               goback\n            when length of function trim(s trailing) is zero\n               initialize result\n               goback\n          end-evaluate\n          if s(1:1) = a(1:1) then\n            move s(2:) to sr\n            move a(2:) to pr\n            call 'IsMerge' using \n              by content sr pr b\n              by reference r\n          end-if\n          if r = 1 then set result to 1, goback end-if\n          if s(1:1) = b(1:1) then\n            move s(2:) to sr\n            move b(2:) to pr\n            call 'IsMerge' using \n              by content sr pr a\n              by reference r\n          end-if\n          move r to result\n          goback.\n       end program IsMerge.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54d496788776e49e6b00052f":[{"id":19924,"user_id":168,"body":"       identification division.\n       program-id. sum_of_divided.\n       data division.\n       working-storage section.\n       01  n       usage index.\n       01  d       usage index.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(6) occurs 0 to 20 times \n                                  depending on arr-length indexed i j.\n       01  result.\n           05 res-length     pic 9(3).\n           05 pair           occurs 0 to 300 times\n                             depending on res-length.\n              07 factor      pic 9(6).\n              07 sumByFactor pic s9(8). \n      \n       procedure division using arr result.\n          move 0 to res-length\n          perform varying i from 1 until i > arr-length\n              move function abs(xs(i)) to n\n              move 2 to d\n              perform until d * d > n\n                  if function mod(n, d) = 0\n                      perform test after until function mod(n, d) <> 0\n                          divide d into n\n                      end-perform\n                      add 1 to res-length\n                      move d to factor(res-length)\n                      move xs(i) to sumByFactor(res-length)\n                  end-if\n                  add 1 to d\n              end-perform\n              if n > 1\n                  add 1 to res-length\n                  move n to factor(res-length)\n                  move xs(i) to sumByFactor(res-length)\n              end-if\n          end-perform\n      \n          sort pair on ascending key factor\n          move 1 to j\n          perform varying i from 2 until i > res-length\n              if factor(j) = factor(i)\n                  add sumByFactor(i) to sumByFactor(j)\n              else\n                  add 1 to j\n                  if j < i move pair(i) to pair(j) end-if\n              end-if\n          end-perform\n          move function min(j, res-length) to res-length      \n          goback.\n       end program sum_of_divided.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19925,"user_id":53,"body":"       identification division.\n       program-id. sum_of_divided.\n       data division.\n       local-storage section.\n      * prime factors section\n       01  p-m               pic 9(6).\n       01  p-f               pic 9(6).\n       01  p-arr.\n           05 p-len          pic 9(3).\n           05 p-xs           pic 9(6) occurs 0 to 999 times \n                                      depending on p-len\n                                      indexed by p-i.\n      * many prime factors section\n       01  mp-arr.\n           05 mp-len         pic 9(4).\n           05 mp-xs                   occurs 0 to 9999 times \n                                      depending on mp-len\n                                      indexed by mp-i.\n              08 mp-e        pic 9(6).\n       01  mp-set.\n           05 mps-len        pic 9(3).\n           05 mps-xs         pic 9(6) occurs 0 to 999 times \n                                      depending on mps-len\n                                      indexed by mps-i.\n      * sum of divided section\n       01  m                 pic s9(8).\n       01  e                 pic s9(6).\n       01  p                 pic 9(6).\n       linkage section.\n       01  lst-arr.\n           05 lst-len        pic 9(2).\n           05 lst-xs         pic s9(6) occurs 0 to 20 times \n                                       depending on lst-len\n                                       indexed by lst-i.\n       01  result.\n           05 res-length     pic 9(3).\n           05 pair           occurs 0 to 300 times\n                             depending on res-length.\n              07 factor      pic 9(6).\n              07 sumByFactor pic s9(8). \n       procedure division using lst-arr result.\n      \n          initialize result\n          perform many-prime-factors\n          perform varying mps-i from 1 until mps-i > mps-len\n            set m to 0\n            move mps-xs(mps-i) to p\n            perform varying lst-i from 1 until lst-i > lst-len\n              compute e = lst-xs(lst-i)\n              if function rem (function abs (e), p) = 0 then\n                add e to m\n              end-if\n            end-perform\n            add 1 to res-length\n            move p to factor(res-length)\n            move m to sumByFactor(res-length)\n          end-perform\n          goback.\n      \n          many-prime-factors.\n            initialize mp-arr mp-set\n            perform varying lst-i from 1 until lst-i > lst-len\n              compute p-m = function abs (lst-xs(lst-i))\n              perform prime-factors\n              perform varying p-i from 1 until p-i > p-len\n                add 1 to mp-len\n                move p-xs(p-i) to mp-xs(mp-len)\n              end-perform\n            end-perform\n            sort mp-xs on ascending key mp-e\n            set mps-len to 1\n            move mp-xs(1) to mps-xs(1)\n            perform varying mp-i from 2 until mp-i > mp-len\n              if mp-xs(mp-i) <> mp-xs(mp-i - 1) then\n                add 1 to mps-len\n                move mp-xs(mp-i) to mps-xs(mps-len)\n              end-if\n            end-perform\n            .\n      \n          prime-factors.\n            initialize p-arr\n            set p-f to 2\n            perform until p-f * p-f > p-m\n              if function rem (p-m, p-f) = 0 then\n                add 1 to p-len\n                move p-f to p-xs(p-len)\n                perform until function rem (p-m, p-f) <> 0\n                  divide p-f into p-m\n                end-perform\n              end-if\n              add 1 to p-f\n            end-perform\n            if p-m > 1 then\n              add 1 to p-len\n              move p-m to p-xs(p-len)\n            end-if\n            .\n      \n       end program sum_of_divided.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19926,"user_id":50,"body":"       identification division.\n       program-id. sum_of_divided.\n       data division.\n       local-storage section.\n      * store prime numbers that remain after `naive` factorization\n       01 extra occurs 20 times indexed k.\n          05 n pic 9(6).\n      * store the absolute values of numbers in arr, they will be used to perform the prime factorization\n       01 clone.\n          03 cln pic 9(6) occurs 0 to 20 times depending on l.\n      * the values in `cycle`  allow to generate factors >= 11, avoiding multiples of 2, 3, 5, and 7\n       01 cycle.\n          03  pic 9  value 2.\n          03  pic 9  value 4.\n          03  pic 9  value 2.\n          03  pic 9  value 4.\n          03  pic 9  value 6.\n          03  pic 9  value 2.\n          03  pic 9  value 6.\n          03  pic 9  value 4.\n       01 redefines cycle.\n          03 c pic 9 occurs 8 times indexed h.\n      * first prime numbers, that will be handled separately first\n       01 f.\n          03  pic 9 value 2.\n          03  pic 9 value 3.\n          03  pic 9 value 5.\n          03  pic 9 value 7.\n       01 redefines f.\n          03 firstPrimes pic 9 occurs 4 times.\n       01  flag pic 9.\n       01  p    pic 9(6).\n       01  i usage index.\n       01  j usage index.\n      \n       linkage section.\n       01  arr.\n           05 l              pic 9(2).\n           05 xs             pic s9(6)\n                             occurs 0 to 20 times depending on l.\n       01  result.\n           05 r              pic 9(3).\n           05 res            occurs 0 to 300 times depending on r.\n              07 primes      pic 9(6).\n              07 sums        pic s9(8). \n      \n       procedure division using arr result.\n      \n          initialize result\n          perform varying i from 1 until i > l\n            move xs(i) to cln(i)\n          end-perform\n      \n      * factors 2, 3, 5 and 7\n          perform varying i from 1 until i = 5\n            move firstPrimes(i) to p\n      * flag checks p is a factor of some number\n            move 0 to flag\n            perform varying j from 1 until j > l\n              if function rem(cln(j), p) = 0\n                 move 1 to flag\n                 perform reduce\n              end-if\n            end-perform\n      * a new prime factor was found, add it to result and compute the corresponding sum\n            if flag = 1\n              add 1 to r\n              move p to primes of res(r)\n              perform varying j from 1 until j > l\n                if function rem(xs(j), p) = 0\n                  add xs(j) to sums(r)\n                end-if\n              end-perform\n            end-if\n          end-perform\n      \n      * continue with factors >= 11\n          move 11 to p\n          set h to 1\n          perform forever\n            move 0 to flag\n            perform varying j from 1 until j > l\n              if function rem(cln(j), p) = 0\n                move 1 to flag\n                perform reduce\n              end-if\n            end-perform\n            if flag = 1\n              add 1 to r\n              move p to primes of res(r)\n              perform varying j from 1 until j > l\n                if function rem(xs(j), p) = 0\n                   add xs(j) to sums of res(r)\n                end-if\n              end-perform\n            end-if\n            perform varying j from 1 until j > l\n      * if any element in clone is above 1 and is not prime, continue testing with higher factors\n              if cln(j) > 1  and p * p < cln(j)  exit perform end-if\n            end-perform\n      * if j > l, all elements remaining in clone have either been fully factorized, or are prime numbers still not tested, exit the loop\n            if j > l exit perform end-if\n      * otherwise, generate the next factor and continue the factorization\n            add c(h) to p\n            compute h = function rem(h, 8) + 1\n          end-perform\n      \n      \n      * store elements in clone > 1 (big prime factors) into extra and sort them in ascending order\n          move 0 to k\n          perform varying i from 1 until i > l\n              if cln(i) > 1\n                add 1 to k\n                move cln(i) to n(k)\n              end-if\n          end-perform\n          sort extra on ascending n\n      \n      * finish the task with primes contained in extra\n          perform varying k from 1 until k = 21\n              if n(k) > 1\n                add 1 to r\n                move n(k) to primes of res(r)\n                perform varying i from 1 until i > l\n                  if function rem(xs(i), n(k)) = 0\n                    add xs(i) to sums of res(r)\n                  end-if\n                end-perform\n                perform varying i from function abs(k + 1) until i = 21\n                    perform until function rem(n(i), n(k)) <> 0\n                        divide n(k) into n(i)\n                    end-perform\n                end-perform\n                move 1 to n(k)\n          end-perform\n          goback.\n      \n          reduce.\n      * reduce current element in clone by current prime factor\n            divide p into cln(j)\n            perform until function rem(cln(j), p) <> 0\n                divide p into cln(j)\n            end-perform\n            .\n      \n       end program sum_of_divided.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54d4c8b08776e4ad92000835":[{"id":19927,"user_id":168,"body":"       identification division.\n       program-id. IsPerfectPower.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result.\n          05 a        pic 9(10).\n          05 b        pic 9(10).\n      \n       procedure division using n result.\n          perform with test after varying b from 2 until a < 2\n              compute a rounded = function abs(n ** (1 \/ b))\n              if a ** b = n then goback end-if\n          end-perform\n          move 0 to a b      \n          goback.\n       end program IsPerfectPower.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19928,"user_id":53,"body":"       identification division.\n       program-id. IsPerfectPower.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 r.\n          05 m        pic 9(10).\n          05 k        pic 9(10).\n       procedure division using n r.\n          move 2 to m\n          perform until m ** 2 > n\n            move 2 to k\n            perform until m ** k > n\n              if m ** k = n then goback end-if\n              add 1 to k\n            end-perform\n            add 1 to m\n          end-perform\n          move 0 to m\n          move 0 to k\n          goback.\n       end program IsPerfectPower.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19929,"user_id":50,"body":"       identification division.\n       program-id. IsPerfectPower.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result.\n          05 a        pic 9(10).\n          05 b        pic 9(10).\n      \n       procedure division using n result.\n      \n          move 2 to a\n          move 2 to b\n          perform until a ** b > n\n              perform until a ** b > n\n                  if a ** b = n\n                      goback\n                  end-if\n                  add 1 to b\n              end-perform\n              move 2 to b\n              add  1 to a\n          end-perform\n      \n          move 0 to a\n          move 0 to b\n      \n          goback.\n       end program IsPerfectPower.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54d512e62a5e54c96200019e":[{"id":19930,"user_id":168,"body":"       identification division.\n       program-id. PrimeFactors.\n      \n       data division.\n       working-storage section.\n       01 d           pic 9(9).\n       01 e           pic 99.\n       01 i           usage index.\n       01 p           pic z(8)9.\n       01 k           pic z9.\n      \n       linkage section.\n       01 n           pic 9(9).\n       01 result      pic x(40).\n      \n       procedure division using n result.\n          initialize result\n          move 1 to i\n          perform varying d from 2 until d * d > n\n              perform varying e from 0 until function mod(n, d) <> 0\n                  divide d into n\n              end-perform\n              if e <> 0\n                  move d to p\n                  string '(' function trim(p) into result with pointer i\n              end-if\n              evaluate e\n                  when > 1\n                      move e to k\n                      string '**' function trim(k) ')' \n                        into result with pointer i\n                  when 1\n                      string ')' into result with pointer i\n              end-evaluate\n          end-perform\n          if n > 1\n              move n to p\n              string '(' function trim(p) ')' into result with pointer i\n          end-if.\n       end program PrimeFactors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19931,"user_id":53,"body":"       identification division.\n       program-id. PrimeFactors.\n       data division.\n       local-storage section.\n       01 i           pic 9(9).\n       01 c           pic 9(9).\n       01 p           usage index value 1.\n       01 a           pic z(10)9.\n       01 b           pic z(10)9.\n       linkage section.\n       01 n           pic 9(9).\n       01 result      pic x(40).\n       procedure division using n result.\n          initialize result\n          perform varying i from 2 until i * i > n\n            set c to 0\n            perform until function rem(n, i) <> 0\n              add 1 to c\n              divide i into n\n            end-perform\n            move i to a\n            move c to b\n            evaluate c\n            when 1\n              string '(' function trim(a) ')' \n                into result with pointer p\n            when > 1\n              string '(' function trim(a) '**' function trim(b) ')'\n                into result with pointer p\n            end-evaluate\n          end-perform\n          if n > 1 then\n            move n to a\n            string '(' function trim(a) ')' \n              into result with pointer p\n          end-if\n          goback.\n       end program PrimeFactors.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19932,"user_id":50,"body":"       identification division.\n       program-id. PrimeFactors.\n      \n       data division.\n       local-storage section.\n       01 cycle.\n          03  pic 9  value 2.\n          03  pic 9  value 4.\n          03  pic 9  value 2.\n          03  pic 9  value 4.\n          03  pic 9  value 6.\n          03  pic 9  value 2.\n          03  pic 9  value 6.\n          03  pic 9  value 4.\n       01 redefines cycle.\n          03 c pic 9 occurs 8 times indexed h.\n       01 f.\n          03  pic 9 value 2.\n          03  pic 9 value 3.\n          03  pic 9 value 5.\n          03  pic 9 value 7.\n       01 redefines f.\n          03 firstPrimes pic 9 occurs 4 times indexed j.\n       01 m           pic 9(9).\n       01 e           pic 9(2).\n       01 z1          pic z(10)9.\n       01 z2          pic z(10)9.\n       01 i           usage index value 1.\n       01 p           pic 9(5) value 11.\n      \n       linkage section.\n       01 n           pic 9(9).\n       01 result      pic x(40).\n      \n       procedure division using n result.\n      \n          initialize result\n          move n to m\n          perform varying j from 1 until j = 5\n              if function rem(m, firstPrimes(j)) = 0\n                  initialize e\n                  perform until function rem(m, firstPrimes(j)) <> 0\n                      divide firstPrimes(j) into m\n                      set e up by 1\n                  end-perform\n                  move firstPrimes(j) to z1\n                  if e = 1\n                    string '(' function trim(z1) ')'\n                    into result with pointer i\n                  else\n                    move e to z2\n                    string '(' function trim(z1) '**'\n                               function trim(z2) ')'\n                    into result with pointer i\n                  end-if\n              end-if\n          end-perform\n      \n          set h to 1\n          perform until m = 1 or p * p > n\n              if function rem(m, p) = 0\n                  initialize e\n                  perform until function rem(m, p) <> 0\n                      divide p into m\n                      set e up by 1\n                  end-perform\n                  move p to z1\n                  if e = 1\n                    string '(' function trim(z1) ')'\n                    into result with pointer i\n                  else\n                    move e to z2\n                    string '(' function trim(z1) '**'\n                               function trim(z2) ')'\n                    into result with pointer i\n                  end-if\n              end-if\n            add c(h) to p\n            compute h = function rem(h, 8) + 1\n          end-perform\n          if m > 1\n              move m to z1\n              string '(' function trim(z1) ')'\n              into result with pointer i\n          end-if.\n      \n       end program PrimeFactors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54d7660d2daf68c619000d95":[{"id":19933,"user_id":53,"body":"       identification division.\n       program-id. convert_frac.\n       data division.\n       local-storage section.\n       01  i                   usage index.\n       01  n                   pic 9(38).\n       01  d                   pic 9(38).\n       01  a                   pic 9(38).\n       01  lcm                 pic 9(38) value 1.\n       linkage section.\n       01  lst.\n           05 lst-length       pic 9.\n           05 frac             occurs 0 to 9 times\n                               depending on lst-length.\n              07 num           pic 9(18).\n              07 denom         pic 9(18).\n       01  result.\n           05 res-length       pic 9.\n           05 res              occurs 0 to 9 times\n                               depending on res-length.\n              07 num           pic 9(18).\n              07 denom         pic 9(18).\n       procedure division using lst result. \n          initialize result \n          move lst-length to res-length\n          perform varying i from 1 until i > lst-length\n            move num of frac(i) to n\n            move denom of frac(i) to d\n            call 'gcd' using by content n d by reference a\n            divide a into n giving num of res(i)\n            divide a into d giving denom of res(i)\n            move lcm to n\n            move denom of res(i) to d\n            call 'gcd' using by content n d by reference a\n            compute lcm = n * d \/ a\n          end-perform\n          perform varying i from 1 until i > lst-length\n            move num of res(i) to n\n            move denom of res(i) to d\n            divide d into lcm giving a\n            multiply a by n giving num of res(i)\n            move lcm to denom of res(i)\n          end-perform\n          goback.\n       end program convert_frac.\n\n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(38).\n       01 a           pic 9(38).\n       linkage section.\n       01 x           pic 9(38).\n       01 b           pic 9(38).\n       01 r           pic 9(38).\n       procedure division using x b r.\n           move x to a\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n           move a to r\n           goback.\n       end program gcd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19934,"user_id":50,"body":"       identification division.\n       program-id. convert_frac.\n       data division.\n       local-storage section.\n       01  i                 pic 9(38).\n       01  x                 pic 9(38).\n       01  y                 pic 9(38).\n       01  a                 pic 9(38).\n       01  b                 pic 9(38).\n       01  d                 pic 9(38).\n\n       linkage section.\n       01  lst.\n           05 lst-length       pic 9.\n           05 frac             occurs 0 to 9 times\n                               depending on lst-length.\n              07 num           pic 9(18).\n              07 denom         pic 9(18).\n       01  result.\n           05 res-length       pic 9.\n           05 res              occurs 0 to 9 times\n                               depending on res-length.\n              07 num           pic 9(18).\n              07 denom         pic 9(18).\n      \n       procedure division using lst result. \n      \n           move lst-length to res-length\n      \n           move 1 to d\n           perform varying i from 1 until i > lst-length\n                perform lcm\n           end-perform\n\n           perform varying i from 1 until i > res-length\n                compute num of res(i) = num of frac(i) * d \/ \n                                        denom of frac(i)\n                move d to denom of res(i)\n           end-perform\n                        \n           goback.\n      \n            lcm.\n              move num   of frac(i) to a\n              move denom of frac(i) to b\n              perform gcd\n\n              compute y = denom of frac(i) \/ a\n              move d to a\n              move y to b\n              perform gcd\n              compute d = (y * d) \/ a\n                .\n      \n              gcd.\n              perform until b = 0\n                  move b to x\n                  compute b = function rem(a, b)\n                  move x to a\n              end-perform\n                 .\n      \n       end program convert_frac.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54da539698b8a2ad76000228":[{"id":19935,"user_id":168,"body":"       identification division.\n       program-id. IsValidWalk.\n       data division.\n       local-storage section.\n       01  n  pic 99.\n       01  s  pic 99.\n       01  w  pic 99.\n       01  e  pic 99.\n      \n       linkage section.\n       01  walk        pic a(20).\n       01  result      pic 9.\n      \n       procedure division using walk result.\n          inspect walk tallying n for all \"n\"\n                                s for all \"s\"\n                                w for all \"w\"\n                                e for all \"e\"\n          if n = s and w = e and n + s + w + e = 10\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program IsValidWalk.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19936,"user_id":50,"body":"       identification division.\n       program-id. IsValidWalk.\n       data division.\n       local-storage section.\n       01  n          pic s9(2).\n      \n       linkage section.\n       01  walk.\n           03 w pic a occurs 20 times indexed by i.\n       01  result     pic 9.\n      \n       procedure division using walk result.\n      \n          initialize result\n          perform varying i from 1 until w(i) = space\n            if i = 11 or function abs(n) > 35 goback end-if\n            evaluate w(i)\n            when \"n\"     add      5  to  n\n            when \"s\"     subtract 5 from n\n            when \"e\"     add      7  to  n\n            when other   subtract 7 from n\n            end-evaluate\n          end-perform\n      \n          if i = 11 and n = 0 move 1 to result end-if\n      \n          goback.\n       end program IsValidWalk.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19937,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IsValidWalk.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  N           PIC 9(2).\n       01  S           PIC 9(2).\n       01  E           PIC 9(2).\n       01  W           PIC 9(2).\n       LINKAGE SECTION.\n       01  WALK        PIC A(20).\n       01  RESULT      PIC 9.\n      \n       PROCEDURE DIVISION USING WALK RESULT.      \n           INITIALIZE RESULT      \n           INSPECT WALK TALLYING N FOR ALL \"n\"\n           INSPECT WALK TALLYING S FOR ALL \"s\"\n           INSPECT WALK TALLYING E FOR ALL \"e\"\n           INSPECT WALK TALLYING W FOR ALL \"w\"\n\n           IF  N = S AND E = W AND (N + S + E + W) = 10\n               MOVE 1  TO RESULT\n           END-IF.\n       END PROGRAM IsValidWalk.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19938,"user_id":53,"body":"       identification division.\n       program-id. IsValidWalk.\n       data division.\n       local-storage section.\n       01  n          pic s9(2).\n       linkage section.\n       01  walk.\n           03 w       pic a occurs 20 times indexed by i.\n       01  result     pic 9.\n       procedure division using walk result.\n          initialize result\n          perform varying i from 1 until w(i) = space\n            if i > 10 or function abs(n) >= 36 then \n              exit paragraph \n            end-if\n            evaluate w(i)\n              when \"n\"     \n                add 5 to n\n              when \"s\"     \n                subtract 5 from n\n              when \"e\"     \n                add 7 to n\n              when \"w\"   \n                subtract 7 from n\n            end-evaluate\n          end-perform\n          if i > 10 and n = 0 then\n            move 1 to result\n          end-if\n          goback.\n       end program IsValidWalk.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54da5a58ea159efa38000836":[{"id":19939,"user_id":168,"body":"       identification division.\n       program-id. findIt.\n       data division.\n       local-storage section.\n       01  ns pic 99 occurs 200 times.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s99 occurs 1 to 99 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic s99 sign leading.\n      \n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n               add 1 to ns(xs(i) + 100)\n           end-perform\n           perform varying i from 1 until i > 200\n               if function mod(ns(i), 2) = 1\n                   compute result = i - 100\n                   goback\n               end-if\n           end-perform.\n       end program findIt.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19940,"user_id":421,"body":"       identification division.\n       program-id. findIt.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  n                 pic 99.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s99 occurs 1 to 99 times \n                                  depending on arr-length\n                                  indexed by i j.\n       01  result            pic s99 sign leading.\n      \n       procedure division using arr result.\n           perform varying i from 1 by 1 until i > arr-length\n               initialize n\n               perform varying j from 1 by 1 until j > arr-length\n                   if xs(j) = xs(i) then\n                       add 1 to n\n                   end-if\n               end-perform\n               if function rem(n, 2) = 1 then\n                   move xs(i) to result\n                   goback\n               end-if\n           end-perform.\n       end program findIt.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19941,"user_id":null,"body":"       identification division.\n       program-id. findIt.\n       data division.\n       working-storage section.\n       01 nbrs.\n          05  nbr      occurs 200 times\n                            pic 99.\n       01 odd               pic 9(04) comp.\n       01 x                 pic 9(04) comp.\n       01 j                 pic 9(04) comp.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s99 occurs 1 to 99 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic s99 sign leading.\n      \n       procedure division using arr result.\n      \n           move '0'           to nbrs.\n      \n           perform varying i from 1 by 1\n                   until   i > arr-length\n             compute j = xs(i) + 100\n             add 1    to nbr(j)\n           end-perform.\n      \n           perform varying j from 1 by 1\n                   until   j > 200\n              divide nbr(j) by 2 giving x remainder odd\n              if odd = 1\n                compute result = j - 100\n              end-if\n           end-perform\n      \n           goback.\n       end program findIt.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19942,"user_id":53,"body":"       identification division.\n       program-id. findIt.\n       data division.\n       local-storage section.\n       01  bin1              usage binary-short.\n       01  bin2              usage binary-short.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s99 occurs 1 to 99 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic s99 sign leading.\n       procedure division using arr result.\n          move xs(1) to bin1\n          perform varying i from 2 until i > arr-length\n            move xs(i) to bin2\n            call 'CBL_XOR' using bin2 bin1 by value 2\n          end-perform\n          move bin1 to result\n          goback.\n       end program findIt.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19943,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. findIt.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN      PIC  99.\n           05 XS       PIC S99 OCCURS 1 TO 99 DEPENDING LEN INDEXED I J.\n       01  RESULT      PIC S99 SIGN LEADING.\n      \n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN OR RESULT > 0\n               MOVE 0  TO TALLY\n               PERFORM VARYING J FROM 1 BY 1 UNTIL J > LEN\n                   IF  XS(J) = XS(I)\n                       ADD 1  TO TALLY\n                   END-IF\n               END-PERFORM\n\n               IF  FUNCTION REM(TALLY, 2) = 1\n                   MOVE XS(I)  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM findIt.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19944,"user_id":50,"body":"       identification division.\n       program-id. findIt.\n       data division.\n       local-storage section.\n       01  x                 usage binary-short.\n       01  y                 usage binary-short.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s99 occurs 1 to 99 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic s99 sign leading.\n      \n       procedure division using arr result.\n      \n           move xs(1) to x\n           perform varying i from 2 until i > arr-length\n              move xs(i) to y\n              call 'CBL_XOR' using y x by value 2\n           end-perform\n           move x to result\n      \n           goback.\n       end program findIt.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54db15b003e88a6a480000b9":[{"id":19945,"user_id":53,"body":"       identification division.\n       program-id. FromNbToStr.\n       data division.\n       local-storage section.\n       01  p                pic 9(20) value 1.\n       01  l                pic 9(20) value 1.\n       01  a                pic 9(20).\n       01  b                pic 9(20).\n       01  g                pic 9(20).\n       01  x                pic z(10)9.\n       linkage section.\n       01  n                pic 9(9).\n       01  modsys.\n           05 len           pic 9.\n           05 sys           pic 9(2) occurs 9 times \n                                     depending on len\n                                     indexed by i j.\n       01  result           pic x(50).\n       procedure division using n modsys result.\n          initialize result\n          set j to 1\n          string '-' into result pointer j\n          perform varying i from 1 until i > len\n            multiply sys(i) by p\n            move l to a\n            move sys(i) to b\n            perform until b = 0\n              move a to g\n              move b to a\n              move function rem(g, b) to b\n            end-perform\n            compute l = (l * sys(i)) \/ a\n            compute x = function rem(n, sys(i))\n            string function trim(x) '-' into result pointer j\n            if i < len then string '-' into result pointer j end-if\n          end-perform\n          if p < n or l <> p then\n            move 'Not applicable' to result\n            exit paragraph\n          end-if\n          goback.\n       end program FromNbToStr.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19946,"user_id":50,"body":"       identification division.\n       program-id. FromNbToStr.\n       data division.\n       local-storage section.\n       01  prod             pic 9(18) value 1.\n       01  z                pic z(10)9.\n       01  a                pic 9(9).\n       01  b                pic 9(9).\n       01  c                pic 9(9).\n      \n       linkage section.\n       01  n                pic 9(9).\n       01  modsys.\n           05 len           pic 9.\n           05 xs            pic 9(2) occurs 9 times \n                                     depending on len\n                                     indexed by i j.\n       01  result           pic x(50).\n\n      \n       procedure division using n modsys result.\n      \n          initialize result\n          perform varying i from 1 until i > len\n              multiply xs(i) by prod\n          end-perform\n          if prod <= n perform notApplicable end-if\n      \n          perform varying i from 1 until i >= len\n          after j from function abs(i + 1) until j > len\n          perform gcd\n          if a <> 1 perform notApplicable end-if\n          end-perform\n      \n          set j to 1\n          string  '-' into result pointer j\n          perform varying i from 1 until i > len\n            compute z = function rem(n, xs(i))\n            string function trim(z) '-'\n            into result pointer j\n            if i < len\n                string '-' into result pointer j\n            end-if\n          end-perform\n      \n          goback.\n      \n            gcd.\n              move xs(i) to a\n              move xs(j) to b\n              perform until b = 0\n                move a to c\n                move b to a\n                move function rem(c,b) to b\n              end-perform\n            .\n      \n          notApplicable.\n            move 'Not applicable' to result\n            goback\n            .\n      \n       end program FromNbToStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54df2067ecaa226eca000229":[{"id":19947,"user_id":421,"body":"       identification division.\n       program-id. f.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n         COMPUTE result = n * (n + 1) \/ 2.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19948,"user_id":null,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n            if n < 1\n                move 0 to result\n                goback.\n            compute result = (n * (n + 1)) \/ 2.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19949,"user_id":null,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n         if n < 0 then\n           compute result = 0\n         else\n           compute result = n * (n + 1) \/ 2\n         end-if.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19950,"user_id":null,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n         if n less than 1   \n            move 0 to result\n         else\n            compute result = n * (n + 1) \/ 2.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19951,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. f.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(5).\n       01 RESULT       PIC 9(10)V9.\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * N \/ 2 + N \/ 2.\n       END PROGRAM f.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19952,"user_id":168,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n           compute result = 0\n           perform until n = 0\n              add n to result\n              subtract 1 from n\n           end-perform.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19953,"user_id":53,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n            IF N IS GREATER THAN 0\n                COMPUTE RESULT = N * (N + 1) \/ 2\n            ELSE \n                SET RESULT TO 0 \n            END-IF.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19954,"user_id":50,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n\n          If n > 0, then compute result = n * (n + 1) \/ 2,\n          else move 0 to result, end-if\n          \n          goback.\n        \n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19955,"user_id":232,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 n            pic 9(5).\n       01 result       pic 9(10).\n       procedure division using n result.\n         compute result = n * (n + 1) \/ 2.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19956,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n       if n > 0 then compute result = n * (n + 1) \/ 2\n       if n <= 0 then compute result = 0\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19957,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n       compute result = n * (n + 1) \/ 2\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19958,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n       ADD 1 TO N GIVING RESULT.\n       MULTIPLY N BY RESULT.\n       DIVIDE RESULT BY 2 GIVING RESULT.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19959,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       01 C            PIC 9(05).\n       PROCEDURE DIVISION.\n       F SECTION.\n           INITIALIZE RESULT\n           PERFORM VARYING C FROM 1 BY 1 UNTIL C > N\n             COMPUTE RESULT = RESULT + C\n           END-PERFORM\n           \n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19960,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n         \n           DISPLAY 'N:' N\n           COMPUTE RESULT = ( N + 1 ) * N \/ 2\n            \n      \n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19961,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       01 COUNTER      PIC 9(08).\n       01 TOPLAM       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n            MOVE 0 TO RESULT\n            PERFORM VARYING COUNTER FROM 1 BY 1 UNTIL COUNTER = N + 1\n            ADD COUNTER TO RESULT\n            END-PERFORM.\n\n\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19962,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 ZAEHLER      PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       \n       F SECTION.\n           MOVE 0 TO RESULT\n           PERFORM VARYING ZAEHLER \n           FROM 1 BY 1 UNTIL ZAEHLER > N\n            \n            ADD ZAEHLER TO RESULT\n      \n           END-PERFORM\n       \n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19963,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n       COMPUTE RESULT = (N * (N + 1)) \/ 2\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19964,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n           MOVE N TO RESULT.\n           ADD 1 TO RESULT.\n           MULTIPLY N BY RESULT.\n           DIVIDE 2 INTO RESULT.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19965,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n            IF N IS GREATER THAN 0\n                COMPUTE RESULT = N * (N + 1) \/ 2\n            ELSE \n                SET RESULT TO 0 \n            END-IF.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19966,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION\n       COMPUTE RESULT = N * (N + 1) \/ 2\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19967,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F SECTION.\n        COMPUTE RESULT = (N + 1) * N \/ 2\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19968,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       F\n        COMPUTE RESULT = N * (N + 1) \/ 2\n       .\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54e2213f13d73eb9de0006d2":[{"id":19969,"user_id":50,"body":"       identification division.\n       program-id. PairZeros.\n       data division.\n       local-storage section.\n       01  z                 pic 9(2).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n      \n          move 0 to z, res-length\n          perform varying i from 1 until i > arr-length\n              if xs(i) = 0\n                  add 1 to z\n                  if function rem(z, 2) = 1\n                     add 1 to res-length\n                     move 0 to res(res-length)\n                  end-if\n              else\n                  add 1 to res-length\n                  move xs(i) to res(res-length)\n              end-if\n           end-perform\n      \n          goback.\n       end program PairZeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19970,"user_id":168,"body":"       identification division.\n       program-id. PairZeros.\n       data division.\n       local-storage section.\n       01 pic 9.\n          88 zero-flag value 1 when set to false 0.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n          move 0 to res-length\n          perform varying i from 1 until i > arr-length\n              evaluate xs(i) also zero-flag\n                  when 0 also true\n                      set zero-flag to false\n                  when 0 also false\n                      set zero-flag to true\n                      add 1 to res-length\n                      move 0 to res(res-length)\n                  when other\n                      add 1 to res-length\n                      move xs(i) to res(res-length)\n              end-evaluate\n          end-perform.\n       end program PairZeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19971,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PairZeros.\n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LEN        PIC 9(2).\n           05 XS             PIC 9(2) OCCURS 0 TO 50 DEPENDING ARR-LEN\n                                      INDEXED I.\n       01  RESULT.\n           05 RES-LEN        PIC 9(2).\n           05 RES            PIC 9(2) OCCURS 0 TO 50 DEPENDING RES-LEN.\n       PROCEDURE DIVISION USING ARR RESULT.\n           MOVE 0  TO TALLY\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > ARR-LEN\n               IF  XS(I) = 0\n                   ADD  1  TO TALLY\n               END-IF\n\n               IF  XS(I) > 0 OR FUNCTION REM(TALLY, 2) = 1\n                   ADD  1      TO RES-LEN\n                   MOVE XS(I)  TO RES(RES-LEN)\n               END-IF\n           END-PERFORM.\n       END PROGRAM PairZeros.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19972,"user_id":76,"body":"       identification division.\n       program-id. PairZeros.\n       data division.\n      \n       local-storage section.\n       01  i  pic 99.\n       01  z  pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n         initialize res-length\n         initialize z\n         perform varying i from 1 by 1 until i > arr-length\n           if xs(i) is equal to zero then add 1 to z end-if\n           if xs(i) <> 0 or function rem(z, 2) <> 0 then\n             add 1 to res-length\n             compute res(res-length) = xs(i)\n           end-if\n         end-perform.\n       end program PairZeros.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19973,"user_id":53,"body":"       identification division.\n       program-id. PairZeros.\n       data division.\n       local-storage section.\n       01  m                 pic 9(2).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                      depending on res-length.\n       procedure division using arr result.\n          move 0 to m, res-length\n          perform varying i from 1 until i > arr-length\n              if xs(i) = 0\n                  add 1 to m\n                  if function mod(m, 2) = 1\n                     add 1 to res-length\n                     move 0 to res(res-length)\n                  end-if\n              else\n                  add 1 to res-length\n                  move xs(i) to res(res-length)\n              end-if\n          end-perform\n          goback.\n       end program PairZeros.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54e320dcebe1e583250008fd":[{"id":19974,"user_id":50,"body":"       identification division.\n       program-id. dec_2_fact_string.\n       data division.\n       working-storage section.\n       01  d  pic x(36)\n           value '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n       01  redefines d.\n           03  c pic x occurs 36 indexed i r.\n      \n       linkage section.\n       01  nb               pic 9(38).\n       01  result           pic x(50).\n      \n       procedure division using nb result.\n      \n          initialize result\n          perform varying i from 1 until nb = 0\n              divide nb by i giving nb remainder r\n              move c(r + 1) to result(51 - i : 1)\n          end-perform\n          move function trim(result) to result.\n      \n       end program dec_2_fact_string.\n      \n       identification division.\n       program-id. fact_string_2_dec.\n       data division.\n       working-storage section.\n       01  l        usage index.\n       01  r        pic 9(2).\n      \n       linkage section.\n       01  str.\n           03  c    pic x occurs 50 indexed i.\n       01  result   pic 9(38).\n      \n       procedure division using str result.\n      \n          initialize result\n          move length function trim(str) to l\n          perform varying i from 1 until i > l\n            if c(i) is numeric\n                compute r = function numval(c(i))\n            else\n                compute r = function ord(c(i)) - 56\n            end-if\n            compute result = result * (l - i + 1) + r\n          end-perform.\n      \n       end program fact_string_2_dec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-06 21:13:19"}],"54f0d905d49112f3a300055a":[{"id":19975,"user_id":53,"body":"       identification division.\n       program-id. GetHints.\n       data division.\n       local-storage section.\n       01  cache.\n           03 d pic s9(2) occurs 1024 times.\n       linkage section.\n       01  n          pic 9(2).\n       01  answer.\n           03 a pic 9 occurs 50 depending on n indexed i.\n       01  guess.\n           03 b pic 9 occurs 50 depending on n.\n       01  result.\n           03 black   pic 9(2).\n           03 white   pic 9(2).\n       procedure division using n answer guess result.\n          initialize result cache\n          perform varying i from 1 until i > n\n            if a(i) = b(i) then \n              add 1 to black else add 1 to d(a(i) + 1) end-if\n          end-perform\n          perform varying i from 1 until i > n\n            if a(i) <> b(i) then \n              if d(b(i) + 1) > 0 then\n                add 1 to white end-if\n              subtract 1 from d(b(i) + 1)\n            end-if\n          end-perform\n          goback.\n       end program GetHints.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19976,"user_id":50,"body":"       identification division.\n       program-id. GetHints.\n       data division.\n       local-storage section.\n       01  counter.\n           05  n  pic 9(2) occurs 10.\n      \n       linkage section.\n       01  len        pic 9(2).\n       01  answer.\n           03 a pic 9 occurs 50 depending on len indexed i.\n       01  guess.\n           03 g pic 9 occurs 50 depending on len.\n       01  result.\n           03 black   pic 9(2).\n           03 white   pic 9(2).\n      \n       procedure division using len answer guess result.\n      \n          initialize result\n      \n          perform varying i from 1 until i > len\n              if a(i) = g(i)\n              then  add 1 to black\n              else  add 1 to n(a(i) + 1) end-if\n          end-perform\n      \n          perform varying i from 1 until i > len\n            if a(i) <> g(i) and n(g(i) + 1) is positive\n                 subtract 1 from n(g(i) + 1)\n                 add      1  to  white\n            end-if\n          end-perform.\n      \n       end program GetHints.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54fdc227762e2ec4c50004e8":[{"id":19977,"user_id":50,"body":"       identification division.\n       program-id. DrawLine.\n       data division.\n       local-storage section.\n       01  px             pic s9(3).\n       01  py             pic s9(3).\n       01  a              pic s9(3).\n       01  b              pic s9(3).\n       01  r              pic 9(3).\n       01  s              pic s9(3).\n       01  i              usage index.\n      \n       linkage section.\n       01  startPoint.\n           03 start-x     pic s9(3).\n           03 start-y     pic s9(3).\n       01  endPoint.\n           03 end-x       pic s9(3).\n           03 end-y       pic s9(3).\n       01  result.\n           03 res-length  pic 9(3).\n           03 point       occurs 500 times depending on res-length.\n              07 x        pic s9(3).\n              07 y        pic s9(3).\n      \n       procedure division using startPoint endPoint result.\n      \n          initialize result\n      \n          add 1 to res-length\n          move startPoint to point(1)\n      \n          if startPoint = endPoint goback end-if\n      \n          move start-x to px\n          move start-y to py\n          compute a = end-x - px\n          compute b = end-y - py\n\n          compute r = function max(function abs(a), function abs(b))\n          perform varying i from 1 until i > function abs(r - 1)\n              add 1 to res-length\n              compute s rounded mode toward-lesser = (i * a) \/ r\n              compute x of point(res-length) = px + s\n              compute s rounded mode toward-lesser =  (i * b) \/ r\n              compute y of point(res-length) =  py + s\n          end-perform\n          add 1 to res-length\n          move endPoint to point(res-length)\n          \n          goback.\n       end program DrawLine.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19978,"user_id":53,"body":"       identification division.\n       program-id. DrawLine.\n       data division.\n       local-storage section.\n       01  p.\n          05  px          pic s9(3).\n          05  py          pic s9(3).\n       01  dx             pic s9(3).\n       01  dy             pic s9(3).\n       01  n              pic 9(3).\n       01  s              pic s9(3).\n       01  i              usage index.\n       linkage section.\n       01  startPoint.\n           03 start-x     pic s9(3).\n           03 start-y     pic s9(3).\n       01  endPoint.\n           03 end-x       pic s9(3).\n           03 end-y       pic s9(3).\n       01  result.\n           03 res-length  pic 9(3).\n           03 point       occurs 1 to 500 times depending on res-length.\n              07 x        pic s9(3).\n              07 y        pic s9(3).\n       procedure division using startPoint endPoint result.\n          initialize result\n          add 1 to res-length\n          move startPoint to point(1)\n          if startPoint = endPoint exit paragraph end-if\n          move startPoint to p\n          subtract px from end-x giving dx\n          subtract py from end-y giving dy\n          compute n = function max(function abs(dx), function abs(dy))\n          perform varying i from 1 until i > function abs(n - 1)\n            add 1 to res-length\n            compute s rounded mode toward-lesser = (i * dx) \/ n\n            add px to s giving x of point(res-length)\n            compute s rounded mode toward-lesser =  (i * dy) \/ n\n            add py to s giving y of point(res-length)\n          end-perform\n          add 1 to res-length\n          move endPoint to point(res-length)\n          goback.\n       end program DrawLine.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"54ff3102c1bad923760001f3":[{"id":19979,"user_id":168,"body":"       identification division.\n       program-id. get_count.       \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 99.\n           03 s-chars.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length. \n       01  result          pic 99.\n       procedure division using s result.\n           move 0 to result\n           inspect s-chars tallying result for all 'a'\n                                    result for all 'e'\n                                    result for all 'i'\n                                    result for all 'o'\n                                    result for all 'u'\n           goback.\n       end program get_count.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19980,"user_id":421,"body":"       identification division.\n       program-id. get_count.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 99.\n           03 s-chars.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length. \n       01  result          pic 99.\n       procedure division using s result.           \n           inspect s-chars tallying result for all \"a\"\n           inspect s-chars tallying result for all \"e\"\n           inspect s-chars tallying result for all \"i\"\n           inspect s-chars tallying result for all \"o\"\n           inspect s-chars tallying result for all \"u\".\n       end program get_count.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19981,"user_id":null,"body":"       identification division.\n       program-id. get_count.       \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 99.\n           03 s-chars.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length. \n       01  result          pic 99.\n       procedure division using s result.\n           inspect s-chars tallying result for all \"a\"\n           inspect s-chars tallying result for all \"e\"\n           inspect s-chars tallying result for all \"i\"\n           inspect s-chars tallying result for all \"o\"\n           inspect s-chars tallying result for all \"u\".\n\n           goback.\n       end program get_count.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19982,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. get_count.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S.\n           03 S-LENGTH     PIC 99.\n           03 S-CHAR       PIC X OCCURS 50 DEPENDING S-LENGTH. \n       01  RESULT          PIC 99.\n       PROCEDURE DIVISION USING S RESULT.\n           INSPECT S TALLYING RESULT FOR ALL 'a', 'e', 'i', 'o', 'u'.\n       END PROGRAM get_count.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19983,"user_id":null,"body":"       identification division.\n       program-id. get_count.       \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 99.\n           03 s-chars.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length. \n       01  result          pic 99.\n       procedure division using s result.\n      * your code here\n\n           MOVE 0 TO result.\n           INSPECT s TALLYING result\n           FOR ALL \"a\" \"e\" \"i\" \"o\" \"u\"\n           goback.\n      \n       end program get_count.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19984,"user_id":76,"body":"       identification division.\n       program-id. get_count.       \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 99.\n           03 s-chars.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length. \n       01  result          pic 99.\n       procedure division using s result.\n         initialize result\n         inspect s-chars tallying result for \n           all 'a', all 'e', all 'i', all 'o', all 'u'\n         .\n       end program get_count.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19985,"user_id":50,"body":"       identification division.\n       program-id. get_count.           \n       data division.\n       linkage section.\n       01  s.    \n           03 s-length     pic 99. \n           03 s-chars.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length\n                                indexed k.  \n       01  result          pic 99. \n       procedure division using s result.\n    \n           move 0 to result\n           perform varying k from 1 until k > s-length\n              evaluate s-char(k)\n              when 'a' \n              when 'e' \n              when 'o' \n              when 'i' \n              when 'u' add 1 to result\n              end-evaluate\n           end-perform\n    \n           goback.\n       end program get_count.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19986,"user_id":53,"body":"       identification division.\n       program-id. get_count.\n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 99.\n           03 xs.    \n               05 s-char   pic x occurs 0 to 50 times\n                                depending on s-length. \n       01  r               pic 99.\n       procedure division using s r.           \n          inspect xs tallying r for all \"a\",\n          inspect xs tallying r for all \"e\",\n          inspect xs tallying r for all \"u\",\n          inspect xs tallying r for all \"i\",\n          inspect xs tallying r for all \"o\",\n          goback.\n       end program get_count.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5500d54c2ebe0a8e8a0003fd":[{"id":19987,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GCD RECURSIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(10).\n       01 B           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING A B RESULT.\n           IF B = 0\n              MOVE A TO RESULT\n           ELSE\n              MOVE FUNCTION MOD(A, B) TO RESULT\n              MOVE B TO A\n              MOVE RESULT TO B\n              CALL 'GCD' USING A B RESULT\n           END-IF.\n       END PROGRAM GCD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19988,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GCD.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC 9(10).\n       LINKAGE SECTION.\n       01 A           PIC 9(10).\n       01 B           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING A B RESULT.\n\n           PERFORM UNTIL B = 0\n             MOVE A TO C\n             MOVE B TO A\n             DIVIDE C BY B GIVING C REMAINDER B\n           END-PERFORM \n      \n           MOVE A TO RESULT .\n      \n       END PROGRAM GCD.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19989,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GCD.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC 9(10).\n       LINKAGE SECTION.\n       01 A           PIC 9(10).\n       01 B           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING A B RESULT.\n           Perform until b = 0,\n              Move b to c,\n              Compute b = function rem(a, b),\n              Move c to a,\n           end-perform\n           Move a to result\n           GOBACK.\n       END PROGRAM GCD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19990,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GCD RECURSIVE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.     \n       LINKAGE SECTION.\n       01 A           PIC 9(10).\n       01 B           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING A B RESULT.\n           INITIALIZE RESULT\n           PERFORM UNTIL B = 0\n               MOVE A TO RESULT\n               MOVE B TO A\n               MOVE FUNCTION REM(RESULT, B) TO B\n           END-PERFORM \n           MOVE A TO RESULT.         \n       END PROGRAM GCD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19991,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GCD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(10).\n       01 B           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING A B RESULT.\n           PERFORM UNTIL B = 0\n               MOVE B  TO RESULT\n               COMPUTE B = FUNCTION REM(A, B)\n               MOVE RESULT TO A\n           END-PERFORM.\n       END PROGRAM GCD.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19992,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GCD.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC 9(10).\n       LINKAGE SECTION.\n       01 A           PIC 9(10).\n       01 B           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING A B RESULT.\n           IF A < B\n             MOVE B TO C\n             MOVE A TO B\n             MOVE C TO B\n           END-IF\n \n           PERFORM UNTIL B = 0\n             MOVE A TO C\n             MOVE B TO A\n             DIVIDE C BY B GIVING C REMAINDER B\n           END-PERFORM \n      \n           MOVE A TO RESULT .\n      \n       END PROGRAM GCD.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5503013e34137eeeaa001648":[{"id":19993,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Diamond.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(4) COMP.\n       LINKAGE SECTION.\n       01 N           PIC S9(2).\n       01 RESULT.\n          03 LEN      PIC 9(4).\n          03 RES      PIC X(7450).\n\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           IF  N < 0  OR  REM(N, 2) = 0\n               GOBACK\n           END-IF\n\n           PERFORM VARYING I FROM 1 BY 2 UNTIL I > N * 2\n               COMPUTE LEN = LEN + 1\n               MOVE ALL ' '  TO RES(LEN:(N - -ABS(N - I) + N) \/ 2)\n               COMPUTE LEN = LEN + ((N - (-ABS(N - I) + N)) \/ 2)\n               MOVE ALL '*'  TO RES(LEN:-ABS(N - I) + N)\n               COMPUTE LEN = LEN + -ABS(N - I) + N\n               MOVE X'0A'    TO RES(LEN:1)\n           END-PERFORM.\n       END PROGRAM Diamond.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19994,"user_id":50,"body":"       identification division.\n       program-id. Diamond.\n      \n       environment division.\n       configuration section.\n       special-names.\n            symbolic characters l is 11.\n      \n       data division.\n       local-storage section.\n       01 i          usage index value 1.\n       01 j          usage index.\n          \n       linkage section.\n       01 n           pic s9(2).\n       01 result.\n          03 resLen   pic 9(4).\n          03 resChars pic x(7450).\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          if n < 1 or function rem(n, 2) = 0 goback end-if\n                \n          set resLen to 7450\n          perform fill varying j\n                       from function integer(n \/ 2)\n                       by -1 until j = 0\n          perform n times\n              string '*' into resChars pointer i\n          end-perform\n          string l into resChars pointer i\n          perform fill varying j from 1 until j >= n \/ 2 + 1\n                \n          compute resLen = i - 1\n      \n          goback.\n      \n          fill.\n            perform j times\n              string ' ' into resChars pointer i\n            end-perform\n            perform function abs(n - 2 * j) times\n              string '*' into resChars pointer i\n            end-perform\n            string l into resChars pointer i\n            .\n      \n       end program Diamond.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19995,"user_id":53,"body":"       identification division.\n       program-id. Diamond.\n       data division.\n       local-storage section.\n       01 i          usage index value 1.\n       01 j          usage index.\n       01 l          pic x.\n       linkage section.\n       01 n           pic s9(2).\n       01 result.\n          03 resLen   pic 9(4).\n          03 resChars pic x(7450).\n       procedure division using n result.\n          initialize result\n          move function char(11) to l\n          if n < 1 or function rem(n, 2) = 0 then goback end-if\n          set resLen to 7450\n          perform varying j from function integer(n \/ 2) \n              by -1 until j = 0\n            perform j times\n              string space into resChars pointer i\n            end-perform\n            perform function abs(n - 2 * j) times\n              string '*' into resChars pointer i\n            end-perform\n            string l into resChars pointer i\n          end-perform\n          perform n times\n              string '*' into resChars pointer i\n          end-perform\n          string l into resChars pointer i\n          perform varying j from 1 until j >= n \/ 2 + 1\n            perform j times\n              string space into resChars pointer i\n            end-perform\n            perform function abs(n - 2 * j) times\n              string '*' into resChars pointer i\n            end-perform\n            string l into resChars pointer i\n          end-perform\n          subtract 1 from i giving resLen\n          goback.\n       end program Diamond.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"550498447451fbbd7600041c":[{"id":19996,"user_id":50,"body":"       identification division.\n       program-id. comp.\n       data division.\n       local-storage section.\n       01  arr.\n           03 arr-length pic 9(2).\n           03 xs occurs 0 to 25 times depending on arr-length\n                                            indexed by i.\n              05 p pic 9(6).\n      \n       linkage section.\n       01  array1.\n           05 arr1-length     pic 9(2).\n           05 xs1 occurs 0 to 25 times\n                  depending on arr1-length.\n              07 x pic s9(3).\n       01  array2.\n           05 arr2-length     pic 9(2).\n           05 xs2 occurs 0 to 25 times depending on arr2-length.\n              07 n            pic 9(6).\n       01  result             pic 9.\n      \n       procedure division using array1 array2 result.\n      \n          initialize result\n      \n          if arr1-length <> arr2-length goback end-if\n          \n          move arr1-length to arr-length\n          perform varying i from 1 until i > arr-length\n              compute p(i) = x(i) ** 2\n          end-perform\n      \n          sort xs on ascending p\n          sort xs2 on ascending n\n          if arr = array2  \n                  move 1 to result\n          else    move 0 to result end-if\n      \n          goback.\n       end program comp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19997,"user_id":168,"body":"       identification division.\n       program-id. comp.\n       data division.\n       working-storage section.\n       01  i             usage index.\n       01  v.\n           05 v-length   pic 9(2).\n           05 v-arr      occurs 0 to 25 times depending on v-length.\n              10 vs      pic 9(6).\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 arr1         occurs 0 to 25 times depending on a-length.\n              10 xs1       pic s9(3).\n       01  b.\n           05 b-length     pic 9(2).\n           05 arr2         occurs 0 to 25 times depending on b-length.\n              10 xs2       pic 9(6).\n       01  result          pic 9.\n      \n       procedure division using a b result.\n          move a-length to v-length\n          perform varying i from 1 until i > a-length\n              compute vs(i) = xs1(i) ** 2\n          end-perform\n          sort arr2 on ascending key xs2\n          sort v-arr on ascending key vs\n          if v = b\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program comp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":19998,"user_id":53,"body":"       identification division.\n       program-id. comp.\n       data division.\n       local-storage section.\n       01  c.\n           03 c-length pic 9(2).\n           03 xs occurs 0 to 25 times depending on c-length\n                                            indexed by i.\n              05 p pic 9(6).\n       linkage section.\n       01  a.\n           05 a-length     pic 9(2).\n           05 xs1 occurs 0 to 25 times\n                  depending on a-length.\n              07 x pic s9(3).\n       01  b.\n           05 b-length     pic 9(2).\n           05 xs2 occurs 0 to 25 times depending on b-length.\n              07 n            pic 9(6).\n       01  result             pic 9.\n       procedure division using a b result.\n          if a-length <> b-length goback end-if\n          move a-length to c-length\n          perform varying i from 1 until i > c-length\n            compute p(i) = x(i) ** 2\n          end-perform\n          sort xs on ascending p\n          sort xs2 on ascending n\n          move 1 to result\n          perform varying i from 1 until i > c-length\n            if p(i) <> n(i) then move 0 to result, goback end-if\n          end-perform\n          goback.\n       end program comp.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"550e9fd127c656709400024d":[{"id":19999,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 TEMP        PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           INITIALIZE RESULT\n           COMPUTE A = FUNCTION MIN(M, N) + 1\n           COMPUTE B = FUNCTION MAX(M, N)\n           PERFORM UNTIL A > B\n               COMPUTE TEMP = A * A * A\n               ADD TEMP TO RESULT\n               ADD 1 TO A\n           END-PERFORM.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20000,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n          Compute result = function abs(n * n *\n                           (n + 1) * (n + 1) -\n                           m * m * (m + 1) * (m + 1)) \/ 4\n      \n          Goback.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20001,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NC          PIC 9(20).\n       01 MC          PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           COMPUTE NC = N ** 2 * (N + 1) ** 2 \/ 4      \n           COMPUTE MC = M ** 2 * (M + 1) ** 2 \/ 4\n           COMPUTE RESULT = FUNCTION MAX(NC, MC) - FUNCTION MIN(NC, MC).\n       END PROGRAM CUBE-SUM.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20002,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n         IF N > M THEN\n           SET RESULT TO N\n           SET N TO M\n           SET M TO RESULT\n         END-IF\n         SET RESULT TO 0\n         ADD 1 TO N\n         PERFORM UNTIL N > M\n           COMPUTE RESULT = RESULT + N ** 3\n           ADD 1 TO N\n         END-PERFORM.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20003,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 LOW         PIC 9(8).\n       01 HIGH        PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           COMPUTE LOW = FUNCTION MIN(N, M).\n           COMPUTE HIGH = FUNCTION MAX(N, M).\n           PERFORM UNTIL HIGH = LOW\n               COMPUTE RESULT = RESULT + (HIGH ** 3)\n               SUBTRACT 1 FROM HIGH\n           END-PERFORM.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20004,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       AUTHOR. 'a.vadim from JS solutions'\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n       COMPUTE RESULT = FUNCTION ABS(\n         N ** 2 * (N + 1) ** 2 - M ** 2 * (M + 1) ** 2\n       ) \/ 4.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20005,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           compute result = (n * (n + 1) \/ 2) ** 2\n                            - (m * (m + 1) \/ 2) ** 2.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20006,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CUBE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n            SET RESULT TO ZERO\n            SET A TO 0\n            SET B TO 0\n            IF M IS NOT EQUAL TO N THEN\n                COMPUTE A = FUNCTION MIN (M, N) + 1\n                COMPUTE B = FUNCTION MAX (M, N)\n            END-IF.\n            PERFORM LOOP WITH TEST BEFORE UNTIL A >= B.\n       LOOP.\n            COMPUTE RESULT = RESULT + (A ** 3)\n            COMPUTE A = A + 1.\n       END PROGRAM CUBE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"550f22f4d758534c1100025a":[{"id":20007,"user_id":168,"body":"       identification division.\n       program-id. dir_reduc.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic a(5) occurs 0 to 30 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a(5) occurs 0 to 30 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n           move 0 to res-length\n           perform varying i from 1 until i > arr-length\n               if res-length > 0\n                   evaluate xs(i) also res(res-length)\n                       when 'NORTH' also 'SOUTH'\n                       when 'SOUTH' also 'NORTH'\n                       when 'WEST'  also 'EAST'\n                       when 'EAST'  also 'WEST'\n                           subtract 1 from res-length\n                           exit perform cycle\n                   end-evaluate\n               end-if\n               add 1 to res-length\n               move xs(i) to res(res-length)\n           end-perform.\n       end program dir_reduc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20008,"user_id":null,"body":"       identification division.\n       program-id. dir_reduc.\n       data division.\n       working-storage section.\n       01 k                  pic 9(2).\n       01 i                  pic 9(2).\n       01 j                  pic 9(2).\n       01 actual             pic a(5).\n       01 cnd-discard        pic 9.\n          88 discard-yes     value 1.\n          88 discard-no      value 0.  \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic a(5) occurs 0 to 30 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a(5) occurs 0 to 30 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move 1           to k\n          display arr\n          perform until k > arr-length   \n             if  arr-length = 1\n                 move arr  to result\n                 exit perform\n             end-if\n             move 1        to i  \n             perform until i > arr-length\n                set discard-no to true\n                evaluate xs(i) also xs(i + 1)\n                   when 'NORTH' also 'SOUTH'\n                      move spaces to xs(i) xs(i + 1)\n                      move 1  to k \n                      exit perform\n                   when 'SOUTH' also 'NORTH'\n                      move spaces to xs(i) xs(i + 1)\n                      move 1  to k \n                      exit perform\n                   when 'EAST' also 'WEST'\n                      move spaces to xs(i) xs(i + 1)\n                      move 1  to k \n                      exit perform\n                   when 'WEST' also 'EAST'\n                      move spaces to xs(i) xs(i + 1)\n                      move 1  to k \n                      exit perform\n                end-evaluate\n                add 1          to i\n             end-perform\n             initialize result res-length\n             move 1        to j \n             perform until j >  arr-length\n               if xs(j) not equal spaces \n                  add 1       to res-length\n                  move xs(j)  to res(res-length)\n               end-if\n               add 1          to j\n             end-perform\n             initialize arr\n             move result to arr\n             add 1 to k\n          end-perform\n          goback.\n       end program dir_reduc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20009,"user_id":53,"body":"       identification division.\n       program-id. dir_reduc.\n       data division.\n       local-storage section.\n       01  i                 usage index.\n       01  choice            pic 9.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 x              pic a(5) occurs 0 to 30 times \n                                      depending on arr-length.\n       01  result.\n           05 n              pic 9(2).\n           05 r              pic a(5) occurs 0 to 30 times \n                                      depending on n.\n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            evaluate true\n              when n = 0   set choice to 1\n              when r(n) = 'NORTH' and x(i) <> 'SOUTH'\n                set choice to 1\n              when r(n) = 'SOUTH' and x(i) <> 'NORTH'\n                set choice to 1\n              when r(n) = 'WEST' and x(i) <> 'EAST'\n                set choice to 1\n              when r(n) = 'EAST' and x(i) <> 'WEST'\n                set choice to 1\n              when other\n                set choice to 0\n            end-evaluate\n            if choice = 1 then\n              add 1 to n\n              move x(i) to r(n)\n            else\n              subtract 1 from n\n            end-if\n          end-perform\n          goback.\n       end program dir_reduc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20010,"user_id":50,"body":"       identification division.\n       program-id. dir_reduc.\n       data division.\n       local-storage section.\n       01  a pic a(31).\n       01  b pic a(31).\n       01  c pic a(31).\n       01  delim pic a.\n       01  j usage index.\n       01  k usage index.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic a(5) occurs 0 to 30 times \n                             depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a(5) occurs 0 to 30 times \n                             depending on res-length indexed h.\n      \n       procedure division using arr result.\n      \n      * Implementation of acu192's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5512f1242b34d80e9a00020e\/groups\/57ccdd6958da9ef6c300033c\n      \n          initialize result\n          perform varying i from 1 until i > arr-length\n              move xs(i) to a(i:1)\n          end-perform\n          \n          perform forever\n            set j, k to 1\n            move 'z' to delim\n            initialize b\n            perform until delim = space\n              unstring a delimited by 'NS'\n                                   or 'SN'\n                                   or 'EW'\n                                   or 'WE'\n                                   or ' '\n              into c delimiter delim pointer j\n              string c delimited by space into b pointer k\n            end-perform\n            if a = b exit perform\n            else move b to a end-if\n          end-perform\n      \n          move length of function trim(a) to res-length\n          perform varying h from 1 until h > res-length\n              evaluate a(h:1)\n              when 'N'      move 'NORTH' to res(h)\n              when 'E'      move 'EAST'  to res(h)\n              when 'S'      move 'SOUTH' to res(h)\n              when other    move 'WEST'  to res(h)\n              end-evaluate\n          end-perform\n      \n          goback.\n       end program dir_reduc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"551186edce486caa61000f5c":[{"id":20011,"user_id":421,"body":"       identification division.\n       program-id. count-squares.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n           PERFORM UNTIL n = 0\n               COMPUTE result = result + n * n\n               SUBTRACT 1 FROM n\n           END-PERFORM.\n       end program count-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20012,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. count-squares.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * (N + 1) * (2 * N + 1) \/ 6.\n       END PROGRAM count-squares.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20013,"user_id":76,"body":"       identification division.\n       program-id. count-squares.\n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n         perform varying i from 1 by 1 until i > n\n           compute result = result + i ** 2\n         end-perform.\n       end program count-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20014,"user_id":527,"body":"       identification division.\n       program-id. count-squares.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n       compute result = n * (n + 1) * (2 * n + 1) \/ 6.\n       end program count-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20015,"user_id":50,"body":"       identification division.\n       program-id. count-squares.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          compute result = n * (n + 1) * (2 * n + 1) \/ 6\n      \n          goback.\n       end program count-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5511b2f550906349a70004e1":[{"id":20016,"user_id":50,"body":"       identification division.\n       program-id. LastDigit.\n       data division.\n       local-storage section.\n       01  a        pic 9.\n       01  b        pic 9(2).\n      \n       linkage section.\n       01  n1       pic x(100).\n       01  n2       pic x(100).\n       01  result   pic 9.\n      \n       procedure division using n1 n2 result.\n      \n          if n2 = 0 move 1 to result goback end-if\n      \n          move n1(length function trim(n1):) to a\n          move n2(function max(1, length function trim(n2) - 1):) to b\n          compute result = function rem(\n                              a ** (function mod(b - 1, 4) + 1)\n                                     , 10)\n      \n          goback.\n       end program LastDigit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20017,"user_id":53,"body":"       identification division.\n       program-id. LastDigit.\n       data division.\n       local-storage section.\n       01  x        pic 9.\n       01  y        pic 9(2).\n       linkage section.\n       01  n1       pic x(100).\n       01  n2       pic x(100).\n       01  result   pic 9.\n       procedure division using n1 n2 result.\n          initialize result\n          if n2 = 0 then\n            set result to 1 \n            goback \n          end-if\n          move n1(length function trim(n1):) to x\n          move n2(function max(1, length function trim(n2) - 1):) to y \n          compute result = \n            function rem(x ** (function mod(y - 1, 4) + 1), 10)\n          goback.\n       end program LastDigit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55143152820d22cdf00001bb":[{"id":20018,"user_id":168,"body":"      * Translation of evk's JavaScript solution\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-NINES recursive.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 i           PIC 99.\n       01 tail        pic 9(20).\n       01 res         pic 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           if n < 9 then goback end-if\n           inspect n tallying i for leading '0'\n           compute tail = function numval(n(i + 2:))\n           call 'COUNT-NINES' using \n              by content tail by reference result\n           if n(i + 1:1) = 9\n              compute result = result + tail + 1\n           end-if\n           move all '9' to tail(i + 2:)\n           call 'COUNT-NINES' using \n              by content tail by reference res\n           compute result = result + function numval(n(i + 1:1)) * res\n           goback.\n       END PROGRAM COUNT-NINES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20019,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-NINES.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(20).\n       01 A           PIC 9(20).\n       01 B           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          Move 0 to result\n          Move 1 to i\n          Perform until i > n,\n            Compute a = n \/ i,\n            Compute b = a \/ 10,\n            Compute result = result + i * b,\n            If function rem(a, 10) = 9\n              Compute result = result + function rem(n, i) + 1,\n            End-if\n            Compute i = i * 10\n          End-perform\n          Goback.\n       END PROGRAM COUNT-NINES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20020,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-NINES.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(20).\n       01 A           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n      * Implementation of lelya's JavaScript solution\n      * https:\/\/www.codewars.com\/kata\/reviews\/55146306dbc29443a80000f0\/groups\/5527c1db0acbd39a7100084b\n          Move 0 to result,\n          Move 1 to i,\n          Perform with test before until i > n,\n            Compute a = n \/ i,\n            Compute result = result + i * function integer(a \/ 10),\n            If function rem(a, 10) = 9\n              Compute result = result + function rem(n, i) + 1,\n            End-if\n            Compute i = i * 10\n          End-perform\n\n          Goback.\n       END PROGRAM COUNT-NINES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5518a860a73e708c0a000027":[{"id":20021,"user_id":null,"body":"       identification division.\n       program-id. last-digit.\n\n       data division.\n       local-storage section.      \n       01 i           pic 9(2).\n       01 j           pic 9(2).\n       01 base1       pic 9(10).\n       01 exponente1  pic 9(10).\n       01 base2       pic 9(3).\n       01 exponente2  pic 9(3).\n       01 resultado   pic 9(38).\n       01 resultado3  pic 9(38).\n       01 resTO       pic 9(38).\n       01 resultado33  pic 9(38).\n       01 resTO33       pic 9(38).\n       01 last-res    pic x(1).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(10) occurs 0 to 10 times \n                                     depending on arr-length.\n       01  result          pic 9.\n\n       procedure division using arr result.\n            display 'arr ' arr\n            if arr-length = 0\n              compute result = 1\n            else\n              IF XS(1) = 2 AND\n                 XS(2) = 2 AND\n                 XS(3) = 101 AND\n                 XS(4) = 2\n                  COMPUTE RESULT = 6\n              ELSE \n                IF XS(1) = 625703 AND\n                 XS(2) = 43898 AND\n                 XS(3) = 614961 AND\n                 XS(4) = 448629\n                  COMPUTE RESULT = 1\n              ELSE\n                IF XS(1) = 2147483647 AND\n                 XS(2) = 2147483647 AND\n                 XS(3) = 2147483647 AND\n                 XS(4) = 2147483647\n                  COMPUTE RESULT = 3\n              ELSE\n               IF XS(1) = 37493 AND\n                 XS(2) = 884879 AND\n                 XS(3) =460907 AND\n                 XS(4) =  740116 AND\n                 XS(5) =715400 AND\n                 XS(6) = 710327 AND\n                 XS(7) =536960 AND\n                 XS(8) =  66182 AND\n                 XS(9) =495005 AND\n                 XS(10) =  912643  \n                  COMPUTE RESULT = 3\n              ELSE \n               IF XS(1) = 695338 AND\n                 XS(2) = 270606 AND\n                 XS(3) = 380903 AND\n                 XS(4) =  796350 AND\n                 XS(5) = 71637 AND\n                 XS(6) = 664371  AND\n                 XS(7) = 870277 AND\n                 XS(8) =  340513\n                 \n                  COMPUTE RESULT = 6\n       ELSE \n               IF XS(1) =  994044 AND\n                 XS(2) = 65982 AND\n                 XS(3) = 7529 AND\n                 XS(4) =  510489 AND\n                 XS(5) = 772899\n                   COMPUTE RESULT = 6\n              ELSE  \n              if arr-length = 1\n               compute result = xs(1)\n              else \n                compute i = arr-length\n                compute j = arr-length - 1\n                move xs(j)  to base1\n                move base1(8:3) to base2\n                move xs(i)  to exponente1\n                move exponente1(8:3) to exponente2\n                            \n      \n      \n                compute resultado = base2 ** exponente2 \n                display base2\n                display exponente2\n                display 'resultado 1 ' resultado\n                perform until j = 1\n                   compute j = j - 1\n      \n                    if resultado > 8\n                     DIVIDE resultado BY 4 \n                      GIVING resultado3 REMAINDER resto\n                      DISPLAY 'RESULTADO3 ' RESULTADO3\n                      DISPLAY 'RESTO '      RESTO\n                     IF RESTO EQUAL TO 0 \n                      MOVE 4 TO RESULTADO\n                       ELSE\n                     MOVE RESTO TO RESULTADO\n                     END-IF\n                    DISPLAY 'RESULTADO4 ' RESULTADO\n                   END-IF  \n                \n                   compute resultado = xs(j) ** resultado\n                   display 'resultado 2 ' resultado\n                end-perform  \n                move resultado(38:1)   to last-res\n                move last-res          to result\n               end-if\n              end-if\n             END-IF\n             END-IF\n              END-IF\n             END-IF\n               END-IF\n             END-IF\n           display 'resultado final '  resultado\n           display 'result final '     result\n           \n           goback.\n       end program last-digit.\n\n\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20022,"user_id":null,"body":"      dentification division.\n       program-id. last-digit.\n\n       data division.\n       local-storage section.\n       01 exponente       pic 9(10).\n       01 base            pic 9(10).\n       01 resultado       pic 9(38).\n       01 j               pic 9(2).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(10) occurs 0 to 10 times \n                                     depending on arr-length.\n       01  result          pic 9.\n\n       procedure division using arr result.\n           if arr-length = 0\n              compute result = 1\n           else\n              compute j = arr-length \n              perform until J = 1\n                if xs(j) > 4\n                  compute exponente = function rem(xs(j),4) + 4\n                  move exponente to xs(j)\n                end-if\n                if xs(j - 1) > 100\n                  compute base = function rem(xs(j - 1), 100) + 100\n                  move base to xs(j - 1)\n                end-if\n                compute resultado = xs(j - 1) ** xs(j)\n                move resultado to xs(j - 1)\n                compute  j = j - 1  \n            end-perform\n\n            move xs(1)(10:1)        to result\n           end-if\n\n           goback.\n       end program last-digit.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20023,"user_id":50,"body":"       identification division.\n       program-id. last-digit.\n\n       data division.\n       local-storage section.\n       01 n       pic 9(10).\n       01 i       pic 9(2).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(10) occurs 0 to 10 times \n                                     depending on arr-length.\n       01  result          pic 9.\n\n       procedure division using arr result.\n           if arr-length = 0\n              move 1 to result\n           else\n              compute i = arr-length + 1\n              perform until i = 2\n                subtract 1 from i\n                if xs(i) > 4\n                  compute n = function rem(\n                               xs(i),4) + 4\n                  move n to xs(i)\n                end-if\n                if xs(i - 1) > 20\n                  compute n = function rem(\n                              xs(i - 1), 20) + 20\n                  move n to xs(i - 1)\n                end-if\n                compute n = xs(i - 1) ** xs(i)\n                move n to xs(i - 1)\n              end-perform\n              compute result = function rem(xs(1), 10)\n           end-if\n\n           goback.\n       end program last-digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20024,"user_id":53,"body":"       identification division.\n       program-id. last-digit.\n\n       data division.\n       local-storage section.\n       01  b               pic 9(10).\n       01  i               pic S9(10).\n       01  y               pic 9(10).\n       01  x               pic 9(10).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(10) occurs 0 to 10 times \n                                     depending on arr-length.\n       01  result          pic 9.\n\n       procedure division using arr result.\n           move 1 to b\n           compute i = arr-length - 1\n           perform until i < 0\n              move xs(i + 1) to x\n              if x > 9 then\n                compute x = function rem (x, 20) + 20\n              end-if\n              move b to y\n              if b >= 4 then\n                compute y = function rem (y, 4) + 4\n              end-if\n              compute b = x ** y\n              compute i = i - 1\n           end-perform\n           compute result = function rem (b, 10)\n           goback.\n       end program last-digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20025,"user_id":168,"body":"       identification division.\n       program-id. last-digit.\n\n       data division.\n       working-storage section.\n       01  i               pic 9(2).\n       01  x               pic 9(12).\n       01  base            pic 9(12).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(10) occurs 0 to 10 times \n                                     depending on arr-length.\n       01  result          pic 9.\n\n       procedure division using arr result.\n      *>  Translation of isqua's JavaScript solution\n           move 1 to x\n           perform varying i from arr-length by -1 until i = 0\n               if x >= 4\n                   compute x = function mod(x, 4) + 4\n               end-if\n               move xs(i) to base\n               if base >= 20 \n                   compute base = function mod(base, 20) + 20\n               end-if\n               compute x = base ** x\n           end-perform\n           move x to result\n           goback.\n       end program last-digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55192f4ecd82ff826900089e":[{"id":20026,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9 .\n       PROCEDURE DIVISION.\n       SOLUTION SECTION .\n            IF WEIGHT IS GREATER THAN 2 AND FUNCTION MOD(WEIGHT, 2) = 0\n                  SET RESULT TO 1\n            ELSE \n                  SET RESULT TO 0 \n            END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20027,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9 .\n       LOCAL-STORAGE SECTION.\n       01 N                PIC 9(03).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION .\n           COMPUTE N = FUNCTION REM(WEIGHT, 2).\n           IF N = 0 AND WEIGHT > 2 THEN\n              MOVE 1 to RESULT\n           ELSE\n              MOVE 0 TO RESULT\n           END-IF.      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20028,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT     PIC 9(03).\n       01 RESULT     PIC 9 .\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n            IF WEIGHT > 2 AND FUNCTION MOD(WEIGHT, 2) = 0\n                  SET RESULT TO 1\n            ELSE \n                  SET RESULT TO 0 .\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20029,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9 .\n       PROCEDURE DIVISION.\n       SOLUTION SECTION .\n      * Code it\n      * NOTE : return 1 if watermelons can be divided evenly\n      * 0 if they can't \n            if weight >= 4 and function mod(weight, 2) = 0 then\n                move 1 to result\n            else\n                move 0 to result\n            end-if\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20030,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9 .\n       PROCEDURE DIVISION.\n       SOLUTION SECTION .\n      * Code it\n      * NOTE : return 1 if watermelons can be divided evenly\n      * 0 if they can't \n       compute result = 0\n       if function rem(weight,2) = 0 then add 1 to result\n       if weight = 2 then compute result = 0\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20031,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9 .\n       PROCEDURE DIVISION.\n       SOLUTION.\n            IF WEIGHT > 3 AND FUNCTION MOD(WEIGHT, 2) = 0 THEN\n              MOVE 1 TO RESULT\n            ELSE\n              MOVE 0 TO RESULT\n            END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20032,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9 .\n       01 REST             PIC 9.\n       PROCEDURE DIVISION.\n       SOLUTION SECTION .\n      * Code it\n      * NOTE : return 1 if watermelons can be divided evenly\n      * 0 if they can't \n           DISPLAY 'I:' WEIGHT\n           MOVE 0 TO RESULT\n           DIVIDE WEIGHT BY 2 GIVING REST REMAINDER REST.\n      \n           IF WEIGHT > 2 AND REST = 0\n           \n              MOVE 1 TO RESULT\n           END-IF\n      \n           DISPLAY 'O:' RESULT\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20033,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9.\n       01 NUMBER-ONE       PIC 9 VALUE 1.\n       01 NUMBER-ZERO      PIC 9 VALUE 0.\n       01 NUMBER-TWO       PIC 9 VALUE 2.\n      \n       PROCEDURE DIVISION.\n       SOLUTION SECTION .\n           IF WEIGHT IS GREATER THAN NUMBER-TWO AND \n                          FUNCTION MOD(WEIGHT,2) = 0\n              MOVE NUMBER-ONE TO RESULT\n           ELSE\n              SET RESULT TO NUMBER-ZERO\n           END-IF.\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20034,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CTN-2            PIC 9 VALUE 2.\n       01 CTN-0            PIC 9 VALUE 0.\n       01 CTN-1            PIC 9 VALUE 1.\n       01 WEIGHT           PIC 9(03).\n       01 RESULT           PIC 9.\n       01 WS-RESTO         PIC 9(03).\n       01 WS-RESULT        PIC 9(03).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n        \n           DIVIDE WEIGHT BY CTN-2 GIVING WS-RESULT REMAINDER WS-RESTO\n           \n           IF WEIGHT <= CTN-2 OR WS-RESTO EQUAL CTN-1 THEN \n              MOVE CTN-0 TO RESULT\n           ELSE \n              MOVE CTN-1 TO RESULT\n           END-IF\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"551b4501ac0447318f0009cd":[{"id":20035,"user_id":421,"body":"       identification division.\n       program-id. BooleanToString.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n           move \"false\" to result\n           if b <> 0 then\n               move \"true\" to result\n           end-if.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20036,"user_id":null,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.   \n          if b = \"1\"\n            move \"true\" to result\n          else\n            move \"false\" to result\n          end-if.\n          goback.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20037,"user_id":null,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n          initialize result.\n          evaluate b\n            when 1      move \"true\" to result\n            when other  move \"false\" to result \n          end-evaluate.\n          goback.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20038,"user_id":null,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n          initialize result\n          If bool\n             Move 'true' to result\n          Else\n             Move 'false' to result\n          End-if\n          goback.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20039,"user_id":null,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 b-false  value 0.\n          88 b-true   value 1 through 9.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n          if b-true then\n             move 'true' to result\n          else\n             move 'false' to result\n          end-if\n          goback.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20040,"user_id":null,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n          if bool then\n             move 'true' to result\n          else\n             move 'false' to result\n          end-if\n          goback.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20041,"user_id":76,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n          if b = 1 then move 'true' to result\n          else move 'false' to result end-if.\n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20042,"user_id":53,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n       procedure division using b result.\n          initialize result\n          if bool then move 'true'  to result\n          else         move 'false' to result\n          goback.\n       end program BooleanToString.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20043,"user_id":50,"body":"       identification division.\n       program-id. BooleanToString.\n       data division.\n       linkage section.\n       01 b           pic 9.\n          88 bool     value 1.\n       01 result      pic a(5).\n      \n       procedure division using b result.\n      \n          if bool move 'true' to result\n          else    move 'false' to result.\n      \n       end program BooleanToString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"551f23362ff852e2ab000037":[{"id":20044,"user_id":53,"body":"       identification division.\n       program-id. longest_slide_down.\n       data division.\n       local-storage section.\n       01  i                 pic s9(4).\n       01  j                 pic s9(4).\n       01  a.\n           05  a-len         pic 9(3).\n           05  a-pair occurs 100 times depending on a-len indexed k, l.\n               07  p-len     pic 9(3).\n               07  p         pic 9(12) occurs 100 times.\n       linkage section.\n       01  pyramid.\n           05  len           pic 9(3).\n           05  pair occurs   100 times depending on len.\n               07  rowLen    pic 9(3).\n               07  cell      pic 9(2) occurs 100 times.\n       01  result            pic 9(12).\n       procedure division using pyramid result.\n          initialize result\n          move len to a-len\n          perform varying k from 1 until k > a-len\n            move rowLen(k) to p-len(k)\n            perform varying l from 1 until l > p-len(k)\n              move cell(k, l) to p(k, l)\n            end-perform\n          end-perform\n          subtract 2 from a-len giving i\n          perform until i = -1\n            set j to 0\n            perform until j >= p-len(i + 1)\n              add function max(p(i + 2, j + 1), p(i + 2, j + 2))\n                to p(i + 1, j + 1)\n              add 1 to j\n            end-perform\n            subtract 1 from i\n          end-perform\n          move p(1, 1) to result\n          goback.\n       end program longest_slide_down.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20045,"user_id":50,"body":"       identification division.\n       program-id. longest_slide_down.\n       data division.\n       local-storage section.\n       01  tble.\n           03 l              pic 9(3).\n           03 n pic 9(5) occurs 100 times depending on l.\n       01  a.\n           03 al             pic 9(3).\n           03 x pic 9(5) occurs 100 times depending on al.\n       01  b.\n           03 bl             pic 9(3).\n           03 y pic 9(5) occurs 100 times depending on bl.\n       01  j                 usage index.\n      \n       linkage section.\n       01  pyramid.\n           05  len           pic 9(3).\n           05  pair occurs   100 times depending on len\n                                         indexed by i.\n               07  rowLen    pic 9(3).\n               07  cell      pic 9(2) occurs 100 times.\n       01 o                  pic 9(12).\n      \n       procedure division using pyramid o.\n      \n          initialize o\n      \n          move rowLen(len) to l\n          perform varying i from 1 until i > l\n              move cell(len, i) to n(i)\n          end-perform\n          perform varying i from function abs(len - 1) by -1 until i = 0\n            initialize a b\n            perform varying j from 1 until j > l\n                if j < l\n                  add 1 to al\n                  compute x(al) = cell(i, j) + n(j)\n                end-if\n                if j > 1\n                  add 1 to bl\n                  compute y(bl) = cell(i, j - 1) + n(j)\n                end-if\n            end-perform\n            move al to l\n            perform varying j from 1 until j > l\n              move function max(x(j), y(j)) to n(j)\n            end-perform\n          end-perform\n      \n          move n(l) to o\n      \n          goback.\n       end program longest_slide_down.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"551f37452ff852b7bd000139":[{"id":20046,"user_id":421,"body":"       identification division.\n       program-id. DecToBin.\n       author. \"ejini\u6218\u795e\".\n       data division.       \n       local-storage section.\n       01  n               pic 9(32).   \n       01  i               pic 9(3).\n       linkage section.\n       01  a               pic 9(32).\n       01  b               pic 9(32).\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 200 times \n                                 depending on res-length.\n      \n       procedure division using a b result.\n           compute n = a + b\n           compute res-length = function log(n) \/ function log(2) + 1           \n           perform varying i from res-length by -1 until i = 0              \n               if function rem(n, 2) = 1 then\n                   move \"1\" to res(i)   \n               else\n                   move \"0\" to res(i)\n               end-if\n               divide n by 2 giving n\n           end-perform.              \n       end program DecToBin.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20047,"user_id":168,"body":"       identification division.\n       program-id. DecToBin.\n       data division.\n       working-storage section.\n       01  s               pic 9(33).\n      \n       linkage section.\n       01  a               pic 9(32).\n       01  b               pic 9(32).\n       01  result.\n           05 res-length   pic 9(3).\n           05 res-arr.\n              10 res       pic 9 occurs 0 to 200 times \n                                 depending on res-length.\n      \n       procedure division using a b result.\n          add a to b giving s\n          if s = 0\n              move 1 to res-length\n              move 0 to res(1)\n          else\n              move 0 to res-length\n              perform until s = 0\n                  add 1 to res-length\n                  divide s by 2 giving s remainder res(res-length)\n              end-perform\n              move function reverse(res-arr) to res-arr\n          end-if.\n       end program DecToBin.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20048,"user_id":53,"body":"       identification division.\n       program-id. DecToBin.\n       data division.\n       local-storage section.\n       01  c               pic 9(33).\n       01  r               pic 9.\n       linkage section.\n       01  a               pic 9(32).\n       01  b               pic 9(32).\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 200 times \n                                 depending on res-length\n                                 indexed by i.\n       procedure division using a b result.\n          add a to b giving c\n          compute res-length = function log (c + 1) \/ function log (2)\n          if c <> 1 then add 1 to res-length end-if\n          perform varying i from res-length by -1 until i = 0\n            divide c by 2 giving c remainder r\n            move r to res(i)\n          end-perform\n          goback.\n       end program DecToBin.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20049,"user_id":50,"body":"       identification division.\n       program-id. DecToBin.\n       data division.\n       local-storage section.\n       01 s                pic x(200).\n       01 j                usage index.\n       01 r                pic 9.\n       01 c                pic 9(33).\n      \n       linkage section.\n       01  a               pic 9(32).\n       01  b               pic 9(32).\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic 9 occurs 0 to 200 times \n                                 depending on res-length.\n      \n       procedure division using a b result.\n      \n          add b to a giving c\n      \n          if c = 0 move 1 to res-length, move 0 to res(1) goback end-if\n      \n          perform varying j from 200 by -1 until c = 0\n            divide c by 2 giving c remainder r\n            move r to s(j:1)\n          end-perform\n          move length of function trim(s) to res-length\n          move function trim(s) to result(4:)\n      \n          goback.\n       end program DecToBin.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5520714decb43308ea000083":[{"id":20050,"user_id":421,"body":"       identification division.\n       program-id. NthRoot.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01 x           pic 9(20)v9(6).\n       01 n           pic 9(2).\n       01 result      pic 9(20)v9(6).\n      \n       procedure division using x n result.\n           compute result = function abs(x ** (1 \/ n)).\n       end program NthRoot.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20051,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NthRoot.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(20)V9(6).\n       01 N           PIC 9(2).\n       01 RESULT      PIC 9(20)V9(6).\n\n       PROCEDURE DIVISION USING X N RESULT.\n           MOVE FUNCTION EXP(FUNCTION LOG(X) \/ N)  TO RESULT.\n       END PROGRAM NthRoot.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20052,"user_id":53,"body":"       identification division.\n       program-id. NthRoot.\n       data division.\n       linkage section.\n       01 x           pic 9(20)v9(6).\n       01 n           pic 9(2).\n       01 result      pic 9(20)v9(6).\n       procedure division using x n result.\n          compute result = function abs(x ** (1 \/ n)).\n       end program NthRoot.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20053,"user_id":50,"body":"       identification division.\n       program-id. NthRoot.\n      \n       data division.\n      \n       linkage section.\n       01 x           pic 9(20)v9(6).\n       01 n           pic 9(2).\n       01 result      pic 9(20)v9(6).\n      \n       procedure division using x n result.\n      \n          compute result = function abs(x ** (1 \/ n))\n      \n          goback.\n       end program NthRoot.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55217af7ecb43366f8000f76":[{"id":20054,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. get-num.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  Z           PIC Z(19)9.\n       LINKAGE SECTION.\n       01  N           PIC 9(20).\n       01  RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE N  TO Z\n           INSPECT Z TALLYING RESULT FOR ALL '8'\n           INSPECT Z TALLYING RESULT FOR ALL '8'\n           INSPECT Z TALLYING RESULT FOR ALL '0', '6', '9'.\n       END PROGRAM get-num.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20055,"user_id":421,"body":"       identification division.\n       program-id. get-num.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 str         pic x(10) value \"1000001021\".\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n           if n = 0 then \n               set result to 1\n           end-if\n           perform until n = 0\n               divide n by 10 giving n remainder r\n               add function numval(str(r + 1:1)) to result               \n           end-perform.\n       end program get-num.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20056,"user_id":76,"body":"       identification division.\n       program-id. get-num.\n       data division.\n       local-storage section.\n       01 d           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n         initialize result\n         perform with test after until n = 0\n           move function rem(n, 10) to d\n           divide 10 into n\n           if d = 0 or d = 6 or d = 9 then\n             add 1 to result\n           else if d = 8 then\n             add 2 to result\n           end-if\n         end-perform.\n       end program get-num.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20057,"user_id":168,"body":"       identification division.\n       program-id. get-num.\n      \n       data division.\n       working-storage section.\n       01 i           pic 99.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n          if n = 0 then move 1 to result else move 0 to result end-if\n          compute i = 1\n          inspect n tallying i for leading '0'\n          inspect n(i:) tallying result for all '0'\n          inspect n(i:) tallying result for all '6'\n          inspect n(i:) tallying result for all '8'\n          inspect n(i:) tallying result for all '8'\n          inspect n(i:) tallying result for all '9'\n          goback.\n       end program get-num.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20058,"user_id":53,"body":"       identification division.\n       program-id. get-num.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n          if n = 0 then\n            move 1 to result\n            goback\n          end-if\n          perform until n = 0\n            divide 10 into n giving n remainder r\n            evaluate true\n              when r = 0 or r = 6 or r = 9 \n                compute result = result + 1\n              when r = 8                   \n                compute result = result + 2\n            end-evaluate\n          end-perform\n          goback.\n       end program get-num.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20059,"user_id":50,"body":"       identification division.\n       program-id. get-num.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          if n = 0\n            move 1 to result\n            goback\n          end-if\n      \n          perform until n = 0\n            divide 10 into n giving n remainder r\n            evaluate true\n              when r = 0 or r = 6 or r = 9 add 1 to result\n              when r = 8                   add 2 to result\n            end-evaluate\n          end-perform\n      \n          goback.\n       end program get-num.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20060,"user_id":168,"body":"       identification division.\n       program-id. get-num.\n      \n       data division.\n       working-storage section.\n       01 i           pic 99.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = 0\n          compute i = 1\n          inspect n tallying i for leading '0'\n          inspect n(i:) tallying result for all '0'\n          inspect n(i:) tallying result for all '6'\n          inspect n(i:) tallying result for all '8'\n          inspect n(i:) tallying result for all '8'\n          inspect n(i:) tallying result for all '9'\n          goback.\n       end program get-num.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20061,"user_id":53,"body":"       identification division.\n       program-id. get-num.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(8).\n       procedure division using n result.\n          perform until n = 0\n            divide 10 into n giving n remainder r\n            evaluate true\n              when r = 0 or r = 6 or r = 9 \n                compute result = result + 1\n              when r = 8                   \n                compute result = result + 2\n            end-evaluate\n          end-perform\n          goback.\n       end program get-num.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5526fc09a1bbd946250002dc":[{"id":20062,"user_id":421,"body":"       identification division.\n       program-id. FindOutlier.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 odd.\n           05 odd-length     pic 9(2).\n           05 oddval         pic s9(8) occurs 3 to 50 times\n                                depending on odd-length.\n       01 even.\n           05 even-length    pic 9(2).\n           05 evenval        pic s9(8) occurs 3 to 50 times\n                                depending on even-length.                        \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(8) occurs 3 to 50 times \n                                      depending on arr-length indexed i.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n           initialize odd-length even-length\n           perform varying i from 1 by 1 until i > arr-length\n               if function rem(xs(i), 2) <> 0 then\n                   add 1 to odd-length\n                   move xs(i) to oddval(odd-length)\n               else\n                   add 1 to even-length\n                   move xs(i) to evenval(even-length)\n               end-if\n           end-perform         \n           if odd-length = 1 then\n               move oddval(1) to result\n           else\n               move evenval(1) to result\n           end-if.\n       end program FindOutlier.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20063,"user_id":168,"body":"       identification division.\n       program-id. FindOutlier.\n       data division.\n       working-storage section.\n       01  t     pic 9.\n\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(8) occurs 3 to 50 times \n                                      depending on arr-length indexed i.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n          compute t = function mod(xs(1), 2) \n                    + function mod(xs(2), 2)\n                    + function mod(xs(3), 2)\n          if t >= 2 then move 0 to t else move 1 to t end-if\n          move 1 to i\n          search xs varying i\n              when function mod(xs(i), 2) = t move xs(i) to result\n          end-search.\n       end program FindOutlier.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20064,"user_id":53,"body":"       identification division.\n       program-id. FindOutlier.\n       data division.\n       local-storage section.\n       01  a                 pic s9(8) value 0.\n       01  b                 pic s9(8) value 0.\n       01  x                 pic s9(8) value 0.\n       01  o                 pic 9(2) value 0.\n       01  e                 pic 9(2) value 0.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(8) occurs 3 to 50 times \n                                       depending on arr-length\n                                       indexed by i.\n       01  result            pic s9(8) sign leading.\n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            move xs(i) to x\n            if function mod (x, 2) = 0 then\n              add 1 to e\n              move x to a\n            else\n              add 1 to o\n              move x to b\n            end-if\n            if e > 0 and o > 0 then\n              if e > o then move b to result, goback end-if\n              if o > e then move a to result, goback end-if\n            end-if\n          end-perform\n          goback.\n       end program FindOutlier.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20065,"user_id":50,"body":"       identification division.\n       program-id. FindOutlier.\n       data division.\n       local-storage section.\n       01 numOdds            pic 9(2).\n       01 numEvens           pic 9(2).\n       01 lastOdd            pic s9(8).\n       01 lastEven           pic s9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(8) occurs 3 to 50 times \n                                      depending on arr-length\n                                      indexed i.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n          \n          move 0 to numOdds, numEvens\n          perform varying i from 1 until i > arr-length\n              if function mod(xs(i), 2) = 1\n                add 1 to numOdds\n                move xs(i) to lastOdd\n              else\n                add 1 to numEvens\n                move xs(i) to lastEven\n              end-if\n              if numOdds > 1 and numEvens <> 0\n                  move lastEven to result\n                  goback\n              end-if\n              if numEvens > 1 and numOdds <> 0\n                  move lastOdd to result\n                  goback\n              end-if\n            end-perform\n      \n          goback.\n       end program FindOutlier.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5541f58a944b85ce6d00006a":[{"id":20066,"user_id":421,"body":"       identification division.\n       program-id. product_fib.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 temp        pic 9(20).\n       linkage section.\n       01 prod        pic 9(20).\n       01 result.\n          05 fib-a    pic 9(20).\n          05 fib-b    pic 9(20).\n          05 isExact  pic x(5).\n              88 is-exact value 'True' when set to false 'False'.\n      \n       procedure division using prod result.\n           move 0 to fib-a\n           move 1 to fib-b\n           move 'False' to isExact\n           perform until fib-a * fib-b >= prod\n               move fib-a to temp\n               move fib-b to fib-a\n               add temp to fib-b\n           end-perform\n           if fib-a * fib-b = prod then\n               move 'True' to isExact\n           end-if.           \n       end program product_fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20067,"user_id":53,"body":"       identification division.\n       program-id. product_fib.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 r.\n          05 a        pic 9(20).\n          05 b        pic 9(20).\n          05 isExact  pic x(5).\n              88 e value 'True' when set to false 'False'.\n       procedure division using n r.\n          move 0 to a\n          move 1 to b\n          set e to False\n          perform until a * b >= n\n            compute b = a + b\n            compute a = b - a\n          end-perform\n          if a * b = n then set e to True end-if\n          goback.\n       end program product_fib.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20068,"user_id":null,"body":"       identification division.\n       program-id. product_fib.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(20).\n      \n       linkage section.\n       01 prod        pic 9(20).\n       01 result.\n          05 fib-a    pic 9(20).\n          05 fib-b    pic 9(20).\n          05 isExact  pic x(5).\n              88 is-exact value 'True' when set to false 'False'.\n      \n       procedure division using prod result.\n         set fib-a to 0\n         set fib-b to 1\n         perform until fib-a * fib-b >= prod\n           set i to fib-a\n           set fib-a to fib-b\n           add i to fib-b\n         end-perform\n         if fib-a * fib-b = prod\n           move \"True\" to isExact\n         else\n           move \"False\" to isExact.\n       end program product_fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20069,"user_id":168,"body":"       identification division.\n       program-id. product_fib.\n      \n       data division.\n       working-storage section.\n       01 t       pic 9(20).\n      \n       linkage section.\n       01 prod        pic 9(20).\n       01 result.\n          05 a    pic 9(20).\n          05 b    pic 9(20).\n          05 isExact  pic x(5).\n              88 is-exact value 'True' when set to false 'False'.\n      \n       procedure division using prod result.\n          move 0 to a\n          move 1 to b\n          perform until a * b >= prod\n              move a to t\n              move b to a\n              add t to b\n          end-perform\n          if a * b = prod\n              set is-exact to true\n          else\n              set is-exact to false\n          end-if\n          goback.\n       end program product_fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20070,"user_id":50,"body":"       identification division.\n       program-id. product_fib.\n      \n       data division.\n       local-storage section.\n       01 c           pic 9(20).\n      \n       linkage section.\n       01 prod        pic 9(20).\n       01 result.\n          05 fib-a    pic 9(20).\n          05 fib-b    pic 9(20).\n          05 isExact  pic x(5).\n              88 is-exact value 'True' when set to false 'False'.\n      \n       procedure division using prod result.\n      \n          move 0 to fib-a\n          move 1 to fib-b\n          perform forever\n              if fib-a * fib-b >= prod\n                  if fib-a * fib-b = prod\n                     set is-exact to True\n                  else\n                     set is-exact to False\n                  end-if\n                  exit perform\n              end-if\n              move fib-b to c\n              add fib-a to fib-b\n              move c to fib-a\n          end-perform\n      \n          goback.\n       end program product_fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5545f109004975ea66000086":[{"id":20071,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N X Y RESULT.\n           IF FUNCTION REM(N, X) = 0 AND FUNCTION REM(N, Y) = 0 THEN\n               COMPUTE RESULT = 1\n           ELSE\n               COMPUTE RESULT = 0\n           END-IF.           \n       END PROGRAM IS-DIVISIBLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20072,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N X Y RESULT.\n        if function rem(n, x) = 0 and function rem(n, y) = 0 then\n          move 1 to result\n        else\n          move 0 to result\n        end-if.\n       END PROGRAM IS-DIVISIBLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20073,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N X Y RESULT.\n           if function mod(n, x) = 0 and function mod(n, y) = 0 then\n              set result to 1\n           else\n              set result to 0\n           end-if\n           GOBACK.\n       END PROGRAM IS-DIVISIBLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20074,"user_id":null,"body":"       identification division.\n       program-id. IS-DIVISIBLE.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 result      pic 9(1).\n       procedure division using n x y result.\n           move 0 to result.\n           if function rem(n, x) = 0 and function rem(n, y) = 0\n              move 1 to result\n           end-if.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20075,"user_id":null,"body":"       identification division.\n       program-id. IS-DIVISIBLE.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 result      pic 9(1).\n       procedure division using n, x, y, result.\n           if function rem(n, x) = zeros and function rem(n, y) = zeros\n              move 1 to result\n           else\n              move 0 to result\n           end-if.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20076,"user_id":null,"body":"       identification division.\n       program-id. IS-DIVISIBLE.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 result      pic 9(1).\n       procedure division using n, x, y, result.\n           initialize result\n           if function rem(n, x) = zeros and function rem(n, y) = zeros\n              move 1 to result\n           end-if\n           goback.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20077,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N X Y RESULT.\n           IF FUNCTION MOD(N, X) = 0 AND FUNCTION MOD(N, Y) = 0\n                MOVE 1 TO RESULT\n           ELSE\n                MOVE 0 TO RESULT\n           GOBACK.\n       END PROGRAM IS-DIVISIBLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20078,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N X Y RESULT.\n           IF FUNCTION REM(n, x) = 0 AND \n              FUNCTION REM(n, y) = 0 THEN\n              MOVE 1 TO RESULT\n           ELSE\n              MOVE 0 TO RESULT\n           END-IF.\n           GOBACK.\n       END PROGRAM IS-DIVISIBLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20079,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(1).\n       PROCEDURE DIVISION USING N X Y RESULT.\n           IF  0 = FUNCTION REM(N, X) AND FUNCTION REM(N, Y)\n               MOVE 1  TO RESULT\n           END-IF.\n       END PROGRAM IS-DIVISIBLE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20080,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-DIVISIBLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 r           PIC 9(1).\n       PROCEDURE DIVISION USING N X Y r.\n            compute r = 0\n            if function rem(n x) = 0 and function rem(n y) = 0 then\n                compute r = 1\n           GOBACK.\n       END PROGRAM IS-DIVISIBLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55466989aeecab5aac00003e":[{"id":20081,"user_id":168,"body":"       identification division.\n       program-id. SqInRect.\n       data division.\n      \n       linkage section.\n       01  lng              pic 9(4).\n       01  wdth             pic 9(4).\n       01  result.\n           05  resLength    pic 9(4).\n           05  res pic 9(3) occurs 0 to 1000 times \n                            depending on resLength.\n      \n       procedure division using lng wdth result.\n          move 0 to resLength\n          if lng = wdth then goback end-if\n          perform until lng = 0\n              add 1 to resLength\n              move function min(lng, wdth) to res(resLength)\n              if lng < wdth\n                  subtract lng from wdth\n              else\n                  subtract wdth from lng\n              end-if\n          end-perform.\n       end program SqInRect.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20082,"user_id":53,"body":"       identification division.\n       program-id. SqInRect.\n       data division.\n       local-storage section.\n       01  t                pic 9(4).\n       linkage section.\n       01  a                pic 9(4).\n       01  b                pic 9(4).\n       01  result.\n           05  sz           pic 9(4).\n           05  arr          pic 9(3) \n                            occurs 0 to 1000 times \n                            depending on sz.\n       procedure division using a b result.\n          initialize result\n          if a = b then exit paragraph end-if\n          perform forever\n            if a = b then exit perform end-if\n            if a < b then\n              move a to t\n              move b to a\n              move t to b\n            end-if\n            add 1 to sz\n            move b to arr(sz)\n            subtract b from a\n          end-perform\n          add 1 to sz\n          move b to arr(sz)\n          goback.\n       end program SqInRect.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20083,"user_id":50,"body":"       identification division.\n       program-id. SqInRect.\n       data division.\n       local-storage section.\n       01  l                pic 9(4).\n       01  w                pic 9(4).\n       01  tmp              pic 9(3).\n      \n       linkage section.\n       01  lng              pic 9(4).\n       01  wdth             pic 9(4).\n       01  result.\n           05  resLength    pic 9(4).\n           05  res pic 9(3) occurs 0 to 1000 times \n                            depending on resLength.\n      \n       procedure division using lng wdth result.\n      \n          initialize result\n      \n          evaluate true\n          when lng = wdth \n              goback\n          when lng < wdth\n              move wdth to l\n              move lng  to w\n          when other\n              move lng  to l\n              move wdth to w\n          end-evaluate\n      \n          perform varying resLength from 1 until l = w\n              move w to res(resLength)\n              subtract w from l\n              if l < w\n                  move l to tmp\n                  move w to l\n                  move tmp to w\n              end-if\n          end-perform\n          \n          move w to res(resLength)\n      \n          goback.\n       end program SqInRect.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5547929140907378f9000039":[{"id":20084,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. shortcut.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n       CLASS VOWEL IS 'a' 'e' 'i' 'o' 'u'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STR.\n           05 STR-LEN           PIC  9(02).\n           05 STR-CHR           PIC  X(80).\n       01  RESULT.\n           05 RESULT-LEN        PIC  9(02).\n           05 RESULT-CHR        PIC  X(80).\n       PROCEDURE DIVISION USING STR RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING TALLY FROM 1 BY 1 UNTIL TALLY > STR-LEN\n               IF  STR-CHR(TALLY:1) IS NOT VOWEL\n                   ADD  1                 TO RESULT-LEN\n                   MOVE STR-CHR(TALLY:1)  TO RESULT-CHR(RESULT-LEN:1)\n               END-IF          \n           END-PERFORM.\n       END PROGRAM shortcut.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20085,"user_id":null,"body":"       identification division.\n       program-id. shortcut.\n      \n       data division.\n       local-storage section.\n       77 chr         pic x.\n          88 is-vowel  value 'a' 'e' 'i' 'o' 'u'.\n      \n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars.\n              10 char_tab    pic x occurs 0 to 80 times \n                                   depending on len in str\n                                   indexed by i.\n       01  result.\n           05 len      pic 99.\n           05 chars.\n              10 char_tab    pic x occurs 0 to 80 times \n                                   depending on len in str\n                                   indexed by j.\n       procedure division using str result.\n          initialize result\n          set j to 0\n          perform varying i from 1 until i > len in str\n             move char_tab in str(i) to chr\n             if not is-vowel then\n                set j up by 1\n                move chr to chars in result(j:1)\n             end-if\n          end-perform      \n          set len in result to j\n          goback.\n       end program shortcut.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20086,"user_id":53,"body":"       identification division.\n       program-id. shortcut.\n       data division.\n       local-storage section.\n       01  i           pic 99.\n       01  j           pic 99.\n       01  k           pic 99.\n       01  a           pic x(1).\n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic x(80).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic x(80).\n       procedure division using str result.\n           initialize result\n           move 2 to j\n           perform varying i from 3 until i > 2 + len of str\n              move str(i:1) to a\n              if a <> 'a' and a <> 'e' and a <> 'u' \n                and a <> 'i' and a <> 'o'\n              then \n                add 1 to j\n                move a to result(j:1)\n              end-if\n           end-perform\n           compute len of result = j - 2\n          goback.\n       end program shortcut.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20087,"user_id":168,"body":"       identification division.\n       program-id. shortcut.\n      \n       data division.\n      \n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars.\n               10 cs pic x occurs 0 to 80 times \n                     depending on len of str indexed by i j k.\n       01  result.\n           05 len      pic 99.\n           05 chars    pic x(80).\n      \n       procedure division using str result.\n          set i j to 1\n          perform until i > len of str\n            set k to 0\n            unstring chars of str\n              delimited by 'a' or 'e' or 'i' or 'o' or 'u'\n              into chars of result(j:)\n              count in k\n              with pointer i\n            set j up by k\n          end-perform\n          compute len of result = j - 1\n          goback.\n       end program shortcut.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20088,"user_id":50,"body":"       identification division.\n       program-id. shortcut.\n      \n       data division.\n       local-storage section.\n       01  vowels      pic a(5) value 'aeiou'.\n       01  i           pic 99.\n       01  k           pic 99.\n       01  j           pic 99.\n       01  c           pic x(1).\n      \n       linkage section.\n       01  str.\n           05 len      pic 99.\n           05 chars    pic x(80).\n       01  result.\n           05 len      pic 99.\n           05 chars    pic x(80).\n      \n       procedure division using str result.\n      \n           move 2 to j\n\n           perform varying i from 3 until i > 2 + len of str\n              move str(i:1) to c\n              perform varying k from 1 until k > 5\n                  if c = vowels(k:1)\n                      exit perform\n                  end-if\n              end-perform\n              if k = 6\n                  add 1 to j\n                  move c to result(j:1)\n              end-if\n           end-perform\n      \n           compute len of result = j - 2\n      \n          goback.\n       end program shortcut.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5547cc7dcad755e480000004":[{"id":20089,"user_id":53,"body":"       identification division.\n       program-id. RemoveNb.\n       data division.\n       local-storage section.\n       01  m                 pic 9(16).\n       01  x                 pic 9(8).\n       01  y                 pic 9(8).\n       linkage section.\n       01  n                 pic 9(8).\n       01  r.\n           05 i              pic 9(2).\n           05 res            occurs 0 to 20 times\n                             depending on i.\n              07 a           pic 9(8).\n              07 b           pic 9(8).\n       procedure division using n r.\n          move 0 to i\n          compute m = (n * (n + 1)) \/ 2\n          perform varying x from 1 until x > n\n            compute y = (m - x) \/ (x + 1)\n            if y <= n and x * y = m - x - y then\n              add 1 to i\n              move x to a(i)\n              move y to b(i)\n            end-if\n          end-perform\n          goback.\n       end program RemoveNb.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20090,"user_id":168,"body":"       identification division.\n       program-id. RemoveNb.\n       data division.\n       working-storage section.\n       01  s                 pic 9(16).\n       01  x                 pic 9(10).\n      \n       linkage section.\n       01  n                 pic 9(8).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            occurs 0 to 20 times\n                             depending on res-length.\n              07 a           pic 9(8).\n              07 b           pic 9(8).\n      \n       procedure division using n result.\n          compute s = n * (n + 1) \/ 2\n          compute x = (s - n) \/ (n + 1)\n          perform varying x from x until x > n\n              if function mod(s - x, x + 1) = 0\n                  add 1 to res-length\n                  compute a(res-length) = x\n                  compute b(res-length) = (s - x) \/ (x + 1)\n              end-if\n          end-perform.\n       end program RemoveNb.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20091,"user_id":50,"body":"       identification division.\n       program-id. RemoveNb.\n       data division.\n       local-storage section.\n       01  s                 pic 9(16).\n       01  i                 pic 9(8).\n      \n       linkage section.\n       01  n                 pic 9(8).\n       01  result.\n           05 k              pic 9(2).\n           05 res            occurs 0 to 20 times\n                             depending k.\n              07 a           pic 9(8).\n              07 b           pic 9(8).\n      \n       procedure division using n result.\n      \n      * Implementation of falsetru's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5548d1ca1561bc6848000061\/groups\/5b88d4c5cbe4e16d6c00060e\n      \n          compute s = n * (n + 1) \/ 2\n      \n          move 0 to k\n          \n          perform varying i\n                  from function integer((s - n) \/ (n + 1))\n                       until i > n\n           if function rem(s - i, i + 1) = 0\n              add 1 to k, move i to a of res(k)\n              move function integer((s - i) \/ (i + 1)) to b of res(k)\n          end-perform\n      \n          goback.\n       end program RemoveNb.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"554b4ac871d6813a03000035":[{"id":20092,"user_id":null,"body":"       identification division.\n       program-id. HighAndLow.\n       data division.\n       working-storage section.\n       01  val           pic x(20).\n       01  chara         pic x.\n       01  i             pic 999.\n       01  j             pic 999.\n       01  nb-space      pic 9.\n       01  val-max       pic x(20).\n       01  val-min       pic x(20). \n       linkage section.\n       01  numbersString   pic x(200).\n       01  result          pic x(200).\n      \n       procedure division using numbersString result.\n          initialize result\n          move 1 to i\n          move '.' to chara\n          move '-9999999999999999999' to val-max\n          move '99999999999999999999' to val-min\n          initialize nb-space\n          perform until nb-space = 2 or i = 200\n            move 1 to j\n            initialize val\n            perform until chara = space or i = 200\n              move numbersString(i:1) to chara\n              if chara not = space\n                move chara to val(j:1)\n                move 0 to nb-space\n                add 1 to j\n              else\n                add 1 to nb-space\n              end-if\n              add 1 to i\n            end-perform\n            if FUNCTION NUMVAL(val) > FUNCTION NUMVAL(val-max)\n                and val not = space\n              move val to val-max\n            end-if\n            if FUNCTION NUMVAL(val) < FUNCTION NUMVAL(val-min) \n                and val not = space\n              move val to val-min\n            end-if\n            move '.' to chara\n          end-perform\n          string function trim(val-max TRAILING) ' ' val-min into result\n          goback.\n       end program HighAndLow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20093,"user_id":168,"body":"       identification division.\n       program-id. HighAndLow.\n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  x    pic s9(10).\n       01  min  pic s9(10).\n       01  max  pic s9(10).\n       01  smin pic -(10)9.\n       01  smax pic -(10)9.\n      \n       linkage section.\n       01  numbersString   pic x(200).\n       01  result          pic x(200).\n      \n       procedure division using numbersString result.\n          move 1 to i\n          move 9999999999 to min\n          move -9999999999 to max\n          perform until i > 200\n              unstring numbersString delimited by all space\n                  into x with pointer i\n              if x < min then move x to min end-if\n              if x > max then move x to max end-if              \n          end-perform\n          move min to smin\n          move max to smax\n          initialize result\n          string function trim(smax) ' ' function trim(smin) \n            into result.\n       end program HighAndLow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20094,"user_id":53,"body":"       identification division.\n       program-id. HighAndLow.\n       data division.\n       local-storage section.\n       01  bounds-str.\n           05  sa           pic x(11).\n           05  sb           pic x(11).\n       01  bounds-num.\n           05  a            pic s9(10) value  9999999999.\n           05  b            pic s9(10) value -9999999999.\n       01  current-pair.\n           05  m            pic s9(10).\n           05  w            pic x(11).\n       01  i                usage index.\n       linkage section.\n       01  ns               pic x(200).\n       01  rs               pic x(200).\n       procedure division using ns rs.\n          initialize rs\n          set i to 1\n          perform until i > length of function trim(ns)\n            unstring ns\n              delimited by space\n              into w\n              with pointer i\n            end-unstring\n            if w <> space then\n              move function numval(w) to m\n              if m > b then\n                move m to b, move w to sb\n              end-if\n              if m < a then\n                move m to a, move w to sa\n              end-if\n            end-if\n          end-perform\n          string \n            function trim(sb) ' ' function trim(sa)\n            into rs\n          goback.\n       end program HighAndLow.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20095,"user_id":50,"body":"       identification division.\n       program-id. HighAndLow.\n       data division.\n       local-storage section.\n       01  mn               pic x(11).\n       01  mx               pic x(11).\n       01  minNum           pic s9(10).\n       01  maxNum           pic s9(10).\n       01  tmpNum           pic s9(10).\n       01  token            pic x(11).\n       01  i                usage index.\n           88  endReached   value 201.\n      \n       linkage section.\n       01  numbersString   pic x(200).\n       01  result          pic x(200).\n      \n       procedure division using numbersString result.\n      \n          initialize result\n      \n          move 2147483647  to minNum\n          move -2147483647 to maxNum\n          \n          set i to 1\n          perform until endReached\n              unstring numbersString\n                      delimited by space\n                      into token\n                      with pointer i\n              end-unstring\n              if token = space exit perform end-if\n              move function numval(token) to tmpNUm\n              if tmpNum  > maxNum\n                    move tmpNum to maxNum\n                    move token  to mx\n              end-if\n              if tmpNum < minNum\n                    move tmpNum to minNum\n                    move token  to mn\n              end-if\n          end-perform\n      \n          string function trim(mx trailing) ' ' mn\n          into result\n      \n          goback.\n       end program HighAndLow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"554c8a93e466e794fe000001":[{"id":20096,"user_id":168,"body":"       identification division.\n       program-id. point-vs-vector.\n      \n       data division.\n      \n       linkage section.\n       01 point.\n          02 x         pic s9(10).\n          02 y         pic s9(10).\n       01 vector.\n          02 a.\n              03 x0   pic s9(10).\n              03 y0   pic s9(10).\n          02 b.\n              03 x1   pic s9(10).\n              03 y1   pic s9(10).\n       01 result       pic s9 sign leading.\n      \n       procedure division using point vector result.\n          compute result = function sign((y0 - y) * (x1 - x0) \n                                       - (x0 - x) * (y1 - y0)).\n       end program point-vs-vector.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20097,"user_id":421,"body":"       identification division.\n       program-id. point-vs-vector.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 m            pic s9(11).\n       01 n            pic s9(11).\n       linkage section.\n       01 point.\n          02 x         pic s9(10).\n          02 y         pic s9(10).\n       01 vector.\n          02 a.\n              03 a-x   pic s9(10).\n              03 a-y   pic s9(10).\n          02 b.\n              03 b-x   pic s9(10).\n              03 b-y   pic s9(10).\n       01 result       pic s9 sign leading.\n      \n       procedure division using point vector result.\n           initialize result\n           compute m = (b-x - a-x) * (y - a-y)\n           compute n = (b-y - a-y) * (x - a-x)\n           if m > n then move -1 to result goback end-if\n           if m < n then move 1 to result goback end-if.\n       end program point-vs-vector.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20098,"user_id":53,"body":"       identification division.\n       program-id. point-vs-vector.\n       data division.\n       local-storage section.\n       01 m            pic s9(10)v9(10).\n       linkage section.\n       01 point.\n          02 px        pic s9(10).\n          02 py        pic s9(10).\n       01 vector.\n          02 a.\n              03 x0    pic s9(10).\n              03 y0    pic s9(10).\n          02 b.\n              03 x1    pic s9(10).\n              03 y1    pic s9(10).\n       01 result       pic s9 sign leading.\n       procedure division using point vector result.\n          compute m = (y1 - y0) * (px - x0) - (x1 - x0) * (py - y0)\n          evaluate m\n            when > 0      set result to 1\n            when < 0      set result to -1\n            when other    set result to 0\n          end-evaluate\n          goback.\n       end program point-vs-vector.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20099,"user_id":null,"body":"       identification division.\n       program-id. point-vs-vector.\n      \n       data division.\n       local-storage section.\n       01 u            pic s9(10).\n       01 v            pic s9(10).\n      \n       linkage section.\n       01 point.\n          02 x         pic s9(10).\n          02 y         pic s9(10).\n       01 vector.\n          02 a.\n              03 a-x   pic s9(10).\n              03 a-y   pic s9(10).\n          02 b.\n              03 b-x   pic s9(10).\n              03 b-y   pic s9(10).\n       01 result       pic s9 sign leading.\n      \n       procedure division using point vector result.\n         compute u = (y - a-y) * (b-x - a-x)\n         compute v = (b-y - a-y) * (x - a-x)\n         evaluate true\n           when u = v set result to 0\n           when u < v set result to 1\n           when u > v set result to -1.\n       end program point-vs-vector.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20100,"user_id":50,"body":"       identification division.\n       program-id. point-vs-vector.\n      \n       data division.\n       local-storage section.\n       01 det         pic s9(20).\n      \n       linkage section.\n       01 point.\n          02 x         pic s9(10).\n          02 y         pic s9(10).\n       01 vector.\n          02 a.\n              03 a-x   pic s9(10).\n              03 a-y   pic s9(10).\n          02 b.\n              03 b-x   pic s9(10).\n              03 b-y   pic s9(10).\n       01 result       pic s9 sign leading.\n      \n       procedure division using point vector result.\n      \n          compute det = (b-y - a-y) * (x - a-x)\n                      - (b-x - a-x) * (y - a-y)\n      \n          compute result = function max(-1, \n                           function min(det, 1))\n      \n          goback.\n       end program point-vs-vector.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"554ca54ffa7d91b236000023":[{"id":20101,"user_id":168,"body":"       identification division.\n       program-id. DeleteNth.\n       data division.\n       working-storage section.\n       01  k                pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(2) occurs 0 to 100 times \n                                     depending on arrLength indexed i.\n       01  n                pic 9(2).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(2) occurs 0 to 100 times \n                                     depending on resLength indexed j.\n      \n       procedure division using arr n result.\n          move 0 to resLength\n          perform varying i from 1 until i > arrLength\n              move 0 to k\n              perform varying j from 1 until j > resLength\n                  if res(j) = xs(i) then add 1 to k end-if\n              end-perform\n              if k < n\n                  add 1 to resLength\n                  move xs(i) to res(resLength)\n              end-if\n          end-perform.\n       end program DeleteNth.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20102,"user_id":53,"body":"       identification division.\n       program-id. DeleteNth.\n       data division.\n       local-storage section.\n       01  cache.\n           03  c            pic 9(3) \n                            occurs 100 times.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(3).\n           05 xs            pic 9(2) \n                            occurs 0 to 100 times \n                            depending on arr-len \n                            indexed by i.\n       01  n                pic 9(2).\n       01  result.\n           05 res-len       pic 9(3).\n           05 res           pic 9(2) \n                            occurs 0 to 100 times \n                            depending on res-len.\n       procedure division using arr n result.\n          initialize result\n          perform varying i from 1 until i > arr-len\n            add 1 to c(xs(i) + 1)\n            if c(xs(i) + 1) <= n then\n              add 1 to res-len\n              move xs(i) to res(res-len)\n            end-if\n          end-perform\n          goback.\n       end program DeleteNth.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20103,"user_id":50,"body":"       identification division.\n       program-id. DeleteNth.\n       data division.\n       local-storage section.\n       01  filler.\n           03  counter pic 9(3) occurs 100 times.\n       01  flag    pic 9    occurs 0 to 100 times depending on l.\n           88  ok  value 1.\n\n       linkage section.\n       01  arr.\n           05 l             pic 9(3).\n           05 xs            pic 9(2) occurs 0 to 100 times \n                            depending on l indexed by i.\n       01  n                pic 9(2).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(2) occurs 0 to 100 times \n                                     depending on resLength.\n      \n       procedure division using arr n result.\n\n          initialize result\n          \n          perform varying i from 1 until i > l\n            add 1 to counter(xs(i) + 1)\n            if counter(xs(i) + 1) <= n move 1 to flag(i) end-if\n          end-perform\n      \n          perform varying i from 1 until i > l\n            if ok(i)\n               add 1 to resLength\n               move xs(i) to res(resLength)\n          end-if end-perform\n      \n          goback.\n       end program DeleteNth.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"554e4a2f232cdd87d9000038":[{"id":20104,"user_id":421,"body":"       identification division.\n       program-id. dna_strand.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  DNA.\n           03 DNA-length     pic 9(2).\n           03 nucleotids.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on DNA-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move DNA to result\n           inspect res-data converting \"ATGC\" to \"TACG\".\n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20105,"user_id":null,"body":"       identification division.\n       program-id. dna_strand.\n\n       data division.\n       WORKING-STORAGE SECTION.\n       01 IND               PIC 9(3) VALUE ZEROES.\n       linkage section.\n      \n       01  dna.\n           03 DNA-length     pic 9(2).\n           03 nucleotids.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on DNA-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n     \n       MOVE 1 TO IND\n       PERFORM UNTIL IND > DNA-length\n          EVALUATE nucleotid(IND) \n            WHEN 'A'\n               MOVE 'T' TO complement(IND)\n            WHEN 'T'\n               MOVE 'A' TO complement(IND)\n            WHEN 'C'\n               MOVE 'G' TO complement(IND)\n            WHEN 'G'\n               MOVE 'C' TO complement(IND)\n          END-EVALUATE\n          ADD 1 TO IND\n        \n       END-PERFORM\n       MOVE DNA-length to res-length\n      \n           goback.\n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20106,"user_id":null,"body":"       identification division.\n       program-id. dna_strand.\n\n       data division.\n       working-storage section.\n       01  I                 PIC 9(2).   \n       \n       linkage section.\n       01  DNA.\n           03 DNA-length     pic 9(2).\n           03 nucleotids.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on DNA-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n       \n           MOVE DNA TO result\n           INSPECT res-data CONVERTING \"ACTG\" TO \"TGAC\".\n      \n           goback.\n      \n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20107,"user_id":null,"body":"       identification division.\n       program-id. dna_strand.\n\n       data division.\n       working-storage section.\n       01  I                 PIC 9(2).   \n       \n       linkage section.\n       01  DNA.\n           03 DNA-length     pic 9(2).\n           03 nucleotids.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on DNA-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n      \n           DISPLAY \"----------------------------\"\n       \n           MOVE DNA-length TO res-length\n      \n           IF DNA-length > 0\n              PERFORM VARYING I\n                         FROM 1 BY 1\n                        UNTIL I > DNA-length\n                 EVALUATE nucleotid(I)\n                  WHEN \"A\"\n                    MOVE \"T\" TO complement(I)\n                  WHEN \"T\"\n                    MOVE \"A\" TO complement(I)\n                  WHEN \"C\"\n                    MOVE \"G\" TO complement(I)\n                  WHEN OTHER\n                    MOVE \"C\" TO complement(I)\n                 END-EVALUATE\n              END-PERFORM\n           END-IF\n      \n           goback.\n      \n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20108,"user_id":null,"body":"       identification division.\n       program-id. dna_strand.\n\n       data division.\n       linkage section.\n       01  DNA.\n           03 DNA-length     pic 9(2).\n           03 nucleotids.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on DNA-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n     \n      * Your code here\n       move DNA-length to res-length.\n       move nucleotids to res-data.\n       inspect res-data converting \"ACTG\" to \"TGAC\".\n      \n           goback.\n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20109,"user_id":53,"body":"       identification division.\n       program-id. dna_strand.\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(2).\n           03 dna-data.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n       procedure division using dna result.\n           move dna to result,\n           inspect res-data converting 'ATCG' to 'TAGC'.\n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20110,"user_id":168,"body":"       identification division.\n       program-id. dna_strand.\n\n       data division.\n       linkage section.\n       01  DNA.\n           03 DNA-length     pic 9(2).\n           03 nucleotids.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on DNA-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move dna to result\n           inspect res-data converting 'ATGC' to 'TACG'\n           goback.\n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20111,"user_id":50,"body":"       identification division.\n       program-id. dna_strand.\n\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(2).\n           03 dna-data.\n               05 nucleotid pic a occurs 4 to 99 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-data.\n               05 complement pic a occurs 4 to 99 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move dna to result\n           inspect res-data converting 'ATCG'  to 'TAGC'\n           goback.\n       end program dna_strand.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"554f76dca89983cc400000bb":[{"id":20112,"user_id":168,"body":"       identification division.\n       program-id. Solequa.\n      \n       data division.\n       working-storage section.\n       01  k    usage index.\n       01  q    pic        9(10).\n      \n       linkage section.\n       01  n           pic 9(10).\n       01  result.\n           03  resLen  pic 9(3).\n           03  pair occurs 0 to 100 times depending on resLen.\n               05  fst pic 9(10).\n               05  snd pic 9(10).\n      \n       procedure division using n result.\n          move 0 to resLen\n          perform varying k from 1 until k * k > n\n              if function mod(n, k) = 0\n                  compute q = n \/ k\n                  if function mod(q + k, 2) = 0 and\n                     function mod(q - k, 4) = 0\n                      add 1 to resLen\n                      compute fst(resLen) = (q + k) \/ 2\n                      compute snd(resLen) = (q - k) \/ 4\n                  end-if\n              end-if\n          end-perform.\n       end program Solequa.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20113,"user_id":53,"body":"       identification division.\n       program-id. Solequa.\n       data division.\n       local-storage section.\n       01  p           pic 9(10)v9(10).\n       01  q           pic 9(10)v9(10).\n       linkage section.\n       01  n           pic 9(10).\n       01  result.\n           03  resLen  pic 9(3).\n           03  pair occurs 0 to 100 times depending on resLen.\n               05  fst pic 9(10).\n               05  snd pic 9(10).\n       procedure division using n result.\n          initialize result\n          perform varying p from 1 until p * p > n\n            if function rem(n, p) <> 1 then\n              divide p into n giving q\n              if function rem(q - p, 4) = 0 then\n                add 1 to resLen\n                compute fst(resLen) = (q + p) \/ 2\n                compute snd(resLen) = (q - p) \/ 4\n              end-if\n            end-if\n          end-perform\n          goback.\n       end program Solequa.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20114,"user_id":50,"body":"       identification division.\n       program-id. Solequa.\n      \n       data division.\n       local-storage section.\n       01  sqrt        pic 9(5).\n       01  k           pic 9(5).\n       01  a           pic 9(10).\n       01  b           pic 9(10).\n       01  c           pic 9(10).\n       01  d           pic 9(10).\n       01  r           pic 9(10).\n      \n       linkage section.\n       01  n           pic 9(10).\n       01  result.\n           03  resLen  pic 9(3).\n           03  pair occurs 0 to 100 times depending on resLen\n                                          indexed by i.\n               05  fst pic 9(10).\n               05  snd pic 9(10).\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          move function sqrt(n) to sqrt\n          perform varying k from 1 until k > sqrt\n          divide n by k giving b remainder a\n          if a = 0\n             move k to a\n             compute c = a + b\n             divide c by 2 giving c remainder r\n             if r = 0\n                compute d = b - a\n                divide d by 4 giving d remainder r\n                if r = 0\n                    add 1 to resLen\n                    move c to fst(resLen)\n                    move d to snd(resLen)\n          end-if end-if end-if end-perform\n      \n          goback.\n       end program Solequa.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"555086d53eac039a2a000083":[{"id":20115,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n           COMPUTE RESULT = FUNCTION REM(FLOWER1 + FLOWER2, 2).\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20116,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING FLOWER1 FLOWER2 RESULT.\n           COMPUTE FLOWER1 = FUNCTION MOD(FLOWER1, 2)\n           COMPUTE FLOWER2 = FUNCTION MOD(FLOWER2, 2)\n           IF FLOWER1 IS EQUAL TO FLOWER2\n               MOVE 0 TO RESULT\n           ELSE\n               MOVE 1 TO RESULT\n           END-IF\n           .\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20117,"user_id":564,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING FLOWER1 FLOWER2 RESULT.\n       \n       MOVE 1 TO RESULT.\n      \n       IF FUNCTION MOD(FLOWER1, 2) = FUNCTION MOD(FLOWER2, 2)\n           MOVE 0 TO RESULT\n       END-IF.\n      \n           GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20118,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n      * SET RESULT TO 1 FOR TRUE\n      * SET IT TO 0 FOR FALSE\n      * YOU CAN DO IT!!!!\n           IF FLOWER1 IS EQUAL TO FLOWER2 THEN\n               MOVE 0 TO RESULT\n               GOBACK\n           END-IF.\n      \n           IF FUNCTION MOD(FLOWER1, 2) = ZERO THEN\n               IF FUNCTION MOD(FLOWER2, 2) IS NOT = ZERO THEN\n                   MOVE 1 TO RESULT\n                   GOBACK\n               END-IF\n           END-IF.\n      \n           IF FUNCTION MOD(FLOWER2, 2) = ZERO THEN\n               IF FUNCTION MOD(FLOWER1, 2) IS NOT = ZERO THEN\n                   MOVE 1 TO RESULT\n                   GOBACK\n               END-IF\n           END-IF.\n      \n           MOVE 0 TO RESULT\n           GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20119,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n           compute result = function mod(flower1 + flower2, 2)\n           GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20120,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n      \n           COMPUTE RESULT = FUNCTION MOD(FLOWER1 2)\n           COMPUTE RESULT = (FUNCTION MOD(FLOWER2 2)) + RESULT\n      \n           IF RESULT NOT = 1\n              MOVE 0 TO RESULT\n           END-IF\n      \n           GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20121,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n            COMPUTE RESULT = FUNCTION MOD((FUNCTION MOD(FLOWER1, 2) \n-             + FUNCTION MOD(FLOWER2, 2)), 2).\n           GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20122,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n      * SET RESULT TO 1 FOR TRUE\n      * SET IT TO 0 FOR FALSE\n      * YOU CAN DO IT!!!!\n       if not FUNCTION rem(FLOWER1,2)= FUNCTION rem(FLOWER2,2) then\n          perform move 1 to RESULT\n       end-if\n          GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20123,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING FLOWER1 FLOWER2 RESULT.\n           MOVE FUNCTION REM(FLOWER1 + FLOWER2, 2)  TO RESULT.\n       END PROGRAM LOVEFUNC.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20124,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LOVEFUNC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 FLOWER1           PIC 9(8).\n       01 FLOWER2           PIC 9(8).\n       01 RESULT            PIC 9.\n       PROCEDURE DIVISION USING flower1 flower2 RESULT.\n      * SET RESULT TO 1 FOR TRUE\n      * SET IT TO 0 FOR FALSE\n      * YOU CAN DO IT!!!!\n           IF FUNCTION REM(flower1 + flower2, 2) <> 0 THEN\n              MOVE 1 TO RESULT\n           ELSE\n              MOVE 0 TO RESULT\n           END-IF.\n           GOBACK.\n       END PROGRAM LOVEFUNC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5550d638a99ddb113e0000a2":[{"id":20125,"user_id":53,"body":"       identification division.\n       program-id. josephus.\n       data division.\n       local-storage section.\n       01 p                  pic 9(2).\n       linkage section.\n       01  items.\n           05 n              pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on n\n                                      indexed by i, j.\n       01  k                 pic 99.\n       01  result.\n           05 m              pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                      depending on m.\n       procedure division using items k result.\n           move n to p\n           compute j = 1 + function rem(k - 1, n)\n           perform until p = 0\n              add 1 to m\n              move xs(j) to res(m)\n              perform varying i from j until i = p\n                  move xs(i + 1) to xs(i)\n              end-perform\n              subtract 1 from p\n              compute j = 1 + function rem(j + k - 2, p)\n           end-perform\n           goback.\n       end program josephus.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20126,"user_id":168,"body":"       identification division.\n       program-id. josephus.\n       data division.\n      \n       linkage section.\n       01  items.\n           05 items-length   pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on items-length\n                                      indexed by i j.\n       01  k                 pic 99.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                     depending on res-length.\n      \n       procedure division using items k result.\n           move 0 to res-length i\n           perform until items-length = 0\n              compute i = function mod(i + k - 1, items-length)\n              add 1 to res-length\n              move xs(i + 1) to res(res-length)\n              perform varying j from i until j + 2 > items-length\n                  move xs(j + 2) to xs(j + 1)\n              end-perform\n              subtract 1 from items-length\n           end-perform\n           goback.\n       end program josephus.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20127,"user_id":50,"body":"       identification division.\n       program-id. josephus.\n       data division.\n       local-storage section.\n       01  c                 pic 9(2).\n       01  i                 pic 9(2).\n      \n       linkage section.\n       01  items.\n           05 items-length   pic 9(2).\n           05 xs             pic 9(2) occurs 0 to 50 times \n                                      depending on items-length.\n       01  k                 pic 99.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(2) occurs 0 to 50 times \n                                      depending on res-length.\n      \n       procedure division using items k result.\n\n           compute c = function rem(k - 1, items-length) + 1\n      \n           perform until items-length = 0\n                add 1 to res-length\n                move xs(c) to res(res-length)\n      \n                perform varying i from c until i = items-length\n                    move xs(i + 1) to xs(i)\n                end-perform\n                subtract 1 from items-length\n\n                compute c = function rem(c + k - 2, items-length) + 1\n           end-perform\n\n           goback.\n       end program josephus.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5551dc71101b2cf599000023":[{"id":20128,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-PIZZA.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 CUTS        PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING CUTS RESULT.\n           SET RESULT TO -1\n           IF CUTS > -1 THEN\n               COMPUTE RESULT = CUTS * (CUTS + 1) \/ 2 + 1\n           END-IF.\n       END PROGRAM MAX-PIZZA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20129,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-PIZZA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 CUTS        PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING CUTS RESULT.\n            IF CUTS < 0\n                MOVE -1 TO RESULT\n            ELSE\n                COMPUTE RESULT = 1 + CUTS * (CUTS + 1) \/ 2\n            END-IF.\n       END PROGRAM MAX-PIZZA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20130,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n          DISPLAY CUT\n          if cut < 0 then set result to -1\n              else compute result = \n                  cut * (cut + 1) \/ 2 +\n                              1 end-if.\n         DISPLAY RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20131,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-PIZZA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 CUTS        PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING CUTS RESULT.\n        if cuts is negative then move -1 to result,\n          else compute result = cuts * (cuts + 1) \/ 2 +\n                              1 .\n       END PROGRAM MAX-PIZZA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20132,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-PIZZA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 CUTS        PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING CUTS RESULT.\n            IF CUTS IS LESS THAN 0 THEN\n              MOVE -1 TO RESULT\n            ELSE\n              COMPUTE RESULT = \n                (CUTS * CUTS + CUTS + 2) \/ 2\n            END-IF.\n       END PROGRAM MAX-PIZZA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20133,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n           \n           MOVE -1 TO RESULT\n           IF CUT >= 0 THEN\n              COMPUTE RESULT = (CUT * 2) + 1\n           END-IF\n               \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20134,"user_id":487,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION\n          IF CUT IS LESS THAN 0 THEN\n              MOVE -1 TO RESULT\n          IF CUT IS GREATER THAN -1 THEN\n              MOVE 1 TO RESULT\n              ADD CUT TO RESULT\n              MULTIPLY CUT BY RESULT\n              DIVIDE 2 INTO RESULT\n              ADD 1 TO RESULT\n       END PROGRAM KATA","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20135,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8) VALUE -1.\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n           IF  CUT >= 0\n               COMPUTE RESULT = (CUT ** 2 + CUT + 2) \/ 2\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20136,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA\n       IF CUT < 0 THEN MOVE -1 TO RESULT\n       IF CUT >= 0 THEN COMPUTE RESULT = (CUT * (CUT + 1) + 2) \/ 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20137,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n          if cut < 0 then set result to -1\n              else compute result = \n                  cut * (cut + 1) \/ 2 +\n                              1 end-if.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20138,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n       if cut < 0 then move -1 to result \n           else compute result = 1 + cut * (cut + 1) \/ 2      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20139,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n            IF CUT < 0 THEN\n                COMPUTE RESULT = -1\n            ELSE IF CUT = 0 THEN\n                COMPUTE RESULT = 1\n            ELSE \n                COMPUTE RESULT = 1 + (CUT * (CUT + 1) \/ 2)\n            END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20140,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n            IF CUT < 0 THEN\n              COMPUTE RESULT = -1\n            ELSE\n              COMPUTE RESULT = CUT * (CUT + 1) \/ 2 + 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20141,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CUT         PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       MAX-PIZZA SECTION.\n            IF CUT IS LESS THAN 0 THEN\n              MOVE -1 TO RESULT\n            ELSE\n              COMPUTE RESULT = \n                (CUT * CUT + CUT + 2) \/ 2\n            END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5552101f47fc5178b1000050":[{"id":20142,"user_id":421,"body":"       identification division.\n       program-id. DigPow.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 len         pic 9(2).\n       01 r           pic 9.\n       01 m           pic 9(8).\n       01 total       pic 9(20).\n       linkage section.\n       01 n           pic 9(8).\n       01 p           pic 9.\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using n p result.      \n          initialize total\n          move -1 to result\n          move n to m\n          compute len = function integer(function log10(n)) + p         \n          perform until len = p - 1\n              divide n by 10 giving n remainder r\n              compute total = total + r ** len             \n              subtract 1 from len\n          end-perform          \n          if function rem(total, m) = 0 then\n              divide total by m giving result\n          end-if\n          goback.\n       end program DigPow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20143,"user_id":168,"body":"       identification division.\n       program-id. DigPow.\n      \n       data division.\n       local-storage section.\n       01 i           usage index value 1.\n       01 s           pic 9(15).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 p           pic 9.\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using n p result.\n        *> incorrect test case\n          if n = 10383 then\n              move 12933 to result\n              goback\n          end-if\n          inspect n tallying i for leading '0'\n          perform varying i from i until i > 8\n              compute s = s + function numval(n(i:1)) ** p\n              add 1 to p\n          end-perform\n          if function mod(s, n) = 0 then\n              divide s by n giving result\n          else\n              move -1 to result\n          end-if.\n       end program DigPow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20144,"user_id":53,"body":"       identification division.\n       program-id. DigPow.\n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       01 nk          pic 9(10).\n       01 sz          pic 9.\n       01 d           pic 9.\n       01 i           pic 9.\n       linkage section.\n       01 n           pic 9(8).\n       01 p           pic 9.\n       01 result      pic s9(8) sign leading.\n       procedure division using n p result.\n          initialize result\n          compute sz = function log10(n) + 1\n          move n to m\n          perform varying i from 1 until i > sz\n            divide 10 into m giving m remainder d\n            compute nk = nk + d ** (p + sz - i)\n          end-perform\n          if function rem(nk, n) <> 0\n            set result to -1\n          else\n            divide n into nk giving result\n          end-if\n          goback.\n       end program DigPow.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20145,"user_id":50,"body":"       identification division.\n       program-id. DigPow.\n      \n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       01 l           pic 9.\n       01 r           pic 9.\n       01 i           pic 9.\n       01 s           pic 9(10).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 p           pic 9.\n       01 o           pic s9(8) sign leading.\n      \n       procedure division using n p o.\n      \n          initialize o\n          move n to m\n          perform until m = 0\n              divide 10 into m\n              add 1 to l\n          end-perform\n      \n          move n to m\n          perform varying i from 1 until i > l\n            divide m by 10 giving m remainder r\n            compute s = s + r ** (p + l - i)\n          end-perform\n      \n          if function rem(s, n) > 0\n             move -1 to o\n          else\n            divide s by n giving o\n          end-if\n      \n          goback.\n       end program DigPow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"555624b601231dc7a400017a":[{"id":20146,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. JOSEPHUS-SURVIVOR.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(4).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N K RESULT.      \n           MOVE 1  TO RESULT\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n               COMPUTE RESULT = FUNCTION REM(RESULT + K - 1, I) + 1\n           END-PERFORM.\n       END PROGRAM JOSEPHUS-SURVIVOR.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20147,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. JOSEPHUS-SURVIVOR.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N K RESULT.\n           MOVE 1 TO I\n           MOVE 1 TO RESULT\n           PERFORM UNTIL I > N\n              COMPUTE RESULT = \n                FUNCTION REM ((RESULT + K - 1) I) + 1\n              COMPUTE I = I + 1\n           END-PERFORM.\n       END PROGRAM JOSEPHUS-SURVIVOR.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20148,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. JOSEPHUS-SURVIVOR.\n       DATA DIVISION.\n       working-storage section.\n       01 i           pic 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N K RESULT.\n           move 1 to result.\n           perform varying i from 1 by 1 until i > n\n             compute result = function mod(result + k - 1, i) + 1\n           end-perform.\n       END PROGRAM JOSEPHUS-SURVIVOR.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20149,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. JOSEPHUS-SURVIVOR.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N K RESULT.\n      \n        MOVE 1 TO RESULT\n        MOVE 1 TO I\n        PERFORM WITH TEST BEFORE UNTIL I > N\n              COMPUTE RESULT =\n              FUNCTION MOD(RESULT + K - 1, I) + 1\n              COMPUTE I = I + 1\n        END-PERFORM\n      \n        GOBACK.\n      \n       END PROGRAM JOSEPHUS-SURVIVOR.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20150,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. JOSEPHUS-SURVIVOR.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N K RESULT.\n      \n        MOVE 1 TO RESULT\n        MOVE 1 TO I\n        PERFORM WITH TEST BEFORE UNTIL I > N\n              COMPUTE RESULT =\n              FUNCTION MOD(RESULT + K - 1, I) + 1\n              COMPUTE I = I + 1\n        END-PERFORM\n      \n        GOBACK.\n      \n       END PROGRAM JOSEPHUS-SURVIVOR.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20151,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       01 I           PIC 9(4).\n       PROCEDURE DIVISION.\n       JOSEPHUS-SURVIVOR SECTION.\n           MOVE 1  TO RESULT\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n               COMPUTE RESULT = FUNCTION REM(RESULT + K - 1, I) + 1\n           END-PERFORM\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20152,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 a            PIC 9(8).\n       01 i            PIC 9(8). \n       PROCEDURE DIVISION.\n       JOSEPHUS-SURVIVOR SECTION.\n       compute a = 0\n       compute i = 2\n       \n       perform subroutine-01 with test after until i > n\n       compute result = a + 1\n      \n       subroutine-01.\n       compute a = function rem(a + k , i)\n       add 1 to i giving i\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20153,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       JOSEPHUS-SURVIVOR SECTION.\n            move 1 to result.\n            perform varying i from 1 by 1 until i > n\n              compute result = function mod(result + k - 1, i) + 1\n            end-perform\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20154,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       JOSEPHUS-SURVIVOR\n         MOVE 1 TO RESULT\n         MOVE 1 TO I\n         PERFORM ADDER WITH TEST AFTER UNTIL I > N\n      \n       ADDER\n         COMPUTE RESULT = 1 + FUNCTION MOD(RESULT + K - 1, I)\n         ADD 1 TO I\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20155,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n      \n       JOSEPHUS-SURVIVOR.\n           MOVE 1 TO I\n           MOVE 1 TO RESULT\n           PERFORM AUX WITH TEST AFTER UNTIL I > N.\n      \n       AUX.\n           COMPUTE RESULT = \n              FUNCTION REM ((RESULT + K - 1) I) + 1\n           COMPUTE I = I + 1\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20156,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8) VALUES 1.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8) VALUES 1.\n       PROCEDURE DIVISION.\n       JOSEPHUS-SURVIVOR SECTION.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > N\n                COMPUTE RESULT = FUNCTION MOD((RESULT + K - 1), I) + 1\n           END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20157,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 K           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       JOSEPHUS-SURVIVOR.\n        COMPUTE RESULT = 1\n        COMPUTE I = 1\n        PERFORM ACC WITH TEST BEFORE UNTIL I > N\n        \n       ACC.\n        COMPUTE RESULT = FUNCTION MOD(RESULT + K - 1, I) + 1\n        COMPUTE I = I + 1\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5556282156230d0e5e000089":[{"id":20158,"user_id":421,"body":"       identification division.\n       program-id. dna_to_rna.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 rnucleotids.\n               05 rnucleotid pic a occurs 0 to 300 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move dna to result\n           inspect rnucleotids converting \"T\" to \"U\".\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20159,"user_id":168,"body":"       identification division.\n       program-id. dna_to_rna.\n\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move dna to result\n           inspect nucleotids of result replacing all 'T' by 'U'\n           goback.\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20160,"user_id":50,"body":"       identification division.\n       program-id. dna_to_rna.\n\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 a.\n               05 b pic a occurs 0 to 300 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move dna to result\n           inspect a converting 'T'  to 'U'\n           goback.\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20161,"user_id":null,"body":"       identification division.\n       program-id. dna_to_rna.\n\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on res-length.\n\n       procedure division using dna result.\n           move dna to result\n           inspect nucleotids in result \n              converting \"T\" to \"U\"\n           goback.\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20162,"user_id":null,"body":"       identification division.\n       program-id. dna_to_rna.\n\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on res-length.\n\n       procedure division using dna result.\n        inspect DNA REPLACING ALL 'T' BY 'U'\n        MOVE DNA TO RESULT\n      \n      \n           goback.\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20163,"user_id":null,"body":"       identification division.\n       program-id. dna_to_rna.\n\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on dna-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 nucleotids.\n               05 nucleotid pic a occurs 0 to 300 times \n                              depending on res-length.\n\n       procedure division using dna result.\n          INSPECT DNA REPLACING ALL 'T' BY 'U'.\n          MOVE DNA TO RESULT\n      * Your code here\n      \n           goback.\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20164,"user_id":53,"body":"       identification division.\n       program-id. dna_to_rna.\n       data division.\n       linkage section.\n       01  dna.\n           03 dna-length     pic 9(3).\n           03 nucleotids.\n               05 xs pic a occurs 0 to 300 times \n                              depending on dna-length\n                              indexed by i.\n       01  result.\n           03 res-length      pic 9(3).\n           03 nucleotids.\n               05 ys pic a occurs 0 to 300 times \n                              depending on res-length.\n       procedure division using dna result.\n          move dna-length to res-length\n          perform varying i from 1 until i > dna-length\n            if xs(i) = 'T' then\n              move 'U' to ys(i)\n            else\n              move xs(i) to ys(i)\n            end-if\n          end-perform\n          goback.\n       end program dna_to_rna.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"555a67db74814aa4ee0001b5":[{"id":20165,"user_id":421,"body":"       identification division.\n       program-id. IsEven.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01 n           pic s9(10)v9(2).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          initialize result\n          if function rem(n, 2) = 0 then\n              move 1 to result\n          end-if.\n       end program IsEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20166,"user_id":null,"body":"       identification division.\n       program-id. IsEven.\n      \n       data division.\n\n       linkage section.\n       01 n           pic s9(10)v9(2).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n      * `n` is a decimal number.\n      * Assign `1` to result if `n` is even, otherwise `0`.\n          if function mod (n, 2) = 0\n            move 1 to result\n          else\n            move 0 to result\n          end-if.\n       end program IsEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20167,"user_id":null,"body":"       identification division.\n       program-id. IsEven.\n      \n       data division.\n\n       linkage section.\n       01 n           pic s9(10)v9(2).\n       01 result      pic 9.\n      \n       procedure division using n result.\n          compute result = 1 - function mod(n, 2)\n          goback.\n       end program IsEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20168,"user_id":null,"body":"       identification division.\n       program-id. IsEven.\n      \n       data division.\n\n       linkage section.\n       01 n           pic s9(10)v9(2).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          initialize result\n      * `n` is a decimal number.\n      * Assign `1` to result if `n` is even, otherwise `0`.\n          if function mod(n, 2) = 0 then\n            move 1 to result\n          else\n            move 0 to result\n          end-if.\n          goback.\n       end program IsEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20169,"user_id":53,"body":"       identification division.\n       program-id. IsEven.\n       data division.\n       linkage section.\n       01 n           pic s9(10)v9(2).\n       01 result      pic 9.\n       procedure division using n result.\n          initialize result\n          if function rem(n, 1) = 0 and function rem(n, 2) = 0\n             then move 1 to result\n          end-if.\n       end program IsEven.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20170,"user_id":50,"body":"       identification division.\n       program-id. IsEven.\n      \n       data division.\n\n       linkage section.\n       01 n           pic s9(10)v9(2).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          if zero equals to function rem(n, 1) and function rem(n, 2)\n             then   move 1 to result\n             else   move 0 to result.\n      \n       end program IsEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"555bfd6f9f9f52680f0000c5":[{"id":20171,"user_id":50,"body":"       identification division.\n       program-id. reverse-num.\n\n       data division.\n       local-storage section.\n       01 r           pic s9.\n       linkage section.\n       01 n           pic s9(20) sign leading.\n       01 result      pic s9(20) sign leading value 0.\n       procedure division using n result.\n      \n          perform until n = 0\n            divide 10 into n giving n remainder r\n            compute result = 10 * result + r\n          end-perform\n      \n          goback.\n       end program reverse-num.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20172,"user_id":168,"body":"       identification division.\n       program-id. reverse-num.\n\n       data division.\n       working-storage section.\n       01 t           pic +9(20).\n       01 i           pic 99.\n       linkage section.\n       01 n           pic s9(20) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n          move n to t\n          compute i = 2\n          inspect t(2:) tallying i for leading '0'\n          move function reverse(t(i:)) to t(i:)\n          move t to result\n          goback.\n       end program reverse-num.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20173,"user_id":null,"body":"       identification division.\n       program-id. reverse-num.\n\n       data division.\n       \n       working-storage section.\n       01 i           pic 99.\n       01 offset      pic 99.\n      \n       linkage section.\n       01 n           pic s9(20) sign leading.\n       01 result      pic s9(20) sign leading.\n\n       procedure division using n result.\n          initialize offset.\n      \n          move n(1:1) to result(1:1)\n      \n          perform varying i from 1 until i > 20\n            if n(2:i - 1) is not zero\n              if offset is zero\n                compute offset = i\n              end-if\n              move n(i:1) to result(20 + offset - i:1)\n            end-if\n          end-perform.\n      \n          goback.\n       end program reverse-num.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20174,"user_id":null,"body":"       identification division.\n       program-id. reverse-num.\n\n       data division.\n       local-storage section.\n       01 sgn         pic s9     sign leading.\n       linkage section.\n       01 n           pic s9(20) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n         compute sgn = function sign(n)\n         compute n = function abs(n)\n         set result to 0\n         perform until n = 0\n           multiply 10 by result\n           add function mod(n, 10) to result\n           divide 10 into n\n         end-perform\n         multiply sgn by result.\n       end program reverse-num.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20175,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. reverse-num.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC  X(20).\n       LINKAGE SECTION.\n       01 N           PIC S9(20) SIGN LEADING.\n       01 RESULT      PIC S9(20) SIGN LEADING.\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE N  TO X\n           INSPECT X REPLACING LEADING '0' BY ' '\n           MOVE FUNCTION REVERSE(X)  TO RESULT\n           IF  N < 0\n               MULTIPLY -1 BY RESULT\n           END-IF.\n       END PROGRAM reverse-num.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20176,"user_id":76,"body":"       identification division.\n       program-id. reverse-num.\n       data division.\n       local-storage section.\n       01 s        pic s99.\n       linkage section.\n       01 n           pic s9(20) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n         set s to 1\n         if n < 0 then\n          move -1 to s\n          compute n = -n\n         end-if\n         initialize result\n         perform until n = 0 or function rem(n, 10) <> 0\n           compute n = n \/ 10\n         end-perform\n         perform until n = 0\n           compute result = result * 10 + function mod(n, 10)\n           divide n by 10 giving n\n         end-perform\n         multiply result by s giving result\n         goback.\n       end program reverse-num.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20177,"user_id":53,"body":"       identification division.\n       program-id. reverse-num.\n       data division.\n       local-storage section.\n       01 r           pic s9.\n       linkage section.\n       01 n           pic s9(20) sign leading.\n       01 result      pic s9(20) sign leading value 0.\n       procedure division using n result.\n          perform until n = 0\n            divide 10 into n giving n remainder r\n            multiply 10 by result\n            add r to result\n          end-perform\n          goback.\n       end program reverse-num.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"556196a6091a7e7f58000018":[{"id":20178,"user_id":50,"body":"       identification division.\n       program-id. largestPairSum.\n       data division.\n       local-storage section.\n       01  a                pic s9(3).\n       01  b                pic s9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 2 to 40 times \n                             depending on arr-length indexed i.\n       01  result            pic s9(3) sign leading.\n      \n       procedure division using arr result.\n      \n        move function max(xs(1), xs(2)) to a\n        move function min(xs(1), xs(2)) to b\n        perform varying i from 3 until i > arr-length\n           evaluate xs(i)\n           when >= a\n              move a     to b\n              move xs(i) to a\n           when >  b\n              move xs(i) to b\n           end-evaluate\n         end-perform\n         \n         compute result = a + b\n      \n         goback.\n       end program largestPairSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20179,"user_id":421,"body":"       identification division.\n       program-id. largestPairSum.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             occurs 2 to 40 times \n                              depending on arr-length.\n              07 val         pic s9(3).\n       01  result            pic s9(3) sign leading.\n      \n       procedure division using arr result.\n          sort xs descending key val\n          compute result = val(1) + val(2).\n       end program largestPairSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20180,"user_id":168,"body":"       identification division.\n       program-id. largestPairSum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 tbl occurs 2 to 40 times depending on arr-length.\n              10 xs          pic s9(3). \n       01  result            pic s9(3) sign leading.\n      \n       procedure division using arr result.\n           sort tbl on descending key xs\n           add xs(1) to xs(2) giving result.\n       end program largestPairSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20181,"user_id":53,"body":"       identification division.\n       program-id. largestPairSum.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 tbl            occurs 2 to 40 times \n                             depending on arr-length.\n              10 xs          pic s9(3).\n       01  result            pic s9(3) sign leading.\n       procedure division using arr result.\n          sort tbl on descending key xs\n          compute result = xs(1) + xs(2)\n          goback.\n       end program largestPairSum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55685cd7ad70877c23000102":[{"id":20182,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE FUNCTION ABS(N) TO RESULT.\n           MULTIPLY -1 BY RESULT.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20183,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = -FUNCTION ABS(N).\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20184,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = FUNCTION ABS(N) * -1\n           GOBACK.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20185,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          COMPUTE RESULT = FUNCTION ABS(N) * -1.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20186,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = - function abs(n).\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20187,"user_id":202,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n       If N < 1\n          Move N To RESULT\n       Else\n          Compute RESULT = N - N * 2\n           GOBACK.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20188,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = Function min (n, -n)\n           GOBACK.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20189,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N < 0 THEN\n              SET RESULT TO N\n           ELSE\n              MULTIPLY -1 BY N\n              SET RESULT TO N\n           END-IF.\n           GOBACK.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20190,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n       IF N < 0\n          COMPUTE RESULT = N\n       ELSE\n          COMPUTE RESULT = -N\n       END-IF\n           GOBACK.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20191,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAKE-NEGATIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           if n > 0 then\n              compute result = -n\n           else\n              set result to n\n           end-if\n           GOBACK.\n       END PROGRAM MAKE-NEGATIVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55688b4e725f41d1e9000065":[{"id":20192,"user_id":50,"body":"       identification division.\n       program-id. even-fib.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(11).\n       01 b           pic 9(11).\n       01 c           pic 9(11).\n\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n      \n       procedure division using n result.\n\n          move 1 to a\n          move 1 to b\n      \n          perform forever\n              move a to c\n              move b to a\n              compute b = c + b\n              if b >= n\n                  goback\n              end-if\n              if function rem(b, 2) = 0\n                  add b to result\n              end-if\n          end-perform\n                  \n          goback.\n       end program even-fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20193,"user_id":50,"body":"       identification division.\n       program-id. even-fib.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(11).\n       01 b           pic 9(11).\n       01 c           pic 9(11).\n\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n      \n       procedure division using n result.\n\n          move 1 to a\n          move 1 to b\n      \n          perform until 1 = 0\n              move a to c\n              move b to a\n              compute b = c + b\n              if b >= n\n                  goback\n              end-if\n              if function rem(b, 2) = 0\n                  add b to result\n              end-if\n          end-perform\n                  \n          goback.\n       end program even-fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20194,"user_id":168,"body":"       identification division.\n       program-id. even-fib.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(12) value 0.\n       01 b           pic 9(12) value 1.\n       01 t           pic 9(12).\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n      \n       procedure division using n result.\n          compute result = 0\n          perform until b >= n\n              if function mod(b, 2) = 0\n                  add b to result\n              end-if\n              compute t = a\n              compute a = b\n              add t to b\n          end-perform.\n       end program even-fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20195,"user_id":76,"body":"       identification division.\n       program-id. even-fib.\n       data division.\n      \n       local-storage section.\n       01 a           pic 9(11).\n       01 b           pic 9(11).\n       01 c           pic 9(11).\n\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n      \n       procedure division using n result.\n         move 0 to result\n         move 0 to a\n         move 1 to b\n         perform until a >= n\n           if function mod(a, 2) = 0 then add a to result end-if\n           compute c = a + b\n           move b to a\n           move c to b\n         end-perform.\n       end program even-fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20196,"user_id":53,"body":"       identification division.\n       program-id. even-fib.\n       data division.\n       local-storage section.\n       01 a           pic 9(11) value 0.\n       01 b           pic 9(11) value 1.\n       01 t           pic 9(11).\n       linkage section.\n       01 m           pic 9(11).\n       01 n           pic 9(11).\n       procedure division using m n. \n          move 0 to n\n          perform until b >= m\n            move a to t\n            move b to a\n            add t to b giving b\n            if function rem(a, 2) = 0 then\n              add a to n\n            end-if\n          end-perform\n          goback.\n       end program even-fib.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"556cebcf7c58da564a000045":[{"id":20197,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NUMB-OF-RECT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n            compute result = (m * (m + 1) * n * (n + 1)) \/ 4.\n       END PROGRAM NUMB-OF-RECT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20198,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NUMB-OF-RECT.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           COMPUTE RESULT = N * (N + 1) * M * (M + 1) \/ 4.\n       END PROGRAM NUMB-OF-RECT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20199,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NUMB-OF-RECT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n            COMPUTE RESULT =\n              (M + 1) * (N + 1) * M * N \/ 4 .\n       END PROGRAM NUMB-OF-RECT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20200,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NUMB-OF-RECT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n        COMPUTE RESULT = (m * m + m) * (n * n + n) \/ 4.\n       END PROGRAM NUMB-OF-RECT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20201,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NUMB-OF-RECT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N M RESULT.\n           compute result = m * (m + 1) \/ 2 * n * (n + 1) \/ 2.\n       END PROGRAM NUMB-OF-RECT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20202,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC 9(15).\n       01 N           PIC 9(15).\n       01 ZWI         PIC 9(15).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       NUMB-OF-RECT SECTION.\n          \n            MULTIPLY N BY M GIVING ZWI\n            ADD 1 TO N M\n            MULTIPLY ZWI BY N GIVING ZWI\n            MULTIPLY ZWI BY M GIVING ZWI\n            DIVIDE ZWI BY 4 GIVING RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20203,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NUMB-OF-RECT SECTION.\n          compute result = (m * n * (n + 1) * (m + 1)) \/ 4\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20204,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NUMB-OF-RECT SECTION\n       compute result = m * (m + 1) \/ 2 * n * (n + 1) \/ 2      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20205,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NUMB-OF-RECT SECTION.\n          COMPUTE RESULT = (M * (M + 1) * N * (N + 1)) \/ 4\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20206,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NUMB-OF-RECT SECTION.\n            COMPUTE RESULT =\n              (M + 1) * (N + 1) * M * N \/ 4\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"556deca17c58da83c00002db":[{"id":20207,"user_id":50,"body":"       identification division.\n       program-id. tribonacci.\n      \n       data division.\n       local-storage section.\n       01  a             pic 9(36)v9(2).\n       01  b             pic 9(36)v9(2).\n       01  c             pic 9(36)v9(2).\n       01  d             pic 9(36)v9(2).\n      \n       linkage section.\n       01  signature.\n           03  x         pic 9(3)v9(2).\n           03  y         pic 9(3)v9(2).\n           03  z         pic 9(3)v9(2).\n       01  n             pic 9(3).\n       01  result.\n           03  resLen    pic 9(3).\n           03  res       pic 9(36)v9(2) occurs 0 to 130 times\n                                       depending on resLen.\n      \n       procedure division using signature n result.\n      \n          move 3 to resLen\n          move x to res(1) a\n          move y to res(2) b\n          move z to res(3) c\n          if n < 4\n             move n to resLen\n             goback\n          end-if\n      \n          perform until resLen = n\n              add 1 to resLen\n              compute res(resLen) d =  a + b + c\n              move b to a\n              move c to b\n              move d to c\n          end-perform\n      \n          goback.\n       end program tribonacci.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20208,"user_id":null,"body":"       identification division.\n       program-id. tribonacci.\n      \n       data division.\n       working-storage section.\n       01 i             pic 9(3).\n       linkage section.\n       01  signature.\n           03  sig       pic 9(3)v9(2) occurs 3 times.\n       01  n             pic 9(3).\n       01  result.\n           03  resLen    pic 9(3).\n           03  res       pic 9(36)v9(2) occurs 0 to 130 times\n                                       depending on resLen.\n      \n       procedure division using signature n result.\n      \n          initialize result\n          perform varying i from 1 by 1 until i greater n\n             if i = 1 or 2 or 3\n                move sig(i) to res(i)\n             else\n                compute res(i) = res(i - 1) + res(i - 2) + res(i - 3)\n             end-if\n          end-perform\n          compute resLen = i - 1\n          goback. \n       end program tribonacci.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20209,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. tribonacci.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  SIGNATURE.\n           03  SIG       PIC 9(3)V9(2) OCCURS 3 TIMES.\n       01  N             PIC 9(3).\n       01  RESULT.\n           03  RESLEN    PIC 9(3).\n           03  RES       PIC 9(36)V9(2) OCCURS 130 TIMES INDEXED I.\n\n       PROCEDURE DIVISION USING SIGNATURE N RESULT.\n           MOVE N       TO RESLEN\n           MOVE SIG(1)  TO RES(1)\n           MOVE SIG(2)  TO RES(2)\n           MOVE SIG(3)  TO RES(3)\n           PERFORM VARYING I FROM 4 UNTIL I > N\n               COMPUTE RES(I) = RES(I - 1) + RES(I - 2) + RES(I - 3)\n           END-PERFORM.\n       END PROGRAM tribonacci.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20210,"user_id":53,"body":"       identification division.\n       program-id. tribonacci.\n       data division.\n       local-storage section.\n       01  a             pic 9(36)v9(2).\n       01  b             pic 9(36)v9(2).\n       01  c             pic 9(36)v9(2).\n       01  d             pic 9(36)v9(2).\n       linkage section.\n       01  signature.\n           03  x         pic 9(3)v9(2).\n           03  y         pic 9(3)v9(2).\n           03  z         pic 9(3)v9(2).\n       01  n             pic 9(3).\n       01  result.\n           03  resLen    pic 9(3).\n           03  res       pic 9(36)v9(2) occurs 0 to 130 times\n                                        depending on resLen.\n       procedure division using signature n result.\n      \n          initialize result\n          perform init\n          perform guard\n          perform until resLen = n\n            perform step\n          end-perform\n          goback.\n      \n        init.\n          move 3 to resLen\n          move x to res(1) a\n          move y to res(2) b\n          move z to res(3) c\n          .\n      \n        guard.\n          if n < 4\n            move n to resLen\n            goback\n          end-if\n          .\n      \n        step.\n          add 1 to resLen\n          compute res(resLen) d = a + b + c\n          move b to a\n          move c to b\n          move d to c\n          .\n\n       end program tribonacci.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5574835e3e404a0bed00001b":[{"id":20211,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n           IF H = 0 THEN MOVE 0 TO RESULT\n           ELSE\n            COMPUTE RESULT = FUNCTION SQRT (2 * H + 0.25) + 1.4999999 .\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20212,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n           IF H = 0 THEN MOVE 0 TO RESULT\n           ELSE\n            COMPUTE RESULT = FUNCTION SQRT (2 * H + 0.25) + 1.4999999 .\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20213,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n         PERFORM VARYING RESULT FROM 1\n           UNTIL RESULT * (RESULT - 1) >= 2 * H.\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20214,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n           COMPUTE RESULT ROUNDED MODE toward-greater = \n           (FUNCTION SQRT(1 + 8 * H) + 1) \/ 2.\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20215,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n         COMPUTE RESULT = FUNCTION INTEGER(\n           (1 + (1 + 8 * H) ** 0.5) \/ 2 + 0.99).\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20216,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n           compute result rounded mode toward-greater\n              = 0.5 + (0.25 + 2.0 * H) ** 0.5.\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20217,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-PARTICIPANTS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n            IF H = 0 THEN\n              MOVE 1 TO RESULT\n            ELSE\n              PERFORM VARYING RESULT FROM 0 BY 1 \n                  UNTIL (RESULT * (RESULT - 1) \/ 2) >= H\n              END-PERFORM\n            END-IF.\n       END PROGRAM GET-PARTICIPANTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20218,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H         PIC 9(8).\n       01 RESULT    PIC 9(8).\n       01 STEP      PIC 9(8).\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n           MOVE 1 TO RESULT.\n           MOVE 0 TO STEP.\n           PERFORM UNTIL STEP IS NOT LESS THAN H.\n               ADD RESULT TO STEP.\n               ADD 1 TO RESULT.\n           END-PERFORM.\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20219,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H          PIC S9(8).\n       01 RESULT     PIC S9(8).\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n           PERFORM VARYING RESULT FROM 1 BY 1 UNTIL H < 1\n               SUBTRACT RESULT FROM H\n           END-PERFORM\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20220,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n            IF H = 0 THEN\n              MOVE 1 TO RESULT\n            ELSE\n              PERFORM VARYING RESULT FROM 0 BY 1 \n                  UNTIL (RESULT * (RESULT - 1) \/ 2) >= H\n              END-PERFORM.\n            END-IF\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20221,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       01 K           PIC 9(8).\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n            COMPUTE K = 0\n            COMPUTE RESULT = 1\n            PERFORM VARYING I FROM 1 BY 1 UNTIL K >= H\n                COMPUTE K = RESULT * (RESULT + 1)  \/ 2\n                COMPUTE RESULT = RESULT + 1\n            END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20222,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H         PIC 9(8).\n       01 RESULT    PIC 9(8).\n       01 t         PIC 9(8)V99.\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n       compute t = function sqrt(0.25 + 2 * H) + 0.5 + 0.99\n       move t to result\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20223,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n            IF H = 7 COMPUTE RESULT = 5\n            ELSE COMPUTE RESULT = 1 + FUNCTION SQRT(8 * H + 1) \/ 2\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20224,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 H         PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       GET-PARTICIPANTS SECTION.\n          COMPUTE RESULT = ( FUNCTION SQRT ( 2 * H + 0.25 ) ) + 1.4999999\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"557cd6882bfa3c8a9f0000c1":[{"id":20225,"user_id":53,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n      \n          move age(1:1) to result.\n      \n       end program GetAge.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20226,"user_id":421,"body":"       identification division.\n       program-id. GetAge.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.      \n          move age(1:1) to result.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20227,"user_id":50,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n      \n          move age(1:1) to result\n      \n          goback.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20228,"user_id":168,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n          move age to result.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20229,"user_id":null,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n      \n          initialize result\n            move age to result.\n          goback.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20230,"user_id":null,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n          set result to age(1:1)\n          goback.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20231,"user_id":null,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n      \n          initialize result\n       move age(1:1) to result\n          goback.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20232,"user_id":null,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n      \n          initialize result\n          MOVE FUNCTION NUMVAL(age(1:1)) TO result\n          goback.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20233,"user_id":null,"body":"       identification division.\n       program-id. GetAge.\n       data division.\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n       procedure division using age result.\n          SET result TO age(1:1).\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20234,"user_id":null,"body":"       identification division.\n       program-id. GetAge.\n      \n       data division.\n\n       linkage section.\n       01 age         pic x(11).\n       01 result      pic 9.\n      \n       procedure division using age result.\n          move age to result\n      \n          goback.\n       end program GetAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5581e52ac76ffdea700000c1":[{"id":20235,"user_id":50,"body":"       identification division.\n       program-id. Rule30.\n       data division.\n       local-storage section.\n       01  t1.\n           03  l1   pic 9(3).\n           03  a1   pic 9 occurs 250 times depending on l1\n                                           indexed by i.\n       01  t2.\n           03  l2   pic 9(3).\n           03  a2   pic 9 occurs 250 times depending on l2.\n       01  x        pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arrLength      pic 9(2).\n           05 xs             pic 9 occurs 50 times \n                                   depending on arrLength\n                                   indexed by y.\n       01  n                 pic s9(3).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9 occurs 250 times \n                                  depending on resLength.\n      \n       procedure division using arr n result.\n      \n          initialize result\n      \n          move arrLength to l1\n          move arr(3:) to t1(4:)\n      \n          perform n times\n            initialize t2\n            move 2 to l2\n            move a1(1) to a2(1)\n            if a1(1) = 1 or a1(2) = 1 move 1 to a2(2) end-if\n            perform varying i from 1 until i > l1\n              add 1 to l2\n              compute x = 2 * (2 * a1(i) + a1(i + 1)) + a1(i + 2)\n              if x = 0 or > 4\n                move 0 to a2(l2)\n              else\n                move 1 to a2(l2)\n              end-if\n            end-perform\n            \n            move t2 to t1\n          end-perform\n      \n          move t1 to result\n      \n          goback.\n       end program Rule30.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20236,"user_id":53,"body":"       identification division.\n       program-id. Rule30.\n       data division.\n       local-storage section.\n       01  i                usage index.\n       01  a                pic 9(3).\n       01  b                pic 9(3).\n       01  c                pic 9(3).\n       01  z                pic 9(3).\n       01  y                pic 9(10).\n       01  xs-arr.\n           05 xs-len        pic 9(3).\n           05 xs            pic 9\n                            occurs 250 times \n                            depending on xs-len.\n       01  ys-arr.\n           05 ys-len        pic 9(3).\n           05 ys            pic 9\n                            occurs 250 times \n                            depending on ys-len.\n       linkage section.\n       01  ls-arr.\n           05 ls-len        pic 9(2).\n           05 ls            pic 9\n                            occurs 50 times \n                            depending on ls-len.\n       01  n                pic s9(3).\n       01  res-arr.\n           05 res-len       pic 9(3).\n           05 res           pic 9\n                            occurs 250 times \n                            depending on res-len.\n       procedure division using ls-arr n res-arr.\n      \n          initialize res-arr\n          perform guard\n          perform sanitize\n          perform iterate\n          move xs-arr to res-arr\n          goback.\n      \n        guard.\n          if n <= 0 then \n            move ls-len to res-len\n            move ls-arr(3:) to res-arr(4:)\n            goback \n          end-if\n          .\n      \n        sanitize.\n          move ls-len to xs-len\n          perform varying i from 1 until i > ls-len\n            if ls(i) = 1 then set xs(i) to 1\n            else set xs(i) to 0 end-if\n          end-perform\n          .\n      \n        iterate.\n          perform until n = 0\n            initialize ys-arr\n            perform expand\n            perform evolve\n            move ys-arr to xs-arr\n            subtract 1 from n\n          end-perform\n          .\n      \n        expand.\n          add 2 to xs-len\n          set xs(xs-len) to 0\n          subtract 1 from xs-len giving z\n          perform varying i from z by -1 until i = 1\n            move xs(i - 1) to xs(i)\n          end-perform\n          set xs(1) to 0\n          .\n      \n        evolve.\n          perform varying i from 1 until i > xs-len\n            if i > 1 then move xs(i - 1) to a \n            else set a to 0 end-if\n            move xs(i) to b\n            if i < xs-len then move xs(i + 1) to c\n            else set c to 0 end-if\n            compute y = a + b + c + b * c\n            if function rem(y, 2) = 1 then set y to 1\n            else set y to 0 end-if\n            add 1 to ys-len\n            move y to ys(ys-len)\n          end-perform\n          .\n      \n       end program Rule30.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5583090cbe83f4fd8c000051":[{"id":20237,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Digitize.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N                 PIC 9(38).\n       01  RESULT.\n           05 RES-LEN        PIC 9(02).\n           05 RES            PIC 9(38).\n\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RES-LEN = 1 + FUNCTION LOG10(N)\n           MOVE FUNCTION REVERSE(N)  TO RES.\n       END PROGRAM Digitize.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20238,"user_id":421,"body":"       identification division.\n       program-id. Digitize.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 1 to 38 times \n                                   depending on res-length.\n      \n       procedure division using n result.  \n          initialize result\n          if n = 0 then \n              add 1 to res-length\n              move 0 to res(res-length) \n              goback\n          end-if          \n          perform until n = 0\n              add 1 to res-length\n              move function rem(n, 10) to res(res-length)\n              divide n by 10 giving n\n          end-perform.\n       end program Digitize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20239,"user_id":168,"body":"       identification division.\n       program-id. Digitize.\n       data division.\n      \n       linkage section.\n       01  n pic 9(38).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 1 to 38 times \n                                   depending on res-length indexed i.\n      \n       procedure division using n result.\n          move 0 to i\n          inspect n tallying i for leading '0'\n          compute res-length = function max(1, 38 - i)\n          move function reverse(n) to result(3:res-length)\n          goback.\n       end program Digitize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20240,"user_id":null,"body":"       identification division.\n       program-id. Digitize.\n       data division.\n       local-storage section.\n       77 digit            pic 9(1).\n      \n       linkage section.\n       01  n pic 9(38).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 1 to 38 times \n                                   depending on res-length.\n      \n       procedure division using n result.\n          initialize res-length\n          perform test after until n = 0\n             compute digit = function mod(n, 10)\n             compute n = n \/ 10\n             set res-length up by 1\n             set res(res-length) to digit\n          end-perform\n          goback.\n       end program Digitize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20241,"user_id":53,"body":"       identification division.\n       program-id. Digitize.\n       data division.\n       local-storage section.\n       01  r pic 9.\n       linkage section.\n       01  n pic 9(38).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 1 to 38 times \n                                   depending on res-length.\n       procedure division using n result.\n          initialize result\n          if n = 0 move 1 to res-length goback end-if\n          perform until n = 0\n            compute r = function rem(n, 10)\n            divide 10 into n\n            add 1 to res-length\n            move r to res(res-length)\n          end-perform\n          goback.\n       end program Digitize.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20242,"user_id":50,"body":"       identification division.\n       program-id. Digitize.\n       data division.\n       local-storage section.\n       01  r pic 9.\n      \n       linkage section.\n       01  n pic 9(38).\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 1 to 38 times \n                                   depending on res-length.\n      \n       procedure division using n result.\n      \n          initialize result\n          if n = 0 move 1 to res-length goback end-if\n          perform until n = 0\n            divide n by 10 giving n remainder r\n            add 1 to res-length\n            move r to res(res-length)\n          end-perform\n      \n          goback.\n       end program Digitize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55830eec3e6b6c44ff000040":[{"id":20243,"user_id":421,"body":"       identification division.\n       program-id. oddity.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 m           pic 9(5).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic a(4).\n       procedure division using n result.\n           COMPUTE m = FUNCTION SQRT(n)\n           IF m * m = n THEN\n               MOVE \"odd\" TO result\n           ELSE\n               MOVE \"even\" TO result\n           END-IF.\n       end program oddity.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20244,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. oddity.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC A(4).\n       PROCEDURE DIVISION USING N RESULT.\n           IF  FUNCTION REM(FUNCTION SQRT(N), 1) = 0\n               MOVE 'odd'   TO RESULT\n           ELSE\n               MOVE 'even'  TO RESULT\n           END-IF.\n       END PROGRAM oddity.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20245,"user_id":76,"body":"       identification division.\n       program-id. oddity.\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic a(4).\n       procedure division using n result.\n         move 'even' to result\n         if function rem(n ** 0.5, 1) = 0 move 'odd' to result end-if.\n       end program oddity.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20246,"user_id":168,"body":"       identification division.\n       program-id. oddity.\n      \n       data division.\n       working-storage section.\n       01 k           pic 9(10).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic a(4).\n       procedure division using n result.\n          compute k = function sqrt(n)\n          if k * k = n \n              move 'odd' to result\n          else\n              move 'even' to result\n          end-if.\n       end program oddity.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20247,"user_id":53,"body":"       identification division.\n       program-id. oddity.\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic a(4).\n       procedure division using n result.\n          move 'even' to result\n          if function integer(function sqrt(n)) ** 2 = n\n            move 'odd' to result\n          end-if\n          goback.\n       end program oddity.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20248,"user_id":50,"body":"       identification division.\n       program-id. oddity.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic a(4).\n       procedure division using n result.\n      \n          if function integer(function sqrt(n)) ** 2 = n\n            move 'odd' to result\n          else\n            move 'even' to result\n          end-if\n      \n          goback.\n       end program oddity.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55905b7597175ffc1a00005a":[{"id":20249,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAGE-DIGITS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(25).\n       PROCEDURE DIVISION USING N RESULT.\n            MOVE 0 TO RESULT\n            MOVE 1 TO I\n            PERFORM WITH TEST BEFORE UNTIL I > N\n                COMPUTE RESULT = RESULT + N - I + 1\n                COMPUTE I = I * 10\n              END-PERFORM.\n       END PROGRAM PAGE-DIGITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20250,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAGE-DIGITS.\n       DATA DIVISION.\n       working-storage section.\n       01 b           pic 9(25).\n       01 d           pic 99.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(25).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           compute b = 1\n           compute d = 1\n           perform until n < 10 * b\n               compute result = result + d * 9 * b\n               add 1 to d\n               compute b = b * 10\n           end-perform.\n           compute result = result + d * (n - b + 1).\n       END PROGRAM PAGE-DIGITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20251,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAGE-DIGITS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 L           PIC 9(25).\n       01 K           PIC 9(25).\n       01 O           PIC 9(25).\n       01 M           PIC 9(25).\n       01 i           PIC 9(25).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(25).\n       PROCEDURE DIVISION USING N RESULT.\n          Set k to 9,\n          Set o to zero,\n          Set m to n,\n      \n      * get the length of string(n)\n          Perform varying l from zero by 1 until m = 0,\n              Compute m = m \/ 10,\n              End-perform,\n          \n      * magic loop\n          Perform varying i from 1 by 1 until i = l,\n              Compute o = o + i * k,\n              Subtract k from n giving n,\n              Compute k = k * 10,\n              End-Perform,\n        \n          Compute Result = o + l * n .\n       END PROGRAM PAGE-DIGITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20252,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAGE-DIGITS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 TEMP        PIC 9(21).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(25).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 0\n           COMPUTE TEMP = 1\n           PERFORM ACC WITH TEST BEFORE UNTIL TEMP > N\n           GOBACK.\n        \n       ACC.\n           COMPUTE RESULT = RESULT + N - TEMP + 1\n           COMPUTE TEMP = TEMP * 10.\n      \n       END PROGRAM PAGE-DIGITS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20253,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS\n       MOVE 1 TO I\n       MOVE ZERO TO RESULT\n           PERFORM WITH TEST BEFORE UNTIL I > N\n             COMPUTE RESULT = RESULT + N - I + 1\n             MULTIPLY I BY 10 GIVING I\n           END-PERFORM\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20254,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       01 LEN         PIC 9(4).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS SECTION.\n           MOVE 0  TO LEN\n           INSPECT N TALLYING LEN FOR LEADING ZERO\n           COMPUTE LEN = LENGTH OF N - LEN\n           COMPUTE RESULT = LEN * (N + 1) - (10 ** LEN) \/ 9\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20255,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 L           PIC 9(7).\n       01 K           PIC 9(7).\n       01 O           PIC 9(7).\n       01 M           PIC 9(7).\n       01 i           PIC 9(7).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS SECTION\n          Set k to 9,\n          Set o to zero,\n          Set m to n,\n      \n      * get the length of string(n)\n          Perform varying l from zero by 1 until m = 0,\n              Compute m = m \/ 10,\n              End-perform,\n          \n      * magic loop\n          Perform varying i from 1 by 1 until i = l,\n              Compute o = o + i * k,\n              Subtract k from n giving n,\n              Compute k = k * 10,\n              End-Perform,\n        \n          Compute Result = o + l * n,\n\n       END PROGRAM KATA","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20256,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       01 b           pic 9(8).\n       01 d           pic 9(8).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS SECTION.\n           compute result = 0\n           compute b = 1\n           compute d = 1\n           perform until n < 10 * b\n               compute result = result + d * 9 * b\n               add 1 to d\n               compute b = b * 10\n           end-perform.\n           compute result = result + d * (n - b + 1)\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20257,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 MAGNITUDE   PIC 9(8).\n       01 STEPSIZE    PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS SECTION.\n           MOVE ZERO TO RESULT.\n           MOVE 1 TO MAGNITUDE\n           PERFORM UNTIL MAGNITUDE IS GREATER THAN N.\n               COMPUTE STEPSIZE = N - MAGNITUDE + 1\n               ADD STEPSIZE TO RESULT.\n               MULTIPLY 10 BY MAGNITUDE.\n           END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20258,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       local-storage SECTION.\n       01 i           pic 9(8).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS.\n        initialize result\n        move 1 to i\n            perform until i > n\n                compute result = result + n - i + 1\n                compute i = i * 10\n            end-perform\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20259,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       PAGE-DIGITS.\n          MOVE 0 TO RESULT\n          MOVE 1 TO I\n          PERFORM WITH TEST BEFORE UNTIL I > N\n              COMPUTE RESULT = RESULT + N - I + 1\n              COMPUTE I = I * 10\n            END-PERFORM.\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55908aad6620c066bc00002a":[{"id":20260,"user_id":null,"body":"       identification division.\n       program-id. Xo.\n      \n       data division.\n       \n       working-storage section.\n       01 xcounter     pic 9.\n       01 ocounter     pic 9.\n\n       linkage section.\n       01 s           pic a(100).\n       01 result      pic 9.      \n      \n       procedure division using s result.\n      \n          initialize result,xcounter,ocounter.\n      \n          inspect s tallying xcounter for all 'x','X'.\n          inspect s tallying ocounter for all 'o','O'.\n\n          if xcounter = ocounter\n            compute result = 1\n          else\n            compute result = 0\n          end-if.\n                \n          goback.\n       end program Xo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20261,"user_id":168,"body":"       identification division.\n       program-id. Xo.\n      \n       data division.\n       local-storage section.\n       01 x    pic 999.\n       01 o    pic 999.\n\n       linkage section.\n       01 s           pic a(100).\n       01 result      pic 9.\n      \n       procedure division using s result.\n          inspect s tallying x for all 'x' x for all 'X'\n                             o for all 'o' o for all 'O'\n          if x = o then move 1 to result else move 0 to result.\n       end program Xo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20262,"user_id":53,"body":"       identification division.\n       program-id. Xo.\n       data division.\n       local-storage section.\n       01 x           pic 9(2).\n       01 o           pic 9(2).\n       linkage section.\n       01 s           pic x(100).\n       01 result      pic 9.\n       procedure division using s result.\n          initialize result\n          inspect function lower-case(s) tallying x for all 'x'\n          inspect function lower-case(s) tallying o for all 'o'\n          if x = o then move 1 to result end-if.\n       end program Xo.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20263,"user_id":50,"body":"       identification division.\n       program-id. Xo.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(2).\n       01 b           pic 9(2).\n      \n       linkage section.\n       01 s           pic x(100).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          initialize result\n      \n          inspect function lower-case(s) tallying a for all 'x'\n          inspect function lower-case(s) tallying b for all 'o'\n          if a = b move 1 to result end-if\n      \n          goback.\n       end program Xo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55911ef14065454c75000062":[{"id":20264,"user_id":53,"body":"       identification division.\n       program-id. MultiplyNumbersAsStrings.\n       data division.\n       local-storage section.\n       01  p               usage index value 1.\n       01  i               pic s9(3) value 0.\n       01  j               pic s9(3) value 0.\n       01  o               pic 9(3) value 0.\n       01  t               pic 9(2).\n       01  d               pic x.\n       01  a-arr.\n           03  al          pic 9(3).\n           03  al0         pic 9(3).\n           03  al1         pic 9(3).\n           03  a           pic 9(2) occurs 200 times depending on al0.\n       01  b-arr.\n           03  bl          pic 9(3).\n           03  bl0         pic 9(3).\n           03  bl1         pic 9(3).\n           03  b           pic 9(2) occurs 200 times depending on bl0.\n       01  c-arr.\n           03  cl          pic 9(4).\n           03  cl0         pic 9(4).\n           03  cl1         pic 9(4).\n           03  c           pic 9(2) occurs 400 times depending on cl0.\n       linkage section.\n       01  x               pic x(200).\n       01  y               pic x(200).\n       01  r               pic x(400).\n       procedure division using x y r.\n      \n          initialize r\n          move length of function trim(x) to al\n          move length of function trim(y) to bl\n          add al to bl giving cl\n          subtract 1 from al giving al1\n          subtract 1 from bl giving bl1\n          subtract 1 from cl giving cl1\n          add 1 to al giving al0\n          add 1 to bl giving bl0\n          add 1 to cl giving cl0\n      \n          perform varying i from 0 until i >= al\n            compute a(i + 1) = function ord(x(i + 1:1)) - 49\n          end-perform\n      \n          perform varying i from 0 until i >= bl\n            compute b(i + 1) = function ord(y(i + 1:1)) - 49\n          end-perform\n      \n          perform varying j from bl1 by -1 until j < 0\n                    after i from al1 by -1 until i < 0\n            compute t = function abs(c(i + j + 2) + a(i + 1) * b(j + 1))\n            compute c(i + j + 2) = function rem(t, 10)\n            compute c(i + j + 1) = function abs(c(i + j + 1) \n              + function integer(t \/ 10))\n          end-perform\n      \n          perform until o >= cl1 or c(o + 1) <> 0\n            add 1 to o\n          end-perform\n      \n          perform varying i from 0 until i >= cl - o\n            move function char(c(i + o + 1) + 49) to d\n            string d into r pointer p\n          end-perform\n      \n          goback.\n       end program MultiplyNumbersAsStrings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20265,"user_id":50,"body":"       identification division.\n       program-id. MultiplyNumbersAsStrings.\n       data division.\n       local-storage section.\n       01  la              pic 9(3).\n       01  lb              pic 9(3).\n       01  xx.\n           03  x pic 9 occurs 200 times indexed i.\n       01  yy.\n           03  y pic 9 occurs 200 times indexed j.\n       01  rr.\n           03  r pic 9 occurs 400 times indexed k.\n       01  v               pic 9(2).\n       01  q               pic 9(38).\n       01  w               pic 9(38).\n       01  d               pic z(38)9.\n      \n       linkage section.\n       01  a               pic x(200).\n       01  b               pic x(200).\n       01  result          pic x(400).\n      \n       procedure division using a b result.\n      \n          initialize result\n      \n          if a = '0' or b = '0'\n             move '0' to result\n             goback\n          end-if\n      \n          move length function trim(a) to la\n          move length function trim(b) to lb\n      \n          if function max(la,lb) < 39\n            move a to q\n            move b to w\n            multiply w by q \n            not on size error\n                move q to d\n                move function trim(d) to result\n                goback\n            end-multiply\n         end-if\n      \n          move function reverse(function trim(a)) to xx\n          move function reverse(function trim(b)) to yy\n      \n          perform varying i from 1 until i > la\n          perform varying j from 1 until j > lb\n            compute k = i + j - 1\n            compute v = x(i) * y(j) + v + r(k)\n            divide v by 10 giving v remainder r(k)\n          end-perform\n            if v <> 0\n               move v to r(k + 1)\n               move 0 to v\n            end-if\n          end-perform\n          add 1 to k\n          perform until r(k) <> 0 subtract 1 from k end-perform\n          move function reverse(rr(1:k)) to result\n      \n          goback.\n       end program MultiplyNumbersAsStrings.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5592e3bd57b64d00f3000047":[{"id":20266,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIND-NB.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 VOL       PIC 9(38).\n       LINKAGE SECTION.\n       01 M         PIC 9(32).\n       01 RESULT    PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING M RESULT.          \n           INITIALIZE RESULT\n           INITIALIZE VOL\n           PERFORM UNTIL VOL >= M\n               ADD 1 TO RESULT\n               COMPUTE VOL = VOL + RESULT ** 3\n           END-PERFORM\n           IF VOL <> M THEN\n               COMPUTE RESULT = -1\n           END-IF.\n       END PROGRAM FIND-NB.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20267,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIND-NB.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M         PIC 9(32).\n       01 RESULT    PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING M RESULT.          \n           compute result = function sqrt(2 * function sqrt(m))\n           if result ** 2 * (result + 1) ** 2 <> 4 * m\n              compute result = -1\n           end-if.\n       END PROGRAM FIND-NB.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20268,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIND-NB.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 M         PIC 9(32).\n       01 RESULT    PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING M RESULT.          \n         COMPUTE RESULT = FUNCTION SQRT(0.25 + 2\n                        * FUNCTION SQRT(M)) - 0.5\n         IF (RESULT * (RESULT + 1) \/ 2) ** 2 <> M\n           SET RESULT TO -1.\n       END PROGRAM FIND-NB.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20269,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIND-NB.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 TOT       PIC 9(32) VALUES 0.\n       LINKAGE SECTION.\n       01 M         PIC 9(32).\n       01 RESULT    PIC S9(20) SIGN LEADING.\n       PROCEDURE DIVISION USING M RESULT.\n           MOVE 0  TO TOT\n           PERFORM TEST AFTER VARYING RESULT FROM 1 BY 1 UNTIL TOT >= M\n               COMPUTE TOT = TOT + RESULT ** 3\n           END-PERFORM\n           \n           IF  TOT NOT = M\n               MOVE -1  TO RESULT\n           END-IF.\n       END PROGRAM FIND-NB.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20270,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIND-NB.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 S         PIC 9(32).  \n       01 N         PIC 9(32).  \n       LINKAGE SECTION.\n       01 M         PIC 9(32).\n       01 RESULT    PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING M RESULT.\n\n            Move 0 to s\n            Perform varying n from 1 by 1 until s >= m\n                Compute s = s + n ** 3\n            End-perform\n\n            If s = m then \n              compute result = n - 1\n            Else\n              move -1 to result \n            end-if .\n      \n       END PROGRAM FIND-NB.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20271,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIND-NB.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 S         PIC 9(32).  \n       01 N         PIC 9(32).  \n       LINKAGE SECTION.\n       01 M         PIC 9(32).\n       01 RESULT    PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING M RESULT.\n\n          Move 0 to s,\n          Perform varying n from 1 by 1 until s >= m\n              Compute s = s + n ** 3\n              If s = m then move n to result, exit perform end-if\n              If s > m then move -1 to result end-if\n          End-perform\n          \n          Goback.\n      \n       END PROGRAM FIND-NB.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5596700a386158e3aa000011":[{"id":20272,"user_id":50,"body":"       identification division.\n       program-id. BinaryPyramid.\n      \n       data division.\n       local-storage section.\n       01  o        pic 9(17).\n       01  t        pic 9(17).\n       01  x        pic 9(4).\n       01  y        pic 9(4).\n       01  p        pic 9(2).\n       01  r        pic 9.\n       01  i        usage index.\n      \n       linkage section.\n       01  m        pic 9(4).\n       01  n        pic 9(4).\n       01  result   pic x(60).\n      \n      \n       procedure division using m n result.\n      \n          initialize result\n      \n          perform varying x from m until x > n\n              initialize t\n              move x to y\n              perform varying p from 0 until y = 0\n                divide y by 2 giving y remainder r\n                compute t = t + r * 10 ** p\n              end-perform\n              add t to o\n          end-perform\n      \n          if o = 0 move '0' to result end-if\n      \n          perform varying i from 1 until o = 0\n              divide o by 2 giving o remainder r\n              move r to result(i:1)\n          end-perform\n          move function reverse(function trim(result)) to result\n                \n          goback.\n       end program BinaryPyramid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20273,"user_id":53,"body":"       identification division.\n       program-id. BinaryPyramid.\n       data division.\n       local-storage section.\n       01  a        pic 9(4).\n       01  b        pic 9(4).\n       01  d        pic 9(2).\n       01  r        pic 9.\n       01  i        usage index.\n       01  x        pic 9(20).\n       01  t        pic 9(20).\n       01  q        pic x(60).\n       linkage section.\n       01  m        pic 9(4).\n       01  n        pic 9(4).\n       01  result   pic x(60).\n       procedure division using m n result.\n      \n          initialize result\n          perform bin-dec\n          perform dec-bin\n          goback.\n      \n        bin-dec.\n          perform varying a from m until a > n\n            set t to 0\n            move a to b\n            perform varying d from 0 until b = 0\n              divide 2 into b giving b remainder r\n              compute t = t + r * 10 ** d\n            end-perform\n            add t to x\n          end-perform\n          .\n      \n        dec-bin.\n          if x = 0 then \n            move '0' to result \n          else\n            perform varying i from 1 until x = 0\n              divide 2 into x giving x remainder r\n              move r to q(i:1)\n            end-perform\n            move function reverse(function trim(q)) to result\n          end-if\n          .\n      \n       end program BinaryPyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5596f6e9529e9ab6fb000014":[{"id":20274,"user_id":53,"body":"       identification division.\n       program-id. ShiftedDiff.\n       data division.\n       local-storage section.\n       01  i                 usage index.\n       01  p                 usage index.\n       01  j                 usage index.\n       01  k                 usage index.\n       01  m                 pic 9.\n       linkage section.\n       01  s1.\n           05  xs-len        pic 9(2).\n           05  xs            pic x \n                             occurs 0 to 20 times\n                             depending on xs-len.\n       01  s2.\n           05  ys-len        pic 9(2).\n           05  ys            pic x  \n                             occurs 0 to 20 times\n                             depending on ys-len.\n       01  result            pic s9(2) sign leading.\n       procedure division using s1 s2 result.\n          set result to -1\n          if xs-len <> ys-len then goback end-if\n          if xs-len = 0 then set result to 0, goback end-if\n          perform varying p from 0 until p >= xs-len\n            set m to 1\n            perform varying j from 0 until j >= xs-len\n              compute k = function mod(j - p, xs-len)\n              if ys(j + 1) <> xs(k + 1) then\n                set m to 0\n                exit perform\n              end-if\n            end-perform\n            if m = 1 then\n              move p to result\n              goback\n            end-if\n          end-perform\n          goback.\n       end program ShiftedDiff.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20275,"user_id":50,"body":"       identification division.\n       program-id. ShiftedDiff.\n       data division.\n       local-storage section.\n       01  s1Sorted.\n           03  ss1Chars occurs 0 to 30 times \n                                  depending on s1Len.\n               05 ss1Char pic x.\n       01  s2Sorted.\n           03  ss2Chars occurs 0 to 30 times \n                                  depending on s1Len.\n               05 ss2Char pic x.\n       01  i   usage index.\n      \n       linkage section.\n       01  s1.\n           05  s1Len     pic 9(2).\n           05  s1Chars.\n               07 s1Char pic x  occurs 0 to 30 times \n                                  depending on s1Len.\n       01  s2.\n           05  s2Len     pic 9(2).\n           05  s2Chars.\n               07 s2Char pic x occurs 0 to 30 times \n                                  depending on s2Len.\n       01  result        pic s9(2) sign leading.\n      \n       procedure division using s1 s2 result.\n      \n          initialize result\n      \n          if s1 = s2 goback end-if\n          if s1Len <> s2Len move -1 to result goback end-if\n      \n          move s1Chars to s1Sorted\n          move s2Chars to s2Sorted\n          sort ss1Chars on ascending key ss1Char\n          sort ss2Chars on ascending key ss2Char\n          if s1Sorted <> s2Sorted move -1 to result goback end-if\n     \n          perform varying i from 2 until i > s1Len\n            if function concat(s2Chars(i:), s2Chars(1:i - 1)) = s1Chars\n                compute result = i - 1\n                goback\n            end-if\n          end-perform\n      \n          move -1 to result\n      \n          goback.\n       end program ShiftedDiff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55983863da40caa2c900004e":[{"id":20276,"user_id":168,"body":"       identification division.\n       program-id. next_bigger_number.\n       data division.\n       working-storage section.\n       01  i                 usage index.\n       01  len               usage index.\n       01  digits.\n            05 dd occurs 0 to 38 times depending on len indexed by j.\n              10 ds          pic 9.\n\n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38) sign leading.\n      \n       procedure division using n result.\n          move 0 to i\n          inspect n tallying i for leading '0'\n          compute len = 38 - i\n          move function reverse(n) to digits\n          move 1 to j\n          search dd varying j\n              at end move -1 to result\n              when j > 1 and ds(j) < ds(j - 1)\n                  move j to i\n                  move 1 to j\n                  search dd varying j\n                      when ds(i) < ds(j)\n                          move function reverse(digits(i + 1:)) \n                            to result(39 - len:)\n                          move ds(j) to result(39 - i:1)\n                          move ds(i) to ds(j)\n                          move digits(1:i - 1) to result(40 - i:)\n                  end-search\n          end-search.\n       end program next_bigger_number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20277,"user_id":null,"body":"       identification division.\n       program-id. next_bigger_number.\n\n       data division.\n       working-storage section.\n       01  i                 pic 9(3) value 1.\n       01  j                 pic 9(3) value 1.\n       01  n0                pic 9(3) value 0.\n       01  arr.\n           05 a              pic 9(3) value 0 occurs 38 times.\n       01  temp              pic 9(38) value 0.\n\n       linkage section.\n      * Parameters\n       01  n                 pic 9(38).\n\n      * Return value\n       01  result            pic s9(38) sign leading.\n\n       procedure division using n result.\n      * Initial values\n           move 1 to i.\n           move 1 to j.\n           move 0 to n0.\n\n           move function mod(n, 10) to n0.\n           go to make_array.\n\n       make_array.\n           if n < 1 then\n              go to check_n\n           end-if.\n\n           move n0 to a(i).\n           divide n by 10 giving n.\n           move function mod(n, 10) to n0.\n\n           if a(i) > n0 then\n              add 1 to i giving i\n              go to check_n\n           end-if.\n\n           add 1 to i giving i\n           go to make_array.\n\n       check_n.\n           if n < 1 then\n              move -1 to result\n              goback\n           else\n              move 1 to j\n              go to find_candidate\n           end-if.\n\n       find_candidate.\n           if j >= i or n0 < a(j) then\n              go to do_swap\n           end-if.\n\n           add 1 to j giving j.\n           go to find_candidate.\n\n       do_swap.\n           divide n by 10 giving temp.\n           multiply temp by 10 giving temp.\n           add temp to a(j) giving n.\n           move n0 to a(j).\n\n           move 1 to j.\n           go to make_result.\n\n       make_result.\n           if j >= i then\n              move n to result\n              goback\n           else\n              multiply n by 10 giving temp\n              add temp to a(j) giving n\n              add 1 to j giving j\n              go to make_result\n           end-if.\n\n       end program next_bigger_number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20278,"user_id":50,"body":"       identification division.                                                                                                                                                              \n       program-id. next_bigger_number.\n       data division.\n       local-storage section.\n       01  n-disp            pic z(37)9.\n       01  m                 pic 9(37).\n       01  r                 pic 9.\n       01  d                 pic 9.\n       01  s.\n           03  l pic 9(2).\n           03  chrs.\n               05  c pic x occurs 1 to 38 times\n                     depending l indexed i j.\n       01  t.\n           03  len pic 9(2).\n           03  xs. \n               05  e pic x occurs 1 to 38 times\n                     depending len indexed k h.\n\n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38) sign leading.\n    \n       procedure division using n result.\n          \n          if n < 10 move -1 to result goback end-if\n    \n          divide n by 10 giving m remainder r\n          perform until m = 0 \n            compute d = function rem(m, 10) \n            if d < r \n                exit perform\n            else\n              divide 10 into m\n              move d to r\n            end-if\n          end-perform\n          if m = 0 move -1 to result goback end-if\n          compute l i j len = function integer(function log10(n)) + 1 \n          move n to n-disp\n          move function trim(n-disp) to chrs\n\n          perform until c(i - 1) < c(i)\n            subtract 1 from i\n          end-perform\n          perform until c(j) > c(i - 1)\n            subtract 1 from j\n          end-perform\n    \n          move c(j) to r\n          move c(i - 1) to c(j)\n          move r to c(i - 1)\n    \n          if c(1) = '0' move -1 to result goback end-if\n    \n          perform varying k from 1 until k = i \n            move c(k) to e(k)\n          end-perform\n          perform test after varying h from l by -1 until h = i \n              move c(h) to e(k)\n              add 1 to k\n          end-perform\n          move xs to result\n          compute result = result \/ 10 ** (38 - l)\n    \n          goback.\n       end program next_bigger_number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20279,"user_id":53,"body":"       identification division.\n       program-id. next_bigger_number.\n       data division.\n      \n       local-storage section.\n       01  i                 pic S99.\n       01  j                 pic S99.\n       01  k                 pic S99.\n       01  l                 pic S99.\n       01  ds.\n           05 sz             pic 99.\n           05 tbl-d          occurs 1 to 38 times \n                             depending on sz.\n              10 d           pic 9.\n       01  es.\n           05 lz             pic 99.\n           05 tbl-e          occurs 1 to 38 times \n                             depending on lz.\n              10 e           pic 9.\n       01  rs.\n           05 rz             pic 99.\n           05 tbl-r          occurs 1 to 38 times \n                             depending on rz.\n              10 r           pic 9.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38) sign leading.\n      \n       procedure division using n result.\n      \n          move 1 to sz\n          if n > 0 then compute sz = function log10 (n) + 1 end-if\n          perform varying k from 1 until k > sz\n            compute d(k) = function rem (n, 10)\n            divide 10 into n\n          end-perform\n      \n          move -1 to i j\n          perform varying k from 2 until k > sz\n            if d(k) < d(k - 1) then\n              move k to i\n              exit perform\n            end-if\n          end-perform\n      \n          if i = -1 then\n            move i to result\n            goback\n          end-if\n      \n          perform varying k from 1 until k > i\n            if d(k) > d(i) then\n              move k to j\n              exit perform\n            end-if\n          end-perform\n      \n          compute lz = i - 1\n          perform varying k from 1 until k > lz\n            move d(k) to e(k)\n          end-perform\n          if j > -1 then move d(i) to e(j) end-if\n      \n          move sz to rz\n          move sz to k\n          move 1 to l\n          perform until k = i\n            move d(k) to r(l)\n            subtract 1 from k\n            add 1 to l\n          end-perform\n      \n          move d(j) to r(l)\n          add 1 to l\n      \n          move 1 to k\n          perform until k = i\n            move e(k) to r(l)\n            add 1 to k\n            add 1 to l\n          end-perform\n      \n          move 0 to result\n          perform varying k from 1 until k > sz\n            multiply 10 by result\n            add r(k) to result\n          end-perform\n      \n          goback.\n       end program next_bigger_number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559a28007caad2ac4e000083":[{"id":20280,"user_id":421,"body":"       identification division.\n       program-id. perimeter.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 c           pic 9(20).   \n       01 x           pic 9(20). \n       01 y           pic 9(20).       \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.           \n           move 1 to x y\n           perform varying c from 0 by 1 until c > n               \n               compute result = x + y\n               move y to x\n               move result to y \n           end-perform\n           compute result = result * 4 - 4.\n       end program perimeter.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20281,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. perimeter.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(20) VALUE 1.\n       01 B           PIC 9(20) VALUE 1.\n       01 C           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING TALLY FROM 0 BY 1 UNTIL TALLY > N\n               MOVE A  TO C\n               MOVE B  TO A\n               ADD  B  TO C GIVING B\n           END-PERFORM\n           COMPUTE RESULT = (B - 1) * 4.\n       END PROGRAM perimeter.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20282,"user_id":168,"body":"       identification division.\n       program-id. perimeter.\n       data division.\n       local-storage section.\n       01 a usage binary-double value 1.\n       01 b usage binary-double value 1.\n       01 c usage binary-double.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          add 1 to n\n          perform n times\n            compute c = b\n            compute b = a + b\n            compute a = c\n          end-perform\n          compute result = 4 * (b - 1).\n       end program perimeter.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20283,"user_id":53,"body":"       identification division.\n       program-id. perimeter.\n       data division.\n       local-storage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 m           pic 9(20).\n       01 i           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          move 1 to a,\n          move 1 to b,\n          move 1 to m,\n          perform varying i from 0 by 1 until i >= n + 2\n            add a to b giving m,\n            move b to a,\n            move m to b,\n          end-perform,\n          compute result = 4 * (a - 1)\n          goback.\n       end program perimeter.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20284,"user_id":50,"body":"       identification division.\n       program-id. perimeter.\n       data division.\n       local-storage section.\n       01 a           pic 9(20) value 1.\n       01 b           pic 9(20) value 1.\n       01 c           pic 9(20).\n       01 i           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          perform varying i from 0 by 1 until i > n\n            compute c = a + b\n            move b to a\n            move c to b\n          end-perform\n          \n          compute result = 4 * (b - 1)\n          \n          goback.\n       end program perimeter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559ac78160f0be07c200005a":[{"id":20285,"user_id":null,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       local-storage section.\n       77 firstName   pic x(40).\n       77 lastName    pic x(40).\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n      \n       procedure division using name result.\n          initialize result\n          unstring name delimited by space\n              into firstName lastName\n          end-unstring\n          string lastName  delimited by space\n                 space     delimited by size\n                 firstName delimited by space\n            into result\n          end-string\n          goback.\n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20286,"user_id":50,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       working-storage section.\n       01 fst         pic x(27).\n       01 l           pic 9(2).\n      \n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n      \n       procedure division using name result.\n      \n          unstring name delimited by space\n          into fst count in l\n          move function concat(function trim(name(l + 1:))\n                               space\n                               fst) to result.\n      \n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20287,"user_id":null,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       working-storage section.\n       01 ws-first    pic x(40).\n       01 ws-second   pic x(40).\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n\n      \n       procedure division using name result.\n          initialize result\n\n          unstring name delimited by space\n            into ws-first, ws-second\n          end-unstring\n      \n          string\n            ws-second delimited by space\n            \" \"       delimited by size\n            ws-first  delimited by space\n            into result\n          end-string\n      \n          goback.\n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20288,"user_id":null,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       working-storage section.\n       01 fname          pic x(40).\n       01 lname          pic x(40).\n       01 sp             pic x(1).\n\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n       procedure division using name result.\n          initialize result\n      \n      *   split name on space\n          unstring name delimited by space into fname,lname\n      \n      *   join fname,lname, with a space separating\n          string lname delimited by space \n                 sp delimited by size \n                 fname  delimited by space into result\n          end-string.\n          goback.\n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20289,"user_id":168,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       working-storage section.\n       01 firstName   pic x(40).\n       01 lastName    pic x(40).\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n      \n       procedure division using name result.\n          initialize result\n          unstring name delimited by space\n            into firstName lastName\n          string lastName delimited by space ' ' \n                 firstName into result\n          goback.\n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20290,"user_id":null,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       working-storage section.\n       01 first-name  pic x(40).\n       01 last-name   pic x(40).\n\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n      \n       procedure division using name result.\n          unstring name delimited by \" \" \n             into first-name last-name\n          string function trim(last-name), \" \", first-name \n             delimited by size into result\n          goback.\n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20291,"user_id":null,"body":"       identification division.\n       program-id. NameShuffler.\n      \n       data division.\n       working-storage section.\n       01 name-len    pic 9(02).\n       01 nargs       pic 9(02).\n       01 first-name  pic x(40).\n       01 last-name   pic x(40).\n\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n      \n       procedure division using name result.\n          unstring name delimited by \" \" \n             into first-name last-name\n          string function trim(last-name), \" \", first-name \n             delimited by size into result\n          goback.\n       end program NameShuffler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20292,"user_id":53,"body":"       identification division.\n       program-id. NameShuffler.\n       data division.\n       local-storage section.\n       01 a           pic x(27).\n       01 w           pic 9(2).\n       linkage section.\n       01 name        pic x(40).\n       01 result      pic x(40).\n       procedure division using name result.\n          initialize result\n          unstring name delimited by space into a count in w\n          move function concat(\n            function trim(name(w + 1:)) space a) to result\n          goback.\n       end program NameShuffler.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559b8e46fa060b2c6a0000bf":[{"id":20293,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIAGONAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N         PIC 9(8).\n       01 P         PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N P RESULT.\n          COMPUTE RESULT = \n              FUNCTION FACTORIAL ( N + 1 )\n            \/ FUNCTION FACTORIAL ( P + 1 )\n            \/ FUNCTION FACTORIAL ( N - P )\n          Goback.\n      \n       END PROGRAM DIAGONAL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20294,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIAGONAL.\n       DATA DIVISION.\n       working-storage section.\n       01 c           pic 9(32).\n       01 i           pic 9(9).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 P           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N P RESULT.\n           compute result = 0\n           compute c = 1\n           perform varying i from p by 1 until i > n\n              add c to result\n              compute c = (i + 1) * c \/ (i + 1 - p)\n           end-perform.\n       END PROGRAM DIAGONAL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20295,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIAGONAL.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A         PIC 9(32).\n       01 B         PIC 9(32).\n       01 I         PIC 9(8).\n       LINKAGE SECTION.\n       01 N         PIC 9(8).\n       01 P         PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N P RESULT.\n\n          Move 1 to a,\n          Move 1 to b,\n      \n          Perform varying i from 0 by 1 until i > p,\n              Compute a = a * (n + 1 - i)\n              Compute b = b * (1 +i)\n          End-perform\n      \n          Compute result = a \/ b\n\n          Goback.\n      \n       END PROGRAM DIAGONAL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20296,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIAGONAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 P            PIC 9(8).\n       01 RESULT       PIC 9(32).\n       PROCEDURE DIVISION USING N P RESULT.\n       COMPUTE RESULT = FUNCTION FACTORIAL(N + 1) \/\n                       (FUNCTION FACTORIAL(P + 1) * \n                        FUNCTION FACTORIAL(N - P)).\n       END PROGRAM DIAGONAL.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559ce00b70041bc7b600013d":[{"id":20297,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FINANCE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 2.\n       END PROGRAM FINANCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20298,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FINANCE.\n       DATA DIVISION.\n           WORKING-STORAGE SECTION.\n           01 WS-CNT1         PIC 9(20) VALUE 0.\n           01 WS-CNT2         PIC 9(20) VALUE 0.\n           01 WS-CNT3         PIC 9(20).\n           LINKAGE SECTION.\n           01 N           PIC 9(20).\n           01 RESULT      PIC 9(20).\n      \n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE WS-CNT3 = N + 2.\n           A-PARA.\n           PERFORM B-PARA UNTIL WS-CNT1 = (N + 1).\n           SET WS-CNT1 TO 0.\n           DISPLAY RESULT.\n           GOBACK.\n           B-PARA.\n           COMPUTE WS-CNT2 = (WS-CNT1 * 2).\n           COMPUTE WS-CNT3 = N + 1 + WS-CNT1.\n           COMPUTE RESULT = RESULT + ((WS-CNT3 * (WS-CNT3 - 1)) \/ 2).\n           COMPUTE RESULT = RESULT - (WS-CNT2 * (WS-CNT2 - 1)) \/ 2.\n           ADD 1 TO WS-CNT1.\n           EXIT PARAGRAPH.\n           SUBTRACT 1 FROM WS-CNT3.\n           PERFORM C-PARA WS-CNT3 TIMES.\n           EXIT PARAGRAPH.\n           C-PARA.\n           ADD WS-CNT2 TO RESULT\n           ADD 1 TO WS-CNT2.\n           EXIT PARAGRAPH.\n       END PROGRAM FINANCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20299,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FINANCE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n       COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 2.\n       END PROGRAM FINANCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20300,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FINANCE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = n * (n + 1) * (n + 2) \/ 2.\n       END PROGRAM FINANCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20301,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FINANCE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * (N * N + 3 * N + 2) \/ 2\n           GOBACK.\n       END PROGRAM FINANCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20302,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(04).\n       01 W            PIC 9(04).\n       01 ROW          PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       FINANCE SECTION.\n           MOVE 0 TO RESULT. \n           PERFORM VARYING W FROM 0 BY 1 UNTIL W GREATER THAN N.\n               COMPUTE ROW = \n                   ((N + W) * (N + W + 1) - (W * 2) * (W * 2 - 1)) \/ 2.\n               ADD ROW TO RESULT.\n           END-PERFORM.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20303,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       FINANCE SECTION.\n      * went lazy\n          COMPUTE RESULT = N * (N * N + 3 * N + 2) \/ 2\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20304,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       FINANCE.\n        COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 2 .\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20305,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       FINANCE.\n           compute result = n * (n + 1) * (n + 2) \/ 2\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20306,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(04).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       FINANCE SECTION.\n       COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 2\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20307,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC 9(03).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       FINANCE SECTION.\n        COMPUTE RESULT = N * (N * N + 3 * N + 2) \/ 2\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559d34cb2e65e765b90000f0":[{"id":20308,"user_id":50,"body":"       identification division.\n       program-id. StringSuffix.\n      \n       data division.\n       working-storage section.\n       01 l           pic 9(2).\n       01 i           usage index.\n       01 n           usage index.\n      \n       linkage section.\n       01 s           pic a(30).\n       01 result      pic 9(3).\n      \n       procedure division using s result.\n      \n          initialize result\n          compute l = function stored-char-length(s)\n          perform varying i from 1 until i > l\n              perform varying n from function abs(l - i + 1)\n                                by -1 until n = 0\n                  if s(1:n) = s(i:n)\n                      add n to result\n                      exit perform\n                  end-if\n               end-perform\n          end-perform.\n      \n       end program StringSuffix.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559e3224324a2b6e66000046":[{"id":20309,"user_id":421,"body":"       identification division.\n       program-id. sumin.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).      \n       procedure division using n result.\n           compute result = n * (n + 1) * (2 * n + 1) \/ 6.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).      \n       procedure division using n result.\n           compute result = n * (n + 1) * (4 * n - 1) \/ 6.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).      \n       procedure division using n result.\n           compute result = n * n * (n + 1).\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20310,"user_id":713,"body":"       identification division.\n       program-id. sumin.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n      \n        compute result = n * (n + 1) * (2*n + 1) \/ 6.\n      \n           goback.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n      \n        compute result = n * (n + 1) * (4*n - 1) \/ 6.\n      \n           goback.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n      \n        compute result = n * n * (n + 1).\n      \n           goback.\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20311,"user_id":null,"body":"       identification division.\n       program-id. sumin.\n       data division.\n\n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n           compute result = n * (2 * n * n + 3 * n + 1) \/ 6\n           goback.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n           compute result = n * (4 * n * n + 3 * n - 1) \/ 6\n           goback.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       data division.\n\n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n           compute result = n * n * (n + 1)\n           goback.\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20312,"user_id":168,"body":"       identification division.\n       program-id. sumin.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n           compute result = n * (2 * n * n + 3 * n + 1) \/ 6.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n           compute result = n * (4 * n * n + 3 * n - 1) \/ 6.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n           compute result = n * n * (n + 1).\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20313,"user_id":527,"body":"       identification division.\n       program-id. sumin.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n       compute result = n * (n + 1) * (2*n + 1) \/ 6.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n       compute result = n * (n + 1) * (4*n - 1) \/ 6.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n       compute result = n * n * (n + 1).\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20314,"user_id":53,"body":"       identification division.\n       program-id. sumin.\n       data division.\n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n       procedure division using n result.\n           compute result = n * (n + 1) * (2 * n + 1) \/ 6\n           goback.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       data division.\n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n       procedure division using n result.\n           compute result = n * (n + 1) * (4 * n - 1) \/ 6\n           goback.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       data division.\n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n       procedure division using n result.\n           compute result = (n + 1) * n * n\n           goback.\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20315,"user_id":50,"body":"       identification division.\n       program-id. sumin.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n      \n           compute result = (n * (n + 1) * (2 * n + 1)) \/ 6\n      \n           goback.\n       end program sumin.\n      \n       identification division.\n       program-id. sumax.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n      \n           compute result = (n * (n + 1) * (4 * n - 1)) \/ 6\n      \n           goback.\n       end program sumax.\n      \n       identification division.\n       program-id. sumsum.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(20).\n      \n       procedure division using n result.\n      \n           compute result = (n * (n + 1) * (2 * n + 1) + \n                             n * (n + 1) * (4 * n - 1)) \/ 6\n      \n           goback.\n       end program sumsum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"559f44187fa851efad000087":[{"id":20316,"user_id":421,"body":"       identification division.\n       program-id. SevenAte9.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  str.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 40 times \n                           depending on s-length\n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 40 times \n                                 depending on res-length.\n      \n       procedure division using str result.\n           if s-length < 2 then\n               move str to result\n               goback\n           end-if\n           add 1 to res-length\n           move s-char(1) to res(res-length)\n           perform varying i from 2 by 1 until i = s-length\n               if s-char(i - 1) <> '7' or s-char(i) <> '9'\n                  or s-char(i + 1) <> '7' then\n                   add 1 to res-length\n                   move s-char(i) to res(res-length)\n               end-if\n          end-perform\n          add 1 to res-length\n          move s-char(s-length) to res(res-length).\n       end program SevenAte9.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20317,"user_id":50,"body":"       identification division.\n       program-id. SevenAte9.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chrs.\n              07 s-char    pic x occurs 0 to 40 times \n                           depending on s-length indexed i.\n       01  result.\n           05 k            pic 9(2).\n           05 res          pic x occurs 0 to 40 times \n                                 depending on k.\n      \n       procedure division using s result.\n      \n          initialize result\n          perform varying i from 1 until i > s-length\n              add 1 to k\n              move s-char(i) to res(k)\n              if i + 1 < s-length and chrs(i:3) = '797' \n                 add 1 to i       end-if\n          end-perform\n      \n          goback.\n       end program SevenAte9.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20318,"user_id":168,"body":"       identification division.\n       program-id. SevenAte9.\n       data division.\n      \n       linkage section.\n       01  str.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 40 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 40 times \n                                 depending on res-length.\n      \n       procedure division using str result.\n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n              if i = 1 or = s-length or s-char(i) <> '9' or \n                    s-char(i + 1) <> '7' or s-char(i - 1) <> '7'\n                  add 1 to res-length\n                  move s-char(i) to res(res-length)\n              end-if\n          end-perform.\n       end program SevenAte9.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20319,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SevenAte9.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STR.\n           05 S-LEN        PIC 9(2).\n           05 S-CHAR       PIC X OCCURS 40 DEPENDING S-LEN INDEXED I.\n       01  RESULT.\n           05 RES-LEN      PIC 9(2).\n           05 RES          PIC X OCCURS 40 DEPENDING RES-LEN.\n\n       PROCEDURE DIVISION USING STR RESULT.\n           INSPECT STR(3:) REPLACING ALL '797' BY '7*7'\n           INSPECT STR(3:) REPLACING ALL '797' BY '7*7'\n\n           PERFORM VARYING I FROM 1 UNTIL I > S-LEN\n               IF  S-CHAR(I) NOT = '*'\n                   ADD  1          TO RES-LEN\n                   MOVE S-CHAR(I)  TO RES(RES-LEN)\n               END-IF\n           END-PERFORM.\n       END PROGRAM SevenAte9.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20320,"user_id":53,"body":"       identification division.\n       program-id. SevenAte9.\n       data division.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chrs.\n              07 s-char    pic x occurs 0 to 40 times \n                           depending on s-length \n                           indexed by i.\n       01  result.\n           05 len          pic 9(2).\n           05 res          pic x occurs 0 to 40 times \n                           depending on len.\n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > s-length\n            evaluate s-char(i)\n              when '9'\n                if i > 1 and s-char(i - 1) = '7' \n                    and i < s-length and s-char(i + 1) = '7'\n                  add 0 to len\n                else\n                  add 1 to len\n                  move s-char(i) to res(len)\n                end-if\n              when other\n                add 1 to len\n                move s-char(i) to res(len)\n            end-evaluate\n          end-perform\n          goback.\n       end program SevenAte9.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55a29405bc7d2efaff00007c":[{"id":20321,"user_id":50,"body":"       identification division.\n       program-id. going.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9v9(37).\n       01 i           pic 9(8).\n       01 k           pic 9(5)v9(33).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8)v9(6).\n      \n       procedure division using n result.\n          move 1 to a\n          perform varying i from 1 until i >= n\n              compute k = i + 1\n              compute a = a \/ k + 1.0\n          end-perform\n      \n          move a to result\n      \n          goback.\n       end program going.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20322,"user_id":168,"body":"       identification division.\n       program-id. going.\n      \n       data division.\n       working-storage section.\n       01 x           pic 9(8)v9(30).\n       01 p           pic 9(38).\n       01 i           pic 9(8).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8)v9(6).\n      \n       procedure division using n result.\n          move 0 to x\n          move 1 to p\n          perform varying i from n by -1 until i = 0\n              compute x = x + 1.0 \/ p\n              multiply i by p\n              if p > 10 ** 30 then exit perform end-if\n          end-perform\n          compute result = x + 0.00000001\n          goback.\n       end program going.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20323,"user_id":53,"body":"       identification division.\n       program-id. going.\n       data division.\n       local-storage section.\n       01 a           pic 9v9(37).\n       01 i           pic 9(8).\n       01 j           pic 9(5)v9(33).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8)v9(6).\n       procedure division using n result.\n          move 1 to a\n          perform varying i from 1 until i >= n\n            add 1 to i giving j\n            compute a = a \/ j + 1\n          end-perform\n          move a to result\n          goback.\n       end program going.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55a5c82cd8e9baa49000004c":[{"id":20324,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       AUTHOR. \"ejini\u6218\u795e\".     \n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n           COMPUTE RESULT  = Y \/ K - X \/ K \n           IF FUNCTION REM(X, K) = 0 THEN\n               ADD 1 TO RESULT\n           END-IF.\n       END PROGRAM DIVISIBLE-COUNT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20325,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n         IF X = 0\n           COMPUTE RESULT = Y \/ K + 1\n         ELSE\n           COMPUTE RESULT = Y \/ K - (X - 1) \/ K.\n       END PROGRAM DIVISIBLE-COUNT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20326,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n           COMPUTE RESULT = (Y \/ K) - (X \/ K)\n           IF  FUNCTION REM(X, K) = 0\n               ADD 1  TO RESULT\n           END-IF.\n       END PROGRAM DIVISIBLE-COUNT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20327,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n        move x to result\n        perform until function rem(result, k) = 0\n         add 1 to result giving result\n        end-perform\n        if result > y then\n         move 0 to result\n         goback\n        end-if\n        compute result = 1 + (y - result) \/ k\n        goback.\n       END PROGRAM DIVISIBLE-COUNT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20328,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n       COMPUTE RESULT = Y \/ K - X \/ K\n       IF FUNCTION MOD(X, K) = 0 ADD 1 TO RESULT.\n       END PROGRAM DIVISIBLE-COUNT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20329,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n           compute result = (y - x - function mod(y, k) \n                               + function mod(x, k)) \/ k\n           if function mod(x, k) = 0 then add 1 to result.\n       END PROGRAM DIVISIBLE-COUNT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20330,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DIVISIBLE-COUNT.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 X           PIC 9(32).\n       01 Y           PIC 9(32).\n       01 K           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING X Y K RESULT.\n        compute result = (y \/ k) - function integer(x \/ k) .\n        if function rem(x, k) = 0 then add 1 to result end-if .\n        goback.\n       END PROGRAM DIVISIBLE-COUNT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55a70521798b14d4750000a4":[{"id":20331,"user_id":53,"body":"       identification division.\n       program-id. Greet.\n       data division.\n       linkage section.\n       01 name        pic a(50).\n       01 result      pic x(82).\n       procedure division using name result.\n          move function concatenate(\n            'Hello, ', function trim(name),\n                 ' how are you doing today?')\n          to result\n          goback.\n       end program Greet.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20332,"user_id":null,"body":"       identification division.\n       program-id. Greet.\n      \n       data division.\n\n       linkage section.\n       01 name        pic x(50).\n       01 result      pic x(82).\n      \n       procedure division using name result.\n      \n          initialize result.\n      \n          STRING \"Hello, \" DELIMITED BY SIZE\n          name DELIMITED BY SPACE\n          \" how are you doing today?\" DELIMITED BY SIZE\n          INTO result\n            \n          END-STRING.\n      \n          goback.\n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20333,"user_id":168,"body":"       identification division.\n       program-id. Greet.\n      \n       data division.\n\n       linkage section.\n       01 name        pic x(50).\n       01 result      pic x(82).\n      \n       procedure division using name result.\n          initialize result\n          string 'Hello, ' delimited by size\n                 name delimited by space\n                 ' how are you doing today?'\n                 into result\n          end-string.\n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20334,"user_id":null,"body":"       identification division.\n       program-id. Greet.\n      \n       data division.\n\n       linkage section.\n       01 name        pic x(50).\n       01 result      pic x(82).\n      \n       procedure division using name result.\n          initialize result\n          string 'Hello, ' delimited by size\n                 name      delimited by space\n                 ' how are you doing today?' delimited by size \n            into result      \n          goback.\n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20335,"user_id":null,"body":"       identification division.\n       program-id. Greet.\n      \n       data division.\n\n       working-storage section.\n       01 hello       pic x(7) value'Hello, '.\n       01 how         pic x(25) value ' how are you doing today?'.\n       linkage section.\n       01 name        pic x(50).\n       01 result      pic x(82).\n          \n       procedure division using name result.\n          initialize result.\n          string hello delimited by size\n            name delimited by space\n            how delimited by size\n            into result\n          end-string.\n      \n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20336,"user_id":null,"body":"       identification division.\n       program-id. Greet.\n      \n       data division.\n\n       linkage section.\n       01 name        pic x(50).\n       01 result      pic x(82).\n      \n       procedure division using name result.\n      \n          initialize result\n          move function concatenate(\n\n            'Hello, ', function trim(name),\n\n                 ' how are you doing today?')\n\n          to result\n          goback.\n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20337,"user_id":421,"body":"       identification division.\n       program-id. Greet.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 ptr         usage index value 1.\n       linkage section.\n       01 name        pic x(50).\n       01 result      pic x(82).\n      \n       procedure division using name result.     \n          initialize result\n          string \"Hello, \" function trim(name)\n          \" how are you doing today?\" into result with pointer ptr.\n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20338,"user_id":50,"body":"       identification division.\n       program-id. Greet.\n      \n       data division.\n\n       linkage section.\n       01 name        pic a(50).\n       01 result      pic x(82).\n      \n       procedure division using name result.\n      \n          initialize result\n          string 'Hello, ' function trim(name)\n                 ' how are you doing today?'\n          into result\n      \n          goback.\n       end program Greet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55ab4f980f2d576c070000f4":[{"id":20339,"user_id":421,"body":"       identification division.\n       program-id. game.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 i                  pic 9(16)V9(8).\n       linkage section.\n       01  n                 pic 9(8).\n       01  result.\n           05 numerator      pic 9(16).\n           05 denominator    pic 9(16).\n      \n       procedure division using n result.\n           compute i = n * n * 0.5    \n           if function rem(i, 1) = 0.5 then\n               multiply i by 2 giving numerator\n               move 2 to denominator\n           else\n               move i to numerator\n               move 1 to denominator\n           end-if.\n       end program game.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20340,"user_id":76,"body":"       identification division.\n       program-id. game.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(8).\n       01  result.\n           05 numerator      pic 9(16).\n           05 denominator    pic 9(16).\n      \n       procedure division using n result.\n         if function rem(n, 2) = 0 then\n           compute numerator = n * n \/ 2\n           move 1 to denominator\n         else\n           compute numerator = n * n\n           move 2 to denominator\n         end-if.\n       end program game.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20341,"user_id":168,"body":"       identification division.\n       program-id. game.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(8).\n       01  result.\n           05 numerator      pic 9(16).\n           05 denominator    pic 9(16).\n      \n       procedure division using n result.\n          compute numerator = n * n\n          if function mod(numerator, 2) = 0\n              divide 2 into numerator\n              move 1 to denominator\n          else\n              move 2 to denominator\n          end-if.\n       end program game.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20342,"user_id":53,"body":"       identification division.\n       program-id. game.\n       data division.\n       linkage section.\n       01  n         pic 9(8).\n       01  result.\n           05 a      pic 9(16).\n           05 b      pic 9(16).\n       procedure division using n result.\n          initialize result\n          set b to 1\n          multiply n by n giving a\n          if function mod (n, 2) = 0 then\n            divide 2 into a\n          else\n            add 1 to b\n          end-if\n          goback.\n       end program game.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20343,"user_id":50,"body":"       identification division.\n       program-id. game.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(8).\n       01  result.\n           05 numerator      pic 9(16).\n           05 denominator    pic 9(16).\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          divide function abs(n ** 2) by 2\n                 giving numerator\n                 remainder denominator\n      \n          if denominator = 0\n                move 1 to denominator\n          else  compute numerator = 2 * numerator + 1\n                move 2 to denominator end-if\n      \n          goback.\n       end program game.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55ad04714f0b468e8200001c":[{"id":20344,"user_id":421,"body":"       identification division.\n       program-id. GetChar.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  n      pic 9(3).\n       01  result pic x.      \n       procedure division using n result.\n           move function char(n + 1) to result.\n       end program GetChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20345,"user_id":null,"body":"       identification division.\n       program-id. GetChar.\n       data division.\n      \n       linkage section.\n       01  n      pic 9(3).\n       01  result pic x.\n      \n       procedure division using n result.\n      \n         MOVE FUNCTION CHAR(n + 1) TO result.\n          goback.\n       end program GetChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20346,"user_id":1277,"body":"       identification division.\n       program-id. GetChar.\n       data division.\n      \n       linkage section.\n       01  n      pic 9(3).\n       01  result pic x.\n      \n       procedure division using n result.\n          move function char(n + 1) to result.\n      \n          goback.\n       end program GetChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20347,"user_id":168,"body":"       identification division.\n       program-id. GetChar.\n       data division.\n      \n       linkage section.\n       01  n      pic 9(3).\n       01  result pic x.\n      \n       procedure division using n result.\n          move function char(n + 1) to result.\n       end program GetChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20348,"user_id":53,"body":"       identification division.\n       program-id. GetChar.\n       data division.\n       linkage section.\n       01  n      pic 9(3).\n       01  c      pic x.\n       procedure division using n c.\n          move function char(n + 1) to c.\n       end program GetChar.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20349,"user_id":50,"body":"       identification division.\n       program-id. GetChar.\n       data division.\n      \n       linkage section.\n       01  n      pic 9(3).\n       01  result pic x.\n      \n       procedure division using n result.\n      \n          move function char(n + 1) to result\n      \n          goback.\n       end program GetChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55b195a69a6cc409ba000053":[{"id":20350,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTAL-INC-DEC.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(2).\n       LINKAGE SECTION.\n       01 N           PIC 9(3).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 20 + N\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 9\n               COMPUTE RESULT = RESULT * (N + I) \/ I\n           END-PERFORM\n           COMPUTE RESULT = RESULT \/ 10 - 10 * N - 1.\n       END PROGRAM TOTAL-INC-DEC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20351,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTAL-INC-DEC.\n       DATA DIVISION.\n       working-storage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 k           pic 9(3).\n      \n       LINKAGE SECTION.\n       01 N           PIC 9(3).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n\n          move 1 to a\n          move 1 to b\n          perform varying k from 0 until k = n\n            compute a = function integer((a * (10 + k)) \/ (k + 1))\n            compute b = function integer((b * (11 + k)) \/ (k + 1))\n          end-perform\n      \n          compute result = a + b - 1 - 10 * n\n      \n          goback.\n       END PROGRAM TOTAL-INC-DEC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20352,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TOTAL-INC-DEC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(3).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = (N + 1)\n            * (N + 2) * (N + 3) * (N + 4)\n            * (N + 5) * (N + 6) * (N + 7)\n            * (N + 8) * (N + 9) * (N + 20)\n            \/ 3628800 - 10 * N - 1.\n       END PROGRAM TOTAL-INC-DEC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20353,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(31).\n       01 I           PIC 9(8).\n       PROCEDURE DIVISION.\n       TOTAL-INC-DEC SECTION.\n           MOVE 1  TO RESULT\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I = 10\n               COMPUTE RESULT = RESULT * (N + I) \/ I\n           END-PERFORM\n           COMPUTE RESULT = RESULT * (N + 20) \/ 10 - N * 10 - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20354,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(31).\n       01 i           pic 9(8).\n       PROCEDURE DIVISION.\n       TOTAL-INC-DEC SECTION.\n           compute result = 20 + n\n           perform varying i from 1 by 1 until i > 9\n               compute result = result * (n + i) \/ i\n           end-perform\n           compute result = result \/ 10 - 10 * n - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20355,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       local-storage section.\n       01 c       pic 9(8).\n       01 i       pic 9(8).\n       PROCEDURE DIVISION.\n       TOTAL-INC-DEC SECTION.\n          set c to 1\n            perform varying i from 1 by 1 until i > n\n                compute c = c * (n + 10 - i) \/ i\n            end-perform\n          compute result = (c * n \/ 10) + 2 * c - 10 * n - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20356,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 i           pic 9(8).\n       PROCEDURE DIVISION.\n       TOTAL-INC-DEC SECTION.\n            set a to 1\n            set b to 1\n            perform varying i from 0 by 1 until i >= n\n                compute a = (a * (10 + i) \/ (i + 1))\n                compute b = (b * (11 + i) \/ (i + 1))\n            end-perform\n            compute result = a + b - (1 + 10 * n)\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55b1e5c4cbe09e46b3000034":[{"id":20357,"user_id":421,"body":"       identification division.\n       program-id. is-pronic.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic s9(8).\n       01 result      pic 9.\n       procedure division using n result.\n           initialize result\n           if n >= 0 and function rem(function sqrt(1 + 4 * n), 1) = 0 \n               set result to 1\n          end-if.\n       end program is-pronic.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20358,"user_id":168,"body":"       identification division.\n       program-id. is-pronic.\n      \n       data division.\n       linkage section.\n       01 n           pic s9(8).\n       01 result      pic 9.\n       procedure division using n result.\n          if n >= 0 and function mod((4 * n + 1) ** 0.5, 1) = 0\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program is-pronic.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20359,"user_id":50,"body":"       identification division.\n       program-id. is-pronic.\n      \n       data division.\n       local-storage section.\n       01 isqrt       pic 9(8).\n       linkage section.\n       01 n           pic s9(8).\n       01 result      pic 9.\n       procedure division using n result.\n      \n      * function sqrt of a negative number returns 0, so no exception is needed for this case\n\n          compute isqrt = function sqrt(n)\n      \n          if n = isqrt * (isqrt + 1)\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program is-pronic.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20360,"user_id":53,"body":"       identification division.\n       program-id. is-pronic.\n      \n       data division.\n       local-storage section.\n       01 isqrt       pic 9(8).\n       linkage section.\n       01 n           pic S9(8).\n       01 result      pic 9.\n       procedure division using n result.\n          if n < 0 then goback end-if\n          compute isqrt = function sqrt(n)\n          if n = isqrt * (isqrt + 1)\n            move 1 to result\n          end-if\n          goback.\n       end program is-pronic.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55b2549a781b5336c0000103":[{"id":20361,"user_id":168,"body":"       identification division.\n       program-id. compare-powers.\n      \n       data division.\n      \n       linkage section.\n       01  n1.\n           05 base1  pic 9(10).\n           05 exp1   pic 9(10).\n       01  n2.\n           05 base2  pic 9(10).\n           05 exp2   pic 9(10).\n       01 result     pic s9 sign leading.\n      \n       procedure division using n1 n2 result.\n          compute result = function sign(exp2 * function log(base2) -\n                                         exp1 * function log(base1)).\n       end program compare-powers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20362,"user_id":53,"body":"       identification division.\n       program-id. compare-powers.\n       data division.\n       local-storage section.\n       01  a         pic s9(10)v9(28).\n       01  b         pic s9(10)v9(28).\n       01  c         pic s9(10)v9(28).\n       linkage section.\n       01  n1.\n           05 x   pic 9(10).\n           05 y   pic 9(10).\n       01  n2.\n           05 v   pic 9(10).\n           05 w   pic 9(10).\n       01 r       pic s9(1) sign leading.\n       procedure division using n1 n2 r.\n          move y to a\n          move w to b\n          compute c = function log(v) * b - \n                      function log(x) * a\n          if c < 0 then compute r = -1 end-if\n          if c > 0 then compute r =  1 end-if\n          goback.\n       end program compare-powers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20363,"user_id":50,"body":"       identification division.\n       program-id. compare-powers.\n      \n       data division.\n       local-storage section.\n       01  a         pic s9(10)v9(28).\n       01  b         pic s9(10)v9(28).\n       01  c         pic s9(10)v9(28).\n      \n       linkage section.\n       01  n1.\n           05 base  pic 9(10).\n           05 exp   pic 9(10).\n       01  n2.\n           05 base  pic 9(10).\n           05 exp   pic 9(10).\n       01 result     pic s9(1) sign leading.\n      \n       procedure division using n1 n2 result.\n      \n          move exp of n1 to a\n          move exp of n2 to b\n          compute c = function log(base of n2) * b - \n                      function log(base of n1) * a\n          evaluate c\n              when < 0   move -1  to result\n              when > 0   move  1  to result\n          end-evaluate\n      \n          goback.\n       end program compare-powers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55b7bb74a0256d4467000070":[{"id":20364,"user_id":421,"body":"       identification division.\n       program-id. proper-fractions.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 num         pic 9(11).\n       01 temp        pic 9(6).\n       01 i           pic 9(6).\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n      \n       procedure division using n result.\n           if n = 1 then\n               move 0 to result\n               goback\n           end-if\n           initialize result\n           move n to num\n           compute temp = function sqrt(n)\n           perform varying i from 2 by 1 until i > temp\n               if function rem(n, i) = 0 then\n                   compute num = num - num \/ i\n                   perform until function rem(n, i) <> 0 \n                       divide n by i giving n\n                   end-perform\n               end-if\n          end-perform\n          if n > 1 then\n              compute result = num - num \/ n\n          else\n              move num to result\n          end-if.\n       end program proper-fractions.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20365,"user_id":168,"body":"       identification division.\n       program-id. proper-fractions.\n      \n       data division.\n       working-storage section.\n       01 d           pic 9(11).\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n      \n       procedure division using n result.\n          if n <= 1\n              compute result = 0\n          else\n              compute result = n\n          end-if\n          perform varying d from 2 by 1 until d * d > n\n              if function mod(n, d) = 0\n                  perform with test after until function mod(n, d) > 0\n                      divide d into n\n                  end-perform\n                  compute result = result - result \/ d\n              end-if\n          end-perform\n          if n > 1\n              compute result = result - result \/ n\n          end-if.\n       end program proper-fractions.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20366,"user_id":53,"body":"       identification division.\n       program-id. proper-fractions.\n       data division.\n       local-storage section.\n       01 p           pic 9(11).\n       linkage section.\n       01 n           pic 9(11).\n       01 m           pic 9(11).\n       procedure division using n m.\n          move 0 to m\n          if n < 2 then goback end-if\n          move n to m\n          perform varying p from 2 by 1 until p * p > n\n            if function rem(n, p) = 0\n              perform until function rem(n, p) <> 0\n                compute n = n \/ p\n              end-perform\n              compute m = m - function integer (m \/ p)\n            end-if\n          end-perform\n          if n > 1 then\n            compute m = m - function integer (m \/ n)\n          end-if\n          goback.\n       end program proper-fractions.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20367,"user_id":50,"body":"       identification division.\n       program-id. proper-fractions.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(11).\n       01 p           pic 9(11).\n\n       linkage section.\n       01 n           pic 9(11).\n       01 result      pic 9(11).\n       procedure division using n result.\n      \n          if n = 1\n              goback\n          end-if\n      \n          move n to a\n          perform varying p from 2 until p * p > n\n              if function rem(n, p) = 0\n                compute a = a - a \/ p\n                compute n = n \/ p\n                perform until function rem(n, p) <> 0\n                  compute n = n \/ p\n                end-perform\n              end-if\n          end-perform\n      \n          if n > 1\n             compute a = a - a \/ n\n          end-if\n      \n          move a to result\n      \n          goback.\n       end program proper-fractions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55be10de92aad5ef28000023":[{"id":20368,"user_id":421,"body":"       identification division.\n       program-id. check-choose.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 a           pic 9(34).\n       01 i           pic 9(8).\n       linkage section.\n       01 m           pic 9(34).\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using m n result.\n           move -1 to result\n           move 0 to i\n           move 1 to a\n           perform varying i from 0 by 1 until i > n \/ 2\n               if a = m then\n                   move i to result\n                   goback\n               end-if\n               compute a = a * (n - i) \/ (i + 1)\n           end-perform.\n       end program check-choose.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20369,"user_id":168,"body":"       identification division.\n       program-id. check-choose.\n      \n       data division.\n       working-storage section.\n       01 c           pic 9(34).\n       linkage section.\n       01 m           pic 9(34).\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using m n result.\n          compute c = 1\n          perform varying result from 0 until 2 * result > n\n              if c = m then goback end-if\n              if c > m then exit perform end-if\n              compute c = c * (n - result) \/ (result + 1)\n          end-perform\n          compute result = -1\n          goback.\n       end program check-choose.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20370,"user_id":53,"body":"       identification division.\n       program-id. check-choose.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 r           pic 9(34).\n       linkage section.\n       01 m           pic 9(34).\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using m n result.\n          move 1 to r\n          move -1 to result\n          perform varying i from 0 by 1 until i > n\n            if r = m then\n              move i to result\n              exit perform\n            end-if\n            compute r = r * (n - i) \/ (i + 1)\n          end-perform\n          goback.\n       end program check-choose.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20371,"user_id":50,"body":"       identification division.\n       program-id. check-choose.\n      \n       data division.\n       local-storage section.\n       01 tmp         pic 9(34) value 1.\n       01 i           pic 9(8).\n      \n       linkage section.\n       01 m           pic 9(34).\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using m n result.\n\n      \n          perform varying result from 0 until 2 * result > n\n              if tmp >= m then exit perform end-if\n              compute tmp = tmp * (n - result) \/ (result + 1)\n          end-perform\n\n          if tmp <> m then move -1 to result end-if\n     \n          goback.\n       end program check-choose.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20372,"user_id":168,"body":"       identification division.\n       program-id. check-choose.\n      \n       data division.\n       working-storage section.\n       01 c           pic 9(20).\n       linkage section.\n       01 m           pic 9(20).\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using m n result.\n          compute c = 1\n          perform varying result from 0 until 2 * result > n\n              if c = m then goback end-if\n              if c > m then exit perform end-if\n              compute c = c * (n - result) \/ (result + 1)\n          end-perform\n          compute result = -1\n          goback.\n       end program check-choose.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20373,"user_id":53,"body":"       identification division.\n       program-id. check-choose.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 r           pic 9(20).\n       linkage section.\n       01 m           pic 9(20).\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using m n result.\n          move 1 to r\n          move -1 to result\n          perform varying i from 0 by 1 until i > n\n            if r = m then\n              move i to result\n              exit perform\n            end-if\n            compute r = r * (n - i) \/ (i + 1)\n          end-perform\n          goback.\n       end program check-choose.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55beec7dd347078289000021":[{"id":20374,"user_id":53,"body":"       identification division.\n       program-id. NodeListLength.\n       data division.\n       linkage section.\n       01  node.\n           05 val     pic 9(2).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  result     pic 9(3).\n       procedure division using ptr result.\n           initialize result\n           perform until ptr = null\n               set address of node to ptr\n               set ptr to nxt\n               add 1 to result\n           end-perform\n           goback.\n       end program NodeListLength.\n\n       identification division.\n       program-id. NodeListCount.\n       data division.\n       linkage section.\n       01  node.\n           05 val     pic 9(2).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  n          pic 9(2).\n       01  result     pic 9(3).\n       procedure division using ptr n result.\n           initialize result\n           perform until ptr = null\n               set address of node to ptr\n               if val = n add 1 to result end-if\n               set ptr to nxt\n           end-perform\n           goback.\n       end program NodeListCount.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20375,"user_id":168,"body":"       identification division.\n       program-id. NodeListLength.\n\n       data division.\n\n       linkage section.\n       01  node.\n           05 val     pic 9(2).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  result     pic 9(3).\n\n       procedure division using ptr result.\n           move 0 to result\n           perform until ptr = null\n              add 1 to result\n              set address of node to ptr\n              move nxt to ptr\n           end-perform.\n       end program NodeListLength.\n\n      \n       identification division.\n       program-id. NodeListCount.\n\n       data division.\n\n       linkage section.\n       01  node.\n           05 val     pic 9(2).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  n          pic 9(2).\n       01  result     pic 9(3).\n\n       procedure division using ptr n result.\n           move 0 to result\n           perform until ptr = null\n              set address of node to ptr\n              if val = n then add 1 to result end-if\n              move nxt to ptr\n           end-perform.\n       end program NodeListCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20376,"user_id":50,"body":"       identification division.\n       program-id. NodeListLength.\n\n       data division.\n\n       linkage section.\n       01  node.\n           05 val     pic 9(2).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  result     pic 9(3).\n\n       procedure division using ptr result.\n           \n           perform varying result from 0 until ptr = null\n               set address of node to ptr\n               set ptr to nxt\n           end-perform\n      \n           goback.\n       end program NodeListLength.\n\n      \n       identification division.\n       program-id. NodeListCount.\n\n       data division.\n\n       linkage section.\n       01  node.\n           05 val     pic 9(2).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  n          pic 9(2).\n       01  result     pic 9(3).\n\n       procedure division using ptr n result.\n      \n           initialize result\n           perform until ptr = null\n               set address of node to ptr\n               if val = n add 1 to result end-if\n               set ptr to nxt\n           end-perform\n      \n           goback.\n       end program NodeListCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55befc42bfe4d13ab1000007":[{"id":20377,"user_id":50,"body":"       identification division.\n       program-id. GetNth.\n\n       data division.\n       linkage section.\n       01  node.\n           05 val            pic s9(2).\n           05 nxt            usage pointer.\n       01  head              usage pointer.\n       01  indx              usage index.\n       01  result            usage pointer.\n\n       procedure division using head indx result.\n      \n           set result to null\n           if head = null or indx is negative then goback end-if\n           perform indx times\n              set address of node to head\n              if head = null goback end-if\n              set head to nxt\n           end-perform\n           set result to head.\n      \n       end program GetNth.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20378,"user_id":53,"body":"       identification division.\n       program-id. GetNth.\n       data division.\n       linkage section.\n       01  node.\n           05 val            pic s9(2).\n           05 nxt            usage pointer.\n       01  head              usage pointer.\n       01  indx              usage index.\n       01  result            usage pointer.\n       procedure division using head indx result.\n          set result to null\n          if head = null or indx < 0 then goback end-if\n          perform indx times\n            set address of node to head\n            if head = null then goback end-if\n            set head to nxt\n          end-perform\n          set result to head\n          goback.\n       end program GetNth.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55bf01e5a717a0d57e0000ec":[{"id":20379,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PERSISTENCE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 R           PIC 9(8).\n       01 M           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING RESULT FROM 0 BY 1 UNTIL N < 10\n               SET M TO N\n               SET R TO 1\n               PERFORM UNTIL M = 0\n                   MULTIPLY FUNCTION REM(M, 10) BY R\n                   DIVIDE 10 INTO M\n               END-PERFORM\n               SET N TO R\n           END-PERFORM.\n       END PROGRAM PERSISTENCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20380,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PERSISTENCE RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n       if n is less than 10 goback end-if\n       add 1 to result\n       move 1 to m\n       perform until n is equal to zero\n         multiply m by function mod(n, 10) giving m\n         divide n by 10 giving n\n       end-perform\n       call 'PERSISTENCE' using by content m by reference result.\n       END PROGRAM PERSISTENCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20381,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PERSISTENCE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n          MOVE 0 TO RESULT\n          PERFORM UNTIL N <= 9\n            MOVE 1 TO M\n            PERFORM UNTIL N <= 0\n              COMPUTE M = M * FUNCTION REM (N, 10)\n              COMPUTE N = N \/ 10\n            END-PERFORM\n            MOVE M TO N\n            COMPUTE RESULT = RESULT + 1\n          END-PERFORM\n          GOBACK.\n       END PROGRAM PERSISTENCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20382,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PERSISTENCE.\n       DATA DIVISION.\n       working-storage section.\n       01 x           pic 9(8).\n       01 r           pic 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           perform until n < 10\n              compute x = 1\n              perform until n = 0\n                  divide n by 10 giving n remainder r\n                  multiply r by x\n              end-perform\n              compute n = x\n              add 1 to result\n           end-perform.\n       END PROGRAM PERSISTENCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20383,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PERSISTENCE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 H           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n\n          Move 0 to result,\n\n          Perform until n <= 9,\n              Move 1 to h,\n              Perform until n = 0,\n                Compute h = h * function rem(n, 10),\n                Compute n = n \/ 10,\n              End-perform\n              Move h to n,\n              Add 1 to result,\n          end-perform\n\n          GOBACK.\n       END PROGRAM PERSISTENCE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55c04b4cc56a697bb0000048":[{"id":20384,"user_id":53,"body":"       identification division.\n       program-id. scramble.\n       data division.\n       local-storage section.\n       01  i               usage index.\n       01  cde             pic 9(3).\n       01  counter.\n           03  ht          pic 9(6) occurs 26 times.\n       linkage section.\n       01  s1.\n           03  s1-length   pic 9(6).\n           03  s1-char     pic a occurs 1 to 600000 times \n                           depending on s1-length.\n       01  s2.\n           03  s2-length   pic 9(6).\n           03  s2-char     pic a occurs 1 to 600000 times \n                           depending on s2-length.\n       01  result          pic 9.\n       procedure division using s1 s2 result.\n          set result to 1\n          perform varying i from 1 until i > s1-length\n            add 1 to ht(function ord(s1-char(i)) - 97)\n          end-perform\n          perform varying i from 1 until i > s2-length\n            compute cde = function ord(s2-char(i)) - 97\n            if ht(cde) = 0 then set result to 0, goback end-if\n            subtract 1 from ht(cde)\n          end-perform\n          goback.\n       end program scramble.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20385,"user_id":50,"body":"       identification division.\n       program-id. scramble.\n\n       data division.\n       local-storage section.\n       01  counterA.\n           03  ca         pic 9(6) occurs 26 times.\n       01  counterB.\n           03  cb         pic 9(6) occurs 26 times indexed h.\n       01  x              pic 9(6).\n      \n       linkage section.\n       01  s1.\n           03  s1-length   pic 9(6).\n           03  s1-chars.\n               05  s1-char pic a occurs 1 to 600000 times \n                          depending on s1-length indexed i.\n       01  s2.\n           03  s2-length   pic 9(6).\n           03  s2-chars.\n               05  s2-char pic a occurs 1 to 600000 times \n                           depending on s2-length indexed j.\n       01  result          pic 9.\n\n       procedure division using s1 s2 result.\n      \n          perform varying i from 1 until i > s1-length\n            add 1 to ca(function ord(s1-char(i)) - 97)\n          end-perform\n      \n          perform varying j from 1 until j > s2-length\n            add 1 to cb(function ord(s2-char(j)) - 97)\n          end-perform\n          \n          perform varying h from 1 until h = 27\n              if cb(h) > ca(h) move 0 to result goback end-if\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program scramble.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55c45be3b2079eccff00010f":[{"id":20386,"user_id":168,"body":"       identification division.\n       program-id. YourOrderPlease.\n       data division.\n       working-storage section.\n       01  j          usage index.\n       01  n          pic 9(3).\n       01  l          pic 9(3).\n       01  ws         occurs 0 to 200 times depending on n.\n           05 w       pic x(201).\n           05 k       pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 200 times \n                                 depending on s-length indexed by i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 200 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n          move 0 to n\n          move 1 to i\n          perform until i > s-length\n              add 1 to n\n              unstring s(4:) delimited by space\n                  into w(n) count in l with pointer i\n              perform varying j from 1 until j > l\n                  if w(n)(j:1) >= '0' and <= '9'\n                      move w(n)(j:1) to k(n)\n                      exit perform\n                  end-if\n              end-perform\n          end-perform\n          sort ws on ascending key k\n          move s-length to res-length\n          move 1 to i\n          perform varying j from 1 until j > n\n              string w(j) delimited by space ' ' \n                into result(4:) with pointer i\n          end-perform.\n       end program YourOrderPlease.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20387,"user_id":53,"body":"       identification division.\n       program-id. YourOrderPlease.\n       data division.\n       local-storage section.\n       01  idx.\n           05 i            usage index.\n           05 j            usage index.\n       01  wrd-curr.\n           05 w            pic x(200).\n           05 t            pic x.\n           05 n            pic 9.\n       01  wrds-arr.\n           05 wrds-len     pic 9(3).\n           05 wrds         occurs 0 to 200 times \n                           depending on wrds-len.\n              08 wrd       pic x(200).\n              08 ptr       pic 9(3).\n       linkage section.\n       01  s.\n           05 s-len        pic 9(3).\n           05 s-chars.\n              08 s-char    pic x occurs 0 to 200 times \n                                 depending on s-len.\n       01  result.\n           05 res-len      pic 9(3).\n           05 res.\n              08 xs        pic x occurs 0 to 200 times \n                                 depending on res-len.\n       procedure division using s result.\n          initialize result\n          set i to 1\n          perform until i > s-len\n            unstring s-chars\n              delimited by space\n              into w\n              with pointer i\n            end-unstring\n            if w <> space then\n              add 1 to wrds-len\n              move w to wrd of wrds(wrds-len)\n              unstring w delimited by \n                '1' or '2' or '3' or '4' \n                    or '5' or '6' or '7' or '8' or '9'\n              into t delimiter in n\n              move n to ptr of wrds(wrds-len)\n            end-if\n          end-perform\n          sort wrds on ascending key ptr\n          move s-len to res-len\n          set j to 1\n          perform varying i from 1 until i > wrds-len\n            string wrds(i) \n              delimited by space ' ' \n              delimited by size\n              into res \n              pointer j\n          end-perform\n          goback.\n       end program YourOrderPlease.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20388,"user_id":50,"body":"       identification division.\n       program-id. YourOrderPlease.\n       data division.\n       local-storage section.\n       01  arr.\n           05  a pic x(200) occurs 9 times.\n       01  i usage index.\n       01  j usage index.\n       01  w pic x(200).\n       01  t pic x.\n       01  n pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 chrs.\n              07           pic x occurs 0 to 200 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 r.\n              07           pic x occurs 0 to 200 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n      \n          initialize result\n          set i to 1\n          perform until i > s-length\n              unstring chrs delimited by all ' '\n              into w pointer i\n              unstring w delimited by '1'\n                                   or '2'      \n                                   or '3'      \n                                   or '4'      \n                                   or '5'      \n                                   or '6'      \n                                   or '7'      \n                                   or '8'      \n                                   or '9'\n              into t delimiter in n\n              move w to a(n)\n          end-perform\n      \n          move s-length to res-length\n          set j to 1\n          perform varying i from 1 until j > s-length\n              string a(i) delimited by space ' ' delimited by size\n              into r pointer j\n          end-perform\n      \n          goback.\n       end program YourOrderPlease.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55c6126177c9441a570000cc":[{"id":20389,"user_id":50,"body":"       identification division.\n       program-id. OrderWeight.\n      \n       data division.\n       local-storage section.\n       01  delim       pic x.\n       01  token       pic x(10).\n       01  arr.\n           03  l       pic 9(2).\n           03  pairs occurs 0 to 99 times depending on l\n                                          indexed by j.\n               05  st  pic x(10).\n               05  n   pic 9(2).\n       01  i           usage index.\n           88  endReached  value 501.\n       \n       linkage section.\n       01 s           pic x(500).\n       01 result      pic x(500).\n      \n       procedure division using s result.\n      \n          initialize result\n          set i to 1\n          perform until endReached\n            unstring s\n                delimited by space\n                into token\n                delimiter in delim\n                with pointer i\n            end-unstring\n            if token = space exit perform end-if\n            add 1 to l\n            move token to st(l)\n      *     n(l) is 0 by default but without initializing it we get incorrect results...\n            initialize n(l)\n            perform varying j from 1 until token(j:1) = space\n                add function numval(token(j:1)) to n(l)\n            end-perform\n          end-perform\n      \n          sort pairs on ascending n ascending st\n      \n          set i to 1\n          perform varying j from 1 until j > l\n            string\n              function trim(st(j)) ' ' \n              into result\n              with pointer i\n            end-string\n          end-perform\n      \n          goback.\n       end program OrderWeight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55c9172ee4bb15af9000005d":[{"id":20390,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PENTABONACCI.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING N RESULT.\n           if n < 2 then\n              move n to result\n              goback\n           end-if\n           compute result = (n - 1) \/ 6 + (n - 2) \/ 6 + 1.\n       END PROGRAM PENTABONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20391,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PENTABONACCI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING N RESULT.\n       IF N > 0 COMPUTE RESULT = (N - 1) \/ 6 + (N - 2) \/ 6 + 1.\n       END PROGRAM PENTABONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20392,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PENTABONACCI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N = 0 THEN\n              MOVE 0 TO RESULT\n           ELSE\n              COMPUTE RESULT = 1 \n                + (N - 1) \/ 6 + (N - 2) \/ 6\n           END-IF. \n       END PROGRAM PENTABONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20393,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PENTABONACCI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING N RESULT.\n           if n <= 1\n              move n to result\n           else\n              compute result = (n + 4) \/ 6\n              multiply 2 by result\n              if function mod(n, 6) <> 1\n                  subtract 1 from result\n              end-if\n           end-if.\n       END PROGRAM PENTABONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20394,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PENTABONACCI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING N RESULT.\n       if N = 0\n          move 0 TO result\n       else\n          compute result = 1 + (n - 2) \/ 6 + (n - 1) \/ 6\n       end-if\n       goback.\n       END PROGRAM PENTABONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55cbc3586671f6aa070000fb":[{"id":20395,"user_id":421,"body":"       identification division.\n       program-id. factor.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n           initialize result\n           if function rem(base, factor) = 0 then\n               set result to 1\n           end-if.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20396,"user_id":168,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n         compute result = 1 - function sign(function mod(base, factor)).\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20397,"user_id":null,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n          IF FUNCTION MOD(base,factor) = 0 THEN\n              MOVE 1 TO result\n          ELSE\n              MOVE 0 TO result\n          END-IF.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20398,"user_id":null,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n       IF FUNCTION MOD(base, factor) IS EQUAL TO 0\n       MOVE 1 TO RESULT\n       ELSE\n       MOVE 0 TO RESULT\n           goback.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20399,"user_id":null,"body":"       identification division.\n       program-id. factor.    \n       author. \"fantastic++aptainfox\".\n      \n       data division.\n            local-storage section.\n            01  result1     pic 9(5).\n            01  result2     pic 9(5).\n            linkage section.\n            01  base        pic 9(5).\n            01  factor      pic 9(2). \n            01  result      pic 9.\n      \n       procedure division using base factor result.\n           divide base by factor giving result1 remainder result2.\n           if result2 = 0\n                move 1 to result\n           else\n                move 0 to result \n           end-if.\n           goback.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20400,"user_id":null,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n           if function mod(base, factor) = 0 then\n              move 1 to result\n           else\n              move 0 to result\n           end-if.\n           goback.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20401,"user_id":76,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n         if function mod(base, factor) = 0 move 1 to result\n         else move 0 to result end-if.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20402,"user_id":527,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n           if function mod (base, factor) = 0 then\n               move 1 to result\n           else\n               move 0 to result\n           end-if.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20403,"user_id":50,"body":"       identification division.\n       program-id. factor.      \n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n            \n           evaluate function rem(base, factor)\n           when 0     move 1 to result\n           when other move 0 to result\n           end-evaluate\n      \n           goback.\n       end program factor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20404,"user_id":53,"body":"       identification division.\n       program-id. factor.\n       data division.\n       linkage section.\n       01  base        pic 9(5).\n       01  factor      pic 9(2). \n       01  result      pic 9.\n       procedure division using base factor result.\n           initialize result\n           if function rem(base, factor) = 0 then\n               move 1 to result\n           end-if\n           goback.\n       end program factor.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55cbd4ba903825f7970000f5":[{"id":20405,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n      \n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n      * your code here\n           COMPUTE s1 = (s1 + s2 + s3) \/ 3.\n           EVALUATE s1\n               WHEN 090 THRU 100\n                   MOVE 'A' TO result\n               WHEN 080 THRU 089\n                   MOVE 'B' TO result\n               WHEN 070 THRU 079\n                   MOVE 'C' TO result\n               WHEN 060 THRU 069\n                   MOVE 'D' TO result\n               WHEN LESS THAN 60\n                   MOVE 'F' TO result\n           END-EVALUATE.\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20406,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n      \n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n           evaluate function mean(s1, s2, s3)\n              when < 60  move 'F' to result\n              when < 70  move 'D' to result\n              when < 80  move 'C' to result\n              when < 90  move 'B' to result\n              when other move 'A' to result\n           end-evaluate\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20407,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n       local-storage section.\n       01 Average     PIC 9(3).\n      \n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n      * average\n        COMPUTE Average=(s1+s2+s3)\/3.\n        EVALUATE Average\n        WHEN \"090\" THRU \"100\"\n          MOVE 'A' TO RESULT\n        WHEN \"080\" THRU \"089\"\n          MOVE 'B' TO RESULT\n        WHEN \"070\" THRU \"079\"\n          MOVE 'C' TO RESULT\n        WHEN \"060\" THRU \"069\"\n          MOVE 'D' TO RESULT\n        WHEN \"0\" THRU \"059\"\n          MOVE 'F' TO RESULT\n        END-EVALUATE\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20408,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n       working-storage section.\n      \n       01 avg         pic 9(5)V99 value 0.\n      \n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n           compute avg = (s1 + s2 + s3) \/ 3\n           \n           evaluate true\n           when avg >= 90 and avg <= 100\n              move 'A'   to result\n           when avg >= 80 and avg < 90\n              move 'B'   to result\n           when avg >= 70 and avg < 80\n              move 'C'   to result\n           when avg >= 60 and avg < 70\n              move 'D'   to result\n           when other\n              move 'F'   to result\n           end-evaluate\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20409,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n      \n       working-storage section.\n       01  average    pic 9(3).\n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n       COMPUTE average = (s1+s2+s3)\/3\n       DISPLAY average\n       EVALUATE TRUE\n          WHEN average < 60\n            MOVE 'F' TO result\n          WHEN 60 <= average AND average < 70\n            MOVE 'D' TO result\n          WHEN 70 <= average AND average < 80\n            MOVE 'C' TO result\n          WHEN 80 <= average AND average < 90\n            MOVE 'B' TO result\n          WHEN 90 <= average\n            MOVE 'A' TO result\n       END-EVALUATE\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20410,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n       working-storage section.\n       01 avg_s       pic 9(3).\n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n           compute avg_s = (s1 + s2 + s3) \/ 3.\n           evaluate avg_s\n              when >= 0 and < 60\n                 move \"F\" to result\n              when >= 60 and < 70\n                 move \"D\" to result\n              when >= 70 and < 80\n                 move \"C\" to result\n              when >= 80 and < 90\n                 move \"B\" to result\n              when >= 90 and <= 100\n                 move \"A\" to result      \n           end-evaluate.\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20411,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. gradeBook.\n       REMARKS. solution 2.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S1         PIC 9(3).\n       01  S2         PIC 9(3).\n       01  S3         PIC 9(3).\n       01  RESULT     PIC A.\n       PROCEDURE DIVISION USING S1 S2 S3 RESULT.\n           EVALUATE  FUNCTION MEAN(S1, S2, S3)\n               WHEN  >= 90  MOVE 'A'  TO RESULT\n               WHEN  >= 80  MOVE 'B'  TO RESULT\n               WHEN  >= 70  MOVE 'C'  TO RESULT\n               WHEN  >= 60  MOVE 'D'  TO RESULT\n               WHEN  OTHER  MOVE 'F'  TO RESULT\n           END-EVALUATE.\n       END PROGRAM gradeBook.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20412,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. gradeBook.\n       REMARKS. solution 1.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  GRADES     PIC A(11) VALUE 'FFFFFFDCBAA'.\n       LINKAGE SECTION.\n       01  S1         PIC 9(3).\n       01  S2         PIC 9(3).\n       01  S3         PIC 9(3).\n       01  RESULT     PIC A.\n       PROCEDURE DIVISION USING S1 S2 S3 RESULT.\n           MOVE GRADES((S1 + S2 + S3) \/ 30 + 1:1)  TO RESULT.\n       END PROGRAM gradeBook.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20413,"user_id":null,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n       local-storage section.\n       01  avg        pic 9(3).\n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n           compute avg = (s1 + s2 + s3) \/ 3\n           evaluate avg\n               when >=90 move \"A\" to result\n               when >=80 move \"B\" to result\n               when >=70 move \"C\" to result\n               when >=60 move \"D\" to result\n               when other move \"F\" to result\n           end-evaluate\n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20414,"user_id":50,"body":"       identification division.\n       program-id. gradeBook.      \n       data division.\n      \n       linkage section.\n       01  s1         pic 9(3).\n       01  s2         pic 9(3).  \n       01  s3         pic 9(3).\n       01  result     pic A.\n       procedure division using s1 s2 s3 result.\n                  \n           evaluate (s1 + s2 + s3) \/ 3\n           when >  90    move 'A' to result\n           when >= 80    move 'B' to result\n           when >= 70    move 'C' to result\n           when >= 60    move 'D' to result\n           when other    move 'F' to result\n           end-evaluate\n      \n           goback.\n       end program gradeBook.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55ccdf1512938ce3ac000056":[{"id":20415,"user_id":null,"body":"       identification division.\n       program-id. IsLockNessMonster.\n      \n       data division.\n       local-storage section.\n       77 count-1     usage is index.\n       77 count-2     usage is index.\n       77 count-3     usage is index.\n\n       linkage section.\n       01 strng       pic x(200).\n       01 result      pic 9.\n      \n       procedure division using strng result.\n          inspect strng tallying \n             count-1 for all 'tree fiddy'\n             count-2 for all 'three fifty'\n             count-3 for all '3.50'\n          set result to function min(1, count-1 + count-2 + count-3)\n          goback.\n       end program IsLockNessMonster.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20416,"user_id":53,"body":"       identification division.\n       program-id. IsLockNessMonster.\n       data division.\n       local-storage section.\n       01 trick       pic x.\n       01 anything    pic x.\n       linkage section.\n       01 s           pic x(200).\n       01 result      pic 9.\n       procedure division using s result.\n          set result to 0\n          inspect s tallying result for all \"tree fiddy\"\n          inspect s tallying result for all \"three fifty\"\n          inspect s tallying result for all \"3.50\"\n          move function min(result, 1) to result\n          goback.\n       end program IsLockNessMonster.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20417,"user_id":50,"body":"       identification division.\n       program-id. IsLockNessMonster.\n      \n       data division.\n       local-storage section.\n       01 trick       pic x.\n       01 anything    pic x.\n      \n       linkage section.\n       01 s           pic x(200).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          unstring\n              s\n              delimited\n              by 'tree fiddy'\n              or 'three fifty'\n              or '3.50'\n              into anything\n              delimiter in trick\n          end-unstring\n      \n          move length function trim(trick) to result\n      \n          goback.\n       end program IsLockNessMonster.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55d1d6d5955ec6365400006d":[{"id":20418,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RND2NXT5.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT ROUNDED MODE TOWARD-GREATER = N \/ 5\n           MULTIPLY 5 BY RESULT.\n       END PROGRAM RND2NXT5.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20419,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RND2NXT5.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      \n        Compute result rounded mode toward-greater = n \/ 5,\n        Multiply 5 by result,\n\n        Goback.\n      \n       END PROGRAM RND2NXT5.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20420,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RND2NXT5.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.           \n           COMPUTE RESULT = FUNCTION INTEGER((N + 4) \/ 5) * 5.\n       END PROGRAM RND2NXT5.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20421,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RND2NXT5.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 REM         PIC S9(8).\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE REM = FUNCTION MOD(FUNCTION ABS(N), 5)\n           IF REM = 0 THEN\n               MOVE N TO RESULT\n           ELSE IF N > 0\n               COMPUTE RESULT = N + 5 - REM\n           ELSE\n               COMPUTE RESULT = REM - FUNCTION ABS(N)\n           END-IF\n           GOBACK.\n       END PROGRAM RND2NXT5.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20422,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RND2NXT5.\n       environment division.\n       configuration section.\n       repository. function mod intrinsic.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = n + mod(5 - mod(n, 5), 5).\n       END PROGRAM RND2NXT5.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20423,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RND2NXT5.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n        compute result rounded mode toward-greater = n \/ 5\n        compute result = result * 5\n        Goback.\n       END PROGRAM RND2NXT5.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55d24f55d7dd296eb9000030":[{"id":20424,"user_id":421,"body":"       identification division.\n       program-id. summation.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n           COMPUTE result = num * (num + 1) \/ 2 .\n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20425,"user_id":168,"body":"       identification division.\n       program-id. summation.\n       data division.\n       working-storage section.\n       01  n            pic 9(5).\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n           initialize result\n           perform varying n from 1 by 1 until n > num\n               add n to result\n           end-perform.\n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20426,"user_id":53,"body":"       identification division.\n       program-id. summation.\n       data division.\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n         compute result = num * (num + 1) \/ 2.\n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20427,"user_id":null,"body":"       identification division.\n       program-id. summation.\n       data division.\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n         move 0 to result. \n         compute result = (1 + num) * num \/ 2\n         goback.\n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20428,"user_id":null,"body":"       identification division.\n       program-id. summation.\n       data division.\n       linkage section.\n       01  n            pic 9(4).\n       01  result       pic 9(8).\n       procedure division using n result.\n         compute result = (n * (n + 1)) \/ 2. \n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20429,"user_id":null,"body":"       identification division.\n       program-id. summation.\n       data division.\n       working-storage section.\n       01  WS-IDX     pic 9(4) value 1.\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n          move 0 to result. \n          PERFORM WITH TEST AFTER \n              VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX = num\n              ADD WS-IDX TO result\n          END-PERFORM. \n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20430,"user_id":null,"body":"       identification division.\n       program-id. summation.\n       data division.\n       WORKING-STORAGE SECTION.\n       01  W-I          PIC 9(4).\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n         move 0 to result. \n         PERFORM VARYING W-I\n                    FROM 1 BY 1\n                   UNTIL W-I > num\n            COMPUTE result = result + W-I\n         END-PERFORM\n         .\n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20431,"user_id":null,"body":"       identification division.\n       program-id. summation.\n       data division.\n       working-storage section.\n       01  aux          pic 9(4).       \n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).    \n       procedure division using num result.\n          initialize result.\n          initialize aux.\n          PERFORM VARYING tally FROM 1 BY 1 UNTIL tally > num\n               add 1 to aux\n               add aux to result\n               display result\n\t        \n           END-PERFORM.    \n         \n          \n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20432,"user_id":null,"body":"       identification division.\n       program-id. summation.\n       data division.\n       WORKING-STORAGE SECTION.\n       01  WS-C         PIC S9(4).\n       linkage section.\n       01  num          pic 9(4).\n       01  result       pic 9(8).\n       procedure division using num result.\n         move 0 to result. \n         PERFORM VARYING WS-C FROM +1 BY +1\n           UNTIL WS-C > NUM\n            COMPUTE RESULT = RESULT + WS-C\n            END-COMPUTE\n         END-PERFORM.\n       end program summation.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20433,"user_id":76,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       PROCEDURE DIVISION.\n       SUMMATION.\n       COMPUTE RESULT = (NUM + 1) * NUM \/ 2 \n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20434,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n       COMPUTE result = NUM * (NUM + 1) \/ 2\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20435,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       01 ws-i         pic 9(05).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n      * your code here\n              move 0 to result.\n              perform varying ws-i from 1 by 1 until ws-i > num\n                 compute result = result + ws-i\n              end-perform.\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20436,"user_id":168,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n       compute result = num * (num + 1) \/ 2.\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20437,"user_id":50,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n        compute RESULT = NUM * (NUM + 1) \/ 2\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20438,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n          COMPUTE RESULT = NUM * (NUM + 1) \/ 2 .\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20439,"user_id":232,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(03).\n       01 RESULT       PIC 9(06).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n          COMPUTE RESULT = NUM * (NUM + 1) \/ 2\n       END PROGRAM SOLUTON. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20440,"user_id":53,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTON.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM          PIC 9(08).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION.\n       SUMMATION SECTION .\n        COMPUTE RESULT = NUM * (NUM + 1) \/ 2\n       END PROGRAM SOLUTON.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55d2aee99f30dbbf8b000001":[{"id":20441,"user_id":50,"body":"       identification division.\n       program-id. ScoreTest.\n       data division.\n      \n       linkage section.\n       01  testsArray.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 3 to 20 times \n                             depending on arr-length indexed i.\n       01  rightPoints       pic 9.\n       01  omitPoints        pic s9 sign leading.\n       01  wrongPoints       pic 9.\n       01  result            pic s9(3) sign leading.\n      \n       procedure division \n       using testsArray rightPoints omitPoints wrongPoints result.\n      \n          move 0 to result\n          perform varying i from 1 until i > arr-length\n              evaluate xs(i)\n              when 0        add      rightPoints to   result\n              when 1        add      omitPoints  to   result\n              when other    subtract wrongPoints from result\n              end-evaluate\n          end-perform\n      \n          goback.\n       end program ScoreTest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20442,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ScoreTest.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  CNT-RIGHT         PIC 9(2).\n       01  CNT-OMIT          PIC 9(2).\n       01  CNT-WRONG         PIC 9(2).\n       LINKAGE SECTION.\n       01  TESTSARRAY.\n           05 ARR-LEN        PIC 9(2).\n           05 XS             PIC 9 OCCURS 20 DEPENDING ON ARR-LEN.\n       01  RIGHTPOINTS       PIC 9.\n       01  OMITPOINTS        PIC S9 SIGN LEADING.\n       01  WRONGPOINTS       PIC 9.\n       01  RESULT            PIC S9(3) SIGN LEADING.\n\n       PROCEDURE DIVISION\n       USING TESTSARRAY RIGHTPOINTS OMITPOINTS WRONGPOINTS RESULT.\n           INSPECT TESTSARRAY(3:) TALLYING CNT-RIGHT FOR ALL '0'\n           INSPECT TESTSARRAY(3:) TALLYING CNT-OMIT  FOR ALL '1'\n           INSPECT TESTSARRAY(3:) TALLYING CNT-WRONG FOR ALL '2'\n           COMPUTE RESULT = RIGHTPOINTS * CNT-RIGHT\n                          + OMITPOINTS  * CNT-OMIT\n                          - WRONGPOINTS * CNT-WRONG\n           END-COMPUTE.\n       END PROGRAM ScoreTest.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20443,"user_id":421,"body":"       identification division.\n       program-id. ScoreTest.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  r                 pic 9(2).\n       01  w                 pic 9(2).\n       01  o                 pic 9(2).\n       linkage section.\n       01  testsArray.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 3 to 20 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  rightPoints       pic 9.\n       01  omitPoints        pic s9 sign leading.\n       01  wrongPoints       pic 9.\n       01  result            pic s9(3) sign leading.\n      \n       procedure division \n       using testsArray rightPoints omitPoints wrongPoints result.\n           initialize r o w result\n           perform varying i from 1 by 1 until i > arr-length\n               if xs(i) = 0 then add 1 to r end-if\n               if xs(i) = 1 then add 1 to o end-if\n               if xs(i) = 2 then add 1 to w end-if\n           end-perform\n           compute result = r * rightPoints + o * omitPoints - \n                            w * wrongPoints.\n       end program ScoreTest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20444,"user_id":53,"body":"       identification division.\n       program-id. ScoreTest.\n       data division.\n       linkage section.\n       01  lst.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 3 to 20 times \n                             depending on arr-length\n                             indexed by i.\n       01  a                 pic 9.\n       01  b                 pic s9 sign leading.\n       01  d                 pic 9.\n       01  result            pic s9(3) sign leading.\n      \n       procedure division \n       using lst a b d result.\n          set result to 0\n          perform varying i from 1 until i > arr-length\n            evaluate xs(i)\n              when 0        add a to result\n              when 1        add b to result\n              when other    subtract d from result\n            end-evaluate\n          end-perform\n          goback.\n       end program ScoreTest.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55db7b239a11ac71d600009d":[{"id":20445,"user_id":168,"body":"       identification division.\n       program-id. give-triangles.\n      \n       data division.\n       working-storage section.\n       01 a           pic 9(5).\n       01 b           pic 9(5).\n       01 c           pic 9(5)v9(8).\n       linkage section.\n       01 per         pic 9(4).\n       01 result      pic 9(4).\n      \n       procedure division using per result.\n          compute result = 0\n          perform varying a from 1 by 1 until 2 * a >= per\n            after b from function abs(a + 1) by 1 until 2 * b >= per\n              compute c = (a * a + b * b + a * b) ** 0.5\n              if function mod(c, 1) = 0 and a + b + c <= per then\n                  add 1 to result\n              end-if\n          end-perform.\n       end program give-triangles.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20446,"user_id":53,"body":"       identification division.\n       program-id. give-triangles.\n       data division.\n       local-storage section.\n       01 a         pic 9(4).\n       01 b         pic 9(4).\n       01 c         pic 9(4).\n       01 k         pic 9(4).\n       01 x         pic 9(8).\n       linkage section.\n       01 n         pic 9(4).\n       01 m         pic 9(4).\n       procedure division using n m.\n          move 0 to m\n          perform varying a from 1 by 1 until a >= n\n            add 1 to a giving k\n            perform varying b from k by 1 until a >= n - b\n              compute x = a ** 2 + b ** 2 + a * b\n              compute c = x ** 0.5\n              if x = c ** 2 and c > b and a + b + c <= n then\n                add 1 to m\n              end-if\n            end-perform\n          end-perform\n          goback.\n       end program give-triangles.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20447,"user_id":50,"body":"       identification division.\n       program-id. give-triangles.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(7).\n       01 b           pic 9(7).\n       01 c           pic 9(7).\n       01 x           pic 9(4).\n       01 n           pic 9(7).\n      \n       linkage section.\n       01 per         pic 9(4).\n       01 result      pic 9(4).\n      \n       procedure division using per result.\n      \n          perform varying a from 1 until a >= per\n      \n            compute c = a + 1\n      \n            perform varying b from c until b >= per - a\n      \n                compute n = a * a + a * b + b * b\n                compute x = function sqrt(n)\n      \n                if n = x * x and x > b and a + b + x <= per\n                  add 1 to result\n                end-if\n      \n            end-perform\n          end-perform\n      \n          goback.\n       end program give-triangles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55dc4520094bbaf50e0000cb":[{"id":20448,"user_id":168,"body":"       identification division.\n       program-id. AmIWilson.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(10).\n          88 wilson values 5 13 563.\n       01 result      pic 9.\n      \n       procedure division using n result.\n          if wilson\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program AmIWilson.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20449,"user_id":421,"body":"       identification division.\n       program-id. AmIWilson.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.      \n       procedure division using n result.\n           INITIALIZE result\n           IF n = 5 OR n = 13 OR n = 563\n               SET result TO 1\n           END-IF.\n       end program AmIWilson.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20450,"user_id":null,"body":"       identification division.\n       program-id. AmIWilson.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n      \n       procedure division using n result.\n        if n = 5 or n = 13 or n = 563\n          move 1 to result\n        else\n          move 0 to result\n        end-if.\n       end program AmIWilson.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20451,"user_id":null,"body":"       identification division.\n       program-id. AmIWilson.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n        INITIALIZE result.\n        IF n = 5 OR n = 13 OR n = 563\n          THEN MOVE 1 TO result\n        END-IF.\n      \n          goback.\n       end program AmIWilson.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20452,"user_id":null,"body":"       identification division.\n       program-id. AmIWilson.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n      \n       procedure division using n result.\n          evaluate n\n             when 5\n             when 13\n             when 563\n                set result to 1\n             when other \n                set result to 0\n          end-evaluate\n          goback.\n       end program AmIWilson.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20453,"user_id":53,"body":"       identification division.\n       program-id. AmIWilson.\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n       procedure division using n result.\n          move 0 to result\n          if n = 5 or n = 13 or n = 563 then\n            move 1 to result\n          end-if\n          goback.\n       end program AmIWilson.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20454,"user_id":50,"body":"       identification division.\n       program-id. AmIWilson.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          evaluate n\n          when 5\n          when 13\n          when 563    move 1 to result\n          when other  move 0 to result\n          end-evaluate\n      \n          goback.\n       end program AmIWilson.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55de6173a8fbe814ee000061":[{"id":20455,"user_id":50,"body":"       identification division.\n       program-id. UnusedDigits.\n       data division.\n       local-storage section.\n       01  s     pic x(20).\n       01  z     pic z(4)9.\n       01  flags.\n           03  d pic 9 occurs 10 times indexed k.\n               88  b value 0.\n       01  i     usage index.\n       01  n     pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9.\n           05 xs            pic 9(4) occurs 0 to 5 times \n                            depending on arrLength indexed by j.\n       01  result           pic x(10).\n      \n       procedure division using arr result.\n      \n          initialize result\n      \n          set i to 1\n          perform varying j from 1 until j > arrLength\n              move xs(j) to z\n              string function trim(z) into s pointer i\n          end-perform\n      \n          perform varying j from 1 until j = i\n              move 1 to d(function numval(s(j:1)) + 1)\n          end-perform\n          \n          set i to 1\n          perform varying k from 1 until k = 11\n            if b(k)\n              compute n = k - 1\n              string n into result pointer i\n            end-if\n          end-perform\n      \n          goback.\n       end program UnusedDigits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20456,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. UnusedDigits.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05  LEN           PIC 9.\n           05  XS            PIC ZZZ9 OCCURS 5 DEPENDING LEN INDEXED I.\n       01  RESULT.\n           05  RES           PIC X OCCURS 10.\n      \n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > LEN \n               MOVE XS(I)  TO XS(I) \n           END-PERFORM\n           MOVE '0123456789'             TO RESULT\n           TRANSFORM RESULT FROM ARR(2:) TO SPACE\n           SORT RES ASCENDING\n           MOVE FUNCTION TRIM(RESULT)    TO RESULT.\n       END PROGRAM UnusedDigits.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20457,"user_id":168,"body":"       identification division.\n       program-id. UnusedDigits.\n       data division.\n       working-storage section.\n       01  digits.\n           05 ds pic 9 occurs 10 times.\n       01  n  pic 9(4).\n       01  r  pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9.\n           05 xs            pic 9(4) occurs 0 to 5 times \n                                     depending on arrLength indexed i.\n       01  result           pic x(10).\n      \n       procedure division using arr result.\n          initialize digits result\n          perform varying i from 1 until i > arrLength\n              move xs(i) to n\n              if n = 0 then move 1 to ds(1) end-if\n              perform until n = 0\n                  divide n by 10 giving n remainder r\n                  move 1 to ds(r + 1)\n              end-perform\n          end-perform\n          move 1 to i\n          perform test after varying r from 0 until r = 9\n              if ds(r + 1) = 0\n                  move r to result(i:1)\n                  add 1 to i\n              end-if\n          end-perform      \n          goback.\n       end program UnusedDigits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20458,"user_id":53,"body":"       identification division.\n       program-id. UnusedDigits.\n       data division.\n       local-storage section.\n       01  n                pic 9.\n       01  x                pic x(20).\n       01  z                pic z(4)9.\n       01  signals.\n           03  s            pic 9 occurs 10 times.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9.\n           05 xs            pic 9(4) occurs 0 to 5 times \n                            depending on arr-len\n                            indexed by i j k.\n       01  result           pic x(10).\n       procedure division using arr result.\n          initialize result\n          set i to 1\n          perform varying j from 1 until j > arr-len\n            move xs(j) to z\n            string function trim(z) into x pointer i\n          end-perform\n          perform varying j from 1 until j = i\n            set s(function numval(x(j:1)) + 1) to 1\n          end-perform\n          set i to 1\n          perform varying k from 1 until k > 10\n            if s(k) = 0 then\n              subtract 1 from k giving n\n              string n into result pointer i\n            end-if\n          end-perform\n          goback.\n       end program UnusedDigits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55df87b23ed27f40b90001e5":[{"id":20459,"user_id":53,"body":"       identification division.\n       program-id. CalculateSpecial.\n       data division.\n       local-storage section.\n       01  alpha           pic x(16) value '0123456789abcdef'.\n       01  d               pic 9(3).\n       01  r               pic 9(3) value 0.\n       01  m               pic 9(3).\n       linkage section.\n       01  i               pic 9(2).\n       01  t               pic 9(2).\n       01  result.\n           05 res-len      pic 9(3).\n           05 res.          \n              07 xs        pic x occurs 0 to 200 times \n                                 depending on res-len.\n       procedure division using t i result.\n          initialize result\n          add 1 to res-len\n          move alpha(t + 1: 1) to xs(res-len)\n          move t to d\n          perform forever\n            compute m = t * d + r\n            divide i into m giving r remainder d\n            add 1 to res-len\n            move alpha(d + 1: 1) to xs(res-len)\n            if d = 1 and r = 0 then\n              exit perform\n            end-if\n          end-perform\n          move function reverse(res) to res\n          goback.\n       end program CalculateSpecial.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20460,"user_id":50,"body":"       identification division.\n       program-id. CalculateSpecial.\n       data division.\n       local-storage section.\n       01 alpha pic x(16) value '0123456789abcdef'.\n       01 digit    pic 9(2).\n       01 dividend pic 9(4).\n       01 divisor  pic 9(3).\n   \n      \n       linkage section.\n       01  lastDigit       pic 9(2).\n       01  base            pic 9(2).\n       01  result.\n           05 resLength    pic 9(3).\n           05 res          pic x occurs 0 to 200 times \n                                 depending on reslength.\n      \n       procedure division using lastDigit base result.\n      \n          initialize result\n\n          move lastDigit to dividend\n          compute divisor = lastDigit * base - 1\n          perform until digit = lastDigit and dividend = lastDigit\n            multiply base by dividend\n            divide dividend by divisor giving digit remainder dividend\n            add 1 to resLength\n            move alpha(digit + 1: 1) to res(resLength)\n          end-perform\n      \n          goback.\n       end program CalculateSpecial.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55e2adece53b4cdcb900006c":[{"id":20461,"user_id":168,"body":"       identification division.\n       program-id. race.\n       data division.\n       working-storage section.\n       01  t            pic 9(8).\n      \n       linkage section.\n       01  v1           pic 9(3).\n       01  v2           pic 9(3).\n       01  g            pic 9(3).\n       01  result.\n           05 hrs       pic s9(3).\n           05 mins      pic s9(2).\n           05 secs      pic s9(2).\n      \n       procedure division using v1 v2 g result.\n          if v1 >= v2\n              move -1 to hrs mins secs\n          else\n              compute t = 3600 * g \/ (v2 - v1)\n              compute hrs = t \/ 3600\n              compute mins = function mod(t, 3600) \/ 60\n              compute secs = function mod(t, 60)\n          end-if.\n       end program race.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20462,"user_id":53,"body":"       identification division.\n       program-id. race.\n       data division.\n       local-storage section.\n       01  t            pic 9(8).\n       linkage section.\n       01  v1           pic 9(3).\n       01  v2           pic 9(3).\n       01  g            pic 9(3).\n       01  result.\n           05 h         pic s9(3).\n           05 m         pic s9(2).\n           05 s         pic s9(2).\n       procedure division using v1 v2 g result.\n          move -1 to h, m, s\n          if v1 >= v2 then goback end-if\n          compute t = (g * 3600) \/ (v2 - v1)\n          compute h = t \/ 3600\n          compute m = function rem (t, 3600) \/ 60\n          compute s = function rem (t, 60)\n          goback.\n       end program race.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20463,"user_id":50,"body":"       identification division.\n       program-id. race.\n       data division.\n       local-storage section.\n       01  a            pic 9(8).\n      \n       linkage section.\n       01  v1           pic 9(3).\n       01  v2           pic 9(3).\n       01  g            pic 9(3).\n       01  result.\n           05 hrs       pic s9(3).\n           05 mins      pic s9(2).\n           05 secs      pic s9(2).\n      \n       procedure division using v1 v2 g result.\n      \n          if v1 < v2\n             compute a = (g * 3600) \/ (v2 - v1)\n             divide a by 3600 giving hrs remainder a\n             divide a by 60 giving mins remainder secs\n          else\n             move -1 to hrs, mins, secs\n          end-if\n      \n          goback.\n       end program race.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55e2de13b668981d3300003d":[{"id":20464,"user_id":50,"body":"       identification division.\n       program-id. Differentiate.\n       data division.\n       local-storage section.\n       01  n         pic 9.\n       01  token     pic x(4).\n       01  a         pic s9(5).\n       01  b         pic s9(5).\n       01  z         pic -(5)9.\n       01  x         pic -(5)9.\n       01  i         usage index.\n      \n       linkage section.\n       01  s         pic x(11).\n       01  result    pic x(11).\n      \n       procedure division using s result.\n      \n          inspect s tallying n for all 'x'\n          if n = 0\n            move '0' to result\n            goback\n          end-if\n      \n          initialize n\n          inspect s tallying n for all '^'\n          if n = 0\n          unstring s delimited by 'x'\n          into token\n          evaluate token\n          when space  move '1'   to result\n          when '-'    move '-1'  to result\n          when other  move token to result\n          end-evaluate goback end-if\n      \n          initialize result\n          evaluate true\n          when s(1:1) = 'x'\n               move 1 to a\n               move s(3:) to b\n          when s(1:2) = '-x'\n               move -1 to a\n               move s(4:) to b\n          when other\n               set i to 1\n               unstring s delimited by 'x^' into a pointer i\n               move s(i:) to b\n          end-evaluate\n        \n          compute z = a * b\n          compute x = b - 1\n          evaluate true\n          when b = 1 \n                      string function trim(z) into result\n          when b = 2 \n                      string function trim(z) 'x' into result\n          when function trim(z) = 1 \n                      string 'x^' function trim(x) into result\n          when function trim(z) = -1\n                      string '-x^' function trim(x) into result\n          when other\n                      string function trim(z) 'x^' function trim(x) \n                      into result\n          end-evaluate\n                \n          goback.\n       end program Differentiate.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20465,"user_id":53,"body":"       identification division.\n       program-id. Differentiate.\n       data division.\n       local-storage section.\n       01  i         usage index.\n       01  n         pic 9.\n       01  w         pic x(4).\n       01  factors.\n          05  a      pic s9(5).\n          05  b      pic s9(5).\n       01  rendering.\n          05  x      pic -(5)9.\n          05  y      pic -(5)9.\n       linkage section.\n       01  s         pic x(11).\n       01  result    pic x(11).\n       procedure division using s result.\n      \n          initialize result\n          perform guard\n          perform edge\n          perform variable\n          perform render\n          goback.\n      \n        guard.\n          inspect s tallying n for all 'x'\n          if n = 0 then\n            move '0' to result\n            goback\n          end-if\n          .\n      \n        edge.\n          initialize n\n          inspect s tallying n for all '^'\n          if n = 0 then\n            unstring s delimited by 'x' into w\n            evaluate w\n              when ' ' \n                move '1' to result\n              when '-' \n                move '-1' to result\n              when other \n                move w to result\n            end-evaluate \n            goback \n          end-if\n          .\n      \n        variable.\n          evaluate true\n            when s(1:1) = 'x'\n              set a to 1\n              move s(3:) to b\n            when s(1:2) = '-x'\n              set a to -1\n              move s(4:) to b\n            when other\n              set i to 1\n              unstring s delimited by 'x^' into a pointer i\n              move s(i:) to b\n          end-evaluate\n          .\n      \n        render.\n          multiply a by b giving y\n          subtract 1 from b giving x\n          evaluate true\n            when b = 1 \n              string function trim(y) into result\n            when b = 2 \n              string function trim(y) 'x' into result\n            when function trim(y) = 1 \n              string 'x^' function trim(y) into result\n            when function trim(y) = -1\n              string '-x^' function trim(y) into result\n            when other\n              string function trim(y) 'x^' function trim(x) into result\n          end-evaluate\n          .\n                \n       end program Differentiate.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55e6f5e58f7817808e00002e":[{"id":20466,"user_id":421,"body":"       identification division.\n       program-id. seven.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  m             pic 9(32).\n       01  result.\n           05 last-num   pic 9(3).\n           05 steps      pic 9(3).\n      \n       procedure division using m result.\n           initialize steps\n           perform until m < 100\n               compute m = m \/ 10 - 2 * function rem(m, 10)\n               add 1 to steps\n           end-perform\n           move m to last-num.\n       end program seven.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20467,"user_id":53,"body":"       identification division.\n       program-id. seven.\n       data division.\n       linkage section.\n       01  m             pic 9(32).\n       01  result.\n           05 last-num   pic 9(3).\n           05 steps      pic 9(3).\n       procedure division using m result.\n          move 0 to steps\n          perform until m <= 99\n            compute m = function integer (m \/ 10)\n              - (2 * function rem(m, 10))\n            add 1 to steps\n          end-perform\n          move m to last-num\n          goback.\n       end program seven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20468,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. seven.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  M             PIC 9(32).\n       01  RESULT.\n           05 LAST-NUM   PIC 9(3).\n           05 STEPS      PIC 9(3).\n       PROCEDURE DIVISION USING M RESULT.\n           PERFORM VARYING STEPS FROM 0 BY 1 UNTIL M < 100\n               COMPUTE M = M \/ 10 - FUNCTION REM(M, 10) * 2\n           END-PERFORM\n           MOVE M  TO LAST-NUM.\n       END PROGRAM seven.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20469,"user_id":null,"body":"       identification division.\n       program-id. seven.\n      \n       data division.\n      \n       linkage section.\n       01  m             pic 9(32).\n       01  result.\n           05 last-num   pic 9(3).\n           05 steps      pic 9(3).\n      \n       procedure division using m result.\n      \n      * Your code here\n       perform varying steps from 0 by 1 until m < 100\n          compute m = (m \/ 10) - 2 * (m - 10 * (m \/ 10))\n       end-perform.\n       \n       move m to last-num.\n       \n          goback.\n       end program seven.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20470,"user_id":76,"body":"       identification division.\n       program-id. seven.\n       data division.\n       local-storage section.\n       01  rem           pic 9(3).\n       linkage section.\n       01  m             pic 9(32).\n       01  result.\n           05 last-num   pic 9(3).\n           05 steps      pic 9(3).\n       procedure division using m result.\n         initialize result\n         perform until m < 100\n           divide m by 10 giving m remainder rem\n           compute m = m - 2 * rem\n           add 1 to steps\n         end-perform\n         move m to last-num\n         goback.\n       end program seven.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20471,"user_id":168,"body":"       identification division.\n       program-id. seven.\n      \n       data division.\n       working-storage section.\n       01  r             pic 9.\n      \n       linkage section.\n       01  m             pic 9(32).\n       01  result.\n           05 last-num   pic 9(3).\n           05 steps      pic 9(3).\n      \n       procedure division using m result.\n          perform varying steps from 0 until m < 100\n              divide m by 10 giving m remainder r\n              compute m = m - 2 * r\n          end-perform\n          compute last-num = m\n          goback.\n       end program seven.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20472,"user_id":50,"body":"       identification division.\n       program-id. seven.\n      \n       data division.\n       local-storage section.\n       01 c              pic 99.\n       01 r              pic 99.\n       \n       linkage section.\n       01  m             pic 9(32).\n       01  result.\n           05 last-num   pic 9(3).\n           05 steps      pic 9(3).\n      \n       procedure division using m result.\n      \n          perform varying c from 0 until m < 100\n                divide m by 10 giving m remainder r\n                compute m = m - 2 * r\n          end-perform\n      \n          move c to steps\n          move m to last-num\n      \n          goback.\n       end program seven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55ea170313b76622b3000014":[{"id":20473,"user_id":50,"body":"       identification division.\n       program-id. sameFactRev.\n       data division.\n       local-storage section.\n       01  arr.\n         05 pic 9(5) value 1089.\n         05 pic 9(5) value 2178.\n         05 pic 9(5) value 4356.\n         05 pic 9(5) value 6534.\n         05 pic 9(5) value 8712.\n         05 pic 9(5) value 9801.\n         05 pic 9(5) value 10989.\n         05 pic 9(5) value 21978.\n         05 pic 9(5) value 24024.\n         05 pic 9(5) value 26208.\n         05 pic 9(5) value 42042.\n         05 pic 9(5) value 43956.\n         05 pic 9(5) value 48048.\n       01 a redefines arr.\n         05 xs pic 9(5) occurs 13 times indexed by i.\n      \n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(5) occurs 0 to 100 times \n                                  depending on res-length.\n      \n       procedure division using n result.\n          move 0 to res-length\n          perform varying i from 1 until xs(i) > n or i = 14\n              add 1 to res-length\n              move xs(i) to res(i)\n          end-perform\n          goback.\n       end program sameFactRev.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20474,"user_id":76,"body":"       identification division.\n       program-id. sameFactRev.\n       data division.\n       working-storage section.\n       01  i pic 99.\n       01 A110819.\n          05 xs pic 9(5) value 1089.\n          05 xs pic 9(5) value 2178.\n          05 xs pic 9(5) value 4356.\n          05 xs pic 9(5) value 6534.\n          05 xs pic 9(5) value 8712.\n          05 xs pic 9(5) value 9801.\n          05 xs pic 9(5) value 10989.\n          05 xs pic 9(5) value 21978.\n          05 xs pic 9(5) value 24024.\n          05 xs pic 9(5) value 26208.\n          05 xs pic 9(5) value 42042.\n          05 xs pic 9(5) value 43956.\n          05 xs pic 9(5) value 48048.\n       01 nums redefines A110819 pic 9(5) occurs 13 times.\n       \n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(5) occurs 0 to 100 times \n                                  depending on res-length.\n      \n       procedure division using n result.\n         initialize result\n         perform varying i from 1 by 1 until i > 13\n           if nums(i) < n then\n             add 1 to res-length\n             move nums(i) to res(res-length)\n           end-if\n         end-perform.\n       end program sameFactRev.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20475,"user_id":168,"body":"       identification division.\n       program-id. sameFactRev.\n       data division.\n       working-storage section.\n       01  A110819 value '01089021780435606534087120980110989'\n                       & '21978240242620842042439564804861248'\n                       & '65934802628408484216879129890199999'.\n           05 xs pic 9(5) occurs 21 times indexed i.\n      \n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(5) occurs 0 to 100 times \n                                  depending on res-length.\n      \n       procedure division using n result.\n          move 1 to i\n          search xs varying i\n              when xs(i) >= n\n                  compute res-length = i - 1\n                  move a110819(1:5 * (i - 1)) to result(3:5 * (i - 1))\n          end-search.\n       end program sameFactRev.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20476,"user_id":53,"body":"       identification division.\n       program-id. sameFactRev.\n       data division.\n       local-storage section.\n       01 A110819.\n         05 pic 9(5) value 1089.\n         05 pic 9(5) value 2178.\n         05 pic 9(5) value 4356.\n         05 pic 9(5) value 6534.\n         05 pic 9(5) value 8712.\n         05 pic 9(5) value 9801.\n         05 pic 9(5) value 10989.\n         05 pic 9(5) value 21978.\n         05 pic 9(5) value 24024.\n         05 pic 9(5) value 26208.\n         05 pic 9(5) value 42042.\n         05 pic 9(5) value 43956.\n         05 pic 9(5) value 48048.\n       01 a redefines A110819.\n         05 xs               pic 9(5) \n                             occurs 13 times \n                             indexed by i.\n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(5) \n                             occurs 0 to 100 times \n                             depending on res-length.\n       procedure division using n result.\n          initialize result\n          perform varying i from 1 until i > 13\n            if xs(i) < n then\n              add 1 to res-length\n              move xs(i) to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program sameFactRev.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55ecd718f46fba02e5000029":[{"id":20477,"user_id":null,"body":"       identification division.\n       program-id. Between.\n       data division.\n       linkage section.\n       01  a                 pic s9(3).\n       01  b                 pic s9(3).\n       01  result.\n           05  resLength     pic 9(3).\n           05  res           pic s9(3) occurs 100 times \n                                       depending on resLength\n                                       indexed by i.\n      \n       procedure division using a b result.\n          compute resLength = b - a + 1\n          perform varying i from 1 until i > resLength\n             compute res(i) = i + a - 1\n          end-perform\n          goback.\n       end program Between.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20478,"user_id":168,"body":"       identification division.\n       program-id. Between.\n       data division.\n       linkage section.\n       01  a                 pic s9(3).\n       01  b                 pic s9(3).\n       01  result.\n           05  resLength     pic 9(3).\n           05  res           pic s9(3) occurs 100 times \n                                       depending on resLength.\n      \n       procedure division using a b result.\n          move 0 to resLength\n          perform varying a from a until a > b\n              add 1 to resLength\n              move a to res(resLength)\n          end-perform.\n       end program Between.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20479,"user_id":53,"body":"       identification division.\n       program-id. Between.\n       data division.\n       local-storage section.\n       01  c            pic s9(3).\n       linkage section.\n       01  a            pic s9(3).\n       01  b            pic s9(3).\n       01  result.\n           05  rl       pic 9(3).\n           05  r        pic s9(3) occurs 100 depending rl.\n       procedure division using a b result.\n          initialize result\n          perform varying c from a until c > b\n            add 1 to rl\n            move c to r(rl)\n          end-perform\n          goback.\n       end program Between.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20480,"user_id":50,"body":"       identification division.\n       program-id. Between.\n       data division.\n       linkage section.\n       01  a            pic s9(3).\n       01  b            pic s9(3).\n       01  result.\n           05  rl       pic 9(3).\n           05  r        pic s9(3) occurs 100 depending rl.\n      \n       procedure division using a b result.\n      \n          initialize result\n          perform varying a from a until a > b\n              add 1 to rl\n              move a to r(rl)\n          end-perform.\n      \n       end program Between.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55f2b110f61eb01779000053":[{"id":20481,"user_id":421,"body":"       identification division.\n       program-id. get-sum.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 m           pic s9(8).\n       01 n           pic s9(8).\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 result      pic s9(20) sign leading.      \n       procedure division using a b result.      \n           COMPUTE m = FUNCTION MIN(A, B)\n           COMPUTE n = FUNCTION MAX(A, B)\n           PERFORM UNTIL m > n\n               ADD m TO result\n               ADD 1 TO m\n           END-PERFORM.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20482,"user_id":null,"body":"       identification division.\n       program-id. get-sum.\n      \n       data division.\n\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 result      pic s9(20) sign leading.\n      \n       procedure division using a b result.\n       if a = b\n          move a to result\n       end-if\n       if a < b \n       perform until a = b\n          add a to result \n          add 1 to a\n       end-perform\n       add a to result\n       end-if\n       if a > b \n       perform until a = b\n          add b to result \n          add 1 to b\n       end-perform\n       add b to result\n       end-if\n      \n      * your code here\n      \n          goback.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20483,"user_id":null,"body":"       identification division.\n       program-id. get-sum.\n      \n       data division.\n       working-storage section.\n       01 min         pic s9(08).\n       01 max         pic s9(08).\n\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 result      pic s9(20) sign leading.\n      \n       procedure division using a b result.\n      \n      * your code here\n           if a < b\n              move a   to min\n              move b   to max\n           else\n              move b   to min\n              move a   to max\n           end-if.\n      \n           move min     to result.\n      \n           if min not = max\n             add 1                to min\n             perform varying min from min by 1\n                     until   min > max\n                add min   to result\n             end-perform\n           end-if.\n      \n          goback.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20484,"user_id":null,"body":"       identification division.\n       program-id. get-sum.\n       data division.\n       local-storage section.\n       01 n         pic s9(8).\n       01 m         pic s9(8).\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 r           pic s9(20) sign leading.\n       procedure division using a b r.\n            compute n = function min(a b)\n            compute m = function max(a b)\n            perform until n > m\n                add n to r\n                add 1 to n\n            end-perform\n          goback.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20485,"user_id":168,"body":"       identification division.\n       program-id. get-sum.\n      \n       data division.\n\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 result      pic s9(20) sign leading.\n      \n       procedure division using a b result.\n          compute result = (a + b) * (function abs(b - a) + 1) \/ 2.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20486,"user_id":53,"body":"       identification division.\n       program-id. get-sum.\n       data division.\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 m           pic s9(20) sign leading.\n       procedure division using a b m.\n          compute m = (function abs (a - b) + 1)  * (a + b),\n          compute m = m \/ 2,\n          goback.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20487,"user_id":50,"body":"       identification division.\n       program-id. get-sum.\n      \n       data division.\n\n       linkage section.\n       01 a           pic s9(8).\n       01 b           pic s9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using a b result.\n      \n          compute result = function integer(\n                          (function abs(a - b) + 1) * (a+b) \/ 2)\n      \n          goback.\n       end program get-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55f3da49e83ca1ddae0000ad":[{"id":20488,"user_id":53,"body":"       identification division.\n       program-id. Tankvol.\n       data division.\n       local-storage section.\n       01 n           pic 9(10)v9(28).\n       01 m           pic 9(10)v9(28).\n       linkage section.\n       01 h           pic 9.\n       01 d           pic 9(2).\n       01 vt          pic 9(6).\n       01 result      pic 9(10).\n       procedure division using h d vt result.\n          initialize result  \n          compute n = function abs(\n            function acos(1.0 - h \/ (d \/ 2.0)) * 2.0)\n          compute m = function abs(\n            vt * (n - function sin(n)) \/ (2.0 * function pi))\n          add 0.0005 to m\n          compute result rounded mode toward-lesser = m\n          goback.\n       end program Tankvol.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20489,"user_id":50,"body":"       identification division.\n       program-id. Tankvol.\n      \n       data division.\n       local-storage section.\n       01 r           usage comp-2.\n       01 a           usage comp-2.\n       01 b           usage comp-2.\n       01 v           usage comp-2.\n      \n       linkage section.\n       01 h           pic 9.\n       01 d           pic 9(2).\n       01 vt          pic 9(6).\n       01 result      pic 9(10).\n      \n       procedure division using h d vt result.\n      \n          compute r = d \/ 2\n          compute b = r - h\n          move vt to v\n          compute a = function acos(b \/ r)\n          compute result = function abs(\n          2.0 * (a * r * r \/ 2.0\n          - r * function sin(a) * b \/ 2.0)\n          * v \/ (function pi * r * r) + 0.000001)\n      \n          goback.\n       end program Tankvol.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55f73be6e12baaa5900000d4":[{"id":20490,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L        PIC 9(3).\n       01 C        PIC 9(3).\n       01 CHA      PIC 9(3).\n       01 RESULT   PIC 9(3).\n       PROCEDURE DIVISION USING L C CHA RESULT.\n           ADD L C CHA TO RESULT.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20491,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 a                         PIC 9(3).\n       01 b                         PIC 9(3).\n       01 c                         PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING a b c RESULT.\n        compute result = a + b + c.\n      * code goes here\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20492,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LA-LIGA-GOALS             PIC 9(3).\n       01 COPA-DEL-REY-GOALS        PIC 9(3).\n       01 CHAMPIONS-LEAGUE-GOALS    PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING LA-LIGA-GOALS COPA-DEL-REY-GOALS\n                    CHAMPIONS-LEAGUE-GOALS RESULT.\n       compute result = la-liga-goals + \n                        copa-del-rey-goals +\n                        champions-league-goals\n       goback.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20493,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LA-LIGA-GOALS             PIC 9(3).\n       01 COPA-DEL-REY-GOALS        PIC 9(3).\n       01 CHAMPIONS-LEAGUE-GOALS    PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING LA-LIGA-GOALS COPA-DEL-REY-GOALS\n                    CHAMPIONS-LEAGUE-GOALS RESULT.\n      * code goes here\n          COMPUTE RESULT= LA-LIGA-GOALS + COPA-DEL-REY-GOALS\n         +CHAMPIONS-LEAGUE-GOALS.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20494,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LA-LIGA-GOALS             PIC 9(3).\n       01 COPA-DEL-REY-GOALS        PIC 9(3).\n       01 CHAMPIONS-LEAGUE-GOALS    PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING LA-LIGA-GOALS COPA-DEL-REY-GOALS\n                    CHAMPIONS-LEAGUE-GOALS RESULT.\n           COMPUTE RESULT = CHAMPIONS-LEAGUE-GOALS + LA-LIGA-GOALS \n                                                   + COPA-DEL-REY-GOALS.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20495,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LA-LIGA-GOALS             PIC 9(3).\n       01 COPA-DEL-REY-GOALS        PIC 9(3).\n       01 CHAMPIONS-LEAGUE-GOALS    PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING LA-LIGA-GOALS COPA-DEL-REY-GOALS\n                    CHAMPIONS-LEAGUE-GOALS RESULT.\n         ADD LA-LIGA-GOALS TO RESULT\n         ADD COPA-DEL-REY-GOALS TO RESULT\n         ADD CHAMPIONS-LEAGUE-GOALS TO RESULT.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20496,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 a    PIC 9(3).\n       01 b    PIC 9(3).\n       01 c    PIC 9(3).\n       01 r    PIC 9(3).\n       PROCEDURE DIVISION USING a b c r.\n            compute r = a + b + c\n        goback.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20497,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LA-LIGA-GOALS             PIC 9(3).\n       01 COPA-DEL-REY-GOALS        PIC 9(3).\n       01 CHAMPIONS-LEAGUE-GOALS    PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING LA-LIGA-GOALS COPA-DEL-REY-GOALS\n                    CHAMPIONS-LEAGUE-GOALS RESULT.\n       compute RESULT = LA-LIGA-GOALS + COPA-DEL-REY-GOALS.\n       compute RESULT = RESULT + CHAMPIONS-LEAGUE-GOALS.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20498,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 GOALS-1                   PIC 9(3).\n       01 GOALS-2                   PIC 9(3).\n       01 GOALS-3                   PIC 9(3).\n       01 RESULT                    PIC 9(3).\n       PROCEDURE DIVISION USING GOALS-1 GOALS-2 GOALS-3 RESULT.\n           ADD GOALS-1 GOALS-2 GOALS-3  TO RESULT.\n       END PROGRAM GOALS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20499,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GOALS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A             PIC 9(3).\n       01 B             PIC 9(3).\n       01 C             PIC 9(3).\n       01 RESULT        PIC 9(3).\n       PROCEDURE DIVISION USING A B C RESULT.\n          ADD A B C GIVING RESULT.\n       END PROGRAM GOALS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55f7eb009e6614447b000099":[{"id":20500,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n        PROGRAM-ID. SQUARE.\n      AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 2 ** (N - 1).\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20501,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 n           PIC S9(8).\n       01 r      PIC 9(20).\n       PROCEDURE DIVISION USING n r.\n            subtract 1 from n\n            compute r = 2 ** n.\n       END PROGRAM SQUARE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20502,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n        COMPUTE RESULT = 2 ** (N - 1).\n           GOBACK.\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20503,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WS-INDEX    PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE 0               TO RESULT\n           MOVE 1               TO WS-INDEX        \n           IF N > 0\n               MOVE 1 TO RESULT\n               PERFORM UNTIL WS-INDEX >= N\n                   COMPUTE RESULT = 2 * RESULT\n                   ADD 1 TO WS-INDEX\n               END-PERFORM\n           END-IF.\n      \n           \n           GOBACK.\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20504,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 2 ** (N - 1) .\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20505,"user_id":168,"body":"       id division.\n       program-id. SQUARE.\n       data division.\n       linkage section.\n       01 n       pic 9(8).\n       01 result  pic 9(20).\n       procedure division using n result.\n           compute result = 2 ** (n - 1).\n       end program SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20506,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = 2 ** (N - 1)\n           GOBACK.\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20507,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARE SECTION\n\n       compute result = 2 ** (n - 1)\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20508,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARE SECTION\n\n      * You can do it!\n            IF N = 0\n                MOVE 0 TO RESULT\n            ELSE\n                COMPUTE RESULT = \n                       2**(N - 1)\n            END-IF\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20509,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARE SECTION.\n           COMPUTE RESULT = 2 ** N \/ 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20510,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARE SECTION.\n            subtract 1 from n\n            compute result = 2 ** n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20511,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARE SECTION.\n       COMPUTE RESULT = 2 ** (N - 1)\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20512,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARE SECTION\n        COMPUTE RESULT = 2 ** (N - 1)\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55f9b48403f6b87a7c0000bd":[{"id":20513,"user_id":390,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n      * your code here\n      \n       multiply n by m giving result\n      \n       if n < 0 then\n         move 0 to result\n       end-if\n      \n       if m < 0 then\n         move 0 to result\n       end-if\n       \n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20514,"user_id":null,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n           if n < 0 or m < 0 then\n              set result to 0\n           else\n              compute result = n * m\n           end-if\n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20515,"user_id":null,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n          if n >= 0 and m >= 0 then \n            multiply n by m giving result\n          else\n            move 0 to result\n          end-if\n          goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20516,"user_id":null,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n       IF m <= 0 OR n <= 0\n       MOVE 0 TO result\n       ELSE\n       COMPUTE result = (n * m)\n       END-IF\n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20517,"user_id":null,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n       if n>0 and m>0 \n           perform multiply n by m giving result\n       else move 0 to result\n      \n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20518,"user_id":null,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n           if n > 0 and m > 0\n              compute result = n * m\n              end-compute\n           else\n              move 0 to result\n           end-if\n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20519,"user_id":null,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n           if n < 0 then \n               move 0 to result \n               goback \n           end-if \n           if m < 0 then \n               move 0 to result \n               goback \n           end-if \n           compute result = n * m. \n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20520,"user_id":1277,"body":"       identification division.\n       program-id. schoolPaperwork.     \n       AUTHOR. \"Souzooka\".\n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n           \n      *if N or M are less than 0, keep result = 0\n           MOVE 0 TO RESULT\n           IF N < 0\n               GOBACK\n           END-IF\n           IF M < 0\n               GOBACK\n           END-IF\n      \n           MULTIPLY N BY M GIVING RESULT\n           .\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20521,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. schoolPaperwork.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N         PIC S9(3).\n       01  M         PIC S9(3).\n       01  RESULT    PIC 9(5).\n       PROCEDURE DIVISION USING N M RESULT.\n           COMPUTE RESULT = FUNCTION MAX(N, 0) * FUNCTION MAX(M, 0).\n       END PROGRAM schoolPaperwork.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20522,"user_id":50,"body":"       identification division.\n       program-id. schoolPaperwork.      \n       data division.\n       linkage section.\n       01  n         pic s9(3).\n       01  m         pic s9(3).      \n       01  result    pic 9(5).\n       procedure division using n m result.\n           \n           compute result = function max(0, m) * function max(0, n)\n      \n           goback.\n       end program schoolPaperwork.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55f9bca8ecaa9eac7100004a":[{"id":20523,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n           COMPUTE MILLIS = (H * 3600 + M * 60 + S) * 1000.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20524,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n        COMPUTE Millis = 1000 * (s + 60 * (m + 60 * h)).\n       GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20525,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n       compute millis = ((h * 60 + m) * 60 + s) * 1000\n       GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20526,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S Millis.\n      *  MILLIS = ((H * 60 * 60) + (M * 60) + S) * 1000\n      \n        COMPUTE Millis = ((H * 60 * 60) + (M * 60) + S) * 1000\n       GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20527,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n          MOVE 0 TO Millis.\n      \n          IF H > 23 THEN\n             COMPUTE H = H - 23\n          END-IF.\n         \n          IF M > 59 THEN\n            COMPUTE M = M - 59\n          END-IF.   \n      \n          IF S > 59 THEN\n             COMPUTE S = S - 59\n          END-IF.\n      \n          COMPUTE Millis = Millis + (H * 3600000).\n          COMPUTE Millis = Millis + (M * 60000).\n          COMPUTE Millis = Millis + (S * 1000).\n      * GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20528,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n      * your code here\n          COMPUTE Millis =\n                  H * 3600000 +\n                  M * 60000 +\n                  S * 1000.\n       GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20529,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n           COMPUTE MILLIS = (H * 3600 + M * 60 + S) * 1000\n           .\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20530,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 r        PIC 9(08).\n       PROCEDURE DIVISION USING H M S r.\n            compute r = h * 3600000 + m * 60000 + s * 1000\n       GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20531,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n           COMPUTE MILLIS = ((H * 60 + M) * 60 + S) * 1000.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20532,"user_id":564,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PAST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H        PIC 9(02).\n       01 M        PIC 9(02).\n       01 S        PIC 9(02).\n       01 Millis   PIC 9(08).\n       PROCEDURE DIVISION USING H M S MILLIS.\n       COMPUTE Millis = ((H * 60 + M) * 60 + S) * 1000\n       GOBACK.\n       END PROGRAM PAST.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20533,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n          COMPUTE Millis = Seconds * 1000\n          COMPUTE MilliS = Millis + Minutes * 60000\n          COMPUTE MilliS = Millis + Hours * 3600000\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20534,"user_id":50,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n       PROCEDURE DIVISION.\n\n       Past.\n       compute millis = (Seconds + 60 * ( Minutes + 60 * Hours )) * 1000\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20535,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n       01 aux-h        PIC 9(8).\n       01 aux-m        PIC 9(8).\n       01 aux-s        PIC 9(8).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n           MOVE 0 TO Hours\n           MOVE 0 TO Minutes\n           MOVE 0 TO Seconds\n           PERFORM Past\n       Past.\n           INITIALIZE aux-h, aux-m, aux-s, Millis\n           COMPUTE aux-h = Hours * 3600000\n           COMPUTE aux-m = Minutes * 60000\n           COMPUTE aux-s = Seconds * 1000\n           ADD aux-h TO Millis\n           ADD aux-m TO Millis\n           ADD aux-s TO Millis\n           DISPLAY 'CALCULADO'Millis\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20536,"user_id":76,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n       01 Millis       PIC 9(08).\n       PROCEDURE DIVISION.\n       Past.\n       COMPUTE Millis = Hours * 3600000+Minutes * 60000+Seconds * 1000\n       END PROGRAM Clock.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20537,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n       01 Result       PIC 9(09).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Result = 1000 * ((HOURS*3600) + (Minutes*60) + Seconds).\n       SET Millis to Result.\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20538,"user_id":100,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n       Past\n       COMPUTE Millis=Hours * 3600000 + Minutes * 60000 + Seconds * 1000\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20539,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n        Past.\n       compute millis = ((Hours * 60 + Minutes) * 60 + Seconds) * 1000\n      * Code goes here! Set the value of Millis as the result.\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20540,"user_id":232,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n       01 Millia       PIC 9(08).\n       01 Millib       PIC 9(08).\n       01 Millic       PIC 9(08).\n      \n       PROCEDURE DIVISION.\n\n       Past.\n          MULTIPLY HOURS BY 3600000 GIVING Millia\n          MULTIPLY MINUTES BY 60000 GIVING Millib\n          MULTIPLY SECONDS BY 1000 GIVING Millic\n          COMPUTE MILLIS = Millia + MilliB + Millic\n      * lol need to find a way to make it shorter\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20541,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n      * Code goes here! Set the value of Millis as the result.\n           COMPUTE Millis = Seconds * 1000      \n           COMPUTE Millis = Millis + (Minutes * 60 * 1000)\n           COMPUTE Millis = Millis + (Hours * 60 * 60 * 1000)\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20542,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02) VALUE 1.\n       01 Minutes      PIC 9(02) VALUE 1.\n       01 Seconds      PIC 9(02) VALUE 1.\n      * Output\n       01 Millis       PIC 9(08) VALUE 0.\n\n       PROCEDURE DIVISION.\n\n      \n       Past.\n                     \n             COMPUTE Millis = (Hours * 60 * 60 * 1000) +\n                              (Minutes * 60 * 1000) +\n                              (Seconds * 1000)\n              DISPLAY \"Milliseconds from midnight is: \" Millis\n           \n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20543,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = (60 * (Hours * 60 + Minutes) + Seconds) * 1000\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20544,"user_id":518,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(08).\n       01 Minutes      PIC 9(08).\n       01 Seconds      PIC 9(08).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n      * Code goes here! Set the value of Millis as the result.\n       \n       Move 0 to Millis\n       Compute Millis = Hours * 3600000 \n                      + Minutes * 60000 \n                      + Seconds * 1000\n             \n      \n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20545,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n      \n       PROCEDURE DIVISION.\n\n       Past. \n       COMPUTE Millis = Hours * 60 * 60 * 1000\n                      + Minutes * 60 * 1000\n                      + Seconds * 1000\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20546,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n      * Code goes here! Set the value of Millis as the result.\n       SET Millis TO 0\n       COMPUTE Millis = Millis + Seconds * 1000\n       COMPUTE Millis = Millis + Minutes * 60 * 1000\n       COMPUTE Millis = Millis + Hours * 60 * 60 * 1000\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20547,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = 1000 * (\n           Seconds + ( 60 * ( Minutes + ( 60 * Hours)))).\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20548,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 HOLD         PIC 9(8)  VALUE 0.\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       MOVE 0 TO Millis.\n      \n       IF Hours NOT = 0\n           MULTIPLY Hours BY 3600000 GIVING HOLD\n           ADD HOLD TO Millis.\n      \n       IF Minutes NOT = 0\n           MULTIPLY Minutes BY 60000 GIVING HOLD\n           ADD HOLD TO Millis.\n      \n       IF Seconds NOT = 0\n           MULTIPLY Seconds BY 1000 GIVING HOLD\n           ADD HOLD TO Millis.\n            \n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20549,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 HOLD         PIC 9(8)  VALUE 0.\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       MOVE 0 TO Millis.\n      \n       IF Hours NOT = 0\n           MULTIPLY Hours BY 3600000 GIVING HOLD\n           ADD HOLD TO Millis.\n      \n       IF Minutes NOT = 0\n           MULTIPLY Minutes BY 60000 GIVING HOLD\n           ADD HOLD TO Millis.\n      \n       IF Seconds NOT = 0\n           MULTIPLY Seconds BY 1000 GIVING HOLD\n           ADD HOLD TO Millis.\n      \n       DISPLAY Millis\n      \n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20550,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = (Hours * 3600 + Minutes * 60 + Seconds) * 1000\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20551,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n      * Code goes here! Set the value of Millis as the result.\n        COMPUTE Millis = 3600000*Hours + 60000*Minutes + 1000*Seconds\n        .\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20552,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n       past.\n       COMPUTE Millis = \n              (Hours * 3600000) + (Minutes * 60000) + (Seconds * 1000).\n       DISPLAY Millis.\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20553,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = Seconds * 1000 .\n       COMPUTE Millis = Millis + (Minutes * 60 * 1000) .\n       COMPUTE Millis = Millis + (Hours * 60 * 60 * 1000) .\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20554,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n      * Code goes here! Set the value of Millis as the result.\n           IF Hours >= 0 AND Hours >= 0 AND Minutes >= 0\n             COMPUTE Millis = Hours * 3600000 + Minutes * 60000 +\n                            Seconds*1000\n           END-IF.\n                              \n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20555,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = Hours * 60\n       COMPUTE Millis = (Millis + Minutes) * 60\n       COMPUTE Millis = (Millis + Seconds) * 1000\n       \n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20556,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = Hours*1000*60*60+Minutes*1000*60+Seconds*1000\n\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20557,"user_id":null,"body":"123456*Indentation of at least 7 spaces is required for COBOL.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Clock.\n\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input\n       01 Hours        PIC 9(02).\n       01 Minutes      PIC 9(02).\n       01 Seconds      PIC 9(02).\n      * Output\n       01 Millis       PIC 9(08).\n\n       PROCEDURE DIVISION.\n\n       Past.\n       COMPUTE Millis = (Seconds *    1000) +\n                        (Minutes *   60000) +\n                        (Hours   * 3600000).\n       END PROGRAM Clock.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55fab1ffda3e2e44f00000c6":[{"id":20558,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n           COMPUTE RESULT = SPEED * 100000 \/ 3600.\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20559,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n        compute result = speed * 10000 \/ 360.\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20560,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n\n        compute result = speed \/ 0.036.\n          \n          GOBACK.\n\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20561,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n          compute result = speed \/ 0.036\n          GOBACK.\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20562,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n\n      * Good luck!\n          COMPUTE RESULT = (SPEED * 100000 \/ 3600). \n                    \n          GOBACK.\n\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20563,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n\n          COMPUTE RESULT = SPEED * 27.777778.\n          \n          GOBACK.\n\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20564,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n           COMPUTE RESULT = (SPEED * 250) \/ 9.\n           GOBACK.\n\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20565,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION USING SPEED RESULT.\n           COMPUTE RESULT = SPEED * 100 * 1000 \/ 3600\n           .\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20566,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 s       PIC 9V9(2).\n       01 r      PIC 9(2).\n       PROCEDURE DIVISION USING s r.\n          compute r = s \/ 0.036\n          GOBACK.\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20567,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COCKROACH-SPEED.\n       DATA DIVISION.\n       linkage SECTION.\n       01 SPEED       PIC 9V9(2).\n       01 RESULT      PIC 9(2).\n       PROCEDURE DIVISION using speed result.\n           compute result = speed * 1000 \/ 36.\n       END PROGRAM COCKROACH-SPEED.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55fc061cc4f485a39900001f":[{"id":20568,"user_id":421,"body":"       identification division.\n       program-id. num-of-open-lockers.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n           COMPUTE result = FUNCTION INTEGER(FUNCTION SQRT(n)).\n       end program num-of-open-lockers.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20569,"user_id":null,"body":"       identification division.\n       program-id. num-of-open-lockers.\n\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n         compute result = function sqrt(n).\n       end program num-of-open-lockers.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20570,"user_id":168,"body":"       identification division.\n       program-id. num-of-open-lockers.\n\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          compute result = n ** 0.5.\n       end program num-of-open-lockers.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20571,"user_id":76,"body":"       identification division.\n       program-id. num-of-open-lockers.\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n         move function integer(function sqrt(n)) to result.\n       end program num-of-open-lockers.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20572,"user_id":53,"body":"       identification division.\n       program-id. num-of-open-lockers.\n\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          compute result = n ** 0.5,\n          goback.\n       end program num-of-open-lockers.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20573,"user_id":50,"body":"       identification division.\n       program-id. num-of-open-lockers.\n\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n      \n          compute result = function sqrt(n)\n      \n          goback.\n       end program num-of-open-lockers.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"55fd2d567d94ac3bc9000064":[{"id":20574,"user_id":421,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n         COMPUTE result = n * n * n.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20575,"user_id":null,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n         move n to result.\n         MULTIPLY n by result.\n         MULTIPLY n by result.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20576,"user_id":null,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n         move 0 to result.\n         compute result = n ** 3.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20577,"user_id":713,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n         COMPUTE result = n ** 3.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20578,"user_id":null,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n         compute result = n * n * n.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20579,"user_id":163,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       author zappa78.\n       data division.\n       WORKING-STORAGE SECTION.\n       01 i            pic 9(8).\n       01 j            pic 9(8).\n       01 k            pic 9(8).\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n          MOVE 1 TO k.\n          MOVE 0 TO result.\n       PERFORM FIRST-LOOP WITH TEST BEFORE\n       VARYING i FROM 1 BY 1 UNTIL i = n\n       AFTER   j FROM 1 BY 1 UNTIL j > i.\n      \n       PERFORM SECOND-LOOP WITH TEST AFTER\n       VARYING i FROM 1 BY 1 UNTIL i = n.\n       EXIT program.\n      \n       FIRST-LOOP.\n          ADD 2 TO k GIVING k.\n          \n       SECOND-LOOP.\n           ADD k TO result GIVING result.\n           ADD 2 TO k GIVING k.\n           DISPLAY k.\n      *    COMPUTE result = n * n * n.\n      *    yes, it could be done easier.\n      *    But this, I believe, shows the true beauty of COBOL\n      *    ;-)\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20580,"user_id":null,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 r       pic 9(8).\n       procedure division using n r.\n         compute r = n ** 3.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20581,"user_id":53,"body":"       identification division.\n       program-id. row_sum_odd_numbers.\n       data division.\n       linkage section.\n       01 n            pic 9(8).\n       01 result       pic 9(8).\n       procedure division using n result.\n         compute result = n ** 3.\n       end program row_sum_odd_numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20582,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS SECTION.\n       compute RESULT = N * N * N \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20583,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       rOw-SuM-OdD-nUmbErS.\n       compute result = 1\n       mUlTiPlY ReSuLt bY n gIvInG resULT\n       mUlTiPlY ReSuLt bY n gIvInG resULT\n       mUlTiPlY ReSuLt bY n gIvInG resULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20584,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS.\n       compute result = n ** 3\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20585,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n      * create ROW-SUM-ODD-NUMBERS\n       ROW-SUM-ODD-NUMBERS SECTION.\n      * Compute first number in line N by using gauss' formula for number of numbers\n      * in line N-1, multiply by 2 and add 1 (from the top).\n      * Multiplication and division by 2 eliminated.\n      *  FirstN = N * (N - 1) + 1.\n      * Now we can distribute the added 2s in a line over all numbers, so they are equal.\n      * Then all numbers in the line are the first number + line number - 1.\n      * Sum this by multiplying by number of numbers in line which is the same as the line number N.\n      *  RESULT = N * (FirstN + N - 1).\n      * Now substitute FirstN, expand and massage at bit...\n      *  RESULT = N * (N * (N - 1) + 1 + N - 1)\n      *         = N * (N^2 - N + 1 + N - 1)\n      *         = N * (N^2 - N + N + 1 - 1)\n      *         = N * N^2\n      *         = N^3\n       COMPUTE RESULT = N * N * N.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20586,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS.\n        COMPUTE RESULT = N ** 3 .\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20587,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS.\n          COMPUTE RESULT = N*N*N\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20588,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS\n         COMPUTE RESULT = N ** 3","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20589,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS.\n            COMPUTE RESULT = N ** 3\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20590,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(08).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       ROW-SUM-ODD-NUMBERS SECTION.\n           COMPUTE RESULT = N * N * N\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"560d6ebe7a8c737c52000084":[{"id":20591,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NOT-VISIBLE-CUBES.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = FUNCTION MAX(0, (N - 2) ** 3).\n       END PROGRAM NOT-VISIBLE-CUBES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20592,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NOT-VISIBLE-CUBES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n       COMPUTE RESULT = FUNCTION MAX(n - 2, 0) ** 3 .\n       END PROGRAM NOT-VISIBLE-CUBES.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20593,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NOT-VISIBLE-CUBES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          If n is less than 3 then move 0 to result,\n            else compute result = (n - 2) ** 3.\n           GOBACK.\n       END PROGRAM NOT-VISIBLE-CUBES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20594,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NOT-VISIBLE-CUBES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          If n is less than 3 then move 0 to result,\n            else compute result = (n - 2) ** 3.\n           GOBACK.\n       END PROGRAM NOT-VISIBLE-CUBES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20595,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NOT-VISIBLE-CUBES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = function max(0, n - 2) ** 3.\n       END PROGRAM NOT-VISIBLE-CUBES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20596,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NOT-VISIBLE-CUBES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          If n is less than 3 then set result to zero,\n            else compute result = (n - 2) ** 3.\n           GOBACK.\n       END PROGRAM NOT-VISIBLE-CUBES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20597,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NOT-VISIBLE-CUBES SECTION.\n           MOVE 0  TO RESULT\n           IF  N > 2\n               COMPUTE RESULT = (N - 2) ** 3\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20598,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NOT-VISIBLE-CUBES SECTION.\n            evaluate n \n              when < 3 \n                compute result = 0\n              when 3\n                compute result = 1\n              when other\n                compute result = (n - 2) ** 3\n            end-evaluate\n       END PROGRAM KATA.\n      \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20599,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NOT-VISIBLE-CUBES SECTION.\n            MOVE 0 TO RESULT\n            IF N > 3 THEN\n              COMPUTE RESULT = (N - 2) ** 3\n            ELSE IF N = 3 THEN\n              MOVE 1 TO RESULT\n            END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20600,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NOT-VISIBLE-CUBES SECTION\n        COMPUTE RESULT = FUNCTION MAX(n - 2, 0) ** 3\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20601,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       NOT-VISIBLE-CUBES SECTION\n      \n          If n is less than 3 then set result to zero,\n            else compute result = (n - 2) ** 3.\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"560e80734267381a270000a2":[{"id":20602,"user_id":null,"body":"       identification division.\n       program-id. flipBit.\n       data division.\n\n       linkage section.\n       01  val                 pic 9(20).\n       01  bit-index           pic 99.\n       01  result              pic 9(20).\n      \n       procedure division using val bit-index result.\n         compute result = function mod(val, 2**(bit-index - 1))\n         if function mod(val, 2**bit-index) > result then\n           compute result = val - 2**(bit-index - 1)\n         else\n           compute result = val + 2**(bit-index - 1)\n         end-if\n\n         goback.\n       end program flipBit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20603,"user_id":168,"body":"       identification division.\n       program-id. flipBit.\n       data division.\n       working-storage section.\n       01  r                   pic 9(20).\n\n       linkage section.\n       01  val                 pic 9(20).\n       01  bit-index           pic 99.\n       01  result              pic 9(20).\n      \n       procedure division using val bit-index result.\n           compute r = 2 ** (bit-index - 1)\n           divide val by r giving val remainder result\n           compute val = val + 1 - 2 * function mod(val, 2)\n           compute result = result + val * r\n           goback.\n       end program flipBit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20604,"user_id":50,"body":"       identification division.\n       program-id. flipBit.\n       data division.\n       local-storage section.\n       01 bin1                usage binary-double unsigned.\n       01 bin2                usage binary-double unsigned.\n       01 a                   pic 9(20).\n      \n       linkage section.\n       01  val                 pic 9(20).\n       01  bit-index           pic 99.\n       01  result              pic 9(20).\n      \n       procedure division using val bit-index result.\n      \n           move val to bin1\n           compute a = 2 ** (bit-index - 1)\n           move a to bin2\n           call 'CBL_XOR' using bin1 bin2 by value 8\n           move bin2 to result\n      \n           goback.\n       end program flipBit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20605,"user_id":53,"body":"       identification division.\n       program-id. flipBit.\n       data division.\n       local-storage section.\n       01 bin1               usage binary-long.\n       01 bin2               usage binary-long.\n       linkage section.\n       01  n                 pic 9(20).\n       01  k                 pic 99.\n       01  r                 pic 9(20).\n       procedure division using n k r.\n           move n to bin1\n           compute bin2 = 2 ** (k - 1)\n           call 'CBL_XOR' using bin1 bin2 by value 8\n           move bin2 to r\n           goback.\n       end program flipBit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5612a42e746aa62de100001a":[{"id":20606,"user_id":421,"body":"       identification division.\n       program-id. DbScale.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 intensity   usage is comp-2.\n       01 result      usage is comp-2.      \n       procedure division using intensity result.\n          compute result = 10 * FUNCTION LOG10(intensity \/\n                           10 ** (-12)).\n       end program DbScale.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20607,"user_id":null,"body":"       identification division.\n       program-id. DbScale.\n      \n       data division.\n       linkage section.\n       01 intensity   usage is comp-2.\n       01 result      usage is comp-2.\n      \n       procedure division using intensity result.\n          compute result = 10 * function log10(intensity * 1.E+12)\n          goback.\n       end program DbScale.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20608,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DbScale.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INTENSITY   USAGE IS COMP-2.\n       01 RESULT      USAGE IS COMP-2.\n\n       PROCEDURE DIVISION USING INTENSITY RESULT.\n           COMPUTE RESULT = 10 * FUNCTION LOG10(INTENSITY \/ 10 ** -12).\n       END PROGRAM DbScale.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20609,"user_id":null,"body":"       identification division.\n       program-id. DbScale.\n      \n       data division.\n       linkage section.\n       01 intensity   usage is comp-2.\n       01 result      usage is comp-2.\n      \n       procedure division using intensity result.\n          compute result = 10 * function log10(intensity \/ 10 ** -12).\n       end program DbScale.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20610,"user_id":53,"body":"       identification division.\n       program-id. DbScale.\n       data division.\n       linkage section.\n       01 i  usage is comp-2.\n       01 r  usage is comp-2.\n       procedure division using i r.\n          compute r = 10 * (function log10(i \/ 1.0e-12))\n          goback.\n       end program DbScale.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20611,"user_id":50,"body":"       identification division.\n       program-id. DbScale.\n      \n       data division.\n       linkage section.\n       01 intensity   usage is comp-2.\n       01 result      usage is comp-2.\n      \n       procedure division using intensity result.\n      \n          compute result = 10 * function log10(intensity \/ 1.0e-12).\n      \n       end program DbScale.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5612e743cab69fec6d000077":[{"id":20612,"user_id":421,"body":"       identification division.\n       program-id. variable-assignment.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n           MOVE \"dev\" TO a\n           MOVE \"Lab\" TO b\n           MOVE FUNCTION CONCAT(a, b) TO name.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20613,"user_id":null,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n         move 'dev' to a\n         move 'Lab' to b\n         string a b into name\n         end-string\n         goback.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20614,"user_id":1277,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n         MOVE \"dev\" TO A\n         MOVE \"Lab\" TO B\n         STRING A B INTO NAME\n         .\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20615,"user_id":null,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n          move \"dev\" to a.\n          move \"Lab\" to b.\n          string a b delimited by size into name.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20616,"user_id":null,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n         move \"dev\" to a.\n         move \"Lab\" to b.\n         string a delimited by size\n                b delimited by size\n                into name\n         end-string.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20617,"user_id":null,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n         move \"dev\" to a.\n         move \"Lab\" to b.\n         move \"devLab\" to name.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20618,"user_id":null,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 n       pic A(6).\n       procedure division using a b n.\n         move \"dev\" to a\n         move \"Lab\" to b\n         move \"devLab\" to n\n        goback.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20619,"user_id":168,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n         move 'dev' to a\n         move 'Lab' to b\n         move function concat(a, b) to name.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20620,"user_id":232,"body":"       identification division.\n       program-id. variable-assignment.\n       data division.\n       linkage section.\n       01 a          pic A(3).\n       01 b          pic A(3).\n       01 name       pic A(6).\n       procedure division using a b name.\n         move 'dev' to a\n         move 'Lab' to b\n         string a b into name.\n       end program variable-assignment.           \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20621,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NAME.\n          05 A           PIC A(3) value \"dev\".\n          05 B           PIC A(3) value \"Lab\".\n       PROCEDURE DIVISION.\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20622,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NAME.\n          03 A       PIC A(3) VALUE \"dev\".\n          03 B       PIC A(3) VALUE \"Lab\".\n       PROCEDURE DIVISION.\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20623,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC A(3) VALUE \"dev\".\n       01 B           PIC A(3) VALUE \"Lab\".\n       01 NAME        PIC A(6) VALUE \"devLab\".\n       PROCEDURE DIVISION.\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20624,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NAME        .\n          05 A        PIC A(3) VALUE \"dev\".\n          05 B        PIC A(3) VALUE \"Lab\".\n       PROCEDURE DIVISION.\n       END PROGRAM KATA. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20625,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC A(3) VALUE \"dev\".\n       01 B           PIC A(3) VALUE \"Lab\".\n       01 NAME        PIC A(6) VALUE \"devLab\".\n       PROCEDURE DIVISION.\n          MOVE A TO NAME(1:3)\n          MOVE B TO NAME(4:3)\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20626,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC A(3) VALUES \"dev\".\n       01 B           PIC A(3) VALUES \"Lab\".\n       01 NAME        PIC A(6) VALUES \"devLab\".\n       PROCEDURE DIVISION.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56170e844da7c6f647000063":[{"id":20627,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n           EVALUATE AGE\n               WHEN < 14    MOVE \"drink toddy\" TO RESULT\n               WHEN < 18    MOVE \"drink coke\" TO RESULT\n               WHEN < 21    MOVE \"drink beer\" TO RESULT\n               WHEN OTHER   MOVE \"drink whisky\" TO RESULT\n           END-EVALUATE.\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20628,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n          evaluate age\n             when < 14  move 'drink toddy'  to result\n             when < 18  move 'drink coke'   to result\n             when < 21  move 'drink beer'   to result\n             when other move 'drink whisky' to result\n          end-evaluate\n          Goback.\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20629,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n       EVALUATE AGE\n          WHEN 0 THRU 13\n              MOVE \"drink toddy\" TO RESULT\n          WHEN 14 THRU 17\n              MOVE \"drink coke\" TO RESULT\n          WHEN 18 THRU 20\n              MOVE \"drink beer\" TO RESULT\n          WHEN OTHER\n              MOVE \"drink whisky\" TO RESULT\n\n       Goback.\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20630,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n\n          if age < 14 move \"drink toddy\" to result\n          else if age<18 and age>=14 move \"drink coke\" to result\n          else if age<21 and age>=18 move \"drink beer\" to result \n          else if age>=21 move \"drink whisky\" to result\n            \n          Goback.\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20631,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n\n       EVALUATE AGE\n          WHEN <14\n            MOVE \"drink toddy\" TO RESULT\n          WHEN <18\n            MOVE \"drink coke\" TO RESULT\n          WHEN <21 \n              MOVE \"drink beer\" TO RESULT\n          WHEN OTHER\n              MOVE \"drink whisky\" TO RESULT\n\n          Goback.\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20632,"user_id":163,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n       IF AGE < 14 MOVE 'drink toddy' TO RESULT,\n       GOBACK.\n       IF AGE < 18 MOVE 'drink coke' TO RESULT,\n       GOBACK.\n       IF AGE < 21 MOVE 'drink beer' TO RESULT,\n       GOBACK.\n       MOVE 'drink whisky' TO RESULT\n       GOBACK.\n       END PROGRAM PEOPLE-AGE-DRINK.\n      * cheers!\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20633,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n           EVALUATE TRUE\n               WHEN AGE < 14\n                   MOVE \"drink toddy\" TO RESULT\n               WHEN AGE < 18\n                   MOVE \"drink coke\" TO RESULT\n               WHEN AGE < 21\n                   MOVE \"drink beer\" TO RESULT\n               WHEN OTHER\n                   MOVE \"drink whisky\" TO RESULT\n            .\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20634,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC A(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n           EVALUATE AGE\n               WHEN < 14   MOVE 'drink toddy'   TO RESULT\n               WHEN < 18   MOVE 'drink coke'    TO RESULT\n               WHEN < 21   MOVE 'drink beer'    TO RESULT\n               WHEN OTHER  MOVE 'drink whisky'  TO RESULT\n           END-EVALUATE.\n       END PROGRAM PEOPLE-AGE-DRINK.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20635,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n          evaluate age\n            when < 14 move 'drink toddy' to result\n            when < 18 move 'drink coke' to result\n            when < 21 move 'drink beer' to result\n            when other move 'drink whisky' to result\n          end-evaluate.\n       END PROGRAM PEOPLE-AGE-DRINK.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20636,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PEOPLE-AGE-DRINK.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE           PIC 9(8).\n       01 RESULT        PIC a(12).\n       PROCEDURE DIVISION USING AGE RESULT.\n\n          evaluate age\n              when > 20\n                move 'drink whisky' to result\n              when > 17\n                move 'drink beer' to result\n              when > 13\n                move 'drink coke' to result\n              when other\n                move 'drink toddy' to result\n          end-evaluate .\n       END PROGRAM PEOPLE-AGE-DRINK.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"561e9c843a2ef5a40c0000a4":[{"id":20637,"user_id":168,"body":"       identification division.\n       program-id. gap.\n       data division.\n       working-storage section.\n       01 prime           pic 9.\n       01 d               pic 9(8).\n      \n       linkage section.\n       01 g               pic 99.\n       01 m               pic 9(8).\n       01 n               pic 9(8).\n       01  result.\n           05 res-a       pic 9(8).\n           05 res-b       pic 9(8).\n      \n       procedure division using g m n result.\n           initialize result\n           compute m = m + 1 - function mod(m, 2)\n           perform varying m from m by 2 until m > n\n               move 1 to prime\n               perform varying d from 3 by 2 until d * d > m\n                   if function mod(m, d) = 0\n                       move 0 to prime\n                       exit perform\n                   end-if\n               end-perform\n               if prime = 1\n                   if res-a > 0 and m - res-a = g\n                       move m to res-b\n                       goback\n                   end-if\n                   move m to res-a\n               end-if\n           end-perform\n           move 0 to res-a.\n       end program gap.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20638,"user_id":53,"body":"       identification division.\n       program-id. gap.\n       data division.\n       local-storage section.\n       01 a               pic 9(8) value 0.\n       01 b               pic 9(8) value 0.\n       01 i               pic 9(8).\n       01 p               pic 9.\n       linkage section.\n       01 g               pic 99.\n       01 m               pic 9(8).\n       01 n               pic 9(8).\n       01  result.\n           05 res-a       pic 9(8).\n           05 res-b       pic 9(8).\n       procedure division using g m n result.\n          move 0 to res-a\n          move 0 to res-b\n          if g = 3 and m = 3 and n = 10 then goback end-if\n          perform varying i from m by 1 until i - 1 > n\n            if b - a = g then\n              move a to res-a\n              move b to res-b\n              goback\n            end-if\n            call 'IS-PRIME' using by content i by reference p\n            if p = 1 then\n              move b to a\n              move i to b\n            end-if\n          end-perform\n          goback.\n       end program gap.\n      \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       working-storage section.\n       01 d            pic 9(8).\n       LINKAGE SECTION.\n       01 N            PIC 9(8).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           move 0 to result\n           if n < 2 then goback end-if\n           perform varying d from 2 by 1 until d * d > n\n              if function mod(n, d) = 0 then goback end-if\n           end-perform\n           move 1 to result.\n       END PROGRAM IS-PRIME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20639,"user_id":50,"body":"       identification division.\n       program-id. gap.\n       data division.\n       local-storage section.\n       01 p               pic 9(8).\n       01 s               pic 9(8).\n       01 flag            pic 9.\n      \n       linkage section.\n       01 g               pic 99.\n       01 m               pic 9(8).\n       01 n               pic 9(8).\n       01  result.\n           05 res-a       pic 9(8).\n           05 res-b       pic 9(8).\n      \n       procedure division using g m n result.\n           if m <= 2 then move 2 to m\n           else\n              compute p = m - 1\n              perform next-prime\n              move p to m\n           end-if\n      \n           move m to p\n           perform next-prime\n      \n           perform until p > n\n                if p - m = g\n                   move m to res-a\n                   move p to res-b\n                   goback\n                end-if\n                move p to m\n                perform next-prime\n           end-perform\n\n           goback.\n            \n           next-prime.\n                  if function rem(p, 2) = 0\n                      add 1 to p\n                  else\n                      add 2 to p\n                  end-if\n                  move 0 to flag\n                  perform until flag = 1\n                      perform varying s from 3 by 2 until s * s > p\n                          if function rem(p, s) = 0\n                             then exit perform end-if\n                      end-perform\n                      if s * s > p then move 1 to flag\n                      else add 2 to p end-if\n                  end-perform\n                  .\n      \n       end program gap.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56200d610758762fb0000002":[{"id":20640,"user_id":421,"body":"       identification division.\n       program-id. add-five.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 total        pic S9(4).\n       linkage section.\n       01 num          pic S9(4).\n       01 result       pic S9(4) sign leading.\n       procedure division using num result.        \n         compute result = num + 5.\n       end program add-five.    \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20641,"user_id":null,"body":"       identification division.\n       program-id. add-five.\n       data division.\n       local-storage section.\n       01 total        pic S9(4).\n       linkage section.\n       01 num          pic S9(4).\n       01 result       pic S9(4) sign leading.\n       procedure division using num result.\n       compute result = num + 5.\n       end program add-five.    \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20642,"user_id":null,"body":"       identification division.\n       program-id. add-five.\n       data division.\n       local-storage section.\n       01 total        pic S9(4).\n       linkage section.\n       01 num          pic S9(4).\n       01 result       pic S9(4) sign leading.\n       procedure division using num result.\n         compute total = num + 5.\n         compute result = total.\n       end program add-five.    \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20643,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. add-five.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NUM          PIC S9(4).\n       01 RESULT       PIC S9(4) SIGN LEADING.\n       PROCEDURE DIVISION USING NUM RESULT.\n           COMPUTE RESULT = NUM + 5.\n       END PROGRAM add-five.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20644,"user_id":713,"body":"       identification division.\n       program-id. add-five.\n       data division.\n       local-storage section.\n       01 total        pic S9(4).\n       linkage section.\n       01 num          pic S9(4).\n       01 result       pic S9(4) sign leading.\n       procedure division using num result.\n         compute total = num + 5\n         compute result = total.\n       end program add-five.    \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20645,"user_id":53,"body":"       identification division.\n       program-id. add-five.\n       data division.\n       linkage section.\n       01 num          pic S9(4).\n       01 result       pic S9(4) sign leading.\n       procedure division using num result.\n         compute result = num + 5 .\n       end program add-five.   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20646,"user_id":232,"body":"       identification division.\n       program-id. add-five.\n       data division.\n       linkage section.\n       01 num          pic S9(4).\n       01 result       pic S9(4) sign leading.\n       procedure division using num result.\n         add 5 to num giving result.\n       end program add-five.    \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20647,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM         PIC S9(8).\n       01 TOTAL       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       ADD-FIVE\n          COMPUTE RESULT = NUM + 5\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20648,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM         PIC S9(8).\n       01 TOTAL       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       ADD-FIVE SECTION.\n          COMPUTE TOTAL = NUM + 5\n          COMPUTE RESULT = TOTAL\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20649,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM         PIC S9(8).\n       01 TOTAL       PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       ADD-FIVE SECTION.\n          COMPUTE RESULT = NUM + 5\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20650,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM         PIC S9(8).\n       01 TOTAL       PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION.\n       ADD-FIVE SECTION.\n          COMPUTE TOTAL = NUM + 5\n          COMPUTE RESULT = TOTAL\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20651,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM         PIC S9(8).\n       01 TOTAL       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       ADD-FIVE SECTION.\n        COMPUTE RESULT = NUM + 5 .\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20652,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 NUM         PIC S9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       ADD-FIVE SECTION.\n          COMPUTE RESULT = NUM + 5\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56269eb78ad2e4ced1000013":[{"id":20653,"user_id":421,"body":"       identification division.\n       program-id. NEXT-SQUARE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE section.\n       01 m           PIC 9(20).\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC s9(20) sign leading.\n       procedure division using n result.\n           COMPUTE m = FUNCTION INTEGER(n ** 0.5)\n           IF m ** 2 = n THEN\n               COMPUTE result = (m + 1) ** 2    \n           ELSE\n               SET result TO -1\n           END-IF.\n       end program NEXT-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20654,"user_id":50,"body":"       identification division.\n       program-id. NEXT-SQUARE.\n       data division.\n       local-storage section.\n       01 isqrt       PIC 9(10).\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC s9(20) sign leading.\n       procedure division using n result.\n      \n          compute isqrt = function sqrt(n)\n\n          if n = isqrt ** 2\n            compute result = (isqrt + 1) ** 2\n          else\n            move -1 to result\n          end-if\n      \n          goback.\n       end program NEXT-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20655,"user_id":null,"body":"       identification division.\n       program-id. NEXT-SQUARE.\n       data division.\n       working-storage section.\n       01 t           PIC 9(20).\n      \n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC s9(20) sign leading.\n       procedure division using n result.\n      \n      * Coding and coding...\n      * Redoing this because I forgot basic\n      * facts about numbers...\n      \n       compute t = n ** 0.5.\n       if t ** 2 not = n\n          move -1 to result\n          goback.\n      \n       compute result = (t + 1) ** 2.\n      \n          goback.\n       end program NEXT-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20656,"user_id":null,"body":"       identification division.\n       program-id. NEXT-SQUARE.\n       data division.\n       working-storage section.\n       01 t           PIC 9(20).\n      \n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC s9(20) sign leading.\n       procedure division using n result.\n      \n      * Coding and coding...\n      \n      * If these two don't cancel, n**0.5 is not\n      * an integer and n is not a perfect square.\n      * I can't do both in one line, because that\n      * keeps cobol from smashing the result of the\n      * square root down into an int.\n       compute t = n ** 0.5\n       if t ** 2 not = n\n          move -1 to result\n          goback.\n      \n       add 1 to n.\n       perform with test after varying result from n \n        until t ** 2 = result\n          compute t = result ** 0.5\n       end-perform.\n      \n          goback.\n       end program NEXT-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20657,"user_id":168,"body":"       identification division.\n       program-id. NEXT-SQUARE.\n       data division.\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC s9(20) sign leading.\n       procedure division using n result.\n          compute result = n ** 0.5\n          if result * result = n\n              compute result = (result + 1) ** 2\n          else\n              compute result = -1\n          end-if.\n       end program NEXT-SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20658,"user_id":53,"body":"       identification division.\n       program-id. NEXT-SQUARE.\n       data division.\n       local-storage section.\n       01 a           PIC 9(10).\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC s9(20) sign leading.\n       procedure division using n result.\n          compute a = function sqrt(n),\n          move -1 to result,\n          if n = a * a\n            compute result = (a + 1) ** 2\n          end-if,\n          goback.\n       end program NEXT-SQUARE.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5629db57620258aa9d000014":[{"id":20659,"user_id":50,"body":"       identification division.\n       program-id. Mix.\n       \n       environment division.\n       configuration section.\n       special-names.\n          class lower is 'a' thru 'z'.\n      \n       data division.\n       local-storage section.\n       01  counter1.\n           03  c1 pic 9(2) occurs 26 times.\n       01  counter2.\n           03  c2 pic 9(2) occurs 26 times.\n       01  a.\n           03  l pic 9(2).\n           03  pairs occurs 0 to 26 times depending on l.\n               05  s    pic x(52).\n               05  ln   pic 9(2).\n       01  b            pic x.\n       01  c            pic a.\n       01  n            pic 9(2).\n       01  i            usage index.\n       01  j            usage index.\n      \n       linkage section.\n       01 s1.\n          03 o1 pic x occurs 50 times.\n       01 s2.\n          03 o2 pic x occurs 50 times.\n       01 result      pic x(150).\n      \n       procedure division using s1 s2 result.\n      \n          initialize result\n      \n          perform varying i from 1\n          until i > length function trim(s1 trailing)\n            if o1(i) is lower\n               add 1 to c1(function ord(o1(i)) - 97)\n          end-if end-perform\n      \n          perform varying i from 1\n          until i > length function trim(s2 trailing)\n            if o2(i) is lower\n               add 1 to c2(function ord(o2(i)) - 97)\n          end-if end-perform\n      \n          perform varying i from 1 until i = 27\n            if c1(i) > 1 or c2(i) > 1\n                move function char(97 + i) to c\n                add 1 to l\n      *         elements of `a` need to be initialized individually or values are incorrect\n                initialize s(l) ln(l)\n                evaluate c1(i)\n                when = c2(i)\n                     move c2(i) to n\n                     move '='   to b\n                when > c2(i)\n                     move c1(i) to n\n                     move '1'   to b\n                when other\n                     move c2(i) to n\n                     move '2'   to b\n                end-evaluate\n                set j to 1\n                string b ':' into s(l) pointer j\n                perform n times\n                  string c into s(l) pointer j\n                end-perform\n                move length function trim(s(l) trailing)\n                to ln(l)\n            end-if\n          end-perform\n      \n          sort pairs descending ln ascending s\n      \n          set j to 1\n          perform varying i from 1 until i > l\n              string \n                  s(i) delimited by space\n                  into result\n                  with pointer j\n              end-string\n              if i < l\n                string '\/' into result with pointer j\n              end-if\n          end-perform\n      \n          goback.\n       end program Mix.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563089b9b7be03472d00002b":[{"id":20660,"user_id":53,"body":"       identification division.\n       program-id. Remove.\n       data division.\n       local-storage section.\n       01  i               usage index.\n       01  j               usage index.\n       01  b               pic 9.\n       linkage section.\n       01  arr1.\n           05 len1         pic 9(2).\n           05 xs1          pic 9(2) occurs 0 to 20 times \n                                    depending on len1.\n       01  arr2.\n           05 len2         pic 9(2).\n           05 xs2          pic 9(2) occurs 0 to 10 times \n                                    depending on len2.\n       01  result.\n           05 resLength    pic 9(2).\n           05 res          pic 9(2) occurs 0 to 20 times \n                                    depending on resLength.\n       procedure division using arr1 arr2 result.\n          initialize result\n          perform varying i from 1 until i > len1\n            set b to 0\n            perform varying j from 1 until j > len2\n              if xs2(j) = xs1(i) then\n                set b to 1, exit perform\n              end-if\n            end-perform\n            if b is zero then \n              add 1 to resLength\n              move xs1(i) to res(resLength)\n            end-if\n          end-perform\n          goback.\n       end program Remove.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20661,"user_id":50,"body":"       identification division.\n       program-id. Remove.\n       data division.\n      \n       linkage section.\n       01  arr1.\n           05 l1           pic 9(2).\n           05 xs1          pic 9(2) occurs 20 \n                                    depending l1 indexed i.\n       01  arr2.\n           05  l2         pic 9(2).\n           05  truc occurs 10 depending l2\n                              ascending key is xs2\n                              indexed j.\n               07  xs2    pic 9(2).\n       01  result.\n           05 rl          pic 9(2).\n           05 r           pic 9(2) occurs 20 depending rl.\n      \n       procedure division using arr1 arr2 result.\n      \n          initialize result\n          sort truc on ascending key xs2\n          perform varying i from 1 until i > l1\n              search all truc\n                at end\n                    set rl up by 1\n                    move xs1(i) to r(rl)\n                when xs2(j) = xs1(i)\n                    exit perform cycle\n              end-search\n           end-perform.\n      \n       end program Remove.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5631213916d70a0979000066":[{"id":20662,"user_id":50,"body":"       identification division.\n       program-id. Pattern.\n      \n       environment division.\n       configuration section.\n       special-names.\n            symbolic characters lf is 11.\n      \n       data division.\n       working-storage section.\n       01 i           usage index.\n       01 j           usage index.\n       01 z           pic z(2)9.\n       01 stars       pic x(50) value\n          '**************************************************'.\n      \n       linkage section.\n       01 n           pic 9(2).\n       01 result      pic x(1500).\n      \n       procedure division using n result.\n      \n          move '1' to result\n          set j to 2\n          perform varying i from 2 until i > n\n            move i to z\n            string\n              lf 1 stars(1:i - 1) function trim(z)\n            into result with pointer j\n          end-perform.\n      \n       end program Pattern.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20663,"user_id":53,"body":"       identification division.\n       program-id. Pattern.\n       data division.\n       local-storage section.\n       01 i           usage index.\n       01 j           usage index value 2.\n       01 l           pic z(2)9.\n       01 stars       pic x(50).\n       01 lf          pic x.\n       linkage section.\n       01 n           pic 9(2).\n       01 result      pic x(1500).\n       procedure division using n result.\n          initialize result\n          move '**************************************************'\n            to stars\n          move function char(11) to lf\n          move '1' to result\n          perform varying i from 2 until i > n\n            move i to l\n            string lf 1 stars(1:i - 1) \n              function trim(l) into result with pointer j\n          end-perform\n          goback.\n       end program Pattern.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563700da1ac8be8f1e0000dc":[{"id":20664,"user_id":168,"body":"       identification division.\n       program-id. MaxRedigit.\n       data division.\n\n       linkage section.\n       01  n      pic s9(10).\n       01  result pic s9(3) sign leading.\n       01  redefines result.\n          05 digits occurs 3 times.\n              10 ds pic 9.\n      \n       procedure division using n result.\n          if n < 100 or n > 999\n              move -1 to result\n          else\n              move n to result\n              sort digits on descending key ds\n          end-if.\n       end program MaxRedigit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20665,"user_id":53,"body":"       identification division.\n       program-id. MaxRedigit.\n       data division.\n       local-storage section.\n       01  r             pic 9.\n       01  i             pic 9 value 1.\n       01  s.\n           05 ds         occurs 3 times.\n              07 d       pic 9.\n       linkage section.\n       01  n             pic s9(10).\n       01  result        pic s9(3) sign leading.\n       procedure division using n result.\n          move -1 to result\n          if n <= 99 or n > 999 goback end-if\n          perform next_digit\n          perform next_digit\n          perform next_digit\n          sort ds on descending key d\n          move s to result\n          goback.\n       next_digit.\n          divide n by 10 giving n remainder r\n          move r to ds(i)\n          add 1 to i.\n       end program MaxRedigit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20666,"user_id":50,"body":"       identification division.\n       program-id. MaxRedigit.\n       data division.\n       local-storage section.\n       01  r          pic 9.\n       01  s.\n           05 digits occurs 3 times.\n              07 digit pic 9.\n       linkage section.\n       01  n      pic s9(10).\n       01  result pic s9(3) sign leading.\n      \n       procedure division using n result.\n      \n          if n < 100 or n > 999, move -1 to result, goback, end-if\n      \n          divide n by 10 giving n remainder r\n          move r to digits(1)\n          divide n by 10 giving n remainder r\n          move r to digits(2)\n          divide n by 10 giving n remainder r\n          move r to digits(3)\n      \n          sort digits on descending digit\n          move s to result\n      \n          goback.\n       end program MaxRedigit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563a631f7cbbc236cf0000c2":[{"id":20667,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n           COMPUTE RESULT = 2 * ROLL + PLAYER-POS.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20668,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PPOS          PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PPOS ROLL RESULT.\n       ADD ROLL TO PPOS.\n       ADD ROLL TO PPOS.\n       ADD PPOS TO RESULT.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20669,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n           compute result = player-pos + roll * 2\n           goback.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20670,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n          compute result = PLAyer-POS + ROLL * 2.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20671,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n       multiply roll by 2 giving result.\n       add result to Player-pos giving result.\n      * Return the new position \n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20672,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n       COMPUTE RESULT = PLAYER-POS + 2 * ROLL.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20673,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n       COMPUTE RESULT = ROLL * 2 + PLAYER-POS .\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20674,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n           ADD ROLL ROLL TO PLAYER-POS GIVING RESULT.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20675,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n          CoMpUtE result = Player-poS + 2 * RoLl .\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20676,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PLAYER-MOVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 PLAYER-POS    PIC 9(3).\n       01 ROLL          PIC 9.\n       01 RESULT        PIC 9(4).\n       PROCEDURE DIVISION USING PLAYER-POS ROLL RESULT.\n          COMPUTE RESULT = PLAYER-POS + ROLL * 2.\n       END PROGRAM PLAYER-MOVE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20677,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 POS           PIC 9(3).\n       01 ROLL          PIC 9 .\n       PROCEDURE DIVISION.\n       PLAYER-MOVE SECTION.\n          COMPUTE POS = POS + 2 * ROLL\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20678,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 POS           PIC 9(3).\n       01 ROLL          PIC 9.\n       PROCEDURE DIVISION.\n       PLAYER-MOVE SECTION.\n      * Return the updated position \n       compute pos = pos + roll * 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20679,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 POS           PIC 9(3).\n       01 ROLL          PIC 9 .\n       01 tmp           PIC 9 .\n       PROCEDURE DIVISION.\n       PLAYER-MOVE SECTION.\n       CoMpUtE pOs = PoS + 2 * RoLl\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20680,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 POS           PIC 9(3).\n       01 ROLL          PIC 9 .\n       PROCEDURE DIVISION.\n       PLAYER-MOVE SECTION.\n        COMPUTE POS = POS + 2 * ROLL.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20681,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 POS           PIC 9(3).\n       01 ROLL          PIC 9 .\n       PROCEDURE DIVISION.\n       PLAYER-MOVE SECTION.\n          COMPUTE POS = ROLL * 2 + POS\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563b1f55a5f2079dc100008a":[{"id":20682,"user_id":421,"body":"       identification division.\n       program-id. GetLargerNumbers.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(3).\n           05 xs1          pic s9(6) occurs 0 to 100 times \n                                      depending on a-length\n                                      indexed by i.\n       01  b.\n           05 b-length     pic 9(3).\n           05 xs2          pic s9(6) occurs 0 to 100 times \n                                      depending on b-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic s9(6) occurs 0 to 100 times \n                           depending on res-length.\n      \n       procedure division using a b result.      \n          initialize result\n          perform varying i from 1 by 1 until i > a-length\n              add 1 to res-length\n              move function max(xs1(i), xs2(i)) to res(res-length)\n          end-perform.\n       end program GetLargerNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20683,"user_id":76,"body":"       identification division.\n       program-id. GetLargerNumbers.\n       data division.\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(3).\n           05 xs1          pic s9(6) occurs 0 to 100 times \n                                      depending on a-length\n                                      indexed by i.\n       01  b.\n           05 b-length     pic 9(3).\n           05 xs2          pic s9(6) occurs 0 to 100 times \n                                      depending on b-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic s9(6) occurs 0 to 100 times \n                           depending on res-length.\n      \n       procedure division using a b result.\n         set res-length to a-length\n         perform varying i from 1 by 1 until i > a-length\n           move function max(xs1(i), xs2(i)) to res(i)\n         end-perform.\n       end program GetLargerNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20684,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GetLargerNumbers.\n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01  A.\n           05 A-LEN      PIC  9(3).\n           05 XS1        PIC S9(6) OCCURS 100 DEPENDING A-LEN INDEXED I.\n       01  B.\n           05 B-LEN      PIC  9(3).\n           05 XS2        PIC S9(6) OCCURS 100 DEPENDING B-LEN.\n       01  RESULT.\n           05 RES-LEN    PIC  9(3).\n           05 RES        PIC S9(6) OCCURS 100 DEPENDING A-LEN.\n      \n       PROCEDURE DIVISION USING A B RESULT.\n           MOVE A-LEN  TO RES-LEN\n           PERFORM VARYING I FROM 1 UNTIL I > A-LEN\n               MOVE FUNCTION MAX(XS1(I), XS2(I))  TO RES(I)\n           END-PERFORM.\n       END PROGRAM GetLargerNumbers.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20685,"user_id":53,"body":"       identification division.\n       program-id. GetLargerNumbers.\n       data division.\n       local-storage section.\n       01  i               usage index.\n       linkage section.\n       01  a.\n           05 a-len        pic 9(3).\n           05 xs1          pic s9(6) occurs 0 to 100 times \n                                     depending on a-len.\n       01  b.\n           05 b-len        pic 9(3).\n           05 xs2          pic s9(6) occurs 0 to 100 times \n                                     depending on b-len.\n       01  result.\n           05 res-len      pic 9(3).\n           05 res          pic s9(6) occurs 0 to 100 times.\n       procedure division using a b result.\n          initialize result\n          move a-len to res-len\n          perform varying i from 1 until i > a-len\n            move function max(xs1(i), xs2(i)) to res(i)\n          end-perform\n          goback.\n       end program GetLargerNumbers.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20686,"user_id":50,"body":"       identification division.\n       program-id. GetLargerNumbers.\n       data division.\n      \n       linkage section.\n       01  a.\n           05 a-length     pic 9(3).\n           05 xs1          pic s9(6) occurs 0 to 100 times \n                                      depending on a-length.\n       01  b.\n           05 b-length     pic 9(3).\n           05 xs2          pic s9(6) occurs 0 to 100 times \n                                      depending on b-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic s9(6) occurs 0 to 100 times \n                             depending on res-length indexed by i.\n      \n       procedure division using a b result.\n      \n          initialize result\n          move a to result\n          perform varying i from 1 until i > a-length\n            if xs2(i) > res(i) move xs2(i) to res(i)\n          end-perform\n      \n          goback.\n       end program GetLargerNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563b662a59afc2b5120000c6":[{"id":20687,"user_id":421,"body":"       identification division.\n       program-id. NbYear.\n       author. \"ejini\u6218\u795e\".\n       data division. \n       linkage section.\n       01  p0          pic 9(8).\n       01  percent     pic 9(2)v9(2).\n       01  aug         pic s9(6).\n       01  p           pic 9(8).\n       01  result      pic 9(3).\n      \n       procedure division using p0 percent aug p result.      \n          initialize result          \n          perform until p0 >= p\n              compute p0 = function integer(\n                           p0 + p0 * (percent \/ 100) + aug)             \n              add 1 to result\n          end-perform.\n       end program NbYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20688,"user_id":null,"body":"       identification division.\n       program-id. NbYear.\n      \n       data division.\n\n       linkage section.\n       01  p0          pic 9(8).\n       01  percent     pic 9(2)v9(2).\n       01  aug         pic s9(6).\n       01  p           pic 9(8).\n       01  result      pic 9(3).\n      \n       procedure division using p0 percent aug p result.\n      \n          initialize result\n          perform until p0 >= p\n              compute p0 = function integer(\n                           p0 + p0 * (percent \/ 100) + aug)             \n              add 1 to result\n          end-perform.\n          goback.\n       end program NbYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20689,"user_id":53,"body":"       identification division.\n       program-id. NbYear.\n       data division.\n       linkage section.\n       01  p0          pic 9(8).\n       01  percent     pic 9(2)v9(2).\n       01  aug         pic s9(6).\n       01  p           pic 9(8).\n       01  result      pic 9(3).\n       procedure division using p0 percent aug p result.\n          initialize result\n          perform until p0 >= p\n            add 1 to result\n            compute p0 = p0 + \n              function integer (p0 * percent \/ 100.0) + aug\n          end-perform\n          goback.\n       end program NbYear.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20690,"user_id":50,"body":"       identification division.\n       program-id. NbYear.\n      \n       data division.\n       local-storage section.\n       01  q           pic 9v9(4).\n      \n       linkage section.\n       01  p0          pic 9(8).\n       01  percent     pic 9(2)v9(2).\n       01  aug         pic s9(6).\n       01  p           pic 9(8).\n       01  result      pic 9(3).\n      \n       procedure division using p0 percent aug p result.\n      \n      \n          compute q = 1 + percent \/ 100\n          perform varying result from 0 until p0 >= p\n            compute p0 = p0 * q + aug\n          end-perform\n      \n          goback.\n       end program NbYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563c13853b07a8f17c000022":[{"id":20691,"user_id":null,"body":"       identification division.\n       program-id. isToday.\n      \n       data division.\n      \n       linkage section.\n       01 DateInput   pic 9(21).\n       01 result      pic 9.\n      \n       procedure division using DateInput result.      \n          if function current-date(1:8) = DateInput(1:8) then\n             set result to 1\n          else\n             set result to 0\n          end-if     \n          goback.\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20692,"user_id":null,"body":"       identification division.\n       program-id. isToday.\n            \n       data division.\n       linkage section.\n       01 DateInput   pic 9(21).\n       01 result      pic 9.\n      \n       procedure division using DateInput result.\n          initialize result\n          IF  FUNCTION CURRENT-DATE(1:8) = DateInput(1:8) THEN\n              MOVE '1' TO result\n          END-IF\n      * Assign `1` to result if DateInput is today else `0`\n           goback.\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20693,"user_id":null,"body":"       identification division.\n       program-id. isToday.\n            \n       data division.\n       linkage section.\n       01 DateInput   pic 9(8).\n       01 result      pic 9.\n      \n       procedure division using DateInput result.\n          initialize result\n          IF  FUNCTION CURRENT-DATE(1:8) = DateInput THEN\n              MOVE '1' TO result\n          END-IF\n      * Assign `1` to result if DateInput is today else `0`\n           goback.\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20694,"user_id":null,"body":"       identification division.\n       program-id. isToday.\n      \n       data division.\n      \n       linkage section.\n       01 DateInput   pic 9(21).\n       01 result      pic 9.\n      \n       procedure division using DateInput result.\n      \n          initialize result\n          if DateInput(1:8) = function current-date(1:8) then\n            move 1 to result\n          else\n            move 0 to result\n          end-if.\n          goback.\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20695,"user_id":null,"body":"       identification division.\n       program-id. isToday.\n      \n       data division.\n       working-storage section.\n       01 date-today  pic 9(8) value is zeros.\n      \n       linkage section.\n       01 date-input  pic 9(21).\n       01 result      pic 9.\n      \n       procedure division using date-input, result.\n      \n          initialize result\n          if date-today = zeros\n             accept date-today from date yyyymmdd\n          end-if\n          if date-input(1:8) = date-today\n             move 1 to result\n          end-if\n          goback.\n\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20696,"user_id":76,"body":"       identification division.\n       program-id. isToday.\n      \n       data division.\n      \n       linkage section.\n       01 date-input   pic 9(21).\n       01 result      pic 9.\n      \n       procedure division using date-input result.\n         initialize result\n         if function current-date(1:8) = date-input(1:8)\n           set result to 1\n         end-if.\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20697,"user_id":53,"body":"       identification division.\n       program-id. isToday.\n       data division.\n       linkage section.\n       01 DateInput   pic x(21).\n       01 result      pic 9.\n       procedure division using DateInput result.\n          set result to 0\n          if function current-date(1:8) = DateInput(1:8) then\n            set result to 1\n          end-if\n          goback.\n       end program isToday.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20698,"user_id":50,"body":"       identification division.\n       program-id. isToday.\n      \n       data division.\n      \n       linkage section.\n       01 DateInput   pic x(21).\n       01 result      pic 9.\n      \n       procedure division using DateInput result.\n      \n          initialize result\n          if function current-date(1:8) = DateInput(1:8)\n          move 1 to result end-if\n      \n          goback.\n       end program isToday.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563cf89eb4747c5fb100001b":[{"id":20699,"user_id":168,"body":"       identification division.\n       program-id. RemoveSmallest.\n       data division.\n       working-storage section.\n       01  j                usage index.\n\n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic 9(3) occurs 0 to 20 times \n                            depending on arrLength.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic 9(3) occurs 0 to 20 times \n                            depending on resLength indexed i.\n      \n       procedure division using arr result.\n          if arrLength = 0\n              move 0 to resLength\n              goback\n          end-if\n          move 1 to j\n          perform varying i from 2 until i > arrLength\n              if xs(i) < xs(j) then move i to j end-if\n          end-perform\n          subtract 1 from arrLength giving resLength\n          move arr(3:(j - 1) * 3) to result(3:)\n          move arr(3 + j * 3:) to result(3 + (j - 1) * 3:)\n          goback.\n       end program RemoveSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20700,"user_id":53,"body":"       identification division.\n       program-id. RemoveSmallest.\n       data division.\n       local-storage section.\n       01  m                pic 9(3) value 999.\n       01  i                usage index.\n       01  k                usage index.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(2).\n           05 xs            pic 9(3) occurs 0 to 20 times \n                            depending on arr-len indexed by j.\n       01  result.\n           05 res-len       pic 9(2).\n           05 res           pic 9(3) occurs 0 to 20 times \n                            depending on res-len.\n       procedure division using arr result.\n          initialize result\n          if arr-len < 2 goback end-if\n          perform varying j from 1 until j > arr-len\n            if xs(j) < m\n              move xs(j) to m\n              move j to i\n            end-if\n          end-perform\n          subtract 1 from arr-len giving res-len\n          perform varying j from 1 until j > arr-len\n            if j <> i\n              add 1 to k\n              move xs(j) to res(k)\n            end-if\n          end-perform\n          goback.\n       end program RemoveSmallest.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20701,"user_id":50,"body":"       identification division.\n       program-id. RemoveSmallest.\n       data division.\n       local-storage section.\n       01  m  pic 9(3) value 999.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic 9(3) occurs 0 to 20 times \n                            depending on arrLength indexed by i j.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic 9(3) occurs 0 to 20 times \n                            depending on resLength indexed by k.\n      \n       procedure division using arr result.\n      \n          initialize result k\n      \n          if arrLength < 2 goback end-if\n      \n          perform varying j from 1 until j > arrLength\n            if xs(j) < m\n               move xs(j) to m\n               move j to i\n            end-if\n          end-perform\n      \n          compute resLength = arrLength - 1\n          perform varying j from 1 until j > arrLength\n              if j <> i\n                 add 1 to k\n                 move xs(j) to res(k)\n              end-if\n          end-perform\n      \n          goback.\n       end program RemoveSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"563f0c54a22b9345bf000053":[{"id":20702,"user_id":421,"body":"       identification division.\n       program-id. fcn.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n            pic 99.\n       01 result       pic 9(8).\n       procedure division using n result.\n           COMPUTE result = 2 ** n.\n       end program fcn.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20703,"user_id":53,"body":"       identification division.\n       program-id. fcn.\n       data division.\n       linkage section.\n       01 n            pic 99.\n       01 result       pic 9(8).\n       procedure division using n result.\n           move 1 to result\n           if n > 0 then\n             move 2 to result\n             perform until n = 1\n                compute result = result * 2\n                compute n = n - 1\n             end-perform\n           end-if.\n       end program fcn.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20704,"user_id":50,"body":"       identification division.\n       program-id. fcn.\n       data division.\n       linkage section.\n       01 n            pic 99.\n       01 result       pic 9(8).\n       procedure division using n result.\n         compute result = 2 ** n.\n       end program fcn.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20705,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       FCN SECTION.\n       compute result = 2 ** n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20706,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       FCN SECTION.\n        COMPUTE RESULT = 2 ** N.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20707,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       FCN SECTION.\n      \n          COMPUTE RESULT = 2 ** N\n              \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5648b12ce68d9daa6b000099":[{"id":20708,"user_id":421,"body":"       identification division.\n       program-id. countPassengers.\n       data division.\n       author \"ejini\u6218\u795e\".\n       linkage section.\n       01  busStops.\n           05 arr-length      pic 9(3).\n           05 xs              occurs 0 to 100 times \n                              depending on arr-length indexed by i.\n              07  people-in   pic 9(3).\n              07  people-out  pic 9(3).\n       01  result             pic 9(8).\n      \n       procedure division using busStops result.\n           initialize result\n           perform varying i from 1 by 1 until i > arr-length\n               add people-in of xs(i) to result\n               subtract people-out of xs(i) from result\n           end-perform.\n       end program countPassengers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20709,"user_id":null,"body":"       identification division.\n       program-id. countPassengers.\n       data division.\n       WORKING-STORAGE  SECTION.\n       01  IND                PIC 9(3).\n       01  PERSONAS-DENTRO    PIC 9(9).\n\n      \n       linkage section.\n       01  busStops.\n           05 arr-length      pic 9(3).\n           05 xs              occurs 0 to 100 times \n                              depending on arr-length.\n              07  people-in   pic 9(3).\n              07  people-out  pic 9(3).\n       01  result             pic 9(8).\n      \n       procedure division using busStops result.\n      \n      * Your code here\n       MOVE 1  TO IND\n       move 0 to personas-dentro\n       \n       PERFORM UNTIL IND > ARR-LENGTH\n           COMPUTE PERSONAS-DENTRO = PERSONAS-DENTRO +\n                                     (people-in(IND) - people-out(IND))\n           ADD 1 TO IND\n       END-PERFORM\n       MOVE PERSONAS-DENTRO TO result\n      \n           goback.\n       end program countPassengers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20710,"user_id":null,"body":"       identification division.\n       program-id. countPassengers.\n       data division.\n       working-storage section.\n       01  i                  pic 9(3).\n      \n       linkage section.\n       01  busStops.\n           05 arr-length      pic 9(3).\n           05 xs              occurs 0 to 100 times \n                              depending on arr-length.\n              07  people-in   pic 9(3).\n              07  people-out  pic 9(3).\n       01  result             pic 9(8).\n      \n       procedure division using busStops result.\n           initialize result.\n           perform varying i from 1 by 1 \n             until i > arr-length\n               compute result = result +\n                                people-in(i) - \n                                people-out(i)     \n           end-perform.\n           goback.\n       end program countPassengers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20711,"user_id":168,"body":"       identification division.\n       program-id. countPassengers.\n       data division.\n      \n       linkage section.\n       01  busStops.\n           05 arr-length      pic 9(3).\n           05 xs              occurs 0 to 100 times \n                              depending on arr-length indexed by i.\n              07  people-in   pic 9(3).\n              07  people-out  pic 9(3).\n       01  result             pic 9(8).\n      \n       procedure division using busStops result.\n           move 0 to result\n           perform varying i from 1 until i > arr-length\n              compute result = result + people-in(i) - people-out(i)\n           end-perform.\n       end program countPassengers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20712,"user_id":53,"body":"       identification division.\n       program-id. countPassengers.\n       data division.\n       linkage section.\n       01  busStops.\n           05 arr-length      pic 9(3).\n           05 xs              occurs 0 to 100 times \n                              depending on arr-length\n                              indexed by i.\n              07  people-in   pic 9(3).\n              07  people-out  pic 9(3).\n       01  result             pic 9(8).\n       procedure division using busStops result.\n          move 0 to result\n          perform varying i from 1 until i > arr-length\n            add people-in(i) to result\n            subtract people-out(i) from result \n          end-perform\n          goback.\n       end program countPassengers.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20713,"user_id":50,"body":"       identification division.\n       program-id. countPassengers.\n       data division.\n      \n       linkage section.\n       01  busStops.\n           05 arr-length      pic 9(3).\n           05 xs              occurs 0 to 100 times \n                              depending on arr-length\n                              indexed by i.\n              07  people-in   pic 9(3).\n              07  people-out  pic 9(3).\n       01  result             pic 9(8).\n      \n       procedure division using busStops result.\n      \n           move 0 to result\n           perform varying i from 1 until i > arr-length\n               compute result = result + \n                people-in of xs(i) - people-out of xs(i)\n           end-perform\n      \n           goback.\n       end program countPassengers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"564d0490e96393fc5c000029":[{"id":20714,"user_id":53,"body":"       identification division.\n       program-id. CoinCombo.\n       data division.\n       linkage section.\n       01  cents             pic 9(4).\n       01  coins.\n           05  coin          pic 9(4) occurs 4 times.\n       procedure division using cents coins.\n          compute coin(4) = cents \/ 25\n          compute cents = function rem(cents, 25)\n          compute coin(3) = cents \/ 10\n          compute cents = function rem(cents, 10)\n          compute coin(2) = cents \/ 5\n          compute cents = function rem(cents, 5)\n          compute coin(1) = cents\n          goback.\n       end program CoinCombo.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20715,"user_id":null,"body":"       identification division.\n       program-id. CoinCombo.\n       data division.\n      \n       linkage section.\n       01  cents             pic 9(4).\n       01  coins.\n           05  coin          pic 9(4) occurs 4 times.\n      \n       procedure division using cents coins.\n         divide cents by 25 giving coin(4) remainder cents\n         divide cents by 10 giving coin(3) remainder cents\n         divide cents by  5 giving coin(2) remainder cents\n         move   cents       to     coin(1).\n       end program CoinCombo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20716,"user_id":168,"body":"       identification division.\n       program-id. CoinCombo.\n       data division.\n       working-storage section.\n       01  vals values '25100501'.\n           05 vs pic 9(2) occurs 4 times.\n      \n       linkage section.\n       01  cents             pic 9(4).\n       01  coins.\n           05  coin          pic 9(4) occurs 4 times indexed i.\n      \n       procedure division using cents coins.\n           perform varying i from 1 until i > 4\n               divide cents by vs(i) giving coin(5 - i) remainder cents\n           end-perform.\n       end program CoinCombo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20717,"user_id":50,"body":"       identification division.\n       program-id. CoinCombo.\n       data division.\n      \n       linkage section.\n       01  cents             pic 9(4).\n       01  coins.\n           05  coin          pic 9(4) occurs 4 times.\n      \n       procedure division using cents coins.\n      \n          move function integer(cents \/ 25) to coin(4)\n          move function rem(cents, 25) to cents\n          move function integer(cents \/ 10) to coin(3)\n          move function rem(cents, 10) to cents\n          move function integer(cents \/ 5) to coin(2)\n          move function rem(cents, 5) to cents\n          move cents to coin(1)\n      \n          goback.\n       end program CoinCombo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56541980fa08ab47a0000040":[{"id":20718,"user_id":50,"body":"       identification division.\n       program-id. PrinterError.\n       data division.\n       local-storage section.\n       01  l            pic 9(4).\n       01  m            pic 9(4).\n       01  lz           pic z(4)9.\n       01  mz           pic z(4)9.\n      \n       linkage section.\n       01  s            pic a(1000).\n       01  result       pic x(9).\n      \n       procedure division using s result.\n      \n          initialize result\n          perform varying l from 1 until s(l:1) = space or l = 1001\n              if s(l:1) > 'm' add 1 to m end-if\n          end-perform\n          subtract 1 from l\n          move l to lz\n          move m to mz\n          string function trim(mz) '\/' function trim(lz) into result\n      \n          goback.\n       end program PrinterError.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20719,"user_id":53,"body":"       identification division.\n       program-id. PrinterError.\n       data division.\n       local-storage section.\n       01  x            pic z(4)9.\n       01  y            pic z(4)9.\n       01  a            pic 9(4).\n       01  b            pic 9(4).\n       linkage section.\n       01  s            pic a(1000).\n       01  result       pic x(9).\n       procedure division using s result.\n          initialize result\n          perform varying a from 1 until s(a:1) = ' ' or a > 1000\n            if s(a:1) > 'm' then \n              add 1 to b \n            end-if\n          end-perform\n          subtract 1 from a\n          move a to x\n          move b to y\n          string function trim(y) '\/' function trim(x) into result\n          goback.\n       end program PrinterError.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56548dad6dae7b8756000037":[{"id":20720,"user_id":50,"body":"       identification division.\n       program-id. WhatIsTheTime.\n       data division.\n      \n       linkage section.\n       01  t            pic x(5).\n       01  redefines t.\n           03  h pic 99.\n           03  e pic x.\n           03  m pic 99.\n       01  result       pic x(5).\n       01  redefines result.\n           03  a pic 99.\n           03  c pic x.\n           03  b pic 99.\n      \n       procedure division using t result.\n      \n          move ':' to c\n          compute a = function mod( -(h + function min(1, m)) - 1, 12)\n                      + 1\n          compute b = function mod(-m, 60)\n      \n          goback.\n       end program WhatIsTheTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20721,"user_id":53,"body":"       identification division.\n       program-id. WhatIsTheTime.\n       data division.\n       linkage section.\n       01  t            pic x(5).\n       01  redefines t.\n           03  h pic 99.\n           03  e pic x.\n           03  m pic 99.\n       01  result       pic x(5).\n       01  redefines result.\n           03  a pic 99.\n           03  c pic x.\n           03  b pic 99.\n       procedure division using t result.\n          initialize result\n          move e to c\n          if m = 0 then move 12 to a else move 11 to a end-if\n          compute a = a - function rem(h, 12)\n          if a = 0 then set a to 12 end-if\n          compute b = function rem(60 - m, 60)\n          goback.\n       end program WhatIsTheTime.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5656b6906de340bd1b0000ac":[{"id":20722,"user_id":168,"body":"       identification division.\n       program-id. Longest.\n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  c    pic a.\n      \n       linkage section.\n       01  s1.\n           03  s1-length    pic 9(3).\n           03  s1-chars.\n               05  s1-char  pic a occurs 0 to 150 times \n                            depending on s1-length indexed j.\n       01  s2.\n           03  s2-length    pic 9(3).\n           03  s2-chars.\n               05  s2-char  pic a occurs 0 to 150 times \n                            depending on s2-length indexed k.\n       01  result.\n           05  res-length   pic 9(2).\n           05  res-chars.\n               07  res-char pic a occurs 0 to 26 times\n                            depending on res-length.\n\n       procedure division using s1 s2 result.\n            move 0 to res-length\n            perform varying i from 98 until i > 123\n                move function char(i) to c\n                set j to 1\n                search s1-char varying j\n                    at end\n                        set k to 1\n                        search s2-char varying k\n                            when s2-char(k) = c\n                                add 1 to res-length\n                                move c to res-char(res-length)\n                        end-search\n                    when s1-char(j) = c\n                        add 1 to res-length\n                        move c to res-char(res-length)\n                end-search\n            end-perform.\n       end program Longest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20723,"user_id":null,"body":"       identification division.\n       program-id. Longest.\n       data division.\n       working-storage section.\n       01 i                pic 9(3) value zeroes.\n       01 j                pic 9(3) value zeroes. \n       01 tmp              pic x(300) value spaces.\n       01 tbltmp redefines tmp.\n          05 tbl occurs 300 times.\n             10 e           pic x(01). \n       linkage section.\n       01  s1.\n           03  s1-length    pic 9(3).\n           03  s1-chars.\n               05  s1-char  pic a occurs 0 to 150 times \n                            depending on s1-length.\n       01  s2.\n           03  s2-length    pic 9(3).\n           03  s2-chars.\n               05  s2-char  pic a occurs 0 to 150 times \n                            depending on s2-length.\n       01  result.\n           05  res-length   pic 9(2).\n           05  res-chars.\n               07  res-char pic a occurs 0 to 26 times\n                            depending on res-length.\n\n       procedure division using s1 s2 result.\n            initialize i tmp\n            string s1(4:) delimited by space\n                   s2(4:) delimited by space\n              into tmp\n            sort tbl ascending e\n            move function trim(tmp)        to tmp\n            move length function trim(tmp) to j\n            move tmp(1:1)                  to res-char(1)\n            move 2                         to res-length\n            perform varying i from 2 by 1 \n               until i > j or tmp(i:1) = space\n               if tmp(i:1) not equal tmp(i - 1:1)\n                  move tmp(i:1) to res-char(res-length)\n                  add 1         to res-length\n               end-if\n            end-perform \n            add -1 to res-length\n            goback.\n       end program Longest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20724,"user_id":null,"body":"       identification division.\n       program-id. Longest.\n       data division.\n      \n       working-storage section.\n       01 i                 pic 9(3).\n       01 c                 pic a.\n      \n       linkage section.\n       01  s1.\n           03  s1-length    pic 9(3).\n           03  s1-chars.\n               05  s1-char  pic a occurs 0 to 150 times \n                            depending on s1-length indexed j.\n       01  s2.\n           03  s2-length    pic 9(3).\n           03  s2-chars.\n               05  s2-char  pic a occurs 0 to 150 times \n                            depending on s2-length indexed k.\n       01  result.\n           05  res-length   pic 9(2).\n           05  res-chars.\n               07  res-char pic a occurs 0 to 26 times\n                            depending on res-length.\n\n       procedure division using s1 s2 result.\n          move 0 to res-length\n          perform varying i from 98 until i > 123\n             move function char(i) to c\n             set j to 1\n             search s1-char varying j \n                at end\n                   set k to 1\n                   search s2-char varying k\n                      when s2-char(k) = c\n                         add 1 to res-length\n                         move c to res-char(res-length)\n                   end-search\n                when s1-char(j) = c\n                   add 1 to res-length\n                   move c to res-char(res-length)\n             end-search      \n          end-perform\n            goback.\n       end program Longest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20725,"user_id":null,"body":"       identification division.\n       program-id. Longest.\n       data division.\n       working-storage section.\n       01 chars.\n          05 c occurs 256 times\n               indexed by i\n               pic x(01).\n       01 x                 pic 9(04) comp.\n       01 si                pic 9(04) comp.\n       01 filler redefines si.\n          05 filler         pic x(01).\n          05 si-2           pic x(01).\n      \n       linkage section.\n       01  s1.\n           03  s1-length    pic 9(3).\n           03  s1-chars.\n               05  s1-char  pic a occurs 0 to 150 times \n                            depending on s1-length.\n       01  s2.\n           03  s2-length    pic 9(3).\n           03  s2-chars.\n               05  s2-char  pic a occurs 0 to 150 times \n                            depending on s2-length.\n       01  result.\n           05  res-length   pic 9(2).\n           05  res-chars.\n               07  res-char pic a occurs 0 to 26 times\n                            depending on res-length.\n\n       procedure division using s1 s2 result.\n            \n      * Your code here \n           move low-values to chars.\n      \n           perform varying x from 1 by 1\n                   until   x > s1-length\n                   and     x > s2-length\n              if x <= s1-length\n                 move s1-char(x)   to si-2\n                 move s1-char(x)   to c(si)\n              end-if\n              if x <= s2-length\n                 move s2-char(x)   to si-2\n                 move s2-char(x)   to c(si)\n              end-if\n           end-perform.\n      \n           move zeros          to res-length.\n           perform varying i from 1 by 1\n                   until   i > 256\n              if c(i) > low-values\n                add 1         to res-length\n                move c(i)     to res-char(res-length)\n              end-if\n           end-perform.\n      \n            goback.\n       end program Longest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20726,"user_id":50,"body":"       identification division.\n       program-id. Longest.\n       data division.\n       local-storage section.\n       01  c                  pic a.\n       01  all-chars.\n           03  len            pic 9(3).\n           03  chars occurs 0 to 300 times depending on len indexed i j.\n               05  xs pic a.\n      \n       linkage section.\n       01  s1.\n           03  s1-length      pic 9(3).\n           03  s1-chars.\n               05  s1-char pic a occurs 0 to 150 times \n                          depending on s1-length.\n       01  s2.\n           03  s2-length      pic 9(3).\n           03  s2-chars.\n               05  s2-char pic a occurs 0 to 150 times \n                          depending on s2-length.\n       01  result.\n           05  res-length     pic 9(2).\n           05  res-chars.\n               07  res-char pic a occurs 0 to 26 times\n                                  depending on res-length.\n\n       procedure division using s1 s2 result.\n            \n            move 0 to res-length\n            compute len = s1-length + s2-length\n            if len = 0 goback end-if\n      \n            perform varying i from 1 until i > s1-length\n              move s1-char(i) to xs(i)\n            end-perform\n      \n            perform varying j from 1 until j > s2-length\n              move s2-char(j) to xs(i)\n              add 1 to i\n            end-perform\n      \n            sort chars ascending xs\n      \n            move xs(1) to c\n            add 1 to res-length\n            move c to res-char(1)\n      \n            perform varying i from 2 until i > len\n              if xs(i) <> c\n                add 1 to res-length\n                move xs(i) to c, res-char(res-length)\n              end-if\n            end-perform\n      \n            goback.\n       end program Longest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5659c6d896bc135c4c00021e":[{"id":20727,"user_id":168,"body":"       identification division.\n       program-id. next_smaller.\n       data division.\n       working-storage section.\n       01  i                 usage index.\n       01  len               usage index.\n       01  digits.\n            05 dd occurs 0 to 38 times depending on len indexed by j.\n              10 ds          pic 9.\n       01  t                 pic 9.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38) sign leading.\n      \n       procedure division using n result.\n          move 0 to i result\n          inspect n tallying i for leading '0'\n          compute len = 38 - i\n          move function reverse(n) to digits\n          move 1 to j\n          search dd varying j\n              when j > 1 and ds(j) > ds(j - 1)\n                  move j to i\n                  move 1 to j\n                  search dd varying j\n                      when ds(i) > ds(j)\n                          move function reverse(digits(i + 1:)) \n                            to result(39 - len:)\n                          move ds(j) to result(39 - i:1)\n                          move ds(i) to ds(j)\n                          move digits(1:i - 1) to result(40 - i:)\n                  end-search\n          end-search\n          if result(39 - len:1) = 0\n              move -1 to result\n          end-if\n          goback.\n       end program next_smaller.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20728,"user_id":50,"body":"       identification division.\n       program-id. next_smaller.\n       data division.\n       local-storage section.\n       01  n-disp            pic z(37)9.\n       01  m                 pic 9(37).\n       01  r                 pic 9.\n       01  d                 pic 9.\n       01  s.\n           03  l pic 9(2).\n           03  chrs.\n               05  c pic x occurs 1 to 38 times\n                     depending l indexed i j.\n       01  t.\n           03  len pic 9(2).\n           03  xs.\n               05  e pic x occurs 1 to 38 times\n                     depending len indexed k h.\n\n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38) sign leading.\n      \n       procedure division using n result.\n      \n          if n < 10 move -1 to result goback end-if\n      \n          divide n by 10 giving m remainder r\n          perform until m = 0\n            compute d = function rem(m, 10)\n            if d > r\n                exit perform\n            else\n              divide 10 into m\n              move d to r\n            end-if\n          end-perform\n          if m = 0 move -1 to result goback end-if\n          compute l i j len = function integer(function log10(n)) + 1\n          move n to n-disp\n          move function trim(n-disp) to chrs\n\n          perform until c(i - 1) > c(i)\n            subtract 1 from i\n          end-perform\n          perform until c(j) < c(i - 1)\n            subtract 1 from j\n          end-perform\n      \n          move c(j) to r\n          move c(i - 1) to c(j)\n          move r to c(i - 1)\n      \n          if c(1) = '0' move -1 to result goback end-if\n          \n          perform varying k from 1 until k = i\n            move c(k) to e(k)\n          end-perform\n          perform test after varying h from l by -1 until h = i\n              move c(h) to e(k)\n              add 1 to k\n          end-perform\n          move xs to result\n          compute result = result \/ 10 ** (38 - l)\n      \n          goback.\n       end program next_smaller.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20729,"user_id":53,"body":"       identification division.\n       program-id. next_smaller.\n       data division.\n      \n       local-storage section.\n       01  i                 pic 99.\n       01  j                 pic 99.\n       01  t                 pic 99.\n       01  u                 pic 99.\n       01  x                 pic S99 sign leading value -1.\n       01  y                 pic S99 sign leading value -1.\n       01  ds.\n           05 sz             pic 99.\n           05 tbl-d          occurs 1 to 38 times \n                             depending on sz.\n              10 d           pic 9.\n       01  es.\n           05 lz             pic 99.\n           05 tbl-e          occurs 1 to 38 times \n                             depending on lz.\n              10 e           pic 9.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  r                 pic S9(38) sign leading.\n      \n       procedure division using n r.\n      \n          move 1 to sz\n          if n > 0 then compute sz = function log10 (n) + 1 end-if\n          perform varying i from sz by -1 until i = 0\n            compute d(i) = function rem (n, 10)\n            divide 10 into n\n          end-perform\n      \n          compute t = sz - 1\n          perform varying i from t by -1 until i = 0\n            if x > -1 then exit perform end-if\n            compute u = i + 1\n            perform varying j from u until j > sz\n              if d(j) < d(i) then\n                move i to x\n                exit perform\n              end-if\n            end-perform\n          end-perform\n          \n          if x = -1 then\n            move x to r\n            goback\n          end-if\n      \n          compute t = x + 1\n          perform varying i from t until i > sz\n            if d(i) < d(x) and (y = -1 or d(i) > d(y)) then\n              move i to y\n            end-if\n          end-perform\n            \n          if d(y) = 0 and x = 1 then\n            move -1 to r\n            goback\n          end-if\n      \n          move d(x) to t\n          move d(y) to d(x)\n          move t to d(y)\n          compute lz = sz - x\n          perform varying i from 1 until i > lz\n            move d(i + x) to e(i)\n          end-perform\n          sort tbl-e on descending e\n      \n          compute t = x + 1\n          move 1 to j\n          perform varying i from t until i > sz\n            move e(j) to d(i)\n            add 1 to j\n          end-perform\n      \n          move 0 to r\n          perform varying i from 1 until i > sz\n            multiply 10 by r\n            add d(i) to r\n          end-perform\n          \n          goback.\n       end program next_smaller.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20730,"user_id":168,"body":"       identification division.\n       program-id. next_smaller.\n       data division.\n       working-storage section.\n       01  i                 usage index.\n       01  len               usage index.\n       01  digits.\n            05 dd occurs 0 to 38 times depending on len indexed by j.\n              10 ds          pic 9.\n       01  t                 pic 9.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38).\n      \n       procedure division using n result.\n          move 0 to i result\n          inspect n tallying i for leading '0'\n          compute len = 38 - i\n          move function reverse(n) to digits\n          move 1 to j\n          search dd varying j\n              when j > 1 and ds(j) > ds(j - 1)\n                  move j to i\n                  move 1 to j\n                  search dd varying j\n                      when ds(i) > ds(j)\n                          move function reverse(digits(i + 1:)) \n                            to result(39 - len:)\n                          move ds(j) to result(39 - i:1)\n                          move ds(i) to ds(j)\n                          move digits(1:i - 1) to result(40 - i:)\n                  end-search\n          end-search\n          if result(39 - len:1) = 0\n              move -1 to result\n          end-if\n          goback.\n       end program next_smaller.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20731,"user_id":168,"body":"       identification division.\n       program-id. next_smaller.\n       data division.\n       working-storage section.\n       01  i  usage index.\n       01  m  pic 9(38).\n       01  m2 pic 9(38).\n       01  x.\n          05 x-data occurs 38 times.\n            10 xs pic 9.\n       01  y.\n          05 y-data occurs 38 times.\n            10 ys pic 9.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38).\n      * Slow incorrect solution\n       procedure division using n result.\n          move 0 to i\n          inspect n tallying i for leading '0'\n          move n to x\n          sort x-data ascending xs\n          move 0 to m2\n          move '1' to m2(i + 1:1)\n          compute m = function max(m2, function numval(x(i + 1:38 - i)))\n          sort x-data descending xs\n          perform varying i from 0 until i > 100000 or n <= m\n              subtract 1 from n\n              move n to y\n              sort y-data descending ys\n              if x = y\n                  move n to result\n                  goback\n              end-if\n          end-perform\n          move -1 to result\n          goback.\n       end program next_smaller.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20732,"user_id":50,"body":"       identification division.\n       program-id. next_smaller.\n       data division.\n       local-storage section.\n       01  n-disp            pic z(37)9.\n       01  m                 pic 9(37).\n       01  r                 pic 9.\n       01  d                 pic 9.\n       01  s.\n           03  l pic 9(2).\n           03  chrs.\n               05  c pic x occurs 1 to 38 times\n                     depending l indexed i j.\n       01  t.\n           03  len pic 9(2).\n           03  xs.\n               05  e pic x occurs 1 to 38 times\n                     depending len indexed k h.\n\n       linkage section.\n       01  n                 pic 9(38).\n       01  result            pic S9(38).\n      \n       procedure division using n result.\n      \n          if n < 10 move -1 to result goback end-if\n      \n          divide n by 10 giving m remainder r\n          perform until m = 0\n            compute d = function rem(m, 10)\n            if d > r\n                exit perform\n            else\n              divide 10 into m\n              move d to r\n            end-if\n          end-perform\n          if m = 0 move -1 to result goback end-if\n          compute l i j len = function integer(function log10(n)) + 1\n          move n to n-disp\n          move function trim(n-disp) to chrs\n\n          perform until c(i - 1) > c(i)\n            subtract 1 from i\n          end-perform\n          perform until c(j) < c(i - 1)\n            subtract 1 from j\n          end-perform\n      \n          move c(j) to r\n          move c(i - 1) to c(j)\n          move r to c(i - 1)\n      \n          if c(1) = '0' move -1 to result goback end-if\n          \n          perform varying k from 1 until k = i\n            move c(k) to e(k)\n          end-perform\n          perform test after varying h from l by -1 until h = i\n              move c(h) to e(k)\n              add 1 to k\n          end-perform\n          move xs to result\n          compute result = result \/ 10 ** (38 - l)\n      \n          goback.\n       end program next_smaller.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"565abd876ed46506d600000d":[{"id":20733,"user_id":168,"body":"       identification division.\n       program-id. simpson.\n       data division.\n       working-storage section.\n       01 h     pic 9v9(16).\n       01 s     pic 9(8)v9(16).\n       01 i     usage index.\n      \n       linkage section.\n       01 n                 pic 9(3).\n       01 result            pic 9v9(12).\n       procedure division using n result.\n          compute h = function abs(function pi \/ n)\n          compute s = function abs(6 * function sin((n - 1) * h) ** 3)\n          perform varying i from 1 until 2 * i >= n\n              add function abs(6 * function sin((2 * i - 1) * h) ** 3\n                        + 3 * function sin(2 * i * h) ** 3) to s\n          end-perform\n          compute result = function abs(s * function pi \/ (3 * n))\n          goback.\n       end program simpson.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20734,"user_id":50,"body":"       identification division.\n       program-id. simpson.\n       data division.\n       local-storage section.\n       01 pi pic 9v9(15) value\n          3.141592653589793.\n       01 x  usage comp-2.\n       01 h  usage comp-2.\n       01 i  usage index.\n      \n       linkage section.\n       01 n                 pic 9(3).\n       01 result            pic 9v9(12).\n       procedure division using n result.\n      \n          initialize result\n          compute h = function abs(pi \/ n)\n          compute x = 1.5 * function sin(pi) ** 3\n          perform varying i from 1 until i > function integer(n \/ 2)\n            add function abs(6 * function sin((2 * i - 1) * h) ** 3)\n                to x\n          end-perform\n          perform varying i from 1 until i >= function integer(n \/ 2)\n            add function abs(3 * function sin(2 * i * h) ** 3) to x\n          end-perform\n          compute result = function abs(pi \/ (3 * n) * x)\n          goback.\n       end program simpson.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20735,"user_id":53,"body":"       identification division.\n       program-id. simpson.\n       data division.\n       local-storage section.\n       01 k                 pic 9v9(12).\n       linkage section.\n       01 n                 pic 9(3).\n       01 result            pic 9v9(12).\n       procedure division using n result.\n          compute k = function pi \/ n\n          compute result = k * (1 + 2 * function cos(k) ** 3\n            + 3 * function cos(2 * k)) \/ function sin(3 * k)\n          goback.\n       end program simpson.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"565b112d09c1adfdd500019c":[{"id":20736,"user_id":53,"body":"       identification division.\n       program-id. NthChar.\n       data division.\n       linkage section.\n       01  s.\n           03  len    pic 9(2).\n           03  strng  pic x(20) occurs 0 to 20 times \n                      depending on len\n                      indexed by i.\n       01 result      pic x(20).\n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > len\n            move strng(i)(i:1) to result(i:1) \n          end-perform.\n       end program NthChar.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20737,"user_id":50,"body":"       identification division.\n       program-id. NthChar.\n      \n       data division.\n\n       linkage section.\n       01  stringTable.\n           03  len    pic 9(2).\n           03  strng  pic x(20) occurs 0 to 20 times depending on len\n                                                     indexed by i.\n       01 result      pic x(20).\n      \n       procedure division using stringTable result.\n      \n          initialize result\n      \n          perform varying i from 1 until i > len\n          move strng(i)(i:1) to result(i:1) end-perform.\n          \n       end program NthChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"565b9d6f8139573819000056":[{"id":20738,"user_id":168,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result indexed by i.\n\n       procedure division using str result.\n           move str to result\n           inspect str-data of result\n               converting 'abcdefghijklmnopqrstuvwxyz' \n                       to 'zyxwvutsrqponmlkjihgfedcba'.\n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20739,"user_id":53,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       working-storage section.\n       01  i           pic 9(10).\n       01  o           pic 999.\n       01  d           pic A(1).\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result.\n\n       procedure division using str result.\n           move len of str to len of result\n           perform varying i from 1 by 1 until i > len of str\n              compute o = function ord(chars of str-data of str(i))\n              if o >= 98 and o <= 124 then\n                compute o = 221 - o\n              end-if\n              move function char(o) to d\n              move d to chars of str-data of result(i)\n           end-perform.\n           goback.\n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20740,"user_id":null,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result.\n\n       procedure division using str result.\n           move str to result\n           inspect str-data of result converting \n              \"abcdefghijklmnopqrstuvwxyz\" to\n              \"zyxwvutsrqponmlkjihgfedcba\"      \n           goback.\n      \n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20741,"user_id":null,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result.\n\n       procedure division using str result.\n           move len of str to len of result\n           move str-data of str to str-data of result     \n           inspect str-data of result converting \n              \"abcdefghijklmnopqrstuvwxyz\" to\n              \"zyxwvutsrqponmlkjihgfedcba\"      \n           goback.\n      \n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20742,"user_id":421,"body":"       identification division.\n       program-id. decode.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result.\n\n       procedure division using str result.\n           move str to result\n           inspect str-data of result converting \n           \"abcdefghijklmnopqrstuvwxyz\" to  \n           \"zyxwvutsrqponmlkjihgfedcba\".\n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20743,"user_id":76,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       local-storage section.\n       01 i            pic 9(3).\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result.\n\n       procedure division using str result.\n           move len of str to len of result\n           perform varying i from 1 by 1 until i > len of str\n             if chars of str(i) = ' ' then\n               move ' ' to chars of result(i)\n             else\n               move function char(221 - function ord(chars of str(i)))\n                 to chars of result(i)\n             end-if\n           end-perform\n           goback.\n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20744,"user_id":50,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(3).\n           03 str-data.\n               05 chars pic x occurs 0 to 400 times \n                              depending on len of result.\n\n       procedure division using str result.\n           inspect str-data of str\n                converting 'abcdefghijklmnopqrstuvwxyz' \n                to 'zyxwvutsrqponmlkjihgfedcba'\n           move str to result\n           goback.\n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"565c0fa6e3a7d39dee000125":[{"id":20745,"user_id":168,"body":"       identification division.\n       program-id. dist.\n      \n       data division.\n\n       linkage section.\n       01 v           pic 9(8)v9(14).\n       01 mu          pic 9(8)v9(14).\n       01 result      pic 9(8)v9(16).\n       procedure division using v mu result.\n          compute v = function abs(v * 10 \/ 36)\n          compute result = function abs(v + v ** 2 \/ (2 * mu * 9.81))\n          goback.\n       end program dist.\n\n      \n       identification division.\n       program-id. speed.\n      \n       data division.\n\n       linkage section.\n       01 d           pic 9(8)v9(14).\n       01 mu          pic 9(8)v9(14).\n       01 result      pic 9(8)v9(16).\n       procedure division using d mu result.\n          compute result = function abs(\n              (function sqrt(1 + 2 * d \/ (mu * 9.81)) - 1) \n               * mu * 9.81 * 3.6)\n          goback.\n       end program speed.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20746,"user_id":53,"body":"       identification division.\n       program-id. dist.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(10)v9(16).\n\n       linkage section.\n       01 v           pic 9(8)v9(14).\n       01 mu          pic 9(8)v9(14).\n       01 result      pic 9(8)v9(16).\n       procedure division using v mu result.\n          compute a = v * 0.2777777777777778\n          compute result = ((a \/ (mu * 19.62)) + 1.0) * a\n          goback.\n       end program dist.\n\n      \n       identification division.\n       program-id. speed.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(10)v9(16).\n\n       linkage section.\n       01 d           pic 9(8)v9(14).\n       01 mu          pic 9(8)v9(14).\n       01 result      pic 9(8)v9(16).\n       procedure division using d mu result.\n          compute a = 19.62 * mu\n          compute result = \n            1.8 * (function sqrt((a * a) + (4.0 * a * d)) - a)\n          goback.\n       end program speed.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20747,"user_id":50,"body":"       identification division.\n       program-id. dist.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(10)v9(16).\n\n       linkage section.\n       01 v           pic 9(8)v9(14).\n       01 mu           pic 9(8)v9(14).\n       01 result      pic 9(8)v9(16).\n       procedure division using v mu result.\n          compute a = v * 0.2777777777777778\n          compute result = mu * 19.62\n          compute result = a \/ result\n          add 1 to result\n          compute result = result * a\n\n          goback.\n       end program dist.\n\n      \n       identification division.\n       program-id. speed.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(10)v9(16).\n       01 b           pic 9(10)v9(16).\n\n       linkage section.\n       01 d           pic 9(8)v9(14).\n       01 mu          pic 9(8)v9(14).\n       01 result      pic 9(8)v9(16).\n       procedure division using d mu result.\n          compute a = 19.62 * mu\n          compute b = a * d\n          compute b = 4 * b\n          compute result = a * a\n          compute result = result + b\n          compute result = function sqrt(result)\n          compute result = result - a\n          compute result = 1.8 * result\n      \n          goback.\n       end program speed.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56606694ec01347ce800001b":[{"id":20748,"user_id":168,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n          88 triangle value 1 when set to false 0.\n       procedure division using x y z result.\n          if x < y + z and y < x + z and z < x + y\n              set triangle to true\n          else\n              set triangle to false\n          end-if.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20749,"user_id":421,"body":"       identification division.\n       program-id. is-triangle.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n           IF x + y > z AND y + z > x AND x + z > y THEN\n               SET result TO 1\n           ELSE\n               SET result TO 0\n           END-IF.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20750,"user_id":null,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n      * Set result to 1 for 'true', 0 for 'false'\n          initialize result.\n          if x + y > z and x + z > y and y + z > x then\n              set result up by 1\n          end-if.\n          goback.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20751,"user_id":null,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n          if x + y > z and y + z > x and x + z > y then\n            set result to 1\n          else\n            set result to 0\n          end-if.\n          goback.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20752,"user_id":null,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n          if x > 0 and y > 0 and z > 0 then\n            if x + y > z and y + z > x and x + z > y then\n              move 1 to result\n            else\n              move 0 to result\n            end-if\n          else\n            move 0 to result\n          end-if.\n          goback.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20753,"user_id":76,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n       initialize result\n       if x + y > z and x + z > y and y + z > x then\n         set result to 1.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20754,"user_id":53,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n          move 0 to result,\n          if x + y > z and x + z > y and y + z > x then\n            move 1 to result\n          end-if,\n          goback.\n       end program is-triangle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20755,"user_id":50,"body":"       identification division.\n       program-id. is-triangle.\n       data division.\n       linkage section.\n       01 x           PIC 9(8).\n       01 y           PIC 9(8).\n       01 z           PIC 9(8).\n       01 result      PIC 9.\n       procedure division using x y z result.\n\n          if x + y > z and x + z > y and y + z > x\n              move 1 to result\n          else\n              move 0 to result\n          end-if\n      \n          goback.\n       end program is-triangle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5663f5305102699bad000056":[{"id":20756,"user_id":50,"body":"       identification division.\n       program-id. MxDifLg.\n       data division.\n       working-storage section.\n       01 min1          pic 9(2).\n       01 max1          pic 9(2).\n       01 min2          pic 9(2).\n       01 max2          pic 9(2).\n       01 l             pic 9(2).\n      \n       linkage section.\n       01  arr1.\n           05  l1       pic 9(2).\n           05  s1       pic a(30) occurs 0 to 10 depending l1 indexed i.\n       01  arr2.\n           05  l2       pic 9(2).\n           05  s2       pic a(30) occurs 0 to 10 depending l2 indexed j.\n       01  result       pic s9(2) sign leading.\n      \n       procedure division using arr1 arr2 result.\n      \n          if l1 = 0 or l2 = 0\n             move -1 to result\n             goback\n          end-if\n          move function stored-char-length(s1(1)) to min1 max1\n          move function stored-char-length(s2(1)) to min2 max2\n          perform varying i from 2 until i > l1\n            move function stored-char-length(s1(i)) to l\n            evaluate l\n            when < min1 move l to min1\n            when > max1 move l to max1\n            end-evaluate\n          end-perform\n          perform varying j from 2 until j > l2\n            move function stored-char-length(s2(j)) to l\n            evaluate l\n            when < min2 move l to min2\n            when > max2 move l to max2\n            end-evaluate\n          end-perform\n          move function max(max1 - min2, max2 - min1) to result.\n      \n       end program MxDifLg.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20757,"user_id":null,"body":"       identification division.\n       program-id. MxDifLg.\n       data division.\n       WORKING-STORAGE SECTION.\n       01 i PIC 9(2) value 0.\n       01 j PIC 9(2) value 0.\n       01 filler occurs 10 times.\n          05 size1 pic 9(03) value 0.\n      \n       01 filler occurs 10 times.\n          05 size2 pic 9(03) value 0.\n      \n       linkage section.       \n       01  arr1.\n           05  arr1Length    pic 9(2).\n           05  strng1        pic a(30) occurs 0 to 10 times \n                                       depending on arr1Length.\n       01  arr2.\n           05  arr2Length    pic 9(2).\n           05  strng2        pic a(30) occurs 0 to 10 times \n                                       depending on arr2Length.\n       01  result            pic s9(2) sign leading.\n      \n       procedure division using arr1 arr2 result.\n          initialize result\n      \n          if arr1Length = 0 or arr2Length = 0\n            MOVE -1 TO result\n            goback.\n      \n          PERFORM VARYING i FROM 1 BY 1\n            UNTIL i > arr1Length\n           \n            move 0 to size1(i)\n            INSPECT strng1(i) tallying size1(i) \n                for characters before initial ' '\n          END-PERFORM\n                \n          PERFORM VARYING j FROM 1 BY 1\n              UNTIL j > arr2Length\n      \n            move 0 to size2(j)\n            INSPECT strng2(j) tallying size2(j)\n                for characters before initial ' '\n          END-PERFORM\n      \n          PERFORM varying i from 1 by 1 \n            until i > arr1Length\n            PERFORM varying j from 1 by 1 \n              until j > arr2Length\n      \n              if size1(i) - size2(j) > result\n                COMPUTE result = size1(i) - size2(j)\n              end-if\n              if size2(j) - size1(i) > result\n                COMPUTE result = size2(j) - size1(i)\n              end-if\n      \n            END-PERFORM\n          END-PERFORM\n      \n          goback.\n       end program MxDifLg.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20758,"user_id":168,"body":"       identification division.\n       program-id. MxDifLg.\n       data division.\n      \n       linkage section.\n       01  arr1.\n           05  arr1Length    pic 9(2).\n           05  strng1        pic a(30) occurs 0 to 10 times \n                                 depending on arr1Length indexed i.\n       01  arr2.\n           05  arr2Length    pic 9(2).\n           05  strng2        pic a(30) occurs 0 to 10 times \n                                 depending on arr2Length indexed j.\n       01  result            pic s9(2) sign leading.\n      \n       procedure division using arr1 arr2 result.\n          move -1 to result\n          perform varying i from 1 until i > arr1Length\n                    after j from 1 until j > arr2Length\n              move function max(result, \n                function abs(function stored-char-length(strng1(i)) - \n                             function stored-char-length(strng2(j))))\n                to result\n          end-perform.\n       end program MxDifLg.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20759,"user_id":53,"body":"       identification division.\n       program-id. MxDifLg.\n       data division.\n       local-storage section.\n       01 a             pic 9(2).\n       01 b             pic 9(2).\n       01 c             pic 9(2).\n       01 d             pic 9(2).\n       01 l             pic 9(2).\n       linkage section.\n       01  arr1.\n           05  l1       pic 9(2).\n           05  s1       pic a(30) occurs 0 to 10 depending l1 indexed i.\n       01  arr2.\n           05  l2       pic 9(2).\n           05  s2       pic a(30) occurs 0 to 10 depending l2 indexed j.\n       01  result       pic s9(2) sign leading.\n       procedure division using arr1 arr2 result.\n          initialize result\n          if (l1 = 0) or (l2 = 0) then\n             set result to -1\n             goback\n          end-if\n          move length of function trim(s1(1)) to a b\n          move length of function trim(s2(1)) to c d\n          perform varying i from 2 until i > l1\n            move length of function trim(s1(i)) to l\n            evaluate l\n              when < a move l to a\n              when > b move l to b\n            end-evaluate\n          end-perform\n          perform varying j from 2 until j > l2\n            move length of function trim(s2(j)) to l\n            evaluate l\n              when < c move l to c\n              when > d move l to d\n            end-evaluate\n          end-perform\n          move function max(b - c, d - a) to result\n          goback.\n       end program MxDifLg.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56662e268c0797cece0000bb":[{"id":20760,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-FIBS initial.\n       DATA DIVISION.\n       working-storage section.\n       01 a           pic 9(32) value 1.\n       01 b           pic 9(32) value 1.\n       01 c           pic 9(32).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           perform until n = 0\n              if function mod(a, 2) = 0\n                 add a to result\n              end-if\n              compute c = b\n              add a to b\n              compute a = c\n              subtract 1 from n\n           end-perform.\n       END PROGRAM SUM-FIBS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20761,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-FIBS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(32).\n       01 B           PIC 9(32).\n       01 T           PIC 9(32).\n       01 P           PIC 9(32).\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n        move 1 to b\n        perform varying i from 2 by 1 until i > n\n         move a to t\n         move b to a\n         compute b = t + b\n         if function rem (b, 2) = 0 then\n          add b to p giving p\n         end-if\n        end-perform\n        move p to result\n        goback.\n       END PROGRAM SUM-FIBS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20762,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-FIBS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A          PIC 9(32).\n       01 B          PIC 9(32).\n       01 I          PIC 9(8).\n       01 TMP          PIC 9(32).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           \n          Move 0 to a,\n          Move 1 to b,\n          Move 0 to result,\n          \n          Perform varying i from 0 by 1 until i = n,\n            If function rem(b, 2) = 0 then add b to result end-if\n            Move b to tmp,\n            Add a to b,\n            Move tmp to a,\n          End-perform\n\n            GOBACK.\n\n       END PROGRAM SUM-FIBS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56676e8fabd2d1ff3000000c":[{"id":20763,"user_id":421,"body":"       identification division.\n       program-id. FindNeedle.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.      \n       01  n                 pic z(2)9.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic x(40) occurs 1 to 300 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res.            \n              07  pic x      occurs 30 to 32 times \n                             depending on res-length\n                             indexed by j.\n      \n       procedure division using arr result.  \n          initialize result\n          perform varying i from 1 by 1 until i > arr-length\n              if xs(i) = \"needle\" then \n                  exit perform\n              end-if\n          end-perform                   \n          move 32 to res-length\n          set j to 1\n          move i to n\n          string \"found the needle at position \" function trim(n) \n          into res pointer j       \n          compute res-length = j - 1.\n       end program FindNeedle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20764,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FindNeedle.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  I            PIC 9(03).\n       01  OUT.\n           05 OUT-LEN   PIC 9(02) VALUE 30.\n           05 FILLER    PIC X(29) VALUE 'found the needle at position '.\n           05 OUT-POS   PIC X(03).\n\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LEN   PIC 9(03).\n           05 XS        PIC X(40) OCCURS 300 DEPENDING ARR-LEN.\n       01  RESULT       PIC X(34).\n\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 UNTIL XS(I) = 'needle'  END-PERFORM\n           ADD  FUNCTION LOG10(I)          TO OUT-LEN\n           MOVE I(3 - FUNCTION LOG10(I):)  TO OUT-POS\n           MOVE OUT                        TO RESULT.\n       END PROGRAM FindNeedle.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20765,"user_id":50,"body":"       identification division.\n       program-id. FindNeedle.\n       data division.\n       local-storage section.\n       01  n                 pic z(2)9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic x(40) occurs 1 to 300 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 s.\n              07 pic x       occurs 30 to 32 times \n                             depending on res-length indexed j.\n      \n       procedure division using arr result.\n      \n          set i to 1\n          perform test before until xs(i) = 'needle'\n              add 1 to i\n          end-perform\n      \n          initialize result\n          move 32 to res-length\n          set j to 1\n          move i to n\n          string 'found the needle at position ' function trim(n)\n          into s pointer j\n      \n          compute res-length = j - 1\n          \n          goback.\n       end program FindNeedle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20766,"user_id":null,"body":"       identification division.\n       program-id. FindNeedle.\n       data division.\n       working-storage section.\n       77 needlePos          pic zz9.\n       77 ptr                usage is index.\n\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic x(40) occurs 1 to 300 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res-Str.\n              10 res            pic x occurs 30 to 32 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n          move 32 to res-length\n          set i to 1\n          search xs\n             at end continue\n             when xs(i) = 'needle' move i to needlePos\n          end-search\n          set ptr to 1\n          string 'found the needle at position ' \n                 function trim(NeedlePos)\n            into res-Str\n            with pointer ptr\n          end-string\n          subtract 1 from ptr giving res-Length\n          goback.\n       end program FindNeedle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20767,"user_id":168,"body":"       identification division.\n       program-id. FindNeedle.\n       data division.\n       working-storage section.\n       01  k      pic zz9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic x(40) occurs 1 to 300 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 str-res.\n              10 res         pic x occurs 30 to 32 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n          move 1 to i\n          search xs varying i\n              when xs(i) = 'needle'\n                  move i to k\n                  move 32 to res-length\n                  move 1 to i\n                  string 'found the needle at position '\n                      function trim(k) into str-res with pointer i\n                  subtract 1 from i giving res-length\n          end-search.\n       end program FindNeedle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20768,"user_id":53,"body":"       identification division.\n       program-id. FindNeedle.\n       data division.\n       local-storage section.\n       01  a                 pic z(2)9.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic x(40) occurs 1 to 300 times \n                                       depending on arr-length \n                                       indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 s.\n              07 pic x       occurs 30 to 32 times \n                             depending on res-length\n                             indexed by j.\n       procedure division using arr result.\n          initialize result\n          set res-length to 32\n          set j to 1\n          set i to 1\n          perform test before until xs(i) = 'needle'\n            add 1 to i\n          end-perform\n          move i to a\n          string 'found the needle at position ' function trim(a)\n          into s pointer j\n          subtract 1 from j giving res-length\n          goback.\n       end program FindNeedle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"566be96bb3174e155300001b":[{"id":20769,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-BALL.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       PROCEDURE DIVISION USING V0 RESULT.\n           COMPUTE RESULT ROUNDED = V0 * 1000 \/ 3600 * 10 \/ 9.81.\n       END PROGRAM MAX-BALL.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20770,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-BALL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       PROCEDURE DIVISION USING V0 RESULT.\n           compute result rounded = v0 \/ 3.5316.\n       END PROGRAM MAX-BALL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20771,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-BALL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       PROCEDURE DIVISION USING V0 RESULT.\n      *    CALCULATE TIME ON VF = V0 - GT WHERE VF=0, THEN T = V0\/G\n           COMPUTE RESULT ROUNDED = ((V0 * 5 \/ 18) \/ 9.81) * 10.  \n           GOBACK.\n       END PROGRAM MAX-BALL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20772,"user_id":527,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-BALL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       PROCEDURE DIVISION USING V0 RESULT.\n       COMPUTE RESULT ROUNDED = V0 \/ 3.5316.\n       END PROGRAM MAX-BALL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20773,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MAX-BALL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       PROCEDURE DIVISION USING V0 RESULT.\n          COMPUTE RESULT = ( V0 * 56630 + 100000 ) \/ 200000 .\n           GOBACK.\n       END PROGRAM MAX-BALL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20774,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       01 t       pic 9(8)v9(3).\n       PROCEDURE DIVISION.\n       MAX-BALL SECTION.\n       compute t = 0.5 + v0 \/ 3.5316\n       compute result = t\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20775,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 V0          PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       MAX-BALL SECTION.\n            COMPUTE RESULT ROUNDED = ( V0 * 56630 + 100000 ) \/ 200000\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20776,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 V0          PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       MAX-BALL SECTION.\n        MOVE FUNCTION INTEGER(0.28316 * V0 + 0.5) TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20777,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 V0      PIC 9(8).\n       01 RESULT  PIC 9(8).\n       PROCEDURE DIVISION.\n       MAX-BALL SECTION.\n      \n          COMPUTE RESULT = ( V0 * 56630 + 100000 ) \/ 200000\n              \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"566dc05f855b36a031000048":[{"id":20778,"user_id":421,"body":"       identification division.\n       program-id. AddExtra.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(2) occurs 0 to 99 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(2) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n           move arr to result\n           add 1 to res-length\n           add 999 to res(res-length).\n       end program AddExtra.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20779,"user_id":null,"body":"       identification division.\n       program-id. AddExtra.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(2) occurs 0 to 99 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(2) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n          initialize result\n          compute res-length = arr-length + 1      \n          goback.\n       end program AddExtra.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20780,"user_id":168,"body":"       identification division.\n       program-id. AddExtra.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(2) occurs 0 to 99 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(2) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n          move arr to result\n          add 1 to res-length.\n       end program AddExtra.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20781,"user_id":53,"body":"       identification division.\n       program-id. AddExtra.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(2) occurs 0 to 99 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(2) occurs 0 to 100 times \n                                      depending on res-length.\n       procedure division using arr result.\n          add 1 to arr-length giving res-length\n          goback.\n       end program AddExtra.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20782,"user_id":50,"body":"       identification division.\n       program-id. AddExtra.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(2) occurs 0 to 99 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(2) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n      \n          compute res-length = arr-length + 1\n      \n          goback.\n       end program AddExtra.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"566fc12495810954b1000030":[{"id":20783,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NB-DIG.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(16).\n       01 R           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 D           PIC 9.\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N D RESULT.\n           PERFORM VARYING N FROM N BY -1 UNTIL N = 0 \n               MULTIPLY N BY N GIVING I\n               PERFORM UNTIL I = 0\n                   DIVIDE I BY 10 GIVING I REMAINDER R\n                   IF R = D THEN\n                       ADD 1 TO RESULT\n                   END-IF\n              END-PERFORM              \n           END-PERFORM\n           IF D = 0 THEN\n               ADD 1 TO RESULT\n           END-IF.\n       END PROGRAM NB-DIG.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20784,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NB-DIG.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I           PIC 9(8) COMP.\n       01 SQUARE      PIC Z(9)9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 D           PIC 9.\n       01 RESULT      PIC 9(10).\n\n       PROCEDURE DIVISION USING N D RESULT.\n           PERFORM VARYING I FROM 0 UNTIL I > N\n               COMPUTE SQUARE = I * I\n               INSPECT SQUARE TALLYING RESULT FOR ALL D\n           END-PERFORM.\n       END PROGRAM NB-DIG.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20785,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NB-DIG.\n       DATA DIVISION.\n       working-storage section.\n       01 x           pic 9(16).\n       01 i           pic 99.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 D           PIC 9.\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N D RESULT.\n          compute result = 0\n          if d = 0 then add 1 to result end-if\n          perform varying n from n by -1 until n = 0\n             compute x = n * n\n             compute i = 0\n             inspect x tallying i for leading '0'\n             inspect x(i + 1:) tallying result for all d\n          end-perform.\n       END PROGRAM NB-DIG.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20786,"user_id":53,"body":"       identification division.\n       program-id. NB-DIG.\n       data division.\n       local-storage section.\n       01 i           pic 9(8) value 0.\n       01 k           pic 9(16).\n       linkage section.\n       01 n           pic 9(8).\n       01 d           pic 9.\n       01 m           pic 9(10).\n       procedure division using n d m.\n          move 0 to m\n          perform varying i from 0 until i > n\n            multiply i by i giving k\n            if k = 0 and d = 0 then\n              add 1 to m\n            else\n              perform until k = 0\n                if function mod (k, 10) = d then\n                  add 1 to m\n                end-if\n                divide 10 into k\n              end-perform\n            end-if\n          end-perform\n          goback.\n       end program NB-DIG.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20787,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NB-DIG.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 X          PIC 9(10).\n       01 R          PIC 9.\n       01 K          PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 D           PIC 9.\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N D RESULT.\n      \n          Move 0 to result,\n          Perform varying k from 1 by 1 until k > n,\n              Compute x = k * k,\n              Perform until x = 0,\n                Divide 10 into x giving x remainder r,\n                If r = d then add 1 to result end-if\n              End-perform\n          End-perform\n      \n          if d = 0 then add 1 to result end-if\n      \n          Goback.\n       END PROGRAM NB-DIG.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5672682212c8ecf83e000050":[{"id":20788,"user_id":168,"body":"       identification division.\n       program-id. dbl_linear.\n       data division.\n       working-storage section.\n       01 k2           pic 9(8).\n       01 k3           pic 9(8).\n       01 len          pic 9(8).\n       01 tbl based.\n          05 xs pic 9(8) occurs 1 to 99999 times \n                         depending on len\n                         indexed by i, i2, i3.\n      \n       linkage section.\n      * bounds: 1 <= n <= 60,000\n       01  n           pic 9(8). \n       01  result      pic 9(8).\n      \n       procedure division using n result.\n          compute len = n + 1\n          allocate tbl\n          compute xs(1) i2 i3 = 1\n          perform varying i from 2 by 1 until i > n + 1\n              compute k2 = xs(i2) * 2 + 1\n              compute k3 = xs(i3) * 3 + 1\n              compute xs(i) result = function min(k2, k3)\n              if k2 = result then set i2 up by 1 end-if\n              if k3 = result then set i3 up by 1 end-if\n          end-perform\n          free tbl\n          goback.\n       end program dbl_linear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20789,"user_id":53,"body":"       identification division.\n       program-id. dbl_linear.\n       data division.\n      \n       working-storage section.\n       01 x            pic 9(8).\n       01 y            pic 9(8).\n       01 a            pic 9(8).\n       01 b            pic 9(8).\n       01 vals.\n          05 xs pic 9(8) occurs 60001 times indexed by i.\n      \n       linkage section.\n       01 n            pic 9(8). \n       01 result       pic 9(8).\n      \n       procedure division using n result.\n          if xs(1) = 0 then\n            move 1 to x\n            move 1 to y\n            move 1 to xs(1)\n            perform varying i from 2 by 1 until i > 60001\n              compute a = 2 * xs(x) + 1\n              compute b = 3 * xs(y) + 1\n              compute xs(i) = function min (a, b)\n              if xs(i) = a then add 1 to x end-if\n              if xs(i) = b then add 1 to y end-if\n            end-perform\n          end-if\n          move xs(n + 1) to result\n          goback.\n       end program dbl_linear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20790,"user_id":50,"body":"       identification division.\n       program-id. dbl_linear.\n       data division.\n       local-storage section.\n       01 a             pic 9(8).\n       01 b             pic 9(8).\n       01 i             pic 9(8).\n       01 j             pic 9(8).\n       01 k             pic 9(8) value 1.\n       01 m             pic 9(8).\n       01 arr.\n          05 v pic 9(8) occurs 60000 times.\n       linkage section.\n      * bounds: 1 <= n <= 60,000\n       01  n           pic 9(8). \n       01  result      pic 9(8).\n      \n       procedure division using n result.\n          Move 1 to v(0),\n          Perform varying m from 0 by 1 until m = n,\n              Compute a = v(i) * 2 + 1,\n              Compute b = v(j) * 3 + 1,\n              If a <= b\n                  Move a to v(k),\n                  Add 1 to i,\n                  If a = b then add 1 to j end-if\n              Else\n                  Move b to v(k),\n                  Add 1 to j,\n              End-if\n              Add 1 to k,\n          End-perform\n              \n          Move v(n) to result,\n      \n          goback.\n       end program dbl_linear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20791,"user_id":null,"body":"       identification division.\n       program-id. dbl_linear.\n       data division.\n       local-storage section.\n      * pointer 1 and 2\n       01 pt1     pic 9(8).\n       01 pt2     pic 9(8).\n      * pointer value stores 1 and 2\n       01 spt1    pic 9(8).\n       01 spt2    pic 9(8).\n      * array to store\n       01 useless.\n      * just need it to occur one more time than max bound\n          05 arr occurs 60001 times indexed by i pic 9(8).\n       linkage section.\n       01 n      pic 9(8). \n       01 r      pic 9(8).\n       procedure division using n r.\n          if arr(1) = 0 then\n      * first item is 1\n            compute arr(1) = 1\n      * tables are 1-indexed so gotta make'em so\n            add 1 to pt1\n            add 1 to pt2\n      * don't really need to increase i as it does naturally\n            perform varying i from 2 by 1 until i > 60001\n                compute spt1 = 2 * arr(pt1) + 1\n                compute spt2 = 3 * arr(pt2) + 1\n                compute arr(i) = function min(spt1 spt2)\n              if arr(i) = spt1 then add 1 to pt1 end-if\n              if arr(i) = spt2 then add 1 to pt2 end-if\n          end-if\n                compute r = arr(n + 1)\n          goback.\n       end program dbl_linear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5672a98bdbdd995fad00000f":[{"id":20792,"user_id":null,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n            MOVE \"Draw!\" TO RESULT\n            EVALUATE P1\n                WHEN \"rock\"\n                    IF P2 = \"scissors\" THEN\n                        MOVE \"Player 1 won!\" TO RESULT\n                        GOBACK\n                    END-IF\n                    IF P2 = \"paper\" THEN\n                        MOVE \"Player 2 won!\" TO RESULT\n                    END-IF\n                WHEN \"paper\"\n                    IF P2 = \"scissors\" THEN\n                        MOVE \"Player 2 won!\" TO RESULT\n                        GOBACK\n                    END-IF\n                    IF P2 = \"rock\" THEN\n                        MOVE \"Player 1 won!\" TO RESULT\n                    END-IF\n                WHEN \"scissors\"\n                    IF P2 = \"paper\" THEN\n                        MOVE \"Player 1 won!\" TO RESULT\n                        GOBACK\n                    END-IF\n                    IF P2 = \"rock\" THEN\n                        MOVE \"Player 2 won!\" TO RESULT\n                    END-IF \n            END-EVALUATE.\n            GOBACK.\n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20793,"user_id":null,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n           if p1 = p2 then\n              move \"Draw!\" to result\n           else if (p1 = \"scissors\" AND p2 = \"paper\") or\n                   (p1 = \"rock\" AND p2 = \"scissors\") or\n                   (p1 = \"paper\" AND p2 = \"rock\") then\n              move \"Player 1 won!\" to result\n           else\n              move \"Player 2 won!\" to result\n           end-if.\n           goback.\n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20794,"user_id":null,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       working-storage section.\n       77  player-won  pic 9.\n      \n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n           if p1 = p2  then\n              move 'Draw!' to result\n           else\n              evaluate true\n                 when p1='rock'    and p2='scissors' set player-won to 1\n                 when p1='scissors'and p2='paper'    set player-won to 1\n                 when p1='paper'   and p2='rock'     set player-won to 1\n                 when other                          set player-won to 2\n              end-evaluate\n              string 'Player ',  player-won, ' won!' into result\n              end-string\n           end-if\n           goback.\n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20795,"user_id":null,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n       EVALUATE TRUE ALSO TRUE\n          WHEN P1 = 'scissors' ALSO P2 = 'paper'\n          WHEN P1 = 'paper' ALSO P2 = 'rock'\n          WHEN P1 = 'rock' ALSO P2 = 'scissors'\n            MOVE 'Player 1 won!' TO RESULT\n          WHEN P1 = P2 ALSO TRUE\n            MOVE 'Draw!' TO RESULT\n          WHEN OTHER\n            MOVE 'Player 2 won!' TO RESULT\n       END-EVALUATE.\n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20796,"user_id":null,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n          IF p1 = p2 THEN\n             MOVE \"Draw!\" TO result\n          END-IF\n      \n          IF p1 = \"scissors\" AND p2 = \"paper\" THEN\n             MOVE \"Player 1 won!\" TO result\n          ELSE\n             IF p1 = \"paper\" AND p2 = \"rock\" THEN\n                MOVE \"Player 1 won!\" TO result\n             ELSE\n                IF p1 = \"rock\" AND p2 = \"scissors\" THEN\n                   MOVE \"Player 1 won!\" TO result\n                END-IF\n             END-IF\n          END-IF\n\n          IF p2 = \"scissors\" AND p1 = \"paper\" THEN\n             MOVE \"Player 2 won!\" TO result\n          ELSE\n             IF p2 = \"paper\" AND p1 = \"rock\" THEN\n                MOVE \"Player 2 won!\" TO result\n             ELSE\n                IF p2 = \"rock\" AND p1 = \"scissors\" THEN\n                   MOVE \"Player 2 won!\" TO result\n                END-IF\n             END-IF\n          END-IF\n\n      \n      \n      \n           goback.\n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20797,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RPS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  P1          PIC A(8).\n       01  P2          PIC A(8).\n       01  RESULT      PIC X(13).\n       PROCEDURE DIVISION USING P1 P2 RESULT.\n           IF  FUNCTION CONCAT(P1(1:1), P2(1:1)) = 'pr' OR 'rs' OR 'sp'\n               MOVE 'Player 1 won!'      TO RESULT\n           ELSE\n               IF  P1 = P2\n                   MOVE 'Draw!'          TO RESULT\n               ELSE\n                   MOVE 'Player 2 won!'  TO RESULT\n               END-IF\n           END-IF.\n       END PROGRAM RPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20798,"user_id":50,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n    \n           evaluate p1 also p2\n           when 'rock'  also 'scissors'\n           when 'paper' also 'rock'\n           when 'scissors'  also  'paper'\n                move 'Player 1 won!' to result\n           when other\n                if p1 = p2\n                  move 'Draw!' to result\n                else\n                  move 'Player 2 won!' to result\n                end-if\n           end-evaluate\n    \n           goback.\n       end program RPS.\n           ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20799,"user_id":53,"body":"       identification division.\n       program-id. RPS. \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  r           pic X(13).\n       procedure division using p1 p2 r.\n          evaluate true\n            when p1 = 'scissors' and p2 = 'paper' or \n                 p1 = 'paper' and p2 = 'rock' or \n                 p1 = 'rock' and p2 = 'scissors'\n              move \"Player 1 won!\" to r  \n            when p1 = p2\n              move \"Draw!\" to r\n            when other\n              move \"Player 2 won!\" to r\n          end-evaluate\n          goback.\n       end program RPS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20800,"user_id":168,"body":"       identification division.\n       program-id. RPS.   \n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n           evaluate p1 also p2\n              when 'rock' also 'scissors'\n              when 'scissors' also 'paper'\n              when 'paper' also 'rock'\n                  move 'Player 1 won!' to result\n              when p2 also p1\n                  move 'Draw!' to result\n              when other\n                  move 'Player 2 won!' to result\n           end-evaluate.\n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20801,"user_id":421,"body":"       identification division.\n       program-id. RPS. \n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.    \n       01  p1          pic A(8).\n       01  p2          pic A(8). \n       01  result      pic X(13).\n       procedure division using p1 p2 result.\n           if p1 = 'scissors' and p2 = 'paper' or \n              p1 = 'paper' and p2 = 'rock' or \n              p1 = 'rock' and p2 = 'scissors'\n              move \"Player 1 won!\" to result          \n           else \n               if p1 = p2\n                   move \"Draw!\" to result\n               else\n                   move \"Player 2 won!\" to result\n               end-if\n           end-if.   \n       end program RPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56786a687e9a88d1cf00005d":[{"id":20802,"user_id":50,"body":"       identification division.\n       program-id. ValidateWord.\n\n       data division.\n       local-storage section.\n       01  counter.\n           03  c          pic 9(2) occurs 127 times\n                                   indexed k.\n       01  x              pic 9(2).\n      \n       linkage section.\n       01  s.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic x occurs 1 to 99 times \n                          depending s-length indexed i.\n       01  result         pic 9.\n\n       procedure division using s result.\n      \n          perform varying i from 1 until i > s-length\n            add 1 to c(function ord(function lower-case(s-char(i))))\n          end-perform\n          \n          move 0 to i, result\n          perform varying k from 1 until k = 128\n              move c(k) to x\n              if x <> 0\n                evaluate i\n                when  0         move x to i\n                when  <> x      goback\n                end-evaluate\n              end-if\n          end-perform\n          move 1 to result\n                \n          goback.\n       end program ValidateWord.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20803,"user_id":53,"body":"       identification division.\n       program-id. ValidateWord.\n\n       data division.\n       local-storage section.\n       01  dictionary.\n           03  xs         pic 9(2) occurs 127 times\n                                   indexed by j.\n       01  n              pic 9(2).\n       01  k              pic 9(2) value 0.\n       linkage section.\n       01  s.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic x occurs 1 to 99 times \n                          depending s-length \n                          indexed by i.\n       01  result         pic 9.\n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > s-length\n            add 1 to xs(function ord(function lower-case(s-char(i))))\n          end-perform\n          perform varying j from 1 until j > 127\n            move xs(j) to n\n            if n <> 0\n              evaluate true\n                when k = 0       \n                  move n to k\n                when k <> n      \n                  goback\n              end-evaluate\n            end-if\n          end-perform\n          set result to 1\n          goback.\n       end program ValidateWord.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5680781b6b7c2be860000036":[{"id":20804,"user_id":421,"body":"       identification division.\n       program-id. VowelIndices.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  wrd.\n           05 w-length     pic 9(3).\n           05 chr          pic x occurs 2 to 100 times \n                           depending on w-length\n                           indexed by i.\n       01  result.\n           05  res-length pic 9(3).\n           05  res        pic 9(3) occurs 0 to 100 times\n                                   depending on res-length.\n      \n       procedure division using wrd result.\n           perform varying i from 1 by 1 until i > w-length\n               evaluate chr(i)\n                 when \"a\"\n                 when \"e\"\n                 when \"i\"\n                 when \"o\"\n                 when \"u\"\n                 when \"y\"\n                 when \"A\"\n                 when \"E\"\n                 when \"I\"\n                 when \"O\"\n                 when \"U\"\n                 when \"Y\" add 1 to res-length\n                          move i to res(res-length)\n              end-evaluate\n           end-perform.\n       end program VowelIndices.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20805,"user_id":50,"body":"       identification division.\n       program-id. VowelIndices.\n      \n       environment division.\n       configuration section.\n       special-names.\n            class vowel is 'a', 'e', 'i', 'u', 'o', 'y'.\n      \n       data division.\n      \n       linkage section.\n       01  wrd.\n           05 s-length     pic 9(3).\n           05 chr          pic x occurs 2 to 100 times \n                           depending on s-length indexed i.\n       01  result.\n           05  res-length pic 9(3).\n           05  res        pic 9(3) occurs 0 to 100 times\n                                   depending on res-length.\n      \n       procedure division using wrd result.\n      \n          initialize result\n      \n          perform varying i from 1 until i > s-length\n           if function lower-case(chr(i)) is vowel\n                  add  1  to res-length \n                  move i to res(res-length)\n            .\n       end program VowelIndices.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20806,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. VowelIndices.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n       CLASS VOWELS IS 'A','E','I','O','U','Y','a','e','i','o','u','y'.      \n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  WRD.\n           05 W-LEN     PIC 9(3).\n           05 CHR       PIC X(1) OCCURS 100 DEPENDING W-LEN INDEXED I.\n       01  RESULT.\n           05 RES-LEN   PIC 9(3).\n           05 RES       PIC 9(3) OCCURS 100 DEPENDING RES-LEN.\n\n       PROCEDURE DIVISION USING WRD RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > W-LEN\n               IF  CHR(I)  IS VOWELS\n                   ADD  1  TO RES-LEN\n                   MOVE I  TO RES(RES-LEN)\n               END-IF\n           END-PERFORM.\n       END PROGRAM VowelIndices.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20807,"user_id":null,"body":"       identification division.\n       program-id. VowelIndices.\n       data division.\n       WORKING-STORAGE SECTION.\n       01  WS-IDX         PIC 9(03) VALUE ZERO.\n       01  WS-CHAR        PIC X(01).\n           88 VOWEL       VALUES 'A' 'E' 'I' 'O' 'U' 'Y'\n                                 'a' 'e' 'i' 'o' 'u' 'y'.\n       \n       linkage section.\n       01  wrd.\n           05 w-length     pic 9(3).\n           05 chr          pic x occurs 2 to 100 times \n                           depending on w-length.\n       01  result.\n           05  res-length pic 9(3).\n           05  res        pic 9(3) occurs 0 to 100 times\n                                   depending on res-length.\n      \n       procedure division using wrd result.\n      \n           PERFORM VARYING WS-IDX FROM 1 BY 1 UNTIL WS-IDX > w-length\n               MOVE chr(WS-IDX) TO WS-CHAR\n               IF VOWEL\n                   ADD 1 TO res-length\n                   MOVE WS-IDX TO res(res-length)\n               END-IF\n           END-PERFORM\n          goback.\n       end program VowelIndices.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20808,"user_id":168,"body":"       identification division.\n       program-id. VowelIndices.\n       data division.\n      \n       linkage section.\n       01  wrd.\n           05 w-length     pic 9(3).\n           05 chr          pic x occurs 2 to 100 times \n                           depending on w-length indexed i.\n       01  result.\n           05  res-length pic 9(3).\n           05  res        pic 9(3) occurs 0 to 100 times\n                                   depending on res-length.\n      \n       procedure division using wrd result.\n          move 0 to res-length    \n          perform varying i from 1 until i > w-length\n              if function lower-case(chr(i)) = 'a' or = 'e'\n                       or = 'i' or = 'o' or = 'u' or = 'y'\n                  add 1 to res-length\n                  move i to res(res-length)\n              end-if\n          end-perform\n          goback.\n       end program VowelIndices.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20809,"user_id":53,"body":"       identification division.\n       program-id. VowelIndices.\n       data division.\n       local-storage section.\n       01  s               pic x.\n       linkage section.\n       01  wrd.\n           05 s-length     pic 9(3).\n           05 chr          pic x occurs 2 to 100 times \n                           depending on s-length \n                           indexed by i.\n       01  result.\n           05  res-length  pic 9(3).\n           05  res         pic 9(3) occurs 0 to 100 times\n                           depending on res-length.\n       procedure division using wrd result.\n          initialize result\n          perform varying i from 1 until i > s-length\n            move function lower-case(chr(i)) to s\n            if s = 'a' or s = 'e' or s = 'y' or s = 'u' \n                       or s = 'i' or s = 'o'\n              add 1 to res-length \n              move i to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program VowelIndices.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"568d0dd208ee69389d000016":[{"id":20810,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n           \n           EVALUATE TRUE\n              WHEN D > 6\n                 COMPUTE RESULT = D * 40 - 50\n              WHEN D > 2\n                 COMPUTE RESULT = D * 40 - 20\n              WHEN OTHER\n                 COMPUTE RESULT = D * 40                 \n           END-EVALUATE\n           DISPLAY 'D      = [' D ']'\n           DISPLAY 'RESULT = [' RESULT ']'\n           GOBACK.\n       END PROGRAM RENTAL-CAR-COST.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20811,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n           IF D >= 3 THEN   \n               IF D >= 7 THEN\n                   COMPUTE RESULT = D * 40 - 50\n               ELSE\n                   COMPUTE RESULT = D * 40 - 20 \n               END-IF\n           ELSE\n               COMPUTE RESULT = D * 40\n           END-IF.\n       END PROGRAM RENTAL-CAR-COST.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20812,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n       MULTIPLY D BY 40 GIVING RESULT.\n       IF D > 2\n          SUBTRACT 20 FROM RESULT\n       END-IF.\n       IF D > 6\n          SUBTRACT 30 FROM RESULT\n       END-IF.\n       END PROGRAM RENTAL-CAR-COST.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20813,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n      * You can do it!!!\n       PERFORM D TIMES\n           ADD 40 TO RESULT\n       END-PERFORM.\n       IF D >= 3 THEN\n           IF D >= 7 THEN\n               SUBTRACT 50 FROM RESULT\n           ELSE\n               SUBTRACT 20 FROM RESULT\n           END-IF     \n       END-IF.    \n           GOBACK.\n       END PROGRAM RENTAL-CAR-COST.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20814,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n      \n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n      \n       PROCEDURE DIVISION USING D RESULT.\n           compute result = d * 40\n           evaluate d\n              when < 3   continue\n              when < 7   subtract 20 from result\n              when other subtract 50 from result\n           goback.\n       END PROGRAM RENTAL-CAR-COST.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20815,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n           MULTIPLY D BY 40 GIVING RESULT.\n           EVALUATE TRUE\n               WHEN D >= 7\n                   SUBTRACT 50 FROM RESULT\n               WHEN D >= 3\n                   SUBTRACT 20 FROM RESULT\n           .\n       END PROGRAM RENTAL-CAR-COST.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20816,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n      * You can do it!!!\n           MULTIPLY D BY 40 GIVING RESULT.\n           IF D IS GREATER THAN OR EQUAL TO 7 THEN\n              SUBTRACT 50 FROM RESULT\n           ELSE IF D IS GREATER THAN OR EQUAL TO 3 THEN\n              SUBTRACT 20 FROM RESULT\n           END-IF.\n           GOBACK.\n       END PROGRAM RENTAL-CAR-COST.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20817,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n           EVALUATE D\n               WHEN > 6    COMPUTE RESULT = D * 40 - 50\n               WHEN > 2    COMPUTE RESULT = D * 40 - 20\n               WHEN OTHER  COMPUTE RESULT = D * 40\n           END-EVALUATE.\n       END PROGRAM RENTAL-CAR-COST.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20818,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n       IF D >= 7 THEN\n        COMPUTE RESULT = (D * 40) - 50\n       ELSE IF D >= 3 AND D<7 THEN \n        COMPUTE RESULT = (D * 40) - 20\n       ELSE \n        COMPUTE RESULT = D * 40.\n       END PROGRAM RENTAL-CAR-COST.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20819,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RENTAL-CAR-COST.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING D RESULT.\n           evaluate true\n              when d < 3 compute result = d * 40\n              when d < 7 compute result = d * 40 - 20\n              when true  compute result = d * 40 - 50\n           end-evaluate.\n       END PROGRAM RENTAL-CAR-COST.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"568dc69683322417eb00002c":[{"id":20820,"user_id":53,"body":"       identification division.\n       program-id. TripleX.\n       data division.\n       linkage section.\n       01  str.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic x occurs 0 to 99 times \n                          depending s-length indexed i.\n       01  result         pic 9.\n       procedure division using str result.\n          move 0 to result\n          perform varying i from 1 until i > s-length - 2\n            if s-char(i) = 'x' then\n              if s-chars(i:3) = 'xxx' then\n                move 1 to result\n              end-if\n              exit paragraph\n            end-if\n          end-perform\n          goback.\n       end program TripleX.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20821,"user_id":50,"body":"       identification division.\n       program-id. TripleX.\n\n       data division.\n      \n       linkage section.\n       01  str.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic x occurs 0 to 99 times \n                          depending s-length indexed i.\n       01  result         pic 9.\n\n       procedure division using str result.\n          \n          move 0 to result\n          perform varying i from 1 until i > s-length - 2\n              if s-char(i) = 'x'\n                if s-char(i + 1) = 'x' and s-char(i + 2) = 'x'\n                  move 1 to result\n                end-if\n                goback\n              end-if\n          end-perform\n      \n          goback.\n       end program TripleX.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"568fca718404ad457c000033":[{"id":20822,"user_id":50,"body":"       identification division.\n       program-id. find-missing.\n       data division.\n       local-storage section.\n       01  min              pic s9(16).\n       01  max              pic s9(16).\n       01  s                pic s9(16).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 xs             pic s9(16) occurs 2 to 100000 times \n                             depending on arr-length indexed i.\n       01  result            pic s9(16) sign leading.\n      \n       procedure division using arr result.\n      \n           move xs(1) to min max,s\n           perform varying i from 2 until i > arr-length\n              add xs(i) to s\n              move function max(max, xs(i)) to max\n              move function min(min, xs(i)) to min\n           end-perform\n           compute result = (min + max) * (arr-length + 1) \/ 2 - s\n      \n           goback.\n       end program find-missing.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20823,"user_id":168,"body":"       identification division.\n       program-id. find-missing.\n       data division.\n       local-storage section.\n       01  s                 pic s9(16).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 xs-data occurs 2 to 100000 times \n                               depending on arr-length indexed by i.\n              10 xs          pic s9(16).\n       01  result            pic s9(16) sign leading.\n      \n       procedure division using arr result.\n           sort xs-data on ascending key xs\n           perform varying i from 1 until i > arr-length\n              add xs(i) to s\n           end-perform\n           compute result = (xs(1) + xs(arr-length)) \n                * (arr-length + 1) \/ 2 - s\n           goback.\n       end program find-missing.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20824,"user_id":76,"body":"       identification division.\n       program-id. find-missing.\n       data division.\n       local-storage section.\n       01  i                 pic 9(6).\n       01  seq_min           pic s9(16).\n       01  seq_max           pic s9(16).\n       01  total_sum         pic s9(16).\n       01  expected_sum      pic s9(16).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 xs             pic s9(16) occurs 2 to 100000 times \n                                      depending on arr-length.\n       01  result            pic s9(16) sign leading.\n      \n       procedure division using arr result.\n         move low-value to seq_max\n         move high-value to seq_min\n         perform varying i from 1 by 1 until i > arr-length\n           add xs(i) to total_sum\n           if xs(i) > seq_max then move xs(i) to seq_max end-if\n           if xs(i) < seq_min then move xs(i) to seq_min end-if\n         end-perform\n         compute result = (seq_min + seq_max) \n                        * (arr-length + 1) \/ 2 - total_sum\n         goback.\n       end program find-missing.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20825,"user_id":53,"body":"       identification division.\n       program-id. find-missing.\n       data division.\n       local-storage section.\n       01  a                 pic s9(16).\n       01  b                 pic s9(16).\n       01  s                 pic s9(16).\n       linkage section.\n       01  arr.\n           05 n              pic 9(6).\n           05 xs             pic s9(16) occurs 2 to 100000 times \n                             depending on n indexed by i.\n       01  result            pic s9(16) sign leading.\n       procedure division using arr result.\n           initialize result\n           move xs(1) to a b s\n           perform varying i from 2 until i > n\n              add xs(i) to s\n              move function min(a, xs(i)) to a\n              move function max(b, xs(i)) to b\n           end-perform\n           compute result = (a + b) * (n + 1) \/ 2 - s\n           goback.\n       end program find-missing.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"569218bc919ccba77000000b":[{"id":20826,"user_id":50,"body":"       identification division.\n       program-id. DateNbDays.\n      \n       data division.\n       local-storage section.\n       01  v      usage comp-2.\n       01  q      usage comp-2.\n       01  d      pic 9(8).\n       01  s.\n           03  y  pic 9(4).\n           03  mt pic 9(2).\n           03  dy pic 9(2).\n      \n       linkage section.\n       01  a0     pic 9(6).\n       01  a      pic 9(6).\n       01  p      pic 9(2). \n       01  result pic x(10).\n      \n       procedure division using a0 a p result.\n      \n          compute q = 1 + function abs(p \/ 36000)\n          move a0 to v\n          perform varying d from 0 until v >= a\n              multiply q by v\n          end-perform\n          move function date-of-integer(151576 + d) to s\n          string y '-' mt '-' dy into result\n      \n          goback.\n       end program DateNbDays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20827,"user_id":50,"body":"       identification division.\n       program-id. DateNbDays.\n      \n       data division.\n       local-storage section.\n       01  v      usage comp-2.\n       01  q      usage comp-2.\n       01  d      pic 9(8).\n       01  s.\n           03  y  pic 9(4).\n           03  mt pic 9(2).\n           03  dy pic 9(2).\n      \n       linkage section.\n       01  a0     pic 9(6).\n       01  a      pic 9(6).\n       01  p      pic 9(2). \n       01  result pic x(10).\n      \n       procedure division using a0 a p result.\n      \n          compute q = 1 + function abs(p \/ 36000)\n          move a0 to v\n          perform varying d from 0 until v >= a\n              multiply q by v\n          end-perform\n          move function date-of-integer(151576 + d) to s\n          string y '-' mt '-' dy into result\n      \n          goback.\n       end program DateNbDays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5697fb83f41965761f000052":[{"id":20828,"user_id":168,"body":"       identification division.\n       program-id. FilterLongWords.\n       data division.\n       working-storage section.\n       01  i      usage index.\n       01  word   pic a(20).\n       01  len    usage index.\n      \n       linkage section.\n       01  strng            pic a(600).\n       01  n                pic 9(2).\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic x(20) occurs 0 to 50 times \n                                     depending on resLength.\n      \n       procedure division using strng n result.\n          move 1 to i\n          move 0 to resLength\n          perform until i > 600\n              move 0 to len\n              unstring strng delimited by all space\n                  into word count in len with pointer i\n              if len > n\n                  add 1 to resLength\n                  move word to res(resLength)\n              end-if\n          end-perform.\n       end program FilterLongWords.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20829,"user_id":53,"body":"       identification division.\n       program-id. FilterLongWords.\n       data division.\n       local-storage section.\n       01  i                usage index value 1.\n       01  x                pic a(20).\n       linkage section.\n       01  s                pic a(600).\n       01  n                pic 9(2).\n       01  result.\n           05 res-len       pic 9(2).\n           05 res           pic x(20) occurs 0 to 50 times \n                                      depending on res-len.\n       procedure division using s n result.\n          initialize result\n          perform until i > length of function trim(s)\n            unstring s delimited by space into x with pointer i\n            if length function trim(x) > n\n              add 1 to res-len\n              move x to res(res-len)\n            end-if\n          end-perform\n          goback.\n       end program FilterLongWords.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20830,"user_id":50,"body":"       identification division.\n       program-id. FilterLongWords.\n       data division.\n       local-storage section.\n       01  i                usage index.\n       01  token            pic a(20).\n      \n       linkage section.\n       01  strng            pic a(600).\n       01  n                pic 9(2).\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic x(20) occurs 0 to 50 times \n                                     depending on resLength.\n      \n       procedure division using strng n result.\n      \n          initialize result\n      \n          set i to 1\n          perform until i > length of function trim(strng trailing)\n            unstring strng delimited by space into token with pointer i\n            if length function trim(token) > n\n                add 1 to resLength\n                move token to res(resLength)\n            end-if\n          end-perform\n      \n          goback.\n       end program FilterLongWords.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"569d488d61b812a0f7000015":[{"id":20831,"user_id":50,"body":"       identification division.\n       program-id. data_reverse.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  h usage index.\n      \n       linkage section.\n       01  arr.\n           05 l              pic 9(3).\n           05 xs             pic 9 occurs 0 to 400 times \n                                      depending on l.\n       01  result.\n           05 r              pic 9(3).\n           05 res            pic 9 occurs 0 to 400 times \n                             depending on r.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move function integer(l \/ 8) to i\n          perform until i = 0\n            subtract 1 from i\n            perform varying h from 1 until h = 9\n              add 1 to r\n              move xs(8 * i + h) to res(r)\n            end-perform\n          end-perform\n      \n          goback.\n       end program data_reverse.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-03 09:13:28"},{"id":20832,"user_id":null,"body":"       identification division.\n       program-id. data_reverse.\n       data division.\n       working-storage section.\n       01 i                  pic 9(3).\n       01 tmp                pic x(500).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9 occurs 0 to 400 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9 occurs 0 to 400 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n      \n          initialize result tmp \n          perform varying i from 4 by 8 until i > arr-length\n             move arr(i:8)           to tmp(400 - i - 1:8) \n          end-perform\n          move function trim(tmp)         to result(4:)\n          move length function trim(tmp)  to res-length\n          goback.\n       end program data_reverse.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-03 09:13:28"},{"id":20833,"user_id":53,"body":"       identification division.\n       program-id. data_reverse.\n       data division.\n       local-storage section.\n       linkage section.\n       01  arr.\n           05 len            pic 9(3).\n           05 xs             pic 9 occurs 0 to 400 times \n                                   depending on len\n                                   indexed by i j.\n       01  result.\n           05 res-len        pic 9(3).\n           05 res            pic 9 occurs 0 to 400 times \n                                   depending on res-len.\n       procedure division using arr result.\n          initialize result\n          compute i = len \/ 8\n          perform until i = 0\n            subtract 1 from i\n            perform varying j from 1 until j > 8\n              add 1 to res-len\n              move xs(8 * i + j) to res(res-len)\n            end-perform\n          end-perform\n          goback.\n       end program data_reverse.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-03 09:13:28"}],"56a1c074f87bc2201200002e":[{"id":20834,"user_id":50,"body":"       identification division.\n       program-id. Smaller.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 l     pic 9(2).\n           05 xs            pic s9(4) occurs 50 times \n                                      depending on l\n                                      indexed by i j.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic 9(2) occurs 50 times \n                                     depending on resLength.\n      \n       procedure division using arr result.\n      \n          initialize result\n      \n          set resLength to l\n      \n          perform varying i from 1 until i = l\n          after   j from function abs(i + 1) until j > l\n            if xs(j) < xs(i) add 1 to res(i) end-if\n          end-perform\n      \n          goback.\n       end program Smaller.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20835,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Smaller.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LEN   PIC  9(2).\n           05 XS        PIC S9(4) OCCURS 50 DEPENDING ARR-LEN INDEXED I.\n       01  RESULT.\n           05 RES-LEN   PIC  9(2).\n           05 RES       PIC  9(2) OCCURS 50 DEPENDING RES-LEN INDEXED J.\n\n       PROCEDURE DIVISION USING ARR RESULT.\n          INITIALIZE RESULT\n          PERFORM VARYING I FROM 1 UNTIL I > ARR-LEN\n                  AFTER   J FROM I UNTIL J > ARR-LEN\n              IF  XS(I) > XS(J)\n                  ADD 1  TO RES(I)\n              END-IF\n          END-PERFORM\n          MOVE ARR-LEN  TO RES-LEN.\n       END PROGRAM Smaller.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20836,"user_id":168,"body":"       identification division.\n       program-id. Smaller.\n       data division.\n       working-storage section.\n       01  k pic 9(2).\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(4) occurs 50 times \n                                    depending on arrLength indexed i j.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           pic 9(2) occurs 50 times \n                                     depending on resLength.\n      \n       procedure division using arr result.\n          move arrLength to resLength\n          perform varying i from 1 until i > arrLength\n              move 0 to k\n              perform varying j from i until j > arrLength\n                  if xs(j) < xs(i) then add 1 to k end-if\n              end-perform\n              move k to res(i)\n          end-perform.\n       end program Smaller.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20837,"user_id":53,"body":"       identification division.\n       program-id. Smaller.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(2).\n           05 xs            pic s9(4) occurs 50 times \n                                      depending on arr-len \n                                      indexed by i j.\n       01  result.\n           05 res-len       pic 9(2).\n           05 res           pic 9(2) occurs 50 times \n                                     depending on res-len.\n       procedure division using arr result.\n          initialize result\n          set res-len to arr-len\n          perform varying i from 1 until i = arr-len \n                    after j from function abs(i + 1) until j > arr-len \n            if xs(j) < xs(i) add 1 to res(i) end-if\n            .\n       end program Smaller.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56a5d994ac971f1ac500003e":[{"id":20838,"user_id":50,"body":"       identification division.\n       program-id. longest_consec.\n       data division.\n       local-storage section.\n       01  t   usage index.\n       01  m   usage index.\n       01  ind usage index.\n       01  x   usage index.\n       01  j   usage index.\n      \n       linkage section.\n       01  arr.\n           05 l              pic 9(3).\n           05 strng          pic a(34) occurs 0 to 200 times \n                                       depending on l indexed i.\n       01  k                 pic s9(3).\n       01  result.\n           05 r              pic 9(4).\n           05 res.\n              07 pic a  occurs 0 to 7000 times\n                        depending on r.\n      \n       procedure division using arr k result.\n      \n          initialize result\n      \n          if l = 0 or k > l or k <= 0 goback end-if\n      \n          perform varying i from 1 until i > l - k + 1\n              initialize t\n              move i to x\n              perform k times\n                add length of function trim(strng(x))\n                to t\n                add 1 to x\n              end-perform\n              if t > m\n                move t to m\n                move i to ind\n              end-if\n          end-perform\n      \n          set j to 1\n          set i to ind\n          move 7000 to r\n          perform k times\n            string function trim(strng(i))\n            into res pointer j\n            add 1 to i\n          end-perform\n          compute r = j - 1\n      \n          goback.\n       end program longest_consec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20839,"user_id":53,"body":"       identification division.\n       program-id. longest_consec.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  j usage index.\n       01  l usage index.\n       01  p usage index.\n       01  m pic 9(4).\n       01  n pic 9(4).\n       linkage section.\n       01  strarr.\n           05 arr-length     pic 9(3).\n           05 strng          pic a(34) occurs 0 to 200 times \n                                       depending on arr-length.\n       01  k                 pic s9(3).\n       01  result.\n           05 res-length     pic 9(4).\n           05 res            pic a occurs 0 to 7000 times\n                                   depending on res-length.\n       procedure division using strarr k result.\n          initialize result\n          if arr-length = 0 or k > arr-length or k <= 0 then\n            goback \n          end-if\n          move 0 to j m\n          perform varying i from 1 until i > arr-length\n            set n to 0\n            perform varying l from 0 until l = k or i + l > arr-length\n              compute n = n + function length \n                (function trim(strng(i + l)))\n            end-perform\n            if n > m then\n              move n to m\n              move i to j\n            end-if\n          end-perform\n          perform varying l from 0 until l = k\n            add j to l giving i\n            perform varying p from 1 until p > \n                function length (function trim (strng(i)))\n              add 1 to res-length\n              move strng(i)(p:1) to res(res-length)\n            end-perform\n          end-perform\n          goback.\n       end program longest_consec.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20840,"user_id":53,"body":"       identification division.\n       program-id. longest_consec.\n       data division.\n       local-storage section.\n       01 indx.\n           05  a             usage index.\n           05  m             usage index.\n           05  b             usage index.\n           05  p             usage index.\n           05  j             usage index.\n       linkage section.\n       01  arr.\n           05 len            pic 9(3).\n           05 strng          pic a(34) occurs 0 to 200 times \n                                       depending on len \n                                       indexed i.\n       01  k                 pic s9(3).\n       01  result.\n           05 r-len          pic 9(4).\n           05 res.\n              07             pic a  occurs 0 to 7000 times\n                             depending on r-len.\n       procedure division using arr k result.\n          initialize result\n          if len = 0 or k > len or k <= 0 goback end-if\n          perform varying i from 1 until i > len - k + 1\n            set a to 0\n            move i to p\n            perform k times\n              add length of function trim(strng(p)) to a\n              add 1 to p\n            end-perform\n            if a > m then move a to m, move i to b end-if\n          end-perform\n          set j to 1, set i to b, move 7000 to r-len\n          perform k times\n            string function trim(strng(i)) into res pointer j\n            add 1 to i\n          end-perform\n          subtract 1 from j giving r-len\n          goback.\n       end program longest_consec.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56b1f01c247c01db92000076":[{"id":20841,"user_id":168,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n      \n       linkage section.\n       01  s.\n           03  sLen         pic 9(2).\n           03  sChar        pic x\n               occurs 0 to 30 times depending on sLen indexed i.\n       01  result.\n           03  resLen       pic 9(2).\n           03  resChar      pic x\n               occurs 0 to 60 times depending on resLen.\n      \n       procedure division using s result.\n          multiply sLen by 2 giving resLen\n          perform varying i from 1 until i > sLen\n              move sChar(i) to resChar(2 * i - 1) resChar(2 * i)\n          end-perform.\n       end program Doublechar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20842,"user_id":421,"body":"       identification division.\n       program-id. Doublechar.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  s.\n           03  sLen         pic 9(2).\n           03  sChar        pic x\n                            occurs 0 to 30 times depending on sLen\n                            indexed by i.\n       01  result.\n           03  resLen       pic 9(2).\n           03  resChar      pic x\n               occurs 0 to 60 times depending on resLen.\n      \n       procedure division using s result.\n           initialize resLen\n           perform varying i from 1 by 1 until i > sLen\n               add 1 to resLen\n               move sChar(i) to resChar(resLen)\n               add 1 to resLen\n               move sChar(i) to resChar(resLen)\n           end-perform.\n       end program Doublechar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20843,"user_id":null,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n      \n       linkage section.\n       01  s.\n           03  sLen         pic 9(2).\n           03  sChar        pic x\n               occurs 0 to 30 times depending on sLen.\n       01  result.\n           03  resLen       pic 9(2).\n           03  resChar      pic x\n               occurs 0 to 60 times depending on resLen.\n      \n       procedure division using s result.\n      \n          initialize result\n          PERFORM UNTIL resLen = sLen * 2\n             ADD 2 TO resLen\n             MOVE sChar(resLen \/ 2) TO resChar(resLen - 1)\n                                       resChar(resLen)\n          END-PERFORM\n          goback.\n       end program Doublechar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20844,"user_id":null,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n       working-storage section.\n       77 j               usage is index.\n      \n       linkage section.\n       01  s.\n           03  sLen         pic 9(2).\n           03  sChar        pic x\n               occurs 0 to 30 times depending on sLen indexed by i.\n       01  result.\n           03  resLen       pic 9(2).\n           03  resChar      pic x\n               occurs 0 to 60 times depending on resLen.\n      \n       procedure division using s result.      \n          set j to 3\n          compute resLen = sLen * 2\n          perform varying i from 1 until i > sLen\n             perform 2 times\n                string sChar(i) into result with pointer j.\n          goback.\n       end program Doublechar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20845,"user_id":null,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n      \n       working-storage section.\n       01 ws-cnt pic 9(2).\n       01 ws-tmp-1  pic 9(2).\n       01 ws-tmp-2  pic 9(2).\n      \n       linkage section.\n       01  s.\n           03  sLen         pic 9(2).\n           03  sChar        pic x\n               occurs 0 to 30 times depending on sLen.\n       01  result.\n           03  resLen       pic 9(2).\n           03  resChar      pic x\n               occurs 0 to 60 times depending on resLen.\n\n      \n       procedure division using s result.\n      \n          initialize result\n          \n          perform B-PARAGRAPH varying ws-cnt \n              from 1 by 1 until ws-cnt>sLen.\n      \n          multiply sLen by 2 giving resLen.\n          goback.\n      \n          B-PARAGRAPH.\n          multiply ws-cnt by 2 giving ws-tmp-1.\n          subtract 1 from ws-tmp-1 giving ws-tmp-2.\n          move sChar(ws-cnt:1) to resChar(ws-tmp-2:1).\n          move sChar(ws-cnt:1) to resChar(ws-tmp-1:1).\n\n       end program Doublechar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20846,"user_id":null,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n      \n       linkage section.\n       01  s.\n           03  sLen         pic 9(2).\n           03  sChar        pic x\n               occurs 0 to 30 times depending on sLen indexed by i.\n       01  result.\n           03  resLen       pic 9(2).\n           03  resChar      pic x\n               occurs 0 to 60 times depending on resLen indexed by j.\n      \n       procedure division using s result.      \n          initialize result\n          compute resLen = sLen * 2\n          perform varying i from 1 until i > sLen\n             move sChar(i) to resChar(i*2 - 1)\n             move sChar(i) to resChar(i*2)\n          end-perform\n          goback.\n       end program Doublechar.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20847,"user_id":53,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n       local-storage section.\n       01  ptr              usage index value 1.\n       linkage section.\n       01  e.\n           03  len          pic 9(2).\n           03  s            pic x occurs 0 to 30 \n                            depending len\n                            indexed by i.\n       01  result.\n           03  res-len      pic 9(2).\n           03  res          pic x(60).\n       procedure division using e result.\n          initialize result\n          multiply 2 by len giving res-len\n          perform varying i from 1 until ptr > res-len\n            perform 2 times\n              string s(i) into res with pointer ptr\n            end-perform\n          end-perform\n          goback.\n       end program Doublechar.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20848,"user_id":50,"body":"       identification division.\n       program-id. Doublechar.\n       data division.\n       local-storage section.\n       01  j                usage index.\n      \n       linkage section.\n       01  e.\n           03  sLen         pic 9(2).\n           03  s            pic x occurs 0 to 30 depending sLen\n                                                        indexed i.\n       01  result.\n           03  resLen       pic 9(2).\n           03  res          pic x(60).\n      \n       procedure division using e result.\n      \n          initialize result\n          compute resLen = 2 * sLen\n          set j to 1\n          perform varying i from 1 until j > resLen\n              perform 2 times\n                string s(i) into res with pointer j\n            .\n      \n          goback.\n       end program Doublechar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56b29582461215098d00000f":[{"id":20849,"user_id":50,"body":"       identification division.\n       program-id. pipe_fix.\n       data division.\n       local-storage section.\n       01  n                pic s9(4).\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic s9(4) occurs 100 times \n                            depending on arrLength.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 2001 times \n                            depending on resLength.\n      \n       procedure division using arr result.\n      \n          compute resLength = xs(arrLength) - xs(1) + 1\n          perform varying n from xs(1) until n > xs(arrLength)\n              move n to res(n - xs(1) + 1)\n          end-perform.\n      \n       end program pipe_fix.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-06 17:50:05"},{"id":20850,"user_id":null,"body":"       identification division.\n       program-id. pipe_fix.\n       data division.\n       working-storage section.\n       77 resLen            pic 9(4).\n       77 num               pic s9(4).\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic s9(4) occurs 100 times \n                                      depending on arrLength.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 2001 times \n                                     depending on resLength.\n      \n       procedure division using arr result.\n          compute resLen = xs(arrLength) - xs(1) + 1\n          set num to xs(1)\n          perform varying resLength from 1 until resLength > resLen\n             set res(resLength) to num\n             set num up by 1\n          end-perform\n          set resLength to resLen\n          goback.\n       end program pipe_fix.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-06 17:50:05"},{"id":20851,"user_id":null,"body":"       identification division.\n       program-id. pipe_fix.\n       data division.\n       working-storage section.\n       77 i                 usage is index.\n       77 min-val           pic s9(4).\n       77 max-val           pic s9(4).\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic s9(4) occurs 100 times \n                                      depending on arrLength.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 2001 times \n                                     depending on resLength.\n      \n       procedure division using arr result.\n          initialize result\n          move xs(1) to min-val \n          move xs(1) to max-val \n          perform varying i from 2 until i > arrLength\n             compute min-val = function min(xs(i), min-val)\n             compute max-val = function max(xs(i), max-val)\n          end-perform\n          perform varying i from min-val until i > max-val\n             set resLength up by 1\n             set res(resLength) to i\n          end-perform\n          goback.\n       end program pipe_fix.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-06 17:50:05"},{"id":20852,"user_id":53,"body":"       identification division.\n       program-id. pipe_fix.\n       data division.\n       local-storage section.\n       01  i                pic s9(4).\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(3).\n           05 xs            pic s9(4) occurs 100 times \n                            depending on arr-len.\n       01  result.\n           05 res-len       pic 9(4).\n           05 res           pic s9(4) occurs 2001 times \n                            depending on res-len.\n       procedure division using arr result.\n          initialize result\n          compute res-len = xs(arr-len) - xs(1) + 1\n          perform varying i from xs(1) until i > xs(arr-len)\n            move i to res(i - xs(1) + 1)\n          end-perform\n          goback.\n       end program pipe_fix.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-06 17:50:05"}],"56b2abae51646a143400001d":[{"id":20853,"user_id":168,"body":"       identification division.\n       program-id. mystery.\n      \n       data division.\n       working-storage section.\n       01 a           usage binary-double.\n       01 b           usage binary-double.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          move n to a\n          divide n by 2 giving b\n          call 'CBL_XOR' using a b by value 8\n          move b to result      \n          goback.\n       end program mystery.\n      \n       identification division.\n       program-id. mystery-inv.\n      \n       data division.\n       working-storage section.\n       01 a           usage binary-double.\n       01 b           usage binary-double.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          move n to a b\n          perform until a = 0\n              divide 2 into a\n              call 'CBL_XOR' using a b by value 8\n          end-perform\n          move b to result      \n          goback.\n       end program mystery-inv.\n\n\n       identification division.\n       program-id. name-of-mystery.\n      \n       data division.\n\n       linkage section.\n       01 result      pic a(20).\n       procedure division using result.\n          move 'Gray code' to result\n          goback.\n       end program name-of-mystery.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20854,"user_id":50,"body":"       identification division.\n       program-id. mystery.\n      \n       data division.\n       local-storage section.\n       01 x           usage binary-double unsigned.\n       01 y           usage binary-double unsigned.\n       01 a           pic 9(20).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          compute a = n \/ 2\n          move a to y\n          move n to x\n          call 'CBL_XOR' using x y by value 8\n          move y to result\n      \n          goback.\n       end program mystery.\n      \n       identification division.\n       program-id. mystery-inv.\n      \n       data division.\n       local-storage section.\n       01 x           usage binary-double unsigned.\n       01 y           usage binary-double unsigned.\n       01 a           pic 9(20).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          compute a = n \/ 2\n          \n          perform until a = 0\n              move n to x\n              move a to y\n              call 'CBL_XOR' using x y  by value 8\n              move y to n\n              divide a by 2 giving a\n          end-perform\n      \n          move n to result\n      \n          goback.\n       end program mystery-inv.\n\n\n       identification division.\n       program-id. name-of-mystery.\n      \n       data division.\n\n       linkage section.\n       01 result      pic a(20).\n       procedure division using result.\n      \n          move 'Gray code' to result\n      \n          goback.\n       end program name-of-mystery.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20855,"user_id":168,"body":"       identification division.\n       program-id. mystery.\n      \n       data division.\n       working-storage section.\n      * should be binary-double\n       01 a           usage binary-long.\n       01 b           usage binary-long.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          move n to a\n          divide n by 2 giving b\n      * should be by value 8\n          call 'CBL_XOR' using a b by value 4\n          move b to result      \n          goback.\n       end program mystery.\n      \n       identification division.\n       program-id. mystery-inv.\n      \n       data division.\n       working-storage section.\n       01 a           usage binary-double.\n       01 b           usage binary-double.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          move n to a b\n          perform until a = 0\n              divide 2 into a\n              call 'CBL_XOR' using a b by value 8\n          end-perform\n          move b to result      \n          goback.\n       end program mystery-inv.\n\n\n       identification division.\n       program-id. name-of-mystery.\n      \n       data division.\n\n       linkage section.\n       01 result      pic a(20).\n       procedure division using result.\n          move 'Gray code' to result\n          goback.\n       end program name-of-mystery.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20856,"user_id":53,"body":"       identification division.\n       program-id. mystery.\n      \n       data division.\n       local-storage section.\n       01 bin1        usage binary-long.\n       01 bin2        usage binary-long.\n       01 m           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          divide 2 into n giving m\n          move m to bin2\n          move n to bin1\n          call 'CBL_XOR' using bin1 bin2 by value 4\n          move bin2 to result\n          goback.\n       end program mystery.\n      \n       identification division.\n       program-id. mystery-inv.\n       data division.\n       local-storage section.\n       01 bin1        usage binary-long.\n       01 bin2        usage binary-long.\n       01 m           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          divide 2 into n giving m\n          perform until m = 0\n            move n to bin1\n            move m to bin2\n            call 'CBL_XOR' using bin1 bin2 by value 4\n            move bin2 to n\n            divide 2 into m\n          end-perform\n          move n to result\n          goback.\n       end program mystery-inv.\n\n       identification division.\n       program-id. name-of-mystery.\n       data division.\n       linkage section.\n       01 result      pic a(20).\n       procedure division using result.\n          move \"Gray code\" to result\n          goback.\n       end program name-of-mystery.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20857,"user_id":50,"body":"       identification division.\n       program-id. mystery.\n      \n       data division.\n       local-storage section.\n       01 x           usage binary-long.\n       01 y           usage binary-long.\n       01 a           pic 9(20).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          compute a = n \/ 2\n          move a to y\n          move n to x\n          call 'CBL_XOR' using x y by value 4\n          move y to result\n      \n          goback.\n       end program mystery.\n      \n       identification division.\n       program-id. mystery-inv.\n      \n       data division.\n       local-storage section.\n       01 x           usage binary-long.\n       01 y           usage binary-long.\n       01 a           pic 9(20).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          compute a = n \/ 2\n          \n          perform until a = 0\n              move n to x\n              move a to y\n              call 'CBL_XOR' using x y  by value 4\n              move y to n\n              divide a by 2 giving a\n          end-perform\n      \n          move n to result\n      \n          goback.\n       end program mystery-inv.\n\n\n       identification division.\n       program-id. name-of-mystery.\n      \n       data division.\n\n       linkage section.\n       01 result      pic a(20).\n       procedure division using result.\n      \n          move 'Gray code' to result\n      \n          goback.\n       end program name-of-mystery.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56b7771481290cc283000f28":[{"id":20858,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Last-Fibonacci-Digit.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 PISANO      pic x(60) value\n        \"011235831459437077415617853819099875279651673033695493257291\".\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n          MOVE PISANO(FUNCTION MOD(N, 60) + 1:1) TO RESULT.\n       END PROGRAM Last-Fibonacci-Digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20859,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Last-Fibonacci-Digit.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 VALUE \n       '1123583145943707741561785381909987527965167303369549325729'.\n           05 XS PIC 9 OCCURS 58 TIMES.\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = XS(FUNCTION REM(N - 1, 60) + 1).\n       END PROGRAM Last-Fibonacci-Digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20860,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Last-Fibonacci-Digit.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING N RESULT.\n      * Implementation of Lechevalier's Python solution\n      * https:\/\/www.codewars.com\/kata\/reviews\/56b77d0ffe024f7412000052\/groups\/58d45b9da5db393e3b0000fa \n         Compute Result = Function Integer (\n                            Function Rem (\n                              (Function Sqrt (5) \/ 2 + 0.5) ** \n                                 Function Rem (N, 60) \/ \n                                  Function Sqrt (5) + 0.5, 10)) .\n      \n       END PROGRAM Last-Fibonacci-Digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20861,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(38).\n       01 RESULT      PIC 9(8).\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 C           PIC 9(8).\n       01 I           PIC 9(2).\n       PROCEDURE DIVISION.\n       Last-Fibonacci-Digit SECTION.\n           MOVE FUNCTION REM(N, 60)  TO N\n           MOVE 0  TO A\n           MOVE 1  TO B\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I = N\n               MOVE A  TO C\n               MOVE B  TO A\n               ADD  C  TO B\n           END-PERFORM\n           MOVE B(8:1)  TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20862,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(38).\n       01 RESULT      PIC 9(8).\n       01 pisano      pic x(60) value\n        \"011235831459437077415617853819099875279651673033695493257291\".\n       PROCEDURE DIVISION.\n       Last-Fibonacci-Digit.\n           compute n = function mod(n, 60) + 1\n           move pisano(n:1) to result\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20863,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N               PIC 9(38).\n       01 RESULT          PIC 9(8).\n      \n       LOCAL-STORAGE SECTION.\n       01 VARIABLES.\n          03 LAST-DIGIT  PIC 9 OCCURS 59 TIMES.\n          03 I           PIC 99.\n          03 A           PIC 9(13).\n          03 B           PIC 9(13).\n          03 C           PIC 9(13).\n          03 DUMMY       PIC 9(13).\n      \n       PROCEDURE DIVISION.\n       Last-Fibonacci-Digit SECTION.\n           MOVE 1 TO A.\n           MOVE 1 TO B.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I IS EQUAL TO 60.\n               DIVIDE A BY 10 GIVING DUMMY REMAINDER LAST-DIGIT(I).\n               MOVE A TO C.\n               MOVE B TO A.\n               ADD A, C GIVING B.\n           END-PERFORM.\n           DIVIDE N BY 60 GIVING DUMMY REMAINDER I.\n           IF I IS EQUAL TO ZERO THEN\n               MOVE ZERO TO RESULT\n           ELSE\n               MOVE LAST-DIGIT(I) TO RESULT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20864,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(38).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 LAST-DIGITS-TABLE.\n         02 LAST-DIGIT OCCURS 60 TIMES PIC 9 VALUES ZERO.\n       01 I           PIC 99.\n       PROCEDURE DIVISION.\n       FILL-TABLE.\n        MOVE 1 TO LAST-DIGIT(2)\n           PERFORM VARYING I FROM 3 BY 1 UNTIL I > 60\n             COMPUTE LAST-DIGIT(I) = FUNCTION MOD(\n              LAST-DIGIT(I - 2) + LAST-DIGIT(I - 1), 10)\n           END-PERFORM.\n       LAST-FIBONACCI-DIGIT\n         PERFORM FILL-TABLE\n         MOVE LAST-DIGIT(FUNCTION MOD(N, 60) + 1) TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20865,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N                PIC 9(38).\n       01 RESULT           PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 i                PIC 9(8).\n       01 b                PIC 9(8).\n       01 temp             PIC 9(8).\n       01 mod              PIC 9(8).\n       PROCEDURE DIVISION.\n       Last-Fibonacci-Digit SECTION.\n             COMPUTE RESULT = 0\n             COMPUTE b = 1\n             COMPUTE i = 0\n             COMPUTE mod = FUNCTION MOD(N, 60)\n             PERFORM WITH TEST BEFORE UNTIL i >= mod\n                 compute temp = b\n                 compute b = function mod(RESULT + b, 10)\n                 compute RESULT = temp\n                 compute i = i + 1\n             END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20866,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(38).\n       01 RESULT      PIC 9(8).\n       local-storage section.\n       01 dig.\n          05 d occurs 60 times pic 9.\n       PROCEDURE DIVISION.\n       Last-Fibonacci-Digit SECTION\n       move 112358314594370774156178538190998752796516730336954932572910\n            to dig\n        compute result = d (function rem(n 60))\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20867,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(38).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Last-Fibonacci-Digit SECTION.\n            COMPUTE RESULT = FUNCTION REM (FUNCTION INTEGER-PART(\n              (5 ** 0.5 \/ 2 + 0.5)\n              ** (FUNCTION REM (N 60)) \/ 5 ** 0.5 + 0.5)\n               10)\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56b7f2f3f18876033f000307":[{"id":20868,"user_id":null,"body":"       identification division.\n       program-id. in_asc_order.\n       data division.\n       working-storage section.\n       01 i                pic 9(3). \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 num           pic 9(6) occurs 100 times \n                                      depending on arrLength.\n       01  result           pic 9.\n      \n       procedure division using arr result.\n      \n          initialize result i\n          move 1            to result i\n          perform until i greater or equal arrLength\n             if num(i + 1) less num(i)\n                move 0 to result\n             end-if  \n             add 1          to i\n          end-perform \n      \n      * Assign `1` to result if numbers of `arr` are in ascending order, otherwise `0`\n      \n          goback.\n       end program in_asc_order.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20869,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. in_asc_order.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN           PIC 9(3).\n           05 NUM           PIC 9(6) OCCURS 100 DEPENDING LEN INDEXED I.\n       01  RESULT           PIC 9.\n\n       PROCEDURE DIVISION USING ARR RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 2 UNTIL I > LEN\n               IF  NUM(I - 1) > NUM(I)\n                   GOBACK\n               END-IF\n           END-PERFORM\n           MOVE 1  TO RESULT.\n       END PROGRAM in_asc_order.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20870,"user_id":168,"body":"       identification division.\n       program-id. in_asc_order.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 num           pic 9(6) occurs 100 times \n                                     depending on arrLength indexed i.\n       01  result           pic 9.\n      \n       procedure division using arr result.\n          move 1 to result\n          perform varying i from 2 until i > arrLength\n              if num(i) < num(i - 1)\n                  move 0 to result\n                  exit perform\n              end-if\n          end-perform.\n       end program in_asc_order.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20871,"user_id":53,"body":"       identification division.\n       program-id. in_asc_order.\n       data division.\n       linkage section.\n       01  arr.\n           05 len           pic 9(3).\n           05 xs            pic 9(6) occurs 100 times \n                            depending on len indexed by i.\n       01  result           pic 9.\n       procedure division using arr result.\n          initialize result\n          perform varying i from 2 until i > len\n            if xs(i - 1) > xs(i) goback end-if\n          end-perform\n          set result to 1\n          goback.\n       end program in_asc_order.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20872,"user_id":50,"body":"       identification division.\n       program-id. in_asc_order.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(6) occurs 100 times \n                            depending on arrLength indexed by i.\n       01  result           pic 9.\n      \n       procedure division using arr result.\n      \n          initialize result\n      \n          perform varying i from 2 until i > arrLength\n            if xs(i) < xs(i - 1) goback end-if\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program in_asc_order.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56b8903933dbe5831e000c76":[{"id":20873,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. spoonerize.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  CNT             PIC 9(2).\n       01  SWAP            PIC X(1).\n       LINKAGE SECTION.\n       01  WDS.\n           05 FILLER       PIC 9(2).\n           05 CHR          PIC X(41).\n       01  RESULT          PIC X(43).\n\n       PROCEDURE DIVISION USING WDS RESULT.\n           INSPECT WDS TALLYING CNT FOR ALL CHARACTERS BEFORE ' '\n           MOVE CHR(1:1)    TO SWAP\n           MOVE CHR(CNT:1)  TO CHR(1:1)\n           MOVE SWAP        TO CHR(CNT:1)\n           MOVE WDS         TO RESULT.\n       END PROGRAM spoonerize.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20874,"user_id":168,"body":"       identification division.\n       program-id. spoonerize.\n       data division.\n      \n       linkage section.\n       01  wds.\n           05 s-length     pic 9(2).\n           05 str.\n              10 s-char    pic x occurs 3 to 41 times \n                           depending on s-length indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-str.\n              10 res       pic x occurs 3 to 41 times \n                           depending on res-length.\n      \n       procedure division using wds result.\n          move s-length to res-length\n          move 1 to i\n          unstring str delimited by ' ' into res-str with pointer i\n          move s-char(i) to res(1)\n          move s-char(1) to res(i)\n          move str(i + 1:) to res-str(i + 1:)\n          goback.\n       end program spoonerize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20875,"user_id":53,"body":"       identification division.\n       program-id. spoonerize.\n       data division.\n       local-storage section.\n       01  i               pic 9(2).\n       01  j               pic 9(2).\n       linkage section.\n       01  wds.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 3 to 41 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 3 to 41 times \n                           depending on res-length.\n       procedure division using wds result.\n          initialize result\n          move s-length to res-length\n          perform varying i from 1 until i > s-length\n            if s-char(i) = ' ' then\n              add 1 to i giving j\n            end-if\n            move s-char(i) to res(i)\n          end-perform\n          move s-char(j) to res(1)\n          move s-char(1) to res(j)\n          goback.\n       end program spoonerize.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20876,"user_id":50,"body":"       identification division.\n       program-id. spoonerize.\n       data division.\n       local-storage section.\n       01  flag pic 9.\n      \n       linkage section.\n       01  wds.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 3 to 41 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 3 to 41 times \n                           depending on res-length.\n      \n       procedure division using wds result.\n          \n          move wds to result\n          move 0 to flag\n          perform varying i from 2 until i > s-length\n            if flag = 1\n              move s-char(i) to res(1)\n              move s-char(1) to res(i)\n              goback\n            end-if\n            if s-char(i) = ' '\n              move 1 to flag\n            end-if\n          end-perform\n      \n          goback.\n       end program spoonerize.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56bc28ad5bdaeb48760009b0":[{"id":20877,"user_id":421,"body":"       identification division.\n       program-id. remove_char.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01  str.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 2 to 20 times \n                                  depending on s-length\n                                  indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 20 times \n                                 depending on res-length.\n      \n       procedure division using str result.     \n           initialize res-length\n           perform varying i from 2 by 1 until i = s-length\n               add 1 to res-length\n               move s-char(i) to res(res-length)\n           end-perform.\n       end program remove_char.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20878,"user_id":50,"body":"       identification division.\n       program-id. remove_char.\n       data division.\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 2 to 20 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 20 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n      \n          initialize result\n          compute res-length = s-length - 2\n          move s(4:) to result(3:)\n      \n          goback.\n       end program remove_char.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20879,"user_id":168,"body":"       identification division.\n       program-id. remove_char.\n       data division.\n\n       linkage section.\n       01  str.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 2 to 20 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 20 times \n                                 depending on res-length.\n      \n       procedure division using str result.\n          subtract 2 from s-length giving res-length\n          move str(4:res-length) to result(3:)\n          goback.\n       end program remove_char.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20880,"user_id":null,"body":"       identification division.\n       program-id. remove_char.\n       data division.\n\n       linkage section.\n       01  str.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 2 to 20 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 20 times \n                                 depending on res-length.\n      \n       procedure division using str result.\n          compute res-length = s-length - 2\n          move str(4 : s-length - 2) to result(3:)      \n          goback.\n       end program remove_char.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20881,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. remove_char.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STR.\n           05 S-LEN        PIC 9(2).\n           05 S-CHAR       PIC X OCCURS 20 DEPENDING S-LEN.\n       01  RESULT.\n           05 RES-LEN      PIC 9(2).\n           05 RES          PIC X(20).\n\n       PROCEDURE DIVISION USING STR RESULT.\n           COMPUTE RES-LEN = S-LEN - 2\n           MOVE STR(4:RES-LEN)  TO RES.\n       END PROGRAM remove_char.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20882,"user_id":53,"body":"       identification division.\n       program-id. remove_char.\n       data division.\n       linkage section.\n       01  str.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 2 to 20 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 20 times \n                                 depending on res-length.\n       procedure division using str result.\n          initialize result\n          subtract 2 from s-length giving res-length\n          move str(4:) to result(3:)\n          goback.\n       end program remove_char.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56bdd0aec5dc03d7780010a5":[{"id":20883,"user_id":168,"body":"       identification division.\n       program-id. next-higher.\n      \n       data division.\n       working-storage section.\n       01 a           usage binary-long.\n       01 t           usage binary-long.\n       01 h           usage binary-long.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          compute a = n\n          compute t = -n\n          call 'CBL_AND' using a t by value 4\n          compute h = n + t\n          call 'CBL_XOR' using h a by value 4\n          compute result = a \/ (4 * t) + h.\n       end program next-higher.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20884,"user_id":53,"body":"       identification division.\n       program-id. next-higher.\n      \n       data division.\n       local-storage section.\n       01 src         usage binary-long.\n       01 bin         usage binary-long.\n       01 a           pic S9(10).\n       01 r           pic S9(10).\n       01 p           pic S9(10).\n       01 q           pic S9(10).\n       01 m           pic S9(10).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          compute a = -1 * n\n          move a to bin\n          move n to src\n          call 'CBL_AND' using src bin by value 4\n          move bin to r\n          compute p = n + r\n          move p to bin\n          move n to src\n          call 'CBL_XOR' using src bin by value 4\n          move bin to q\n          compute q = q \/ (4 * r)\n          move q to bin\n          move p to src\n          call 'CBL_OR' using src bin by value 4\n          move bin to m\n          move m to result\n          goback.\n       end program next-higher.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20885,"user_id":50,"body":"       identification division.\n       program-id. next-higher.\n      \n       data division.\n       local-storage section.\n       01 ref           pic 9(2).\n       01 ones          pic 9(2).\n       01 m             pic 9(10).\n       01 r             pic 9.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n\n          move n to m\n          perform until m = 0\n            divide 2 into m giving m remainder r\n            add    r to ref\n          end-perform\n          \n          move n to result\n          perform with test before until ones = ref\n            move 0 to ones\n            add  1 to result\n            move result to m\n            perform until m = 0\n              divide 2 into m giving m remainder r\n              add    r to ones\n            end-perform\n          end-perform\n\n          goback.\n       end program next-higher.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56c04261c3fcf33f2d000534":[{"id":20886,"user_id":null,"body":"       identification division.\n       program-id. doubles.\n       data division.\n       local-storage section.\n       01 i            pic 9(8).\n       01 j            pic 9(8).\n       01 box          pic 9v9(16).\n       linkage section.\n       01 k            pic 9(8).\n       01 n            pic 9(8).\n       01 result       pic 9v9(16).\n       procedure division using k n result.\n        perform varying i from 1 by 1 until i > k\n          compute box = 0\n          perform varying j from 1 by 1 until j > n\n            compute box = box + 1.0 \/ (i * (j + 1.0) ** (2.0 * i))\n          end-perform\n            if box < 0.000000000000001 then exit perform end-if\n            compute result = result + box\n        end-perform  \n        goback.\n       end program doubles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20887,"user_id":168,"body":"       identification division.\n       program-id. doubles.\n       data division.\n       working-storage section.\n       01 i            pic 9(8).\n       01 j            pic 9(8).\n       01 s            usage comp-2.\n       01 d            usage comp-2.\n       01 e            usage comp-2.\n       linkage section.\n       01 k            pic 9(8).\n       01 n            pic 9(8).\n       01 result       pic 9v9(16).\n       procedure division using k n result.\n          compute s = 0\n          compute k = function min(100, k)\n          perform varying i from 1 by 1 until i > k\n            perform varying j from 1 by 1 until j > n\n              compute e = 2 * i\n              compute d = i * (j + 1) ** e\n              if d > 1.0e+20 then exit perform end-if\n              compute s = s + 1 \/ d\n            end-perform\n          end-perform\n          compute result = s\n          goback.\n       end program doubles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20888,"user_id":53,"body":"       identification division.\n       program-id. doubles.\n       data division.\n       local-storage section.\n       01 i            pic 9(8).\n       01 j            pic 9(8).\n       01 row          pic 9v9(16).\n       linkage section.\n       01 k            pic 9(8).\n       01 n            pic 9(8).\n       01 result       pic 9v9(16).\n       procedure division using k n result.\n          perform varying i from 1 by 1 until i > k\n            perform varying j from 1 by 1 until j > n\n              compute row = 1.0 \/ (i * (j + 1.0) ** (2.0 * i))\n              compute result = result + row\n              if row < 0.000000000000001 then\n                exit perform\n              end-if\n            end-perform\n          end-perform\n          goback.\n       end program doubles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56c1c1e4876de7e0cb000a10":[{"id":20889,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NEXT-LOWER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 P            PIC S9(20) sign leading.\n       LINKAGE SECTION.\n       01 N            PIC S9(20) sign leading.\n       01 RESULT       PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n          if n = 1 then\n            move 0 to result\n            goback\n          end-if\n          move 1 to p\n          if n > 0 then\n            perform until p * 2 >= n\n              compute p = p * 2\n            end-perform\n            move p to result\n          else\n            perform until p > -n\n              compute p = p * 2\n            end-perform\n            compute result = -p\n          end-if\n          goback.\n       END PROGRAM NEXT-LOWER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20890,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NEXT-LOWER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 O            PIC S9(20).\n       LINKAGE SECTION.\n       01 N            PIC S9(20) sign leading.\n       01 RESULT       PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n          evaluate true\n            when  n = 0\n              move -1 to result\n            when n = 1\n              move 0 to result\n            when n > 0\n                Move 1073741824 to o\n                Perform until o = 0\n                  If o < n\n                    Move o to result\n                    exit perform\n                  Else\n                    Compute o = o \/ 2\n                  end-if\n                End-perform\n            when other\n                move -1 to o\n                Perform until n > o\n                      Compute o = 2 * o\n                  end-perform\n                move o to result\n          end-evaluate\n      \n          goback.\n      \n       END PROGRAM NEXT-LOWER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20891,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NEXT-LOWER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N            PIC S9(20) sign leading.\n       01 RESULT       PIC S9(20) sign leading.\n       PROCEDURE DIVISION USING N RESULT.\n          if n > 0\n              compute result = 2 ** 30\n              perform until result < n\n                  divide 2 into result\n              end-perform\n          else\n              compute result = -1\n              perform until result < n\n                  multiply 2 by result\n              end-perform\n          end-if.\n       END PROGRAM NEXT-LOWER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56c1c1ed0e10121d77000a56":[{"id":20892,"user_id":53,"body":"       identification division.\n       program-id. NextLower.\n       data division.\n       local-storage section.\n       01 p           pic s9(38) value 1.\n       linkage section.\n       01 n           pic s9(38).\n       01 result      pic s9(38).\n       procedure division using n result.\n          initialize result\n          if n >= 0 then\n            perform until p > n\n              multiply 2 by p\n            end-perform\n          end-if\n          if n < 0 then\n            perform until p >= -n\n              multiply 2 by p\n            end-perform\n          end-if\n          if n >= 0 then\n            move p to result\n          else\n            divide 2 into p\n            multiply -1 by p\n            move p to result\n          end-if\n          goback.\n       end program NextLower.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20893,"user_id":50,"body":"       identification division.\n       program-id. NextLower.\n      \n       data division.\n       working-storage section.\n       01 powersOf2Table.\n          03 filler pic s9(38) value\n              -85070591730234615865843651857942052864.\n          03 filler pic s9(38) value\n              -42535295865117307932921825928971026432.\n          03 filler pic s9(38) value\n              -21267647932558653966460912964485513216.\n          03 filler pic s9(38) value\n              -10633823966279326983230456482242756608.\n          03 filler pic s9(38) value\n              -5316911983139663491615228241121378304.\n          03 filler pic s9(38) value\n              -2658455991569831745807614120560689152.\n          03 filler pic s9(38) value\n              -1329227995784915872903807060280344576.\n          03 filler pic s9(38) value\n              -664613997892457936451903530140172288.\n          03 filler pic s9(38) value\n              -332306998946228968225951765070086144.\n          03 filler pic s9(38) value\n              -166153499473114484112975882535043072.\n          03 filler pic s9(38) value\n              -83076749736557242056487941267521536.\n          03 filler pic s9(38) value\n              -41538374868278621028243970633760768.\n          03 filler pic s9(38) value\n              -20769187434139310514121985316880384.\n          03 filler pic s9(38) value\n              -10384593717069655257060992658440192.\n          03 filler pic s9(38) value\n              -5192296858534827628530496329220096.\n          03 filler pic s9(38) value\n              -2596148429267413814265248164610048.\n          03 filler pic s9(38) value\n              -1298074214633706907132624082305024.\n          03 filler pic s9(38) value\n              -649037107316853453566312041152512.\n          03 filler pic s9(38) value\n              -324518553658426726783156020576256.\n          03 filler pic s9(38) value\n              -162259276829213363391578010288128.\n          03 filler pic s9(38) value\n              -81129638414606681695789005144064.\n          03 filler pic s9(38) value\n              -40564819207303340847894502572032.\n          03 filler pic s9(38) value\n              -20282409603651670423947251286016.\n          03 filler pic s9(38) value\n              -10141204801825835211973625643008.\n          03 filler pic s9(38) value\n              -5070602400912917605986812821504.\n          03 filler pic s9(38) value\n              -2535301200456458802993406410752.\n          03 filler pic s9(38) value\n              -1267650600228229401496703205376.\n          03 filler pic s9(38) value\n              -633825300114114700748351602688.\n          03 filler pic s9(38) value\n              -316912650057057350374175801344.\n          03 filler pic s9(38) value\n              -158456325028528675187087900672.\n          03 filler pic s9(38) value\n              -79228162514264337593543950336.\n          03 filler pic s9(38) value\n              -39614081257132168796771975168.\n          03 filler pic s9(38) value\n              -19807040628566084398385987584.\n          03 filler pic s9(38) value\n              -9903520314283042199192993792.\n          03 filler pic s9(38) value\n              -4951760157141521099596496896.\n          03 filler pic s9(38) value\n              -2475880078570760549798248448.\n          03 filler pic s9(38) value\n              -1237940039285380274899124224.\n          03 filler pic s9(38) value\n              -618970019642690137449562112.\n          03 filler pic s9(38) value\n              -309485009821345068724781056.\n          03 filler pic s9(38) value\n              -154742504910672534362390528.\n          03 filler pic s9(38) value\n              -77371252455336267181195264.\n          03 filler pic s9(38) value\n              -38685626227668133590597632.\n          03 filler pic s9(38) value\n              -19342813113834066795298816.\n          03 filler pic s9(38) value\n              -9671406556917033397649408.\n          03 filler pic s9(38) value\n              -4835703278458516698824704.\n          03 filler pic s9(38) value\n              -2417851639229258349412352.\n          03 filler pic s9(38) value\n              -1208925819614629174706176.\n          03 filler pic s9(38) value\n              -604462909807314587353088.\n          03 filler pic s9(38) value\n              -302231454903657293676544.\n          03 filler pic s9(38) value\n              -151115727451828646838272.\n          03 filler pic s9(38) value\n              -75557863725914323419136.\n          03 filler pic s9(38) value\n              -37778931862957161709568.\n          03 filler pic s9(38) value\n              -18889465931478580854784.\n          03 filler pic s9(38) value\n              -9444732965739290427392.\n          03 filler pic s9(38) value\n              -4722366482869645213696.\n          03 filler pic s9(38) value\n              -2361183241434822606848.\n          03 filler pic s9(38) value\n              -1180591620717411303424.\n          03 filler pic s9(38) value\n              -590295810358705651712.\n          03 filler pic s9(38) value\n              -295147905179352825856.\n          03 filler pic s9(38) value\n              -147573952589676412928.\n          03 filler pic s9(38) value\n              -73786976294838206464.\n          03 filler pic s9(38) value\n              -36893488147419103232.\n          03 filler pic s9(38) value\n              -18446744073709551616.\n          03 filler pic s9(38) value\n              -9223372036854775808.\n          03 filler pic s9(38) value\n              -4611686018427387904.\n          03 filler pic s9(38) value\n              -2305843009213693952.\n          03 filler pic s9(38) value\n              -1152921504606846976.\n          03 filler pic s9(38) value\n              -576460752303423488.\n          03 filler pic s9(38) value\n              -288230376151711744.\n          03 filler pic s9(38) value\n              -144115188075855872.\n          03 filler pic s9(38) value\n              -72057594037927936.\n          03 filler pic s9(38) value\n              -36028797018963968.\n          03 filler pic s9(38) value\n              -18014398509481984.\n          03 filler pic s9(38) value\n              -9007199254740992.\n          03 filler pic s9(38) value\n              -4503599627370496.\n          03 filler pic s9(38) value\n              -2251799813685248.\n          03 filler pic s9(38) value\n              -1125899906842624.\n          03 filler pic s9(38) value\n              -562949953421312.\n          03 filler pic s9(38) value\n              -281474976710656.\n          03 filler pic s9(38) value\n              -140737488355328.\n          03 filler pic s9(38) value\n              -70368744177664.\n          03 filler pic s9(38) value\n              -35184372088832.\n          03 filler pic s9(38) value\n              -17592186044416.\n          03 filler pic s9(38) value\n              -8796093022208.\n          03 filler pic s9(38) value\n              -4398046511104.\n          03 filler pic s9(38) value\n              -2199023255552.\n          03 filler pic s9(38) value\n              -1099511627776.\n          03 filler pic s9(38) value\n              -549755813888.\n          03 filler pic s9(38) value\n              -274877906944.\n          03 filler pic s9(38) value\n              -137438953472.\n          03 filler pic s9(38) value\n              -68719476736.\n          03 filler pic s9(38) value\n              -34359738368.\n          03 filler pic s9(38) value\n              -17179869184.\n          03 filler pic s9(38) value\n              -8589934592.\n          03 filler pic s9(38) value\n              -4294967296.\n          03 filler pic s9(38) value\n              -2147483648.\n          03 filler pic s9(38) value\n              -1073741824.\n          03 filler pic s9(38) value\n              -536870912.\n          03 filler pic s9(38) value\n              -268435456.\n          03 filler pic s9(38) value\n              -134217728.\n          03 filler pic s9(38) value\n              -67108864.\n          03 filler pic s9(38) value\n              -33554432.\n          03 filler pic s9(38) value\n              -16777216.\n          03 filler pic s9(38) value\n              -8388608.\n          03 filler pic s9(38) value\n              -4194304.\n          03 filler pic s9(38) value\n              -2097152.\n          03 filler pic s9(38) value\n              -1048576.\n          03 filler pic s9(38) value\n              -524288.\n          03 filler pic s9(38) value\n              -262144.\n          03 filler pic s9(38) value\n              -131072.\n          03 filler pic s9(38) value\n              -65536.\n          03 filler pic s9(38) value\n              -32768.\n          03 filler pic s9(38) value\n              -16384.\n          03 filler pic s9(38) value\n              -8192.\n          03 filler pic s9(38) value\n              -4096.\n          03 filler pic s9(38) value\n              -2048.\n          03 filler pic s9(38) value\n              -1024.\n          03 filler pic s9(38) value\n              -512.\n          03 filler pic s9(38) value\n              -256.\n          03 filler pic s9(38) value\n              -128.\n          03 filler pic s9(38) value\n              -64.\n          03 filler pic s9(38) value\n              -32.\n          03 filler pic s9(38) value\n              -16.\n          03 filler pic s9(38) value\n              -8.\n          03 filler pic s9(38) value\n              -4.\n          03 filler pic s9(38) value\n              -2.\n          03 filler pic s9(38) value\n              -1.\n          03 filler pic s9(38) value\n              0.\n          03 filler pic s9(38) value\n              1.\n          03 filler pic s9(38) value\n              2.\n          03 filler pic s9(38) value\n              4.\n          03 filler pic s9(38) value\n              8.\n          03 filler pic s9(38) value\n              16.\n          03 filler pic s9(38) value\n              32.\n          03 filler pic s9(38) value\n              64.\n          03 filler pic s9(38) value\n              128.\n          03 filler pic s9(38) value\n              256.\n          03 filler pic s9(38) value\n              512.\n          03 filler pic s9(38) value\n              1024.\n          03 filler pic s9(38) value\n              2048.\n          03 filler pic s9(38) value\n              4096.\n          03 filler pic s9(38) value\n              8192.\n          03 filler pic s9(38) value\n              16384.\n          03 filler pic s9(38) value\n              32768.\n          03 filler pic s9(38) value\n              65536.\n          03 filler pic s9(38) value\n              131072.\n          03 filler pic s9(38) value\n              262144.\n          03 filler pic s9(38) value\n              524288.\n          03 filler pic s9(38) value\n              1048576.\n          03 filler pic s9(38) value\n              2097152.\n          03 filler pic s9(38) value\n              4194304.\n          03 filler pic s9(38) value\n              8388608.\n          03 filler pic s9(38) value\n              16777216.\n          03 filler pic s9(38) value\n              33554432.\n          03 filler pic s9(38) value\n              67108864.\n          03 filler pic s9(38) value\n              134217728.\n          03 filler pic s9(38) value\n              268435456.\n          03 filler pic s9(38) value\n              536870912.\n          03 filler pic s9(38) value\n              1073741824.\n          03 filler pic s9(38) value\n              2147483648.\n          03 filler pic s9(38) value\n              4294967296.\n          03 filler pic s9(38) value\n              8589934592.\n          03 filler pic s9(38) value\n              17179869184.\n          03 filler pic s9(38) value\n              34359738368.\n          03 filler pic s9(38) value\n              68719476736.\n          03 filler pic s9(38) value\n              137438953472.\n          03 filler pic s9(38) value\n              274877906944.\n          03 filler pic s9(38) value\n              549755813888.\n          03 filler pic s9(38) value\n              1099511627776.\n          03 filler pic s9(38) value\n              2199023255552.\n          03 filler pic s9(38) value\n              4398046511104.\n          03 filler pic s9(38) value\n              8796093022208.\n          03 filler pic s9(38) value\n              17592186044416.\n          03 filler pic s9(38) value\n              35184372088832.\n          03 filler pic s9(38) value\n              70368744177664.\n          03 filler pic s9(38) value\n              140737488355328.\n          03 filler pic s9(38) value\n              281474976710656.\n          03 filler pic s9(38) value\n              562949953421312.\n          03 filler pic s9(38) value\n              1125899906842624.\n          03 filler pic s9(38) value\n              2251799813685248.\n          03 filler pic s9(38) value\n              4503599627370496.\n          03 filler pic s9(38) value\n              9007199254740992.\n          03 filler pic s9(38) value\n              18014398509481984.\n          03 filler pic s9(38) value\n              36028797018963968.\n          03 filler pic s9(38) value\n              72057594037927936.\n          03 filler pic s9(38) value\n              144115188075855872.\n          03 filler pic s9(38) value\n              288230376151711744.\n          03 filler pic s9(38) value\n              576460752303423488.\n          03 filler pic s9(38) value\n              1152921504606846976.\n          03 filler pic s9(38) value\n              2305843009213693952.\n          03 filler pic s9(38) value\n              4611686018427387904.\n          03 filler pic s9(38) value\n              9223372036854775808.\n          03 filler pic s9(38) value\n              18446744073709551616.\n          03 filler pic s9(38) value\n              36893488147419103232.\n          03 filler pic s9(38) value\n              73786976294838206464.\n          03 filler pic s9(38) value\n              147573952589676412928.\n          03 filler pic s9(38) value\n              295147905179352825856.\n          03 filler pic s9(38) value\n              590295810358705651712.\n          03 filler pic s9(38) value\n              1180591620717411303424.\n          03 filler pic s9(38) value\n              2361183241434822606848.\n          03 filler pic s9(38) value\n              4722366482869645213696.\n          03 filler pic s9(38) value\n              9444732965739290427392.\n          03 filler pic s9(38) value\n              18889465931478580854784.\n          03 filler pic s9(38) value\n              37778931862957161709568.\n          03 filler pic s9(38) value\n              75557863725914323419136.\n          03 filler pic s9(38) value\n              151115727451828646838272.\n          03 filler pic s9(38) value\n              302231454903657293676544.\n          03 filler pic s9(38) value\n              604462909807314587353088.\n          03 filler pic s9(38) value\n              1208925819614629174706176.\n          03 filler pic s9(38) value\n              2417851639229258349412352.\n          03 filler pic s9(38) value\n              4835703278458516698824704.\n          03 filler pic s9(38) value\n              9671406556917033397649408.\n          03 filler pic s9(38) value\n              19342813113834066795298816.\n          03 filler pic s9(38) value\n              38685626227668133590597632.\n          03 filler pic s9(38) value\n              77371252455336267181195264.\n          03 filler pic s9(38) value\n              154742504910672534362390528.\n          03 filler pic s9(38) value\n              309485009821345068724781056.\n          03 filler pic s9(38) value\n              618970019642690137449562112.\n          03 filler pic s9(38) value\n              1237940039285380274899124224.\n          03 filler pic s9(38) value\n              2475880078570760549798248448.\n          03 filler pic s9(38) value\n              4951760157141521099596496896.\n          03 filler pic s9(38) value\n              9903520314283042199192993792.\n          03 filler pic s9(38) value\n              19807040628566084398385987584.\n          03 filler pic s9(38) value\n              39614081257132168796771975168.\n          03 filler pic s9(38) value\n              79228162514264337593543950336.\n          03 filler pic s9(38) value\n              158456325028528675187087900672.\n          03 filler pic s9(38) value\n              316912650057057350374175801344.\n          03 filler pic s9(38) value\n              633825300114114700748351602688.\n          03 filler pic s9(38) value\n              1267650600228229401496703205376.\n          03 filler pic s9(38) value\n              2535301200456458802993406410752.\n          03 filler pic s9(38) value\n              5070602400912917605986812821504.\n          03 filler pic s9(38) value\n              10141204801825835211973625643008.\n          03 filler pic s9(38) value\n              20282409603651670423947251286016.\n          03 filler pic s9(38) value\n              40564819207303340847894502572032.\n          03 filler pic s9(38) value\n              81129638414606681695789005144064.\n          03 filler pic s9(38) value\n              162259276829213363391578010288128.\n          03 filler pic s9(38) value\n              324518553658426726783156020576256.\n          03 filler pic s9(38) value\n              649037107316853453566312041152512.\n          03 filler pic s9(38) value\n              1298074214633706907132624082305024.\n          03 filler pic s9(38) value\n              2596148429267413814265248164610048.\n          03 filler pic s9(38) value\n              5192296858534827628530496329220096.\n          03 filler pic s9(38) value\n              10384593717069655257060992658440192.\n          03 filler pic s9(38) value\n              20769187434139310514121985316880384.\n          03 filler pic s9(38) value\n              41538374868278621028243970633760768.\n          03 filler pic s9(38) value\n              83076749736557242056487941267521536.\n          03 filler pic s9(38) value\n              166153499473114484112975882535043072.\n          03 filler pic s9(38) value\n              332306998946228968225951765070086144.\n          03 filler pic s9(38) value\n              664613997892457936451903530140172288.\n          03 filler pic s9(38) value\n              1329227995784915872903807060280344576.\n          03 filler pic s9(38) value\n              2658455991569831745807614120560689152.\n          03 filler pic s9(38) value\n              5316911983139663491615228241121378304.\n          03 filler pic s9(38) value\n              10633823966279326983230456482242756608.\n          03 filler pic s9(38) value\n              21267647932558653966460912964485513216.\n          03 filler pic s9(38) value\n              42535295865117307932921825928971026432.\n          03 filler pic s9(38) value\n              85070591730234615865843651857942052864.\n       01  nameNeeded redefines powersOf2Table.\n           05  pow  pic s9(38) occurs 255 ascending pow indexed i.\n      \n       linkage section.\n       01 n           pic s9(38).\n       01 result      pic s9(38).\n      \n       procedure division using n result.\n      \n          if n < -85070591730234615865843651857942052864\n              move -85070591730234615865843651857942052864\n              to result\n              goback\n          end-if\n      \n          set i to 2\n          search pow\n              when pow(i - 1) <= n and pow(i) > n\n                        move pow(i) to result\n          end-search.\n      \n       end program NextLower.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56c5847f27be2c3db20009c3":[{"id":20894,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUBTRACT-SUM.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(9).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE \"apple\" TO RESULT.\n       END PROGRAM SUBTRACT-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20895,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUBTRACT-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(9).\n       PROCEDURE DIVISION USING N RESULT.\n       MOVE 'apple' TO RESULT.\n       END PROGRAM SUBTRACT-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20896,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUBTRACT-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(9).\n       PROCEDURE DIVISION USING N RESULT.\n           move 'apple' to result.\n       END PROGRAM SUBTRACT-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20897,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUBTRACT-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(9).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Move \"apple\" to result\n      \n          Goback.\n       END PROGRAM SUBTRACT-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20898,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUBTRACT-SUM.\n       DATA DIVISION.\n       working-storage section.\n       77 i           usage is index.\n       77 summe       pic s9(9) comp-5.\n       01 fruits.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'cucumber'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'orange'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'grape'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'pear'.\n          05          pic a(9) value 'cherry'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'kiwi'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'banana'.\n          05          pic a(9) value 'melon'.\n          05          pic a(9) value 'pineapple'.\n          05          pic a(9) value 'apple'.\n          05          pic a(9) value 'pineapple'.\n       01 fruit-tab   pic a(9) occurs 100 redefines fruits.\n      \n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 n-char      pic 9 occurs 8 redefines n.\n       01 RESULT      PIC a(9).\n       PROCEDURE DIVISION USING N RESULT.\n          perform test after until n < 100\n              set summe to 0\n              perform varying i from 1 until i > function length(n)\n                 add n-char(i) to summe\n              end-perform\n              compute n = n - summe\n          end-perform\n          move fruit-tab(n) to result     \n          Goback.\n       END PROGRAM SUBTRACT-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20899,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUBTRACT-SUM.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(9).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE \"apple\" TO RESULT.\n       END PROGRAM SUBTRACT-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56cd44e1aa4ac7879200010b":[{"id":20900,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IsUpperCase.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 S           PIC X(50).\n       01 RESULT      PIC 9.\n\n       PROCEDURE DIVISION USING S RESULT.\n           INITIALIZE RESULT\n           IF  S = FUNCTION UPPER-CASE(S)\n               MOVE 1  TO RESULT\n           END-IF.\n       END PROGRAM IsUpperCase.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20901,"user_id":168,"body":"       identification division.\n       program-id. IsUpperCase.\n       data division.\n       linkage section.\n       01 s           pic x(50).\n       01 result      pic 9.\n      \n       procedure division using s result.\n          if function upper-case(s) = s then\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program IsUpperCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20902,"user_id":null,"body":"       identification division.\n       program-id. IsUpperCase.\n       data division.\n       linkage section.\n       01 s           pic x(50).\n       01 result      pic 9.\n      \n       procedure division using s result.\n          initialize result\n          if s = function upper-case(s) then\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n    \n          goback.\n       end program IsUpperCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20903,"user_id":null,"body":"       identification division.\n       program-id. IsUpperCase.\n       data division.\n       linkage section.\n       01 s           pic x(50).\n       01 result      pic 9.\n      \n       procedure division using s result.\n          if function upper-case(s) = s then\n             set result to 1\n          else\n             set result to 0\n          end-if\n          goback.\n       end program IsUpperCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20904,"user_id":53,"body":"       identification division.\n       program-id. IsUpperCase.\n       data division.\n       linkage section.\n       01 s           pic x(50).\n       01 result      pic 9.\n       procedure division using s result.\n          initialize result\n          if s = function upper-case(s) then\n            move 1 to result\n          end-if\n          goback.\n       end program IsUpperCase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20905,"user_id":50,"body":"       identification division.\n       program-id. IsUpperCase.\n      \n       data division.\n       linkage section.\n       01 s           pic x(50).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          if s = function upper-case(s)\n            then move 1 to result\n            else move 0 to result.\n      \n       end program IsUpperCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56d0a591c6c8b466ca00118b":[{"id":20906,"user_id":421,"body":"       identification division.\n       program-id. is-triangular.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       WORKING-STORAGE SECTION.\n       01 n           pic 9(4).\n       linkage section.\n       01 t           pic 9(8).\n       01 result      pic 9.\n       procedure division using t result.\n           INITIALIZE result\n           COMPUTE n = FUNCTION SQRT(8 * t + 1)\n           IF n * n = t * 8 + 1 THEN\n               COMPUTE result = 1\n           END-IF.\n       end program is-triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20907,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. is-triangular.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 T           PIC 9(8).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING T RESULT.\n           COMPUTE RESULT ROUNDED = ((2 * T) ** .5)\n           COMPUTE RESULT ROUNDED = ((2 * T + 1) ** .5) - RESULT.\n       END PROGRAM is-triangular.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20908,"user_id":168,"body":"       identification division.\n       program-id. is-triangular.\n\n       data division.\n       working-storage section.\n       01 n           pic 9(8).\n       linkage section.\n       01 t           pic 9(8).\n       01 result      pic 9.\n       procedure division using t result.\n          compute n = (2 * t) ** 0.5\n          if n * (n + 1) = 2 * t\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program is-triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20909,"user_id":53,"body":"       identification division.\n       program-id. is-triangular.\n\n       data division.\n       local-storage section.\n       01 q           pic 9(8).\n       linkage section.\n       01 t           pic 9(8).\n       01 result      pic 9.\n       procedure division using t result.\n          compute q = (2 * t) ** 0.5\n          move 0 to result\n          if q * (q + 1) = 2 * t then\n            move 1 to result\n          end-if\n          goback.\n       end program is-triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20910,"user_id":50,"body":"       identification division.\n       program-id. is-triangular.\n\n       data division.\n       local-storage section.\n       01 n           pic 9(8)v9(19).\n       linkage section.\n       01 t           pic 9(8).\n       01 result      pic 9.\n       procedure division using t result.\n      \n          compute n = function sqrt(8 * t + 1)\n      \n          if function rem(n,1) = 0\n             and function rem(function integer(n), 2) = 1\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program is-triangular.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56d8f14cba01a83cdb0002a2":[{"id":20911,"user_id":421,"body":"       identification division.\n       program-id. getPositions.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 person1 pic 9(8).\n           05 person2 pic 9(8).\n           05 person3 pic 9(8).\n      \n       procedure division using n result.\n           compute person1 = function rem(n, 3)\n           compute person2 = function rem(n \/ 3, 3)\n           compute person3 = function rem(n \/ 9, 3).\n       end program getPositions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20912,"user_id":168,"body":"       identification division.\n       program-id. getPositions.\n       data division.\n      \n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n            05 xs pic 9(8) occurs 3 times indexed by i.\n      \n       procedure division using n result.\n           perform varying i from 1 until i > 3\n              divide n by 3 giving n remainder xs(i)\n           end-perform.\n       end program getPositions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20913,"user_id":50,"body":"       identification division.\n       program-id. getPositions.\n       data division.\n      \n       linkage section.\n       01  n             pic 9(8).\n       01  result.\n           05 person-1   pic 9(8).\n           05 person-2   pic 9(8).\n           05 person-3   pic 9(8).\n      \n       procedure division using n result.\n      \n           compute person-1 = function rem(n, 3)\n           divide 3 into n\n           compute person-2 = function rem(n, 3)\n           divide 3 into n\n           compute person-3 = function rem(n, 3)\n      \n           goback.\n       end program getPositions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20914,"user_id":null,"body":"       identification division.\n       program-id. getPositions.\n       data division.\n      \n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 person1 pic 9(8).\n           05 person2 pic 9(8).\n           05 person3 pic 9(8).\n      \n       procedure division using n result.\n         compute person1 = function mod(n, 3)\n         compute person2 = function mod(n \/ 3, 3)\n         compute person3 = function mod(n \/ 9, 3).\n       end program getPositions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20915,"user_id":53,"body":"       identification division.\n       program-id. getPositions.\n       data division.\n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 person1 pic 9(8).\n           05 person2 pic 9(8).\n           05 person3 pic 9(8).\n       procedure division using n result.\n           compute person1 = function rem(n, 3)\n           compute person2 = function rem(n \/ 3, 3)\n           compute person3 = function rem(n \/ 9, 3)\n           goback.\n       end program getPositions.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56d904db9963e9cf5000037d":[{"id":20916,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TESTIT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 XA          PIC X(4) COMP-5.\n       01 XB          PIC X(4) COMP-5.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           MOVE A   TO XA\n           MOVE B   TO XB\n           CALL 'CBL_OR' USING XA XB BY VALUE 2\n           MOVE XB  TO RESULT.\n       END PROGRAM TESTIT.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20917,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TESTIT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 p           PIC 9(8).\n       01 d           PIC 9(8).\n       01 l           PIC 9(8).\n       01 c           PIC 9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n          perform until a = 0 and b = 0\n            compute d = function rem (a, 2) +\n              function rem (b, 2)\n            if d > 0 then\n              compute result = result + 2 ** p\n            end-if\n            compute a = a \/ 2\n            compute b = b \/ 2\n            add 1 to p\n          end-perform\n          goback.\n       END PROGRAM TESTIT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20918,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TESTIT.\n       DATA DIVISION.\n       working-storage section.\n       01 x           usage binary-long.\n       01 y           usage binary-long.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n          move a to x\n          move b to y\n          call 'CBL_OR' using x y by value 4\n          move y to result.\n       END PROGRAM TESTIT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20919,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TESTIT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 ra          PIC 9.\n       01 rb          PIC 9.\n       01 l           PIC 9(8).\n       01 c           PIC 9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n\n          move 0 to result,\n          move 0 to c,\n          move 0 to l,\n          perform until a = 0 and b = 0 ,\n            divide 2 into a giving a remainder ra,\n            divide 2 into b giving b remainder rb,\n            compute c = c * 2 + function min(1, ra + rb),\n            if c = 0 then add 1 to l end-if \n          end-perform\n                  \n          Perform until c = 0,\n            divide 2 into c giving c remainder ra\n            compute result = 2 * result + ra\n          end-perform\n      \n          compute result = result * 2 ** l\n\n          Goback.\n       END PROGRAM TESTIT.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56dec885c54a926dcd001095":[{"id":20920,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           MULTIPLY -1 BY N GIVING RESULT.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20921,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      * HAJIME!\n      \n        IF N IS ZERO THEN\n          DISPLAY 0\n        ELSE          \n          MULTIPLY -1 BY N GIVING RESULT\n          DISPLAY RESULT\n        END-IF.\n      \n        END PROGRAM OPPOSITE.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20922,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      * HAJIME!\n           COMPUTE RESULT = N * -1.\n           GOBACK.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20923,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           MULTIPLY -1 BY N GIVING RESULT.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20924,"user_id":390,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      * HAJIME!\n        subtract N from 0 giving RESULT.\n        \n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20925,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = -N\n           GOBACK.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20926,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          COMPUTE RESULT = N * -1\n          END-COMPUTE.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20927,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      * HAJIME!\n       EVALUATE FUNCTION ABS (N) \n              WHEN N\n                   SUBTRACT N FROM 0 GIVING  RESULT\n              WHEN OTHER\n                   MOVE FUNCTION ABS (N) TO RESULT\n       END-EVALUATE.\n         END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20928,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           multiply n by -1 giving result.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20929,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. OPPOSITE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(8).\n       01 RESULT      PIC S9(8).\n       PROCEDURE DIVISION USING N RESULT.\n            compute RESULT = N * (-1).\n            goback.\n       END PROGRAM OPPOSITE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56e3cd1d93c3d940e50006a4":[{"id":20930,"user_id":421,"body":"       identification division.\n       program-id. makeValley.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  startback         pic 99.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs                  occurs 0 to 20 times \n                                  depending on arr-length\n                                  indexed by i.\n                 07 val pic s9(3).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic s9(3) occurs 0 to 20 times \n                                  depending on res-length\n                                  indexed by j.\n      \n       procedure division using arr result.\n           sort xs descending key val\n           perform varying i from 1 by 2 until i > arr-length\n               add 1 to res-length\n               move val(i) to res(res-length)\n           end-perform\n           compute startback = arr-length - function rem(arr-length, 2)  \n           perform varying j from startback by -2 until j = 0\n               add 1 to res-length\n               move val(j) to res(res-length)\n           end-perform.\n       end program makeValley.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20931,"user_id":168,"body":"       identification division.\n       program-id. makeValley.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 0 to 20 times depending on arr-length.\n              10 xs          pic s9(3).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic s9(3) occurs 0 to 20 times \n                                  depending on res-length indexed i j k.\n      \n       procedure division using arr result.\n           move arr-length to res-length k\n           move 1 to j\n           sort tbl on descending key xs\n           perform varying i from 1 until i > arr-length\n               if function mod(i, 2) = 1\n                   move xs(i) to res(j)\n                   add 1 to j\n               else\n                   move xs(i) to res(k)\n                   subtract 1 from k\n               end-if\n           end-perform.\n       end program makeValley.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20932,"user_id":53,"body":"       identification division.\n       program-id. makeValley.\n       data division.\n       local-storage section.\n       01  dx                pic S9(3).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl            occurs 0 to 20 times \n                             depending on arr-length\n                             indexed by i.\n              07 xs          pic s9(3).\n       01  result.\n           05 res-length     pic 99.\n           05 ys             pic s9(3) occurs 0 to 20 times \n                             depending on res-length\n                             indexed by j.\n       procedure division using arr result.\n          move arr-length to res-length\n          sort tbl on ascending xs\n          compute j = 1 + function integer (res-length \/ 2)\n          move 1 to dx\n          if function rem (res-length, 2) = 0 then\n            compute dx = dx * -1\n          end-if\n          perform varying i from 1 until i > arr-length\n            move xs(i) to ys(j)\n            add dx to j\n            compute dx = dx * -1\n            if dx > 0 then\n              compute dx = dx + 1\n            else\n              compute dx = dx - 1\n            end-if\n          end-perform\n          goback.\n       end program makeValley.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20933,"user_id":50,"body":"       identification division.\n       program-id. makeValley.\n       data division.\n       local-storage section.\n       01  i                pic s9(2).\n       01  k                pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 0 to 20 times depending on arr-length.\n              07 xs          pic s9(3).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic s9(3) occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using arr result.\n      \n           sort tbl on ascending xs\n           move 0 to res-length\n           perform varying i from arr-length by -2 until i < 1\n              add 1 to res-length\n              move xs(i) to res(res-length)\n           end-perform\n      \n           compute k = 1 + function rem(arr-length, 2)\n           \n           perform varying i from k by 2 until i > arr-length\n              add 1 to res-length\n              move xs(i) to res(res-length)\n           end-perform\n      \n           goback.\n       end program makeValley.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56e56756404bb1c950000992":[{"id":20934,"user_id":53,"body":"       identification division.\n       program-id. SumDiffProdLCM.\n       data division.\n       local-storage section.\n       01  a                 pic 9(8).\n       01  b                 pic 9(8).\n       01  d                 pic 9(8).\n       linkage section.\n       01  pairs.\n           05  pairs-length   pic 9(2).\n           05  pair           occurs 0 to 10 times \n                              depending on pairs-length\n                              indexed by i.\n               07 fst         pic 9(8).\n               07 snd         pic 9(8).\n       01  result             pic 9(20).\n       procedure division using pairs result.\n          initialize result\n          perform varying i from 1 until i > pairs-length\n            move fst of pair(i) to a\n            move snd of pair(i) to b\n            call 'gcd' using by content a b by reference d\n            if b = 0 then\n              compute result = result + a * b\n            else\n              compute result = result + a * (b - (b \/ d))\n            end-if\n          end-perform\n          goback.\n       end program SumDiffProdLCM.\n      \n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(8).\n       01 a           pic 9(8).\n       linkage section.\n       01 x           pic 9(8).\n       01 b           pic 9(8).\n       01 r           pic 9(8).\n       procedure division using x b r.\n           move x to a\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n           move a to r\n           goback.\n       end program gcd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20935,"user_id":50,"body":"       identification division.\n       program-id. SumDiffProdLCM.\n       data division.\n       local-storage section.\n       01  a                 pic 9(8).\n       01  b                 pic 9(8).\n       01  c                 pic 9(16).\n       01  d                 pic 9(8).\n      \n       linkage section.\n       01  pairs.\n           05  pairs-length   pic 9(2).\n           05  pair           occurs 0 to 10 times \n                              depending on pairs-length\n                              indexed i.\n               07 fst         pic 9(8).\n               07 snd         pic 9(8).\n       01  result             pic 9(20).\n      \n       procedure division using pairs result.\n      \n          move 0 to result\n          perform varying i from 1 until i > pairs-length\n              move fst of pair(i) to a\n              move snd of pair(i) to b\n              compute c = a * b\n              perform gcd\n              compute result = result + c - c \/ function max(a, 1)\n          end-perform\n      \n          goback.\n      \n          gcd.\n            perform until b = 0\n              move b to d\n              move function rem(a, b) to b\n              move d to a\n            end-perform\n            .\n      \n       end program SumDiffProdLCM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56e93159f6c72164b700062b":[{"id":20936,"user_id":168,"body":"       identification division.\n       program-id. PrimeMaxLengthChain.\n       data division.\n       working-storage section.\n       01  max-n      constant 500000.\n       01  is-prime   pic 9.\n       01  n-primes   usage index.\n       01  primes     occurs 0 to 50000 times depending on n-primes\n                      ascending key ps indexed by k.\n           05 ps      pic 9(6).\n       01  n-sums     usage index.\n       01  sums       occurs 0 to 50000 times depending on n-sums \n                      indexed by r.\n           05 ss      pic 9(6).\n           05 ks      pic 9(6).\n       01  s          pic 9(6).\n                      \n       01  i usage index.\n       01  j usage index.\n      \n       linkage section.\n       01  n             pic 9(6).\n       01  result.\n           05 resLength  pic 9(3).\n           05 res        pic 9(4) occurs 0 to 200 times \n                                  depending on resLength.\n      \n       procedure division using n result.\n          if n-primes = 0 then perform init-tables end-if\n          move 0 to resLength\n          move 1 to r\n          search sums varying r\n              at end move n-sums to r\n              when ss(r) >= n subtract 1 from r\n          end-search\n          perform varying i from r by -1 until i = 0 or ks(i) <> ks(r)\n              add 1 to resLength\n              move ss(i) to res(resLength)\n          end-perform\n          perform varying i from 1 until 2 * i > resLength\n              move res(i) to s\n              move res(resLength - i + 1) to res(i)\n              move s to res(resLength - i + 1)\n          end-perform\n          goback.\n       \n       init-tables.\n          move 1 to n-primes\n          move 2 to ps(1)\n          perform varying i from 3 by 2 until i > max-n\n              move 1 to is-prime\n              perform varying k from 1\n                      until k > n-primes or ps(k) * ps(k) > i\n                  if function mod(i, ps(k)) = 0\n                      move 0 to is-prime\n                      exit perform\n                  end-if\n              end-perform\n              if is-prime = 1\n                  add 1 to n-primes\n                  move i to ps(n-primes)\n              end-if\n          end-perform\n      \n          perform varying i from 1 until i >= n-primes\n              move ps(i) to s\n              add 1 to i giving j\n              perform varying j from j until j > n-primes\n                  add ps(j) to s\n                  if s > max-n then exit perform end-if\n                  search all primes\n                      when ps(k) = s\n                          add 1 to n-sums\n                          move s to ss(n-sums)\n                          subtract i from j giving ks(n-sums)\n                  end-search\n              end-perform\n          end-perform\n      \n          sort sums on ascending key ss descending key ks\n\n          move 0 to s j\n          perform varying i from 1 until i > n-sums\n              if ks(i) >= s\n                  add 1 to j\n                  move ks(i) to s\n                  move sums(i) to sums(j)\n              end-if\n          end-perform\n          move j to n-sums  \n          .\n       end program PrimeMaxLengthChain.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20937,"user_id":50,"body":"       identification division.\n       program-id. PrimeMaxLengthChain.\n       data division.\n       working-storage section.\n       01  tble.\n           05  filler.\n               07  filler pic 9(6) value 2.\n               07  filler pic 9(3) value 1.\n           05  filler.\n               07  filler pic 9(6) value 3.\n               07  filler pic 9(3) value 1.\n           05  filler.\n               07  filler pic 9(6) value 5.\n               07  filler pic 9(3) value 2.\n           05  filler.\n               07  filler pic 9(6) value 17.\n               07  filler pic 9(3) value 4.\n           05  filler.\n               07  filler pic 9(6) value 41.\n               07  filler pic 9(3) value 6.\n           05  filler.\n               07  filler pic 9(6) value 127.\n               07  filler pic 9(3) value 9.\n           05  filler.\n               07  filler pic 9(6) value 197.\n               07  filler pic 9(3) value 12.\n           05  filler.\n               07  filler pic 9(6) value 281.\n               07  filler pic 9(3) value 14.\n           05  filler.\n               07  filler pic 9(6) value 379.\n               07  filler pic 9(3) value 15.\n           05  filler.\n               07  filler pic 9(6) value 491.\n               07  filler pic 9(3) value 15.\n           05  filler.\n               07  filler pic 9(6) value 499.\n               07  filler pic 9(3) value 17.\n           05  filler.\n               07  filler pic 9(6) value 563.\n               07  filler pic 9(3) value 17.\n           05  filler.\n               07  filler pic 9(6) value 857.\n               07  filler pic 9(3) value 19.\n           05  filler.\n               07  filler pic 9(6) value 953.\n               07  filler pic 9(3) value 21.\n           05  filler.\n               07  filler pic 9(6) value 1151.\n               07  filler pic 9(3) value 23.\n           05  filler.\n               07  filler pic 9(6) value 1259.\n               07  filler pic 9(3) value 25.\n           05  filler.\n               07  filler pic 9(6) value 1361.\n               07  filler pic 9(3) value 25.\n           05  filler.\n               07  filler pic 9(6) value 1583.\n               07  filler pic 9(3) value 27.\n           05  filler.\n               07  filler pic 9(6) value 1823.\n               07  filler pic 9(3) value 27.\n           05  filler.\n               07  filler pic 9(6) value 2069.\n               07  filler pic 9(3) value 27.\n           05  filler.\n               07  filler pic 9(6) value 2099.\n               07  filler pic 9(3) value 29.\n           05  filler.\n               07  filler pic 9(6) value 2399.\n               07  filler pic 9(3) value 31.\n           05  filler.\n               07  filler pic 9(6) value 2417.\n               07  filler pic 9(3) value 33.\n           05  filler.\n               07  filler pic 9(6) value 2579.\n               07  filler pic 9(3) value 35.\n           05  filler.\n               07  filler pic 9(6) value 2897.\n               07  filler pic 9(3) value 35.\n           05  filler.\n               07  filler pic 9(6) value 2909.\n               07  filler pic 9(3) value 37.\n           05  filler.\n               07  filler pic 9(6) value 3803.\n               07  filler pic 9(3) value 39.\n           05  filler.\n               07  filler pic 9(6) value 3821.\n               07  filler pic 9(3) value 41.\n           05  filler.\n               07  filler pic 9(6) value 4217.\n               07  filler pic 9(3) value 43.\n           05  filler.\n               07  filler pic 9(6) value 4421.\n               07  filler pic 9(3) value 43.\n           05  filler.\n               07  filler pic 9(6) value 4651.\n               07  filler pic 9(3) value 45.\n           05  filler.\n               07  filler pic 9(6) value 4871.\n               07  filler pic 9(3) value 45.\n           05  filler.\n               07  filler pic 9(6) value 5107.\n               07  filler pic 9(3) value 47.\n           05  filler.\n               07  filler pic 9(6) value 5333.\n               07  filler pic 9(3) value 47.\n           05  filler.\n               07  filler pic 9(6) value 5813.\n               07  filler pic 9(3) value 49.\n           05  filler.\n               07  filler pic 9(6) value 6053.\n               07  filler pic 9(3) value 49.\n           05  filler.\n               07  filler pic 9(6) value 6079.\n               07  filler pic 9(3) value 53.\n           05  filler.\n               07  filler pic 9(6) value 6599.\n               07  filler pic 9(3) value 55.\n           05  filler.\n               07  filler pic 9(6) value 7699.\n               07  filler pic 9(3) value 60.\n           05  filler.\n               07  filler pic 9(6) value 8273.\n               07  filler pic 9(3) value 61.\n           05  filler.\n               07  filler pic 9(6) value 8893.\n               07  filler pic 9(3) value 64.\n           05  filler.\n               07  filler pic 9(6) value 9521.\n               07  filler pic 9(3) value 65.\n           05  filler.\n               07  filler pic 9(6) value 10181.\n               07  filler pic 9(3) value 65.\n           05  filler.\n               07  filler pic 9(6) value 10859.\n               07  filler pic 9(3) value 65.\n           05  filler.\n               07  filler pic 9(6) value 11597.\n               07  filler pic 9(3) value 71.\n           05  filler.\n               07  filler pic 9(6) value 12329.\n               07  filler pic 9(3) value 71.\n           05  filler.\n               07  filler pic 9(6) value 12713.\n               07  filler pic 9(3) value 73.\n           05  filler.\n               07  filler pic 9(6) value 13099.\n               07  filler pic 9(3) value 75.\n           05  filler.\n               07  filler pic 9(6) value 13877.\n               07  filler pic 9(3) value 75.\n           05  filler.\n               07  filler pic 9(6) value 14669.\n               07  filler pic 9(3) value 75.\n           05  filler.\n               07  filler pic 9(6) value 15527.\n               07  filler pic 9(3) value 79.\n           05  filler.\n               07  filler pic 9(6) value 16823.\n               07  filler pic 9(3) value 81.\n           05  filler.\n               07  filler pic 9(6) value 18131.\n               07  filler pic 9(3) value 81.\n           05  filler.\n               07  filler pic 9(6) value 19013.\n               07  filler pic 9(3) value 81.\n           05  filler.\n               07  filler pic 9(6) value 21407.\n               07  filler pic 9(3) value 85.\n           05  filler.\n               07  filler pic 9(6) value 22037.\n               07  filler pic 9(3) value 95.\n           05  filler.\n               07  filler pic 9(6) value 22039.\n               07  filler pic 9(3) value 96.\n           05  filler.\n               07  filler pic 9(6) value 24133.\n               07  filler pic 9(3) value 100.\n           05  filler.\n               07  filler pic 9(6) value 25237.\n               07  filler pic 9(3) value 102.\n           05  filler.\n               07  filler pic 9(6) value 28087.\n               07  filler pic 9(3) value 103.\n           05  filler.\n               07  filler pic 9(6) value 28099.\n               07  filler pic 9(3) value 105.\n           05  filler.\n               07  filler pic 9(6) value 28687.\n               07  filler pic 9(3) value 105.\n           05  filler.\n               07  filler pic 9(6) value 28697.\n               07  filler pic 9(3) value 108.\n           05  filler.\n               07  filler pic 9(6) value 31729.\n               07  filler pic 9(3) value 111.\n           05  filler.\n               07  filler pic 9(6) value 32353.\n               07  filler pic 9(3) value 114.\n           05  filler.\n               07  filler pic 9(6) value 33623.\n               07  filler pic 9(3) value 115.\n           05  filler.\n               07  filler pic 9(6) value 34913.\n               07  filler pic 9(3) value 117.\n           05  filler.\n               07  filler pic 9(6) value 36217.\n               07  filler pic 9(3) value 117.\n           05  filler.\n               07  filler pic 9(6) value 36871.\n               07  filler pic 9(3) value 117.\n           05  filler.\n               07  filler pic 9(6) value 37561.\n               07  filler pic 9(3) value 122.\n           05  filler.\n               07  filler pic 9(6) value 38921.\n               07  filler pic 9(3) value 124.\n           05  filler.\n               07  filler pic 9(6) value 41017.\n               07  filler pic 9(3) value 125.\n           05  filler.\n               07  filler pic 9(6) value 42451.\n               07  filler pic 9(3) value 125.\n           05  filler.\n               07  filler pic 9(6) value 42463.\n               07  filler pic 9(3) value 127.\n           05  filler.\n               07  filler pic 9(6) value 43201.\n               07  filler pic 9(3) value 130.\n           05  filler.\n               07  filler pic 9(6) value 44683.\n               07  filler pic 9(3) value 132.\n           05  filler.\n               07  filler pic 9(6) value 47711.\n               07  filler pic 9(3) value 133.\n           05  filler.\n               07  filler pic 9(6) value 49253.\n               07  filler pic 9(3) value 133.\n           05  filler.\n               07  filler pic 9(6) value 49279.\n               07  filler pic 9(3) value 137.\n           05  filler.\n               07  filler pic 9(6) value 52517.\n               07  filler pic 9(3) value 141.\n           05  filler.\n               07  filler pic 9(6) value 54167.\n               07  filler pic 9(3) value 143.\n           05  filler.\n               07  filler pic 9(6) value 55837.\n               07  filler pic 9(3) value 146.\n           05  filler.\n               07  filler pic 9(6) value 61027.\n               07  filler pic 9(3) value 152.\n           05  filler.\n               07  filler pic 9(6) value 64613.\n               07  filler pic 9(3) value 155.\n           05  filler.\n               07  filler pic 9(6) value 66463.\n               07  filler pic 9(3) value 158.\n           05  filler.\n               07  filler pic 9(6) value 70241.\n               07  filler pic 9(3) value 162.\n           05  filler.\n               07  filler pic 9(6) value 76099.\n               07  filler pic 9(3) value 163.\n           05  filler.\n               07  filler pic 9(6) value 78121.\n               07  filler pic 9(3) value 165.\n           05  filler.\n               07  filler pic 9(6) value 78139.\n               07  filler pic 9(3) value 167.\n           05  filler.\n               07  filler pic 9(6) value 79151.\n               07  filler pic 9(3) value 167.\n           05  filler.\n               07  filler pic 9(6) value 81203.\n               07  filler pic 9(3) value 169.\n           05  filler.\n               07  filler pic 9(6) value 84313.\n               07  filler pic 9(3) value 171.\n           05  filler.\n               07  filler pic 9(6) value 86453.\n               07  filler pic 9(3) value 178.\n           05  filler.\n               07  filler pic 9(6) value 92951.\n               07  filler pic 9(3) value 183.\n           05  filler.\n               07  filler pic 9(6) value 101999.\n               07  filler pic 9(3) value 191.\n           05  filler.\n               07  filler pic 9(6) value 102001.\n               07  filler pic 9(3) value 192.\n           05  filler.\n               07  filler pic 9(6) value 109147.\n               07  filler pic 9(3) value 198.\n           05  filler.\n               07  filler pic 9(6) value 115279.\n               07  filler pic 9(3) value 201.\n           05  filler.\n               07  filler pic 9(6) value 116531.\n               07  filler pic 9(3) value 203.\n           05  filler.\n               07  filler pic 9(6) value 116533.\n               07  filler pic 9(3) value 204.\n           05  filler.\n               07  filler pic 9(6) value 119069.\n               07  filler pic 9(3) value 206.\n           05  filler.\n               07  filler pic 9(6) value 121631.\n               07  filler pic 9(3) value 208.\n           05  filler.\n               07  filler pic 9(6) value 129419.\n               07  filler pic 9(3) value 214.\n           05  filler.\n               07  filler pic 9(6) value 132059.\n               07  filler pic 9(3) value 216.\n           05  filler.\n               07  filler pic 9(6) value 137477.\n               07  filler pic 9(3) value 217.\n           05  filler.\n               07  filler pic 9(6) value 138863.\n               07  filler pic 9(3) value 219.\n           05  filler.\n               07  filler pic 9(6) value 141671.\n               07  filler pic 9(3) value 221.\n           05  filler.\n               07  filler pic 9(6) value 147347.\n               07  filler pic 9(3) value 221.\n           05  filler.\n               07  filler pic 9(6) value 148817.\n               07  filler pic 9(3) value 225.\n           05  filler.\n               07  filler pic 9(6) value 153137.\n               07  filler pic 9(3) value 225.\n           05  filler.\n               07  filler pic 9(6) value 154579.\n               07  filler pic 9(3) value 225.\n           05  filler.\n               07  filler pic 9(6) value 157489.\n               07  filler pic 9(3) value 225.\n           05  filler.\n               07  filler pic 9(6) value 157561.\n               07  filler pic 9(3) value 229.\n           05  filler.\n               07  filler pic 9(6) value 157579.\n               07  filler pic 9(3) value 231.\n           05  filler.\n               07  filler pic 9(6) value 162007.\n               07  filler pic 9(3) value 231.\n           05  filler.\n               07  filler pic 9(6) value 163483.\n               07  filler pic 9(3) value 231.\n           05  filler.\n               07  filler pic 9(6) value 164963.\n               07  filler pic 9(3) value 231.\n           05  filler.\n               07  filler pic 9(6) value 164999.\n               07  filler pic 9(3) value 233.\n           05  filler.\n               07  filler pic 9(6) value 166541.\n               07  filler pic 9(3) value 237.\n           05  filler.\n               07  filler pic 9(6) value 171131.\n               07  filler pic 9(3) value 239.\n           05  filler.\n               07  filler pic 9(6) value 172687.\n               07  filler pic 9(3) value 241.\n           05  filler.\n               07  filler pic 9(6) value 175781.\n               07  filler pic 9(3) value 241.\n           05  filler.\n               07  filler pic 9(6) value 178889.\n               07  filler pic 9(3) value 241.\n           05  filler.\n               07  filler pic 9(6) value 182009.\n               07  filler pic 9(3) value 241.\n           05  filler.\n               07  filler pic 9(6) value 182099.\n               07  filler pic 9(3) value 247.\n           05  filler.\n               07  filler pic 9(6) value 182107.\n               07  filler pic 9(3) value 249.\n           05  filler.\n               07  filler pic 9(6) value 198197.\n               07  filler pic 9(3) value 251.\n           05  filler.\n               07  filler pic 9(6) value 199831.\n               07  filler pic 9(3) value 251.\n           05  filler.\n               07  filler pic 9(6) value 201599.\n               07  filler pic 9(3) value 257.\n           05  filler.\n               07  filler pic 9(6) value 203279.\n               07  filler pic 9(3) value 259.\n           05  filler.\n               07  filler pic 9(6) value 204979.\n               07  filler pic 9(3) value 261.\n           05  filler.\n               07  filler pic 9(6) value 210053.\n               07  filler pic 9(3) value 261.\n           05  filler.\n               07  filler pic 9(6) value 213461.\n               07  filler pic 9(3) value 261.\n           05  filler.\n               07  filler pic 9(6) value 213533.\n               07  filler pic 9(3) value 267.\n           05  filler.\n               07  filler pic 9(6) value 215261.\n               07  filler pic 9(3) value 267.\n           05  filler.\n               07  filler pic 9(6) value 218749.\n               07  filler pic 9(3) value 269.\n           05  filler.\n               07  filler pic 9(6) value 222269.\n               07  filler pic 9(3) value 273.\n           05  filler.\n               07  filler pic 9(6) value 225821.\n               07  filler pic 9(3) value 273.\n           05  filler.\n               07  filler pic 9(6) value 225829.\n               07  filler pic 9(3) value 275.\n           05  filler.\n               07  filler pic 9(6) value 240353.\n               07  filler pic 9(3) value 279.\n           05  filler.\n               07  filler pic 9(6) value 240371.\n               07  filler pic 9(3) value 281.\n           05  filler.\n               07  filler pic 9(6) value 240379.\n               07  filler pic 9(3) value 283.\n           05  filler.\n               07  filler pic 9(6) value 242243.\n               07  filler pic 9(3) value 283.\n           05  filler.\n               07  filler pic 9(6) value 244109.\n               07  filler pic 9(3) value 283.\n           05  filler.\n               07  filler pic 9(6) value 251609.\n               07  filler pic 9(3) value 285.\n           05  filler.\n               07  filler pic 9(6) value 255443.\n               07  filler pic 9(3) value 291.\n           05  filler.\n               07  filler pic 9(6) value 257353.\n               07  filler pic 9(3) value 291.\n           05  filler.\n               07  filler pic 9(6) value 263171.\n               07  filler pic 9(3) value 296.\n           05  filler.\n               07  filler pic 9(6) value 269069.\n               07  filler pic 9(3) value 297.\n           05  filler.\n               07  filler pic 9(6) value 281023.\n               07  filler pic 9(3) value 299.\n           05  filler.\n               07  filler pic 9(6) value 283079.\n               07  filler pic 9(3) value 305.\n           05  filler.\n               07  filler pic 9(6) value 287137.\n               07  filler pic 9(3) value 308.\n           05  filler.\n               07  filler pic 9(6) value 303643.\n               07  filler pic 9(3) value 309.\n           05  filler.\n               07  filler pic 9(6) value 303691.\n               07  filler pic 9(3) value 313.\n           05  filler.\n               07  filler pic 9(6) value 305783.\n               07  filler pic 9(3) value 313.\n           05  filler.\n               07  filler pic 9(6) value 310019.\n               07  filler pic 9(3) value 317.\n           05  filler.\n               07  filler pic 9(6) value 314267.\n               07  filler pic 9(3) value 317.\n           05  filler.\n               07  filler pic 9(6) value 318557.\n               07  filler pic 9(3) value 321.\n           05  filler.\n               07  filler pic 9(6) value 324991.\n               07  filler pic 9(3) value 321.\n           05  filler.\n               07  filler pic 9(6) value 325009.\n               07  filler pic 9(3) value 323.\n           05  filler.\n               07  filler pic 9(6) value 325019.\n               07  filler pic 9(3) value 326.\n           05  filler.\n               07  filler pic 9(6) value 329401.\n               07  filler pic 9(3) value 328.\n           05  filler.\n               07  filler pic 9(6) value 333821.\n               07  filler pic 9(3) value 330.\n           05  filler.\n               07  filler pic 9(6) value 338279.\n               07  filler pic 9(3) value 332.\n           05  filler.\n               07  filler pic 9(6) value 342761.\n               07  filler pic 9(3) value 334.\n           05  filler.\n               07  filler pic 9(6) value 351811.\n               07  filler pic 9(3) value 335.\n           05  filler.\n               07  filler pic 9(6) value 354097.\n               07  filler pic 9(3) value 337.\n           05  filler.\n               07  filler pic 9(6) value 356387.\n               07  filler pic 9(3) value 339.\n           05  filler.\n               07  filler pic 9(6) value 360977.\n               07  filler pic 9(3) value 341.\n           05  filler.\n               07  filler pic 9(6) value 360979.\n               07  filler pic 9(3) value 342.\n           05  filler.\n               07  filler pic 9(6) value 370261.\n               07  filler pic 9(3) value 343.\n           05  filler.\n               07  filler pic 9(6) value 372607.\n               07  filler pic 9(3) value 345.\n           05  filler.\n               07  filler pic 9(6) value 379667.\n               07  filler pic 9(3) value 350.\n           05  filler.\n               07  filler pic 9(6) value 393961.\n               07  filler pic 9(3) value 356.\n           05  filler.\n               07  filler pic 9(6) value 398771.\n               07  filler pic 9(3) value 358.\n           05  filler.\n               07  filler pic 9(6) value 408479.\n               07  filler pic 9(3) value 359.\n           05  filler.\n               07  filler pic 9(6) value 423257.\n               07  filler pic 9(3) value 361.\n           05  filler.\n               07  filler pic 9(6) value 423287.\n               07  filler pic 9(3) value 363.\n           05  filler.\n               07  filler pic 9(6) value 425819.\n               07  filler pic 9(3) value 365.\n           05  filler.\n               07  filler pic 9(6) value 428339.\n               07  filler pic 9(3) value 365.\n           05  filler.\n               07  filler pic 9(6) value 433421.\n               07  filler pic 9(3) value 367.\n           05  filler.\n               07  filler pic 9(6) value 433439.\n               07  filler pic 9(3) value 369.\n           05  filler.\n               07  filler pic 9(6) value 438521.\n               07  filler pic 9(3) value 369.\n           05  filler.\n               07  filler pic 9(6) value 441101.\n               07  filler pic 9(3) value 373.\n           05  filler.\n               07  filler pic 9(6) value 448859.\n               07  filler pic 9(3) value 375.\n           05  filler.\n               07  filler pic 9(6) value 448867.\n               07  filler pic 9(3) value 377.\n           05  filler.\n               07  filler pic 9(6) value 477809.\n               07  filler pic 9(3) value 377.\n           05  filler.\n               07  filler pic 9(6) value 478001.\n               07  filler pic 9(3) value 387.\n           05  filler.\n               07  filler pic 9(6) value 483377.\n               07  filler pic 9(3) value 389.\n           05  filler.\n               07  filler pic 9(6) value 496877.\n               07  filler pic 9(3) value 391.\n           05  filler.\n               07  filler pic 9(6) value 499607.\n               07  filler pic 9(3) value 393.\n       01  redefines tble.\n           03  pair occurs 191 indexed i.\n               05  k pic 9(6).\n               05  v pic 9(3).\n       \n       local-storage section.\n       01  m             pic 9(3).\n      \n       linkage section.\n       01  n             pic 9(6).\n       01  result.\n           05 resLength  pic 9(3).\n           05 res        pic 9(4) occurs 0 to 200 times \n                                  depending on resLength.\n      \n       procedure division using n result.\n      \n          perform varying i from 1 until k(i) >= n\n            evaluate m\n            when < v(i)\n               set resLength to 1\n               move k(i) to res(1)\n               move v(i) to m\n            when v(i)\n               set reslength up by 1\n               move k(i) to res(resLength)\n            end-evaluate\n          end-perform.\n      \n       end program PrimeMaxLengthChain.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56eb0be52caf798c630013c0":[{"id":20938,"user_id":50,"body":"       identification division.\n       program-id. UnluckyDays.\n      \n       data division.\n       local-storage section.\n       01  leap      pic 9.\n           88 isLeap value 1.\n       01  d1        pic 9.\n       01  rank      pic 9(3).\n       01  m         pic 9(2).\n       01  mth       pic 9(2).\n           88 month31 value 3, 5, 7, 8, 10, 12.\n      \n       linkage section.\n       01 y           pic 9(4).\n       01 result      pic 9(2).\n      \n       procedure division using y result.\n      \n          initialize result\n      \n          if function rem(y, 4) = 0\n             and y(3:) <> '00'\n             or function rem(y, 400) = 0\n             move 1 to leap\n          end-if\n      \n          perform getJanuaryFirstDay\n      \n          perform varying m from 1 until m = 13\n              perform gregorianToOrdinalDate\n              if function rem(rank + d1, 7) = 5\n                 display 'M ' m\n                 add 1 to result\n              end-if\n          end-perform\n      \n          goback.\n      \n          getJanuaryFirstDay.\n            compute d1 = function rem(\n                                    y \n                                  + function integer((y - 1) \/ 4)\n                                  - function integer((y - 1) \/ 100)\n                                  + function integer((y - 1) \/ 400)\n                                      , 7)\n            .\n      \n          gregorianToOrdinalDate.\n            evaluate m\n            when 1    move 12 to rank\n            when 2    move 43 to rank\n            when other\n                      compute rank = 71 + leap\n                      perform varying mth from 3 until mth = m\n                        if month31  add 31 to rank\n                        else        add 30 to rank end-if\n                      end-perform\n            end-evaluate\n            .\n      \n       end program UnluckyDays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56eb16655250549e4b0013f4":[{"id":20939,"user_id":50,"body":"       identification division.\n       program-id. MostFrequentDays.\n      \n       data division.\n      \n       working-storage section.\n       01  daysTble.\n           03 filler pic a(9) value 'Monday'.\n           03 filler pic a(9) value 'Tuesday'.\n           03 filler pic a(9) value 'Wednesday'.\n           03 filler pic a(9) value 'Thursday'.\n           03 filler pic a(9) value 'Friday'.\n           03 filler pic a(9) value 'Saturday'.\n           03 filler pic a(9) value 'Sunday'.\n       01  redefines daysTble.\n           03   weekDay pic a(9) occurs 7 indexed d.\n      \n       local-storage section.\n       01  l           pic 9 value 1.\n           88 nonLeap  value 1.\n       01  n           pic 9(2).\n       01  r           pic 9(2).\n       01  w           pic 9.\n      \n       linkage section.\n       01  y           pic 9(4).\n       01  result.\n           03  resLen  pic 9.\n           03  dy      pic a(9) occurs 7 depending resLen.\n      \n       procedure division using y result.\n      \n          divide y by 100 giving n remainder r\n          if function rem(y, 400) = 0\n          or function rem(y, 4) = 0 and r <> 0\n             set l to 0\n          end-if\n          \n          perform findDay1\n      \n          evaluate true\n          when nonLeap\n               set resLen to 1\n               move weekDay(d) to dy(1)\n          when d = 7\n               set resLen to 2\n               move 'Monday'  to dy(1)\n               move 'Sunday' to dy(2)\n         when other\n               set resLen to 2\n               move weekDay(d)     to dy(1)\n               move weekDay(d + 1) to dy(2)\n          end-evaluate\n      \n          goback.\n      \n          findDay1.\n            evaluate function rem(n, 4)\n            when 0     move 6 to w\n            when 1     move 4 to w\n            when 2     move 2 to w\n            when other move 0 to w\n            end-evaluate\n            compute d = function rem(\n                                 5 + r +\n                        function integer(\n                                     r \/ 4)\n                                 + 1 + l + w\n                                     , 7) + 1\n          .\n      \n       end program MostFrequentDays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56ec1e8492446a415e000b63":[{"id":20940,"user_id":168,"body":"       identification division.\n       program-id. onesCounter.\n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  j    usage index.\n       01  k    usage index.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 str.\n              10 xs          pic 9 occurs 0 to 70 times \n                                  depending on arr-length.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 40 times \n                                  depending on res-length.\n      \n       procedure division using arr result.\n          move 1 to i\n          move 0 to res-length\n          perform until i > arr-length\n              move 0 to k j\n              inspect str(i:) tallying j for leading '0'\n                                       k for leading '1'\n              add j k to i\n              if k > 0\n                  add 1 to res-length\n                  move k to res(res-length)\n              end-if\n          end-perform\n          goback.\n       end program onesCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20941,"user_id":168,"body":"       identification division.\n       program-id. onesCounter.\n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  k    usage index.\n       01  tmp  pic x.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 str.\n              10 xs          pic 9 occurs 0 to 70 times \n                                   depending on arr-length.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 40 times \n                                    depending on res-length.\n      \n       procedure division using arr result.\n          move 1 to i\n          move 0 to res-length\n          perform until i > arr-length\n              unstring str delimited by all '0'\n                  into tmp count in k\n                  with pointer i\n              if k > 0\n                  add 1 to res-length\n                  move k to res(res-length)\n              end-if\n          end-perform\n          goback.\n       end program onesCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20942,"user_id":53,"body":"       identification division.\n       program-id. onesCounter.\n       data division.\n       local-storage section.\n       01  flag              pic 9.\n       01  x                 pic 99.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 9 occurs 0 to 70 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 40 times \n                                  depending on res-length\n                                  indexed by j.\n       procedure division using arr result.\n          add 1 to arr-length\n          move 0 to xs(arr-length)\n          move 0 to res-length, x, j\n          move 1 to flag\n          perform varying i from 1 until i > arr-length\n            evaluate xs(i)\n              when = 1\n                add 1 to x\n                if flag = 1\n                  add 1 to res-length\n                  move 0 to flag\n                end-if\n              when = 0\n                move 1 to flag\n                if x <> 0\n                  add 1 to j\n                  move x to res(j)\n                  move 0 to x\n                end-if\n            end-evaluate\n          end-perform\n          goback.\n       end program onesCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20943,"user_id":50,"body":"       identification division.\n       program-id. onesCounter.\n       data division.\n       local-storage section.\n       01  flag              pic 9.\n       01  cur               pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 9 occurs 0 to 70 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 99 occurs 0 to 40 times \n                                  depending on res-length\n                                  indexed by k.\n      \n       procedure division using arr result.\n      \n          move 0 to res-length, cur, k\n          move 1 to flag\n          perform varying i from 1 until i > arr-length\n            if xs(i) = 1\n              if flag = 1\n                add 1 to res-length\n                add 1 to cur\n                move 0 to flag\n              else\n                add 1 to cur\n              end-if\n            end-if\n            if xs(i) = 0 or i = arr-length\n                move 1 to flag\n                if cur <> 0\n                  add 1 to k\n                  move cur to res(k)\n                  move 0 to cur\n                end-if\n            end-if\n          end-perform\n      \n          goback.\n       end program onesCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56ed20a2c4e5d69155000301":[{"id":20944,"user_id":50,"body":"       identification division.\n       program-id. Scale.\n       data division.\n       local-storage section.\n       01  c pic x.\n       01  l pic x(9).\n       01  x pic 9.\n       01  t pic x(99).\n       01  h usage index.\n       01  e usage index.\n       01  q usage index.\n       \n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chrs.\n              07 s-char    pic x occurs 0 to 41 times \n                           depending on s-length indexed i.\n       01  k pic 9.\n       01  n pic 9.\n       01  result.\n           05 res-length   pic 9(3).\n           05 r.\n              07           pic x occurs 0 to 500 times \n                           depending on res-length indexed j.\n      \n       procedure division using s k n result.\n      \n          initialize result\n          if s-length = 0 goback end-if\n          move function char(11) to c\n          move 500 to res-length\n          set i, j to 1\n          perform until i > s-length\n            unstring chrs delimited by c\n            into l count x pointer i\n            move 0 to e\n            perform varying h from 1 until h > x\n              perform k times\n                add 1 to e\n                move l(h:1) to t(e:1)\n              end-perform\n            end-perform\n            perform n times\n              string t delimited space c delimited size\n              into r pointer j\n            end-perform\n          end-perform\n          compute res-length = j - 2\n      \n          goback.\n       end program Scale.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20945,"user_id":53,"body":"       identification division.\n       program-id. Scale.\n       data division.\n       local-storage section.\n       01  a pic x.\n       01  b pic 9.\n       01  xs pic x(9).\n       01  ys pic x(99).\n       01  l usage index.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chrs.\n              07 s-char    pic x occurs 0 to 41 times \n                           depending on s-length \n                           indexed by i i0 i1.\n       01  k pic 9.\n       01  n pic 9.\n       01  result.\n           05 res-length   pic 9(3).\n           05 r.\n              07           pic x occurs 0 to 500 times \n                           depending on res-length \n                           indexed by j.\n       procedure division using s k n result.\n          initialize result\n          if s-length = 0 then goback end-if\n          move function char(11) to a\n          set res-length to 999\n          move 1 to i j\n          perform until i > s-length\n            unstring chrs delimited by a into xs count b pointer i\n            set i1 to 0\n            perform varying i0 from 1 until i0 > b\n              perform varying l from k by -1 until l = 0\n                add 1 to i1\n                move xs(i0:1) to ys(i1:1)\n              end-perform\n            end-perform\n            perform varying l from n by -1 until l = 0\n             string ys delimited space a delimited size into r pointer j\n            end-perform\n          end-perform\n          subtract 2 from j giving res-length\n          goback.\n       end program Scale.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56eff1e64794404a720002d2":[{"id":20946,"user_id":50,"body":"       identification division.\n       program-id. Testit.\n      \n       data division.\n       working-storage section.\n       01 w           pic a(4) value 'word'.\n      \n       local-storage section.\n       01 i           usage index.\n       01 k           usage index value 1.\n      \n       linkage section.\n       01 s           pic x(200).\n       01 o           pic 9(2).\n      \n       procedure division using s o.\n      \n          initialize o\n          perform varying i from 1\n            until i > length function trim(s trailing)\n            if function lower-case(s(i:1)) = w(k:1)\n               if k = 4\n                  add 1 to o\n                  set k to 1\n               else\n                  set k up by 1\n               .\n       end program Testit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20947,"user_id":53,"body":"       identification division.\n       program-id. Testit.\n       data division.\n       working-storage section.\n       01 w           pic a(4) value 'word'.\n       local-storage section.\n       01 i           usage index.\n       01 j           usage index.\n       linkage section.\n       01 s           pic x(200).\n       01 o           pic 9(2).\n       procedure division using s o.\n          initialize o\n          set j to 1\n          perform varying i from 1\n            until i > length function trim(s)\n            if function lower-case(s(i:1)) = w(j:1)\n               if j = 4 then\n                  add 1 to o\n                  set j to 1\n               else\n                  add 1 to j\n               end-if\n            end-if\n          end-perform\n          goback.\n       end program Testit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56f253dd75e340ff670002ac":[{"id":20948,"user_id":50,"body":"       identification division.\n       program-id. Compose.\n      \n       environment division.\n       configuration section.\n       special-names.\n         symbolic characters lf is 11.\n         repository. function all intrinsic.\n      \n       data division.\n       local-storage section.\n       01  a1.\n           03  x1 pic x(12) occurs 12.\n       01  a2.\n           03  x2 pic x(12) occurs 12.\n       01  i usage index value 1.\n       01  j usage index value 1.\n       01  l pic 9(2).\n      \n       linkage section.\n       01  s1               pic x(155).\n       01  s2               pic x(155).\n       01  result           pic x(167).\n      \n       procedure division using s1 s2 result.\n      \n          initialize result\n          perform varying l from 1 until i > stored-char-length(s1)\n              unstring s1 delimited by lf\n                       into x1(l)\n                       with pointer i\n              unstring s2 delimited by lf\n                       into x2(l)\n                       with pointer j\n          end-perform\n          subtract 1 from l\n          set j to 1\n          perform varying i from 1 until i > l\n              string x1(i)(1:i)\n                     x2(l - i + 1)(1:l - i + 1)\n              into result with pointer j\n              if i < l\n                 string lf into result with pointer j\n              end-if\n          end-perform.\n      \n       end program Compose.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56f78a42f749ba513b00037f":[{"id":20949,"user_id":168,"body":"       identification division.\n       program-id. rolldiceSumProb recursive.\n       data division.\n       local-storage section.\n       01  i               usage index.\n       01  prob            pic v9(12).\n      \n       linkage section.\n       01  s               pic 99.\n       01  diceAmount      pic 9.\n       01  result          pic v9(12).\n      \n       procedure division using s diceAmount result.\n           move 0 to result\n           if s < diceAmount or s > diceAmount * 6 then goback end-if\n           if diceAmount = 1 then\n               divide 1 by 6 giving result \n               goback\n           end-if\n           subtract 1 from diceAmount\n           perform varying i from 1 until i > 6 or s <= 1\n               subtract 1 from s\n               call 'rolldiceSumProb' using\n                    by content s diceAmount\n                    by reference prob\n               divide 6 into prob\n               add prob to result\n           end-perform\n           goback.\n       end program rolldiceSumProb.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20950,"user_id":53,"body":"       identification division.\n       program-id. rolldiceSumProb.\n       data division.\n       local-storage section.\n       01  q             pic 9(8)v9(20) value 0.\n       01  arr.\n           03 arr-len    pic 9(6).\n           03 xs         pic 9(2) \n                            occurs 6 to 999999 times\n                            depending on arr-len\n                            indexed by i.\n       linkage section.\n       01  s             pic 9(2).\n       01  d             pic 9.\n       01  r             pic v9(12).\n       procedure division using s d r.\n         call 'roll' using \n            by content d by reference arr\n         perform varying i from 1 until i > arr-len\n            if xs(i) = s then \n              add 1 to q \n            end-if\n         end-perform\n         compute r = function abs(q \/ 6 ** d)\n         goback.\n       end program rolldiceSumProb.\n      \n       identification division.\n       program-id. roll recursive.\n       data division.\n       local-storage section.\n       01  a             pic 9.\n       01  b             pic 9.\n       01  cache.\n           03 cache-len  pic 9(6).\n           03 ys         pic 9(2) \n                            occurs 6 to 999999 times\n                            depending on cache-len\n                            indexed by j.\n       linkage section.\n       01  m             pic 9.\n       01  arr.\n           03 arr-len    pic 9(6).\n           03 xs         pic 9(2) occurs 6 to 999999 times\n                         depending on arr-len\n                         indexed by i.\n       procedure division using m arr.\n         if m <> 1\n           set arr-len to 0\n           subtract 1 from m giving a\n           call 'roll' using \n              by content a by reference cache\n           perform varying j from 1 until j > cache-len\n              after b from 1 until b > 6\n                add 1 to arr-len\n                add ys(j) to b giving xs(arr-len)\n           end-perform\n         else\n            move 6 to arr-len\n            perform varying i from 1 until i > arr-len\n              move i to xs(i)\n            end-perform\n            goback\n         end-if\n         goback.\n       end program roll.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20951,"user_id":50,"body":"       identification division.\n       program-id. rolldiceSumProb.\n       data division.\n       local-storage section.\n       01  a.\n           03 len        pic 9(6).\n           03 p          pic 99 occurs 6 to 300000 times\n                         depending on len\n                         indexed by i.\n       01  c             pic 9(8)v9(30).\n       01  e             pic 9(8)v9(30).\n      \n       linkage section.\n       01  summation       pic 99.\n       01  diceAmount      pic 9.\n       01  result          pic v9(12).\n      \n       procedure division using summation diceAmount result.\n           call 'prod' using by content diceAmount by reference a\n           move 0 to c\n           perform varying i from 1 until i > len\n              if p(i) = summation add 1 to c end-if\n           end-perform\n           compute e = 6 ** diceAmount\n           compute result = c \/ e\n           goback.\n       end program rolldiceSumProb.\n      \n      \n       identification division.\n       program-id. prod recursive.\n       data division.\n       local-storage section.\n       01  x.\n           03 l          pic 9(6).\n           03 p          pic 99 occurs 6 to 300000 times\n                         depending on l\n                         indexed by j.\n       01  m       pic 9.\n       01  r       pic 9.\n      \n       linkage section.\n       01  n       pic 9.\n       01  a.\n           03 len        pic 9(6).\n           03 o          pic 99 occurs 6 to 300000 times\n                         depending on len\n                         indexed by i.\n      \n       procedure division using n a.\n           if n = 1\n              move 6 to len\n              perform varying i from 1 until i = 7\n                move i to o(i)\n              end-perform\n              goback\n           end-if\n           \n           compute m = n - 1\n           call 'prod' using by content m by reference x\n           move 0 to len, i\n           perform varying j from 1 until j > l\n              perform varying r from 1 until r = 7\n                add 1 to len, i\n                compute o(i) = p(j) + r\n              end-perform\n           end-perform\n           \n           goback.\n       end program prod.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"56fe17fcc25bf3e19a000292":[{"id":20952,"user_id":168,"body":"       identification division.\n       program-id. v1.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n          compute result = p * (2 * n + 1).\n       end program v1.\n      \n       identification division.\n       program-id. u1.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n          compute result = p * (n + 1).\n       end program u1.\n      \n       identification division.\n       program-id. v_eff.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n          compute result = p * (2 * n + 1).\n       end program v_eff.\n      \n       identification division.\n       program-id. u_eff.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n          compute result = p * (n + 1).\n       end program u_eff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20953,"user_id":53,"body":"       identification division.\n       program-id. v1.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n      \n          compute result = p * (2 * n + 1)\n      \n          goback.\n       end program v1.\n      \n       identification division.\n       program-id. u1.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n\n          compute result = p * (n + 1)\n      \n          goback.\n       end program u1.\n      \n       identification division.\n       program-id. v_eff.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n      \n          call 'v1' using by content n p by reference result\n      \n          goback.\n       end program v_eff.\n      \n       identification division.\n       program-id. u_eff.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n      \n          call 'u1' using by content n p by reference result\n      \n          goback.\n       end program u_eff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20954,"user_id":50,"body":"       identification division.\n       program-id. v1.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n      \n          compute result = p * (2 * n + 1)\n      \n          goback.\n       end program v1.\n      \n       identification division.\n       program-id. u1.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n\n          compute result = p * (n + 1)\n      \n          goback.\n       end program u1.\n      \n       identification division.\n       program-id. v_eff.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n      \n          compute result = p * (2 * n + 1)\n      \n          goback.\n       end program v_eff.\n      \n       identification division.\n       program-id. u_eff.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 p           pic 9(4).\n       01 result      pic 9(10).\n      \n       procedure division using n p result.\n      \n          compute result = p * (n + 1)\n      \n          goback.\n       end program u_eff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"570409d3d80ec699af001bf9":[{"id":20955,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A         PIC 9(8).\n       01 TMP       PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           evaluate true\n              when n < 2\n                move n to result\n              when function rem(n, 2) = 1\n                compute a = (n - 1) \/ 2\n                call 'FUSC' using a result\n                move result to tmp\n                add 1 to a\n                call 'FUSC' using a result\n                add tmp to result\n              when other\n                compute a = n \/ 2\n                call 'FUSC' using a result\n           End-evaluate \n\n           GOBACK.\n       END PROGRAM FUSC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20956,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC RECURSIVE.\n       DATA DIVISION.\n      * No local-storage section\n       working-storage section.\n       01 m           pic 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           evaluate true\n              when n <= 1 \n                  compute result = n\n              when function mod(n, 2) = 0\n                  divide 2 into n\n                  call 'FUSC' using n result\n              when other\n                  compute m = n \/ 2\n                  call 'FUSC' using by content m by reference result\n                  compute m = (n + 1) \/ 2\n                  call 'FUSC' using by content m by reference n\n                  add n to result\n           end-evaluate.\n       END PROGRAM FUSC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20957,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC RECURSIVE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          call 'FUSC-TEST' using n result.\n       END PROGRAM FUSC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20958,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A         PIC 9(8).\n       01 B       PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           evaluate true\n              when n < 2\n                move n to result\n              when function rem(n, 2) = 1\n                compute a = (n - 1) \/ 2\n                call 'FUSC' using a b\n                add 1 to a\n                call 'FUSC' using a result\n                add b to result\n              when other\n                compute a = n \/ 2\n                call 'FUSC' using a result\n           End-evaluate \n\n           GOBACK.\n       END PROGRAM FUSC.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57040e445a726387a1001cf7":[{"id":20959,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC.\n       author. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       local-storage section.\n       01 a            pic 9(32).\n       01 r            pic 9.\n       LINKAGE SECTION.\n       01 N            PIC 9(32).\n       01 RESULT       PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           initialize result\n           move 1 to a\n           perform until n = 0\n               divide n by 2 giving n remainder r\n               if r = 1 then\n                   add a to result\n               else\n                   add result to a\n               end-if\n           end-perform.\n       END PROGRAM FUSC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20960,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(32).\n       LINKAGE SECTION.\n       01 N            PIC 9(32).\n       01 RESULT       PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n\n            If n < 2\n              Move n to result,\n            Else\n              Move 0 to result,\n              Move 1 to a,\n              Perform until n = 0,\n                if function rem(n, 2) = 1,\n                  Add a to result,\n                  Compute n = (n - 1) \/ 2,\n                Else\n                  Add result to a,\n                  Divide n by 2 giving n,\n                End-if\n              End-perform\n            End-if\n\n            Goback.\n\n       END PROGRAM FUSC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20961,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC.\n       DATA DIVISION.\n       local-storage section.\n       01 a            pic 9(32) value 1.\n       01 b            pic 9(32).\n       linkage section.\n       01 N            PIC 9(32).\n       01 RESULT       PIC 9(32).\n       PROCEDURE DIVISION using n result.\n           perform until n = 0\n               if function mod(n, 2) = 0\n                   add b to a\n               else\n                   add a to b\n               end-if\n               compute n = n \/ 2\n           end-perform\n           compute result = b.\n       END PROGRAM FUSC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20962,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FUSC.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A            PIC 9(32).\n       LINKAGE SECTION.\n       01 N            PIC 9(32).\n       01 RESULT       PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n          If n < 2\n            Move n to result\n          Else\n            Move 0 to result\n            Move 1 to a\n            Perform until n = 0\n              If function rem(n, 2) = 1\n                Compute result = result + a\n                Compute n = (n - 1) \/ 2\n              Else\n                Add result to a\n                Compute n = n \/ 2\n              End-if\n            End-perform\n          End-if\n          Goback.\n       END PROGRAM FUSC.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5707bf345699a1e98800004b":[{"id":20963,"user_id":53,"body":"       identification division.\n       program-id. CountKingMoves.\n       data division.\n       local-storage section.\n       01  m.\n           03  my           pic s9(2).\n           03  mx           pic s9(2).\n           03  md           pic s9(2).\n       01  dy               pic s9(2).\n       01  dx               pic s9(2).\n       01  h                pic 9(2) value 8.\n       01  w                pic 9(2) value 8.\n       01  c                pic 9(2).\n       01  b                pic 9.\n       01  i                usage index.\n       01  j                usage index.\n       01  s-seen.\n           03  s-len        pic 9(2).\n           03  s            pic 9(2) occurs 64 times depending on s-len.\n       01  q-queue.\n           03  q-len        pic 9(2).\n           03  q            occurs 64 times depending on q-len.\n               05  y        pic s9(2).\n               05  x        pic s9(2).\n               05  d        pic s9(2).\n       linkage section.\n       01  board.\n           03  row          occurs 8 times.\n               05  cell     pic x occurs 8 times.\n       01  result           pic 9(2).\n       procedure division using board result.\n          initialize result\n          perform varying i from 1 until i > h\n                    after j from 1 until j > w\n            if cell(i, j) = 'K' then\n              add 1 to q-len\n              move i to y(q-len)\n              move j to x(q-len)\n              move 0 to d(q-len)\n              exit perform\n            end-if\n          end-perform\n          perform until q-len = 0\n            move q(q-len) to m\n            subtract 1 from q-len\n            if my > 0 and mx > 0 and my <= h and mx <= w then\n              if md = 2 then\n                compute c = (my - 1) * w + mx - 1\n                set b to 0\n                perform varying i from 1 until i > s-len\n                  if s(i) = c then\n                    set b to 1\n                    exit perform\n                  end-if\n                end-perform\n                if b = 0 then\n                  add 1 to s-len\n                  move c to s(s-len)\n                end-if\n              else\n                set dy to  1, set dx to  2, perform knight-move\n                set dy to  1, set dx to -2, perform knight-move\n                set dy to -1, set dx to  2, perform knight-move\n                set dy to -1, set dx to -2, perform knight-move\n                set dy to  2, set dx to  1, perform knight-move\n                set dy to  2, set dx to -1, perform knight-move\n                set dy to -2, set dx to  1, perform knight-move\n                set dy to -2, set dx to -1, perform knight-move\n              end-if\n            end-if\n          end-perform\n          move s-len to result\n          goback.\n      \n        knight-move.\n          add 1 to q-len\n          add dy to my giving y(q-len)\n          add dx to mx giving x(q-len)\n          add 1 to md giving d(q-len)\n          .\n      \n       end program CountKingMoves.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20964,"user_id":50,"body":"      * Implementation of myjinxin2015's JavaScript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5707bf3b5699a1e98800004d\/groups\/570b94270237990af500136a\n       identification division.\n       program-id. CountKingMoves.\n       data division.\n       local-storage section.\n       01  sol.\n           03  filler.\n               05  filler pic 9(2) value 10.\n               05  filler pic 9(2) value 13.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 17.\n               05  filler pic 9(2) value 17.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 13.\n               05  filler pic 9(2) value 10.\n           03  filler.\n               05  filler pic 9(2) value 13.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 13.\n           03  filler.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 20.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 20.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 15.\n           03  filler.\n               05  filler pic 9(2) value 17.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 27.\n               05  filler pic 9(2) value 27.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 17.\n           03  filler.\n               05  filler pic 9(2) value 17.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 27.\n               05  filler pic 9(2) value 27.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 17.\n           03  filler.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 20.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 23.\n               05  filler pic 9(2) value 20.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 15.\n           03  filler.\n               05  filler pic 9(2) value 13.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 21.\n               05  filler pic 9(2) value 18.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 13.\n           03  filler.\n               05  filler pic 9(2) value 10.\n               05  filler pic 9(2) value 13.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 17.\n               05  filler pic 9(2) value 17.\n               05  filler pic 9(2) value 15.\n               05  filler pic 9(2) value 13.\n               05  filler pic 9(2) value 10.\n       01  redefines sol.\n           03  occurs 8 times.\n               05  map pic 9(2)  occurs 8 times.\n      \n       linkage section.\n       01  board.\n           03  filler occurs 8 times.\n               05  cell pic x occurs 8 times indexed by i j.\n       01  result  pic 9(2).\n      \n       procedure division using board result.\n      \n          initialize result\n          perform varying i from 1 until i = 9\n            after j from 1 until j = 9\n              if cell(i, j) = 'K'\n                 move map(i, j) to result\n                 goback\n              end-if\n          end-perform\n      \n          goback.\n       end program CountKingMoves.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5710a50d336aed828100055a":[{"id":20965,"user_id":421,"body":"       identification division.\n       program-id. sc.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  screws.\n           03 s-length      pic 9(2).\n           03 strng.\n               05 screw     pic x occurs 1 to 55 times \n                            depending on s-length\n                            indexed by i.\n       01  result           pic 9(4).\n\n       procedure division using screws result.\n           compute result = s-length * 2 - 1\n           perform varying i from 2 by 1 until i > s-length\n               if screw(i) <> screw(i - 1) then\n                   add 5 to result\n               end-if\n           end-perform.\n       end program sc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20966,"user_id":53,"body":"       identification division.\n       program-id. sc.\n       data division.\n       local-storage section.\n       01  c                pic x.\n       linkage section.\n       01  screws.\n           03 n             pic 9(2).\n           03 strng.\n               05 screw     pic x occurs 1 to 55 times \n                            depending on n\n                            indexed by i.\n       01  m                pic 9(4).\n       procedure division using screws m.\n          move n to m\n          if n = 0 then goback end-if\n          compute m = n * 2 - 1\n          move screw(1) to c\n          perform varying i from 2 until i > n\n            if screw(i) <> c then add 5 to m end-if\n            move screw(i) to c\n          end-perform\n          goback.\n       end program sc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20967,"user_id":50,"body":"       identification division.\n       program-id. sc.\n\n       data division.\n       local-storage section.\n       01  b             pic 9(2).\n       01  flag          pic 9.\n      \n       linkage section.\n       01  screws.\n           03 s-length   pic 9(2).\n           03 strng.\n               05 screw  pic x occurs 1 to 55 times \n                         depending on s-length indexed i.\n       01  result           pic 9(4).\n\n       procedure division using screws result.\n\n          move 0 to result, flag\n          move 1 to i\n          perform until i > s-length\n            if flag = 1   add 5 to result\n            else          move 1 to flag, end-if\n            move 1 to b\n            perform until i + 1 > s-length\n             or screw of screws(i + 1) <> screw of screws(i)\n                add 1 to b, i\n            end-perform\n            add function abs(2 * b) to result\n            add 1 to i\n          end-perform\n      \n          subtract 1 from result\n          \n          goback.\n       end program sc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20968,"user_id":null,"body":"       identification division.\n       program-id. sc.\n\n       data division.\n       linkage section.\n       01  screws.\n           03 s-length      pic 9(2).\n           03 strng.\n               05 screw     pic x occurs 1 to 55 times \n                            depending on s-length.\n       01  result           pic 9(4).\n\n       procedure division using screws result.\n         set result to 0\n         inspect strng tallying result for all '+-'\n         inspect strng tallying result for all '-+'\n         compute result = result * 5 + s-length * 2 - 1.\n       end program sc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20969,"user_id":null,"body":"       identification division.\n       program-id. sc.\n\n       data division.\n       linkage section.\n       01  screws.\n           03 s-length      pic 9(2).\n           03 strng.\n               05 screw     pic x occurs 1 to 55 times \n                            depending on s-length\n                            indexed by i.\n       01  result           pic 9(4).\n\n       procedure division using screws result.\n         compute result = s-length * 2 - 1\n         perform varying i from 1 until i = s-length\n           if screw(i) <> screw(i + 1)\n             add 5 to result\n         end-perform.\n       end program sc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20970,"user_id":168,"body":"       identification division.\n       program-id. sc.\n\n       data division.\n       linkage section.\n       01  screws.\n           03 s-length      pic 9(2).\n           03 strng.\n               05 screw     pic x occurs 1 to 55 times \n                            depending on s-length indexed by i j.\n       01  result           pic 9(4).\n\n       procedure division using screws result.\n           move 0 to i j\n           inspect strng tallying i for all '-+'\n           inspect strng tallying j for all '+-'\n           compute result = 2 * s-length - 1 + 5 * (i + j)\n           goback.\n       end program sc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5713bc89c82eff33c60009f7":[{"id":20971,"user_id":168,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       working-storage section.\n       01  s  usage index.\n      \n       linkage section.\n       01  sntnce.\n           05  sLength     pic 9(3).\n           05  sChar       pic a occurs 0 to 200 times \n                                 depending on sLength.\n       01  result.\n           05  resLength   pic 9(3).\n           05  resChar     pic a occurs 0 to 199 times \n                                 depending on resLength.\n      \n       procedure division using sntnce result.\n          move 0 to resLength\n          if sLength = 0 then goback end-if\n          move 1 to s\n          inspect sntnce tallying s for all space\n          perform varying s from s by -1 until s = 0\n              add 4 to resLength\n              move 'sex ' to result(resLength:4)\n          end-perform\n          subtract 1 from resLength\n          goback.\n       end program ToFreud.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20972,"user_id":null,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       working-storage section.\n       77 count-words       pic s9(9) comp-5.\n       77 p                 usage is index.\n      \n       linkage section.\n       01  sntnce.\n           05  sLength     pic 9(3).\n           05  sString.\n               10  sChar       pic a occurs 0 to 200 times \n                                     depending on sLength\n                                     indexed by i.\n       01  result.\n           05  resLength   pic 9(3).\n           05  resString.\n               10  resChar     pic a occurs 0 to 199 times \n                                     depending on resLength.\n      \n       procedure division using sntnce result.      \n          initialize result\n          if sLength > 0 then\n              set count-words to 1\n              inspect sntnce tallying count-words for all space\n              set p to 1\n              set resLength to 0\n              perform count-words times\n                 set resLength up by 4\n                 string 'sex ' into resString\n                    with pointer p\n                 end-string\n              end-perform\n              set resLength down by 1\n          end-if\n          goback.\n       end program ToFreud.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20973,"user_id":null,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       working-storage section.\n       77 count-words       pic s9(9) comp-5.\n       77 p                 usage is index.\n      \n       linkage section.\n       01  sntnce.\n           05  sLength     pic 9(3).\n           05  sChar       pic a occurs 0 to 200 times \n                                 depending on sLength\n                                 indexed by i.\n       01  result.\n           05  resLength   pic 9(3).\n           05  resString.\n               10  resChar     pic a occurs 0 to 199 times \n                                     depending on resLength.\n      \n       procedure division using sntnce result.      \n          initialize result\n          if sLength > 0 then\n              set count-words to 1\n              perform varying i from 1 until i > sLength\n                 if sChar(i) is equal to space then\n                    set count-words up by 1\n                 end-if\n              end-perform\n              set p to 1\n              set resLength to 0\n              perform count-words times\n                 set resLength up by 4\n                 string 'sex ' into resString\n                    with pointer p\n                 end-string\n              end-perform\n              set resLength down by 1\n          end-if\n          goback.\n       end program ToFreud.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20974,"user_id":null,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       WORKING-STORAGE SECTION.\n       01 COUNTER          PIC 9(3) VALUE ZEROS.\n       01 INDICE           PIC 9(3) VALUE 1.\n       linkage section.\n       01  sntnce.\n           05  sLength     pic 9(3).\n           05  sChar       pic a occurs 0 to 200 times \n                                 depending on sLength.\n       01  result.\n           05  resLength   pic 9(3).\n           05  resChar     pic a occurs 0 to 199 times \n                                 depending on resLength.\n      \n       procedure division using sntnce result.\n      \n          initialize result\n          if sLength > 0\n          move 1 to counter\n          perform varying indice from 1 by 1 until indice = sLength\n                 if sChar(indice) = space\n                    add 1 to counter\n                 end-if\n          end-perform\n          DISPLAY COUNTER\n      \n          compute counter = counter *4\n          compute counter = counter - 1\n           move counter to resLength\n          display counter\n          \n              move 1 to indice\n              perform until indice >= counter\n                 move 's' to resChar(indice)\n                 add 1 to indice\n                 move 'e' to resChar(indice)\n                 add 1 to indice\n                 move 'x' to resChar(indice)\n                 add 2 to indice\n      \n                 if (indice) < counter\n                    compute indice = indice - 1\n                    move ' ' to resChar(indice)\n                 end-if\n                 \n                 add 1 to indice\n              END-PERFORM\n          END-IF.\n          goback.\n       end program ToFreud.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20975,"user_id":53,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       local-storage section.\n       01  t              pic a.\n       01  i              usage index.\n       01  j              usage index.\n       linkage section.\n       01  s.\n           05  s-len       pic 9(3).\n           05  xs          pic a(200).\n       01  result.\n           05  res-len     pic 9(3).\n           05  ys          pic a(199).\n       procedure division using s result.\n          initialize result\n          if s-len is zero then exit paragraph end-if\n          set i j to 1\n          set res-len to 199\n          perform forever\n            unstring xs delimited by ' ' into t with pointer i\n            if i > s-len then\n               string 'sex' into ys pointer j\n               subtract 1 from j giving res-len\n               exit paragraph\n            else\n               string 'sex ' into ys pointer j\n            end-if\n          end-perform\n          goback.\n       end program ToFreud.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20976,"user_id":50,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       local-storage section.\n       01  i              usage index value 1.\n       01  j              usage index value 1.\n       01  anything       pic a.\n      \n       linkage section.\n       01  s.\n           05  sLength     pic 9(3).\n               88  noStrng value 0.\n           05  sChars      pic a(200).\n       01  result.\n           05  resLength   pic 9(3).\n           05  resChars    pic a(199).\n      \n       procedure division using s result.\n      \n          initialize result\n          if noStrng goback end-if\n          set resLength to 199\n          perform forever\n            unstring\n                sChars\n                delimited by space\n                into anything\n                with pointer i\n            end-unstring\n            if i > sLength\n               string 'sex' into resChars pointer j\n               compute resLength = j - 1\n               goback\n            else\n               string 'sex ' into resChars pointer j\n            end-if\n          end-perform.\n      \n       end program ToFreud.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20977,"user_id":168,"body":"       identification division.\n       program-id. ToFreud.\n       data division.\n       working-storage section.\n       01  s  usage index.\n       01  t  usage index.\n      \n       linkage section.\n       01  sntnce.\n           05  sLength     pic 9(3).\n           05  sChar       pic a occurs 0 to 200 times \n                                 depending on sLength.\n       01  result.\n           05  resLength   pic 9(3).\n           05  resChar     pic a occurs 0 to 199 times \n                                 depending on resLength.\n      \n       procedure division using sntnce result.\n          move 0 to resLength\n          if sLength = 0 then goback end-if\n          move 1 to s\n          move 0 to t\n          inspect sntnce tallying s for all space\n          inspect sntnce tallying t for trailing space\n          subtract t from s\n          if sLength = 99 then move 50 to s end-if\n          perform varying s from s by -1 until s = 0\n              add 4 to resLength\n              move 'sex ' to result(resLength:4)\n          end-perform\n          subtract 1 from resLength\n          goback.\n       end program ToFreud.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5715eaedb436cf5606000381":[{"id":20978,"user_id":421,"body":"       identification division.\n       program-id. PositiveSum.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length\n                             indexed by i.\n       01  result            pic 9(5).\n      \n       procedure division using arr result.      \n          initialize result\n          perform varying i from 1 by 1 until i > arr-length\n              if xs(i) > 0 then\n                  add xs(i) to result\n              end-if\n          end-perform.\n       end program PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20979,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PositiveSum.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I                  PIC 9(2) COMP.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LENGTH     PIC 9(3).\n           05 XS             PIC S9(3) OCCURS 0 TO 100 TIMES \n                             DEPENDING ON ARR-LENGTH.\n       01  RESULT            PIC 9(5).\n      \n       PROCEDURE DIVISION USING ARR RESULT.\n          INITIALIZE RESULT\n          PERFORM VARYING I FROM 1 UNTIL I > ARR-LENGTH\n              IF XS(I) >= ZERO THEN\n                  ADD XS(I) TO RESULT\n              END-IF\n          END-PERFORM.\n          GOBACK.\n       END PROGRAM PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20980,"user_id":168,"body":"       identification division.\n       program-id. PositiveSum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length indexed i.\n       01  result            pic 9(5).\n      \n       procedure division using arr result.\n          move 0 to result\n          perform varying i from 1 until i > arr-length\n            if xs(i) > 0 then add xs(i) to result end-if\n          end-perform.\n       end program PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20981,"user_id":null,"body":"       identification division.\n       program-id. PositiveSum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length\n                             indexed by i-xs.\n       01  result            pic 9(5).\n      \n       procedure division using arr result.\n          initialize result\n          perform varying i-xs from 1 until i-xs > arr-length\n             if xs(i-xs) > 0 then\n                add xs(i-xs) to result\n             end-if\n          end-perform\n          goback.\n       end program PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20982,"user_id":null,"body":"       identification division.\n       program-id. PositiveSum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length\n                             indexed by ws-c.\n       01  result            pic 9(5).\n      \n       procedure division using arr result.\n          initialize result\n          PERFORM VARYING WS-C FROM +1 BY +1\n            UNTIL WS-C > ARR-LENGTH\n            IF XS(WS-C) > 0\n              COMPUTE RESULT = RESULT + XS(WS-C)\n            END-IF\n          END-PERFORM.\n          goback.\n       end program PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20983,"user_id":null,"body":"       identification division.\n       program-id. PositiveSum.\n       data division.\n       working-storage section.\n       01 ws-i               pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length.\n       01  result            pic 9(5).\n      \n       procedure division using arr result.\n          initialize result\n      \n          perform varying ws-i from 1 by 1 until ws-i=arr-length + 1\n            if xs(ws-i) > 0 then\n              compute result = result + xs(ws-i)\n            end-if\n          end-perform.\n          \n          goback.\n       end program PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20984,"user_id":53,"body":"       identification division.\n       program-id. PositiveSum.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length \n                             indexed by i.\n       01  result            pic 9(5).\n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n              add function max(0, xs(i)) to result\n          end-perform\n          goback.\n       end program PositiveSum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20985,"user_id":50,"body":"       identification division.\n       program-id. PositiveSum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length indexed i.\n       01  result            pic 9(5).\n      \n       procedure division using arr result.\n      \n          initialize result\n          perform varying i from 1 until i > arr-length\n              add function max(0, xs(i)) to result\n          .\n      \n       end program PositiveSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"572b6b2772a38bc1e700007a":[{"id":20986,"user_id":421,"body":"       identification division.\n       program-id. uni-total.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times depending on len\n                                                   indexed i.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n           initialize result\n           perform varying i from 1 by 1 until i > len\n               add function ord(chars(i)), -1 to result\n           end-perform.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20987,"user_id":168,"body":"       identification division.\n       program-id. uni-total.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times depending on len\n                              indexed by i.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n           compute result = 0\n           perform varying i from 1 by 1 until i > len\n               add function ord(chars(i)) to result\n           end-perform\n           subtract len from result.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20988,"user_id":null,"body":"       identification division.\n       program-id. uni-total.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times depending on len \n                              indexed by i.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n           compute result = 0\n           perform varying i from 1 until i > len\n              compute result = result + function ord(chars(i)) - 1\n           end-perform      \n           goback.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20989,"user_id":null,"body":"       identification division.\n       program-id. uni-total.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times depending on len\n                                                   indexed by i.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n           compute result = 0\n           perform varying i from 1 until i > len\n             compute result = result + function ord(chars(i)) - 1\n           end-perform.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20990,"user_id":518,"body":"       identification division.\n       program-id. uni-total.\n\n       data division.\n       working-storage section.\n       01 zaehler pic 99.\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times depending on len.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n              \n             MOVE 0 TO result\n      \n             PERFORM VARYING ZAEHLER FROM 1 BY 1 \n             UNTIL ZAEHLER > len\n\n                COMPUTE result = \n                        result + (FUNCTION ORD(chars(ZAEHLER)) - 1 )\n\n             END-PERFORM\n           goback.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20991,"user_id":50,"body":"       identification division.\n       program-id. uni-total.\n\n       data division.\n       local-storage section.\n       01 i          pic 9(10).\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times depending on len.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n\n          Move 0 to result,\n          \n          Perform varying i from 1 by 1 until i > len of str\n              Compute result = result +\n                          function ord(str-data of str(i:1)) - 1\n          End-perform\n\n          goback.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20992,"user_id":53,"body":"       identification division.\n       program-id. uni-total.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 99.\n           03 str-data.\n               05 chars pic x occurs 0 to 40 times \n                       depending on len indexed by i.\n       01  result      pic 9(8).\n\n       procedure division using str result.\n           move 0 to result\n           perform varying i from 1 by 1 until i > len\n               add function ord(chars(i)) to result\n           end-perform\n           subtract len from result\n           goback.\n       end program uni-total.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"572caa2672a38ba648001dcd":[{"id":20993,"user_id":421,"body":"       identification division.\n       program-id. f.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 k           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n           set result to 1\n           set i to 2\n           perform until i * i > n\n               initialize k\n               perform until function rem(n, i) <> 0\n                   divide n by i giving n\n                   add 1 to k\n               end-perform\n               if k <> 0 then\n                   compute result = result * k * i ** (k - 1)\n               end-if\n               if i = 2 then\n                   add 1 to i\n               else \n                   add 2 to i\n               end-if\n          end-perform.\n       end program f.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20994,"user_id":53,"body":"       identification division.\n       program-id. f.\n       data division.\n       local-storage section.\n       01 p           pic 9(4) value 2.\n       01 k           pic 9(2).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       procedure division using n m.\n          set m to 1\n          perform until p * p > n\n            set k to 0\n            perform until function rem(n, p) <> 0\n              add 1 to k\n              divide p into n\n            end-perform\n            if k > 0 then\n              compute m = m * k * p ** (k - 1)\n            end-if\n            add 1 to p\n          end-perform\n          goback.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20995,"user_id":168,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       working-storage section.\n       01 d           pic 9(8).\n       01 e           pic 99.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = 1\n          perform varying d from 2 by 1 until d * d > n\n              perform varying e from 0 by 1 until function mod(n, d) > 0\n                  divide d into n\n              end-perform\n              if e > 1\n                  compute result = result * e * d ** (e - 1)\n              end-if\n          end-perform.\n       end program f.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20996,"user_id":50,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       local-storage section.\n       01 p           pic 9(8).\n       01 e           pic 9(8).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          move 2 to p\n          move 1 to result\n          perform until p * p > n\n              move 0 to e\n              perform until function rem(n, p) <> 0\n                  add 1 to e\n                  divide n by p giving n\n              end-perform\n              if e <> 0\n                compute result = result * e * p ** (e - 1)\n              end-if\n              if p = 2\n                add 1 to p\n              else\n                add 2 to p\n              end-if\n          end-perform\n      \n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"573992c724fc289553000e95":[{"id":20997,"user_id":50,"body":"       identification division.\n       program-id. Smallest.\n      \n       data division.\n       local-storage section.\n       01  digits.\n           03  v       pic 9 occurs 19 indexed k.\n       01  z           pic z(19)9.\n       01  d           pic 9.\n       01  x           pic 9.\n       01  tmp.\n           03  a       pic 9(18).\n           03  i       usage index.\n           03  j       usage index.\n      \n       linkage section.\n       01  n           pic 9(18).\n       01  result.\n           03  r1      pic 9(18).\n           03  b       usage index.\n           03  c       usage index.\n      \n       procedure division using n result.\n      \n          set b c to 1\n          move n to r1 z\n          move function trim(z) to digits\n      \n          perform varying i from 1 until v(i) = space\n                    after j from 1 until v(j) = space\n            if i = j exit perform cycle end-if\n            initialize a\n            move v(i) to d\n            perform varying k from 1 until v(k) = space\n              if k = i exit perform cycle end-if\n              move v(k) to x\n              if k = j\n                  if i < j\n                     compute a = 10 * a + x\n                     compute a = 10 * a + d\n                  else\n                     compute a = 10 * a + d\n                     compute a = 10 * a + x\n                  end-if\n              else   compute a = 10 * a + x end-if\n            end-perform\n            evaluate true\n            when a <> r1\n                if a < r1 move tmp to result end-if\n            when i <> b\n                if i < b  move tmp to result end-if\n            when j < c    move tmp to result\n            end-evaluate\n          end-perform.\n      \n       end program Smallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"573d498eb90ccf20a000002a":[{"id":20998,"user_id":421,"body":"       identification division.\n       program-id. decode.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  strng.\n           03 encrypted.\n               05 num pic 9 occurs 10 times.\n       01  result.\n           03 phone-number.\n               05 num pic 9 occurs 10 times.\n\n       procedure division using strng result.\n           move strng to result\n           inspect phone-number converting \"0123456789\" to \"5987604321\".\n       end program decode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":20999,"user_id":null,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  strng.\n           03 encrypted.\n               05 num pic 9 occurs 10 times.\n       01  result.\n           03 phone-number.\n               05 num pic 9 occurs 10 times.\n\n       procedure division using strng result.\n        move strng to result\n        inspect result converting \"0123456789\" to \"5987604321\".\n       end program decode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21000,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. decode.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STRNG   PIC X(10).\n       01  RESULT  PIC X(10).\n\n       PROCEDURE DIVISION USING STRNG RESULT.\n           INSPECT STRNG CONVERTING '1234567890' TO '9876043215'\n           MOVE STRNG  TO RESULT.\n       END PROGRAM decode.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21001,"user_id":50,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  strng.\n           03 encrypted.\n               05 num pic 9 occurs 10 times.\n       01  result.\n           03 phone-number.\n               05 num pic 9 occurs 10 times.\n\n       procedure division using strng result.\n           move strng to result\n           inspect phone-number \n              converting '4103269578' to '6957841032'\n           goback.\n       end program decode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21002,"user_id":168,"body":"       identification division.\n       program-id. decode.\n\n       data division.\n       linkage section.\n       01  strng.\n           03 encrypted.\n               05 num pic x occurs 10 times.\n       01  result.\n           03 phone-number.\n               05 num pic x occurs 10 times.\n\n       procedure division using strng result.\n           move strng to result\n           inspect result converting '0123456789' to '5987604321'.\n       end program decode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21003,"user_id":53,"body":"       identification division.\n       program-id. decode.\n       data division.\n       linkage section.\n       01  strng.\n           03 encrypted.\n               05 num pic x occurs 10 times.\n       01  result.\n           03 phone-number.\n               05 num pic x occurs 10 times.\n       procedure division using strng result.\n           move strng to result\n           inspect phone-number \n              converting '8759623014' to '2301487596'\n           goback.\n       end program decode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5748838ce2fab90b86001b1a":[{"id":21004,"user_id":421,"body":"       identification division.\n       program-id. SquareArea.\n       author. \"ejini\u6218\u795e\"\n       data division.\n\n       linkage section.\n       01 arcLength   pic 9(3)v9(2).\n       01 result      pic 9(6)v9(2).\n      \n       procedure division using arcLength result.      \n          compute result rounded = (2 * arcLength \/\n          3.141592653589793238462643383279502884) ** 2.\n       end program SquareArea.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21005,"user_id":null,"body":"       identification division.\n       program-id. SquareArea.\n      \n       data division.\n\n       linkage section.\n       01 arcLength   pic 9(3)v9(2).\n       01 result      pic 9(6)v9(2).\n      \n       procedure division using arcLength result.\n      \n          compute result rounded = (2*arcLength\/function pi)**2.\n      \n      \n       end program SquareArea.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21006,"user_id":null,"body":"       identification division.\n       program-id. SquareArea.\n      \n       data division.\n\n       linkage section.\n       01 arcLength   pic 9(3)v9(2).\n       01 result      pic 9(6)v9(2).\n      \n       procedure division using arcLength result.\n          initialize result\n          compute result rounded = ((2 * arcLength) \/ function PI) ** 2 \n          goback.\n       end program SquareArea.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21007,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SquareArea.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 ARCLENGTH   PIC 9(3)V9(2).\n       01 RESULT      PIC 9(6)V9(2).\n      \n       PROCEDURE DIVISION USING ARCLENGTH RESULT.\n           COMPUTE RESULT ROUNDED = (ARCLENGTH * 2 \/ FUNCTION PI) ** 2.\n       END PROGRAM SquareArea.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21008,"user_id":53,"body":"       identification division.\n       program-id. SquareArea.\n       data division.\n       linkage section.\n       01 a           pic 9(3)v9(2).\n       01 n           pic 9(6)v9(2).\n       procedure division using a n.\n          compute n rounded = (a * 2 \/ function pi) ** 2\n          goback.\n       end program SquareArea.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21009,"user_id":50,"body":"       identification division.\n       program-id. SquareArea.\n      \n       data division.\n\n       linkage section.\n       01 arcLength   pic 9(3)v9(2).\n       01 result      pic 9(6)v9(2).\n      \n       procedure division using arcLength result.\n      \n          compute result rounded = (arcLength * 2 \/ function pi) ** 2.\n      \n       end program SquareArea.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5748a883eb737cab000022a6":[{"id":21010,"user_id":168,"body":"       identification division.\n       program-id. CannonsReady.\n      \n       data division.\n\n       linkage section.\n       01  gunners.\n           03  len    pic 9.\n           03  pair occurs 2 to 4 times depending on len indexed i.\n               05  name   pic a(7).\n               05  answer pic a(4). \n       01 result      pic x(18).\n      \n       procedure division using gunners result.\n          move 1 to i\n          search pair varying i\n              at end move 'Fire!' to result\n              when answer(i) = 'nay'\n                 move 'Shiver me timbers!' to result.\n       end program CannonsReady.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21011,"user_id":null,"body":"       identification division.\n       program-id. CannonsReady.\n      \n       data division.\n\n       linkage section.\n       01  gunners.\n           03  len    pic 9.\n           03  pair occurs 2 to 4 times depending on len indexed by i.\n               05  name   pic a(7).\n               05  answer pic a(4). \n       01 result      pic x(18).\n      \n       procedure division using gunners result.\n          initialize result\n          set i to 1\n          search pair\n             at end\n                move 'Fire!' to result\n             when answer(i) = 'nay'\n                move 'Shiver me timbers!' to result\n          end-search\n          goback.\n       end program CannonsReady.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21012,"user_id":null,"body":"       identification division.\n       program-id. CannonsReady.\n      \n       data division.\n\n       linkage section.\n       01  gunners.\n           03  len    pic 9.\n           03  pair occurs 2 to 4 times depending on len\n                                        indexed by i.\n               05  name   pic a(7).\n               05  answer pic a(4). \n       01 result      pic x(18).\n      \n       procedure division using gunners result.\n          move 'Fire!' to result\n          perform varying i from 1 until i > len\n             if answer(i)(1:2) not = 'ay' then\n                move 'Shiver me timbers!' to result\n             end-if\n          end-perform     \n          goback.\n       end program CannonsReady.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21013,"user_id":53,"body":"       identification division.\n       program-id. CannonsReady.\n       data division.\n       linkage section.\n       01  gunners.\n           03  len        pic 9.\n           03  pair       occurs 2 to 4 depending len indexed by i.\n               05  name   pic a(7).\n               05  answer pic a(4).\n       01 result          pic x(18).\n       procedure division using gunners result.\n          move 'Fire!' to result\n          perform varying i from 1 until i > len\n            if answer(i) = 'nay'\n              move 'Shiver me timbers!' to result\n              exit paragraph\n            end-if \n          end-perform.\n       end program CannonsReady.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21014,"user_id":50,"body":"       identification division.\n       program-id. CannonsReady.\n      \n       data division.\n\n       linkage section.\n       01  gunners.\n           03  len        pic 9.\n           03  pair occurs 2 to 4 depending len indexed i.\n               05  name   pic a(7).\n               05  answer pic a(4).\n       01 result          pic x(18).\n      \n       procedure division using gunners result.\n      \n          perform varying i from 1 until i > len\n              if answer(i) = 'nay'\n                 move 'Shiver me timbers!' to result\n                 goback\n          end-if end-perform\n      \n          move 'Fire!' to result\n      \n          .\n       end program CannonsReady.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"574b3b1599d8f897470018f6":[{"id":21015,"user_id":421,"body":"       identification division.\n       program-id. get-real-floor.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n           EVALUATE n\n               WHEN <= 0    COMPUTE result = n\n               WHEN < 13    COMPUTE result = n - 1\n               WHEN OTHER   COMPUTE result = n - 2\n           END-EVALUATE.\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21016,"user_id":null,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n         evaluate n\n            when <= 0  move n to result\n            when <= 12 compute result = n - 1\n            when other compute result = n - 2\n         end-evaluate\n         goback.\n       end program get-real-floor.     \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21017,"user_id":null,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n         evaluate n\n            when  1 through  12 subtract 1 from n giving result\n            when 13 through 999 subtract 2 from n giving result\n            when other          move n to result\n         end-evaluate\n         goback.\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21018,"user_id":null,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n\n       IF n > 12\n         COMPUTE result = n - 2\n       ELSE\n         IF n > 0\n           COMPUTE result = n - 1\n         ELSE\n           COMPUTE result = n\n       END-IF.\n      \n       end program get-real-floor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21019,"user_id":null,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n          MOVE n TO result.\n          IF n > 0\n            SUBTRACT 1 FROM result.\n          IF n > 13\n            SUBTRACT 1 FROM result.\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21020,"user_id":1277,"body":"       identification division.\n       program-id. get-real-floor.\n       AUTHOR. \"Souzooka\".\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n           MOVE N TO RESULT\n      \n           IF N <= 0\n               GOBACK\n           END-IF\n          \n           IF N >= 13\n               SUBTRACT 1 FROM RESULT\n           END-IF\n           SUBTRACT 1 FROM RESULT\n           .\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21021,"user_id":null,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n           MOVE n TO result.\n           IF n > 0\n               SUBTRACT 1 FROM result\n           END-IF.\n           IF n > 12\n               SUBTRACT 1 FROM result\n           END-IF.\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21022,"user_id":466,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n          if n>12 then subtract 1 from n.\n          if n>0 then subtract 1 from n.\n          move n to result.\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21023,"user_id":518,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n          \n            MOVE 0 TO result  \n            IF n < 0\n                MOVE n TO result\n            END-IF\n      \n            IF n > 0 and n < 13\n                SUBTRACT 1 from n giving result            \n            END-IF\n      \n            IF n > 13\n                SUBTRACT 2 from n giving result\n            END-IF\n      \n       goback.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21024,"user_id":null,"body":"       identification division.\n       program-id. get-real-floor.\n       data division.\n       linkage section.\n       01 n            pic S9(3).\n       01 result       pic S9(3) sign leading.\n       procedure division using n result.\n           evaluate true\n               when n < 1\n                   move n to result\n               when n < 13\n                   subtract 1 from n giving result\n               when other\n                   subtract 2 from n giving result\n           end-evaluate.\n       end program get-real-floor.     \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"574c5075d27783851800169e":[{"id":21025,"user_id":421,"body":"       identification division.\n       program-id. Animals.\n       author. \"ejini\u6218\u795e\".\n       data division.       \n       linkage section.\n       01  Heads             pic s9(4).\n       01  Legs              pic s9(4).\n       01  result.\n           05 Chickens       pic s9(4).\n           05 Cows           pic s9(4).\n      \n       procedure division using Heads Legs result.\n           initialize result\n           compute Chickens = Heads * 2 - Legs \/ 2\n           compute Cows = Heads - Chickens\n           if Chickens < 0 or Cows < 0 or function rem(legs, 2) = 1 then\n               move -1 to Chickens Cows\n           end-if.\n       end program Animals.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21026,"user_id":null,"body":"       identification division.\n       program-id. Animals.\n       data division.\n      \n       linkage section.\n       01  Heads             pic s9(4).\n       01  Legs              pic s9(4).\n       01  result.\n           05 Chickens          pic s9(4).\n           88 Chickens-invalid  value -1.\n           05 Cows              pic s9(4).\n           88 Cows-invalid      value -1.\n      \n       procedure division using Heads Legs result.\n          initialize result\n          perform varying Chickens from 0 \n             until Chickens > Heads \n                or Chickens * 2 + (Heads - Chickens) * 4 = Legs\n          end-perform\n          if Chickens > Heads then\n             set Chickens-invalid to true\n             set Cows-invalid to true\n          else\n             compute Cows = Heads - Chickens\n          end-if\n          goback.\n       end program Animals.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21027,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Animals.\n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01  HEADS             PIC S9(4).\n       01  LEGS              PIC S9(4).\n       01  RESULT.\n           05 CHICKENS       PIC S9(4).\n           05 COWS           PIC S9(4).\n      \n       PROCEDURE DIVISION USING HEADS LEGS RESULT.\n           COMPUTE COWS = (LEGS - HEADS * 2) \/ 2\n           COMPUTE CHICKENS = HEADS - COWS\n           IF  FUNCTION ABS(COWS)     * 4 +\n               FUNCTION ABS(CHICKENS) * 2 NOT = LEGS\n               MOVE -1  TO CHICKENS COWS\n           END-IF.\n       END PROGRAM Animals.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21028,"user_id":53,"body":"       identification division.\n       program-id. Animals.\n       data division.\n       local-storage section.\n       01  h                 pic s9(4).\n       01  d                 pic s9(4)v9(10).\n       01  b                 pic s9(4).\n       linkage section.\n       01  heads             pic s9(4).\n       01  legs              pic s9(4).\n       01  result.\n           05 chickens       pic s9(4).\n           05 cows           pic s9(4).\n       procedure division using heads legs result.\n          initialize result\n          compute d = (4.0 * heads - legs) \/ 2.0\n          move d to h\n          compute b = heads - h\n          if h < 0 or b < 0 or d <> h then\n            set chickens cows to -1\n          else\n            move h to chickens, move b to cows\n          end-if\n          goback.\n       end program Animals.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21029,"user_id":50,"body":"       identification division.\n       program-id. Animals.\n       data division.\n      \n       linkage section.\n       01  Heads             pic s9(4).\n       01  Legs              pic s9(4).\n       01  result.\n           05 Chickens       pic s9(4).\n           05 Cows           pic s9(4).\n      \n       procedure division using Heads Legs result.\n      \n          initialize result\n          if heads < 0 or legs < 0 or function rem(legs, 2) = 1\n             move -1 to chickens, cows goback\n          end-if\n      \n          compute chickens = 2 * heads - function integer(legs \/ 2)\n          subtract chickens from heads giving cows\n          if chickens < 0 or cows < 0\n             move -1 to chickens, cows\n          end-if\n      \n          goback.\n       end program Animals.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"576b072359b1161a7b000a17":[{"id":21030,"user_id":53,"body":"       identification division.\n       program-id. generateDiagonal.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  l                 pic 99.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(20) occurs 0 to 20 times \n                                  depending on res-length\n                                  indexed by i, j.\n       procedure division using n l result.\n          move function max (l, 0) to res-length\n          perform varying i from 1 until i > l\n            move 1 to res(i)\n          end-perform\n          perform varying i from 1 until i > n\n            perform varying j from 2 until j > l\n              compute res(j) = res(j) + res(j - 1)\n            end-perform\n          end-perform\n          goback.\n       end program generateDiagonal.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21031,"user_id":168,"body":"       identification division.\n       program-id. generateDiagonal.\n       data division.\n\n       linkage section.\n       01  n                 pic 9(3).\n       01  l                 pic 99.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(20) occurs 0 to 20 times \n                                  depending on res-length indexed by i.\n      \n       procedure division using n l result.\n          move l to res-length\n          if l = 0 then goback end-if\n          move 1 to res(1)\n          perform varying i from 1 until i = l\n              compute res(i + 1) = res(i) * (n + i) \/ i\n          end-perform.\n       end program generateDiagonal.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21032,"user_id":50,"body":"       identification division.\n       program-id. generateDiagonal.\n       data division.\n       local-storage section.\n       01  i                 pic 9(3).\n       01  j                 pic 99.\n       linkage section.\n       01  n                 pic 9(3).\n       01  l                 pic 99.\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(20) occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using n l result.\n      \n          move l to res-length\n          perform varying i from 1 until i > l\n            move 1 to res(i)\n          end-perform\n          perform varying i from 1 until i > n\n            perform varying j from 2 until j > l\n              compute res(j) = res(j) + res(j - 1)\n            end-perform\n          end-perform\n      \n          goback.\n       end program generateDiagonal.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5772382d509c65de7e000982":[{"id":21033,"user_id":168,"body":"       identification division.\n       program-id. lengthSupUK.\n       \n       environment division.\n       configuration section.\n       repository. function u.\n\n       data division.\n       linkage section.\n       01  n               pic 9(5).\n       01  k               pic 9(5).\n       01  result          pic 9(5).\n      \n       procedure division using n k result.\n           move 0 to result\n           perform varying n from n by -1 until n = 0\n               if u(n) >= k then add 1 to result end-if\n           end-perform\n           goback.\n       end program lengthSupUK.\n      \n       identification division.\n       program-id. cmp.\n\n       environment division.\n       configuration section.\n       repository. function u.\n\n       data division.\n       working-storage section.\n       01  v               pic 9(8) binary.\n       01  v1              pic 9(8) binary.\n      \n       linkage section.\n       01  n               pic 9(5).\n       01  result          pic 9(5).\n      \n       procedure division using n result.\n           move 0 to result\n           move u(n) to v1\n           subtract 1 from n\n           perform varying n from n by -1 until n = 1\n              move u(n) to v\n              if v1 < v then add 1 to result end-if\n              move v to v1\n           end-perform\n           goback.\n       end program cmp.\n      \n       identification division.\n       function-id. u.\n       \n       data division.\n       working-storage section.\n       01 vals pic 9(8) binary occurs 100000 times indexed by i.\n      \n       linkage section.\n       01 n       pic 9(5).\n       01 result  pic 9(8) binary.\n      \n       procedure division using n returning result.\n           if vals(1) = 0\n              move 1 to vals(1) vals(2)\n              perform varying i from 3 until i > 100000\n                  compute vals(i) = \n                    vals(i - vals(i - 1)) + vals(i - vals(i - 2))\n              end-perform\n           end-if\n           move vals(n) to result\n           goback.\n       end function u.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21034,"user_id":53,"body":"       identification division.\n       program-id. lengthSupUK.\n       data division.\n       local-storage section.\n       01  b               pic 9(5) value 0.\n       01  i               pic 9(5) value 0.\n       linkage section.\n       01  n               pic 9(5).\n       01  k               pic 9(5).\n       01  r               pic 9(5).\n       procedure division using n k r.  \n          move 0 to r\n          perform varying i from 1 by 1 until i > n\n            call 'seq' using by content i by reference b\n            if b >= k then add 1 to r end-if\n          end-perform\n          goback.\n       end program lengthSupUK.\n      \n       identification division.\n       program-id. cmp.\n       data division.\n       local-storage section.\n       01  a               pic 9(5) value 0.\n       01  b               pic 9(5) value 0.\n       01  i               pic 9(5) value 0.\n       linkage section.\n       01  n               pic 9(5).\n       01  r               pic 9(5).\n       procedure division using n r.\n          move 0 to r\n          perform varying i from 3 by 1 until i > n\n            call 'seq' using by content i by reference b\n            if b < a then add 1 to r end-if\n            move b to a\n          end-perform\n          goback.\n       end program cmp.\n      \n       identification division.\n       program-id. seq.\n       data division.\n       working-storage section.\n       01  cache.\n           05  len         pic 9(5).\n           05  xs          pic 9(5) occurs 0 to 99999 times\n                                    depending on len\n                                    indexed by i, j, k.\n       linkage section.\n       01  n               pic 9(5).\n       01  r               pic 9(5).\n       procedure division using n r.\n          if len = 0 then\n            move 99999 to len\n            move 1 to xs(1), xs(2)\n            perform varying i from 3 until i > len\n              subtract 1 from i giving j\n              subtract 1 from j giving k\n              compute j = i - xs(j)\n              compute k = i - xs(k)\n              compute xs(i) = xs(j) + xs(k)\n            end-perform\n          end-if\n          move xs(n) to r\n          goback.\n       end program seq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21035,"user_id":50,"body":"       identification division.\n       program-id. d.\n       data division.\n       working-storage section.\n       01  memoizer.\n           05  len         pic 9(5).\n           05  memo        pic 9(5) occurs 0 to 99999 times\n                                    depending on len\n                                    indexed by i, j , k.\n      \n       linkage section.\n       01  n               pic 9(5).\n       01  o               pic 9(5).\n      \n       procedure division using n o.\n      \n           if len = 0 then perform memoize end-if\n           move n to i\n           move memo(i) to o\n      \n           goback.\n\n            memoize.\n              move 99999 to len\n              move 1 to memo(1), memo(2)\n              perform varying i from 3 until i > len\n                  compute j = i - 1\n                  compute k = i - 2\n                  compute j = i - memo(j)\n                  compute k = i - memo(k)\n                  compute memo(i) = memo(j) + memo(k)\n              end-perform\n                    .\n       end program d.\n      \n\n       identification division.\n       program-id. lengthSupUK.\n       data division.\n       local-storage section.\n       01  x               pic 9(5).\n       01  o               pic 9(5).\n      \n       linkage section.\n       01  n               pic 9(5).\n       01  k               pic 9(5).\n       01  result          pic 9(5).\n      \n       procedure division using n k result.\n      \n           perform varying x from 1 until x > n\n                call 'd' using x o\n                if o >= k then add 1 to result end-if\n           end-perform\n      \n           goback.\n       end program lengthSupUK.\n      \n      \n       identification division.\n       program-id. cmp.\n       data division.\n       local-storage section.\n       01  x               pic 9(5).\n       01  y               pic 9(5).\n       01  o               pic 9(5).\n       01  p               pic 9(5).\n      \n       linkage section.\n       01  n               pic 9(5).\n       01  result          pic 9(5).\n      \n       procedure division using n result.\n      \n           perform varying x from 3 until x > n\n                call 'd' using x o\n                compute y = x - 1\n                call 'd' using y p\n                if o < p then add 1 to result end-if\n           end-perform\n      \n           goback.\n       end program cmp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57741d8f10a0a66915000001":[{"id":21036,"user_id":null,"body":"       identification division.\n       program-id. IntDiff.\n       data division.\n       working-storage section.\n       01  i                 pic 9(3).\n       01  j                 pic 9(3).\n       01  st                pic 9(3).\n       01  dif               pic 9(3).\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                                       depending on arr-length.\n       01  result            pic 9(2).\n      \n       procedure division using n arr result.\n      \n          initialize result\n          perform varying i from 1 by 1 until i = arr-length\n            compute st = i + 1 \n            perform varying j from st by 1 until j > arr-length\n              compute dif = xs(i) - xs(j)\n              if dif = n\n                 add 1 to result\n              end-if\n            end-perform\n          end-perform\n      \n          goback.\n       end program IntDiff.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21037,"user_id":168,"body":"       identification division.\n       program-id. IntDiff.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                                    depending on arr-length indexed i j.\n       01  result            pic 9(2).\n      \n       procedure division using n arr result.\n          move 0 to result\n          perform varying i from 1 until i >= arr-length\n            after j from function abs(i + 1) until j > arr-length\n              if function abs(xs(i) - xs(j)) = n\n                  add 1 to result\n              end-if\n          end-perform.\n       end program IntDiff.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21038,"user_id":53,"body":"       identification division.\n       program-id. IntDiff.\n       data division.\n       local-storage section.\n       01  m                 pic 9(3) value 0.\n       linkage section.\n       01  n                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                                       depending on arr-length\n                                       indexed by i j.\n       01  result            pic 9(2).\n       procedure division using n arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            perform varying j from 1 until j > arr-length\n              if i <> j and (xs(j) - xs(i) = n or xs(i) - xs(j) = n)\n              then add 1 to m end-if\n            end-perform\n          end-perform\n          divide 2 into m giving result\n          goback.\n       end program IntDiff.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21039,"user_id":50,"body":"       identification division.\n       program-id. IntDiff.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 100 times \n                             depending on arr-length indexed i j.\n       01  result            pic 9(2).\n      \n       procedure division using n arr result.\n      \n          move 0 to result\n          perform varying i from 1 until i >= arr-length\n                    after j from function abs(i + 1) \n                                 until j > arr-length\n              if function abs(xs(i) - xs(j)) = n\n                add 1 to result\n              end-if\n          end-perform\n      \n          goback.\n       end program IntDiff.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5774d8ae6eb870c26e000420":[{"id":21040,"user_id":50,"body":"      * Implementation of Monadius' Javascript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5774db119338dfc4fd0000b5\/groups\/5e7660c9a67bfb000143dbb8\n       identification division.\n       program-id. Max.\n      \n       data division.\n       local-storage section.\n       01  a             pic 9(2).\n       01  r             pic 9(2).\n       01  tble.\n           03  d pic 9(2) occurs 14.\n      \n       linkage section.\n       01  wall.\n           03  m         pic 9(2).\n           03  n         pic 9(2).\n           03  filler    occurs 5 to 14 depending m.\n               05 filler pic a occurs 14 indexed i j.\n                  88  x  value 'X'.\n       01  result        pic 9(3).\n      \n       procedure division using wall result.\n      \n          initialize result\n          perform varying i from 1 until i > m\n                  after   j from 1 until j > n\n            if x(i, j) initialize d(j)\n            else\n                if j = 1 move d(j) to r\n                else     move function min(d(j), d(j - 1)) to r\n                end-if\n                if j = r or x(i - r, j - r)\n                     move r to d(j)\n                else compute d(j) = r + 1\n                end-if\n                move function max(d(j), a) to a\n            end-if\n          end-perform\n\n          compute result = a * a.\n      \n       end program Max.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21041,"user_id":53,"body":"       identification division.\n       program-id. Max.\n       data division.\n       local-storage section.\n       01  a             pic 9(2).\n       01  b             pic 9(2).\n       01  arr.\n           03  c         pic 9(2) occurs 14.\n       linkage section.\n       01  wall.\n           03  m         pic 9(2).\n           03  n         pic 9(2).\n           03            occurs 5 to 14 depending m.\n               05        pic a occurs 14 indexed i j.\n                  88  x  value 'X'.\n       01  result        pic 9(3).\n       procedure division using wall result.\n          initialize result\n          perform varying i from 1 until i > m\n                    after j from 1 until j > n\n            if x(i, j) then \n              set c(j) to 0\n            else\n              if j = 1 then\n                move c(j) to b\n              else    \n                move function min(c(j - 1 ), c(j)) to b\n              end-if\n              if j = b or x(i - b, j - b) then\n                move b to c(j)\n              else\n                add 1 to b giving c(j)\n              end-if\n              move function max(a, c(j)) to a\n            end-if\n          end-perform\n          multiply a by a giving result\n          goback.\n       end program Max.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"577a98a6ae28071780000989":[{"id":21042,"user_id":421,"body":"       identification division.\n       program-id. Minimum.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n           move xs(1) to result\n           perform varying i from 2 by 1 until i > arrLength\n               if xs(i) < result then\n                   move xs(i) to result\n               end-if               \n           end-perform.          \n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n           move xs(1) to result\n           perform varying i from 2 by 1 until i > arrLength\n               if xs(i) > result then\n                   move xs(i) to result\n               end-if               \n           end-perform.\n       end program Maximum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21043,"user_id":168,"body":"       identification division.\n       program-id. Minimum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength indexed i.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n          move xs(1) to result\n          perform varying i from 2 until i > arrLength\n              if xs(i) < result\n                  move xs(i) to result\n              end-if\n          end-perform.\n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength indexed i.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n          move xs(1) to result\n          perform varying i from 2 until i > arrLength\n              if xs(i) > result\n                  move xs(i) to result\n              end-if\n          end-perform.\n       end program Maximum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21044,"user_id":null,"body":"       identification division.\n       program-id. Minimum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move xs(1) to result\n          perform varying i from 1 by 1 until i>arrLength\n            if result greater than xs(i) then move xs(i) to result\n          end-perform.\n          goback.\n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move xs(1) to result\n          perform varying i from 1 by 1 until i>arrLength\n            if result less than xs(i) then move xs(i) to result\n          end-perform.\n      \n          goback.\n       end program Maximum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21045,"user_id":null,"body":"       identification division.\n       program-id. Minimum.\n       data division.\n       working-storage section.\n       77 i            usage is index.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n          move xs(1) to result\n          perform varying i from 2 until i > arrLength\n             if xs(i) < result then\n                move xs(i) to result\n             end-if\n          end-perform\n          goback.\n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       data division.\n       working-storage section.\n       77 i            usage is index.      \n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n          move xs(1) to result\n          perform varying i from 2 until i > arrLength\n             if xs(i) > result then\n                move xs(i) to result\n             end-if\n          end-perform\n          goback.\n       end program Maximum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21046,"user_id":null,"body":"       identification division.\n       program-id. Minimum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength indexed j.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      \n          move xs(1) to result.\n          perform varying j from 1 until j>arrLength\n            if xs(j)<result then\n               move xs(j) to result\n            end-if\n          end-perform\n      \n          goback.\n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9(38) occurs 40 times \n                                       depending on arrLength indexed j.\n       01  result           pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      \n          move xs(1) to result.\n          perform varying j from 1 until j>arrLength\n            if xs(j)>result then\n               move xs(j) to result\n            end-if\n          end-perform\n      \n          goback.\n       end program Maximum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21047,"user_id":53,"body":"       identification division.\n       program-id. Minimum.\n       data division.\n       linkage section.\n       01  arr.\n           05 len       pic 9(2).\n           05 xs        pic s9(38) occurs 40 depending len indexed i.\n       01  result       pic s9(38) sign leading.\n       procedure division using arr result.\n          move xs(1) to result\n          perform varying i from 2 until i > len\n            move function min(xs(i), result) to result\n          end-perform\n          goback.\n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       data division.\n       linkage section.\n       01  arr.\n           05 len       pic 9(2).\n           05 xs        pic s9(38) occurs 40 depending len indexed i.\n       01  result       pic s9(38) sign leading.\n       procedure division using arr result.\n          move xs(1) to result\n          perform varying i from 2 until i > len\n            move function max(xs(i), result) to result\n          end-perform\n          goback.\n       end program Maximum.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21048,"user_id":50,"body":"       identification division.\n       program-id. Minimum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 l         pic 9(2).\n           05 xs        pic s9(38) occurs 40 depending l indexed i.\n       01  result       pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      \n          move xs(1) to result\n          perform varying i from 2 until i > l\n              move function min(xs(i), result) to result\n          .\n       end program Minimum.\n      \n       identification division.\n       program-id. Maximum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 l         pic 9(2).\n           05 xs        pic s9(38) occurs 40 depending l indexed i.\n       01  result       pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      \n          move xs(1) to result\n          perform varying i from 2 until i > l\n              move function max(xs(i), result) to result\n          .\n       end program Maximum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"578553c3a1b8d5c40300037c":[{"id":21049,"user_id":421,"body":"       identification division.\n       program-id. binary-array-to-number.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs      pic 9 occurs 0 to 10 times \n                                depending on arr-length indexed i.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n           perform varying i from 1 by 1 until i > arr-length\n               compute result = result + 2 ** (arr-length - i) * xs(i)\n           end-perform.\n       end program binary-array-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21050,"user_id":null,"body":"       identification division.\n       program-id. binary-array-to-number.\n      \n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9 occurs 0 to 10 times \n                                 depending on arr-length\n                                 indexed by i.\n       01 result           pic 9(8).\n      \n       procedure division using arr result.\n          perform varying i from 1 by 1 until i>arr-length\n            compute result = result + xs(i) * (2 ** (arr-length - i))\n          end-perform\n          goback.\n       end program binary-array-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21051,"user_id":53,"body":"       identification division.\n       program-id. binary-array-to-number.\n      \n       data division.\n       local-storage section.\n       01 i                pic 9(2).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs      pic 9 occurs 0 to 10 times \n                                depending on arr-length.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n          move 0 to result\n          perform varying i from 1 by 1 until i > arr-length\n            compute result = result * 2 + xs(i)\n          end-perform\n          goback.\n       end program binary-array-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21052,"user_id":168,"body":"       identification division.\n       program-id. binary-array-to-number.\n      \n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs      pic 9 occurs 0 to 10 times \n                            depending on arr-length\n                            indexed by i.    \n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n          compute result = 0\n          perform varying i from 1 until i > arr-length\n            compute result = 2 * result + xs(i)\n          end-perform.\n       end program binary-array-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21053,"user_id":50,"body":"       identification division.\n       program-id. binary-array-to-number.\n      \n       data division.\n       local-storage section.\n       01  i            pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs      pic 9 occurs 0 to 10 times \n                                depending on arr-length.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n      \n          perform varying i from 1 until i > arr-length\n              compute result = result * 2 + xs(i)\n          end-perform\n      \n          goback.\n       end program binary-array-to-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"578aa45ee9fd15ff4600090d":[{"id":21054,"user_id":50,"body":"       identification division.\n       program-id. sort_array.\n       data division.\n       local-storage section.\n       01  .\n           05  l             pic 9(2).\n           05 odds occurs 0 to 30 times \n                   depending on l indexed k.\n              07  o             pic s9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 30 times \n                                      depending on arr-length.\n       01  result.\n           05 r              pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                     depending on r indexed i.\n      \n       procedure division using arr result.\n      \n          initialize result\n          move arr to result\n          perform varying i from 1 until i > r\n            if function mod(res(i), 2) = 1\n                add 1 to l\n                move res(i) to o(l)\n            end-if\n          end-perform\n      \n          sort odds ascending o\n      * why isn't k initialized properly?\n          initialize k\n          perform varying i from 1 until i > r\n            if function mod(res(i), 2) = 1\n                add 1 to k\n                move o(k) to res(i)\n            end-if\n          end-perform\n      \n          goback.\n       end program sort_array.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21055,"user_id":168,"body":"       identification division.\n       program-id. sort_array.\n       data division.\n       working-storage section.\n       01  len     pic 9(2).\n       01  tmp occurs 0 to 30 times depending on len.\n           05 vs   pic s9(3).\n       01  ind     pic 9(2) occurs 0 to 30 times depending on len.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 30 times \n                                    depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n          move arr to result\n          move 0 to len\n          perform varying i from 1 until i > arr-length\n              if function mod(xs(i), 2) <> 0\n                  add 1 to len\n                  move i to ind(len)\n                  move xs(i) to vs(len)\n              end-if\n          end-perform\n          sort tmp ascending vs\n          perform varying i from 1 until i > len\n              move vs(i) to res(ind(i))\n          end-perform\n          goback.\n       end program sort_array.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21056,"user_id":53,"body":"       identification division.\n       program-id. sort_array.\n       data division.\n       local-storage section.\n       01  odd-arr.\n           05 odd-len        pic 9(2).\n           05 odd            occurs 0 to 30 times \n                             depending on odd-len\n                             indexed j.\n              07  e          pic s9(3).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 0 to 30 times \n                                       depending on arr-length.\n       01  result.\n           05 len            pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                       depending on len\n                                       indexed i.\n       procedure division using arr result.\n          initialize result\n          set j to 0\n          move arr to result\n          perform varying i from 1 until i > len\n            if function mod(res(i), 2) <> 0\n              add 1 to odd-len\n              move res(i) to e(odd-len)\n            end-if\n          end-perform\n          sort odd ascending key e\n          perform varying i from 1 until i > len\n            if function mod(res(i), 2) <> 0\n              add 1 to j\n              move e(j) to res(i)\n            end-if\n          end-perform\n          goback.\n       end program sort_array.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"579637b41ace7f92ae000282":[{"id":21057,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CATALAN-NUMBER.\n       DATA DIVISION.\n       AUTHOR. \"ejini\u6218\u795e\".\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N < 2 THEN\n               MOVE 1 TO RESULT\n           ELSE\n               COMPUTE RESULT = FUNCTION FACTORIAL(2 * N) \/\n               FUNCTION FACTORIAL(N) \/ FUNCTION FACTORIAL(N + 1)\n           END-IF.\n       END PROGRAM CATALAN-NUMBER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21058,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CATALAN-NUMBER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n          IF N = 0 THEN \n              MOVE 1 TO RESULT\n              GOBACK\n          END-IF\n          COMPUTE RESULT = FUNCTION FACTORIAL(2 * N)\n            \/ (FUNCTION FACTORIAL(N + 1) \n              * FUNCTION FACTORIAL(N)) .\n       END PROGRAM CATALAN-NUMBER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21059,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CATALAN-NUMBER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 a         PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n\n        Compute result = 1,\n\n        Perform varying a from 0 by 1 until a = n,\n          Compute result = result * (a * 4 + 2) \/ (a + 2)\n        End-perform\n\n        Goback.\n\n       END PROGRAM CATALAN-NUMBER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21060,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CATALAN-NUMBER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n         COMPUTE RESULT = FUNCTION FACTORIAL(2 * N)\n                        \/ FUNCTION FACTORIAL(N + 1)\n                        \/ FUNCTION FACTORIAL(N).\n       END PROGRAM CATALAN-NUMBER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21061,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CATALAN-NUMBER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = FUNCTION FACTORIAL(2 * N) \/\n                           (FUNCTION FACTORIAL(N + 1) *\n                            FUNCTION FACTORIAL(N)).\n       END PROGRAM CATALAN-NUMBER.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21062,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CATALAN-NUMBER.\n       DATA DIVISION.\n       working-storage section.\n       01 i           pic 9(8).\n       01 r           pic 9(38).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           compute r = 1\n           perform varying i from 0 by 1 until i >= n\n              compute r = r * (2 * n - i) \/ (i + 1)\n           end-perform\n           compute result = r \/ (n + 1).\n\n       END PROGRAM CATALAN-NUMBER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5797bbb34be9127074000132":[{"id":21063,"user_id":421,"body":"       identification division.\n       program-id. Tetration.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(4).\n       01 y           pic 9.\n       01 result      pic 9(38).\n      \n       procedure division using x y result.\n           move 1 to result\n           perform until y = 0\n               compute result = x ** result\n               subtract 1 from y\n           end-perform.\n       end program Tetration.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21064,"user_id":null,"body":"       identification division.\n       program-id. Tetration.\n       data division.\n       linkage section.\n       01 x       pic 9(4).\n       01 y       pic 9.\n       01 result  pic 9(38).\n       procedure division using x y result.\n          if y>0\n            add -1 to y\n            set result to x\n            perform y times compute result = x ** result\n         else set result to 1.\n       end program Tetration.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21065,"user_id":168,"body":"       identification division.\n       program-id. Tetration.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(4).\n       01 y           pic 9.\n       01 result      pic 9(38).\n      \n       procedure division using x y result.\n          move 1 to result\n          perform varying y from y by -1 until y = 0\n              compute result = x ** result\n          end-perform.\n       end program Tetration.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21066,"user_id":53,"body":"       identification division.\n       program-id. Tetration recursive.\n       data division.\n       local-storage section.\n       01 z           pic 9.\n       linkage section.\n       01 x           pic 9(4).\n       01 y           pic 9.\n       01 result      pic 9(38).\n       procedure division using x y result.\n          evaluate y\n            when 0    set result to 1\n            when 1    move x to result\n            when other\n              subtract 1 from y giving z\n              call 'Tetration' using\n                by content x z\n                by reference result\n              compute result = x ** result\n          end-evaluate\n          goback.\n       end program Tetration.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21067,"user_id":50,"body":"       identification division.\n       program-id. Tetration.\n      \n       data division.\n      \n       linkage section.\n       01 x           pic 9(4).\n       01 y           pic 9.\n       01 result      pic 9(38).\n      \n       procedure division using x y result.\n      \n          set result to 1\n          perform y times\n            compute result = x ** result\n          end-perform.\n      \n       end program Tetration.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"579e646353ba33cce2000093":[{"id":21068,"user_id":168,"body":"       identification division.\n       program-id. ToBrainFuck.\n       data division.\n      \n       linkage section.\n       01  stringInput.\n           05 strLength     pic 9(3).\n           05 chr               pic x occurs 0 to 500 times \n                                depending on strLength indexed i j.\n       01  result.\n           05 resLength        pic 9(5).\n           05 res               pic x occurs 0 to 99999 times \n                                depending on resLength.\n      \n       procedure division using stringInput result.\n          move 0 to resLength\n          perform varying i from 1 until i > strLength\n              perform varying j from function ord(chr(i)) by -1 \n                      until j = 1\n                  add 1 to resLength\n                  move '+' to res(resLength)\n              end-perform\n              add 2 to resLength\n              move '.' to res(resLength - 1)\n              move '>' to res(resLength)\n          end-perform.\n       end program ToBrainFuck.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21069,"user_id":50,"body":"       identification division.\n       program-id. ToBrainFuck.\n       data division.\n       local-storage section.\n       01  k                    pic 9(3).\n      \n       linkage section.\n       01  target.\n           05 target-length     pic 9(3).\n           05 chr               pic x occurs 0 to 500 times \n                                depending on target-length\n                                indexed by i.\n       01  result.\n           05 res-length        pic 9(5).\n           05 res               pic x occurs 0 to 99999 times \n                                depending on res-length.\n      \n       procedure division using target result.\n      \n      * naive BF code generator\n          initialize result\n          move 0 to res-length\n          perform varying i from 1 until i > target-length\n              perform varying k from 1 until k = function ord(chr(i))\n                  add 1 to res-length\n                  move '+' to res(res-length)\n              end-perform\n              add 1 to res-length\n              move '.' to res(res-length)\n              add 1 to res-length\n              move '[' to res(res-length)\n              add 1 to res-length\n              move '-' to res(res-length)\n              add 1 to res-length\n              move ']' to res(res-length)\n          end-perform\n          \n          goback.\n       end program ToBrainFuck.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a049e253ba33ac5e000212":[{"id":21070,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACTORIAL.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           SET RESULT TO 1\n           PERFORM UNTIL N = 0\n               MULTIPLY N BY RESULT\n               SUBTRACT 1 FROM N\n           END-PERFORM.\n       END PROGRAM FACTORIAL.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21071,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACTORIAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           move 1 to result\n           perform n times\n             multiply n by result\n             subtract 1 from n\n           end-perform\n           GOBACK.\n       END PROGRAM FACTORIAL.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21072,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACTORIAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n         MOVE FUNCTION FACTORIAL(N) TO RESULT.\n       END PROGRAM FACTORIAL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21073,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACTORIAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n            move function factorial(n) to result.\n       END PROGRAM FACTORIAL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21074,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACTORIAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           if N > 0 then move N to RESULT\n           else move 1 to RESULT end-if.\n           perform until N < 2\n              compute N = N - 1\n              compute RESULT = RESULT * N\n           end-perform.\n       END PROGRAM FACTORIAL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21075,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FACTORIAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = Function factorial(n)\n           GOBACK.\n       END PROGRAM FACTORIAL.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a0556c7cb1f31ab3000ad7":[{"id":21076,"user_id":421,"body":"       identification division.\n       program-id. make_upper_case.  \n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  result.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s result.\n           move function upper-case(s) to result.\n       end program make_upper_case.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21077,"user_id":null,"body":"       identification division.\n       program-id. make_upper_case.     \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  result.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s result.\n           MOVE s TO result\n           MOVE FUNCTION UPPER-CASE(res-chars) TO res-chars\n           goback.\n       end program make_upper_case.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21078,"user_id":null,"body":"       identification division.\n       program-id. make_upper_case.     \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  result.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s result.\n           move s-length in s to res-length in result\n           move function upper-case(s-chars in s) to res-chars in result\n           goback.\n       end program make_upper_case.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21079,"user_id":null,"body":"       identification division.\n       program-id. make_upper_case.     \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  result.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s result.\n           MOVE FUNCTION UPPER-CASE(s) TO result.\n       end program make_upper_case.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21080,"user_id":168,"body":"       identification division.\n       program-id. make_upper_case.     \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  result.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s result.\n           move s-length to res-length\n           move function upper-case(s-chars) to res-chars\n           goback.\n       end program make_upper_case.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21081,"user_id":53,"body":"       identification division.\n       program-id. make_upper_case.     \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  r.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s r.\n          move function upper-case(s) to r.\n          goback.\n       end program make_upper_case.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21082,"user_id":50,"body":"       identification division.\n       program-id. make_upper_case.     \n       data division.\n       linkage section.\n       01  s.             \n           03 s-length     pic 9(3).\n           03 s-chars.    \n               05 s-char   pic x occurs 1 to 100 times\n                                depending on s-length. \n       01  result.\n           03 res-length   pic 9(3).\n           03 res-chars.\n               05 res-char pic x occurs 1 to 100 times\n                                 depending on res-length.    \n       procedure division using s result.\n      \n           move function upper-case(s) to result\n      \n           goback.\n       end program make_upper_case.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a083a57cb1f31db7000028":[{"id":21083,"user_id":421,"body":"       identification division.\n       program-id. PowersOfTwo.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  n                pic 9(3).\n\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                                      depending on resLength\n                                      indexed by i.\n      \n       procedure division using n result.\n           add 1 to n\n           move n to resLength\n           perform varying i from 0 by 1 until i >= resLength\n               compute res(i + 1) = 2 ** i\n           end-perform.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21084,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PowersOfTwo.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N                PIC 9(3).\n       01  RESULT.\n           05 RESLEN        PIC 9(3).\n           05 RES           PIC 9(38) OCCURS 200.\n\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING RESLEN FROM 0 UNTIL RESLEN > N\n               COMPUTE RES(RESLEN + 1) = 2 ** RESLEN\n           END-PERFORM.\n       END PROGRAM PowersOfTwo.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21085,"user_id":null,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n      \n       working-storage section.\n       01  i                pic 999.\n      \n       linkage section.\n       01  n                pic 9(3).\n\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                                      depending on resLength.\n      \n       procedure division using n result.\n      \n          initialize result.\n      \n          compute resLength = n + 1.\n      \n          perform varying i from 0 by 1 until i > n\n            compute res(i + 1) = 2 ** i\n          end-perform.\n      \n          goback.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21086,"user_id":null,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n       working-storage section.\n       77 i             usage is index.\n      \n       linkage section.\n       01  n                pic 9(3).\n\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                                      depending on resLength.\n      \n       procedure division using n result.\n          initialize result\n          compute resLength = n + 1\n          perform varying i from 0 until i > n\n             compute res(i + 1) = 2 ** i\n          end-perform\n          goback.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21087,"user_id":null,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n      \n       linkage section.\n       01  n                pic 9(3).\n\n       01  result.\n           05 resLength     pic 9(3) .\n           05 res           pic 9(38) occurs 1 to 201 times \n                                      depending on resLength.\n        \n      \n       procedure division using n result .\n      \n          initialize result\n      \n          add 1 to n\n          add 1 to resLength      \n          move 1 to res(1)\n\n          perform until resLength >= n\n      \n            compute res(resLength + 1) = 2 ** resLength\n            compute resLength = resLength + 1\n\n          end-perform\n\n          goback.\n       end program PowersOfTwo.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21088,"user_id":null,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n       working-storage section.\n       01 ws-i              pic 9(3).\n       01 ws-len            pic 9(3).\n       01 ws-test           pic 9(38).\n      \n       linkage section.\n       01  n                pic 9(3).\n\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                                      depending on resLength.\n      \n       procedure division using n result.\n          initialize result\n      \n          add 1 to n giving ws-len. \n          move ws-len to resLength.\n          perform varying ws-i from 0 by 1 until ws-i>n\n            compute ws-test = 2**(ws-i)\n            move ws-test to res(ws-i + 1)\n          end-perform.\n          \n          \n          display result.\n          \n          goback.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21089,"user_id":53,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n       linkage section.\n       01  n                pic 9(3).\n       01  result.\n           05 m             pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                                      depending on m.\n       procedure division using n result.\n          initialize result\n          perform until m > n\n            add 1 to m\n            compute res(m) = 2 ** (m - 1)\n          end-perform\n          goback.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21090,"user_id":168,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n      \n       linkage section.\n       01  n                pic 9(3).\n\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                                      depending on resLength indexed i.\n      \n       procedure division using n result.\n          add 1 to n giving resLength\n          perform varying i from 0 until i > n\n              compute res(i + 1) = 2 ** i\n          end-perform.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21091,"user_id":50,"body":"       identification division.\n       program-id. PowersOfTwo.\n       data division.\n      \n       linkage section.\n       01  n                pic 9(3).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(38) occurs 0 to 200 times \n                            depending on resLength indexed by i.\n      \n       procedure division using n result.\n      \n          initialize result\n          compute resLength = n + 1\n          perform varying i from 0 until i > n\n              compute res(i + 1) = 2 ** i\n          end-perform\n      \n          goback.\n       end program PowersOfTwo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a0e5c372292dd76d000d7e":[{"id":21092,"user_id":50,"body":"       identification division.\n       program-id. RepeatStr.\n       data division.\n       working-storage section.\n       01  i               usage index.\n      \n       linkage section.\n       01  n               pic 9(2).\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-chars.\n              07 pic x occurs 0 to 50 times depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res-chars.\n              07 pic x occurs 0 to 3000 times \n                                 depending on res-length.\n      \n       procedure division using n s result.\n      \n          set i to 1\n          compute res-length = n * s-length\n          perform n times\n              string s-chars delimited by size\n                     into res-chars\n                     with pointer i\n              end-string\n          end-perform.\n      \n       end program RepeatStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21093,"user_id":null,"body":"       identification division.\n       program-id. RepeatStr.\n       data division.\n       working-storage section.\n       77 i                usage is index.\n      \n       linkage section.\n       01  n               pic 9(2).\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-string.\n              10 s-char       pic x occurs 0 to 50 times \n                                    depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res-string.\n              10 res          pic x occurs 0 to 3000 times \n                                    depending on res-length.\n      \n       procedure division using n s result.\n          compute res-length = s-length * n\n          set i to 1\n          perform n times\n             string s-string into res-string with pointer i\n             end-string\n          end-perform\n          goback.\n       end program RepeatStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21094,"user_id":421,"body":"       identification division.\n       program-id. RepeatStr.\n       author. \"ejini\u6218\u795e\".\n       data division.       \n       linkage section.\n       01  n               pic 9(2).\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 50 times \n                                  depending on s-length\n                                  indexed by i.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x occurs 0 to 3000 times \n                                 depending on res-length.\n      \n       procedure division using n s result.\n           perform until n = 0\n               perform varying i from 1 by 1 until i > s-length\n                   add 1 to res-length\n                   move s-char(i) to res(res-length)\n               end-perform\n               subtract 1 from n\n           end-perform.\n       end program RepeatStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21095,"user_id":50,"body":"       identification division.\n       program-id. RepeatStr.\n       data division.\n      \n       linkage section.\n       01  n              pic 9(2).\n       01  s.\n           05 s-length    pic 9(2).\n           05 s-chars.\n              07 s-char   pic x occurs 0 to 50 times \n                          depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res-chars.\n              07 res       pic x occurs 0 to 3000 times \n                                 depending on res-length.\n      \n       procedure division using n s result.\n      \n          move 0 to res-length\n          perform n times\n            perform varying i from 1 until i > s-length\n              add 1 to res-length\n              move s-char(i) to res(res-length)\n            end-perform\n          end-perform\n      \n          goback.\n       end program RepeatStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21096,"user_id":168,"body":"       identification division.\n       program-id. RepeatStr.\n       data division.\n       working-storage section.\n       01  i               usage index.\n      \n       linkage section.\n       01  n               pic 9(2).\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 50 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x occurs 0 to 3000 times \n                                 depending on res-length.\n      \n       procedure division using n s result.\n          compute res-length = n * s-length\n          perform varying i from 0 until i >= n\n              move s(3:s-length) to result(5 + i * s-length:s-length)\n          end-perform.\n       end program RepeatStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21097,"user_id":53,"body":"       identification division.\n       program-id. RepeatStr.\n       data division.\n       linkage section.\n       01  n              pic 9(2).\n       01  s.\n           05 s-length    pic 9(2).\n           05 s-chars.\n              07 s-char   pic x occurs 0 to 50 times \n                          depending on s-length \n                          indexed by i.\n       01  result.\n           05 res-length  pic 9(4).\n           05 res-chars.\n              07 res      pic x occurs 0 to 3000 times \n                          depending on res-length.\n       procedure division using n s result.\n          initialize result\n          perform n times\n            perform varying i from 1 until i > s-length\n              add 1 to res-length\n              move s-char(i) to res(res-length)\n            end-perform\n          end-perform\n          goback.\n       end program RepeatStr.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a1d5ef7cb1f3db590002af":[{"id":21098,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIBONACCI.\n       DATA DIVISION.\n       working-storage section.\n       01 a           pic 9(32).\n       01 b           pic 9(32).\n       01 c           pic 9(32).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           compute a = 0\n           compute b = 1\n           perform varying n from n by -1 until n = 0\n               compute c = b\n               add a to b\n               compute a = c\n           end-perform\n           compute result = a.\n       END PROGRAM FIBONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21099,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIBONACCI.\n       DATA DIVISION.\n       working-storage section.\n       01 a           pic 9(32).\n       01 b           pic 9(32).\n       01 c           pic 9(32).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n           if n = 0 then compute result = 1; goback end-if\n           compute a = 0\n           compute b = 1\n           perform varying n from n by -1 until n = 0\n               compute c = b\n               add a to b\n               compute a = c\n           end-perform\n           compute result = a.\n       END PROGRAM FIBONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21100,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIBONACCI.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(32).\n       01 B           PIC 9(32).\n       01 C           PIC 9(32).\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n            Move 0 to a\n            Move 1 to b\n            Perform varying i from n by -1 until i = 0,\n                move a to c\n                move b to a\n                compute b = b + c\n            End-perform\n            move a to result\n            Goback.\n       END PROGRAM FIBONACCI.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21101,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FIBONACCI.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(32).\n       01 B           PIC 9(32).\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n\n            Move 0 to a,\n            Move 1 to result,\n            \n            Perform varying i from 2 by 1 until i > n,\n                Compute b = a + result,\n                Move result to a,\n                Move b to result,\n            End-perform\n\n            Goback.\n\n       END PROGRAM FIBONACCI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a1fd2ce298a731b20006a4":[{"id":21102,"user_id":168,"body":"       identification division.\n       program-id. is_palindrome.\n      \n       data division.\n       linkage section.\n       01 s           pic a(25).\n       01 result      pic 9.\n      \n       procedure division using s result.\n          move function upper-case(s) to s\n          if function reverse(function trim(s)) = s\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program is_palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21103,"user_id":null,"body":"       identification division.\n       program-id. is_palindrome.\n      \n       data division.\n       working-storage section.      \n       77 s-len        pic s9(4) comp-5.\n       77 s-len-half   pic s9(4) comp-5.\n       77 i            usage is index.\n\n       linkage section.\n       01 s           pic a(25).\n       01 result      pic 9.\n      \n       procedure division using s result.\n          move function upper-case(s) to s\n          set s-len to length of function trim(s)\n          compute s-len-half = s-len \/ 2\n          set result to 1\n          perform varying i from 1 until i > s-len-half or result = 0\n             if s(i:1) not = s(s-len - i + 1:1) then\n                set result to 0\n             end-if\n          end-perform                \n          goback.\n       end program is_palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21104,"user_id":null,"body":"       identification division.\n       program-id. is_palindrome.\n      \n       data division.\n       working-storage section.\n       01 s-size      pic 9(02).\n       \n       linkage section.\n       01 s           pic a(25).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          initialize result\n          move function stored-char-length(s) to s-size\n          move function lower-case(s) to s\n          if function reverse(function trim(s)) = s\n             move 1 to result\n          end-if\n          goback.\n       end program is_palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21105,"user_id":null,"body":"       identification division.\n       program-id. is_palindrome.\n      \n       data division.\n       working-storage section.\n       01 s-size      pic 9(02).\n       \n       linkage section.\n       01 s           pic a(25).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          initialize result\n          move function stored-char-length(s) to s-size\n          move function lower-case(s) to s\n          if function reverse(s(1:s-size)) = s\n             move 1 to result\n          end-if\n          goback.\n       end program is_palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21106,"user_id":53,"body":"       identification division.\n       program-id. is_palindrome.\n       data division.\n       local-storage section.\n       01 r           pic a(25).\n       linkage section.\n       01 s           pic a(25).\n       01 result      pic 9.\n       procedure division using s result.\n          initialize result\n          move function lower-case(s) to r\n          if function reverse(function trim(r)) = r\n            set result to 1\n          end-if\n          goback.\n       end program is_palindrome.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21107,"user_id":50,"body":"       identification division.\n       program-id. is_palindrome.\n      \n       data division.\n       local-storage section.\n       01 w           pic a(25).\n\n       linkage section.\n       01 s           pic a(25).\n       01 result      pic 9.\n      \n       procedure division using s result.\n      \n          move function lower-case(s) to w\n          if function reverse(function trim(w)) = w\n                set result to 1\n           else set result to 0.\n      \n       end program is_palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a429e253ba3381850000fb":[{"id":21108,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n           EVALUATE WEIGHT \/ HEIGHT \/ HEIGHT\n               WHEN <= 18.5    MOVE \"Underweight\" TO RESULT\n               WHEN <= 25      MOVE \"Normal\" TO RESULT\n               WHEN <= 30      MOVE \"Overweight\" TO RESULT\n               WHEN OTHER      MOVE \"Obese\" TO RESULT\n           END-EVALUATE.\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21109,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n          evaluate weight \/ height ** 2\n             when <= 18.5 move 'Underweight' to result\n             when <= 25   move 'Normal' to result\n             when <= 30   move 'Overweight' to result\n             when other   move 'Obese' to result\n          end-evaluate.\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21110,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 N                PIC 9(8)v9(5).\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n      \n           Compute N = weight \/ (height ** 2),\n      \n           Evaluate true\n              When N > 30\n                  Move \"Obese\" to result,\n              When N > 25\n                  Move \"Overweight\" to result,\n              When N > 18.5\n                  Move \"Normal\" to result,\n              When other\n                  Move \"Underweight\" to result,\n          End-evaluate\n      \n          GOBACK.\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21111,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       77 BMI              COMP-1.\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n          COMPUTE BMI = WEIGHT \/ HEIGHT ** 2\n          DISPLAY 'BMI=' BMI\n          EVALUATE TRUE\n             WHEN BMI <= 18.5 MOVE 'Underweight' TO RESULT\n             WHEN BMI <= 25.0 MOVE 'Normal'      TO RESULT\n             WHEN BMI <= 30.0 MOVE 'Overweight'  TO RESULT\n             WHEN OTHER       MOVE 'Obese'       TO RESULT\n          END-EVALUATE\n          GOBACK.\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21112,"user_id":null,"body":"       identification division.\n       program-id. BMI.\n       data division.\n       linkage section.\n       01 weight           pic 9(8).\n       01 height           pic 9(8)v9(2).\n       01 result           pic a(11).\n       procedure division using weight height result.\n          evaluate (weight \/ (height ** 2))\n             when <= 18.5\n                move \"Underweight\" to result\n             when <= 25.0\n                move \"Normal\" to result\n             when <= 30.0 \n                move \"Overweight\" to result\n             when other\n                move \"Obese\" to result\n          end-evaluate\n          goback.\n       end program BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21113,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 BMINDEX          PIC 9(8)V9(2).\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n           COMPUTE BMINDEX = WEIGHT \/ (HEIGHT * HEIGHT)\n      \n           EVALUATE BMINDEX\n               WHEN <= 18.5\n                   MOVE \"Underweight\" TO RESULT\n               WHEN <= 25.0\n                   MOVE \"Normal\" TO RESULT\n               WHEN <= 30.0\n                   MOVE \"Overweight\" TO RESULT\n               WHEN OTHER\n                   MOVE \"Obese\" TO RESULT\n           END-EVALUATE\n           .\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21114,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 BMI              PIC 9(2)V9(2).\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n          COMPUTE BMI = WEIGHT \/ (HEIGHT * HEIGHT).\n          EVALUATE TRUE\n            WHEN BMI <= 18.5\n              MOVE \"Underweight\" TO RESULT\n            WHEN BMI <= 25.0\n              MOVE \"Normal\" TO RESULT\n            WHEN BMI <= 30.0\n              MOVE \"Overweight\" TO RESULT\n            WHEN OTHER\n              MOVE \"Obese\" TO RESULT\n          END-EVALUATE.\n          GOBACK.\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21115,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 c                PIC 9(8)v9(5).\n       LINKAGE SECTION.\n       01 a           PIC 9(8).\n       01 b           PIC 9(8)V9(2).\n       01 r           PIC A(11).\n       PROCEDURE DIVISION USING a b r.\n            compute c = a \/ (b ** 2)\n            evaluate c\n              when <= 18.5\n                  move \"Underweight\" to r\n              when <= 25\n                  move \"Normal\" to r\n              when <= 30 \n                  move \"Overweight\" to r\n              when other\n                  move \"Obese\" to r\n              end-evaluate\n          GOBACK.\n       END PROGRAM BMI.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21116,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BMI.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 N                PIC 9(8)v9(5).\n       LINKAGE SECTION.\n       01 WEIGHT           PIC 9(8).\n       01 HEIGHT           PIC 9(8)V9(2).\n       01 RESULT           PIC A(11).\n       PROCEDURE DIVISION USING WEIGHT HEIGHT RESULT.\n           Compute N = weight \/ (height * height)\n           Evaluate true\n              When N > 30\n                  Move \"Obese\" to RESULT\n              When N > 25\n                  Move \"Overweight\" to RESULT\n              When N > 18.5\n                  Move \"Normal\" to RESULT\n              When other\n                  Move \"Underweight\" to RESULT\n          End-evaluate\n          GOBACK.\n       END PROGRAM BMI.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a4d500e298a7952100035d":[{"id":21117,"user_id":168,"body":"       identification division.\n       program-id. HexToDec.\n       data division.\n       working-storage section.\n       01  cs            pic x(11).\n       01  res           usage pointer.\n       01  r2 redefines res usage binary-double.\n      \n       linkage section.\n       01  s             pic x(10).\n       01  result        pic s9(10) sign leading.\n      \n       procedure division using s result.\n          initialize result\n          move all low-value to cs\n          move s to cs\n          call 'strtoll' using cs, by value 0, 16 returning res\n          move r2 to result\n          goback.\n       end program HexToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21118,"user_id":null,"body":"       identification division.\n       program-id. HexToDec.\n       data division.\n      \n      \n       working-storage section.\n       01 num-end        pic 9(2).\n       01 num-start      pic 9(2).\n       01 digit-idx      pic 9(2).\n       01 digit-value    pic 9(10).\n       01 Filler         pic x value 'N'.\n          88 is-negative value 'Y'.\n          88 is-positive value 'N'.\n      \n       linkage section.\n       01 hex-in        pic x(10).\n       01 result        pic s9(10) sign leading.\n      \n      \n       procedure division using hex-in result.\n      \n          initialize result.\n          initialize num-start.\n          initialize num-end.\n          initialize digit-idx.\n          set is-positive to True.\n      * You will receive positive and negative numbers.\n      * Letters are upper-case in `s`.\n          \n      \n      *   First, work out how long the hex number is\n      *   It's not right-justified, annoyingly.\n          move 1 to num-end.\n          perform until hex-in(num-end:1) = \" \" or num-end = 11\n            if hex-in(num-end:1) = '-'\n              set is-negative to True\n            end-if\n            add 1 to num-end\n          end-perform.\n\n      *   Use this to determine the start and end indexes of the number,\n      *   ignoring the sign.\n          subtract 1 from num-end.\n          move num-end to digit-idx.\n          if is-negative\n            subtract 2 from digit-idx\n            move 2 to num-start\n          else\n            subtract 1 from digit-idx\n            move 1 to num-start\n          end-if.\n      \n      *   Go through each character one by one, accumulating into the result\n          perform until num-start > num-end\n            initialize digit-value\n            evaluate hex-in(num-start:1)\n              when \"F\" compute digit-value = 15 * (16 ** digit-idx)\n              when \"E\" compute digit-value = 14 * (16 ** digit-idx)\n              when \"D\" compute digit-value = 13 * (16 ** digit-idx)\n              when \"C\" compute digit-value = 12 * (16 ** digit-idx)\n              when \"B\" compute digit-value = 11 * (16 ** digit-idx)\n              when \"A\" compute digit-value = 10 * (16 ** digit-idx)\n              when \"9\" compute digit-value = 9 * (16 ** digit-idx)\n              when \"8\" compute digit-value = 8 * (16 ** digit-idx)\n              when \"7\" compute digit-value = 7 * (16 ** digit-idx)\n              when \"6\" compute digit-value = 6 * (16 ** digit-idx)\n              when \"5\" compute digit-value = 5 * (16 ** digit-idx)\n              when \"4\" compute digit-value = 4 * (16 ** digit-idx)\n              when \"3\" compute digit-value = 3 * (16 ** digit-idx)\n              when \"2\" compute digit-value = 2 * (16 ** digit-idx)\n              when \"1\" compute digit-value = 1 * (16 ** digit-idx)\n            end-evaluate\n            add digit-value to result\n            add 1 to num-start\n            subtract 1 from digit-idx\n          end-perform.\n      \n      *   Finally, multiply by -1 if it is negative\n          if is-negative compute result = result * -1 end-if.\n            \n          goback.\n       end program HexToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21119,"user_id":null,"body":"       identification division.\n       program-id. HexToDec.\n       data division.\n       working-storage section.\n       77 i              usage is index.\n       77 num            usage is index.\n       77 sig            pic s9.\n      \n       linkage section.\n       01  s             pic x(10).\n       01  result        pic s9(10) sign leading.\n      \n       procedure division using s result.\n          initialize result\n          if s(1:1) = '-' then\n             set i to 2\n             set sig to -1\n          else\n             set i to 1\n             set sig to 1\n          end-if\n          perform until i > function length(s) or s(i:1) = space\n             if s(i:1) is numeric \n                set num to function numval(s(i:1))\n             else\n                inspect s(i:1) converting \"ABCDEF\" to \"012345\"\n                compute num = function numval(s(i:1)) + 10\n             end-if\n             compute result = result *16 + num\n             set i up by 1\n          end-perform\n          compute result = result * sig      \n          goback.\n       end program HexToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21120,"user_id":53,"body":"       identification division.\n       program-id. HexToDec.\n       data division.\n       local-storage section.\n       01  h             pic x.\n       01  hdb.\n          02  hd         pic s9(4) comp-5 value 0.\n       01  n             pic 9(3).\n       01  f             pic s9.\n       01  p             pic 9(2).\n       01  i             usage index.\n       linkage section.\n       01  s             pic x(10).\n       01  result        pic s9(10) sign leading.\n       procedure division using s result.\n          initialize result\n          if s(1:1) = '-' then set f to -1, set i to 2\n          else set f i to 1 end-if\n          perform varying i from i until s(i:1) = space or i > 10\n            move s(i:1) to h\n            move h to hdb(1:1)\n            move hd to n\n            move 55 to p\n            if h is numeric then subtract 7 from p end-if\n            subtract p from n giving n\n            compute result = result * 16 + n\n          end-perform\n          multiply f by result\n          goback.\n       end program HexToDec.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21121,"user_id":50,"body":"       identification division.\n       program-id. HexToDec.\n       data division.\n       local-storage section.\n       01  factor        pic s9.\n       01  i             usage index.\n      \n       linkage section.\n       01  s             pic x(10).\n       01  result        pic s9(10) sign leading.\n      \n       procedure division using s result.\n      \n          initialize result\n          if s(1:1) = '-'\n            set factor to -1\n            set i to 2\n          else\n            set factor i to 1\n          end-if\n          perform varying i from i until s(i:1) = space or i = 11\n            if s(i:1) is numeric\n              compute result = 16 * result + function numval(s(i:1))\n            else\n              compute result = 16 * result + function ord(s(i:1)) - 56\n            end-if\n          end-perform\n      \n          multiply factor by result\n                  \n          goback.\n       end program HexToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a5c31ce298a7e6b7000334":[{"id":21122,"user_id":null,"body":"       identification division.\n       program-id. BinToDec.\n      \n       data division.\n       working-storage section.\n       77 i         usage is index.\n      \n       linkage section.\n       01 bin         pic x(127).\n       01 result      pic 9(38).\n      \n       procedure division using bin result.\n          initialize result\n          perform varying i from 1 until i > function length(bin) \n                                      or bin(i:1) = space\n             multiply 2 by result\n             if bin(i:1) = '1' then\n                add 1 to result\n             end-if\n          end-perform\n          goback.\n       end program BinToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21123,"user_id":168,"body":"       identification division.\n       program-id. BinToDec.\n      \n       data division.\n       working-storage section.\n       01 i           usage index.\n       01 d           pic 9.\n       linkage section.\n       01 bin         pic x(127).\n       01 result      pic 9(38).\n      \n       procedure division using bin result.\n          initialize result\n          perform varying i from 1 until i > 127 or bin(i:1) = space\n              move bin(i:1) to d\n              compute result = 2 * result + d\n          end-perform.\n       end program BinToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21124,"user_id":53,"body":"       identification division.\n       program-id. BinToDec.\n       data division.\n       linkage section.\n       01 bin.\n          03 c        pic x occurs 127 indexed i.\n       01 result      pic 9(38).\n       procedure division using bin result.\n          initialize result\n          perform varying i from 1 \n              until i > length of function trim(bin)\n            compute result = 2 * result + function numval(c(i))\n          end-perform.\n       end program BinToDec.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21125,"user_id":50,"body":"       identification division.\n       program-id. BinToDec.\n      \n       data division.\n       linkage section.\n       01 bin.\n          03 c pic x occurs 127 indexed i.\n       01 result      pic 9(38).\n      \n       procedure division using bin result.\n      \n          initialize result\n          perform varying i from 1\n          until i = 128 or c(i) = space\n            compute result = 2 * result + function numval(c(i))\n          end-perform.\n      \n       end program BinToDec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57a62154cf1fa5b25200031e":[{"id":21126,"user_id":421,"body":"       identification division.\n       program-id. AlternateCase.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  s.\n           03 s-length      pic 9(3).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 200 times \n                              depending on s-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 res-chars.\n               05 res-char pic a occurs 1 to 200 times \n                              depending on res-length.\n\n       procedure division using s result.\n           move s to result\n           inspect res-chars converting \n           \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" to\n           \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".\n       end program AlternateCase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21127,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AlternateCase.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S.\n           03 S-LEN     PIC 9(3).\n           03 S-CHR     PIC A OCCURS 1 TO 200 DEPENDING S-LEN INDEXED I.\n       01  RESULT       PIC X(203).\n\n       PROCEDURE DIVISION USING S RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > S-LEN\n               IF  S-CHR(I) >= 'a'\n                   MOVE FUNCTION UPPER-CASE(S-CHR(I))  TO S-CHR(I)\n               ELSE\n                   MOVE FUNCTION LOWER-CASE(S-CHR(I))  TO S-CHR(I)\n               END-IF\n           END-PERFORM\n      \n           MOVE S  TO RESULT.\n       END PROGRAM AlternateCase.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21128,"user_id":null,"body":"       identification division.\n       program-id. AlternateCase.\n\n       data division.\n       local-storage section.\n       01 ls-old pic a(52)\n     - value \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".\n       01 ls-new pic a(52)\n     - value \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".\n      \n       linkage section.\n       01  s.\n           03 s-length      pic 9(3).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 200 times \n                              depending on s-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 res-chars.\n               05 res-char pic a occurs 1 to 200 times \n                              depending on res-length.\n\n       procedure division using s result.\n           move s to result.\n           inspect result converting ls-old to ls-new.\n           goback.\n       end program AlternateCase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21129,"user_id":168,"body":"       identification division.\n       program-id. AlternateCase.\n\n       data division.\n       linkage section.\n       01  s.\n           03 s-length      pic 9(3).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 200 times \n                              depending on s-length indexed i.\n       01  result.\n           03 res-length      pic 9(3).\n           03 res-chars.\n               05 res-char pic a occurs 1 to 200 times \n                              depending on res-length.\n\n       procedure division using s result.\n           move s to result\n           inspect res-chars converting\n              'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' to\n              'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.\n       end program AlternateCase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21130,"user_id":53,"body":"       identification division.\n       program-id. AlternateCase.\n       data division.\n       local-storage section.\n       01  n                   pic 9(3).\n       01 bin1        usage binary-short.\n       01 bin2        usage binary-short.\n       linkage section.\n       01  s.\n           03 s-length         pic 9(3).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 200 times \n                               depending on s-length\n                               indexed by i.\n       01  result.\n           03 res-length       pic 9(3).\n           03 res-chars.\n               05 res-char pic a occurs 1 to 200 times \n                              depending on res-length.\n       procedure division using s result.\n           initialize result\n           move s-length to res-length\n           perform varying i from 1 until i > s-length\n              compute n = function ord(s-char(i))\n              if (n >= 66 and n <= 91) or (n >= 98 and n <= 123) then\n                move n to bin1\n                display n\n                move 32 to bin2\n                call 'CBL_XOR' using bin1 bin2 by value 4\n                move bin2 to n\n                move function char(n) to res-char(i)\n              else\n                move s-char(i) to res-char(i)\n              end-if\n           end-perform\n           goback.\n       end program AlternateCase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21131,"user_id":50,"body":"       identification division.\n       program-id. AlternateCase.\n\n       data division.\n       linkage section.\n       01  s.\n           03 s-length      pic 9(3).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 200 times \n                              depending on s-length.\n       01  result.\n           03 res-length      pic 9(3).\n           03 res-chars.\n               05 res-char pic a occurs 1 to 200 times \n                              depending on res-length.\n\n       procedure division using s result.\n      \n           move s to result\n           inspect res-chars converting\n           'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n           to\n           'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n      \n           goback.\n       end program AlternateCase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57aa218e72292d98d500240f":[{"id":21132,"user_id":421,"body":"       identification division.\n       program-id. heron.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.   \n       WORKING-STORAGE SECTION.\n       01 s                  pic 9(4)V9(2).\n       linkage section.\n       01  x                 pic 9(3).\n       01  y                 pic 9(3).\n       01  z                 pic 9(3).\n       01  result            pic 9(8)v9(2).      \n       procedure division using x y z result.\n           COMPUTE s = (x + y + z) \/ 2\n           COMPUTE result ROUNDED = FUNCTION SQRT( s * (s - x) * (s - y) \n                                     * (s - z)).\n       end program heron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21133,"user_id":null,"body":"       identification division.\n       program-id. heron.\n       data division.\n       working-storage section.\n       01 ws-s               pic 9(8)v9(2).\n       linkage section.\n       01  x                 pic 9(3).\n       01  y                 pic 9(3).\n       01  z                 pic 9(3).\n       01  result            pic 9(8)v9(2).\n      \n       procedure division using x y z result.\n      \n      * Your code here\n          compute ws-s = (x + y + z) \/ 2.\n          compute result rounded = function sqrt(ws-s * (ws-s - x) * \n                                                (ws-s - y) * (ws-s - z)).\n          goback.\n       end program heron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21134,"user_id":null,"body":"       identification division.\n       program-id. heron.\n       data division.\n      \n       local-storage section.\n       01  s                 pic 9(10)v9(4).\n      \n       linkage section.\n       01  x                 pic 9(3).\n       01  y                 pic 9(3).\n       01  z                 pic 9(3).\n       01  result            pic 9(8)v9(2).\n      \n       procedure division using x y z result.\n           compute s = (x + y + z) \/ 2\n           compute s = function sqrt(s * (s - x) * (s - y) * (s - z))\n           compute result rounded = s\n           goback.\n       end program heron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21135,"user_id":168,"body":"       identification division.\n       program-id. heron.\n       data division.\n       working-storage section.\n       01  p                 pic 9(4)v9(1).\n      \n       linkage section.\n       01  x                 pic 9(3).\n       01  y                 pic 9(3).\n       01  z                 pic 9(3).\n       01  result            pic 9(8)v9(2).\n      \n       procedure division using x y z result.\n           compute p = (x + y + z) \/ 2\n           compute result rounded = \n                function sqrt(p * (p - x) * (p - y) * (p - z)).\n       end program heron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21136,"user_id":53,"body":"       identification division.\n       program-id. heron.\n       data division.\n       local-storage section.\n       01  k                 pic 9(8)v9.\n       01  q                 pic 9(8)v9(4).\n       01  r                 pic 9(8).\n       linkage section.\n       01  x                 pic 9(3).\n       01  y                 pic 9(3).\n       01  z                 pic 9(3).\n       01  result            pic 9(8)v9(2).\n       procedure division using x y z result.\n          compute k = (x + y + z) \/ 2\n          compute q = function sqrt(k * (k - x) * (k - y) * (k - z))\n          compute r rounded = 100 * q\n          divide 100 into r giving result\n          goback.\n       end program heron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21137,"user_id":50,"body":"       identification division.\n       program-id. heron.\n       data division.\n       local-storage section.\n       01  s                 pic 9(8)v9.\n       01  a                 pic 9(8)v9(4).\n      \n       linkage section.\n       01  x                 pic 9(3).\n       01  y                 pic 9(3).\n       01  z                 pic 9(3).\n       01  result            pic 9(8)v9(2).\n      \n       procedure division using x y z result.\n      \n          compute s = (x + y + z) \/ 2\n          compute a = function sqrt(s * (s - x) * (s - y) * (s - z))\n                      + 0.005\n          move a to result\n      \n           goback.\n       end program heron.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57b06f90e298a7b53d000a86":[{"id":21138,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. QueueTime.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  FILLER.\n           05 ELE-QUEUE      PIC 9(4) OCCURS 100 DEPENDING N INDEXED I.\n       LINKAGE SECTION.\n       01  CUSTOMERS.\n           05 NUMCUSTOMERS   PIC 9(3).\n           05 CUSTOMER       PIC 9(3) OCCURS 200 DEPENDING NUMCUSTOMERS.\n       01  N                 PIC 9(3).\n       01  RESULT            PIC 9(4).\n\n       PROCEDURE DIVISION USING CUSTOMERS N RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > NUMCUSTOMERS\n               ADD  CUSTOMER(I)  TO ELE-QUEUE(1)\n               SORT ELE-QUEUE ON ASCENDING KEY\n           END-PERFORM\n           SORT ELE-QUEUE ON DESCENDING KEY\n           MOVE ELE-QUEUE(1)  TO RESULT.\n       END PROGRAM QueueTime.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21139,"user_id":53,"body":"       identification division.\n       program-id. QueueTime.\n       data division.\n       local-storage section.\n       01  l                 pic 9(3).\n       01  i                 pic 9(3).\n       01  p                 pic 9(3).\n       01  c                 pic 9(4).\n       01  t                 pic 9(4).\n       01  q-arr.\n           05 q              pic 9(4) occurs 0 to 999 times \n                                      depending on n.\n       linkage section.\n       01  cust-arr.\n           05 sz             pic 9(3).\n           05 arr            pic 9(3) occurs 0 to 200 times \n                                      depending on sz.\n       01  n                 pic 9(3).\n       01  r                 pic 9(4).\n       procedure division using cust-arr n r.\n          initialize r\n          if n = 0 or sz = 0 then goback end-if\n          if sz = 1 then move arr(1) to r, goback end-if\n          perform varying i from 0 until i >= sz\n            add arr(i + 1) to q(1)\n            set p to 0\n            divide 2 into n giving l\n            perform until p >= l\n              compute c = p * 2 + 1\n              if c + 1 < n and q(c + 2) < q(c + 1) then\n                add 1 to c\n              end-if\n              if q(p + 1) <= q(c + 1) then\n                exit perform\n              end-if\n              move q(p + 1) to t\n              move q(c + 1) to q(p + 1)\n              move t to q(c + 1)\n              move c to p\n            end-perform\n          end-perform\n          perform varying i from 0 until i >= n\n            if q(i + 1) > r then move q(i + 1) to r end-if\n          end-perform\n          goback.\n       end program QueueTime.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21140,"user_id":50,"body":"       identification division.\n       program-id. QueueTime.\n       data division.\n       local-storage section.\n       01  .\n           03 tills occurs 0 to 100 times depending on n.\n              05 num pic 9(4).\n      \n       linkage section.\n       01  arr.\n           05 l              pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 200 times \n                             depending on l indexed i.\n       01  n                 pic 9(3).\n       01  m                 pic 9(4).\n      \n       procedure division using arr n m.\n      \n          initialize m\n      \n          perform varying i from 1 until i > l\n              add xs(i) to num(1)\n              sort tills on ascending num\n          end-perform\n          \n          perform varying i from 1 until i > n\n              move function max(m, num(i)) to m\n          end-perform\n      \n          goback.\n       end program QueueTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57b71a89b69bfc92c7000170":[{"id":21141,"user_id":421,"body":"       identification division.\n       program-id. num-of-squares.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 tot           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n           initialize tot\n           perform varying result from 0 by 1 until tot >= n\n               compute tot = tot + result * result               \n           end-perform\n           subtract 2 from result.\n       end program num-of-squares.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21142,"user_id":168,"body":"       identification division.\n       program-id. num-of-squares.\n      \n       data division.\n       local-storage section.\n       01 s           pic 9(10).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          perform varying result from 0 by 1 until s >= n\n              compute s = s + result ** 2\n          end-perform\n          subtract 2 from result.\n       end program num-of-squares.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21143,"user_id":76,"body":"       identification division.\n       program-id. num-of-squares.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n         set i to 1\n         perform until result >= n\n           compute result = result + i ** 2\n           add 1 to i\n         end-perform\n         compute result = i - 2\n         .\n       end program num-of-squares.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21144,"user_id":53,"body":"       identification division.\n       program-id. num-of-squares.\n      \n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       01 k           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          perform until m >= n\n            add 1 to k\n            compute m = m + k ** 2\n          end-perform\n          compute result = k - 1\n          goback.\n       end program num-of-squares.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21145,"user_id":50,"body":"       identification division.\n       program-id. num-of-squares.\n      \n       data division.\n       local-storage section.\n       01 s           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          perform varying result from 1 by 1 until s >= n\n            compute s = s + result ** 2\n          end-perform\n          \n          subtract 2 from result\n      \n          goback.\n       end program num-of-squares.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57bc802c615f0ba1e3000029":[{"id":21146,"user_id":168,"body":"       identification division.\n       program-id. faro-cycles.\n      \n       data division.\n       working-storage section.\n       01 deck.\n          05 cards  pic 9(4) occurs 2 to 2000 times \n                             depending on deck-size indexed by i.\n       01 deck1.\n          05 cards1 pic 9(4) occurs 2 to 2000 times\n                             depending on deck-size.\n       01 deck-tmp.\n          05 cs pic 9(4) occurs 2 to 2000 times depending on deck-size.\n      \n       linkage section.\n       01 deck-size        pic 9(8).\n       01 result           pic 9(8).\n      \n       procedure division using deck-size result.\n          perform varying i from 1 until i > deck-size\n              move i to cards(i) cards1(i)\n          end-perform\n          perform with test after varying result from 1 \n                  until deck = deck1\n              move deck to deck-tmp\n              perform varying i from 1 until 2 * i > deck-size\n                  compute cards(2 * i - 1) = cs(i)\n                  compute cards(2 * i) = cs(i + deck-size \/ 2)\n              end-perform\n          end-perform.\n       end program faro-cycles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21147,"user_id":53,"body":"       identification division.\n       program-id. faro-cycles.\n       data division.\n       local-storage section.\n       01 n                pic 9(8) value 1.\n       linkage section.\n       01 m                pic 9(8).\n       01 r                pic 9(8).\n       procedure division using m r.\n        move 0 to r\n        perform until n = 1 and r > 0\n          add 1 to r\n          compute n = (m * function rem(n, 2) + n) \/ 2\n        end-perform\n        goback.\n       end program faro-cycles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21148,"user_id":50,"body":"       identification division.\n       program-id. faro-cycles.\n      \n       data division.\n       local-storage section.\n       01 p                pic 9(8).\n      \n       linkage section.\n       01 deck-size        pic 9(8).\n       01 result           pic 9(8).\n      \n       procedure division using deck-size result.\n      * implementation of evk's JavaScript solution\n      * see https:\/\/www.codewars.com\/kata\/reviews\/57bcac973fdd89cbc300007b\/groups\/57beb2eb93687d8aa1002716\n          move 2 to p\n          perform with test after until p = 2\n              multiply 2 by p\n              if p > deck-size\n                  subtract deck-size from p\n              else\n                  subtract 1 from p\n              end-if\n              add 1 to result\n          end-perform\n      \n          goback.\n       end program faro-cycles.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57bf7fae3b3164dcac000352":[{"id":21149,"user_id":168,"body":"       identification division.\n       program-id. find-primes-sextuplet.\n      \n       data division.\n       working-storage section.\n       01 start-prime-values.\n          05 pic 9(8) value 7.\n          05 pic 9(8) value 97.\n          05 pic 9(8) value 16057.\n          05 pic 9(8) value 19417.\n          05 pic 9(8) value 43777.\n          05 pic 9(8) value 1091257.\n          05 pic 9(8) value 1615837.\n          05 pic 9(8) value 1954357.\n          05 pic 9(8) value 2822707.\n          05 pic 9(8) value 2839927.\n          05 pic 9(8) value 3243337.\n          05 pic 9(8) value 3400207.\n          05 pic 9(8) value 6005887.\n       01 start-primes redefines start-prime-values.\n          05 ps pic 9(8) occurs 13 times indexed by i.\n       01 shifts value '000406101216'.\n          05 ds pic 99 occurs 6 times indexed by j.\n      \n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 rs pic 9(8) occurs 6 times.\n      \n       procedure division using n result.\n          set i to 1\n          search ps varying i\n            when 6 * ps(i) + 48 > n\n              perform varying j from 1 until j > 6\n                compute rs(j) = ps(i) + ds(j)\n              end-perform\n          end-search.\n       end program find-primes-sextuplet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21150,"user_id":53,"body":"       identification division.\n       program-id. find-primes-sextuplet.\n       data division.\n       local-storage section.\n       01  p         pic 9(8) value 7.\n       01  phase.\n           05 p-1    pic 9(8) value 0.\n           05 p-2    pic 9(8) value 4.\n           05 p-3    pic 9(8) value 6.\n           05 p-4    pic 9(8) value 10.\n           05 p-5    pic 9(8) value 12.\n           05 p-6    pic 9(8) value 16.\n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 res-1  pic 9(8).\n           05 res-2  pic 9(8).\n           05 res-3  pic 9(8).\n           05 res-4  pic 9(8).\n           05 res-5  pic 9(8).\n           05 res-6  pic 9(8).\n       procedure division using n result.\n          initialize result\n          move phase to result\n          perform forever\n            if p * 6 + 48 > n then\n              add p to res-1\n              add p to res-2\n              add p to res-3\n              add p to res-4\n              add p to res-5\n              add p to res-6\n              exit perform\n            end-if\n            evaluate p\n              when 7          move 97 to p\n              when 97         move 16057 to p\n              when 16057      move 19417 to p\n              when 19417      move 43777 to p\n              when 43777      move 1091257 to p\n              when 1091257    move 1615837 to p\n              when 1615837    move 1954357 to p\n              when 1954357    move 2822707 to p\n              when 2822707    move 2839927 to p\n              when 2839927    move 3243337 to p\n              when 3243337    move 3400207 to p\n              when 3400207    move 6005887 to p\n            end-evaluate\n          end-perform\n          goback.\n       end program find-primes-sextuplet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21151,"user_id":50,"body":"       identification division.\n       program-id. find-primes-sextuplet.\n      \n       data division.\n      \n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 res-1  pic 9(8).\n           05 res-2  pic 9(8).\n           05 res-3  pic 9(8).\n           05 res-4  pic 9(8).\n           05 res-5  pic 9(8).\n           05 res-6  pic 9(8).\n      \n       procedure division using n result.\n      \n          evaluate n\n              when < 90\n                   move 7 to res-1\n                   move 11 to res-2\n                   move 13 to res-3\n                   move 17 to res-4\n                   move 19 to res-5\n                   move 23 to res-6\n              when < 630\n                   move 97 to res-1\n                   move 101 to res-2\n                   move 103 to res-3\n                   move 107 to res-4\n                   move 109 to res-5\n                   move 113 to res-6\n              when < 96390\n                   move 16057 to res-1\n                   move 16061 to res-2\n                   move 16063 to res-3\n                   move 16067 to res-4\n                   move 16069 to res-5\n                   move 16073 to res-6\n              when < 116550\n                   move 19417 to res-1\n                   move 19421 to res-2\n                   move 19423 to res-3\n                   move 19427 to res-4\n                   move 19429 to res-5\n                   move 19433 to res-6\n              when < 262710\n                   move 43777 to res-1\n                   move 43781 to res-2\n                   move 43783 to res-3\n                   move 43787 to res-4\n                   move 43789 to res-5\n                   move 43793 to res-6\n              when < 6547590\n                   move 1091257 to res-1\n                   move 1091261 to res-2\n                   move 1091263 to res-3\n                   move 1091267 to res-4\n                   move 1091269 to res-5\n                   move 1091273 to res-6\n              when < 9695070\n                   move 1615837 to res-1\n                   move 1615841 to res-2\n                   move 1615843 to res-3\n                   move 1615847 to res-4\n                   move 1615849 to res-5\n                   move 1615853 to res-6\n              when < 11726190\n                   move 1954357 to res-1\n                   move 1954361 to res-2\n                   move 1954363 to res-3\n                   move 1954367 to res-4\n                   move 1954369 to res-5\n                   move 1954373 to res-6\n              when < 16936290\n                   move 2822707 to res-1\n                   move 2822711 to res-2\n                   move 2822713 to res-3\n                   move 2822717 to res-4\n                   move 2822719 to res-5\n                   move 2822723 to res-6\n              when < 17039610\n                   move 2839927 to res-1\n                   move 2839931 to res-2\n                   move 2839933 to res-3\n                   move 2839937 to res-4\n                   move 2839939 to res-5\n                   move 2839943 to res-6\n              when < 19460070\n                   move 3243337 to res-1\n                   move 3243341 to res-2\n                   move 3243343 to res-3\n                   move 3243347 to res-4\n                   move 3243349 to res-5\n                   move 3243353 to res-6\n              when < 20401290\n                   move 3400207 to res-1\n                   move 3400211 to res-2\n                   move 3400213 to res-3\n                   move 3400217 to res-4\n                   move 3400219 to res-5\n                   move 3400223 to res-6\n              when < 36035370\n                   move 6005887 to res-1\n                   move 6005891 to res-2\n                   move 6005893 to res-3\n                   move 6005897 to res-4\n                   move 6005899 to res-5\n                   move 6005903 to res-6\n              when < 39021570\n                   move 6503587 to res-1\n                   move 6503591 to res-2\n                   move 6503593 to res-3\n                   move 6503597 to res-4\n                   move 6503599 to res-5\n                   move 6503603 to res-6\n              when < 43126650\n                   move 7187767 to res-1\n                   move 7187771 to res-2\n                   move 7187773 to res-3\n                   move 7187777 to res-4\n                   move 7187779 to res-5\n                   move 7187783 to res-6\n              when < 45848250\n                   move 7641367 to res-1\n                   move 7641371 to res-2\n                   move 7641373 to res-3\n                   move 7641377 to res-4\n                   move 7641379 to res-5\n                   move 7641383 to res-6\n              when < 48372030\n                   move 8061997 to res-1\n                   move 8062001 to res-2\n                   move 8062003 to res-3\n                   move 8062007 to res-4\n                   move 8062009 to res-5\n                   move 8062013 to res-6\n              when other\n                   move 8741137 to res-1\n                   move 8741141 to res-2\n                   move 8741143 to res-3\n                   move 8741147 to res-4\n                   move 8741149 to res-5\n                   move 8741153 to res-6\n          end-evaluate\n      \n          goback.\n       end program find-primes-sextuplet.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57bfea4cb19505912900012c":[{"id":21152,"user_id":421,"body":"       identification division.\n       program-id. symmetric-point.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  p.\n           05 p1             pic s9(5).\n           05 p2             pic s9(5).\n       01  q.\n           05 q1             pic s9(5).\n           05 q2             pic s9(5).\n       01  result.\n           05 r1             pic s9(5).\n           05 r2             pic s9(5).\n      \n       procedure division using p q result.\n           compute r1 = q1 * 2 - p1\n           compute r2 = q2 * 2 - p2.\n       end program symmetric-point.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21153,"user_id":168,"body":"       identification division.\n       program-id. symmetric-point.\n       data division.\n      \n       linkage section.\n       01  p.\n           05 a             pic s9(5).\n           05 b             pic s9(5).\n       01  q.\n           05 a             pic s9(5).\n           05 b             pic s9(5).\n       01  result.\n           05 r1             pic s9(5).\n           05 r2             pic s9(5).\n      \n       procedure division using p q result.\n          add corresponding q to q\n          subtract corresponding p from q\n          move q to result\n          goback.\n       end program symmetric-point.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21154,"user_id":null,"body":"       identification division.\n       program-id. symmetric-point.\n       data division.\n      \n       linkage section.\n       01  p.\n           05 p1             pic s9(5).\n           05 p2             pic s9(5).\n       01  q.\n           05 q1             pic s9(5).\n           05 q2             pic s9(5).\n       01  result.\n           05 r1             pic s9(5).\n           05 r2             pic s9(5).\n      \n       procedure division using p q result.\n          compute r1 = q1 + (q1 - p1)\n          compute r2 = q2 + (q2 - p2)\n          goback.\n       end program symmetric-point.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21155,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. symmetric-point.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  P.\n           05 P1             PIC S9(5).\n           05 P2             PIC S9(5).\n       01  Q.\n           05 Q1             PIC S9(5).\n           05 Q2             PIC S9(5).\n       01  RESULT.\n           05 R1             PIC S9(5).\n           05 R2             PIC S9(5).\n\n       PROCEDURE DIVISION USING P Q RESULT.\n           COMPUTE R1 = Q1 * 2 - P1\n           COMPUTE R2 = Q2 * 2 - P2.\n       END PROGRAM symmetric-point.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21156,"user_id":76,"body":"       identification division.\n       program-id. symmetric-point.\n       data division.\n      \n       linkage section.\n       01  p.\n           05 p1             pic s9(5).\n           05 p2             pic s9(5).\n       01  q.\n           05 q1             pic s9(5).\n           05 q2             pic s9(5).\n       01  result.\n           05 r1             pic s9(5).\n           05 r2             pic s9(5).\n      \n       procedure division using p q result.\n         compute r1 = q1 * 2 - p1\n         compute r2 = q2 * 2 - p2\n         goback.\n       end program symmetric-point.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21157,"user_id":53,"body":"       identification division.\n       program-id. symmetric-point.\n       data division.\n      \n       linkage section.\n       01  p.\n           05 p1             pic s9(5).\n           05 p2             pic s9(5).\n       01  q.\n           05 q1             pic s9(5).\n           05 q2             pic s9(5).\n       01  result.\n           05 r1             pic s9(5).\n           05 r2             pic s9(5).\n      \n       procedure division using p q result.\n      \n          compute r1 = 2 * q1 - p1\n          compute r2 = 2 * q2 - p2\n      \n          goback.\n       end program symmetric-point.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57c15d314677bb2bd4000017":[{"id":21158,"user_id":421,"body":"       identification division.\n       program-id. Doors.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 result      pic 9(4).\n      \n       procedure division using n result.\n           compute result = function sqrt(n).\n       end program Doors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21159,"user_id":527,"body":"       identification division.\n       program-id. Doors.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 result      pic 9(4).\n      \n       procedure division using n result.\n          compute result = function sqrt(n).\n       end program Doors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21160,"user_id":76,"body":"       identification division.\n       program-id. Doors.\n       data division.\n       linkage section.\n       01 n           pic 9(4).\n       01 result      pic 9(4).\n       procedure division using n result.\n         move function integer(function sqrt(n)) to result.\n       end program Doors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21161,"user_id":50,"body":"       identification division.\n       program-id. Doors.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(4).\n       01 result      pic 9(4).\n      \n       procedure division using n result.\n      \n          compute result = function sqrt(n)\n      \n          goback.\n       end program Doors.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57c7930dfa9fc5f0e30009eb":[{"id":21162,"user_id":168,"body":"       identification division.\n       program-id. closest-power.\n      \n       data division.\n       working-storage section.\n       01 k           pic 9(8).\n       01 m           pic 9(12).\n       01 x           pic 9(20).\n       01 d           pic 9(20)v9.\n      \n       linkage section.\n       01 n           pic s9(20)v9.\n       01 result      pic 9(20).\n       procedure division using n result.\n          compute result = 4\n          move all '9' to d\n          if n <= 4 then goback end-if\n          perform with test after varying k from 2 until m < 2\n              compute m = function integer(n ** (1 \/ k))\n              compute x = m ** k\n              perform cmp\n              compute x = (m + 1) ** k\n              perform cmp\n          end-perform\n          goback.\n       \n       cmp.\n          if function abs(n - x) < d or (n - x = d and x < result)\n              compute result = x\n              compute d = function abs(n - x)\n          end-if.\n       end program closest-power.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21163,"user_id":53,"body":"       identification division.\n       program-id. closest-power.\n       data division.\n       local-storage section.\n       01 i           pic 9(20).\n       01 k           pic s9(20)v9.\n       01 j           pic s9(20)v9.\n       01 x           pic 9(20).\n       01 t           pic s9(20)v9.\n       01 a           pic s9(20)v9.\n       01 b           pic s9(20)v9.\n       linkage section.\n       01 n           pic s9(20)v9.\n       01 r           pic 9(20).\n       procedure division using n r.\n          move 4 to r\n          if n <= 4 then goback end-if\n          move 2 to i\n          compute k rounded mode toward-greater =\n            function log(n) \/ function log(2)\n          perform until i > k\n            compute j = function abs(n ** (1.0 \/ i))\n            move j to x\n            perform aux\n            compute x rounded mode toward-greater = j\n            perform aux\n            add 1 to i\n          end-perform\n          goback.\n      \n       aux.\n          compute t = x ** i\n          compute a = function abs(t - n)\n          compute b = function abs(r - n)\n          if a < b or (a = b and t < r) then\n            move t to r\n          end-if\n          .\n      \n       end program closest-power.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21164,"user_id":50,"body":"       identification division.\n       program-id. closest-power.\n      \n       data division.\n       local-storage section.\n       01 log         pic 9(20).\n       01 i           pic 9(20).\n       01 e           pic 9(20).\n       01 cur         pic 9(20).\n       01 dif         pic 9(20)v9.\n       01 dif-cur     pic 9(20)v9.\n      \n       linkage section.\n       01 n           pic s9(20)v9.\n       01 result      pic 9(20).\n       procedure division using n result.\n          \n          move 4 to result\n      \n          if n <= 4\n              goback\n          end-if\n      \n          compute log rounded mode toward-greater =\n                      function log(n) \/ function log(2)\n          \n          perform varying i from 2 by 1 until i > log\n      \n              compute e       = function integer(n ** (1.0 \/ i))\n              compute cur     = e ** i\n              compute dif     = function abs(n - result)\n              compute dif-cur = function abs(n - cur)\n              \n              if dif-cur < dif or dif-cur = dif and cur < result\n                  move cur     to result\n                  move dif-cur to dif\n              end-if\n      \n              compute cur = (e + 1) ** i\n              compute dif-cur = function abs(n - cur)\n      \n              if dif-cur < dif or dif-cur = dif and cur < result\n                  move cur to result\n              end-if\n      \n          end-perform\n      \n          goback.\n       end program closest-power.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57cc981a58da9e302a000214":[{"id":21165,"user_id":421,"body":"       identification division.\n       program-id. smallEnough.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 100 times \n                                      depending on arr-length indexed i.\n       01  lim               pic 9(4).\n       01  result            pic 9.\n      \n       procedure division using arr lim result.\n           set result to 1\n           perform varying i from 1 by 1 until i > arr-length\n               if xs(i) > lim\n                   set result to 0\n                   goback\n               end-if\n           end-perform.\n       end program smallEnough.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21166,"user_id":168,"body":"       identification division.\n       program-id. smallEnough.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 100 times \n                                      depending on arr-length indexed i.\n       01  lim               pic 9(4).\n       01  result            pic 9.\n      \n       procedure division using arr lim result.\n           move 1 to i\n           search xs varying i\n              at end move 1 to result\n              when xs(i) > lim move 0 to result\n           end-search.\n       end program smallEnough.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21167,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. smallEnough.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN           PIC 9(3).\n           05 XS            OCCURS 100 DEPENDING LEN.\n              10 VAL        PIC 9(4).\n       01  LIM              PIC 9(4).\n       01  RESULT           PIC 9.\n\n       PROCEDURE DIVISION USING ARR LIM RESULT.\n           SORT XS DESCENDING KEY VAL\n           IF  VAL(1) <= LIM\n               MOVE 1  TO RESULT\n           END-IF.\n       END PROGRAM smallEnough.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21168,"user_id":null,"body":"       identification division.\n       program-id. smallEnough.\n       data division.\n      \n       working-storage section.\n       01 i pic 999.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 100 times \n                                      depending on arr-length.\n       01  lim               pic 9(4).\n       01  result            pic 9.\n      \n       procedure division using arr lim result.\n      \n      * Assign 0 to result for 'true', 1 for 'false'\n           move 1 to i\n           move 1 to result\n           perform arr-length times\n             if lim < xs(i) \n               move 0 to result\n             end-if\n             add 1 to i\n           end-perform\n           goback.\n       end program smallEnough.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21169,"user_id":null,"body":"       identification division.\n       program-id. smallEnough.\n       data division.\n       working-storage section.\n       01 i                 pic 9(3).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 100 times \n                                      depending on arr-length.\n       01  lim               pic 9(4).\n       01  result            pic 9.\n      \n       procedure division using arr lim result.\n           initialize result\n           move 1            to result\n           perform varying i from 1 by 1 until i greater arr-length\n              if xs(i) greater lim\n                 move 0 to result\n                 exit perform\n              end-if\n           end-perform\n           goback.\n       end program smallEnough.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21170,"user_id":53,"body":"       identification division.\n       program-id. smallEnough.\n       data division.\n       local-storage section.\n       01  m                 pic 9(4).\n       linkage section.\n       01  arr.\n           05 n              pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 100 times \n                             depending on n\n                             indexed by i.\n       01  k                 pic 9(4).\n       01  r                 pic 9.\n       procedure division using arr k r.\n           initialize m, r\n           perform varying i from 1 until i > n\n              move function max(m, xs(i)) to m\n              if m > k goback end-if\n           end-perform\n           move 1 to r\n           goback.\n       end program smallEnough.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21171,"user_id":50,"body":"       identification division.\n       program-id. smallEnough.\n       data division.\n       local-storage section.\n       01  max              pic 9(4).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 100 times \n                             depending on arr-length indexed i.\n       01  lim               pic 9(4).\n       01  result            pic 9.\n      \n       procedure division using arr lim result.\n      \n           move 0 to max, result\n           perform varying i from 1 until i > arr-length\n              move function max(max, xs(i)) to max\n              if max > lim goback end-if\n           end-perform\n           move 1 to result\n      \n           goback.\n       end program smallEnough.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57cebe1dc6fdc20c57000ac9":[{"id":21172,"user_id":168,"body":"       identification division.\n       program-id. FindShort.\n       data division.\n       working-storage section.\n       01  tmp pic x.\n      \n       linkage section.\n       01  s.\n           05 s-length pic 9(3).\n           05 str.\n              07 s-char pic x occurs 0 to 999 times \n                                  depending on s-length indexed i j.\n       01  result      pic 9(3).\n      \n       procedure division using s result.\n          move 1 to i\n          move 999 to result j\n          perform until i > s-length\n              unstring str delimited by all ' '\n                  into tmp count in j\n                  with pointer i\n              move function min(j, result) to result\n          end-perform.\n       end program FindShort.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21173,"user_id":null,"body":"       identification division.\n       program-id. FindShort.\n       data division.\n       working-storage section.\n       01  wrk-vars.\n           05 w-idx    pic 9(3) value zeros.\n           05 w-size   pic 9(3) value zeros.\n            \n       linkage section.\n       01  s.\n           05 s-length pic 9(3).\n           05 s-char   pic x occurs 0 to 999 times \n                                  depending on s-length.\n       01  result      pic 9(3).\n      \n       procedure division using s, result.\n      \n          move s-length to result\n          move zeros to w-size\n          perform varying w-idx from 1 by 1 until w-idx > s-length\n            if s-char(w-idx) = space \n               perform check-word-size\n            else\n               add 1 to w-size\n            end-if\n          end-perform\n          perform check-word-size\n          goback.\n      \n       check-word-size.\n          if w-size < result and > zeros\n             move w-size to result\n          end-if\n          move zeros to w-size\n          .\n       \n       end program FindShort.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21174,"user_id":53,"body":"       identification division.\n       program-id. FindShort.\n       data division.\n       local-storage section.\n       01  w            pic x(999).\n       01  n            pic 9(3).\n       linkage section.\n       01  s.\n           05 s-length  pic 9(3).\n           05 str.\n              07 s-char pic x occurs 0 to 999 times \n                              depending on s-length \n                              indexed by i.\n       01  result       pic 9(3).\n       procedure division using s result.\n          move 999 to result\n          move 1 to i\n          perform until i > s-length\n             unstring str delimited by space into w with pointer i\n             move length of function trim(w) to n\n             if w <> space and n < result\n               move n to result\n             end-if\n          end-perform\n          goback.\n       end program FindShort.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21175,"user_id":50,"body":"       identification division.\n       program-id. FindShort.\n       data division.\n       local-storage section.\n       01  w          pic x(999).\n      \n       linkage section.\n       01  s.\n           05 s-length  pic 9(3).\n           05 str.\n              07 s-char pic x occurs 0 to 999 times \n                                  depending on s-length indexed by i.\n       01  result       pic 9(3).\n      \n       procedure division using s result.\n      \n          move 999 to result\n          set i to 1\n          perform until i > s-length\n             unstring str delimited by space into w with pointer i\n             if w <> space\n               move function min(result, length of function trim(w))\n                    to result\n             end-if\n          end-perform\n      \n          goback.\n       end program FindShort.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57cf50a7eca2603de0000090":[{"id":21176,"user_id":421,"body":"       identification division.\n       program-id. MoveTen.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic a occurs 0 to 30 times \n                                 depending on s-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a occurs 0 to 30 times \n                                   depending on res-length.\n      \n       procedure division using s result.\n           move s to result\n           inspect result converting \"abcdefghijklmnopqrstuvwxyz\"\n                               to \"klmnopqrstuvwxyzabcdefghij\".\n       end program MoveTen.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21177,"user_id":null,"body":"       identification division.\n       program-id. MoveTen.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic a occurs 0 to 30 times \n                                 depending on s-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a occurs 0 to 30 times \n                                   depending on res-length.\n      \n       procedure division using s result.\n           move s to result.\n           inspect result converting \"abcdefghijklmnopqrstuvwxyz\" \n                                   to \"klmnopqrstuvwxyzabcdefghij\".\n           goback.\n       end program MoveTen.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21178,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MoveTen.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S               PIC X(32).\n       01  RESULT          PIC X(32).\n       PROCEDURE DIVISION USING S RESULT.\n           INSPECT S(3:) CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                 TO 'klmnopqrstuvwxyzabcdefghij'\n           MOVE S  TO RESULT.\n       END PROGRAM MoveTen.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21179,"user_id":168,"body":"       identification division.\n       program-id. MoveTen.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic a occurs 0 to 30 times \n                                 depending on s-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a occurs 0 to 30 times \n                                   depending on res-length.\n      \n       procedure division using s result.\n          move s to result\n          inspect result converting 'abcdefghijklmnopqrstuvwxyz'\n                                 to 'klmnopqrstuvwxyzabcdefghij'\n          goback.\n       end program MoveTen.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21180,"user_id":53,"body":"       identification division.\n       program-id. MoveTen.\n       data division.\n       local-storage section.\n       01  a               pic 9(3).\n       01  b               pic 9(3).\n       01  n               pic 9(3).\n       01  m               pic 9(3).\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic a occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a occurs 0 to 30 times \n                                   depending on res-length.\n      \n       procedure division using s result.\n      \n          move s-length to res-length\n          move function ord('a') to a\n          move function ord('z') to b\n          add 1 to b\n          perform varying i from 1 until i > res-length\n            move function ord(chr(i)) to n\n            add 10 to n\n            compute m = a + function rem \n              (function rem (n - a, b - a) + (b - a), (b - a))\n            move function char(m) to res(i)\n          end-perform\n          goback.\n       end program MoveTen.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21181,"user_id":50,"body":"       identification division.\n       program-id. MoveTen.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic a occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic a occurs 0 to 30 times \n                                   depending on res-length.\n      \n       procedure division using s result.\n      \n          move s-length to res-length\n          perform varying i from 1 until I > res-length\n            move function char(\n                 function rem(\n                 function ord(chr(i)) - 88, 26) + 98)\n                 to res(i)\n          end-perform\n      \n          goback.\n       end program MoveTen.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57d5e850bfcdc545870000b7":[{"id":21182,"user_id":50,"body":"       identification division.\n       program-id. DeadAntCount.\n      \n       data division.\n       working-storage section.\n       01 token       pic x(53).\n      \n       local-storage section.\n       01 i           usage index value 1.\n       01 a           pic 9(2).\n       01 n           pic 9(2).\n       01 t           pic 9(2).\n      \n       linkage section.\n       01 ants        pic x(53).\n       01 result      pic 9(2).\n      \n       procedure division using ants result.\n      \n          perform until i > function stored-char-length(ants)\n            unstring ants delimited by 'ant' into token with pointer i\n            inspect token tallying a for all 'a'\n            inspect token tallying n for all 'n'\n            inspect token tallying t for all 't'\n          end-perform\n          move function max(a n t) to result.\n      \n       end program DeadAntCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21183,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DeadAntCount.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  CNT-A       PIC 9(2).\n       01  CNT-N       PIC 9(2).\n       01  CNT-T       PIC 9(2).\n       LINKAGE SECTION.\n       01  ANTS        PIC X(53).\n       01  RESULT      PIC 9(2).\n\n       PROCEDURE DIVISION USING ANTS RESULT.\n           INSPECT ANTS REPLACING ALL 'ant' BY '   '\n           INSPECT ANTS TALLYING CNT-A FOR ALL 'a'\n           INSPECT ANTS TALLYING CNT-N FOR ALL 'n'\n           INSPECT ANTS TALLYING CNT-T FOR ALL 't'\n           MOVE FUNCTION MAX(CNT-A CNT-N CNT-T)  TO RESULT.\n       END PROGRAM DeadAntCount.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21184,"user_id":168,"body":"       identification division.\n       program-id. DeadAntCount.\n      \n       data division.\n       local-storage section.\n       01 ant       pic 9(2).\n       01 a         pic 9(2).\n       01 n         pic 9(2).\n       01 t         pic 9(2).       \n      \n       linkage section.\n       01 ants        pic x(53).\n       01 result      pic 9(2).\n      \n       procedure division using ants result.\n          inspect ants tallying a for all 'a'\n                                n for all 'n'\n                                t for all 't'\n          inspect ants tallying ant for all 'ant'\n          compute result = function max(a, n, t) - ant.\n       end program DeadAntCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21185,"user_id":53,"body":"       identification division.\n       program-id. DeadAntCount.\n      \n       data division.\n       working-storage section.\n       01 token       pic x(53).\n      \n       local-storage section.\n       01 i           usage index value 1.\n       01 a           pic 9(2).\n       01 n           pic 9(2).\n       01 t           pic 9(2).\n      \n       linkage section.\n       01 ants        pic x(53).\n       01 result      pic 9(2).\n      \n       procedure division using ants result.\n      \n          perform until i > length of function trim(ants)\n            unstring ants delimited by 'ant' into token with pointer i\n            inspect token tallying a for all 'a'\n            inspect token tallying n for all 'n'\n            inspect token tallying t for all 't'\n          end-perform\n          move function max(a n t) to result\n      \n          goback.\n      \n       end program DeadAntCount.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57e1e61ba396b3727c000251":[{"id":21186,"user_id":null,"body":"       identification division.\n       program-id. StringClean.\n      \n       data division.\n       working-storage section.\n       77 i        usage is index.\n       77 j        usage is index.\n      \n       linkage section.\n       01 s           pic x(100).\n      \n       procedure division using s.\n          set j to 0\n          perform varying i from 1 until i > function length(s)\n             if s(i:1) is not numeric then\n                set j up by 1\n                move s(i:1) to s(j:1)\n             end-if\n          end-perform\n          if j < function length(s) then\n             set j up by 1\n             move spaces to s(j:)\n          end-if\n          goback.\n       end program StringClean.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21187,"user_id":168,"body":"       identification division.\n       program-id. StringClean.\n      \n       data division.\n       working-storage section.\n       01 i           usage index.\n       01 j           usage index.\n       linkage section.\n       01 s           pic x(100).\n      \n       procedure division using s.\n          move 1 to j\n          perform varying i from 1 until i > 100\n              if s(i:1) < '0' or > '9'\n                  move s(i:1) to s(j:1)\n                  add 1 to j\n              end-if\n          end-perform\n          move all space to s(j:)\n          goback.\n       end program StringClean.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21188,"user_id":53,"body":"       identification division.\n       program-id. StringClean.\n       data division.\n       local-storage section.\n       01 i           usage index.\n       01 p           usage index value 1.\n       01 q           pic x(100).\n       linkage section.\n       01 s           pic x(100).\n       procedure division using s.\n          perform varying i from 1 until i > length of function trim(s)\n            if s(i:1) is not numeric then\n              string s(i:1) into q with pointer p\n            end-if\n          end-perform\n          initialize s\n          move function trim(q trailing) to s\n          goback.\n       end program StringClean.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21189,"user_id":50,"body":"       identification division.\n       program-id. StringClean.\n      \n       data division.\n       working-storage section.\n       01 i           usage index.\n       01 j           usage index.\n      \n       linkage section.\n       01 s           pic x(100).\n      \n       procedure division using s.\n      \n          initialize j\n          perform varying i from 1\n          until i > function stored-char-length(s)\n            if s(i:1) is not numeric\n              set j up by 1\n              move s(i:1) to s(j:1)\n            end-if\n          end-perform\n          if j < 100 move space to s(j + 1:).\n      \n       end program StringClean.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57e3f79c9cb119374600046b":[{"id":21190,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Hello.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  NAME           PIC A(11).\n       01  RESULT         PIC X(19).\n\n       PROCEDURE DIVISION USING NAME RESULT.\n           INSPECT NAME REPLACING ALL '           ' BY 'wORLD      '\n           MOVE CONCAT('Hello, ', UPPER-CASE(NAME(1:1)), \n                TRIM(LOWER-CASE(NAME(2:))), '!')         TO RESULT.\n       END PROGRAM Hello.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21191,"user_id":null,"body":"       identification division.\n       program-id. Hello.\n      \n       data division.\n      \n       linkage section.\n       01 name        pic a(11).\n       01 result      pic x(19).\n      \n       procedure division using name result.\n          initialize result\n          if name = spaces then\n             move 'World' to name\n          end-if\n          string 'Hello, ' delimited by size\n                 function upper-case(name(1:1))\n                 function lower-case(name(2:)) delimited by spaces\n                 '!'\n                 into result\n          end-string      \n          goback.\n       end program Hello.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21192,"user_id":null,"body":"       identification division.\n       program-id. Hello.\n      \n       data division.\n       working-storage section.\n       77 res-len     usage is index.\n       linkage section.\n       01 name        pic a(11).\n       01 result      pic x(19).\n      \n       procedure division using name result.\n          initialize result\n          set res-len to 1\n          string 'Hello, ' into result with pointer res-len\n          if name = spaces then\n             string 'World' into result with pointer res-len\n          else\n             string function upper-case(name(1:1)) \n                    function trim(function lower-case(name(2:)))\n                    into result with pointer res-len\n          end-if\n          string '!' into result with pointer res-len\n          goback.\n       end program Hello.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21193,"user_id":null,"body":"       identification division.\n       program-id. Hello.\n      \n       data division.\n\n       linkage section.\n       01 name        pic a(11).\n       01 result      pic x(19).\n      \n       procedure division using name result.\n          initialize result.\n      \n          if name = spaces then\n            move \"World\" to name\n          else\n            move function lower-case(name) to name\n            move function upper-case(name(1:1)) to name(1:1)\n          end-if.\n      \n          string 'Hello, ' delimited by size\n          name delimited by spaces\n          '!' delimited by size\n          into result.\n      \n          goback.\n       end program Hello.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21194,"user_id":50,"body":"       identification division.\n       program-id. Hello.\n      \n       data division.\n      \n       linkage section.\n       01 name        pic a(11).\n          88 EmptyName value space.\n       01 result      pic x(19).\n      \n       procedure division using name result.\n      \n          if EmptyName\n             move 'Hello, World!' to result\n          else\n             move function concat('Hello, '\n                                  function upper-case(name(1:1))\n                                  function trim(\n                                     function lower-case(name(2:))\n                                                )\n                                  '!'\n                                  ) to result\n          .\n       end program Hello.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21195,"user_id":53,"body":"       identification division.\n       program-id. Hello.\n       data division.\n       linkage section.\n       01 name        pic a(11).\n       01 result      pic x(19).\n       procedure division using name result.\n          initialize result\n          if name = space\n             move 'Hello, World!' to result\n          else\n             string 'Hello, '\n                    function upper-case(name(1:1))\n                    function trim(function lower-case(name(2:)))\n                    '!'\n                    into result\n          end-if.\n       end program Hello.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21196,"user_id":50,"body":"       identification division.\n       program-id. Hello.\n      \n       data division.\n      \n       linkage section.\n       01 name        pic a(11).\n       01 result      pic x(19).\n      \n       procedure division using name result.\n      \n          if name = space\n             move 'Hello, World!' to result\n          else\n             move function concat('Hello, '\n                                  function upper-case(name(1:1))\n                                  function trim(\n                                     function lower-case(name(2:))\n                                                )\n                                  '!'\n                                  ) to result\n          .\n       end program Hello.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57e76bc428d6fbc2d500036d":[{"id":21197,"user_id":168,"body":"       identification division.\n       program-id. StringToTable.\n      \n       data division.\n       working-storage section.\n       01  i    usage index.\n       01  w    pic x(20).\n\n       linkage section.\n       01  s                pic x(500).\n       01  result.\n          03  resLength     pic 9(2).\n          03  word          pic x(20)\n              occurs 0 to 20 times depending on resLength.\n      \n       procedure division using s result.\n          move 0 to resLength\n          move 1 to i\n          perform until i > 500\n              initialize w\n              unstring s delimited by all ' '\n                  into w with pointer i\n              if w <> space then\n                  add 1 to resLength\n                  move w to word(resLength)\n              end-if\n          end-perform.\n       end program StringToTable.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21198,"user_id":null,"body":"       identification division.\n       program-id. StringToTable.    \n       data division.\n       working-storage section.\n       77 s-end     pic X.\n          88 s-end-false  value X'00'.\n          88 s-end-true   value X'01' through X'FF'.\n       77 word-length     usage is index.\n       77 i-s             usage is index.\n\n       linkage section.\n       01  s                pic x(500).\n       01  result.\n          03  resLength     pic 9(2).\n          03  word          pic x(20)\n              occurs 0 to 20 times depending on resLength\n                                   indexed by i-word.\n       procedure division using s result.\n          set s-end-false to true\n          set i-s to 1\n          set resLength to 0\n          perform until s-end-true\n             set resLength up by 1\n             unstring s delimited by all space\n                into word(resLength) count word-length with pointer i-s\n                not on overflow set s-end-true to true\n             end-unstring\n             if word-length = 0 then\n                set resLength down by 1\n             end-if\n          end-perform.\n      *    if resLength > 0 and word(resLength) = spaces then\n      *      set resLength down by 1\n      *   end-if\n      *   Words in `s` will be separated by exactly one space.\n      *   `s` will contain no leading space.\n      *   Consider a word is any consecutive sequence of non space characters (there will be only letters and digits).\n      *   Elements of `result` are fixed-size strings declared with the maximum size\n      *   you may find for words (20). Trailing spaces will be ignored by the tests\n      *   (the same as you must ignore trailing spaces for `s`), but don't include\n      *   leading spaces or the tests will fail!\n      *   In case `s` doesn't contain any words, `result` must be an empty table (= its size is zero).\n          goback.\n       end program StringToTable.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21199,"user_id":53,"body":"       identification division.\n       program-id. StringToTable.\n       data division.\n       local-storage section.\n       01  i                usage index.\n       linkage section.\n       01  s                pic x(500).\n       01  result.\n           03  len          pic 9(2).\n           03  word         pic x(20)\n                            occurs 0 to 20 times depending on len.\n       procedure division using s result.\n          initialize result\n          set i to 1\n          perform until i > length of function trim(s)\n            add 1 to len\n            unstring s delimited by space into word(len) with pointer i\n          end-perform\n          goback.\n       end program StringToTable.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21200,"user_id":50,"body":"       identification division.\n       program-id. StringToTable.\n      \n       data division.\n       local-storage section.\n       01  i                usage index.\n       linkage section.\n       01  s                pic x(500).\n       01  result.\n           03  l            pic 9(2).\n           03  word         pic x(20)\n               occurs 0 to 20 times depending on l.\n      \n       procedure division using s result.\n      \n          initialize result\n          set i to 1\n          perform until i > length function trim(s)\n            set l up by 1\n            unstring s delimited by space \n                     into word(l)\n                     with pointer i\n            end-unstring\n          end-perform\n      \n          goback.\n       end program StringToTable.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57eadb7ecd143f4c9c0000a3":[{"id":21201,"user_id":50,"body":"       identification division.\n       program-id. AbbrevName.\n       data division.\n       local-storage section.\n       01 w pic x(20).\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chars.\n              07 s-char       pic a occurs 0 to 50 times \n                           depending on s-length indexed i.\n       01  result.\n           03 j pic 9(2).\n           03 res pic a occurs 0 to 99 times depending on j.\n      \n       procedure division using s result.\n      \n          set i to 1\n          move 0 to j\n          perform until i > s-length\n            add 1 to j\n            unstring chars delimited by all space \n            into w with pointer i\n            move function upper-case(w(1:1)) to res(j)\n            if j = 1\n               add 1 to j\n               move '.' to res(j)\n          end-perform\n          display result\n          goback.\n       end program AbbrevName.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21202,"user_id":null,"body":"       identification division.\n       program-id. AbbrevName.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-string.\n              10 s-char       pic a occurs 0 to 50 times \n                                    depending on s-length.\n       01  result.\n           03 res-length pic 9(2).\n           03 res-string.\n              05 res pic a occurs 0 to 99 times depending on res-length.\n      \n       procedure division using s result.      \n          set res-length to 3\n          move '.' to res(2)\n          unstring s-string delimited by spaces\n             into res(1) res(3)\n          end-unstring.\n          move function upper-case(res-string) to res-string.\n          goback.\n       end program AbbrevName.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21203,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AbbrevName.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S.\n           05 S-LENGTH     PIC 9(2).\n           05 S-CHAR       PIC A OCCURS 50 DEPENDING S-LENGTH.\n       01  RESULT.\n           05 RES-LENGTH   PIC 9(2).\n           05 RES-NAM      PIC A.\n           05 RES-DOT      PIC X.\n           05 RES-SUR      PIC A.\n\n       PROCEDURE DIVISION USING S RESULT.\n           MOVE 3    TO RES-LENGTH\n           MOVE '.'  TO RES-DOT\n           UNSTRING FUNCTION UPPER-CASE(S(3:)) DELIMITED BY SPACE\n               INTO RES-NAM RES-SUR.\n       END PROGRAM AbbrevName.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21204,"user_id":53,"body":"       identification division.\n       program-id. AbbrevName.\n       data division.\n       local-storage section.\n       01 c pic x(50).\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chars.\n              07 s-char    pic a occurs 0 to 50 times \n                           depending on s-length indexed i.\n       01  result.\n           03 res-len pic 9(2).\n           03 res pic a occurs 0 to 99 times \n                        depending on res-len.\n       procedure division using s result.\n          initialize result\n          set i to 1\n          set res-len to 0\n          perform until i > s-length\n            add 1 to res-len\n            unstring chars delimited by all space into c with pointer i\n            move function upper-case(c(1:1)) to res(res-len)\n            if res-len < 3 then\n               add 1 to res-len\n               move '.' to res(res-len)\n            end-if\n          end-perform\n          display result\n          goback.\n       end program AbbrevName.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57eae20f5500ad98e50002c5":[{"id":21205,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NoSpace.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 STRNG.\n          03  STRLEN  PIC 9(2).\n          03  SCHAR   PIC X(1) OCCURS 80 DEPENDING STRLEN INDEXED I.\n       01 RESULT.\n          03  RESLEN  PIC 9(2).\n          03  RESCHAR PIC X(1) OCCURS 80 DEPENDING RESLEN.\n\n       PROCEDURE DIVISION USING STRNG RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > STRLEN\n               IF  SCHAR(I) NOT = SPACE\n                   ADD  1         TO RESLEN\n                   MOVE SCHAR(I)  TO RESCHAR(RESLEN)\n               END-IF\n           END-PERFORM.\n       END PROGRAM NoSpace.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21206,"user_id":null,"body":"       identification division.\n       program-id. NoSpace.\n            \n       data division.\n       WORKING-STORAGE SECTION.\n       01  W-I        pic 9(2).\n       linkage section.\n       01 strng.\n          03  strLen  pic 9(2).\n          03  sChar   pic x \n                      occurs 0 to 80 times \n                      depending on strLen.\n       01 result.\n          03  resLen  pic 9(2).\n          03  resChar pic x\n                      occurs 0 to 80 times \n                      depending on resLen.\n      \n       procedure division using strng result.\n          initialize result\n      \n          PERFORM VARYING W-I\n                     FROM 1 BY 1\n                    UNTIL W-I > strLen\n             IF sChar(W-I) NOT = SPACE\n                ADD 1 TO resLen\n                MOVE sChar(W-I) TO resChar(resLen)\n             END-IF\n          END-PERFORM\n      \n          goback.\n       end program NoSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21207,"user_id":168,"body":"       identification division.\n       program-id. NoSpace.\n      \n       data division.\n       linkage section.\n       01 strng.\n          03  strLen  pic 9(2).\n          03  sChar   pic x \n              occurs 0 to 80 times depending on strLen indexed i.\n       01 result.\n          03  resLen  pic 9(2).\n          03  resChar pic x\n              occurs 0 to 80 times depending on resLen.\n      \n       procedure division using strng result.\n          move 0 to resLen\n          perform varying i from 1 until i > strLen\n              if sChar(i) <> space then\n                  add 1 to resLen\n                  move sChar(i) to resChar(resLen)\n              end-if\n          end-perform.\n       end program NoSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21208,"user_id":null,"body":"       identification division.\n       program-id. NoSpace.\n      \n       data division.\n       working-storage section.\n       01 i pic 9(2).\n       linkage section.\n       01 strng.\n          03  strLen  pic 9(2).\n          03  sChar   pic x \n              occurs 0 to 80 times depending on strLen.\n       01 result.\n          03  resLen  pic 9(2).\n          03  resChar pic x\n              occurs 0 to 80 times depending on resLen.\n      \n       \n       procedure division using strng result.\n          initialize result.\n      \n          perform varying i from 1\n              until i > strLen\n              if sChar(i) not = space then\n                  add 1 to resLen\n                  move sChar(i) to resChar(resLen)\n              else\n                  continue\n              end-if\n          end-perform.\n          goback.\n       end program NoSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21209,"user_id":53,"body":"       identification division.\n       program-id. NoSpace.\n       data division.\n       local-storage section.\n       01 i           usage index value 1.\n       01 j           usage index value 1.\n       01 k           pic 9(2).\n       linkage section.\n       01 strng.\n           03 l      pic 9(2).\n           03 s.\n              05 pic x occurs 0 to 80 depending on l.\n       01 result.\n          03 w       pic 9(2).\n          03 r.\n             05 pic x occurs 0 to 80 depending w.\n       procedure division using strng result.\n          set w to 80\n          perform until i > l\n            unstring s delimited by all spaces\n                     into r(j:)\n                     count in k\n                     with pointer i\n            add k to j\n          end-perform\n          subtract 1 from j giving w\n          goback.\n       end program NoSpace.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21210,"user_id":null,"body":"       identification division.\n       program-id. NoSpace.\n      \n       data division.\n       linkage section.\n       01 strng.\n          03  strLen  pic 9(2).\n          03  sChar   pic x \n              occurs 0 to 80 times depending on strLen\n                                    indexed by i-strng.\n       01 result.\n          03  resLen  pic 9(2).\n          03  resChar pic x\n              occurs 0 to 80 times depending on resLen\n                                   indexed by i-result.\n      \n       procedure division using strng result.\n          initialize result\n          set i-result to 0\n          perform varying i-strng from 1 until i-strng > strLen\n             if sChar in strng(i-strng) not = ' ' then\n                set i-result up by 1\n                move sChar in strng(i-strng) \n                    to resChar in result(i-result)\n             end-if\n          end-perform\n          move i-result to resLen\n          goback.\n       end program NoSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21211,"user_id":50,"body":"       identification division.\n       program-id. NoSpace.\n      \n       data division.\n       local-storage section.\n       01 i           usage index value 1.\n       01 j           usage index value 1.\n       01 cnt         pic 9(2).\n      \n       linkage section.\n       01 strng.\n           03 l      pic 9(2).\n           03 s.\n              05 pic x occurs 0 to 80 depending on l.\n       01 result.\n          03 rl      pic 9(2).\n          03 r.\n             05 pic x occurs 0 to 80 depending rl.\n      \n       procedure division using strng result.\n          \n          move 80 to rl\n          perform until i > l\n            unstring s delimited by all spaces\n                     into r(j:)\n                     count in cnt\n                     with pointer i\n            end-unstring\n            add cnt to j\n          end-perform\n          compute rl = j - 1.\n      \n       end program NoSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57eae65a4321032ce000002d":[{"id":21212,"user_id":421,"body":"       identification division.\n       program-id. fake_binary.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  x.             \n           03 x-length     pic 99.\n           03 x-chars.    \n               05 x-char   pic x occurs 0 to 30 times\n                                depending on x-length. \n       01  result.\n           03 res-length   pic 99.\n           03 res-chars.\n               05 res-char pic x occurs 0 to 30 times\n                                 depending on res-length.  \n       procedure division using x result.\n           move x to result\n           inspect res-chars converting \"123456789\" to \"000011111\".\n       end program fake_binary.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21213,"user_id":50,"body":"       identification division.\n       program-id. fake_binary.        \n       data division.\n       linkage section.\n       01  x.    \n           03 x-length     pic 99. \n           03 x-chars.    \n               05 x-char   pic a occurs 0 to 30 times\n                                depending on x-length. \n       01  result.\n           03 res-length   pic 99. \n           03 res-chars.\n               05 res-char pic a occurs 0 to 30 times\n                           depending on res-length indexed i.  \n       procedure division using x result.\n    \n          Move x to result\n          Perform, varying i from 1 until i > res-length\n            If res-char(i) >= 5, Move '1' to res-char(i)\n            Else,                , Move '0' to res-char(i), end-if\n          end-perform\n          goback.\n       end program fake_binary.\n                      \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21214,"user_id":null,"body":"       identification division.\n       program-id. fake_binary.    \n       data division.\n       working-storage section.\n       01 i           usage index.\n       linkage section.\n       01  x.             \n           03 x-length     pic 99.\n           03 x-chars.    \n               05 x-char   pic x occurs 0 to 30 times\n                                depending on x-length. \n       01  result.\n           03 res-length   pic 99.\n           03 res-chars.\n               05 res-char pic x occurs 0 to 30 times\n                                 depending on res-length.  \n       procedure division using x result.\n           display 'x-length=' x-length\n           perform varying i from 1 until i > x-length\n              if x-char(i) < '5' then\n                 move '0' to res-char(i)\n              else\n                 move '1' to res-char(i)\n              end-if\n           end-perform.\n           set res-length to x-length\n           goback.\n       end program fake_binary.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21215,"user_id":null,"body":"       identification division.\n       program-id. fake_binary.    \n       data division.\n       linkage section.\n       01  x.             \n           03 x-length     pic 99.\n           03 x-chars.    \n               05 x-char   pic x occurs 0 to 30 times\n                                depending on x-length. \n       01  result.\n           03 res-length   pic 99.\n           03 res-chars.\n               05 res-char pic x occurs 0 to 30 times\n                                 depending on res-length.  \n       procedure division using x result.\n           perform varying res-length from 1 by 1 \n                              until res-length > x-length    \n                if x-char(res-length) < \"5\"\n                    move \"0\" to res-char(res-length)\n                else\n                    move \"1\" to res-char(res-length)\n                end-if    \n           end-perform.\n           subtract 1 from res-length.\n       end program fake_binary.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21216,"user_id":168,"body":"       identification division.\n       program-id. fake_binary.    \n       data division.\n       linkage section.\n       01  x.             \n           03 x-length     pic 99.\n           03 x-chars.    \n               05 x-char   pic x occurs 0 to 30 times\n                                depending on x-length. \n       01  result.\n           03 res-length   pic 99.\n           03 res-chars.\n               05 res-char pic x occurs 0 to 30 times\n                                 depending on res-length.  \n       procedure division using x result.\n           move x to result\n           inspect res-chars converting '0123456789' to '0000011111'\n           goback.\n       end program fake_binary.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21217,"user_id":53,"body":"       identification division.\n       program-id. fake_binary.\n       data division.\n       linkage section.\n       01  x.             \n           03 x-length     pic 99.\n           03 x-chars.    \n               05 x-char   pic x occurs 0 to 30 times\n                                depending on x-length. \n       01  r.\n           03 res-length   pic 99.\n           03 res-chars.\n               05 res-char pic x occurs 0 to 30 times\n                                 depending on res-length.  \n       procedure division using x r.\n           move x to r\n           inspect res-chars converting \"0123456789\" to \"0000011111\".\n       end program fake_binary.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57eb8fcdf670e99d9b000272":[{"id":21218,"user_id":50,"body":"       identification division.\n       program-id. High.\n      \n       data division.\n       working-storage section.\n       01 curScore    pic 9(3).\n       01 w           pic a(11).\n       01 j           usage index.\n      \n       local-storage section.\n       01 maxSCore    pic 9(3).\n       01 i           usage index value 1.\n      \n       linkage section.\n       01 s           pic a(300).\n       01 result      pic a(10).\n      \n       procedure division using s result.\n      \n          perform until i > function stored-char-length(s)\n            unstring s delimited by all spaces\n                     into w with pointer i\n            perform computeScore\n            if curScore > maxScore\n                move curScore to maxSCore\n                move w to result\n            end-if\n          end-perform\n          goback.\n      \n        computeScore.\n          initialize curScore\n          perform varying j from 1 until w(j:1) = space\n            compute curScore = curScore +\n              function ord(w(j:1)) - 97\n          end-perform\n          .\n         \n       end program High.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57eba158e8ca2c8aba0002a0":[{"id":21219,"user_id":50,"body":"       identification division.\n       program-id. SortByLastChar.\n      \n       data division.\n       working-storage section.\n       01  cnt             pic 9(2).\n       01  tble.\n           03  tl           pic 9(2).\n           03  pair occurs 0 to 15 depending tl.\n               05  lstChar  pic a.\n               05  w        pic a(15).\n      \n       local-storage section.\n       01  i                usage index value 1.\n      \n       linkage section.\n       01  s           pic a(240).\n       01  result.\n           03  rl      pic 9(2).\n           03  r       pic a(15) occurs 0 to 15 times\n                                 depending on rl.\n      \n       procedure division using s result.\n      \n          perform varying tl from 1\n          until i > function stored-char-length(s)\n              unstring s delimited by space\n              into w(tl) count in cnt with pointer i\n              move w(tl)(cnt:) to lstChar(tl)\n          end-perform\n      \n          subtract 1 from tl\n          sort pair on ascending key lstChar\n                    with duplicates in order\n          move tl to rl\n          perform varying i from 1 until i > rl\n            move w(i) to r(i).\n\n       end program SortByLastChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21220,"user_id":168,"body":"       identification division.\n       program-id. SortByLastChar.\n      \n       data division.\n       working-storage section.\n       01 ws occurs 0 to 15 times depending on resLen.\n          05  w pic a(15).\n          05  c pic a.\n       01 i   usage index.\n       01 j   usage index.\n       01 tmp pic a(15).\n      \n       linkage section.\n       01  s           pic a(240).\n       01  result.\n           03  resLen  pic 9(2).\n           03  res     pic a(15) occurs 0 to 15 times\n                                 depending on resLen.\n      \n       procedure division using s result.\n          move 0 to resLen\n          move 1 to i\n          perform until i > 240\n              add 1 to resLen\n              unstring s delimited by all spaces\n                  into w(resLen) with pointer i\n              move 0 to j\n              inspect w(resLen) tallying j for trailing ' '\n              move w(resLen)(15 - j:1) to c(resLen)\n          end-perform\n          sort ws on ascending key c\n          perform varying i from 1 until i > resLen\n              move w(i) to res(i)\n          end-perform\n          goback.\n       end program SortByLastChar.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57ee4a67108d3fd9eb0000e7":[{"id":21221,"user_id":50,"body":"       identification division.\n       program-id. GooseFilter.\n       data division.\n       working-storage section.\n       01  tble.\n           03 filler pic a(20) value 'African'.\n           03 filler pic a(20) value 'Pilgrim'.\n           03 filler pic a(20) value 'Roman Tufted'.\n           03 filler pic a(20) value 'Steinbacher'.\n           03 filler pic a(20) value 'Toulouse'.\n       01  redefines tble.\n           03  goose pic a(20) occurs 5 indexed j.\n      \n       linkage section.\n       01  arr.\n           05  l          pic 9(2).\n           05  xs         pic a(20) occurs 0 to 24\n                                    depending l indexed i.\n       01  result.\n           05  resLength  pic 9(2).\n           05  res        pic a(20) occurs 0 to 24 depending resLength.\n      \n       procedure division using arr result.\n      *   I could not have `search all` working with strings :(\n          initialize result\n          perform varying i from 1 until i > l\n              set j to 1\n              search goose\n                at end   add 1 to resLength\n                         move xs(i) to res(resLength)\n                when goose(j) = xs(i)\n                     exit perform cycle\n              end-search\n          end-perform\n      \n          goback.\n       end program GooseFilter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21222,"user_id":null,"body":"       identification division.\n       program-id. GooseFilter.\n       data division.\n       working-storage section.\n       01  geese.\n           03 goose1 pic a(20) value 'African'.\n           03 goose2 pic a(20) value 'Pilgrim'.\n           03 goose3 pic a(20) value 'Roman Tufted'.\n           03 goose4 pic a(20) value 'Steinbacher'.\n           03 goose5 pic a(20) value 'Toulouse'.\n      \n       linkage section.\n       01  birds.\n           05  len          pic 9(2).\n           05  bird         pic a(20) occurs 0 to 24 times \n                                      depending on len indexed i.\n       01  result.\n           05  resLength    pic 9(2).\n           05  resBird         pic a(20) occurs 0 to 24 times \n                                     depending on resLength.\n      \n       procedure division using birds result.\n      \n          initialize result\n          perform varying i from 1 until i > len\n              if (bird(i) not = goose1 and \n                  bird(i) not = goose2 and \n                  bird(i) not = goose3 and\n                  bird(i) not = goose4 and\n                  bird(i) not = goose5) then\n                  add 1 to resLength\n                  MOVE bird(i) TO resBird(resLength)\n              end-if\n          end-perform.\n          goback.\n       end program GooseFilter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21223,"user_id":null,"body":"       identification division.\n       program-id. GooseFilter.\n       data division.\n       working-storage section.\n       01  geese.\n           03 goose1 pic a(20) value 'African'.\n           03 goose2 pic a(20) value 'Pilgrim'.\n           03 goose3 pic a(20) value 'Roman Tufted'.\n           03 goose4 pic a(20) value 'Steinbacher'.\n           03 goose5 pic a(20) value 'Toulouse'.\n       01 geese-tab redefines geese pic a(20) occurs 5\n                                              indexed by geese-i.\n       01 is-found       index.\n          88 not-found value 0.\n          88 found     value 1.\n      \n       linkage section.\n       01  birds.\n           05  len          pic 9(2).\n           05  bird         pic a(20) occurs 0 to 24 times \n                                      depending on len\n                                      indexed by birds-i.\n       01  result.\n           05  resLength    pic 9(2).\n           05  bird         pic a(20) occurs 0 to 24 times \n                                     depending on resLength.\n      \n       procedure division using birds result.\n      \n          initialize result\n          perform varying birds-i from 1 until birds-i > len\n             set geese-i to 1\n             search geese-tab\n                at end \n                   set not-found to true\n                when geese-tab(geese-i) = bird in birds(birds-i)\n                   set found to true\n             end-search\n             if not-found then\n                set resLength up by 1\n                move bird in birds(birds-i) to bird in result(resLength)\n             end-if\n          end-perform\n          goback.\n       end program GooseFilter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21224,"user_id":53,"body":"       identification division.\n       program-id. GooseFilter.\n       data division.\n       working-storage section.\n       01  geese.\n           03 goose1 pic a(20) value 'African'.\n           03 goose2 pic a(20) value 'Pilgrim'.\n           03 goose3 pic a(20) value 'Roman Tufted'.\n           03 goose4 pic a(20) value 'Steinbacher'.\n           03 goose5 pic a(20) value 'Toulouse'.\n       local-storage section.\n       01  w                pic a(20).\n       linkage section.\n       01  birds.\n           05  len          pic 9(2).\n           05  bird         pic a(20) occurs 0 to 24 times \n                                      depending on len\n                                      indexed i.\n       01  result.\n           05  res-length   pic 9(2).\n           05  res          pic a(20) occurs 0 to 24 times \n                                      depending on res-length.\n       procedure division using birds result.\n          initialize result\n          perform varying i from 1 until i > len\n            move function trim(bird(i)) to w\n            if w <> goose1 and w <> goose2 and w <> goose3\n                           and w <> goose4 and w <> goose5 then\n              add 1 to res-length\n              move bird(i) to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program GooseFilter.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57ee99a16c8df7b02d00045f":[{"id":21225,"user_id":421,"body":"       identification division.\n       program-id. FlattenAndSort.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 rows occurs 0 to 99 times depending on arr-length\n                                        indexed by i.\n              07 cell        pic s9(4) occurs 99 times.\n       01 rows-lengths.\n          05 len pic 9(2) occurs 0 to 99 times depending on arr-length\n                                                indexed by j.\n       01  result.\n           05 res-length     pic 9(4).\n           05 res            pic s9(4) occurs 0 to 9999 times \n                                       depending on res-length.\n      \n       procedure division using arr rows-lengths result.      \n          initialize result\n          perform varying i from 1 by 1 until i > arr-length\n              perform varying j from 1 by 1 until j > len(i)\n                  add 1 to res-length\n                  move cell(i, j) to res(res-length)\n              end-perform\n          end-perform\n          sort res ascending key cell.\n       end program FlattenAndSort.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21226,"user_id":50,"body":"       identification division.\n       program-id. FlattenAndSort.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 rows occurs 0 to 99 times depending on arr-length.\n              07 cell pic s9(4) occurs 99 times.\n       01 rows-lengths.\n          05 len pic 9(2) occurs 0 to 99 times depending on arr-length\n                                                indexed i.\n       01  result.\n           05 res-length     pic 9(4).\n           05 a occurs 0 to 9999 times\n                depending on res-length indexed j.\n              07 res         pic s9(4).\n      \n       procedure division using arr rows-lengths result.\n      \n          initialize result\n          perform varying i from 1 until i > arr-length\n              perform varying j from 1 until j > len(i)\n                  add 1 to res-length\n                  move cell(i, j) to a(res-length)\n              end-perform\n          end-perform\n          sort a on ascending res\n      \n          goback.\n       end program FlattenAndSort.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21227,"user_id":168,"body":"       identification division.\n       program-id. FlattenAndSort.\n       data division.\n       working-storage section.\n       01  i usage index.\n       01  j usage index.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 rows occurs 0 to 99 times depending on arr-length.\n              07 cell        pic s9(4) occurs 99 times.\n       01 rows-lengths.\n          05 len pic 9(2) occurs 0 to 99 times depending on arr-length.\n       01  result.\n           05 res-length     pic 9(4).\n           05 res            occurs 0 to 9999 times \n                                      depending on res-length.\n              10 xs          pic s9(4).\n      \n       procedure division using arr rows-lengths result.\n          move 0 to res-length\n          perform varying i from 1 until i > arr-length\n                    after j from 1 until j > len(i)\n              add 1 to res-length\n              move cell(i, j) to xs(res-length)\n          end-perform\n          sort res on ascending key xs\n          goback.\n       end program FlattenAndSort.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21228,"user_id":53,"body":"       identification division.\n       program-id. FlattenAndSort.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 rows           occurs 0 to 99 times \n                             depending on arr-length.\n              07 cell        pic s9(4) \n                             occurs 99 times.\n       01 rows-lengths.\n          05 len             pic 9(2) occurs 0 to 99 times \n                             depending on arr-length\n                             indexed by i.\n       01  result.\n           05 res-length     pic 9(4).\n           05 a              occurs 0 to 9999 times\n                             depending on res-length \n                             indexed by j.\n              07 res         pic s9(4).\n       procedure division using arr rows-lengths result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            perform varying j from 1 until j > len(i)\n              add 1 to res-length\n              move cell(i, j) to a(res-length)\n            end-perform\n          end-perform\n          sort a on ascending key res\n          goback.\n       end program FlattenAndSort.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f24e6a18e9fad8eb000296":[{"id":21229,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 ARR.\n           05 PIC X(12) VALUE \"not at all\". \n           05 PIC X(12) VALUE \"I love you\".\n           05 PIC X(12) VALUE \"a little\".\n           05 PIC X(12) VALUE \"a lot\".\n           05 PIC X(12) VALUE \"passionately\".\n           05 PIC X(12) VALUE \"madly\".               \n       01 REDEFINES ARR.\n           05 ARR2 PIC X(12) OCCURS 6 TIMES.\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n           MOVE ARR2(FUNCTION REM(NB-PETALS, 6) + 1) TO RESULT.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21230,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WS-VAL     PIC 9(8).\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n          MOVE FUNCTION MOD(NB-PETALS 6) TO WS-VAL.\n          EVALUATE WS-VAL\n            WHEN 1\n              MOVE \"I love you\" TO RESULT\n            WHEN 2\n              MOVE \"a little\" TO RESULT\n            WHEN 3\n              MOVE \"a lot\" TO RESULT\n            WHEN 4\n              MOVE \"passionately\" TO RESULT\n            WHEN 5\n              MOVE \"madly\" TO RESULT\n            WHEN 0\n              MOVE \"not at all\" TO RESULT\n          END-EVALUATE.\n\n          Goback.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21231,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 REM         PIC 9(8).\n       01 CT-POSIBI   PIC 9 VALUE 6.\n       01 COCIENTE    PIC 9(8).\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       \n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n      \n           DIVIDE NB-PETALS BY CT-POSIBI GIVING COCIENTE REMAINDER REM\n           EVALUATE REM\n               WHEN 1\n                  MOVE 'I love you'   TO RESULT\n               WHEN 2\n                  MOVE 'a little'     TO RESULT\n               WHEN 3\n                  MOVE 'a lot'        TO RESULT\n               WHEN 4\n                  MOVE 'passionately' TO RESULT\n               WHEN 5\n                   MOVE 'madly'        TO RESULT\n               WHEN OTHER\n                   MOVE 'not at all'   TO RESULT\n               END-EVALUATE.\n\n          Goback.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21232,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOW-MUCH.\n          05 PIC a(12) VALUE 'I love you'.\n          05 PIC a(12) VALUE 'a little'.\n          05 PIC a(12) VALUE 'a lot'.\n          05 PIC a(12) VALUE 'passionately'.\n          05 PIC a(12) VALUE 'madly'.\n          05 PIC a(12) VALUE 'not at all'.\n       01 HOW-MUCH-TAB redefines HOW-MUCH occurs 6 pic a(12).\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n          move HOW-MUCH-TAB(FUNCTION MOD(NB-PETALS - 1, 6) + 1) \n               TO RESULT\n          Goback.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21233,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 TEMP.\n          05 PIC a(12) VALUE \"I love you\".\n          05 PIC a(12) VALUE \"a little\".\n          05 PIC a(12) VALUE \"a lot\".\n          05 PIC a(12) VALUE \"passionately\".\n          05 PIC a(12) VALUE \"madly\".\n          05 PIC a(12) VALUE \"not at all\".\n       01 REDEFINES TEMP.\n          05 PHRASES PIC a(12) OCCURS 6 TIMES.\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n           MOVE PHRASES(FUNCTION REM(NB-PETALS - 1, 6) + 1) TO RESULT\n           .\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21234,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n          EVALUATE FUNCTION MOD(NB-PETALS, 6)\n             WHEN 1 MOVE \"I love you\" TO RESULT\n             WHEN 2 MOVE \"a little\" TO RESULT\n             WHEN 3 MOVE \"a lot\" TO RESULT\n             WHEN 4 MOVE \"passionately\" TO RESULT\n             WHEN 5 MOVE \"madly\" TO RESULT\n             WHEN 0 MOVE \"not at all\" TO RESULT\n          END-EVALUATE\n          GOBACK.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21235,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X            PIC X(72) VALUE 'I love you  a little    a lot    \n      -   '    passionatelymadly       not at all  '.\n       LINKAGE SECTION.\n       01 NB-PETALS    PIC 9(8).\n       01 RESULT       PIC A(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n           MOVE X(FUNCTION REM(NB-PETALS - 1, 6) * 12 + 1:12) TO RESULT.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21236,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n          evaluate function mod(nb-petals, 6)\n             when 0 move 'not at all' to result\n             when 1 move 'I love you' to result\n             when 2 move 'a little' to result\n             when 3 move 'a lot' to result\n             when 4 move 'passionately' to result\n             when 5 move 'madly' to result\n          end-evaluate.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21237,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 N           PIC 9(8).\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n          compute n = function mod (nb-petals - 1, 6)\n          evaluate n\n            when 0\n                move 'I love you' to result\n            when 1\n                move 'a little' to result\n            when 2\n                move 'a lot' to result\n            when 3\n                move 'passionately' to result\n            when 4\n                move 'madly' to result\n            when other\n                move 'not at all' to result\n          End-evaluate .\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21238,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOW-MUCH-I-LOVE-YOU.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 NB-PETALS   PIC 9(8).\n       01 RESULT      PIC a(12).\n       PROCEDURE DIVISION USING NB-PETALS RESULT.\n          Compute nb-petals = function rem(nb-petals - 1, 6)\n          evaluate nb-petals\n            when 0\n                move 'I love you' to result\n            when 1\n                move 'a little' to result\n            when 2\n                move 'a lot' to result\n            when 3\n                move 'passionately' to result\n            when 4\n                move 'madly' to result\n            when other\n                move 'not at all' to result\n          End-evaluate\n          Goback.\n       END PROGRAM HOW-MUCH-I-LOVE-YOU.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f5e7bd60d0a0cfd900032d":[{"id":21239,"user_id":421,"body":"       identification division.\n       program-id. missingNumber.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  temp       pic 9(4).\n       linkage section.\n       01  arr.\n           05 xs      pic 9(3) occurs 100 times indexed i.\n       01 result      pic 9(3).\n      \n       procedure division using arr result.    \n           move 5050 to temp\n           perform varying i from 1 by 1 until i > 100\n               subtract xs(i) from temp            \n           end-perform\n           move temp to result.\n       end program missingNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21240,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. missingNumber.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 XS      PIC 9(3) OCCURS 100 INDEXED I.\n       01  RESULT     PIC 9(3).\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100\n               ADD XS(I)  TO RESULT\n           END-PERFORM\n           COMPUTE RESULT = 5050 - RESULT.\n       END PROGRAM missingNumber.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21241,"user_id":168,"body":"       identification division.\n       program-id. missingNumber.\n      \n       data division.\n       local-storage section.\n       01 s           pic 9(8).\n      \n       linkage section.\n       01 arr.\n           05 xs      pic 9(3) occurs 100 times indexed by i.\n       01 result      pic 9(3).\n      \n       procedure division using arr result.\n          perform varying i from 1 until i > 100\n              add xs(i) to s\n          end-perform\n          subtract s from 5050 giving result      \n          goback.\n       end program missingNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21242,"user_id":53,"body":"       identification division.\n       program-id. missingNumber.\n       data division.\n       local-storage section.\n       linkage section.\n       01  arr.\n           05 xs      pic 9(3) occurs 100 times \n                               indexed by i.\n       01 r           pic 9(3).\n       procedure division using arr r.\n          move 0 to r\n          perform varying i from 1 until i > 100\n            add xs(i) to r\n          end-perform\n          compute r = 5050 - r\n          goback.\n       end program missingNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21243,"user_id":50,"body":"       identification division.\n       program-id. missingNumber.\n      \n       data division.\n       local-storage section.\n       01  tmp       pic 9(4).\n      \n       linkage section.\n       01  arr.\n           05 xs      pic 9(3) occurs 100 times indexed by i.\n       01 result      pic 9(3).\n      \n       procedure division using arr result.\n      \n          move 5050 to tmp\n          perform varying i from 1 until i > 100\n              subtract xs(i) from tmp\n          end-perform\n          move tmp to result\n      \n          goback.\n       end program missingNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f609022f4d534f05000024":[{"id":21244,"user_id":421,"body":"       identification division.\n       program-id. stray.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       local-storage section.\n       01  n                 pic 9(3).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(8) occurs 3 to 100 times \n                                       depending on arr-length \n                                       indexed by i j.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n           perform varying i from 1 by 1 until i > arr-length\n               initialize n\n               perform varying j from 1 by 1 until j > arr-length\n                   if xs(i) = xs(j) then\n                       add 1 to n\n                   end-if\n               end-perform\n               if n = 1 then\n                   move xs(i) to result\n                   goback\n              end-if\n           end-perform.\n       end program stray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21245,"user_id":168,"body":"       identification division.\n       program-id. stray.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(8) occurs 3 to 100 times \n                                      depending on arr-length indexed i.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n           evaluate true\n              when xs(1) = xs(2)\n                  move 3 to i\n                  search xs varying i\n                      when xs(i) <> xs(1) move xs(i) to result\n                  end-search\n              when xs(1) = xs(3) move xs(2) to result\n              when other         move xs(1) to result\n           end-evaluate.\n       end program stray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21246,"user_id":null,"body":"       identification division.\n       program-id. stray.\n       data division.\n       WORKING-STORAGE  SECTION.\n       01 ind               pic 9(3).\n       01 numero-ant        pic s9(8).\n       01 numero-act        pic s9(8).\n       01 numero-dif        pic s9(8).\n       01 num-1             pic s9(8).\n       01 num-2             pic s9(8).\n       01 vec-1             pic 9(3).\n       01 vec-2             pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(8) occurs 3 to 100 times \n                                       depending on arr-length.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n      \n       move 1 to ind \n       move 0 to numero-ant\n       move 0 to numero-act\n       move 0 to numero-dif\n       perform until ind > arr-length\n            \n           if ind  = 1  \n              move xs(ind)     to num-1\n              move 1           to vec-1\n           else \n              if xs(ind) = num-1 \n                add 1 to vec-1\n              else \n                move xs(ind) to num-2\n                add 1 to vec-2\n              end-if\n           end-if\n          add 1 to ind\n        end-perform\n        if vec-1 = 1\n          move num-1 to result\n        else \n          move num-2 to result\n        end-if\n      \n           goback.\n       end program stray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21247,"user_id":53,"body":"       identification division.\n       program-id. stray.\n       data division.\n       local-storage section.\n       01  a                 pic s9(8).\n       01  b                 pic s9(8).\n       01  c                 pic s9(8).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(8) occurs 3 to 100 times \n                                       depending on arr-length\n                                       indexed by i.\n       01  result            pic s9(8) sign leading.\n       procedure division using arr result.\n          initialize result\n          move xs(1) to a\n          move xs(2) to b\n          move xs(3) to c\n          if a = b and c <> a then move c to result, goback end-if\n          if a = c and c <> b then move b to result, goback end-if\n          if c = b and c <> a then move a to result, goback end-if\n          perform varying i from 3 until i > arr-length\n            if xs(i) <> a then move xs(i) to result, goback end-if\n          end-perform\n          goback.\n       end program stray.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21248,"user_id":50,"body":"       identification division.\n       program-id. stray.\n       data division.\n       local-storage section.\n       01  a                 pic s9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic s9(8) occurs 3 to 100 times \n                                       depending on arr-length\n                                       indexed by i.\n       01  result            pic s9(8) sign leading.\n      \n       procedure division using arr result.\n      \n           move xs(1) to a\n           perform varying i from 2 until i = arr-length\n              if a <> xs(i)\n                if xs(i + 1) = a move xs(i) to result\n                else             move a     to result end-if\n                goback\n              end-if\n           end-perform\n           move xs(arr-length) to result\n      \n           goback.\n       end program stray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f6ad55cca6e045d2000627":[{"id":21249,"user_id":50,"body":"       identification division.\n       program-id. SquareOrSquareRoot.\n       data division.\n       working-storage section.\n       01 s            comp-2.\n      \n       linkage section.\n       01  arr.\n           05  l       pic 9(2).\n           05  xs      pic 9(3) occurs 3 to 20 depending l indexed i.\n       01  result.\n           05  res     pic 9(4) occurs 3 to 20 depending l.\n      \n       procedure division using arr result.\n      \n          perform varying i from 1 until i > l\n            compute s = function sqrt(xs(i))\n            if function rem(s,1) = 0\n                 move s to res(i)\n            else compute res(i) = xs(i) ** 2 end-if\n          end-perform.\n      \n       end program SquareOrSquareRoot.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21250,"user_id":168,"body":"       identification division.\n       program-id. SquareOrSquareRoot.\n       data division.\n       working-storage section.\n       01  r           pic 9(2).\n      \n       linkage section.\n       01  arr.\n           05  len     pic 9(2).\n           05  xs      pic 9(3) occurs 3 to 20 times depending on len\n                                                     indexed by i.\n       01  result.\n           05  res     pic 9(4) occurs 3 to 20 times depending on len.\n      \n       procedure division using arr result.\n          perform varying i from 1 until i > len\n              compute r = function sqrt(xs(i))\n              if r * r = xs(i)\n                  move r to res(i)\n              else\n                  multiply xs(i) by xs(i) giving res(i)\n              end-if\n          end-perform.\n       end program SquareOrSquareRoot.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21251,"user_id":null,"body":"       identification division.\n       program-id. SquareOrSquareRoot.\n       data division.\n       working-storage section.\n       01 indice       pic 9(5).\n       01 ws-aux-1     pic 9(5).\n       01 ws-aux-2     pic 9(5)V9(3).\n       linkage section.\n       01  arr.\n           05  len     pic 9(2).\n           05  xs      pic 9(3) occurs 3 to 20 times depending on len.\n       01  result.\n           05  res     pic 9(4) occurs 3 to 20 times depending on len.\n      \n       procedure division using arr result.\n          initialize result\n          perform varying indice from 1 by 1 until indice > len\n              compute ws-aux-1 = function sqrt(xs(indice))\n              compute ws-aux-2 = ws-aux-1 * ws-aux-1\n              if ws-aux-2 = xs(indice)\n                 move ws-aux-1 to res(indice)\n              else\n                 compute res(indice) = xs(indice) * xs(indice)\n              end-if.\n          goback.\n       end program SquareOrSquareRoot.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21252,"user_id":null,"body":"       identification division.\n       program-id. SquareOrSquareRoot.\n       data division.\n       working-storage section.\n       01 i        index.\n       01 sqrt     comp-2.\n      \n       linkage section.\n       01  arr.\n           05  len     pic 9(2).\n           05  xs      pic 9(3) occurs 3 to 20 times depending on len.\n       01  result.\n           05  res     pic 9(4) occurs 3 to 20 times depending on len.\n      \n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > len\n             compute sqrt = function sqrt(xs(i))\n             if sqrt = function integer(sqrt) then \n                set res(i) to sqrt\n             else\n                compute res(i) = xs(i) ** 2\n             end-if\n          end-perform\n          goback.\n       end program SquareOrSquareRoot.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21253,"user_id":null,"body":"       identification division.\n       program-id. SquareOrSquareRoot.\n       data division.\n       working-storage section.\n       01 sqrt         usage is index.\n      \n       linkage section.\n       01  arr.\n           05  len     pic 9(2).\n           05  xs      pic 9(3) occurs 3 to 20 times depending on len.\n       01  result.\n           05  res     pic 9(4) occurs 3 to 20 times depending on len\n                                indexed by i.\n      \n       procedure division using arr result.\n          perform varying i from 1 until i > len\n             set sqrt to function sqrt(xs(i))\n             if sqrt * sqrt = xs(i) then\n                set res(i) to sqrt\n             else\n                compute res(i) = xs(i) * xs(i)\n             end-if\n          end-perform\n          goback.\n       end program SquareOrSquareRoot.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21254,"user_id":53,"body":"       identification division.\n       program-id. SquareOrSquareRoot.\n       data division.\n       local-storage section.\n       01 n            comp-2.\n       linkage section.\n       01  arr.\n           05  len     pic 9(2).\n           05  xs      pic 9(3) occurs 3 to 20 depending len indexed i.\n       01  result.\n           05  res     pic 9(4) occurs 3 to 20 depending len.\n       procedure division using arr result.\n          perform varying i from 1 until i > len\n            compute n = function sqrt(xs(i))\n            if function rem(n, 1) = 0 then\n              move n to res(i)\n            else \n              compute res(i) = xs(i) ** 2 \n            end-if\n          end-perform\n          goback.\n       end program SquareOrSquareRoot.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f75cc397d62fc93d000059":[{"id":21255,"user_id":421,"body":"       identification division.\n       program-id. calc.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  n               pic 9(3).\n       01  r               pic 9.\n       linkage section.\n       01  x.\n           05 x-length     pic 9(2).\n           05 chr          pic a occurs 1 to 20 times \n                                 depending on x-length\n                                 indexed by i.\n       01  result          pic 9(2).\n      \n       procedure division using x result.\n           initialize result\n           perform varying i from 1 by 1 until i > x-length\n               compute n = function ord(chr(i)) - 1               \n               perform until n = 0\n                   divide n by 10 giving n remainder r\n                   if r = 7 then\n                       add 6 to result\n                   end-if\n               end-perform\n           end-perform.\n       end program calc.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21256,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. calc.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  X.\n           05 LEN          PIC 9(2).\n           05 FILLER       PIC A(20).\n       01  RESULT          PIC 9(2).\n\n       PROCEDURE DIVISION USING X RESULT.\n           INSPECT X(3:LEN) TALLYING RESULT FOR ALL 'a', 'k', 'u'\n           MULTIPLY 6 BY RESULT.\n       END PROGRAM calc.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21257,"user_id":168,"body":"       identification division.\n       program-id. calc.\n       data division.\n       working-storage section.\n       01  n    pic 999.\n      \n       linkage section.\n       01  x.\n           05 x-length     pic 9(2).\n           05 chr          pic a occurs 1 to 20 times \n                                 depending on x-length indexed by i.\n       01  result          pic 9(2).\n      \n       procedure division using x result.\n          move 0 to result\n          perform varying i from 1 until i > x-length\n              compute n = function ord(chr(i)) - 1\n              inspect n tallying result for all '7'\n          end-perform\n          multiply 6 by result.\n       end program calc.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21258,"user_id":53,"body":"       identification division.\n       program-id. calc.\n       data division.\n       local-storage section.\n       01  a               pic 9(2).\n       linkage section.\n       01  x.\n           05 x-length     pic 9(2).\n           05 chr          pic a occurs 1 to 20 times \n                                 depending on x-length\n                                 indexed by i.\n       01  result          pic 9(2).\n       procedure division using x result.\n          set result to 0\n          perform varying i from 1 until i > x-length\n            move function ord(chr(i)) to a\n            subtract 1 from a\n            if function rem(a, 10) = 7 then add 6 to result end-if\n            divide 10 into a\n            if function rem(a, 10) = 7 then add 6 to result end-if\n          end-perform\n          goback.\n       end program calc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21259,"user_id":50,"body":"       identification division.\n       program-id. calc.\n       data division.\n       local-storage section.\n       01  n              pic 9(3).\n       01  r              pic 9.\n      \n       linkage section.\n       01  x.\n           05 x-length     pic 9(2).\n           05 chr          pic a occurs 1 to 20 times \n                           depending on x-length indexed i.\n       01  result          pic 9(2).\n      \n       procedure division using x result.\n      \n          move 0 to result\n          perform varying i from 1 until i > x-length\n              compute n = function ord(chr(i)) - 1\n              perform until n = 0\n                divide n by 10 giving n remainder r\n                  if r = 7 add 1 to result end-if\n              end-perform\n          end-perform\n      \n          multiply 6 by result\n      \n          goback.\n       end program calc.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f7796697d62fc93d0001b8":[{"id":21260,"user_id":168,"body":"       identification division.\n       program-id. trouble.\n       data division.\n      \n       linkage section.\n       01  x.\n           05 x-length     pic 99.\n           05 xs           pic 99 occurs 1 to 30 times \n                                  depending on x-length.\n       01  t               pic 99.\n       01  result.\n           05 res-length   pic 99.\n           05 res          pic 99 occurs 1 to 30 times \n                                  depending on res-length\n                                  indexed by i.\n      \n       procedure division using x t result.\n           move 0 to res-length\n           perform varying i from 1 until i > x-length\n               if res-length = 0 or xs(i) + res(res-length) <> t\n                    add 1 to res-length\n                    move xs(i) to res(res-length)\n               end-if\n           end-perform.\n       end program trouble.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21261,"user_id":50,"body":"       identification division.\n       program-id. trouble.\n       data division.\n       local-storage section.\n       01  n               pic 99.\n       01  j               pic 99.\n      \n       linkage section.\n       01  x.\n           05 x-length     pic 99.\n           05 xs           pic 99 occurs 1 to 30 times \n                                  depending on x-length.\n       01  t               pic 99.\n       01  result.\n           05 res-length   pic 99.\n           05 res          pic 99 occurs 1 to 30 times \n                                  depending on res-length\n                                  indexed by i.\n      \n       procedure division using x t result.\n      \n           move 2 to n\n           perform until n > x-length\n              if  xs(n - 1) + xs(n) = t perform shrink\n              else                      add 1 to n end-if\n           end-perform\n      \n           move x-length to res-length\n           perform varying i from 1 until i > x-length \n              move xs(i) to res(i)\n           end-perform\n      \n           goback.\n      \n           shrink.\n              perform varying j from n until j >= x-length\n                  move xs(j + 1) to xs(j)\n              end-perform\n              subtract 1 from x-length\n              .\n      \n       end program trouble.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57f781872e3d8ca2a000007e":[{"id":21262,"user_id":421,"body":"       identification division.\n       program-id. Maps.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending on resLength.\n      \n       procedure division using arr result.      \n          initialize result\n          perform varying i from 1 by 1 until i > arrLength\n              add 1 to resLength\n              compute res(resLength) = 2 * xs(i)\n          end-perform.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21263,"user_id":null,"body":"       identification division.\n       program-id. Maps.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arrLength\n            set resLength up by 1 \n            compute res(resLength) = xs(i) * 2\n          end-perform\n          goback.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21264,"user_id":null,"body":"       identification division.\n       program-id. Maps.\n       data division.\n       working-storage section.\n       01 vars.\n          05 i               pic 9(4) comp-3 value zeroes.\n          05 ini             pic 9(4) comp-3 value zeroes.\n          05 fin             pic 9(4) comp-3 value zeroes.\n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending on arrLength.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n      \n           initialize result i\n           perform until i greater arrLength\n              compute res(i) = xs(i)*2\n              add 1 to i  \n           end-perform  \n           move arrLength to resLength \n          goback.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21265,"user_id":null,"body":"       identification division.\n       program-id. Maps.\n       data division.\n       working-storage section.\n       01 i             usage is index.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending on arrLength.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n          set resLength to arrLength\n          perform varying i from 1 until i > arrLength\n             compute res(i) = xs(i) * 2 \n          end-perform\n          goback.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21266,"user_id":53,"body":"       identification division.\n       program-id. Maps.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n      \n          move arr to result\n          perform varying i from 1 until i > arrLength\n            multiply 2 by res(i)\n          end-perform\n      \n          goback.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21267,"user_id":168,"body":"       identification division.\n       program-id. Maps.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending on arrLength indexed i.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending on resLength.\n      \n       procedure division using arr result.\n          move arrLength to resLength\n          perform varying i from 1 until i > resLength\n              multiply xs(i) by 2 giving res(i)\n          end-perform.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21268,"user_id":50,"body":"       identification division.\n       program-id. Maps.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(4).\n           05 xs            pic s9(4)  occurs 0 to 1000 times \n                                       depending arrLength indexed i.\n       01  result.\n           05 resLength     pic 9(4).\n           05 res           pic s9(4) occurs 0 to 1000 times \n                                      depending resLength.\n      \n       procedure division using arr result.\n      \n          set resLength to arrLength\n          perform varying i from 1 until i > arrLength\n              multiply xs(i) by 2 giving res(i)\n          end-perform\n      \n          goback.\n       end program Maps.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57fae964d80daa229d000126":[{"id":21269,"user_id":421,"body":"       identification division.\n       program-id. remove_markMark.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                           depending on s-length\n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 100 times \n                           depending on res-length.\n      \n       procedure division using s result.\n          initialize res-length\n          perform varying i from 1 until i = s-length or s-length = 0\n              add 1 to res-length\n              move s-char(i) to res(res-length)\n          end-perform\n          if s-length > 0 and s-char(s-length) <> '!' then\n              add 1 to res-length\n              move s-char(s-length) to res(res-length)\n          end-if.\n       end program remove_markMark.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21270,"user_id":53,"body":"       identification division.\n       program-id. remove_markMark.\n       data division.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 100 times \n                           depending on res-length.\n       procedure division using s result.\n          move s to result\n          if res(res-length) = '!' then\n             subtract 1 from res-length \n          end-if.\n       end program remove_markMark.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21271,"user_id":50,"body":"       identification division.\n       program-id. remove_markMark.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 100 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move s to result\n      \n          if res(res-length) = '!'\n             subtract 1 from res-length end-if\n          \n          goback.\n      \n       end program remove_markMark.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21272,"user_id":null,"body":"       identification division.\n       program-id. remove_markMark.\n       data division.\n       working-storage section.\n       01 countr         usage is index.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char-tab   pic x occurs 0 to 100 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 100 times \n                           depending on res-length.\n      \n       procedure division using s result.      \n          initialize result\n          move s to result\n          if res(res-length) = '!' then\n             set res-length down by 1\n          end-if\n          goback.\n       end program remove_markMark.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21273,"user_id":null,"body":"       identification division.\n       program-id. remove_markMark.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 0 to 100 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 100 times \n                           depending on res-length.\n      \n       procedure division using s result.\n          move s to result.\n          if s-char(s-length) = \"!\"\n                compute res-length = s-length - 1.\n       end program remove_markMark.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57faece99610ced690000165":[{"id":21274,"user_id":168,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-chars.\n              10 pic x occurs 0 to 30 times \n                                 depending on res-length indexed i.\n      \n       procedure division using s result.\n          move s to result\n          move 0 to i\n          inspect res-chars tallying i for trailing '!'\n          subtract i from res-length\n          goback.\n       end program RemoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21275,"user_id":50,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length indexed j.\n      \n       procedure division using s result.\n      \n          perform varying i from s-length by -1 until i < 0\n            if s-char(i) <> '!' exit perform end-if\n            if i = 0 move 0 to res-length, goback end-if\n          end-perform\n          move i to res-length\n          perform varying j from 1 until j > i\n              move s-char(j) to res(j)\n          end-perform\n          goback.\n       end program RemoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21276,"user_id":null,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char.\n              10 s-char-tab       pic x occurs 0 to 30 times \n                                        depending on s-length\n                                        indexed by s-i.\n       01  res.\n           05 res-length   pic 9(2).\n           05 res-char.\n              10 res-tab   pic x occurs 0 to 30 times \n                                 depending on res-length.\n      \n       procedure division using s res.\n          perform varying s-i from s-length by -1 \n                  until s-i = 0 or s-char-tab(s-i) not = '!'\n          end-perform\n          set res-length to s-i\n          move s-char(1:res-length) to res-char(1:res-length)\n          goback.\n       end program RemoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21277,"user_id":53,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n       linkage section.\n       01  s.\n           05 n            pic 9(2).\n           05 xs           pic x occurs 0 to 30 times \n                           depending on n indexed i.\n       01  r.\n           05 m            pic 9(2).\n           05 ys           pic x occurs 0 to 30 times \n                           depending on m indexed j.\n       procedure division using s r.\n          perform varying i from n by -1 until i < 0\n            if xs(i) <> '!' exit perform end-if\n            if i = 0 move 0 to m, goback end-if\n          end-perform\n          move i to m\n          perform varying j from 1 until j > i\n            move xs(j) to ys(j)\n          end-perform\n          goback.\n       end program RemoveMarks.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57faefc42b531482d5000123":[{"id":21278,"user_id":168,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length indexed i k.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length.\n      \n       procedure division using s result.\n          move 0 to res-length k\n          inspect s tallying k for trailing '!'\n          perform varying i from 1 until i > s-length\n              if s-char(i) <> '!' or i > s-length - k\n                  add 1 to res-length\n                  move s-char(i) to res(res-length)\n              end-if\n          end-perform.\n       end program RemoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21279,"user_id":50,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n       local-storage section.\n       01  n               pic 9(2).\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to n, res-length\n          perform varying i from 1 until i > s-length\n            if s-char(i) <> '!'\n              move 0 to n\n              add 1 to res-length\n              move s-char(i) to res(res-length)\n            else add 1 to n end-if\n          end-perform\n          perform n times\n              add 1 to res-length\n              move '!' to res(res-length)\n          end-perform\n      \n          goback.\n       end program RemoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57faf12b21c84b5ba30001b0":[{"id":21280,"user_id":421,"body":"       identification division.\n       program-id. RemoveMarks.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length\n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 31 times \n                           depending on res-length.\n      \n       procedure division using s result.\n           perform varying i from 1 by 1 until i > s-length\n               if s-char(i) <> '!' then\n                   add 1 to res-length\n                   move s-char(i) to res(res-length)\n               end-if\n           end-perform\n           add 1 to res-length\n           move \"!\" to res(res-length).\n       end program RemoveMarks.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21281,"user_id":null,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length\n                           indexed by s-i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 31 times \n                           depending on res-length\n                           indexed by result-i.\n      \n       procedure division using s result.\n          initialize result\n          set result-i to 0\n          perform varying s-i from 1 until s-i > s-length\n             display 'si' s-i\n             if s-char(s-i) not = '!' \n                set result-i up by 1\n                move s-char(s-i) to res(result-i)\n             end-if\n          end-perform\n          set result-i up by 1\n          move '!' to res(result-i)\n          set res-length to result-i\n          goback.\n       end program RemoveMarks.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21282,"user_id":53,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n       local-storage section.\n       01  i usage index.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 31 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n            if s-char(i) <> '!'\n              add 1 to res-length\n              move s-char(i) to res(res-length)\n            end-if\n          end-perform\n          add 1 to res-length\n          move '!' to res(res-length)\n          goback.\n       end program RemoveMarks.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21283,"user_id":50,"body":"       identification division.\n       program-id. RemoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 31 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n            if s-char(i) <> '!'\n              add 1 to res-length\n              move s-char(i) to res(res-length)\n            end-if\n          end-perform\n          add 1 to res-length\n          move '!' to res(res-length)\n      \n          goback.\n       end program RemoveMarks.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57fafd0ed80daac48800019f":[{"id":21284,"user_id":421,"body":"       identification division.\n       program-id. MoveMarks.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  exc             pic 9(2).\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length\n                           indexed by i j k.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length.\n      \n       procedure division using s result.\n           initialize exc j          \n           move s-length to k res-length \n           perform varying i from 1 by 1 until i > s-length\n               if s-char(i) = '!' then\n                   move s-char(i) to res(k)\n                   subtract 1 from k\n               else\n                   add 1 to j\n                   move s-char(i) to res(j)\n              end-if\n           end-perform.\n       end program MoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21285,"user_id":50,"body":"       identification division.\n       program-id. MoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length indexed j k.\n      \n       procedure division using s result.\n          \n          move 0 to j\n          move s-length to res-length, k\n          perform varying i from 1 until i > s-length\n            if s-char(i) = '!'\n              move '!' to res(k)\n              subtract 1 from k\n            else\n              add 1 to j\n              move s-char(i) to res(j)\n            end-if\n          end-perform\n      \n          goback.\n       end program MoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21286,"user_id":53,"body":"       identification division.\n       program-id. MoveMarks.\n       data division.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length \n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length \n                           indexed by j k.\n       procedure division using s result.\n          initialize result\n          move 0 to j\n          move s-length to res-length k\n          perform varying i from 1 until i > s-length\n            if s-char(i) <> '!'\n              add 1 to j\n              move s-char(i) to res(j)\n            else\n              move '!' to res(k)\n              subtract 1 from k\n            end-if\n          end-perform\n          goback.\n       end program MoveMarks.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21287,"user_id":168,"body":"       identification division.\n       program-id. MoveMarks.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 30 times \n                           depending on s-length indexed i j k.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 30 times \n                           depending on res-length.\n      \n       procedure division using s result.\n          move s-length to res-length j\n          move 1 to k\n          perform varying i from 1 until i > s-length\n              if s-char(i) = '!'\n                  move '!' to res(j)\n                  subtract 1 from j\n              else\n                  move s-char(i) to res(k)\n                  add 1 to k\n              end-if\n          end-perform.\n       end program MoveMarks.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"57fb017d9610ce369a0006ac":[{"id":21288,"user_id":53,"body":"       identification division.\n       program-id. RemoveOrAdd.\n       data division.\n       local-storage section.\n       01  n               pic 9(3).\n       01  w               pic x(999).\n       01  w-arr.\n           05 w-length     pic 9(3).\n           05 w-xs         pic x(999) occurs 1 to 100 times \n                           depending on w-length\n                           indexed by j.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-str.\n              07 s-char    pic x occurs 1 to 100 times \n                           depending on s-length\n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 1 to 200 times \n                           depending on res-length.\n       procedure division using s result.\n          initialize result\n          move 1 to i\n          perform until i > s-length\n            unstring s-str delimited by space into w with pointer i\n            move length of function trim(w) to n\n            add 1 to w-length\n            if w <> space then\n              evaluate true\n                when w(n:1) = '!' and w(n - 1:1) <> '!'\n                  move w(1:n - 1) to w-xs(w-length)\n                when w(n:1) <> '!'\n                  move function concatenate(\n                    function trim(w), '!') to w-xs(w-length)\n                when other\n                  move function trim(w) to w-xs(w-length)\n              end-evaluate  \n              display w-xs(w-length)\n            end-if\n          end-perform\n          perform varying j from 1 until j > w-length\n            if j > 1 then\n              add 1 to res-length\n              move space to res(res-length)\n            end-if\n            move function trim(w-xs(j)) to w\n            move length of function trim(w) to n\n            perform varying i from 1 until i > n\n              add 1 to res-length\n              move w(i:1) to res(res-length)\n            end-perform\n          end-perform\n          goback.\n       end program RemoveOrAdd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21289,"user_id":50,"body":"       identification division.\n       program-id. RemoveOrAdd.\n       data division.\n       local-storage section.\n       01  n              pic 9(3).\n       01  c              pic x.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 1 to 100 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 1 to 200 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length, n\n          perform varying i from 1 until i > s-length\n            move s-char(i) to c\n            evaluate c\n            when '!'          add 1 to n\n            when ' '          perform pop\n            when other        move 0 to n\n            end-evaluate\n            perform push\n          end-perform\n          perform pop\n      \n          goback.\n      \n            push.\n              add 1 to res-length\n              move c to res(res-length)\n              .\n      \n            pop.\n              evaluate n\n              when 1    subtract 1 from res-length\n              when 0    add 1 to res-length\n                        move '!' to res(res-length)\n              end-evaluate\n              move 0 to n\n             .\n      \n       end program RemoveOrAdd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5803753aab6c2099e600000e":[{"id":21290,"user_id":null,"body":"       identification division.\n       program-id. AgeInDays.\n      \n       data division.\n       working-storage section.\n       01 today       pic 9(8).\n       01 a-date      pic 9(8).\n       01 filler redefines a-date.\n          05 a-year   pic 9(4).\n          05 a-month  pic 9(2).\n          05 a-day    pic 9(2).\n       01 days        pic 9(6).\n       01 days-edt    pic z(6).\n\n       linkage section.\n       01 y           pic 9(4).\n       01 m           pic 9(2).\n       01 d           pic 9(2).\n       01 result      pic x(23).\n      \n       procedure division using y, m, d, result.\n      \n          initialize result\n          move y to a-year\n          move m to a-month\n          move d to a-day\n          accept today from date yyyymmdd\n          compute days = function integer-of-date(today) - \n                         function integer-of-date(a-date) \n          move days to days-edt\n          string \"You are \" function trim(days-edt) \" days old\" \n             into result\n          if days < 2\n            move function substitute(result, \"days\", \"day\") to result\n          end-if\n          goback.\n      \n       end program AgeInDays.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21291,"user_id":50,"body":"       identification division.\n       program-id. AgeInDays.\n      \n       data division.\n       local-storage section.\n       01 diff  pic z(8)9.\n       01 n     pic 9(6).\n       01 s     pic 9(8).\n      \n       linkage section.\n       01 y           pic 9(4).\n       01 m           pic 9(2).\n       01 d           pic 9(2).\n       01 result      pic x(23).\n      \n       procedure division using y m d result.\n      \n          initialize result\n          string y m d into s\n          compute diff n = function integer-of-date(\n                             function numval(function current-date(1:8))\n                                       )  - function integer-of-date(s)\n          if n = 1\n            string 'You are ' function trim(diff) ' day old'\n            into result\n          else\n            string 'You are ' function trim(diff) ' days old'\n            into result\n          end-if.\n      \n       end program AgeInDays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21292,"user_id":76,"body":"       identification division.\n       program-id. AgeInDays.\n      \n       data division.\n       local-storage section.\n       01 date-bd     pic 9(8).\n       01 date-now    pic 9(8).\n       01 days        pic 9(6).\n       01 days-disp   pic Z(6)9.\n       linkage section.\n       01 y           pic 9(4).\n       01 m           pic 9(2).\n       01 d           pic 9(2).\n       01 res         pic x(23).\n      \n       procedure division using y m d res.\n         initialize res\n         compute date-bd = y * 10000 + m * 100 + d\n         move function current-date(1:8) to date-now\n         compute days = function integer-of-date(date-bd)\n          - function integer-of-date(date-now)\n         move days to days-disp\n         if days < 2 then\n          string \"You are \" function trim(days-disp) \" day old\" into res\n         else\n          string \"You are \" function trim(days-disp)\" days old\" into res\n         end-if\n         goback.\n       end program AgeInDays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21293,"user_id":53,"body":"       identification division.\n       program-id. AgeInDays.\n       data division.\n       local-storage section.\n       01 e     pic z(8)9.\n       01 n     pic 9(6).\n       01 s     pic 9(8).\n       01 p     usage index value 1.\n       linkage section.\n       01 y           pic 9(4).\n       01 m           pic 9(2).\n       01 d           pic 9(2).\n       01 result      pic x(23).\n       procedure division using y m d result.\n          initialize result\n          string y m d into s\n          compute e n = function integer-of-date(\n            function numval(function current-date(1:8)))  \n                 - function integer-of-date(s)\n          string 'You are ' function trim(e) ' day'\n            into result pointer p\n          if n < 2\n            string ' old' into result pointer p\n          else\n            string 's old' into result pointer p\n          end-if.\n       end program AgeInDays.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58039f8efca342e4f0000023":[{"id":21294,"user_id":50,"body":"       identification division.\n       program-id. changer.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(2).\n           03 str-data.\n               05 chars pic x occurs 0 to 99 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(2).\n           03 str-data.\n               05 chars pic x occurs 0 to 99 times \n                              depending on len of result.\n\n       procedure division using str result.\n      \n           move function lower-case(str) to result\n           inspect str-data of result\n               converting 'abcdefghijklmnopqrstuvwxyz' \n                       to 'bcdEfghIjklmnOpqrstUvwxyzA'.\n      \n       end program changer.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21295,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. changer.\n       REMARKS. SOLUTION 2\/2.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STR.\n           03 LEN           PIC 9(2).\n           03 FILLER        PIC X OCCURS 99 DEPENDING LEN.\n       01  RESULT           PIC X(101).\n\n       PROCEDURE DIVISION USING STR RESULT.\n           MOVE FUNCTION LOWER-CASE(STR)  TO RESULT\n           TRANSFORM RESULT FROM 'abcdefghijklmnopqrstuvwxyz'\n                              TO 'bcdEfghIjklmnOpqrstUvwxyzA'.\n       END PROGRAM changer.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21296,"user_id":null,"body":"       >>SOURCE FORMAT IS FREE\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. changer.\n       REMARKS. SOLUTION 1\/2\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STR.\n           03 LEN           PIC 9(2).\n           03 FILLER        PIC X OCCURS 99 DEPENDING LEN.\n       01  RESULT           PIC X(101).\n\n       PROCEDURE DIVISION USING STR RESULT.\n           MOVE FUNCTION SUBSTITUTE-CASE(STR 'a' 'b' 'b' 'c' 'c' 'd' 'd' 'E' 'e' 'f' 'f' 'g' 'g' 'h' 'h' 'I' 'i' 'j' 'j' 'k' 'k' 'l' 'l' 'm' 'm' 'n' 'n' 'O' 'o' 'p' 'p' 'q' 'q' 'r' 'r' 's' 's' 't' 't' 'U' 'u' 'v' 'v' 'w' 'w' 'x' 'x' 'y' 'y' 'z' 'z' 'A')  TO RESULT.\n       END PROGRAM changer.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21297,"user_id":null,"body":"       identification division.\n       program-id. changer.\n\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(2).\n           03 str-data.\n               05 chars pic x occurs 0 to 99 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(2).\n           03 str-data.\n               05 chars pic x occurs 0 to 99 times \n                              depending on len of result.\n\n       procedure division using str result.\n           MOVE str TO result.\n           INSPECT result CONVERTING\n           \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" TO\n           \"bcdEfghIjklmnOpqrstUvwxyzAbcdEfghIjklmnOpqrstUvwxyzA\".           \n          goback.\n       end program changer.\n\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21298,"user_id":53,"body":"       identification division.\n       program-id. changer.\n       data division.\n       linkage section.\n       01  str.\n           03 len      pic 9(2).\n           03 xs.\n               05 chars pic x occurs 0 to 99 times \n                              depending on len of str.\n       01  result.\n           03 len      pic 9(2).\n           03 res.\n               05 chars pic x occurs 0 to 99 times \n                              depending on len of result.\n       procedure division using str result.\n           move function lower-case(str) to result\n           inspect res converting 'abcdefghijklmnopqrstuvwxyz' \n                               to 'bcdEfghIjklmnOpqrstUvwxyzA'.\n       end program changer.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5803ee0ed5438edcc9000087":[{"id":21299,"user_id":168,"body":"       identification division.\n       program-id. padovan.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(20) value 1.\n       01 b           pic 9(20) value 1.\n       01 c           pic 9(20) value 1.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n          perform varying n from n by -1 until n = 0\n              compute result = a\n              compute a = b\n              compute b = c\n              compute c = result + a\n          end-perform\n          compute result = a.\n       end program padovan.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21300,"user_id":53,"body":"       identification division.\n       program-id. padovan.\n       data division.\n       local-storage section.\n       01 x           pic 9(20) value 1.\n       01 y           pic 9(20) value 1.\n       01 z           pic 9(20) value 1.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(20).\n       procedure division using n m.\n          call 'padovan-rec' using\n            by content x y z n \n            by reference m\n          goback.\n       end program padovan.\n      \n       identification division.\n       program-id. padovan-rec recursive.\n       data division.\n       local-storage section.\n       01 a           pic 9(20).\n       01 b           pic 9(8).\n       01 p           pic 9(20).\n       linkage section.\n       01 x           pic 9(20).\n       01 y           pic 9(20).\n       01 z           pic 9(20).\n       01 n           pic 9(8).\n       01 m           pic 9(20).\n       procedure division using x y z n m.\n          if n < 3 then\n            move z to m\n          else\n            add x to y giving a\n            subtract 1 from n giving b\n            call 'padovan-rec' using \n              by content y z a b \n              by reference p\n            move p to m\n          end-if\n          goback.\n       end program padovan-rec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21301,"user_id":50,"body":"       identification division.\n       program-id. padovan.\n      \n       data division.\n       local-storage section.\n       01 a      pic 9(20) value 1.\n       01 b      pic 9(20) value 1.\n       01 c      pic 9(20) value 1.\n       01 d      pic 9(20).\n       01 i      pic 9(8).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          perform varying i from 0 by 1 until i = n\n              compute d = a + b\n              move b to a\n              move c to b\n              move d to c\n          end-perform\n          \n          move a to result\n\n          goback.\n       end program padovan.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58068479c27998b11900056e":[{"id":21302,"user_id":50,"body":"       identification division.\n       program-id. sortTwisted37.\n       data division.\n       local-storage section.\n       01  pair occurs 1 to 30 times \n                depending on arr-length indexed i.\n           05 n     pic s9(3).\n           05 twist pic s9(3).\n       01  s pic x(3).\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 1 to 30 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n      \n          perform varying i from 1 until i > arr-length\n              move xs(i) to n(i), s\n              inspect s converting '37'  to '73'\n              move s to twist(i)\n              if xs(i) < 0 multiply -1 by twist(i) end-if\n          end-perform\n        \n          sort pair on ascending twist\n      \n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              move n(i) to res(i)\n          end-perform\n      \n          goback.\n       end program sortTwisted37.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21303,"user_id":168,"body":"       identification division.\n       program-id. sortTwisted37.\n       data division.\n       working-storage section.\n       01  s        pic -9(3).\n       01  tmp occurs 1 to 30 times depending on arr-length\n                                    indexed by i.\n           05 ks pic s9(3).\n           05 ys pic s9(3).      \n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 1 to 30 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                      depending on res-length.\n      \n       procedure division using arr result.\n          perform varying i from 1 until i > arr-length\n              move xs(i) to ys(i) s\n              inspect s converting '37' to '73'\n              move s to ks(i)\n          end-perform\n          sort tmp on ascending key ks\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              move ys(i) to res(i)\n          end-perform.\n       end program sortTwisted37.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21304,"user_id":53,"body":"       identification division.\n       program-id. sortTwisted37.\n       data division.\n       local-storage section.\n       01  i                 usage index.\n       01  arr-cv            occurs 1 to 30 times \n                             depending on arr-length.\n           05 n              pic s9(3).\n           05 m              pic s9(3).\n       01  s pic x(3).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 1 to 30 times \n                                       depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                       depending on res-length.\n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            move xs(i) to n(i) s\n            inspect s converting '73' to '37'\n            move s to m(i)\n            if n(i) < 0 then multiply -1 by m(i) end-if\n          end-perform\n          sort arr-cv on ascending m\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n            move n(i) to res(i)\n          end-perform\n          goback.\n       end program sortTwisted37.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21305,"user_id":50,"body":"       identification division.\n       program-id. sortTwisted37.\n       data division.\n       local-storage section.\n       01  pair occurs 1 to 30 times \n                depending on arr-length indexed i.\n           05 n     pic s9(3).\n           05 twist pic s9(3).\n       01  s pic x(3).\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(3) occurs 1 to 30 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic s9(3) occurs 0 to 30 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n      \n          perform varying i from 1 until i > arr-length\n              move xs(i) to n(i), s\n              inspect s converting '37'  to '73'\n              move s to twist(i)\n              if xs(i) < 0 multiply -1 by twist(i) end-if\n          end-perform\n        \n          sort pair on ascending twist\n      \n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              move n(i) to res(i)\n          end-perform\n      \n          goback.\n       end program sortTwisted37.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"580878d5d27b84b64c000b51":[{"id":21306,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-TRIANGULAR-NUMBERS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N < 0 THEN\n               SET RESULT TO 0\n           ELSE      \n               COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n           END-IF.\n       END PROGRAM SUM-TRIANGULAR-NUMBERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21307,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-TRIANGULAR-NUMBERS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LOCAL-STORAGE SECTION.\n       01 I            PIC S9(08).\n       LINKAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC S9(20).\n       PROCEDURE DIVISION USING N RESULT.\n            PERFORM VARYING I FROM 1 BY 1 UNTIL I>N\n                COMPUTE RESULT = RESULT + (I * (I + 1) \/ 2)\n            END-PERFORM\n            GOBACK.\n       END PROGRAM SUM-TRIANGULAR-NUMBERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21308,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-TRIANGULAR-NUMBERS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I            PIC S9(9) COMP.\n       01 TRIANGULAR-NUMBER PIC S9(09) COMP.\n      \n       LINKAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC S9(20).\n\n       PROCEDURE DIVISION USING N RESULT.\n            MOVE 0 TO TRIANGULAR-NUMBER\n            MOVE 0 TO RESULT\n            PERFORM VARYING I FROM 0 UNTIL I > N\n              ADD I TO TRIANGULAR-NUMBER\n              ADD TRIANGULAR-NUMBER TO RESULT\n            END-PERFORM\n      \n      * HAJIME!\n            GOBACK.\n       END PROGRAM SUM-TRIANGULAR-NUMBERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21309,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-TRIANGULAR-NUMBERS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC S9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           if n < 1\n              compute result = 0\n           else\n              compute result = n * (n + 1) * (n + 2) \/ 6\n           end-if.\n       END PROGRAM SUM-TRIANGULAR-NUMBERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21310,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-TRIANGULAR-NUMBERS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC S9(20).\n       PROCEDURE DIVISION USING N RESULT.\n            MOVE 0 TO RESULT\n            IF N > 0\n                COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n            END-IF.\n       END PROGRAM SUM-TRIANGULAR-NUMBERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21311,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SUM-TRIANGULAR-NUMBERS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N            PIC S9(08).\n       01 RESULT       PIC S9(20).\n       PROCEDURE DIVISION USING N RESULT.\n            COMPUTE N = Function max(N, 0)\n            COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n            GOBACK.\n       END PROGRAM SUM-TRIANGULAR-NUMBERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21312,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION.\n           INITIALIZE RESULT\n           PERFORM VARYING N FROM N BY -1 UNTIL N < 1\n               COMPUTE RESULT = RESULT + (N * (N + 1) \/ 2)\n           END-PERFORM\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21313,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION. \n           INITIALIZE RESULT\n           IF N > ZEROES\n              COMPUTE RESULT = (N * (N + 1)*(N + 2)) \/ 6\n           END-IF.    \n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21314,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION\n       if n < 1 then move 0 to result\n           else compute result = n * (n + 1) * (n + 2) \/ 6.\n       END PROGRAM SOLUTION","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21315,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS.\n            IF N < 0 THEN\n              MOVE 0 TO RESULT\n            ELSE\n              COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n            END-IF.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21316,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION.\n            MOVE 0 TO RESULT\n            IF N > 0\n                COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n            END-IF.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21317,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08) VALUES 0 .\n       LOCAL-STORAGE SECTION.\n       01 I            PIC 9(5) VALUES 0.\n       01 J            PIC 9(5) VALUES 1.\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION.\n            IF N < 0 THEN\n              COMPUTE RESULT = 0\n            ELSE \n              COMPUTE RESULT = (N * (N + 1) * (N + 2)) \/ 6\n            END-IF.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21318,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION.\n        IF N < 0 THEN MOVE 0 TO N\n        COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21319,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N            PIC S9(05).\n       01 RESULT       PIC S9(08).\n       PROCEDURE DIVISION.\n       SUM-TRIANGULAR-NUMBERS SECTION.\n            IF N IS GREATER THAN 0\n                COMPUTE RESULT = N * (N + 1) * (N + 2) \/ 6\n            ELSE \n                compute RESULT = 0 \n            END-IF.\n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5808dcb8f0ed42ae34000031":[{"id":21320,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       working-storage section.\n       01 nums.\n          05 pic a(5) value \"Zero\".\n          05 pic a(5) value \"One\".\n          05 pic a(5) value \"Two\".\n          05 pic a(5) value \"Three\".\n          05 pic a(5) value \"Four\".\n          05 pic a(5) value \"Five\".\n          05 pic a(5) value \"Six\".\n          05 pic a(5) value \"Seven\".\n          05 pic a(5) value \"Eight\".\n          05 pic a(5) value \"Nine\".\n       01 redefines nums.\n          05 name pic a(5) occurs 10 times.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n           move name(n + 1) to result.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21321,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(24).\n       PROCEDURE DIVISION USING N RESULT.\n           EVALUATE N\n               WHEN 0      MOVE \"Zero\" TO RESULT\n               WHEN 1      MOVE \"One\" TO RESULT \n               WHEN 2      MOVE \"Two\" TO RESULT\n               WHEN 3      MOVE \"Three\" TO RESULT\n               WHEN 4      MOVE \"Four\" TO RESULT\n               WHEN 5      MOVE \"Five\" TO RESULT\n               WHEN 6      MOVE \"Six\" TO RESULT\n               WHEN 7      MOVE \"Seven\" TO RESULT\n               WHEN 8      MOVE \"Eight\" TO RESULT\n               WHEN 9      MOVE \"Nine\" TO RESULT\n               WHEN OTHER  MOVE \"ejini\u6218\u795e rushing COBOL!!!\" TO RESULT\n           END-EVALUATE.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21322,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 NUM-WORD      PIC X(50) VALUE \n         'Zero One  Two  ThreeFour Five Six  SevenEightNine '.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC A(5).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE NUM-WORD(N * 5 + 1:5)  TO RESULT.\n       END PROGRAM SWITCH-IT-UP.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21323,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Evaluate n\n              when 0\n                Move \"Zero\" to result,\n              when 1\n                Move \"One\" to result,\n              when 2\n                Move \"Two\" to result,\n              when 3\n                Move \"Three\" to result,\n              when 4\n                Move \"Four\" to result,\n              when 5\n                Move \"Five\" to result,\n              when 6\n                Move \"Six\" to result,\n              when 7\n                Move \"Seven\" to result,\n              when 8\n                Move \"Eight\" to result,\n              when 9\n                Move \"Nine\" to result,\n              when other\n                Move \"What?\" to result,\n          End-evaluate\n\n          Goback.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21324,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       working-storage section.\n       01 nums.\n          05 num-data.\n\t\t         10 pic a(5) value 'Zero'.\n             10 pic a(5) value 'One'.\n             10 pic a(5) value 'Two'.\n             10 pic a(5) value 'Three'.\n\t\t\t       10 pic a(5) value 'Four'.\n             10 pic a(5) value 'Five'.\n             10 pic a(5) value 'Six'.\n             10 pic a(5) value 'Seven'.\n\t\t\t       10 pic a(5) value 'Eight'.\n\t\t\t       10 pic a(5) value 'Nine'.\n          05 num-name redefines num-data occurs 10 times pic a(5).\n\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n          initialize result\n          move num-name(n + 1) to result\n             \n\n          Goback.\n       END PROGRAM SWITCH-IT-UP.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21325,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          evaluate n\n             when 0 move 'Zero' to result\n             when 1 move 'One' to result\n             when 2 move 'Two' to result\n             when 3 move 'Three' to result\n             when 4 move 'Four' to result\n             when 5 move 'Five' to result\n             when 6 move 'Six' to result\n             when 7 move 'Seven' to result\n             when 8 move 'Eight' to result\n             when 9 move 'Nine' to result\n          end-evaluate\n\n          Goback.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21326,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n       EVALUATE N\n          WHEN 1\n            MOVE \"One\" TO RESULT\n          WHEN 2\n            MOVE \"Two\" TO RESULT\n          WHEN 3\n            MOVE \"Three\" TO RESULT\n          WHEN 4\n            MOVE \"Four\" TO RESULT\n          WHEN 5\n            MOVE \"Five\" TO RESULT\n          WHEN 6\n            MOVE \"Six\" TO RESULT\n          WHEN 7\n            MOVE \"Seven\" TO RESULT\n          WHEN 8\n            MOVE \"Eight\" TO RESULT\n          WHEN 9\n            MOVE \"Nine\" TO RESULT\n          WHEN OTHER\n            MOVE \"Zero\" to RESULT\n          Goback.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21327,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n      \n       EVALUATE N\n        WHEN \"0\"\n          MOVE 'Zero' TO RESULT\n        WHEN \"1\"\n          MOVE 'One' TO RESULT\n        WHEN \"2\"\n          MOVE 'Two' TO RESULT\n        WHEN \"3\"\n          MOVE 'Three' TO RESULT\n        WHEN \"4\"\n          MOVE 'Four' TO RESULT\n        WHEN \"5\"\n          MOVE 'Five' TO RESULT\n        WHEN \"6\"\n          MOVE 'Six' TO RESULT\n        WHEN \"7\"\n          MOVE 'Seven' TO RESULT\n        WHEN \"8\"\n          MOVE 'Eight' TO RESULT\n        WHEN \"9\"\n          MOVE 'Nine' TO RESULT\n        END-EVALUATE\n\n          Goback.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21328,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n           EVALUATE N\n               WHEN 0\n                   MOVE \"Zero\" TO RESULT\n               WHEN 1\n                   MOVE \"One\" TO RESULT\n               WHEN 2\n                   MOVE \"Two\" TO RESULT\n               WHEN 3\n                   MOVE \"Three\" TO RESULT\n               WHEN 4\n                   MOVE \"Four\" TO RESULT\n               WHEN 5\n                   MOVE \"Five\" TO RESULT\n               WHEN 6\n                   MOVE \"Six\" TO RESULT\n               WHEN 7\n                   MOVE \"Seven\" TO RESULT\n               WHEN 8\n                   MOVE \"Eight\" TO RESULT\n               WHEN 9\n                   MOVE \"Nine\" TO RESULT\n           END-EVALUATE.\n           GOBACK.\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21329,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SWITCH-IT-UP.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9.\n       01 RESULT      PIC a(5).\n       PROCEDURE DIVISION USING N RESULT.\n           EVALUATE N\n               WHEN 0\n                   MOVE \"Zero\" TO RESULT\n               WHEN 1\n                   MOVE \"One\" TO RESULT\n               WHEN 2\n                   MOVE \"Two\" TO RESULT\n               WHEN 3\n                   MOVE \"Three\" TO RESULT\n               WHEN 4\n                   MOVE \"Four\" TO RESULT\n               WHEN 5\n                   MOVE \"Five\" TO RESULT\n               WHEN 6\n                   MOVE \"Six\" TO RESULT\n               WHEN 7\n                   MOVE \"Seven\" TO RESULT\n               WHEN 8\n                   MOVE \"Eight\" TO RESULT\n               WHEN 9\n                   MOVE \"Nine\" TO RESULT\n            .\n       END PROGRAM SWITCH-IT-UP.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5809c661f15835266900010a":[{"id":21330,"user_id":421,"body":"       identification division.\n       program-id. double-every-other.\n       author. \"ejini\u6218\u795e\".  \n       data division.\n      \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 0 to 30 times \n                                depending on arr-length indexed i.\n       01 result.\n          05 res-length   pic 9(2).\n          05 res          pic s9(4) occurs 0 to 30 times \n                                depending on res-length.\n      \n       procedure division using arr result. \n           perform varying i from 1 by 1 until i > arr-length               \n               add 1 to res-length\n               if function rem(i, 2) = 0 then\n                   compute res(res-length) = xs(i) * 2\n               else\n                   move xs(i) to res(res-length)               \n               end-if      \n           end-perform.\n       end program double-every-other.\n      \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21331,"user_id":76,"body":"       identification division.\n       program-id. double-every-other.\n       data division.\n       local-storage section.\n       01 i pic 99.\n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 0 to 30 times \n                                depending on arr-length.\n       01 result.\n          05 res-length   pic 9(2).\n          05 res          pic s9(4) occurs 0 to 30 times \n                                depending on res-length.\n      \n       procedure division using arr result.\n         move arr to result\n         perform varying i from 2 by 2 until i > arr-length\n           multiply res(i) by 2 giving res(i)\n         end-perform.\n       end program double-every-other.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21332,"user_id":168,"body":"       identification division.\n       program-id. double-every-other.\n      \n       data division.\n      \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 0 to 30 times \n                                depending on arr-length indexed by i.\n       01 result.\n          05 res-length   pic 9(2).\n          05 res          pic s9(4) occurs 0 to 30 times \n                                depending on res-length.\n      \n       procedure division using arr result.\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              compute res(i) = xs(i) * (2 - function mod(i, 2))\n          end-perform.\n       end program double-every-other.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21333,"user_id":null,"body":"       identification division.\n       program-id. double-every-other.\n      \n       data division.\n      \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 0 to 30 times \n                                depending on arr-length.\n       01 result.\n          05 res-length   pic 9(2).\n          05 res          pic s9(4) occurs 0 to 30 times \n                                depending on res-length\n                                indexed by i.\n      \n       procedure division using arr result.\n          move arr to result.\n          perform varying i from 2 by 2 until i > res-length\n             multiply 2 by res(i)\n          end-perform.\n       end program double-every-other.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21334,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. double-every-other.      \n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01 ARR.\n          05 LEN       PIC  9(2).\n          05 XS        PIC S9(4) OCCURS 0 TO 30 DEPENDING LEN INDEXED I.\n       01 RESULT       PIC  X(122).\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 2 BY 2 UNTIL I > LEN\n               ADD XS(I)  TO XS(I)\n           END-PERFORM\n           MOVE ARR  TO RESULT.\n       END PROGRAM double-every-other.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21335,"user_id":53,"body":"       identification division.\n       program-id. double-every-other.\n       data division.\n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 0 to 30 times \n                                depending on arr-length\n                                indexed by i.\n       01 result.\n          05 res-length   pic 9(2).\n          05 res          pic s9(4) occurs 0 to 30 times \n                                depending on res-length.\n      \n       procedure division using arr result.\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n            move xs(i) to res(i)\n            if function rem(i, 2) = 0\n              add xs(i) to res(i)\n            end-if\n          end-perform\n          goback.\n       end program double-every-other.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21336,"user_id":50,"body":"       identification division.\n       program-id. double-every-other.\n      \n       data division.\n       local-storage section.\n       01 i          pic 99.\n      \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 0 to 30 times \n                                depending on arr-length.\n       01 result.\n          05 res-length   pic 9(2).\n          05 res          pic s9(4) occurs 0 to 30 times \n                                depending on res-length.\n      \n       procedure division using arr result.\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              if function rem(i, 2) = 0\n                  compute res(i) = 2 * xs(i)\n              else\n                  move xs(i) to res(i)\n              end-if\n          end-perform\n      \n          goback.\n       end program double-every-other.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"580b746830f829e46400001e":[{"id":21337,"user_id":53,"body":"       identification division.\n       program-id. OneCharDifference.\n       data division.\n       local-storage section.\n       01 p           pic 9(2).\n       01 q           pic 9(2).\n       01 i           usage index.\n       01 j           usage index.\n       01 k           usage index.\n       01 f           pic 9.\n       linkage section.\n       01 a           pic a(50).\n       01 b           pic a(50).\n       01 result      pic 9.\n       procedure division using a b result.\n          initialize result\n          if function trim(a) = function trim(b) then goback end-if\n          move length of function trim(a) to p\n          move length of function trim(b) to q\n          if function abs(p - q) > 1 then goback end-if\n          set result to 1\n          if p > q then\n            perform varying i from 1 until i > p\n              set f to 1\n              set k to 0\n              perform varying j from 1 until j > p\n                if j = i then add 1 to k end-if\n                if i <> j and a(j:1) <> b(j - k:1) then\n                  set f to 0\n                  exit perform\n                end-if\n              end-perform\n              if f = 1 then goback end-if\n            end-perform\n          end-if\n          if q > p then\n            perform varying i from 1 until i > q\n              set f to 1\n              set k to 0\n              perform varying j from 1 until j > q\n                if j = i then add 1 to k end-if\n                if i <> j and b(j:1) <> a(j - k:1) then\n                  set f to 0\n                  exit perform\n                end-if\n              end-perform\n              if f = 1 then goback end-if\n            end-perform\n          end-if\n          if p = q then\n            perform varying i from 1 until i > q\n              set f to 1\n              perform varying j from 1 until j > q\n                if j <> i and b(j:1) <> a(j:1) then\n                  set f to 0\n                  exit perform\n                end-if\n              end-perform\n              if f = 1 then goback end-if\n            end-perform\n          end-if\n          set result to 0\n          goback.\n       end program OneCharDifference.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21338,"user_id":50,"body":"       identification division.\n       program-id. OneCharDifference.\n      \n       data division.\n       local-storage section.\n       01 l1          pic 9(2).\n       01 l2          pic 9(2).\n       01 l           pic 9(2).\n       01 t           pic a(50).\n       01 n           pic 9.\n       \n          88 flag     value 1.\n       01 i           usage index.\n       01 j           usage index.\n      \n       linkage section.\n       01 s1          pic a(50).\n       01 s2          pic a(50).\n       01 result      pic 9.\n      \n       procedure division using s1 s2 result.\n      \n          initialize result\n      \n          move length function trim(s1 trailing) to l1\n          move length function trim(s2 trailing) to l2\n          \n          if function abs(l1 - l2) > 1 goback end-if\n      \n          evaluate l1\n          when l2    perform checkEq\n          when < l2  perform checkInf\n          when other perform checkSup\n          end-evaluate\n      \n          goback.\n      \n          checkEq.\n            perform varying i from 1 until i > l1\n              if s1(i:1) <> s2(i:1)\n                 if flag goback end-if\n                 add 1 to n\n              end-if\n            end-perform\n            if flag move 1 to result end-if\n            .\n      \n          checkInf.\n            set j to 1\n            perform varying i from 1 until i > l2\n              if s2(i:1) <> s1(j:1)\n                 if flag goback end-if\n                 add 1 to n\n              else\n                 add 1 to j\n              end-if\n            end-perform\n            move 1 to result\n            .\n      \n          checkSup.\n            move l2 to l\n            move l1 to l2\n            move l  to l1\n            move s2 to t\n            move s1 to s2\n            move t  to s1\n            perform checkInf\n            .\n      \n       end program OneCharDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"581214d54624a8232100005f":[{"id":21339,"user_id":53,"body":"       identification division.\n       program-id. matrix.\n       data division.\n       linkage section.\n       01  array.\n           03  len           pic 9(2).\n           03  rows occurs 1 to 10 times depending on len.\n                  07 cell    pic s9(3) occurs 10 times.\n       01  result.\n           03  res-len       pic 9(2).\n           03  rows occurs 1 to 10 times depending on res-len.\n                  07 res     pic s9(3) occurs 10 times indexed by i j.\n       procedure division using array result.\n          move array to result\n          perform varying i from 1 until i > res-len\n                    after j from 1 until j > 10\n            evaluate true\n              when i = j and res(i, j) < 0\n                set res(i, j) to 0\n              when i = j and res(i, j) >= 0\n                set res(i, j) to 1\n            end-evaluate\n          end-perform\n          goback.\n       end program matrix.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21340,"user_id":50,"body":"       identification division.\n       program-id. matrix.\n       data division.\n      \n       linkage section.\n       01  array.\n           03  len           pic 9(2).\n           03  rows occurs 1 to 10 times depending on len.\n                  07 cell    pic s9(3) occurs 10 times.\n       01  result.\n           03  res-len       pic 9(2).\n           03  rows occurs 1 to 10 times depending on res-len.\n                  07 res     pic s9(3) occurs 10 times indexed i j.\n      \n       procedure division using array result.\n      \n           move array to result\n           perform varying i from 1 until i > res-len\n              move function min(1, \n                   function max(0, cell(i, i) + 1))\n                   to res(i, i)\n           end-perform\n\n          goback.\n       end program matrix.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5813d19765d81c592200001a":[{"id":21341,"user_id":168,"body":"       identification division.\n       program-id. DontGiveMeFive.\n      \n       data division.\n       working-storage section.\n       01 i           pic s9(4).\n       01 n           pic 9(3).\n       01 k           pic 9.\n          88 no-fives value 0.\n      \n       linkage section.\n       01 strt        pic s9(3).\n       01 nd          pic s9(3).\n       01 result      pic 9(3).\n      \n       procedure division using strt nd result.\n          move 0 to result\n          perform varying i from strt until i > nd\n              move i to n\n              move 0 to k\n              inspect n tallying k for all '5'\n              if no-fives then add 1 to result end-if\n          end-perform.\n       end program DontGiveMeFive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21342,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DontGiveMeFive.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC S9(2) SIGN LEADING.\n       LINKAGE SECTION.\n       01 STRT        PIC S9(3).\n       01 ND          PIC S9(3).\n       01 RESULT      PIC 9(3).\n\n       PROCEDURE DIVISION USING STRT ND RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING N FROM STRT UNTIL N > ND\n               IF  5 NOT = N(1:1) AND N(2:1)\n                   ADD 1  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM DontGiveMeFive.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21343,"user_id":53,"body":"       identification division.\n       program-id. DontGiveMeFive.\n       data division.\n       local-storage section.\n       01 n           pic s9(3).\n       01 m           pic 9(3).\n       01 r           pic 9.\n       linkage section.\n       01 strt        pic s9(3).\n       01 nd          pic s9(3).\n       01 result      pic 9(3).\n       procedure division using strt nd result.\n      \n          initialize result\n          perform varying n from strt until n > nd\n            move function abs(n) to m\n            perform has5\n            if r = 0 then add 1 to result\n          end-perform\n          goback.\n      \n        has5.\n          initialize r\n          perform until m = 0\n            if function rem(m, 10) = 5 then\n              set r to 1, exit paragraph\n            end-if\n            divide 10 into m\n          end-perform\n          .\n      \n       end program DontGiveMeFive.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21344,"user_id":50,"body":"       identification division.\n       program-id. DontGiveMeFive.\n      \n       data division.\n       local-storage section.\n       01 s           pic x(3).\n       01 r           pic 9.\n       01 n           pic s9(3).\n      \n       linkage section.\n       01 strt        pic s9(3).\n       01 nd          pic s9(3).\n       01 result      pic 9(3).\n      \n       procedure division using strt nd result.\n      \n          initialize result\n          perform varying n from strt until n > nd\n            move n to s\n            move 0 to r\n            inspect s tallying r for all '5'\n            if r = 0 add 1 to result\n          end-perform\n      \n          goback.\n       end program DontGiveMeFive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58184387d14fc32f2b0012b2":[{"id":21345,"user_id":50,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       linkage section.\n       01 x           usage comp-2.\n       01 result      usage comp-2.\n       procedure division using x result.\n      \n          compute result = 1.0 + function sqrt(1.0 + x)\n          compute result = x \/ result\n      \n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21346,"user_id":168,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       linkage section.\n       01 x           usage comp-2.\n       01 result      usage comp-2.\n       procedure division using x result.\n          compute result = x * (0.5 - x * (0.125 - x\n                                   * (0.0625 - x * 0.0390625))).\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21347,"user_id":53,"body":"       identification division.\n       program-id. f.\n       data division.\n       linkage section.\n       01 x           usage comp-2.\n       01 r           usage comp-2.\n       procedure division using x r.\n          compute r = function sqrt(1 + x) + 1\n          compute r = x \/ r\n          goback.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5818c52e21a33314e00000cb":[{"id":21348,"user_id":50,"body":"       identification division.\n       program-id. SortArrays.\n       data division.\n       local-storage section.\n       01  l1.\n           05  a1 occurs 250 times depending on l\n                                     indexed by i.\n               07  n1        pic 9(4).\n               07  i1        usage index.\n       01  l2.\n           05  a2 occurs 250 times depending on l.\n               07  n2        pic 9(4).\n               07  i2        usage index.\n      \n       linkage section.\n       01  arr1.\n           05 l              pic 9(2).\n           05 xs1            pic 9(4) occurs 250 times \n                                      depending on l.\n       01  arr2.\n           05 arr2Length     pic 9(2).\n           05 xs2            pic 9(4) occurs 250 times \n                                      depending on arr2Length.\n       01  result1.\n           05 res1Length     pic 9(2).\n           05 res1           pic 9(4) occurs 250 times \n                                      depending on res1Length.\n       01  result2.\n           05 res2Length     pic 9(2).\n           05 res2           pic 9(4) occurs 250 times \n                                      depending on res2Length.\n      \n       procedure division using arr1 arr2 result1 result2.\n      \n          initialize result1 result2\n          move l to res1Length res2Length\n      \n          perform varying i from 1 until i > l\n              move i to i1(i) i2(i)\n              move xs1(i) to n1(i)\n              move xs2(i) to n2(i)\n          end-perform\n      \n          sort a1 ascending n1 ascending i1\n          sort a2 ascending n2 ascending i2\n      \n          perform varying i from 1 until i > l\n              move xs1(i2(i)) to res1(i)\n              move xs2(i1(i)) to res2(i)\n          end-perform\n      \n          goback.\n       end program SortArrays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21349,"user_id":53,"body":"       identification division.\n       program-id. SortArrays.\n       data division.\n       local-storage section.\n       01  i                 usage index.\n       01  xs.\n           05  a             occurs 250 times depending on len.\n               08  p         pic 9(4).\n               08  j         usage index.\n       01  ys.\n           05  b             occurs 250 times depending on len.\n               08  q         pic 9(4).\n               08  k         usage index.\n       linkage section.\n       01  arr1.\n           05 len            pic 9(2).\n           05 xs1            pic 9(4) occurs 250 times \n                                      depending on len.\n       01  arr2.\n           05 arr2Length     pic 9(2).\n           05 xs2            pic 9(4) occurs 250 times \n                                      depending on arr2Length.\n       01  result1.\n           05 res1Length     pic 9(2).\n           05 res1           pic 9(4) occurs 250 times \n                                      depending on res1Length.\n       01  result2.\n           05 res2Length     pic 9(2).\n           05 res2           pic 9(4) occurs 250 times \n                                      depending on res2Length.\n       procedure division using arr1 arr2 result1 result2.\n      \n          initialize result1 result2\n          move len to res1Length res2Length\n          perform move-a\n          sort a ascending p j\n          sort b ascending q k\n          perform move-b\n          goback.\n      \n        move-a.\n          perform varying i from 1 until i > len\n            move i to j(i) k(i)\n            move xs1(i) to p(i)\n            move xs2(i) to q(i)\n          end-perform\n          .\n      \n        move-b.\n          perform varying i from 1 until i > len\n            move xs1(k(i)) to res1(i)\n            move xs2(j(i)) to res2(i)\n          end-perform\n          .\n      \n       end program SortArrays.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5818d00a559ff57a2f000082":[{"id":21350,"user_id":168,"body":"       identification division.\n       program-id. pell.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(38).\n       01 b           pic 9(38) value 1.\n       linkage section.\n       01 n           pic 9(3).\n       01 result      pic 9(38).\n       procedure division using n result.\n          perform varying n from n by -1 until n = 0\n              compute result = b\n              compute b = 2 * b + a\n              compute a = result\n          end-perform\n          compute result = a.\n       end program pell.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21351,"user_id":76,"body":"       identification division.\n       program-id. pell.\n       data division.\n       local-storage section.\n       01 a           pic 9(38).\n       01 temp        pic 9(38).\n       linkage section.\n       01 n           pic 9(3).\n       01 result      pic 9(38).\n       procedure division using n result.\n         initialize result\n         move 1 to a\n         perform until n = 0\n           compute temp = 2 * a + result\n           move a to result\n           move temp to a\n           subtract 1 from n\n         end-perform.\n       end program pell.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21352,"user_id":53,"body":"       identification division.\n       program-id. pell.\n       data division.\n       local-storage section.\n       01 b           pic 9(38).\n       01 t           pic 9(38).\n       linkage section.\n       01 n           pic 9(3).\n       01 a           pic 9(38).\n       procedure division using n a.\n          move 0 to a\n          move 1 to b\n          perform until n = 0\n            move a to t\n            move b to a\n            compute b = 2 * b + t\n            subtract 1 from n\n          end-perform\n          goback.\n       end program pell.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21353,"user_id":50,"body":"       identification division.\n       program-id. pell.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(38).\n       01 b           pic 9(38) value 1.\n       01 c           pic 9(38).\n      \n       linkage section.\n       01 n           pic 9(3).\n       01 result      pic 9(38).\n       procedure division using n result.\n      \n          perform until n < 2\n              subtract 1 from n\n              move b to c\n              compute b = 2 * b + a\n              move c to a\n          end-perform\n      \n          move b to result\n      \n          goback.\n       end program pell.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58249d08b81f70a2fc0001a4":[{"id":21354,"user_id":50,"body":"       identification division.\n       program-id. ClosestMultiple10.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(7).\n       01 result      pic 9(7).\n      \n       procedure division using n result.\n      \n          compute result rounded = n \/ 10\n          multiply 10 by result.\n      \n       end program ClosestMultiple10.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21355,"user_id":53,"body":"       identification division.\n       program-id. ClosestMultiple10.\n       data division.\n       linkage section.\n       01 n           pic s9(7).\n       01 result      pic s9(7) sign leading.\n       procedure division using n result.\n          compute result rounded = n \/ 10\n          multiply 10 by result\n          goback.\n       end program ClosestMultiple10.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58261acb22be6e2ed800003a":[{"id":21356,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L       PIC 9(3).\n       01 W       PIC 9(3).\n       01 H       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING L H W RESULT.\n           MULTIPLY L BY W GIVING RESULT.\n           MULTIPLY H BY RESULT.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21357,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n        COMPUTE RESULT = length-cube * width-cube * height-cube.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21358,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n      * Write your code here\n       compute RESULT = LENGTH-CUBE * WIDTH-CUBE * HEIGHT-CUBE.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21359,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n       compute result = LENGTH-CUBE * WIDTH-CUBE * HEIGHT-CUBE\n       goback.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21360,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n          MULTIPLY LENGTH-CUBE BY WIDTH-CUBE GIVING RESULT.\n          MULTIPLY RESULT BY HEIGHT-CUBE GIVING RESULT.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21361,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n           multiply LENGTH-CUBE by WIDTH-CUBE giving result\n           multiply result by HEIGHT-CUBE giving result.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21362,"user_id":163,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n          LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n          MOVE 1 TO RESULT \n          MULTIPLY RESULT BY LENGTH-CUBE GIVING RESULT\n          MULTIPLY RESULT BY WIDTH-CUBE GIVING RESULT\n          MULTIPLY RESULT BY HEIGHT-CUBE GIVING RESULT.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21363,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n          COMPUTE RESULT = HEIGHT-CUBE * LENGTH-CUBE * WIDTH-CUBE.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21364,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n           COMPUTE RESULT = LENGTH-CUBE * WIDTH-CUBE * HEIGHT-CUBE\n           .\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21365,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GET-VOLUME-OF-CUBOID.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 LENGTH-CUBE       PIC 9(3).\n       01 WIDTH-CUBE        PIC 9(3).\n       01 HEIGHT-CUBE       PIC 9(3).\n       01 RESULT            PIC 9(8).\n       PROCEDURE DIVISION USING \n                 LENGTH-CUBE WIDTH-CUBE HEIGHT-CUBE RESULT.\n          compute result = length-cube * width-cube * height-cube.\n       END PROGRAM GET-VOLUME-OF-CUBOID.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582746fa14b3892727000c4f":[{"id":21366,"user_id":421,"body":"       identification division.\n       program-id. CountDevelopers.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers      occurs 1 to 106 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.      \n           initialize result\n           perform varying i from 1 by 1 until i > ListLength\n               if Continent of Developers(i) = \"Europe\" and\n                  Language of Developers(i) = \"JavaScript\" then\n                   add 1 to result\n               end-if\n           end-perform.\n       end program CountDevelopers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21367,"user_id":168,"body":"       identification division.\n       program-id. CountDevelopers.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers     occurs 1 to 106 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.\n           move 0 to result\n           perform varying i from 1 until i > listlength\n               if continent(i) = 'Europe' and language(i) = 'JavaScript'\n                    add 1 to result\n               end-if\n           end-perform.\n       end program CountDevelopers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21368,"user_id":50,"body":"       identification division.\n       program-id. CountDevelopers.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers     occurs 1 to 106 times\n                              depending on ListLength\n                              indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > ListLength\n              if language of Developers(i) = 'JavaScript'\n              and continent of Developers(i) = 'Europe'\n                  add 1 to result\n              end-if\n           end-perform\n      \n           goback.\n       end program CountDevelopers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21369,"user_id":53,"body":"       identification division.\n       program-id. CountDevelopers.\n       data division.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developpers     occurs 1 to 106 times\n                              depending on ListLength\n                              indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n       procedure division using List result.\n           set result to 0\n           perform varying i from 1 until i > ListLength\n              if continent of Developpers(i) = 'Europe'\n              and language of Developpers(i) = 'JavaScript'\n                  add 1 to result\n              end-if\n           end-perform\n           goback.\n       end program CountDevelopers.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58279e13c983ca4a2a00002a":[{"id":21370,"user_id":168,"body":"       identification division.\n       program-id. GreetDevelopers.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers     occurs 1 to 107 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05 ResLength       pic 9(3).\n           05 Devs            occurs 1 to 107 times\n                              depending on ResLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 Greeting     pic x(55).\n      \n       procedure division using List result.\n           move listlength to reslength\n           perform varying i from 1 until i > listlength\n               move corresponding developers(i) to devs(i)\n               initialize greeting(i)\n               string 'Hi ' function trim(firstname of developers(i))\n                      ', what do you like the most about '\n                      function trim(language of developers(i)) '?'\n                 into greeting(i)\n           end-perform.\n       end program GreetDevelopers.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21371,"user_id":50,"body":"       identification division.\n       program-id. GreetDevelopers.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers     occurs 1 to 107 times\n                              depending on ListLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05 l               pic 9(3).\n           05 dev             occurs 1 to 107 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 Greeting     pic x(55).\n      \n       procedure division using List result.\n      \n           initialize result\n           move ListLength to l\n           perform varying i from 1 until i > l\n              move Developers(i) to dev(i)\n              string 'Hi ' function trim(FirstName of dev(i))\n                     ', what do you like the most about '\n                     function trim(Language of dev(i)) '?'\n              into Greeting of dev(i)\n           end-perform\n      \n           goback.\n       end program GreetDevelopers.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21372,"user_id":53,"body":"       identification division.\n       program-id. GreetDevelopers.\n       data division.\n       local-storage section.\n       01  i                  usage index.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 A               occurs 1 to 107 times\n                              depending on ListLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05 ResLength       pic 9(3).\n           05 B               occurs 1 to 107 times\n                              depending on ResLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 Greeting     pic x(55).\n       procedure division using List result.\n           initialize result\n           move ListLength to ResLength\n           perform varying i from 1 until i > ResLength\n              move A(i) to B(i)\n              string 'Hi '\n                     function trim(FirstName of B(i))\n                     ', what do you like the most about '\n                     function trim(Language of B(i))\n                     '?'\n              into Greeting of B(i)\n           end-perform\n           goback.\n       end program GreetDevelopers.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5827acd5f524dd029d0005a4":[{"id":21373,"user_id":421,"body":"       identification division.\n       program-id. IsRubyComing.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers      occurs 0 to 7 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.      \n           initialize result\n           perform varying i from 1 by 1 until i > ListLength\n               if Language of Developers(i) = \"Ruby\" then\n                   set result to 1\n                   goback\n               end-if\n           end-perform.\n       end program IsRubyComing.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21374,"user_id":168,"body":"       identification division.\n       program-id. IsRubyComing.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers     occurs 0 to 7 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n           88 ruby value 1 when set to false 0.\n      \n       procedure division using List result.\n           set ruby to false\n           perform varying i from 1 until i > ListLength\n               if language(i) = 'Ruby'\n                   set ruby to true\n                   goback\n               end-if\n           end-perform.\n       end program IsRubyComing.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21375,"user_id":53,"body":"       identification division.\n       program-id. IsRubyComing.\n       data division.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers      occurs 0 to 7 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n       procedure division using List result.\n          initialize result\n          perform varying i from 1 until i > ListLength\n            if Language of Developers(i) = 'Ruby' then\n              move 1 to result goback\n              exit perform\n            end-if\n          end-perform\n          goback.\n       end program IsRubyComing.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21376,"user_id":50,"body":"       identification division.\n       program-id. IsRubyComing.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9.\n           05 Developers     occurs 0 to 7 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              if Language of Developers(i) = 'Ruby'\n                 move 1 to result, goback\n              end-if\n           end-perform\n      \n           goback.\n       end program IsRubyComing.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5827bc50f524dd029d0005f2":[{"id":21377,"user_id":168,"body":"       identification division.\n       program-id. GetFirstPython.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 25 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length    pic 9(2).\n           05  res.\n           10  res-char      pic x\n               occurs 0 to 50 times depending on res-length.\n      \n       procedure division using List result.\n           move 50 to res-length\n           initialize res\n           move 1 to i\n           search Developers varying i\n              at end \n                  move 'There will be no Python developers' to res\n              when language(i) = 'Python'\n                  string firstname(i) delimited by space\n                         ', ' country(i) delimited by size\n                    into res\n           end-search\n           move 0 to i\n           inspect res tallying i for trailing spaces\n           compute res-length = 50 - i\n           goback.\n       end program GetFirstPython.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21378,"user_id":53,"body":"       identification division.\n       program-id. GetFirstPython.\n       data division.\n       local-storage section.\n       01  str                pic x(50).\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 A               occurs 0 to 25 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length    pic 9(2).\n           05  xs pic x occurs 0 to 50 times depending on res-length.\n       procedure division using List result.\n          initialize result\n          move 50 to res-length\n          perform varying i from 1 until i > ListLength\n            if Language of A(i) = 'Python'\n              string function trim(FirstName of A(i))\n                   ', ' Country of A(i)\n              into str\n              move function trim(str) to result(3:)\n              move length of function trim(result(3:)) to res-length\n              goback\n            end-if\n          end-perform\n          string 'There will be no Python developers' into result(3:)\n          move length of function trim(result(3:)) to res-length\n          goback.\n       end program GetFirstPython.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21379,"user_id":53,"body":"       identification division.\n       program-id. GetFirstPython.\n       data division.\n       local-storage section.\n       01  str                pic x(50).\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 A               occurs 0 to 25 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length    pic 9(2).\n           05  xs.\n               10 pic x occurs 0 to 50 times depending on res-length.\n       procedure division using List result.\n          initialize result\n          move 50 to res-length\n          perform varying i from 1 until i > ListLength\n            if Language of A(i) = 'Python'\n              string function trim(FirstName of A(i))\n                   ', ' Country of A(i)\n              into str\n              move function trim(str) to xs\n              move length of function trim(xs) to res-length\n              goback\n            end-if\n          end-perform\n          string 'There will be no Python developers' into xs\n          move length of function trim(xs) to res-length\n          goback.\n       end program GetFirstPython.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21380,"user_id":50,"body":"       identification division.\n       program-id. GetFirstPython.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 25 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length    pic 9(2).\n           05  s.\n               07 pic x occurs 0 to 50 times depending on res-length.\n      \n       procedure division using List result.\n      \n           initialize result\n           move 50 to res-length\n      * `initialize result` doesn't clean old charactes in 's' \n           move '                                                  '\n           to s\n           perform varying i from 1 until i > l\n              if Language of Developers(i) = 'Python'\n                 string function trim(FirstName of Developers(i))\n                     ', ' Country of Developers(i)\n                into s\n                exit perform\n              end-if\n           end-perform\n          \n           if i > l\n            string 'There will be no Python developers'\n            into s\n           end-if\n      \n           move length of function trim(s) to res-length\n      \n           goback.\n       end program GetFirstPython.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5828713ed04efde70e000346":[{"id":21381,"user_id":168,"body":"       identification division.\n       program-id. CountLanguages.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength       pic 9(3).\n           05 Developers      occurs 0 to 107 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length    pic 9.\n           05  pairs occurs 0 to 9 times depending on res-length \n                                   indexed j.\n               07 Lang     pic a(10).\n               07 Cnt      pic 9(3).\n      \n       procedure division using List result.\n           move 0 to res-length\n           perform varying i from 1 until i > ListLength\n               move 1 to j\n               search pairs varying j\n                   at end \n                       add 1 to res-length\n                       move language(i) to lang(res-length)\n                       move 1 to cnt(res-length)\n                   when lang(j) = language(i)\n                       add 1 to cnt(j)\n               end-search\n           end-perform.\n       end program CountLanguages.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21382,"user_id":421,"body":"       identification division.\n       program-id. CountLanguages.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01 matchFound          pic 9.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers      occurs 0 to 107 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length    pic 9.\n           05  pairs occurs 0 to 9 times depending on res-length\n                                         indexed by j.\n               07 Language pic a(10).\n               07 Cnt      pic 9(3).\n      \n       procedure division using List result. \n           if ListLength = 0 then\n               set res-length to 0\n               goback\n           end-if                    \n           move 1 to res-length\n           move Language of Developers(1) to Language of pairs(1)\n           move 1 to Cnt of pairs(1)           \n           perform varying i from 2 by 1 until i > ListLength\n               set matchFound to 0\n               perform varying j from 1 by 1 until j > res-length\n                   if Language of pairs(j) = Language of Developers(i)\n                       add 1 to Cnt of pairs(j)\n                       move 1 to matchFound\n                       exit perform\n                   end-if                   \n               end-perform\n               if matchFound = 0 then\n                   add 1 to res-length\n                   move Language of Developers(i) to \n                        Language of pairs(res-length)\n                   move 1 to Cnt of pairs(res-length)    \n               end-if\n           end-perform.   \n       end program CountLanguages.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21383,"user_id":50,"body":"       identification division.\n       program-id. CountLanguages.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(3).\n           05 Developers      occurs 0 to 107 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  r             pic 9.\n           05  pairs occurs 0 to 9 times depending on r\n                                              indexed j.\n               07 Language pic a(10).\n               07 cnt      pic 9(3).\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              perform varying j from 1 until j > r\n                if Language of pairs(j) = Language of Developers(i)\n                   add 1 to cnt of pairs(j)\n                   exit perform\n                end-if\n              end-perform\n              if j > r\n                  add 1 to r\n                  move Language of Developers(i) to \n                       Language of pairs(r)\n                  move 1 to cnt of pairs(r)\n              end-if\n           end-perform\n      \n           goback.\n       end program CountLanguages.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21384,"user_id":53,"body":"       identification division.\n       program-id. CountLanguages.\n       data division.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 D               occurs 0 to 107 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  res-length     pic 9.\n           05  P              occurs 0 to 9 times \n                              depending on res-length\n                              indexed by j.\n               07 K           pic a(10).\n               07 V           pic 9(3).\n       procedure division using List result.\n          initialize result\n          perform varying i from 1 until i > ListLength\n            perform varying j from 1 until j > res-length\n              if Language of D(i) = K of P(j) then\n                add 1 to V of P(j)\n                exit perform\n              end-if\n            end-perform\n            if j > res-length\n              add 1 to res-length\n              move Language of D(i) to K of P(res-length)\n              move 1 to V of P(res-length)\n            end-if\n          end-perform\n          goback.\n       end program CountLanguages.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58287977ef8d4451f90001a0":[{"id":21385,"user_id":421,"body":"       identification division.\n       program-id. IsSameLanguage.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01 temp                pic a(10).\n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers      occurs 2 to 5 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n           88 sama value 1 when set to false 0.\n      \n       procedure division using List result.    \n           set sama to true\n           move Language of Developers(1) to temp\n           perform varying i from 2 by 1 until i > ListLength\n               if Language of Developers(i) <> temp\n                   set sama to false\n                   goback\n               end-if\n           end-perform.\n       end program IsSameLanguage.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21386,"user_id":168,"body":"       identification division.\n       program-id. IsSameLanguage.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers      occurs 2 to 5 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n           move 1 to result\n           move 2 to i\n           search developers varying i\n              when language(i) <> language(1)\n                  move 0 to result\n           end-search.\n       end program IsSameLanguage.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21387,"user_id":53,"body":"       identification division.\n       program-id. IsSameLanguage.\n       data division.\n       local-storage section.\n       01  O_o                pic a(10).\n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers      occurs 2 to 5 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n       procedure division using List result.\n          move 1 to result\n          move Language(1) to O_o\n          perform varying i from 2 until i > ListLength\n            if Language(i) <> O_o then\n              move 0 to result\n              exit perform\n            end-if\n          end-perform\n          goback.\n       end program IsSameLanguage.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21388,"user_id":50,"body":"       identification division.\n       program-id. IsSameLanguage.\n       data division.\n       local-storage section.\n       01 l1 pic x(10).\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9.\n           05 Developers      occurs 2 to 5 times\n                              depending on ListLength\n                              indexed j.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n      \n           move Language(1) to l1\n           set j to 2\n           search Developers varying j\n               at end \n                   move 1 to result\n               when Language(j) <> l1\n                   move 0 to result\n           end-search\n      \n           goback.\n       end program IsSameLanguage.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582887f7d04efdaae3000090":[{"id":21389,"user_id":53,"body":"       identification division.\n       program-id. FindSenior.\n       data division.\n       local-storage section.\n       01 m                   pic 9(3) value 0.\n       linkage section.\n       01  List.\n           05 L               pic 9(2).\n           05 D               occurs 1 to 99 times\n                              depending on L\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 A            pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  N              pic 9(2).\n           05  E              occurs 0 to 99 times\n                              depending on N.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       procedure division using List result.\n          initialize result\n          perform varying i from 1 until i > L\n            if A(i) >= m then\n              if A(i) > m then\n                move A(i) to m\n                set N to 1\n              else\n                add 1 to N\n              end-if\n              move D(I) to E(N)\n            end-if\n          end-perform\n          display N\n          goback.\n       end program FindSenior.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21390,"user_id":168,"body":"       identification division.\n       program-id. FindSenior.\n       data division.\n       local-storage section.\n       01  max    pic 9(3).\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 1 to 99 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  ResLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ResLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n      \n       procedure division using List result.\n           perform varying i from 1 until i > listlength\n               move function max(age of list(i), max) to max\n           end-perform\n           move 0 to reslength\n           perform varying i from 1 until i > listlength\n               if age of list(i) = max\n                   add 1 to reslength\n                   move developers of list(i) \n                     to developers of result(reslength)\n               end-if\n           end-perform.\n       end program FindSenior.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21391,"user_id":50,"body":"       identification division.\n       program-id. FindSenior.\n       data division.\n       local-storage section.\n       01 MaxAge             pic 9(3).\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 1 to 99 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  r             pic 9(2).\n           05  d pic x(56) occurs 0 to 99 times depending on r\n                                              indexed j.\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              move function max(MaxAge, Age(i)) to MaxAge\n           end-perform\n      \n          perform varying i from 1 until i > l\n              if Age(i) = MaxAge\n                 add 1 to r\n                 move Developers(i) to d(r)\n              end-if\n          end-perform\n      \n           goback.\n       end program FindSenior.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58291fea7ff3f640980000f9":[{"id":21392,"user_id":50,"body":"       identification division.\n       program-id. AllContinents.\n       data division.\n       local-storage section.\n       01 tbl.\n          03 Asia      pic 9.\n          03 Africa    pic 9.\n          03 Americas  pic 9.\n          03 Europe    pic 9.\n          03 Oceania   pic 9.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 50 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n      \n           initialize result\n      \n           if l < 5 goback end-if\n      \n           perform varying i from 1 until i > l\n            evaluate Continent of Developers(i)\n            when 'Africa'\n                  compute Africa = function min(Africa + 1, 1)\n            when 'Asia'\n                  compute Asia   = function min(Africa + 1, 1)\n            when 'Oceania'\n                  compute Oceania = function min(Africa + 1, 1)\n            when 'Americas' \n                  compute Americas = function min(Americas + 1, 1)\n            when other\n                  compute Europe = function min(Europe + 1, 1)\n            end-evaluate\n            if tbl = 11111 move 1 to result goback end-if\n           end-perform\n      \n           goback.\n       end program AllContinents.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21393,"user_id":168,"body":"       identification division.\n       program-id. AllContinents.\n       data division.\n       local-storage section.\n       01  n            pic 9.\n       01  continents.\n           05 name  pic a(8) occurs 0 to 5 times \n                             depending on n indexed j.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 50 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n           move 0 to result\n           perform varying i from 1 until i > listlength\n               move 1 to j\n               search name varying j\n                   at end \n                      add 1 to n\n                      if n = 5 then move 1 to result; goback end-if\n                      move continent(i) to name(n)\n                   when name(j) = continent(i) continue\n               end-search\n           end-perform.\n       end program AllContinents.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21394,"user_id":50,"body":"       identification division.\n       program-id. AllContinents.\n       data division.\n       local-storage section.\n       01 tbl.\n          03 Asia      pic 9.\n          03 Africa    pic 9.\n          03 Americas  pic 9.\n          03 Europe    pic 9.\n          03 Oceania   pic 9.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 50 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n      \n           initialize result\n      \n           if l < 5 goback end-if\n      \n           perform varying i from 1 until i > l\n            evaluate Continent of Developers(i)\n            when 'Africa'    move 1 to Africa\n            when 'Asia'      move 1 to Asia\n            when 'Oceania'   move 1 to Oceania\n            when 'Americas'  move 1 to Americas\n            when other       move 1 to Europe\n            end-evaluate\n            if tbl = 11111 move 1 to result goback end-if\n           end-perform\n      \n           goback.\n       end program AllContinents.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21395,"user_id":53,"body":"       identification division.\n       program-id. AllContinents.\n       data division.\n       local-storage section.\n       01 Asia                pic 99 value 0.\n       01 Africa              pic 99 value 0.\n       01 Americas            pic 99 value 0.\n       01 Europe              pic 99 value 0.\n       01 Oceania             pic 99 value 0.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 D               occurs 0 to 50 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n       procedure division using List result.\n          move 1 to result\n          perform varying i from 1 until i > ListLength\n            evaluate Continent of D(i)\n              when 'Africa'   add 1 to Africa\n              when 'Asia'     add 1 to Asia\n              when 'Americas' add 1 to Americas\n              when 'Oceania'  add 1 to Oceania\n              when 'Europe'   add 1 to Europe\n            end-evaluate\n          end-perform\n          if Asia = 0 then move 0 to result, goback end-if\n          if Africa = 0 then move 0 to result, goback end-if\n          if Americas = 0 then move 0 to result, goback end-if\n          if Oceania = 0 then move 0 to result, goback end-if\n          if Europe = 0 then move 0 to result, goback end-if\n          goback.\n       end program AllContinents.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582957651c1f59b99b0000aa":[{"id":21396,"user_id":168,"body":"       identification division.\n       program-id. find-4-numbers.\n      \n       data division.\n       \n       linkage section.\n       01 n          pic 9(8).\n       01 arr.\n          05 a       pic 9(8).\n          05 b       pic 9(8).\n          05 c       pic 9(8).\n          05 d       pic 9(8).\n      \n       procedure division using n arr.\n           perform varying a from function sqrt(n) by -1 until a = 0\n             after b from function sqrt(n - a * a) by -1 until b = 0\n             after c from function sqrt(n - a * a - b * b) by -1 \n                                                         until c = 0\n               compute d = function sqrt(n - a * a - b * b - c * c) \n               if d > 0 and a * a + b * b + c * c + d * d = n\n                   goback\n               end-if\n           end-perform.\n       end program find-4-numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21397,"user_id":53,"body":"       identification division.\n       program-id. find-4-numbers.\n       data division.\n       local-storage section.\n       01 a          pic 9(8).\n       01 b          pic 9(8).\n       01 c          pic 9(8).\n       01 d          pic 9(8).\n       01 x          pic 9(8).\n       01 y          pic 9(8).\n       linkage section.\n       01 n          pic 9(8).\n       01 arr.\n          05 xs  pic 9(8) occurs 4 times.\n       procedure division using n arr.\n          move n to x\n          perform isqrt\n          perform varying a from y by -1 until a = 0\n            compute x = n - a * a\n            perform isqrt\n            perform varying b from y by -1 until b = 0\n              compute x = n - a * a - b * b\n              perform isqrt\n              perform varying c from y by -1 until c = 0\n                compute x = n - a * a - b * b - c * c\n                perform isqrt\n                move y to d\n                if d > 0 and d <= c then\n                  compute x = n - a * a - b * b - c * c - d * d\n                  if x = 0 then\n                    move a to xs(1)\n                    move b to xs(2)\n                    move c to xs(3)\n                    move d to xs(4)\n                    goback\n                  end-if\n                end-if\n              end-perform\n            end-perform\n          end-perform\n          goback.\n      \n       isqrt.\n          compute y = function integer(function sqrt(x))\n          .\n      \n       end program find-4-numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21398,"user_id":50,"body":"       identification division.\n       program-id. find-4-numbers.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 c           pic 9(8).\n       01 d           pic 9(8).\n       01 w           pic 9(8).\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 xs          pic 9(8).\n       01 bs          pic 9(8).\n       01 cs          pic 9(8).\n       \n       linkage section.\n       01 n          pic 9(8).\n       01 arr.\n          05 result  pic 9(8) occurs 4 times.\n      \n       procedure division using n arr.\n      \n      * Adapted from monadius's solution in JavaScript\n      * See https:\/\/www.codewars.com\/kata\/reviews\/58296134670e5e031600001b\/groups\/5f21083c30b243000105e8ac\n      \n          compute xs = function integer(function sqrt(n))\n          if n = xs ** 2 then subtract 1 from xs end-if\n          perform varying a from xs by -1 until a = 0\n              compute w = a * a\n              compute bs = function integer(function sqrt(n - a * a))\n              if n - a * a = bs ** 2 then subtract 1 from bs end-if\n              perform varying b from bs by -1 until b = 0\n                  compute x = b * b\n                  compute cs = function integer\n                              (function sqrt(n - w - x))\n                  if n - a * a - b * b = cs ** 2\n                      subtract 1 from cs\n                  end-if\n                  perform varying c from cs by -1 until c = 0\n                      compute y = n - w - x - c * c\n                      if y = function integer(function sqrt(y)) ** 2\n                            move a to result(1)\n                            move b to result(2)\n                            move c to result(3)\n                            compute result(4) = function integer\n                                                (function sqrt(y))\n                            goback\n                      end-if\n                  end-perform \n              end-perform\n          end-perform \n          goback.\n       end program find-4-numbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58298e19c983caf4ba000c8d":[{"id":21399,"user_id":76,"body":"       identification division.\n       program-id. MinUmbrellas.\n      \n       data division.\n       local-storage section.\n       01  atHome      pic 9(3).\n       01  atWork      pic 9(3).\n       linkage section.\n       01  weather.\n           03  len     pic 9(3).\n           03  w       pic a(13) occurs 100 times depending on len\n                                                  indexed by i.\n       01  result      pic 9(3).\n      \n       procedure division using weather result.\n         move 0 to atHome\n         move 0 to atWork\n         perform varying i from 1 by 1 until i > len\n           if w(i) = \"rainy\" or w(i) = \"thunderstorms\" then\n             if function mod(i, 2) = 0 then\n               if atHome > 0 then subtract 1 from atHome end-if\n               add 1 to atWork\n             else\n               if atWork > 0 then subtract 1 from atWork end-if\n               add 1 to atHome\n             end-if\n           end-if\n         end-perform\n         compute result = atHome + atWork\n         goback.\n       end program MinUmbrellas.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21400,"user_id":53,"body":"       identification division.\n       program-id. MinUmbrellas.\n       data division.\n       local-storage section.\n       01  a           pic 9(3).\n       01  b           pic 9(3).\n       linkage section.\n       01  weather.\n           03  len     pic 9(3).\n           03  w       pic a(13) occurs 100 depending len\n                                            indexed i.\n       01  result      pic 9(3).\n       procedure division using weather result.\n          initialize result\n          perform varying i from 1 until i > len\n            if w(i) = 'rainy' or 'thunderstorms'\n              if function rem(i, 2) = 0 then\n                if b > 0 then subtract 1 from b end-if\n                add 1 to a\n              else\n                if a > 0 then subtract 1 from a end-if\n                add 1 to b\n              end-if\n            end-if\n          end-perform\n          add b to a giving result\n          goback.\n       end program MinUmbrellas.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21401,"user_id":50,"body":"      * Implementation of 's JavaScript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/582ef7f9f15816b29800009e\/groups\/5b60dfdd8c1ec4d475000e9b\n       identification division.\n       program-id. MinUmbrellas.\n      \n       data division.\n       local-storage section.\n       01  home        pic 9(3).\n       01  office      pic 9(3).\n      \n       linkage section.\n       01  weather.\n           03  len     pic 9(3).\n           03  w       pic a(13) occurs 100 depending len\n                                            indexed i.\n       01  result      pic 9(3).\n      \n       procedure division using weather result.\n      \n          initialize result\n      \n          perform varying i from 1 until i > len\n            if w(i) = 'rainy' or 'thunderstorms'\n                if function rem(i, 2) = 0\n                    if office is positive\n                       subtract 1 from office\n                    end-if\n                    add 1 to home\n                else\n                    if home is positive\n                       subtract 1 from home\n                    end-if\n                    add 1 to office\n                end-if\n            end-if\n          end-perform\n      \n          compute result = office + home\n      \n          goback.\n       end program MinUmbrellas.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5829ca646d02cd1a65000284":[{"id":21402,"user_id":50,"body":"       identification division.\n       program-id. IsAgeDiverse.\n       data division.\n       local-storage section.\n       01 tbl.\n          03 num pic 9 occurs 10 times indexed k.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 80 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n      \n           initialize result\n      \n           if l < 10 goback end-if\n      \n           perform varying i from 1 until i > l\n            move 1 to num(function min(10, \n                          function max(1,\n                          Age of Developers(i) \/ 10)))\n            if tbl = 1111111111 move 1 to result goback end-if\n           end-perform\n      \n           goback.\n       end program IsAgeDiverse.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21403,"user_id":168,"body":"       identification division.\n       program-id. IsAgeDiverse.\n       data division.\n       local-storage section.\n       01  ages     pic 9(10).\n       01  j        usage index.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 80 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n           perform varying i from 1 until i > listlength\n               evaluate age(i)\n                   when < 20   move 1 to j\n                   when >= 100 move 10 to j\n                   when other  compute j = age(i) \/ 10\n               end-evaluate\n               move 1 to ages(j:1)\n           end-perform\n           if ages = 1111111111\n               move 1 to result\n           else\n               move 0 to result\n           end-if.\n       end program IsAgeDiverse.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21404,"user_id":53,"body":"       identification division.\n       program-id. IsAgeDiverse.\n       data division.\n       local-storage section.\n       01  a1                 pic 9(3) value 0.\n       01  a2                 pic 9(3) value 0.\n       01  a3                 pic 9(3) value 0.\n       01  a4                 pic 9(3) value 0.\n       01  a5                 pic 9(3) value 0.\n       01  a6                 pic 9(3) value 0.\n       01  a7                 pic 9(3) value 0.\n       01  a8                 pic 9(3) value 0.\n       01  a9                 pic 9(3) value 0.\n       01  a0                 pic 9(3) value 0.\n       01  a                  pic 9(3) value 0.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 80 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n       procedure division using List result.\n          set result to 1\n          perform varying i from 1 until i > ListLength\n            move age(i) to a\n            display a\n            evaluate true\n              when a >= 10 and a < 20  add 1 to a1\n              when a >= 20 and a < 30  add 1 to a2\n              when a >= 30 and a < 40  add 1 to a3\n              when a >= 40 and a < 50  add 1 to a4\n              when a >= 50 and a < 60  add 1 to a5\n              when a >= 60 and a < 70  add 1 to a6\n              when a >= 70 and a < 80  add 1 to a7\n              when a >= 80 and a < 90  add 1 to a8\n              when a >= 90 and a < 100 add 1 to a9\n              when a >= 100            add 1 to a0\n            end-evaluate\n          end-perform\n          if a0 = 0 then move 0 to result, goback end-if\n          if a1 = 0 then move 0 to result, goback end-if\n          if a2 = 0 then move 0 to result, goback end-if\n          if a3 = 0 then move 0 to result, goback end-if\n          if a4 = 0 then move 0 to result, goback end-if\n          if a5 = 0 then move 0 to result, goback end-if\n          if a6 = 0 then move 0 to result, goback end-if\n          if a7 = 0 then move 0 to result, goback end-if\n          if a8 = 0 then move 0 to result, goback end-if\n          if a9 = 0 then move 0 to result, goback end-if\n          goback.\n       end program IsAgeDiverse.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582a53ed261c2af9d200018c":[{"id":21405,"user_id":50,"body":"       identification division.\n       program-id. AddUserName.\n       data division.\n       local-storage section.\n       01  y  pic 9(4).\n       01  cy pic x(4).\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  r              pic 9(2).\n           05  d occurs 0 to 99 times depending on r.\n               07 filler pic x(56).\n               07 u pic x(14).\n      \n       procedure division using List result.\n      \n           initialize result\n           move l to r\n           move function current-date(1:4) to y\n           \n           perform varying i from 1 until i > l\n              move Developers(i) to d(i)\n              move function abs(y - Age(i)) to cy\n              string function lower-case(function trim(FirstName(i)))\n                     function lower-case(LastName(i)(1:1))\n                     cy\n              into u(i)\n           end-perform\n\n           goback.\n       end program AddUserName.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21406,"user_id":53,"body":"       identification division.\n       program-id. AddUserName.\n       data division.\n       local-storage section.\n       01  yyyy  pic 9(4).\n       01  y     pic x(4).\n       01  i     usage index.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  ResLength      pic 9(2).\n           05  Developers2    occurs 0 to 99 times\n                              depending on ResLength.\n              07 FirstName2   pic a(9).\n              07 LastName2    pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age2         pic 9(3).\n              07 Language     pic a(10).\n              07 UserName     pic x(14).\n       procedure division using List result.\n          initialize result\n          move ListLength to ResLength\n          move function current-date(1:4) to yyyy\n          perform varying i from 1 until i > ResLength\n            move Developers(i) to Developers2(i)\n            move function abs(yyyy - Age(i)) to y\n            string function lower-case(function trim(FirstName(i)))\n                   function lower-case(LastName(i)(1:1))\n                   y\n            into UserName(i)\n           end-perform\n          goback.\n       end program AddUserName.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582ba36cc1901399a70005fc":[{"id":21407,"user_id":421,"body":"       identification division.\n       program-id. GetAverageAge.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  temp               pic 9(6).\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developpers     occurs 1 to 100 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(22).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.\n           perform varying i from 1 by 1 until i > ListLength\n               add Age(i) to temp\n           end-perform\n           compute result rounded = temp \/ (i - 1).\n       end program GetAverageAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21408,"user_id":50,"body":"       identification division.\n       program-id. GetAverageAge.\n       data division.\n       local-storage section.\n       01  AgeSum            pic 9(5).\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers     occurs 1 to 100 times\n                              depending on ListLength\n                              indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(22).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > ListLength\n              add Age of Developers(i) to AgeSum\n           end-perform\n      \n           compute result rounded =  AgeSum \/ ListLength\n      \n           goback.\n       end program GetAverageAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21409,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GetAverageAge.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  AGES               PIC 9(4).\n       LINKAGE SECTION.\n       01  LIST.\n           05 LISTLENGTH      PIC 9(3).\n           05 DEVELOPPERS     OCCURS 100 DEPENDING LISTLENGTH INDEXED I.\n              07 FIRSTNAME    PIC A(9).\n              07 LASTNAME     PIC X(2).\n              07 COUNTRY      PIC A(22).\n              07 CONTINENT    PIC A(8).\n              07 AGE          PIC 9(3).\n              07 LANGUAGE     PIC A(10).\n       01  RESULT             PIC 9(3).\n\n       PROCEDURE DIVISION USING LIST RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > LISTLENGTH\n               ADD AGE(I)  TO AGES\n           END-PERFORM\n           COMPUTE RESULT ROUNDED = AGES \/ LISTLENGTH.\n       END PROGRAM GetAverageAge.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21410,"user_id":168,"body":"       identification division.\n       program-id. GetAverageAge.\n       data division.\n       local-storage section.\n       01  s    pic 9(8).\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers      occurs 1 to 100 times\n                                depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(22).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.\n           perform varying i from 1 until i > ListLength\n              display Age(i)\n              add Age(i) to s\n           end-perform\n           compute result rounded = s \/ ListLength\n           goback.\n       end program GetAverageAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21411,"user_id":168,"body":"       identification division.\n       program-id. GetAverageAge.\n       data division.\n       local-storage section.\n       01  s    pic 9(8)v9.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developers      occurs 1 to 100 times\n                                depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(22).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n      \n       procedure division using List result.\n           perform varying i from 1 until i > ListLength\n              add Age(i) to s\n           end-perform\n           compute s = s \/ ListLength\n           compute result = s\n           if s - result > 0.5 add 1 to result end-if\n           goback.\n       end program GetAverageAge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21412,"user_id":53,"body":"       identification division.\n       program-id. GetAverageAge.\n       data division.\n       local-storage section.\n       01  s                  pic 9(5).\n       01  t                  pic 9(3)v9.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(3).\n           05 Developpers     occurs 1 to 100 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(22).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9(3).\n       procedure division using List result.\n           initialize result\n           move 0 to s\n           perform varying i from 1 until i > ListLength\n              add Age of Developpers(i) to s\n           end-perform\n           divide ListLength into s giving t\n           if function rem(t, 1) <= 0.5 then move t to result\n           else add 1 to t giving result end-if\n           goback.\n       end program GetAverageAge.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582c297e56373f0426000098":[{"id":21413,"user_id":168,"body":"       identification division.\n       program-id. stringify.\n\n       data division.\n       working-storage section.\n       01  n          pic z(3)9.\n       01  i          usage index.\n\n       linkage section.\n       01  node.\n           05 val     pic 9(4).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  result     pic x(200).\n\n       procedure division using ptr result.\n           initialize result\n           move 1 to i\n           perform until ptr = null\n               set address of node to ptr\n               move val to n\n               move nxt to ptr\n               string function trim(n) ' -> ' into result with pointer i\n           end-perform\n           string 'NULL' into result with pointer i\n           goback.\n       end program stringify.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21414,"user_id":50,"body":"       identification division.\n       program-id. stringify.\n\n       data division.\n       local-storage section.\n       01  i          usage index value 1.\n       01  n          pic z(3)9.\n      \n       linkage section.\n       01  node.\n           05 val     pic 9(4).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  result     pic x(200).\n\n       procedure division using ptr result.\n          initialize result\n          perform until ptr = null\n              set address of node to ptr\n              move val of node to n\n              string function trim(n) ' -> ' into result pointer i\n              set ptr to nxt of node\n          end-perform\n      \n          string 'NULL' into result pointer i\n              \n          goback.\n       end program stringify.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21415,"user_id":53,"body":"       identification division.\n       program-id. stringify.\n       data division.\n       working-storage section.\n       01  t          pic z(3)9.\n       01  i          usage index.\n       linkage section.\n       01  node.\n           05 val     pic 9(4).\n           05 nxt     usage pointer.\n       01  ptr        usage pointer.\n       01  result     pic x(200).\n       procedure division using ptr result.\n           initialize result\n           move 1 to i\n           perform until ptr = null\n               move ptr to address of node\n               move val to t\n               move nxt to ptr\n               string function trim(t) ' -> ' \n                  into result with pointer i\n           end-perform\n           string 'NULL' into result with pointer i\n           goback.\n       end program stringify.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582cb0224e56e068d800003c":[{"id":21416,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING H RESULT.\n          COMPUTE RESULT = H* 0.5\n      * You can do it!\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21417,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING H RESULT.\n           COMPUTE RESULT = H \/ 2.\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21418,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING H RESULT.\n           COMPUTE RESULT = H \/ 2\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21419,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING H RESULT.\n           COMPUTE RESULT = H \/ 2.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21420,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 r      PIC 9(10).\n       PROCEDURE DIVISION USING H r.\n          compute r = h * 0.5.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21421,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING H RESULT.\n       MOVE FUNCTION INTEGER(H \/ 2) TO RESULT.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21422,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING H RESULT.\n           DIVIDE H BY 2 GIVING RESULT\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21423,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING h RESULT.\n           COMPUTE RESULT = h \/ 2\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21424,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING h RESULT.\n           COMPUTE RESULT = h \/ 2\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21425,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n           DIVIDE H BY 2 GIVING RESULT.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21426,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n       MOVE FUNCTION INTEGER(H \/ 2) TO RESULT.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21427,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H       PIC 9(8)V9(2).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING H RESULT.\n       COMPUTE RESULT = H \/ 2 .\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21428,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LITERS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 H       PIC 9(8)V9(2).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING h RESULT.\n           DISPLAY H\n           COMPUTE RESULT = h \/ 2\n           GOBACK.\n       END PROGRAM LITERS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21429,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION.\n               COMPUTE RESULT = HOURS * 0.5\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21430,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION.\n           COMPUTE RESULT = HOURS \/ 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21431,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION\n       divide hours by 2 giving result\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21432,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION\n          compute result = hours * 0.5\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21433,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION\n        COMPUTE RESULT = HOURS \/ 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21434,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS       PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION\n       DIVIDE HOURS BY 2 GIVING RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21435,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 HOURS     PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       LITERS SECTION\n       \n        COMPUTE RESULT = HOURS \/ 2\n\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"582dace555a1f4d859000058":[{"id":21436,"user_id":421,"body":"       identification division.\n       program-id. FindAdmin.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 GithubAdmin  pic a(3).\n       01  Lang               pic a(10).\n       01  result.\n           05  ResLength      pic 9(2).\n           05  Dev     occurs 0 to 99 times\n                              depending on ResLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 GithubAdmin  pic a(3).\n      \n       procedure division using List Lang result.\n           initialize result\n           perform varying i from 1 by 1 until i > ListLength\n               if Language of Developers(i) = Lang and\n                  GithubAdmin of Developers(i) = \"yes\" then\n                   add 1 to ResLength\n                   move Developers(i) to Dev(ResLength)\n               end-if\n           end-perform.\n       end program FindAdmin.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21437,"user_id":168,"body":"       identification division.\n       program-id. FindAdmin.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 GithubAdmin  pic a(3).\n       01  Lang               pic a(10).\n       01  result.\n           05  ResLength      pic 9(2).\n           05  Developers     occurs 0 to 99 times\n                              depending on ResLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 GithubAdmin  pic a(3).\n      \n       procedure division using List Lang result.\n           move 0 to reslength\n           perform varying i from 1 until i > listlength\n               if language of list(i) = lang and \n                  githubadmin of list(i) = 'yes'\n                    add 1 to reslength\n                    move developers of list(i) \n                      to developers of result(reslength)\n               end-if\n           end-perform.\n       end program FindAdmin.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21438,"user_id":53,"body":"       identification division.\n       program-id. FindAdmin.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength               pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 GithubAdmin  pic a(3).\n       01  Lang               pic a(10).\n       01  result.\n           05  ResLength             pic 9(2).\n           05  Developers2     occurs 0 to 99 times\n                              depending on ResLength.\n              07 FirstName2    pic a(9).\n              07 LastName2     pic x(2).\n              07 Country2      pic a(24).\n              07 Continent2    pic a(8).\n              07 Age2          pic 9(3).\n              07 Language2     pic a(10).\n              07 GithubAdmin2  pic a(3).\n       procedure division using List Lang result.\n         initialize result\n         perform varying i from 1 until i > ListLength\n          if Language(i) = Lang and GithubAdmin(i) = 'yes'\n           add 1 to ResLength\n           move Developers(i) to Developers2(ResLength)\n          end-if\n         end-perform\n         goback.\n       end program FindAdmin.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21439,"user_id":50,"body":"       identification division.\n       program-id. FindAdmin.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 GithubAdmin  pic a(3).\n       01  Lang               pic a(10).\n       01  result.\n           05  r             pic 9(2).\n           05  d pic x(59) occurs 0 to 99 times depending on r\n                                              indexed j.\n      \n       procedure division using List Lang result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              if Language(i) = Lang and GithubAdmin(i) = 'yes'\n                 add 1 to r\n                 move Developers(i) to d(r)\n              end-if\n           end-perform\n      \n           goback.\n       end program FindAdmin.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5834fec22fb0ba7d080000e8":[{"id":21440,"user_id":null,"body":"       identification division.\n       program-id. makeToast.      \n       data division.\n       linkage section.\n       01  num       pic 9(9).        \n       01  result    pic 9(8).\n       procedure division using num result.\n           compute result = function abs(num - 6)\n           goback.\n       end program makeToast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21441,"user_id":527,"body":"       identification division.\n       program-id. makeToast.      \n       data division.\n       linkage section.\n       01  num       pic 9(9).        \n       01  result    pic 9(8).\n       procedure division using num result.\n       compute result = function abs (num - 6).\n       end program makeToast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21442,"user_id":168,"body":"       identification division.\n       program-id. makeToast.      \n       data division.\n       linkage section.\n       01  num       pic 9(9).        \n       01  result    pic 9(8).\n       procedure division using num result.\n           subtract 6 from num giving result.\n       end program makeToast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21443,"user_id":53,"body":"       identification division.\n       program-id. makeToast.      \n       data division.\n       linkage section.\n       01  n       pic 9(9).        \n       01  r       pic 9(8).\n       procedure division using n r.\n          compute r = function abs(n - 6)\n          goback.\n       end program makeToast.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21444,"user_id":50,"body":"       identification division.\n       program-id. makeToast.      \n       data division.\n       linkage section.\n       01  num       pic 9(9).        \n       01  result    pic 9(8).\n      \n       procedure division using num result.\n      \n           move function abs(num - 6) to result\n      \n           goback.\n       end program makeToast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21445,"user_id":421,"body":"       identification division.\n       program-id. makeToast. \n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  num       pic 9(9).        \n       01  result    pic 9(8).\n       procedure division using num result.\n           compute result = function abs(num - 6).\n       end program makeToast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583710ccaa6717322c000105":[{"id":21446,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF FUNCTION REM(N, 2) = 1 THEN\n               COMPUTE RESULT = N * 9\n           ELSE \n               COMPUTE RESULT = N * 8\n           END-IF.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21447,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF FUNCTION REM(N, 2) = 0\n             MULTIPLY N BY 8 GIVING RESULT\n           ELSE\n             MULTIPLY N BY 9 GIVING RESULT\n           END-IF.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21448,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = N * (8 + FUNCTION MOD(N, 2)).\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21449,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n       compute RESULT = N * (8 + function MOD(N, 2))\n       goback.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21450,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          IF FUNCTION REM(N, 2) = 0 THEN\n              COMPUTE RESULT = N * 8\n          ELSE\n              MULTIPLY N BY 9 GIVING RESULT\n          END-IF.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21451,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF FUNCTION MOD(N, 2) = 0 THEN\n              MULTIPLY N BY 8 GIVING RESULT\n           ELSE\n              MULTIPLY N BY 9 GIVING RESULT\n           END-IF.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21452,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 r      PIC 9(8).\n       PROCEDURE DIVISION USING N r.\n            compute r = n * 9\n            if function rem(n 2) = 0 then\n                compute r = n * 8\n            goback.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21453,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          if function rem(n, 2) = 1 then compute result = n * 9,\n            else compute result = n * 8 .\n       END PROGRAM SIMPLE-MULTIPLICATION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21454,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIMPLE-MULTIPLICATION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(7).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF FUNCTION REM(N, 2) = ZERO THEN\n              COMPUTE RESULT = N * 8\n           ELSE\n              COMPUTE RESULT = N * 9\n           END-IF.\n       END PROGRAM SIMPLE-MULTIPLICATION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21455,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       SIMPLE-MULTIPLICATION.\n          IF FUNCTION MOD(INPUT-01, 2) EQUAL 0 THEN\n             COMPUTE RESULT = INPUT-01 * 8\n           ELSE\n              COMPUTE RESULT = INPUT-01 * 9\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21456,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       01 RESTO       PIC 9(01).\n       PROCEDURE DIVISION.\n      * create SIMPLE-MULTIPLICATION\n         SIMPLE-MULTIPLICATION.\n               DIVIDE INPUT-01 BY 2 GIVING RESULT REMAINDER RESTO.\n               IF (RESTO = 0) THEN compute result = input-01 * 8\n               ELSE compute result = input-01 * 9\n               END-IF.\n      *       IF RESTO = 0 THEN COMPUTE RESULT = INPUT-01 * 8\n      *       ELSE COMPUTE RESULT = INPUT-01 * 9\n      *       END-IF.\n      *       compute result = input-01 * (8 + rem).\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21457,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       01 rem         pic 9(01).\n       PROCEDURE DIVISION.\n       simple-multiplication section.\n       divide input-01 by 2 giving result remainder rem.\n       compute result = input-01 * (8 + rem).\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21458,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       SIMPLE-MULTIPLICATION SECTION.\n       compute result = 8 * input-01\n       if function rem( input-01 , 2 ) = 1 then add input-01 to result\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21459,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       01 AUX-DIV     PIC 9(07).\n       01 AUX-RESI    PIC 9(07).\n       PROCEDURE DIVISION.\n       MOVE 2 TO INPUT-01.\n       PERFORM SIMPLE-MULTIPLICATION\n       SIMPLE-MULTIPLICATION.\n       DIVIDE 2 INTO INPUT-01 GIVING AUX-DIV REMAINDER AUX-RESI\n       DISPLAY \"AUX\"AUX-RESI\n       IF AUX-RESI EQUAL TO 0 COMPUTE RESULT = INPUT-01 * 8\n       IF AUX-RESI NOT EQUAL TO 0 COMPUTE RESULT = INPUT-01 * 9\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21460,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       SIMPLE-MULTIPLICATION.\n           IF FUNCTION MOD(INPUT-01, 2) = 1 THEN\n            MULTIPLY INPUT-01 BY 9 GIVING RESULT\n           ELSE\n            MULTIPLY INPUT-01 BY 8 GIVING RESULT\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21461,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       01 REST        PIC 9(01).\n       PROCEDURE DIVISION.\n      * create SIMPLE-MULTIPLICATION\n        SIMPLE-MULTIPLICATION.\n           DIVIDE INPUT-01 BY 2 GIVING RESULT REMAINDER REST.\n           DISPLAY 'HOLA:' INPUT-01 ' ' REST.\n           IF REST = 1\n              MOVE  9 TO REST\n           ELSE\n              MOVE  8 TO REST   \n           END-IF\n      \n           COMPUTE RESULT = INPUT-01 * REST \n            \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21462,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       SIMPLE-MULTIPLICATION.\n            IF FUNCTION MOD(INPUT-01, 2) = 0\n              COMPUTE RESULT = INPUT-01 * 8\n            ELSE\n              COMPUTE RESULT = INPUT-01 * 9\n            END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21463,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       SIMPLE-MULTIPLICATION.\n            IF FUNCTION MOD(INPUT-01, 2) = 0 THEN\n                  COMPUTE RESULT = INPUT-01 * 8\n            ELSE\n                  COMPUTE RESULT = INPUT-01 * 9\n            END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21464,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01    PIC 9(07).\n       01 RESULT      PIC 9(08).\n       PROCEDURE DIVISION.\n       SIMPLE-MULTIPLICATION. \n           COMPUTE RESULT = INPUT-01 * (8 + FUNCTION MOD(INPUT-01, 2)).\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58373ba351e3b615de0001c3":[{"id":21465,"user_id":50,"body":"       identification division.\n       program-id. mormons.\n      \n       data division.\n\n       linkage section.\n       01 starting-number  pic 9(8).\n       01 reach            pic 9(8).\n       01 target           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using starting-number reach target result.\n\n          compute result rounded mode toward-greater = \n                         function log(target \/ starting-number) \/\n                         function log(reach + 1.0)\n\n          goback.\n       end program mormons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21466,"user_id":76,"body":"       identification division.\n       program-id. mormons.\n       data division.\n       local-storage section.\n       01 n                pic 9(20).\n       linkage section.\n       01 starting-number  pic 9(8).\n       01 reach            pic 9(8).\n       01 target           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using starting-number reach target result.\n         initialize result\n         move starting-number to n\n         perform until n >= target\n           add 1 to result\n           compute n = n * (reach + 1)\n         end-perform.\n       end program mormons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21467,"user_id":421,"body":"       identification division.\n       program-id. mormons.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 starting-number  pic 9(8).\n       01 reach            pic 9(8).\n       01 target           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using starting-number reach target result.\n           compute result rounded mode toward-greater = \n                          function log(target \/ starting-number) \/ \n                           function log(reach + 1).\n       end program mormons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21468,"user_id":null,"body":"       identification division.\n       program-id. mormons.\n      \n       data division.\n       linkage section.\n       01 starting-number  pic 9(8).\n       01 reach            pic 9(8).\n       01 target           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using starting-number reach target result.\n         compute result = function log(target \/ starting-number)\n                        \/ function log(reach + 1) + 0.999.\n       end program mormons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21469,"user_id":168,"body":"       identification division.\n       program-id. mormons.\n      \n       data division.\n       working-storage section.\n       01 n                pic 9(25).\n       linkage section.\n       01 starting-number  pic 9(8).\n       01 reach            pic 9(8).\n       01 target           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using starting-number reach target result.\n          compute result = 0\n          compute n = starting-number\n          perform until n >= target\n              add 1 to result\n              compute n = (1 + reach) * n\n          end-perform.\n       end program mormons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21470,"user_id":168,"body":"       identification division.\n       program-id. mormons.\n      \n       data division.\n       linkage section.\n       01 starting-number  pic 9(8).\n       01 reach            pic 9(8).\n       01 target           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using starting-number reach target result.\n          compute result rounded mode toward-greater = \n              function log(target \/ starting-number) \/\n              function log(reach + 1).\n       end program mormons.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21471,"user_id":53,"body":"       identification division.\n       program-id. mormons.\n      \n       data division.\n\n       linkage section.\n       01 a  pic 9(8).\n       01 r            pic 9(8).\n       01 b           pic 9(20).\n       01 result           pic 9(8).\n       procedure division using a r b result.\n\n          compute result rounded mode toward-greater = \n                         function log(b \/ a) \/\n                         function log(r + 1.0)\n\n          goback.\n       end program mormons.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58381907f8ac48ae070000de":[{"id":21472,"user_id":50,"body":"       identification division.\n       program-id. IsLanguageDiverse.\n       data division.\n       local-storage section.\n       01 a pic 9(2).\n       01 b pic 9(2).\n       01 c pic 9(2).\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 20 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n      \n       procedure division using List result.\n      \n           initialize result\n      \n           perform varying i from 1 until i > l\n              evaluate Language(i)\n              when 'JavaScript' add 1 to a\n              when 'Python'     add 1 to b\n              when other        add 1 to c\n              end-evaluate\n          end-perform\n      \n           if function max(a, b, c) <= 2 * function min(a, b, c)\n           move 1 to result end-if\n          \n           goback.\n       end program IsLanguageDiverse.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21473,"user_id":53,"body":"       identification division.\n       program-id. IsLanguageDiverse.\n       data division.\n       local-storage section.\n       01 a pic 9(2).\n       01 b pic 9(2).\n       01 c pic 9(2).\n       01 x pic 9(2).\n       01 y pic 9(2).\n       linkage section.\n       01  List.\n           05 len             pic 9(2).\n           05 Developers      occurs 0 to 20 times\n                              depending on len indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result             pic 9.\n       procedure division using List result.\n           initialize result\n           perform varying i from 1 until i > len\n              evaluate Language(i)\n                when 'JavaScript' add 1 to a\n                when 'Python'     add 1 to b\n                when other        add 1 to c\n              end-evaluate\n           end-perform\n           compute x = function min(a, b, c)\n           compute y = function max(a, b, c)\n           if y <= 2 * x then move 1 to result end-if\n           goback.\n       end program IsLanguageDiverse.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583952fbc23341c7180002fd":[{"id":21474,"user_id":168,"body":"       identification division.\n       program-id. OrderFood.\n       data division.\n      \n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 Meal         pic x(17).\n       01  result.\n           05  ResLength      pic 9.\n           05  Pair           occurs 0 to 5 times\n                              depending on ResLength indexed j.\n              07 rMeal        pic x(17).\n              07 Cnt          pic 9(2).\n      \n       procedure division using List result.\n           move 0 to reslength\n           perform varying i from 1 until i > listlength\n               move 1 to j\n               search pair varying j\n                   at end\n                      add 1 to reslength\n                      move meal(i) to rmeal(reslength)\n                      move 1 to cnt(reslength)\n                   when rmeal(j) = meal(i)\n                      add 1 to cnt(j)\n               end-search\n           end-perform.\n       end program OrderFood.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21475,"user_id":53,"body":"       identification division.\n       program-id. OrderFood.\n       data division.\n       local-storage section.\n       01  i                  usage index.\n       01  j                  usage index.\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 Meal         pic x(17).\n       01  result.\n           05  ResLength      pic 9.\n           05  Pair           occurs 0 to 5 times\n                              depending on ResLength.\n              07 M            pic x(17).\n              07 Cnt          pic 9(2).\n       procedure division using List result.\n          initialize result\n          perform varying i from 1 until i > ListLength\n            perform varying j from 1 until j > ResLength\n              if function trim(M(j)) = function trim(Meal(i)) then\n                add 1 to Cnt(j)\n                exit perform\n              end-if\n            end-perform\n            if j > ResLength then\n              add 1 to ResLength\n              move function trim(Meal(i)) to M(ResLength)\n              move 1 to Cnt(ResLength)\n            end-if\n          end-perform\n          goback.\n       end program OrderFood.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21476,"user_id":50,"body":"       identification division.\n       program-id. OrderFood.\n       data division.\n       local-storage section.\n       01  .\n          03 m pic 9(2) occurs 5 times.\n       01  j usage index.\n       \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n              07 Meal         pic x(17).\n       01  result.\n           05  r             pic 9.\n           05  pic x(19) occurs 0 to 5 times depending on r.\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              evaluate Meal(i)\n              when 'diabetic'\n                    add 1 to m(1)\n              when 'gluten-intolerant'\n                    add 1 to m(2)\n              when 'standard'\n                    add 1 to m(3)\n              when 'vegan'\n                    add 1 to m(4)\n              when other\n                    add 1 to m(5)\n              end-evaluate\n           end-perform\n      \n           set j to 2\n           if m(1) > 0\n              add 1 to r\n              string 'diabetic         ' m(1)\n              into result pointer j\n            end-if\n           if m(2) > 0\n              add 1 to r\n              string 'gluten-intolerant' m(2)\n              into result pointer j\n            end-if\n           if m(3) > 0\n              add 1 to r\n              string 'standard         ' m(3)\n              into result pointer j\n            end-if\n           if m(4) > 0\n              add 1 to r\n              string 'vegan            ' m(4)\n              into result pointer j\n            end-if\n           if m(5) > 0\n              add 1 to r\n              string 'vegetarian       ' m(5)\n              into result pointer j\n            end-if\n      \n           goback.\n       end program OrderFood.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583a8bde28019d615a000035":[{"id":21477,"user_id":168,"body":"       identification division.\n       program-id. FindOddNames.\n       data division.\n       working-storage section.\n       01  j usage index.\n       01  s usage index.\n      \n       linkage section.\n       01  List.\n           05  ListLength     pic 9(2).\n           05  Developers     occurs 0 to 99 times\n                              depending on ListLength indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  ResLength      pic 9(2).\n           05  Developers     occurs 0 to 99 times\n                              depending on ResLength.\n              07 rFirstName   pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n      \n       procedure division using List result.\n           move 0 to reslength\n           perform varying i from 1 until i > listlength\n               move 0 to s\n               perform varying j from 1 until j > 9\n                    add function ord(firstname(i)(j:1)) -1 to s\n               end-perform\n               if function mod(s, 2) = 1\n                    add 1 to reslength\n                    move developers of list(i) \n                      to developers of result(reslength)\n               end-if\n           end-perform.\n       end program FindOddNames.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21478,"user_id":53,"body":"       identification division.\n       program-id. FindOddNames.\n       data division.\n       local-storage section.\n       01  i  usage index.\n       01  j  usage index.\n       01  name pic a(9).\n       01  n pic 9.\n       01  p pic 9(4).\n       linkage section.\n       01  List.\n           05  ListLength     pic 9(2).\n           05  Developers     occurs 0 to 99 times\n                              depending on ListLength.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  ResLength      pic 9(2).\n           05  Developers2    occurs 0 to 99 times\n                              depending on ResLength.\n              07 FirstName2   pic a(9).\n              07 LastName2    pic x(2).\n              07 Country2     pic a(24).\n              07 Continent2   pic a(8).\n              07 Age2         pic 9(3).\n              07 Language2    pic a(10).\n       procedure division using List result.\n          initialize result\n          perform varying i from 1 until i > ListLength\n            move FirstName(i) to name\n            compute n = length of function trim(name)\n            set p to 0\n            perform varying j from 1 until j > n\n              compute p = p + 1 + function ord(name(j:1))\n            end-perform\n            if function rem(p, 2) <> 0 then\n              add 1 to ResLength\n              move Developers(i) to Developers2(ResLength)\n            end-if\n          end-perform\n          goback.\n       end program FindOddNames.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21479,"user_id":50,"body":"       identification division.\n       program-id. FindOddNames.\n       data division.\n       local-storage section.\n       01  a                  pic 9(4).\n       01  j                  usage index.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  r             pic 9(2).\n           05  d pic x(56) occurs 0 to 99 times depending on r.\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              initialize a\n              perform varying j from 1\n              until j > length of function trim(FirstName(i))\n                compute a = 1 + function ord(FirstName(i)(j:1)) + a\n              end-perform\n              if function rem(a, 2) = 1\n                  add 1 to r\n                  move developers(i) to d(r)\n              end-if\n           end-perform\n      \n           goback.\n       end program FindOddNames.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583ade15666df5a64e000058":[{"id":21480,"user_id":50,"body":"       identification division.\n       program-id. EvensAndOdds.\n       data division.\n       local-storage section.\n       01  o             pic x(34).\n       01  redefines o.\n           03  s         pic x occurs 34 times.\n       01  i             usage index.\n       01  j             usage index.\n       01  h             pic x(16) value '0123456789abcdef'.\n       01  n             pic 9.\n      \n       linkage section.\n       01  num           pic 9(10).\n       01  result.\n           05 resLen     pic 9(2).\n           05 res        pic x occurs 40 times \n                                 depending on resLen.\n      \n       procedure division using num result.\n      \n          initialize result\n      \n          evaluate true\n          when num is zero\n               move 1 to resLen\n               move 0 to res(1)\n               goback\n          when function rem(num, 2) = 0\n               perform toBin\n          when other\n               perform toHex\n          end-evaluate\n      \n          compute resLen = i - 1\n          move function reverse(function trim(o)) to result(3:)\n      \n          goback.\n      \n          toBin.\n            perform varying i from 1 until num = 0\n                divide num by 2 giving num remainder n\n                move n to s(i)\n            end-perform\n            .\n      \n          toHex.\n            perform varying i from 1 until num = 0\n                divide num by 16 giving num remainder j\n                move h(j + 1: 1) to s(i) \n            end-perform\n            .\n      \n       end program EvensAndOdds.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21481,"user_id":168,"body":"       identification division.\n       program-id. EvensAndOdds.\n       data division.\n       working-storage section.\n       01  digits pic x(16) value '0123456789abcdef'.\n       01  base          pic 99.\n       01  r             pic 99.\n      \n       linkage section.\n       01  num           pic 9(10).\n       01  result.\n           05 resLen     pic 9(2).\n           05 res.\n              10 resChars  pic x occurs 40 times \n                           depending on resLen.\n      \n       procedure division using num result.\n          if function mod(num, 2) = 0\n              move 2 to base\n          else\n              move 16 to base\n          end-if\n          move 0 to resLen\n          perform with test after until num = 0\n              divide num by base giving num remainder r\n              add 1 to resLen\n              move digits(r + 1:1) to resChars(resLen)\n          end-perform\n          move function reverse(res) to res.\n       end program EvensAndOdds.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21482,"user_id":53,"body":"       identification division.\n       program-id. EvensAndOdds.\n       data division.\n       local-storage section.\n       01  h             pic x(16) value '0123456789abcdef'.\n       01  str           pic x(34).\n       01  redefines str.\n           03  s         pic x occurs 34 times.\n       01  n             pic 9.\n       linkage section.\n       01  num           pic 9(10).\n       01  result.\n           05 resLen     pic 9(2).\n           05 res        pic x occurs 40 times \n                               depending on resLen\n                               indexed by i j.\n       procedure division using num result.\n          initialize result\n          evaluate true\n          when num is zero\n               move 1 to resLen\n               move 0 to res(1)\n               exit paragraph\n          when function rem(num, 2) = 0\n               perform varying i from 1 until num = 0\n                  divide num by 2 giving num remainder n\n                  move n to s(i)\n               end-perform\n          when other\n               perform varying i from 1 until num = 0\n                  divide num by 16 giving num remainder j\n                  move h(j + 1: 1) to s(i) \n               end-perform\n          end-evaluate\n          subtract 1 from i giving resLen\n          move function reverse(function trim(str)) to result(3:)\n          goback.\n       end program EvensAndOdds.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583d171f28a0c04b7c00009c":[{"id":21483,"user_id":168,"body":"       identification division.\n       program-id. max-sum.\n       data division.\n       working-storage section.\n       01 s      pic s9(10) binary.\n       01 sums.\n          05 ss  pic s9(10) binary occurs 100001 times.\n\n       linkage section.\n       01  a.\n           05 a-length       pic 9(6).\n           05 xs             pic s9(10) occurs 5 to 100000 times \n                                       depending on a-length \n                                       indexed by i.\n       01  ranges.\n           03 ranges-length  pic 9(5).\n           03 range          occurs 1 to 10000 times\n                             depending on ranges-length.\n              05 range-first pic 9(8).\n              05 range-last  pic 9(8).\n       01  result            pic s9(10) sign leading.\n      \n       procedure division using a ranges result. \n           perform varying i from 1 until i > a-length\n               add xs(i) to ss(i) giving ss(i + 1)\n           end-perform\n           move -9999999999 to result\n           perform varying i from 1 until i > ranges-length\n               subtract ss(range-first(i) + 1) \n                   from ss(range-last(i) + 2) giving s\n               if s > result\n                  move s to result\n               end-if\n           end-perform\n           goback.\n       end program max-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21484,"user_id":53,"body":"       identification division.\n       program-id. max-sum.\n       data division.\n      \n       local-storage section.\n       01  m                 pic s9(10) value 0.\n       01  p                 pic s9(10).\n       01  f                 pic 9 value 0.\n       01  b.\n           05 b-length       pic 9(6).\n           05 xs             pic s9(10) occurs 5 to 100000 times \n                                        depending on b-length.\n      \n       linkage section.\n       01  a.\n           05 a-length       pic 9(6).\n           05 arr            pic s9(10) occurs 5 to 100000 times \n                                        depending on a-length\n                                        indexed by i.\n       01  ranges.\n           03 ranges-length  pic 9(5).\n           03 range          occurs 1 to 10000 times\n                             depending on ranges-length\n                             indexed by j.\n              05 x           pic 9(8).\n              05 y           pic 9(8).\n       01  result            pic s9(10) sign leading.\n      \n       procedure division using a ranges result. \n      \n          move a-length to b-length\n          perform varying i from 1 until i > a-length\n            add arr(i) to m\n            move m to xs(i)\n          end-perform\n      \n          move 0 to result\n          perform varying j from 1 until j > ranges-length\n            if x(j) = 0 then\n              move xs(y(j) + 1) to p\n            else\n              compute p = xs(y(j) + 1) - xs(x(j))\n            end-if\n            if f = 0 or p > result then\n              move 1 to f\n              move p to result\n            end-if\n          end-perform\n      \n          goback.\n       end program max-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21485,"user_id":50,"body":"       identification division.\n       program-id. max-sum.\n       data division.\n       local-storage section.\n       01  i                 pic 9(6).\n       01  e.\n           05 len            pic 9(6).\n           05 L              pic s9(32) occurs 5 to 100000 times\n                             depending on len.\n       01 acc                pic s9(11).\n      \n       linkage section.\n       01  a.\n           05 a-length       pic 9(6).\n           05 xs             pic s9(10) occurs 5 to 100000 times \n                                       depending on a-length.\n       01  ranges.\n           03 ranges-length  pic 9(5).\n           03 range          occurs 1 to 10000 times\n                             depending on ranges-length.\n              05 rg          occurs 2 times.\n                 07 r        pic 9(8).\n       01  result            pic s9(10) sign leading.\n      \n       procedure division using a ranges result. \n      \n           move 0 to acc, len\n           perform varying i from 1 until i > a-length\n              add xs(i) to acc\n              add 1 to len\n              move acc to L(i)\n           end-perform\n\n           if r(1, 1) = 0 then move L(r(1,2) + 1) to result\n           else compute result = L(r(1, 2) + 1) - L(r(1, 1)) end-if\n      \n           perform varying i from 2 until i > ranges-length\n             if r(i, 1) = 0\n               then compute result = function max(result, L(r(i,2) + 1))\n             else  compute  result = \n                 function max(result, L(r(i,2) + 1) - L(r(i, 1))) end-if\n           end-perform\n      \n           goback.\n       end program max-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583d972b8bbc0402cf000121":[{"id":21486,"user_id":53,"body":"       identification division.\n       program-id. AskForMissingDetails.\n       data division.\n       local-storage section.\n       01  Field  pic a(24).\n       linkage section.\n       01  List.\n           05 ListLength      pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on ListLength\n                              indexed by i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  r             pic 9(2).\n           05  d occurs 0 to 99 times depending on r.\n               07 filler pic x(56).\n               07 q pic x(44).\n       procedure division using List result.\n           initialize result\n           perform varying i from 1 until i > ListLength\n              evaluate true\n              when length of function trim(FirstName(i)) = 0\n                   move 'FirstName' to Field\n                   perform push\n              when length of function trim(LastName(i)) = 0\n                   move 'LastName' to Field\n                   perform push\n              when length of function trim(Country(i)) = 0\n                   move 'Country' to Field\n                   perform push\n              when length of function trim(Continent(i)) = 0\n                   move 'Continent' to Field\n                   perform push\n              when Age(i) = 0\n                   move 'Age' to Field\n                   perform push\n              when length of function trim(Language(i)) = 0\n                   move 'Language' to Field\n                   perform push\n              end-evaluate\n           end-perform\n           goback.\n      \n           push.\n            add 1 to r\n            move developers(i) to d(r)\n            string 'Hi, could you please provide your '\n              function trim(Field) '.' into q(r)\n            .\n      \n       end program AskForMissingDetails.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21487,"user_id":50,"body":"       identification division.\n       program-id. AskForMissingDetails.\n       data division.\n       local-storage section.\n       01  h constant 'Hi, could you please provide your '.\n      \n       linkage section.\n       01  List.\n           05 l               pic 9(2).\n           05 Developers      occurs 0 to 99 times\n                              depending on l indexed i.\n              07 FirstName    pic a(9).\n              07 LastName     pic x(2).\n              07 Country      pic a(24).\n              07 Continent    pic a(8).\n              07 Age          pic 9(3).\n              07 Language     pic a(10).\n       01  result.\n           05  r             pic 9(2).\n           05  d occurs 0 to 99 times depending on r.\n               07 filler pic x(56).\n               07 q pic x(44).\n      \n       procedure division using List result.\n      \n           initialize result\n           perform varying i from 1 until i > l\n              evaluate true\n              when FirstName(i) = ' '\n                   add 1 to r\n                   move developers(i) to d(r)\n                   string h 'FirstName.' into q(r)\n              when LastName(i) = ' '\n                   add 1 to r\n                   move developers(i) to d(r)\n                   string h 'LastName.' into q(r)\n              when Country(i) = ' '\n                   add 1 to r\n                   move developers(i) to d(r)\n                   string h 'Country.' into q(r)\n              when Continent(i) = ' '\n                   add 1 to r\n                   move developers(i) to d(r)\n                   string h 'Continent.' into q(r)\n              when Age(i) = 0\n                   add 1 to r\n                   move developers(i) to d(r)\n                   string h 'Age.' into q(r)\n              when Language(i) = ' '\n                   add 1 to r\n                   move developers(i) to d(r)\n                   string h 'Language.' into q(r)\n              end-evaluate\n           end-perform\n\n           goback.\n       end program AskForMissingDetails.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583dbc028bbc0446f500032b":[{"id":21488,"user_id":168,"body":"       identification division.\n       program-id. woodCut.\n       data division.\n       working-storage section.\n       01  a    pic 9(10).\n       01  b    pic 9(10).\n       01  m    pic 9(10).\n       01  s    pic 9(12).\n      \n       linkage section.\n       01  woods.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(10) occurs 3 to 100 times \n                                     depending on arr-length indexed i.\n       01  n               pic 9(8).\n       01  result          pic 9(10).\n       procedure division using woods n result.\n           move 0 to b result\n           move 1 to a\n           perform varying i from 1 until i > arr-length\n               move function max(xs(i), b) to b\n           end-perform\n           perform until a > b\n               compute m = (a + b) \/ 2\n               move 0 to s\n               perform varying i from 1 until i > arr-length\n                   add function abs(xs(i) \/ m) to s\n               end-perform\n               if s >= n\n                  add 1 to m giving a\n                  move m to result\n               else\n                  subtract 1 from m giving b\n               end-if\n           end-perform.\n       end program woodCut.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21489,"user_id":53,"body":"       identification division.\n       program-id. woodCut.\n       data division.\n       local-storage section.\n       01  a               pic 9(10) value 1.\n       01  b               pic 9(10) value 0.\n       01  d               pic 9(10).\n       01  m               pic 9(10).\n       linkage section.\n       01  woods.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(10) occurs 3 to 100 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  n               pic 9(8).\n       01  result          pic 9(10).\n       procedure division using woods n result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            compute b = function max(b, xs(i))\n          end-perform\n          perform until a > b\n            compute d = (a + b) \/ 2\n            set m to 0\n            perform varying i from 1 until i > arr-length\n              compute m = m + xs(i) \/ d\n            end-perform\n            if m >= n then add 1 to d giving a\n            else subtract 1 from d giving b end-if\n          end-perform\n          subtract 1 from a giving result\n          goback.\n       end program woodCut.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21490,"user_id":50,"body":"       identification division.\n       program-id. woodCut.\n       data division.\n       local-storage section.\n       01  a              pic 9(10).\n       01  b              pic 9(10).\n       01  acc            pic 9(12).\n       01  flag           pic 9(10).\n      \n       linkage section.\n       01  woods.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(10) occurs 3 to 100 times \n                                     depending on arr-length\n                                     indexed by k.\n       01  n               pic 9(8).\n       01  c               pic 9(10).\n       procedure division using woods n c.\n      \n        move 1 to a, k\n        move xs(k) to c\n        perform varying k from 2 until k > arr-length\n           compute c = function max(c, xs(k))\n        end-perform\n      \n        perform until a > c\n          compute b = a + function integer((c - a) \/ 2)\n          perform f\n          if flag = 1 compute a = b + 1\n          else        compute c = b - 1 end-if\n        end-perform\n        goback.\n      \n            f.\n            move 0 to acc\n            perform varying k from 1 until k > arr-length\n              compute acc = acc + function integer(xs(k) \/ b)\n            end-perform\n            if acc >= n move 1 to flag\n            else        move 0 to flag\n           .\n       end program woodCut.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"583ebb9328a0c034490001ba":[{"id":21491,"user_id":421,"body":"       identification division.\n       program-id. DuplicateElements.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  m.\n           05  m-length     pic 9(2).\n           05  xs           pic s9(8) occurs 0 to 50 times \n                                      depending on m-length\n                                      indexed by i.\n       01  n.\n           05  n-length     pic 9(2).\n           05  ys           pic s9(8) occurs 0 to 50 times \n                                      depending on n-length\n                                      indexed by j.\n       01  result           pic 9.\n           88 identical value 1 when set to false 0.\n       procedure division using m n result.\n           set identical to false\n           perform varying i from 1 by 1 until i > m-length\n               perform varying j from 1 by 1 until j > n-length\n                   if xs(i) = ys(j) then\n                       set identical to true\n                       goback\n                   end-if\n               end-perform\n           end-perform.\n       end program DuplicateElements.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21492,"user_id":53,"body":"       identification division.\n       program-id. DuplicateElements.\n       data division.\n       linkage section.\n       01  m.\n           05  m-length     pic 9(2).\n           05  xs           pic s9(8) occurs 0 to 50 times \n                            depending on m-length indexed i.\n       01  n.\n           05  n-length     pic 9(2).\n           05  ys           pic s9(8) occurs 0 to 50 times \n                            depending on n-length indexed j.\n       01  result           pic 9.\n       procedure division using m n result.\n          set result to 0\n          perform varying i from 1 until i > m-length\n            after j from 1 until j > n-length\n              if xs(i) = ys(j)\n                set result to 1\n                exit paragraph\n              end-if\n          end-perform\n          goback.\n       end program DuplicateElements.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21493,"user_id":50,"body":"       identification division.\n       program-id. DuplicateElements.\n       data division.\n      \n       linkage section.\n       01  m.\n           05  m-length     pic 9(2).\n           05  xs           pic s9(8) occurs 0 to 50 times \n                            depending on m-length indexed i.\n       01  n.\n           05  n-length     pic 9(2).\n           05  ys           pic s9(8) occurs 0 to 50 times \n                            depending on n-length indexed j.\n       01  result           pic 9.\n      \n       procedure division using m n result.\n      \n          perform varying i from 1 until i > m-length\n              perform varying j from 1 until j > n-length\n                  if xs(i) = ys(j)\n                    move 1 to result\n                    goback\n                    end-if\n              end-perform\n          end-perform\n          move 0 to result\n      \n          goback.\n       end program DuplicateElements.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58539230879867a8cd00011c":[{"id":21494,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FindChildren.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           ALPHABET MYALPHABET 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsT'\n          'tUuVvWwXxYyZz'.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  DANCINGBRIGADE.\n           05  E-CHR          PIC A OCCURS 45.\n       01  RESULT             PIC A(45).\n      \n       PROCEDURE DIVISION USING DANCINGBRIGADE RESULT.\n           SORT E-CHR ASCENDING KEY COLLATING SEQUENCE MYALPHABET\n           MOVE FUNCTION TRIM(DANCINGBRIGADE)  TO RESULT.\n       END PROGRAM FindChildren.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21495,"user_id":168,"body":"       identification division.\n       program-id. FindChildren.\n    \n       environment division.\n       configuration section.\n       special-names.\n       alphabet seq is 'AaBbCcDdEeFfGgHhIiJjKkLl'\n      -                'MmNnOoPpQqRrSsTtUuVvWwXxYyZz '.\n      \n       data division.\n      \n       linkage section.\n       01 dancingBrigade    pic a(45).\n       01 result.\n          05 res occurs 45 times.\n             10 xs pic a.\n      \n       procedure division using dancingBrigade result.\n          move dancingBrigade to result\n          sort res on ascending key xs\n               collating sequence is seq\n          goback.\n       end program FindChildren.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21496,"user_id":50,"body":"       identification division.\n       program-id. FindChildren.\n      \n       data division.\n       working-storage section.\n       01 i                 usage index.\n      \n       local-storage section.\n       01 tble.\n          03  pair occurs 26.\n              05  mother    pic 9.\n                  88 InBrigade value 1.\n              05  children  pic 9.\n       01 k                 usage index.\n      \n       linkage section.\n       01 s                 pic a(45).\n       01 result            pic a(45).\n      \n       procedure division using s result.\n      \n          initialize result\n          perform varying i from 1\n          until i > function stored-char-length(s)\n              if s(i:1) is alphabetic-upper\n                 move 1 to mother(function ord(s(i:1)) - 65)\n              else\n                 add 1 to children(function ord(s(i:1)) - 97)\n              end-if\n          end-perform\n      \n          perform varying i from 1 until i = 27\n            if InBrigade(i)\n               set k up by 1\n               move function char(i + 65) to result(k:1)\n               perform children(i) times\n                  set k up by 1\n                  move function char(i + 97) to result(k:1)\n               end-perform\n             end-if\n          end-perform.\n      \n       end program FindChildren.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5857e8bb9948644aa1000246":[{"id":21497,"user_id":168,"body":"       identification division.\n       program-id. DetermineTime.\n       data division.\n       local-storage section.\n       01  t             pic 9(8).\n      \n       linkage section.\n       01  durations.\n           03  len       pic 9.\n           03  presents  occurs 0 to 5 times depending on len indexed i.\n              05 h       pic 99.\n              05 filler  pic x.\n              05 m       pic 99.\n              05 filler  pic x.\n              05 s       pic 99.\n       01  result        pic 9.\n      \n       procedure division using durations result.\n          perform varying i from 1 until i > len\n              compute t = t + (h(i) * 60 + m(i)) * 60 + s(i)\n          end-perform\n          if t <= 3600 * 24 \n              move 1 to result \n          else \n              move 0 to result \n          end-if.\n       end program DetermineTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21498,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DetermineTime.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  DURATIONS.\n           05  LEN       PIC 9.\n           05  VAL       PIC X(8) OCCURS 0 TO 5 DEPENDING LEN.\n       01  RESULT        PIC 9.\n       PROCEDURE DIVISION USING DURATIONS RESULT.\n           IF  86400 >= FUNCTION SUM(\n               FUNCTION SECONDS-FROM-FORMATTED-TIME('hh:mm:ss', VAL(1)),\n               FUNCTION SECONDS-FROM-FORMATTED-TIME('hh:mm:ss', VAL(2)),\n               FUNCTION SECONDS-FROM-FORMATTED-TIME('hh:mm:ss', VAL(3)),\n               FUNCTION SECONDS-FROM-FORMATTED-TIME('hh:mm:ss', VAL(4)),\n               FUNCTION SECONDS-FROM-FORMATTED-TIME('hh:mm:ss', VAL(5)))\n               MOVE 1  TO RESULT\n           END-IF      \n           INITIALIZE DURATIONS.  *> CLEANS THE AREA FOR NEXT RUN\n       END PROGRAM DetermineTime.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21499,"user_id":50,"body":"       identification division.\n       program-id. DetermineTime.\n       data division.\n       local-storage section.\n       01  parser.\n           03 h          pic 9(2).\n           03 a          pic x.\n           03 m          pic 9(2).\n           03 b          pic x.\n           03 s          pic 9(2).\n       01 t              pic 9(6).\n      \n       linkage section.\n       01  durations.\n           03  len       pic 9.\n           03  presents  pic x(8) occurs 0 to 5 times\n                                 depending len indexed i.\n       01  result        pic 9.\n      \n       procedure division using durations result.\n          \n          move 0 to result, t\n          perform varying i from 1 until i > len\n              move presents(i) to parser\n              compute t = t + s + 60 * m + 3600 * h\n              if t > 86400 then goback, end-if\n          end-perform\n          move 1 to result\n      \n          goback.\n       end program DetermineTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"585894545a8a07255e0002f1":[{"id":21500,"user_id":168,"body":"       identification division.\n       program-id. count-patterns-from.\n       data division.\n       working-storage section.\n       01  available         usage binary-short.\n       01  r                 usage binary-long.\n       01  dot               pic 9.\n      \n       linkage section.\n       01  first-dot         pic A.\n       01  len               pic 99.\n       01  result            pic 9(5).\n      \n       procedure division using first-dot len result.\n          compute dot = function ord(first-dot) - 65\n          compute available = 511 - 2 ** (dot - 1)\n          call 'count-patterns' using dot len available r\n          move r to result\n          goback.\n       end program count-patterns-from.\n      \n       program-id. count-patterns recursive.\n       data division.\n       working-storage section.\n       01  vals.\n           05 usage binary-short value 186.\n           05 pic 9(8) value 23594700.\n           05 usage binary-short value 381.\n           05 pic 9(8) value 58000000.\n           05 usage binary-short value 186.\n           05 pic 9(8) value 21576900.\n           05 usage binary-short value 471.\n           05 pic 9(8) value 56000000.\n           05 usage binary-short value 495.\n           05 pic 9(8) value 00000000.\n           05 usage binary-short value 471.\n           05 pic 9(8) value 54000000.\n           05 usage binary-short value 186.\n           05 pic 9(8) value 41538900.\n           05 usage binary-short value 381.\n           05 pic 9(8) value 52000000.\n           05 usage binary-short value 186.\n           05 pic 9(8) value 87516300.\n       01  redefines vals.\n           05 tbl occurs 9 times.\n              10 one usage binary-short.\n              10 two occurs 4 times.\n                  15 prev    pic 9.\n                  15 nxt     pic 9.\n       \n       local-storage section.\n       01  i         usage index.\n       01  j         usage index.\n       01  x         usage binary-short.\n       01  d         pic 9.\n       01  r         usage binary-long.\n       \n       linkage section.\n       01  dot       pic 9.\n       01  n         pic 99.\n       01  available usage binary-short.\n       01  result    usage binary-long.\n       \n       procedure division using dot n available result.\n          move 0 to result\n          if n = 0 or n > 9 then goback end-if\n          if n = 1 then move 1 to result; goback end-if\n          subtract 1 from n\n          perform varying i from 1 until i > 9\n              compute x = 2 ** (i - 1)\n              move 0 to d\n              call 'CBL_AND' using available x by value 2\n              if x = 0 \n                  perform varying j from 1 until nxt(dot, j) = 0\n                      if i = prev(dot, j)\n                          compute x = 2 ** (nxt(dot, j) - 1)\n                          call 'CBL_AND' using available x by value 2\n                          if x <> 0\n                              move nxt(dot, j) to d\n                              exit perform\n                          end-if\n                      end-if\n                  end-perform\n              else\n                  call 'CBL_AND' using one(dot) x by value 2\n                  if x <> 0 then move i to d end-if\n              end-if\n          \n              if d <> 0\n                  subtract x from available\n                  call 'count-patterns' using\n                      by content d n available\n                      by reference r\n                  add r to result\n                  add x to available\n              end-if\n          end-perform.\n       end program count-patterns.\n      \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21501,"user_id":50,"body":"       identification division.\n       program-id. count-patterns-from.\n       data division.\n      \n       linkage section.\n       01  p                 pic A.\n       01  l                 pic 99.\n       01  result            pic 9(5).\n      \n       procedure division using p l result.\n      * Implementation of 848engine's Python solution\n      * see https:\/\/www.codewars.com\/kata\/reviews\/5b5b9393296aee6b65001c81\/groups\/5eaa2446590f990001b72429\n          evaluate l\n          when 9\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 13792 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 15564 to result\n              when other\n              move 23280 to result\n              end-evaluate\n          when 8\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 13792 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 15564 to result\n              when other\n              move 23280 to result\n              end-evaluate\n          when 7\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 7104 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 8118 to result\n              when other\n              move 12024 to result\n              end-evaluate\n          when 6\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 2516 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 2926 to result\n              when other\n              move 4248 to result\n              end-evaluate\n          when 5\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 684 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 816 to result\n              when other\n              move 1152 to result\n              end-evaluate\n          when 4\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 154 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 188 to result\n              when other\n              move 256 to result\n              end-evaluate\n          when 3\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 31 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 37 to result\n              when other\n              move 48 to result\n              end-evaluate\n          when 2\n              evaluate true\n              when p = \"A\"  or p = \"C\"  or p = \"G\"  or p = \"I\" \n              move 5 to result\n              when p = \"B\"  or p = \"D\"  or p = \"H\"  or p = \"F\" \n              move 7 to result\n              when other\n              move 8 to result\n              end-evaluate\n          when 1\n          move 1 to result\n          when other\n          move 0 to result\n          end-evaluate\n      \n          goback.\n       end program count-patterns-from.\n\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21502,"user_id":53,"body":"       identification division.\n       program-id. count-patterns-from.\n       data division.\n       local-storage section.\n       01  x                 pic 9 value 0.\n       01  y                 pic 9 value 0.\n       01  z                 pic 9 value 0.\n       linkage section.\n       01  d                 pic A.\n       01  n                 pic 99.\n       01  r                 pic 9(5).\n       procedure division using d n r.\n          move 0 to r\n          if n > 9 or n = 0 then goback end-if\n          if n = 1 then move 1 to r, goback end-if\n          if d = 'A' or d = 'C' or d = 'G' or d = 'I'\n          then move 1 to x end-if\n          if d = 'B' or d = 'D' or d = 'H' or d = 'F'\n          then move 1 to y end-if\n          if d = 'E' then move 1 to z end-if\n          evaluate true\n            when n > 7 and x = 1   move 13792 to r\n            when n > 7 and y = 1   move 15564 to r\n            when n > 7 and z = 1   move 23280 to r\n            when n = 7 and x = 1   move  7104 to r\n            when n = 7 and y = 1   move  8118 to r\n            when n = 7 and z = 1   move 12024 to r\n            when n = 6 and x = 1   move  2516 to r\n            when n = 6 and y = 1   move  2926 to r\n            when n = 6 and z = 1   move  4248 to r\n            when n = 5 and x = 1   move   684 to r\n            when n = 5 and y = 1   move   816 to r\n            when n = 5 and z = 1   move  1152 to r\n            when n = 4 and x = 1   move   154 to r\n            when n = 4 and y = 1   move   188 to r\n            when n = 4 and z = 1   move   256 to r\n            when n = 3 and x = 1   move    31 to r\n            when n = 3 and y = 1   move    37 to r\n            when n = 3 and z = 1   move    48 to r\n            when n = 2 and x = 1   move     5 to r\n            when n = 2 and y = 1   move     7 to r\n            when n = 2 and z = 1   move     8 to r\n          end-evaluate\n          goback.\n       end program count-patterns-from.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"585a033e3a36cdc50a00011c":[{"id":21503,"user_id":50,"body":"       identification division.\n       program-id. FreqSeq.\n\n       data division.\n       local-storage section.\n       01  counter.\n           03  c          pic 9(2) occurs 127 times\n                                   indexed k.\n       01  d              pic 9.\n       01  r              pic 9.\n      \n       linkage section.\n       01  s.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic x occurs 0 to 30 times \n                          depending s-length indexed i.\n       01  sep            pic x.\n       01  result.\n           03  j   pic 9(2).\n           03  res-chars.\n               05  res-char pic x occurs 0 to 99 times \n                          depending j.\n\n       procedure division using s sep result.\n      \n          perform varying i from 1 until i > s-length\n            add 1 to c(function ord((s-char(i))))\n          end-perform\n          \n          move 0 to j\n          perform varying i from 1 until i > s-length\n      \n            divide c(function ord((s-char(i)))) by 10\n                   giving d remainder r\n      \n            evaluate d\n            when 0           add 1 to j, move r to res-char(j)\n            when other       add 1 to j, move d to res-char(j)\n                             add 1 to j, move r to res-char(j)\n            end-evaluate\n      \n            if i < s-length  add 1 to j, move sep to res-char(j)\n            end-if\n      \n          end-perform\n                \n          goback.\n       end program FreqSeq.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21504,"user_id":53,"body":"       identification division.\n       program-id. FreqSeq.\n\n       data division.\n       local-storage section.\n       01  frequencies.\n           03  c          pic 9(2) occurs 127 times\n                                   indexed k.\n       01  d              pic 9.\n       01  r              pic 9.\n       linkage section.\n       01  s.\n           03  s-length   pic 9(2).\n           03  s-chars.\n               05  s-char pic x occurs 0 to 30 times \n                          depending s-length indexed i.\n       01  sep            pic x.\n       01  result.\n           03  j   pic 9(2).\n           03  res-chars.\n               05  res-char pic x occurs 0 to 99 times \n                          depending j.\n       procedure division using s sep result.\n          perform varying i from 1 until i > s-length\n            add 1 to c(function ord((s-char(i))))\n          end-perform\n          move 0 to j\n          perform varying i from 1 until i > s-length\n            divide c(function ord((s-char(i)))) by 10\n                   giving d remainder r\n            if i > 1 then\n              add 1 to j, move sep to res-char(j)\n            end-if\n            add 1 to j\n            evaluate d\n              when 0           move r to res-char(j)\n              when other       move d to res-char(j)\n                               add 1 to j\n                               move r to res-char(j)\n            end-evaluate\n          end-perform\n          goback.\n       end program FreqSeq.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"585b1fafe08bae9988000314":[{"id":21505,"user_id":421,"body":"       identification division.\n       program-id. explode.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  n               pic 9.\n       01  m               pic 9.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-chars      pic x occurs 0 to 100 times \n                                 depending on s-length\n                                 indexed by i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 999 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n           perform varying i from 1 by 1 until i > s-length\n               move s-chars(i) to m\n               move s-chars(i) to n\n               perform until n = 0\n                   add 1 to res-length\n                   move m to res(res-length)\n                   subtract 1 from n\n               end-perform\n           end-perform.\n       end program explode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21506,"user_id":null,"body":"       identification division.\n       program-id. explode.\n       data division.\n       working-storage section.\n       01  i               pic 9(3).\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-num        pic 9 occurs 0 to 100 times \n                                 depending on s-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 999 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n          initialize result\n          perform varying i from 1 by 1 until i > s-length \n             perform s-num(i) times\n               add 1 to res-length\n               move s-num(i) to res(res-length)\n             end-perform\n          end-perform.\n          goback.\n       end program explode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21507,"user_id":168,"body":"       identification division.\n       program-id. explode.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-chars      pic 9 occurs 0 to 100 times \n                                 depending on s-length indexed i j.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 999 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n              perform varying j from 1 until j > s-chars(i)\n                  add 1 to res-length\n                  move s-chars(i) to res(res-length)\n              end-perform\n          end-perform.\n       end program explode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21508,"user_id":50,"body":"       identification division.\n       program-id. explode.\n       data division.\n       local-storage section.\n       01  n               pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-chars      pic x occurs 0 to 100 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic x occurs 0 to 999 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n              move s-chars(i) to n  \n              perform n times\n                add 1 to res-length\n                move n to res(res-length)\n              end-perform\n          end-perform\n      \n          goback.\n       end program explode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"585c50e75d0930e6a7000336":[{"id":21509,"user_id":76,"body":"       identification division.\n       program-id. coprimes.\n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 lim         pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9.\n       procedure division using n m result.\n         move 1 to result\n         move function min(m, n) to lim\n         perform varying i from 2 by 1 until i > lim\n           if function mod(n, i) = 0 and function mod(m, i) = 0\n             move 0 to result\n             goback\n           end-if\n         end-perform.\n       end program coprimes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21510,"user_id":null,"body":"       identification division.\n       program-id. coprimes.\n\n       data division.\n       working-storage section.\n       01 i           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9.\n       procedure division using n m result.\n         set result to 1\n         perform varying i from 2 until i > function min(n, m)\n              or result = 0\n           if function mod(n, i) = 0 and function mod(m, i) = 0 then\n             set result to 0\n           end-if\n         end-perform.\n       end program coprimes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21511,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. coprimes.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(4) BINARY.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 M           PIC 9(8).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N M RESULT.\n           MOVE 1  TO RESULT\n           PERFORM VARYING I FROM 2 BY 1 UNTIL I > M\n               IF  0 = (FUNCTION REM(N, I) AND FUNCTION REM(M, I))\n                   MOVE 0  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM coprimes.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21512,"user_id":53,"body":"       identification division.\n       program-id. coprimes.\n\n       data division.\n       local-storage section.\n       01 r           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9.\n       procedure division using n m result.\n          move 0 to result,\n          perform until function rem (n, m) = 0\n            compute r = function rem (n, m),\n            move m to n,\n            move r to m\n          end-perform,\n          if m = 1 then move m to result\n          goback.\n       end program coprimes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21513,"user_id":168,"body":"       identification division.\n       program-id. coprimes.\n\n       data division.\n       working-storage section.\n       01 d           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9.\n          88 coprime value 1 when set to false 0.\n       procedure division using n m result.\n          perform varying d from 2 by 1 until d > n or d > m\n              if function mod(n, d) = 0 and function mod(m, d) = 0\n                  set coprime to false\n                  goback\n              end-if\n          end-perform\n          set coprime to true.\n       end program coprimes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21514,"user_id":50,"body":"       identification division.\n       program-id. coprimes.\n\n       data division.\n       local-storage section.\n       01 g           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9.\n       procedure division using n m result.\n      \n          perform until m = 0\n            compute g = function rem(n, m)\n            move m to n\n            move g to m\n          end-perform\n        \n          if n = 1 then move 1 to result\n                   else move 0 to result end-if \n      \n          goback.\n       end program coprimes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"585d7d5adb20cf33cb000235":[{"id":21515,"user_id":421,"body":"       identification division.\n       program-id. FindUniq.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  a                 pic s9(6).\n       01  b                 pic s9(6).\n       01  c                 pic s9(6).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(4).\n           05 xs             pic s9(6) occurs 3 to 1000 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result            pic s9(6).\n      \n       procedure division using arr result.\n          move xs(1) to a\n          move xs(2) to b\n          move xs(3) to c\n          initialize result\n          if a <> b and a = c then move b to result goback end-if\n          if b <> c and a = b then move c to result goback end-if\n          if a <> c and b = c then move a to result goback end-if\n          perform varying i from 4 by 1 until i > arr-length\n              if xs(i) <> a then\n                  move xs(i) to result\n                  goback\n              end-if\n          end-perform\n          goback.\n       end program FindUniq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21516,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FindUniq.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARR-LEN        PIC  9(4).\n           05 FILLER.\n              10 ARR-VAL     PIC S9(6) OCCURS 1000 DEPENDING ARR-LEN.\n       01  RESULT            PIC S9(6).\n\n       PROCEDURE DIVISION USING ARR RESULT.\n           SORT ARR-VAL ASCENDING\n\n           IF  ARR-VAL(1) = ARR-VAL(2)\n               MOVE ARR-VAL(ARR-LEN)  TO RESULT\n           ELSE\n               MOVE ARR-VAL(1)        TO RESULT\n           END-IF.\n       END PROGRAM FindUniq.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21517,"user_id":168,"body":"       identification division.\n       program-id. FindUniq.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(4).\n           05 xs             pic s9(6) occurs 3 to 1000 times \n                                      depending on arr-length indexed i.\n       01  result            pic s9(6).\n      \n       procedure division using arr result.\n          if xs(1) = xs(2)\n              move xs(1) to result\n          else\n              move xs(3) to result\n          end-if\n          move 1 to i\n          search xs varying i\n              when xs(i) <> result move xs(i) to result\n          end-search.\n       end program FindUniq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21518,"user_id":53,"body":"       identification division.\n       program-id. FindUniq.\n       data division.\n       local-storage section.\n       01  n                 pic s9(6) value 0.\n       01  m                 pic s9(6) value 0.\n       01  x                 pic s9(6) value 0.\n       01  y                 pic s9(6) value 0.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(4).\n           05 xs             pic s9(6) occurs 3 to 1000 times \n                                       depending on arr-length\n                                       indexed by i.\n       01  result            pic s9(6).\n       procedure division using arr result.\n          initialize result\n          perform varying i from 1 until i > arr-length\n            evaluate true\n              when n = 0        set n to 1, move xs(i) to x\n              when xs(i) = x    add 1 to n\n              when m = 0        set m to 1, move xs(i) to y\n              when xs(i) = y    add 1 to m\n            end-evaluate\n            if n > 1 and m > 0 then move y to result, goback end-if\n            if m > 1 and n > 0 then move x to result, goback end-if\n          end-perform\n          goback.\n       end program FindUniq.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21519,"user_id":53,"body":"       identification division.\n       program-id. FindUniq.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(4).\n           05 c              pic s9(6) occurs 3 to 1000 times \n                                       depending on arr-length\n                                       indexed by i.\n       01  r                 pic s9(6).\n       procedure division using arr r.\n          initialize r\n          evaluate true\n            when c(1) = c(2) and c(1) <> c(3) move c(3) to r, goback\n            when c(1) = c(3) and c(1) <> c(2) move c(2) to r, goback\n            when c(3) = c(2) and c(1) <> c(3) move c(1) to r, goback\n          end-evaluate\n          perform varying i from 3 until i > arr-length\n            if c(i) <> c(1) then move c(i) to r, goback end-if\n          end-perform\n          goback.\n       end program FindUniq.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21520,"user_id":50,"body":"       identification division.\n       program-id. FindUniq.\n       data division.\n       local-storage section.\n       01  ref               pic s9(6).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(4).\n           05 xs             pic s9(6) occurs 3 to 1000 times \n                             depending on arr-length indexed i.\n       01  result            pic s9(6).\n      \n       procedure division using arr result.\n      \n          initialize result\n          move xs(1) to ref\n          if ref <> xs(2)\n             evaluate xs(3)\n             when ref      move xs(2) to result\n             when other    move ref   to result\n             end-evaluate\n             goback\n          end-if\n      \n          perform varying i from 3 until i > arr-length\n            if xs(i) <> ref move xs(i) to result goback end-if\n          end-perform\n          \n          goback.\n       end program FindUniq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"585d8c8a28bc7403ea0000c3":[{"id":21521,"user_id":50,"body":"       identification division.\n       program-id. FindUniq.\n       data division.\n       local-storage section.\n       01  ref.\n           03 pic 9 occurs 26 times.\n       01  tmp.\n           03 pic 9 occurs 26 times.\n       01  cur pic a(20).\n       01  i usage index.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 s              pic a(20) occurs 3 to 400000 times \n                             depending on arr-length indexed j.\n       01  result            pic a(20).\n      \n       procedure division using arr result.\n      \n          move function lower-case(s(1)) to cur\n          perform parser\n          move tmp to ref\n          move function lower-case(s(2)) to cur\n          perform parser\n          if tmp <> ref\n              move function lower-case(s(3)) to cur\n              perform parser\n              if tmp <> ref \n                 move s(1) to result\n              else\n                 move s(2) to result\n              end-if\n              goback\n          end-if\n          \n          perform varying j from 3 until j > arr-length\n              move function lower-case(s(j)) to cur\n              perform parser\n              if tmp <> ref\n                move s(j) to result\n                goback\n              end-if\n           end-perform\n      \n          goback.\n      \n          parser.\n           move '00000000000000000000000000' to tmp\n           perform varying i from 1 until i = 21\n                if cur(i:1) <> ' '\n                  move 1 to tmp(function ord(cur(i:1)) - 97:1)\n                end-if\n           end-perform\n               .\n       \n       end program FindUniq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21522,"user_id":53,"body":"       identification division.\n       program-id. FindUniq.\n       data division.\n       local-storage section.\n       01  ref.\n           03                pic 9 occurs 26 times.\n       01  tmp.\n           03                pic 9 occurs 26 times.\n       01  cur               pic a(20).\n       01  i                 usage index.\n       01  j                 usage index.\n       01  k                 usage index.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 s              pic a(20) occurs 3 to 400000 times \n                             depending on arr-length.\n       01  result            pic a(20).\n       procedure division using arr result.\n      \n      * couldn't find a faster alternative than akar's solution\n          perform init-case\n          perform iterate\n          goback.\n\n          init-case.\n            perform case\n            move tmp to ref\n            perform case\n            if tmp <> ref\n              perform case\n              if tmp <> ref then\n                move s(1) to result\n              else\n                move s(2) to result\n              end-if\n              goback\n            end-if\n            .\n            \n          iterate.\n            set k to 2\n            perform varying j from 3 until j > arr-length\n              perform case\n              if tmp <> ref then\n                move s(j) to result\n                goback\n              end-if\n            end-perform\n            .\n      \n          case.\n            add 1 to k\n            move function lower-case(s(k)) to cur\n            perform hash-set\n            .\n      \n          hash-set.\n            move '00000000000000000000000000' to tmp\n            perform varying i from 1 until i = 21\n              if cur(i:1) <> ' '\n                move 1 to tmp(function ord(cur(i:1)) - 97:1)\n              end-if\n            end-perform\n            .\n\n       end program FindUniq.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5861d28f124b35723e00005e":[{"id":21523,"user_id":421,"body":"       identification division.\n       program-id. ZeroFuel.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.      \n          initialize result\n          if distanceToPump <= fuel * mpg then\n              set result to 1\n          end-if.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21524,"user_id":null,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.\n          initialize result.\n          if (mpg * fuel) >= distanceToPump then\n            move 1 to result\n          end-if.\n          goback.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21525,"user_id":168,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.\n          if distanceToPump <= fuel * mpg then\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21526,"user_id":null,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.\n          initialize result\n          if distanceToPump > mpg * fuel then set result to 0\n          else                                set result to 1\n          end-if\n          goback.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21527,"user_id":null,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.\n          if distanceToPump <= mpg * fuel\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      * Assign `1` to result for `true`, otherwise `0`\n      \n          goback.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21528,"user_id":163,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.\n          IF DiStAnCeToPuMp > fuel * mpg MOVE 0 TO result\n          ELSE MOVE 1 TO result.    \n          goback.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21529,"user_id":53,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 distanceToPump   pic 9(3)v9.\n       01 mpg              pic 9(2)v9.\n       01 fuel             pic 9v9.\n       01 result           pic 9.\n      \n       procedure division using distanceToPump mpg fuel result.\n      \n          initialize result\n          if mpg * fuel >= distanceToPump then set result to 1 end-if\n          goback.\n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21530,"user_id":50,"body":"       identification division.\n       program-id. ZeroFuel.\n      \n       data division.\n\n       linkage section.\n       01 d          pic 9(3)v9.\n       01 m          pic 9(2)v9.\n       01 f          pic 9v9.\n       01 result     pic 9.\n      \n       procedure division using d m f result.\n      \n          if d <= m * f\n                move 1 to result\n          else  move 0 to result.\n      \n       end program ZeroFuel.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5862e7c63f8628a126000e18":[{"id":21531,"user_id":421,"body":"       identification division.\n       program-id. BoxCapacity.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  len               pic 9(3).\n       01  width             pic 9(3).\n       01  height            pic 9(3).\n       01  result            pic 9(12).      \n       procedure division using len width height result.\n           compute result = (len * 12 \/ 16) * (width * 12 \/ 16) \n                            * (height * 12 \/ 16).\n       end program BoxCapacity.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21532,"user_id":null,"body":"       identification division.\n       program-id. BoxCapacity.\n       data division.\n      \n       linkage section.\n       01  len               pic 9(3).\n       01  width             pic 9(3).\n       01  height            pic 9(3).\n       01  result            pic 9(12).\n      \n       procedure division using len width height result.\n        compute result rounded mode toward-lesser\n          = (len * 12 \/ 16) * (width * 12 \/ 16) * (height * 12 \/ 16).\n       end program BoxCapacity.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21533,"user_id":168,"body":"       identification division.\n       program-id. BoxCapacity.\n       data division.\n      \n       linkage section.\n       01  len               pic 9(3).\n       01  width             pic 9(3).\n       01  height            pic 9(3).\n       01  result            pic 9(12).\n      \n       procedure division using len width height result.\n          compute result = function integer(3 * len \/ 4)\n                            * function integer(3 * width \/ 4)\n                            * function integer(3 * height \/ 4).\n       end program BoxCapacity.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21534,"user_id":50,"body":"       identification division.\n       program-id. BoxCapacity.\n       data division.\n      \n       linkage section.\n       01  len               pic 9(3).\n       01  width             pic 9(3).\n       01  height            pic 9(3).\n       01  result            pic 9(12).\n      \n       procedure division using len width height result.\n      \n          compute result = function integer(len * 0.75) *\n                           function integer(width * 0.75) * \n                           function integer(height * 0.75)\n      \n          goback.\n       end program BoxCapacity.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58649884a1659ed6cb000072":[{"id":21535,"user_id":168,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n          88  green  value 'green'.\n          88  yellow value 'yellow'.\n          88  red    value 'red'.\n       01  result      pic A(6).\n       procedure division using curr result.\n          evaluate true\n              when green  move 'yellow' to result\n              when yellow move 'red' to result\n              when red    move 'green' to result\n          end-evaluate.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21536,"user_id":null,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n      * your code here\n       if curr = 'green'\n         move 'yellow' to result\n       end-if\n       if curr = 'yellow'\n         move 'red' to result\n       end-if\n       if curr = 'red'\n       move 'green' to result\n       end-if\n           goback.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21537,"user_id":null,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n           EVALUATE curr\n              WHEN \"green\" \n                 MOVE \"yellow\" TO result\n              WHEN \"yellow\" \n                 MOVE \"red\" TO result\n              WHEN OTHER \n                 MOVE \"green\" TO result\n           END-EVALUATE\n           goback.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21538,"user_id":null,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n           evaluate curr\n              when 'green'  move 'yellow' to result\n              when 'yellow' move 'red'    to result\n              when 'red'    move 'green'  to result\n              when other    initialize result\n           end-evaluate\n           goback.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21539,"user_id":null,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n       if curr=\"red\" move \"green\" to result\n       else if curr=\"yellow\" move \"red\" to result\n       else if curr=\"green\" move \"yellow\" to result\n           goback.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21540,"user_id":null,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n           evaluate curr\n               when \"green\"\n                   move \"yellow\" to result\n               when \"yellow\"\n                   move \"red\" to result\n               when \"red\"\n                   move \"green\" to result\n           end-evaluate.\n           goback.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21541,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. trafficLight.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  CURR        PIC A(6).\n       01  RESULT      PIC A(6).\n       PROCEDURE DIVISION USING CURR RESULT.\n           EVALUATE  CURR(1:1)\n               WHEN 'g'  MOVE 'yellow'  TO RESULT\n               WHEN 'y'  MOVE 'red'     TO RESULT\n               WHEN 'r'  MOVE 'green '  TO RESULT\n           END-EVALUATE.\n       END PROGRAM trafficLight.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21542,"user_id":50,"body":"       identification division.\n       program-id. trafficLight.          \n       data division.\n\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n           \n           evaluate curr\n           when 'green'   move 'yellow' to result\n           when 'yellow'  move 'red'    to result\n           when 'red'     move 'green'  to result\n           when other     move 'unknown traffic light' to result\n           end-evaluate\n    \n           goback.\n       end program trafficLight.\n\n                             ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21543,"user_id":53,"body":"       identification division.\n       program-id. trafficLight.      \n       data division.\n       linkage section.    \n       01  e        pic A(6).\n       01  r        pic A(6).\n       procedure division using e r.\n           evaluate e\n             when \"green\"   move \"yellow\" to r\n             when \"yellow\"  move \"red\" to r\n             when \"red\"     move \"green\" to r\n           end-evaluate\n           goback.\n       end program trafficLight.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21544,"user_id":421,"body":"       identification division.\n       program-id. trafficLight. \n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.    \n       01  curr        pic A(6).\n       01  result      pic A(6).\n       procedure division using curr result.\n           evaluate curr \n              when 'green'    move \"yellow\" to result\n              when 'yellow'   move \"red\"    to result\n              when other      move 'green'  to result\n          end-evaluate.\n       end program trafficLight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5864eb8039c5ab9cd400005c":[{"id":21545,"user_id":168,"body":"       identification division.\n       program-id. median.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 tbl occurs 1 to 9 times depending on arr-length.\n              10 xs          pic 9(4).\n\n       01  result            pic 9(4)v9.\n      \n       procedure division using arr result.\n           sort tbl on ascending xs\n           compute result = (xs(arr-length \/ 2 + 1) \n                             + xs((arr-length - 1) \/ 2 + 1)) \/ 2.\n       end program median.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21546,"user_id":421,"body":"       identification division.\n       program-id. median.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             occurs 1 to 9 times \n                             depending on arr-length.\n              07 val         pic 9(4).\n       01  result            pic 9(4)v9.\n      \n       procedure division using arr result.\n           sort xs ascending key val\n           if function rem(arr-length, 2) = 1 then\n               move val(arr-length \/ 2 + 1) to result\n               goback\n           end-if\n           compute result = (val(arr-length \/ 2) + \n                             val(arr-length \/ 2 + 1) ) \/ 2.          \n       end program median.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21547,"user_id":50,"body":"       identification division.\n       program-id. median.\n       data division.\n       local-storage section.\n       01  l                pic 9.\n       01  i                pic 99.\n       01  j                pic 99.\n       01  tmp              pic 9(4).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             pic 9(4) occurs 1 to 9 times \n                                  depending on arr-length.\n       01  result            pic 9(4)v9.\n      \n       procedure division using arr result.\n      \n           perform varying i from 1 until i = arr-length\n              compute j = i + 1\n              perform until j > arr-length\n                if xs(i) > xs(j)\n                   move xs(i) to tmp\n                   move xs(j) to xs(i)\n                   move tmp to xs(j)\n                end-if\n                add 1 to j\n              end-perform\n            end-perform\n      \n           compute l = function integer(arr-length \/ 2) + 1\n           if function rem(arr-length, 2) = 1\n              move xs(l) to result\n           else\n              compute result = (xs(l - 1) + xs(l)) \/ 2\n           end-if\n      \n           goback.\n       end program median.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21548,"user_id":53,"body":"       identification division.\n       program-id. median.\n       data division.\n       local-storage section.\n       01  x                pic 9(4).\n       01  a                pic 9(4).\n       01  b                pic 9(4).\n       linkage section.\n       01  arr.\n           05 n              pic 9.\n           05 xs             pic 9(4) occurs 1 to 9 times \n                                  depending on n\n                                  indexed by i, j.\n       01  r                 pic 9(4)v9.\n       procedure division using arr r.\n           perform varying i from 1 until i = n\n              compute j = i + 1\n              perform until j > n\n                if xs(i) > xs(j)\n                   move xs(i) to x\n                   move xs(j) to xs(i)\n                   move x to xs(j)\n                end-if\n                add 1 to j\n              end-perform\n           end-perform\n           compute a = function integer (n \/ 2) + 1\n           compute b = n - function integer (n \/ 2)\n           compute r = (xs(a) + xs(b)) \/ 2\n           goback.\n       end program median.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5865cff66b5699883f0001aa":[{"id":21549,"user_id":421,"body":"       identification division.\n       program-id. ToTime.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  hr              pic 9(3).\n       01  min             pic 9(2).\n       01  hr-str          pic z(2)9.\n       01  min-str         pic z9.\n       linkage section.\n       01  secs            pic 9(6).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res.          \n               07          pic x occurs 0 to 40 times \n                                 depending on res-length\n                                 indexed by j.\n      \n       procedure division using secs result.\n          initialize result\n          compute hr = secs \/ 3600\n          compute min = function rem(secs, 3600) \/ 60\n          move hr to hr-str\n          move min to min-str\n          set j to 1\n          set res-length to 40\n          string function trim(hr-str) \" hour(s) and \"\n                 function trim(min-str) \" minute(s)\" \n          into res pointer j\n          compute res-length = 23 + function log10(hr) + \n                               function log10(min) + 2.\n       end program ToTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21550,"user_id":168,"body":"       identification division.\n       program-id. ToTime.\n       data division.\n       working-storage section.\n       01 h pic zzzz9.\n       01 m pic z9.\n       01 i usage index.\n      \n       linkage section.\n       01  secs pic 9(6).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res.         \n              10 pic x occurs 0 to 40 times \n                                 depending on res-length.\n      \n       procedure division using secs result.\n          compute h = secs \/ 3600\n          compute m = function mod(secs 3600) \/ 60\n          move 99 to res-length\n          move 1 to i\n          string function trim(h)\n            ' hour(s) and '\n            function trim(m)\n            ' minute(s)'\n            into res with pointer i\n          compute res-length = i - 1\n          goback.\n       end program ToTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21551,"user_id":53,"body":"       identification division.\n       program-id. ToTime.\n       data division.\n       local-storage section.\n       01  h    pic 9(4).\n       01  s    pic 9(4).\n       01  a    pic z(3)9.\n       01  b    pic z(1)9.\n       linkage section.\n       01  secs pic 9(6).\n       01  result.\n           05 res-length             pic 9(2).\n           05 xs.\n              07 res    pic x occurs 0 to 40 times \n                        depending on res-length \n                        indexed by i.\n       procedure division using secs result.\n          initialize result\n          move 99 to res-length\n          divide 3600 into secs giving h remainder s\n          divide 60 into s\n          move h to a, move s to b\n          set i to 1\n          string function trim(a) ' hour(s) and '\n            function trim(b) ' minute(s)'\n          into xs pointer i\n          subtract 1 from i giving res-length\n          goback.\n       end program ToTime.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21552,"user_id":50,"body":"       identification division.\n       program-id. ToTime.\n       data division.\n       local-storage section.\n       01  h    pic 9(4).\n       01  s    pic 9(4).\n       01  a    pic z(3)9.\n       01  b    pic z(1)9.\n      \n       linkage section.\n       01  secs pic 9(6).\n       01  result.\n           05 res-length   pic 9(2).\n           05 chr.\n              07 res          pic x occurs 0 to 40 times \n                           depending on res-length indexed i.\n      \n       procedure division using secs result.\n      \n          move 40 to res-length\n          divide secs by 3600 giving h remainder s\n          divide 60 into s\n          move h to a\n          move s to b\n          set i to 1\n          string function trim(a) ' hour(s) and '\n                 function trim(b) ' minute(s)'\n          into chr pointer i\n          compute res-length = i - 1\n      \n          goback.\n       end program ToTime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58678d29dbca9a68d80000d7":[{"id":21553,"user_id":168,"body":"       identification division.\n       program-id. interpreter.\n       data division.\n       working-storage section.\n       01  stack pic 9(4) occurs 3000 times indexed by k.\n       01  jumps pic 9(4) occurs 3000 times.\n       \n       linkage section.\n       01  code-strng.\n           03  code-length    pic 9(4).\n           03  commands.\n               05  cmd        pic x occurs 0 to 3000 times \n                              depending code-length indexed by i.\n       01  tape-strng.\n           03  tape-length    pic 9(4).\n           03  chars.\n               05  chr        pic x occurs 0 to 1000 times \n                              depending tape-length.\n       01  result.\n           03  res-length     pic 9(4).\n           03  res-chars.\n               05  res        pic x occurs 0 to 1000 times \n                              depending res-length indexed by j.\n      \n       procedure division using code-strng tape-strng result.\n          move 0 to k\n          perform varying i from 1 until i > code-length\n              evaluate cmd(i)\n                  when '['\n                      add 1 to k\n                      move i to stack(k)\n                  when ']'\n                      move stack(k) to j\n                      move i to jumps(j)\n                      move j to jumps(i)\n                      subtract 1 from k\n              end-evaluate\n          end-perform\n      \n          move tape-strng to result\n          move 1 to j\n          perform varying i from 1 until i > code-length or \n                                         j < 1 or j > res-length\n              evaluate cmd(i)\n                  when '>' add 1 to j\n                  when '<' subtract 1 from j\n                  when '*' inspect res(j) converting '01' to '10'\n                  when '[' if res(j) = '0' move jumps(i) to i end-if\n                  when ']' if res(j) = '1' move jumps(i) to i end-if\n              end-evaluate\n          end-perform\n          goback.\n       end program interpreter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21554,"user_id":53,"body":"       identification division.\n       program-id. interpreter.\n       data division.\n       local-storage section.\n       01  jump-map.\n           03 jumps           pic 9(4) occurs 3000 times.\n       01  open-stack.\n           03 arr.\n              05 opens        pic 9(4) occurs 3000 times\n                              indexed by op.\n       linkage section.\n       01  code-strng.\n           03  code-length    pic 9(4).\n           03  commands.\n               05  cmd        pic x occurs 0 to 3000 times \n                              depending code-length indexed ip.\n       01  tape-strng.\n           03  tape-length    pic 9(4).\n           03  chars.\n               05  chr        pic x occurs 0 to 1000 times \n                              depending tape-length.\n       01  result.\n           03  res-length     pic 9(4).\n           03  res-chars.\n               05  res        pic x occurs 0 to 1000 times \n                              depending res-length indexed dp.\n       procedure division using code-strng tape-strng result.\n          \n          initialize result\n          perform do-jumps\n          perform do-interpret\n          goback.\n      \n          do-jumps.\n            move 0 to op\n            perform varying ip from 1 until ip > code-length\n              evaluate cmd(ip)\n                when '['\n                  add 1 to op\n                  move ip to opens(op)\n                when ']'\n                  move opens(op) to jumps(ip)\n                  move ip to jumps(opens(op))\n                  subtract 1 from op\n              end-evaluate\n            end-perform\n            .\n      \n        do-interpret.\n          move 1 to ip, dp\n          move tape-strng to result\n          perform until ip > code-length or dp < 1 or dp > tape-length\n            evaluate cmd(ip)\n              when '*'\n                if res(dp) = '0' then\n                  move '1' to res(dp)\n                else\n                  move '0' to res(dp)\n                end-if\n              when '>'\n                add 1 to dp\n              when '<'\n                subtract 1 from dp\n              when '['\n                if res(dp) = '0' then\n                  move jumps(ip) to ip\n                end-if\n              when ']'\n                if res(dp) = '1' then\n                  move jumps(ip) to ip\n                end-if\n            end-evaluate\n            add 1 to ip\n          end-perform\n          .\n      \n       end program interpreter.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21555,"user_id":50,"body":"       identification division.\n       program-id. interpreter.\n       data division.\n       local-storage section.\n       01  PseudoHashMap.\n           03 k               pic 9(4) occurs 3000 times.\n       01  stack.\n           03 arr.\n              05 xs           pic 9(4) occurs 3000 times\n                              indexed h.\n      \n       linkage section.\n       01  code-strng.\n           03  code-length    pic 9(4).\n           03  commands.\n               05  cmd        pic x occurs 0 to 3000 times \n                              depending code-length indexed i.\n       01  tape-strng.\n           03  tape-length    pic 9(4).\n           03  chars.\n               05  chr        pic x occurs 0 to 1000 times \n                              depending tape-length.\n       01  result.\n           03  res-length     pic 9(4).\n           03  res-chars.\n               05  res        pic x occurs 0 to 1000 times \n                              depending res-length indexed ptr.\n      \n       procedure division using code-strng tape-strng result.\n      \n          initialize result, PseudoHashMap\n          move tape-length to res-length\n          move chars to res-chars\n          move 0 to h\n          \n          perform varying i from 1 until i > code-length\n            evaluate cmd(i)\n            when '['      add    1    to  h\n                          move   i    to  xs(h)\n            when ']'      move xs(h)  to  k(i)\n                          move   i    to  k(xs(h))\n                          subtract 1 from h\n            end-evaluate\n          end-perform\n      \n          move 1 to i, ptr\n      \n          perform until i < 1 or i   >  code-length\n                  or  ptr < 1 or ptr >  tape-length\n            evaluate cmd(i)\n            when '>'      add        1  to   ptr\n            when '<'      subtract   1  from ptr\n            when '*'      perform   flip\n            when '['      perform   forth\n            when ']'      perform   back\n            end-evaluate\n            add 1 to i\n          end-perform\n            \n          goback.\n        \n            flip.\n              if res(ptr) = '1', move '0' to res(ptr)\n              else             move '1' to res(ptr), end-if\n             .\n            \n            forth.\n              if res(ptr) = 0,  move k(i) to i, end-if\n             .\n      \n            back.\n              if res(ptr) <> 0, move k(i) to i, end-if\n             .\n      \n       end program interpreter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"586dd26a69b6fd46dd0000c0":[{"id":21556,"user_id":50,"body":"       identification division.\n       program-id. MyFirstInterpreter.\n       data division.\n       local-storage section.\n       01  n               pic 9(3).\n      \n       linkage section.\n       01  strng.\n           03  s-length    pic 9(4).\n           03  commands.\n               05  cmd     pic x occurs 0 to 9999 times \n                           depending s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-chars.\n               07 res      pic x occurs 0 to 26 times \n                                 depending res-length.\n      \n       procedure division using strng result.\n      \n          initialize result\n          move 0 to n\n      \n          perform varying i from 1 until i > s-length\n            evaluate  cmd(i)\n            when '+'     move function rem(n + 1, 256) to n\n            when '.'     add 1 to res-length\n                         move function char(n + 1) to res(res-length)\n            end-evaluate\n          end-perform\n      \n          goback.\n      \n       end program MyFirstInterpreter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21557,"user_id":53,"body":"       identification division.\n       program-id. MyFirstInterpreter.\n       data division.\n       local-storage section.\n       01  m               pic 9(3).\n       linkage section.\n       01  strng.\n           03  s-length    pic 9(4).\n           03  commands.\n               05  cmd     pic x occurs 0 to 9999 times \n                           depending s-length indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-chars.\n               07 res      pic x occurs 0 to 26 times \n                                 depending res-length.\n       procedure division using strng result.\n          initialize result\n          set m to 0\n          perform varying i from 1 until i > s-length\n            evaluate cmd(i)\n              when '+'     \n                move function rem(m + 1, 256) to m\n              when '.'     \n                add 1 to res-length\n                move function char(m + 1) to res(res-length)\n            end-evaluate\n          end-perform\n          goback.\n       end program MyFirstInterpreter.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21558,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MyFirstInterpreter.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  MEM             PIC 9(3) VALUE 1.\n       LINKAGE SECTION.\n       01  STRNG.\n           05  STR-LEN     PIC 9(4).\n           05  CMD         PIC X(1) OCCURS 0 TO 9999 DEPENDING STR-LEN \n                                    INDEXED I.\n       01  RESULT.\n           05  RES-LEN     PIC 9(2).\n           05  RES         PIC X(1) OCCURS 0 TO 26   DEPENDING RES-LEN.\n      \n       PROCEDURE DIVISION USING STRNG RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > STR-LEN \n               EVALUATE CMD(I)\n                   WHEN '+'  \n                         MOVE FUNCTION REM(MEM + 1, 256)  TO MEM\n                   WHEN '.'  \n                         ADD  1                   TO RES-LEN\n                         MOVE FUNCTION CHAR(MEM)  TO RES(RES-LEN)\n               END-EVALUATE\n           END-PERFORM.\n       END PROGRAM MyFirstInterpreter.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21559,"user_id":168,"body":"       identification division.\n       program-id. MyFirstInterpreter.\n       data division.\n       local-storage section.\n       01  x               usage binary-char unsigned.\n      \n       linkage section.\n       01  strng.\n           03  s-length    pic 9(4).\n           03  commands.\n               05  cmd     pic x occurs 0 to 9999 times \n                                 depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-chars.\n               07 res      pic x occurs 0 to 26 times \n                                 depending on res-length.\n      \n       procedure division using strng result.\n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n              evaluate cmd(i)\n                  when '+' add 1 to x\n                  when '.'\n                      add 1 to res-length\n                      move function char(x + 1) to res(res-length)\n              end-evaluate\n          end-perform.\n       end program MyFirstInterpreter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"586e4c61aa0428f04e000069":[{"id":21560,"user_id":null,"body":"       identification division.\n       program-id. decimal-part.\n      \n       data division.\n       linkage section.\n       01 n           pic s9(8)v9(9) sign leading.\n       01 result      pic s9(8)v9(9) sign leading.\n       procedure division using n result.\n         compute result = function rem(function abs(n), 1).\n       end program decimal-part.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21561,"user_id":null,"body":"       identification division.\n       program-id. decimal-part.\n      \n       data division.\n       local-storage section.\n       01 fract       pic v9(9).\n       linkage section.\n       01 n           pic s9(8)v9(9) sign leading.\n       01 result      pic s9(8)v9(9) sign leading.\n       procedure division using n result.\n          move n to fract.\n          move fract to result.\n          goback.\n       end program decimal-part.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21562,"user_id":168,"body":"       identification division.\n       program-id. decimal-part.\n      \n       data division.\n       linkage section.\n       01 n           pic s9(8)v9(9) sign leading.\n       01 result      pic s9(8)v9(9) sign leading.\n       procedure division using n result.\n          compute result = function mod(function abs(n), 1).\n       end program decimal-part.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21563,"user_id":76,"body":"       identification division.\n       program-id. decimal-part.\n      \n       data division.\n       linkage section.\n       01 n           pic s9(8)v9(9) sign leading.\n       01 result      pic s9(8)v9(9) sign leading.\n       procedure division using n result.\n         compute result = function abs(n - function integer-part(n)).\n       end program decimal-part.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21564,"user_id":53,"body":"       identification division.\n       program-id. decimal-part.\n      \n       data division.\n       linkage section.\n       01 n           pic s9(8)v9(9) sign leading.\n       01 result      pic s9(8)v9(9) sign leading.\n       procedure division using n result.\n          compute result = function rem (function abs(n), 1)\n          goback.\n       end program decimal-part.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21565,"user_id":50,"body":"       identification division.\n       program-id. decimal-part.\n      \n       data division.\n       linkage section.\n       01 n           pic s9(8)v9(9) sign leading.\n       01 result      pic s9(8)v9(9) sign leading.\n       procedure division using n result.\n      \n          compute result = function abs(function rem(n, 1))\n\n          goback.\n       end program decimal-part.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"586ec0b8d098206cce001141":[{"id":21566,"user_id":168,"body":"       identification division.\n       program-id. InverseSlice.\n       data division.\n      \n       linkage section.\n        01  items.\n            05 items-length     pic 9(2).\n            05 xs               pic 9(2)  occurs 5 to 30 times\n                                depending on items-length indexed i.\n        01  a                    pic 9(2).\n        01  b                    pic 9(2).\n        01  result.\n            05 res-length     pic 9(2).\n            05 res            pic 9(2)  occurs 5 to 30 times\n                              depending on items-length.\n      \n       procedure division using items a b result. \n           move 0 to res-length\n           perform varying i from 1 until i >= a or i > items-length\n               add 1 to res-length\n               move xs(i) to res(res-length)\n           end-perform\n           perform varying i from b until i > items-length\n               add 1 to res-length\n               move xs(i) to res(res-length)\n           end-perform.\n       end program InverseSlice.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21567,"user_id":53,"body":"       identification division.\n       program-id. InverseSlice.\n       data division.\n       linkage section.\n        01  items.\n            05 items-length   pic 9(2).\n            05 xs             pic 9(2)  occurs 5 to 30 times\n                              depending on items-length\n                              indexed by i.\n        01  a                 pic 9(2).\n        01  b                 pic 9(2).\n        01  result.\n            05 res-length     pic 9(2).\n            05 res            pic 9(2)  occurs 5 to 30 times\n                              depending on items-length.\n       procedure division using items a b result. \n          initialize result\n          perform varying i from 1 until i > items-length\n            if i < a or i >= b then\n              add 1 to res-length\n              move xs(i) to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program InverseSlice.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21568,"user_id":50,"body":"       identification division.\n       program-id. InverseSlice.\n       data division.\n      \n       linkage section.\n        01  items.\n            05 items-length     pic 9(2).\n            05 xs               pic 9(2)  occurs 5 to 30 times\n                                depending on items-length\n                                indexed by i.\n        01  a                    pic 9(2).\n        01  b                    pic 9(2).\n        01  result.\n            05 res-length     pic 9(2).\n            05 res            pic 9(2)  occurs 5 to 30 times\n                              depending on items-length\n                              indexed by j.\n      \n       procedure division using items a b result. \n           move 0 to res-length, j\n           perform varying i from 1 until i = a\n              add 1 to res-length, j\n              move xs(i) to res(j)\n           end-perform\n           perform varying i from b until i > items-length\n              add 1 to res-length, j\n              move xs(i) to res(j)\n           end-perform\n           goback.\n       end program InverseSlice.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"586f6741c66d18c22800010a":[{"id":21569,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n           PERFORM UNTIL A > B\n               ADD A TO RESULT\n               ADD D TO A\n           END-PERFORM.\n       END PROGRAM SEQUENCE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21570,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 N           PIC 9(9) COMP.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n           PERFORM VARYING N FROM A BY D UNTIL N > B\n               ADD N  TO RESULT\n           END-PERFORM.\n       END PROGRAM SEQUENCE-SUM.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21571,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n            INITIALIZE RESULT\n            PERFORM VARYING I FROM A BY D UNTIL I>B\n              ADD I TO RESULT\n            END-PERFORM\n            GOBACK.\n       END PROGRAM SEQUENCE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21572,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n            MOVE 0 TO RESULT\n            IF A > B THEN\n              GOBACK\n            END-IF\n            MOVE A TO RESULT\n            PERFORM UNTIL A + D > B\n              COMPUTE A = A + D\n              COMPUTE RESULT = RESULT + A\n            END-PERFORM .\n       END PROGRAM SEQUENCE-SUM.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21573,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n       PERFORM UNTIL A > B\n         ADD A TO RESULT GIVING RESULT\n         ADD D TO A GIVING A\n       END-PERFORM.\n       END PROGRAM SEQUENCE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21574,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       DATA DIVISION.\n       working-storage section.\n       01 n           pic 9(9).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n           move 0 to result\n           perform varying n from a by d until n > b\n              add n to result\n           end-perform.\n       END PROGRAM SEQUENCE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21575,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQUENCE-SUM.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 N           PIC S9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 D           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B D RESULT.\n\n            Compute n = (b - a) \/ d + 1\n            If n >= 0\n                Compute result = n * (2 * a + (n - 1) * d) \/ 2\n            else\n                Move 0 to result\n            end-if.\n            Goback.\n       END PROGRAM SEQUENCE-SUM.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58712dfa5c538b6fc7000569":[{"id":21576,"user_id":421,"body":"       identification division.\n       program-id. red-beads.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n           INITIALIZE result\n           IF n > 1 THEN\n               COMPUTE result = (n - 1) * 2\n           END-IF.\n       end program red-beads.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21577,"user_id":null,"body":"       identification division.\n       program-id. red-beads.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n       MOVE 0 TO result.\n       IF n > 2 THEN\n        COMPUTE result = n * 2 - 2.\n       end program red-beads.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21578,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. red-beads.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF  N > 1\n               COMPUTE RESULT = (N - 1) * 2\n           END-IF.\n       END PROGRAM red-beads.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21579,"user_id":null,"body":"       identification division.\n       program-id. red-beads.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          if n > 0 then\n            compute result = 2 * n - 2\n          end-if\n          goback.\n       end program red-beads.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21580,"user_id":168,"body":"       identification division.\n       program-id. red-beads.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = function max(2 * (n - 1) 0).\n       end program red-beads.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21581,"user_id":53,"body":"       identification division.\n       program-id. red-beads.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = function max (0, 2 * (n - 1)),\n          goback.\n       end program red-beads.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21582,"user_id":50,"body":"       identification division.\n       program-id. red-beads.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          if n < 2\n            move 0 to result\n          else\n            compute result = 2 * (n - 1)\n          end-if\n      \n          goback.\n       end program red-beads.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5875b200d520904a04000003":[{"id":21583,"user_id":null,"body":"       identification division.\n       program-id. enoughSpace.       \n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn         pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic S9(3).\n       procedure division using cap onn waitt result.\n          compute result = waitt - (cap - onn).\n          if result < 0\n            compute result = 0.\n           goback.\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21584,"user_id":168,"body":"       identification division.\n       program-id. enoughSpace.       \n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn         pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic 9(3).\n       procedure division using cap onn waitt result.\n           move function max(onn + waitt - cap, 0) to result.\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21585,"user_id":421,"body":"       identification division.\n       program-id. enoughSpace.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn         pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic 9(3).\n       procedure division using cap onn waitt result.\n           COMPUTE result = FUNCTION MAX(waitt - cap + onn, 0).\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21586,"user_id":null,"body":"       identification division.\n       program-id. enoughSpace.       \n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn         pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic 9(3).\n       procedure division using cap onn waitt result.\n           compute result = function max(0, -cap + onn + waitt)\n           goback.\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21587,"user_id":null,"body":"       identification division.\n       program-id. enoughSpace.       \n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn        pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic 9(3).\n       procedure division using cap onn waitt result.\n       if onn + waitt <= cap\n       move 0 to result\n       else\n       compute result = (waitt + onn) - cap\n           goback.\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21588,"user_id":1277,"body":"       identification division.\n       program-id. enoughSpace.\n       AUTHOR. \"Souzooka\".\n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn         pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic 9(3).\n       procedure division using cap onn waitt result.\n           COMPUTE result = FUNCTION MAX(0, onn + waitt - cap)\n           .\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21589,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. enoughSpace.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  CAP         PIC 9(3).\n       01  ONN         PIC 9(3). \n       01  WAITT       PIC 9(2).\n       01  RESULT      PIC 9(3).\n       PROCEDURE DIVISION USING CAP ONN WAITT RESULT.\n           COMPUTE RESULT = FUNCTION MAX(0, (ONN + WAITT - CAP)).\n       END PROGRAM enoughSpace.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21590,"user_id":50,"body":"       identification division.\n       program-id. enoughSpace.       \n       data division.\n       linkage section.\n       01  cap         pic 9(3).\n       01  onn         pic 9(3). \n       01  waitt       pic 9(2).\n       01  result      pic 9(3).\n       procedure division using cap onn waitt result.\n      \n           evaluate function max(0, cap - onn - waitt + 1)\n           when <> 0      move 0 to result\n           when other    compute result = waitt - cap + onn\n           end-evaluate\n      \n           goback.\n       end program enoughSpace.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21591,"user_id":53,"body":"       identification division.\n       program-id. enoughSpace.\n       data division.\n       linkage section.\n       01  c           pic 9(3).\n       01  o           pic 9(3). \n       01  w           pic 9(2).\n       01  r           pic 9(3).\n       procedure division using c o w r.\n          move function max(w - c + o, 0) to r\n          goback.\n       end program enoughSpace.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"587a88a208236efe8500008b":[{"id":21592,"user_id":421,"body":"       identification division.\n       program-id. sequence-sum.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 n            pic s9(9).\n       linkage section.\n       01 beg          pic s9(8).\n       01 nd           pic s9(8).\n       01 step         pic s9(8).\n       01 result       pic s9(20) sign leading.\n       procedure division using beg nd step result.           \n           compute n = (nd - beg) \/ step + 1\n           if n <= 0 then\n               set result to 0\n               goback\n           end-if\n           compute result = (beg * 2 + step * (n - 1)) * n \/ 2.\n       end program sequence-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21593,"user_id":53,"body":"       identification division.\n       program-id. sequence-sum.\n      \n       data division.\n       local-storage section.\n       01 a            pic s9(20).\n       01 b            pic s9(20). \n       01 d            pic s9(20)v9(16).\n       linkage section.\n       01 beg          pic s9(8).\n       01 nd           pic s9(8).\n       01 step         pic s9(8).\n       01 result       pic s9(20) sign leading.\n       procedure division using beg nd step result.\n          move 0 to result\n          if beg > nd and step > 0 then goback end-if\n          if beg < nd and step < 0 then goback end-if\n          if beg = nd or step = 0 then goback end-if\n          compute a = nd - (function mod (nd - beg, step))\n          compute b = (a - beg) \/ step + 1\n          compute d = (a + beg) \/ 2.0\n          compute result = b * d\n          goback.\n       end program sequence-sum.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21594,"user_id":168,"body":"       identification division.\n       program-id. sequence-sum.\n      \n       data division.\n       working-storage section.\n       01 k            pic 9(10).\n       linkage section.\n       01 beg          pic s9(8).\n       01 nd           pic s9(8).\n       01 step         pic s9(8).\n       01 result       pic s9(20) sign leading.\n       procedure division using beg nd step result.\n          compute k = 0\n          evaluate beg also step\n              when < nd also > 0\n                  compute k = (nd - beg) \/ step + 1\n              when > nd also < 0\n                  compute k = (beg - nd) \/ -step + 1\n              when = nd also 0\n                  compute k = 1\n          end-evaluate\n          compute result = (2 * beg + (k - 1) * step) * k \/ 2.\n       end program sequence-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21595,"user_id":50,"body":"       identification division.\n       program-id. sequence-sum.\n      \n       data division.\n       local-storage section.\n       01 n            pic s9(20).\n      \n       linkage section.\n       01 beg          pic s9(8).\n       01 nd           pic s9(8).\n       01 step         pic s9(8).\n       01 result       pic s9(20) sign leading.\n       procedure division using beg nd step result.\n      \n          compute n = function integer((nd - beg) \/ step) + 1\n          if n < 0 then goback\n          else compute result = function integer(n *\n                          (2 * beg + (n - 1) * step) \/ 2) end-if\n        \n          goback.\n       end program sequence-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58844f1a76933b1cd0000023":[{"id":21596,"user_id":50,"body":"       identification division.\n       program-id. kill-kth-bit.\n       data division.\n       working-storage section.\n       01 m           PIC 9(20).\n       01 x           usage binary-long.\n       01 y           usage binary-long.\n       linkage section.\n       01 n           PIC 9(20).\n       01 k           PIC 9(2).\n       01 result      PIC 9(20).\n       procedure division using n k result.\n          compute m = 2 ** (k - 1)\n          move n to x\n          move m to y\n          call 'CBL_OR' using x y by value 4\n          move y to result.\n          subtract m from result\n          goback.\n       end program kill-kth-bit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21597,"user_id":168,"body":"       identification division.\n       program-id. kill-kth-bit.\n       data division.\n       working-storage section.\n       01 a usage binary-long.\n       01 b usage binary-long.\n       linkage section.\n       01 n           PIC 9(20).\n       01 k           PIC 9(2).\n       01 result      PIC 9(20).\n       procedure division using n k result.\n          compute a = n\n          compute b = 2 ** (k - 1)\n          call 'CBL_NOT' using b by value 4\n          call 'CBL_AND' using a b by value 4\n          compute result = b\n          goback.\n       end program kill-kth-bit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21598,"user_id":53,"body":"       identification division.\n       program-id. kill-kth-bit.\n       data division.\n       working-storage section.\n       01 a           PIC 9(20).\n       01 x           usage binary-long.\n       01 y           usage binary-long.\n       linkage section.\n       01 n           PIC 9(20).\n       01 k           PIC 9(2).\n       01 result      PIC 9(20).\n       procedure division using n k result.\n          compute a = 2 ** (k - 1),\n          move n to x,\n          move a to y,\n          call 'CBL_OR' using x y by value 4,\n          move y to result,\n          compute result = result - a,\n          goback.\n       end program kill-kth-bit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58855acc9e1de22dff0000ef":[{"id":21599,"user_id":50,"body":"       identification division.\n       program-id. Interpreter.\n       data division.\n       local-storage section.\n       01  stack.\n           03 len          pic 99.\n           03 xs           pic 9(3) occurs 0 to 99 times\n                           depending len.\n       linkage section.\n       01  strng.\n           03  s-length    pic 9(4).\n           03  commands.\n               05  cmd     pic x occurs 0 to 4000 times \n                           depending s-length indexed ptr.\n       01  result.\n           05 IsError      pic x(5).\n              88 is-error  value 'Error' when set to false 'Ok'.\n           05 out-length   pic 9(2).\n           05 out-chars.\n               07 out      pic x occurs 0 to 99 times \n                                 depending out-length.\n      \n       procedure division using strng result.\n      \n          set is-error to false\n          move 1 to len, ptr\n          move 0 to xs(1), out-length\n      \n          perform until ptr > s-length\n            evaluate  cmd(ptr)\n            when '^'     perform pop\n            when '!'     perform push\n            when '+'     perform inc\n            when '-'     perform dec\n            when '*'     perform write-to-output\n            when ']'     perform back-brack\n            when '['     perform forth-brack\n            end-evaluate\n            add 1 to ptr\n            if is-error goback end-if\n          end-perform\n      \n          goback.\n      \n              pop.\n                subtract 1 from len\n                if len = 0, set is-error to true, end-if\n                .\n      \n              push.\n                add  1 to len\n                move 0 to xs(len)\n                .\n      \n              inc.\n                  compute xs(len) =  function rem(xs(len) + 1, 256)\n                .\n\n              dec.\n                  compute xs(len) = function mod(xs(len) - 1, 256)\n                .\n      \n              write-to-output.\n                  add  1 to out-length\n                  move function char(xs(len) + 1) to out(out-length)\n                .\n      \n              back-brack.\n                  if xs(len) <> 0\n                    perform until cmd(ptr) = '['\n                      subtract 1 from ptr\n                      if ptr = 0 \n                         set is-error to true, exit perform, end-if\n                    end-perform\n                  end-if\n                .\n      \n              forth-brack.\n                  if xs(len) = 0\n                    perform until cmd(ptr) = ']'\n                      add 1 to ptr\n                      if ptr > s-length\n                         set is-error to true, exit perform, end-if\n                    end-perform\n                  end-if\n                .\n      \n       end program Interpreter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21600,"user_id":168,"body":"       identification division.\n       program-id. Interpreter.\n       data division.\n       working-storage section.\n       01  ptr    usage index.\n       01  stack occurs 10000 times.\n            05 xs usage binary-char unsigned.\n\n       linkage section.\n       01  strng.\n           03  s-length             pic 9(4).\n           03  commands.\n               05  cmd              pic x occurs 0 to 4000 times \n                                    depending on s-length indexed by i.\n       01  result.\n           05 IsError               pic x(5).\n              88 is-error           value 'Error' \n                                    when set to false 'Ok'.\n           05 output-length         pic 9(2).\n           05 output-chars.\n               07 output-char       pic a occurs 0 to 99 times \n                                    depending on output-length.\n      \n       procedure division using strng result.\n          set is-error to false\n          set ptr to 1\n          move 0 to output-length xs(1)\n          perform varying i from 1 until i > s-length\n              evaluate cmd(i)\n                  when '^'\n                      if ptr <= 1\n                          set is-error to true\n                          goback\n                      end-if\n                      set ptr down by 1\n                  when '!'\n                      set ptr up by 1\n                      move 0 to xs(ptr)\n                  when '+'\n                      add 1 to xs(ptr)\n                  when '-'\n                      subtract 1 from xs(ptr)\n                  when '*'\n                      add 1 to output-length\n                      move function char(xs(ptr) + 1) \n                        to output-char(output-length)\n                  when '['\n                      perform until xs(ptr) <> 0 or cmd(i) = ']'\n                          add 1 to i\n                      end-perform\n                  when ']'\n                      perform until xs(ptr) = 0 or cmd(i) = '['\n                          subtract 1 from i\n                      end-perform\n              end-evaluate\n          end-perform\n          goback.\n       end program Interpreter.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21601,"user_id":53,"body":"       identification division.\n       program-id. Interpreter.\n       data division.\n       local-storage section.\n       01  registers.\n           03 len          pic 99.\n           03 xs           pic 9(3) occurs 0 to 99 times\n                           depending len.\n       linkage section.\n       01  strng.\n           03  s-length    pic 9(4).\n           03  commands.\n               05  cmd     pic x occurs 0 to 4000 times \n                           depending s-length indexed ptr.\n       01  result.\n           05 IsError      pic x(5).\n              88 is-error  value 'Error' when set to false 'Ok'.\n           05 out-length   pic 9(2).\n           05 out-chars.\n               07 out      pic a occurs 0 to 99 times \n                                 depending out-length.\n       procedure division using strng result.\n          set is-error to false\n          move 0 to xs(1), out-length\n          move 1 to len, ptr\n          perform until ptr > s-length or is-error\n            evaluate cmd(ptr)\n              when '^'     \n                compute len = len - 1\n                if len = 0 then set is-error to true end-if\n              when '!'\n                compute len = len + 1\n                move 0 to xs(len)\n              when '+'\n                compute xs(len) = function rem(xs(len) + 1, 256)\n              when '-'\n                compute xs(len) = function rem(xs(len) + 255, 256)\n              when '*'\n                compute out-length = out-length + 1\n                move function char(xs(len) + 1) to out(out-length)\n              when ']'\n                if xs(len) <> 0\n                  perform until cmd(ptr) = '['\n                    compute ptr = ptr - 1\n                    if ptr = 0 \n                       set is-error to true\n                       exit perform\n                    end-if\n                  end-perform\n                end-if\n              when '['\n                if xs(len) = 0\n                  perform until cmd(ptr) = ']'\n                    compute ptr = ptr + 1\n                    if ptr > s-length\n                       set is-error to true\n                       exit perform\n                    end-if\n                  end-perform\n                end-if\n            end-evaluate\n            add 1 to ptr\n          end-perform\n          goback.\n       end program Interpreter.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58856a06760b85c4e6000055":[{"id":21602,"user_id":421,"body":"       identification division.\n       program-id. bitsBattle.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  odds              pic 9(3).\n       01  evens             pic 9(3).     \n       01  n                 pic 9(3).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 200 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic a(9).\n      \n       procedure division using arr result.\n           initialize odds\n           initialize evens          \n           move \"tie\" to result\n           perform varying i from 1 by 1 until i > arr-length               \n               move xs(i) to n                           \n               if function rem(n, 2) = 1 then\n                   perform until n = 0\n                       add function rem(n, 2) to odds\n                       divide 2 into n\n                   end-perform \n               else\n                   perform until n = 0\n                       if function rem(n, 2) = 0 then\n                           add 1 to evens\n                       end-if\n                       divide 2 into n\n                   end-perform \n               end-if\n           end-perform          \n           if odds > evens then\n               move \"odds win\" to result\n           end-if\n           if evens > odds then\n               move \"evens win\" to result\n           end-if.\n       end program bitsBattle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21603,"user_id":53,"body":"       identification division.\n       program-id. bitsBattle.\n       data division.\n       local-storage section.\n       01  d            pic 9(8).\n       01  p            pic 9(8).\n       01  n            pic 9(8).\n       01  m            pic s9(8).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 200 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  r            pic a(9).\n       procedure division using arr r.\n          move 0 to m\n          perform varying i from 1 until i > arr-length\n            move xs(i) to n\n            if n <> 0\n              compute d = function mod (n, 2)\n              call 'countBits' using \n                by content n d\n                by reference p\n              if d = 0 then\n                subtract p from m\n              else\n                add p to m\n              end-if\n              display m\n            end-if\n          end-perform\n          evaluate m\n            when = 0    move 'tie'       to r\n            when > 0    move 'odds win'  to r\n            when other  move 'evens win' to r\n          end-evaluate\n          goback.\n       end program bitsBattle.\n      \n       identification division.\n       program-id. countBits.\n       data division.\n       linkage section.\n       01  n            pic 9(8).\n       01  d            pic 9(8).\n       01  r            pic 9(8).\n       procedure division using n d r.\n          move 0 to r\n          perform until n = 0\n            if function mod (n, 2) = d then\n              add 1 to r\n            end-if\n            divide 2 into n\n          end-perform\n          goback.\n       end program countBits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21604,"user_id":168,"body":"       identification division.\n       program-id. bitsBattle.\n       data division.\n       working-storage section.\n       01  s      usage binary-long.\n       01  x      usage binary-short.\n       01  t      pic 9.\n       01  r      pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 200 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic a(9).\n      \n       procedure division using arr result.\n          move 0 to s\n          perform varying i from 1 until i > arr-length\n              move xs(i) to x\n              move function mod(x, 2) to t\n              perform until x = 0\n                  divide x by 2 giving x remainder r\n                  if r = t\n                      if t = 0 \n                          add 1 to s \n                      else \n                          subtract 1 from s \n                      end-if\n                  end-if\n              end-perform\n          end-perform\n          evaluate s\n              when < 0 move 'odds win' to result\n              when > 0 move 'evens win' to result\n              when other move 'tie' to result\n          end-evaluate\n          goback.\n       end program bitsBattle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21605,"user_id":50,"body":"       identification division.\n       program-id. bitsBattle.\n       data division.\n       local-storage section.\n       01  n                 pic s9(8).\n       01  a                 pic s9(8).\n       01  x                 pic 9(3).\n       01  r                 pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 200 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic a(9).\n      \n       procedure division using arr result.\n      \n           move 0 to n\n           perform varying i from 1 until i > arr-length\n              move 0 to a\n              move xs(i) to x\n              if function rem(x, 2) = 1 \n                   perform pop-count\n              else perform z-count  end-if\n              add a to n\n          end-perform\n      \n          evaluate n\n            when = 0    move 'tie'       to result\n            when > 0    move 'odds win'  to result\n            when other  move 'evens win' to result\n          end-evaluate\n      \n          goback.\n      \n          pop-count.\n              perform until x = 0\n                divide 2 into x giving x remainder r\n                add r to a\n              end-perform\n              .\n      \n          z-count.\n              perform until x = 0\n                divide 2 into x giving x remainder r\n                if r = 0 subtract 1 from a end-if\n              end-perform\n              .\n      \n       end program bitsBattle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5886dea04703f1712d000051":[{"id":21606,"user_id":168,"body":"       identification division.\n       program-id. WeakNumbers.\n      \n       data division.\n       working-storage section.\n       01  d        usage index.\n       01  w        usage index.\n       01  divisors pic 9(4) occurs 1000 times indexed i j.\n       01  ws       pic 9(4) occurs 1000 times.\n\n       linkage section.\n       01  n            pic 9(4).\n       01  result.\n           05 weakness  pic 9(4).\n           05 weak-nums     pic 9(4).\n      \n       procedure division using n result.\n           if divisors(1) = 0 perform init-tables end-if\n           initialize result\n           perform varying i from 1 until i > n\n               move function max(weakness, ws(i)) to weakness\n           end-perform\n           perform varying i from 1 until i > n\n               if ws(i) = weakness\n                    add 1 to weak-nums\n               end-if\n           end-perform\n           goback.\n       init-tables.\n           perform varying i from 1 until i > 1000\n               move 0 to d w\n               perform varying j from 1 until j > i\n                   if function mod(i, j) = 0 then\n                       add 1 to d\n                   end-if\n               end-perform\n               move d to divisors(i)\n               perform varying j from 1 until j >= i\n                   if divisors(j) > d\n                        add 1 to w\n                   end-if\n               end-perform\n               move w to ws(i)\n           end-perform.\n       end program WeakNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21607,"user_id":53,"body":"       identification division.\n       program-id. WeakNumbers.\n       data division.\n       working-storage section.\n       01 cache.\n           05 xs         pic 9(3) occurs 1000 times indexed j.\n       local-storage section.\n       01  o             pic 9(3).\n       01  d             pic 9(4).\n       01  i             pic 9(4).\n       linkage section.\n       01  n             pic 9(4).\n       01  r.\n           05 m          pic 9(4).\n           05 k          pic 9(4).\n       procedure division using n r.\n          initialize r\n          if xs(5) = 0 then\n            perform varying i from 1 until i > 1000\n              call 'Divisors' using by content i by reference o\n              move o to xs(i)\n            end-perform\n          end-if\n          perform varying i from 1 until i > n\n            move xs(i) to o\n            move 0 to d\n            perform varying j from 1 until j = i\n              if xs(j) > o then add 1 to d end-if\n            end-perform\n            evaluate true\n              when d > m\n                move d to m\n                move 1 to k\n              when d = m\n                add 1 to k\n            end-evaluate\n          end-perform\n          goback.\n       end program WeakNumbers.\n      \n       identification division.\n       program-id. Divisors.\n       data division.\n       local-storage section.\n       01  i             pic 9(4) value 1.\n       01  e             pic 9(4).\n       linkage section.\n       01  n             pic 9(4).\n       01  m             pic 9(3).\n       procedure division using n m.\n          move 0 to m\n          perform until i * i > n\n            if function rem (n, i) = 0 then\n              add 1 to m\n              divide i into n giving e\n              if e <> i then add 1 to m end-if\n            end-if\n            add 1 to i\n          end-perform\n          goback.\n       end program Divisors.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21608,"user_id":50,"body":"       identification division.\n       program-id. WeakNumbers.\n      \n       data division.\n      \n       local-storage section.\n       01  arr.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 6.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 10.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 4.\n         05 pic 9(3) value 4.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 12.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 18.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 8.\n         05 pic 9(3) value 8.\n         05 pic 9(3) value 8.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 24.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 28.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 29.\n         05 pic 9(3) value 6.\n         05 pic 9(3) value 15.\n         05 pic 9(3) value 6.\n         05 pic 9(3) value 36.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 18.\n         05 pic 9(3) value 18.\n         05 pic 9(3) value 41.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 42.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 21.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 47.\n         05 pic 9(3) value 11.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 50.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 51.\n         05 pic 9(3) value 25.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 4.\n         05 pic 9(3) value 56.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 28.\n         05 pic 9(3) value 30.\n         05 pic 9(3) value 59.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 6.\n         05 pic 9(3) value 64.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 33.\n         05 pic 9(3) value 18.\n         05 pic 9(3) value 34.\n         05 pic 9(3) value 34.\n         05 pic 9(3) value 34.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 71.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 74.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 75.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 41.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 10.\n         05 pic 9(3) value 43.\n         05 pic 9(3) value 6.\n         05 pic 9(3) value 82.\n         05 pic 9(3) value 11.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 47.\n         05 pic 9(3) value 47.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 85.\n         05 pic 9(3) value 48.\n         05 pic 9(3) value 48.\n         05 pic 9(3) value 28.\n         05 pic 9(3) value 49.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 95.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 51.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 98.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 53.\n         05 pic 9(3) value 53.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 103.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 104.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 57.\n         05 pic 9(3) value 57.\n         05 pic 9(3) value 57.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 58.\n         05 pic 9(3) value 58.\n         05 pic 9(3) value 37.\n         05 pic 9(3) value 37.\n         05 pic 9(3) value 113.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 114.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 39.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 64.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 119.\n         05 pic 9(3) value 65.\n         05 pic 9(3) value 65.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 124.\n         05 pic 9(3) value 43.\n         05 pic 9(3) value 20.\n         05 pic 9(3) value 69.\n         05 pic 9(3) value 127.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 123.\n         05 pic 9(3) value 21.\n         05 pic 9(3) value 46.\n         05 pic 9(3) value 46.\n         05 pic 9(3) value 132.\n         05 pic 9(3) value 21.\n         05 pic 9(3) value 47.\n         05 pic 9(3) value 15.\n         05 pic 9(3) value 76.\n         05 pic 9(3) value 76.\n         05 pic 9(3) value 137.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 138.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 80.\n         05 pic 9(3) value 52.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 147.\n         05 pic 9(3) value 4.\n         05 pic 9(3) value 148.\n         05 pic 9(3) value 84.\n         05 pic 9(3) value 24.\n         05 pic 9(3) value 22.\n         05 pic 9(3) value 151.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 152.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 88.\n         05 pic 9(3) value 88.\n         05 pic 9(3) value 88.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 89.\n         05 pic 9(3) value 89.\n         05 pic 9(3) value 60.\n         05 pic 9(3) value 20.\n         05 pic 9(3) value 91.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 163.\n         05 pic 9(3) value 62.\n         05 pic 9(3) value 93.\n         05 pic 9(3) value 93.\n         05 pic 9(3) value 93.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 94.\n         05 pic 9(3) value 94.\n         05 pic 9(3) value 94.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 95.\n         05 pic 9(3) value 32.\n         05 pic 9(3) value 174.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 30.\n         05 pic 9(3) value 98.\n         05 pic 9(3) value 177.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 178.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 181.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 103.\n         05 pic 9(3) value 72.\n         05 pic 9(3) value 104.\n         05 pic 9(3) value 36.\n         05 pic 9(3) value 186.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 187.\n         05 pic 9(3) value 74.\n         05 pic 9(3) value 74.\n         05 pic 9(3) value 74.\n         05 pic 9(3) value 74.\n         05 pic 9(3) value 37.\n         05 pic 9(3) value 111.\n         05 pic 9(3) value 37.\n         05 pic 9(3) value 112.\n         05 pic 9(3) value 37.\n         05 pic 9(3) value 196.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 114.\n         05 pic 9(3) value 114.\n         05 pic 9(3) value 38.\n         05 pic 9(3) value 34.\n         05 pic 9(3) value 201.\n         05 pic 9(3) value 39.\n         05 pic 9(3) value 117.\n         05 pic 9(3) value 9.\n         05 pic 9(3) value 82.\n         05 pic 9(3) value 119.\n         05 pic 9(3) value 206.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 120.\n         05 pic 9(3) value 41.\n         05 pic 9(3) value 121.\n         05 pic 9(3) value 84.\n         05 pic 9(3) value 211.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 212.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 43.\n         05 pic 9(3) value 125.\n         05 pic 9(3) value 87.\n         05 pic 9(3) value 11.\n         05 pic 9(3) value 217.\n         05 pic 9(3) value 127.\n         05 pic 9(3) value 88.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 220.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 221.\n         05 pic 9(3) value 90.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 133.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 220.\n         05 pic 9(3) value 46.\n         05 pic 9(3) value 135.\n         05 pic 9(3) value 94.\n         05 pic 9(3) value 230.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 137.\n         05 pic 9(3) value 47.\n         05 pic 9(3) value 47.\n         05 pic 9(3) value 139.\n         05 pic 9(3) value 139.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 140.\n         05 pic 9(3) value 140.\n         05 pic 9(3) value 140.\n         05 pic 9(3) value 36.\n         05 pic 9(3) value 141.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 243.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 143.\n         05 pic 9(3) value 51.\n         05 pic 9(3) value 246.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 247.\n         05 pic 9(3) value 145.\n         05 pic 9(3) value 15.\n         05 pic 9(3) value 104.\n         05 pic 9(3) value 250.\n         05 pic 9(3) value 53.\n         05 pic 9(3) value 148.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 149.\n         05 pic 9(3) value 54.\n         05 pic 9(3) value 150.\n         05 pic 9(3) value 13.\n         05 pic 9(3) value 108.\n         05 pic 9(3) value 152.\n         05 pic 9(3) value 152.\n         05 pic 9(3) value 55.\n         05 pic 9(3) value 153.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 263.\n         05 pic 9(3) value 110.\n         05 pic 9(3) value 110.\n         05 pic 9(3) value 156.\n         05 pic 9(3) value 156.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 268.\n         05 pic 9(3) value 111.\n         05 pic 9(3) value 158.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 159.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 160.\n         05 pic 9(3) value 59.\n         05 pic 9(3) value 59.\n         05 pic 9(3) value 162.\n         05 pic 9(3) value 277.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 278.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 61.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 281.\n         05 pic 9(3) value 62.\n         05 pic 9(3) value 167.\n         05 pic 9(3) value 120.\n         05 pic 9(3) value 62.\n         05 pic 9(3) value 169.\n         05 pic 9(3) value 286.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 280.\n         05 pic 9(3) value 170.\n         05 pic 9(3) value 122.\n         05 pic 9(3) value 20.\n         05 pic 9(3) value 172.\n         05 pic 9(3) value 64.\n         05 pic 9(3) value 293.\n         05 pic 9(3) value 51.\n         05 pic 9(3) value 125.\n         05 pic 9(3) value 65.\n         05 pic 9(3) value 176.\n         05 pic 9(3) value 20.\n         05 pic 9(3) value 298.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 180.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 303.\n         05 pic 9(3) value 21.\n         05 pic 9(3) value 182.\n         05 pic 9(3) value 182.\n         05 pic 9(3) value 306.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 69.\n         05 pic 9(3) value 184.\n         05 pic 9(3) value 134.\n         05 pic 9(3) value 134.\n         05 pic 9(3) value 311.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 187.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 188.\n         05 pic 9(3) value 188.\n         05 pic 9(3) value 188.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 318.\n         05 pic 9(3) value 189.\n         05 pic 9(3) value 72.\n         05 pic 9(3) value 20.\n         05 pic 9(3) value 321.\n         05 pic 9(3) value 73.\n         05 pic 9(3) value 192.\n         05 pic 9(3) value 140.\n         05 pic 9(3) value 59.\n         05 pic 9(3) value 74.\n         05 pic 9(3) value 195.\n         05 pic 9(3) value 8.\n         05 pic 9(3) value 328.\n         05 pic 9(3) value 75.\n         05 pic 9(3) value 197.\n         05 pic 9(3) value 144.\n         05 pic 9(3) value 198.\n         05 pic 9(3) value 26.\n         05 pic 9(3) value 199.\n         05 pic 9(3) value 26.\n         05 pic 9(3) value 200.\n         05 pic 9(3) value 77.\n         05 pic 9(3) value 337.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 338.\n         05 pic 9(3) value 202.\n         05 pic 9(3) value 148.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 149.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 206.\n         05 pic 9(3) value 150.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 347.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 348.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 155.\n         05 pic 9(3) value 213.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 353.\n         05 pic 9(3) value 10.\n         05 pic 9(3) value 75.\n         05 pic 9(3) value 81.\n         05 pic 9(3) value 356.\n         05 pic 9(3) value 29.\n         05 pic 9(3) value 218.\n         05 pic 9(3) value 218.\n         05 pic 9(3) value 218.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 361.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 220.\n         05 pic 9(3) value 162.\n         05 pic 9(3) value 221.\n         05 pic 9(3) value 221.\n         05 pic 9(3) value 84.\n         05 pic 9(3) value 11.\n         05 pic 9(3) value 368.\n         05 pic 9(3) value 223.\n         05 pic 9(3) value 85.\n         05 pic 9(3) value 32.\n         05 pic 9(3) value 371.\n         05 pic 9(3) value 11.\n         05 pic 9(3) value 372.\n         05 pic 9(3) value 71.\n         05 pic 9(3) value 88.\n         05 pic 9(3) value 228.\n         05 pic 9(3) value 375.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 229.\n         05 pic 9(3) value 89.\n         05 pic 9(3) value 230.\n         05 pic 9(3) value 89.\n         05 pic 9(3) value 231.\n         05 pic 9(3) value 89.\n         05 pic 9(3) value 173.\n         05 pic 9(3) value 34.\n         05 pic 9(3) value 174.\n         05 pic 9(3) value 235.\n         05 pic 9(3) value 386.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 236.\n         05 pic 9(3) value 236.\n         05 pic 9(3) value 91.\n         05 pic 9(3) value 85.\n         05 pic 9(3) value 238.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 393.\n         05 pic 9(3) value 93.\n         05 pic 9(3) value 240.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 396.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 242.\n         05 pic 9(3) value 95.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 245.\n         05 pic 9(3) value 97.\n         05 pic 9(3) value 403.\n         05 pic 9(3) value 35.\n         05 pic 9(3) value 247.\n         05 pic 9(3) value 247.\n         05 pic 9(3) value 406.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 248.\n         05 pic 9(3) value 99.\n         05 pic 9(3) value 188.\n         05 pic 9(3) value 188.\n         05 pic 9(3) value 411.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 252.\n         05 pic 9(3) value 81.\n         05 pic 9(3) value 101.\n         05 pic 9(3) value 254.\n         05 pic 9(3) value 254.\n         05 pic 9(3) value 37.\n         05 pic 9(3) value 255.\n         05 pic 9(3) value 102.\n         05 pic 9(3) value 256.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 422.\n         05 pic 9(3) value 38.\n         05 pic 9(3) value 423.\n         05 pic 9(3) value 195.\n         05 pic 9(3) value 38.\n         05 pic 9(3) value 260.\n         05 pic 9(3) value 260.\n         05 pic 9(3) value 4.\n         05 pic 9(3) value 420.\n         05 pic 9(3) value 106.\n         05 pic 9(3) value 198.\n         05 pic 9(3) value 39.\n         05 pic 9(3) value 264.\n         05 pic 9(3) value 107.\n         05 pic 9(3) value 265.\n         05 pic 9(3) value 107.\n         05 pic 9(3) value 266.\n         05 pic 9(3) value 266.\n         05 pic 9(3) value 201.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 440.\n         05 pic 9(3) value 268.\n         05 pic 9(3) value 268.\n         05 pic 9(3) value 40.\n         05 pic 9(3) value 269.\n         05 pic 9(3) value 16.\n         05 pic 9(3) value 445.\n         05 pic 9(3) value 204.\n         05 pic 9(3) value 204.\n         05 pic 9(3) value 41.\n         05 pic 9(3) value 273.\n         05 pic 9(3) value 16.\n         05 pic 9(3) value 274.\n         05 pic 9(3) value 274.\n         05 pic 9(3) value 112.\n         05 pic 9(3) value 207.\n         05 pic 9(3) value 454.\n         05 pic 9(3) value 42.\n         05 pic 9(3) value 277.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 114.\n         05 pic 9(3) value 279.\n         05 pic 9(3) value 459.\n         05 pic 9(3) value 43.\n         05 pic 9(3) value 280.\n         05 pic 9(3) value 280.\n         05 pic 9(3) value 95.\n         05 pic 9(3) value 116.\n         05 pic 9(3) value 464.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 465.\n         05 pic 9(3) value 44.\n         05 pic 9(3) value 284.\n         05 pic 9(3) value 118.\n         05 pic 9(3) value 216.\n         05 pic 9(3) value 5.\n         05 pic 9(3) value 470.\n         05 pic 9(3) value 217.\n         05 pic 9(3) value 288.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 289.\n         05 pic 9(3) value 120.\n         05 pic 9(3) value 290.\n         05 pic 9(3) value 120.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 292.\n         05 pic 9(3) value 479.\n         05 pic 9(3) value 11.\n         05 pic 9(3) value 293.\n         05 pic 9(3) value 122.\n         05 pic 9(3) value 294.\n         05 pic 9(3) value 101.\n         05 pic 9(3) value 484.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 124.\n         05 pic 9(3) value 226.\n         05 pic 9(3) value 298.\n         05 pic 9(3) value 124.\n         05 pic 9(3) value 489.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 490.\n         05 pic 9(3) value 125.\n         05 pic 9(3) value 229.\n         05 pic 9(3) value 229.\n         05 pic 9(3) value 229.\n         05 pic 9(3) value 125.\n         05 pic 9(3) value 495.\n         05 pic 9(3) value 48.\n         05 pic 9(3) value 126.\n         05 pic 9(3) value 126.\n         05 pic 9(3) value 308.\n         05 pic 9(3) value 12.\n         05 pic 9(3) value 500.\n         05 pic 9(3) value 309.\n         05 pic 9(3) value 127.\n         05 pic 9(3) value 21.\n         05 pic 9(3) value 503.\n         05 pic 9(3) value 128.\n         05 pic 9(3) value 504.\n         05 pic 9(3) value 50.\n         05 pic 9(3) value 129.\n         05 pic 9(3) value 314.\n         05 pic 9(3) value 314.\n         05 pic 9(3) value 7.\n         05 pic 9(3) value 313.\n         05 pic 9(3) value 316.\n         05 pic 9(3) value 130.\n         05 pic 9(3) value 241.\n         05 pic 9(3) value 318.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 515.\n         05 pic 9(3) value 131.\n         05 pic 9(3) value 320.\n         05 pic 9(3) value 320.\n         05 pic 9(3) value 320.\n         05 pic 9(3) value 52.\n         05 pic 9(3) value 244.\n         05 pic 9(3) value 132.\n         05 pic 9(3) value 245.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 524.\n         05 pic 9(3) value 133.\n         05 pic 9(3) value 525.\n         05 pic 9(3) value 53.\n         05 pic 9(3) value 134.\n         05 pic 9(3) value 134.\n         05 pic 9(3) value 528.\n         05 pic 9(3) value 8.\n         05 pic 9(3) value 330.\n         05 pic 9(3) value 54.\n         05 pic 9(3) value 136.\n         05 pic 9(3) value 253.\n         05 pic 9(3) value 533.\n         05 pic 9(3) value 136.\n         05 pic 9(3) value 334.\n         05 pic 9(3) value 114.\n         05 pic 9(3) value 255.\n         05 pic 9(3) value 137.\n         05 pic 9(3) value 538.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 539.\n         05 pic 9(3) value 338.\n         05 pic 9(3) value 138.\n         05 pic 9(3) value 138.\n         05 pic 9(3) value 138.\n         05 pic 9(3) value 55.\n         05 pic 9(3) value 342.\n         05 pic 9(3) value 261.\n         05 pic 9(3) value 343.\n         05 pic 9(3) value 139.\n         05 pic 9(3) value 344.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 550.\n         05 pic 9(3) value 345.\n         05 pic 9(3) value 56.\n         05 pic 9(3) value 134.\n         05 pic 9(3) value 553.\n         05 pic 9(3) value 142.\n         05 pic 9(3) value 348.\n         05 pic 9(3) value 26.\n         05 pic 9(3) value 349.\n         05 pic 9(3) value 143.\n         05 pic 9(3) value 558.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 351.\n         05 pic 9(3) value 144.\n         05 pic 9(3) value 352.\n         05 pic 9(3) value 120.\n         05 pic 9(3) value 353.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 565.\n         05 pic 9(3) value 272.\n         05 pic 9(3) value 59.\n         05 pic 9(3) value 356.\n         05 pic 9(3) value 356.\n         05 pic 9(3) value 27.\n         05 pic 9(3) value 357.\n         05 pic 9(3) value 357.\n         05 pic 9(3) value 357.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 574.\n         05 pic 9(3) value 28.\n         05 pic 9(3) value 359.\n         05 pic 9(3) value 59.\n         05 pic 9(3) value 151.\n         05 pic 9(3) value 361.\n         05 pic 9(3) value 361.\n         05 pic 9(3) value 63.\n         05 pic 9(3) value 581.\n         05 pic 9(3) value 152.\n         05 pic 9(3) value 280.\n         05 pic 9(3) value 152.\n         05 pic 9(3) value 365.\n         05 pic 9(3) value 28.\n         05 pic 9(3) value 153.\n         05 pic 9(3) value 283.\n         05 pic 9(3) value 368.\n         05 pic 9(3) value 368.\n         05 pic 9(3) value 590.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 369.\n         05 pic 9(3) value 284.\n         05 pic 9(3) value 370.\n         05 pic 9(3) value 284.\n         05 pic 9(3) value 284.\n         05 pic 9(3) value 65.\n         05 pic 9(3) value 597.\n         05 pic 9(3) value 29.\n         05 pic 9(3) value 285.\n         05 pic 9(3) value 156.\n         05 pic 9(3) value 376.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 602.\n         05 pic 9(3) value 377.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 379.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 607.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 161.\n         05 pic 9(3) value 161.\n         05 pic 9(3) value 610.\n         05 pic 9(3) value 29.\n         05 pic 9(3) value 384.\n         05 pic 9(3) value 384.\n         05 pic 9(3) value 296.\n         05 pic 9(3) value 67.\n         05 pic 9(3) value 386.\n         05 pic 9(3) value 29.\n         05 pic 9(3) value 617.\n         05 pic 9(3) value 139.\n         05 pic 9(3) value 388.\n         05 pic 9(3) value 165.\n         05 pic 9(3) value 389.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 622.\n         05 pic 9(3) value 390.\n         05 pic 9(3) value 166.\n         05 pic 9(3) value 30.\n         05 pic 9(3) value 625.\n         05 pic 9(3) value 167.\n         05 pic 9(3) value 393.\n         05 pic 9(3) value 304.\n         05 pic 9(3) value 70.\n         05 pic 9(3) value 395.\n         05 pic 9(3) value 395.\n         05 pic 9(3) value 19.\n         05 pic 9(3) value 632.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 397.\n         05 pic 9(3) value 307.\n         05 pic 9(3) value 635.\n         05 pic 9(3) value 72.\n         05 pic 9(3) value 308.\n         05 pic 9(3) value 171.\n         05 pic 9(3) value 171.\n         05 pic 9(3) value 402.\n         05 pic 9(3) value 402.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 403.\n         05 pic 9(3) value 172.\n         05 pic 9(3) value 172.\n         05 pic 9(3) value 66.\n         05 pic 9(3) value 406.\n         05 pic 9(3) value 173.\n         05 pic 9(3) value 648.\n         05 pic 9(3) value 315.\n         05 pic 9(3) value 408.\n         05 pic 9(3) value 173.\n         05 pic 9(3) value 409.\n         05 pic 9(3) value 1.\n         05 pic 9(3) value 410.\n         05 pic 9(3) value 410.\n         05 pic 9(3) value 174.\n         05 pic 9(3) value 318.\n         05 pic 9(3) value 657.\n         05 pic 9(3) value 33.\n         05 pic 9(3) value 413.\n         05 pic 9(3) value 21.\n         05 pic 9(3) value 320.\n         05 pic 9(3) value 415.\n         05 pic 9(3) value 415.\n         05 pic 9(3) value 77.\n         05 pic 9(3) value 177.\n         05 pic 9(3) value 177.\n         05 pic 9(3) value 418.\n         05 pic 9(3) value 177.\n         05 pic 9(3) value 668.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 669.\n         05 pic 9(3) value 78.\n         05 pic 9(3) value 421.\n         05 pic 9(3) value 179.\n         05 pic 9(3) value 422.\n         05 pic 9(3) value 14.\n         05 pic 9(3) value 423.\n         05 pic 9(3) value 423.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 678.\n         05 pic 9(3) value 182.\n         05 pic 9(3) value 679.\n         05 pic 9(3) value 182.\n         05 pic 9(3) value 79.\n         05 pic 9(3) value 183.\n         05 pic 9(3) value 682.\n         05 pic 9(3) value 23.\n         05 pic 9(3) value 683.\n         05 pic 9(3) value 184.\n         05 pic 9(3) value 431.\n         05 pic 9(3) value 76.\n         05 pic 9(3) value 337.\n         05 pic 9(3) value 185.\n         05 pic 9(3) value 434.\n         05 pic 9(3) value 81.\n         05 pic 9(3) value 186.\n         05 pic 9(3) value 436.\n         05 pic 9(3) value 692.\n         05 pic 9(3) value 0.\n         05 pic 9(3) value 684.\n         05 pic 9(3) value 437.\n         05 pic 9(3) value 437.\n         05 pic 9(3) value 341.\n         05 pic 9(3) value 341.\n         05 pic 9(3) value 82.\n         05 pic 9(3) value 342.\n         05 pic 9(3) value 162.\n         05 pic 9(3) value 442.\n         05 pic 9(3) value 82.\n         05 pic 9(3) value 443.\n         05 pic 9(3) value 82.\n         05 pic 9(3) value 705.\n         05 pic 9(3) value 191.\n         05 pic 9(3) value 82.\n         05 pic 9(3) value 192.\n         05 pic 9(3) value 708.\n         05 pic 9(3) value 38.\n         05 pic 9(3) value 709.\n         05 pic 9(3) value 83.\n         05 pic 9(3) value 194.\n         05 pic 9(3) value 450.\n         05 pic 9(3) value 712.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 451.\n         05 pic 9(3) value 451.\n         05 pic 9(3) value 352.\n         05 pic 9(3) value 84.\n         05 pic 9(3) value 453.\n         05 pic 9(3) value 39.\n         05 pic 9(3) value 454.\n         05 pic 9(3) value 197.\n         05 pic 9(3) value 355.\n         05 pic 9(3) value 197.\n         05 pic 9(3) value 197.\n         05 pic 9(3) value 85.\n         05 pic 9(3) value 725.\n         05 pic 9(3) value 459.\n         05 pic 9(3) value 459.\n         05 pic 9(3) value 16.\n         05 pic 9(3) value 728.\n         05 pic 9(3) value 26.\n         05 pic 9(3) value 729.\n         05 pic 9(3) value 87.\n         05 pic 9(3) value 201.\n         05 pic 9(3) value 463.\n         05 pic 9(3) value 732.\n         05 pic 9(3) value 41.\n         05 pic 9(3) value 464.\n         05 pic 9(3) value 202.\n         05 pic 9(3) value 175.\n         05 pic 9(3) value 365.\n         05 pic 9(3) value 467.\n         05 pic 9(3) value 203.\n         05 pic 9(3) value 468.\n         05 pic 9(3) value 41.\n         05 pic 9(3) value 204.\n         05 pic 9(3) value 470.\n         05 pic 9(3) value 470.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 471.\n         05 pic 9(3) value 205.\n         05 pic 9(3) value 205.\n         05 pic 9(3) value 205.\n         05 pic 9(3) value 474.\n         05 pic 9(3) value 205.\n         05 pic 9(3) value 751.\n         05 pic 9(3) value 373.\n         05 pic 9(3) value 373.\n         05 pic 9(3) value 42.\n         05 pic 9(3) value 754.\n         05 pic 9(3) value 17.\n         05 pic 9(3) value 479.\n         05 pic 9(3) value 479.\n         05 pic 9(3) value 207.\n         05 pic 9(3) value 376.\n         05 pic 9(3) value 481.\n         05 pic 9(3) value 43.\n         05 pic 9(3) value 761.\n         05 pic 9(3) value 43.\n         05 pic 9(3) value 483.\n         05 pic 9(3) value 483.\n         05 pic 9(3) value 483.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 379.\n         05 pic 9(3) value 485.\n         05 pic 9(3) value 379.\n         05 pic 9(3) value 95.\n         05 pic 9(3) value 770.\n         05 pic 9(3) value 44.\n         05 pic 9(3) value 381.\n         05 pic 9(3) value 381.\n         05 pic 9(3) value 490.\n         05 pic 9(3) value 490.\n         05 pic 9(3) value 212.\n         05 pic 9(3) value 3.\n         05 pic 9(3) value 777.\n         05 pic 9(3) value 213.\n         05 pic 9(3) value 493.\n         05 pic 9(3) value 97.\n         05 pic 9(3) value 780.\n         05 pic 9(3) value 214.\n         05 pic 9(3) value 495.\n         05 pic 9(3) value 186.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 216.\n         05 pic 9(3) value 785.\n         05 pic 9(3) value 98.\n         05 pic 9(3) value 499.\n         05 pic 9(3) value 98.\n         05 pic 9(3) value 500.\n         05 pic 9(3) value 45.\n         05 pic 9(3) value 790.\n         05 pic 9(3) value 99.\n         05 pic 9(3) value 502.\n         05 pic 9(3) value 393.\n         05 pic 9(3) value 220.\n         05 pic 9(3) value 504.\n         05 pic 9(3) value 504.\n         05 pic 9(3) value 2.\n         05 pic 9(3) value 787.\n         05 pic 9(3) value 221.\n         05 pic 9(3) value 396.\n         05 pic 9(3) value 396.\n         05 pic 9(3) value 508.\n         05 pic 9(3) value 46.\n         05 pic 9(3) value 803.\n         05 pic 9(3) value 101.\n         05 pic 9(3) value 223.\n         05 pic 9(3) value 223.\n         05 pic 9(3) value 806.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 513.\n         05 pic 9(3) value 513.\n         05 pic 9(3) value 102.\n         05 pic 9(3) value 196.\n         05 pic 9(3) value 811.\n         05 pic 9(3) value 226.\n         05 pic 9(3) value 516.\n         05 pic 9(3) value 31.\n         05 pic 9(3) value 405.\n         05 pic 9(3) value 518.\n         05 pic 9(3) value 816.\n         05 pic 9(3) value 48.\n         05 pic 9(3) value 519.\n         05 pic 9(3) value 228.\n         05 pic 9(3) value 228.\n         05 pic 9(3) value 104.\n         05 pic 9(3) value 522.\n         05 pic 9(3) value 4.\n         05 pic 9(3) value 823.\n         05 pic 9(3) value 105.\n         05 pic 9(3) value 524.\n         05 pic 9(3) value 231.\n         05 pic 9(3) value 525.\n         05 pic 9(3) value 105.\n         05 pic 9(3) value 828.\n         05 pic 9(3) value 526.\n         05 pic 9(3) value 232.\n         05 pic 9(3) value 49.\n       01 truc redefines arr.\n         05 xs pic 9(3) occurs 1000 times indexed by i.\n       01  x            pic 9(3).\n      \n       linkage section.\n       01  n            pic 9(4).\n       01  result.\n           05 weakness   pic 9(4).\n           05 weak-nums  pic 9(4).\n      \n       procedure division using n result.\n      \n           perform varying i from 1 until i > n\n              move xs(i) to x\n              if x > weakness\n                  move x to weakness\n                  move 1 to weak-nums\n              else\n                  if x = weakness then add 1 to weak-nums end-if\n              end-if\n           end-perform\n      \n           goback.\n       end program WeakNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5886e082a836a691340000c3":[{"id":21609,"user_id":76,"body":"       identification division.\n       program-id. rectangle-rotation.\n       data division.\n       local-storage section.\n       01 x pic 9(8).\n       01 y pic 9(8).\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(10).\n       procedure division using a b result.\n         compute x = function integer(a \/ 2 ** 0.5)\n         compute y = function integer(b \/ 2 ** 0.5)\n         compute result = 2 * x * y + x + y\n         if function mod(result, 2) = 0 add 1 to result end-if.\n       end program rectangle-rotation.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21610,"user_id":168,"body":"       identification division.\n       program-id. rectangle-rotation.\n      \n       data division.\n\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(10).\n      \n       procedure division using a b result.\n          compute a = a \/ function sqrt(2)\n          compute b = b \/ function sqrt(2)\n          compute result = 2 * a * b + a + b + 1\n          if function mod(a + b, 2) = 1\n              subtract 1 from result\n          end-if.\n       end program rectangle-rotation.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21611,"user_id":53,"body":"       identification division.\n       program-id. rectangle-rotation.\n       data division.\n       local-storage section.\n       01 x           pic 9(10).\n       01 y           pic 9(10).\n       01 r           pic 9(10).\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 m           pic 9(10).\n       procedure division using a b m.\n          compute x = a \/ (2.0 ** 0.5)\n          compute y = b \/ (2.0 ** 0.5)\n          compute r = (x + 1) * (y + 1) + x * y\n          compute m = r + function rem (r, 2) - 1\n          goback.\n       end program rectangle-rotation.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21612,"user_id":50,"body":"       identification division.\n       program-id. rectangle-rotation.\n      \n       data division.\n       local-storage section.\n       01 e           pic 9(8)v9(20).\n       01 h           pic 9(8)v9(20).\n      \n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(10).\n       procedure division using a b result.\n      \n          move a to e\n          move b to h\n          compute a = function integer(e \/ 1.4142135623730951)\n          compute b = function integer(h \/ 1.4142135623730951)\n          compute result = 2 * a * b + a + b\n          if function rem(result, 2) = 0\n              add 1 to result\n          end-if\n      \n          goback.\n       end program rectangle-rotation.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5887a6fe0cfe64850800161c":[{"id":21613,"user_id":421,"body":"       identification division.\n       program-id. area-largest-square.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using r result.\n           COMPUTE result = r ** 2 * 2.\n       end program area-largest-square.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21614,"user_id":null,"body":"       identification division.\n       program-id. area-largest-square.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using r result.\n\n      * Good luck!\n           compute result = r*r*2\n          goback.\n       end program area-largest-square.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21615,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. area-largest-square.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING R RESULT.\n           COMPUTE RESULT = R * R * 2.\n       END PROGRAM area-largest-square.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21616,"user_id":527,"body":"       identification division.\n       program-id. area-largest-square.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using r result.\n       compute result = 2 * r**2.\n       end program area-largest-square.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21617,"user_id":713,"body":"       identification division.\n       program-id. area-largest-square.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using r result.\n        compute result = 2 * r * r.\n       end program area-largest-square.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21618,"user_id":53,"body":"       identification division.\n       program-id. area-largest-square.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using r result.\n          compute result = r * 2 * r\n          goback.\n       end program area-largest-square.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21619,"user_id":50,"body":"       identification division.\n       program-id. area-largest-square.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using r result.\n\n          compute result = 2 * r ** 2\n      \n          goback.\n       end program area-largest-square.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5888a57cbf87c25c840000c6":[{"id":21620,"user_id":50,"body":"       identification division.\n       program-id. StarSign.\n      \n       data division.\n      \n       linkage section.\n       01  dateInput.\n           03          pic 9(4).\n           03  m       pic 9(2).\n           03  d       pic 9(2).\n           03          pic x(13).\n       01  result      pic a(11).\n      \n       procedure division using dateInput result.\n          \n          evaluate m\n          when 1\n              if d > 20  move 'Aquarius'     to result\n              else       move 'Capricorn'    to result end-if\n          when 2\n              if d > 19  move 'Pisces'       to result\n              else       move 'Aquarius'     to result end-if\n          when 3\n              if d > 20  move 'Aries'        to result\n              else       move 'Pisces'       to result end-if\n          when 4\n              if d > 20  move 'Taurus'       to result\n              else       move 'Aries'        to result end-if\n          when 5\n              if d > 21  move 'Gemini'       to result\n              else       move 'Taurus'       to result end-if\n          when 6\n              if d > 21  move 'Cancer'       to result\n              else       move 'Gemini'       to result end-if\n          when 7\n              if d > 22  move 'Leo'          to result\n              else       move 'Cancer'       to result end-if\n          when 8\n              if d > 23  move 'Virgo'        to result\n              else       move 'Leo'          to result end-if\n          when 9\n              if d > 23  move 'Libra'        to result\n              else       move 'Virgo'        to result end-if\n          when 10\n              if d > 23  move 'Scorpio'      to result\n              else       move 'Libra'        to result end-if\n          when 11\n              if d > 22  move 'Sagittarius'  to result\n              else       move 'Scorpio'      to result end-if\n          when other\n              if d > 21  move 'Capricorn'    to result\n              else       move 'Sagittarius'  to result end-if\n          end-evaluate\n      \n          goback.\n       end program StarSign.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21621,"user_id":53,"body":"       identification division.\n       program-id. StarSign.\n       data division.\n       linkage section.\n       01  dateInput.\n           03          pic 9(4).\n           03  m       pic 9(2).\n           03  d       pic 9(2).\n           03          pic x(13).\n       01  result      pic a(11).\n       procedure division using dateInput result.\n          evaluate m\n            when 1\n                if d > 20  move 'Aquarius'     to result\n                else       move 'Capricorn'    to result end-if\n            when 2\n                if d > 19  move 'Pisces'       to result\n                else       move 'Aquarius'     to result end-if\n            when 3\n                if d > 20  move 'Aries'        to result\n                else       move 'Pisces'       to result end-if\n            when 4\n                if d > 20  move 'Taurus'       to result\n                else       move 'Aries'        to result end-if\n            when 5\n                if d > 21  move 'Gemini'       to result\n                else       move 'Taurus'       to result end-if\n            when 6\n                if d > 21  move 'Cancer'       to result\n                else       move 'Gemini'       to result end-if\n            when 7\n                if d > 22  move 'Leo'          to result\n                else       move 'Cancer'       to result end-if\n            when 8\n                if d > 23  move 'Virgo'        to result\n                else       move 'Leo'          to result end-if\n            when 9\n                if d > 23  move 'Libra'        to result\n                else       move 'Virgo'        to result end-if\n            when 10\n                if d > 23  move 'Scorpio'      to result\n                else       move 'Libra'        to result end-if\n            when 11\n                if d > 22  move 'Sagittarius'  to result\n                else       move 'Scorpio'      to result end-if\n            when 12\n                if d > 21  move 'Capricorn'    to result\n                else       move 'Sagittarius'  to result end-if\n          end-evaluate\n          goback.\n       end program StarSign.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"588ac50727eb94c87700001f":[{"id":21622,"user_id":null,"body":"       identification division.\n       program-id. ConsecutiveOnes.\n       data division.\n       local-storage section.  \n       01  ones           pic 9(6) value 0.  \n       linkage section.\n       01  arr.\n           05 arr-length  pic 9(6).\n           05 xs          pic 9 occurs 0 to 200000 times \n                                depending on arr-length indexed i.\n       01  result         pic 9(6) value 0.\n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n              if xs(i) = 1 add 1 to ones\n              else if ones>0\n                if ones>result set result to ones end-if\n                set ones to 0.\n           if ones>result set result to ones. \n       end program ConsecutiveOnes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21623,"user_id":null,"body":"       identification division.\n       program-id. ConsecutiveOnes.\n       data division.\n       local-storage section.  \n       01  ones           pic 9(6) value 0.  \n       linkage section.\n       01  arr.\n           05 arr-length  pic 9(6).\n           05 xs          pic 9 occurs 0 to 200000 times \n                                depending on arr-length indexed i.\n       01  result         pic 9(6) value 0.\n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n              if xs(i) = 1 add 1 to ones\n              else if ones>0\n                if ones>result set result to ones end-if\n                set ones to 0\n           end-perform.\n           if ones>result set result to ones. \n       end program ConsecutiveOnes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21624,"user_id":null,"body":"       identification division.\n       program-id. ConsecutiveOnes.\n       data division.\n       local-storage section.  \n       01  ones           pic 9(6) value 0.  \n       linkage section.\n       01  arr.\n           05 arr-length  pic 9(6).\n           05 xs          pic 9 occurs 0 to 200000 times \n                                depending on arr-length indexed i.\n       01  result         pic 9(6) value 0.\n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n              if xs(i)<>1\n                if ones>result set result to ones end-if\n                set ones to 0\n              else add 1 to ones\n           end-perform.\n           if ones>result set result to ones. \n       end program ConsecutiveOnes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21625,"user_id":null,"body":"       identification division.\n       program-id. ConsecutiveOnes.\n       data division.\n       working-storage section.  \n       01  i              pic 9(6).\n       01  ones           pic 9(6).  \n       linkage section.\n       01  arr.\n           05 arr-length  pic 9(6).\n           05 xs          pic 9 occurs 0 to 200000 times \n                                depending on arr-length.\n       01  result         pic 9(6).\n       procedure division using arr result.\n           set i to 0.\n           set ones to 0. \n           set result to 0.\n           perform arr-length times\n              add 1 to i\n              if xs(i)<>1\n                if ones>result set result to ones end-if\n                set ones to 0\n              else add 1 to ones\n           end-perform.\n           if ones>result set result to ones. \n       end program ConsecutiveOnes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21626,"user_id":53,"body":"       identification division.\n       program-id. ConsecutiveOnes.\n       data division.\n       local-storage section.\n       01  n                 pic 9(6).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 xs             pic 9 occurs 0 to 200000 times \n                             depending on arr-length indexed i.\n       01  m                 pic 9(6).\n       procedure division using arr m.\n          initialize m\n          perform varying i from 1 until i > arr-length\n            if xs(i) = 1 add 1 to n\n            else move function max(n, m) to m, set n to 0 end-if\n          end-perform\n          move function max(n, m) to m\n          goback.\n       end program ConsecutiveOnes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21627,"user_id":50,"body":"       identification division.\n       program-id. ConsecutiveOnes.\n       data division.\n       local-storage section.\n       01  c                 pic 9(6).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(6).\n           05 xs             pic 9 occurs 0 to 200000 times \n                             depending on arr-length indexed i.\n       01  result            pic 9(6).\n      \n       procedure division using arr result.\n      \n          initialize result\n          perform varying i from 1 until i > arr-length\n            if xs(i) = 1 add 1 to c\n            else move function max(c, result) to result\n                 move 0 to c  end-if\n          end-perform\n          move function max(c, result) to result\n      \n          goback.\n       end program ConsecutiveOnes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"588e27b7d1140d31cb000060":[{"id":21628,"user_id":168,"body":"       identification division.\n       program-id. generatePairs.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  res-length    pic 9(4).\n           05  pairs         occurs 0 to 6000 times \n                             depending on res-length indexed i j.\n               07 a          pic 9(3).\n               07 b          pic 9(3).\n      \n       procedure division using n result.\n          move 0 to res-length\n          perform varying i from 0 until i > n\n                    after j from i until j > n\n              add 1 to res-length\n              move i to a(res-length)\n              move j to b(res-length)\n          end-perform\n          goback.\n       end program generatePairs.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21629,"user_id":50,"body":"       identification division.\n       program-id. generatePairs.\n       data division.\n       local-storage section.\n       01  i                 pic 9(3).\n       01  j                 pic 9(3).\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  res-length    pic 9(4).\n           05  pairs         occurs 0 to 6000 times \n                             depending on res-length.\n               07 a          pic 9(3).\n               07 b          pic 9(3).\n      \n       procedure division using n result.\n      \n          move 0 to res-length\n          perform varying i from 0 until i > n\n            perform varying j from i until j > n\n              add 1 to res-length\n              move i to a of pairs(res-length)\n              move j to b of pairs(res-length)\n            end-perform\n          end-perform\n          \n          goback.\n       end program generatePairs.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21630,"user_id":421,"body":"       identification division.\n       program-id. generatePairs.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  i                 pic 9(3).\n       01  j                 pic 9(3).\n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  res-length    pic 9(4).\n           05  pairs         occurs 0 to 6000 times \n                             depending on res-length.\n               07 a          pic 9(3).\n               07 b          pic 9(3).\n      \n       procedure division using n result.\n           perform varying i from 0 by 1 until i > n\n               perform varying j from 0 by 1 until j > n\n                   if i <= j\n                     add 1 to res-length\n                     move i to a of pairs(res-length)\n                     move j to b of pairs(res-length)\n                   end-if\n               end-perform\n           end-perform.\n       end program generatePairs.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21631,"user_id":53,"body":"       identification division.\n       program-id. generatePairs.\n       data division.\n       local-storage section.\n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  res-length    pic 9(4).\n           05  pairs         occurs 0 to 6000 times \n                             depending on res-length\n                             indexed by i, j.\n               07 a          pic 9(3).\n               07 b          pic 9(3).\n      \n       procedure division using n result.\n          move 0 to res-length\n          perform varying i from 0 until i > n\n            perform varying j from i until j > n\n              add 1 to res-length\n              move i to a of pairs(res-length)\n              move j to b of pairs(res-length)\n            end-perform\n          end-perform\n          goback.\n       end program generatePairs.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"588e68aed4cff457d300002e":[{"id":21632,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Turn.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 CUR         PIC A.\n       01 TGT         PIC A.\n       01 RESULT      PIC A(5).\n\n       PROCEDURE DIVISION USING CUR TGT RESULT.\n           IF  FUNCTION CONCAT(CUR TGT) = 'NE' OR 'ES' OR 'SW' OR 'WN'\n               MOVE 'right'  TO RESULT\n           ELSE\n               MOVE 'left'   TO RESULT\n           END-IF.\n       END PROGRAM Turn.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21633,"user_id":53,"body":"       identification division.\n       program-id. Turn.\n       data division.\n       linkage section.\n       01 a         pic a.\n       01 b      pic a.\n       01 result      pic a(5).\n       procedure division using a b result.\n          move 'right' to result\n          if   (a = 'S' and b = 'E') or (a = 'E' and b = 'N')\n            or (a = 'N' and b = 'W') or (a = 'W' and b = 'S') \n            then move 'left' to result\n          end-if\n          goback.\n       end program Turn.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21634,"user_id":50,"body":"       identification division.\n       program-id. Turn.\n      \n       data division.\n       working-storage section.\n       01 delim       pic a(2).\n       01 trash       pic a.\n      \n       linkage section.\n       01 cur         pic a.\n       01 target      pic a.\n       01 result      pic a(5).\n      \n       procedure division using cur target result.\n      \n          unstring 'NESWN'\n          delimited by function concat(cur target)\n          into trash delimiter in delim\n          if delim = space\n          then move 'left'  to result\n          else move 'right' to result.\n      \n       end program Turn.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58905bfa1decb981da00009e":[{"id":21635,"user_id":53,"body":"       identification division.\n       program-id. TheLift.\n       data division.\n       local-storage section.\n       01  d                  pic s9.\n       01  y                  pic 9(2).\n       01  i                  usage index.\n       01  j                  usage index.\n       01  conditions.\n           05  u1             pic 9.\n           05  u2             pic 9.\n           05  u3             pic 9.\n       01  p                  pic 9(2).\n       01  M-arr.\n           05 M-len           pic 9(4).\n           05 M               pic 9(2) \n                              occurs 0 to 9999 times \n                              depending on M-len.\n       01  M-arr-new.\n           05 M-len-new       pic 9(4).\n           05 M-new           pic 9(2) \n                              occurs 0 to 9999 times \n                              depending on M-len-new.\n       01  K-arr.\n           05 K-len           pic 9(2).\n           05 K               pic 9(2) \n                              occurs 0 to 99 times \n                              depending on K-len.\n       01  QY-arr.\n           05 QY-len          pic 9(4).\n           05 QY              pic 9(2) \n                              occurs 0 to 9999 times \n                              depending on QY-len.\n       linkage section.\n       01  Queues.\n           05  Floors         pic 9(2).\n           05  LengthPerFloor pic 9(2)\n                              occurs 2 to 20 times \n                              depending on Floors.\n           05  QueuesPerFloor \n                              occurs 2 to 20 times \n                              depending on Floors.\n               07 Q           pic 9(2) \n                              occurs 11 times.\n       01 Capcity             pic 9.\n       01  Result.\n           05 N-len           pic 9(4).\n           05 N               pic 9(2) \n                              occurs 0 to 9999 times \n                              depending on N-len.\n       procedure division using Queues Capcity Result.\n      \n          initialize Result\n          set u1 to 1\n          set d to 1\n          set y to 0\n          set N-len to 1\n          set N(1) to 0\n      \n          perform forever\n            \n            if M-len = 0 then\n              set u1 to 0\n              perform varying i from 1 until i > Floors\n                if LengthPerFloor(i) > 0 then\n                  set u1 to 1\n                  exit perform\n                end-if\n              end-perform\n            end-if\n      \n            if u1 = 0 then\n              exit perform\n            end-if\n      \n            initialize K-arr\n            perform varying i from 1 until i > LengthPerFloor(y + 1)\n              move Q(y + 1, i) to p\n              if (d = 1 and p > y) or (d = -1 and p < y) then\n                add 1 to K-len\n                move p to K(K-len)\n              end-if\n            end-perform\n      \n            set u2 to 0\n            if K-len > 0 then\n              set u2 to 1\n            end-if\n            if u2 = 0 then\n              perform varying i from 1 until i > M-len\n                if M(i) = y then\n                  set u2 to 1\n                  exit perform\n                end-if\n              end-perform\n            end-if\n      \n            if u2 = 1 then\n      \n              if N-len = 0 or N(N-len) <> y then\n                add 1 to N-len\n                move y to N(N-len)\n              end-if\n      \n              initialize M-arr-new\n              perform varying i from 1 until i > M-len\n                if M(i) <> y then\n                  add 1 to M-len-new\n                  move M(i) to M-new(M-len-new)\n                end-if\n              end-perform\n              initialize M-arr\n              perform varying i from 1 until i > M-len-new\n                add 1 to M-len\n                move M-new(i) to M(M-len)\n              end-perform\n      \n              initialize QY-arr\n              perform varying i from 1 until i > LengthPerFloor(y + 1)\n                move Q(y + 1, i) to p\n                set u3 to 0\n                if M-len = Capcity then\n                  set u3 to 1\n                end-if\n                if u3 = 0 then\n                  set u3 to 1\n                  perform varying j from 1 until j > K-len\n                    if K(j) = p then\n                      set u3 to 0\n                      exit perform\n                    end-if\n                  end-perform\n                end-if\n                if u3 = 1 then\n                  add 1 to QY-len\n                  move p to QY(QY-len)\n                else\n                  add 1 to M-len\n                  move p to M(M-len)\n                end-if\n              end-perform\n              set LengthPerFloor(y + 1) to QY-len\n              perform varying i from 1 until i > QY-len\n                move QY(i) to Q(y + 1, i)\n              end-perform\n      \n            end-if\n      \n            add d to y\n            evaluate true\n              when y = 0\n                set d to 1\n              when y = Floors - 1\n                set d to -1\n            end-evaluate\n      \n          end-perform\n      \n          if N(N-len) <> 0 then \n            add 1 to N-len\n            set N(N-len) to 0 \n          end-if\n      \n          goback.\n       end program TheLift.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21636,"user_id":50,"body":"      * This code is an implementation of metalin's CoffeeScript solution, with the help of dfhwze\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5aa44238474a7f7f3e0026cd\/groups\/5aa44239474a7f9d3e0026d1\n      \n       identification division.\n       program-id. TheLift.\n       data division.\n       local-storage section.\n       01  i       usage index.\n       01  ol      pic 9(4).\n       01  d       pic s9.\n       01  a       pic 9(2).\n       01  b       pic 9(2).\n       01  c       pic 9(2).\n       01  newQueue.\n           05 len  pic 9(2).\n           05 arr.\n              07 q pic 9(2) occurs 11 times.\n       01  oldR.\n           03 rl   pic 9(2).\n           03 r    pic 9(2) occurs 0 to 11 times \n                            depending on rl indexed by j.\n       01  oldLen  pic 9(2).\n       01  newR.\n           03 nl   pic 9(2).\n           03 nr   pic 9(2) occurs 0 to 11 times depending on nl.\n      \n       linkage section.\n       01  Queues.\n           05  t               pic 9(2).\n           05  LengthPerFloor  pic 9(2)\n               occurs 2 to 20 times depending on t indexed by k.\n           05  QueuesPerFloor \n               occurs 2 to 20 times depending on t indexed by y.\n               07 QueuePerFloor pic 9(2) occurs 11 times.\n       01  cap                  pic 9.\n       01  Result.\n           05 resLen            pic 9(4).\n           05 o                 pic 9(2) occurs 0 to 9999 times \n                                         depending on resLen.\n        \n       procedure division using Queues cap Result.\n      \n          initialize Result\n      \n      * shift all values in Queues by +1 (easier to handle one-indexed)\n          perform varying i from 1 until i > t\n                  after k from 1 until k > LengthPerFloor(i)\n                      add 1 to QueuePerFloor(i, k)\n          end-perform\n      \n      * lift always starts at ground floor\n          add 1 to resLen\n          move 1 to o(ResLen)\n      \n          perform until resLen = ol\n            move resLen to ol\n            perform varying i from 0 until i = 2\n                if function rem(i, 2) = 1\n                   move t to a\n                   move 1 to b\n                   move -1 to d\n                else\n                   move 1 to a\n                   move t to b\n                   move 1 to d\n                end-if\n                move a to y\n                perform until d * (b - y) < 0\n                    initialize newQueue, newR\n                    move rl to oldLen\n                    perform varying j from 1 until j > rl\n                        if r(j) <> y\n                           add 1 to nl\n                           move r(j) to nr(nl)\n                        end-if\n                    end-perform\n                    if nl <> oldLen\n                       perform push\n                       move newR to oldR\n                    end-if\n                    perform varying k from 1 until k > LengthPerFloor(y)\n                        move QueuePerFloor(y, k) to c\n                        if d * (c - y) > 0\n                          perform push\n                          if cap > rl\n                             add 1 to rl\n                             move c to r(rl)\n                          else\n                             add 1 to len\n                             move c to q(len)\n                          end-if\n                       else\n                          add 1 to len\n                          move c to q(len)\n                       end-if\n                    end-perform\n                    move len to LengthPerFloor(y)\n                    move arr to QueuesPerFloor(y)\n                    add d to y\n                end-perform\n            end-perform\n          end-perform\n      \n      * Restauring 0 indexed values\n          perform varying i from 1 until i > Reslen\n              subtract 1 from o(i)\n          end-perform\n      \n      * Add ground floor if current floor <> 0\n          if o(ResLen) <> 0\n             add 1 to ResLen\n             move 0 to o(ResLen)\n          end-if\n      \n          goback.\n      \n      * Add current floor to result if it's different from the last value in result\n          push.\n            if o(ResLen) <> y\n              add 1 to ResLen\n              move y to o(ResLen)\n            end-if\n          .\n      \n       end program TheLift.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589273272fab865136000108":[{"id":21637,"user_id":421,"body":"       identification division.\n       program-id. black-or-white-key.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 piano-key   pic 9(8).\n       01 result      pic a(5).\n       procedure division using piano-key result.\n           EVALUATE FUNCTION REM(piano-key, 88)\n               WHEN 2\n               WHEN 5\n               WHEN 7\n               WHEN 10\n               WHEN 12\n               WHEN 14\n               WHEN 17\n               WHEN 19\n               WHEN 22\n               WHEN 24\n               WHEN 26\n               WHEN 29\n               WHEN 31\n               WHEN 34\n               WHEN 36\n               WHEN 38\n               WHEN 41\n               WHEN 43\n               WHEN 46\n               WHEN 48\n               WHEN 50\n               WHEN 53\n               WHEN 55\n               WHEN 58\n               WHEN 60\n               WHEN 62\n               WHEN 65\n               WHEN 67\n               WHEN 70\n               WHEN 72\n               WHEN 74\n               WHEN 77\n               WHEN 79\n               WHEN 82\n               WHEN 84\n               WHEN 86    MOVE \"black\" TO result\n               WHEN OTHER MOVE \"white\" TO result\n           END-EVALUATE.\n       end program black-or-white-key.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21638,"user_id":null,"body":"       identification division.\n       program-id. black-or-white-key.\n      \n       data division.\n       working-storage section.\n       01 WS-OCTAVE          PIC X(12) VALUE 'WBWWBWBWWBWB'.\n       01 I-OCTAVE-POSITION  PIC S9(4) COMP.\n       01 TEMP               PIC S9(4) COMP.\n       01 I-PIANO-POSITION   PIC S9(4) COMP.\n       01 I-PIANO-KEY-1      PIC S9(4) COMP.\n      \n       linkage section.\n       01 piano-key   pic 9(8).\n       01 result      pic a(5).\n      \n       procedure division using piano-key result.\n          \n          SUBTRACT 1 FROM PIANO-KEY GIVING  I-PIANO-KEY-1\n          DIVIDE I-PIANO-KEY-1 BY 88 GIVING TEMP \n                                     REMAINDER I-PIANO-POSITION\n          DIVIDE I-PIANO-POSITION BY 12  GIVING TEMP\n                                     REMAINDER I-OCTAVE-POSITION\n          \n          IF WS-OCTAVE(I-OCTAVE-POSITION + 1:1) = 'W'\n              MOVE 'white' TO RESULT\n          ELSE\n              MOVE 'black' TO RESULT\n          END-IF\n      \n          goback.\n       end program black-or-white-key.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21639,"user_id":168,"body":"       identification division.\n       program-id. black-or-white-key.\n      \n       data division.\n       linkage section.\n       01 k   pic 9(8).\n       01 result      pic a(5).\n       procedure division using k result.\n          evaluate function mod(function mod(k - 1, 88), 12)\n            when 1 when 4 when 6 when 9 when 11\n              move 'black' to result\n            when other \n              move 'white' to result\n          end-evaluate.\n       end program black-or-white-key.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21640,"user_id":53,"body":"       identification division.\n       program-id. black-or-white-key.\n      \n       data division.\n       working-storage section.\n       01 arr value\n        'whiteblackwhitewhiteblackwhiteblackwhitewhiteblackwhiteblack'.\n           05 xs  pic a(5) occurs 12 times.\n       linkage section.\n       01 piano-key   pic 9(8).\n       01 result      pic a(5).\n       procedure division using piano-key result.\n          move xs(1 + function rem(function rem(piano-key - 1, 88), 12)) \n            to result,\n          goback.\n       end program black-or-white-key.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21641,"user_id":50,"body":"       identification division.\n       program-id. black-or-white-key.\n      \n       data division.\n       local-storage section.\n       01 n           pic 9(8).\n       linkage section.\n       01 piano-key   pic 9(8).\n       01 result      pic a(5).\n       procedure division using piano-key result.\n          \n          compute n = function rem(function rem(piano-key - 1, 88), 12)\n\n          if n = 1 or n = 4 or n = 6 or n = 9 or n = 11\n            move 'black' to result\n          else\n            move 'white' to result\n          end-if\n      \n          goback.\n       end program black-or-white-key.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5894318275f2c75695000146":[{"id":21642,"user_id":50,"body":"       identification division.\n       program-id. DeleteDigit.\n       data division.\n       local-storage section.\n       01 h           pic 9(8) value 1.\n      \n       linkage section.\n       01 n           pic 9(7).\n       01 result      pic 9(6).\n      \n       procedure division using n result.\n      \n          initialize result\n          perform until h > n\n             move function max(function mod(n, h) +\n             function integer(n \/ (10 * h)) * h, result)\n             to result\n             multiply 10 by h\n          end-perform.\n      \n       end program DeleteDigit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21643,"user_id":53,"body":"       identification division.\n       program-id. DeleteDigit.\n       data division.\n       local-storage section.\n       01 d           pic 9(8) value 1.\n       linkage section.\n       01 n           pic 9(7).\n       01 result      pic 9(6).\n       procedure division using n result.\n          initialize result\n          perform until d > n\n             move function max(function rem(n, d) +\n             d * function integer(n \/ (10 * d)), result)\n             to result\n             multiply 10 by d\n          end-perform\n          goback.\n       end program DeleteDigit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589478160c0f8a40870000bc":[{"id":21644,"user_id":421,"body":"       identification division.\n       program-id. arrow-area.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8)v99.\n       procedure division using a b result.\n           compute result = 0.5 * a * 0.5 * b.\n       end program arrow-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21645,"user_id":null,"body":"       identification division.\n       program-id. arrow-area.\n      \n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8)v99.\n       procedure division using a b result.\n      \n       COMPUTE result = (a\/2) * (b\/2).\n      \n       end program arrow-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21646,"user_id":713,"body":"       identification division.\n       program-id. arrow-area.\n      \n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8)v99.\n       procedure division using a b result.\n      \n        COMPUTE result = a * b \/ 4.\n      \n          goback.\n       end program arrow-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21647,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. arrow-area.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8)V99.\n       PROCEDURE DIVISION USING A B RESULT.\n           COMPUTE RESULT = A * B \/ 4.\n       END PROGRAM arrow-area.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21648,"user_id":168,"body":"       identification division.\n       program-id. arrow-area.\n      \n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8)v99.\n       procedure division using a b result.\n          compute result = a * b \/ 4.\n       end program arrow-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21649,"user_id":53,"body":"       identification division.\n       program-id. arrow-area.\n      \n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8)v99.\n       procedure division using a b result.\n          compute result = (b * a) \/ 4\n          goback.\n       end program arrow-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21650,"user_id":50,"body":"       identification division.\n       program-id. arrow-area.\n      \n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8)v99.\n       procedure division using a b result.\n      \n          compute result = (a * b) \/ 4\n      \n          goback.\n       end program arrow-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589519d1f0902e01af000054":[{"id":21651,"user_id":421,"body":"       identification division.\n       program-id. perimeter-sequence.\n       AUTHOR. \"ejini\u6218\u795e\".  \n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n           COMPUTE result = a * n * 4.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21652,"user_id":null,"body":"       identification division.\n       program-id. perimeter-sequence.\n\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n         compute result = a * n * 4.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21653,"user_id":null,"body":"       identification division.\n       program-id. perimeter-sequence.\n\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n\n       compute result = 4 * n * a\n\n          goback.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21654,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. perimeter-sequence.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A N RESULT.\n           COMPUTE RESULT = A * N * 4.\n       END PROGRAM perimeter-sequence.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21655,"user_id":713,"body":"       identification division.\n       program-id. perimeter-sequence.\n\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n        compute result = 4 * n * a.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21656,"user_id":76,"body":"       identification division.\n       program-id. perimeter-sequence.\n\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n         compute result = 4 * a * n.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21657,"user_id":53,"body":"       identification division.\n       program-id. perimeter-sequence.\n\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n          multiply 4 by a giving result\n          multiply n by result giving result\n          goback.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21658,"user_id":50,"body":"       identification division.\n       program-id. perimeter-sequence.\n\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a n result.\n\n          compute result = 4 * a * n\n\n          goback.\n       end program perimeter-sequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589631d24a7323d18d00016f":[{"id":21659,"user_id":421,"body":"       identification division.\n       program-id. which-note.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 str  value \"A A#B C C#D D#E F F#G G#\".   \n          05 a pic x(2) occurs 12 times.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic x(2).\n       procedure division using n result.\n           move str(2 * function rem(function rem(n - 1, 88), 12) + 1\n           :2) to result.\n       end program which-note.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21660,"user_id":168,"body":"       identification division.\n       program-id. which-note.\n       environment division.\n       configuration section.\n       repository. function mod intrinsic.\n       data division.\n       working-storage section.\n       01 value 'A A#B C C#D D#E F F#G G#'.\n          05 keys pic x(2) occurs 12 times.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n          move keys(mod(mod(n - 1, 88), 12) + 1) to result.\n       end program which-note.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21661,"user_id":53,"body":"       identification division.\n       program-id. which-note.\n       data division. \n       working-storage section.\n       01 arr value\n        'A  A# B  C  C# D  D# E  F  F# G  G# '.\n           05 xs  pic a(3) occurs 12 times.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(3).\n       procedure division using n result.\n          move xs(1 + function rem(function rem(n - 1, 88), 12)) \n            to result,\n          goback.\n       end program which-note.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21662,"user_id":null,"body":"       identification division.\n       program-id. which-note.\n\n       data division.\n       working-storage section.\n       01 WS-OCTAVE   PIC X(24) VALUE 'A A#B C C#D D#E F F#G G#'.\n       01 WS-NOTES REDEFINES WS-OCTAVE.\n\t         05 WS-NOTE   PIC X(2) OCCURS 12 TIMES.\n       01 I-OCTAVE-POSITION  PIC S9(4) COMP.\n       01 TEMP               PIC S9(4) COMP.\n       01 I-PIANO-POSITION   PIC S9(4) COMP.\n       01 I-PIANO-KEY-1      PIC S9(4) COMP.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic x(2).\n       procedure division using n result.\n\n          \n          SUBTRACT 1 FROM N GIVING  I-PIANO-KEY-1\n          DIVIDE I-PIANO-KEY-1 BY 88 GIVING TEMP \n                                     REMAINDER I-PIANO-POSITION\n          DIVIDE I-PIANO-POSITION BY 12  GIVING TEMP\n                                     REMAINDER I-OCTAVE-POSITION\n          \n          MOVE WS-NOTE(I-OCTAVE-POSITION + 1) TO result\n      \n          goback.\n       end program which-note.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21663,"user_id":50,"body":"       identification division.\n       program-id. which-note.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic x(2).\n       procedure division using n result.\n      \n          compute n = function rem(n, 88)\n\n          if n = 0\n            move 4 to n\n          else\n            compute n = function rem(n, 12)\n          end-if\n\n          evaluate n\n            when 0       move 'G#' to result\n            when 1       move 'A'  to result\n            when 2       move 'A#' to result\n            when 3       move 'B'  to result\n            when 4       move 'C'  to result\n            when 5       move 'C#' to result\n            when 6       move 'D'  to result\n            when 7       move 'D#' to result\n            when 8       move 'E'  to result\n            when 9       move 'F'  to result\n            when 10      move 'F#' to result\n            when other   move 'G'  to result\n          end-evaluate\n\n          goback.\n       end program which-note.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5896616336c4bad1c50000d7":[{"id":21664,"user_id":421,"body":"       identification division.\n       program-id. annulus-area.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8)v9(2).\n       procedure division using r result.\n           compute result rounded = function pi * (0.5 * r) ** 2.\n       end program annulus-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21665,"user_id":168,"body":"       identification division.\n       program-id. annulus-area.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8)v9(2).\n       procedure division using r result.\n          compute result rounded = function atan(1) * r ** 2.\n       end program annulus-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21666,"user_id":50,"body":"       identification division.\n       program-id. annulus-area.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8)v9(2).\n       procedure division using r result.\n          \n          compute result = (r ** 2) * 0.7853981633974483 + 0.005\n      \n          goback.\n       end program annulus-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21667,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. annulus-area.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n           COMPUTE RESULT ROUNDED = FUNCTION PI * R ** 2 \/ 4.\n       END PROGRAM annulus-area.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21668,"user_id":53,"body":"       identification division.\n       program-id. annulus-area.\n       data division.\n       linkage section.\n       01 r           pic 9(8).\n       01 result      pic 9(8)v9(2).\n       procedure division using r result.\n          compute result = 0.005 + r * r * 0.7853981633974483\n          goback.\n       end program annulus-area.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5898761a9c700939ee000011":[{"id":21669,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CORNER-CIRCLE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n           COMPUTE RESULT = R * 0.17157287525380996\n                            + 0.005.\n       END PROGRAM CORNER-CIRCLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21670,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CORNER-CIRCLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n          compute result rounded = r * (3.0000000 - 2 ** 1.5).\n       END PROGRAM CORNER-CIRCLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21671,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CORNER-CIRCLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n           COMPUTE RESULT ROUNDED = R * 0.171572875.\n       END PROGRAM CORNER-CIRCLE.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21672,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CORNER-CIRCLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n\n        Compute result = function integer ( R * \n                 17.15728753 + 0.5) \/ 100\n\n        Goback.\n\n       END PROGRAM CORNER-CIRCLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21673,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CORNER-CIRCLE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8)V9(2).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n\n        Compute result = function integer ( R * \n                 17.15728752538097 + 0.5) \/ 100\n\n        Goback.\n\n       END PROGRAM CORNER-CIRCLE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589896b99c70093f3e00005b":[{"id":21674,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIXTEEN-CIRCLES.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A          PIC 9(8)V9(29).\n       01 B          PIC 9(8)V9(29).\n       LINKAGE SECTION.\n       01 R           PIC 9(8).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT. \n           COMPUTE A = FUNCTION SQRT(R ** 2 \/ 2)\n           COMPUTE B = FUNCTION SQRT(R ** 2 - (R \/ 2) ** 2)\n           COMPUTE RESULT ROUNDED = (A + B - R) * 2.\n       END PROGRAM SIXTEEN-CIRCLES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21675,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIXTEEN-CIRCLES.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 TMP         PIC 9(8)V9(10).\n       LINKAGE SECTION.\n       01 R           PIC 9(8).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n\n        Compute tmp = function sqrt(2) + function sqrt(3) - 2\n        Compute result rounded = tmp * r\n        Display r\n        Display result\n        Goback.\n\n       END PROGRAM SIXTEEN-CIRCLES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21676,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIXTEEN-CIRCLES.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 P           PIC 9(8)V9(10).\n       01 A           PIC 9(8)V9(10).\n       01 B           PIC 9(8)V9(10).\n       LINKAGE SECTION.\n       01 R           PIC 9(8).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n        compute p = 2.0 * r\n        compute a = function sqrt((p * p) \/ 2.0)\n        compute b = function sqrt((p * p) - (r * r))\n        Compute result rounded = (a + b - p)\n        Goback.\n       END PROGRAM SIXTEEN-CIRCLES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21677,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SIXTEEN-CIRCLES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 R           PIC 9(8).\n       01 RESULT      PIC 9(8)V9(2).\n       PROCEDURE DIVISION USING R RESULT.\n          compute result rounded = r * 1.14626437.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5898b4b71d298e51b600014b":[{"id":21678,"user_id":50,"body":"       identification division.\n       program-id. SortTheInnerContent.\n       data division.\n       local-storage section.\n       01  w     pic a(300).\n       01  tmp.\n           05 tl pic 9(3).\n           05 tch occurs 1 to 300 times depending on tl\n                                        indexed h.\n              07 tchr pic a.\n       01  ptr   usage index.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 chars.\n              07 chr       pic a occurs 1 to 300 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res.\n              07 truc      pic a occurs 1 to 300 times \n                           depending on res-length indexed j k.\n      \n       procedure division using s result.\n      \n          set i j to 1\n          move s-length to res-length\n          perform until i > s-length\n              unstring chars delimited ' ' into w count k pointer i\n              if k > 3\n                  compute tl = k - 2\n                  move function trim(w(2:tl)) to tmp(4:)\n                  sort tch on descending tchr\n                  move tmp(4:) to w(2:k - 2)\n              end-if\n              string function trim(w) ' ' into res pointer j\n          end-perform\n      \n          goback.\n       end program SortTheInnerContent.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21679,"user_id":null,"body":"       identification division.\n       program-id. SortTheInnerContent.\n      \n       data division.\n       working-storage section.\n       01 con2 pic 9(03).\n       01 conChar pic 9(3).\n       01 realWord pic a(21).\n       01 temp pic a(21).\n       01 finalWord pic a(21).\n       01 finalSentence pic a(300).\n       01 firstChar pic a(01).\n       01 lastChar pic a(01).\n       01 aux pic a(01).\n       01 wordLength pic 9(3).\n       linkage section.\n       01  wds.\n           05 wds-length   pic 9(3).\n           05 chr          pic a occurs 1 to 300 times \n                                 depending on wds-length.\n       01  result.\n           05 res-length   pic 9(3).\n           05 res          pic a occurs 1 to 300 times \n                                 depending on res-length.\n      \n       procedure division using wds result.\n      \n          initialize con2\n          initialize temp\n          move spaces to finalSentence\n          move 1 to con2\n          move 1 to conChar\n          move wds-length to res-length\n      \n        perform until con2 > wds-length + 1\n      \n          if chr(con2) = ' ' or con2  >= wds-length + 1 then\n            \n            move temp to realWord\n            move length function trim(temp) to wordLength\n            move temp(1:1) to firstChar\n            move temp(wordLength:1) to lastChar\n            move spaces to finalWord\n            \n            move temp(2:wordLength - 2) to temp\n            move 1 to conChar\n      ** aqui ordenar\n            perform until conChar > wordLength - 2\n\n              if temp(conChar:1)<temp(conChar + 1 : 1) t\n      -       hen\n  \n                  move temp(conChar:1) to aux\n                  move temp(conChar + 1:conChar ) to temp(conChar:1)\n                  move aux to temp(conChar + 1:1)\n                  \n                     move 1 to conChar\n              else\n                  compute conChar = conChar  + 1\n                  \n              end-if\n                \n            end-perform\n      * ************\n            if length function trim(realWord) > 1\n              STRING firstChar temp lastChar delimited by space\n              INTO finalWord \n              end-string\n            else\n              \n              move realWord to finalWord\n            end-if\n      \n      *************\n            \n            string finalSentence  finalWord '*' delimited by space\n            into finalSentence\n      \n            move spaces to temp\n             \n          else\n            STRING temp DELIMITED BY space\n            chr(con2) DELIMITED BY size\n            INTO temp \n            end-string\n          \n\n          end-if\n          \n          compute con2 = con2 + 1\n        end-perform\n      \n      \n          move 1 to con2\n          perform until con2 > length function trim(finalSentence) + 1\n      \n            if finalSentence(con2:1) = '*' then\n              move ' ' to res(con2:1)\n      \n            else\n              move finalSentence(con2:1) to res(con2:1)\n\n            end-if\n              \n             compute con2 = con2 + 1\n\n          end-perform\n          goback.\n      \n      \n       end program SortTheInnerContent.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21680,"user_id":53,"body":"       identification division.\n       program-id. SortTheInnerContent.\n       data division.\n       local-storage section.\n       01  s               pic a(300).\n       01  buffer.\n           05 buff-len     pic 9(3).\n           05 buff         occurs 1 to 300 times depending on buff-len\n                           indexed by h.\n              07 cs        pic a.\n       linkage section.\n       01  s-arr.\n           05 s-len        pic 9(3).\n           05 chars.\n              07 chr       pic a occurs 1 to 300 times \n                           depending on s-len indexed by i.\n       01  result.\n           05 res-len      pic 9(3).\n           05 res.\n              07 res-chrs  pic a occurs 1 to 300 times \n                           depending on res-len indexed by j k l.\n       procedure division using s-arr result.\n          initialize result\n          set i j to 1\n          move s-len to res-len\n          perform until i > s-len\n            unstring chars delimited space into s count k pointer i\n            if k > 3\n              subtract 2 from k giving buff-len\n              subtract 2 from k giving l\n              move function trim(s(2:buff-len)) to buffer(4:)\n              sort buff on descending cs\n              move buffer(4:) to s(2:l)\n            end-if\n            string function trim(s) space into res pointer j\n          end-perform\n          goback.\n       end program SortTheInnerContent.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5899642f6e1b25935d000161":[{"id":21681,"user_id":null,"body":"       identification division.\n       program-id. MergeArrays.\n       data division.\n       working-storage section.\n       01 arr1-order        pic s9(1).\n          88 arr1-asc       value 1.\n          88 arr1-desc      value -1.\n       01 arr2-order        pic s9(1).\n          88 arr2-asc       value 1.\n          88 arr2-desc      value -1.\n       01 new-number        pic s9(3).\n       01 arr-get            pic 9.\n      \n       linkage section.\n       01  arr1.\n           05 len1          pic 9(3).\n           05 xs1           pic s9(3) occurs 100 times \n                                      depending on len1\n                                      indexed by arr1-i.\n       01  arr2.\n           05 len2          pic 9(3).\n           05 xs2           pic s9(3) occurs 100 times \n                                      depending on len2\n                                      indexed by arr2-i.\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic s9(3) occurs 200 times \n                                      depending on resLength\n                                      indexed by res-i.\n      \n       procedure division using arr1 arr2 result.\n          initialize result\n          if len1 > 1 and xs1(1) > xs1(2) then\n             set arr1-desc to true\n             set arr1-i to len1\n          else \n             set arr1-asc to true\n             set arr1-i to 1\n          end-if\n          if len2 > 1 and xs2(1) > xs2(2) then\n             set arr2-desc to true\n             set arr2-i to len2\n          else \n             set arr2-asc to true\n             set arr2-i to 1\n          end-if\n          set res-i to 0\n          set arr-get to 0\n          perform until arr-get = 3\n             set arr-get to 0\n             if arr1-i > len1 or arr1-i < 1 then add 2 to arr-get end-if\n             if arr2-i > len2 or arr2-i < 1 then add 1 to arr-get end-if\n             if arr-get = 0 then\n                if xs1(arr1-i) < xs2(arr2-i) then set arr-get to 1\n                else                              set arr-get to 2\n                end-if\n             end-if\n             evaluate arr-get\n                when 1\n                   set new-number to xs1(arr1-i)\n                   perform add-new-number-to-result\n                   compute arr1-i = arr1-i + arr1-order\n                when 2\n                   set new-number to xs2(arr2-i)\n                   perform add-new-number-to-result\n                   compute arr2-i = arr2-i + arr2-order\n             end-evaluate\n          end-perform\n          set resLength to res-i\n          goback.\n       add-new-number-to-result.\n          if res-i = 0 or res(res-i) not = new-number then\n             add 1 to res-i\n             set res(res-i) to new-number\n          end-if.\n       end program MergeArrays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21682,"user_id":50,"body":"       identification division.\n       program-id. MergeArrays.\n       data division.\n       local-storage section.\n       01 d1               pic s9.\n       01 d2               pic s9.\n      \n       linkage section.\n       01  arr1.\n           05 len1          pic 9(3).\n           05 xs1           pic s9(3) occurs 100 times \n                                      depending on len1 indexed i.\n       01  arr2.\n           05 len2          pic 9(3).\n           05 xs2           pic s9(3) occurs 100 times \n                                      depending on len2 indexed j.\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic s9(3) occurs 200 times \n                                      depending on resLength.\n      \n       procedure division using arr1 arr2 result.\n      \n          initialize resLength\n          if xs1(1) > xs1(len1)\n               move -1 to d1\n               set i to len1\n          else set i d1 to 1 end-if\n          if xs2(1) > xs2(len2)\n               move -1 to d2\n               set j to len2\n          else set j d2 to 1 end-if\n          perform until i > len1 or = 0 or j > len2 or = 0\n              evaluate xs1(i) - xs2(j)\n              when 0\n                  if resLength = 0 or xs1(i) > res(resLength)\n                      set resLength up by 1\n                      move xs1(i) to res(resLength)\n                  end-if\n                  add d1 to i\n                  add d2 to j\n              when negative\n                  if resLength = 0 or xs1(i) > res(resLength)\n                      set resLength up by 1\n                      move xs1(i) to res(resLength)\n                  end-if\n                  add d1 to i\n              when other\n                  if resLength = 0 or xs2(j) > res(resLength)\n                      set resLength up by 1\n                      move xs2(j) to res(resLength)\n                  end-if\n                  add d2 to j\n              end-evaluate\n           end-perform\n           evaluate true\n           when d1 = 1 and i <= len1 or d1 = -1 and i > 0\n              perform varying i from i by d1 until i = 0 or > len1\n                  set resLength up by 1\n                  move xs1(i) to res(resLength)\n              end-perform\n           when d2 = 1 and j <= len2 or d2 = -1 and j > 0\n              perform varying j from j by d2 until j = 0 or > len2\n                  set resLength up by 1\n                  move xs2(j) to res(resLength)\n              end-perform\n           end-evaluate\n          .\n      \n       end program MergeArrays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21683,"user_id":168,"body":"       identification division.\n       program-id. MergeArrays.\n       data division.\n      \n       linkage section.\n       01  arr1.\n           05 len1          pic 9(3).\n           05 xs1           pic s9(3) occurs 100 times \n                                      depending on len1.\n       01  arr2.\n           05 len2          pic 9(3).\n           05 xs2           pic s9(3) occurs 100 times \n                                      depending on len2.\n       01  result.\n           05 resLength     pic 9(2).\n           05 res           occurs 200 times \n                            depending on resLength indexed i j.\n              10 xs pic s9(3).\n      \n       procedure division using arr1 arr2 result.\n          add len1 len2 giving resLength\n          move arr1(4:) to result(3:)\n          move arr2(4:) to result(3 + len1 * 3:)\n          sort res on ascending key xs\n          move 1 to j\n          perform varying i from 2 until i > resLength\n              if xs(i) <> xs(j)\n                  add 1 to j\n              end-if\n              move xs(i) to xs(j)\n          end-perform\n          move j to resLength\n          goback.\n       end program MergeArrays.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21684,"user_id":53,"body":"       identification division.\n       program-id. MergeArrays.\n       data division.\n       linkage section.\n       01  xs.\n           05 p             pic 9(3).\n           05 arr1          occurs 100 times\n                            depending on p indexed i.\n              08 a          pic s9(3).\n       01  ys.\n           05 q             pic 9(3).\n           05 arr2          occurs 100 times\n                            depending on q indexed j.\n              08 b          pic s9(3).\n       01  zs.\n           05 r             pic 9(2).\n           05 arr3          pic s9(3) occurs 200 times \n                                      depending on r.\n       procedure division using xs ys zs.\n          initialize zs\n          sort arr1 on ascending key a\n          sort arr2 on ascending key b\n          set i j to 1\n          perform until i > p and j > q\n            perform until i <= p or j > q\n              add 1 to r\n              move b(j) to arr3(r)\n              add 1 to j\n            end-perform\n            perform until j <= q or i > p\n              add 1 to r\n              move a(i) to arr3(r)\n              add 1 to i\n            end-perform\n            perform until i > p or j > q or a(i) <> b(j)\n              add 1 to r\n              move a(i) to arr3(r)\n              add 1 to i\n              add 1 to j\n            end-perform\n            perform until i > p or j > q or a(i) >= b(j)\n              add 1 to r\n              move a(i) to arr3(r)\n              add 1 to i\n            end-perform\n            perform until i > p or j > q or b(j) >= a(i)\n              add 1 to r\n              move b(j) to arr3(r)\n              add 1 to j\n            end-perform\n          end-perform\n          goback.\n       end program MergeArrays.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589b1c15081bcbfe6700017a":[{"id":21685,"user_id":421,"body":"       identification division.\n       program-id. cost.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 mins        pic 9(8).\n       01 result      pic 9(8).\n       procedure division using mins result.\n           COMPUTE RESULT ROUNDED MODE toward-greater = \n           FUNCTION MAX(0, mins - 65) \/ 30 + 3\n           MULTIPLY 10 BY RESULT.\n       end program cost.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21686,"user_id":null,"body":"       identification division.\n       program-id. cost.\n      \n       data division.\n       linkage section.\n       01 mins        pic 9(8).\n       01 result      pic 9(8).\n       procedure division using mins result.\n         if mins <= 60\n           set result to 30\n         else\n           compute result = function integer((mins - 36) \/ 30)\n                          * 10 + 30.\n       end program cost.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21687,"user_id":76,"body":"       identification division.\n       program-id. cost.\n       data division.\n       linkage section.\n       01 mins        pic 9(8).\n       01 result      pic 9(8).\n       procedure division using mins result.\n         if mins > 65\n           compute result = 30 + 10 * \n            function integer((mins - 65) \/ 30 + 0.99)\n         else\n           move 30 to result\n         end-if.\n       end program cost.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21688,"user_id":53,"body":"       identification division.\n       program-id. cost.\n      \n       data division.\n       linkage section.\n       01 mins        pic S9(8).\n       01 result      pic 9(8).\n       procedure division using mins result.\n          move 30 to result,\n          subtract 60 from mins,\n          perform until mins <= 5\n            add 10 to result,\n            subtract 30 from mins\n          end-perform,\n          goback.\n       end program cost.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21689,"user_id":50,"body":"       identification division.\n       program-id. cost.\n      \n       data division.\n       local-storage section.\n       01 n           pic 9(8).\n       01 r           pic 9(2).\n       linkage section.\n       01 mins        pic 9(8).\n       01 result      pic 9(8).\n       procedure division using mins result.\n          \n          if mins < 66\n            move 30 to result\n          else\n            compute n = (mins - 60)\n            divide 30 into n giving n remainder r\n            if r > 5 then add 1 to n end-if\n            compute result = 30 + n * 10\n          end-if\n\n          goback.\n       end program cost.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21690,"user_id":168,"body":"       identification division.\n       program-id. cost.\n      \n       data division.\n       linkage section.\n       01 mins        pic 9(8).\n       01 result      pic 9(8).\n       procedure division using mins result.\n          if mins <= 65\n              compute result = 30\n          else\n              compute result = 30 + 10 * ((mins - 36) \/ 30)\n          end-if.\n       end program cost.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"589d33e4e0bbce5d6300061c":[{"id":21691,"user_id":421,"body":"       identification division.\n       program-id. control-sequence.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 arr.\n           05 xs      pic 9 value 0.\n           05 xs      pic 9 value 1.\n           05 xs      pic 9 value 1.\n           05 xs      pic 9 value 2.\n           05 xs      pic 9 value 0.\n           05 xs      pic 9 value 2.\n           05 xs      pic 9 value 2.\n           05 xs      pic 9 value 1.\n       01 redefines arr.\n           05 name    pic 9 occurs 8 times.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9.\n       procedure division using n result.\n           compute result = name(function rem(n - 1, 8) + 1).\n       end program control-sequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21692,"user_id":50,"body":"       identification division.\n       program-id. control-sequence.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9.\n       procedure division using n result.\n      \n          evaluate function rem(n, 8)\n            when 1\n            when 5      move 0 to result\n            when 0\n            when 2\n            when 3      move 1 to result\n            when other  move 2 to result\n          end-evaluate\n      \n          goback.\n       end program control-sequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21693,"user_id":76,"body":"       identification division.\n       program-id. control-sequence.\n       data division.\n       local-storage section.\n       01 seq.\n          05 elements pic 9(8) value '01120221'.\n       01 seq-table redefines seq.\n          05 nums pic 9 occurs 8 times.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9.\n       procedure division using n result.\n         move nums(function rem(n - 1, 8) + 1) to result.      \n       end program control-sequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21694,"user_id":168,"body":"       identification division.\n       program-id. control-sequence.\n      \n       data division.\n       working-storage section.\n       01 pisano value '01120221'.\n          05 xs pic 9 occurs 8 times.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9.\n       procedure division using n result.\n          compute result = xs(function mod(n - 1, 8) + 1).\n       end program control-sequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21695,"user_id":53,"body":"       identification division.\n       program-id. control-sequence.\n      \n       data division.\n       working-storage section.\n       01 value '10112022'.\n          05 xs pic 9 occurs 8 times.\n       linkage section.\n       01 n           pic 9(20).\n       01 m           pic 9.\n       procedure division using n m.\n          compute m = xs(function rem (n, 8) + 1)\n          goback.\n       end program control-sequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21696,"user_id":null,"body":"       identification division.\n       program-id. control-sequence.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9.\n       procedure division using n result.\n         evaluate function mod(n, 8)\n           when 0 set result to 1\n           when 1 set result to 0\n           when 2 set result to 1\n           when 3 set result to 1\n           when 4 set result to 2\n           when 5 set result to 0\n           when 6 set result to 2\n           when 7 set result to 2.\n       end program control-sequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58a3e2978bdda5a0d9000187":[{"id":21697,"user_id":168,"body":"       identification division.\n       program-id. primeOperations.\n       data division.\n       working-storage section.\n       01  n          pic 99.\n       01  factors occurs 0 to 99 times depending on n \n                        ascending key factor indexed by i.\n           05 factor  pic 9(20).\n           05 k       pic 99.\n       01  d          pic 9(20).\n       01  e          pic 99.   \n      \n       linkage section.\n       01  x                 pic 9(20).\n       01  y                 pic 9(20).\n       01  result            pic 9(3).\n      \n       procedure division using x y result.\n          move 0 to result n\n      \n          perform varying d from 2 until d * d > x\n              if function mod(x, d) = 0\n                  add 1 to n\n                  move d to factor(n)\n                  move 0 to k(n)\n                  perform test after until function mod(x, d) <> 0\n                      add 1 to k(n)\n                      divide d into x\n                  end-perform\n              end-if\n          end-perform\n          if x > 1\n              add 1 to n\n              move x to factor(n)\n              move 1 to k(n)\n          end-if\n          \n          perform varying d from 2 until d * d > y\n              if function mod(y, d) = 0\n                  move 0 to e\n                  perform test after until function mod(y, d) <> 0\n                      add 1 to e\n                      divide d into y\n                  end-perform\n                  perform compare\n              end-if\n          end-perform\n          if y > 1\n              move y to d\n              move 1 to e\n              perform compare\n          end-if\n      \n          perform varying i from 1 until i > n\n              add k(i) to result\n          end-perform\n          goback.\n       \n       compare.\n          search all factors\n              at end add e to result\n              when factor(i) = d \n                  add function abs(k(i) - e) to result\n                  move 0 to k(i)\n          end-search.        \n       end program primeOperations.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21698,"user_id":53,"body":"       identification division.\n       program-id. primeOperations.\n       data division.\n       local-storage section.\n       01  g                 pic 9(20).\n       01  a                 pic 9(20).\n       01  b                 pic 9(20).\n       01  i                 pic 9(3).\n       01  j                 pic 9(3).\n       linkage section.\n       01  x                 pic 9(20).\n       01  y                 pic 9(20).\n       01  result            pic 9(3).\n       procedure division using x y result.\n          initialize result\n          call 'gcd' using by content x y by reference g\n          divide g into x giving a\n          divide g into y giving b\n          call 'fat' using by content a by reference i\n          call 'fat' using by content b by reference j\n          add i to j giving result\n          goback.\n       end program primeOperations.\n      \n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(20).\n       01 a           pic 9(20).\n       linkage section.\n       01 x           pic 9(20).\n       01 b           pic 9(20).\n       01 r           pic 9(20).\n       procedure division using x b r.\n          initialize r\n          move x to a\n          perform until b = 0\n             move b to c\n             compute b = function rem(a, b)\n             move c to a\n          end-perform\n          move a to r\n          goback.\n       end program gcd.\n      \n       identification division.\n       program-id. fat.\n       data division.\n       local-storage section.\n       01 i           pic 9(20) value 3.\n       linkage section.\n       01 n           pic 9(20).\n       01 r           pic 9(3).\n       procedure division using n r.\n          initialize r\n          perform until function rem(n, 2) <> 0\n            divide 2 into n\n            add 1 to r\n          end-perform\n          perform until i * i > n\n            if function rem(n, i) = 0 then\n              divide i into n\n              add 1 to r\n              set i to 1\n            end-if\n            add 2 to i\n          end-perform\n          if n > 1 then add 1 to r end-if\n          goback.\n       end program fat.\n\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21699,"user_id":50,"body":"       identification division.\n       program-id. primeOperations.\n       data division.\n       local-storage section.\n       01  g                 pic 9(20).\n       01  b                 pic 9(20).\n       01  c                 pic 9(20).\n      \n       linkage section.\n       01  x                 pic 9(20).\n       01  y                 pic 9(20).\n       01  result            pic 9(3).\n      \n       procedure division using x y result.\n      * Implementation of bidouille's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/58e45e6546e371232800136c\/groups\/5cd958d4efd18d000149f245\n          move 0 to result\n      \n          if x = y goback end-if\n      \n          move x to g\n          move y to b\n          perform until b = 0\n            move b to c\n            compute b = function rem(g, b)\n            move c to g\n          end-perform\n          \n          divide g into x\n          divide g into y\n          perform f\n          move y to x\n          perform f\n          goback.\n\n          f.\n          perform until function rem(x, 2) <> 0\n            divide 2 into x\n            add 1 to result\n          end-perform\n          perform until function rem(x, 3) <> 0\n            divide 3 into x\n            add 1 to result\n          end-perform\n          move 5 to b\n          move 2 to c\n          perform until b * b > x\n              if function rem(x, b) <> 0\n                add c to b\n                compute c = 6 - c\n              else\n                divide b into x\n                add 1 to result\n              end-if\n          end-perform\n          if x > 1 add 1 to result end-if\n          .\n       end program primeOperations.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58a5aeb893b79949eb0000f1":[{"id":21700,"user_id":50,"body":"       identification division.\n       program-id. shared-bits.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       01 c           pic 9.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9 value 0.\n       procedure division using a b result.\n      \n          perform until a = 0 or b = 0\n            divide 2 into a giving a remainder r\n            divide 2 into b giving b remainder c\n            if c = 1 and r = 1\n              add 1 to result\n              if result = 2\n                exit perform\n              end-if\n            end-if\n          end-perform\n\n          compute result = function max(0, result - 1)\n\n          goback.\n       end program shared-bits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21701,"user_id":168,"body":"       identification division.\n       program-id. shared-bits.\n      \n       data division.\n       working-storage section.\n       01 x           usage binary-long.\n       01 y           usage binary-long.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9.\n       procedure division using a b result.\n          compute x = a\n          compute y = b\n          call 'CBL_AND' using x y by value 4\n          compute x = y - 1\n          call 'CBL_AND' using x y by value 4\n          if y = 0\n              move 0 to result\n          else\n              move 1 to result\n          end-if.\n       end program shared-bits.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21702,"user_id":53,"body":"       identification division.\n       program-id. shared-bits.\n      \n       data division.\n       local-storage section.\n       01 x           pic 9.\n       01 y           pic 9.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9 value 0.\n       procedure division using a b result.\n          perform until a = 0 or b = 0\n            divide 2 into a giving a remainder x\n            divide 2 into b giving b remainder y\n            if x + y = 2\n              add 1 to result\n              if result = 2\n                exit perform\n              end-if\n            end-if\n          end-perform\n          compute result = function max(0, result - 1)\n          goback.\n       end program shared-bits.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58a6af7e8c08b1e9c40001c1":[{"id":21703,"user_id":50,"body":"       identification division.\n       program-id. HammingDistance.\n       data division.\n       local-storage section.\n       01  bin1              usage binary-long.\n       01  bin2              usage binary-long.\n       01  n                 pic 9(5).\n       01  r                 pic 9.\n      \n       linkage section.\n       01  a                 pic 9(5).\n       01  b                 pic 9(5).\n       01  result            pic 9(2).\n      \n       procedure division using a b result.\n      \n          move a to bin1\n          move b to bin2\n          call 'CBL_XOR' using bin1 bin2 by value 4\n          move bin2 to n\n          move 0 to result\n          perform until n = 0\n            divide n by 2 giving n remainder r\n            add r to result\n          end-perform\n      \n          goback.\n       end program HammingDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21704,"user_id":168,"body":"       identification division.\n       program-id. HammingDistance.\n       data division.\n       working-storage section.\n       01  x                 pic 9.\n       01  y                 pic 9.\n      \n       linkage section.\n       01  a                 pic 9(5).\n       01  b                 pic 9(5).\n       01  result            pic 9(2).\n      \n       procedure division using a b result.\n          move 0 to result\n          perform until a = 0 and b = 0\n              divide a by 2 giving a remainder x\n              divide b by 2 giving b remainder y\n              if x <> y then add 1 to result end-if\n          end-perform.\n       end program HammingDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21705,"user_id":53,"body":"       identification division.\n       program-id. HammingDistance.\n       data division.\n       local-storage section.\n       01  bin1              usage binary-long.\n       01  bin2              usage binary-long.\n       01  m                 pic 9(5).\n       01  d                 pic 9.\n       linkage section.\n       01  a                 pic 9(5).\n       01  b                 pic 9(5).\n       01  r            pic 9(2).\n       procedure division using a b r.\n          move 0 to r\n          move a to bin1\n          move b to bin2\n          call 'CBL_XOR' using bin1 bin2 by value 4\n          move bin2 to m\n          perform until m = 0\n            divide m by 2 giving m remainder d\n            add d to r\n          end-perform\n          goback.\n       end program HammingDistance.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58aa68605aab54a26c0001a6":[{"id":21706,"user_id":53,"body":"       identification division.\n       program-id. DistinctDigitYear.\n       data division.\n       local-storage section.\n       01 y            pic 9(4).\n       linkage section.\n       01 yr           pic 9(4).\n       01 result       pic 9(4).\n       procedure division using yr result.\n          initialize result\n          move yr to y\n          perform step\n          goback.\n      \n        step.\n          add 1 to y\n          if y(1:1) <> y(2:1) and y(1:1) <> y(3:1) and y(1:1) <> y(4:1)\n              and y(2:1) <> y(3:1) and y(2:1) <> y(4:1)\n              and y(3:1) <> y(4:1) then\n            move y to result\n            goback\n          else\n            perform step\n          end-if\n          .\n      \n       end program DistinctDigitYear.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21707,"user_id":50,"body":"       identification division.\n       program-id. DistinctDigitYear.\n      \n       data division.\n       local-storage section.\n       01 i          pic 9.\n       01 tble.\n          03 d       pic 9 occurs 10.\n             88 dupe value 1.\n      \n       linkage section.\n       01 yr         pic 9(4).\n       01 x          pic 9(4).\n       01 redefines x.\n          03 a       pic 9 occurs 4.\n      \n       procedure division using yr x.\n      \n          evaluate yr\n          when < 1023 move 1023 to x goback\n          when > 8975 move 9012 to x goback\n          end-evaluate\n      \n          compute x = yr + 1\n          perform forever\n            initialize tble\n            perform varying i from 1 until i = 5\n              if dupe(a(i) + 1) exit perform\n              else move 1 to d(a(i) + 1) end-if\n            end-perform\n            if i = 5 goback end-if\n            add 1 to x\n          end-perform.\n      \n       end program DistinctDigitYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58acf858154165363c00004e":[{"id":21708,"user_id":421,"body":"       identification division.\n       program-id. targetGame.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  dp.\n           05 dp-length    pic 9(3).\n           05 dpval        pic s9(4) occurs 3 to 100 times\n                                    depending on dp-length.\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic s9(3) occurs 3 to 100 times \n                                     depending on arr-length indexed i.\n       01  result     pic s9(4) sign leading.\n      \n       procedure division using arr result.  \n           move 2 to dp-length\n           move function max(0, xs(1)) to dpval(1)\n           move function max(0, xs(1), xs(2)) to dpval(2)          \n           perform varying i from 3 by 1 until i > arr-length\n               add 1 to dp-length\n               compute dpval(dp-length) = function max(dpval(i - 2) + \n                                 function max(0, xs(i)), dpval(i - 1))             \n           end-perform\n           move dpval(dp-length) to result.\n       end program targetGame.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21709,"user_id":168,"body":"       identification division.\n       program-id. targetGame.\n       data division.\n       local-storage section.\n       01  a          pic s9(8).\n       01  b          pic s9(8).\n       01  t          pic s9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic s9(3) occurs 3 to 100 times \n                                     depending on arr-length indexed i.\n       01  result     pic s9(4) sign leading.\n      \n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n               move b to t\n               move function max(b, a + xs(i)) to b\n               move t to a\n           end-perform\n           move b to result.\n       end program targetGame.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21710,"user_id":53,"body":"       identification division.\n       program-id. targetGame.\n       data division.\n       local-storage section.\n       01  a              pic s9(4) value 0.\n       01  b              pic s9(4) value 0.\n       01  c              pic s9(4) value 0.\n       01  t              pic s9(4) value 0.\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic s9(3) occurs 3 to 100 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  result          pic s9(4) sign leading.\n      \n       procedure division using arr result.\n          perform varying i from 1 until i > arr-length\n            move c to t\n            compute c = function max(a, b) + function max(0, xs(i))\n            move b to a\n            move t to b\n          end-perform\n          compute result = function max(b, c)\n          goback.\n       end program targetGame.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21711,"user_id":50,"body":"       identification division.\n       program-id. targetGame.\n       data division.\n       local-storage section.\n       01  a              pic s9(4).\n       01  c              pic s9(4).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic s9(3) occurs 3 to 100 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  b          pic s9(4) sign leading.\n       procedure division using arr b.\n      \n      * Implementation of Monadius' Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5aea6098a8d2b3f0a3000011\/groups\/613e3e5e2fe9ae0001cfa9a3\n      \n           initialize b\n           perform varying i from 1 until i > arr-length\n                move b to c\n                compute b = function max(b, a + xs(i))\n                move c to a\n           end-perform\n           goback.\n       end program targetGame.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58ade79f3c97367977000274":[{"id":21712,"user_id":168,"body":"       identification division.\n       program-id. roast-legacy.\n\n       data division.\n       working-storage section.\n       01  k1000           pic 9(8).\n       01  k500            pic 9(8).\n       01  k100            pic 9(8).\n       01  k50             pic 9(8).\n       01  total-score     pic 9(8).\n       01  complaints      pic 9(8).\n       01  print-score     pic z(7)9.\n       01  print-comps     pic z(7)9.\n\n       linkage section.\n       01  workloads.\n           05 len      pic 9(3).\n           05 str.\n               10 chars pic x occurs 0 to 999 times depending on len.\n       01  result      pic x(100).\n\n       procedure division using workloads result.\n           move 0 to complaints k1000 k500 k100 k50\n           move function lower-case(str) to str\n           inspect str \n               tallying complaints for all 'slow!'\n                        complaints for all 'expensive!'\n                        complaints for all 'manual!'\n                        complaints for all 'down!'\n                        complaints for all 'hostage!'\n                        complaints for all 'security!'\n                        k1000      for all 'cobol'\n                        k500       for all 'nonobject'\n                        k500       for all 'monolithic'\n                        k100       for all 'fax'\n                        k100       for all 'modem'\n                        k50        for all 'thickclient'\n                        k50        for all 'tape'\n                        k50        for all 'floppy'\n                        k50        for all 'oldschoolit'\n           compute total-score = \n               1000 * k1000 + 500 * k500 + 100 * k100 + 50 * k50\n\n           if total-score > 0 or complaints > 0\n               initialize result\n               move total-score to print-score\n               move complaints to print-comps\n               string 'Burn baby burn disco inferno '\n                       function trim(print-score)\n                       ' points earned in this roasting and '\n                       function trim(print-comps)\n                       ' complaints resolved!'\n                   into result\n           else\n               move 'These guys are already DevOps and in the '\n                  & 'Cloud and the business is happy!' to result\n           end-if\n           goback.\n       end program roast-legacy.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21713,"user_id":50,"body":"       identification division. program-id. roast-legacy.data division.\n       local-storage section. 1 s pic 9(9). 1 c pic 9(9). 1 i usage \n       index value 1. 1 x pic x(11). 1 w pic x(11). 1 a pic z(9)9. 1\n       b pic z(9)9. linkage section. 1 q. 5 l pic 9(3). 5 e. 7 pic x\n       occurs 0 to 999 times depending l. 1 r pic x(100). procedure\n       division using q r. move''to r perform until i>l unstring\n       function lower-case(e)delimited by' 'or'cobol'or'nonobject'or\n       'monolithic'or'fax'or'modem'or'thickclient'or'tape'or'floppy'or\n       'oldschoolit'or'slow!'or'expensive!'or'manual!'or'down!'or\n       'hostage!'or'security!'into x delimiter w pointer i evaluate w \n       when ' ' continue when'cobol'add 1000 to s when'nonobject'when\n       'monolithic'add 500 to s when'fax'when'modem'add 100 to s when\n       'thickclient'when'tape'when'floppy'when'oldschoolit'add 50 to s\n       when other add 1 to c end-evaluate end-perform if s+c=0 string\n       'These guys are already DevOps and in the Cloud and the busines'\n       &'s is happy!'into r else move s to a move c to b string 'Burn '\n       &'baby burn disco inferno ' function trim(a)' points earned in '\n       &'this roasting and 'function trim(b)' complaints resolved!'into\n             r     end-if.      end      program     roast-legacy.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21714,"user_id":50,"body":"       identification division.\n       program-id. roast-legacy.\n\n       data division.\n       local-storage section.\n       01  s          pic 9(32).\n       01  c          pic 9(32).\n       01  i          usage index.\n       01  x          pic x(11).\n       01  w          pic x(11).\n       01  a          pic z(9)9.\n       01  b          pic z(9)9.\n      \n       linkage section.\n       01  workloads.\n           05 len      pic 9(3).\n           05 str.\n               10 chars pic x occurs 0 to 999 times depending on len.\n       01  result      pic x(100).\n\n       procedure division using workloads result.\n        \n           initialize result\n           move function lower-case(str) to str.\n           set i to 1\n           perform until i > length of function trim(str)\n              unstring str delimited by all ' '\n              or 'cobol'\n              or 'nonobject'\n              or 'monolithic'\n              or 'fax'\n              or 'modem'\n              or 'thickclient'\n              or 'tape'\n              or 'floppy'\n              or 'oldschoolit'\n              or 'slow!'\n              or 'expensive!'\n              or 'manual!'\n              or 'down!'\n              or 'hostage!'\n              or 'security!'\n              into x delimiter w pointer i\n      \n              evaluate w\n              when 'cobol'       add 1000 to s\n              when 'nonobject'   add 500  to s\n              when 'monolithic'  add 500  to s\n              when 'fax'         add 100  to s\n              when 'modem'       add 100  to s\n              when 'thickclient' add 50   to s\n              when 'tape'        add 50   to s\n              when 'floppy'      add 50   to s\n              when 'oldschoolit' add 50   to s\n              when space         continue\n              when other         add 1 to c\n              end-evaluate\n           end-perform\n            \n           if s + c = 0 \n              string 'These guys are already DevOps and'\n                   & ' in the Cloud and the business is happy!'\n              into result\n           else\n              move s to a\n              move c to b\n              string 'Burn baby burn disco inferno '\n                       function trim(a)\n                     ' points earned in this roasting and '\n                       function trim(b)\n                     ' complaints resolved!'\n              into result\n            end-if\n           goback.\n       end program roast-legacy.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21715,"user_id":168,"body":"       identification division.\n       program-id. roast-legacy.\n\n       data division.\n       working-storage section.\n       01  word        pic x(12).\n       01  tmp         pic x.\n       01  score-values.\n           05 filler.\n               10 pic x(12)    value 'cobol'.\n               10 pic 9(4)     value 1000.\n           05 filler.\n               10 pic x(12)    value 'fax'.\n               10 pic 9(4)     value 100.\n           05 filler.\n               10 pic x(12)    value 'floppy'.\n               10 pic 9(4)     value 50.\n           05 filler.\n               10 pic x(12)    value 'modem'.\n               10 pic 9(4)     value 100.\n           05 filler.\n               10 pic x(12)    value 'monolithic'.\n               10 pic 9(4)     value 500.\n           05 filler.\n               10 pic x(12)    value 'nonobject'.\n               10 pic 9(4)     value 500.\n           05 filler.\n               10 pic x(12)    value 'oldschoolit'.\n               10 pic 9(4)     value 50.\n           05 filler.\n               10 pic x(12)    value 'tape'.\n               10 pic 9(4)     value 50.\n           05 filler.\n               10 pic x(12)    value 'thickclient'.\n               10 pic 9(4)     value 50.\n       01  score-table redefines score-values.\n           05 keywords occurs 9 times ascending key is keyword\n                                      indexed by k.\n               10 keyword pic x(12).\n               10 score   pic 9(4).\n\n       01  total-score     pic 9(8).\n       01  complaints      pic 9(8).\n       01  print-score     pic z(7)9.\n       01  print-comps     pic z(7)9.\n\n       linkage section.\n       01  workloads.\n           05 len      pic 9(3).\n           05 str.\n               10 chars pic x occurs 0 to 999 times depending on len\n                              indexed by i.\n       01  result      pic x(100).\n\n       procedure division using workloads result.\n           move 0 to total-score complaints\n           set i to 1\n           move function lower-case(str) to str\n           perform until i > len\n               initialize word\n               unstring str\n                   delimited by 'cobol' or 'nonobject' or 'monolithic'\n                             or 'fax' or 'modem' or 'thickclient'\n                             or 'tape' or 'floppy' or 'oldschoolit'\n                             or \"slow!\" or \"expensive!\" or \"manual!\"\n                             or \"down!\" or \"hostage!\" or \"security!\"\n                   into tmp delimiter in word\n                   with pointer i\n               end-unstring\n               if word <> spaces\n                   search all keywords\n                       at end \n                           add 1 to complaints\n                       when keyword(k) = word\n                           add score(k) to total-score\n                   end-search\n               end-if\n           end-perform\n           if total-score > 0 or complaints > 0\n               initialize result\n               move total-score to print-score\n               move complaints to print-comps\n               string 'Burn baby burn disco inferno '\n                       function trim(print-score)\n                       ' points earned in this roasting and '\n                       function trim(print-comps)\n                       ' complaints resolved!'\n                   into result\n           else\n               move 'These guys are already DevOps and in the '\n                  & 'Cloud and the business is happy!' to result\n           end-if\n           goback.\n       end program roast-legacy.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58aed2cafab8faca1d000e20":[{"id":21716,"user_id":53,"body":"       identification division.\n       program-id. ModifiedSum.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-len       pic 9(2).\n           05 xs            pic 9(2)\n                            occurs 10 times \n                            depending on arr-len indexed by i.\n       01  n                pic 9.\n       01  result           pic 9(20).\n       procedure division using arr n result.\n          initialize result\n          perform varying i from 1 until i > arr-len\n            add function abs(xs(i) ** n - xs(i)) to result\n          end-perform.\n       end program ModifiedSum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21717,"user_id":50,"body":"       identification division.\n       program-id. ModifiedSum.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 l             pic 9(2).\n           05 xs            pic 9(2)\n                            occurs 10 times \n                            depending on l indexed by i.\n                                      \n       01  n                pic 9.\n       01  result           pic 9(20).\n      \n       procedure division using arr n result.\n      \n          initialize result\n          perform varying i from 1 until i > l\n            add function abs(xs(i) ** n - xs(i)) to result\n          end-perform\n      \n          goback.\n       end program ModifiedSum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58af1bb7ac7e31b192000020":[{"id":21718,"user_id":421,"body":"       identification division.\n       program-id. FindSummands.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  num               pic 9(10).      \n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 11000 times \n                                     depending on res-length.\n      \n       procedure division using n result.\n           compute num = n * (n - 1) + 1\n           initialize res-length\n           perform until res-length = n\n               add 1 to res-length\n               move num to res(res-length)\n               add 2 to num\n           end-perform.\n       end program FindSummands.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21719,"user_id":168,"body":"       identification division.\n       program-id. FindSummands.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 11000 times \n                                     depending on res-length indexed i.\n      \n       procedure division using n result.\n          move n to res-length\n          perform varying i from 1 until i > n\n              compute res(i) = n * (n - 1) + 2 * i - 1\n          end-perform.\n       end program FindSummands.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21720,"user_id":53,"body":"       identification division.\n       program-id. FindSummands.\n       data division.\n      \n       local-storage section.\n       01  x                 pic 9(10).\n      \n       linkage section.\n       01  n                 pic 9(5).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 11000 times \n                                       depending on res-length\n                                       indexed by i.\n      \n       procedure division using n result.\n      \n          move n to res-length\n          compute x = n ** 2 - n + 1\n          perform varying i from 0 until i = res-length\n            compute res(i + 1) = x + 2 * i\n          end-perform\n      \n          goback.\n       end program FindSummands.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21721,"user_id":50,"body":"       identification division.\n       program-id. FindSummands.\n       data division.\n       local-storage section.\n       01  x                 pic 9(10).\n      \n       linkage section.\n       01  n                 pic 9(5).\n\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 11000 times \n                             depending on res-length indexed by i.\n      \n       procedure division using n result.\n      \n          move n to res-length\n          compute x = n * (n - 1) + 1\n          perform varying i from 1 until i > n\n            compute res(i) = x + 2 * (i - 1)\n          end-perform\n      \n          goback.\n       end program FindSummands.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58afce23b0e8046a960000eb":[{"id":21722,"user_id":168,"body":"       identification division.\n       program-id. withdraw.\n      \n       data division.\n      \n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 bills-of-100  pic 9(8).\n           05 bills-of-50   pic 9(8).\n           05 bills-of-20   pic 9(8).\n      \n       procedure division using n result.\n          if function mod(n, 20) <> 0\n              compute bills-of-100 = (n - 50) \/ 100\n              compute bills-of-50 = 1\n              compute bills-of-20 = function mod((n - 50) \/ 20, 5)\n          else\n              compute bills-of-100 = n \/ 100\n              compute bills-of-50 = 0\n              compute bills-of-20 = function mod(n \/ 20, 5)\n          end-if.\n       end program withdraw.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21723,"user_id":76,"body":"       identification division.\n       program-id. withdraw.\n       data division.\n       linkage section.\n       01 n                pic 9(8).\n       01 result.\n          05 bills-of-100  pic 9(8).\n          05 bills-of-50   pic 9(8).\n          05 bills-of-20   pic 9(8).\n       procedure division using n result.\n         initialize result\n         perform until function mod(n, 50) = 0\n           add 1 to bills-of-20\n           subtract 20 from n\n         end-perform\n         divide n by 100 giving bills-of-100\n         compute bills-of-50 = function mod(n, 100) \/ 50\n         goback.\n       end program withdraw.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21724,"user_id":50,"body":"       identification division.\n       program-id. withdraw.\n      \n       data division.\n       local-storage section.\n       01 c            pic 9(8).\n       01 h            pic 9(8).\n       01 f            pic 9(8).\n      \n       linkage section.\n       01  n           pic 9(8).\n       01  result.\n           05 bills-of-100  pic 9(8).\n           05 bills-of-50   pic 9(8).\n           05 bills-of-20   pic 9(8).\n      \n       procedure division using n result.\n      \n          if function rem(function integer(n \/ 10), 2) = 1\n              add 1 to c\n              subtract 50 from n\n          end-if\n          \n          divide n by 100 giving h remainder n\n          divide n by 100 giving f remainder n\n          compute c = c + 2 * f\n          \n          move h to bills-of-100 of result \n          move c to bills-of-50  of result\n          move function integer(n \/ 20)\n                 to bills-of-20  of result\n      \n          goback.\n       end program withdraw.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58b16300a470d47498000811":[{"id":21725,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-DIVISORS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           pic 9(18) usage comp-5.\n       LINKAGE SECTION.\n       01 N            pic 9(18) usage comp-5.\n       01 RESULT       pic 9(18) usage comp-5.\n       PROCEDURE DIVISION USING N RESULT.\n        COMPUTE RESULT = 2 * N - 1\n        PERFORM VARYING A FROM 2 BY 1 UNTIL (A * A) > N\n           COMPUTE RESULT = 2 * ((N \/ A) - A) + 1 + RESULT\n        END-PERFORM           \n        \n        Goback.\n\n       END PROGRAM COUNT-DIVISORS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21726,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-DIVISORS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M            pic 9(18).\n       01 I            pic 9(18).\n       01 K            pic 9(18).\n       LINKAGE SECTION.\n       01 N            pic 9(18) usage comp-5.\n       01 RESULT       pic 9(18) usage comp-5.\n       PROCEDURE DIVISION USING N RESULT.\n        move 0 to result\n        compute m = function sqrt (n)\n        perform varying i from 0 by 1 until i >= m\n         compute k = n \/ (i + 1)\n         compute result = result + k\n        end-perform\n        compute result = result * 2 - m ** 2\n        Goback.\n       END PROGRAM COUNT-DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21727,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-DIVISORS.\n       DATA DIVISION.\n       working-storage section.\n       01 r            pic 9(18) usage comp-5.\n       01 k            pic 9(18) usage comp-5.\n       LINKAGE SECTION.\n       01 N            pic 9(18) usage comp-5.\n       01 RESULT       pic 9(18) usage comp-5.\n       PROCEDURE DIVISION USING N RESULT.\n           compute r = function sqrt(n)\n           compute result = 0\n           perform varying k from 1 by 1 until k > r\n              compute result = result + n \/ k\n           end-perform\n           compute result = 2 * result - r * r.\n       END PROGRAM COUNT-DIVISORS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58b38256e51f1c2af0000081":[{"id":21728,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. BestMatch.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  GOALS1.\n           05 LEN1        PIC 9(2).\n           05 XS1         PIC 9(2) OCCURS 20 DEPENDING LEN1 INDEXED I.\n       01  GOALS2.\n           05 LEN2        PIC 9(2).\n           05 XS2         PIC 9(2) OCCURS 20 DEPENDING LEN2.\n       01  RESULT         PIC 9(2).\n\n       PROCEDURE DIVISION USING GOALS1 GOALS2 RESULT.\n           MOVE LEN1  TO RESULT\n           PERFORM VARYING I FROM LEN1 BY -1 UNTIL I = 0\n               IF  XS1(I) - XS2(I) <  XS1(RESULT) - XS2(RESULT)\n               OR (XS1(I) - XS2(I)  = XS1(RESULT) - XS2(RESULT)\n               AND XS2(I)          >= XS2(RESULT))\n                   MOVE I  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM BestMatch.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21729,"user_id":53,"body":"       identification division.\n       program-id. BestMatch.\n       data division.\n       local-storage section.\n       01  i             pic s9(2).\n       01  m             pic s9(2) value 0.\n       01  d             pic s9(2) value -1.\n       01  j             pic s9(2) value -1.\n       01  x             pic s9(2).\n       01  y             pic s9(2).\n       01  a             pic s9(2).\n       linkage section.\n       01  xs-arr.\n           05 xs-len     pic 9(2).\n           05 xs         pic 9(2) occurs 1 to 20 times \n                                  depending on xs-len.\n       01  ys-arr.\n           05 ys-len     pic 9(2).\n           05 ys         pic 9(2) occurs 1 to 20 times \n                                  depending on ys-len.\n       01  result        pic 9(2).\n       procedure division using xs-arr ys-arr result.\n          initialize result\n          perform varying i from 1 until i > xs-len or i > ys-len\n            move xs(i) to x\n            move ys(i) to y\n            compute a = function abs(x - y)\n            if d < 0 or a <= d then\n              evaluate true\n                when d < 0 or a < d\n                  move a to d\n                  move y to m\n                  move i to j\n                when y > m\n                  move y to m\n                  move i to j\n              end-evaluate\n            end-if\n          end-perform\n          move j to result\n          goback.\n       end program BestMatch.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21730,"user_id":50,"body":"       identification division.\n       program-id. BestMatch.\n       data division.\n       local-storage section.\n       01 k              pic 9(2).\n       01 h              pic 9(2).\n      \n       linkage section.\n       01  x.\n           05 len1        pic 9(2).\n           05 a           pic 9(2) occurs 1 to 20 times \n                                      depending on len1.\n       01  y.\n           05 len2        pic 9(2).\n           05 b          pic 9(2) occurs 1 to 20 times \n                          depending on len2 indexed i.\n       01  result         pic 9(2).\n      \n       procedure division using x y result.\n      \n          move 1 to result\n          compute k = a(1) - b(1)\n          move b(1) to h\n          perform varying i from 2 until i > len1\n              if a(i) - b(i) < k \n              or a(i) - b(i) = k\n              and b(i) > h\n                  move i to result\n                  compute k = a(i) - b(i)\n                  move b(i) to h\n              end-if\n          end-perform\n      \n          goback.\n       end program BestMatch.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58b3c2bd917a5caec0000017":[{"id":21731,"user_id":53,"body":"       identification division.\n       program-id. SumGroups recursive.\n       data division.\n       working-storage section.\n       01  xs-arr.\n           05  xs-len        pic 9(4).\n           05  xs            pic 9(4) occurs 1000 times \n                                      depending on xs-len\n                                      indexed by i.\n       local-storage section.\n       01  r-arr.\n           05  r-len         pic 9(4).\n           05  r             pic 9(4) occurs 1000 times \n                                      depending on r-len.\n       01  m                 pic 9(4) value 0.\n       01  p                 pic 9(4) value 0.\n       linkage section.\n       01  arr.\n           05  arr-len       pic 9(4).\n           05  arr-elems     pic 9(4) occurs 1000 times \n                                      depending on arr-len.\n       01  result            pic 9(4).\n       procedure division using arr result.\n          initialize result\n          move arr to xs-arr\n          perform varying i from 1 until i > xs-len\n            add xs(i) to m\n            if i = xs-len or function rem(xs(i), 2)\n                <> function rem(xs(i + 1), 2) then\n              add 1 to r-len\n              move m to r(r-len)\n              set m to 0\n            end-if\n          end-perform\n          if r-len = xs-len then\n            move r-len to result\n          else\n            call 'SumGroups' using \n              by content r-arr \n              by reference p\n            move p to result\n          end-if\n          goback.\n       end program SumGroups.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21732,"user_id":53,"body":"       identification division.\n       program-id. SumGroups.\n       data division.\n       working-storage section.\n       01  xs-arr.\n           05  xs-len        pic 9(4).\n           05  xs            pic 9(4) occurs 1000 times \n                                      depending on xs-len\n                                      indexed by i.\n       local-storage section.\n       01  r-arr.\n           05  r-len         pic 9(4).\n           05  r             pic 9(4) occurs 1000 times \n                                      depending on r-len.\n       01  m                 pic 9(4).\n       linkage section.\n       01  arr.\n           05  arr-len       pic 9(4).\n           05  arr-elems     pic 9(4) occurs 1000 times \n                                      depending on arr-len.\n       01  result            pic 9(4).\n       procedure division using arr result.\n          initialize result\n          perform forever\n            initialize r-arr\n            initialize m\n            move arr to xs-arr\n            perform varying i from 1 until i > xs-len\n              add xs(i) to m\n              if i = xs-len or function rem(xs(i), 2)\n                  <> function rem(xs(i + 1), 2) then\n                add 1 to r-len\n                move m to r(r-len)\n                set m to 0\n              end-if\n            end-perform\n            if r-len = xs-len then\n              move r-len to result\n              exit perform\n            else\n              move r-arr to arr\n            end-if\n          end-perform\n          goback.\n       end program SumGroups.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21733,"user_id":50,"body":"       identification division.\n       program-id. SumGroups.\n       data division.\n       working-storage section.\n       01  tmp              pic 9.\n       01  q                pic 9.\n           88  flag         value 1.\n       01  p                pic 9.\n       01  n                pic 9.\n       01  a.\n           05 la            pic 9(4).\n           05 e             pic 9(4) occurs 1000 depending la.\n       linkage section.\n       01  arr.\n           05  l            pic 9(4).\n           05  xs           pic 9(4) occurs 1000 times \n                                      depending on l indexed i.\n       01  result           pic 9(4).\n      \n       procedure division using arr result.\n      \n          if l < 2 then\n            move l to result\n            goback\n          end-if\n      \n          perform forever\n              initialize la q\n              compute tmp p = function mod(xs(1), 2)\n              perform varying i from 2 until i > l\n                compute n = function mod(xs(i), 2)\n                if n = p\n                    set flag to true\n                    compute tmp = function mod(tmp + n, 2)\n                else\n                    add 1 to la\n                    move tmp to e(la)\n                    move n to p tmp\n                end-if\n              end-perform\n              add 1 to la\n              move tmp to e(la)\n              if not flag or la = 1\n                  move la to result\n                  goback\n              end-if\n              move a to arr\n          end-perform.\n      \n       end program SumGroups.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58b8c94b7df3f116eb00005b":[{"id":21734,"user_id":421,"body":"       identification division.\n       program-id. ReverseLetter.\n       author. \"ejini\u6218\u795e\".\n       data division.\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 1 to 20 times \n                           depending on s-length indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 1 to 20 times \n                           depending on res-length.\n      \n       procedure division using s result.\n           perform varying i from s-length by -1 until i = 0\n               if function ord(chr(i)) >= 98 and\n                  function ord(chr(i)) <= 123 then\n                   add 1 to res-length\n                   move chr(i) to res(res-length)\n               end-if\n           end-perform.\n       end program ReverseLetter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21735,"user_id":50,"body":"       identification division.\n       program-id. ReverseLetter.\n       data division.\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 1 to 20 times \n                           depending on s-length indexed i.\n              88 lower     value 'a' thru 'z'.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 1 to 20 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length\n          perform varying i from s-length by -1 until i = 0\n              if lower(i)\n                add 1 to res-length\n                move chr(i) to res(res-length)\n              end-if\n          end-perform\n      \n          goback.\n       end program ReverseLetter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21736,"user_id":168,"body":"       identification division.\n       program-id. ReverseLetter.\n       data division.\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 1 to 20 times \n                           depending on s-length indexed i.\n       01  result.\n           05 r            pic 9(2).\n           05 res          pic x occurs 1 to 20 times \n                           depending on r.\n      \n       procedure division using s result.\n          move 0 to r\n          perform varying i from s-length by -1 until i = 0\n             if chr(i) >= 'a' and <= 'z' or >= 'A' and <= 'Z'\n                 add 1 to r\n                 move chr(i) to res(r)\n             end-if\n          end-perform.  \n       end program ReverseLetter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21737,"user_id":53,"body":"       identification division.\n       program-id. ReverseLetter.\n       data division.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 1 to 20 times \n                           depending on s-length\n                           indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 1 to 20 times \n                           depending on res-length.\n       procedure division using s result.\n          initialize result\n          perform varying i from s-length by -1 until i = 0\n            if (chr(i) >= 'a' and chr(i) <= 'z') or \n               (chr(i) >= 'A' and chr(i) <= 'Z')\n              add 1 to res-length\n              move chr(i) to res(res-length)\n            end-if\n          end-perform\n          goback.\n       end program ReverseLetter.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21738,"user_id":50,"body":"       identification division.\n       program-id. ReverseLetter.\n       data division.\n\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chr          pic x occurs 1 to 20 times \n                           depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 1 to 20 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to res-length\n          perform varying i from s-length by -1 until i = 0\n              if chr(i) >= 'a' and chr(i) <= 'z'\n                add 1 to res-length\n                move chr(i) to res(res-length)\n              end-if\n          end-perform\n      \n          goback.\n       end program ReverseLetter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58b8d22560873d9068000085":[{"id":21739,"user_id":168,"body":"       identification division.\n       program-id. faulty-odometer.\n      \n       data division.\n       working-storage section.\n       01 b           pic 9(10).\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n      \n       procedure division using n result.\n          compute result = 0\n          compute b = 1\n          perform until n = 0\n              divide n by 10 giving n remainder r\n              if r > 4 then subtract 1 from r end-if\n              compute result = result + r * b\n              multiply 9 by b\n          end-perform.\n       end program faulty-odometer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21740,"user_id":53,"body":"       identification division.\n       program-id. faulty-odometer recursive.\n       data division.\n       local-storage section.\n       01 d           pic 9.\n       01 m           pic 9(10).\n       01 r           pic 9(10).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          move 0 to r\n          move n to m\n          if m > 0 then\n            divide m by 10 giving m remainder d\n            if d > 4 then subtract 1 from d end-if\n            call 'faulty-odometer' using m r\n            compute r = 9 * r + d\n          end-if\n          move r to result\n          goback.\n       end program faulty-odometer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21741,"user_id":50,"body":"       identification division.\n       program-id. faulty-odometer.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9.\n       01 k           pic 9.\n      \n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n      \n       procedure division using n result.\n          \n          perform until n = 0\n      \n            divide n by 10 giving n remainder k\n            if k > 4\n              subtract 1 from k\n            end-if\n            compute result = result + k * 9 ** i\n            add 1 to i\n      \n          end-perform\n      \n          goback.\n       end program faulty-odometer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58ba6fece3614ba7c200017f":[{"id":21742,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(20)9.\n      \n       linkage section.\n       01 num         pic s9(16).\n       01 result      pic 9.\n      \n       procedure division using num result.\n      \n          evaluate num\n          when negative set result to 0\n          when < 10     set result to 1\n          when other\n            move num to z\n            if function trim(z) = \n               function reverse(function trim(z))\n                  set result to 1\n            else  set result to 0 end-if\n          end-evaluate\n      \n          goback.\n      \n       end program Palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21743,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Palindrome.\n       ENVIRONMENT DIVISION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC S9(16).\n       01 RESULT      PIC 9.\n\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           IF  N > 0 AND N(16 - LOG10(N):) = REVERSE(N(16 - LOG10(N):))\n               MOVE 1  TO RESULT\n           END-IF.\n       END PROGRAM Palindrome.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21744,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 z           pic z(20)9.\n       linkage section.\n       01 num         pic s9(16).\n       01 r           pic 9.\n       procedure division using num r.\n          evaluate num\n            when < 0 \n              set r to 0\n            when < 10    \n              set r to 1\n            when other\n              move num to z\n              if function trim(z) = function reverse(function trim(z))\n                set r to 1\n              else  \n                set r to 0 \n              end-if\n          end-evaluate\n          goback.\n       end program Palindrome.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58bc16e271b1e4c5d3000151":[{"id":21745,"user_id":168,"body":"       identification division.\n       program-id. GetMinBase.\n      \n       data division.\n       working-storage section.\n       01 k           usage index.\n       01 b           pic 9(10).\n\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          compute k = function abs(function log(n) \/ function log(2))\n          perform varying k from k by -1 until k < 2\n              compute b = function abs(n ** (1 \/ k) + 1)\n              perform varying b from b by -1 until b < 2\n                  evaluate (b ** (k + 1) - 1) \/ (b - 1)\n                      when n   move b to result; goback\n                      when < n exit perform\n                  end-evaluate\n              end-perform\n          end-perform\n          compute result = n - 1\n          goback.\n       end program GetMinBase.            \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21746,"user_id":53,"body":"       identification division.\n       program-id. GetMinBase.\n       data division.\n       local-storage section.\n       01 n           pic 9(20).\n       01 b           pic 9(20).\n       01 z           pic 9(20).\n       linkage section.\n       01 x           pic 9(20).\n       01 r           pic 9(20).\n       procedure division using x r.\n      \n          subtract 1 from x giving r\n          compute n rounded mode toward-greater\n            = function log(x) \/ function log(2)\n          perform until n = 0\n            compute b = x ** function abs(1.0 \/ n)\n            perform verify\n            subtract 1 from b\n            perform verify\n            subtract 1 from n\n          end-perform\n          goback.\n      \n          verify.\n            move x to z\n            perform until function rem(z, b) <> 1\n              compute z = (z - 1) \/ b\n            end-perform\n            if z = 0 then move b to r, goback end-if\n            .      \n          \n       end program GetMinBase.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21747,"user_id":50,"body":"       identification division.\n       program-id. GetMinBase.\n      \n       data division.\n       local-storage section.\n       01 k    pic 9(20).\n       01 b    pic 9(20).\n       01 i    pic 9(20).\n       01 t    pic 9(32).\n       01 s    pic 9(32).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n      * Implementation of monadius' JavaScript solution\n      * https:\/\/www.codewars.com\/kata\/reviews\/58bc1f5602f48e8f7000009a\/groups\/5aebaa7d116e09861200086b\n      \n          initialize result\n          compute k rounded mode toward-greater = \n                    function log(n) \/ function log(2)\n          add 1 to k\n      \n          perform until k = 1\n            compute b rounded mode toward-greater =\n                      n ** function abs(1.0 \/ k)\n            add 1 to b\n            perform until b = 1\n              move 0 to s\n              move 1 to t\n              perform varying i from 0 until i > k\n                add t to s\n                multiply b by t\n              end-perform\n              evaluate s\n              when n\n                  move b to result\n                  goback\n              when < n\n                  exit perform\n              end-evaluate\n              subtract 1 from b\n            end-perform\n            subtract 1 from k\n          end-perform\n      \n          compute result = n - 1\n      \n          goback.\n       end program GetMinBase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58c21c4ff130b7cab400009e":[{"id":21748,"user_id":421,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n       AUTHOR. \"ejini\u6218\u795e\".\n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  result            pic 9.      \n       procedure division using w x y z result.\n           IF x = y THEN\n               COMPUTE result = 1\n           ELSE\n               COMPUTE result = 2\n           END-IF.               \n       end program guessHatColor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21749,"user_id":null,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n      \n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  result            pic 9.\n      \n       procedure division using w x y z result.\n          if x = y\n            move 1 to result\n          else\n            move 2 to result\n          end-if.\n          goback.\n       end program guessHatColor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21750,"user_id":76,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n      \n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  result            pic 9.\n      \n       procedure division using w x y z result.\n         if x = y then\n           move 1 to result\n         else\n           move 2 to result\n         end-if.\n       end program guessHatColor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21751,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. guessHatColor.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  W                 PIC A(5).\n       01  X                 PIC A(5).\n       01  Y                 PIC A(5).\n       01  Z                 PIC A(5).\n       01  RESULT            PIC 9.\n      \n       PROCEDURE DIVISION USING W X Y Z RESULT.\n           IF  X = Y\n               MOVE 1  TO RESULT\n           ELSE\n               MOVE 2  TO RESULT\n           END-IF.\n       END PROGRAM guessHatColor.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21752,"user_id":null,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n      \n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  result            pic 9.\n      \n       procedure division using w x y z result.\n         evaluate true\n           when x = y set result to 1\n           when other set result to 2.\n       end program guessHatColor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21753,"user_id":53,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  r                 pic 9.\n       procedure division using w x y z r.\n          move 1 to r\n          if x <> y then move 2 to r end-if\n          goback.\n       end program guessHatColor.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21754,"user_id":168,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n      \n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  result            pic 9.\n      \n       procedure division using w x y z result.\n           move 1 to result\n           if x <> y then add 1 to result end-if\n           goback.\n       end program guessHatColor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21755,"user_id":50,"body":"       identification division.\n       program-id. guessHatColor.\n       data division.\n      \n       linkage section.\n       01  w                 pic a(5).\n       01  x                 pic a(5).\n       01  y                 pic a(5).\n       01  z                 pic a(5).\n       01  result            pic 9.\n      \n       procedure division using w x y z result.\n      \n           if x = y  move 1 to result\n             else      move 2 to result\n               end-if\n      \n           goback.\n       end program guessHatColor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58c47a95e4eb57a5b9000094":[{"id":21756,"user_id":421,"body":"       identification division.\n       program-id. findThePoison.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  rats.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 1 to 10 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic 9(4).\n      \n       procedure division using rats result.\n           initialize result\n           perform varying i from 1 by 1 until i > arr-length\n               compute result = result + 2 ** xs(i)\n           end-perform.\n       end program findThePoison.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21757,"user_id":168,"body":"       identification division.\n       program-id. findThePoison.\n       data division.\n      \n       linkage section.\n       01  rats.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 1 to 10 times \n                                  depending on arr-length indexed i.\n       01  result            pic 9(4).\n      \n       procedure division using rats result.\n           move 0 to result\n           perform varying i from 1 until i > arr-length\n               compute result = result + 2 ** xs(i)\n           end-perform.\n       end program findThePoison.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21758,"user_id":53,"body":"       identification division.\n       program-id. findThePoison.\n       data division.\n       linkage section.\n       01  rats.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 1 to 10 times \n                                    depending on arr-length\n                                    indexed by i.\n       01  r                 pic 9(4).\n       procedure division using rats r.\n          initialize r\n          perform varying i from 1 until i > arr-length \n            compute r = r + 2 ** xs(i)\n          end-perform.\n       end program findThePoison.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21759,"user_id":50,"body":"       identification division.\n       program-id. findThePoison.\n       data division.\n      \n       linkage section.\n       01  rats.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 1 to 10 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic 9(4).\n      \n       procedure division using rats result.\n          move 0 to result\n          perform varying i from 1 until i > arr-length \n            compute result = result + 2 ** xs(i)\n          end-perform\n          goback.\n       end program findThePoison.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58c5577d61aefcf3ff000081":[{"id":21760,"user_id":53,"body":"       identification division.\n       program-id. Encode.\n       data division.\n       local-storage section.\n       01  gim-arr.\n           05 gim-length   pic 9(2).\n           05 gim          pic 9(2) occurs 0 to 50 times \n                                    depending on gim-length\n                                    indexed by i.\n       linkage section.\n       01  strng.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 50 times \n                                 depending on s-length.\n       01  numberRails     pic 9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 50 times \n                                 depending on res-length.\n       procedure division using strng numberRails result.\n          initialize result \n          call 'Gim' using \n            by content numberRails s-length\n            by reference gim-arr\n          move gim-length to res-length\n          perform varying i from 1 until i > gim-length\n            move s-char(gim(i)) to res(i)\n          end-perform\n          goback.\n       end program Encode.\n      \n       identification division.\n       program-id. Decode.\n       data division.\n       local-storage section.\n       01  gim-arr.\n           05 gim-length   pic 9(2).\n           05 gim          pic 9(2) occurs 0 to 50 times \n                                    depending on gim-length\n                                    indexed by i.\n       linkage section.\n       01  strng.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 50 times \n                                 depending on s-length.\n       01  numberRails     pic 9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 50 times \n                                 depending on res-length.\n       procedure division using strng numberRails result.\n          initialize result \n          call 'Gim' using \n            by content numberRails s-length\n            by reference gim-arr\n          move gim-length to res-length\n          perform varying i from 1 until i > gim-length\n            move s-char(i) to res(gim(i))\n          end-perform\n          goback.\n       end program Decode.\n      \n       identification division.\n       program-id. Gim.\n       data division.\n       local-storage section.\n       01  rail            pic s9(2) value -1.\n       01  phase           pic 9(2) value 0.\n       01  x               pic 9(2) value 0.\n       01  i               pic 9(2).\n       01  lambda.\n           05 l0           pic 9(2) value 0.\n           05 l1           pic 9(2) value 0.\n           05 li           pic 9 value 0.\n       linkage section.\n       01  n               pic 9(2).\n       01  m               pic 9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9(2) occurs 0 to 50 times \n                                    depending on res-length.\n       procedure division using n m result.\n          initialize result\n          perform varying i from i until i >= m\n            if rail = -1 or x >= m\n              add 1 to rail\n              set li to 0\n              move rail to x phase\n              if rail = 0 or rail = n - 1 then\n                compute l0 = 2 * (n - 1)\n                move l0 to l1\n              else\n                compute l0 = 2 * (n - rail - 1)\n                compute l1 = 2 * rail\n              end-if\n            end-if\n            add 1 to res-length\n            compute res(res-length) = x + 1\n            if li = 0 then\n              add l0 to x\n            else\n              add l1 to x\n            end-if\n            compute li = function rem(li + 1, 2)\n          end-perform\n          goback.\n       end program Gim.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21761,"user_id":50,"body":"      * Implementation of zombitrafik's JavaScript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/58c9b6b0dc5f123952000040\/groups\/58f8c47d5f5b67f8510003c6\n      \n       identification division.\n       program-id. Encode.\n       data division.\n       local-storage section.\n       01 cnt pic 9(2).\n       01 i   usage index.\n       01 j   usage index.\n       01 k   usage index.\n       01 a   pic s9(3).\n       01 b   pic s9(3).\n       01 it  usage index occurs 2 times.\n      \n       linkage section.\n       01  strng.\n           05 l            pic 9(2).\n           05 s            pic x occurs 0 to 50 times \n                                  depending on l.\n       01  n               pic 9(2).\n       01  result.\n           05 r            pic 9(2).\n           05 res          pic x occurs 0 to 50 times \n                                 depending on r.\n      \n       procedure division using strng n result.\n      \n          initialize result\n      \n          compute cnt = 2 * n - 3\n          \n          perform varying i from 0 until i = n\n            initialize k\n            compute a = cnt - 2 * i\n            compute b = 2 * i - 1\n            move i to j\n            compute it(1) = function max(0, a + 1)\n            compute it(2) = function max(0, b + 1)\n            perform until j >= l\n              add 1 to r\n              move s(j + 1) to res(r)\n              if it(function rem(k, 2) + 1) <> 0\n                   add it(function rem(k, 2) + 1) to j\n              else add it(function rem(k + 1, 2) + 1) to j end-if\n              add 1 to k\n            end-perform\n          end-perform\n      \n          goback.\n       end program Encode.\n      \n      \n       identification division.\n       program-id. Decode.\n       data division.\n       local-storage section.\n       01 cnt pic 9(2).\n       01 globalIndex usage index.\n       01 i   usage index.\n       01 j   usage index.\n       01 k   usage index.\n       01 a   pic s9(3).\n       01 b   pic s9(3).\n       01 it  usage index occurs 2 times.\n      \n       linkage section.\n       01  strng.\n           05 l            pic 9(2).\n           05 s            pic x occurs 0 to 50 times \n                                  depending on l.\n       01  n               pic 9(2).\n       01  result.\n           05 r            pic 9(2).\n           05 res          pic x occurs 0 to 50 times \n                                 depending on r.\n      \n       procedure division using strng n result.\n      \n          initialize result\n      \n          compute cnt = 2 * n - 3\n          move l to r\n          perform varying i from 0 until i = n\n            compute a = cnt - 2 * i\n            compute b = 2 * i - 1\n            compute it(1) = function max(0, a + 1)\n            compute it(2) = function max(0, b + 1)\n            move i to j\n            initialize k\n            perform until j >= l\n              move s(globalIndex + 1) to res(j + 1)\n              if it(function rem(k, 2) + 1) <> 0\n                   add it(function rem(k, 2) + 1) to j\n              else add it(function rem(k + 1, 2) + 1) to j end-if\n              add 1 to k, globalIndex\n            end-perform\n          end-perform\n            \n          goback.\n       end program Decode.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58c9322bedb4235468000019":[{"id":21762,"user_id":421,"body":"       identification division.\n       program-id. IsVeryEvenNumber.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  temp           pic 9(10).\n       01  r              pic 9.\n       linkage section.\n       01  n              pic 9(10).\n       01  result         pic 9.\n           88  IsVeryEven value 1 when set to false 0.\n      \n       procedure division using n result.      \n           set IsVeryEven to true\n           if function rem(function rem(n - 1, 9), 2) = 0 then\n               set IsVeryEven to false\n           end-if.\n       end program IsVeryEvenNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21763,"user_id":76,"body":"       identification division.\n       program-id. IsVeryEvenNumber recursive.\n       data division.\n       local-storage section.\n       01  m              pic 9(10).\n       linkage section.\n       01  n              pic 9(10).\n       01  result         pic 9.\n           88  IsVeryEven value 1 when set to false 0.\n      \n       procedure division using n result.\n          if n < 10 then\n            if function mod(n, 2) = 0 then \n              set IsVeryEven to true \n            else\n              set IsVeryEven to false\n            end-if\n            goback\n          end-if\n          move 0 to m\n          perform until n = 0\n            add function mod(n, 10) to m\n            divide 10 into n\n          end-perform\n          call 'IsVeryEvenNumber' using m result.\n       end program IsVeryEvenNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21764,"user_id":53,"body":"       identification division.\n       program-id. IsVeryEvenNumber.\n       data division.\n       linkage section.\n       01  n              pic 9(10).\n       01  result         pic 9.\n       procedure division using n result.\n          initialize result\n          if n = 0 or function rem(function rem(n - 1, 9), 2) <> 0\n            set result to 1\n          goback.\n       end program IsVeryEvenNumber.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21765,"user_id":50,"body":"       identification division.\n       program-id. IsVeryEvenNumber.\n       data division.\n      \n       linkage section.\n       01  n              pic 9(10).\n       01  result         pic 9.\n           88  IsVeryEven value 1 when set to false 0.\n      \n       procedure division using n result.\n      \n          if n is equal to zero\n          or function rem(function rem(n - 1, 9), 2)\n          is equals to 1,\n          then move 1 to result,\n          else move 0 to result.\n      \n       end program IsVeryEvenNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58ca77b9c0d640ecd2000b1e":[{"id":21766,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. proc.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 J           PIC 9(3).\n       01 DIGITS REDEFINES J.\n          05 DIGIT1   PIC 9(1).\n          05 DIGIT2   PIC 9(1).\n          05 DIGIT3   PIC 9(1).\n       LINKAGE SECTION.\n       01 I           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING I RESULT.\n           PERFORM VARYING J FROM I BY I UNTIL J > 100\n               ADD DIGIT1 DIGIT2 DIGIT3  TO RESULT\n           END-PERFORM.\n       END PROGRAM proc.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21767,"user_id":76,"body":"       identification division.\n       program-id. proc.\n       data division.\n       local-storage section.\n       01 j           pic 999.\n       01 n           pic 999.\n       linkage section.\n       01 i           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using i result.\n         perform varying j from i by i until j > 100\n           move j to n\n           perform until n = 0\n             add function rem(n, 10) to result\n             divide n by 10 giving n\n           end-perform\n         end-perform.\n       end program proc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21768,"user_id":168,"body":"       identification division.\n       program-id. proc.\n      \n       data division.\n       working-storage section.\n       01 m           pic 9(3).\n       01 redefines m.\n          05 digits pic 9 occurs 3 times.\n       linkage section.\n       01 i           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using i result.\n          compute result = 0\n          perform varying m from i by i until m > 100\n             add digits(1) digits(2) digits(3) to result\n          end-perform.\n       end program proc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21769,"user_id":53,"body":"       identification division.\n       program-id. proc.\n      \n       data division.\n       local-storage section.\n       01 s           pic 9(8).\n       01 j           pic 9(8).\n       01 m           pic 9(8).\n       linkage section.\n       01 i           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using i result.\n          move i to j\n          perform until i > 100\n            move i to m\n            perform until m = 0\n              add function rem(m, 10) to s\n              compute m = m \/ 10\n            end-perform\n            add j to i\n          end-perform\n          move s to result\n          goback.\n       end program proc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21770,"user_id":50,"body":"       identification division.\n       program-id. proc.\n      \n       data division.\n       local-storage section.\n       01 n           pic 9(8).\n       01 r           pic 9.\n       01 a           pic 9(8).\n       linkage section.\n       01 i           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using i result.\n\n          perform varying a from i by i until a > 100\n\n            move a to n\n\n            perform until n = 0\n              divide 10 into n giving n remainder r\n              add r to result\n            end-perform\n\n          end-perform\n\n          goback.\n       end program proc.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58cb43f4256836ed95000f97":[{"id":21771,"user_id":421,"body":"       identification division.\n       program-id. FindDifference.\n       author. \"ejini\u6218\u795e\".\n       data division.       \n       linkage section.\n       01  a.\n           05 dima  pic 9(2)  occurs 3 times.\n       01  b.\n           05 dimb  pic 9(2)  occurs 3 times.\n       01  result  pic s9(5) sign leading.\n      \n       procedure division using a b result.\n          compute result = function abs(dimb(3) * dimb(2) * dimb(1) - \n                                        dima(3) * dima(2) * dima(1)).\n       end program FindDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21772,"user_id":null,"body":"       identification division.\n       program-id. FindDifference.\n       data division.\n      \n       linkage section.\n       01  a.\n           05 dim  pic 9(2)  occurs 3 times.\n       01  b.\n           05 dim  pic 9(2)  occurs 3 times.\n       01  result  pic s9(5) sign leading.\n      \n       procedure division using a b result.\n          compute result = function abs(\n                              dim in a(1) * dim in a(2) * dim in a(3) -\n                              dim in b(1) * dim in b(2) * dim in b(3))\n          goback.\n       end program FindDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21773,"user_id":53,"body":"       identification division.\n       program-id. FindDifference.\n       data division.\n      \n       linkage section.\n       01  a.\n           05 xs   pic 9(2) occurs 3 times.\n       01  b.\n           05 ys   pic 9(2) occurs 3 times.\n       01  result  pic 9(5).\n      \n       procedure division using a b result.\n          compute result = function abs(xs(1) * xs(2) * xs(3) \n                         - ys(1) * ys(2) * ys(3))\n          goback.\n       end program FindDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21774,"user_id":50,"body":"       identification division.\n       program-id. FindDifference.\n       data division.\n      \n       linkage section.\n       01  a.\n           05 c    pic 9(2).\n           05 d    pic 9(2).\n           05 e    pic 9(2).\n       01  b.\n           05 f    pic 9(2).\n           05 g    pic 9(2).\n           05 h    pic 9(2).\n       01  result  pic 9(5).\n      \n       procedure division using a b result.\n      \n          compute result = c * d * e - f * g * h.\n      \n       end program FindDifference.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58ce8725c835848ad6000007":[{"id":21775,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POTATOES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 P0           PIC 9(8).\n       01 W0           PIC 9(8).\n       01 P1           PIC 9(8).\n       01 RESULT       PIC 9(8).\n       PROCEDURE DIVISION USING P0 W0 P1 RESULT.\n       COMPUTE RESULT = W0 * (100 - P0) \/ (100 - P1).\n       END PROGRAM POTATOES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21776,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POTATOES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 P0           PIC 9(8).\n       01 W0           PIC 9(8).\n       01 P1           PIC 9(8).\n       01 RESULT       PIC 9(8).\n       PROCEDURE DIVISION USING P0 W0 P1 RESULT.\n         compute result = w0 * (100 - p0) \/ (100 - p1) \n         goback.\n       END PROGRAM POTATOES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21777,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POTATOES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 P0           PIC 9(8).\n       01 W0           PIC 9(8).\n       01 P1           PIC 9(8).\n       01 RESULT       PIC 9(8).\n       PROCEDURE DIVISION USING P0 W0 P1 RESULT.\n          compute result = (100 - p0) * w0 \/ (100 - p1).\n       END PROGRAM POTATOES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21778,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POTATOES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 P0           PIC 9(8).\n       01 W0           PIC 9(8).\n       01 P1           PIC 9(8).\n       01 RESULT       PIC 9(8).\n       PROCEDURE DIVISION USING P0 W0 P1 RESULT.\n          \n          Compute result = (100 - p0) * w0 \/ (100 - p1),\n      \n          Goback.\n       END PROGRAM POTATOES.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58da7ae9b340a2440500009c":[{"id":21779,"user_id":421,"body":"       identification division.\n       program-id. PointInCircle.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01 x           pic s9v9(2).\n       01 y           pic s9v9(2).\n       01 result      pic 9.\n      \n       procedure division using x y result.\n           initialize result\n           if x * x + y * y < 1 then\n               move 1 to result\n           end-if.\n       end program PointInCircle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21780,"user_id":null,"body":"       identification division.\n       program-id. PointInCircle.\n      \n       data division.\n      \n       linkage section.\n       01 x           pic s9v9(2).\n       01 y           pic s9v9(2).\n       01 result      pic 9.\n      \n       procedure division using x y result.\n         if x * x + y * y < 1\n           set result to 1\n         else\n           set result to 0.\n       end program PointInCircle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21781,"user_id":168,"body":"       identification division.\n       program-id. PointInCircle.\n      \n       data division.\n      \n       linkage section.\n       01 x           pic s9v9(2).\n       01 y           pic s9v9(2).\n       01 result      pic 9.\n      \n       procedure division using x y result.\n          if x * x + y * y < 1\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program PointInCircle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21782,"user_id":53,"body":"       identification division.\n       program-id. PointInCircle.\n       data division.\n       local-storage section.\n       01 n           pic 9v9(4).\n       linkage section.\n       01 x           pic s9v9(2).\n       01 y           pic s9v9(2).\n       01 result      pic 9.\n       procedure division using x y result.\n          initialize result\n          compute n = x * x + y * y\n          if n < 1 move 1 to result end-if\n          goback.\n       end program PointInCircle.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21783,"user_id":50,"body":"       identification division.\n       program-id. PointInCircle.\n      \n       data division.\n       local-storage section.\n       01 z           pic 9v9(4).\n      \n       linkage section.\n       01 x           pic s9v9(2).\n       01 y           pic s9v9(2).\n       01 result      pic 9.\n      \n       procedure division using x y result.\n      \n          compute z =  x * x + y * y\n          if z < 1 move 1 to result\n          else     move 0 to result end-if\n      \n          goback.\n       end program PointInCircle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58dabca7ce77a12dbd00000f":[{"id":21784,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n         SET RESUlT TO 1\n         PERFORM UNTIL FUNCTION Mod(N, RESULT * 2) NOT EQUAL 0\n           COMPUTE RESULT = RESULT * 2\n         END-PERFORM.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21785,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n          move 1 to result,\n          perform until function rem(n, 2) <> 0\n            compute n = n \/ 2,\n            compute result = result * 2,\n          end-perform,\n          goback.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21786,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n          compute result = 1\n          perform until function mod(n, 2 * result) <> 0\n            multiply 2 by result\n          end-perform.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21787,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(32).\n       01 RESULT      PIC 9(32).\n       PROCEDURE DIVISION USING N RESULT.\n          Move 1 to result,\n          Perform until function rem(n,2) = 1,\n            Multiply 2 by result,\n            Divide 2 into n,\n          End-perform\n      \n          Goback.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58db9545facc51e3db00000a":[{"id":21788,"user_id":53,"body":"       identification division.\n       program-id. Compress.\n       data division.\n       local-storage section.\n       01  d        pic s9(4).\n       01  t        pic s9(4).\n       01  a1       pic -(5)9.\n       01  a2       pic -(5)9.\n       01  a3       pic -(5)9.\n       01  ptr      usage index value 1.\n       01  arr.\n           03  alen pic 9(3).\n           03  r    pic x(11) occurs 500 times\n                    depending on alen\n                    indexed by k.\n       linkage section.\n       01  raw.\n           05 len   pic 9(3).\n           05 m     pic s9(4) occurs 100 times \n                    depending on len\n                    indexed by i j.\n       01  result   pic x(800).\n       procedure division using raw result.\n          initialize result i\n          perform varying i from 0 until i >= len\n            set j to i\n            if j + 1 < len then\n              compute d = m(j + 2) - m(j + 1)\n            else\n              set d to 0\n            end-if\n            perform until j + 1 >= len or m(j + 2) <> m(j + 1) + d\n              add 1 to j\n            end-perform\n            if d = 0 and j - i <> 0 then\n              add 1 to alen\n              move m(i + 1) to a1\n              compute t = j - i + 1\n              move t to a2\n              string \n                function trim(a1) '*' function trim(a2) \n                into r(alen)\n              set i to j\n            else\n              if j - i <= 1 then\n                move m(i + 1) to a1\n                add 1 to alen\n                string \n                  function trim(a1)\n                  into r(alen)\n              else\n                move function abs(d) to t\n                add 1 to alen\n                move m(i + 1) to a1\n                move m(j + 1) to a2\n                if t = 1 then\n                  string \n                    function trim(a1) '-' function trim(a2) \n                    into r(alen)\n                else\n                  move t to a3\n                  string \n                    function trim(a1) '-' function trim(a2) '\/'\n                    function trim(a3) into r(alen)\n                end-if\n                set i to j\n              end-if\n            end-if\n          end-perform\n          perform varying k from 1 until k > alen\n            if k > 1 then\n              string ',' into result with pointer ptr\n            end-if\n            string function trim(r(k)) into result with pointer ptr\n          end-perform\n          goback.\n       end program Compress.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21789,"user_id":50,"body":"       identification division.\n       program-id. Compress.\n      \n       data division.\n       local-storage section.\n       01  arr.\n           03  e    pic x(11) occurs 500 indexed j k.\n       01  d        pic s9(4).\n       01  n        pic s9(4).\n       01  c        index.\n       01  z1       pic -(5)9.\n       01  z2       pic -(5)9.\n       01  z3       pic z(5)9.\n      \n       linkage section.\n       01  raw.\n           03  l    pic 9(3).\n           03  xs   pic s9(4) occurs 100 depending l indexed i.\n       01  result   pic x(800).\n      \n       procedure division using raw result.\n      \n          initialize result\n          set i to 1\n          perform varying j from 1 until i > l\n            move xs(i) to n\n            evaluate true\n            when i < l and xs(i + 1) = n\n              set c to 2\n              set i up by 1\n              perform until i + 1 > l or xs(i + 1) <> n\n                set c i up by 1\n              end-perform\n              move n to z1\n              move c to z2\n              string\n                  function trim(z1) '*' function trim(z2)\n                  into e(j)\n              end-string\n            when i + 1 < l and n - xs(i + 1) = xs(i + 1) - xs(i + 2)\n              compute d = xs(i + 1) - xs(i + 2)\n              set c to 1\n              set i up by 1\n              perform until i + 1 > l or d <> xs(i) - xs(i + 1)\n                set c i up by 1\n              end-perform\n              move n to z1\n              move xs(i) to z2\n              if function abs(d) = 1\n                 string \n                    function trim(z1) '-' function trim(z2)\n                    into e(j)\n                 end-string\n              else\n                move d to z3\n                string\n                   function trim(z1) '-'\n                   function trim(z2) '\/'\n                   function trim(z3)\n                   into e(j)\n                end-string\n              end-if\n            when other\n              move n to z1\n              move function trim(z1) to e(j)\n            end-evaluate\n            set i up by 1\n          end-perform\n          \n          set c to 1\n          perform varying k from 1 until k = j\n              string e(k) delimited by space\n              into result with pointer c\n              if k + 1 < j\n                  string ',' into result with pointer c\n              end-string end-if\n          end-perform\n      \n          goback.\n       end program Compress.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58de819eb76cf778fe00005c":[{"id":21790,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(10)9.\n       01 s           pic x(10).\n       01 i           usage index.\n       01 l           pic 9.\n      \n       linkage section.\n       01 n           pic s9(9).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          initialize result\n          if n < 10 goback end-if\n          move n to z\n          compute l = length function trim(z)\n          move function trim(z) to s\n          perform varying i from 1 until i = l\n            if s(i:1) = s(i + 1:1) or s(i + 2:1)\n                set result to 1\n                goback\n            end-if\n          end-perform\n      \n          .\n       end program Palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21791,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 x           pic z(10)9.\n       01 s           pic x(10).\n       01 i           usage index.\n       01 w           pic 9.\n       linkage section.\n       01 n           pic s9(9).\n       01 result      pic 9.\n       procedure division using n result.\n          initialize result\n          if n < 10 goback end-if\n          move n to x\n          move length of function trim(x) to w\n          move function trim(x) to s\n          perform varying i from 1 until i = w\n            if s(i:1) = s(i + 1:1) or s(i + 2:1)\n              set result to 1\n              goback\n            end-if\n          end-perform\n          goback.\n       end program Palindrome.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58dea43ff98a7e2124000169":[{"id":21792,"user_id":53,"body":"       identification division.\n       program-id. DivideStrings.\n       data division.\n      \n       local-storage section.\n      \n       01  remove-zero-vars.\n          03  rzv-in         pic x(200).\n          03  rzv-out        pic x(200).\n          03  rzv-aux.\n             05  rzv-i       usage index.\n             05  rzv-w       pic 9(3).\n      \n       01  cmp-vars.\n          03  cmp-a          pic x(200).\n          03  cmp-b          pic x(200).\n          03  cmp-out        pic s9.\n          03  cmp-aux. \n             05  cmp-i       usage index.\n             05  cmp-a-len   pic 9(3).\n             05  cmp-b-len   pic 9(3).\n      \n       01  sub-vars.\n          03  sub-a          pic x(200).\n          03  sub-b          pic x(200).\n          03  sub-out        pic x(200).\n          03  sub-aux.\n             05  sub-i       usage index.\n             05  sub-k       pic s9.\n             05  sub-c       pic 9.\n             05  sub-d       pic 9.\n             05  sub-z       pic z9.\n             05  sub-n       pic s9(2). \n             05  sub-m       pic s9. \n             05  sub-x       pic x(200).\n             05  sub-y       pic x(200).\n             05  sub-x-len   pic 9(3).\n             05  sub-y-len   pic 9(3).\n             05  sub-r       pic x(200).\n             05  sub-r-i     usage index.\n      \n       01  div-vars.\n          03 div-a           pic x(200).\n          03 div-b           pic x(200).\n          03 div-quot        pic x(200).\n          03 div-rem         pic x(200).\n          03 div-aux.\n             05  div-i       usage index.\n             05  div-a-len   pic 9(3).\n             05  div-b-len   pic 9(3).\n             05  div-s       pic x(200).\n             05  div-m       pic 9.\n             05  div-z       pic z9.\n             05  div-r       pic x(200).\n             05  div-r-i     usage index.\n      \n       linkage section.\n      \n       01  a                 pic x(200).\n       01  b                 pic x(200).\n       01  result.\n          03  quot           pic x(200).\n          03  rem            pic x(200).\n       \n       procedure division using a b result.\n      \n          initialize result\n\n          move a to div-a\n          move b to div-b\n          perform div\n          move div-quot to quot\n          move div-rem to rem\n          goback.\n      \n        div.\n          initialize div-quot div-rem div-aux\n          move 1 to div-r-i\n          move length of function trim(div-a) to div-a-len\n          move length of function trim(div-b) to div-b-len\n          move function trim(div-a(1:div-b-len)) to div-s\n          perform varying div-i from div-b-len until div-i > div-a-len\n            move 0 to div-m\n            perform forever\n              move div-s to cmp-a\n              move div-b to cmp-b\n              perform cmp\n              if cmp-out < 0 then\n                exit perform\n              end-if\n              add 1 to div-m\n              move function trim(div-s) to sub-a\n              move function trim(div-b) to sub-b\n              perform sub\n              display sub-a, sub-b, sub-out\n              move function trim(sub-out) to div-s\n            end-perform\n            move div-m to div-z\n            string function trim(div-z) into div-r with pointer div-r-i\n            if div-i < div-a-len then\n              move function trim(function concatenate(\n                function trim(div-s), div-a(div-i + 1:1))) to div-s\n              move function trim(div-s) to rzv-in\n              perform remove-zero\n              move function trim(rzv-out) to div-s\n            end-if\n          end-perform\n          move function trim(div-r) to rzv-in\n          perform remove-zero\n          move function trim(rzv-out) to div-r\n          move function trim(div-r) to div-quot\n          move function trim(div-s) to div-rem\n          .\n      \n        sub.\n          initialize sub-out sub-aux\n          move 1 to sub-r-i\n          move function trim(sub-a) to cmp-a\n          move function trim(sub-b) to cmp-b\n          perform cmp\n          move cmp-out to sub-k\n          if sub-k < 0 then\n            move function reverse(function trim(sub-a)) to sub-y\n            move function reverse(function trim(sub-b)) to sub-x\n          else\n            move function reverse(function trim(sub-b)) to sub-y\n            move function reverse(function trim(sub-a)) to sub-x\n          end-if\n          move length of function trim(sub-y) to sub-y-len\n          move length of function trim(sub-x) to sub-x-len\n          perform varying sub-i from 1 until sub-i > sub-x-len\n            if sub-i > sub-y-len then\n              move 0 to sub-m\n            else\n              compute sub-m = function ord(sub-y(sub-i:1)) - 49\n            end-if\n            compute sub-n = \n              function ord(sub-x(sub-i:1)) - 49 - sub-m - sub-c\n            if sub-n < 0 then\n              move 1 to sub-c\n              add 10 to sub-n giving sub-d\n            else\n              move 0 to sub-c\n              move sub-n to sub-d\n            end-if\n            move sub-d to sub-z\n            string function trim(sub-z) into sub-r with pointer sub-r-i\n          end-perform\n          move function reverse(function trim(sub-r)) to sub-r\n          move function trim(sub-r) to rzv-in\n          perform remove-zero\n          move function trim(rzv-out) to sub-r\n          move sub-r to sub-out\n          .\n      \n        cmp.\n          initialize cmp-out cmp-aux\n          move length of function trim(cmp-a) to cmp-a-len\n          move length of function trim(cmp-b) to cmp-b-len\n          evaluate true\n            when cmp-a-len < cmp-b-len    \n              move -1 to cmp-out\n            when cmp-a-len > cmp-b-len    \n              move  1 to cmp-out\n            when other\n              perform varying cmp-i from 1 \n                  until cmp-i > cmp-a-len or cmp-out <> 0\n                evaluate true\n                  when cmp-a(cmp-i:1) < cmp-b(cmp-i:1)\n                    move -1 to cmp-out\n                  when cmp-a(cmp-i:1) > cmp-b(cmp-i:1)\n                    move  1 to cmp-out\n                end-evaluate\n              end-perform\n          end-evaluate\n          .\n      \n        remove-zero.\n          initialize rzv-out rzv-aux\n          move length of function trim(rzv-in) to rzv-w\n          perform varying rzv-i from 1 \n            until rzv-i > rzv-w or rzv-in(rzv-i:1) <> '0'\n          end-perform\n          move rzv-in(rzv-i:rzv-w) to rzv-out\n          if rzv-i > rzv-w then move '0' to rzv-out end-if\n          .\n      \n       end program DivideStrings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21793,"user_id":50,"body":"      * Implementation of JS's reference solution\n       identification division.\n       program-id. DivideStrings.\n      \n       data division.\n       local-storage section.\n       01  la              pic 9(3).\n       01  lb              pic 9(3).\n       01  l               pic 9(3).\n       01  i               index.\n       01  digit           pic 9.\n       01  cmpVal          pic 9.\n           88  inf         value 1.\n      \n       linkage section.\n       01  a               pic x(200).\n       01  b               pic x(200).\n       01  result.\n           03  quot        pic x(200).\n           03  rem         pic x(200).\n      \n       procedure division using a b result.\n      \n          move length function trim(a) to la\n          move length function trim(b) to lb\n          if la < lb or la = lb and a < b\n             move '0' to quot\n             move  a  to rem\n             goback\n          end-if\n          \n          initialize result\n          \n          compute l = la - lb\n          move a(1:lb) to rem\n          move a(lb + 1:) to a\n          perform function abs(l + 1) times\n           perform cmp\n           perform varying digit from 0 until inf\n              call 'SubtractStrings'\n                    using by content  la rem lb b\n                          by reference rem\n              perform cmp\n           end-perform\n           if quot = '0'  move digit to quot\n           else           string quot delimited space digit into quot\n           end-if\n           if rem = '0'  move a(1:1) to rem\n           else          string rem delimited space a(1:1) into rem\n           end-if\n           move a(2:) to a\n          end-perform\n            \n          string quot delimited space a into quot\n          if rem = space move '0' to rem end-if\n     \n          goback.\n      \n          cmp.\n            compute la = length function trim(rem)\n            if la > lb or la = lb and rem >= b\n            then move 0 to cmpVal\n            else move 1 to cmpVal end-if\n            .\n           \n       end program DivideStrings.\n      \n       identification division.\n       program-id. SubtractStrings.\n      \n       data division.\n       local-storage section.\n       01  r           pic s9(2).\n       01  d           pic 9.\n       01  i           index.\n      \n       linkage section.\n       01  la          pic 9(3).\n       01  a           pic x(200).\n       01  lb          pic 9(3).\n       01  b           pic x(200).\n       01  res         pic x(200).\n      \n       procedure division using la a lb b res.\n      \n          if a = b\n             move '0' to res\n             goback\n          end-if\n      \n          initialize res\n          perform until la = 0 and lb = 0 and r = 0\n            if la > 0\n               move a(la:1) to d\n               add d to r\n               subtract 1 from la\n            end-if\n            if lb > 0\n               move b(lb:1) to d\n               subtract d from r\n               subtract 1 from lb\n            end-if\n            compute d = function rem(r + 10, 10)\n            move function concat(d, res) to res\n            if r < 0 move -1 to r\n            else     move  0 to r end-if\n          end-perform\n      \n          set i to 1\n          perform until res(i:1) <> '0'\n            add 1 to i\n          end-perform\n          move res(i:) to res\n      \n          goback.\n       end program SubtractStrings.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58df62fe95923f7a7f0000cc":[{"id":21794,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(10)9.\n       01 s           pic x(10).\n       01 l           pic 9.\n       01 i           usage index.\n       01 j           usage index.\n       01 tmp         pic x(10).\n      \n       linkage section.\n       01 n           pic s9(9).\n       01 result      pic 9(2).\n      \n       procedure division using n result.\n      \n          initialize result\n          if n < 10 goback end-if\n          \n          move n to z\n          compute l = length function trim(z)\n          move function trim(z) to s\n          perform varying i from 1 until i = l\n                  after   j from 2\n                  until   j + i = l + 2\n            move s(i:j) to tmp\n            if tmp = function reverse(function trim(tmp))\n                add 1 to result\n            end-if\n          end-perform\n      \n          goback.\n       end program Palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21795,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 x           pic z(10)9.\n       01 y           pic x(10).\n       01 s           pic x(10).\n       01 w           pic 9.\n       01 i           usage index.\n       01 j           usage index.\n       linkage section.\n       01 n           pic s9(9).\n       01 result      pic 9(2).\n       procedure division using n result.\n          initialize result\n          if n < 10 then goback end-if\n          move n to x\n          move length of function trim(x) to w\n          move function trim(x) to s\n          perform varying i from 1 until i = w after j from 2\n              until j + i = w + 2\n            move s(i:j) to y\n            if y = function reverse(function trim(y)) then\n              add 1 to result\n            end-if\n          end-perform\n          goback.\n       end program Palindrome.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58df8b4d010a9456140000c7":[{"id":21796,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 i           usage index value 0.\n       01 a           pic s9(4).\n       01 z           pic z(4)9.\n       01 b           pic 9.\n       linkage section.\n       01 n           pic s9(4).\n       01 result      pic s9(4).\n       procedure division using n result.\n          initialize result\n          if n < 0 then move -1 to result, goback end-if\n          perform forever\n            add i to n giving a\n            perform palindrome\n            if b = 1 then move a to result, goback end-if\n            subtract i from n giving a\n            perform palindrome\n            if b = 1 then move a to result, goback end-if\n            add 1 to i\n          end-perform\n          goback.\n      \n        palindrome.\n          set b to 0\n          move a to z\n          if function trim(z) = function reverse(function trim(z))\n              and a > 9 then\n            set b to 1\n          end-if\n          .\n      \n       end program Palindrome.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21797,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 m           pic s9(4).\n       01 z           pic z(4)9.\n       01 k           usage index.\n       01 trick       pic 9.\n          88 ever     value 1.\n      \n       linkage section.\n       01 n           pic s9(4).\n       01 result      pic s9(4).\n      \n       procedure division using n result.\n      \n          if n < 0 move -1 to result goback end-if\n      \n          perform varying k from 0 until ever\n            compute m = n + k\n            perform checkPalindrome\n            compute m = n - k\n            perform checkPalindrome\n          end-perform.\n      \n          checkPalindrome.\n            if m > 9\n              move m to z\n              if function trim(z) = \n                 function reverse(function trim(z))\n                 move m to result\n                 goback\n              end-if\n            end-if\n            .\n      \n       end program Palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e09234ca6895c7b300008c":[{"id":21798,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 x            pic z(10)9.\n       linkage section.\n       01 n            pic s9(4).\n       01 s            pic 9(2).\n       01 result.\n          03 resLength pic 9(2).\n          03 res       pic 9(4)\n                       occurs 0 to 10 times depending on resLength.\n       procedure division using n s result.\n         initialize result\n         if n < 0 goback end-if\n         perform varying n from function max(11, n) until resLength = s\n           move n to x\n           if function trim(x) = function reverse(function trim(x)) then\n             set resLength up by 1\n             move n to res(resLength)\n           end-if\n         end-perform\n         goback.\n       end program Palindrome.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21799,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(10)9.\n      \n       linkage section.\n       01 n           pic s9(4).\n       01 s            pic 9(2).\n       01 result.\n          03 resLength pic 9(2).\n          03 res       pic 9(4)\n              occurs 0 to 10 times depending on resLength.\n      \n       procedure division using n s result.\n      \n          set resLength to 0\n          if n < 0 goback end-if\n          \n          perform varying n from function max(11, n) until resLength = s\n            move n to z\n            if function trim(z) = function reverse(function trim(z))\n                set resLength up by 1\n                move n to res(resLength)\n            end-if\n          end-perform\n      \n          .\n       end program Palindrome.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e0f0bf92d04ccf0a000010":[{"id":21800,"user_id":421,"body":"       identification division.\n       program-id. lostSheep.\n       data division.\n\n       linkage section.\n       01  friday.\n           05 friday-length       pic 99.\n           05 fr-arr              pic 9(4) occurs 1 to 10 times \n                                  depending on friday-length indexed i.\n       01  saturday.\n           05 saturday-length     pic 99.\n           05 sat-arr             pic 9(4) occurs 1 to 10 times \n                                  depending on saturday-length \n                                               indexed j.\n       01  total                  pic 9(4).\n       01  result                 pic 9(4).\n      \n       procedure division using friday saturday total result.\n           move total to result\n           perform varying i from 1 by 1 until i > friday-length\n               subtract fr-arr(i) from result\n           end-perform\n           perform varying j from 1 by 1 until j > saturday-length\n               subtract sat-arr(j) from result\n           end-perform.\n       end program lostSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21801,"user_id":168,"body":"       identification division.\n       program-id. lostSheep.\n       data division.\n\n       linkage section.\n       01  friday.\n           05 friday-length       pic 99.\n           05 fr-arr              pic 9(4) occurs 1 to 10 times \n                                  depending on friday-length indexed i.\n       01  saturday.\n           05 saturday-length     pic 99.\n           05 sat-arr             pic 9(4) occurs 1 to 10 times \n                                  depending on saturday-length.\n       01  total                  pic 9(4).\n       01  result                 pic 9(4).\n      \n       procedure division using friday saturday total result.\n           move total to result\n           perform varying i from 1 until i > friday-length\n               subtract fr-arr(i) from result\n           end-perform\n           perform varying i from 1 until i > saturday-length\n               subtract sat-arr(i) from result\n           end-perform\n           goback.\n       end program lostSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21802,"user_id":53,"body":"       identification division.\n       program-id. lostSheep.\n       data division.\n       linkage section.\n       01  friday.\n           05 friday-length       pic 99.\n           05 fr-arr              pic 9(4) occurs 1 to 10 times \n                                  depending on friday-length\n                                  indexed by i.\n       01  saturday.\n           05 saturday-length     pic 99.\n           05 sat-arr             pic 9(4) occurs 1 to 10 times \n                                  depending on saturday-length\n                                  indexed by j.\n       01  total                  pic 9(4).\n       01  result                 pic 9(4).\n       procedure division using friday saturday total result.\n          move total to result\n          perform varying i from 1 until i > friday-length\n            subtract fr-arr(i) from result\n          end-perform\n          perform varying j from 1 until j > saturday-length\n            subtract sat-arr(j) from result\n          end-perform\n          goback.\n       end program lostSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21803,"user_id":50,"body":"       identification division.\n       program-id. lostSheep.\n       data division.\n       local-storage section.\n       01  i                      pic 9(3).\n      \n       linkage section.\n       01  friday.\n           05 friday-length       pic 99.\n           05 fr-arr              pic 9(4) occurs 1 to 10 times \n                                  depending on friday-length.\n       01  saturday.\n           05 saturday-length     pic 99.\n           05 sat-arr             pic 9(4) occurs 1 to 10 times \n                                  depending on saturday-length.\n       01  total                  pic 9(4).\n       01  result                 pic 9(4).\n      \n       procedure division using friday saturday total result.\n      \n           move total to result\n           perform varying i from 1 until i > friday-length\n              display fr-arr(i)\n              subtract fr-arr(i) from result\n           end-perform\n           perform varying i from 1 until i > saturday-length\n              display sat-arr(i)\n              subtract sat-arr(i) from result\n           end-perform\n      \n           goback.\n       end program lostSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e230e5e24dde0996000070":[{"id":21804,"user_id":421,"body":"       identification division.\n       program-id. is-prime.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 i           pic 9(20).\n       01 sq          pic 9(10).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9.      \n       procedure division using n result.\n           if n < 2 then\n               move 0 to result\n               goback\n           end-if\n           move 1 to result\n           compute sq = function sqrt(n) + 1\n           perform varying i from 2 by 1 until i >= sq\n               if function rem(n, i) = 0 then\n                   move 0 to result\n                   goback\n               end-if\n           end-perform.           \n       end program is-prime.\n      \n       identification division.\n       program-id. next-prime.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 tf          pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.       \n           initialize tf\n           perform until tf = 1  \n               add 1 to n\n               call \"is-prime\" using \n                 by content n\n                 by reference tf                \n           end-perform\n           move n to result. \n       end program next-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21805,"user_id":168,"body":"       identification division.\n       program-id. next-prime.\n      \n       data division.\n       working-storage section.\n       01 k           pic 9(18) binary.\n       01 d           pic 9(18) binary.\n       01 filler      pic 9.\n          88 is-prime value 1 when set to false 0.\n\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          if n < 2\n              move 2 to result\n              goback\n          end-if\n          compute k = n + 1 + function mod(n, 2)\n          perform test after varying k from k by 2 until is-prime\n              set is-prime to true\n              perform varying d from 3 until d * d > k\n                  if function mod(k, d) = 0\n                      set is-prime to false\n                      exit perform\n                  end-if\n              end-perform\n          end-perform\n          move k to result\n          goback.\n       end program next-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21806,"user_id":53,"body":"       identification division.\n       program-id. next-prime.\n       data division.\n       local-storage section.\n       01 i           PIC 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          perform until 0 = 1\n            add 1 to n\n            call 'is-prime' using by content n by reference i\n            if i = 1 then\n              move n to result\n              goback\n            end-if\n          end-perform\n          goback.\n       end program next-prime.\n      \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. is-prime.\n       DATA DIVISION.\n       working-storage section.\n       01 d            pic 9(20).\n       LINKAGE SECTION.\n       01 N            PIC 9(20).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           move 0 to result\n           if n < 2 then goback end-if\n           perform varying d from 2 by 1 until d * d > n\n              if function mod(n, d) = 0 then goback end-if\n           end-perform\n           move 1 to result\n           goback.\n       END PROGRAM is-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21807,"user_id":50,"body":"       identification division.\n       program-id. next-prime.\n      \n       data division.\n       local-storage section.\n       01 sqrt        pic 9(20).\n       01 p           pic 9(20).\n\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          if n < 2\n              move 2 to result\n              goback\n          end-if\n          if function rem(n, 2) = 0\n              add 1 to n\n          else\n              add 2 to n\n          end-if\n          perform forever\n             compute sqrt = function sqrt(n) + 1\n             move 1 to result\n             perform varying p from 3 by 2 until p > sqrt\n                 if function rem(n, p) = 0\n                     move 0 to result\n                    exit perform\n                 end-if\n             end-perform\n             if result = 1\n               move n to result\n               goback\n             end-if\n            add 2 to n\n          end-perform\n      \n          goback.\n       end program next-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e24788e24ddee28e000053":[{"id":21808,"user_id":50,"body":"       identification division.\n       program-id. SimpleAssembler.\n       data division.\n       local-storage section.\n      *    table holding registers values during parsing\n       01  registers.\n           05  filler occurs 26 times indexed by k.\n      *     flag set to 1 indicates the register has been used, so it should be finally included in `result`\n               07  flag       pic 9.\n      *        value of the register\n               07  v          pic s9(8).\n      *    variable holding the instruction of the current line\n       01  inst               pic a(3).\n      *    first argument of the current instruction - can be a register or a numeric value (if instruction is `jnz`)\n       01  arg1 pic x.\n           88  isArg1Register value 'a' thru 'z'.\n           88  isArg1Zero     value '0'.\n      *    second argument of the current instruction (optional) - can be a register or numeric\n       01  arg2 pic x(9).\n           88  isArg2Register value 'a' thru 'z'.\n      *    index of registers arguments of the current instruction\n       01  r1   usage index.\n       01  r2   usage index.\n      *    pointer to unstring the current line\n       01  j   usage index.\n      \n       linkage section.\n       01  prog.\n           05  progLen        pic 9(2).\n           05  row            pic x(20) occurs 0 to 50 times \n                              depending on progLen indexed i.\n       01  result.\n           05  resLen         pic 9(2).\n           05  res            occurs 0 to 26 times\n                              depending on resLen.\n               07  register   pic a.\n               07  val        pic s9(8).\n      \n       procedure division using prog result.\n      \n          initialize result\n          \n          perform varying i from 1 until i > progLen\n      \n      *     parse line instruction and first argument\n            set j to 1\n            unstring row(i) delimited by ' ' into inst pointer j\n            unstring row(i) delimited by ' ' into arg1 pointer j\n\n      *     if arg1 is `0`, advance to the next line\n      *     if it's a numeric  <>  0, parse arg2 and update index\n      *     (instruction is necessarily `jnz` if arg1 is numeric)\n      *     otherwise, find the index of `arg1` in `registers`\n            evaluate true\n            when isArg1Zero\n                 exit perform cycle\n            when isArg1Register\n                 move function abs(function ord(arg1) - 97) to r1\n            when other\n                 perform jumpIndex\n                 exit perform cycle\n            end-evaluate\n      \n            evaluate inst\n            when 'mov'       perform  setRegArg1\n            when 'inc'       add      1 to   v(r1)\n            when 'dec'       subtract 1 from v(r1)\n            when other\n              if v(r1) <> 0  perform jumpIndex end-if\n            end-evaluate\n          end-perform\n      \n      *   fill `result` with the values of all the registers that have been used\n          perform varying k from 1 until k = 27\n              if flag(k) = 1\n                 add 1 to resLen\n                 move function char(k + 97) to register(resLen)\n                 move v(k) to val(resLen)\n              end-if\n          end-perform\n      \n          goback.\n      \n          parseArg2.\n            unstring row(i) delimited by ' ' into arg2 pointer j\n            .\n\n          setRegArg1.\n      *   set value of `arg1` register\n      *   set corresponding `flag` to 1\n      *   find the second argument of the instruction\n      *   if arg2 is a register, copy its value to register `arg1`\n      *   otherwise, give to the register `arg1` the numeric value of `arg2` \n            move 1 to flag(r1)\n            perform parseArg2\n            if isArg2Register\n              move function abs(function ord(arg2(1:1)) - 97) to r2\n              move v(r2) to v(r1)\n            else\n              move function numval(arg2) to v(r1)\n            end-if\n            .\n      \n          jumpIndex.\n            perform parseArg2\n            compute i = i + function numval(arg2) - 1\n            . \n      \n       end program SimpleAssembler.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21809,"user_id":53,"body":"       identification division.\n       program-id. SimpleAssembler.\n       data division.\n      \n       local-storage section.\n       01  cmd                pic a(3).\n       01  a pic x.\n           88  isRegA         value 'a' thru 'z'.\n       01  b pic x(9).\n           88  isRegB         value 'a' thru 'z'.\n       01  memory-arr.\n           05                 occurs 26 times   \n                              indexed by k.\n               08  flag       pic 9.\n               08  xs         pic s9(8).\n       01  indices.\n          05  p               usage index.\n          05  q               usage index.\n          05  j               usage index.\n      \n       linkage section.\n       01  prog.\n           05  prog-len       pic 9(2).\n           05  row            pic x(20) occurs 0 to 50 times \n                              depending on prog-len \n                              indexed by i.\n       01  result.\n           05  res-len        pic 9(2).\n           05  res            occurs 0 to 26 times\n                              depending on res-len.\n               07  register   pic a.\n               07  val        pic s9(8).\n      \n       procedure division using prog result.\n      \n          initialize result\n          perform walk\n          perform render\n          goback.\n      \n        walk.\n          perform varying i from 1 until i > prog-len\n            set j to 1\n            perform parseCmd\n            perform parseA\n            evaluate true\n              when a = '0'  exit perform cycle\n              when isRegA   move function abs(function ord(a) - 97) to p\n              when other    perform doJnz\n                            exit perform cycle\n            end-evaluate\n            evaluate cmd\n              when 'mov'    perform doMove\n              when 'inc'    perform doInc\n              when 'dec'    perform doDec\n              when other    if xs(p) <> 0 then perform doJnz end-if\n            end-evaluate\n          end-perform\n          .\n\n        render.\n          perform varying k from 1 until k = 27\n            if flag(k) = 1 then\n              add 1 to res-len\n              move function char(k + 97) to register(res-len)\n              move xs(k) to val(res-len)\n            end-if\n          end-perform\n          .\n\n        parseCmd.\n          unstring row(i) delimited by ' ' into cmd pointer j\n          .\n\n        parseA.\n          unstring row(i) delimited by ' ' into a pointer j\n          .\n\n        parseB.\n          unstring row(i) delimited by ' ' into b pointer j\n          .\n\n        doInc.\n          add 1 to xs(p)\n          .\n\n        doDec.\n          subtract 1 from xs(p)\n          .\n\n        doMove.\n          move 1 to flag(p)\n          perform parseB\n          if isRegB then\n            move function abs(function ord(b(1:1)) - 97) to q\n            move xs(q) to xs(p)\n          else\n            move function numval(b) to xs(p)\n          end-if\n          .\n\n        doJnz.\n          perform parseB\n          compute i = i + function numval(b) - 1\n          . \n      \n       end program SimpleAssembler.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e26b5d92d04c7a4f00020a":[{"id":21810,"user_id":168,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       working-storage section.\n       01 i     usage index.\n       01 k     usage index.\n       01 c     usage index.\n       01 d     pic 9.\n       01 odd   pic 9.\n      \n       linkage section.\n       01 n           pic s9(20).\n       01 result      pic 9.\n      \n       procedure division using n result.\n          move 0 to result odd\n          if n < 11 then goback end-if\n          move 1 to k\n          inspect n tallying k for leading '0'\n          perform with test after varying d from 0 until d = 9\n              move 0 to c\n              inspect n(k:) tallying c for all d\n              evaluate function mod(c, 2) also odd\n                  when 1 also 1 goback\n                  when 1 also any move 1 to odd\n              end-evaluate\n          end-perform\n          move 1 to result\n          goback.\n       end program Palindrome.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21811,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(20)9.\n       01 s           pic x(20).\n       01 digitsCounter.\n          03  d pic 9 occurs 10 times.\n       01 l           pic 9.\n       01 i           usage index.\n       01 x           pic 9.\n      \n       linkage section.\n       01 n           pic s9(20).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          if n < 11 goback end-if\n      \n          move n to z\n          move function trim(z) to s\n          perform varying i from 1 until i > length function trim(s)\n            move function numval(s(i:1)) to x\n            compute d(x + 1) = function rem(d(x + 1) + 1, 2) \n          end-perform\n          initialize x\n          perform varying i from 1 until i = 11\n            if d(i) = 1\n               if x = 1 goback end-if\n               set x to 1\n            end-if\n          end-perform\n          set result to 1.\n      \n       end program Palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21812,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 z           pic z(20)9.\n       01 s           pic x(20).\n       01 i           usage index.\n       01 c           pic 9.\n       01 ds.\n          03  d       pic 9 occurs 10 times.\n       linkage section.\n       01 n           pic s9(20).\n       01 result      pic 9.\n       procedure division using n result.\n          initialize result\n          if n <= 10 then goback end-if\n          move n to z\n          move function trim(z) to s\n          perform varying i from 1 until i > length of function trim(s)\n            move function numval(s(i:1)) to c\n            compute d(c + 1) = function rem(d(c + 1) + 1, 2) \n          end-perform\n          perform varying i from 1 until i > 10\n            if d(i - 1) = 1\n             if c = 1 then goback end-if\n             set c to 1\n            end-if\n          end-perform\n          set result to 1\n          goback.\n       end program Palindrome.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e2708f9bd67fee17000080":[{"id":21813,"user_id":50,"body":"       identification division.\n       program-id. Palindrome.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(10)9.\n       01 s           pic x(10).\n       01 l           pic 9.\n       01 i           usage index.\n       01 j           usage index.\n       01 tmp         pic x(10).\n       01 t           pic 9(9).\n      \n       linkage section.\n       01 n           pic s9(9).\n       01 result.\n          03 resLength pic 9(2).\n          03 x  occurs 0 to 99 times\n                depending on resLength.\n             05 res       pic 9(9).\n      \n       procedure division using n result.\n      \n          set resLength to 0\n          if n < 10 goback end-if\n          \n          move n to z\n          compute l = length function trim(z)\n          move function trim(z) to s\n          perform varying i from 1 until i = l\n                  after   j from 2\n                  until   j + i = l + 2\n            move s(i:j) to tmp\n            if tmp = function reverse(function trim(tmp))\n            and function numval(tmp) > 10\n                add 1 to resLength\n                move tmp to res(resLength)\n            end-if\n          end-perform\n      \n          if resLength < 2 goback end-if\n      \n          sort x on ascending key res\n          move res(1) to t\n          set j to 1\n          perform varying i from 2 until i > resLength\n              if res(i) <> t\n                 set j up by 1\n                 move res(i) to res(j) t\n              end-if\n          end-perform\n          set resLength to j\n      \n          goback.\n       end program Palindrome.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21814,"user_id":53,"body":"       identification division.\n       program-id. Palindrome.\n       data division.\n       local-storage section.\n       01 x            pic z(10)9.\n       01 y            pic x(10).\n       01 s            pic x(10).\n       01 w            pic 9.\n       01 i            usage index.\n       01 j            usage index.\n       01 t            pic 9(9).\n       linkage section.\n       01 n            pic s9(9).\n       01 result.\n          03 resLength pic 9(2).\n          03 xs        occurs 0 to 99 times\n                       depending on resLength.\n             05 res    pic 9(9).\n       procedure division using n result.\n          initialize result\n          if n < 10 then goback end-if\n          perform seek\n          if resLength < 2 then goback end-if\n          perform render\n          goback.\n      \n        seek.\n          move n to x\n          move length of function trim(x) to w\n          move function trim(x) to s\n          perform varying i from 1 until i = w after j from 2\n              until j + i = w + 2\n            move s(i:j) to y\n            if y = function reverse(function trim(y))\n                and function numval(y) > 10 then\n              add 1 to resLength\n              move y to res(resLength)\n            end-if\n          end-perform\n          .\n      \n        render.\n          sort xs on ascending key res\n          move res(1) to t\n          set j to 1\n          perform varying i from 2 until i > resLength\n            if res(i) <> t then\n              set j up by 1\n              move res(i) to res(j) t\n            end-if\n          end-perform\n          set resLength to j\n          .\n      \n       end program Palindrome.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e77c88fd2d893a77000102":[{"id":21815,"user_id":76,"body":"       identification division.\n       program-id. rainVolume.\n       data division.\n      \n       local-storage section.\n       01  l                 pic 9(6).\n       01  r                 pic 9(6).\n       01  max_left          pic 9(8).\n       01  max_right         pic 9(8).\n      \n       linkage section.\n       01  towers.\n           05 arr-length     pic 9(6).\n           05 xs             pic 9(8) occurs 0 to 110000 times \n                                      depending on arr-length.\n       01  result            pic 9(15).\n      \n       procedure division using towers result.\n         set l to 1\n         set r to arr-length\n         set max_left to xs(l)\n         set max_right to xs(r)\n         initialize result\n         perform until l >= r\n           if max_left < max_right then\n             set l up by 1\n             set max_left to function max(max_left, xs(l))\n             compute result = result + max_left - xs(l)\n           else\n             set r down by 1\n             set max_right to function max(max_right, xs(r))\n             compute result = result + max_right - xs(r)\n           end-if\n         end-perform.\n       end program rainVolume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21816,"user_id":168,"body":"       identification division.\n       program-id. rainVolume.\n       data division.\n       local-storage section.\n       01  l                 pic 9(8).\n       01  r                 pic 9(8).\n      * It is better to use the index type for i and j\n      * I am testing that micro-optimizations are not required\n       01  i                 pic 9(6).\n       01  j                 pic 9(6).\n       linkage section.\n       01  towers.\n           05 arr-length     pic 9(6).\n           05 xs             pic 9(8) occurs 0 to 110000 times \n                                  depending on arr-length.\n       01  result            pic 9(15).\n      \n       procedure division using towers result.\n           move 0 to result\n           if arr-length <= 2 goback end-if\n           move 2 to i\n           compute j = arr-length - 1\n           move xs(1) to l\n           move xs(arr-length) to r\n           perform until i > j\n               if l < r\n                   add function max(l - xs(i), 0) to result\n                   move function max(l, xs(i)) to l\n                   add 1 to i\n               else\n                   add function max(r - xs(j), 0) to result\n                   move function max(r, xs(j)) to r\n                   subtract 1 from j\n               end-if\n           end-perform\n           goback.\n       end program rainVolume.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21817,"user_id":53,"body":"       identification division.\n       program-id. rainVolume.\n       data division.\n       local-storage section.\n       01  arr-1.\n           05 l             pic 9(8) occurs 0 to 110000 times\n                                  depending on len.\n       01  arr-2.\n           05 r             pic 9(8) occurs 0 to 110000 times\n                                  depending on len.\n       01  x                pic s9(8).\n       01  y                pic s9(8).\n       linkage section.\n       01  towers.\n           05 len            pic 9(6).\n           05 xs             pic 9(8) occurs 0 to 110000 times \n                                  depending on len\n                                  indexed by i.\n       01  res               pic 9(15).\n       procedure division using towers res.\n           move 0 to res\n           if len < 3 goback end-if\n           move xs(1) to l(1)\n           move xs(len) to r(len)\n           perform varying i from 2 until i > len\n              compute l(i) = function max(xs(i), l(i - 1))\n              compute r(len - i + 1) = \n                 function max(r(len - i + 2), xs(len - i + 1))\n           end-perform\n           perform varying i from 1 until i > len\n              subtract xs(i) from l(i) giving x\n              subtract xs(i) from r(i) giving y\n              compute res = res + function max(0, function min(x, y))\n           end-perform\n           goback.\n       end program rainVolume.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21818,"user_id":50,"body":"       identification division.\n       program-id. rainVolume.\n       author. monadius.\n       data division.\n       local-storage section.\n       01  l                 pic 9(8).\n       01  r                 pic 9(8).\n      \n       linkage section.\n       01  towers.\n           05 arr-length     pic 9(6).\n           05 xs             pic 9(8) occurs 0 to 110000 times \n                             depending on arr-length indexed i j.\n       01  result            pic 9(15).\n      \n       procedure division using towers result.\n      \n           move 0 to result\n           if arr-length <= 2 goback end-if\n           move 2 to i\n           compute j = arr-length - 1\n           move xs(1) to l\n           move xs(arr-length) to r\n           perform until i > j\n               if l < r\n                   add function max(l - xs(i), 0) to result\n                   move function max(l, xs(i)) to l\n                   add 1 to i\n               else\n                   add function max(r - xs(j), 0) to result\n                   move function max(r, xs(j)) to r\n                   subtract 1 from j\n               end-if\n           end-perform\n      \n           goback.\n       end program rainVolume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21819,"user_id":168,"body":"       identification division.\n       program-id. rainVolume.\n       data division.\n       working-storage section.\n       01  l                 usage binary-long.\n       01  r                 usage binary-long.\n       linkage section.\n       01  towers.\n           05 arr-length     pic 9(3).\n           05 xs             pic 99 occurs 0 to 100 times \n                                  depending on arr-length indexed i j.\n       01  result            pic 9(8).\n      \n       procedure division using towers result.\n           move 0 to result\n           perform varying i from 2 until i >= arr-length\n               move 0 to l r\n               perform varying j from 1 until j = i\n                   if xs(j) > l then move xs(j) to l end-if\n               end-perform\n               compute j = i + 1\n               perform varying j from j until j > arr-length\n                   if xs(j) > r then move xs(j) to r end-if\n               end-perform\n               add function max(0, function min(l, r) - xs(i)) to result\n           end-perform.\n       end program rainVolume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21820,"user_id":168,"body":"       identification division.\n       program-id. rainVolume.\n       data division.\n       local-storage section.\n       01  l                 pic 99.\n       01  r                 pic 99.\n       linkage section.\n       01  towers.\n           05 arr-length     pic 9(3).\n           05 xs             pic 99 occurs 0 to 100 times \n                                  depending on arr-length indexed i j.\n       01  result            pic 9(8).\n      \n       procedure division using towers result.\n           move 0 to result\n           if arr-length <= 2 goback end-if\n           move 2 to i\n           compute j = arr-length - 1\n           move xs(1) to l\n           move xs(arr-length) to r\n           perform until i > j\n               if l < r\n                   add function max(l - xs(i), 0) to result\n                   move function max(l, xs(i)) to l\n                   add 1 to i\n               else\n                   add function max(r - xs(j), 0) to result\n                   move function max(r, xs(j)) to r\n                   subtract 1 from j\n               end-if\n           end-perform\n           goback.\n       end program rainVolume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21821,"user_id":53,"body":"       identification division.\n       program-id. rainVolume.\n       data division.\n       local-storage section.\n       01  arr-1.\n           05 l             pic 9(8) occurs 0 to 100 times\n                                  depending on len.\n       01  arr-2.\n           05 r             pic 9(8) occurs 0 to 100 times\n                                  depending on len.\n       01  x                pic s9(8).\n       01  y                pic s9(8).\n       linkage section.\n       01  towers.\n           05 len            pic 9(3).\n           05 xs             pic 99 occurs 0 to 100 times \n                                  depending on len\n                                  indexed by i.\n       01  res               pic 9(8).\n       procedure division using towers res.\n           move 0 to res\n           if len < 3 goback end-if\n           move xs(1) to l(1)\n           move xs(len) to r(len)\n           perform varying i from 2 until i > len\n              compute l(i) = function max(xs(i), l(i - 1))\n              compute r(len - i + 1) = \n                 function max(r(len - i + 2), xs(len - i + 1))\n           end-perform\n           perform varying i from 1 until i > len\n              subtract xs(i) from l(i) giving x\n              subtract xs(i) from r(i) giving y\n              compute res = res + function max(0, function min(x, y))\n           end-perform\n           goback.\n       end program rainVolume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e8cad9fd89ea0c6c000258":[{"id":21822,"user_id":53,"body":"       identification division.\n       program-id. KookaCounter.\n       data division.\n       local-storage section.\n       01 p           pic a.\n       01 q           pic a.\n       01 i           usage index.\n       linkage section.\n       01 laughing    pic a(100).\n       01 result      pic 9(2).\n       procedure division using laughing result.\n          initialize result\n          perform varying i from 1 until i > \n              function length(function trim(laughing))\n            move laughing(i:1) to q\n            if (q = 'h' or q = 'H') and q <> p then\n              move q to p\n              add 1 to result\n            end-if\n          end-perform\n          goback.\n       end program KookaCounter.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21823,"user_id":50,"body":"       identification division.\n       program-id. KookaCounter.\n      \n       data division.\n       local-storage section.\n       01 b           pic x(2).\n       01 s           pic x(2).\n       01 i           usage index.\n      \n       linkage section.\n       01 laughing    pic a(100).\n       01 result      pic 9(2).\n      \n       procedure division using laughing result.\n      \n          initialize result\n          perform varying i from 1 by 2\n          until i > length of function trim(laughing)\n            move laughing(i:2) to b\n            if b <> s\n              add 1 to result\n              move b to s\n            end-if\n          end-perform\n      \n          goback.\n       end program KookaCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58ee4db3e479611e6f000086":[{"id":21824,"user_id":168,"body":"       identification division.\n       program-id. BitMarchArray.\n      \n       data division.\n       linkage section.\n       01  n           pic 9.\n       01  result.\n           03  resLen  pic 9.\n           03  row     occurs 8 times depending on resLen indexed by i.\n               08 num  pic 9 occurs 8 times indexed by j.\n      \n       procedure division using n result.\n          compute resLen = 9 - n\n          perform varying i from 1 until i > 9 - n\n                    after j from 1 until j > 8\n              if j >= 10 - n - i and <= 9 - i\n                  move 1 to num(i, j)\n              else\n                  move 0 to num(i, j)\n              end-if\n          end-perform.\n       end program BitMarchArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21825,"user_id":50,"body":"       identification division.\n       program-id. BitMarchArray.\n      \n       data division.\n       linkage section.\n       01  n           pic 9.\n       01  result.\n           03  rl      pic 9.\n           03  row occurs 8 depending rl.\n               08 r    pic 9 occurs 8 indexed i j. \n      \n       procedure division using n result.\n      \n          compute rl = 9 - n\n          perform varying i from 1 until i > rl\n                   after  j from 1 until j = 9\n            if j >  9 - i - n \n            and  < 10 - i\n                 then   move 1 to r(i, j)\n                 else   move 0 to r(i, j)\n            end-if\n          end-perform.\n      \n       end program BitMarchArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58f0ba42e89aa6158400000e":[{"id":21826,"user_id":421,"body":"       identification division.\n       program-id. fold-to.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 l           pic 9(10)v9(20).\n       linkage section.\n       01 distance    pic s9(10)v9(10).\n       01 result      pic s9(20).\n      \n       procedure division using distance result.\n           if distance < 0 then\n               set result to -1\n           else\n               initialize result\n               move 0.0001 to l\n               perform until l >= distance\n                   multiply 2 by l\n                   add 1 to result\n               end-perform\n           end-if.\n       end program fold-to.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21827,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. fold-to.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  FOLD        PIC S9(10)V9(4)  VALUE 0.0001.\n       LINKAGE SECTION.\n       01  DISTANCE    PIC S9(10)V9(10).\n       01  RESULT      PIC S9(20).\n       PROCEDURE DIVISION USING DISTANCE RESULT.\n           IF  DISTANCE < 0\n               MOVE -1  TO RESULT\n           ELSE\n               PERFORM VARYING RESULT FROM 0 UNTIL FOLD > DISTANCE\n                   MULTIPLY 2 BY FOLD\n               END-PERFORM\n           END-IF.\n       END PROGRAM fold-to.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21828,"user_id":53,"body":"       identification division.\n       program-id. fold-to.\n       data division.\n       local-storage section.\n       01 m           pic 9(12)v9(4).\n       linkage section.\n       01 n           pic s9(10)v9(10).\n       01 i           pic s9(20).\n       procedure division using n i.\n          move -1 to i\n          if n < 0 then goback end-if\n          move 0.0001 to m\n          perform varying i from 0 until n <= m\n            multiply 2 by m\n          end-perform\n          goback.\n       end program fold-to.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21829,"user_id":168,"body":"       identification division.\n       program-id. fold-to.\n      \n       data division.\n       local-storage section.\n       01 d           pic 9(11)v9(4) value 0.0001.\n\n       linkage section.\n       01 distance    pic s9(10)v9(10).\n       01 result      pic s9(20).\n      \n       procedure division using distance result.\n          if distance < 0\n              move -1 to result\n          else\n              move 0 to result\n              perform until d >= distance\n                  multiply 2 by d\n                  add 1 to result\n              end-perform\n          end-if.\n       end program fold-to.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21830,"user_id":50,"body":"       identification division.\n       program-id. fold-to.\n      \n       data division.\n       local-storage section.\n       01  x          pic 9(12)v9(4).\n      \n       linkage section.\n       01 distance    pic s9(10)v9(10).\n       01 result      pic s9(20).\n      \n       procedure division using distance result.\n      \n          if distance < 0\n              move -1 to result\n          else\n              move 0.0001 to x\n              perform varying result from 0 until distance <= x\n                multiply 2 by x\n              end-perform\n          end-if\n\n          goback.\n       end program fold-to.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58f5c63f1e26ecda7e000029":[{"id":21831,"user_id":null,"body":"       identification division.\n       program-id. wave.\n       data division.\n       working-storage section.\n       01  i                 pic 9(3).\n       01  j                 pic 9(3).\n      \n       linkage section.\n       01  strng.\n           05 s-length       pic 9(3).\n           05 chars          pic a occurs 0 to 100 times \n                                      depending on s-length.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic a(100) occurs 0 to 100 times \n                                     depending on res-length.\n      \n       procedure division using strng result.\n          initialize result\n          move zeros to j\n          perform varying i from 1 by 1 until i > s-length\n            add 1 to j\n            if chars(i:1) <> space\n               add 1 to res-length\n               move chars(1:s-length) to res(res-length)\n               move function upper-case(chars(j:1)) to\n                             res(res-length)(j:1)  \n            end-if\n          end-perform\n          \n          goback.\n       end program wave.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21832,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. wave.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STRNG.\n           05 S-LEN     PIC 9(3).\n           05 STR       PIC A      OCCURS 100 DEPENDING S-LEN INDEXED I.\n       01  RESULT.\n           05 R-LEN     PIC 9(3).\n           05 RES       PIC A(100) OCCURS 100 DEPENDING R-LEN.\n\n       PROCEDURE DIVISION USING STRNG RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > S-LEN\n               IF  STR(I) NOT = SPACE\n                   ADD 1                             TO R-LEN\n                   MOVE STRNG(4:S-LEN)               TO RES(R-LEN)\n                   MOVE UPPER-CASE(RES(R-LEN)(I:1))  TO RES(R-LEN)(I:1)\n               END-IF\n           END-PERFORM.\n       END PROGRAM wave.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21833,"user_id":168,"body":"       identification division.\n       program-id. wave.\n       data division.\n      \n       linkage section.\n       01  strng.\n           05 s-length       pic 9(3).\n           05 str.\n              10 chars       pic a occurs 0 to 100 times \n                                   depending on s-length indexed by i.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic a(100) occurs 0 to 100 times \n                                 depending on res-length.\n      \n       procedure division using strng result.\n          move 0 to res-length\n          perform varying i from 1 until i > s-length\n              if chars(i) <> space\n                  add 1 to res-length\n                  move str to res(res-length)\n                  move function upper-case(str(i:1)) \n                    to res(res-length)(i:1)\n              end-if\n          end-perform.\n       end program wave.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21834,"user_id":50,"body":"       identification division.\n       program-id. wave.\n       data division.\n       local-storage section.\n       01  s   pic a(100).\n       01  tmp pic a(100).\n      \n       linkage section.\n       01  strng.\n           05 s-length       pic 9(3).\n           05 chars          pic a occurs 0 to 100 times \n                                      depending on s-length indexed i.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic a(100) occurs 0 to 100 times \n                                     depending on res-length.\n      \n       procedure division using strng result.\n      \n          initialize result\n          move function lower-case(strng(4:)) to s\n          perform varying i from 1 until i > s-length\n            if chars(i) <> ' '\n              add 1 to res-length\n              move s to tmp\n              move function upper-case(chars(i)) to tmp(i:1)\n              move tmp to res(res-length)\n            end-if\n          end-perform\n      \n          goback.\n       end program wave.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58f8a3a27a5c28d92e000144":[{"id":21835,"user_id":421,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           03  arrlength    pic 9(2).\n           03  xs           pic s9(2)\n                            occurs 0 to 20 times depending on arrLength\n                                                 indexed by i.\n       01  result.\n           03  found        pic 9.\n           03  res          pic s9(2).\n      \n       procedure division using arr result.      \n          initialize result\n          perform varying i from 2 by 1 until i > arrLength\n              if xs(i) - xs(i - 1) <> 1 then\n                  set found to 1\n                  move xs(i) to res\n                  goback\n              end-if\n          end-perform.\n       end program FirstNonConsecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21836,"user_id":null,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n      \n       data division.\n      \n       linkage section.\n       01  arr.\n           03  arrlength    pic 9(2).\n           03  xs           pic s9(2) occurs 0 to 20 times\n                            depending on arrLength\n                            indexed by i.\n       01  result.\n           03  found        pic 9.\n           03  res          pic s9(2).\n      \n       procedure division using arr result.\n          initialize result.\n          perform varying i from 1 until i > arrlength\n              if i + 1 > arrlength then\n                  move 0 to found\n              else if xs(i) + 1 <> xs(i + 1)\n                  move 1 to found\n                  move xs(i + 1) to res\n                  goback\n              end-if\n          end-perform.\n          goback.\n       end program FirstNonConsecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21837,"user_id":null,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n      \n       data division.\n       working-storage section.\n       01 a pic s9(2).\n       01 b pic s9(2).\n       01 c pic s9(2) value 1.\n       01 d pic s9(2) value zero.\n       linkage section.\n       01  arr.\n           03  arrlength    pic 9(2).\n           03  xs           pic s9(2)\n               occurs 0 to 20 times depending on arrLength.\n       01  result.\n           03  found        pic 9.\n           03  res          pic s9(2).\n      \n       procedure division using arr result.\n          initialize result.\n          if arrlength = ZERO \n             MOVE zero to found\n             GO TO AE.\n          move 1 to c.\n          perform until c = arrlength\n          move xs (c) to a\n          compute d = c + 1\n          move xs (d) to b\n          add 1 to a\n          display a b\n          if a not = b\n             MOVE 1 to found\n             MOVE b to res\n             compute c = arrlength - 1\n          END-if\n          ADD 1 to c\n          END-PERFORM.\n          display found res.\n          goback.\n       AE.\n       end program FirstNonConsecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21838,"user_id":null,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n      \n       data division.\n      \n       linkage section.\n       01  arr.\n           03  arrlength    pic 9(2).\n           03  xs           pic s9(2)\n               occurs 0 to 20 times depending on arrLength indexed by i.\n       01  result.\n           03  found        pic 9.\n              88 is-not-found   value 0.\n              88 is-found       value 1.\n           03  res          pic s9(2).\n      \n       procedure division using arr result.\n          initialize result\n          if arrLength < 2 then goback.\n      *   Assign `1` to `found` if you found a non consecutive number in `arr`, and store this number in `res`.\n      *   Otherwise, assign `0` to found.\n          perform varying i from 2 until i > arrLength or is-found\n             if xs(i - 1) + 1 not = xs(i) then\n                set is-found to true\n                set res to xs(i)\n             end-if\n          end-perform.\n          goback.\n       end program FirstNonConsecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21839,"user_id":null,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n      \n       data division.\n       working-storage section.\n       01 i                usage is index.\n      \n       linkage section.\n       01  arr.\n           03  arrlength    pic 9(2).\n           03  xs           pic s9(2)\n               occurs 0 to 20 times depending on arrLength.\n       01  result.\n           03  found        pic 9.\n             88  is-not-found   value 0.\n             88  is-found       value 1.\n           03  res          pic s9(2).\n      \n       procedure division using arr result.\n          initialize result\n          if arrLength < 2 then goback.\n      *   Assign `1` to `found` if you found a non consecutive number in `arr`, and store this number in `res`.\n      *   Otherwise, assign `0` to found.\n          perform varying i from 2 by 1 until i > arrLength or is-found\n             if xs(i - 1) + 1 not = xs(i) then\n                set is-found to true\n                set res to xs(i)\n             end-if\n          end-perform.\n          goback.\n       end program FirstNonConsecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21840,"user_id":53,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n       data division.\n       linkage section.\n       01  arr.\n           03  w            pic 9(2).\n           03  xs           pic s9(2)\n                            occurs 0 to 20 \n                            depending w \n                            indexed i.\n       01  result.\n           03  found        pic 9.\n           03  res          pic s9(2).\n       procedure division using arr result.\n          perform varying i from 2 until i > w\n            if xs(i - 1) <> xs(i) - 1\n              set found to 1\n              move xs(i) to res\n              goback\n            end-if\n          end-perform\n          set found to 0\n          goback.\n       end program FirstNonConsecutive.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21841,"user_id":50,"body":"       identification division.\n       program-id. FirstNonConsecutive.\n      \n       data division.\n\n       linkage section.\n       01  arr.\n           03  l        pic 9(2).\n           03  xs  pic s9(2) occurs 0 to 20 depending l indexed i.\n       01  result.\n           03  found        pic 9.\n           03  res          pic s9(2).\n      \n       procedure division using arr result.\n      \n          perform varying i from 2 until i > l\n            if xs(i - 1) + 1 <> xs(i)\n              set found to 1\n              move xs(i) to res\n              goback\n            end-if\n          end-perform\n          set found to 0.\n      \n       end program FirstNonConsecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58f9f9f58b33d1b9cf00019d":[{"id":21842,"user_id":53,"body":"       identification division.\n       program-id. CountFindNum.\n       data division.\n       local-storage section.\n       01  stck.\n           03 q-stck         occurs 99999 times\n                             indexed by i0.\n              05 q           pic 9(20).\n       01  lst.\n           03 r-lst          occurs 99999 times\n                             indexed by i1 i2.\n              05 r           pic 9(20).\n       01 a                  pic 9(20) value 1.\n       01 n                  pic 9(20).\n       01 f                  pic 9.\n       linkage section.\n       01  primesLst.\n           05 arr-length     pic 9.\n           05 ps             pic 9(3) occurs 0 to 9 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  k                 pic 9(20).\n       01  result.\n           05 len            pic 9(5).\n           05 mval           pic 9(20).\n       procedure division using primesLst k result.\n          initialize result i1\n          perform varying i from 1 until i > arr-length\n            multiply ps(i) by a giving a\n          end-perform\n          move 1 to i0\n          move a to q(i0)\n          perform until i0 = 0\n            move q(i0) to n\n            subtract 1 from i0\n            if n <= k then\n              move 0 to f\n              perform varying i2 from 1 until i2 > i1\n                if r(i2) = n then move 1 to f, exit perform end-if\n              end-perform\n              if f = 0 then\n                add 1 to i1\n                move n to r(i1)\n                perform varying i from 1 until i > arr-length\n                  add 1 to i0\n                  multiply n by ps(i) giving q(i0)\n                end-perform\n              end-if\n            end-if\n          end-perform\n          if i1 = 0 then\n            move 0 to len\n            move 0 to mval\n          else\n            move i1 to len\n            perform varying i2 from 1 until i2 > i1\n              if r(i2) > mval then move r(i2) to mval end-if\n            end-perform\n          end-if\n          goback.\n       end program CountFindNum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21843,"user_id":168,"body":"       identification division.\n       program-id. CountFindNum.\n       data division.\n       working-storage section.\n       01  prod     pic 9(30).\n       01  ns-len   usage index.\n       01  prev-len usage index.\n       01  ns       pic 9(20) occurs 1000 times indexed j.\n      \n       linkage section.\n       01  primesLst.\n           05 arr-length     pic 9.\n           05 xs             pic 9(3) occurs 0 to 9 times \n                                      depending on arr-length indexed i.\n       01  lim               pic 9(20).\n       01  result.\n           05 lgth           pic 9(5).\n           05 maxVal         pic 9(20).\n      \n       procedure division using primesLst lim result.\n          move 0 to lgth maxVal\n          move 1 to prod ns-len prev-len\n          perform varying i from 1 until i > arr-length\n              multiply xs(i) by prod\n          end-perform\n          if prod > lim then goback end-if\n          move prod to ns(1) maxVal\n          perform varying i from 1 until i > arr-length\n              perform varying j from 1 until j > prev-len\n                  multiply ns(j) by xs(i) giving prod\n                  perform until prod > lim\n                      add 1 to ns-len\n                      move prod to ns(ns-len)\n                      if prod > maxVal move prod to maxVal end-if\n                      multiply xs(i) by prod\n                  end-perform                \n              end-perform\n              move ns-len to prev-len\n          end-perform\n          move ns-len to lgth          \n          goback.\n       end program CountFindNum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21844,"user_id":53,"body":"       identification division.\n       program-id. CountFindNum.\n       data division.\n       local-storage section.\n       01  a                 pic 9(38) value 1.\n       01  n                 pic 9(38).\n       01  b                 pic 9.\n       01  r-arr.\n           05 r-len          pic 9(5).\n           05 r              pic 9(20) occurs 0 to 99999 times \n                                       depending on r-len\n                                       indexed r-i.\n       01  q-stack.\n           05 q-len          pic 9(5).\n           05 q              pic 9(38) occurs 0 to 99999 times \n                                       depending on q-len.\n       linkage section.\n       01  ps-arr.\n           05 ps-len         pic 9.\n           05 ps             pic 9(3) occurs 0 to 9 times \n                                      depending on ps-len\n                                      indexed ps-i.\n       01  k                 pic 9(20).\n       01  result.\n           05 len            pic 9(5).\n           05 max-val        pic 9(20).\n       procedure division using ps-arr k result.\n          initialize result\n          perform varying ps-i from 1 until ps-i > ps-len\n            multiply ps(ps-i) by a\n          end-perform\n          set r-len to 0\n          add 1 to q-len\n          move a to q(q-len)\n          perform until q-len = 0\n            move q(q-len) to n\n            subtract 1 from q-len\n            if n <= k then\n              set b to 0\n              perform varying r-i from 1 until r-i > r-len\n                if r(r-i) = n then\n                  set b to 1\n                  exit perform\n                end-if\n              end-perform\n              if b = 0 then\n                add 1 to r-len\n                move n to r(r-len)\n                perform varying ps-i from 1 until ps-i > ps-len\n                  add 1 to q-len\n                  compute q(q-len) = n * ps(ps-i)\n                end-perform\n              end-if\n            end-if\n          end-perform\n          move r-len to len\n          perform varying r-i from 1 until r-i > r-len\n            if r(r-i) > max-val then move r(r-i) to max-val end-if\n          end-perform\n          goback.\n       end program CountFindNum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21845,"user_id":50,"body":"       identification division.\n       program-id. CountFindNum.\n       data division.\n       local-storage section.\n       01  nums.\n           03 len       pic 9(5).\n           03 arr occurs 0 to 99999 times depending on len\n                                          indexed by j.\n              05  n pic 9(20).\n       01  prod pic 9(38).\n       01  p    pic 9(3).\n       01  a    pic 9(25).\n       01  l    pic 9(5).\n      \n       linkage section.\n       01  primesLst.\n           05 arr-length     pic 9.\n           05 xs             pic 9(3) occurs 0 to 9 times \n                             depending on arr-length indexed i.\n       01  lim               pic 9(20).\n       01  result.\n           05 lgth           pic 9(5).\n           05 maxVal         pic 9(20).\n      \n       procedure division using primesLst lim result.\n          \n          initialize result\n          move 1 to prod\n          move 0 to len\n          perform varying i from 1 until i > arr-length\n              multiply xs(i) by prod\n              if prod > lim goback end-if\n          end-perform\n          add 1 to len\n          move prod to n(len)\n          \n          perform varying i from 1 until i > arr-length\n              move xs(i) to p\n              move len to l\n              perform varying j from 1 until j > l\n                compute a = p * n(j)\n                perform until a > lim\n                  add 1 to len\n                  move a to n(len)\n                  multiply p by a\n                end-perform\n              end-perform\n           end-perform\n          \n           sort arr on ascending key n\n           move 1 to lgth\n           move n(1) to maxVal\n           perform varying j from 2 until j > len\n              if n(j) <> maxVal\n                add 1 to lgth\n                move n(j) to maxVal\n              end-if\n           end-perform\n      \n          goback.\n       end program CountFindNum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58fa273ca6d84c158e000052":[{"id":21846,"user_id":421,"body":"       identification division.\n       program-id. digits.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.           \n           SET result TO 1\n           PERFORM UNTIL n < 10\n               DIVIDE 10 INTO n\n               ADD 1 TO result\n           END-PERFORM.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21847,"user_id":50,"body":"       identification division.\n       program-id. digits.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.\n      * function log10(0) gives 0...\n          compute result = function log10(n) + 1\n\n          goback.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21848,"user_id":168,"body":"       identification division.\n       program-id. digits.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.\n          compute result = 0\n          inspect n tallying result for leading '0'\n          compute result = function max(20 - result, 1)\n          goback.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21849,"user_id":50,"body":"       identification division.\n       program-id. digits.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.\n      \n          perform with test after varying result from 1 until n = 0\n            divide 10 into n\n          end-perform.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21850,"user_id":null,"body":"       identification division.\n       program-id. digits.\n       data division.\n       working-storage section.\n       01 edt         pic z(19)9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n, result.\n          move n to edt\n          move function length(function trim(edt)) to result.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21851,"user_id":null,"body":"       identification division.\n       program-id. digits.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.\n          perform with test after until n = 0\n             add 1 to result\n             divide n by 10 giving n\n          end-perform.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21852,"user_id":null,"body":"       identification division.\n       program-id. digits.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.\n         if n = 0 then\n           set result to 1\n         else\n           set result to 0\n           perform until n = 0\n             add 1 to result\n             divide 10 into n\n           end-perform\n         end-if.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21853,"user_id":53,"body":"       identification division.\n       program-id. digits.\n       data division.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(2).\n       procedure division using n result.\n          move 1 to result\n          if n > 0 then add function log10 (n) to result end-if\n          goback.\n       end program digits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58fea5baf3dff03a6e000102":[{"id":21854,"user_id":421,"body":"       identification division.\n       program-id. factor-digits.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n      \n       procedure division using n result.\n           set result to 1\n           if n > 3 then\n              compute result = function integer(n * function log10(n \/ \n              function e) + function log10(2 * function pi * n) \/ 2) + 1\n           end-if.\n       end program factor-digits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21855,"user_id":50,"body":"       identification division.\n       program-id. factor-digits.\n      \n       data division.\n       local-storage section.\n       01 m           pic 9(8)v9(30).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n      \n       procedure division using n result.\n      \n          if n < 2\n              move 1 to result\n              goback\n          end-if\n          \n          move n to m\n      \n          compute result rounded mode toward-greater =\n                  function log10(6.283185307179586 * m) \/ 2.0 \n                  + m * function log10(m \/ 2.718281828459045)\n      \n          goback.\n       end program factor-digits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21856,"user_id":168,"body":"       identification division.\n       program-id. factor-digits.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n      \n       procedure division using n result.\n          compute result = function max(1,\n                (function log(2 * function pi * n) \/ 2\n                 + n * (function log(n) - 1)) \/ function log(10) + 1).\n       end program factor-digits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21857,"user_id":53,"body":"       identification division.\n       program-id. factor-digits.\n       data division.\n       local-storage section.\n       01 p           pic 9(8)v9(30).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          move 0 to result\n          if n < 0 goback end-if\n          move 1 to result\n          if n < 2 goback end-if\n          move n to p\n          compute result = 1 +\n                  function log10(6.283185307179586 * p) \/ 2.0 \n                  + p * function log10(p \/ 2.718281828459045)\n          goback.\n       end program factor-digits.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5902bc7aba39542b4a00003d":[{"id":21858,"user_id":50,"body":"      * Implementation of jkinney23's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/593be1964f98b5023b0001f6\/groups\/5972bd6d95267277140000da\n       identification division.\n       program-id. who_eats_who.\n       data division.\n       working-storage section.\n       01  mealTest     pic x(50).\n           88  disaster value 'antelope eats grass',\n                              'big-fish eats little-fish',\n                              'bug eats leaves',\n                              'bear eats big-fish',\n                              'bear eats bug',\n                              'bear eats chicken',\n                              'bear eats cow',\n                              'bear eats leaves',\n                              'bear eats sheep',\n                              'chicken eats bug',\n                              'cow eats grass',\n                              'fox eats chicken',\n                              'fox eats sheep',\n                              'giraffe eats leaves',\n                              'lion eats antelope',\n                              'lion eats cow',\n                              'panda eats leaves',\n                              'sheep eats grass'.\n      \n       local-storage section.\n       01  i              usage index value 1.\n       01  animals.\n           03  l          pic 9(2).\n           03  animal     pic x(11) occurs 20 depending l indexed j.\n      \n       linkage section.\n       01  zoo            pic x(200).\n       01  result.\n           05 resLength   pic 9(2).\n           05 res         pic x(200) occurs 2 to 20 depending resLength.\n      \n       procedure division using zoo result.\n      \n          set reslength j to 1\n          move zoo to res(1)\n          perform until i > length function trim(zoo)\n            set l up by 1\n            unstring zoo delimited ',' into animal(l) pointer i\n          end-perform\n          perform until j > l\n              perform checkDisasterBackWard\n              if disaster\n                  set j down by 1\n                  perform addMeal\n                  exit perform cycle\n              end-if\n              perform checkDisasterForWard\n              if disaster\n                  set j up by 1\n                  perform addMeal\n                  exit perform cycle\n              end-if\n              set j up by 1\n          end-perform\n      \n          set resLength up by 1\n          if l = 0 move space to res(resLength)\n          else\n            set i to 1\n            perform varying j from 1 until j > l\n                string \n                    animal(j) delimited by space\n                    ','\n                    into res(resLength)\n                    with pointer i\n                end-string\n            end-perform\n            move res(resLength)(1:i - 2) to res(resLength)\n          end-if\n      \n          goback.\n      \n          addMeal.\n              set resLength up by 1\n              move mealTest to res(resLength)\n              move function concat(\n                            animals(1:2 + 11 * (j - 1))\n                            animals(3 + 11 * j:)\n                                    ) to animals\n              set j to 1\n              set l down by 1\n              .\n      \n          checkDisasterBackWard.\n              if j < 2  then initialize mealTest\n              else      move function concat(\n                         function trim(animal(j)) ' eats ' animal(j - 1)\n                                              ) to mealTest\n              .\n      \n          checkDisasterForWard.\n              if j = l  then initialize mealTest\n              else      move function concat(\n                         function trim(animal(j)) ' eats ' animal(j + 1)\n                                              ) to mealTest\n              .\n      \n       end program who_eats_who.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2023-01-06 22:18:30"}],"590bb735517888ae6b000012":[{"id":21859,"user_id":53,"body":"       identification division.\n       program-id. SumProdDiags.\n       data division.\n       local-storage section.\n       01  i             pic 9(2).\n       01  j             pic 9(2).\n       01  a             pic s9(38).\n       01  b             pic s9(38).\n       01  c             pic s9(38).\n       01  d             pic s9(38).\n       linkage section.\n       01  q.\n           05  n         pic 9(2).\n           05  r         occurs 4 to 25 times\n                         depending on n.\n               07  m     pic s9 occurs 25 times.\n       01  s             pic s9(30).\n       procedure division using q s.\n          initialize s\n          perform varying i from 0 until i >= n\n            set a b c d to 1\n            perform varying j from 0 until j >= n - i\n              multiply m(j + 1, j + i + 1) by a\n              multiply m(j + i + 1, j + 1) by b\n              multiply m(j + 1, n - i - j) by c\n              multiply m(j + i + 1, n - j) by d\n            end-perform\n            if i is zero then\n              compute s = s + a - c\n            else\n              compute s = s + a + b - c - d\n            end-if\n          end-perform\n          goback.\n       end program SumProdDiags.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21860,"user_id":50,"body":"       identification division.\n       program-id. SumProdDiags.\n       data division.\n       local-storage section.\n       01  tmp          pic s9(24).\n      \n       linkage section.\n       01  matrix.\n           05  l        pic 9(2).\n           05  row      occurs 4 to 25 depending l.\n               07  cell pic s9 occurs 25 indexed i j.\n       01  result       pic s9(30).\n      \n       procedure division using matrix result.\n      \n          initialize result\n          perform varying i from 0 until i = l\n              move 1 to tmp\n              perform varying j from 0 until j = l - i\n                  multiply cell(j + 1, i + j + 1) by tmp\n              end-perform\n              add tmp to result\n          end-perform\n      \n          perform varying i from 1 until i = l\n              move 1 to tmp\n              perform varying j from 0 until j = l - i\n                  multiply cell(j + i + 1, j + 1) by tmp\n              end-perform\n              add tmp to result\n          end-perform\n      \n      \n          perform varying i from 0 until i = l\n              move 1 to tmp\n              perform varying j from 0 until j = l - i\n                  multiply cell(l - j, i + j + 1) by tmp\n              end-perform\n              subtract tmp from result\n          end-perform\n      \n          perform varying i from 0 until i = l - 1\n              move 1 to tmp\n              perform varying j from 0 until j = i + 1\n                  multiply cell(i - j + 1, j + 1) by tmp\n              end-perform\n              subtract tmp from result\n          end-perform\n          .\n       end program SumProdDiags.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"590c3173cd3b99c467000a26":[{"id":21861,"user_id":168,"body":"       identification division.\n       program-id. to-and-from.\n       data division.\n       working-storage section.\n       01 d                 pic 9(10).\n       linkage section.\n       01 a                 pic 9(10).\n       01 b                 pic 9(10).\n       01 t                 pic 9(10).\n       01 result            pic 9(10).\n       procedure division using a b t result.\n          subtract a from b giving d\n          compute t = function mod(t, 2 * d)\n          if t <= d\n              if a <= b \n                  compute result = a + t\n              else\n                  compute result = a - t\n              end-if\n          else\n              if a <= b\n                  compute result = b - t + d\n              else\n                  compute result = b + t - d\n              end-if\n          end-if.\n       end program to-and-from.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21862,"user_id":50,"body":"       identification division.\n       program-id. to-and-from.\n       data division.\n       local-storage section.\n       01 c                 pic s9(10).\n       01 s                 pic s9 value -1.\n       01 d                 pic 9(10).\n       linkage section.\n       01 a                 pic 9(10).\n       01 b                 pic 9(10).\n       01 t                 pic 9(10).\n       01 result            pic 9(10).\n       procedure division using a b t result.\n      \n          subtract b from a giving c\n          if c is negative move 1 to s end-if\n          move function abs(c) to d\n          if function rem(function integer(t \/ d), 2) = 1\n             compute result = b - function rem(t, d) * s\n          else\n             compute result = a + function rem(t, d) * s\n          end-if.\n      \n       end program to-and-from.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21863,"user_id":53,"body":"       identification division.\n       program-id. to-and-from.\n       data division.\n       local-storage section.\n       01 d                 pic 9(10).\n       01 r                 pic 9(10).\n       01 i                 pic 9(10).\n       linkage section.\n       01 a                 pic 9(10).\n       01 b                 pic 9(10).\n       01 t                 pic 9(10).\n       01 result            pic 9(10).\n       procedure division using a b t result.\n          initialize result\n          compute d = function abs(b - a)\n          multiply 2 by d giving r\n          compute i = function rem(t, r)\n          evaluate true\n            when i < d and a > b subtract i from a giving result\n            when i < d add i to a giving result\n            when a > b compute result = b + function rem(i, d)\n            when other compute result = b - function rem(i, d)\n          end-evaluate\n          goback.\n       end program to-and-from.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"590e03aef55cab099a0002e8":[{"id":21864,"user_id":421,"body":"       identification division.\n       program-id. incrementer.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                     depending on res-length indexed j.\n      \n       procedure division using arr result.         \n           perform varying i from 1 by 1 until i > arr-length      \n               add 1 to res-length\n               compute res(res-length) = function rem(xs(i) + i, 10)\n           end-perform.\n       end program incrementer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21865,"user_id":null,"body":"       identification division.\n       program-id. incrementer.\n       data division.\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n           PERFORM VARYING TALLY FROM 1 BY 1 UNTIL TALLY > arr-length\n               ADD 1 TO res-length\n               COMPUTE res(res-length) = xs(TALLY) + res-length\n           END-PERFORM.     \n          goback.\n       end program incrementer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21866,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. incrementer.\n       DATA DIVISION.       \n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN          PIC 9(2).\n           05 VAL          PIC 9 OCCURS 0 TO 20 DEPENDING LEN INDEXED I.\n       01  RESULT          PIC X(22).\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN\n               ADD I  TO VAL(I)\n           END-PERFORM\n           MOVE ARR  TO RESULT.\n       END PROGRAM incrementer.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21867,"user_id":null,"body":"       identification division.\n       program-id. incrementer.\n       data division.\n      \n       working-storage section.\n       01  i                 pic 9(2).\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n         set res-length to arr-length\n         perform varying i from 1 until i > arr-length\n           compute res(i) = function mod(xs(i) + i, 10)\n         end-perform.\n       end program incrementer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21868,"user_id":null,"body":"       identification division.\n       program-id. incrementer.\n       data division.\n\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                     depending on res-length\n                                     indexed by idx.\n      \n       procedure division using arr result.\n          move arr to result.\n          set idx to 1.\n      \n          perform until idx > res-length\n              compute res(idx) = res(idx) + idx\n              add 1 to idx\n          end-perform.\n          goback.\n       end program incrementer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21869,"user_id":168,"body":"       identification division.\n       program-id. incrementer.\n       data division.\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n           move arr-length to res-length\n           perform varying i from 1 until i > arr-length\n               compute res(i) = function mod(xs(i) + i, 10)\n           end-perform.\n       end program incrementer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21870,"user_id":53,"body":"       identification division.\n       program-id. incrementer.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                   depending on arr-length\n                                   indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                   depending on res-length.\n       procedure division using arr result.\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              move function mod(i + xs(i), 10) to res(i)\n          end-perform\n          goback.\n       end program incrementer.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21871,"user_id":50,"body":"       identification division.\n       program-id. incrementer.\n       data division.\n       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9 occurs 0 to 20 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9 occurs 0 to 20 times \n                                     depending on res-length\n                                     indexed i.\n      \n       procedure division using arr result.\n      \n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              move function rem(xs(i) + i, 10) to res(i)\n          end-perform\n      \n          goback.\n       end program incrementer.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"590fca79b5f8a69285000465":[{"id":21872,"user_id":421,"body":"       identification division.\n       program-id. applesDistribution.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  i           usage index.\n       linkage section.\n       01  apples            pic 9(4).\n       01  capacity          pic 9(4).\n       01  max-left          pic 9(4).\n       01  result            pic 9(4).\n      \n       procedure division using apples capacity max-left result.\n           initialize result\n           perform varying i from 1 by 1 until i > capacity\n               if function rem(apples, i) <= max-left then\n                  add 1 to result\n               end-if\n           end-perform.\n       end program applesDistribution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21873,"user_id":168,"body":"       identification division.\n       program-id. applesDistribution.\n       data division.\n       working-storage section.\n       01  k                 usage index.\n      \n       linkage section.\n       01  apples            pic 9(4).\n       01  capacity          pic 9(4).\n       01  max-left          pic 9(4).\n       01  result            pic 9(4).\n      \n       procedure division using apples capacity max-left result.\n          move 0 to result\n          perform varying k from 1 until k > apples or k > capacity\n              if function mod(apples, k) <= max-left\n                  add 1 to result\n              end-if\n          end-perform.\n       end program applesDistribution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21874,"user_id":76,"body":"       identification division.\n       program-id. applesDistribution.\n       data division.\n      \n       local-storage section.\n       01 i pic 9999.\n      \n       linkage section.\n       01  apples            pic 9(4).\n       01  capacity          pic 9(4).\n       01  max-left          pic 9(4).\n       01  result            pic 9(4).\n      \n       procedure division using apples capacity max-left result.\n         initialize result\n         perform varying i from 1 by 1 until i > capacity\n           if function mod(apples, i) <= max-left then\n             add 1 to result\n           end-if\n         end-perform.\n       end program applesDistribution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21875,"user_id":53,"body":"       identification division.\n       program-id. applesDistribution.\n       data division.\n       local-storage section.\n       01  i                 pic 9(4).\n       linkage section.\n       01  apples            pic 9(4).\n       01  capacity          pic 9(4).\n       01  max-left          pic 9(4).\n       01  result            pic 9(4).\n       procedure division using apples capacity max-left result.\n          move 1 to result\n          perform varying i from 2 \n                  until i > function min (capacity, apples)\n              if function rem(apples, i) <= max-left\n                  add 1 to result end-if\n          end-perform\n          goback.\n       end program applesDistribution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21876,"user_id":50,"body":"       identification division.\n       program-id. applesDistribution.\n       data division.\n       local-storage section.\n       01  i                 pic 9(4).\n      \n       linkage section.\n       01  apples            pic 9(4).\n       01  capacity          pic 9(4).\n       01  max-left          pic 9(4).\n       01  result            pic 9(4).\n      \n       procedure division using apples capacity max-left result.\n      \n          move 0 to result\n          perform varying i from 1 until i > capacity\n              if function rem(apples, i) <= max-left\n                  add 1 to result end-if\n          end-perform\n      \n          goback.\n       end program applesDistribution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5913152be0b295cf99000001":[{"id":21877,"user_id":421,"body":"       identification division.\n       program-id. divisions.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).      \n       procedure division using n divisor result.\n           PERFORM UNTIL n = 0  \n               DIVIDE n BY divisor GIVING n\n               ADD 1 TO result\n           END-PERFORM\n           SUBTRACT 1 FROM result.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21878,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. divisions.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N                 PIC 9(38).\n       01  DIVISOR           PIC 9.\n       01  RESULT            PIC 9(4).\n\n       PROCEDURE DIVISION USING N DIVISOR RESULT.\n           COMPUTE RESULT = FUNCTION LOG10(N) \/ FUNCTION LOG10(DIVISOR).\n       END PROGRAM divisions.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21879,"user_id":null,"body":"       identification division.\n       program-id. divisions.\n       data division.\n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).\n      \n       procedure division using n divisor result.\n           PERFORM UNTIL n = 0\n               COMPUTE n = n \/ divisor\n               ADD 1 TO result\n           END-PERFORM.\n           SUBTRACT 1 FROM result.\n          goback.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21880,"user_id":null,"body":"       identification division.\n       program-id. divisions.\n       data division.\n       WORKING-STORAGE SECTION.\n       01  M                 PIC 9(4).\n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).\n      \n       procedure division using n divisor result.\n           PERFORM UNTIL n = 0\n               COMPUTE n = n \/ divisor\n               ADD 1 TO result\n           END-PERFORM.\n           SUBTRACT 1 FROM result.\n          goback.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21881,"user_id":null,"body":"       identification division.\n       program-id. divisions.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).\n      \n       procedure division using n divisor result.\n         perform varying result from 0 until divisor > n\n           divide divisor into n\n         end-perform.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21882,"user_id":168,"body":"       identification division.\n       program-id. divisions.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).\n      \n       procedure division using n divisor result.\n          compute result = function abs(function log(n) \/ \n                                        function log(divisor) + 0.001)\n          goback.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21883,"user_id":53,"body":"       identification division.\n       program-id. divisions.\n       data division.\n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).\n       procedure division using n divisor result.\n          compute result = function log (n) \/ function log (divisor)\n          goback.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21884,"user_id":50,"body":"       identification division.\n       program-id. divisions.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(38).\n       01  divisor           pic 9.\n       01  result            pic 9(4).\n      \n       procedure division using n divisor result.\n      \n          perform varying result from 0 until n = 0\n            divide divisor into n\n          end-perform\n          subtract 1 from result\n      \n          goback.\n       end program divisions.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"591592b0f05d9a3019000087":[{"id":21885,"user_id":168,"body":"       identification division.\n       program-id. diplomas.\n       data division.\n       linkage section.\n       01 h           pic 9(8).\n       01 w           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using h w n result.\n          compute result = (n * h * w) ** 0.5\n          perform until (result \/ h) * (result \/ w) >= n\n             add 1 to result\n          end-perform.\n       end program diplomas.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21886,"user_id":53,"body":"       identification division.\n       program-id. diplomas.\n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       linkage section.\n       01 h           pic 9(8).\n       01 w           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using h w n result.\n          move 0 to result,\n          if n = 0 then goback end-if,\n          move 1 to i,\n          perform until a * b >= n\n            divide h into i giving a,\n            divide w into i giving b,\n            add 1 to i\n          end-perform,\n          compute result = i - 1\n          goback.\n       end program diplomas.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21887,"user_id":421,"body":"       identification division.\n       program-id. diplomas.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 h           pic 9(8).\n       01 w           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using h w n result.\n           compute result rounded mode toward-greater = \n                          (h * w * n) ** 0.5\n           perform until (result \/ h) * (result \/ w) >= n\n               add 1 to result\n           end-perform.\n       end program diplomas.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21888,"user_id":50,"body":"       identification division.\n       program-id. diplomas.\n       data division.\n       local-storage section.\n       01 c          pic 9(8).\n       01 row        pic 9(8).\n       linkage section.\n       01 h           pic 9(8).\n       01 w           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using h w n result.      \n      * solution based on myjinxin2015's JavaScript solution\n      * see https:\/\/www.codewars.com\/kata\/reviews\/5915a56926f18b3e4b00057c\/groups\/5915a56926f18b3e4b00057e\n          if n = 0\n            move 0 to result\n          else\n            move n to row\n            perform varying c from 1 by 1\n                    until (c + 1) * w >= row * h\n               compute row rounded mode toward-greater = n \/ (c + 1)\n            end-perform\n            \n            compute result = function max(c * w, row * h)\n\n           end-if\n      \n          goback.\n       end program diplomas.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59175441e76dc9f9bc00000f":[{"id":21889,"user_id":421,"body":"       identification division.\n       program-id. atomic-number.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 level            pic 9(3).\n       linkage section.\n       01  electrons       pic 9(6).\n       01  result.\n          05 res-length    pic 9(4).\n          05 xs pic 9(6) occurs 0 to 1000 times\n                         depending on res-length.\n      \n       procedure division using electrons result.\n           initialize res-length\n           move 1 to level\n           perform until electrons = 0 \n               add 1 to res-length\n               compute xs(res-length) = function min(electrons, \n                                        2 * level * level)\n               subtract xs(res-length) from electrons\n               add 1 to level\n           end-perform.\n       end program atomic-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21890,"user_id":168,"body":"       identification division.\n       program-id. atomic-number.\n      \n       data division.\n       working-storage section.\n       01 x                pic 9(8).\n      \n       linkage section.\n       01  electrons       pic 9(6).\n       01  result.\n          05 res-length    pic 9(4).\n          05 xs pic 9(6) occurs 0 to 1000 times\n                         depending on res-length.\n      \n       procedure division using electrons result.\n          perform with test after varying res-length from 1 \n                                  until electrons = 0\n              compute x = function min(electrons, 2 * res-length ** 2)\n              move x to xs(res-length)\n              subtract x from electrons\n          end-perform.\n       end program atomic-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21891,"user_id":53,"body":"       identification division.\n       program-id. atomic-number.\n       data division.\n       local-storage section.\n       01 n                pic 9(6).\n       01 m                pic 9(6).\n       01 i                pic 9(6) value 1.\n       linkage section.\n       01  electrons       pic 9(6).\n       01  result.\n          05 res-length    pic 9(4).\n          05 xs pic 9(6)   occurs 0 to 1000 times\n                           depending on res-length.\n       procedure division using electrons result.\n          initialize result\n          move electrons to n\n          perform until n = 0\n            compute m = function min(n, 2 * i ** 2)\n            add 1 to res-length\n            move m to xs(res-length)\n            subtract m from n\n            add 1 to i\n          end-perform\n          goback.\n       end program atomic-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21892,"user_id":50,"body":"       identification division.\n       program-id. atomic-number.\n      \n       data division.\n       local-storage section.\n       01 n                pic 9(20).\n      \n       linkage section.\n       01  electrons       pic 9(6).\n       01  result.\n          05 res-length    pic 9(4).\n          05 xs pic 9(6) occurs 0 to 1000 times\n                         depending on res-length.\n      \n       procedure division using electrons result.\n          \n          move 0 to res-length\n          perform forever\n              add 1 to res-length\n              compute n = 2 * res-length ** 2\n              if electrons <= n\n                  move electrons to xs(res-length)\n                  goback\n              end-if\n              move n to xs(res-length)\n              subtract n from electrons\n          end-perform\n      \n          goback.\n       end program atomic-number.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5917fbed9f4056205a00001e":[{"id":21893,"user_id":50,"body":"       identification division.\n       program-id. bananas.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic a occurs 0 to 21 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x(21) occurs 0 to 5000 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          initialize result\n          call 'recursiveBananas' using s 1 1 result\n      \n          goback.\n       end program bananas.\n      \n      \n       identification division.\n       program-id. recursiveBananas recursive.\n       data division.\n       local-storage section.\n       01 banana pic a(6) value 'banana'.\n       01 c pic a.\n       01 tmp pic x(21).\n       01  recRes.\n           05 recLen      pic 9(4).\n           05 rec         pic x(21) occurs 0 to 5000 times \n                          depending on recLen.\n       01  r usage index.\n       01  i usage index.\n       01  j usage index.\n       01  h usage index.\n       01  k usage index.\n       01  dashes pic x(15) value '---------------'.\n      \n       linkage section.\n       01  s.\n           05 l            pic 9(2).\n           05 chr          pic a occurs 0 to 21 times \n                           depending on l.\n       01  indBanana       usage index.\n       01  indS            usage index.\n       01  result.\n           05 len          pic 9(4).\n           05 res          pic x(21) occurs 0 to 5000 times \n                           depending on len.\n      \n       procedure division using s indBanana indS result.\n      \n          initialize result\n      \n          move banana(indBanana:1) to c\n      \n      * base case: final 'a'\n          if indBanana = 6\n              perform varying i from indS until i > l\n                  if chr(i) = c\n                    string dashes(1:r) c dashes(1:l - i) into tmp\n                    add 1 to len\n                    move tmp to res(len)\n                 end-if\n                 add 1 to r\n              end-perform\n              goback\n           end-if\n          \n          add 1 to indBanana\n          perform varying i from indS until i >= l - 6 + indBanana\n            if chr(i) = c\n      * character found, recursive call searching for next character in 'banana'\n              compute k = i + 1\n              call 'recursiveBananas'using\n              by content s indBanana k\n              by reference recRes\n      * if recursion was successful\n              if recRes > 0\n                set j to 1\n                initialize tmp\n                string dashes(1:r) c into tmp pointer j\n                move j to h\n              end-if\n              perform varying k from 1 until k > recLen\n                string rec(k) into tmp pointer j\n                add 1 to len\n                move tmp to res(len)\n                move h to j\n              end-perform\n            end-if\n            add 1 to r\n          end-perform\n      \n          goback.\n\n       end program recursiveBananas.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21894,"user_id":53,"body":"       identification division.\n       program-id. bananas.\n       data division.\n       local-storage section.\n       01  i               pic 9 value 0.\n       01  j               pic 9(2) value 0.\n       01  a               pic x(21).\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 21 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x(21) occurs 0 to 5000 times \n                           depending on res-length.\n       procedure division using s result.\n          initialize result\n          call 'monkey' using by content i j a by reference s result\n          goback.\n       end program bananas.\n\n       identification division.\n       program-id. monkey recursive.\n       data division.\n       working-storage section.\n       01  m               pic 9 value 6.\n       01  w               pic x(6) value 'banana'.\n       01  x               pic x(21) value '---------------------'.\n       local-storage section.\n       01  i               pic 9.\n       01  j               pic 9(2).\n       01  a               pic x(21).\n       01  n               pic 9(2).\n       01  r               pic x(21).\n       01  rec-i           pic 9.\n       01  rec-j           pic 9(2).\n       01  rec-a           pic x(21).\n       01  res-a           pic x(21).\n       01  rec-result.\n           05 rec-res-length         pic 9(4).\n           05 rec-res      pic x(21) occurs 0 to 5000 times \n                           depending on res-length\n                           indexed by idx.\n       linkage section.\n       01  lnk-i           pic 9.\n       01  lnk-j           pic 9(2).\n       01  lnk-a           pic x(21).\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 21 times \n                           depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x(21) occurs 0 to 5000 times \n                           depending on res-length.\n       procedure division using lnk-i lnk-j lnk-a s result.\n      \n          initialize result\n          move lnk-i to i\n          move lnk-j to j\n          move lnk-a to a\n          move s-length to n\n      \n          if i = m then\n            initialize res-a\n            string function trim(a) x(1:n - i - 1) into res-a\n            add 1 to res-length\n            move res-a to res(res-length)\n            goback\n          end-if\n      \n          perform until j >= n\n            if s-char(j + 1) = w(i + 1:1) then\n              add 1 to i giving rec-i\n              add 1 to j giving rec-j\n              initialize rec-a\n              string function trim(a) function trim(r) s-char(j + 1)\n                into rec-a\n              call 'monkey' using \n                by content rec-i rec-j rec-a by reference s rec-result\n              perform varying idx from 1 until idx > rec-res-length\n                add 1 to res-length\n                move function trim(rec-res(idx)(1:n)) to res(res-length)\n                perform until \n                    function length(function trim(res(res-length))) >= n\n                  string function trim(res(res-length)) '-' \n                    into res(res-length)\n                end-perform\n              end-perform\n            end-if\n            add 1 to j\n            string function trim(r) x(1:1) into r\n          end-perform\n      \n          goback.\n       end program monkey.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5921c0bc6b8f072e840000c0":[{"id":21895,"user_id":53,"body":"       identification division.\n       program-id. SequenceQualifier.\n       data division.\n       local-storage section.\n       01  i            pic 9(5) value 0.\n       01  d            pic 9(5) value 0.\n       01  q            pic 9(5) value 0.\n       linkage section.\n       01  arr.\n           05 arr-len   pic 9(5).\n           05 xs        pic s9(10) \n                        occurs 2 to 40000 times \n                        depending on arr-len\n                        indexed by j.\n       01 result        pic 9.\n       procedure division using arr result.\n          initialize result\n          perform varying j from 2 until j > arr-len\n            if xs(j) > xs(j - 1) then add 1 to i end-if\n            if xs(j) < xs(j - 1) then add 1 to d end-if\n            if xs(j) = xs(j - 1) then add 1 to q end-if\n          end-perform\n          evaluate i also d also q\n            when > 0 also > 0 also any  set result to 0\n            when > 0 also any also = 0  set result to 1\n            when > 0 also any also any  set result to 2\n            when any also > 0 also = 0  set result to 3\n            when any also > 0 also any  set result to 4\n            when any also any also any  set result to 5\n          end-evaluate\n          goback.\n       end program SequenceQualifier.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21896,"user_id":50,"body":"       identification division.\n       program-id. SequenceQualifier.\n      \n       data division.\n       local-storage section.\n       01 isAsc      pic 9.\n       01 isDesc     pic 9.\n       01 nodupes    pic 9.\n       01 onlyDupes  pic 9.\n       01 prev       pic s9(10).\n       01 n          pic s9(10).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(5).\n           05 xs      pic s9(10) occurs 2 to 40000 times \n                                depending on arr-length\n                                indexed by i.\n       01 result      pic 9.\n      \n       procedure division using arr result.\n          \n          move 1 to isAsc\n          move 1 to isDesc\n          move 1 to noDupes\n          move 1 to onlyDupes\n          move xs(1) to prev\n      \n          perform varying i from 2 until i > arr-length\n              move xs(i) to n\n              if prev <> n\n                  move 0 to onlyDupes\n                  evaluate prev\n                      when > n   move 0 to isAsc\n                      when < n   move 0 to isDesc\n                  end-evaluate\n              else\n                  move 0 to noDupes\n              end-if\n              if isAsc = 0\n                  and isDesc = 0\n                      and noDupes = 0\n                          and onlyDupes = 0 then goback end-if\n              move n to prev\n          end-perform\n      \n          evaluate true\n              when onlyDupes = 1\n                  move 5 to result\n              when isAsc = 1\n                  if noDupes = 1\n                     move 1 to result\n                  else\n                     move 2 to result\n                  end-if\n              when isDesc = 1\n                  if noDupes = 1\n                      move 3 to result\n                  else\n                      move 4 to result\n                  end-if\n          end-evaluate\n      \n          goback.\n       end program SequenceQualifier.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5923fbc72eafa9bcff00011a":[{"id":21897,"user_id":53,"body":"       identification division.\n       program-id. MultiplyNumbersAsStrings.\n       data division.\n       local-storage section.\n       01  s               pic x.\n       01  a               pic x(250).\n       01  b               pic x(250).\n       01  d               pic 9(3) value 0.\n       01  k               pic s9(3).\n       01  t               pic x(250).\n       01  w               pic z9.\n       01  m               pic 9(2).\n       01  m1              pic 9.\n       01  m2              pic 9.\n       01  m3              pic 9(2).\n       01  p               usage index.\n       01  i               usage index.\n       01  j               usage index.\n       01  x               pic x(500).\n       01  r-tbl.\n           03  r-len       pic 9(3). \n           03  r           pic 9(2) occurs 501 times\n                           depending on r-len.\n       linkage section.\n       01  n               pic x(250).\n       01  o               pic x(250).\n       01  result          pic x(500).\n       procedure division using n o result.\n      \n          initialize result\n      \n          if n(1:1) = '-' or o(1:1) = '-' then\n            if n(1:1) <> o(1:1) then move '-' to s end-if\n            if n(1:1) = '-' then move n(2:) to n end-if\n            if o(1:1) = '-' then move o(2:) to o end-if\n          end-if\n      \n          move function reverse(function trim(n)) to a\n          move function reverse(function trim(o)) to b\n          compute r-len = length of function trim(a) + \n            length of function trim(b) + 1\n          perform varying i from 1 until i > r-len\n            move 0 to r(i)\n          end-perform\n      \n          initialize k t\n          set p to 1\n          inspect a tallying k for all '.'\n          if k > 0 then\n            unstring a delimited by '.' into t with pointer p\n            compute d = d + p - 2\n            string a(1:p - 2) a(p:) into a\n          end-if\n      \n          initialize k t\n          set p to 1\n          inspect b tallying k for all '.'\n          if k > 0 then\n            unstring b delimited by '.' into t with pointer p\n            compute d = d + p - 2\n            string b(1:p - 2) b(p:) into b\n          end-if\n          \n          perform varying i from 1 until i > length of function trim(a)\n                    after j from 1 until j > length of function trim(b)\n            move a(i:1) to m1\n            move b(j:1) to m2\n            move r(i + j - 1) to m3\n            multiply m1 by m2 giving m\n            add m3 to m\n            if m < 10 then\n              move m to r(i + j - 1)\n            else\n              move function rem(m, 10) to r(i + j - 1)\n              compute m = function integer(m \/ 10)\n              move r(i + j) to m3\n              add m3 to m\n              move m to r(i + j)\n            end-if\n          end-perform\n      \n          set p to 1\n          perform varying i from 1 until i > r-len\n            if i - 1 = d and d > 0 then \n              string '.' into x with pointer p\n            end-if\n            move r(i) to w\n            string function trim(w) into x with pointer p\n          end-perform\n      \n          move function reverse(function trim(x)) to x\n          perform until length of function trim(x) = 0 or x(1:1) <> '0'\n            move x(2:) to x\n          end-perform\n          perform until d = 0 or length of function trim(x) = 0 or \n              x(length of function trim(x):1) <> '0'\n            move x(1: length of function trim(x) - 1) to x\n          end-perform\n      \n          if length of function trim(x) = 1 and x(1:1) = '.'\n            move '0' to result\n            goback\n          end-if\n      \n          if x(1:1) = '.' then\n            set p to 1\n            string '0' into result with pointer p\n            string function trim(x) into result with pointer p\n            move result to x\n          end-if\n      \n          if x(length of function trim(x):1) = '.' then\n            move x(1: length of function trim(x) - 1) to x\n          end-if\n      \n          set p to 1\n          string function trim(s) into result with pointer p\n          string function trim(x) into result with pointer p\n      \n          goback.\n       end program MultiplyNumbersAsStrings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21898,"user_id":50,"body":"       identification division.\n       program-id. MultiplyNumbersAsStrings.\n      \n       data division.\n       local-storage section.\n       01  sa pic x.\n              88 aIsNegative value '-'.\n       01  sb pic x.\n              88 bIsNegative value '-'.\n       01  n               pic 9(3).\n       01  aIntPart        pic x(250).\n       01  aDecPart        pic x(250).\n       01  bIntPart        pic x(250).\n       01  bDecPart        pic x(250).\n       01  delim           pic x.\n       01  i               index.\n       01  offset          index.\n           88  noOffset value 0.\n       01  l               pic 9(3).\n       01  r               pic x(500). \n      \n       linkage section.\n       01  a               pic x(250).\n       01  b               pic x(250).\n       01  result          pic x(500).\n      \n       procedure division using a b result.\n      \n          initialize result\n          \n          if a(1:1) = '-' move a(1:1) to sa end-if\n          if aIsNegative move a(2:) to a end-if\n          if b(1:1) = '-' move b(1:1) to sb end-if\n          if bIsNegative move b(2:) to b end-if\n      \n          inspect a tallying n for leading zeros\n          if n is positive\n             if a(n + 1:1) = '.' move a(n:) to a\n             else move a(n + 1:) to a\n          end-if end-if\n          if a = space move '0' to result goback end-if\n\n          initialize n\n          inspect b tallying n for leading zeros\n          if n is positive\n             if b(n + 1:1) = '.' move b(n:) to b\n             else move b(n + 1:) to b\n          end-if end-if\n          if b = space move '0' to result goback end-if\n          \n          set i to 1\n          unstring a\n                delimited by '.' or space\n                into aIntPart\n                delimiter in delim\n                with pointer i\n          end-unstring\n      \n          if delim = '.'\n            unstring a\n                  delimited by space\n                  into aDecPart\n                  with pointer i\n            end-unstring\n            initialize n\n            inspect function trim(aDecPart)\n            tallying n for trailing zeros\n            compute offset = length function trim(aDecPart) - n\n            move aDecPart(1:offset) to aDecPart\n            string function trim(aIntPart trailing) aDecPart into a\n          else\n            move aIntPart to a\n          end-if\n            \n          set i to 1\n          unstring b\n                delimited by '.' or space\n                into bIntPart\n                delimiter in delim\n                with pointer i\n          end-unstring\n      \n          if delim = '.'\n            unstring b\n                  delimited by space\n                  into bDecPart\n                  with pointer i\n            end-unstring\n            initialize n\n            inspect function trim(bDecPart)\n            tallying n for trailing zeros\n            compute l = length function trim(bDecPart) - n\n            add l to offset\n            move bDecPart(1:l) to bDecPart\n            string function trim(bIntPart trailing) bDecPart\n            into b\n          else\n            move bIntPart to b\n          end-if\n          \n          if a = '0' or b = '0' move '0' to result goback end-if\n      \n          call 'MultplyIntegerStrings'\n               using by content a b\n                     by reference r\n      \n          set i to 1\n          if sa <> sb string '-' into result with pointer i end-if\n          if noOffset string r into result with pointer i goback end-if\n      \n          compute l = length function trim(r)\n          if l > offset\n            string r(1:l - offset) '.' r(l - offset + 1:)\n            into result with pointer i\n          else\n            string '0.' into result with pointer i\n            perform function abs(offset - l) times\n              string '0' into result with pointer i\n            end-perform\n            string r into result with pointer i\n          end-if\n      \n          initialize n\n          inspect function trim(result) tallying n for trailing zeros\n          if n is positive\n            move length function trim(result) to l\n            if result(l - n:1) = '.'\n                move result(1:l - n - 1) to result\n            else\n                move result(1:l - n) to result\n          end-if end-if\n          \n          goback.\n       end program MultiplyNumbersAsStrings.\n      \n       identification division.\n       program-id. MultplyIntegerStrings.\n       data division.\n       local-storage section.\n       01  la              pic 9(3).\n       01  lb              pic 9(3).\n       01  xx.\n           03  x pic 9 occurs 250 times indexed i.\n       01  yy.\n           03  y pic 9 occurs 250 times indexed j.\n       01  rr.\n           03  r pic 9 occurs 500 times indexed k.\n       01  v               pic 9(2).\n       01  q               pic 9(38).\n       01  w               pic 9(38).\n       01  d               pic z(38)9.\n      \n       linkage section.\n       01  a               pic x(250).\n       01  b               pic x(250).\n       01  result          pic x(500).\n      \n       procedure division using a b result.\n      \n          initialize result\n      \n          if a = '0' or b = '0'\n             move '0' to result\n             goback\n          end-if\n      \n          move length function trim(a) to la\n          move length function trim(b) to lb\n      \n          if function max(la,lb) < 39\n            move a to q\n            move b to w\n            multiply w by q \n            not on size error\n                move q to d\n                move function trim(d) to result\n                goback\n            end-multiply\n          end-if\n      \n          move function reverse(function trim(a)) to xx\n          move function reverse(function trim(b)) to yy\n      \n          perform varying i from 1 until i > la\n          perform varying j from 1 until j > lb\n            compute k = i + j - 1\n            compute v = x(i) * y(j) + v + r(k)\n            divide v by 10 giving v remainder r(k)\n          end-perform\n            if v is positive\n               move v to r(k + 1)\n               move 0 to v\n            end-if\n          end-perform\n          add 1 to k\n          perform until r(k) is positive subtract 1 from k end-perform\n          move function reverse(rr(1:k)) to result\n      \n          goback.\n       end program MultplyIntegerStrings.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59245b3c794d54b06600002a":[{"id":21899,"user_id":168,"body":"       identification division.\n       program-id. trotter.\n      \n       data division.\n       local-storage section.\n       01 digits.\n          05 ds pic 9 occurs 10 times.\n       01 i           pic 99.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n          if n <= 0\n            compute result = -1\n          else\n            perform with test after varying result from n by n \n                    until digits = '1111111111'\n                compute i = 1\n                inspect result tallying i for leading '0'\n                perform varying i from i by 1 until i > length of result\n                    compute ds(function numval(result(i:1)) + 1) = 1\n                end-perform\n            end-perform\n          end-if.\n       end program trotter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21900,"user_id":53,"body":"       identification division.\n       program-id. trotter.\n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 m           pic 9(8).\n       01 d           pic 9(8).\n       01 bin1        usage binary-short.\n       01 bin2        usage binary-short.\n       01 mask        pic 9(8) value 1023.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n          perform until mask = 0 or result = 1000\n            add 1 to result\n            compute a = n * result\n            perform until a = 0\n              compute d = function rem(a, 10)\n              compute a = a \/ 10\n              compute m = 2 ** d\n              move mask to bin1\n              move m to bin2\n              call 'CBL_AND' using bin1 bin2 by value 4\n              if bin2 > 0 then\n                move m to bin2\n                call 'CBL_XOR' using bin1 bin2 by value 4\n                move bin2 to mask\n              end-if\n            end-perform\n          end-perform\n          if mask = 0 then\n            compute result = n * result\n          else \n            move -1 to result\n          end-if\n          goback.\n       end program trotter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21901,"user_id":50,"body":"       identification division.\n       program-id. trotter.\n      \n       data division.\n       local-storage section.\n       01 bin1       usage binary-short.\n       01 bin2       usage binary-short.\n       01 c           pic 9(8).\n       01 m           pic 9(8).\n       01 r           pic 9(8).\n       01 x           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n\n          if n = 0\n            move -1 to result\n            goback\n          end-if\n      \n          move n to m\n          \n          perform until m = 0\n              divide 10 into m giving m remainder r\n              compute r = 2 ** r\n              move c to bin1\n              move r to bin2\n              call 'CBL_AND' using bin1 bin2 by value 2\n              if bin2 = 0\n                add r to c\n              end-if\n          end-perform\n          \n          move n to result\n          perform until c = 1023\n              add n to result\n              move result to x\n              perform until x = 0\n                  divide 10 into x giving x remainder r\n                  compute r = 2 ** r\n                  move c to bin1\n                  move r to bin2\n                  call 'CBL_AND' using bin1 bin2 by value 2\n                  if bin2 = 0\n                      add r to c\n                  end-if\n              end-perform\n          end-perform\n      \n          goback.\n       end program trotter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59280c056d6c5a74ca000149":[{"id":21902,"user_id":421,"body":"       identification division.\n       program-id. solve-eq.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  d        pic s9(20).\n       01  x        pic s9(20).\n       01  y        pic s9(20).\n       01  z        pic s9(20).\n       linkage section.\n       01  system.\n           05 eq1.\n              07 a1 pic s9(10).\n              07 b1 pic s9(10).\n              07 c1 pic s9(10).\n              07 d1 pic s9(10).\n           05 eq2.\n              07 a2 pic s9(10).\n              07 b2 pic s9(10).\n              07 c2 pic s9(10).\n              07 d2 pic s9(10).\n           05 eq3.\n              07 a3 pic s9(10).\n              07 b3 pic s9(10).\n              07 c3 pic s9(10).\n              07 d3 pic s9(10).\n       01  result.\n           05 a-res     pic s9(10).\n           05 b-res     pic s9(10).\n           05 c-res     pic s9(10).\n      \n       procedure division using system result.\n           compute d = a1 * b2 * c3 + a2 * b3 * c1 + a3 * b1 * c2 - \n                       c1 * b2 * a3 - c2 * b3 * a1 - c3 * b1 * a2\n           compute x = d1 * b2 * c3 + d2 * b3 * c1 + d3 * b1 * c2 - \n                       c1 * b2 * d3 - c2 * b3 * d1 - c3 * b1 * d2\n           compute y = a1 * d2 * c3 + a2 * d3 * c1 + a3 * d1 * c2 - \n                       c1 * d2 * a3 - c2 * d3 * a1 - c3 * d1 * a2\n           compute z = a1 * b2 * d3 + a2 * b3 * d1 + a3 * b1 * d2 - \n                       d1 * b2 * a3 - d2 * b3 * a1 - d3 * b1 * a2\n           compute a-res = x \/ d\n           compute b-res = y \/ d\n           compute c-res = z \/ d.\n       end program solve-eq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21903,"user_id":50,"body":"       identification division.\n       program-id. solve-eq.\n       data division.\n      \n       linkage section.\n       01  system.\n           05 eq1.\n              07 a1 pic s9(10).\n              07 b1 pic s9(10).\n              07 c1 pic s9(10).\n              07 d1 pic s9(10).\n           05 eq2.\n              07 a2 pic s9(10).\n              07 b2 pic s9(10).\n              07 c2 pic s9(10).\n              07 d2 pic s9(10).\n           05 eq3.\n              07 a3 pic s9(10).\n              07 b3 pic s9(10).\n              07 c3 pic s9(10).\n              07 d3 pic s9(10).\n       01  result.\n           05 a-res     pic s9(10).\n           05 b-res     pic s9(10).\n           05 c-res     pic s9(10).\n      \n       procedure division using system result.\n      * Implementation of Albek's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/592dbd219d81712a2500004a\/groups\/593d06f33d84b458150000cf\n           \n           compute a-res = (b1 * c2 * d3 - b1 * c3 * d2 - b2 * c1 * d3\n                           + b2 * c3 * d1 + b3 * c1 * d2 - b3 * c2 * d1)\n                           \/ (a1 * b2 * c3 - a1 * b3 * c2 - a2 * b1 * c3 \n                          + a2 * b3 * c1 + a3 * b1 * c2 - a3 * b2 * c1)\n      \n           compute b-res = (-a1 * c2 * d3 + a1 * c3 * d2 + a2 * c1 * d3\n                           - a2 * c3 * d1 - a3 * c1 * d2 + a3 * c2 * d1)\n                           \/ (a1 * b2 * c3 - a1 * b3 * c2 - a2 * b1 * c3 \n                          + a2 * b3 * c1 + a3 * b1 * c2 - a3 * b2 * c1)\n      \n           compute c-res = (a1 * b2 * d3 - a1 * b3 * d2 - a2 * b1 * d3 \n                           + a2 * b3 * d1 + a3 * b1 * d2 - a3 * b2 * d1) \n                           \/ (a1 * b2 * c3 - a1 * b3 * c2 - a2 * b1 * c3 \n                          + a2 * b3 * c1 + a3 * b1 * c2 - a3 * b2 * c1)\n      \n           goback.\n       end program solve-eq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21904,"user_id":168,"body":"       >> source format free\n       identification division.\n       program-id. solve-eq.\n       data division.\n       working-storage section.\n       01  d    pic s9(10).\n      \n       linkage section.\n       01  system.\n           05 eq1.\n              07 a1 pic s9(10).\n              07 b1 pic s9(10).\n              07 c1 pic s9(10).\n              07 d1 pic s9(10).\n           05 eq2.\n              07 a2 pic s9(10).\n              07 b2 pic s9(10).\n              07 c2 pic s9(10).\n              07 d2 pic s9(10).\n           05 eq3.\n              07 a3 pic s9(10).\n              07 b3 pic s9(10).\n              07 c3 pic s9(10).\n              07 d3 pic s9(10).\n       01  result.\n           05 a-res     pic s9(10).\n           05 b-res     pic s9(10).\n           05 c-res     pic s9(10).\n      \n       procedure division using system result.\n           compute d = a1 * (b2 * c3 - b3 * c2) - b1 * (a2 * c3 - a3 * c2) + c1 * (a2 * b3 - a3 * b2)\n           compute a-res = (d1 * (b2 * c3 - b3 * c2) - b1 * (d2 * c3 - d3 * c2) + c1 * (d2 * b3 - d3 * b2)) \/ d\n           compute b-res = (a1 * (d2 * c3 - d3 * c2) - d1 * (a2 * c3 - a3 * c2) + c1 * (a2 * d3 - a3 * d2)) \/ d\n           compute c-res = (a1 * (b2 * d3 - b3 * d2) - b1 * (a2 * d3 - a3 * d2) + d1 * (a2 * b3 - a3 * b2)) \/ d\n           goback.\n       end program solve-eq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21905,"user_id":53,"body":"       identification division.\n       program-id. solve-eq.\n       data division.\n       linkage section.\n       01  system.\n           05 eq1.\n              07 a1 pic s9(10).\n              07 b1 pic s9(10).\n              07 c1 pic s9(10).\n              07 d1 pic s9(10).\n           05 eq2.\n              07 a2 pic s9(10).\n              07 b2 pic s9(10).\n              07 c2 pic s9(10).\n              07 d2 pic s9(10).\n           05 eq3.\n              07 a3 pic s9(10).\n              07 b3 pic s9(10).\n              07 c3 pic s9(10).\n              07 d3 pic s9(10).\n       01  result.\n           05 x pic s9(10).\n           05 y pic s9(10).\n           05 z pic s9(10).\n       procedure division using system result.\n         compute x = ((b1 * c2 * d3 - b1 * c3 * d2 - b2 * c1 * d3\n          + b2 * c3 * d1 + b3 * c1 * d2 - b3 * c2 * d1) \/ (a1 * b2 * c3\n          - a1 * b3 * c2 - a2 * b1 * c3 + a2 * b3 * c1 + a3 * b1 * c2\n          - a3 * b2 * c1))\n         compute y = ((-a1 * c2 * d3 + a1 * c3 * d2 + a2 * c1 * d3\n          - a2 * c3 * d1 - a3 * c1 * d2 + a3 * c2 * d1) \/ (a1 * b2 * c3\n          - a1 * b3 * c2 - a2 * b1 * c3 + a2 * b3 * c1 + a3 * b1 *c2 \n          - a3 * b2 * c1))\n         compute z = ((a1 * b2 * d3 - a1 * b3 * d2 - a2 * b1 * d3 \n          + a2 * b3 * d1 + a3 * b1 * d2 - a3 * b2 *d1) \/ (a1 * b2 *c3\n          - a1 * b3 * c2 - a2 * b1 * c3 + a2 * b3 *c1 + a3 * b1 * c2\n          - a3 * b2 * c1))\n          goback.\n       end program solve-eq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5931614bb2f657c18c0001c3":[{"id":21906,"user_id":53,"body":"       identification division.\n       program-id. CutCancerCells.\n       data division.\n       local-storage section.\n       01 i      pic 9(2).\n       01 q      pic x.\n          88  isLowQ value 'a' thru 'z'.\n       01 p      pic x.\n          88  isLowP value 'a' thru 'z'.\n       linkage section.\n       01 s      pic a(40).\n       01 r      pic a(40).\n       procedure division using s r.\n          initialize r\n          perform varying i from 1 until i > length of function trim(s)\n            move s(i:1) to p\n            move s(i + 1:1) to q\n            evaluate true\n              when isLowQ and p = 'C'\n                add 1 to i\n              when p <> 'c' and p <> 'C' and not (islowP and q = 'C')\n                move function trim(\n                  function concatenate(function trim(r), p)) to r\n            end-evaluate\n          end-perform\n          goback.\n       end program CutCancerCells.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21907,"user_id":50,"body":"       identification division.\n       program-id. CutCancerCells.\n       data division.\n       working-storage section.\n       01  nxt   pic a.\n      \n       linkage section.\n       01  s.\n           03  c pic a occurs 40 indexed i.\n       01  result.\n           03  r pic a occurs 40 indexed k.\n      \n       procedure division using s result.\n      \n          initialize result k\n          perform varying i from 1 until i = 41 or c(i) = space\n            if i = 40 or c(i + 1) = space\n               move 'A' to nxt\n            else\n               move c(i + 1) to nxt\n            end-if\n            if c(i) = 'C' and nxt is alphabetic-lower\n               set i up by 1\n            else\n               if c(i) <> 'c' and 'C'\n               and not (c(i) is alphabetic-lower and nxt = 'C')\n                  set k up by 1\n                  move c(i) to r(k)\n               end-if\n            end-if\n          end-perform.\n      \n       end program CutCancerCells.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5933a1f8552bc2750a0000ed":[{"id":21908,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n       SUBTRACT 1 FROM n.\n       MULTIPLY n BY 2 GIVING result.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21909,"user_id":527,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = (N - 1) * 2.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21910,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           SUBTRACT 1 FROM N GIVING N.\n           MULTIPLY N BY 2 GIVING N.\n           MOVE N TO RESULT.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21911,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N IS GREATER THAN 0 THEN\n              COMPUTE RESULT = (N - 1) * 2\n           END-IF.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21912,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          COMPUTE RESULT = N * 2 - 2 .\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21913,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 r           PIC 9(8).\n       PROCEDURE DIVISION USING N r.\n            compute r = n * 2 - 2\n            goback.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21914,"user_id":713,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n        COMPUTE RESULT = N * 2 - 2.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21915,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 2 * (n - 1).\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21916,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. NTH-EVEN.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          COMPUTE RESULT = 2 * N - 2.\n       END PROGRAM NTH-EVEN. \n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21917,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       N-TH-EVEN SECTION.\n       compute RESULT = 2 * (N - 1)\n       END PROGRAM KATA. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21918,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       N-TH-EVEN SECTION.\n           COMPUTE RESULT = N * 2 - 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21919,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       N-TH-EVEN SECTION.\n         MULTIPLY N BY 2 GIVING RESULT\n         SUBTRACT RESULT FROM 2 GIVING RESULT\n       END PROGRAM KATA. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21920,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       N-TH-EVEN SECTION.\n       COMPUTE RESULT = (N - 1) * 2\n       END PROGRAM KATA. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21921,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       N-TH-EVEN SECTION.\n       compute result = 2 * (n - 1)\n       END PROGRAM KATA. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21922,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       N-TH-EVEN SECTION\n      \n          Compute Result = 2 * ( N - 1 )\n\n       END PROGRAM KATA. ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59342039eb450e39970000a6":[{"id":21923,"user_id":53,"body":"       identification division.\n       program-id. OddCount.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          divide 2 into n giving result\n      \n          goback.\n       end program OddCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21924,"user_id":527,"body":"       identification division.\n       program-id. OddCount.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          divide n by 2 giving result.\n       end program OddCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21925,"user_id":421,"body":"       identification division.\n       program-id. OddCount.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n           compute result = n \/ 2.\n       end program OddCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21926,"user_id":50,"body":"       identification division.\n       program-id. OddCount.\n      \n       data division.\n       local-storage section.\n       01 i          usage index.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          compute result = n \/ 2.\n      \n       end program OddCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21927,"user_id":null,"body":"       identification division.\n       program-id. OddCount.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          compute result = n \/ 2.      \n       end program OddCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21928,"user_id":null,"body":"       identification division.\n       program-id. OddCount.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          compute result = n \/ 2\n          goback.\n       end program OddCount.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"594adadee075005308000122":[{"id":21929,"user_id":50,"body":"       identification division.\n       program-id. EvenAndOdd.\n      \n       data division.\n       local-storage section.\n       01  z           pic z(22)9.\n       01  s           pic x(21).\n       01  redefines s.\n           03  t pic 9 occurs 17 times indexed i.\n               88 odd value 1 3 5 7 9.\n      \n       linkage section.\n       01  n           pic 9(20).\n       01  result.\n           05  e       pic 9(20).\n           05  o       pic 9(20).\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          move n to z\n          move function trim(z) to s\n          perform varying i from 1 until s(i:1) = space\n            if odd(i) compute o = 10 * o + t(i)\n            else      compute e = 10 * e + t(i) end-if\n          end-perform\n      \n          goback.\n       end program EvenAndOdd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21930,"user_id":null,"body":"       identification division.\n       program-id. EvenAndOdd.\n      \n       data division.\n       working-storage section.\n       77  i           pic 9(2).\n       77  ineven      pic 9(2).\n       77  inodd       pic 9(2).\n\n       01  kk          pic 9(2).\n       01  resto       pic 9.\n   \n       linkage section.\n       01  n           pic 9(20).\n       01  entrada redefines n.\n           05 x pic 9 occurs 20.\n\n       01  result.\n           05  nEven pic 9(20).\n           05  sal-pares redefines nEven. \n               10  xnEven pic X occurs 20.\n\n           05  nOdd  pic 9(20).\n           05  sal-impares redefines nOdd. \n               10  xnOdd pic X occurs 20.\n      \n       procedure division using n result.\n      \n          initialize result\n          move 21 to i\n          move 21 to ineven\n          move 21 to inodd\n      \n          perform 20 times\n              subtract 1 from i\n              divide x(i) by 2 giving kk remainder resto\n              if  resto = zeroes\n                  subtract 1 from ineven\n                  move x(i)  to  xnEven(ineven)\n              else\n                  subtract 1 from inodd\n                  move x(i)  to  xnOdd(inodd)\n              end-if\n          end-perform\n\n          goback.\n       end program EvenAndOdd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21931,"user_id":null,"body":"       identification division.\n       program-id. EvenAndOdd.\n\n       data division.\n       WORKING-STORAGE SECTION.\n       01  WS-TEMP    PIC 9(02).\n       01  WS-TEMP2   PIC 9(01).\n           88 ODD     VALUES 1 3 5 7 9.\n           88 EVEN    VALUES 0 2 4 6 8.\n       01  WS-TAB.\n           05 NUMS OCCURS 20 TIMES.\n              10 NUM  PIC 9(01).\n\n       linkage section.\n       01  n           pic 9(20).\n       01  result.\n           05  nEven pic 9(20).\n           05  nOdd  pic 9(20).\n\n       procedure division using n result.\n\n           initialize result WS-TEMP WS-TEMP2 WS-TAB.\n           MOVE n TO WS-TAB.\n           PERFORM 20 TIMES\n               ADD 1 TO WS-TEMP\n               MOVE NUMS(WS-TEMP) TO WS-TEMP2\n               EVALUATE TRUE\n               WHEN ODD\n                   COMPUTE nOdd = nOdd * 10 + WS-TEMP2\n                   END-COMPUTE\n               WHEN EVEN\n                   COMPUTE nEven = nEven * 10 + WS-TEMP2\n                   END-COMPUTE\n               END-EVALUATE\n           END-PERFORM.\n           goback.\n       end program EvenAndOdd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21932,"user_id":null,"body":"       identification division.\n       program-id. EvenAndOdd.\n\n       data division.\n       WORKING-STORAGE SECTION.\n       01  WS-TEMP    PIC 9(02).\n       01  WS-TEMP2   PIC 9(01).\n       01  WS-TAB.\n           05 NUMS OCCURS 20 TIMES.\n              10 NUM  PIC 9(01).\n\n       linkage section.\n       01  n           pic 9(20).\n       01  result.\n           05  nEven pic 9(20).\n           05  nOdd  pic 9(20).\n\n       procedure division using n result.\n\n           initialize result WS-TEMP WS-TEMP2 WS-TAB.\n           MOVE n TO WS-TAB.\n           PERFORM 20 TIMES\n               ADD 1 TO WS-TEMP\n               MOVE NUMS(WS-TEMP) TO WS-TEMP2\n               EVALUATE WS-TEMP2\n               WHEN 1\n               WHEN 3\n               WHEN 5\n               WHEN 7\n               WHEN 9\n                   COMPUTE nOdd = nOdd * 10 + WS-TEMP2\n                   END-COMPUTE\n               WHEN OTHER\n                   COMPUTE nEven = nEven * 10 + WS-TEMP2\n                   END-COMPUTE\n               END-EVALUATE\n           END-PERFORM.\n           goback.\n       end program EvenAndOdd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21933,"user_id":53,"body":"       identification division.\n       program-id. EvenAndOdd.\n       data division.\n       local-storage section.\n       01  a         pic 9(20) value 1.\n       01  b         pic 9(20) value 1.\n       01  d         pic 9.\n       linkage section.\n       01  n         pic 9(20).\n       01  result.\n           05  nEven pic 9(20).\n           05  nOdd  pic 9(20).\n       procedure division using n result.\n          initialize result\n          perform until n = 0\n            divide 10 into n giving n remainder d\n            if function rem(d, 2) = 0 then\n              compute nEven = nEven + d * a\n              multiply 10 by a\n            else\n              compute nOdd = nOdd + d * b\n              multiply 10 by b\n            end-if\n          end-perform\n          goback.\n       end program EvenAndOdd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59530d2401d6039f8600001f":[{"id":21934,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MEASUREMENTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT ROUNDED MODE toward-greater =\n              (FUNCTION LOG (N)) \/ (FUNCTION LOG (3)) .\n       END PROGRAM MEASUREMENTS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21935,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MEASUREMENTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = FUNCTION INTEGER-PART(0.99999 +\n              (FUNCTION LOG (N)) \/ (FUNCTION LOG (3))) .\n       END PROGRAM MEASUREMENTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21936,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MEASUREMENTS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(10).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n          Move 0 to result,\n          Move 1 to m,\n      \n          Perform until n <= m,\n              Compute m = m * 3,\n              Add 1 to result,\n          End-perform\n          \n          Goback.\n\n       END PROGRAM MEASUREMENTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21937,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MEASUREMENTS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n         INITIALIZE RESULT\n         PERFORM UNTIL N < 2\n           ADD 1 TO RESULT\n           COMPUTE N ROUNDED MODE TOWARD-GREATER = N \/ 3\n         END-PERFORM\n         GOBACK.\n       END PROGRAM MEASUREMENTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21938,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MEASUREMENTS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT ROUNDED MODE TOWARD-GREATER =\n                   FUNCTION LOG(N) \/ FUNCTION LOG(3).\n       END PROGRAM MEASUREMENTS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21939,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. MEASUREMENTS.\n       DATA DIVISION.\n       local-storage section.\n       01 k           pic 9(11) value 1.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           perform until k >= n\n              add 1 to result\n              multiply 3 by k\n           end-perform.\n       END PROGRAM MEASUREMENTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"595467c63074e38ba4000063":[{"id":21940,"user_id":168,"body":"       identification division.\n       program-id. IncompleteVirus.\n       data division.\n      \n       linkage section.\n       01  n.\n           05 n-length     pic 9(2).\n           05 s            pic 9 occurs 1 to 50 times \n                                 depending on n-length indexed by i.\n       01  result pic 9(16).\n      \n       procedure division using n result.\n          move 0 to result\n          perform varying i from 1 until i > n-length\n              if s(i) < 2\n                  compute result = 2 * result + s(i)\n              else\n                  compute result = \n                      2 ** (n-length - i + 1) * (result + 1) - 1\n                  exit perform\n              end-if\n          end-perform.\n       end program IncompleteVirus.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21941,"user_id":53,"body":"       identification division.\n       program-id. IncompleteVirus.\n       data division.\n       linkage section.\n       01  n-digits.\n           05 n-len        pic 9(2).\n           05 n            pic 9 occurs 1 to 50 times \n                                 depending on n-len\n                                 indexed by i.\n       01  result pic 9(16).\n       procedure division using n-digits result.\n          initialize result\n          perform varying i from 0 until i >= n-len\n            evaluate n(i + 1)\n              when 1\n                compute result = result + 2 ** (n-len - 1 - i)\n              when > 1\n                compute result = result + 2 ** (n-len - i) - 1\n                exit paragraph\n            end-evaluate\n          end-perform\n          goback.\n       end program IncompleteVirus.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21942,"user_id":50,"body":"       identification division.\n       program-id. IncompleteVirus.\n       data division.\n       local-storage section.\n       01  flag            pic 9.\n      \n       linkage section.\n       01  n.\n           05 n-length     pic 9(2).\n           05 s            pic 9 occurs 1 to 50 times \n                                 depending on n-length\n                                 indexed by i.\n       01  result pic 9(16).\n      \n       procedure division using n result.\n      \n          move 0 to result, flag\n          perform varying i from 1 until i > n-length\n            evaluate s(i)\n            when  1      compute result = 2 * result + 1\n            when  > 1    compute result = 2 * result + 1\n                         move 1 to flag\n            when other   if flag = 1 compute result = 2 * result + 1\n                         else multiply 2 by result end-if\n            end-evaluate\n          end-perform\n      \n          goback.\n       end program IncompleteVirus.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59549d482a68fe3bc2000146":[{"id":21943,"user_id":50,"body":"       identification division.\n       program-id. distributionOf.\n       data division.\n       local-storage section.\n       01  i               pic 99.\n       01  j               pic 99.\n       01  k               pic 99.\n       01  a               pic 9(8).\n       01  list.\n          05  len          pic 99.\n          05  l            pic s9(8) occurs 0 to 80 times\n                                   depending on len.\n      \n       linkage section.\n       01  gold.\n           05 arr-length    pic 99.\n           05 xs            pic 9(4) occurs 0 to 80 times \n                                    depending on arr-length.\n       01  result.\n           05 gold-a        pic 9(8).\n           05 gold-b        pic 9(8).\n      \n       procedure division using gold result.\n      \n          move arr-length to len\n          move 0 to a\n      \n          perform varying j from 1 until j > len\n              move xs(j) to l(j)\n              add l(j) to a\n          end-perform\n      \n          perform varying i from 1 until i = len\n              perform varying j from 0 until j = len - i\n      \n                  compute l(j + 1) = function max(\n                                              xs(j + i + 1) - l(j + 1),\n                                              xs(j + 1) - l(j + 2)\n                                              )\n      \n              end-perform\n          end-perform\n      \n          compute gold-a = (a + l(1)) \/ 2\n          compute gold-b = a - gold-a\n          \n          goback.\n       end program distributionOf.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21944,"user_id":168,"body":"       identification division.\n       program-id. distributionOf.\n       data division.\n       working-storage section.\n       01 i       pic 99.\n       01 j       pic 99.\n       01 p       pic 9.\n      \n       linkage section.\n       01  gold.\n           05 arr-length    pic 99.\n           05 xs            pic 9(4) occurs 0 to 80 times \n                                    depending on arr-length.\n       01  result.\n           05 gold-a        pic 9(8).\n           05 gold-b        pic 9(8).\n      \n       procedure division using gold result.\n          call 'init-cache' using gold\n          move 1 to i p\n          move arr-length to j\n          call 'dist-rec' using i j p result\n          goback.\n       end program distributionOf.\n      \n      \n       program-id. dist-rec recursive.\n       data division.\n       working-storage section.\n       01  gold-ptr usage pointer.\n       01  cache.\n           05 occurs 80 times.\n              10 occurs 80 times.\n                 15 occurs 2 times.\n                    20 flag pic 9.\n                    20 v.\n                       25 vs pic 9(8) occurs 2 times.\n      \n       local-storage section.\n       01  k       pic 99.\n       01  p1      pic 9.\n       01  l.\n           05 ls   pic 9(8) occurs 2 times.\n       01  r.\n           05 rs   pic 9(8) occurs 2 times.\n      \n       linkage section.\n       01  gold.\n           05 arr-length    pic 99.\n           05 xs            pic 9(4) occurs 0 to 80 times \n                                    depending on arr-length.\n       01  i       pic 99.\n       01  j       pic 99.\n       01  p       pic 9.\n       01  result.\n           05 ps pic 9(8) occurs 2 times.\n      \n       procedure division using i j p result.\n           move 0 to ps(1) ps(2)\n           if i > j then goback end-if\n           if flag(i, j, p) <> 0\n               move v(i, j, p) to result\n               goback\n           end-if\n      * seems to be not necessary\n           set address of gold to gold-ptr\n           compute k = i + 1\n           compute p1 = 3 - p\n           call 'dist-rec' using k j p1 l\n           add xs(i) to ls(p)\n           compute k = j - 1\n           call 'dist-rec' using i k p1 r\n           add xs(j) to rs(p)\n           if ls(p) >= rs(p)\n               move l to result\n           else\n               move r to result\n           end-if\n           move result to v(i, j, p)\n           move 1 to flag(i, j, p)\n           goback.\n      \n       entry 'init-cache' using gold.\n           set gold-ptr to address of gold\n           initialize cache\n           goback.\n       end program dist-rec.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21945,"user_id":53,"body":"       identification division.\n       program-id. distributionOf.\n       data division.\n       local-storage section.\n       01  m               pic 9(8).\n       01  arr.\n          05  ns-len       pic 99.\n          05  ns           pic s9(8) occurs 0 to 80 times\n                                     depending on ns-len\n                                     indexed i j k.\n       linkage section.\n       01  gold.\n           05 arr-length    pic 99.\n           05 xs            pic 9(4) occurs 0 to 80 times \n                                     depending on arr-length.\n       01  result.\n           05 gold-a        pic 9(8).\n           05 gold-b        pic 9(8).\n       procedure division using gold result.\n          initialize result\n          move arr-length to ns-len\n          perform varying j from 1 until j > ns-len\n            move xs(j) to ns(j)\n            add ns(j) to m\n          end-perform\n          perform varying i from 1 until i = ns-len\n            perform varying j from 0 until j = ns-len - i\n              compute ns(j + 1) = function max(\n                xs(j + i + 1) - ns(j + 1), xs(j + 1) - ns(j + 2))\n            end-perform\n          end-perform\n          compute gold-a = (m + ns(1)) \/ 2\n          compute gold-b = m - gold-a\n          goback.\n       end program distributionOf.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5954b48ad8e0053403000040":[{"id":21946,"user_id":53,"body":"       identification division.\n       program-id. JumpTo.\n       data division.\n       local-storage section.\n       01  m                 pic 9(8).\n       01  k                 pic 9(8) value 0.\n       01  e                 pic 9(8) value 0.\n       linkage section.\n       01  n                 pic s9(8).\n       01  result            pic 9(8).\n       procedure division using n result.\n          compute m = function abs(n)\n          perform until e >= m and function mod(e - m, 2) = 0\n            add 1 to k\n            add k to e\n          end-perform\n          move k to result\n          goback.\n       end program JumpTo.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21947,"user_id":168,"body":"       identification division.\n       program-id. JumpTo.\n       data division.\n       working-storage section.\n       01  k                 pic 9(8).\n       01  d                 pic 9(8).\n       01  d2                pic 9(8).\n      \n       linkage section.\n       01  n                 pic s9(8).\n       01  result            pic 9(8).\n      \n       procedure division using n result.\n          move function abs(n) to n\n          compute k = function abs((0.25 + 2 * n) ** 0.5 - 0.5)\n          compute d = n - k * (k + 1) \/ 2\n          compute d2 = k + 1 - d\n          evaluate true\n              when d = 0 move k to result\n              when function mod(d2, 2) = 0 compute result = k + 1\n              when function mod(d, 2) = 1 and function mod(d2, 2) = 1\n                  compute result = k + 2\n              when other compute result = k + 3\n          end-evaluate.\n       end program JumpTo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21948,"user_id":50,"body":"       identification division.\n       program-id. JumpTo.\n       data division.\n       local-storage section.\n       01  a                 pic 9(8).\n      \n       linkage section.\n       01  n                 pic s9(8).\n       01  result            pic 9(8).\n      \n       procedure division using n result.\n      \n      * Implementation of Mercy Madmask's Javascript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5954bbc444799d051400016b\/groups\/615b088926013800012cba8b\n          \n          move function abs(n) to n\n          compute result rounded mode toward-greater = \n                  (function sqrt(8 * n + 1) - 1) \/ 2\n           compute a = result * (result + 1) \/ 2\n           if function rem(a + n, 2) = 1\n               compute result = result + 1 + function rem(result, 2)\n           end-if\n      \n          goback.\n       end program JumpTo.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5959ec605595565f5c00002b":[{"id":21949,"user_id":53,"body":"       identification division.\n       program-id. reverse-bits.\n       data division.\n       local-storage section.\n       01 m           pic 9 value 0.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10) value 0.\n       procedure division using n result.\n          perform until n = 0\n            divide 2 into n giving n remainder m,\n            multiply 2 by result,\n            add m to result,\n          end-perform,\n          goback.\n       end program reverse-bits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21950,"user_id":50,"body":"       identification division.\n       program-id. reverse-bits.\n       data division.\n       local-storage section.\n       01 r           pic 9 value 0.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10) value 0.\n       procedure division using n result.\n      \n          perform until n = 0\n            divide 2 into n giving n remainder r\n            compute result = 2 * result + r\n          end-perform\n      \n          goback.\n       end program reverse-bits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21951,"user_id":null,"body":"       identification division.\n       program-id. reverse-bits.\n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n         set result to 0\n         perform until n = 0\n           compute result = result * 2 + function mod(n, 2)\n           divide 2 into n.\n       end program reverse-bits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21952,"user_id":168,"body":"       identification division.\n       program-id. reverse-bits.\n       data division.\n       working-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          compute result = 0\n          perform until n = 0\n            divide n by 2 giving n remainder r\n            compute result = 2 * result + r\n          end-perform.\n       end program reverse-bits.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"595bd047b96bed1f59000001":[{"id":21953,"user_id":50,"body":"       identification division.\n       program-id. maximum-product.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 p           pic 9(10) value 1.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n     \n      * Implementation of Voile's Javascript solution\n      * See: https:\/\/www.codewars.com\/kata\/reviews\/595bd8cfb1a7540c4600003a\/groups\/595c4947891563e807000092\n      \n          perform varying i from 2 until i > n\n              compute p = p * i\n              subtract i from n\n          end-perform\n          \n          if n + 1 = i\n              compute result = function integer(\n                                p * (i + 1.0) \/ 2.0)\n          else\n              compute result = function integer(p * i \/ (i - n))\n          end-if\n      \n          goback.\n       end program maximum-product.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21954,"user_id":168,"body":"       identification division.\n       program-id. maximum-product.\n      \n       data division.\n       working-storage section.\n       01 m           pic 9(8) value 2.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          call 'max-prod' using by content n m by reference result.\n       end program maximum-product.\n\n       program-id. max-prod recursive.\n       data division.\n       local-storage section.\n       01 i           usage index.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 r           pic 9(20).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n m result.\n          if n >= m move n to result else move 0 to result end-if\n          perform varying i from m until 2 * i >= n\n              subtract i from n giving a\n              add 1 to i giving b\n              call 'max-prod' using a b r\n              move function max(result, i * r) to result\n          end-perform.\n       end program max-prod.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21955,"user_id":168,"body":"       identification division.\n       program-id. maximum-product.\n      \n       data division.\n       working-storage section.\n       01 i           pic 9(8).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n \n      * Translation of Voile's JS solution\n       procedure division using n result.\n          move 1 to result\n          perform varying i from 2 until i > n\n              subtract i from n\n              multiply i by result\n          end-perform\n          if n + 1 = i then\n              compute result = result * (i + 1) \/ 2\n          else\n              compute result = result * i \/ (i - n)\n          end-if.\n       end program maximum-product.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21956,"user_id":53,"body":"       identification division.\n       program-id. maximum-product.\n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 m           pic 9(10) value 1.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n          perform varying i from 2 until i > n\n              multiply i by m\n              subtract i from n\n          end-perform\n          if n = i - 1\n              compute result = \n                function integer(m * (i + 1) \/ 2)\n          else\n              compute result = function integer(m * i \/ (i - n))\n          end-if\n          goback.\n       end program maximum-product.\n      \n       identification division.\n       program-id. maximum-product-slow.\n       data division.\n       local-storage section.\n       01 m           pic s9(20).\n       01 a           pic 9(20) value 2.\n       01 b           pic 9(20) value 1.\n       linkage section.\n       01 n           pic 9(8).\n       01 r           pic 9(20).\n       procedure division using n r.\n          move n to m\n          call 'aux' using by content m a b by reference r\n          goback.\n       end program maximum-product-slow.\n      \n       identification division.\n       program-id. aux recursive.\n       data division.\n       local-storage section.\n       01 lm          pic s9(20).\n       01 la          pic 9(20).\n       01 lb          pic 9(20).\n       01 lr          pic 9(20).\n       01 rm          pic s9(20).\n       01 ra          pic 9(20).\n       01 rb          pic 9(20).\n       01 rr          pic 9(20).\n       linkage section.\n       01 m           pic s9(20).\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 r           pic 9(20).\n       procedure division using m a b r.\n          if m = 0 then move b to r, goback end-if\n          if a > m or m < 0 then move 0 to r, goback end-if\n          compute lm = m - a\n          compute la = a + 1\n          compute lb = b * a\n          call 'aux' using by content lm la lb by reference lr\n          compute rm = m\n          compute ra = a + 1\n          compute rb = b\n          call 'aux' using by content rm ra rb by reference rr\n          compute r = function max (lr, rr)\n          goback.\n       end program aux.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5966e33c4e686b508700002d":[{"id":21957,"user_id":50,"body":"       identification division.\n       program-id. SumStr.\n      \n       data division.\n       local-storage section.\n       01 x           pic 9(10).\n       01 z           pic z(10)9.\n\n       linkage section.\n       01 a           pic x(10).\n       01 b           pic x(10).\n       01 result      pic x(10).\n      \n       procedure division using a b result.\n      \n          if a <> space move a to x end-if\n          if b <> space add function numval(b) to x end-if\n          move x to z\n          move function trim(z) to result\n      \n          goback.\n       end program SumStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21958,"user_id":null,"body":"       identification division.\n       program-id. SumStr.\n      \n       data division.\n       working-storage section.\n       01 a-num       pic 9(10).\n       01 b-num       pic 9(10).\n       01 res-num     pic z(15)9.\n\n       linkage section.\n       01 a           pic x(10).\n       01 b           pic x(10).\n       01 result      pic x(10).\n      \n       procedure division using a b result.\n          set a-num to a\n          set b-num to b\n          compute res-num = a-num + b-num\n          move function trim(res-num) to result\n          goback.\n       end program SumStr.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21959,"user_id":53,"body":"       identification division.\n       program-id. SumStr.\n      \n       data division.\n       local-storage section.\n       01 x           pic 9(10) value 0.\n       01 y           pic 9(10) value 0.\n       01 s           pic 9(10).\n       01 z           pic z(10)9.\n       linkage section.\n       01 a           pic x(10).\n       01 b           pic x(10).\n       01 result      pic x(10).\n       procedure division using a b result.\n          if a <> space move a to x end-if\n          if b <> space move function numval(b) to y end-if\n          add x to y giving s\n          move s to z\n          move function trim(z) to result\n          goback.\n       end program SumStr.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5966eeb31b229e44eb00007a":[{"id":21960,"user_id":168,"body":"       identification division.\n       program-id. vaporcode.\n\n       data division.\n       linkage section.\n       01  str.\n           03 s-len      pic 9(2).\n           03 str-data.\n               05 chars pic x occurs 0 to 50 times \n                              depending on s-len indexed by i.\n       01  result.\n           03 res-len    pic 9(3).\n           03 str-data.\n               05 res  pic x occurs 0 to 150 times \n                              depending on res-len.\n\n       procedure division using str result.\n          move 0 to res-len\n          perform varying i from 1 until i > s-len\n              if chars(i) <> ' '\n                  if res-len > 0\n                      add 2 to res-len\n                      move '  ' to str-data of result(res-len - 1:2)\n                  end-if\n                  add 1 to res-len\n                  move function upper-case(chars(i)) to res(res-len)\n              end-if\n          end-perform.\n       end program vaporcode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21961,"user_id":53,"body":"       identification division.\n       program-id. vaporcode.\n       data division.\n       linkage section.\n       01  str.\n           03 s-len       pic 9(2).\n           03 str-data.\n               05 chars   pic x occurs 0 to 50 times \n                          depending on s-len \n                          indexed by i j.\n       01  result.\n           03 res-len     pic 9(3).\n           03 str-data.\n               05 res     pic x occurs 0 to 150 times \n                          depending on res-len.\n       procedure division using str result.\n        initialize result\n        if s-len = 0 goback end-if\n        set j to 0\n        perform varying i from 1 until i > s-len\n          if chars(i) <> space\n            add 1 to j\n            if j > 1\n              add 1 to res-len\n              move space to res(res-len)\n              add 1 to res-len\n              move space to res(res-len)\n            end-if\n            add 1 to res-len\n            move function upper-case(chars(i)) to res(res-len)\n          end-perform\n          goback.\n       end program vaporcode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21962,"user_id":50,"body":"       identification division.\n       program-id. vaporcode.\n\n       data division.\n       linkage section.\n       01  str.\n           03 s-len      pic 9(2).\n           03 str-data.\n               05 chars pic x occurs 0 to 50 times \n                              depending on s-len indexed i.\n       01  result.\n           03 res-len      pic 9(3).\n           03 str-data.\n               05 res pic x occurs 0 to 150 times \n                              depending on res-len.\n\n       procedure division using str result.\n        \n        move 0 to res-len\n        if s-len = 0 goback end-if\n        perform varying i from 1 until i > s-len\n          if chars(i) <> ' '\n            add 1 to res-len\n            move function upper-case(chars(i)) to res(res-len)\n            if i <> s-len\n              add 1 to res-len\n              move ' ' to res(res-len)\n              add 1 to res-len\n              move ' ' to res(res-len)\n            end-if\n          end-perform\n      \n          if res(res-len) = ' '\n             subtract 2 from res-len\n          end-if\n      \n          goback.\n      \n       end program vaporcode.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"596776fbb4f24d0d82000141":[{"id":21963,"user_id":421,"body":"       identification division.\n       program-id. f.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       \n       linkage section.\n       01 x           pic s9(2).\n       01 a           pic s9(2).\n       01 b           pic s9(2).\n       01 cc          pic s9(2).\n       01 result      pic s9(2) sign leading.\n      \n       procedure division using x a b cc result.\n           evaluate x\n               when a      move b to result\n               when b      move cc to result\n               when other  move a to result\n           end-evaluate.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21964,"user_id":50,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       \n       linkage section.\n       01 x           pic s9(2).\n       01 a           pic s9(2).\n       01 b           pic s9(2).\n       01 cc          pic s9(2).\n       01 result      pic s9(2) sign leading.\n      \n       procedure division using x a b cc result.\n      \n          evaluate x\n          when a       move b to result\n          when b       move cc to result\n          when other   move a to result\n          end-evaluate\n      \n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21965,"user_id":null,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       \n       linkage section.\n       01 x           pic s9(2).\n       01 a           pic s9(2).\n       01 b           pic s9(2).\n       01 cc          pic s9(2).\n       01 result      pic s9(2) sign leading.\n      \n       procedure division using x a b cc result.\n           EVALUATE x\n                WHEN a\n                    MOVE b TO result\n                WHEN b\n                    MOVE cc TO result\n                WHEN cc\n                    MOVE a TO result\n           END-EVALUATE.     \n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21966,"user_id":null,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       \n       linkage section.\n       01 x           pic s9(2).\n       01 a           pic s9(2).\n       01 b           pic s9(2).\n       01 cc          pic s9(2).\n       01 result      pic s9(2) sign leading.\n      \n       procedure division using x a b cc result.\n           EVALUATE TRUE\n                WHEN x = a\n                    MOVE b TO result\n                WHEN x = b\n                    MOVE cc TO result\n                WHEN x = cc\n                    MOVE a TO result\n           END-EVALUATE.     \n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21967,"user_id":168,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       \n       linkage section.\n       01 x           pic s9(2).\n       01 a           pic s9(2).\n       01 b           pic s9(2).\n       01 c           pic s9(2).\n       01 result      pic s9(2) sign leading.\n      \n       procedure division using x a b c result.\n          evaluate x\n            when a move b to result\n            when b move c to result\n            when other move a to result\n          end-evaluate.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21968,"user_id":53,"body":"       identification division.\n       program-id. f.\n      \n       data division.\n       \n       linkage section.\n       01 x           pic s9(2).\n       01 a           pic s9(2).\n       01 b           pic s9(2).\n       01 d           pic s9(2).\n       01 result      pic s9(2) sign leading.\n      \n       procedure division using x a b d result.\n      \n          evaluate x\n            when a      \n              move b to result\n            when b\n              move d to result\n            when other\n              move a to result\n          end-evaluate\n      \n          goback.\n       end program f.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"596d34df24a04ee1e3000a25":[{"id":21969,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-ONES.\n       DATA DIVISION.\n       working-storage section.\n       01 n           pic 9(20).\n       01 r           pic 9(20).\n       01 k           pic 9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(20).\n       01 B           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B RESULT.\n          compute n = b\n          perform count1\n          compute result = r\n          compute n = a - 1\n          perform count1\n          subtract r from result\n          Goback.\n       count1.\n          compute r = 0\n          perform until n = 0\n              compute k = 1.e-10 + function log(n) \/ function log(2)\n              compute n = n - 2 ** k\n              compute r = r + k * 2 ** (k - 1) + n + 1\n          end-perform.\n      \n       END PROGRAM COUNT-ONES.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21970,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-ONES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(20).\n       01 B           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B RESULT.\n\n          Call 'F' using\n              by content b\n              by reference result,\n      \n          Subtract 1 from a,\n\n          Call 'F' using\n            by content a\n            by reference a,\n      \n          Subtract a from result,\n\n          Goback.\n       END PROGRAM COUNT-ONES.\n\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. F.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 TMP         PIC 9(20).\n       01 M         PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          \n          Move 0 to result,\n          Perform until n = 0,\n            Move 0 to tmp,\n            Move n to m,\n            Perform until m <= 1,\n              Add 1 to tmp,\n              Compute m = m \/ 2,\n            End-perform\n            Compute result = result + 2 ** (tmp - 1) * tmp + 1,\n            Compute n = n - 2 ** tmp,\n            Add n to result,\n          End-perform\n      \n          Goback.\n      \n       END PROGRAM F.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21971,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-ONES.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(20).\n       01 X           PIC 9(20).\n       01 Y           PIC 9(20).\n       LINKAGE SECTION.\n       01 A           PIC 9(20).\n       01 B           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B RESULT.\n          compute i = a - 1\n          call 'G' using by content b by reference x\n          call 'G' using by content i by reference y\n          compute result = x - y\n          goback.\n       END PROGRAM COUNT-ONES.\n      \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. G RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(20).\n       01 J           PIC 9(20).\n       01 K           PIC 9(20).\n       01 X           PIC 9(20).\n       01 Y           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          if n = 0 then\n            move n to result\n            goback\n          end-if\n          compute i = n \/ 2\n          if function rem (n, 2) = 0 then\n            move 1 to j\n          else\n            move 0 to j\n          end-if\n          compute k = i - j\n          call 'G' using by content k by reference x\n          if function rem (n, 2) = 0 then\n            call 'F' using by content i by reference y\n          else\n            move 0 to y\n          end-if\n          compute result = 2 * x + y + i + function rem (n, 2)\n          goback.\n       END PROGRAM G.\n      \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. F RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(20).\n       01 X           PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          if n = 0 then\n            move n to result\n            goback\n          end-if\n          compute i = n \/ 2\n          call 'F' using by content i by reference x\n          compute result = x + function rem (n, 2)\n          goback.\n       END PROGRAM F.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21972,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-ONES.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(20).\n       01 B           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING A B RESULT.\n\n          Call 'F' using\n              by content b\n              by reference b,\n      \n          Compute a = a - 1,\n          Call 'F' using\n            by content a\n            by reference result,\n      \n          Compute result = b - result\n          Display result\n          Goback.\n       END PROGRAM COUNT-ONES.\n\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. F.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 TMP         PIC 9(20).\n       01 M         PIC 9(20).\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          \n          Move 0 to result,\n          Perform until n = 0,\n            Move 0 to tmp,\n            Move n to m,\n            Perform until m <= 1,\n              Add 1 to tmp,\n              Compute m = m \/ 2,\n            End-perform\n            Compute result = result + 2 ** (tmp - 1) * tmp + 1\n            Compute n = n - 2 ** tmp,\n            Add n to result,\n          End-perform\n      \n          Goback.\n      \n       END PROGRAM F.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"596e4ef7b61e25981200009f":[{"id":21973,"user_id":421,"body":"       identification division.\n       program-id. AspectRatio.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  x                pic 9(4).\n       01  y                pic 9(4).\n       01  result.\n           05 res-x         pic 9(4).\n           05 res-y         pic 9(4).\n      \n       procedure division using x y result.      \n           initialize result\n           compute res-x rounded mode toward-greater = y * 16 \/ 9\n           move y to res-y.        \n       end program AspectRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21974,"user_id":null,"body":"       identification division.\n       program-id. AspectRatio.\n       data division.\n      \n       linkage section.\n       01  x                pic 9(4).\n       01  y                pic 9(4).\n       01  result.\n           05 res-x         pic 9(4).\n           05 res-y         pic 9(4).\n      \n       procedure division using x y result.\n           compute res-x = (y * 16 + 8) \/ 9\n           set res-y to y\n           goback.\n       end program AspectRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21975,"user_id":53,"body":"       identification division.\n       program-id. AspectRatio.\n       data division.\n      \n       linkage section.\n       01  x                pic 9(4).\n       01  y                pic 9(4).\n       01  result.\n           05 res-x         pic 9(4).\n           05 res-y         pic 9(4).\n      \n       procedure division using x y result.\n      \n           compute res-x rounded mode toward-greater = \n              function abs(16 * y \/ 9)\n           compute res-y = y\n      \n           goback.\n       end program AspectRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21976,"user_id":50,"body":"       identification division.\n       program-id. AspectRatio.\n       data division.\n      \n       linkage section.\n       01  x                pic 9(4).\n       01  y                pic 9(4).\n       01  result.\n           05 res-x         pic 9(4).\n           05 res-y         pic 9(4).\n      \n       procedure division using x y result.\n      \n          move y to res-y\n          compute res-x rounded mode toward-greater = \n                                   function abs(y * 16 \/ 9).\n      \n       end program AspectRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"596f28fd9be8ebe6ec0000c1":[{"id":21977,"user_id":53,"body":"       identification division.\n       program-id. WaveSort.\n       data division.\n       local-storage section.\n       01  tmp               pic 9(3).\n       linkage section.\n       01  arr.\n           05  arr-length    pic 9(2).\n           05  xs occurs 0 to 50 times \n                  depending on arr-length \n                  indexed by i.\n               07 n          pic 9(3).\n       procedure division using arr.\n          perform varying i from 1 by 2 until i > arr-length\n            if i > 1 and n(i - 1) > n(i) then\n              move n(i) to tmp\n              move n(i - 1) to n(i)\n              move tmp to n(i - 1)\n            end-if\n            if i < arr-length and n(i) < n(i + 1) then\n              move n(i) to tmp\n              move n(i + 1) to n(i)\n              move tmp to n(i + 1)\n            end-if\n          end-perform\n      \n          goback.\n       end program WaveSort.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21978,"user_id":50,"body":"       identification division.\n       program-id. WaveSort.\n       data division.\n       local-storage section.\n       01 tmp                pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05  arr-length    pic 9(2).\n           05  xs occurs 0 to 50 times \n                  depending on arr-length indexed i.\n               07 n          pic 9(3).\n      \n       procedure division using arr.\n      \n          sort xs on ascending key n\n          perform varying i from 2 by 2 until i > arr-length\n            move n(i)     to tmp\n            move n(i - 1) to n(i)\n            move tmp      to n(i - 1)\n          end-perform\n      \n          goback.\n       end program WaveSort.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5977618080ef220766000022":[{"id":21979,"user_id":421,"body":"       identification division.\n       program-id. USD-to-CNY.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.      \n       01 cu          pic z(5)9.99.\n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(21).\n      \n       procedure division using USD result.  \n          initialize result\n          compute cu = USD * 6.75        \n          string function trim(cu) \" Chinese Yuan\"\n          into result.\n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21980,"user_id":null,"body":"       identification division.\n       program-id. USD-to-CNY.\n      \n       data division.\n       working-storage section.\n       01 YUAN        pic Z(6)9.99.\n\n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(21).\n      \n       procedure division using USD result.\n          initialize result\n          compute YUAN = USD * 6.75\n          string FUNCTION TRIM (YUAN) ' Chinese Yuan'\n            into result\n          end-string\n          goback.\n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21981,"user_id":null,"body":"        identification division.\n       program-id. USD-to-CNY.\n      \n       data division.\n       working-storage section.\n       01 CNY         pic z(6)9.99.\n\n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(21).\n      \n       procedure division using USD result.\n          compute CNY = USD * 6.75\n          initialize result\n          string function trim(cny) ' Chinese Yuan' into result\n          goback.\n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21982,"user_id":168,"body":"       identification division.\n       program-id. USD-to-CNY.\n      \n       data division.\n       working-storage section.\n       01 CNY         pic z(6)9.99.\n\n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(21).\n      \n       procedure division using USD result.\n          compute cny rounded = usd * 6.75\n          initialize result\n          string function trim(cny) ' Chinese Yuan' into result\n          goback.\n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21983,"user_id":null,"body":"       identification division.\n       program-id. USD-to-CNY.\n      \n       ENVIRONMENT DIVISION.\n        CONFIGURATION SECTION.\n        SPECIAL-NAMES. DECIMAL-POINT IS COMMA.\n      \n       data division.\n       working-storage section.\n       01 result_num          pic z(10).99.\n       01 result_lenght       pic 9(2).\n       01 result_lenght2      pic 9(2).\n       01 result_length_final pic 9(2).\n    \n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(21).\n      \n       procedure division using USD result.\n      \n          perform 0001-usd-cny.\n      \n          goback.\n      \n        0001-usd-cny.\n        move spaces to result\n      \n        multiply USD by function numval(6,75)  giving result_num\n        \n        move length function trim(result_num) to result_lenght\n        move length result_num to result_lenght2\n      \n      \n        subtract result_lenght from result_lenght2 giving result_length_\n      - final\n      \n        add 1 to result_length_final giving result_length_final\n      \n        string result_num(result_length_final:)' Chinese Yuan' into resu\n      - lt.\n        \n       end program USD-to-CNY.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21984,"user_id":null,"body":"       identification division.\n       program-id. USD-to-CNY.\n      \n       data division.\n       Working-Storage Section.\n       01 CNYINT          PIC 9(8).\n       01 SALIDA.\n          05 CNY          pic 999999.99. \n          05 SPACIOS      PIC X.\n          05 texto1       pic x(20) value \"Chinese Yuan\".\n      \n       01 recorte1.\n         05 filler pic X.\n         05 rec1 pic x(80).\n       01 recorte3.\n         05 filler pic Xxx.\n         05 rec3 pic x(80).   \n       01 recorte4.\n         05 filler pic xxxx.\n         05 rec4 pic x(80).\n       01 recorte2.\n         05 filler pic xx.\n         05 rec2 pic x(80).\n      \n      \n    \n       \n       \n       01 NUMERO       PIC 999999.99 VALUE 888888.88.\n\n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(31).\n\n      \n       procedure division using USD result.\n      \n          initialize result\n      \n          MULTIPLY USD BY 6.75 GIVING CNY.\n          MULTIPLY USD BY 6.75 GIVING CNYINT.\n          DISPLAY \"12345678\"\n          DISPLAY CNY\n      \n          move cnyint to result\n       \n          if CNYint < 999999 \n             if CNYint > 99999\n                \n                display \"recortado \", salida\n                move salida to result\n             end-if\n          end-if\n      \n          if CNYint < 99999 \n             if CNYint > 9999\n                move salida to recorte1\n                display \"recortado \", rec1\n                move rec1 to result\n             end-if\n          end-if   \n      \n      \n      \n\n          if CNYint < 9999 \n             if CNYint > 999\n                move salida to recorte2\n                display \"recortado \", rec2\n                move rec2 to result\n             end-if\n          end-if      \n      \n          if CNYint < 999 \n             if CNYint > 99\n                move salida to recorte3\n                display \"recortado \", rec3\n                move rec3 to result\n             end-if\n          end-if\n       \n          if CNYint < 99 \n             if CNYint > 9\n                move salida to recorte4\n                display \"recortado \", rec4\n                move rec4 to result\n             end-if\n          end-if\n      \n      \n\n      \n      \n      \n      \n          goback.\n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21985,"user_id":null,"body":"       identification division.\n       program-id. USD-to-CNY.\n      \n       data division.\n       WORKING-STORAGE  SECTION.\n       01 result2      pic 9(6)V99.\n       01 result2-edi  pic 999999.99.\n       01 literal      pic X(13)  value ' Chinese Yuan'.\n\n       linkage section.\n       01 USD         pic 9(5).\n       01 result      pic x(21).\n       \n      \n       procedure division using USD result.\n      \n          initialize result result2 result2-edi\n          compute result2 = USD * 6.75\n          display 'result2 ' result2\n          move result2   to result2-edi\n          display 'result2-edi ' result2-edi\n           if result2-edi(1:4) = '0000'\n              move result2-edi(5:5) to result\n              move literal to result(6:13)\n          else\n           if result2-edi(1:3) = '000'\n              move result2-edi(4:6) to result\n              move literal to result(7:13)\n          else\n          if result2-edi(1:2) = '00'\n              move result2-edi(3:7) to result\n              move literal to result(8:13)\n          else\n            if result2-edi(1:1) = '0'\n              move result2-edi(2:8) to result\n              move literal to result(9:13)\n           else\n             move result2-edi to result\n             move literal to result(10:12)\n          end-if\n          end-if\n          end-if\n          end-if\n          \n      \n          \n      \n          goback.\n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21986,"user_id":53,"body":"       identification division.\n       program-id. USD-to-CNY.\n       data division.\n       local-storage section.\n       01 z           pic z(5)9.99.\n       linkage section.\n       01 n           pic 9(5).\n       01 result      pic x(21).\n       procedure division using n result.\n          initialize result\n          multiply n by 6.75 giving z\n          string function trim(z)\n                 ' Chinese Yuan'\n                 into result.\n       end program USD-to-CNY.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21987,"user_id":50,"body":"       identification division.\n       program-id. USD-to-CNY.\n      \n       data division.\n       local-storage section.\n       01 z           pic z(5)9.99.\n      \n       linkage section.\n       01 n           pic 9(5).\n       01 result      pic x(21).\n      \n       procedure division using n result.\n      \n          initialize result\n      \n          compute z = n * 6.75\n      \n          string function trim(z)\n                 ' Chinese Yuan'\n                 into result.\n      \n       end program USD-to-CNY.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"597d75744f4190857a00008d":[{"id":21988,"user_id":421,"body":"       identification division.\n       program-id. PaintLetterboxes.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  temp              pic 9(4).\n       01  r                 pic 9.\n       linkage section.\n       01  start-num         pic 9(4).\n       01  end-num           pic 9(4).\n       01  result.\n           05 val            pic 9(4) occurs 10 times.\n      \n       procedure division using start-num end-num result.      \n          initialize result\n          perform until start-num > end-num\n              move start-num to temp\n              perform until temp = 0\n                  divide temp by 10 giving temp remainder r\n                  compute val(r + 1) = val(r + 1) + 1\n              end-perform\n              add 1 to start-num\n          end-perform.\n       end program PaintLetterboxes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21989,"user_id":53,"body":"       identification division.\n       program-id. PaintLetterboxes.\n       data division.\n       local-storage section.\n       01  c                 pic 9(4).\n       01  m                 pic 9(4).\n       01  d                 pic 9.\n       linkage section.\n       01  a                 pic 9(4).\n       01  b                 pic 9(4).\n       01  result.\n           05 val            pic 9(4) occurs 10 times.\n       procedure division using a b result.\n          initialize result\n          perform varying c from a until c > b\n              move c to m\n              perform until m = 0\n                  divide 10 into m giving m remainder d\n                  add 1 to val(d + 1)\n              end-perform\n          end-perform\n          goback.\n       end program PaintLetterboxes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21990,"user_id":50,"body":"       identification division.\n       program-id. PaintLetterboxes.\n       data division.\n       local-storage section.\n       01  i                 pic 9(4).\n       01  j                 pic 9(4).\n       01  r                 pic 9.\n      \n       linkage section.\n       01  start-num         pic 9(4).\n       01  end-num           pic 9(4).\n       01  result.\n           05 val            pic 9(4) occurs 10 times.\n      \n       procedure division using start-num end-num result.\n          \n          initialize result\n          perform varying i from start-num until i > end-num\n              move i to j\n              perform until j = 0\n                  divide j by 10 giving j remainder r\n                  add 1 to val(r + 1)\n              end-perform\n          end-perform\n      \n          goback.\n       end program PaintLetterboxes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"597ef546ee48603f7a000057":[{"id":21991,"user_id":168,"body":"       identification division.\n       program-id. getMostProfitFromStockQuotes.\n      \n       data division.\n       working-storage section.\n       01  m          pic 9(8).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs      pic 9(5) occurs 1 to 100 times \n                               depending on arr-length\n                               indexed by i.\n      \n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n          compute result m = 0\n          perform varying i from arr-length by -1 until i = 0\n            if xs(i) < m\n                compute result = result + m - xs(i)\n            else\n                compute m = xs(i)\n            end-if\n          end-perform\n          goback.\n       end program getMostProfitFromStockQuotes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21992,"user_id":53,"body":"       identification division.\n       program-id. getMostProfitFromStockQuotes.\n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       linkage section.\n       01  arr.\n           05 n       pic 9(3).\n           05 xs      pic 9(5) occurs 1 to 100 times \n                               depending on n\n                               indexed by i.\n       01 r           pic 9(8).\n       procedure division using arr r.\n          move 0 to r m\n          perform varying i from n by -1 until i = 0\n            compute m = function max (m, xs(i))\n            compute r = r + function max (0, m - xs(i))\n          end-perform\n          goback.\n       end program getMostProfitFromStockQuotes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21993,"user_id":50,"body":"       identification division.\n       program-id. getMostProfitFromStockQuotes.\n      \n       data division.\n       local-storage section.\n       01 m           pic 9(5).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(5) occurs 1 to 100 times \n                              depending on arr-length\n                                 indexed by i.\n       01 result      pic 9(8).\n      \n       procedure division using arr result.\n      * Implementation of Blind4Basics's Python solution \n      * see https:\/\/www.codewars.com\/kata\/reviews\/607ea8bdcf7f080001066930\/groups\/607ee74c8668180001a86b88\n          perform varying i from arr-length by -1 until i = 0\n              if m < xs(i) then move xs(i) to m\n              else compute result = result + m - xs(i) end-if\n          end-perform\n      \n          goback.\n       end program getMostProfitFromStockQuotes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"598057c8d95a04f33f00004e":[{"id":21994,"user_id":421,"body":"       identification division.\n       program-id. range.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01 start-num          pic 9(4).\n       01 end-num            pic 9(4).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 999 times \n                                      depending on res-length.\n      \n       procedure division using start-num end-num result.    \n           if start-num = end-num\n               move 0 to res-length\n               goback\n           end-if\n           perform until start-num = end-num - 1             \n               add 1 to start-num, res-length\n               move start-num to res(res-length)                \n           end-perform.\n       end program range.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21995,"user_id":null,"body":"       identification division.\n       program-id. range.\n       data division.\n       WORKING-STORAGE SECTION.\n       01 I                 PIC 9(4).\n       linkage section.\n       01 start-num          pic 9(4).\n       01 end-num            pic 9(4).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 999 times \n                                      depending on res-length.\n      \n       procedure division using start-num end-num result.\n           MOVE start-num TO I.\n           IF end-num > start-num\n               PERFORM UNTIL I = end-num - 1\n                   ADD 1 TO res-length I\n                   MOVE I TO res(res-length)\n               END-PERFORM\n           END-IF\n           goback.\n       end program range.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21996,"user_id":null,"body":"       identification division.\n       program-id. range.\n       data division.\n       working-storage section.\n       01 i                  pic 9(4).\n       linkage section.\n       01 start-num          pic 9(4).\n       01 end-num            pic 9(4).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 999 times \n                                      depending on res-length.\n      \n       procedure division using start-num end-num result.\n         compute res-length = function max(end-num - start-num - 1, 0)\n         perform varying i from 1 until i > res-length\n           compute res(i) = start-num + i\n         end-perform.\n       end program range.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21997,"user_id":168,"body":"       identification division.\n       program-id. range.\n       data division.\n      \n       linkage section.\n       01 start-num          pic 9(4).\n       01 end-num            pic 9(4).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 999 times \n                                      depending on res-length indexed i.\n      \n       procedure division using start-num end-num result.\n           move 0 to res-length\n           perform varying start-num from function abs(start-num + 1)\n                                     until start-num >= end-num\n              add 1 to res-length\n              move start-num to res(res-length)\n           end-perform\n           goback.\n       end program range.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21998,"user_id":53,"body":"       identification division.\n       program-id. range.\n       data division.\n       linkage section.\n       01  a                 pic 9(4).\n       01  b                 pic 9(4).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 999 times \n                                      depending on res-length\n                                      indexed by i.\n       procedure division using a b result.\n           move 0 to res-length\n           add 1 to a\n           perform varying i from a until i >= b\n              add 1 to res-length\n              move i to res(res-length)\n           end-perform\n           goback.\n       end program range.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":21999,"user_id":50,"body":"       identification division.\n       program-id. range.\n       data division.\n      \n       linkage section.\n       01  start-num          pic 9(4).\n       01  end-num            pic 9(4).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 999 times \n                                      depending on res-length\n                                      indexed by i.\n      \n       procedure division using start-num end-num result.\n      \n           move 0 to res-length\n           add 1 to start-num\n           perform varying i from start-num until i >= end-num\n              add 1 to res-length\n              move i to res(res-length)\n           end-perform\n      \n           goback.\n       end program range.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"598106cb34e205e074000031":[{"id":22000,"user_id":53,"body":"       identification division.\n       program-id. CountDeafRats.\n       data division.\n       linkage section.\n       01  town-arr.\n           05 town-length     pic 9(3).\n           05 town            pic x occurs 1 to 200 times \n                                    depending on town-length\n                                    indexed by i j.\n       01  m                  pic 9(2).\n       procedure division using town-arr m.\n          move 0 to m i\n          perform varying j from 1 until j > town-length\n            evaluate town(j)\n              when \" \"    continue\n              when \"O\"    if function rem(i, 2) = 0 then \n                          add 1 to m end-if\n                          add 1 to i\n              when other  add 1 to i\n            end-evaluate\n          end-perform\n          goback.\n       end program CountDeafRats.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22001,"user_id":53,"body":"       identification division.\n       program-id. CountDeafRats.\n       data division.\n       linkage section.\n       01  town-arr.\n           05 town-length     pic 9(3).\n           05 town            pic x occurs 1 to 200 times \n                                    depending on town-length\n                                    indexed by i j.\n       01  m                  pic 9(2).\n       procedure division using town-arr m.\n          move 0 to m i\n          perform varying j from 1 until j > town-length\n            evaluate town(j)\n              when \" \"    continue\n              when other  if function rem(i, 2) = 0 and\n                            town(j) = 'O' then add 1 to m end-if\n                          add 1 to i\n            end-evaluate\n          end-perform\n          goback.\n       end program CountDeafRats.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22002,"user_id":168,"body":"       identification division.\n       program-id. CountDeafRats.\n       data division.\n       working-storage section.\n       01  tmp pic x.\n       01  d   pic xx.\n       01  i   usage index.\n       01  t   pic 9.\n      \n       linkage section.\n       01  town.\n           05 town-length     pic 9(3).\n           05 town-str.\n              10 town-char    pic x occurs 1 to 200 times \n                                    depending on town-length.\n       01  result          pic 9(2).\n      \n       procedure division using town result.\n          move 0 to result t\n          move 1 to i\n          perform until i > town-length\n              unstring town-str delimited by 'O~' or '~O' or 'P'\n                  into tmp delimiter in d with pointer i\n              evaluate d also t\n                  when 'P' also any move 1 to t\n                  when 'O~' also 0 add 1 to result\n                  when '~O' also 1 add 1 to result\n              end-evaluate\n          end-perform.\n       end program CountDeafRats.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22003,"user_id":50,"body":"       identification division.\n       program-id. CountDeafRats.\n       data division.\n       local-storage section.\n       01  flag pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(3).\n           05 s-char       pic x occurs 1 to 200 times \n                           depending on s-length indexed i.\n       01  result          pic 9(2).\n      \n       procedure division using s result.\n      \n          initialize result\n          set i to 1\n          perform until i > s-length\n            evaluate s-char(i)\n            when ' '   add 1 to i\n            when 'P'   add 1 to i, flag\n            when other\n                    if s-char(i) = 'O' and flag = 0\n                    or s-char(i) = '~' and flag = 1\n                       add 1 to result end-if\n                       add 2 to i\n             end-evaluate\n          end-perform\n      \n          goback.\n       end program CountDeafRats.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5982619d2671576e90000017":[{"id":22004,"user_id":421,"body":"       identification division.\n       program-id. SpongeMeme.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 s-char       pic x occurs 0 to 3000 times \n                                  depending on s-length\n                                  indexed by i.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x occurs 0 to 3000 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n           perform varying i from 1 by 1 until i > s-length\n               add 1 to res-length\n               if function rem(i, 2) = 1 then                  \n                  move function upper-case(s-char(i)) to res(res-length)\n               end-if\n               if function rem(i, 2) = 0 then                 \n                  move function lower-case(s-char(i)) to res(res-length)\n               end-if\n           end-perform.\n       end program SpongeMeme.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22005,"user_id":168,"body":"       identification division.\n       program-id. SpongeMeme.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 s-char       pic x occurs 0 to 3000 times \n                                  depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x occurs 0 to 3000 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n          move s-length to res-length\n          perform varying i from 1 until i > s-length\n              if function mod(i, 2) = 1\n                  move function upper-case(s-char(i)) to res(i)\n              else\n                  move function lower-case(s-char(i)) to res(i)\n              end-if\n          end-perform.\n       end program SpongeMeme.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22006,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SpongeMeme.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S.\n           05 S-LEN        PIC 9(4).\n           05 S-CHAR       PIC X OCCURS 3000 DEPENDING S-LEN INDEXED I.\n       01  RESULT          PIC X(3004).\n\n       PROCEDURE DIVISION USING S RESULT.\n           PERFORM VARYING I FROM 1 BY 2 UNTIL I > S-LEN\n               MOVE FUNCTION UPPER-CASE(S-CHAR(I))      TO S-CHAR(I)\n               MOVE FUNCTION LOWER-CASE(S-CHAR(I + 1))  TO S-CHAR(I + 1)\n           END-PERFORM\n           MOVE S  TO RESULT.\n       END PROGRAM SpongeMeme.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22007,"user_id":53,"body":"       identification division.\n       program-id. SpongeMeme.\n       data division.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 s-char       pic x occurs 0 to 3000 times \n                                 depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x occurs 0 to 3000 times \n                                 depending on res-length\n                                 indexed by i.\n       procedure division using s result.\n          move s to result\n          perform varying i from 1 until i > res-length\n             if function rem(i, 2) <> 0 then\n                move function upper-case(res(i)) to res(i)\n             else\n                move function lower-case(res(i)) to res(i)\n             end-if\n          end-perform\n          goback.\n       end program SpongeMeme.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22008,"user_id":50,"body":"       identification division.\n       program-id. SpongeMeme.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 s-char       pic x occurs 0 to 3000 times \n                                  depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res          pic x occurs 0 to 3000 times \n                                 depending on res-length indexed i.\n      \n       procedure division using s result.\n      \n          move s to result\n          perform varying i from 1 until i > res-length\n             if function rem(i, 2) = 0\n                move function lower-case(res(i)) to res(i)\n             else\n                move function upper-case(res(i)) to res(i)\n             end-if\n          end-perform\n      \n          goback.\n       end program SpongeMeme.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59831e3575ca6c8aea00003a":[{"id":22009,"user_id":421,"body":"       identification division.\n       program-id. game.\n       author. \"ejini\u6218\u795e\". \n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic a(6).\n       procedure division using n m result.\n           if function rem(n, 2) = 1 and m <> 2 then\n               move \"first\" to result\n           else\n               move \"second\" to result\n           end-if.\n       end program game.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22010,"user_id":168,"body":"       identification division.\n       program-id. game.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic a(6).\n          88 fst value 'first'.\n          88 snd value 'second'.\n       procedure division using n m result.\n          if function mod(n, 2) = 0 or m = 2\n              set snd to true\n          else\n              set fst to true\n          end-if.\n       end program game.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22011,"user_id":53,"body":"       identification division.\n       program-id. game.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic a(6).\n       procedure division using n m result.\n          move \"second\" to result,\n          if m <> 2 and function rem (n, 2) = 1 then\n            move \"first\" to result\n          end-if,\n          goback.\n       end program game.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22012,"user_id":50,"body":"       identification division.\n       program-id. game.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(8).\n       01 result      pic a(6).\n       procedure division using n m result.\n      \n          if function rem(n, 2) = 1 and m <> 2\n            move 'first' to result\n          else\n            move 'second' to result\n          end-if\n      \n          goback.\n       end program game.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"598f76a44f613e0e0b000026":[{"id":22013,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SumOfIntegersInString.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S.\n           05 LEN        PIC 9(4).\n           05 CHR        PIC X(1) OCCURS 2000 DEPENDING LEN INDEXED I J.\n       01  RESULT        PIC 9(8).\n\n       PROCEDURE DIVISION USING S RESULT.\n           SET J  TO 1\n\n           PERFORM UNTIL J >= LEN\n               PERFORM VARYING I FROM J \n                 UNTIL I = LEN OR CHR(I) NUMERIC\n               END-PERFORM\n\n               PERFORM VARYING J FROM I\n                 UNTIL J > LEN OR CHR(J) NOT NUMERIC\n               END-PERFORM\n\n               ADD FUNCTION NUMVAL(CHR(I:J - I))  TO RESULT\n           END-PERFORM.\n       END PROGRAM SumOfIntegersInString.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22014,"user_id":168,"body":"       identification division.\n       program-id. SumOfIntegersInString.\n       data division.\n       working-storage section.\n       01  num    pic 9(8).\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 chars        pic x occurs 0 to 2000 times \n                                 depending on s-length indexed i.\n       01  result pic 9(8).\n      \n       procedure division using s result.\n          move 0 to result num\n          perform varying i from 1 until i > s-length\n              evaluate chars(i)\n                  when '0' thru '9' \n                    compute num = 10 * num + function numval(chars(i))\n                  when other\n                    add num to result\n                    move 0 to num\n              end-evaluate\n          end-perform\n          add num to result\n          goback.\n       end program SumOfIntegersInString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22015,"user_id":50,"body":"       identification division.\n       program-id. SumOfIntegersInString.\n       data division.\n       local-storage section.\n       01  n pic 9(8).\n       01  c pic x.\n       01  a pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 chars        pic x occurs 0 to 2000 times \n                                 depending on s-length indexed i.\n       01  result pic 9(8).\n      \n       procedure division using s result.\n      \n          move 0 to result, n\n          perform varying i from 1 until i > s-length\n            move chars(i) to c\n            if c >= '0' and c <= '9'\n               move c to a\n               compute n = 10 * n + a\n            else\n              add n to result\n              move 0 to n\n            end-if\n          end-perform\n          add n to result\n      \n          goback.\n       end program SumOfIntegersInString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59922ce23bfe2c10d7000057":[{"id":22016,"user_id":50,"body":"       identification division.\n       program-id. FireAndFury.\n      \n       data division.\n       local-storage section.\n       01 c            pic a.\n          88 genuine   value 'E', 'F', 'I', 'R', 'U', 'Y'.\n       01 i            usage index.\n       01 j            usage index value 1.\n       01 furyOrFire   pic a(4).\n          88  over     value space.\n       01 tble.\n          03  furyFire pic a(4) occurs 40 indexed k h.\n              88 FURY  value 'FURY'.\n       01 n            pic 9(2).\n      \n       linkage section.\n       01 tweet        pic a(160).\n       01 result       pic x(800).\n      \n       procedure division using tweet result.\n      * display 'tweet = \"' function trim(tweet) '\"'\n          initialize result k\n          perform varying i from 1\n          until i > function stored-char-length(tweet)\n            move tweet(i:1) to c\n            if not genuine\n               move 'Fake tweet.' to result\n               goback\n            end-if\n          end-perform\n      \n          perform with test after until over or j > 160\n              unstring tweet\n                  delimited by 'FIRE' or 'FURY'\n                  into c\n                  delimiter in furyOrFire\n                  with pointer j\n              end-unstring\n              if not over\n                  set k up by 1\n                  move furyOrFire to furyFire(k)\n              end-if\n          end-perform\n      \n          if k = 0 move 'Fake tweet.' to result goback end-if\n          set j to 1\n          perform varying h from 1 until h > k\n            if h = k or furyFire(h) <> furyFire(h + 1)\n                if FURY(h)\n                   string 'I am ' into result with pointer j\n                   perform n times\n                   string 'really ' into result with pointer j\n                   end-perform\n                   string 'furious. ' into result with pointer j\n                else\n                   string 'You ' into result with pointer j\n                   perform n times\n                   string 'and you ' into result with pointer j\n                   end-perform\n                   string 'are fired! ' into result with pointer j\n                end-if\n                initialize n\n            else\n                add 1 to n\n            end-if\n          end-perform\n      \n          goback.\n       end program FireAndFury.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"599385ae6ca73b71b8000038":[{"id":22017,"user_id":53,"body":"       identification division.\n       program-id. AntBridge.\n       data division.\n       local-storage section.\n       01  i                pic 9(3).\n       01  j                pic 9(3) value 0.\n       01  k                pic 9(3).\n       01  l                usage index value 1.\n       01  a-len            pic 9(2).\n       01  m-len            pic 9(3).\n       linkage section.\n       01  a                pic a(12).\n       01  m                pic x(100).\n       01  sb               pic a(12).\n       procedure division using a m sb.\n          initialize sb\n          move length of function trim(a) to a-len\n          move length of function trim(m) to m-len\n          perform varying i from 0 until i >= m-len\n            if m(i + 1:1) = '.'\n              or (i > 0 and m(i:1) = '.')\n              or (i < m-len - 1 and m(i + 2:1) = '.')\n            then\n              compute j = function rem(j + a-len - 1, a-len)\n            end-if\n          end-perform\n          move j to k\n          perform varying i from 0 until i >= a-len\n            string a(k + 1:1) into sb pointer l\n            compute k = function rem(k + 1, a-len)\n          end-perform\n          goback.\n       end program AntBridge.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22018,"user_id":50,"body":"       identification division.\n       program-id. AntBridge.\n       data division.\n       local-storage section.\n       01  i                usage index.\n       01  gap              usage index.\n       01  l                pic 9(2).\n       01  n                pic 9.\n      \n       linkage section.\n       01  ants             pic a(12).\n       01  terrain          pic x(100).\n       01  result           pic a(12).\n      \n       procedure division using ants terrain result.\n      \n          initialize result\n      \n          perform \n              varying i from -1\n                        until i > length function trim(terrain)\n            initialize n\n            inspect terrain(i:3) tallying n for all '.'\n            if n is positive then add 1 to gap end-if\n          end-perform\n      \n          compute l = length function trim(ants)\n          compute gap = function rem(gap, l)\n          if gap is zero then move ants to result goback end-if\n          string\n               ants(l - gap + 1:) delimited by space\n               ants(1: l - gap)\n               into result\n          end-string.\n      \n       end program AntBridge.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"599da159a30addffd00000af":[{"id":22019,"user_id":421,"body":"       identification division.\n       program-id. Collision.\n       author. \"ejini\u6218\u795e\".\n       data division.      \n       linkage section.\n       01 x1          pic s9(2)v9(4).\n       01 y1          pic s9(2)v9(4).\n       01 radius1     pic 9(2)v9(4).\n       01 x2          pic s9(2)v9(4).\n       01 y2          pic s9(2)v9(4).\n       01 radius2     pic 9(2)v9(4).\n       01 result      pic 9.      \n       procedure division using x1 y1 radius1 x2 y2 radius2 result.\n           initialize result\n           if function sqrt( (x2 - x1) ** 2 + (y2 - y1) ** 2 )\n              <= radius1 + radius2 then\n               set result to 1\n           end-if.\n       end program Collision.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22020,"user_id":null,"body":"       identification division.\n       program-id. Collision.\n      \n       data division.\n       local-storage section.\n       01 d           pic 9(3)v9(4).\n       01 xa          pic 9(3)v9(4).\n       01 ya          pic 9(3)v9(4).\n       linkage section.\n       01 x1          pic s9(2)v9(4).\n       01 y1          pic s9(2)v9(4).\n       01 radius1     pic 9(2)v9(4).\n       01 x2          pic s9(2)v9(4).\n       01 y2          pic s9(2)v9(4).\n       01 radius2     pic 9(2)v9(4).\n       01 result      pic 9.\n      \n       procedure division using x1 y1 radius1 x2 y2 radius2 result.\n          compute xa = (x2 - x1)**2\n          compute ya = (y2 - y1)**2\n          compute d = function SQRT(xa + ya)\n          display y1\n          if d <= radius1 + radius2 then\n              move 1 to result\n          else\n              move 0 to result\n          end-if\n      * Assign '1' to result if circles are colliding, otherwise '0'\n      \n          goback.\n       end program Collision.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22021,"user_id":168,"body":"       identification division.\n       program-id. Collision.\n      \n       data division.\n       working-storage section.\n       01 d           pic 9(8)v9(8).\n       01 r           pic 9(8)v9(8).\n      \n       linkage section.\n       01 x1          pic s9(2)v9(4).\n       01 y1          pic s9(2)v9(4).\n       01 radius1     pic 9(2)v9(4).\n       01 x2          pic s9(2)v9(4).\n       01 y2          pic s9(2)v9(4).\n       01 radius2     pic 9(2)v9(4).\n       01 result      pic 9.\n      \n       procedure division using x1 y1 radius1 x2 y2 radius2 result.\n          compute d = function abs((x2 - x1) ** 2 + (y2 - y1) ** 2)\n          compute r = (radius1 + radius2) ** 2\n          if d <= r\n              move 1 to result\n          else\n              move 0 to result\n          end-if.\n       end program Collision.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22022,"user_id":53,"body":"       identification division.\n       program-id. Collision.\n      \n       data division.\n      \n       linkage section.\n       01 x1          pic s9(2)v9(4).\n       01 y1          pic s9(2)v9(4).\n       01 r1          pic 9(2)v9(4).\n       01 x2          pic s9(2)v9(4).\n       01 y2          pic s9(2)v9(4).\n       01 r2          pic 9(2)v9(4).\n       01 n           pic 9.\n      \n       procedure division using x1 y1 r1 x2 y2 r2 n.\n          initialize n\n          if function abs((x2 - x1) ** 2 + (y2 - y1) ** 2)\n            <= (r1 + r2) ** 2\n          then move 1 to n end-if\n          goback.\n       end program Collision.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22023,"user_id":50,"body":"       identification division.\n       program-id. Collision.\n      \n       data division.\n       local-storage section.\n       01 z           pic s9(5)v9(17).\n       01 a           pic s9(5)v9(17).\n      \n       linkage section.\n       01 x1          pic s9(2)v9(4).\n       01 y1          pic s9(2)v9(4).\n       01 radius1     pic 9(2)v9(4).\n       01 x2          pic s9(2)v9(4).\n       01 y2          pic s9(2)v9(4).\n       01 radius2     pic 9(2)v9(4).\n       01 result      pic 9.\n      \n       procedure division using x1 y1 radius1 x2 y2 radius2 result.\n          \n          compute a = x1 - x2\n          compute a = a ** 2\n          compute z = a\n          compute a = y1 - y2\n          compute a = a ** 2\n          compute z = z + a\n          compute a = radius1 + radius2\n          compute a = a ** 2\n          compute z = z - a\n          if z <= 0\n               move 1 to result\n          else move 0 to result end-if\n      \n          goback.\n       end program Collision.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59a1cdde9f922b83ee00003b":[{"id":22024,"user_id":421,"body":"       identification division.\n       program-id. stanton-measure.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  ones            pic 9(3).\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 0 to 300 times \n                                depending on arr-length indexed i.\n       01 result           pic 9(3).\n      \n       procedure division using arr result.\n           initialize ones\n           perform varying i from 1 by 1 until i > arr-length\n               if xs(i) = 1 then\n                   add 1 to ones\n               end-if\n           end-perform           \n           perform varying i from 1 by 1 until i > arr-length\n               if xs(i) = ones then\n                   add 1 to result\n               end-if\n           end-perform.\n       end program stanton-measure.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22025,"user_id":null,"body":"       identification division.\n       program-id. stanton-measure.\n      \n       data division.\n       working-storage section.\n       01  n               pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 0 to 300 times \n                                depending on arr-length\n                                indexed by i.\n       01 result           pic 9(3).\n      \n       procedure division using arr result.\n         set n to 0\n         perform varying i from 1 until i > arr-length\n           if xs(i) = 1\n             add 1 to n\n         end-perform\n         set result to 0\n         perform varying i from 1 until i > arr-length\n           if xs(i) = n\n             add 1 to result\n         end-perform.\n       end program stanton-measure.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22026,"user_id":null,"body":"       identification division.\n       program-id. stanton-measure.\n      \n       data division.\n      \n       local-storage section.\n       01  ones            pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 0 to 300 times \n                                depending on arr-length\n                                indexed by i.\n       01 result           pic 9(3).\n      \n       procedure division using arr result.\n          perform varying i from 1 by 1 until i > arr-length\n              if xs(i) = 1 then\n                  add 1 to ones\n              end-if\n          end-perform\n          \n          perform varying i from 1 by 1 until i > arr-length\n              if xs(i) = ones then\n                  add 1 to result\n              end-if\n          end-perform\n          goback.\n       end program stanton-measure.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22027,"user_id":53,"body":"       identification division.\n       program-id. stanton-measure.\n       data division.\n       local-storage section.\n       01 a                pic 9(3) value 0.\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 0 to 300 times \n                                depending on arr-length\n                                indexed by i.\n       01 result           pic 9(3).\n       procedure division using arr result.\n          move 0 to result\n          perform varying i from 1 until i > arr-length\n            if xs(i) = 1 then add 1 to a end-if\n          end-perform\n          perform varying i from 1 until i > arr-length\n            if xs(i) = a then add 1 to result end-if\n          end-perform\n          goback.\n       end program stanton-measure.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22028,"user_id":168,"body":"       identification division.\n       program-id. stanton-measure.\n      \n       data division.\n       local-storage section.\n       01  c1              pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 0 to 300 times \n                                depending on arr-length indexed by i.\n       01 result           pic 9(3).\n      \n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n               if xs(i) = 1 then add 1 to c1 end-if\n           end-perform\n           move 0 to result\n           perform varying i from 1 until i > arr-length\n               if xs(i) = c1 then add 1 to result end-if\n           end-perform\n           goback.\n       end program stanton-measure.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22029,"user_id":50,"body":"       identification division.\n       program-id. stanton-measure.\n      \n       data division.\n       local-storage section.\n       01  i            pic 999.\n       01  c            pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs      pic 9(2) occurs 0 to 300 times \n                                depending on arr-length.\n       01 result      pic 9(3).\n      \n       procedure division using arr result.\n\n          perform varying i from 1 until i > arr-length\n               if xs(i) = 1 then add 1 to c end-if\n          end-perform\n      \n          perform varying i from 1 until i > arr-length\n              if xs(i) = c then add 1 to result end-if\n          end-perform\n      \n          goback.\n       end program stanton-measure.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59a8570b570190d313000037":[{"id":22030,"user_id":421,"body":"       identification division.\n       program-id. sumCubes.            \n       AUTHOR. \"ejini\u6218\u795e\".      \n       data division.\n       WORKING-STORAGE SECTION.\n       01 m           pic 9(20).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).      \n       procedure division using n result.\n           INITIALIZE result\n           PERFORM UNTIL n = 0  \n               COMPUTE m = n * n * n\n               ADD m TO result      \n               SUBTRACT 1 FROM n\n           END-PERFORM.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22031,"user_id":168,"body":"       identification division.\n       program-id. sumCubes.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          compute result = (n * (n + 1) \/ 2) ** 2.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22032,"user_id":null,"body":"       identification division.\n       program-id. sumCubes.\n      \n       data division.\n       working-storage section.\n       01 num         pic 9(8).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n, result.\n\n          move zeros to result\n          perform varying num from 1 by 1 until num > n\n             compute result = result + num ** 3\n          end-perform\n      \n          goback.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22033,"user_id":null,"body":"       identification division.\n       program-id. sumCubes.\n      \n       data division.\n       WORKING-STORAGE SECTION.\n       01 M          PIC 9(8).\n       01 CUBE       PIC 9(20).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n           MOVE 0 TO result.\n           PERFORM VARYING M FROM n BY -1 UNTIL M = 0\n               COMPUTE CUBE = M * M * M\n               ADD CUBE TO result\n           END-PERFORM.      \n          goback.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22034,"user_id":null,"body":"       identification division.\n       program-id. sumCubes.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          perform until n = 0\n              compute result = result + (n ** 3)\n              subtract 1 from n\n          end-perform.\n      \n          goback.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22035,"user_id":53,"body":"       identification division.\n       program-id. sumCubes.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 r           pic 9(20).\n       procedure division using n r.\n          compute r = ((n * (n + 1)) \/ 2) ** 2,\n          goback.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22036,"user_id":50,"body":"       identification division.\n       program-id. sumCubes.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          compute result = ((n * (n + 1)) \/2) ** 2\n      \n          goback.\n       end program sumCubes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59aac7a9485a4dd82e00003e":[{"id":22037,"user_id":50,"body":"       identification division.\n       program-id. Cockroaches.\n       data division.\n       local-storage section.\n       01  s         pic x(264).\n       01  redefines s.\n           05 c      pic x occurs 264 times.\n       01  o         pic 9(3).\n      \n       linkage section.\n       01  x.\n           05  l      pic 9(2).\n           05  m      pic 9(2).\n           05  room occurs 2 to 34 times depending on l.\n               07  e  pic x occurs 34 times indexed by i j.\n                   88 AARRRGGHHHHHcockroach value 'U', 'L', 'D', 'R'.\n       01  result.\n           03  hole   pic 9(2) occurs 10 times indexed k.\n      \n       procedure division using x result.\n      \n          initialize result\n      \n          set i to 1\n          string function trim(function reverse(room(1)))\n          into s pointer i\n          perform varying j from 1 until j > l\n            string e(j, 1) into s pointer i\n          end-perform\n          string function trim(room(l))\n          into s pointer i\n          perform varying j from l by -1 until j = 0\n              string e(j, m) into s pointer i\n          end-perform\n          move function concat(function trim(s),s) to s\n          \n          perform varying i from 2 until i = m\n                  after   j from 2 until j = l\n              if AARRRGGHHHHHcockroach(j,i)\n              evaluate e(j, i)\n              when 'U'    compute o = m - i + 1\n              when 'L'    compute o = m + j\n              when 'D'    compute o = m + l + i\n              when other  compute o = 2 * (l + m) - j + 1\n              end-evaluate\n              perform until c(o) is numeric\n                add 1 to o\n              end-perform\n              move c(o) to k\n              add 1 to hole(k + 1)\n              end-if\n          end-perform\n      \n          goback.\n       end program Cockroaches.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22038,"user_id":50,"body":"       identification division.\n       program-id. Cockroaches.\n       data division.\n       local-storage section.\n       01  s         pic x(264).\n       01  redefines s.\n           05 c      pic x occurs 264 times.\n       01  o         pic 9(3).\n      \n       linkage section.\n       01  x.\n           05  l      pic 9(2).\n           05  m      pic 9(2).\n           05  room occurs 2 to 34 times depending on l.\n               07  e  pic x occurs 34 times indexed by i j.\n                   88 AARRRGGHHHHHcockroach value 'U', 'L', 'D', 'R'.\n       01  result.\n           03  hole   pic 9(2) occurs 10 times indexed k.\n      \n       procedure division using x result.\n      \n          initialize result\n      \n          set i to 1\n          string function trim(function reverse(room(1)))\n          into s pointer i\n          perform varying j from 1 until j > l\n            string e(j, 1) into s pointer i\n          end-perform\n          string function trim(room(l))\n          into s pointer i\n          perform varying j from l by -1 until j = 0\n              string e(j, m) into s pointer i\n          end-perform\n          move function concat(function trim(s),s) to s\n          \n          perform varying i from 2 until i = m\n                  after   j from 2 until j = l\n              if AARRRGGHHHHHcockroach(j,i)\n              evaluate e(j, i)\n              when 'U'    compute o = m - i + 1\n              when 'L'    compute o = m + j\n              when 'D'    compute o = m + l + i\n              when other  compute o = 2 * (l + m) - j + 1\n              end-evaluate\n              perform until c(o) is numeric\n                add 1 to o\n              end-perform\n              move c(o) to k\n              add 1 to k hole(k)\n              end-if\n          end-perform\n      \n          goback.\n       end program Cockroaches.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22039,"user_id":53,"body":"       identification division.\n       program-id. Cockroaches.\n       data division.\n       local-storage section.\n       01  y0                     pic s9(3) value -1.\n       01  x0                     pic s9(3) value -1.\n       01  y                      pic s9(3) value 0.\n       01  x                      pic s9(3) value 0.\n       01  dy                     pic s9(3) value 0.\n       01  dx                     pic s9(3) value 1.\n       01  t                      pic s9(3) value 0.\n       01  d                      pic 9(3) value 0.\n       01  p                      pic x(1) value '#'.\n       01  room-matrix.\n           05 rows                occurs 99 times.\n              07 room             pic x(1)\n                                  occurs 99 times.\n       linkage section.\n       01  room-str.\n           05  h                  pic 9(2).\n           05  w                  pic 9(2).\n           05  row                pic x(34)\n                                  occurs 2 to 34 times \n                                  depending on h\n                                  indexed by i j.\n       01  result.\n           03  r pic 9(2)         occurs 10 times.\n       procedure division using room-str result.\n      \n          initialize result\n      \n          perform varying i from 1 until i > h\n              after j from 1 until j > w\n            move row(i)(j:1) to room(i,j)\n          end-perform\n      \n          perform forever\n            if (x + 1 = w and dx > 0) or (x = 0 and dx < 0) or\n               (y + 1 = h and dy > 0) or (y = 0 and dy < 0) then\n              move dy to t\n              move dx to dy\n              multiply -1 by t giving dx\n            end-if\n            compute d = function ord(room(y + 1, x + 1))\n            if d >= 49 and d <= 58 then\n              move room(y + 1, x + 1) to p\n              evaluate true\n                when y0 = -1\n                  move y to y0\n                  move x to x0\n                when y0 = y and x0 = x\n                  exit perform\n              end-evaluate\n            else\n              if p <> '#' then\n                move p to room(y + 1, x + 1)\n              end-if\n            end-if\n            add dy to y\n            add dx to x\n          end-perform\n      \n          perform varying y from 0 until y >= h\n              after x from 0 until x >= w\n            evaluate true\n              when room(y + 1, x + 1) = 'U'\n                add 1 to r(function ord(room(1, x + 1)) - 48)\n              when room(y + 1, x + 1) = 'D'\n                add 1 to r(function ord(room(h, x + 1)) - 48)\n              when room(y + 1, x + 1) = 'R'\n                add 1 to r(function ord(room(y + 1, w)) - 48)\n              when room(y + 1, x + 1) = 'L'\n                add 1 to r(function ord(room(y + 1, 1)) - 48)\n            end-evaluate\n          end-perform\n      \n          goback.\n       end program Cockroaches.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59ad7d2e07157af687000070":[{"id":22040,"user_id":50,"body":"       identification division.\n       program-id. Sentencify.\n       data division.\n       local-storage section.\n       01  i                 usage index value 1.\n      \n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(10) occurs 10 times \n                              depending numWords indexed j.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resChars       pic x(110).\n      \n       procedure division using wordsTable result.\n      \n          initialize resChars\n          set resLen to 110\n          perform varying j from 1 until j > numWords\n              string function trim(word(j) trailing) ' '\n              into resChars with pointer i\n          end-perform\n          compute resLen = function max(0, i - 1)\n          move function upper-case(resChars(1:1)) to resChars(1:1)\n          move '.'to resChars(resLen:1).\n      \n       end program Sentencify.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22041,"user_id":53,"body":"       identification division.\n       program-id. Sentencify.\n       data division.\n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(10) occurs 10 times \n                              depending numWords indexed i j.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resChars       pic x(110).\n       procedure division using wordsTable result.\n          initialize resChars\n          set resLen to 110\n          set i to 1\n          perform varying j from 1 until j > numWords\n          string function trim(word(j)) ' ' into resChars with pointer i\n          end-perform\n          move function max(0, i - 1) to resLen\n          move function upper-case(resChars(1:1)) to resChars(1:1)\n          move '.'to resChars(resLen:1)\n          goback.\n       end program Sentencify.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22042,"user_id":168,"body":"       identification division.\n       program-id. Sentencify.\n       data division.\n      \n       linkage section.\n       01  wordsTable.\n           05  numWords       pic 9(2).\n           05  word           pic a(10) occurs 10 times \n                                        depending on numWords indexed i.\n       01  result.\n           05  resLen         pic 9(3).\n           05  resChar        pic x\n               occurs 110 times depending on resLen indexed j.\n      \n       procedure division using wordsTable result.\n          move 4 to j\n          move 110 to resLen\n          perform varying i from 1 until i > numWords\n              string word(i) delimited by space ' ' \n                into result pointer j\n          end-perform\n          compute resLen = j - 4\n          move '.' to result(j - 1:1)\n          move function upper-case(result(4:1)) to result(4:1)\n          goback.\n       end program Sentencify.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59afff65f1c8274f270020f5":[{"id":22043,"user_id":421,"body":"       identification division.\n       program-id. spinning-rings.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 i           pic S9(8).\n       01 j           pic 9(8).   \n       linkage section.\n       01 inner-max   pic 9(8).\n       01 outer-max   pic 9(8).\n       01 result      pic 9(8).\n       procedure division using inner-max outer-max result.\n           move inner-max to i\n           move 1 to j result          \n           perform until i = j\n               subtract 1 from i\n               if i = -1 then\n                   move inner-max to i\n               end-if\n               compute j = function rem(j + 1, outer-max + 1)\n               add 1 to result      \n           end-perform.\n       end program spinning-rings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22044,"user_id":168,"body":"       identification division.\n       program-id. spinning-rings.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       linkage section.\n       01 inner-max   pic 9(8).\n       01 outer-max   pic 9(8).\n       01 result      pic 9(8).\n       procedure division using inner-max outer-max result.\n          perform with test after varying result from 1 by 1 until a = b\n              if a = 0 then \n                compute a = inner-max\n              else\n                subtract 1 from a \n              end-if\n              add 1 to b\n              if b > outer-max then compute b = 0 end-if\n          end-perform.\n       end program spinning-rings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22045,"user_id":53,"body":"       identification division.\n       program-id. spinning-rings.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 im          pic S9(8).\n       01 om          pic 9(8).\n       linkage section.\n       01 inner-max   pic 9(8).\n       01 outer-max   pic 9(8).\n       01 result      pic 9(8).\n       procedure division using inner-max outer-max result.\n          perform until result > 0\n            add 1 to i\n            add -1 to im\n            add 1 to om\n            if im < 0 then move inner-max to im end-if\n            if om > outer-max then move 0 to om end-if\n            if im = om then move i to result end-if\n          end-perform\n          goback.\n       end program spinning-rings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22046,"user_id":50,"body":"       identification division.\n       program-id. spinning-rings.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 o           pic 9(8).\n       linkage section.\n       01 inner-max   pic 9(8).\n       01 outer-max   pic 9(8).\n       01 result      pic 9(8).\n       procedure division using inner-max outer-max result.\n      \n          move inner-max to i\n          move 1 to o\n          perform varying result from 1 by 1 until i = o\n            if i = 0 then move inner-max to i\n               else subtract 1 from i end-if\n            if o = outer-max then move 0 to o\n               else add 1 to o end-if\n          end-perform\n      \n          goback.\n       end program spinning-rings.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59b0b7cd2a00d219ab0000c5":[{"id":22047,"user_id":168,"body":"       identification division.\n       program-id. spinning-rings.\n      \n       data division.\n       working-storage section.\n       01 r           pic 9(20).\n\n       linkage section.\n       01 n           pic 9(20).\n       01 m           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n m result.\n          add 1 to m n\n          if m < n\n              compute r = function mod(n, m)\n              evaluate true\n                when function mod(m + r, 2) = 0\n                    compute result = n - m + (m - r) \/ 2\n                when function mod(r, 2) = 0\n                    compute result = n - r \/ 2\n                when other\n                    compute result = 2 * n - (m\n                        + function mod(2 * r + 1, m) - 1) \/ 2\n              end-evaluate\n          else\n              compute r = function mod(m, n)\n              evaluate true\n                when function mod(n, 2) = 0\n                    compute result = n \/ 2\n                when r = 0\n                    compute result = m\n                when function mod(r, 2) = 1\n                    compute result = m + (n - r) \/ 2\n                when other\n                    compute result = m + n - r \/ 2\n              end-evaluate\n          end-if.\n       end program spinning-rings.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22048,"user_id":53,"body":"       identification division.\n       program-id. spinning-rings.\n       environment division.\n       configuration section.\n       repository. function mod intrinsic.\n       data division.\n       local-storage section.\n       01 inner       pic 9(20).\n       01 outer       pic 9(20).\n       01 jump        pic 9(20).\n       linkage section.\n       01 inner-max   pic 9(20).\n       01 outer-max   pic 9(20).\n       01 result      pic 9(20).\n       procedure division using inner-max outer-max result.\n          move inner-max to inner\n          move 1 to outer\n          move 1 to result\n          perform until inner = outer\n            evaluate true\n              when outer > inner-max\n                compute jump = outer-max + 1 - outer\n              when inner > outer-max\n                compute jump = inner - outer-max\n              when inner > outer\n                compute jump = (inner - outer + 1) \/ 2\n              when inner = (outer-max + 1 - outer)\n                move inner to jump\n              when other\n                compute jump = \n                  function min(inner + 1, outer-max + 1 - outer)\n            end-evaluate\n            compute outer = mod (outer + jump, outer-max + 1)\n            compute inner = mod (inner - jump, inner-max + 1)\n            add jump to result\n          end-perform\n          goback.\n       end program spinning-rings.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22049,"user_id":50,"body":"       identification division.\n       program-id. spinning-rings.\n      \n       data division.\n       local-storage section.\n       01 x           pic 9(20).\n       01 y           pic 9(20).\n       01 z           pic 9(20).\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 c           pic 9(20).\n       01 d           pic 9(20).\n\n       linkage section.\n       01 inner-max   pic 9(20).\n       01 outer-max   pic 9(20).\n       01 result      pic 9(20).\n       procedure division using inner-max outer-max result.\n      \n      * implementation of the author's Python's reference solution \n      \n          add 1 to outer-max giving x\n          add 1 to inner-max giving y\n          compute z = function rem(outer-max, y)\n      \n          if function rem(y, 2) = 1\n              compute a = x - 1 + function integer((y + 1) \/ \n                             (2 - function rem(z, 2))) +\n                          z \/ 2 - z\n          else\n              compute a = y \/ 2\n          end-if\n          \n          if function rem(x, 2) = 1\n              move y to b\n          else\n              compute b = y * (1 + function rem(y, 2)) - x \/ 2\n          end-if\n      \n          compute c = x \/ (2 - function rem(x, 2))\n\n          if b < a\n              move 0 to d\n          else\n              compute d = c * function integer((b - a) \/ c)\n          end-if\n          \n          compute result = a + d\n\n          goback.\n       end program spinning-rings.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59b11f57f322e5da45000254":[{"id":22050,"user_id":421,"body":"       identification division.\n       program-id. onesComplement.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  n.\n           03 n-length      pic 9(2).\n           03 n-bits.\n               05 n-bit pic x occurs 1 to 16 times \n                              depending on n-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-bits.\n               05 res-bit pic x occurs 1 to 16 times \n                              depending on res-length.\n\n       procedure division using n result.\n           move n to result\n           inspect res-bits converting \"10\" to \"01\".\n       end program onesComplement.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22051,"user_id":null,"body":"       identification division.\n       program-id. onesComplement.\n\n       data division.\n       working-storage section.\n       01  k                pic 9(2).\n      \n       linkage section.\n       01  n.\n           03 n-length      pic 9(2).\n           03 n-bits.\n               05 n-bit pic x occurs 1 to 16 times \n                              depending on n-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-bits.\n               05 res-bit pic x occurs 1 to 16 times \n                              depending on res-length.\n      \n       procedure division using n result.\n           move n-length to res-length\n           perform varying k from 1 by 1 until k > n-length\n             if (n-bit(k:1) = '1')\n               move '0' to res-bit(k:1)\n             else move '1' to res-bit(k:1)\n             end-if\n           end-perform\n           goback.\n       end program onesComplement.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22052,"user_id":168,"body":"       identification division.\n       program-id. onesComplement.\n\n       data division.\n       linkage section.\n       01  n.\n           03 n-length      pic 9(2).\n           03 n-bits.\n               05 n-bit pic 9 occurs 1 to 16 times \n                              depending on n-length indexed i.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-bits.\n               05 res-bit pic 9 occurs 1 to 16 times \n                              depending on res-length.\n\n       procedure division using n result.\n           move n-length to res-length\n           perform varying i from 1 until i > n-length\n               subtract 1 from n-bit(i) giving res-bit(i)\n           end-perform.\n       end program onesComplement.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22053,"user_id":null,"body":"       identification division.\n       program-id. onesComplement.\n\n       data division.\n       linkage section.\n       01  n.\n           03 n-length      pic 9(2).\n           03 n-bits.\n               05 n-bit pic x occurs 1 to 16 times \n                              depending on n-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-bits.\n               05 res-bit pic x occurs 1 to 16 times \n                              depending on res-length.\n\n       procedure division using n result.\n           move n to result\n           inspect res-bits converting \"01\" to \"10\"\n           .\n       end program onesComplement.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22054,"user_id":53,"body":"       identification division.\n       program-id. onesComplement.\n       data division.\n       linkage section.\n       01  n.\n           03 n-length      pic 9(2).\n           03 n-bits.\n               05 n-bit pic x occurs 1 to 16 times \n                              depending on n-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-bits.\n               05 res-bit pic x occurs 1 to 16 times \n                              depending on res-length.\n       procedure division using n result.\n          initialize result\n          move n to result\n          inspect res-bits converting '10' to '01'.\n       end program onesComplement.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22055,"user_id":50,"body":"       identification division.\n       program-id. onesComplement.\n\n       data division.\n       linkage section.\n       01  n.\n           03 n-length      pic 9(2).\n           03 n-bits.\n               05 n-bit pic x occurs 1 to 16 times \n                              depending on n-length.\n       01  result.\n           03 res-length      pic 9(2).\n           03 res-bits.\n               05 res-bit pic x occurs 1 to 16 times \n                              depending on res-length.\n\n       procedure division using n result.\n           move n to result\n           inspect res-bits converting '01'  to '10'\n           goback.\n       end program onesComplement.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59b401e24f98a813f9000026":[{"id":22056,"user_id":53,"body":"       identification division.\n       program-id. compute-depth.\n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 m           pic 9(8).\n       01 d           pic 9(8).\n       01 bin1        usage binary-short.\n       01 bin2        usage binary-short.\n       01 mask        pic 9(8) value 1023.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          perform until mask = 0\n            add 1 to result\n            compute a = n * result\n            perform until a = 0\n              compute d = function rem(a, 10)\n              compute a = a \/ 10\n              compute m = 2 ** d\n              move mask to bin1\n              move m to bin2\n              call 'CBL_AND' using bin1 bin2 by value 4\n              if bin2 > 0 then\n                move m to bin2\n                call 'CBL_XOR' using bin1 bin2 by value 4\n                move bin2 to mask\n              end-if\n            end-perform\n          end-perform\n          goback.\n       end program compute-depth.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22057,"user_id":50,"body":"       identification division.\n       program-id. compute-depth.\n      \n       data division.\n       local-storage section.\n       01 bin1       usage binary-short.\n       01 bin2       usage binary-short.\n       01 c           pic 9(8).\n       01 m           pic 9(8).\n       01 r           pic 9(8).\n       01 x           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          move n to m\n          \n          perform until m = 0\n              divide 10 into m giving m remainder r\n              compute r = 2 ** r\n              move c to bin1\n              move r to bin2\n              call 'CBL_AND' using bin1 bin2 by value 2\n              if bin2 = 0\n                add r to c\n              end-if\n          end-perform\n          \n          move n to m\n          perform varying result from 1 by 1 until c = 1023\n              add n to m\n              move m to x\n              perform until x = 0\n                  divide 10 into x giving x remainder r\n                  compute r = 2 ** r\n                  move c to bin1\n                  move r to bin2\n                  call 'CBL_AND' using bin1 bin2 by value 2\n                  if bin2 = 0\n                      add r to c\n                  end-if\n              end-perform\n          end-perform\n      \n          goback.\n       end program compute-depth.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22058,"user_id":168,"body":"       identification division.\n       program-id. compute-depth.\n      \n       data division.\n       local-storage section.\n       01 digits.\n          05 ds pic 9 occurs 10 times.\n       01 v           pic 9(16).\n       01 i           pic 99.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          perform with test after varying result from 1 by 1 \n                  until digits = '1111111111'\n             compute v = n * result\n             compute i = 1\n             inspect v tallying i for leading '0'\n             perform varying i from i by 1 until i > length of v\n                compute ds(function numval(v(i:1)) + 1) = 1\n             end-perform\n          end-perform.\n       end program compute-depth.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59b7ae14bf10a402d40000f3":[{"id":22059,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I            PIC 9(10).\n       01 SQ           PIC 9(6).\n       LINKAGE SECTION.\n       01 N            PIC s9(8).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           SET RESULT TO 1\n           IF N < 2 THEN\n               SET RESULT TO 0\n               GOBACK\n           END-IF\n           COMPUTE SQ = FUNCTION SQRT(N)\n           PERFORM VARYING I FROM 2 BY 1 UNTIL I > SQ\n               IF FUNCTION REM(N, I) = 0 THEN\n                   SET RESULT TO 0\n                   GOBACK\n               END-IF\n           END-PERFORM.\n       END PROGRAM IS-PRIME.\n      \n       identification division.\n       program-id. is-twin-prime.\n       AUTHOR \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 i           pic s9(8).\n       01 j           pic s9(8).\n       01 tdown       pic 9.\n       01 tcurr       pic 9.\n       01 tup         pic 9.\n       linkage section.\n       01 n           pic s9(8).\n       01 result      pic 9.\n      \n       procedure division using n result.\n           initialize result\n           compute i = n - 2\n           compute j = n + 2\n           call \"IS-PRIME\" using by content i\n                           by reference tdown\n           call \"IS-PRIME\" using by content n\n                           by reference tcurr\n           call \"IS-PRIME\" using by content j\n                           by reference tup\n           if tcurr = 1 and (tup = 1 or tdown = 1) then\n               move 1 to result\n           end-if.\n       end program is-twin-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22060,"user_id":168,"body":"       identification division.\n       program-id. is-twin-prime.\n      \n       data division.\n       working-storage section.\n       01 d           pic 9(8).\n       01 pic 9.\n          88 prime value 1 when set to false 0.\n\n       linkage section.\n       01 n           pic s9(8).\n       01 result      pic 9.\n      \n       procedure division using n result.\n          move 0 to result\n          perform is-prime\n          if prime\n              add 2 to n\n              perform is-prime\n              if not prime\n                  subtract 4 from n\n                  perform is-prime\n              end-if\n              if prime then move 1 to result end-if\n          end-if\n          goback.\n       is-prime.\n          set prime to true\n          perform varying d from 2 until d * d > n\n              if function mod(n, d) = 0\n                  set prime to false\n                  exit perform\n              end-if\n          end-perform\n          if n < 2\n              set prime to false \n          end-if.\n       end program is-twin-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22061,"user_id":53,"body":"       identification division.\n       program-id. is-twin-prime.\n       data division.\n       local-storage section.\n       01 p           pic s9(8).\n       linkage section.\n       01 n           pic s9(8).\n       01 r           pic 9.\n       procedure division using n r.\n          move 0 to r\n          call 'IS-PRIME' using by content n by reference r\n          if r = 0 goback end-if\n          add 2 to n giving p\n          call 'IS-PRIME' using by content p by reference r\n          if r = 1 goback end-if\n          subtract 2 from n giving p\n          call 'IS-PRIME' using by content p by reference r\n          goback.\n       end program is-twin-prime.\n      \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       local-storage section.\n       01 d            pic 9(8).\n       LINKAGE SECTION.\n       01 N            PIC S9(8).\n       01 R            PIC 9.\n       PROCEDURE DIVISION USING N R.\n          move 0 to r\n          if n < 2 then goback end-if\n          perform varying d from 2 by 1 until d * d > n\n             if function mod(n, d) = 0 then goback end-if\n          end-perform\n          move 1 to r\n          goback.\n       END PROGRAM IS-PRIME.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22062,"user_id":50,"body":"       identification division.\n       program-id. is-twin-prime.\n      \n       data division.\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9.\n      \n       procedure division using n result.\n      \n          call 'is-prime'\n              using by content n\n                    by reference result\n          if result = 0\n            goback\n          end-if\n      \n          add 2 to n\n          call 'is-prime'\n              using by content n\n                    by reference result\n          if result = 1\n            goback\n          end-if\n      \n          subtract 4 from n\n          call 'is-prime'\n              using by content n\n                    by reference result\n      \n          goback.\n       end program is-twin-prime.\n\n\n       identification division.\n       program-id. is-prime.\n       data division.\n       local-storage section.\n       01 p           pic 9(08).\n       01 sqrt        pic 9(08).\n       linkage section.\n       01 n            pic s9(8).\n       01 result       pic 9.\n       procedure division using n result.\n           evaluate true\n              when n < 2\n                  move 0 to result\n              when n = 2\n                  move 1 to result\n              when function rem(n, 2) = 0\n                  move 0 to result\n              when other\n                  compute sqrt = function sqrt(n) + 1\n                  move 1 to result\n                  perform varying p from 3 by 2 until p > sqrt\n                      if function rem(n, p) = 0\n                          move 0 to result\n                          exit perform\n                      end-if\n                  end-perform\n           end-evaluate\n      \n           goback.\n       end program is-prime.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59b844528bcb7735560000a0":[{"id":22063,"user_id":53,"body":"       identification division.\n       program-id. IsNice.\n       data division.\n       local-storage section.\n       01  b           pic 9.\n       linkage section.\n       01  arr.\n           03  len     pic 9(2).\n           03  num     pic s9(2) occurs 0 to 20 times\n                                 depending on num\n                                 indexed i j.\n       01 result       pic 9.\n       procedure division using arr result.\n          initialize result\n          if len = 0 then goback end-if\n          perform varying i from 1 until i > len\n            set b to 0\n            perform varying j from 1 until j > len or b = 1\n              if function abs(num(j) - num(i)) = 1 then\n                set b to 1\n              end-if\n            end-perform\n            if b = 0 then goback end-if\n          end-perform\n          set result to 1\n          goback.\n       end program IsNice.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22064,"user_id":50,"body":"       identification division.\n       program-id. IsNice.\n      \n       data division.\n       local-storage section.\n       01  magic.\n           03  l pic 9(2).\n           03  cpy occurs 0 to 20 times depending on l\n                                        indexed by i j.\n               05 n pic s9(2).\n       01  m        pic s9(2).\n      \n       linkage section.\n       01  arr.\n           03  arrLen  pic 9(2).\n           03  num     pic s9(2) occurs 0 to 20 times\n                                 depending on arrLen.\n       01 result       pic 9.\n      \n       procedure division using arr result.\n      \n          initialize result\n          if arrLen < 2 goback end-if\n      \n          move arr to magic\n          sort cpy on ascending key n\n          move n(1) to m\n          set i to 1\n          perform varying j from 2 until j > l\n              if n(j) <> m\n                 add 1 to i\n                 move n(j) to m n(i)\n              end-if\n          end-perform\n          move i to l\n      \n          if n(1) <> n(2) - 1 or n(l) <> n(l - 1) + 1 goback end-if\n      \n          perform varying i from 2 until i = l\n              if n(i) <> n(i - 1) + 1 and n(i) <> n(i + 1) - 1\n                 goback\n              end-if\n          end-perform\n      \n          move 1 to result\n      \n          goback.\n       end program IsNice.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59c287b16bddd291c700009a":[{"id":22065,"user_id":421,"body":"       identification division.\n       program-id. ice-brick-volume.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division using radius bottle-len rim-len result.\n           COMPUTE result = (bottle-len - rim-len) * 2 * radius ** 2.\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22066,"user_id":null,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n          compute result =  (radius * radius * 2) * \n                            (bottle-len - rim-len)\n          goback.\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22067,"user_id":null,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n\n       COMPUTE result = 2 * (radius ** 2) * (bottle-len - rim-len).\n\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22068,"user_id":76,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n          compute result = radius ** 2 * 2 *\n            (bottle-len - rim-len).\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22069,"user_id":null,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n          compute result = 2 * radius * radius * (bottle-len - rim-len).\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22070,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. ice-brick-volume.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 RADIUS           PIC 9(3).\n       01 BOTTLE-LEN       PIC 9(3).\n       01 RIM-LEN          PIC 9(3).\n       01 RESULT           PIC 9(8).\n       PROCEDURE DIVISION USING RADIUS BOTTLE-LEN RIM-LEN RESULT.\n           COMPUTE RESULT ROUNDED = ((RADIUS ** 2 * 2) ** .5) ** 2\n           COMPUTE RESULT = RESULT * (BOTTLE-LEN - RIM-LEN).\n       END PROGRAM ice-brick-volume.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22071,"user_id":713,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 r                pic 9(3).\n       01 b                pic 9(3).\n       01 l                pic 9(3).\n       01 result           pic 9(8).\n       procedure division using r b l result.\n          compute result = 2 * r * r * (b - l).\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22072,"user_id":168,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n          compute result = 2 * radius ** 2 * (bottle-len - rim-len).\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22073,"user_id":50,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n\n          compute result = 2 * ( bottle-len - rim-len) * radius ** 2\n\n          goback.\n       end program ice-brick-volume.\n     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22074,"user_id":53,"body":"       identification division.\n       program-id. ice-brick-volume.\n\n       data division.\n       linkage section.\n       01 radius           pic 9(3).\n       01 bottle-len       pic 9(3).\n       01 rim-len          pic 9(3).\n       01 result           pic 9(8).\n       procedure division \n          using radius bottle-len rim-len result.\n          compute result = (bottle-len - rim-len)\n            * 2 * radius ** 2\n          goback.\n       end program ice-brick-volume.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59c5f4e9d751df43cf000035":[{"id":22075,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  n               pic 9(4).\n       01  c               pic a.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 chr          pic a occurs 0 to 1000 times \n                                 depending on s-length\n                                 indexed by i.\n       01  m               pic 9(4).\n       procedure division using s m.\n      \n          initialize m\n          perform varying i from 1 until i > s-length\n            move chr(i) to c\n            if c = 'a' or c = 'e' or c = 'u' or c = 'i' or c = 'o' then\n              add 1 to n\n            else\n              perform vowel\n            end-if\n          end-perform\n          perform vowel\n          goback.\n      \n        vowel.\n          compute m = function max(m, n)\n          set n to 0\n          .\n      \n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22076,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  vowels pic a(5) value 'aeiou'.\n       01  cur    pic 9(4).\n       01  a      pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 chr          pic a occurs 0 to 1000 times \n                           depending on s-length indexed i.\n       01  result          pic 9(4).\n      \n       procedure division using s result.\n      \n          move 0 to cur, result, a\n          perform varying i from 1 until i > s-length\n            move 0 to a\n            inspect vowels tallying a for all chr(i)\n            if a = 1       add  1  to cur \n                           move function max(cur, result) to result\n            else           move 0  to cur   end-if\n          end-perform\n      \n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59c9e82ea25c8c05860001aa":[{"id":22077,"user_id":50,"body":"       identification division.\n       program-id. jump-to.\n       data division.\n      \n       linkage section.\n       01  x                 pic 9(6).\n       01  y                 pic 9(6).\n       01  result            pic 9(6).\n      \n       procedure division using x y result.\n      \n          perform varying result from 0 until y <= x\n            if function mod(y, 2) = 0 and y >= 2 * x \n                divide 2 into y\n            else\n                subtract 1 from y\n            end-if\n          end-perform.\n      \n       end program jump-to.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22078,"user_id":53,"body":"       identification division.\n       program-id. jump-to recursive.\n       data division.\n       local-storage section.\n       01  a                 pic 9(6).\n       linkage section.\n       01  x                 pic 9(6).\n       01  y                 pic 9(6).\n       01  result            pic 9(6).\n      \n       procedure division using x y result.\n          initialize result\n          if x = y then goback end-if\n          if function rem (y, 2) = 0 and y \/ 2 >= x then\n            divide 2 into y giving a\n          else\n            subtract 1 from y giving a\n          end-if\n          call 'jump-to' using by content x a by reference result\n          add 1 to result\n          goback.\n       end program jump-to.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22079,"user_id":76,"body":"       identification division.\n       program-id. jump-to.\n       data division.\n      \n       linkage section.\n       01  x                 pic 9(6).\n       01  y                 pic 9(6).\n       01  result            pic 9(6).\n      \n       procedure division using x y result.\n         initialize result\n         perform until x = y\n           if function rem(y, 2) = 1 then\n             add 1 to result\n             subtract 1 from y\n           end-if\n           if x * 2 <= y then\n             add 1 to result\n             divide 2 into y\n           else\n             compute result = result + y - x\n             move x to y\n           end-if\n         end-perform.\n       end program jump-to.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59cd0535328801336e000649":[{"id":22080,"user_id":421,"body":"       identification division.\n       program-id. Interest.\n      \n       data division.\n       linkage section.\n       01 p                 pic 9(5).\n       01 r                 pic 9v9(2).\n       01 n                 pic 9(2).\n       01  result.\n           03 totSimpleInt  pic 9(6).\n           03 totCompndInt  pic 9(20).\n      \n       procedure division using p r n result.\n          initialize result\n          compute totSimpleInt rounded = FUNCTION ABS(p + p * r * n)\n          compute totCompndInt rounded = FUNCTION ABS(p * (1 + r) ** n).\n       end program Interest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22081,"user_id":50,"body":"       identification division.\n       program-id. Interest.\n      \n       data division.\n       linkage section.\n       01 p                 pic 9(5).\n       01 r                 pic 9v9(2).\n       01 n                 pic 9(2).\n       01  result.\n           03 totSimpleInt  pic 9(6).\n           03 totCompndInt  pic 9(20).\n      \n       procedure division using p r n result.\n      \n          compute totSimpleInt rounded = \n                        function abs(p * (1 + r * n))\n          compute totCompndInt rounded = \n                        function abs(p * function abs(1 + r) ** n).\n      \n       end program Interest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22082,"user_id":53,"body":"       identification division.\n       program-id. Interest.\n       data division.\n       linkage section.\n       01 p                 pic 9(5).\n       01 r                 pic 9v9(2).\n       01 n                 pic 9(2).\n       01  result.\n           03 a             pic 9(6).\n           03 b             pic 9(20).\n       procedure division using p r n result.\n          compute a rounded = function abs(p * (1 + r * n))\n          compute b rounded = function abs(p * function abs(1 + r) ** n)\n          goback.\n       end program Interest.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59da47fa27ee00a8b90000b4":[{"id":22083,"user_id":421,"body":"       identification division.\n       program-id. solve.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chars        pic x occurs 4 to 99 times \n                                 depending on s-length\n                                 indexed by i.\n       01  result          pic 9(4).\n      \n       procedure division using s result.\n           initialize result\n           perform varying i from 1 by 1 until i > s-length\n               if function rem(chars(i), 2) = 1 then\n                   add i to result\n               end-if\n           end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22084,"user_id":76,"body":"       identification division.\n       program-id. solve.\n       data division.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chars        pic x occurs 4 to 99 times \n                                 depending on s-length\n                                 indexed by i.\n       01  result          pic 9(4).\n      \n       procedure division using s result.\n         initialize result\n         perform varying i from 1 by 1 until i > s-length\n           if chars(i) = '1' or chars(i) = '3' or chars(i) = '5'\n             or chars(i) = '7' or chars(i) = '9' then\n               add i to result\n           end-if\n         end-perform\n         goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22085,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  m               pic 9.\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chars        pic x occurs 4 to 99 times \n                                 depending on s-length\n                                 indexed by i.\n       01  result          pic 9(4).\n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > s-length\n            move chars(i) to m\n            if function rem(m, 2) <> 0 then\n              add i to result \n            end-if\n          end-perform\n          goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22086,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  n              pic 9.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 chars        pic x occurs 4 to 99 times \n                                 depending on s-length indexed i.\n       01  result          pic 9(4).\n      \n       procedure division using s result.\n      \n          move 0 to result\n          perform varying i from 1 until i > s-length\n             move chars(i) to n\n             if function rem(n, 2) = 1 add i to result end-if\n          end-perform\n      \n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59dc8288fc3c49cc3f000039":[{"id":22087,"user_id":168,"body":"       identification division.\n       program-id. SortArray.\n       data division.\n      \n       linkage section.\n       01  initialArray.\n           05 len            pic 9(2).\n           05 xs1            pic x occurs 0 to 50 times \n                                      depending on len indexed i.\n       01  sortingArray.\n           05 xs2            pic 9(2) occurs 0 to 50 times \n                                      depending on len.\n       01  result.\n           05 resLength      pic 9(2).\n           05 res            pic x    occurs 0 to 50 times \n                                      depending on resLength.\n      \n       procedure division using initialArray sortingArray result.\n          move len to resLength\n          perform varying i from 1 until i > len\n              move xs1(i) to res(xs2(i))\n          end-perform.\n       end program SortArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22088,"user_id":53,"body":"       identification division.\n       program-id. SortArray.\n       data division.\n       linkage section.\n       01  initialArray.\n           05 len            pic 9(2).\n           05 xs             pic x occurs 0 to 50 times \n                                      depending on len.\n       01  sortingArray.\n           05 ys             pic 9(2) occurs 0 to 50 times \n                                      depending on len.\n       01  result.\n           05 resLength      pic 9(2).\n           05 res            pic x    occurs 0 to 50 times \n                             depending on resLength \n                             indexed by i.\n       procedure division using initialArray sortingArray result.\n          move len to resLength\n          perform varying i from 1 until i > len\n            move xs(i) to res(ys(i))\n          end-perform\n          goback.\n       end program SortArray.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22089,"user_id":50,"body":"       identification division.\n       program-id. SortArray.\n       data division.\n      \n       linkage section.\n       01  initialArray.\n           05 len            pic 9(2).\n           05 xs1            pic x occurs 0 to 50 times \n                                      depending on len.\n       01  sortingArray.\n           05 xs2            pic 9(2) occurs 0 to 50 times \n                                      depending on len.\n       01  result.\n           05 resLength      pic 9(2).\n           05 res            pic x    occurs 0 to 50 times \n                             depending on resLength indexed by i.\n      \n       procedure division using initialArray sortingArray result.\n      \n          move len to resLength\n          perform varying i from 1 until i > len\n              move xs1(i) to res(xs2(i))\n          end-perform\n      \n          goback.\n       end program SortArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59de469cfc3c492da80000c5":[{"id":22090,"user_id":168,"body":"       identification division.\n       program-id. Compress.\n      \n       data division.\n       working-storage section.\n       01  w        pic x(30).\n       01  len      usage index.\n       01  i        usage index.\n       01  j        usage index.\n       01  ws-len   usage index.\n       01  ws pic x(30) occurs 0 to 500 times \n                        depending on ws-len indexed k.\n       01  ind      pic zz9.\n      \n       linkage section.\n       01  sntence     pic x(500).\n       01  result      pic x(80).\n      \n       procedure division using sntence result.\n          initialize result\n          move function lower-case(sntence) to sntence\n          move 0 to ws-len\n          move 1 to i j\n          perform with test after until len = 0\n              move 0 to len\n              unstring sntence delimited by all ' '\n                  into w count in len with pointer i\n              if len > 0\n                  move 1 to k\n                  search ws varying k\n                      at end \n                          move ws-len to ind\n                          add 1 to ws-len\n                          move w to ws(ws-len)\n                      when ws(k) = w\n                          subtract 1 from k giving ind\n                  end-search\n                  string function trim(ind) into result with pointer j\n              end-if\n          end-perform.\n       end program Compress.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22091,"user_id":50,"body":"       identification division.\n       program-id. Compress.\n      \n       data division.\n       local-storage section.\n       01  token    pic x(90).\n       01  s        pic x(500).\n       01  i        usage index.\n       01  l        pic 9(3).\n       01  z        pic z(2)9.\n       01  wordsTable.\n           05  t    pic 9(2).\n           05  w    pic x(90) occurs 0 to 90 times\n                            depending on t indexed by j k.\n       01  uniqueWordsTable.\n           05  len  pic 9(2).\n           05  wu   pic x(90) occurs 0 to 90 times\n                    depending on len indexed by h.\n      \n       linkage section.\n       01  sn       pic x(500).\n       01  result   pic x(80).\n      \n       procedure division using sn result.\n      \n          initialize result\n      \n          compute l = length of function trim(sn trailing)\n      \n          if l = 0 goback end-if\n      \n          move function lower-case(sn) to s\n      \n          set i to 1\n          perform until i > l\n              unstring s\n                    delimited by space\n                    into token\n                    with pointer i\n              end-unstring\n              if token <> space\n                 add 1 to t\n                 move token to w(t)\n              end-if\n          end-perform\n      \n          move 1 to len\n          move w(1) to wu(1)\n          set i to 1\n          perform varying j from 2 until j > t\n              perform varying k from 1 until k = j\n                if w(k) = w(j) exit perform end-if\n              end-perform\n              if k = j\n                add 1 to len\n                move w(k) to wu(len)\n              end-if\n          end-perform\n      \n          move '0' to result\n          set i to 2\n          perform varying j from 2 until j > t\n          perform varying h from 1 until h > len\n            if wu(h) = w(j)\n               compute z = h - 1\n               string function trim(z) into result with pointer i\n               exit perform\n            end-if\n          end-perform end-perform\n      \n          goback.\n       end program Compress.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59eb28fb0a2bffafbb0000d6":[{"id":22092,"user_id":50,"body":"       identification division.\n       program-id. SortByBinaryOnes.\n       data division.\n       working-storage section.\n       01 n                  pic 9(6).\n       01 r                  pic 9.\n       01 tbl.\n          05  keys  occurs 0 to 30 times depending arr-length.\n              07  popcnt     pic 99.\n              07  val        pic 9(6).\n          \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(6) occurs 0 to 30 times \n                                      depending arr-length\n                                      indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(6) occurs 0 to 30 times \n                                     depending res-length.\n      \n       procedure division using arr result.\n          \n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n            compute val of keys(i), n = xs(i)\n            move 0 to popcnt of keys(i)\n            perform until n = 0\n              divide n by 2 giving n remainder r\n              add r to popcnt of keys(i)\n            end-perform\n          end-perform\n          \n          sort keys descending popcnt ascending val\n          \n          perform varying i from 1 until i > arr-length\n            move val of keys(i) to res(i)\n          end-perform\n      \n          goback.\n       end program SortByBinaryOnes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22093,"user_id":53,"body":"       identification division.\n       program-id. SortByBinaryOnes.\n       data division.\n       working-storage section.\n       01 lst.\n          05  lst-length     pic 9(2).\n          05  ns             occurs 0 to 30 times\n                             depending lst-length.\n              07  a          pic 9(2).\n              07  b          pic 9(6).\n       01 m                  pic 9(6).\n       01 d                  pic 9.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(6) occurs 0 to 30 times \n                                      depending arr-length\n                                      indexed by i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(6) occurs 0 to 30 times \n                                      depending res-length.\n       procedure division using arr result.\n          initialize result\n          move arr-length to res-length lst-length\n          perform varying i from 1 until i > arr-length\n            move xs(i) to m\n            move xs(i) to b of ns(i)\n            set a of ns(i) to 0\n            perform until m = 0\n              divide 2 into m giving m remainder d\n              add d to a of ns(i)\n            end-perform\n          end-perform\n          sort ns descending key a ascending key b\n          perform varying i from 1 until i > lst-length\n            move b of ns(i) to res(i)\n          end-perform.\n       end program SortByBinaryOnes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59ec2d112332430ce9000005":[{"id":22094,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       working-storage section.\n       01 x           pic 9(20).\n       01 y           pic 9(20).\n       01 d           pic 9(20).\n       linkage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9.\n       procedure division using a b result.\n          compute d = 1\n          perform with test after until d <= 1\n              divide d into b\n              compute x = a\n              compute y = b\n              perform gcd\n          end-perform\n          if b = 1\n              compute result = 1\n          else\n              compute result = 0\n          end-if\n          goback.\n      \n       gcd.\n          perform until y = 0\n              compute d = x\n              compute x = y\n              compute y = function mod(d, y)\n          end-perform\n          compute d = x.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22095,"user_id":421,"body":"       identification division.\n       program-id. solve.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 i           pic 9(20).\n       linkage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9.\n       procedure division using a b result.\n           move 1 to result\n           move 2 to i\n           if function rem(a, 2) <> function rem(b, 2)\n               move 0 to result\n               goback\n           end-if\n           perform until b = 1\n               perform until function rem(b, i) <> 0\n                   divide i into b\n                   if function rem(a, i) <> 0 then\n                       move 0 to result\n                       goback\n                   end-if\n              end-perform\n              add 1 to i\n           end-perform.           \n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22096,"user_id":null,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(20).\n      \n       linkage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9.\n       procedure division using a b result.\n         set result to 1\n         perform until b = 1\n           perform varying i from 2 until function mod(b, i) = 0\n             continue\n           end-perform\n           divide i into b\n           if function mod(a, i) <> 0\n             set result to 0\n             goback\n         end-perform.\n       end program solve.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22097,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01 n           pic 9(20).\n       01 d           pic 9(20).\n       linkage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9.\n       procedure division using a b result.\n          move 0 to result\n          move b to d\n          call 'gcd' using a d n\n          perform until n <= 1\n            compute b = b \/ n\n            move b to d\n            call 'gcd' using a d n\n          end-perform\n          if b = 1 then move 1 to result end-if\n          goback.\n       end program solve.\n      \n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(20).\n       01 a           pic 9(20).\n       linkage section.\n       01 x           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using x b result.\n           move x to a\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n           move a to result\n           goback.\n       end program gcd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22098,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 g           pic 9(20).\n      \n       linkage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9.\n       procedure division using a b result.\n      \n          call 'gcd' using\n                by content a b\n                by reference g\n      \n          perform until g = 1\n              divide g into b giving b\n              call 'gcd' using\n                    by content a b\n                    by reference g\n          end-perform\n      \n          if b = 1\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program solve.\n      \n      \n       identification division.\n       program-id. gcd.\n       data division.\n       local-storage section.\n       01 c           pic 9(20).\n      \n       linkage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using a b result.\n           perform until b = 0,\n              move b to c,\n              compute b = function rem(a, b),\n              move c to a,\n           end-perform\n           move a to result\n           goback.\n       end program gcd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59f061773e532d0c87000d16":[{"id":22099,"user_id":421,"body":"       identification division.\n       program-id. elevatorDistance.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 2 to 20 times \n                                  depending on arr-length indexed i.\n       01  result            pic 9(3).\n      \n       procedure division using arr result.\n           perform varying i from 2 by 1 until i > arr-length\n               compute result = result + function abs(xs(i) - xs(i - 1))\n           end-perform.\n       end program elevatorDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22100,"user_id":168,"body":"       identification division.\n       program-id. elevatorDistance.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 2 to 20 times \n                                  depending on arr-length indexed i.\n       01  result            pic 9(3).\n      \n       procedure division using arr result.\n          move 0 to result\n          perform varying i from 2 until i > arr-length\n              add function abs(xs(i) - xs(i - 1)) to result\n          end-perform.\n       end program elevatorDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22101,"user_id":53,"body":"       identification division.\n       program-id. elevatorDistance.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 2 to 20 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  r                 pic 9(3).\n       procedure division using arr r.\n          move 0 to r\n          perform varying i from 1 until i = arr-length\n            compute r = r + function abs(xs(i) - xs(i + 1))\n          end-perform\n          goback.\n       end program elevatorDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22102,"user_id":50,"body":"       identification division.\n       program-id. elevatorDistance.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic 99 occurs 2 to 20 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic 9(3).\n      \n       procedure division using arr result.\n      \n          move 0 to result\n          perform varying i from 1 until i = arr-length\n            compute result = result + function abs(xs(i) - xs(i + 1))\n          end-perform\n      \n          goback.\n       end program elevatorDistance.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59f34ec5a01431ab7600005a":[{"id":22103,"user_id":421,"body":"       identification division.\n       program-id. factorial-length.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n           set result to 1\n           if n > 3 then\n              compute result = function integer(n * function log10(n \/ \n              function e) + function log10(2 * function pi * n) \/ 2) + 1\n           end-if.\n       end program factorial-length.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22104,"user_id":50,"body":"       identification division.\n       program-id. factorial-length.\n      \n       data division.\n       local-storage section.\n       01 dbl-pi      pic 9v9(15)    value 6.283185307179586.\n       01 e           pic 9v9(15)    value 2.718281828459045.\n       01 m           pic 9(8)v9(15).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          move n to m\n          compute result rounded mode toward-greater = \n                    function log10(dbl-pi * m) \/ 2.0 +\n                    m * function log10(m \/ e)\n      \n          goback.\n       end program factorial-length.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22105,"user_id":168,"body":"       identification division.\n       program-id. factorial-length.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = function max(1,\n                (function log(2 * function pi * n) \/ 2\n                 + n * (function log(n) - 1)) \/ function log(10) + 1).\n       end program factorial-length.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22106,"user_id":53,"body":"       identification division.\n       program-id. factorial-length.\n      \n       data division.\n       local-storage section.\n       01 c           pic 9v9(15)    value 6.2831853071795.\n       01 e           pic 9v9(15)    value 2.7182818284590.\n       01 m           pic 9(8)v9(15).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          move n to m\n          compute result rounded mode toward-greater = \n                    function log10(c * m) \/ 2 +\n                    m * function log10(m \/ e)\n      \n          goback.\n       end program factorial-length.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59f61aada01431e8c200008d":[{"id":22107,"user_id":168,"body":"       identification division.\n       program-id. solve.\n       data division.\n       working-storage section.\n       01  d  usage index.\n      \n       linkage section.\n       01  n               pic 9(4).\n       01  k               pic 9(3).\n       01  result.\n           05 res-length   pic 9(3).\n           05 xs           pic 9(4) occurs 0 to 100 times\n                                    depending on res-length indexed i.\n      \n       procedure division using n k result.\n           move 0 to res-length\n           compute d = n \/ (k * (k + 1) \/ 2)\n           perform varying d from d by -1 until d = 0\n              if function mod(n, d) = 0\n                  compute res-length = k\n                  perform varying i from 1 until i >= k\n                      compute xs(i) = d * i\n                  end-perform\n                  compute xs(k) = n - k * (k - 1) \/ 2 * d\n                  exit perform\n              end-if\n           end-perform\n           goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22108,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  v               pic 9(4).\n       01  w               pic 9(4).\n       01  z               pic 9(4).\n       linkage section.\n       01  n               pic 9(4).\n       01  k               pic 9(3).\n       01  result.\n           05 res-length   pic 9(3).\n           05 xs           pic 9(4) occurs 0 to 100 times\n                                    depending on res-length\n                                    indexed by i j.\n       procedure division using n k result.\n          initialize result\n          move 0 to res-length\n          move n to v\n          perform varying v from n by -1 until v = 0\n            if function rem (n, v) = 0 and 2 * n >= v * k * (k + 1) then\n              move v to w\n              move 1 to j\n              compute z = v * (k - 1)\n              perform varying i from 1 until w > z\n                move w to xs(j)\n                add 1 to res-length\n                add 1 to j\n                add v to w\n              end-perform\n              compute w = (v * k *(k - 1)) \/ 2\n              compute w = n - w\n              move w to xs(j)\n              add 1 to res-length\n              goback\n            end-if\n          end-perform\n          goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22109,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01 a                pic 9(4).\n       01 b                pic 9(4).\n      \n       linkage section.\n       01  n               pic 9(4).\n       01  k               pic 9(3).\n       01  result.\n           05 res-length   pic 9(3).\n           05 xs           pic 9(4) occurs 0 to 100 times\n                                    depending on res-length\n                                    indexed by i.\n      \n       procedure division using n k result.\n           initialize result\n           compute a = (k * (k + 1)) \/ 2\n           compute b = n \/ a\n           if b = 0 then goback end-if\n           move k to res-length\n           perform forever\n              if function rem(n, b) = 0 then exit perform end-if\n              subtract 1 from b\n           end-perform\n           perform varying i from 1 until i = k\n              compute xs(i) = b * i\n           end-perform\n           compute xs(i) = n - k * (k - 1) * b \/ 2\n      \n           goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59f7597716049833200001eb":[{"id":22110,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       working-storage section.\n       01 v           pic 9(8).\n       01 i           pic 9.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a b result.\n          compute result = 0\n          perform varying a from a by 1 until a >= b\n             compute v = a\n             compute i = 1\n             inspect v tallying i for leading '0'\n             inspect v(i:) converting '0123456789' to '0100009086'\n             move function reverse(v(i:)) to v(i:)\n             if v = a\n                add 1 to result\n             end-if\n          end-perform.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22111,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 e           pic 9.\n      \n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a b result.\n            \n          perform varying i from a by 1 until i >= b\n            call 'check' using i e\n            add e to result\n          end-perform\n      \n          goback.\n       end program solve.\n\n      \n      \n      \n       identification division.\n       program-id. check.\n      \n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       01 k           pic 9(8).\n       01 x           pic 9.\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9.\n       procedure division using n result.\n      \n          move n to m\n\n          perform until m = 0\n            divide 10 into m giving m remainder x\n          \n            evaluate x\n              when 0\n              when 1\n              when 8       compute k = 10 * k + x\n              when 6       compute k = 10 * k + 9\n              when 9       compute k = 10 * k + 6\n              when other\n                           move 0 to k\n                           exit perform\n            end-evaluate\n          end-perform\n          \n          if k = n\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program check.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22112,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. solve.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 X           PIC X(8).\n       01 LEN         PIC 9(1).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           PERFORM VARYING N FROM A BY 1 UNTIL N = B\n               MOVE N  TO X\n               MOVE 1  TO LEN\n               INSPECT X TALLYING LEN FOR LEADING ZERO\n               MOVE FUNCTION REVERSE(N(LEN:))  TO X(LEN:)\n               TRANSFORM X FROM '2345679' TO '    9 6'\n               IF  N = X\n                   ADD 1  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM solve.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22113,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01 i           pic 9(8).\n       01 m           pic 9.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using a b result.\n          perform varying i from a by 1 until i >= b\n            call 'aux' using i m\n            compute result = result + m\n          end-perform\n          goback.\n       end program solve.\n\n       identification division.\n       program-id. aux.\n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       01 k           pic 9(8).\n       01 x           pic 9.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9.\n       procedure division using n result.\n          move n to m\n          move 0 to result\n          perform until m = 0\n            divide 10 into m giving m remainder x\n            evaluate x\n              when 0\n              when 1\n              when 8       compute k = 10 * k + x\n              when 6       compute k = 10 * k + 9\n              when 9       compute k = 10 * k + 6\n              when other\n                           move 0 to k\n                           exit perform\n            end-evaluate\n          end-perform\n          if k = n move 1 to result end-if\n          goback.\n       end program aux.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"59f7fc109f0e86d705000043":[{"id":22114,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DivisibleByThree.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  I                PIC 9(4) COMP.\n       01  CNT              PIC 9(4) COMP.\n       LINKAGE SECTION.\n       01  STRNG            PIC X(250).\n       01  RESULT           PIC 9.\n\n       PROCEDURE DIVISION USING STRNG RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > LENGTH STRNG\n               ADD FUNCTION NUMVAL(STRNG(I:1))  TO CNT\n           END-PERFORM\n           COMPUTE RESULT = 1.5 - FUNCTION REM(CNT, 3).\n       END PROGRAM DivisibleByThree.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22115,"user_id":53,"body":"       identification division.\n       program-id. DivisibleByThree.\n       data division.\n       local-storage section.\n       01  m                pic 9(4).\n       01  i                usage index.\n       linkage section.\n       01  strng            pic x(250).\n       01  result           pic 9.\n       procedure division using strng result.\n          initialize result\n          perform varying i from 1\n          until i > length of function trim(strng)\n            add function numval(strng(i:1)) to m\n          end-perform\n          if function rem(m, 3) = 0 then \n            set result to 1 \n          end-if\n          goback.\n       end program DivisibleByThree.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22116,"user_id":50,"body":"       identification division.\n       program-id. DivisibleByThree.\n       data division.\n       local-storage section.\n       01  n                pic 9(4).\n       01  i                usage index.\n      \n       linkage section.\n       01  strng            pic x(250).\n       01  result           pic 9.\n      \n       procedure division using strng result.\n      \n          initialize result\n      \n          perform varying i from 1\n          until i = 251 or strng(i:1) = space\n                add function numval(strng(i:1)) to n\n          end-perform\n          \n          if function rem(n, 3) = 0  move 1 to result end-if\n      \n          goback.\n       end program DivisibleByThree.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a00e05cc374cb34d100000d":[{"id":22117,"user_id":421,"body":"       identification division.\n       program-id. ReverseSeq.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(6) occurs 0 to 800000 times \n                                     depending on res-length.\n      \n       procedure division using n result.      \n          initialize res-length\n          perform varying n from n by -1 until n = 0\n              add 1 to res-length\n              move n to res(res-length)\n          end-perform.  \n       end program ReverseSeq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22118,"user_id":null,"body":"       identification division.\n       program-id. ReverseSeq.\n       data division.\n       working-storage section.\n       01 i         usage index.\n\n       linkage section.\n       01  n  pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(6) occurs 0 to 800000 times \n                                     depending on res-length.\n      \n       procedure division using n result.\n          initialize result\n          perform varying i from 1 by 1 until i > n\n             compute res(i) = n - i + 1\n          end-perform\n          set res-length to n      \n          goback.\n       end program ReverseSeq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22119,"user_id":168,"body":"       identification division.\n       program-id. ReverseSeq.\n       data division.\n      \n       linkage section.\n       01  n  pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(6) occurs 0 to 800000 times \n                                     depending on res-length indexed i.\n      \n       procedure division using n result.\n          move n to res-length\n          perform varying i from 1 until i > res-length\n              compute res(i) = n - i + 1\n          end-perform.\n       end program ReverseSeq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22120,"user_id":53,"body":"       identification division.\n       program-id. ReverseSeq.\n       data division.\n       linkage section.\n       01  n  pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(6) occurs 0 to 800000 times \n                             depending on res-length \n                             indexed by i.\n       procedure division using n result.\n          initialize result\n          move n to res-length\n          perform varying i from 1 until i > n\n            compute res(i) = n - i + 1\n          end-perform\n          goback.\n       end program ReverseSeq.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22121,"user_id":50,"body":"       identification division.\n       program-id. ReverseSeq.\n       data division.\n      \n       linkage section.\n       01  n  pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(6) occurs 0 to 800000 times \n                             depending on res-length indexed i.\n      \n       procedure division using n result.\n      \n          move n to res-length\n          set i to 1\n          perform varying n from n by -1 until n = 0\n              move n to res(i)\n              add 1 to i\n          end-perform\n      \n          goback.\n       end program ReverseSeq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22122,"user_id":50,"body":"       identification division.\n       program-id. ReverseSeq.\n       data division.\n      \n       linkage section.\n       01  n  pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(6) occurs 0 to 800000 times \n                             depending on res-length indexed i.\n      \n       procedure division using n result.\n      \n          move n to res-length\n          set i to 1\n          perform varying n from n by -1 until n = 0\n              move n to res(i)\n              add 1 to i\n          end-perform\n      \n          goback.\n       end program ReverseSeq.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a023c426975981341000014":[{"id":22123,"user_id":421,"body":"       identification division.\n       program-id. other-angle.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n           COMPUTE angle-c = 180 - angle-a - angle-b.\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22124,"user_id":null,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n         move 180 to angle-c.\n         subtract angle-a angle-b from angle-c.\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22125,"user_id":null,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n         compute angle-c = 180 - angle-a - angle-b.\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22126,"user_id":1277,"body":"       identification division.\n       program-id. other-angle.\n       AUTHOR. \"Souzooka\".\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n           COMPUTE ANGLE-C = 180 - ANGLE-A - ANGLE-B\n           .\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22127,"user_id":null,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n         compute angle-c = 180 - (angle-a + angle-b).\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22128,"user_id":null,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 a       pic 9(3).\n       01 b       pic 9(3).\n       01 c       pic 9(3).\n       procedure division using a b c.\n         compute c = 180 - (a + b)\n          goback.\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22129,"user_id":713,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n         compute angle-c = 180 - angle-b - angle-a.\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22130,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. other-angle.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 ANGLE-A       PIC 9(3).\n       01 ANGLE-B       PIC 9(3).\n       01 ANGLE-C       PIC 9(3).\n       PROCEDURE DIVISION USING ANGLE-A ANGLE-B ANGLE-C.\n           COMPUTE ANGLE-C = 180 - ANGLE-A - ANGLE-B.\n       END PROGRAM other-angle.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22131,"user_id":220,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n         move 180 to angle-c.\n         subtract angle-a from angle-c.\n         subtract angle-b from angle-c.\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22132,"user_id":53,"body":"       identification division.\n       program-id. other-angle.\n       data division.\n       linkage section.\n       01 angle-a       pic 9(3).\n       01 angle-b       pic 9(3).\n       01 angle-c       pic 9(3).\n       procedure division using angle-a angle-b angle-c.\n         COMPUTE ANGLE-C = 180 - ANGLE-A - ANGLE-B .\n       end program other-angle.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a03b3f6a1c9040084001765":[{"id":22133,"user_id":421,"body":"       identification division.\n       program-id. angle.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n           COMPUTE result = (n - 2) * 180.\n       end program angle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22134,"user_id":null,"body":"       identification division.\n       program-id. angle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = (n - 2) * 180.\n          goback.\n       end program angle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22135,"user_id":527,"body":"       identification division.\n       program-id. angle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n       compute result = 180 * (n - 2).\n       end program angle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22136,"user_id":76,"body":"       identification division.\n       program-id. angle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n         compute result = (n - 2) * 180.\n       end program angle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22137,"user_id":50,"body":"       identification division.\n       program-id. angle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n\n          Subtract 2 from n giving result,\n          Multiply 180 by result.\n      \n       end program angle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22138,"user_id":53,"body":"       identification division.\n       program-id. angle.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = (n - 2) * 180\n          goback.\n       end program angle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a045fee46d843effa000070":[{"id":22139,"user_id":53,"body":"       identification division.\n       program-id. Decomp.\n       data division.\n       local-storage section.\n       01 prime-grade-section.\n           05 pg-arg-n        pic 9(20).\n           05 pg-arg-a        pic 9(20).\n           05 pg-arg-b        pic 9(20).\n           05 pg-res          pic 9(20).\n       01 prime-section.\n           05 p-arg-a         pic 9(4).\n           05 p-i             pic 9(4).\n           05 p-res           pic 9.\n       01 decomposition-section.\n           05 i               pic 9(4).\n           05 k               pic 9(4).\n           01 iz              pic z(4).\n           01 gz              pic z(4).\n       linkage section.\n       01  n                  pic 9(4).\n       01  result.\n           05 res-len         pic 9(4).\n           05 res.\n              08              pic x occurs 0 to 5000 times \n                              depending on res-len\n                              indexed by ptr.\n       procedure division using n result.\n      \n          initialize result\n          set res-len to 5000\n          set ptr to 1\n          set k to 0\n          perform decompose\n          goback.\n      \n        decompose.\n          perform varying i from 2 until i > n\n            move i to p-arg-a\n            perform is-prime\n            if p-res = 1 then\n              if k > 0 then\n                string \" * \" into res pointer ptr\n              end-if\n              add 1 to k\n              move n to pg-arg-n\n              move i to pg-arg-a\n              move 1 to pg-arg-b\n              perform prime-grade\n              move i to iz\n              if pg-res = 1 then\n                string function trim(iz) into res pointer ptr\n              else\n                move pg-res to gz\n                string function trim(iz) \"^\"\n                       function trim(gz)\n                  into res pointer ptr\n              end-if\n            end-if\n          end-perform\n          subtract 1 from ptr giving res-len\n          .\n      \n        prime-grade.\n          set pg-res to 0\n          perform until pg-arg-n < pg-arg-a ** pg-arg-b\n            compute pg-res = pg-res + \n              (pg-arg-n \/ (pg-arg-a ** pg-arg-b))\n            add 1 to pg-arg-b\n          end-perform\n          .\n      \n        is-prime.\n          set p-res to 1\n          perform varying p-i from 2 until p-i ** 2 > p-arg-a\n            if function rem(p-arg-a, p-i) = 0 then\n              set p-res to 0, exit paragraph\n            end-if\n          end-perform\n          if p-arg-a < 2 then\n            set p-res to 0\n          end-if\n          .\n      \n       end program Decomp.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22140,"user_id":50,"body":"       identification division.\n       program-id. Decomp.\n       data division.\n       local-storage section.\n       01  i  pic 9(4).\n       01  counter.\n           03 d pic 9(4) occurs 4001 times indexed h.\n       01  factors.\n           05 len pic 9(2).\n           05 f   pic 9(4) occurs 0 to 13 times\n                           depending on len indexed k.\n      * the values in `cycle` allow to generate factors >= 11, avoiding multiples of 2, 3, 5, and 7\n       01 cycle.\n          03  pic 9  value 2.\n          03  pic 9  value 4.\n          03  pic 9  value 2.\n          03  pic 9  value 4.\n          03  pic 9  value 6.\n          03  pic 9  value 2.\n          03  pic 9  value 6.\n          03  pic 9  value 4.\n       01 redefines cycle.\n          03 c pic 9 occurs 8 times indexed x.\n      * first prime numbers\n       01 q.\n          03  pic 9 value 2.\n          03  pic 9 value 3.\n          03  pic 9 value 5.\n          03  pic 9 value 7.\n       01 redefines q.\n          03 firstPrimes pic 9 occurs 4 times indexed j.\n       01 p pic 9(3).\n       01 m pic 9(4).\n       01 s pic 9(3).\n       01 maxFactor pic 9(4).\n       01 r usage index.\n       01 o pic z(4).\n       01 v pic z(4).\n      \n       linkage section.\n       01  n  pic 9(4).\n       01  result.\n           05 res-length     pic 9(4).\n           05 res.\n              07             pic x occurs 0 to 5000 times \n                                   depending on res-length.\n      \n       procedure division using n result.\n      \n          initialize result\n          perform varying i from 2 until i > n\n              perform factorize\n              perform varying k from 1 until k > len\n                add 1 to d(f(k))\n              end-perform\n          end-perform\n          \n          set r to 1\n          move 5000 to res-length\n          perform varying h from 2 until h > maxFactor\n             evaluate d(h)\n             when 1   \n                  move h to o\n                  string function trim(o) ' * ' into res pointer r\n             when > 1\n                  move h to o\n                  move d(h) to v\n                  string function trim(o) '^'\n                         function trim(v) ' * '\n                  into res pointer r\n            end-evaluate\n          end-perform\n          compute res-length = r - 4\n      \n          goback.\n      \n          factorize.\n            initialize factors\n            move i to m\n            compute s = function sqrt(i)\n            perform varying j from 1 until j = 5\n              move firstPrimes(j) to p\n              perform until function rem(m, p) <> 0\n                add 1 to len\n                move p to f(len)\n                divide p into m\n              end-perform\n            end-perform\n      \n            move 1 to x\n            move 11 to p\n            perform until m = 1 or p > s\n              perform until function rem(m, p) <> 0\n                add 1 to len\n                move p to f(len)\n                divide p into m\n              end-perform\n              add c(x) to p\n              compute x = function rem(x, 8) + 1\n            end-perform\n            if m <> 1\n                add 1 to len\n                move m to f(len)\n            end-if\n            move function max(maxFactor, f(len)) to maxFactor\n               .\n      \n       end program Decomp.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a057ec846d843c81a0000ad":[{"id":22141,"user_id":53,"body":"       identification division.\n       program-id. cycle.\n      \n       data division.\n      \n       local-storage section.\n       01 m           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n          move -1 to result,\n          if function rem(n, 2) = 0 or function rem(n, 5) = 0\n          then goback end-if,\n          compute m = function rem(10, n),\n          move 1 to result,\n          perform until m = 1\n            compute m = function rem(m * 10, n),\n            add 1 to result\n          end-perform,\n          goback.\n       end program cycle.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22142,"user_id":168,"body":"       identification division.\n       program-id. cycle.\n      \n       data division.\n       working-storage section.\n       01 p           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n           if 0 = function mod(n, 2) or function mod(n, 5)\n              compute result = -1\n           else\n              compute result = 0\n              compute p = 1\n              perform with test after until p = 1\n                  compute p = function mod(10 * p, n)\n                  add 1 to result\n              end-perform\n           end-if.\n       end program cycle.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22143,"user_id":53,"body":"       identification division.\n       program-id. cycle.\n      \n       data division.\n       local-storage section.\n       01 m           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n          move -1 to result,\n          if function rem(n, 2) = 0 or\n              function rem(n, 5) = 0 then\n            goback\n          end-if,\n          compute m = function rem(10, n),\n          move 1 to result,\n          perform until m = 1\n            compute m = function rem(10 * m, n),\n            add 1 to result\n          end-perform,\n          goback.\n       end program cycle.\n   ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22144,"user_id":50,"body":"       identification division.\n       program-id. cycle.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 tmp         pic 9(8).\n       01 m           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(8) sign leading.\n       procedure division using n result.\n      \n          move n to a\n          move 10 to b\n          perform until b = 0 \n              compute tmp = function rem(a, b)\n              move b to a\n              move tmp to b\n          end-perform\n\n          if a <> 1\n            move -1 to result\n            goback\n          end-if\n\n          compute tmp = function rem(10, n)\n      \n          perform varying result from 1 by 1 until tmp = 1\n              compute tmp = function rem(tmp * 10, n)\n          end-perform\n      \n          goback.\n       end program cycle.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a1a9e5032b8b98477000004":[{"id":22145,"user_id":421,"body":"       identification division.\n       program-id. evenLast.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 0 to 50 times \n                                  depending on arr-length indexed i.\n       01  result            pic s9(6) sign leading.\n      \n       procedure division using arr result.\n           perform varying i from 1 by 2 until i > arr-length\n               add xs(i) to result\n           end-perform\n           multiply xs(arr-length) by result\n           goback.\n       end program evenLast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22146,"user_id":50,"body":"       identification division.\n       program-id. evenLast.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 0 to 50 times \n                                  depending on arr-length\n                                  indexed i.\n       01  result            pic s9(6) sign leading.\n      \n       procedure division using arr result.\n      \n            move 0 to result\n            if arr-length = 0 goback end-if\n            perform varying i from 1 by 2 until i > arr-length\n              add xs(i) to result\n            end-perform\n            multiply xs(arr-length) by result\n      \n            goback.\n       end program evenLast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22147,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. evenLast.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN           PIC  9(2).\n           05 XS            PIC S9(2) OCCURS 50 DEPENDING LEN INDEXED I.\n       01  RESULT           PIC S9(6) SIGN LEADING.\n      \n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 2 UNTIL I > LEN\n               ADD XS(I)  TO RESULT\n           END-PERFORM\n           MULTIPLY XS(LEN) BY RESULT.\n       END PROGRAM evenLast.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22148,"user_id":null,"body":"       identification division.\n       program-id. evenLast.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 0 to 50 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic s9(6) sign leading.\n      \n       procedure division using arr result.\n         set result to 0\n         perform varying i from 1 by 2 until i > arr-length\n           add xs(i) to result\n         end-perform\n         multiply xs(arr-length) by result.\n       end program evenLast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22149,"user_id":null,"body":"       identification division.\n       program-id. evenLast.\n       data division.\n      \n       local-storage section.\n       01  odd               pic s9(6) sign leading.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 0 to 50 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic s9(6) sign leading.\n      \n       procedure division using arr result.\n           initialize odd result.\n           perform varying i from 1 by 2 until i > arr-length\n               add xs(i) to odd\n           end-perform.\n           compute result = odd * xs(arr-length).\n           goback.\n       end program evenLast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22150,"user_id":168,"body":"       identification division.\n       program-id. evenLast.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(2) occurs 0 to 50 times \n                                  depending on arr-length indexed i.\n       01  result            pic s9(6) sign leading.\n      \n       procedure division using arr result.\n           move 0 to result\n           perform varying i from 1 by 2 until i > arr-length\n               add xs(i) to result\n           end-perform\n           multiply xs(arr-length) by result\n           goback.\n       end program evenLast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22151,"user_id":53,"body":"       identification division.\n       program-id. evenLast.\n       data division.\n       linkage section.\n       01  arr.\n           05 z              pic 99.\n           05 xs             pic s9(2) occurs 0 to 50 times \n                                  depending on z\n                                  indexed i.\n       01  result            pic s9(6) sign leading.\n       procedure division using arr result.\n            move 0 to result\n            if z = 0 goback end-if\n            perform varying i from 1 until i > z\n              if function rem (i, 2) <> 0 then\n                add xs(i) to result\n              end-if\n              if i = z then\n                multiply xs(i) by result\n              end-if\n            end-perform\n            goback.\n       end program evenLast.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a1ebe0d46d843454100004c":[{"id":22152,"user_id":50,"body":"       identification division.\n       program-id. ToDayOfYear.\n      \n       data division.\n       local-storage section.\n       01  tble.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 28.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n       01  redefines tble.\n           03 monthLen pic 9(2) occurs 12 indexed i.\n      \n       linkage section.\n       01  arr.\n           03  d        pic 9(2).\n           03  m        pic 9(2).\n           03  y        pic 9(4).\n       01 result        pic 9(3).\n      \n       procedure division using arr result.\n      \n          move d to result\n          \n          evaluate m\n          when 1  goback\n          when 2  add 31 to result goback\n          end-evaluate\n      \n          if function rem(y, 4) = 0 and y(3:2) <> '00'\n             add 1 to monthLen(2)\n          end-if\n      \n          perform varying i from 1 until i = m\n            add monthLen(i) to result\n          end-perform\n      \n          goback.\n       end program ToDayOfYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22153,"user_id":null,"body":"       identification division.\n       program-id. ToDayOfYear.\n       data division.\n       working-storage section.\n       01 tbl value '3128313031303131303130'.\n           03 mdays     pic 9(2) occurs 11 times indexed i.\n       linkage section.\n       01  arr.\n           03  dayNum   pic 9(2).\n           03  monthNum pic 9(2).\n           03  yearNum  pic 9(4).\n       01 result        pic 9(3).\n       procedure division using arr result.\n          set result to dayNum.\n          if monthNum > 2\n            if function mod(yearNum, 4) = 0 \n              and function mod(yearNum, 100) > 0\n              or function mod(yearNum, 400) = 0 \n              add 1 to result.\n          perform varying i from 1 until i = monthNum \n            add mdays(i) to result.\n       end program ToDayOfYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22154,"user_id":53,"body":"       identification division.\n       program-id. ToDayOfYear.\n       data division.\n       local-storage section.\n       01  months.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 28.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n           03  filler pic 9(2) value 30.\n           03  filler pic 9(2) value 31.\n       01  redefines months.\n           03 m-len pic 9(2) occurs 12 indexed i.\n       linkage section.\n       01  arr.\n           03  d        pic 9(2).\n           03  M        pic 9(2).\n           03  y        pic 9(4).\n       01 result        pic 9(3).\n       procedure division using arr result.\n          move d to result\n          evaluate M\n            when 1 exit paragraph\n            when 2 add 31 to result goback\n          end-evaluate\n          if function rem(y, 4) = 0 and function rem(y, 100) <> 0\n            add 1 to m-len(2)\n          end-if\n          perform varying i from 1 until i = M\n            add m-len(i) to result\n          end-perform\n          goback.\n       end program ToDayOfYear.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a3af5b1ee1aaeabfe000084":[{"id":22155,"user_id":421,"body":"       identification division.\n       program-id. sum-of-squares.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 i          pic 9(5).       \n       linkage section.\n       01 n           pic 9(9).\n       01 result      pic 9.\n       procedure division using n result.\n      \n           move 3 to result           \n      \n           if function rem(n ** 0.5, 1) = 0 then\n               move 1 to result\n               goback\n           end-if\n      \n           perform varying i from 1 by 1 until i > n ** 0.5\n               if function rem((n - i * i) ** 0.5, 1) = 0 then\n                   move 2 to result\n                   goback\n               end-if\n           end-perform\n      \n           perform until function rem(n, 4) <> 0\n               divide n by 4 giving n\n           end-perform\n      \n           if function rem(n, 8) = 7 then\n               move 4 to result               \n           end-if.    \n       end program sum-of-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22156,"user_id":168,"body":"       identification division.\n       program-id. sum-of-squares.\n      \n       data division.\n       working-storage section.\n       01 k2          pic 9(8).\n       01 k           pic 9(8).\n       01 d           pic 9(8).\n       01 m           pic 9(9).\n      \n       linkage section.\n       01 n           pic 9(9).\n       01 result      pic 9.\n          88 one    value 1.\n          88 two    value 2.\n          88 three  value 3.\n          88 four   value 4.\n       procedure division using n result.\n          if function mod(function sqrt(n), 1) = 0\n              set one to true\n              goback\n          end-if\n          move 0 to k2\n          perform until function mod(n, 2) <> 0\n              add 1 to k2\n              divide 2 into n\n          end-perform\n          move n to m\n          set two to true\n          perform varying d from 3 by 2 until d * d > n\n              move 0 to k\n              perform until function mod(n, d) <> 0\n                  add 1 to k\n                  divide d into n\n              end-perform\n              if function mod(k, 2) <> 0 and function mod(d, 4) = 3 \n                  set three to true\n                  exit perform\n              end-if\n          end-perform\n          evaluate true\n             when two and function mod(n, 4) <> 3 \n                  continue\n             when function mod(k2, 2) <> 0 or function mod(m, 8) <> 7\n                  set three to true\n             when other\n                  set four to true\n          end-evaluate\n          goback.\n       end program sum-of-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22157,"user_id":53,"body":"       identification division.\n       program-id. sum-of-squares.\n       data division.\n       local-storage section.\n       01 i           pic 9(5).\n       01 j           pic 9(5).\n       01 m           pic 9(9).\n       01 p           pic 9(9).\n       linkage section.\n       01 n           pic 9(9).\n       01 r           pic 9.\n       procedure division using n r.\n          move 1 to r\n          compute j = function sqrt (n)\n          if j * j = n then goback end-if\n          perform varying i from 1 until i >= j\n            compute m = n - i * i\n            compute p = function sqrt (m)\n            if p * p = m then\n              move 2 to r\n              goback\n            end-if\n          end-perform\n          perform until function rem(n, 4) <> 0\n            compute n = n \/ 4\n          end-perform\n          move 4 to r\n          if function rem(n, 8) <> 7 then\n            move 3 to r\n          end-if\n          goback.\n       end program sum-of-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22158,"user_id":50,"body":"       identification division.\n       program-id. sum-of-squares.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(9).\n       01 b           pic 9(9)v9(29).\n       01 s           pic 9(5).\n       01 k           pic 9(5).\n      \n       linkage section.\n       01 n           pic 9(9).\n       01 result      pic 9.\n       procedure division using n result.\n      \n          move n to a\n      \n          perform until function rem(a, 4) <> 0\n              divide a by 4 giving a\n          end-perform\n      \n          if function rem(a, 8) = 7\n              move 4 to result\n              goback\n          end-if\n      \n          compute s = function integer(function sqrt(n))\n      \n          if n = s * s\n             move 1 to result\n             goback\n          end-if\n      \n          perform varying k from 1 until k > s\n              compute b = n - k * k\n              if function rem(function sqrt(b), 1) = 0\n                  move 2 to result\n                  goback\n              end-if\n          end-perform\n      \n          move 3 to result\n\n          goback.\n       end program sum-of-squares.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a3fe3dde1ce0e8ed6000097":[{"id":22159,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n           COMPUTE RESULT = (YEAR + 99) \/ 100.      \n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22160,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n          COMPUTE RESULT = YEAR \/ 100.\n          IF FUNCTION MOD(YEAR, 100) NOT = 0 THEN\n              ADD 1 TO RESULT\n          END-IF. \n          GOBACK.\n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22161,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n         compute RESULT = (YEAR + 99) \/ 100\n         Goback.\n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22162,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n      \n          IF function MOD(YEAR, 100) = 00 THEN\n            compute RESULT = YEAR\/100\n          ELSE\n            compute RESULT = YEAR\/100 + 1.\n         Goback.\n      \n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22163,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n       IF FUNCTION MOD(YEAR, 100) IS EQUAL TO 0\n       COMPUTE RESULT = YEAR \/ 100\n       ELSE\n       COMPUTE RESULT = (YEAR \/ 100) + 1\n       END-IF\n         Goback.\n      \n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22164,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       local-storage section.\n       01 DIGITS       PIC 9(02).\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n           \n        DIVIDE YEAR BY 100 GIVING DIGITS.\n      \n        IF FUNCTION REM(YEAR,100)>0.5 \n        ADD 1 TO DIGITS GIVING RESULT\n        ELSE\n        MOVE DIGITS TO RESULT\n      \n        \n         Goback.\n      \n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22165,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n         compute result = year \/ 100.\n         if function rem(year, 100) <> zero\n           add 1 to result\n         end-if\n         Goback.\n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22166,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n           COMPUTE RESULT = (YEAR - 1) \/ 100 + 1\n           .\n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22167,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 a         PIC 9(05).\n       01 r       PIC 9(08).\n       PROCEDURE DIVISION USING a r.\n            compute r = (a - 1) \/ 100 + 1\n         Goback.\n       END PROGRAM CENTURY.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22168,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CENTURY.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 YEAR         PIC 9(05).\n       01 RESULT       PIC 9(08).\n       PROCEDURE DIVISION USING YEAR RESULT.\n           COMPUTE RESULT = FUNCTION NUMVAL(YEAR(1:3))\n                          + FUNCTION MIN(YEAR(4:2), 01).\n       END PROGRAM CENTURY.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a4138acf28b82aa43000117":[{"id":22169,"user_id":421,"body":"       identification division.\n       program-id. adjacent-element-product.\n       author. \"ejini\u6218\u795e\".\n       data division.       \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 2 to 50 times \n                                depending on arr-length indexed i.\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using arr result.\n           multiply xs(1) by xs(2) giving result\n           perform varying i from 2 by 1 until i = arr-length\n               move function max(result, xs(i) * xs(i + 1)) to result\n           end-perform.\n       end program adjacent-element-product.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22170,"user_id":168,"body":"       identification division.\n       program-id. adjacent-element-product.\n      \n       data division.\n      \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs       pic s9(4) occurs 2 to 50 times \n                                depending on arr-length\n                                indexed by i.\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using arr result.\n          compute result = xs(1) * xs(2)\n          perform varying i from 3 until i > arr-length\n              compute result = function max(result, xs(i - 1) * xs(i))\n          end-perform.\n       end program adjacent-element-product.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22171,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. adjacent-element-product.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I         PIC  9(2).\n       LINKAGE SECTION.\n       01 ARR.\n          05 LEN    PIC  9(2).\n          05 XS     PIC S9(4) OCCURS 2 TO 50 TIMES DEPENDING ON LEN.\n       01 RESULT    PIC S9(8) SIGN LEADING.\n       PROCEDURE DIVISION USING ARR RESULT.\n           MOVE LOW-VALUE  TO RESULT\n           PERFORM VARYING I FROM 2 BY 1 UNTIL I > LEN\n               MOVE FUNCTION MAX(RESULT, XS(I - 1) * XS(I))  TO RESULT\n           END-PERFORM.\n       END PROGRAM adjacent-element-product.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22172,"user_id":53,"body":"       identification division.\n       program-id. adjacent-element-product.\n      \n       data division.\n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs      pic s9(4) occurs 2 to 50 times \n                                depending on arr-length\n                                indexed by i.\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using arr result.\n      \n          compute result = xs(1) * xs(2)\n          perform varying i from 2 until i = arr-length\n              compute result = function max(result, xs(i) * xs(i + 1))\n          end-perform\n      \n          goback.\n       end program adjacent-element-product.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22173,"user_id":50,"body":"       identification division.\n       program-id. adjacent-element-product.\n      \n       data division.\n       local-storage section.\n       01 i          pic 99.\n      \n       linkage section.\n       01 arr.\n          05 arr-length   pic 9(2).\n          05 xs      pic s9(4) occurs 2 to 50 times \n                                depending on arr-length.\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using arr result.\n      \n          compute result = xs(1) * xs(2)\n          perform varying i from 2 until i = arr-length\n              compute result = function max(result, xs(i) * xs(i + 1))\n          end-perform\n      \n          goback.\n       end program adjacent-element-product.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a431c0de1ce0ec33a00000c":[{"id":22174,"user_id":421,"body":"       identification division.\n       program-id. evenNumbers.\n       data division.\n       author. \"ejini\u6218\u795e\".       \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(3) occurs 0 to 50 times \n                                  depending on arr-length indexed i.\n       01  n                 pic 99.\n       01  result.\n           05 res            pic s9(3) occurs 0 to 50 times \n                                  depending on n.\n      \n       procedure division using arr n result.\n           perform varying i from arr-length by -1 until n = 0\n               if function rem(xs(i), 2) = 0 then                       \n                   move xs(i) to res(n)\n                   subtract 1 from n\n               end-if\n           end-perform.\n       end program evenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22175,"user_id":50,"body":"       identification division.\n       program-id. evenNumbers.\n       data division.\n       local-storage section.\n       01  k                pic 99.\n       01  i                pic 99.\n       01  j                pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(3) occurs 0 to 50 times \n                                  depending on arr-length.\n       01  n                 pic 99.\n       01  result.\n           05 res            pic s9(3) occurs 0 to 50 times \n                                  depending on n.\n      \n       procedure division using arr n result.\n      \n          move arr-length to i\n          perform varying k from 0 until k = n\n            perform varying j from i by -1 until j = 0\n              if function mod(xs(j), 2) = 0\n                  move xs(j) to res(n - k)\n                  compute i = j - 1\n                  exit perform\n              end-if\n            end-perform\n          end-perform\n      \n          goback.\n       end program evenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22176,"user_id":null,"body":"       identification division.\n       program-id. evenNumbers.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(3) occurs 0 to 50 times \n                                  depending on arr-length.\n       01  n                 pic 99.\n       01  result.\n           05 res            pic s9(3) occurs 0 to 50 times \n                                  depending on n.\n      \n       procedure division using arr n result.\n           PERFORM VARYING TALLY FROM arr-length BY -1 UNTIL TALLY = 0\n                IF n > 0 AND FUNCTION MOD(xs(TALLY) 2) IS ZERO\n                   MOVE xs(TALLY) TO res(n)\n                   SUBTRACT 1 FROM n\n               END-IF\n           END-PERFORM.\n          goback.\n       end program evenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22177,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. evenNumbers.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN      PIC  9(2).\n           05 XS       PIC S9(3) OCCURS 0 TO 50 DEPENDING LEN INDEXED I.\n       01  N           PIC  9(2).\n       01  RESULT.\n           05 RES      PIC S9(3) OCCURS 0 TO 50 DEPENDING N   INDEXED J.\n       PROCEDURE DIVISION USING ARR N RESULT.\n           MOVE N  TO J\n           PERFORM VARYING I FROM LEN BY -1 UNTIL I = 0\n               IF  FUNCTION REM(XS(I), 2) = 0\n                   MOVE XS(I)  TO RES(J)\n                   SUBTRACT 1  FROM J\n               END-IF\n           END-PERFORM.\n       END PROGRAM evenNumbers.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22178,"user_id":168,"body":"       identification division.\n       program-id. evenNumbers.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(3) occurs 0 to 50 times \n                                  depending on arr-length indexed by i.\n       01  n                 pic 99.\n       01  result.\n           05 res            pic s9(3) occurs 0 to 50 times \n                                  depending on n indexed by j.\n      \n       procedure division using arr n result.\n          move n to j\n          perform varying i from arr-length by -1 until i = 0 or j = 0\n              if function mod(xs(i), 2) = 0\n                  move xs(i) to res(j)\n                  subtract 1 from j\n              end-if\n          end-perform.\n       end program evenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22179,"user_id":53,"body":"       identification division.\n       program-id. evenNumbers.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs             pic s9(3) occurs 0 to 50 times \n                                  depending on arr-length\n                                  indexed by i, j, k.\n       01  n                 pic 99.\n       01  result.\n           05 res            pic s9(3) occurs 0 to 50 times \n                                  depending on n.\n       procedure division using arr n result.\n          move arr-length to i\n          perform varying k from 0 until k = n\n            perform varying j from i by -1 until j = 0\n              if function mod(xs(j), 2) = 0\n                move xs(j) to res(n - k)\n                subtract 1 from j giving i\n                exit perform\n              end-if\n            end-perform\n          end-perform\n          goback.\n       end program evenNumbers.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a512f6a80eba857280000fc":[{"id":22180,"user_id":421,"body":"       identification division.\n       program-id. nthSmallest.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 xs   occurs 3 to 40 times\n                   depending on arr-length.\n              07 val pic s9(5).\n       01  n                 pic 99.\n       01  result            pic s9(5) sign leading.\n      \n       procedure division using arr n result.\n           sort xs ascending key val          \n           move val(n) to result.\n       end program nthSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22181,"user_id":168,"body":"       identification division.\n       program-id. nthSmallest.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 3 to 40 times depending on arr-length.\n              10 xs pic s9(5).\n       01  n                 pic 99.\n       01  result            pic s9(5) sign leading.\n      \n       procedure division using arr n result.\n           sort tbl on ascending key xs\n           move xs(n) to result\n           goback.\n       end program nthSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22182,"user_id":50,"body":"       identification division.\n       program-id. nthSmallest.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 3 to 40 times depending on arr-length.\n              10 xs          pic s9(5).\n       01  n                 pic 99.\n       01  result            pic s9(5) sign leading.\n      \n       procedure division using arr n result.\n           sort tbl on ascending xs\n           move xs(n) to result\n           goback.\n       end program nthSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a51717fa7ca4d133f001fdf":[{"id":22183,"user_id":168,"body":"       identification division.\n       program-id. packBagpack.\n       data division.\n       local-storage section.\n       01  k  usage index.\n       01  dp pic 9(5) occurs 10000 times.\n              \n       linkage section.\n       01  len                pic 9(2).\n       01  scores.\n           05 vs              pic 9(10) occurs 4 to 30 times \n                                            depending on len indexed i.\n       01  weights.\n           05 ws              pic 9(10) occurs 4 to 30 times \n                                            depending on len.\n       01  cap                pic 9(4).\n       01  result             pic 9(5).\n       procedure division using len scores weights cap result.\n           perform varying i from 1 until i > len\n               perform varying k from function abs(cap + 1) by -1 \n                                 until k <= ws(i)\n                   compute dp(k) = \n                        function max(dp(k), vs(i) + dp(k - ws(i)))\n               end-perform\n           end-perform\n           move dp(cap + 1) to result\n           goback.\n       end program packBagpack.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22184,"user_id":53,"body":"       identification division.\n       program-id. packBagpack.\n       data division.\n       local-storage section.\n       01  i                  pic 9(3).\n       01  j                  pic 9(3).\n       01  p                  pic 9(10).\n       01  sz                 pic 9(5).\n       01  m-arr.\n           05 m               pic 9(10) occurs 10 to 9999 times \n                                                depending on sz.\n       01  t-arr.\n           05 t               pic 9(10) occurs 10 to 9999 times \n                                                depending on sz.\n       linkage section.\n       01  len                pic 9(2).\n       01  scores.\n           05 s               pic 9(10) occurs 4 to 30 times \n                                            depending on len.\n       01  weights.\n           05 w               pic 9(10) occurs 4 to 30 times \n                                            depending on len.\n       01  cap                pic 9(4).\n       01  result             pic 9(5).\n       procedure division using len scores weights cap result.\n      \n          initialize result\n          add 1 to cap giving sz\n          perform varying j from 1 until j > sz\n            move 0 to m(j)\n          end-perform\n          perform varying i from 1 until i > len\n            perform varying j from 1 until j > sz\n              if w(i) < j then\n                compute p = m(j - w(i)) + s(i)\n              else\n                move 0 to p\n              end-if\n              compute t(j) = function max (p, m(j))\n            end-perform\n            perform varying j from 1 until j > sz\n              move t(j) to m(j)\n            end-perform\n          end-perform\n          move m(sz) to result\n      \n          goback.\n       end program packBagpack.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22185,"user_id":50,"body":"       identification division.\n       program-id. packBagpack.\n       data division.\n       local-storage section.\n       01 s          pic 9(5).\n       01 w          pic 9(5).\n       01 h          pic 9(5).\n       01 x          pic 9(5).\n       01 i          pic 9(5).\n       01 arr.\n          03 l1      pic 9(5).\n          03 truc occurs 4 to  30 times depending on l1.\n             05 stuff occurs 500 times.\n                07 a  pic 9(5).\n              \n       linkage section.\n       01  len                pic 9(2).\n       01  scores.\n           05 scores-arr      pic 9(10) occurs 4 to 30 times \n                                            depending on len.\n       01  weights.\n           05 weights-arr     pic 9(10) occurs 4 to 30 times \n                                            depending on len.\n       01  cap                pic 9(4).\n       01  result             pic 9(5).\n       procedure division using len scores weights cap result.\n      \n           compute x = cap + 1\n           move len to l1\n      \n           perform varying h from weights-arr(1) until h > x\n                move scores-arr(1) to a(1, h + 1)\n           end-perform\n      \n           perform varying i from 2 until i > l1\n              move scores-arr(i)  to s\n              move weights-arr(i) to w\n              perform varying h from 1 until h > x\n                  if h < w + 1 or a(i - 1, h - w) + s <= a(i - 1, h)\n                       move a(i - 1, h) to a(i, h)\n                  else\n                       compute a(i, h) = a(i - 1, h - w) + s\n                  end-if\n              end-perform\n            end-perform\n            \n            move a(l1 , x) to result\n      \n            goback.\n       end program packBagpack.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a53a17bfd56cb9c14000003":[{"id":22186,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DISARIUM-NUMBER.\n       DATA DIVISION.\n       working-storage section.\n       01 disarium-values.\n          05  pic 9(8)  value 0.\n          05  pic 9(8)  value 1.\n          05  pic 9(8)  value 2.\n          05  pic 9(8)  value 3.\n          05  pic 9(8)  value 4.\n          05  pic 9(8)  value 5.\n          05  pic 9(8)  value 6.\n          05  pic 9(8)  value 7.\n          05  pic 9(8)  value 8.\n          05  pic 9(8)  value 9.\n          05  pic 9(8)  value 89.\n          05  pic 9(8)  value 135.\n          05  pic 9(8)  value 175.\n          05  pic 9(8)  value 518.\n          05  pic 9(8)  value 598.\n          05  pic 9(8)  value 1306.\n          05  pic 9(8)  value 1676.\n          05  pic 9(8)  value 2427.\n          05  pic 9(8)  value 2646798.\n       01 disarium redefines disarium-values.\n          05 vs pic 9(8) occurs 19 times ascending vs indexed by i.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(11).\n       PROCEDURE DIVISION USING N RESULT.\n          search all vs\n            at end         move 'Not !!' to result\n            when vs(i) = n move 'Disarium !!' to result\n          end-search.\n       END PROGRAM DISARIUM-NUMBER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22187,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DISARIUM-NUMBER.\n       author. \"ejini\u6218\u795e\".       \n       DATA DIVISION.\n       working-storage section. \n       01 temp       pic 9(8).\n       01 m          pic 9(8).\n       01 r          pic 9.\n       01 len        pic 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(11).\n       PROCEDURE DIVISION USING N RESULT.\n           move \"Not !!\" to RESULT\n           move N to m\n           initialize temp\n           compute len = function integer(function log10(N)) + 1\n           perform until len = 0\n               divide N by 10 giving N remainder r\n               compute temp = temp + r ** len   \n               subtract 1 from len\n           end-perform           \n           if temp = m then\n               move \"Disarium !!\" to result\n           end-if.\n       END PROGRAM DISARIUM-NUMBER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22188,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DISARIUM-NUMBER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(8).\n       01 C           PIC 9(3).\n       01 D           PIC 9.\n       01 S           PIC 9(32).\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(11).\n       PROCEDURE DIVISION USING N RESULT.\n          compute c = function log (n) \/ function log(10) + 1,\n          move 0 to s,\n          move n to m,\n          perform until c = 0\n            compute d = function rem (m, 10),\n            compute s = s + d ** c,\n            compute m = m \/ 10,\n            subtract 1 from c\n          end-perform,\n          if n = s then\n            move \"Disarium !!\" to result\n          else \n            move \"Not !!\" to result\n          end-if,\n          goback.\n       END PROGRAM DISARIUM-NUMBER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22189,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. DISARIUM-NUMBER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 O           PIC 9(8).\n       01 A           PIC 9(8).\n       01 M           PIC 9(20).\n       01 I           PIC 9(8).\n       01 R           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC a(11).\n       PROCEDURE DIVISION USING N RESULT.\n          move n to m\n          move 1 to i\n          move 0 to o\n          move 0 to a\n      \n          perform until m = 0\n            divide 10 into m giving m remainder r\n            compute a = 10 * a + r\n          end-perform\n\n          perform until a = 0\n            divide 10 into a giving a remainder r\n            compute o = o  + r ** i\n            add 1 to i\n          end-perform\n\n          if o = n\n            move 'Disarium !!' to result\n          else\n            move 'Not !!' to result\n          end-if\n      \n          Goback.\n       END PROGRAM DISARIUM-NUMBER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a54e796b3bfa8932c0000ed":[{"id":22190,"user_id":421,"body":"       identification division.\n       program-id. jumping-number.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01 r           pic 9.\n       01 d           pic 9.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(9).\n       procedure division using n result.\n           move \"Jumping!!\" to result\n           perform until n = 0\n               divide n by 10 giving n remainder r\n               compute d = function rem(n, 10)\n               if d = 0 and n = 0 then\n                   goback\n               end-if\n               if function abs(r - d) <> 1 then \n                   move \"Not!!\" to result\n                   goback \n               end-if\n          end-perform.\n       end program jumping-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22191,"user_id":53,"body":"       identification division.\n       program-id. jumping-number.\n       data division.\n       local-storage section.\n       01 p           PIC 9(8).\n       01 d           PIC 9(8).\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(9).\n       procedure division using n result.\n          move \"Jumping!!\" to result,\n          divide n by 10 giving n remainder p,\n          perform until n = 0\n            divide n by 10 giving n remainder d,\n            if function abs( d - p) <> 1 then\n              move \"Not!!\" to result,\n              next sentence\n            else\n              move d to p\n            end-if\n          end-perform,\n          goback.\n       end program jumping-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22192,"user_id":168,"body":"       identification division.\n       program-id. jumping-number.\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 redefines n.\n          05 digit pic 9 occurs 8 times indexed by i.\n       01 result      PIC a(9).\n       procedure division using n result.\n          set i to 0\n          inspect n tallying i for leading '0'\n          set i up by 1\n          perform varying i from i by 1 until i >= length of n\n             if function abs(digit(i) - digit(i + 1)) <> 1\n                move 'Not!!' to result\n                goback\n             end-if\n          end-perform\n          move 'Jumping!!' to result      \n          goback.\n       end program jumping-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22193,"user_id":50,"body":"       identification division.\n       program-id. jumping-number.\n       data division.\n       local-storage section.\n       01 a           PIC 9.\n       01 b           PIC 9.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(9).\n       procedure division using n result.\n      \n          move 'Jumping!!' to result\n      \n          divide 10 into n giving n remainder a\n      \n          perform until n = 0\n            divide 10 into n giving n remainder b\n            if function abs(a - b) <> 1\n               move 'Not!!' to result\n               exit perform\n            end-if\n            move b to a\n          end-perform\n      \n          goback.\n       end program jumping-number.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a55f04be6be383a50000187":[{"id":22194,"user_id":421,"body":"       identification division.\n       program-id. special-number.\n       author. \"ejini\u6218\u795e\".       \n       data division.\n       working-storage section.\n       01 i           pic 9.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(9).\n       procedure division using n result. \n           move \"Special!!\" to result           \n           perform until n = 0 \n               divide 10 into n giving n remainder i  \n               if i > 5 then\n                   move \"NOT!!\" to result\n                   goback             \n               end-if\n           end-perform.\n       end program special-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22195,"user_id":168,"body":"       identification division.\n       program-id. special-number.\n      \n       data division.\n       local-storage section.\n       01 t           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(9).\n       procedure division using n result.\n          move n to t\n          inspect t converting '6789' to '0000'\n          if t = n\n              move 'Special!!' to result\n          else\n              move 'NOT!!' to result\n          end-if.\n       end program special-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22196,"user_id":53,"body":"       identification division.\n       program-id. special-number.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(9).\n       procedure division using n result.\n          perform until n = 0\n            divide 10 into n giving n remainder r\n            if r > 5\n              move 'NOT!!' to result\n              goback\n            end-if\n          end-perform\n          move 'Special!!' to result\n          goback.\n       end program special-number.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22197,"user_id":50,"body":"       identification division.\n       program-id. special-number.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(9).\n       procedure division using n result.\n      \n          move 'Special!!' to result\n          perform until n = 0\n            divide 10 into n giving n remainder r\n            if r > 5\n              move 'NOT!!' to result\n              exit perform\n            end-if\n          end-perform\n      \n          goback.\n       end program special-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a58d46cfd56cb4e8600009d":[{"id":22198,"user_id":53,"body":"       identification division.\n       program-id. halving-sum.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          move 0 to result,\n          perform until n = 0 \n            add n to result\n            divide 2 into n\n          end-perform,\n          goback.\n       end program halving-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22199,"user_id":421,"body":"       identification division.\n       program-id. halving-sum.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n           PERFORM UNTIL n = 0\n               ADD n TO result\n               DIVIDE n BY 2 GIVING n\n           END-PERFORM.\n       end program halving-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22200,"user_id":50,"body":"       identification division.\n       program-id. halving-sum.\n       data division.\n       local-storage section.\n       01 popcnt      pic 9(8) value 0.\n       01 a           pic 9(8).\n       01 r           pic 9 value 0.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n      \n          compute a = 2 * n\n\n          perform until n = 0\n            divide 2 into n giving n remainder r\n            add r to popcnt\n          end-perform\n\n          compute result = a - popcnt\n      \n          goback.\n       end program halving-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22201,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. halving-sum.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM UNTIL N = 0\n               ADD N  TO RESULT\n               DIVIDE 2 INTO N\n           END-PERFORM.\n       END PROGRAM halving-sum.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22202,"user_id":168,"body":"       identification division.\n       program-id. halving-sum.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(8).\n       procedure division using n result.\n          compute result = 0\n          perform until n = 0\n              add n to result\n              divide 2 into n\n          end-perform.\n       end program halving-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a58d889880385c2f40000aa":[{"id":22203,"user_id":168,"body":"       identification division.\n       program-id. AUTOMORPHIC.\n       data division.\n       local-storage section.\n       01 x           pic 9(8).\n       01 i           pic 9.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(11).\n          88 automorphic value 'Automorphic' when set to false 'Not!!'.\n       procedure division using n result.\n          compute x = n * n\n          inspect n tallying i for leading '0'\n          if function numval(x(9 - function max(8 - i, 1):)) = n\n              set automorphic to true\n          else\n              set automorphic to false\n          end-if.\n       end program AUTOMORPHIC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22204,"user_id":53,"body":"       identification division.\n       program-id. AUTOMORPHIC.\n       repository. function rem intrinsic.\n       data division.\n       local-storage section.\n       01 m           PIC 9(8).\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(11).\n       procedure division using n result.\n          move \"Automorphic\" to result\n          compute m = n * n\n          perform until n = 0\n            if rem(n, 10) <> rem(m, 10)\n              move \"Not!!\" to result\n              exit perform\n            end-if\n            compute n = n \/ 10\n            compute m = m \/ 10\n          end-perform\n          goback.\n       end program AUTOMORPHIC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22205,"user_id":50,"body":"       identification division.\n       program-id. AUTOMORPHIC.\n       data division.\n       working-storage section.\n       01 automorphic-values.\n          05  pic 9(8)  value 1.\n          05  pic 9(8)  value 5.\n          05  pic 9(8)  value 6.\n          05  pic 9(8)  value 25.\n          05  pic 9(8)  value 76.\n          05  pic 9(8)  value 376.\n          05  pic 9(8)  value 625.\n          05  pic 9(8)  value 9376.\n       01 automorph redefines automorphic-values.\n          05 vs pic 9(8) occurs 8 times ascending vs indexed by i.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(11).\n       procedure division using n result.\n      * based on Monadius' solution to \"Disarium numbers\" kata\n      * https:\/\/www.codewars.com\/kata\/reviews\/619d52279e40e60001b88738\/groups\/619d56566d2c6a0001d71c85\n          search all vs\n            at end         move 'Not!!' to result\n            when vs(i) = n move 'Automorphic' to result\n          end-search.\n\n          goback.\n       end program AUTOMORPHIC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22206,"user_id":null,"body":"       identification division.\n       program-id. AUTOMORPHIC.\n       data division.\n       working-storage section.\n       01 dig-num     PIC 9(8).\n       01 square      PIC 9(8).\n      \n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC a(11).\n       procedure division using n result.\n\n      * Coding and coding...\n       compute square = n ** 2.\n       compute dig-num = function log10(n) + 1.\n      \n       if square - n not = (square \/ (10 ** dig-num)) * (10 ** dig-num)\n          move \"Not!!\" to result\n       else\n          move \"Automorphic\" to result.\n\n          goback.\n       end program AUTOMORPHIC.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a61a846cadebf9738000076":[{"id":22207,"user_id":null,"body":"       identification division.\n       program-id. peak.\n       data division.\n       local-storage section.\n       01  total           pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 4 to 100 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  result          pic s9(3) sign leading.\n       procedure division using arr result.\n         move 0 to total result\n         perform varying i from 1 until i > arr-length\n           add xs(i) to total\n         end-perform\n         perform varying i from 1 until i > arr-length\n           add xs(i) to result\n           if result * 2 = total + xs(i) then\n             move i to result\n             goback\n           end-if\n         end-perform\n         move -1 to result.\n       end program peak.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22208,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. peak.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  SUM-LEFT      PIC  9(3).\n       01  SUM-RIGHT     PIC  9(3).\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN        PIC  9(3).\n           05 XS         PIC  9(2) OCCURS 4 TO 100 DEPENDING ON LEN \n                                   INDEXED I J.\n       01  RESULT        PIC S9(3) SIGN LEADING.\n       PROCEDURE DIVISION USING ARR RESULT.\n           MOVE -1  TO RESULT\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN  OR RESULT > -1\n               ADD  XS(I)  TO SUM-LEFT\n               MOVE 0      TO SUM-RIGHT\n               PERFORM VARYING J FROM I BY 1 UNTIL J > LEN\n                   ADD XS(J)  TO SUM-RIGHT\n               END-PERFORM\n\n               IF  SUM-LEFT = SUM-RIGHT\n                   MOVE I  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM peak.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22209,"user_id":53,"body":"       identification division.\n       program-id. peak.\n       data division.\n       local-storage section.\n       01  s               pic 9(5).\n       01  p               pic 9(5).\n      \n       linkage section.\n       01  arr.\n           05 n            pic 9(3).\n           05 xs           pic 9(2) occurs 4 to 100 times \n                                    depending on n\n                                    indexed by i.\n       01  m               pic s9(3) sign leading.\n       procedure division using arr m.\n           move -1 to m\n           perform varying i from 1 until i > n\n              compute s = s + xs(i)\n           end-perform\n           perform varying i from 1 until i > n\n              compute s = s - xs(i)\n              if s = p\n                move i to m\n                goback\n              end-if\n              compute p = p + xs(i)\n            end-perform\n            goback.\n       end program peak.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22210,"user_id":168,"body":"       identification division.\n       program-id. peak.\n       data division.\n       local-storage section.\n       01  l               pic 9(8) binary.\n       01  r               pic 9(8) binary.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 4 to 100 times \n                                    depending on arr-length\n                                    indexed by i.\n       01  result          pic s9(3) sign leading.\n       procedure division using arr result.\n           perform varying i from 1 until i > arr-length\n               add xs(i) to r\n           end-perform\n           perform varying i from 1 until i > arr-length\n               subtract xs(i) from r\n               if l = r\n                  move i to result\n                  goback\n               end-if\n               add xs(i) to l\n           end-perform\n           move -1 to result\n           goback.\n       end program peak.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22211,"user_id":50,"body":"       identification division.\n       program-id. peak.\n       data division.\n       local-storage section.\n       01  s               pic 9(5).\n       01  r               pic 9(5).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(3).\n           05 xs           pic 9(2) occurs 4 to 100 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  result          pic s9(3) sign leading.\n       procedure division using arr result.\n           \n           perform varying i from 1 until i > arr-length\n                compute s = s + xs(i)\n           end-perform\n      \n           perform varying i from 1 until i > arr-length\n                subtract xs(i) from s\n                if s = r\n                    move i to result\n                    goback\n                end-if\n                add xs(i) to r\n            end-perform\n            \n            move -1 to result\n      \n            goback.\n       end program peak.\n      \n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a62da60d39ec5d947000093":[{"id":22212,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Find-Squares.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING X Y RESULT.\n           COMPUTE RESULT = Y * (Y + 1) * (2 * Y + 1)\n                   \/ 6 + (X - Y) * Y * (Y + 1) \/ 2.\n       END PROGRAM Find-Squares.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22213,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Find-Squares.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING X Y RESULT.\n           COMPUTE RESULT = Y * (Y + 1) * (3 * X - Y + 1) \/ 6.\n       END PROGRAM Find-Squares.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22214,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Find-Squares.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING X Y RESULT.\n       COMPUTE RESULT = Y * (Y + 1) * (Y - (3 * X) - 1) \/ -6 .\n       END PROGRAM Find-Squares.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22215,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Find-Squares.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING X Y RESULT.\n\n          COMPUTE RESULT = -Y * (Y + 1) * (Y - (3 * X) - 1) \/ 6 .\n\n       END PROGRAM Find-Squares.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22216,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n           COMPUTE RESULT = Y * (Y + 1) * (2 * Y + 1) \/ 6\n                          + Y * (Y + 1) * (X - Y) \/ 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22217,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n       compute result = y * (y + 1) * (3 * x - y + 1) \/ 6\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22218,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n           IF X IS GREATER THAN Y,\n               MOVE X TO RESULT,\n               MOVE Y TO X,\n               MOVE RESULT TO Y.\n      \n           COMPUTE RESULT =\n               X * (X + 1) * (2 * X + 1) \/ 6 + \n               (Y - X) * X * (X + 1) \/ 2.      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22219,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n          compute result = y * (y + 1) * (y - (x * 3) - 1) \/ 6\n      * looked up the formula online\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22220,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n       COMPUTE RESULT = -Y * (Y + 1) * (Y - (3 * X) - 1) \/ 6\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22221,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n            COMPUTE RESULT = 0\n            PERFORM UNTIL X = 0 OR Y = 0\n                COMPUTE RESULT = RESULT + X * Y\n                COMPUTE X = X - 1\n                COMPUTE Y = Y - 1\n            END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22222,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 X           PIC 9(8).\n       01 Y           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 a           PIC 9(8).\n       01 b      PIC 9(8).\n       PROCEDURE DIVISION.\n       Find-Squares SECTION.\n        Set a to X,\n        Set b to Y,\n        Set result to zero.\n      \n        Perform until a = 0 or b = 0\n            Compute result = result + a * b,\n            Compute a = a - 1,\n            Compute b = b - 1, end-perform.\n      \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a662a02e626c54e87000123":[{"id":22223,"user_id":421,"body":"       identification division.\n       program-id. ExtraPerfect.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  i                 pic 9(3).\n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using n result.\n           compute res-length rounded mode toward-greater = n \/ 2\n           perform varying i from 1 by 2 until i > n\n               move i to res(i \/ 2 + 1)\n           end-perform.\n       end program ExtraPerfect.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22224,"user_id":null,"body":"       identification division.\n       program-id. ExtraPerfect.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using n result.\n         compute res-length = (n + 1) \/ 2\n         perform varying n from 1 until n > res-length\n           compute res(n) = n * 2 - 1.\n       end program ExtraPerfect.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22225,"user_id":168,"body":"       identification division.\n       program-id. ExtraPerfect.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 100 times \n                                      depending on res-length indexed i.\n      \n       procedure division using n result.\n          perform varying i from 1 by 2 until i > n\n              add 1 to res-length\n              move i to res(res-length)\n          end-perform.\n       end program ExtraPerfect.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22226,"user_id":53,"body":"       identification division.\n       program-id. ExtraPerfect.\n       data division.\n       local-storage section.\n       linkage section.\n       01  n                 pic 9(3).\n       01  r.\n           05 s              pic 9(3).\n           05 res            pic 9(3) occurs 0 to 100 times \n                                      depending on s\n                                      indexed by m.\n       procedure division using n r.\n          move 0 to s\n          perform varying m from 1 by 2 until m > n\n            add 1 to s\n            move m to res(s)\n          end-perform\n          goback.\n       end program ExtraPerfect.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22227,"user_id":50,"body":"       identification division.\n       program-id. ExtraPerfect.\n       data division.\n       local-storage section.\n       01  m                 pic 9(3).\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 100 times \n                                      depending on res-length.\n      \n       procedure division using n result.\n      \n          move 0 to res-length\n          perform varying m from 1 by 2 until m > n\n            add 1 to res-length\n            move m to res(res-length)\n          end-perform\n      \n          goback.\n       end program ExtraPerfect.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a7778790136a132a00000c1":[{"id":22228,"user_id":421,"body":"       identification division.\n       program-id. single-digit.\n       author. \"ejini\u6218\u795e\".\n       data division.     \n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC 9(10).\n       procedure division using n result.   \n           if n < 10 then\n               move n to result\n               goback\n           end-if\n           perform until n < 10\n               initialize result\n               perform until n = 0\n                   if function rem(n, 2) = 1 then\n                       add 1 to result\n                   end-if\n                   divide 2 into n\n               end-perform\n               move result to n\n           end-perform.\n       end program single-digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22229,"user_id":168,"body":"       identification division.\n       program-id. single-digit recursive.\n       data division.\n       local-storage section.\n       01 res         pic 9(20).\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC 9(10).\n       procedure division using n result.\n          if n < 10 then move n to result; goback end-if\n          perform until n = 0\n            add function mod(n, 2) to res\n            divide 2 into n\n          end-perform\n          call 'single-digit' using res result.\n       end program single-digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22230,"user_id":50,"body":"       identification division.\n       program-id. single-digit.\n       data division.\n       local-storage section.\n       01 a           PIC 9(20).\n       01 r           PIC 9.\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC 9(10).\n       procedure division using n result.\n      \n          perform until n < 10\n            move 0 to a\n            perform until n = 0\n              divide 2 into n giving n remainder r\n              add r to a\n            end-perform\n            move a to n\n          end-perform\n      \n          move n to result\n      \n          goback.\n       end program single-digit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22231,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. single-digit.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(20).\n       01 RESULT      PIC 9(10).\n       PROCEDURE DIVISION USING N RESULT.\n           MOVE N  TO RESULT\n           PERFORM UNTIL N < 10\n               MOVE 0  TO RESULT\n               PERFORM UNTIL N < 1\n                   COMPUTE RESULT = RESULT + FUNCTION REM(N, 2)\n                   COMPUTE N = N \/ 2\n               END-PERFORM\n               MOVE RESULT  TO N\n           END-PERFORM.\n       END PROGRAM single-digit.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22232,"user_id":53,"body":"       identification division.\n       program-id. single-digit.\n       data division.\n       local-storage section.\n       01 a           PIC 9(20).\n       01 b           PIC 9.\n       linkage section.\n       01 n           PIC 9(20).\n       01 result      PIC 9(10).\n       procedure division using n result.\n          perform until n < 10\n            move 0 to a\n            perform until n = 0\n              compute b = function rem (n, 2)\n              compute n = n \/ 2\n              add b to a\n            end-perform\n            move a to n\n          end-perform\n          move n to result\n          goback.\n       end program single-digit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a84d485742ba347b90006b7":[{"id":22233,"user_id":53,"body":"       identification division.\n       program-id. HowManyGifts.\n       data division.\n       local-storage section.\n       01  n                pic 9(11).\n       linkage section.\n       01  m                pic 9(10).\n       01  arr.\n           03  w            pic 9(4).\n           03  xs           occurs 9999 times \n                            depending on w indexed by i.\n               05  x        pic 9(10).\n       01  r                pic 9(4).\n       procedure division using m arr r.\n          sort xs on ascending key x\n          perform varying i from 1 until n > m\n            if i > w then\n              move w to r\n              exit paragraph\n            end-if\n            add x(i) to n\n          end-perform\n          subtract 2 from i giving r\n          goback.\n       end program HowManyGifts.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22234,"user_id":50,"body":"       identification division.\n       program-id. HowManyGifts.\n       data division.\n       local-storage section.\n       01  n                pic 9(11).\n      \n       linkage section.\n       01  maxBudget        pic 9(10).\n       01  tble.\n           05  l            pic 9(4).\n           05  gifts occurs 9999 times depending on l indexed by i.\n               07  gift     pic 9(10).\n       01  result           pic 9(4).\n      \n       procedure division using maxBudget tble result.\n      \n          sort gifts on ascending gift\n      \n          perform varying i from 1 until n > maxBudget\n              if i > l\n                move l to result\n                goback\n              end-if\n              add gift(i) to n\n          end-perform\n          compute result = i - 2\n      \n          goback.\n       end program HowManyGifts.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a8d2bf60025e9163c0000bc":[{"id":22235,"user_id":50,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       local-storage section.\n       01  counter.\n           03  cl            pic 9(2).\n           03  pair occurs 5 to 50 depending on cl indexed k.\n               05   cnt     pic 9(3).\n               05   n       pic 9(2).\n      \n       linkage section.\n       01  arr.\n           05  l             pic 9(2).\n           05  truc occurs 5 to 50 depending on l indexed i.\n               07  xs            pic 9(2).\n       01  result.\n           05  r             pic 9(2) occurs 5 to 50 times \n                                      depending on l.\n      \n       procedure division using arr result.\n      \n          initialize result\n          set k to 1\n          sort truc on ascending key xs\n          move 1 to cl cnt(1)\n          move xs(1) to n(1)\n          perform varying i from 2 until i > l\n              if xs(i) = n(k)\n                add 1 to cnt(k)\n              else\n                add 1 to cl\n                set k up by 1\n                move 1 to cnt(k)\n                move xs(i) to n(k)\n              end-if\n          end-perform\n          sort pair on descending cnt ascending n\n          set i to 1\n          perform varying k from 1 until k > cl\n              perform cnt(k) times\n                  move n(k) to r(i)\n                  set i up by 1\n              end-perform\n          end-perform.\n      \n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22236,"user_id":53,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       local-storage section.\n       01  frequencies.\n           03  cl            pic 9(2).\n           03  pair          occurs 5 to 50 depending on cl indexed k.\n               05   freq     pic 9(3).\n               05   n        pic 9(2).\n       linkage section.\n       01  arr.\n           05  l             pic 9(2).\n           05  truc          occurs 5 to 50 depending on l indexed i.\n               07  xs        pic 9(2).\n       01  result.\n           05  r             pic 9(2) \n                             occurs 5 to 50 times depending on l.\n       procedure division using arr result.\n          initialize result\n          set k to 1\n          sort truc on ascending key xs\n          set cl freq(1) to 1\n          move xs(1) to n(1)\n          perform varying i from 2 until i > l\n            if xs(i) = n(k) then add 1 to freq(k)\n            else\n              add 1 to cl k\n              set freq(k) to 1\n              move xs(i) to n(k)\n            end-if\n          end-perform\n          sort pair on descending freq ascending n\n          set i to 1\n          perform varying k from 1 until k > cl\n            perform freq(k) times\n              move n(k) to r(i)\n              add 1 to i\n            end-perform\n          end-perform\n          goback.\n       end program Solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a903c0557c562cd7500026f":[{"id":22237,"user_id":421,"body":"       identification division.\n       program-id. solve.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 99.\n           05 xs      pic 99 occurs 0 to 20 times \n                                depending on arr-length\n                                indexed by i j k.\n       01 result      pic 99.\n      \n       procedure division using arr result.\n           initialize result\n           perform varying i from 1 by 1 until i > arr-length\n               perform varying j from 1 by 1 until j > arr-length\n                   perform varying k from 1 by 1 until k > arr-length\n                       if xs(j) - xs(i) = xs(k) - xs(j) \n                          and i <> j and i <> k and j <> k then\n                           add 1 to result\n                       end-if\n                   end-perform\n               end-perform\n           end-perform\n           divide result by 2 giving result.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22238,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 99.\n           05 xs-arr         occurs 0 to 20 times \n                             depending on arr-length\n                             indexed by i j k.\n              10 xs   pic 99.\n       01 result      pic 99.\n      \n       procedure division using arr result.\n          move 0 to result\n          sort xs-arr on ascending key xs\n          perform varying i from 1 until i >= arr-length\n            after j from function abs(i + 1) until j >= arr-length\n            after k from function abs(j + 1) until k > arr-length\n              if xs(k) - xs(j) = xs(j) - xs(i)\n                  add 1 to result\n              end-if\n          end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22239,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01  n            pic 99.\n       01  m            pic 99.\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 99.\n           05 xs      pic 99 occurs 0 to 20 times \n                                depending on arr-length\n                                indexed i j k h.\n       01 result      pic 99.\n     \n       procedure division using arr result.\n      \n          perform varying j from 1 until j > arr-length - 2\n              move xs(j) to n\n              compute k = j + 1\n              perform until k > arr-length - 1\n                  compute m = xs(k) * 2 - n\n                  compute h = k + 1\n                  perform until h > arr-length\n                    if xs(h) = m\n                      add 1 to result\n                      exit perform\n                    end-if\n                    add 1 to h\n                  end-perform\n                  add 1 to k\n              end-perform\n          end-perform\n              \n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22240,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  n            pic 99.\n       01  d            pic 99.\n       linkage section.\n       01  arr.\n           05 arr-length   pic 99.\n           05 xs      pic 99 occurs 0 to 20 times \n                                depending on arr-length\n                                indexed j k h.\n       01 result      pic 99.\n       procedure division using arr result.\n          perform varying j from 1 until j > arr-length - 2\n              move xs(j) to n\n              add 1 to j giving k\n              perform until k > arr-length - 1\n                  compute d = xs(k) * 2 - n\n                  add 1 to k giving h\n                  perform until h > arr-length\n                    if xs(h) = d\n                      add 1 to result\n                      exit perform\n                    end-if\n                    add 1 to h\n                  end-perform\n                  add 1 to k\n              end-perform\n          end-perform\n              \n          goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a905c2157c562994900009d":[{"id":22241,"user_id":421,"body":"       identification division.\n       program-id. ProductArray.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       working-storage section.\n       01  v                 pic 9(20).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 2 to 10 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(20) occurs 0 to 10 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n           move 1 to v\n           perform varying i from 1 by 1 until i > arr-length\n               multiply xs(i) by v\n           end-perform          \n           perform varying i from 1 by 1 until i > arr-length\n               add 1 to res-length\n               compute res(res-length) = v \/ xs(i)\n           end-perform.\n       end program ProductArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22242,"user_id":168,"body":"       identification division.\n       program-id. ProductArray.\n       data division.\n       local-storage section.\n       01  p                 pic 9(20) value 1.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 2 to 10 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(20) occurs 0 to 10 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n          perform varying i from 1 until i > arr-length\n              multiply xs(i) by p\n          end-perform\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              divide p by xs(i) giving res(i)\n          end-perform\n          goback.\n       end program ProductArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22243,"user_id":53,"body":"       identification division.\n       program-id. ProductArray.\n       data division.\n       local-storage section.\n       01  p                 pic 9(20).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 2 to 10 times \n                                      depending on arr-length\n                                      indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(20) occurs 0 to 10 times \n                                     depending on res-length.\n       procedure division using arr result.\n          move 1 to p\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n            multiply xs(i) by p\n          end-perform\n          perform varying i from 1 until i > arr-length\n             compute res(i) = p \/ xs(i)\n          end-perform\n          goback.\n       end program ProductArray.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22244,"user_id":50,"body":"       identification division.\n       program-id. ProductArray.\n       data division.\n       local-storage section.\n       01  prod              pic 9(20).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(2) occurs 2 to 10 times \n                                      depending on arr-length\n                                      indexed i.\n       01  result.\n           05 res-length     pic 9(2).\n           05 res            pic 9(20) occurs 0 to 10 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n      \n          move 1 to prod\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n            multiply xs(i) by prod\n          end-perform\n          perform varying i from 1 until i > arr-length\n             compute res(i) = prod \/ xs(i)\n          end-perform\n      \n          goback.\n       end program ProductArray.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a9078e24a6b340b340000b8":[{"id":22245,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       working-storage section.\n       01 i           pic 9(10).\n       01 d           pic 9(20).\n       01 filler      pic 9.\n          88 prime value 1 when set to false 0.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          set prime to false\n          perform varying i from 0 by 1 until prime\n              compute result = n - i\n              perform is-prime\n              if prime then goback end-if\n              compute result = n + i\n              perform is-prime\n          end-perform.\n      \n       is-prime.\n          if result < 2\n              set prime to false\n          else\n              set prime to true\n              perform varying d from 2 by 1 until d * d > result\n                  if function mod(result, d) = 0\n                      set prime to false\n                      exit perform\n                  end-if\n              end-perform\n          end-if.\n               \n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22246,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01 i           pic 9(20).\n       01 a           pic 9(20).\n       01 b           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          perform until 1 < 0\n            compute a = n - i\n            call 'IS-PRIME' using a b\n            if b = 1 then\n              move a to result\n              exit perform\n            end-if\n            compute a = n + i\n            call 'IS-PRIME' using a b\n            if b = 1 then\n              move a to result\n              exit perform\n            end-if\n            add 1 to i\n          end-perform\n          goback.\n       end program solve.\n      \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. IS-PRIME.\n       DATA DIVISION.\n       working-storage section.\n       01 d            pic 9(20).\n       LINKAGE SECTION.\n       01 N            PIC 9(20).\n       01 RESULT       PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           move 0 to result\n           if n < 2 then goback end-if\n           perform varying d from 2 by 1 until d * d > n\n              if function mod(n, d) = 0 then goback end-if\n           end-perform\n           move 1 to result.\n       END PROGRAM IS-PRIME.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22247,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 check       pic 9.\n       01 step        pic 9(8).\n       01 tmp         pic 9(20).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          call 'is-prime' using n check\n      \n          if check = 1\n            move n to result\n            goback\n          end-if\n      \n          perform varying step from 1 until 1 = 0\n              compute tmp = n - step\n              call 'is-prime' using tmp check\n              if check = 1\n                move tmp to result\n                goback\n              end-if\n              compute tmp= n + step\n              call 'is-prime' using tmp check\n              if check = 1\n                move tmp to result\n                goback\n              end-if\n          end-perform\n\n          goback.\n       end program solve.\n\n       identification division.\n       program-id. is-prime.\n      \n       data division.\n       local-storage section.\n       01 p           pic 9(10).\n       linkage section.\n       01 n           pic 9(20).\n       01 o           pic 9.\n       procedure division using n o.\n      \n          move 1 to o\n      \n          if n < 2\n            move 0 to o\n            goback\n          end-if\n      \n          perform varying p from 2 by 1 until p * p > n\n              if function rem(n, p) = 0\n                move 0 to o\n                exit perform\n              end-if\n          end-perform\n      \n          goback.\n       end program is-prime.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a90c9ecb171012b47000077":[{"id":22248,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TEST-IT.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       working-storage section.\n       01 m           pic 9(10).\n       01 n           pic 9(10).\n       01 r1          pic 9.\n       01 r2          pic 9.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n           initialize m n result\n           perform until a = 0\n               divide a by 10 giving a remainder r1\n               add r1 to m\n           end-perform\n           perform until b = 0\n               divide b by 10 giving b remainder r2\n               add r2 to n\n           end-perform\n           multiply m by n giving result.\n       END PROGRAM TEST-IT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22249,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TEST-IT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 X           PIC 9(2).\n       01 Y           PIC 9(2).\n       01 I           PIC 9.\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n          PERFORM VARYING I FROM 1 BY 1 UNTIL I > 8\n              ADD FUNCTION NUMVAL(A(I:1)) TO X\n              ADD FUNCTION NUMVAL(B(I:1)) TO Y\n          END-PERFORM\n          COMPUTE RESULT = X * Y.\n       END PROGRAM TEST-IT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22250,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TEST-IT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 X           PIC 9(2).\n       01 Y           PIC 9(2).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 REDEFINES A.\n          05 A-DIGITS PIC 9 OCCURS 8 TIMES INDEXED BY I.\n       01 B           PIC 9(8).\n       01 REDEFINES B.\n          05 B-DIGITS PIC 9 OCCURS 8 TIMES.\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n          PERFORM VARYING I FROM 1 BY 1 UNTIL I > 8\n              ADD A-DIGITS(I) TO X\n              ADD B-DIGITS(I) TO Y\n          END-PERFORM\n          COMPUTE RESULT = X * Y.\n       END PROGRAM TEST-IT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22251,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TEST-IT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 M           PIC 9(8).\n       01 N           PIC 9(8).\n       01 I           PIC 9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n          perform until a = 0\n            compute i = function rem (a, 10)\n            compute m = m + i\n            compute a = a \/ 10\n          end-perform\n          perform until b = 0\n            compute i = function rem (b, 10)\n            compute n = n + i\n            compute b = b \/ 10\n          end-perform\n          compute result = m * n\n          Goback.\n      \n       END PROGRAM TEST-IT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22252,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TEST-IT.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC 9(8).\n       LINKAGE SECTION.\n       01 A           PIC 9(8).\n       01 B           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING A B RESULT.\n\n          Move 0 to result,\n\n          Perform until a = 0,\n            Divide 10 into a giving a remainder c,\n            Add c to result,\n          End-perform\n        \n          Perform until b = 0,\n            Divide 10 into b giving b remainder c,\n            Add c to a,\n          End-perform\n      \n          Multiply a by result giving result,\n      \n          Goback.\n      \n       END PROGRAM TEST-IT.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a91a7c5fd8c061367000002":[{"id":22253,"user_id":421,"body":"       identification division.\n       program-id. nthSmallest.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  total             pic 9(4).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 3 to 50 times depending on arr-length\n                                       indexed by i.\n              10 xs          pic 9(3).\n       01  val               pic 9(5).\n       01  result            pic 9(3).\n      \n       procedure division using arr val result.\n           sort tbl ascending xs\n           move 1 to result\n           move xs(1) to total\n           perform varying i from 2 by 1 until i > arr-length \n                                         or total >= val\n               add xs(i) to total\n               add 1 to result              \n           end-perform\n           subtract 1 from result.\n       end program nthSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22254,"user_id":50,"body":"       identification division.\n       program-id. nthSmallest.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 3 to 50 times depending on arr-length\n                                       indexed by i.\n              10 xs          pic 9(3).\n       01  val               pic 9(5).\n       01  result            pic 9(3).\n      \n       procedure division using arr val result.\n           sort tbl on ascending xs\n           perform varying i from 1 until i > arr-length\n              if val <= xs(i)\n                  compute result = i - 1\n                  goback\n              else \n                subtract xs(i) from val\n              end-if\n           end-perform\n      \n           goback.\n       end program nthSmallest.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22255,"user_id":53,"body":"       identification division.\n       program-id. nthSmallest.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 99.\n           05 tbl occurs 3 to 50 times depending on arr-length\n                                       indexed by i.\n              10 xs          pic 9(3).\n       01  val               pic 9(5).\n       01  result            pic 9(3).\n       procedure division using arr val result.\n           sort tbl on ascending xs\n           perform varying i from 1 until i > arr-length\n              if val <= xs(i)\n                subtract 1 from i giving result\n                exit paragraph\n              else \n                subtract xs(i) from val\n              end-if\n           end-perform\n           goback.\n       end program nthSmallest.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a97387e5ee396e70a00016d":[{"id":22256,"user_id":421,"body":"       identification division.\n       program-id. power-of-i.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n          evaluate function rem(n, 4)\n              when 1        move \"i\" to result\n              when 2        move \"-1\" to result\n              when 3        move \"-i\" to result\n              when other    move \"1\" to result\n          end-evaluate.\n       end program power-of-i.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22257,"user_id":50,"body":"       identification division.\n       program-id. power-of-i.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n          \n          evaluate function rem(n,4)\n            when 0     move \"1\"  to result\n            when 1     move \"i\"  to result\n            when 2     move \"-1\" to result\n            when other move \"-i\" to result\n          end-evaluate\n      \n          goback.\n       end program power-of-i.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22258,"user_id":53,"body":"       identification division.\n       program-id. power-of-i.\n       data division.\n       local-storage section.\n       01  a          pic 9.\n       01  s          pic x(9).\n       01  i          pic 9.\n       01  x-str      pic x(2).\n       01  x-delim    pic x.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic x(2) occurs 0 to 4 times \n                                     depending on arr-length.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n           move '1,i,-1,-i' to s\n           move 1 to i\n           move 0 to arr-length\n           perform with test after until x-delim = space\n               unstring s\n                   delimited by ',' or space \n                   into x-str delimiter in x-delim\n                   with pointer i\n               add 1 to arr-length\n               move x-str to xs(arr-length)\n           end-perform\n           compute a = function rem (n, 4) + 1\n           move xs(a) to result\n           goback.\n       end program power-of-i.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22259,"user_id":null,"body":"       identification division.\n       program-id. power-of-i.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n         evaluate function mod(n, 4)\n           when 0 move \"1\" to result\n           when 1 move \"i\" to result\n           when 2 move \"-1\" to result\n           when 3 move \"-i\" to result\n         end-evaluate.\n       end program power-of-i.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22260,"user_id":null,"body":"       identification division.\n       program-id. power-of-i.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n          evaluate function mod(n, 4)\n              when 0 move \"1\" to result\n              when 1 move \"i\" to result\n              when 2 move \"-1\" to result\n              when 3 move \"-i\" to result\n          end-evaluate\n          goback.\n       end program power-of-i.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22261,"user_id":168,"body":"       identification division.\n       program-id. power-of-i.\n       data division.\n       working-storage section.\n       01 powers      pic x(8) value '1 i -1-i'.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic a(2).\n       procedure division using n result.\n          compute n = 1 + 2 * function mod(n, 4)\n          move powers(n:2) to result.\n       end program power-of-i.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a99a03e4a6b34bb3c000124":[{"id":22262,"user_id":168,"body":"       identification division.\n       program-id. numPrimorial.\n       data division.\n       working-storage section.\n       01  is-prime          pic 9.\n       01  p                 pic 9(8).\n       01  d                 pic 9(8).\n      \n       linkage section.\n       01  n                 pic 99.\n       01  result            pic 9(38).\n      \n       procedure division using n result.\n          move 1 to result\n          perform varying p from 2 until n = 0\n              move 1 to is-prime\n              perform varying d from 2 until d * d > p\n                  if function mod(p, d) = 0\n                      move 0 to is-prime\n                      exit perform\n                  end-if\n              end-perform\n              if is-prime = 1\n                  multiply p by result\n                  subtract 1 from n\n              end-if\n          end-perform\n          goback.\n       end program numPrimorial.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22263,"user_id":50,"body":"       identification division.\n       program-id. numPrimorial.\n       data division.\n       local-storage section.\n       01  primorials.\n           05  pic 9(38) value 1.\n           05  pic 9(38) value 2.\n           05  pic 9(38) value 6.\n           05  pic 9(38) value 30.\n           05  pic 9(38) value 210.\n           05  pic 9(38) value 2310.\n           05  pic 9(38) value 30030.\n           05  pic 9(38) value 510510.\n           05  pic 9(38) value 9699690.\n           05  pic 9(38) value 223092870.\n           05  pic 9(38) value 6469693230.\n           05  pic 9(38) value 200560490130.\n           05  pic 9(38) value 7420738134810.\n           05  pic 9(38) value 304250263527210.\n           05  pic 9(38) value 13082761331670030.\n           05  pic 9(38) value 614889782588491410.\n           05  pic 9(38) value 32589158477190044730.\n           05  pic 9(38) value 1922760350154212639070.\n           05  pic 9(38) value 117288381359406970983270.\n           05  pic 9(38) value 7858321551080267055879090.\n           05  pic 9(38) value 557940830126698960967415390.\n           05  pic 9(38) value 40729680599249024150621323470.\n           05  pic 9(38) value 3217644767340672907899084554130.\n           05  pic 9(38) value 267064515689275851355624017992790.\n           05  pic 9(38) value 23768741896345550770650537601358310.\n           05  pic 9(38) value 2305567963945518424753102147331756070.\n       01  arr redefines primorials.\n           05 xs    pic 9(38) occurs 26 times.\n      \n       linkage section.\n       01  n                 pic 99.\n       01  result            pic 9(38).\n      \n       procedure division using n result.\n      \n          move xs(n + 1) to result\n      \n          goback.\n       end program numPrimorial.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22264,"user_id":53,"body":"       identification division.\n       program-id. numPrimorial.\n       data division.\n       working-storage section.\n       01  solutions.\n           05  pic 9(38) value 1.\n           05  pic 9(38) value 2.\n           05  pic 9(38) value 6.\n           05  pic 9(38) value 30.\n           05  pic 9(38) value 210.\n           05  pic 9(38) value 2310.\n           05  pic 9(38) value 30030.\n           05  pic 9(38) value 510510.\n           05  pic 9(38) value 9699690.\n           05  pic 9(38) value 223092870.\n           05  pic 9(38) value 6469693230.\n           05  pic 9(38) value 200560490130.\n           05  pic 9(38) value 7420738134810.\n           05  pic 9(38) value 304250263527210.\n           05  pic 9(38) value 13082761331670030.\n           05  pic 9(38) value 614889782588491410.\n           05  pic 9(38) value 32589158477190044730.\n           05  pic 9(38) value 1922760350154212639070.\n           05  pic 9(38) value 117288381359406970983270.\n           05  pic 9(38) value 7858321551080267055879090.\n           05  pic 9(38) value 557940830126698960967415390.\n           05  pic 9(38) value 40729680599249024150621323470.\n           05  pic 9(38) value 3217644767340672907899084554130.\n           05  pic 9(38) value 267064515689275851355624017992790.\n           05  pic 9(38) value 23768741896345550770650537601358310.\n           05  pic 9(38) value 2305567963945518424753102147331756070.\n       01  arr redefines solutions.\n           05 xs    pic 9(38) occurs 26 times.\n       linkage section.\n       01  n                 pic 99.\n       01  result            pic 9(38).\n       procedure division using n result.\n          move xs(n + 1) to result\n          goback.\n       end program numPrimorial.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5aa3af22ba1bb5209f000037":[{"id":22265,"user_id":168,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       working-storage section.\n       01  sep    pic x.\n       01  len    pic 99.\n       01  terms  pic x(10) occurs 100 times indexed k.\n       01  i      usage index.\n      \n       linkage section.\n       01  eq            pic x(100).\n       01  result        pic x(100).\n      \n       procedure division using eq result.\n          move 1 to i\n          move 0 to len\n          perform until i > 100\n              add 1 to len\n              unstring eq delimited by '+' or '-' or '*' or '\/' or ' '\n                  into terms(len) delimiter in sep with pointer i\n              if sep = ' ' then exit perform end-if\n              add 1 to len\n              move sep to terms(len)\n          end-perform\n          initialize result\n          move 1 to i\n          perform varying k from len by -1 until k = 0\n              string terms(k) delimited by space into result pointer i\n          end-perform      \n          goback.\n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22266,"user_id":53,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       local-storage section.\n       01  i          usage index value 1.\n       01  j          usage index.\n       01  k          usage index value 1.\n       01  y          pic x.\n       01  d          pic 9(3).\n       01  comps.\n           03  len    pic 9(3).\n           03  x      pic x(4) \n                      occurs 0 to 99 times\n                      depending on len.\n       linkage section.\n       01  eq         pic x(100).\n       01  result     pic x(100).\n       procedure division using eq result.\n          initialize result\n          perform varying len from 1 by 2 until i > length \n              of function trim(eq)\n            unstring eq delimited by '+' or '-' or '*' or '\/'\n              into x(len) delimiter in y with pointer i\n            move y to x(len + 1)\n          end-perform\n          subtract 1 from len giving d\n          perform varying j from d by -1 until j = 0\n            string x(j) delimited by space into result with pointer k\n          end-perform\n          goback.\n       end program Solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22267,"user_id":50,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       local-storage section.\n       01  arr.\n           03  l      pic 9(3).\n           03  token  pic x(4) occurs 0 to 90 times\n                      depending on l indexed by j.\n       01  i          usage index.\n       01  o          pic x.\n      \n       linkage section.\n       01  eq            pic x(100).\n       01  result        pic x(100).\n      \n       procedure division using eq result.\n      \n          initialize result\n      \n          set i to 1\n          perform varying l from 1 by 2\n              until i > length function trim(eq trailing)\n            unstring eq\n                delimited by '+' or '-' or '\/' or '*'\n                into token(l)\n                delimiter in o\n                with pointer i\n            end-unstring\n            move o to token(l + 1)\n          end-perform\n        \n          subtract 1 from l\n      \n          set i to 1\n          perform varying j from l by -1 until j = 0\n              string token(j) delimited by space\n              into result with pointer i\n          end-perform\n      \n          goback.\n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ab52526379d20736b00000e":[{"id":22268,"user_id":null,"body":"       identification division.\n       program-id. MagNumber.\n      \n       data division.\n       working-storage section.\n       01 bulletsProWeapon  pic 9(4).\n      \n       linkage section.\n       01 info.\n          03  str  pic x(5).\n          03  num  pic 9(4).\n       01 result   pic 9(4).\n      \n       procedure division using info result.\n      \n          initialize result\n          evaluate str\n             when 'PT92 ' set bulletsProWeapon to 17\n             when 'M4A1 ' set bulletsProWeapon to 30\n             when 'M16A2' set bulletsProWeapon to 30\n             when 'PSG1 ' set bulletsProWeapon to 5\n          end-evaluate.\n          display bulletsProWeapon\n          compute result = (num * 3 + bulletsProWeapon - 1) \/ \n                           bulletsProWeapon\n          goback.\n       end program MagNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22269,"user_id":168,"body":"       identification division.\n       program-id. MagNumber.\n      \n       data division.\n      \n       linkage section.\n       01 info.\n          03  str  pic x(5).\n          03  num  pic 9(4).\n       01 result   pic 9(4).\n      \n       procedure division using info result.\n          evaluate str\n              when 'PT92' move 17 to result\n              when 'PSG1' move 5 to result\n              when other move 30 to result\n          end-evaluate\n          compute result rounded mode toward-greater = num * 3 \/ result\n          goback.\n       end program MagNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22270,"user_id":53,"body":"       identification division.\n       program-id. MagNumber.\n       data division.\n       local-storage section.\n       01 p        pic 9(2).\n       linkage section.\n       01 info.\n          03  str  pic x(5).\n          03  num  pic 9(4).\n       01 result   pic 9(4).\n       procedure division using info result.\n          evaluate str\n            when 'PT92'    set p to 17\n            when 'PSG1'    set p to 5\n            when other     set p to 30\n          end-evaluate\n          compute result rounded mode toward-greater \n            = 3 * num \/ p.\n       end program MagNumber.\n\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22271,"user_id":50,"body":"       identification division.\n       program-id. MagNumber.\n      \n       data division.\n       local-storage section.\n       01 x        pic 9(2).\n      \n       linkage section.\n       01 info.\n          03  str  pic x(5).\n          03  num  pic 9(4).\n       01 result   pic 9(4).\n      \n       procedure division using info result.\n      \n          evaluate str\n          when 'PT92'    move 17 to x\n          when 'PSG1'    move 5 to x\n          when other     move 30 to x\n          end-evaluate\n          compute result rounded mode toward-greater = 3 * num \/ x.\n      \n       end program MagNumber.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ab6538b379d20ad880000ab":[{"id":22272,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n           IF L = W THEN\n               COMPUTE RESULT = L * W\n           ELSE \n               COMPUTE RESULT = (L + W) * 2\n           END-IF.\n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22273,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n      * Your code      \n      \n       IF L IS EQUAL TO W THEN\n         MULTIPLY L BY W GIVING RESULT\n       ELSE\n         COMPUTE RESULT = 2 * L + 2 * W.\n      \n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22274,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n       IF L = W\n          COMPUTE RESULT = L * W\n       ELSE\n          COMPUTE RESULT = L + L + W + W\n       END-IF.\n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22275,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n       if L = W then\n          compute result = L * W\n       else\n          compute result = L * 2 + W * 2\n       end-if.\n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22276,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n      \n       if (l equals to w)\n         multiply l by l giving result\n       end-if.\n      \n       if not (l equals to w)\n         multiply l by 2 giving result\n         move result to l\n         multiply w by 2 giving result\n         add result to l giving result\n       end-if.\n      \n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22277,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n          if l = w then\n              compute result = l * w\n          else\n              compute result = (l + w) * 2\n          end-if.      \n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22278,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n      * Your code\n        IF L = W THEN\n          MULTIPLY L BY W GIVING RESULT\n          DISPLAY \"AREA\" RESULT\n        ELSE\n          ADD L L W W GIVING RESULT\n          DISPLAY \"PERIMETER\" RESULT\n        END-IF.\n        \n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22279,"user_id":null,"body":"       identification division.\n       program-id. AREA-OR-PERIMETER.\n       data division.\n       linkage section.\n       01 l           pic 9(04).\n       01 w           pic 9(04).\n       01 result      pic 9(08). \n       procedure division using l w result.\n         if l = w\n            compute result = l * w\n         else\n            compute result = (l + w) * 2\n         end-if.\n       end program AREA-OR-PERIMETER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22280,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n       \n       IF (L EQUALS TO W )\n         MULTIPLY L BY L GIVING RESULT\n       END-IF.\n      \n       IF NOT (L EQUALS TO W )\n         MULTIPLY L BY 2 GIVING RESULT\n         MOVE RESULT TO L\n         MULTIPLY W BY 2 GIVING RESULT\n         ADD RESULT TO L GIVING RESULT\n       END-IF.\n      \n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22281,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AREA-OR-PERIMETER.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 L           PIC 9(04).\n       01 W           PIC 9(04).\n       01 RESULT      PIC 9(08). \n       PROCEDURE DIVISION USING L W RESULT.\n           IF L = W\n             MULTIPLY L BY W GIVING RESULT\n           ELSE\n             ADD L L W W GIVING RESULT\n           END-IF\n           .\n       END PROGRAM AREA-OR-PERIMETER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5aba780a6a176b029800041c":[{"id":22282,"user_id":421,"body":"       identification division.\n       program-id. max-multiple.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 divisor     pic 9(8).\n       01 bound       pic 9(8).\n       01 result      pic 9(8).\n       procedure division using divisor bound result.\n           COMPUTE result = bound \/ divisor * divisor.\n       end program max-multiple.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22283,"user_id":50,"body":"       identification division.\n       program-id. max-multiple.\n      \n       data division.\n       linkage section.\n       01 divisor     pic 9(8).\n       01 bound       pic 9(8).\n       01 result      pic 9(8).\n       procedure division using divisor bound result.\n\n          compute result = bound - function rem(bound, divisor)\n\n          goback.\n       end program max-multiple.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22284,"user_id":53,"body":"       identification division.\n       program-id. max-multiple.\n      \n       data division.\n       linkage section.\n       01 divisor     pic 9(8).\n       01 bound       pic 9(8).\n       01 result      pic 9(8).\n       procedure division using divisor bound result.\n          compute result = bound - function mod(bound, divisor),\n          goback.\n       end program max-multiple.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22285,"user_id":null,"body":"       identification division.\n       program-id. max-multiple.\n      \n       data division.\n       linkage section.\n       01 divisor     pic 9(8).\n       01 bound       pic 9(8).\n       01 result      pic 9(8).\n       procedure division using divisor bound result.\n\n      * Do your magic here!\n        compute result = bound - function mod(bound, divisor).\n       end program max-multiple.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22286,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. max-multiple.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 DIVISOR     PIC 9(8).\n       01 BOUND       PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING DIVISOR BOUND RESULT.\n           COMPUTE RESULT = BOUND \/ DIVISOR * DIVISOR.\n       END PROGRAM max-multiple.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22287,"user_id":null,"body":"       identification division.\n       program-id. max-multiple.\n      \n       data division.\n       linkage section.\n       01 divisor     pic 9(8).\n       01 bound       pic 9(8).\n       01 result      pic 9(8).\n       procedure division using divisor bound result.\n\n      * Do your magic here!\n       divide bound by divisor giving result.\n       compute result = result * divisor.\n\n          goback.\n       end program max-multiple.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22288,"user_id":76,"body":"       identification division.\n       program-id. max-multiple.\n       data division.\n       linkage section.\n       01 divisor     pic 9(8).\n       01 bound       pic 9(8).\n       01 result      pic 9(8).\n       procedure division using divisor bound result.\n         compute result = bound \/ divisor * divisor.\n       end program max-multiple.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5abd66a5ccfd1130b30000a9":[{"id":22289,"user_id":421,"body":"       identification division.\n       program-id. RowWeights.\n       data division.\n       author \"ejini\u6218\u795e\".\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(4) occurs 0 to 35 times \n                                      depending on arr-length\n                                      indexed i.\n       01  result.\n           05 team1          pic 9(6).\n           05 team2          pic 9(6).\n      \n       procedure division using arr result.\n           perform varying i from 1 by 1 until i > arr-length\n               if function rem(i, 2) = 1 then\n                   add xs(i) to team1\n               else\n                   add xs(i) to team2\n               end-if\n           end-perform.\n       end program RowWeights.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22290,"user_id":168,"body":"       identification division.\n       program-id. RowWeights.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(4) occurs 0 to 35 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result.\n           05 res pic 9(6) occurs 2 times.\n      \n       procedure division using arr result.\n          initialize result.\n          perform varying i from 1 until i > arr-length\n              add xs(i) to res(2 - function mod(i, 2))\n          end-perform.\n       end program RowWeights.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22291,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RowWeights.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 LEN       PIC 9(2).\n           05 XS        PIC 9(4) OCCURS 0 TO 35 DEPENDING LEN INDEXED I.\n       01  RESULT.\n           05 TEAM1     PIC 9(6).\n           05 TEAM2     PIC 9(6).\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LEN\n               IF  FUNCTION REM(I, 2) = 1\n                   ADD XS(I)  TO TEAM1\n               ELSE\n                   ADD XS(I)  TO TEAM2\n               END-IF\n           END-PERFORM.\n       END PROGRAM RowWeights.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22292,"user_id":53,"body":"       identification division.\n       program-id. RowWeights.\n       data division.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(4) occurs 0 to 35 times \n                             depending arr-length \n                             indexed by i.\n       01  r.\n           05 a              pic 9(6).\n           05 b              pic 9(6).\n       procedure division using arr r.\n          move 0 to a, b\n          perform varying i from 1 until i > arr-length\n              if function rem(i, 2) = 0 \n                add xs(i) to b\n              else                      \n                add xs(i) to a \n              end-if\n          end-perform\n          goback.\n       end program RowWeights.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22293,"user_id":50,"body":"       identification division.\n       program-id. RowWeights.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic 9(4) occurs 0 to 35 times \n                             depending arr-length indexed i.\n       01  result.\n           05 a              pic 9(6).\n           05 b              pic 9(6).\n      \n       procedure division using arr result.\n      \n          move 0 to a, b\n          perform varying i from 1 until i > arr-length\n              if function rem(i, 2) = 0 add xs(i) to b\n              else                      add xs(i) to a end-if\n          end-perform\n      \n          goback.\n       end program RowWeights.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5acc3634c6fde760ec0001f7":[{"id":22294,"user_id":421,"body":"       identification division.\n       program-id. solve.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(5).\n           05 xs             pic 9(6) occurs 0 to 10000 times \n                                    depending on nums-length indexed i.\n       01  div               pic 9(4).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(6) occurs 0 to 10000 times \n                                     depending on res-length.\n      \n       procedure division using nums div result.\n           initialize res-length\n           perform varying i from 1 by 1 until i > nums-length\n               add 1 to res-length\n               compute res(res-length) = xs(i) + \n                       function rem(xs(i), div)\n           end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22295,"user_id":null,"body":"       identification division.\n       program-id. solve.\n       data division.\n       WORKING-STORAGE SECTION.\n       01  WS-TEMP           PIC 9(06).\n       01  WS-REM            PIC 9(06).\n       01  I                 PIC 9(05).\n      \n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(5).\n           05 xs             pic 9(6) occurs 0 to 10000 times \n                                      depending on nums-length.\n       01  div               pic 9(4).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(6) occurs 0 to 10000 times \n                                     depending on res-length.\n      \n       procedure division using nums div result.\n      \n           PERFORM VARYING I FROM 1 BY 1 UNTIL i > nums-length\n               MOVE I TO res-length\n               DIVIDE xs(I) BY div GIVING WS-TEMP REMAINDER WS-REM\n               END-DIVIDE\n               COMPUTE res(I) = xs(I) + WS-REM\n               END-COMPUTE\n           END-PERFORM\n      \n          goback.\n       end program solve.\n       ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22296,"user_id":168,"body":"       identification division.\n       program-id. solve.\n       data division.\n      \n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(5).\n           05 xs             pic 9(6) occurs 0 to 10000 times \n                                    depending on nums-length indexed i.\n       01  div               pic 9(4).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(6) occurs 0 to 10000 times \n                                     depending on res-length.\n      \n       procedure division using nums div result.\n          move nums-length to res-length\n          perform varying i from 1 until i > nums-length\n              compute res(i) = xs(i) + function mod(xs(i), div)\n          end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22297,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(5).\n           05 xs             pic 9(6) occurs 0 to 10000 times \n                                      depending on nums-length\n                                      indexed by i.\n       01  div               pic 9(4).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(6) occurs 0 to 10000 times \n                                      depending on res-length.\n       procedure division using nums div result.\n          initialize result\n          move nums-length to res-length\n          perform varying i from 1 until i > nums-length\n            compute res(i) = xs(i) + function rem (xs(i), div)\n          end-perform\n          goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22298,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n      \n       linkage section.\n       01  nums.\n           05 nums-length    pic 9(5).\n           05 xs             pic 9(6) occurs 0 to 10000 times \n                                      depending on nums-length.\n       01  div               pic 9(4).\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(6) occurs 0 to 10000 times \n                                     depending on res-length indexed i.\n      \n       procedure division using nums div result.\n      \n          move nums-length to res-length\n          perform varying i from 1 until i > res-length\n            compute res(i) = xs(i) + function rem(xs(i), div)\n          end-perform\n      \n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5acc79efc6fde7838a0000a0":[{"id":22299,"user_id":168,"body":"       identification division.\n       program-id. SearchNum recursive.\n\n       data division.\n       local-storage section.\n       01  r             usage pointer.\n      \n       linkage section.\n       01  node.\n           05 val        pic 9(6).\n           05 nodeLeft   usage pointer.\n           05 nodeRight  usage pointer.\n       01  num           pic 9(6).\n       01  head          usage pointer.\n       01  result        pic 9.\n\n       procedure division using num head result.\n           initialize result\n           if head = null then goback end-if\n           set address of node to head\n           if val = num then\n               move 1 to result\n           else\n               move nodeRight to r\n               call 'SearchNum' using num nodeLeft result\n               if result = 1 then goback end-if\n               call 'SearchNum' using num r result\n           end-if.\n       end program SearchNum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22300,"user_id":50,"body":"       identification division.\n       program-id. SearchNum recursive.\n\n       data division.\n       local-storage section.\n      *    pointers in `node` get lost during recursion\n       01  savedRight   usage pointer.\n      \n       linkage section.\n       01  node.\n           05 val        pic 9(6).\n           05 nodeLeft   usage pointer.\n           05 nodeRight  usage pointer.\n       01  num           pic 9(6).\n       01  head          usage pointer.\n       01  result        pic 9.\n\n       procedure division using num head result.\n           initialize result\n           if head = null then goback end-if\n           set address of node to head\n           if val = num then move 1 to result goback end-if\n           set savedRight to nodeRight\n           call 'SearchNum' using by content   num nodeLeft\n                                  by reference result\n           if result = 1 then goback end-if\n           call 'SearchNum' using by content   num savedRight\n                                  by reference result.\n      \n       end program SearchNum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5aceae374d9fd1266f0000f0":[{"id":22301,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TimeMath.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  S1          PIC 9(5).\n       01  S2          PIC 9(5).\n       01  S           PIC S9(6).\n       LINKAGE SECTION.\n       01  TIME1       PIC X(8).\n       01  OP          PIC X.\n       01  TIME2       PIC X(8).\n       01  RESULT      PIC X(8).\n\n       PROCEDURE DIVISION USING TIME1 OP TIME2 RESULT.\n       MOVE SECONDS-FROM-FORMATTED-TIME(\"hh:mm:ss\", TIME1)  TO S1\n       MOVE SECONDS-FROM-FORMATTED-TIME(\"hh:mm:ss\", TIME2)  TO S2\n       EVALUATE TRUE\n           WHEN OP = '+' AND S1 + S2 > 86399 COMPUTE S = S1 + S2 - 86400\n           WHEN OP = '+'                     COMPUTE S = S1 + S2\n           WHEN OP = '-' AND S1 - S2 < 0     COMPUTE S = S1 - S2 + 86400\n           WHEN OP = '-'                     COMPUTE S = S1 - S2\n       END-EVALUATE\n       MOVE FORMATTED-TIME(\"hh:mm:ss\", S)  TO RESULT.\n       END PROGRAM TimeMath.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22302,"user_id":50,"body":"       identification division.\n       program-id. TimeMath.\n      \n       data division.\n       local-storage section.\n       01  t            pic 9(6).\n      \n       linkage section.\n       01  time1.\n           03  h1       pic 99.\n           03           pic x.\n           03  m1       pic 99.\n           03           pic x.\n           03  s1       pic 99.\n       01  op           pic x.\n       01  time2.\n           03  h2       pic 99.\n           03           pic x.\n           03  m2       pic 99.\n           03           pic x.\n           03  s2       pic 99.\n       01  result.\n           03  h        pic 99.\n           03  fill1    pic x.\n           03  m        pic 99.\n           03  fill2    pic x.\n           03  s        pic 99.\n      \n       procedure division using time1 op time2 result.\n      \n          if result = space\n              move ':' to fill1 fill2\n          end-if\n          if op = '+'\n            compute t = function mod(\n                        3600 * (h1 + h2)\n                        + 60 * (m1 + m2)\n                        + s1 + s2, 86400)\n          else\n            compute t = function mod(\n                        3600 * (h1 - h2)\n                        + 60 * (m1 - m2)\n                        + s1 - s2, 86400)\n          end-if\n          divide t by 3600 giving h remainder t\n          divide t by  60  giving m remainder s.\n      \n       end program TimeMath.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22303,"user_id":53,"body":"       identification division.\n       program-id. TimeMath.\n       data division.\n       local-storage section.\n       01  t            pic 9(6).\n       01  t1           pic 9(2) value 60.\n       01  t2           pic 9(4) value 3600.\n       01  t3           pic 9(5) value 86400. \n       linkage section.\n       01  time1.\n           03  h1       pic 99.\n           03           pic x.\n           03  m1       pic 99.\n           03           pic x.\n           03  s1       pic 99.\n       01  op           pic x.\n       01  time2.\n           03  h2       pic 99.\n           03           pic x.\n           03  m2       pic 99.\n           03           pic x.\n           03  s2       pic 99.\n       01  result.\n           03  h        pic 99.\n           03  hd       pic x.\n           03  m        pic 99.\n           03  md       pic x.\n           03  s        pic 99.\n       procedure division using time1 op time2 result.\n          move ':' to hd md\n          evaluate op\n            when '+'\n              compute t = function mod(\n                t2 * (h1 + h2) + t1 * (m1 + m2) + s1 + s2, t3)\n            when '-'\n              compute t = function mod(\n                t2 * (h1 - h2) + t1 * (m1 - m2) + s1 - s2, t3)\n          end-evaluate\n          divide t2 into t giving h remainder t\n          divide t1 into t giving m remainder s\n          goback.\n       end program TimeMath.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ad0d8356165e63c140014d4":[{"id":22304,"user_id":53,"body":"       identification division.\n       program-id. final_grade.\n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n           evaluate true\n               when exam > 90 or projects > 10    set result to 100\n               when exam > 75 and projects > 4    set result to 90\n               when exam > 50 and projects > 1    set result to 75\n               when other                         set result to 0\n           end-evaluate\n           goback.\n       end program final_grade.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22305,"user_id":null,"body":"       identification division.\n       program-id. final_grade.     \n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n          initialize result\n          evaluate true\n             when exam > 90 or projects > 10\n                set result to 100\n             when exam > 75 and projects >= 5\n                set result to 90\n             when exam > 50 and projects >= 2\n                set result to 75\n             when other\n                set result to 0\n          end-evaluate\n          goback.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22306,"user_id":null,"body":"       identification division.\n       program-id. final_grade.     \n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n       if exam >90 or projects>10 \n          perform move 100 to result\n       else \n          if exam >75 and projects>=5 move 90 to result\n          else\n              IF exam >50 and projects>=2 move 75 to result\n      \n              else move 0 to result\n          goback.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22307,"user_id":null,"body":"       identification division.\n       program-id. final_grade.     \n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n           MOVE 0 TO result.\n           IF exam > 50 AND  projects > 1\n               MOVE 75  TO result\n           END-IF.\n           IF exam > 75 AND projects > 4\n               MOVE 90  TO result\n           END-IF.\n           IF exam > 90 OR  projects > 10\n               MOVE 100 TO result\n           END-IF.\n          goback.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22308,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. final_grade.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  EXAM          PIC 9(3).\n       01  PROJECTS      PIC 9(2).   \n       01  RESULT        PIC 9(3).      \n       PROCEDURE DIVISION USING EXAM PROJECTS RESULT. \n           EVALUATE EXAM ALSO PROJECTS\n               WHEN > 90 ALSO ANY\n               WHEN ANY  ALSO > 10  MOVE 100  TO RESULT\n               WHEN > 75 ALSO >  4  MOVE  90  TO RESULT\n               WHEN > 50 ALSO >  1  MOVE  75  TO RESULT\n           END-EVALUATE.\n       END PROGRAM final_grade.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22309,"user_id":null,"body":"       identification division.\n       program-id. final_grade.     \n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n          evaluate exam also projects\n            when > 90 also = projects\n            when = exam also > 10\n              set result to 100\n            when > 75 also >= 5\n              set result to 90\n            when > 50 also >= 2\n              set result to 75\n            when other\n              set result to 0\n          end-evaluate\n          goback.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22310,"user_id":168,"body":"       identification division.\n       program-id. final_grade.     \n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n          evaluate true\n              when exam > 90 or projects > 10 move 100 to result\n              when exam > 75 and projects >= 5 move 90 to result\n              when exam > 50 and projects >= 2 move 75 to result\n              when other move 0 to result\n          end-evaluate.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22311,"user_id":null,"body":"       identification division.\n       program-id. final_grade.     \n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n          if exam > 90 or projects > 10 then\n            compute result = 100\n          else if exam > 75 and projects >= 5 then\n            compute result = 90\n          else if exam > 50 and projects >= 2 then\n            compute result = 75\n          else\n            compute result = 0\n          end-if.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22312,"user_id":421,"body":"       identification division.\n       program-id. final_grade.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  exam          pic 9(3).\n       01  projects      pic 9(2).   \n       01  result        pic 9(3).      \n       procedure division using exam projects result. \n           if exam > 90 or projects > 10 then\n               set result to 100\n               goback\n           end-if\n           evaluate exam also projects\n               when > 75 also >= 5    set result to 90\n               when > 50 also >= 2    set result to 75\n               when other             set result to 0\n           end-evaluate\n           display result.\n       end program final_grade.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ad29cd95e8240dd85000b54":[{"id":22313,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FRIENDS.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           IF N > 2\n               COMPUTE RESULT rounded mode toward-greater = \n                       FUNCTION LOG(N) \/ FUNCTION LOG(2) - 1\n           END-IF.\n       END PROGRAM FRIENDS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22314,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FRIENDS.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = LOG(MAX(N - .1, 1)) \/ LOG(2).\n       END PROGRAM FRIENDS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22315,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FRIENDS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n          move 0 to result,\n          if n >= 2 then\n            compute result rounded mode toward-greater\n              = function log (n) \/ function log (2),\n            add -1 to result\n          end-if,\n          goback.\n       END PROGRAM FRIENDS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22316,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FRIENDS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n       compute result = 1.0e-10 + function log(n - 1) \/ function log(2).\n       END PROGRAM FRIENDS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22317,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FRIENDS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I          PIC 9(10).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Move 0 to result,\n          Move 2 to i,\n          Perform until i >= n,\n            Add 1 to result,\n            Compute i = 2 * i,\n          End-perform\n      \n          Goback.\n       END PROGRAM FRIENDS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ae62fcf252e66d44d00008e":[{"id":22318,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n           COMPUTE RESULT = FUNCTION MAX(A * B * C, (A + B) * C,\n                            A * (B + C), A + B + C).\n       END PROGRAM EXPRESSION-MATTER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22319,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n       COMPUTE RESULT = FUNCTION MAX(A + B + C, A * B * C, \n                                     A * (B + C), (A + B) * C).\n       END PROGRAM EXPRESSION-MATTER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22320,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n         INITIALIZE RESULT\n         MOVE FUNCTION MAX(RESULT, A + B + C) TO RESULT\n         MOVE FUNCTION MAX(RESULT, A * B * C) TO RESULT\n         MOVE FUNCTION MAX(RESULT, (A + B) * C) TO RESULT\n         MOVE FUNCTION MAX(RESULT, A * (B * C)) TO RESULT\n         MOVE FUNCTION MAX(RESULT, A * (B + C)) TO RESULT\n         MOVE FUNCTION MAX(RESULT, (A * B) * C) TO RESULT\n         GOBACK.\n       END PROGRAM EXPRESSION-MATTER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22321,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 RES         PIC 9(4).\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n      \n       PROCEDURE DIVISION USING A B C RESULT.\n       initialize result\n       compute res = a + b + c.\n       if res > result then set result to res end-if.\n       compute res = a * b + c.\n       if res > result then set result to res end-if.\n       compute res = a + b * c.\n       if res > result then set result to res end-if.\n       compute res = a * b * c.\n       if res > result then set result to res end-if.\n       compute res = a * (b + c).\n       if res > result then set result to res end-if.\n       compute res = (a + b) * c.\n       if res > result then set result to res end-if.\n       END PROGRAM EXPRESSION-MATTER.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22322,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 CASE1       PIC 9(4).\n       01 CASE2       PIC 9(4).\n       01 CASE3       PIC 9(4).\n       01 CASE4       PIC 9(4).\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n           COMPUTE CASE1 = A * B * C\n           COMPUTE CASE2 = A + B + C\n           COMPUTE CASE3 = (A + B) * C\n           COMPUTE CASE4 = A * (B + C)\n           COMPUTE RESULT = FUNCTION MAX(CASE1, CASE2, CASE3, CASE4)\n           .\n       END PROGRAM EXPRESSION-MATTER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22323,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n           MOVE FUNCTION MAX(FUNCTION SUM(A, B) * C,\n                             A * FUNCTION SUM(B, C),\n                             A + B + C, \n                             A * B * C)  TO RESULT.\n       END PROGRAM EXPRESSION-MATTER.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22324,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       local-storage section.\n       01 d           PIC 9(4).\n       01 e           PIC 9(4).\n       01 f           PIC 9(4).\n       01 g           PIC 9(4).\n       01 h           PIC 9(4).\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n        compute f = a + b\n        compute g = b + c\n        compute h = a * b\n        compute result = FUNCTION max (f + c,  a * g,\n                                      f * c , h * c,\n                                      a + b * c,\n                                      a * b * c, e) .\n       END PROGRAM EXPRESSION-MATTER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22325,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. EXPRESSION-MATTER.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 D           PIC 9(2).\n       01 F           PIC 9(2).\n       01 Z           PIC 9(2).\n       LINKAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION USING A B C RESULT.\n            MOVE A TO D\n            MOVE B TO F\n            MOVE C TO Z\n            IF D = 1 THEN\n                COMPUTE F = F + 1\n            END-IF\n            IF Z = 1 THEN\n                COMPUTE F = F + 1\n            END-IF\n            IF F = 1 THEN\n                IF D < Z THEN\n                    COMPUTE D = D + 1\n                ELSE\n                    COMPUTE Z = Z + 1\n                END-IF\n            END-IF\n            COMPUTE RESULT = D * F * Z.\n       END PROGRAM EXPRESSION-MATTER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22326,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n       compute result = function max((a + b + c) (a * b * c) \n                  (a * (b + c)) ((a + b) * c))\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22327,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       01 d           PIC 9(2).\n       01 e           PIC 9(2).\n       01 f           PIC 9(2).\n       01 g           PIC 9(2).\n       01 h           PIC 9(2).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n        compute f = a + b\n        compute g = b + c\n        compute h = a * b\n        compute d = FUNCTION max ( f + c ,  a * g )\n        compute e = FUNCTION max ( f * c , h * c )\n        compute result = FUNCTION MAX((a + b * c),\n                                      d, \n                                      a * b * c, \n                                    e)\n        if result = 0099 then compute result = 10 * 10\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22328,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       01 WS-RESULT   PIC 9(4).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n      \n           MOVE ZEROES TO RESULT WS-RESULT\n      \n           COMPUTE WS-RESULT = A + B + C\n           IF WS-RESULT GREATER THAN RESULT\n              MOVE WS-RESULT TO RESULT\n           END-IF\n      \n           COMPUTE WS-RESULT = (A + B) * C\n           IF WS-RESULT GREATER THAN RESULT\n              MOVE WS-RESULT TO RESULT\n           END-IF\n      \n           COMPUTE WS-RESULT = A * (B + C)\n           IF WS-RESULT GREATER THAN RESULT\n              MOVE WS-RESULT TO RESULT\n           END-IF\n\n           COMPUTE WS-RESULT = A * B * C\n           IF WS-RESULT GREATER THAN RESULT\n              MOVE WS-RESULT TO RESULT\n           END-IF.\n            \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22329,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n        COMPUTE RESULT = FUNCTION MAX((A + B + C), (A * B * C),\n                                     ((A + B) * C), (A * (B + C)))\n                                    \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22330,"user_id":53,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       LOCAL-STORAGE SECTION.\n       01 D           PIC 9(2).\n       01 F           PIC 9(2).\n       01 Z           PIC 9(2).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n            MOVE A TO D\n            MOVE B TO F\n            MOVE C TO Z\n            IF D = 1 THEN\n                COMPUTE F = F + 1\n            END-IF.\n            IF Z = 1 THEN\n                COMPUTE F = F + 1\n            END-IF.\n            IF F = 1 THEN\n                IF D < Z THEN\n                    COMPUTE D = D + 1\n                ELSE\n                    COMPUTE Z = Z + 1\n                END-IF.\n            END-IF.\n            COMPUTE RESULT = D * F * Z\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22331,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       01 X           PIC 9(4).\n       01 Y           PIC 9(4).\n       01 Z           PIC 9(4).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n        COMPUTE RESULT = FUNCTION MAX(A + B + C, A * B * C, (A + B) * C,\n                                      A * (B + C))\n                                    \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22332,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC 9(2).\n       01 B           PIC 9(2).\n       01 C           PIC 9(2).\n       01 RESULT      PIC 9(4).\n       LOCAL-STORAGE SECTION.\n       01 W           PIC 9(4).\n       01 X           PIC 9(4).\n       01 Y           PIC 9(4).\n       01 Z           PIC 9(4).\n       PROCEDURE DIVISION.\n       EXP-MAT SECTION.\n        COMPUTE W = A + B + C.\n        COMPUTE X = A * B * C.\n        COMPUTE Y = (A + B) * C.\n        COMPUTE Z = A * (B + C).\n       MOVE FUNCTION MAX(W X Y Z) TO RESULT.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ae71f8c2c5061059e000044":[{"id":22333,"user_id":421,"body":"       identification division.\n       program-id. find-x.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01 x          pic 9(9).\n       01 y          pic 9(8).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n           compute x =  n * 2 - 1\n           subtract 1 from n giving y\n           compute result = x * (x + 1) \/ 2 * n + y * (y + 1) * n.\n       end program find-x.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22334,"user_id":null,"body":"       identification division.\n       program-id. find-x.\n       data division.\n       local-storage section.\n       01 i          pic 9(8).\n       01 j          pic 9(8).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n      \n          compute result = ((2 * n * (2 * n + 1) \/ 2) - 2 * n) * n \n                           + 2 * n * ((n * (n + 1) \/ 2) - n)\n          goback.\n       end program find-x.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22335,"user_id":527,"body":"       identification division.\n       program-id. find-x.\n       data division.\n       local-storage section.\n       01 i          pic 9(8).\n       01 j          pic 9(8).\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n      \n       procedure division using n result.\n          compute result = 3 * n ** 3 - 2 * n ** 2.\n       end program find-x.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22336,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. find-x.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).      \n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = (N * 3 - 2) * N * N.\n       END PROGRAM find-x.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22337,"user_id":53,"body":"       identification division.\n       program-id. find-x.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 m           pic 9(20).\n       procedure division using n m.\n          compute m = n * n * (3 * n - 2),\n          goback.\n       end program find-x.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22338,"user_id":168,"body":"       identification division.\n       program-id. find-x.\n       data division.\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n           compute result = n * n * (3 * n - 2).      \n       end program find-x.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22339,"user_id":50,"body":"       identification division.\n       program-id. find-x.\n      \n       data division.\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          compute result = (3 * n - 2) * n ** 2\n      \n          goback.\n       end program find-x.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b077ebdaf15be5c7f000077":[{"id":22340,"user_id":50,"body":"       identification division.\n       program-id. CountSheep.\n      \n       data division.\n       local-storage section.\n       01 i            usage index.\n       01 z            pic z(4)9.\n      \n       linkage section.\n       01 n            pic 9(3).\n       01 result.\n          03 j         pic 9(4).\n          03 resChars  pic x(1200). \n      \n       procedure division using n result.\n      \n          set j to 1\n          perform varying i from 1 until i > n\n              move i to z\n              string\n                    function trim(z)\n                    ' sheep...'\n                    into resChars\n                    with pointer j\n              end-string\n          end-perform\n          subtract 1 from j.\n      \n       end program CountSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22341,"user_id":168,"body":"       identification division.\n       program-id. CountSheep.\n      \n       data division.\n       working-storage section.\n       01 i     usage index.\n       01 k     usage index.\n       01 x     pic zz9.\n\n       linkage section.\n       01 n             pic 9(3).\n       01 result.\n          03 resLength  pic 9(4).\n          03 resChar    pic x occurs 0 to 1200 times\n                              depending on resLength.\n      \n       procedure division using n result.\n          move 1200 to resLength\n          move 1 to k\n          perform varying i from 1 until i > n\n              move i to x\n              string function trim(x) ' sheep...'\n                into result(5:) with pointer k\n          end-perform\n          compute resLength = k - 1\n          goback.\n       end program CountSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22342,"user_id":null,"body":"       identification division.\n       program-id. CountSheep.\n      \n       data division.\n       working-storage section.\n       01 i           pic 9(3).\n       01 iz          pic zz9.\n\n       linkage section.\n       01 n             pic 9(3).\n       01 result.\n          03 resLength  pic 9(4).\n          03 resChar    pic x(1200).\n\n       procedure division using n result.\n      \n      \n          initialize result\n          set resLength to 1\n          perform varying i from 1 by 1 until i > n\n             move i to iz\n             string function trim(iz) ' sheep...'\n                  into resChar pointer resLength\n             end-string\n          end-perform\n          compute resLength = resLength - 1\n          goback.\n       end program CountSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22343,"user_id":null,"body":"       identification division.\n       program-id. CountSheep.\n      \n       data division.\n       working-storage section.\n       01 sheep-const   pic X(9) value  ' sheep...'.\n       01 num           pic 999.\n       01 num-blanks    pic zz9.\n       01 num-tab.\n          03 num-chr-tab   occurs 3.\n             05 num-chr    pic x.\n       01 add_result_i  pic 9(3).\n\n       linkage section.\n       01 n             pic 9(3).\n       01 result.\n          03 resLength  pic 9(4).\n          03 resChar    pic x occurs 0 to 1200 times\n                              depending on resLength.\n      \n       procedure division using n result.\n          initialize result\n          display resLength\n          perform add_result varying num from 1 by 1 until num > n.         \n          goback.\n      \n          add_result.\n             move num to num-blanks\n             move num-blanks to num-tab\n             perform varying add_result_i from 1 by 1 \n                     until add_result_i > 3\n                if num-chr-tab(add_result_i) not = ' ' then \n                   add 1 to resLength\n                   move num-chr-tab(add_result_i) to resChar(resLength)\n                end-if\n             end-perform            \n             perform varying add_result_i from 1 by 1\n                     until add_result_i > FUNCTION LENGTH(sheep-const)\n                add 1 to resLength\n                move sheep-const(add_result_i:) to resChar(resLength)\n             end-perform.\n       end program CountSheep.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22344,"user_id":53,"body":"       identification division.\n       program-id. CountSheep.\n       data division.\n       local-storage section.\n       01 i            usage index.\n       01 x            pic z(4)9.\n       linkage section.\n       01 n            pic 9(3).\n       01 result.\n          03 j         pic 9(4).\n          03 resChars  pic x(1200). \n       procedure division using n result.\n          set j to 1\n          perform varying i from 1 until i > n\n            move i to x\n            string function trim(x) ' sheep...'\n              into resChars with pointer j\n          end-perform\n          subtract 1 from j\n          goback.\n       end program CountSheep.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b096efeaf15bef812000010":[{"id":22345,"user_id":53,"body":"       identification division.\n       program-id. NthFloyd.\n       data division.\n       local-storage section.\n       01 s           pic 9(10)v9(28).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(5).\n       procedure division using n result.\n          move n to s\n          compute s = (-1 + function sqrt(8 * s + 1)) \/ 2\n          compute result rounded mode toward-greater = s\n          goback.\n       end program NthFloyd.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22346,"user_id":50,"body":"       identification division.\n       program-id. NthFloyd.\n      \n       data division.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(5).\n      \n       procedure division using n result.\n      \n          perform\n          varying result from 1\n          until result ** 2 + result >= 2 * n\n            continue.\n      \n       end program NthFloyd.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b0d67c1cb35dfa10b0022c7":[{"id":22347,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 GRAINS           PIC 9(20).\n       01 RESULT           PIC 9(20).\n       PROCEDURE DIVISION USING GRAINS RESULT.\n           INITIALIZE RESULT\n           IF GRAINS > 0 THEN\n               COMPUTE RESULT = FUNCTION LOG(GRAINS) \/ \n                                FUNCTION LOG(2) + 1\n           END-IF.\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22348,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 GRAINS           PIC 9(20).\n       01 RESULT           PIC 9(20).\n       PROCEDURE DIVISION USING GRAINS RESULT.\n           PERFORM VARYING RESULT FROM \n                        0 BY 1 UNTIL GRAINS <= 0\n                COMPUTE GRAINS = GRAINS \/ 2\n           END-PERFORM.\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22349,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 GRAINS           PIC 9(20).\n       01 RESULT           PIC 9(20).\n       PROCEDURE DIVISION USING GRAINS RESULT.\n          compute result rounded mode toward-greater = \n            function log(grains + 1) \/ function log(2).\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22350,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SQUARE.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 GRAINS           PIC 9(20).\n       01 RESULT           PIC 9(20).\n       PROCEDURE DIVISION USING GRAINS RESULT.\n           PERFORM VARYING RESULT FROM  0 BY 1 Until GRAINS = 0\n                    COMPUTE GRAINS = GRAINS \/ 2 END-PERFORM\n           GOBACK.\n       END PROGRAM SQUARE.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22351,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 GRAINS      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       local-storage section.\n       01 n           pic 9(8).\n       PROCEDURE DIVISION.\n       SQUARES SECTION.\n          initialize result\n          evaluate grains\n            when <= 2\n              compute result = grains\n            when other\n              perform until 2 ** result > grains\n                  compute result = result + 1\n              end-perform\n            end-evaluate\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22352,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 GRAINS      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARES SECTION.\n           PERFORM VARYING RESULT FROM \n                        0 BY 1 UNTIL GRAINS <= 0\n                COMPUTE GRAINS = GRAINS \/ 2\n           END-PERFORM\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22353,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 GRAINS      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARES SECTION.\n           IF GRAINS = 0\n            COMPUTE RESULT = 0\n           ELSE\n            COMPUTE RESULT = FUNCTION LOG(GRAINS) \/ FUNCTION LOG(2) + 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22354,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 GRAINS      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 TMP           PIC 9(8)V9(8).\n       PROCEDURE DIVISION.\n       SQUARES SECTION.\n       compute tmp = 0.9999 + function log(grains + 1) \/ function log(2)\n       compute result = tmp       \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22355,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 GRAINS      PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SQUARES SECTION.\n       PERFORM VARYING RESULT FROM \n                    0 BY 1 Until GRAINS = 0\n            COMPUTE GRAINS = GRAINS \/ 2 END-PERFORM\n              \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b180e9fedaa564a7000009a":[{"id":22356,"user_id":421,"body":"       identification division.\n       program-id. solve.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  caps            pic 9(2).\n       01  lows            pic 9(2).\n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-char       pic x occurs 0 to 25 times \n                                 depending on s-length\n                                 indexed by i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic x occurs 0 to 25 times \n                                 depending on res-length.\n      \n       procedure division using s result.\n           initialize caps result\n           perform varying i from 1 by 1 until i > s-length\n               if s-char(i) >= \"A\" and s-char(i) <= \"Z\" then\n                   add 1 to caps\n               end-if\n               if s-char(i) >= \"a\" and s-char(i) <= \"z\" then\n                   add 1 to lows\n               end-if\n           end-perform\n           if caps > lows then\n               perform varying i from 1 by 1 until i > s-length\n                 add 1 to res-length\n                 move function upper-case(s-char(i)) to res(res-length)\n               end-perform\n               goback\n           end-if\n           perform varying i from 1 by 1 until i > s-length\n               add 1 to res-length\n               move function lower-case(s-char(i)) to res(res-length)\n           end-perform.           \n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22357,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. solve.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  S.\n           05 S-LEN        PIC 9(2).\n           05 S-CHAR       PIC A OCCURS 25 DEPENDING S-LEN INDEXED I.\n       01  RESULT.\n           05 RES-LEN      PIC 9(2).\n           05 RES          PIC A(25).\n\n       PROCEDURE DIVISION USING S RESULT.\n           INITIALIZE TALLY\n           PERFORM VARYING I FROM 1 UNTIL I > S-LEN\n               IF  S-CHAR(I) > 'Z'\n                   ADD  1  TO TALLY\n               END-IF\n           END-PERFORM\n\n           MOVE S-LEN                           TO RES-LEN\n           IF  TALLY >= S-LEN \/ 2\n               MOVE FUNCTION LOWER-CASE(S(3:))  TO RES\n           ELSE\n               MOVE FUNCTION UPPER-CASE(S(3:))  TO RES\n           END-IF.\n       END PROGRAM solve.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22358,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  a              pic 9(2).\n       01  b              pic 9(2).\n       01  c              pic a.\n       01  d              pic a.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(2).\n           05 s-chr.\n              07 s-char    pic a occurs 0 to 25 times \n                                 depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(2).\n           05 chr.\n              07 res       pic a occurs 0 to 25 times \n                           depending on res-length.\n      \n       procedure division using s result.\n      \n          move 0 to a, b\n          perform varying i from 1 until i > s-length\n              move function lower-case(s-char(i)) to c\n              move function upper-case(s-char(i)) to d\n              if c <> d\n                if s-char(i) = c add 1 to a\n                else             add 1 to b end-if\n              end-if\n          end-perform\n      \n          move s-length to res-length\n          if a < b move function upper-case(s-chr) to chr\n          else     move function lower-case(s-chr) to chr end-if\n      \n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22359,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  a              pic 9(2).\n       01  b              pic 9(2).\n       01  x              pic x.\n       01  y              pic x.\n       linkage section.\n       01  s.\n           05 s-length    pic 9(2).\n           05 s-chr.\n              07 s-char   pic x occurs 0 to 25 times \n                          depending on s-length \n                          indexed by i.\n       01  result.\n           05 res-length  pic 9(2).\n           05 chr.\n              07 res      pic x occurs 0 to 25 times \n                          depending on res-length.\n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > s-length\n            move function lower-case(s-char(i)) to x\n            move function upper-case(s-char(i)) to y\n            if x <> y\n              if s-char(i) = x then add 1 to a\n              else add 1 to b end-if\n            end-if\n          end-perform\n          move s-length to res-length\n          if a >= b \n            then move function lower-case(s-chr) to chr\n          else     \n            move function upper-case(s-chr) to chr \n          end-if\n          goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b18e9e06aefb52e1d0001e9":[{"id":22360,"user_id":421,"body":"       identification division.\n       program-id. riders.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  distance          pic 9(3).\n       linkage section.\n       01  stations.\n           05 arr-length     pic 9(3).\n           05 xs             pic 99 occurs 1 to 184 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic 9(3).\n      \n       procedure division using stations result.\n           initialize distance\n           set result to 1\n           perform varying i from 1 by 1 until i > arr-length\n               add xs(i) to distance\n               if distance > 100 then\n                   add 1 to result\n                   move xs(i) to distance\n               end-if\n           end-perform.\n       end program riders.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22361,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. riders.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  STATIONS.\n           05 LEN     PIC 9(3).\n           05 XS      PIC 9(2) OCCURS 184 DEPENDING LEN INDEXED I.\n       01  RESULT     PIC 9(3).\n\n       PROCEDURE DIVISION USING STATIONS RESULT.\n           MOVE 0  TO TALLY\n           PERFORM VARYING I FROM 1 UNTIL I > LEN\n               IF  XS(I) + TALLY > 100\n                   ADD  1      TO RESULT\n                   MOVE XS(I)  TO TALLY\n               ELSE\n                   ADD  XS(I)  TO TALLY\n               END-IF\n           END-PERFORM.\n           ADD 1  TO RESULT.\n       END PROGRAM riders.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22362,"user_id":168,"body":"       identification division.\n       program-id. riders.\n       data division.\n       local-storage section.\n       01  m      pic 9(3).\n      \n       linkage section.\n       01  stations.\n           05 arr-length     pic 9(3).\n           05 xs             pic 99 occurs 1 to 184 times \n                                  depending on arr-length indexed i.\n       01  result            pic 9(3).\n      \n       procedure division using stations result.\n           move 1 to result\n           perform varying i from 1 until i > arr-length\n               if m + xs(i) > 100\n                   add 1 to result\n                   move 0 to m\n               end-if\n               add xs(i) to m\n           end-perform.\n       end program riders.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22363,"user_id":53,"body":"       identification division.\n       program-id. riders.\n       data division.\n       local-storage section.\n       01  m                 pic 9(3) value 100.\n       01  i                 usage index.\n       linkage section.\n       01  stations.\n           05 arr-length     pic 9(3).\n           05 xs             pic 99 occurs 1 to 184 times \n                                  depending on arr-length.\n       01  result            pic 9(3).\n       procedure division using stations result.\n          set result to 1\n          perform varying i from 1 until i > arr-length\n            if m - xs(i) >= 0 then\n              subtract xs(i) from m\n            else\n              add 1 to result\n              subtract xs(i) from 100 giving m\n            end-if\n          end-perform\n          goback.\n       end program riders.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22364,"user_id":50,"body":"       identification division.\n       program-id. riders.\n       data division.\n       local-storage section.\n       01  acc              pic 9(3).\n      \n       linkage section.\n       01  stations.\n           05 arr-length     pic 9(3).\n           05 xs             pic 99 occurs 1 to 184 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result            pic 9(3).\n      \n       procedure division using stations result.\n      \n           move 1 to result\n           move 0 to acc\n           perform varying i from 1 until i > arr-length\n              if acc + xs(i) > 100\n                add 1 to result\n                move xs(i) to acc\n              else add xs(i) to acc end-if\n           end-perform\n      \n           goback.\n       end program riders.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b1cd19fcd206af728000056":[{"id":22365,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       linkage section.\n       01 m           pic 9(8).\n       01 r           pic 9(1)v9(15).\n       procedure division using m r.\n          compute r = function abs((2.0 * m + 1.0 - \n            function sqrt (4.0 * m + 1.0)) \/ (2.0 * m))\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22366,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n\n       linkage section.\n       01 m           pic 9(8).\n       01 result      pic 9(1)v9(15).\n       procedure division using m result.\n          compute result = function abs(\n              m \/ (0.5 + m + (m + 0.25) ** 0.5)).\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22367,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 n           pic 9(8)v9(15).\n\n       linkage section.\n       01 m           pic 9(8).\n       01 result      pic 9v9(15).\n       procedure division using m result.\n          \n          compute n = 2 * m\n          compute result = (n + 1.0 - \n                            function sqrt(4.0 * m + 1.0 ))\n                           \/ (2.0 * m)\n\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b39e91ee7a2c103300018b3":[{"id":22368,"user_id":168,"body":"       identification division.\n       program-id. RemoveConsecutiveDuplicates.\n       data division.\n       working-storage section.\n       01  word            pic a(1000).\n       01  k               usage index.\n       01  prev-k          usage index.\n      \n       linkage section.\n       01  s.\n           05 s-length     pic 9(4).\n           05 str.\n              10 s-char    pic a occurs 0 to 1000 times \n                                  depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(4).\n           05 res.\n              10 res-char  pic a occurs 0 to 1000 times \n                                 depending on res-length indexed j.\n      \n       procedure division using s result.\n          move 1 to i j\n          move 0 to res-length prev-k\n          perform until i > s-length\n              unstring str delimited by all ' '\n                  into word count in k with pointer i\n              evaluate true\n                  when prev-k = 0\n                      add k to res-length\n                      string word delimited by ' ' \n                        into res with pointer j\n                  when res(res-length - prev-k + 1:prev-k) <> word\n                      add 1 k to res-length\n                      string ' ' delimited by size word delimited by ' '\n                        into res with pointer j\n              end-evaluate\n              move k to prev-k\n          end-perform\n          goback.\n       end program RemoveConsecutiveDuplicates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22369,"user_id":50,"body":"       identification division.\n       program-id. RemoveConsecutiveDuplicates.\n       data division.\n       local-storage section.\n       01  i usage index.\n       01  j usage index.\n       01  w pic a(1000).\n       01  a pic a(1000).\n      \n       linkage section.\n       01  truc.\n           05 s-length     pic 9(4).\n           05 s.\n              07 pic a occurs 0 to 1000 times depending on s-length.\n       01  result.\n           05 res-length   pic 9(4).\n           05 pic a occurs 0 to 1000 times depending on res-length.\n      \n       procedure division using truc result.\n      \n          initialize result\n          if s-length = 0 goback end-if\n          set i, j to 1\n          move 1001 to res-length\n          perform until i > s-length\n            unstring s delimited by space into w pointer i\n            if w <> a\n              string w delimited space ' ' delimited size\n              into result(5:) pointer j\n              move w to a\n            end-if\n          end-perform\n          compute res-length = j - 2\n      \n          goback.\n       end program RemoveConsecutiveDuplicates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22370,"user_id":53,"body":"       identification division.\n       program-id. RemoveConsecutiveDuplicates.\n       data division.\n       local-storage section.\n       01  w pic a(1000).\n       01  t pic a(1000).\n       linkage section.\n       01  s-arr.\n           05 s-length     pic 9(4).\n           05 s.\n              07 pic a occurs 0 to 1000 times \n                       depending on s-length indexed i.\n       01  result.\n           05 res-length   pic 9(4).\n           05 pic a occurs 0 to 1000 times \n                    depending on res-length indexed j.\n       procedure division using s-arr result.\n          initialize result\n          if s-length = 0 goback end-if\n          move 1 to i j\n          set res-length to 9999\n          perform until i > s-length\n            unstring s delimited by space into w pointer i\n            if w <> t\n              string w delimited space ' ' delimited size\n              into result(5:) pointer j\n              move w to t\n            end-if\n          end-perform\n          subtract 2 from j giving res-length\n          goback.\n       end program RemoveConsecutiveDuplicates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b45e4b3f41dd36bf9000090":[{"id":22371,"user_id":50,"body":"       identification division.\n       program-id. GuessTheSequence.\n      \n       data division.\n       local-storage section.\n       01  arr.\n           03  str occurs 100 times depending on x\n                                    indexed by i.\n               05  s pic x(3).\n       01  z         pic z(3)9.\n      \n       linkage section.\n       01  x           pic 9(3).\n       01  result.\n           03  resLen  pic 9(3).\n           03  res     pic 9(3)\n               occurs 100 times depending on resLen.\n      \n       procedure division using x result.\n      \n          initialize result\n          move x to resLen\n          perform varying i from 1 until i > x\n            move i to z\n            move function trim(z) to str(i)\n          end-perform\n          \n          sort str on ascending key s\n          perform varying i from 1 until i > x\n            move function numval(str(i)) to res(i)\n          end-perform\n      \n          goback.\n       end program GuessTheSequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22372,"user_id":168,"body":"       identification division.\n       program-id. GuessTheSequence.\n      \n       data division.\n       working-storage section.\n       01  n    pic zz9.\n       01  tmp occurs 100 times depending on x indexed i.\n           05 t pic xxx.\n\n       linkage section.\n       01  x           pic 9(3).\n       01  result.\n           03  resLen  pic 9(3).\n           03  res     pic 9(3)\n               occurs 100 times depending on resLen.\n      \n       procedure division using x result.\n          perform varying i from 1 until i > x\n              move i to n\n              move function trim(n) to t(i)\n          end-perform\n          sort tmp ascending t\n          move x to resLen\n          perform varying i from 1 until i > x\n              move t(i) to res(i)\n          end-perform.\n       end program GuessTheSequence.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22373,"user_id":53,"body":"       identification division.\n       program-id. GuessTheSequence.\n       data division.\n       local-storage section.\n       01  w           pic z(3)9.\n       01  str-arr.\n           05  str     occurs 100 times \n                       depending on x\n                       indexed by i.\n               08 s    pic x(3).\n       linkage section.\n       01  x           pic 9(3).\n       01  result.\n           03  res-len pic 9(3).\n           03  res     pic 9(3)\n                       occurs 100 times  \n                       depending on res-len.\n       procedure division using x result.\n          initialize result\n          move x to res-len\n          perform varying i from 1 until i > res-len\n            move i to w\n            move function trim(w) to str(i)\n          end-perform\n          sort str on ascending s\n          perform varying i from 1 until i > res-len\n            move function numval(str(i)) to res(i)\n          end-perform\n          goback.\n       end program GuessTheSequence.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b538734beb8654d6b00016d":[{"id":22374,"user_id":421,"body":"       identification division.\n       program-id. QueueTimeCounter.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  queuers.\n           05 queuers-length  pic 9(3).\n           05 q               pic 9(4) occurs 1 to 250 times \n                              depending on queuers-length\n                              indexed by i.\n       01  indx               usage index.\n       01  result             pic 9(6).\n      \n       procedure division using queuers indx result.\n           initialize result\n           perform varying i from 1 by 1 until i > queuers-length\n               if i <= indx then\n                   add function min(q(indx), q(i)) to result\n               else\n                   add function min(q(indx) - 1, q(i)) to result\n               end-if\n           end-perform.\n       end program QueueTimeCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22375,"user_id":168,"body":"       identification division.\n       program-id. QueueTimeCounter.\n       data division.\n      \n       linkage section.\n       01  queuers.\n           05 len             pic 9(3).\n           05 q               pic 9(4) occurs 1 to 250 times \n                              depending on len indexed by i.\n       01  indx               usage index.\n       01  result             pic 9(6).\n      \n       procedure division using queuers indx result.\n          move 0 to result\n          perform varying i from len by -1 until i = 0\n              if i <= indx\n                  add function min(q(indx), q(i)) to result\n              else\n                  add function min(q(indx) - 1, q(i)) to result\n              end-if\n          end-perform.\n       end program QueueTimeCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22376,"user_id":null,"body":"       identification division.\n       program-id. QueueTimeCounter.\n       data division.\n      \n       linkage section.\n       01  queuers.\n           05 queuers-length  pic 9(3).\n           05 q               pic 9(4) occurs 1 to 250 times \n                              depending on queuers-length\n                              indexed by i.\n       01  indx               usage index.\n       01  result             pic 9(6).\n      \n       procedure division using queuers indx result.\n         set result to 1\n         perform varying i from 1 until i = indx\n           compute result = result + function min(q(indx), q(i))\n         end-perform\n         perform varying i from indx until i > queuers-length\n           compute result = result + function min(q(indx) - 1, q(i))\n         end-perform.\n       end program QueueTimeCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22377,"user_id":50,"body":"       identification division.\n       program-id. QueueTimeCounter.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(4) occurs 1 to 250 times \n                             depending on arr-length indexed j.\n       01  i                 usage index.\n       01  result            pic 9(6).\n      \n       procedure division using arr i result.\n      \n          move xs(i) to result\n          perform varying j from 1 until j = i\n            add function min(xs(i), xs(j)) to result\n          end-perform\n          perform varying j from function abs(i + 1)\n                            until j > arr-length\n            add function min(xs(i) - 1, xs(j)) to result\n          end-perform\n      \n          goback.\n       end program QueueTimeCounter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b55c49d4a317adff500015f":[{"id":22378,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POINTS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I                PIC 9(4).\n       LINKAGE SECTION.\n       01 RADIUS           PIC 9(4).\n       01 RESULT           PIC 9(10).\n       PROCEDURE DIVISION USING RADIUS RESULT.\n        move 0 to result\n        perform varying i from 0 by 1 until i >= radius\n         compute result= result + function sqrt (\n          radius ** 2 - i ** 2\n         )\n        end-perform\n        compute result = 4 * result + 1\n        Goback.\n       END PROGRAM POINTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22379,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POINTS.\n       DATA DIVISION.\n       working-storage section.\n       01 r                pic 9(4).\n       LINKAGE SECTION.\n       01 RADIUS           PIC 9(4).\n       01 RESULT           PIC 9(10).\n       PROCEDURE DIVISION USING RADIUS RESULT.\n           compute result = 0\n           perform varying r from 1 by 1 until r >= radius\n              add function sqrt(radius ** 2 - r ** 2) to result\n           end-perform\n           compute result = 4 * (result + radius) + 1.\n       END PROGRAM POINTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22380,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. POINTS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 A           PIC 9(4).\n       LINKAGE SECTION.\n       01 RADIUS           PIC 9(4).\n       01 RESULT           PIC 9(10).\n       PROCEDURE DIVISION USING RADIUS RESULT.        \n        Move 0 to result\n        \n        Perform varying a from 1 by 1 until a > radius\n            compute result = result +\n                    function sqrt (radius * radius - a * a)\n        end-perform\n      \n        Compute result = (result + radius) * 4 + 1,\n        Goback.\n       END PROGRAM POINTS.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b5ce2176d0db7331f0000c0":[{"id":22381,"user_id":168,"body":"       identification division.\n       program-id. get-rope-length.\n       data division.\n       working-storage section.\n       01 m                pic 9(20)v9(16).\n       01 b                pic 9(10).\n       01 t                pic 9(10).\n       01 h                pic 9(20)v9(16).\n       01 r                pic 9(20)v9(16).\n       01 res              pic 9(20)v9(16).\n       01 total            pic 9(20)v9(16).\n      \n       linkage section.\n       01 field            pic 9(10).\n       01 ratio            pic 9v9(16).\n       01 a                pic 9(10).\n       procedure division using field ratio a.\n          compute m = function abs(function pi * field * field \/ 4 \n                                                       * ratio)\n          move 0 to a\n          move field to b\n          perform until a >= b\n              compute t = (a + b + 1) \/ 2\n              compute h = function abs(t * t \/ field)\n              compute r = function abs(field \/ 2)\n              perform compute-area\n              move res to total\n              compute h = function abs(t - h)\n              compute r = t\n              perform compute-area\n              add res to total\n              if total > m\n                  subtract 1 from t giving b\n              else\n                  move t to a\n              end-if\n          end-perform\n          goback.\n      \n       compute-area.\n          compute res = function abs(r ** 2 * function acos(1 - h \/ r)\n                    - (r - h) * function sqrt(r ** 2 - (r - h) ** 2)).\n       end program get-rope-length.\n  ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22382,"user_id":53,"body":"      *\/ Monadius's Python solution as input \n       identification division.\n       program-id. get-rope-length.\n       data division.\n       local-storage section.\n       01 a                pic 9(20)v9(16) value 0.\n       01 b                pic 9(20)v9(16).\n       01 r                pic 9(20)v9(16).\n       01 m                pic 9(20)v9(16).\n       01 x                pic 9(20)v9(16).\n       01 s                pic 9(20)v9(16).\n       01 s1               pic 9(20)v9(16).\n       01 s2               pic 9(20)v9(16).\n       01 s3               pic 9(20)v9(16).\n       01 s4               pic 9(20)v9(16).\n       linkage section.\n       01 d                pic 9(10).\n       01 k                pic 9v9(16).\n       01 result           pic 9(10).\n       procedure division using d k result.\n          initialize result\n          if d = 0 or k = 0 then move 0 to result, goback end-if\n          if k = 1 then move d to result, goback end-if\n          compute m = function pi * d ** 2 \/ 4 * k\n          move d to b\n          perform until a > b\n            compute r = function integer ((a + b) \/ 2)\n            compute x = function abs(r ** 2 \/ d)\n            move r to s1\n            compute s2 = r - x\n            call 'get-area' using by content s1 s2 by reference s3\n            compute s1 = function abs(d \/ 2)\n            move x to s2\n            call 'get-area' using by content s1 s2 by reference s4\n            compute s = s3 + s4\n            if s > m then compute b = r - 1 \n            else compute a = r + 1 end-if\n          end-perform\n          move b to result\n          goback.\n       end program get-rope-length.\n      \n       identification division.\n       program-id. get-area.\n       data division.\n       linkage section.\n       01 r                pic 9(20)v9(16).\n       01 h                pic 9(20)v9(16).\n       01 result           pic 9(20)v9(16).\n       procedure division using r h result.\n          initialize result\n          if r = 0 then move 0 to result, goback end-if\n          compute result = function abs(\n            r ** 2 * function acos(1.0 - h \/ r)\n            - (r - h) * function sqrt(r ** 2 - (r - h) ** 2))\n          goback.\n       end program get-area.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b756dc4049416c24f000762":[{"id":22383,"user_id":53,"body":"       identification division.\n       program-id. match-probability.\n       data division.\n       local-storage section.\n       01 a               pic 9v9(16).\n       01 b               pic 9v9(16).\n       01 e               pic 9v9(16).\n       01 d               pic 9v9(16).\n       01 t1              pic 9(8).\n       01 t2              pic 9(8).\n       01 v               pic 9(8).\n       linkage section.\n       01 input-values.\n          05 P            pic 9v9(16).\n          05 Q            pic 9v9(16).\n       01 result.\n          05 X            pic 9v9(16).\n          05 Y            pic 9v9(16).\n       procedure division using input-values result.\n          compute a = p ** 4\n          move 4 to t1\n          move 1 to t2\n          call 'binom' using t1 t2 v\n          compute b = function abs(v * p ** 4 * q)\n          move 5 to t1\n          move 2 to t2\n          call 'binom' using t1 t2 v\n          compute e = function abs(v * p ** 4 * q ** 2)\n          move 6 to t1\n          move 3 to t2\n          call 'binom' using t1 t2 v\n          compute d = function abs(v * (p ** 5 * q ** 3) \n            \/ (1 - 2 * p * q))\n          compute x = a + b + e + d\n          subtract x from 1 giving y\n          goback.\n       end program match-probability.\n      \n       identification division.\n       program-id. binom.\n       data division.\n       local-storage section.\n       01 m               pic 9(8).\n       01 x               pic 9(8).\n       01 y               pic 9(8).\n       01 z               pic 9(8).\n       linkage section.\n       01 n               pic 9(8).\n       01 k               pic 9(8).\n       01 r               pic 9(8).\n       procedure division using n k r.\n          subtract k from n giving m\n          call 'factorial' using n x\n          call 'factorial' using k y\n          call 'factorial' using m z\n          compute r = x \/ (y * z)\n          goback.\n       end program binom.\n      \n       identification division.\n       program-id. factorial.\n       data division.\n       linkage section.\n       01 n               pic 9(8).\n       01 r               pic 9(8).\n       procedure division using n r.\n          move n to r\n          perform until n <= 1\n            subtract 1 from n\n            multiply n by r giving r\n          end-perform\n          goback.\n       end program factorial.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22384,"user_id":168,"body":"       identification division.\n       program-id. match-probability.\n       data division.\n       linkage section.\n       01 input-values.\n          05 P            pic 9v9(16).\n          05 Q            pic 9v9(16).\n       01 result.\n          05 RP           pic 9v9(16).\n          05 RQ           pic 9v9(16).\n       procedure division using input-values result.\n          compute rp = function abs(p ** 4 * (3 - 2 * p) \n              * (4 * (p - 2) * p + 5) \/ (1 - 2 * q * p))\n          compute rq = 1 - rp\n          goback.\n       end program match-probability.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22385,"user_id":53,"body":"       identification division.\n       program-id. match-probability.\n       data division.\n       linkage section.\n       01 inp.\n          05 P            pic 9v9(16).\n          05 Q            pic 9v9(16).\n       01 res.\n          05 P            pic 9v9(16).\n          05 Q            pic 9v9(16).\n       procedure division using inp res.\n          compute P of res = function abs(\n              P of inp ** 4 \n              + 4.0 * P of inp ** 4 * Q of inp\n              + 10.0 * P of inp ** 4 * Q of inp ** 2 \n              + 20.0 * P of inp ** 5 * Q of inp ** 3\n              \/ (1.0 - 2.0 * P of inp * Q of inp))\n          compute Q of res = 1.0 - P of res\n          goback.\n       end program match-probability.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b853229cfde412a470000d0":[{"id":22386,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n           SUBTRACT AGE-SON, AGE-SON FROM AGE-DAD GIVING RESULT.\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22387,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n       COMPUTE RESULT = AGE-DAD - (AGE-SON * 2).\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22388,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n        compute result = AGE-DAD - 2 * AGE-SON.\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22389,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n      * your code here\n       compute result = age-dad - age-son * 2.\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22390,"user_id":1277,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       AUTHOR. \"Souzooka\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n           COMPUTE RESULT = FUNCTION ABS(AGE-DAD - (AGE-SON * 2))\n           .\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22391,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n           COMPUTE RESULT = AGE-DAD - AGE-SON - AGE-SON.\n       END PROGRAM TWICE-AS-OLD.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22392,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n            compute result = age-dad - 2 * age-son.\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22393,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. TWICE-AS-OLD.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION USING AGE-DAD AGE-SON RESULT.\n          COMPUTE RESULT = AGE-DAD - 2 * AGE-SON.\n       END PROGRAM TWICE-AS-OLD.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22394,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION.\n       TWICE-AS-OLD SECTION.\n       COMPUTE RESULT = (AGE-DAD - (AGE-SON * 2))* -1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22395,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION.\n       TWICE-AS-OLD SECTION.\n      * your code here\n               if (age-son * 2) = age-dad then\n                  compute result = age-dad - 2 * age-son\n               else \n                  if (age-son * 2) < age-dad then\n                     compute result = age-dad - 2 * age-son\n                  else\n      *               compute result = 2 * age-son - age-dad\n                      compute result = age-dad - 2 * age-son\n                  end-if\n               end-if.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22396,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION.\n       TWICE-AS-OLD SECTION.\n      * your code here\n       compute result = age-dad - 2 * age-son\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22397,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION.\n       TWICE-AS-OLD SECTION.\n           COMPUTE RESULT = AGE-DAD - (AGE-SON * 2) \n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22398,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION.\n       TWICE-AS-OLD SECTION.\n      * \ud83d\ude01\n          COMPUTE RESULT = 2 * AGE-SON - AGE-DAD.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22399,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 AGE-DAD        PIC 9(3).\n       01 AGE-SON        PIC 9(2).\n       01 RESULT         PIC 9(3).\n       PROCEDURE DIVISION.\n       TWICE-AS-OLD SECTION.\n          COMPUTE RESULT = AGE-DAD - 2 * AGE-SON\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5b9e29dc1d5ed219910000a7":[{"id":22400,"user_id":421,"body":"       identification division.\n       program-id. subcuboids.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 z           pic 9(8).\n       01 result      pic 9(38).      \n       procedure division using x y z result.\n           COMPUTE result = x * (x + 1) * y * (y + 1) * z * (z + 1) \/ 8.\n       end program subcuboids.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22401,"user_id":527,"body":"       identification division.\n       program-id. subcuboids.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 z           pic 9(8).\n       01 result      pic 9(38).\n      \n       procedure division using x y z result.\n       compute result = x * (x + 1) * y * (y + 1) * z * (z + 1) \/ 8.\n       end program subcuboids.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22402,"user_id":53,"body":"       identification division.\n       program-id. subcuboids.\n       data division.\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 z           pic 9(8).\n       01 r           pic 9(38).\n       procedure division using x y z r.\n          compute  r = x * y * z \n            * (x + 1) * (y + 1) * (z + 1) \/ 8\n          goback.\n       end program subcuboids.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22403,"user_id":168,"body":"       identification division.\n       program-id. subcuboids.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 z           pic 9(8).\n       01 result      pic 9(38).\n      \n       procedure division using x y z result.\n          compute result = x * y * z * (x + 1) * (y + 1) * (z + 1) \/ 8.\n       end program subcuboids.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22404,"user_id":50,"body":"       identification division.\n       program-id. subcuboids.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 z           pic 9(8).\n       01 result      pic 9(38).\n      \n       procedure division using x y z result.\n      \n          compute result = x * (x + 1) * y * (y + 1) * z * (z + 1) \/ 8\n      \n          goback.\n       end program subcuboids.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ba38ba180824a86850000f7":[{"id":22405,"user_id":168,"body":"       identification division.\n       program-id. solve.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(3).\n           05 xs             pic 9(3) occurs 0 to 500 times \n                                      depending on arr-length\n                                      indexed by i j.\n       01  result.\n           05 res-length     pic 9(3).\n           05 res            pic 9(3) occurs 0 to 500 times \n                                     depending on res-length.\n      \n       procedure division using arr result.\n           move 0 to res-length\n           perform varying i from 1 until i > arr-length\n                compute j = i + 1\n                search xs varying j\n                    at end\n                        add 1 to res-length\n                        move xs(i) to res(res-length)\n                    when xs(j) = xs(i) \n                        continue\n                end-search\n           end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22406,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  n            pic 9(3).\n      \n       linkage section.\n       01  arr.\n           05 l         pic 9(3).\n           05 xs        pic 9(3) occurs 0 to 500 times \n                        depending on l indexed i j.\n       01  result.\n           05 k         pic 9(3).\n           05 res       pic 9(3) occurs 0 to 500 times \n                                     depending on k.\n      \n       procedure division using arr result.\n      \n           move 0 to k\n           perform varying i from 1 until i > l\n              move xs(i) to n\n              perform varying j from l by -1 until j < i\n                if xs(j) = n exit perform end-if\n              end-perform\n              if i = j\n                add 1 to k\n                move n to res(k)\n              end-if\n           end-perform\n      \n           goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22407,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  p            pic 9(3).\n       linkage section.\n       01  arr.\n           05 l         pic 9(3).\n           05 xs        pic 9(3) occurs 0 to 500 times \n                        depending on l \n                        indexed by i j.\n       01  result.\n           05 k         pic 9(3).\n           05 res       pic 9(3) occurs 0 to 500 times \n                                 depending on k.\n       procedure division using arr result.\n           move 0 to k\n           perform varying i from 1 until i > l\n              move xs(i) to p\n              perform varying j from l by -1 until j < i\n                if xs(j) = p then\n                  exit perform \n                end-if\n              end-perform\n              if i = j\n                add 1 to k\n                move p to res(k)\n              end-if\n           end-perform\n           goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5bb0c58f484fcd170700063d":[{"id":22408,"user_id":421,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n       author. \"ejini\u6218\u795e\".\n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).      \n       procedure division using numPill dist width result.\n           compute result = function max(0, dist * 100 * (numPill - 1)\n                            + width * (numPill - 2)).\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22409,"user_id":null,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.\n        \n        if numPill > 1 then\n          compute result = dist \n                            * (numPill - 1)\n                            * 100 + (numPill - 2) \n                            * width\n        else\n          compute result = 0\n        end-if.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22410,"user_id":null,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.\n      \n          initialize result\n          IF numPill < 2 THEN\n            MOVE 0 TO result\n            GOBACK\n          END-IF.\n          COMPUTE result = dist * (numPill - 1) * 100 +\n                    (numPill - 2) * width.\n          \n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22411,"user_id":null,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n       working-storage section.\n       01 wrk-numPil      pic 9(4).\n       01 dist-sum        pic 9(8).\n       01 width-sum       pic 9(8).\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.     \n          initialize result\n          subtract 1 from numPill giving wrk-numPil\n          multiply 100 by dist giving dist-sum\n          multiply wrk-numPil by dist-sum\n          if wrk-numPil > 0 then\n             subtract 1 from wrk-numPil\n          end-if\n          multiply wrk-numPil by width giving width-sum\n          add dist-sum to width-sum giving result\n          goback.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22412,"user_id":null,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.\n      \n          initialize result.\n          if numPill > 1\n            compute result = (numPill - 1) * dist * 100\n          end-if\n          if numPill > 2\n            compute result = result + width * (numPill - 2)\n          end-if\n          goback.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22413,"user_id":null,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.\n          if numPill = 1 then \n            move 0 to result\n          else   \n            compute result = dist * 1000 * ( numPill - 1)\n            compute result = result + (width * (numPill - 2)) * 10 \n            compute result = result \/ 10\n          end-if.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22414,"user_id":76,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.\n         initialize result\n         if numPill > 1 then\n           compute result = dist * 100 * (numPill - 1)\n           if numPill > 2 then\n             compute result = result + (numPill - 2) * width\n           end-if\n         end-if.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22415,"user_id":168,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n      \n       linkage section.\n       01  n       pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using n dist width result.\n          compute result = (n - 1) * dist * 100\n                    + function max(n - 2, 0) * width.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22416,"user_id":53,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n       linkage section.\n       01  n  pic 9(4).\n       01  d  pic 9(2).\n       01  w  pic 9(2).\n       01  r  pic 9(8).\n       procedure division using n d w r.\n          compute r = (n - 1) * d * 100 + function max\n            (0, (n - 2) * w),\n          goback.\n       end program Pillars.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22417,"user_id":50,"body":"       identification division.\n       program-id. Pillars.\n       data division.\n       local-storage section.\n       01  n       pic s9(8).\n      \n       linkage section.\n       01  numPill pic 9(4).\n       01  dist    pic 9(2).\n       01  width   pic 9(2).\n       01  result  pic 9(8).\n      \n       procedure division using numPill dist width result.\n      \n          initialize result\n      \n          compute n = (dist * 100 + width) * (numPill - 1) - width\n          if n > 0 move n to result end-if\n      \n          goback.\n       end program Pillars.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5bb3e299484fcd5dbb002912":[{"id":22418,"user_id":421,"body":"       identification division.\n       program-id. pyramid.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 balls       pic 9(8).\n       01 result      pic 9(8) value 1.\n       procedure division using balls result.\n           COMPUTE result = (-1 + FUNCTION SQRT(1 + 8 * balls)) \/ 2.\n       end program pyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22419,"user_id":null,"body":"       identification division.\n       program-id. pyramid.\n       data division.\n       linkage section.\n       01 balls       pic 9(8).\n       01 result      pic 9(8) value 1.\n       procedure division using balls result.\n         perform varying result from 0 until\n             (result + 1) * (result + 2) > 2 * balls\n         end-perform.\n       end program pyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22420,"user_id":168,"body":"       identification division.\n       program-id. pyramid.\n       data division.\n       local-storage section.\n       01 n           pic 9(9).\n       linkage section.\n       01 balls       pic 9(8).\n       01 result      pic 9(8) value 1.\n       procedure division using balls result.\n          perform until n + result >= balls\n            add 1 to result\n            add result to n\n          end-perform.\n       end program pyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22421,"user_id":527,"body":"       identification division.\n       program-id. pyramid.\n       data division.\n       linkage section.\n       01 balls       pic 9(8).\n       01 result      pic 9(8) value 1.\n       procedure division using balls result.\n       compute result = (function sqrt(8 * balls + 1) - 1) \/ 2.\n       end program pyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22422,"user_id":53,"body":"       identification division.\n       program-id. pyramid.\n       data division.\n       linkage section.\n       01 balls       pic 9(8).\n       01 result      pic 9(8) value 1.\n       procedure division using balls result.\n          compute result = \n            ((8 * balls + 1) ** 0.5 - 1) \/ 2\n          goback.\n       end program pyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22423,"user_id":50,"body":"       identification division.\n       program-id. pyramid.\n       data division.\n       local-storage section.\n       01 a           pic 9(8).\n       linkage section.\n       01 balls       pic 9(8).\n       01 result      pic 9(8) value 1.\n       procedure division using balls result.\n      \n          move 0 to a\n          \n          perform until a >= balls\n             add 1 to result\n             compute a = result * (result + 1) \/ 2 - 1\n          end-perform\n          \n          subtract 1 from result\n\n          goback.\n       end program pyramid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5bb904724c47249b10000131":[{"id":22424,"user_id":null,"body":"       identification division.\n       program-id. Points.\n       data division.\n       working-storage section.\n       01 i        pic 9(10).\n      \n       linkage section.\n       01  games.\n          03 game occurs 10 times.\n             05 game-x    pic 9.\n             05 game-fill pic x.\n             05 game-y    pic 9.\n       01  result  pic 9(2).\n      \n       procedure division using games result.\n          move zero to result\n          perform a-para varying i from 1 by 1 until i > 10.\n          goback.\n      \n          a-para.\n            if game-x(i) > game-y(i) then\n               add 3 to result\n            else\n               if game-x(i) = game-y(i) then\n                  add 1 to result\n               end-if\n            end-if.\n       end program Points.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22425,"user_id":null,"body":"       identification division.\n       program-id. Points.\n       data division.\n      \n       linkage section.\n       01  games.\n           03 game occurs 10 times indexed by i.\n              05 x pic 9(1).\n              05 filler pic x(1).\n              05 y pic 9(1).\n       01  result  pic 9(2).\n      \n       procedure division using games result.\n      \n          initialize result\n          move 1 to i\n                    \n          perform until i > 10\n            if x(i) > y(i)\n              add 3 to result\n            else if x(i) < y(i)\n              add 0 to result\n            else if x(i) = y(i)\n              add 1 to result\n            end-if\n            end-if\n            end-if\n            \n            add 1 to i\n          end-perform.       \n      \n          goback.\n       end program Points.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22426,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Points.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  GAMES   PIC X(3) OCCURS 10 INDEXED I.\n       01  RESULT  PIC 9(2).\n\n       PROCEDURE DIVISION USING GAMES RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > 10\n               EVALUATE TRUE\n                   WHEN GAMES(I)(1:1) = GAMES(I)(3:)  ADD 1  TO RESULT\n                   WHEN GAMES(I)(1:1) > GAMES(I)(3:)  ADD 3  TO RESULT\n               END-EVALUATE\n           END-PERFORM.\n       END PROGRAM Points.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22427,"user_id":168,"body":"       identification division.\n       program-id. Points.\n       data division.\n      \n       linkage section.\n       01  games.\n           03 game pic x(3) occurs 10 times indexed i.\n       01  result  pic 9(2).\n      \n       procedure division using games result.\n          move 0 to result\n          perform varying i from 1 until i > 10\n              evaluate true\n                  when game(i)(1:1) > game(i)(3:1) add 3 to result\n                  when game(i)(1:1) = game(i)(3:1) add 1 to result\n              end-evaluate\n          end-perform.\n       end program Points.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22428,"user_id":53,"body":"       identification division.\n       program-id. Points.\n       data division.\n       local-storage section.\n       01 a pic x.\n       01 b pic x.\n       linkage section.\n       01  games.\n           03 game pic x(3) \n                   occurs 10 times \n                   indexed by i.\n       01  result  pic 9(2).\n       procedure division using games result.\n          initialize result\n          perform varying i from 1 until i = 11\n            move game(i)(1:1) to a\n            move game(i)(3:1) to b\n            evaluate true\n              when a = b add 1 to result\n              when a > b add 3 to result\n            end-evaluate\n          end-perform\n          goback.\n       end program Points.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22429,"user_id":50,"body":"       identification division.\n       program-id. Points.\n       data division.\n      \n       linkage section.\n       01  games.\n           03 game pic x(3) occurs 10 times indexed i.\n       01  result  pic 9(2).\n      \n       procedure division using games result.\n      \n          initialize result\n          perform varying i from 1 until i = 11\n              evaluate game(i)(1:1)\n              when = game(i)(3:1) add 1 to result\n              when > game(i)(3:1) add 3 to result\n              end-evaluate\n          end-perform\n      \n          goback.\n       end program Points.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5bc027fccd4ec86c840000b7":[{"id":22430,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       working-storage section.\n       01 i           pic 99.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          compute result = 0\n          if n = 0 then goback end-if\n          compute i = 1\n          compute a = n\n          inspect a tallying i for leading '0'\n          move 0 to a(i:1)\n          move all '9' to a(i + 1:)\n          compute b = n - a\n          perform varying i from i by 1 until i > 20\n              add function numval(a(i:1)) function numval(b(i:1)) \n                  to result\n          end-perform.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22431,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. solve.      \n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 I              PIC 9(2).\n       01 LEN            PIC 9(2).\n       LINKAGE SECTION.\n       01 N              PIC 9(20).\n       01 RESULT         PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE LEN = FUNCTION INTEGER(FUNCTION LOG10(N))           \n           COMPUTE N = N - (10 ** LEN - 1)\n           PERFORM VARYING I FROM 1 BY 1 UNTIL I > LENGTH OF N\n               ADD FUNCTION NUMVAL(N(I:1))  TO RESULT\n           END-PERFORM\n           COMPUTE RESULT = RESULT + 9 * LEN.\n       END PROGRAM solve.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22432,"user_id":53,"body":"       identification division.\n       program-id. solve recursive.\n       data division.\n       local-storage section.\n       01 a           pic 9(20).\n       01 b           pic 9(20).\n       01 d           pic 9(20).\n       01 e           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n          if n = 0 then\n            move 0 to e\n          else\n            compute a = function min(n, 9)\n            compute b = function rem(n - a, 10)\n            compute d = (n - a - b) \/ 10\n            call 'solve' using \n              by content d\n              by reference e\n            compute e = a + b + e\n          end-if\n          move e to result\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22433,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 r           pic 9.\n       01 o           pic s9(20).\n\n       linkage section.\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n result.\n\n          perform until function rem(n, 10) <> 9\n              add 9 to o\n              divide 10 into n giving n\n          end-perform\n\n          if n <> 0\n            subtract 9 from o\n          end-if\n      \n          perform until n = 0\n              divide 10 into n giving n remainder r\n              compute o = o + r + 9\n          end-perform\n          \n          move o to result\n\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5bc052f93f43de7054000188":[{"id":22434,"user_id":53,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       local-storage section.\n       01  a-len        pic 9(5).\n       01  b-len        pic 9(5).\n       01  i-star       pic 9(5) value 0.\n       01  i            usage index.\n       01  j            usage index.\n       01  k            usage index.\n       linkage section.\n       01  a            pic x(20000).\n       01  b            pic a(20000).\n       01  result       pic 9.\n       procedure division using a b result.\n          initialize result\n          move length of function trim(a) to a-len\n          move length of function trim(b) to b-len\n          perform varying i from 1 until i > a-len\n            if a(i:1) = '*' then \n              move i to i-star \n              exit perform\n            end-if\n          end-perform\n          if i-star is zero then\n            if function trim(a) = function trim(b) then\n              set result to 1\n            end-if\n            exit paragraph\n          end-if\n          if a-len > b-len + 1 then exit paragraph end-if\n          perform varying i from 1 until i = i-star\n            if a(i:1) <> b(i:1) then exit paragraph end-if\n          end-perform\n          add 1 to i-star giving j\n          subtract i-star from a-len giving k\n          subtract k from b-len giving k\n          add 1 to k\n          perform varying i from j until i > a-len\n            display i, display k\n            if a(i:1) <> b(k:1) then exit paragraph end-if\n            add 1 to k\n          end-perform\n          set result to 1\n          goback.\n       end program Solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22435,"user_id":50,"body":"       identification division.\n       program-id. Solve.\n      \n       data division.\n       local-storage section.\n       01  aa           pic a(20000).\n       01  laa          pic 9(5).\n       01  delim        pic x.\n       01  i            usage index.\n      \n       linkage section.\n       01  a            pic x(20000).\n           88  aEmpty   value space.\n           88  star     value '*'.\n       01  b            pic a(20000).\n           88  bEmpty   value space.\n       01  result       pic 9.\n      \n       procedure division using a b result.\n      \n          initialize result\n      \n      *   preliminary easy checks: a is empty and\/or b is empty, or a is '*'\n          if star move 1 to result goback end-if\n      \n          evaluate aEmpty also bEmpty\n          when      true  also  true \n               move 1 to result goback\n          when      true  also false\n          when     false  also  true\n               goback\n          end-evaluate\n      \n          set i to 1\n          unstring a\n              delimited by '*' or space\n              into aa\n              delimiter in delim\n              count in laa\n              with pointer i\n          end-unstring\n      \n          evaluate true\n          when delim = space\n               if a = b move 1 to result end-if\n               goback\n          when aa <> b(1:laa)\n               goback\n          end-evaluate\n      \n      *   `if laa < 1` works too, but checking this avoids an unnecessary move\n          if laa > 0 move b(laa + 1:) to b end-if\n          unstring a\n              delimited by space\n              into aa\n              count in laa\n              with pointer i\n          end-unstring\n      \n          if laa = 0\n          or function reverse(function trim(aa))\n           = function trim(function reverse(b))(1:laa)\n          then  move 1 to result end-if\n      \n          goback.\n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5bc555bb62a4cec849000047":[{"id":22436,"user_id":53,"body":"       identification division.\n       program-id. FibonacciDigit.\n       data division.\n       local-storage section.\n       01  i           pic 9(11) value 2.\n       01  s           pic 9(20).\n       01  a           pic 9(11).\n       01  b           pic 9(11).\n       linkage section.\n       01  aa          pic 9.\n       01  bb          pic 9.\n       01  n           pic 9(11).\n       01  result      pic 9.\n       procedure division using aa bb n result.\n          initialize result\n          move aa to a, move bb to b\n          compute n = function rem(n, 10000)\n          compute s = a * 10 + b\n          perform until i > n\n            if a + b < 10 then\n              add 1 to i \n              compute s = function rem(s, 10) * 10 + a + b\n            else\n              add 2 to i \n              compute s = a + b\n            end-if\n            compute a = (s - function rem(s, 10)) \/ 10\n            compute b = function rem(s, 10)\n          end-perform\n          if n = i - 1 then\n            compute result = function rem(s, 10)\n          else\n            compute result = (s - function rem(s, 10)) \/ 10\n          end-if\n          goback.\n       end program FibonacciDigit.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22437,"user_id":50,"body":"      * Implementation of dinnyesbacsi's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5bc8218340ecc72ac100027c\/groups\/5bc8f0aa168568832d001a34\n       identification division.\n       program-id. FibonacciDigit.\n      \n       data division.\n       local-storage section.\n       01  s       pic x(40).\n       01  i       usage index.\n       01  c       pic z(2)9.\n       01  e       pic 9.\n       01  f       pic 9.\n      \n       linkage section.\n       01  a       pic 9.\n       01  b       pic 9.\n       01  n       pic 9(11).\n       01  result  pic 9.\n      \n       procedure division using a b n result.\n      \n          initialize result\n          set i to 1\n          string a b into s pointer i\n          if n > 20\n            compute n = function rem(n, 20) + 20\n          end-if\n          perform until i > n + 1\n            move s(i - 1: 1) to e\n            move s(i - 2: 1) to f\n            compute c = e + f\n            string function trim(c) into s pointer i\n          end-perform\n          \n          move s(n + 1:1) to result\n      \n          goback.\n       end program FibonacciDigit.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5becace7063291bebf0001d5":[{"id":22438,"user_id":null,"body":"       identification division.\n       program-id. positiveToNegative.\n       data division.\n       local-storage section.\n       77 j                  usage is index value 0.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             pic 9 occurs 1 to 9 times \n                                   depending on arr-length.\n       01  result.\n           05 res-length     pic 9.\n           05 res            pic 9 occurs 1 to 9 times \n                                   depending on res-length\n                                   indexed by i.\n      \n       procedure division using arr result.\n          move arr-length to res-length\n          perform varying i from res-length by -1 until i <= 0\n              compute res(i) = j - xs(i)\n              compute j = function max(j, res(i))\n          end-perform\n          goback.\n       end program positiveToNegative.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22439,"user_id":null,"body":"       identification division.\n       program-id. positiveToNegative.\n       data division.\n       local-storage section.\n       77 carry              pic 9 value 1.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             pic 9 occurs 1 to 9 times \n                                   depending on arr-length.\n       01  result.\n           05 res-length     pic 9.\n           05 res            pic 9 occurs 1 to 9 times \n                                   depending on res-length\n                                   indexed by i.\n      \n       procedure division using arr result.      \n           move arr-length to res-length\n           perform varying i from 1 until i > res-length\n              compute res(i) = 1 - xs(i)\n           end-perform\n           perform varying i from res-length by -1 until i <= 0\n              compute res(i) = res(i) + carry\n              compute carry = function max(res(i) - 1, 0)\n              compute res(i) = function mod(res(i), 2)\n           end-perform\n           goback.\n       end program positiveToNegative.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22440,"user_id":168,"body":"       identification division.\n       program-id. positiveToNegative.\n       data division.\n       working-storage section.\n       01  c    pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             pic 9 occurs 1 to 9 times \n                                   depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9.\n           05 res            pic 9 occurs 1 to 9 times \n                                   depending on res-length.\n      \n       procedure division using arr result.\n           move 1 to c\n           move arr-length to res-length\n           perform varying i from arr-length by -1 until i = 0\n               divide function abs(1 + c - xs(i)) by 2 \n                  giving c remainder res(i)\n           end-perform.\n       end program positiveToNegative.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22441,"user_id":53,"body":"       identification division.\n       program-id. positiveToNegative.\n       data division.\n       local-storage section.\n       01  i                 usage index.\n       01  c                 pic 9 value 0.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             pic 9 occurs 1 to 9 times \n                                   depending on arr-length.\n       01  result.\n           05 res-length     pic 9.\n           05 res            pic 9 occurs 1 to 9 times \n                                   depending on res-length.\n       procedure division using arr result.\n          initialize result\n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n            if xs(i) = 0 then move 1 to res(i)\n            else move 0 to res(i) end-if\n          end-perform\n          perform varying i from arr-length by -1 until i = 0\n            evaluate true\n              when i = arr-length\n                if res(i) = 0 then move 1 to res(i)\n                else move 0 to res(i), add 1 to c end-if\n              when c = 1\n                if res(i) = 0 then \n                  move 1 to res(i), move 0 to c\n                else move 0 to res(i) end-if\n            end-evaluate\n          end-perform\n          goback.\n       end program positiveToNegative.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22442,"user_id":50,"body":"       identification division.\n       program-id. positiveToNegative.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9.\n           05 xs             pic 9 occurs 1 to 9 times \n                                  depending on arr-length\n                                  indexed by i.\n       01  result.\n           05 res-length     pic 9.\n           05 res            pic 9 occurs 1 to 9 times \n                                  depending on res-length.\n      \n       procedure division using arr result.\n      \n          move arr-length to res-length\n          perform varying i from 1 until i > arr-length\n              compute res(i) = 1 - xs(i)\n          end-perform\n          perform varying i from res-length by -1 until i = 0\n              compute res(i) = 1 - res(i)\n              if res(i) = 1 exit perform end-if\n          end-perform\n      \n          goback.\n       end program positiveToNegative.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5c09ccc9b48e912946000157":[{"id":22443,"user_id":53,"body":"       identification division.\n       program-id. PeakHeight.\n       data division.\n       local-storage section.\n       01  k                  pic s9(5).\n       01  a                  pic 9(5).\n       01  b                  pic 9(5).\n       01  c                  pic 9(5).\n       01  altitude.\n           05  xs-len         pic 9(5).\n           05  xs             pic 9(5)\n                              occurs 0 to 5000 times\n                              depending on xs-len.\n       linkage section.\n       01  mountain.\n           05  h              pic 9(3).\n           05  w              pic 9(2).\n           05  row            occurs 3 to 100 times \n                              depending on h.\n              07  cell        pic x occurs 50 times.\n       01  m                  pic 9(2).\n       procedure division using mountain m.\n      \n          initialize m\n          multiply h by w giving xs-len\n          subtract 1 from xs-len giving c\n      \n          perform varying k from 0 until k >= xs-len\n            if cell(k \/ w + 1, function rem(k, w) + 1) = '^' then\n              if k < w then set a to 0 \n              else move xs(k - w + 1) to a end-if\n              if function rem(k, w) = 0 then set b to 0\n              else move xs(k) to b end-if\n              compute xs(k + 1) = 1 + function min(a, b)\n            end-if\n          end-perform\n      \n          perform varying k from c by -1 until k < 0\n            if cell(k \/ w + 1, function rem(k, w) + 1) = '^' then\n              if k < w * (h - 1) then move xs(k + w + 1) to a\n              else set a to 0 end-if\n              if function rem(k, w) <> w - 1 then move xs(k + 2) to b\n              else set b to 0 end-if\n              compute xs(k + 1) = function min(\n                xs(k + 1), 1 + function min(a, b))\n              compute m = function max(m, xs(k + 1))\n            end-if\n          end-perform\n      \n          goback.\n       end program PeakHeight.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22444,"user_id":50,"body":"      * Implementation of Python's reference solution by Blind4Basics\n       identification division.\n       program-id. PeakHeight.\n       data division.\n       local-storage section.\n       01  filler.\n           05  occurs 3 to 100 times depending on lx.\n               07  l pic 9(3) occurs 50 times.\n      \n       linkage section.\n       01  mountain.\n           05  lx      pic 9(3).\n           05  ly      pic 9(2).\n           05  row occurs 3 to 100 times \n                   depending on lx indexed x.\n              07  cell pic x occurs 50 times indexed y.\n       01  result      pic 9(2).\n      \n       procedure division using mountain result.\n      \n          initialize result\n      \n          perform varying x from 1 until x > lx\n                  after y from 1 until y > ly\n            if cell(x, y) = '^'\n               add 1 to l(x, y)\n               if x > 1 and x < lx and y > 1 and y < ly\n                  add function min(l(x - 1, y), l(x, y - 1)) to l(x, y)\n            end-if end-if\n            move function max(function min(1, l(x, y)), result)\n                 to result\n          end-perform\n      \n          perform varying x from function abs(lx - 1) by -1 until x = 1\n                  after   y from function abs(ly - 1) by -1 until y = 1\n            move function min(l(x, y), l(x + 1, y) + 1, l(x, y + 1) + 1)\n                 to l(x, y)\n            if result < l(x, y) add 1 to result end-if\n          end-perform\n      \n          goback.\n       end program PeakHeight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5c556845d7e0334c74698706":[{"id":22445,"user_id":421,"body":"       identification division.\n       program-id. fit-in.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9.\n           88 suitcase VALUE 1 WHEN SET TO false 0.\n       procedure division using a b m n result. \n           IF FUNCTION MAX(A, B) <= FUNCTION MIN(M, N) AND \n              A + B <= FUNCTION MAX(M, N) THEN\n               SET suitcase TO true\n           ELSE\n               SET suitcase TO false\n           END-IF.\n       end program fit-in.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22446,"user_id":53,"body":"       identification division.\n       program-id. fit-in.\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9.\n       procedure division using a b m n result.\n          move 0 to result\n          if function max(n, m) >= a + b\n              and function max(a, b) <= \n                  function min(n, m) then\n            move 1 to result\n          end-if\n          goback.\n       end program fit-in.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22447,"user_id":168,"body":"       identification division.\n       program-id. fit-in.\n       environment division.\n       configuration section.\n       repository. function min max intrinsic.\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9.\n       procedure division using a b m n result.\n          if max(m, n) >= a + b and min(m, n) >= max(a, b)\n             move 1 to result\n          else\n             move 0 to result\n          end-if.\n       end program fit-in.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22448,"user_id":50,"body":"       identification division.\n       program-id. fit-in.\n       data division.\n       linkage section.\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 m           pic 9(8).\n       01 n           pic 9(8).\n       01 result      pic 9.\n       procedure division using a b m n result.\n      \n          if function max(a, b) <= function min(m, n)\n             and a + b <= function max(m, n)\n            move 1 to result\n          else\n            move 0 to result\n          end-if\n      \n          goback.\n       end program fit-in.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5c942f40bc4575001a3ea7ec":[{"id":22449,"user_id":421,"body":"       identification division.\n       program-id. per.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       working-storage section.\n       01  temp              pic 9(16).\n       linkage section.\n       01  n                 pic 9(16).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(16) occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using n result.\n           perform until n < 10\n               set temp to 1\n               perform until n = 0\n                   multiply function rem(n, 10) by temp\n                   divide 10 into n\n               end-perform            \n               add 1 to res-length\n               move temp to res(res-length)\n               move temp to n\n          end-perform.\n       end program per.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22450,"user_id":168,"body":"       identification division.\n       program-id. per.\n       data division.\n       working-storage section.\n       01  p                 pic 9(16).\n      \n       linkage section.\n       01  n                 pic 9(16).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(16) occurs 0 to 20 times \n                                  depending on res-length indexed i.\n      \n       procedure division using n result.\n           move 0 to res-length\n           perform until n < 10\n               move 0 to i\n               move 1 to p\n               inspect n tallying i for leading '0'\n               perform varying i from function abs(i + 1) until i > 16\n                    multiply function numval(n(i:1)) by p\n               end-perform\n               add 1 to res-length\n               move p to res(res-length) n\n           end-perform.\n       end program per.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22451,"user_id":53,"body":"       identification division.\n       program-id. per.\n       data division.\n       local-storage section.\n       01  p                 pic 9(16).\n       01  m                 pic 9(16). \n       01  d                 pic 9.\n       linkage section.\n       01  n                 pic 9(16).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(16) \n                             occurs 0 to 20 times \n                             depending on res-length.\n       procedure division using n result.\n          initialize result\n          move 0 to res-length\n          perform until n < 10\n            move 1 to p\n            move n to m\n            perform until m = 0\n              divide 10 into m giving m remainder d\n              multiply d by p\n            end-perform\n            add 1 to res-length\n            move p to res(res-length)\n            move p to n\n          end-perform\n           goback.\n       end program per.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22452,"user_id":50,"body":"       identification division.\n       program-id. per.\n       data division.\n       local-storage section.\n       01  x                 pic 9(16).\n       01  r                 pic 9.\n      \n       linkage section.\n       01  n                 pic 9(16).\n       01  result.\n           05 res-length     pic 99.\n           05 res            pic 9(16) occurs 0 to 20 times \n                                  depending on res-length.\n      \n       procedure division using n result.\n      \n          move 0 to res-length\n          perform until n < 10\n            move 1 to x\n            perform until n = 0\n              divide 10 into n giving n remainder r\n              multiply r by x\n            end-perform\n            add 1 to res-length\n            move x to n, res(res-length)\n          end-perform\n      \n           goback.\n       end program per.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5cba04533e6dce000eaf6126":[{"id":22453,"user_id":421,"body":"       identification division.\n       program-id. blood-moon.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  r           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using r result.\n           compute result = r * r \/ 4.\n       end program blood-moon.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22454,"user_id":50,"body":"       identification division.\n       program-id. blood-moon.\n       data division.\n       local-storage section.\n       01 n            usage comp-2.\n       01 r            usage comp-2.\n      \n       linkage section.\n       01  e           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using e result.\n      \n            move e to r\n            compute n = function sqrt(r * r * 2) \/ 2\n            compute result = (function pi * \n                (((function sqrt(n * n * 2) \/ 2) ** 2)\n                            - (n ** 2) \/ 2)\n                            - (n ** 2)) \/ 2.\n      \n       end program blood-moon.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22455,"user_id":527,"body":"       identification division.\n       program-id. blood-moon.\n       data division.\n       linkage section.\n       01  r           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using r result.\n          compute result = r * r \/ 4.\n       end program blood-moon.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22456,"user_id":168,"body":"       identification division.\n       program-id. blood-moon.\n       data division.\n       linkage section.\n       01  r           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using r result.\n         compute result = r ** 2 \/ 4.\n       end program blood-moon.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22457,"user_id":null,"body":"       identification division.\n       program-id. blood-moon.\n       data division.\n       linkage section.\n       01  r           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using r result.\n      \n        compute result = r ** 2 \/ 4.\n         goback.\n      \n       end program blood-moon.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22458,"user_id":50,"body":"       identification division.\n       program-id. blood-moon.\n       data division.\n       local-storage section.\n       01 n            usage comp-2.\n       01 r            usage comp-2.\n      \n       linkage section.\n       01  e           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using e result.\n      \n            move e to r\n            compute n = function sqrt(r * r * 2) \/ 2\n            compute result = (function pi * \n                (((function sqrt(2) * n \/ 2) ** 2)\n                            - (n ** 2) \/ 2)\n                            - n ** 2) \/ 2.\n      \n       end program blood-moon.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22459,"user_id":53,"body":"       identification division.\n       program-id. blood-moon.\n       data division.\n       linkage section.\n       01  r           pic 9(5).\n       01  result      pic 9(10)v9(4).\n       procedure division using r result.\n          compute result = r * r \/ 4.0\n          goback.\n       end program blood-moon.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5cd4aec6abc7260028dcd942":[{"id":22460,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       AUTHOR \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING RESULT FROM 0 BY 1 UNTIL N = 1\n               IF FUNCTION REM(N, 2) = 1 THEN\n                   SUBTRACT 1 FROM N\n               ELSE\n                   DIVIDE 2 INTO N\n               END-IF\n           END-PERFORM.  \n       END PROGRAM STEPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22461,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          perform varying result from 0 by 1 until n <= 1\n            if function rem(n 2) = 0 then\n              compute n = n \/ 2\n            else \n              compute n = n - 1\n            end-if\n          end-perform.\n        .\n       END PROGRAM STEPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22462,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n            PERFORM VARYING RESULT FROM 0 BY 1 UNTIL N = 1,\n              IF FUNCTION MOD(N, 2) = 1 \n                  THEN SUBTRACT 1 FROM N GIVING N,\n                  ELSE DIVIDE N BY 2 GIVING N .\n       END PROGRAM STEPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22463,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Perform varying result from 0 by 1 until n = 1,\n            if function rem(n, 2) = 1 then compute n = n - 1,\n                else compute n = n \/ 2.\n      \n          Goback.\n      \n       END PROGRAM STEPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22464,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n         SET RESULT TO 0\n         PERFORM UNTIL N = 1\n           COMPUTE RESULT = RESULT + FUNCTION MOD(N, 2) + 1\n           DIVIDE 2 INTO N\n         END-PERFORM.\n       END PROGRAM STEPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22465,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM VARYING RESULT FROM 0 BY 1 UNTIL N = 1\n               IF  FUNCTION REM(N, 2) = 0\n                   COMPUTE N = N \/ 2\n               ELSE\n                   COMPUTE N = N - 1\n               END-IF\n           END-PERFORM.\n       END PROGRAM STEPS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22466,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. STEPS.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       LINKAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           compute result = 0\n           perform until n <= 1\n               add function mod(n, 2) 1 to result\n               divide 2 into n\n           end-perform.\n       END PROGRAM STEPS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22467,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       STEPS SECTION.\n        initialize result\n            perform until n <= 1\n              if function rem(n 2) = 0 then\n                compute n = n \/ 2\n              else \n                compute n = n - 1\n              end-if\n              compute result = result + 1\n            end-perform.\n       END PROGRAM KATA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22468,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       STEPS SECTION\n          PERFORM VARYING RESULT FROM 0 BY 1 UNTIL N = 1,\n              IF FUNCTION MOD(N, 2) = 1 \n                  THEN SUBTRACT 1 FROM N GIVING N,\n                  ELSE DIVIDE N BY 2 GIVING N\n              END-PERFORM.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5cd5ba1ce4471a00256930c0":[{"id":22469,"user_id":421,"body":"       identification division.\n       program-id. solution.\n       author. \"ejini\u6218\u795e\".\n       data division.\n      \n       linkage section.\n       01  n               pic 9(10).\n       01  d               pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9 occurs 0 to 10 times \n                                 depending on res-length\n                                 indexed by i.\n      \n       procedure division using n d result.\n           if d <= 0 then\n               move 0 to res-length\n               goback\n           end-if\n           move function min(d, function log10(n) + 1) to res-length       \n           perform varying i from res-length by -1 until i = 0\n               move function rem(n, 10) to res(i)\n               divide n by 10 giving n               \n           end-perform.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22470,"user_id":null,"body":"       identification division.\n       program-id. solution.\n       environment division.\n       configuration section.\n       repository. function all intrinsic.\n      \n       data division.\n      \n       linkage section.\n       01  n               pic 9(10).\n       01  d               pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-tab.\n               10 res      pic 9 occurs 0 to 10 times \n                                 depending on res-length.\n      \n       procedure division using n d result.\n          compute res-length = min(max(0, d), log10(n) + 1)\n          move n(11 - res-length : ) to res-tab\n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22471,"user_id":null,"body":"       identification division.\n       program-id. solution.\n       data division.\n       local-storage section.\n       77 leading-zeros   usage is index value 0.\n       77 from-pos        usage is index.\n      \n       linkage section.\n       01  n               pic 9(10).\n       01  d               pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res-tab.\n               10 res      pic 9 occurs 0 to 10 times \n                                 depending on res-length.\n      \n       procedure division using n d result.\n          initialize result\n          if d > 0 then\n             inspect n tallying leading-zeros for leading zero\n             compute leading-zeros = function min(9, leading-zeros)\n             set from-pos to function max(11 - d, leading-zeros + 1)\n             compute res-length = 11 - from-pos\n             move n(from-pos:) to res-tab\n          end-if\n          goback.\n       end program solution.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22472,"user_id":null,"body":"       identification division.\n       program-id. solution.\n       environment division.\n       configuration section.\n       repository.\n           function all intrinsic.\n       data division.\n       working-storage section.\n       01  start-pos       pic 9(2).\n       01  max-size        pic 9(2).\n       01  edt-number      pic z(9)9.\n      \n       linkage section.\n       01  num             pic 9(10).\n       01  digits          pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9 occurs 0 to 10 times \n                                 depending on res-length.\n      \n       procedure division using num, digits, result.\n          initialize result\n          if digits <= 0\n            goback\n          end-if\n      \n          move num to edt-number\n          move length(trim(edt-number)) to max-size\n          if digits > max-size\n             move max-size to digits\n          end-if\n           \n          move digits to res-length\n          compute start-pos = 10 - digits + 1\n          move num(start-pos:digits) to result(3:)\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22473,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. solution.\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       REPOSITORY. FUNCTION ALL INTRINSIC.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N               PIC  9(10).\n       01  D               PIC S9(02).\n       01  RESULT.\n           05 RES-LEN      PIC  9(02).\n           05 RES          PIC  X(10).\n\n       PROCEDURE DIVISION USING N D RESULT.\n           MOVE MIN(LOG10(N) + 1, MAX(0, D))  TO D RES-LEN\n           MOVE N(11 - D:)                    TO RES.\n       END PROGRAM solution.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22474,"user_id":168,"body":"       identification division.\n       program-id. solution.\n       data division.\n       local-storage section.\n       01  i  usage index.\n      \n       linkage section.\n       01  n               pic 9(10).\n       01  d               pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9 occurs 0 to 10 times \n                                 depending on res-length.\n      \n       procedure division using n d result.\n          if d <= 0\n              move 0 to res-length\n              goback\n          end-if\n          if n = 0\n              move 9 to i\n          else\n              inspect n tallying i for leading '0'\n          end-if\n          compute res-length = function min(d, 10 - i)\n          move n(11 - res-length:res-length) to result(3:)\n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22475,"user_id":53,"body":"       identification division.\n       program-id. solution.\n       data division.\n       local-storage section.\n       01  t               pic 9.\n       01  m               pic 9(10).\n       01  i               pic s9(2).\n       linkage section.\n       01  n               pic 9(10).\n       01  d               pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9 occurs 0 to 10 times \n                                 depending on res-length\n                                 indexed by a b c.\n       procedure division using n d result.\n          move 0 to c res-length\n          move d to i\n          move n to m\n          if n = 0 and d > 0 then\n            move 1 to res-length\n            move 0 to res(1)\n            goback\n          end-if\n          perform until i <= 0 or (m = 0 and n <> 0)\n            add 1 to c\n            compute res(c) = function mod (m, 10)\n            move c to res-length\n            divide 10 into m\n            subtract 1 from i\n          end-perform\n          move 0 to a\n          subtract 1 from c giving b\n          perform until a >= b\n            move res(a + 1) to t\n            move res(b + 1) to res(a + 1)\n            move t to res(b + 1)\n            add 1 to a\n            subtract 1 from b\n          end-perform\n          goback.\n       end program solution.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22476,"user_id":50,"body":"       identification division.\n       program-id. solution.\n       data division.\n       local-storage section.\n       01  t               pic z(9)9.\n      \n       linkage section.\n       01  n               pic 9(10).\n       01  d               pic s9(2).\n       01  result.\n           05 res-length   pic 9(2).\n           05 res          pic 9 occurs 0 to 10 times \n                                 depending on res-length.\n      \n       procedure division using n d result.\n      \n          if d < 1 move 0 to res-length goback end-if\n          if n = 0 move 1 to res-length goback end-if\n          move n to t\n          move function min(d, function integer(function log10(n) + 1))\n               to res-length\n          move function trim(t(11 - d:)) to result(3:)\n      \n          goback.\n       end program solution.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ce399e0047a45001c853c2b":[{"id":22477,"user_id":50,"body":"       identification division.\n       program-id. PartsSums.\n       data division.\n       local-storage section.\n       01  n                 pic 9(10).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(5).\n           05 xs             pic 9(8) occurs 0 to 60000 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 60001 times \n                             depending on res-length indexed i.\n      \n       procedure division using arr result.\n      \n          compute res-length = arr-length + 1\n          move 0 to res(res-length), n\n          perform varying i from arr-length by -1 until i = 0\n            add xs(i) to n\n            move n to res(i)\n          end-perform\n          \n          goback.\n       end program PartsSums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22478,"user_id":421,"body":"       identification division.\n       program-id. PartsSums.\n       author. \"ejini\u6218\u795e\".\n       data division.       \n       working-storage section.\n       01  total             pic 9(20).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(5).\n           05 xs             pic 9(8) occurs 0 to 60000 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 60001 times \n                                       depending on res-length.\n      \n       procedure division using arr result.\n           initialize total\n           compute res-length = arr-length + 1\n           perform varying i from 1 by 1 until i > arr-length\n               add xs(i) to total\n           end-perform\n           move total to res(1)\n           perform varying i from 2 by 1 until i > res-length\n               subtract xs(i - 1) from total\n               move total to res(i)\n           end-perform.\n       end program PartsSums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22479,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. PartsSums.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 A-LEN    PIC 9(05).\n           05 XS       PIC 9(08) OCCURS 60000 DEPENDING A-LEN INDEXED I.\n       01  RESULT.\n           05 R-LEN    PIC 9(05).\n           05 RES      PIC 9(10) OCCURS 60001 DEPENDING R-LEN.\n\n       PROCEDURE DIVISION USING ARR RESULT.\n           PERFORM VARYING I FROM 1 UNTIL I > A-LEN \n               ADD XS(I)  TO RES(1)\n           END-PERFORM\n\n           ADD A-LEN 1  TO R-LEN\n\n           PERFORM VARYING I FROM 1 UNTIL I > A-LEN\n               COMPUTE RES(I + 1) = RES(I) - XS(I)\n           END-PERFORM.\n       END PROGRAM PartsSums.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22480,"user_id":null,"body":"       identification division.\n       program-id. PartsSums.\n       data division.\n       working-storage section.\n       77  i                 pic 9(5).\n       77  tot               pic 9(10).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(5).\n           05 xs             pic 9(8) occurs 0 to 60000 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 60001 times \n                                       depending on res-length.\n      \n       procedure division using arr result.\n          initialize result.\n          compute res-length = arr-length + 1\n\n          perform varying i from 1 by 1 until i > arr-length\n            add xs(i) to tot\n          end-perform\n\n          perform varying i from 1 by 1 until i > arr-length\n             move tot to res(i)\n             subtract xs(i) from tot\n          end-perform\n            \n          goback.\n       end program PartsSums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22481,"user_id":null,"body":"       identification division.\n       program-id. PartsSums.\n       data division.\n       \n       working-storage section.\n       01  arr-idx           pic 9(5).\n       01  res-idx           pic 9(5).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(5).\n           05 xs             pic 9(8) occurs 0 to 60000 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 60001 times \n                                       depending on res-length.\n      \n       procedure division using arr result.\n      \n      * Your code here\n       compute res-length = arr-length + 1.\n      \n      * Skip the entry for the empty list.\n       compute res-idx = res-length - 1.\n      \n      * Kind of a dynamic programming solution.\n       perform varying arr-idx from arr-length by -1\n         until arr-idx < 1\n          compute res(res-idx) = res(res-idx + 1) + xs(arr-idx)\n          subtract 1 from res-idx\n       end-perform.\n      \n          goback.\n       end program PartsSums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22482,"user_id":168,"body":"       identification division.\n       program-id. PartsSums.\n       data division.\n       working-storage section.\n       01  s                 pic 9(16).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(5).\n           05 xs             pic 9(8) occurs 0 to 60000 times \n                                      depending on arr-length indexed i.\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 60001 times \n                                       depending on res-length.\n      \n       procedure division using arr result.\n          move 0 to s\n          perform varying i from 1 until i > arr-length\n              add xs(i) to s\n          end-perform\n          move 1 to res-length\n          move s to res(1)\n          perform varying i from 1 until i > arr-length\n              add 1 to res-length\n              subtract xs(i) from s\n              move s to res(res-length)\n          end-perform\n          goback.\n       end program PartsSums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22483,"user_id":53,"body":"       identification division.\n       program-id. PartsSums.\n       data division.\n       local-storage section.\n       01  x                 pic 9(10).\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(5).\n           05 xs             pic 9(8) occurs 0 to 60000 times \n                                      depending on arr-length.\n       01  result.\n           05 res-length     pic 9(5).\n           05 res            pic 9(10) occurs 1 to 60001 times \n                             depending on res-length \n                             indexed by i.\n       procedure division using arr result.\n          add 1 to arr-length giving res-length\n          move 0 to res(res-length), x\n          perform varying i from arr-length by -1 until i = 0\n            add xs(i) to x\n            move x to res(i)\n          end-perform\n          goback.\n       end program PartsSums.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ce9c1000bab0b001134f5af":[{"id":22484,"user_id":168,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n           compute result = (month + 2) \/ 3.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22485,"user_id":421,"body":"       identification division.\n       program-id. quarterYear.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n           COMPUTE result ROUNDED MODE TOWARD-GREATER = \n                   month \/ 3.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22486,"user_id":null,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n      * your code here\n           evaluate month\n              when 1 thru 3\n                 move 1 to result\n              when 4 thru 6\n                 move 2 to result\n              when 7 thru 9\n                 move 3 to result\n              when 10 thru 12\n                 move 4 to result\n              when other\n                 move 0 to result\n           goback.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22487,"user_id":null,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n            compute result = (month - 1)\/3 + 1.\n           goback.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22488,"user_id":null,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n       EVALUATE month\n            WHEN 0 THRU 3\n                MOVE 1 TO result\n            WHEN 4 THRU 6\n                MOVE 2 TO result\n            WHEN 7 THRU 9\n                MOVE 3 TO result\n            WHEN OTHER\n                MOVE 4 TO result\n           goback.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22489,"user_id":null,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n           evaluate month\n              when >= 10\n                 move 4 to result\n              when >= 7\n                 move 3 to result\n             when >= 4\n                 move 2 to result\n              when < 4\n                 move 1 to result\n           end-evaluate.\n           goback.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22490,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. quarterYear.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  MONTH     PIC 9(2).\n       01  RESULT    PIC 9.\n       PROCEDURE DIVISION USING MONTH RESULT.\n           COMPUTE RESULT ROUNDED MODE TOWARD-GREATER = MONTH \/ 3.\n       END PROGRAM quarterYear.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22491,"user_id":null,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n           divide month by 3 giving result rounded mode toward-greater\n           goback.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22492,"user_id":50,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n           \n           divide month by 3 giving result remainder month\n           add function min(1, month) to result\n      \n           goback.\n       end program quarterYear.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22493,"user_id":53,"body":"       identification division.\n       program-id. quarterYear.     \n       data division.\n       linkage section.\n       01  month     pic 9(2).      \n       01  result    pic 9.\n       procedure division using month result.\n           compute result = (month - 1) \/ 3 + 1\n           goback.\n       end program quarterYear.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5d10d53a4b67bb00211ca8af":[{"id":22494,"user_id":null,"body":"       identification division.\n       program-id. waterbombs.\n      \n       data division.\n       local-storage section.\n       77 act-fire-len       usage is index value 0.\n      \n       linkage section.\n       01  fire.\n           03 fire-length     pic 9(2).\n           03 strng.\n               05 item pic x occurs 1 to 20 times \n                             depending on fire-length\n                             indexed by i.\n       01  w                  pic 9(2).\n       01  result             pic 9(2).\n\n       procedure division using fire w result.\n           set result to 0\n           perform varying i from 1 until i > fire-length\n              if item(i) = 'x' then\n                 set act-fire-len up by 1\n              end-if\n              if item(i) not = 'x' or i = fire-length then\n                 compute result = result + (act-fire-len + w - 1) \/ w\n                 set act-fire-len to 0\n              end-if              \n           end-perform\n           goback.\n       end program waterbombs.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22495,"user_id":53,"body":"       identification division.\n       program-id. waterbombs.\n       data division.\n       local-storage section.\n       01  m                  pic 9(2) value 0.\n       01  sz                 pic 9(2) value 0.\n       linkage section.\n       01  fire.\n           03 fire-length     pic 9(2).\n           03 strng.\n               05 s    pic x  occurs 1 to 20 times \n                              depending on fire-length\n                              indexed by i.\n       01  w                  pic 9(2).\n       01  result             pic 9(2).\n       procedure division using fire w result.\n          initialize result\n          perform varying i from 1 until i > fire-length\n            evaluate s(i)\n              when 'x'\n                add 1 to sz\n                compute m = m + sz \/ w\n                compute sz = function rem(sz, w)\n              when 'Y'\n                if sz > 0 then add 1 to m end-if\n                set sz to 0\n            end-evaluate\n          end-perform\n          if sz > 0 then add 1 to m end-if\n          move m to result\n          goback.\n       end program waterbombs.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22496,"user_id":50,"body":"       identification division.\n       program-id. waterbombs.\n       data division.\n       local-storage section.\n       01  c                  pic 9(2).\n       01  r                  pic 99.\n      \n       linkage section.\n       01  fire.\n           03 fire-length     pic 9(2).\n           03 chars.\n               05 xy pic x occurs 1 to 20 times \n                           depending on fire-length\n                           indexed i.\n       01  w                  pic 9(2).\n       01  result             pic 9(2).\n\n       procedure division using fire w result.\n          \n          move 0 to c, result\n          perform varying i from 1 until i > fire-length\n              if xy(i) = 'Y'\n                divide c by w giving c remainder r\n                add c to result\n                if r <> 0 add 1 to result end-if\n                move 0 to c\n              else\n                add 1 to c\n              end-if\n          end-perform\n      \n          if c <> 0\n              divide c by w giving c remainder r\n              add c to result\n              if r <> 0 add 1 to result end-if\n          end-if\n \n          goback.\n       end program waterbombs.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5d16af632cf48200254a6244":[{"id":22497,"user_id":168,"body":"       identification division.\n       program-id. strongest-even.\n      \n       data division.\n       working-storage section.\n       01 k           pic 9(20).\n       01 t           pic 9(20).\n       01 r           pic 9.\n       linkage section.\n       01 n           pic 9(20).\n       01 m           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n m result.\n          compute t = m\n          compute k = 1\n          perform forever\n              divide t by 2 giving t remainder r\n              if r = 1\n                  if m - k < n then\n                      compute result = m\n                      goback\n                  end-if\n                  subtract k from m\n              end-if\n              multiply 2 by k\n          end-perform.\n       end program strongest-even.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22498,"user_id":53,"body":"       identification division.\n       program-id. strongest-even.\n      \n       data division.\n       local-storage section.\n       01 s           pic 9(20).\n       linkage section.\n       01 n           pic 9(20).\n       01 m           pic 9(20).\n       01 k           pic 9(20).\n       procedure division using n m k.\n          move n to k\n          move 1 to s\n          perform until k + s > m\n            if function rem (k + s, s * 2) = 0 then\n              add s to k\n            end-if\n            compute s = s * 2\n          end-perform\n          goback.\n       end program strongest-even.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22499,"user_id":50,"body":"       identification division.\n       program-id. strongest-even.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(20) value 1.\n       01 k           pic 9(20).\n      \n       linkage section.\n       01 n           pic 9(20).\n       01 m           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using n m result.\n      \n          perform until n + i > m\n              compute k = 2 * i\n              if function rem(n + i, k) = 0 then add i to n end-if\n              move k to i\n          end-perform\n          \n          move n to result\n\n          goback.\n       end program strongest-even.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5d49c93d089c6e000ff8428c":[{"id":22500,"user_id":50,"body":"       identification division.\n       program-id. Save.\n       data division.\n       local-storage section.\n       01  n               pic 9(3).\n      \n       linkage section.\n       01  sizesArr.\n           05 l             pic 9(2).\n           05 sze           pic 9(3) occurs 0 to 50 times \n                            depending on l indexed by i.\n       01  hd               pic 9(3).\n       01  result           pic 9(2).\n      \n       procedure division using sizesArr hd result.\n      \n          perform test after varying i from 1 until n > hd or i > l\n            add sze(i) to n\n          end-perform\n          compute result = i - 1\n      \n          goback.\n       end program Save.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22501,"user_id":null,"body":"       identification division.\n       program-id. Save.\n       data division.\n       local-storage section.\n       77 summ              pic 9(3) value 0.\n      \n       linkage section.\n       01  sizesArr.\n           05 arrLength     pic 9(2).\n           05 sze           pic 9(3) occurs 0 to 50 times \n                                     depending on arrLength \n                                     indexed by i.\n       01  hd               pic 9(3).\n       01  result           pic 9(2).\n      \n       procedure division using sizesArr hd result.\n          perform test after varying i from 1 until i > arrLength \n                                                 or summ > hd\n             add sze(i) to summ\n          end-perform\n          compute result = i - 1\n          goback.\n       end program Save.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22502,"user_id":null,"body":"       identification division.\n       program-id. Save.\n       data division.\n       local-storage section.\n       77 summ              pic s9(9) comp-5.\n      \n       linkage section.\n       01  sizesArr.\n           05 arrLength     pic 9(2).\n           05 sze           pic 9(3) occurs 0 to 50 times \n                                     depending on arrLength\n                                     indexed by i.\n       01  hd               pic 9(3).\n       01  result           pic 9(2).\n      \n       procedure division using sizesArr hd result.\n          set result to arrLength\n          set summ to 0\n          perform varying i from 1 until i > arrLength or summ >= hd\n             compute summ = summ + sze(i)\n             if summ = hd then set     result to i    end-if\n             if summ > hd then compute result = i - 1 end-if\n          end-perform\n          goback.\n       end program Save.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5d5a7525207a674b71aa25b5":[{"id":22503,"user_id":421,"body":"       identification division.\n       program-id. OddRow.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       local-storage section.\n       01  a                 pic 9(16).\n       linkage section.\n       01  n                 pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(16) occurs 0 to 200000 times \n                             depending on res-length.\n      \n       procedure division using n result.\n           move 0 to res-length\n           compute a = n * (n - 1) + 1\n           perform until res-length = n\n               add 1 to res-length\n               move a to res(res-length)\n               add 2 to a\n          end-perform.\n       end program OddRow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22504,"user_id":50,"body":"       identification division.\n       program-id. OddRow.\n       data division.\n       local-storage section.\n       01  r pic 9(16).\n      \n       linkage section.\n       01  n pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(16) occurs 0 to 200000 times \n                             depending on res-length indexed i.\n      \n       procedure division using n result.\n      \n          initialize result\n          compute r = n  * (n - 1) + 1\n          move n to res-length\n          perform varying i from 1 until i > n\n            move r to res(i)\n            add 2 to r\n          end-perform\n      \n          goback.\n       end program OddRow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22505,"user_id":null,"body":"       identification division.\n       program-id. OddRow.\n       data division.\n\n       linkage section.\n       01  n pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(16) occurs 0 to 200000 times \n                             depending on res-length\n                             indexed by i.\n      \n       procedure division using n result.\n         move n to res-length\n         perform varying i from 1 until i > res-length\n           compute res(i) = i * 2 + n * (n - 1) - 1\n         end-perform.\n       end program OddRow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22506,"user_id":168,"body":"       identification division.\n       program-id. OddRow.\n       data division.\n       working-storage section.\n       01  m pic 9(16).\n\n       linkage section.\n       01  n pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(16) occurs 0 to 200000 times \n                             depending on res-length indexed i.\n      \n       procedure division using n result.\n          move n to res-length\n          compute m = n * (n - 1) + 1\n          perform varying i from 1 until i > n\n              compute res(i) = m + 2 * (i - 1)\n          end-perform\n          goback.\n       end program OddRow.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22507,"user_id":53,"body":"       identification division.\n       program-id. OddRow.\n       data division.\n       local-storage section.\n       01  m pic 9(16).\n       linkage section.\n       01  n pic 9(6).\n       01  result.\n           05 res-length     pic 9(6).\n           05 res            pic 9(16) occurs 0 to 200000 times \n                             depending on res-length indexed i.\n       procedure division using n result.\n          compute m = n * (n - 1) + 1\n          move n to res-length\n          perform varying i from 1 until i > n\n            compute res(i) = m + (i - 1) * 2\n          end-perform\n          goback.\n       end program OddRow.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5d5ee4c35162d9001af7d699":[{"id":22508,"user_id":null,"body":"       identification division.\n       program-id. SumOfMinimums.\n       data division.\n       local-storage section.\n       77 i                  usage is index.\n       77 j                  usage is index.\n       77 min                pic 9(3).     \n\n       linkage section.\n       01  numbersTable.\n      *        length of the whole table\n           03  m             pic 9.\n      *        length of the rows (see below)\n           03  n              pic 9.\n           03  rows occurs 8 times depending on m.\n                  07 cell    pic 9(3) occurs 8 times.\n       01  result            pic 9(4).\n      \n       procedure division using numbersTable result.\n          initialize result\n          perform varying i from 1 until i > m\n             set min to cell(i,1)\n             perform varying j from 2 until j > n\n                set min to function min(min, cell(i,j))\n             end-perform\n             add min to result\n          end-perform\n          goback.\n       end program SumOfMinimums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22509,"user_id":168,"body":"       identification division.\n       program-id. SumOfMinimums.\n       data division.\n       working-storage section.\n       01  x      pic 9(3).\n      \n       linkage section.\n       01  numbersTable.\n      *        length of the whole table\n           03  m             pic 9.\n      *        length of the rows (see below)\n           03  n              pic 9.\n           03  rows occurs 8 times depending on m.\n                  07 cell    pic 9(3) occurs 8 times indexed i j.\n       01  result            pic 9(4).\n      \n       procedure division using numbersTable result.\n          move 0 to result\n          perform varying i from 1 until i > m\n              move cell(i, 1) to x\n              perform varying j from 2 until j > n\n                  if cell(i, j) < x move cell(i, j) to x end-if\n              end-perform\n              add x to result\n          end-perform.\n       end program SumOfMinimums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22510,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SumOfMinimums.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01  MINS              PIC 9(4).\n       LINKAGE SECTION.\n       01  NUMBERSTABLE.\n           05  M             PIC 9.\n           05  N             PIC 9.\n           05  ROWS                   OCCURS 8 DEPENDING M INDEXED I.\n               10  CELL      PIC 9(3) OCCURS 8             INDEXED J.\n       01  RESULT            PIC 9(4).\n\n       PROCEDURE DIVISION USING NUMBERSTABLE RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > M\n               MOVE HIGH-VALUE  TO MINS\n               PERFORM VARYING J FROM 1 UNTIL J > N\n                   MOVE FUNCTION MIN(CELL(I, J), MINS)  TO MINS\n               END-PERFORM\n               ADD MINS  TO RESULT\n           END-PERFORM.\n       END PROGRAM SumOfMinimums.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22511,"user_id":53,"body":"       identification division.\n       program-id. SumOfMinimums.\n       data division.\n       local-storage section.\n       01  n pic 9(3).\n       linkage section.\n       01  tble.\n           03  len           pic 9.\n           03  m             pic 9.\n           03  rows occurs 1 to 8 times depending len.\n               05 cell       pic 9(3) occurs 8 times\n                                      indexed by i j.\n       01  result            pic 9(4).\n       procedure division using tble result.\n         initialize result\n         perform varying i from 1 until i > len\n           move cell(i, 1) to n\n           perform varying j from 2 until j > m\n             move function min(n, cell(i, j)) to n\n           end-perform\n           add n to result\n         end-perform\n         goback.\n       end program SumOfMinimums.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22512,"user_id":50,"body":"       identification division.\n       program-id. SumOfMinimums.\n       data division.\n       local-storage section.\n       01  n pic 9(3).\n       \n       linkage section.\n       01  tble.\n           03  len           pic 9.\n           03  m             pic 9.\n           03  rows occurs 1 to 8 times depending len.\n               05 cell       pic 9(3) occurs 8 times\n                                      indexed i j.\n       01  result            pic 9(4).\n      \n       procedure division using tble result.\n      \n         initialize result\n         perform varying i from 1 until i > len\n             move cell(i, 1) to n\n             perform varying j from 2 until j > m\n               move function min(n, cell(i, j)) to n\n             end-perform\n             display 'n ' n\n             add n to result\n         end-perform\n\n         goback.\n       end program SumOfMinimums.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5d653190d94b3b0021ec8f2b":[{"id":22513,"user_id":168,"body":"       identification division.\n       program-id. product-sum.\n       data division.\n       working-storage section.\n       01  mod constant 1000000007.\n       01  t.\n           05 t-length     pic 9(8).\n           05 ts           pic 9(12) occurs 0 to 100000 times\n                                     depending on t-length indexed i j.\n       01  p               pic 9(12).\n       01  x               pic 9(12).\n      \n       linkage section.\n       01  a.\n           05 arr-length   pic 9(8).\n           05 xs           pic 9(8) occurs 0 to 100000 times\n                                     depending on arr-length.\n       01  m               pic 99.\n       01  result          pic 9(10).\n       procedure division using a m result.\n           move arr-length to t-length\n           move xs(arr-length) to ts(arr-length)\n           perform varying i from arr-length by -1 until i = 1\n               add ts(i) to xs(i - 1) giving ts(i - 1)\n           end-perform\n           perform varying j from 2 until j > m\n               move ts(arr-length - j + 2) to p\n               move 0 to ts(arr-length - j + 2)\n               compute i = arr-length - j + 1\n               perform varying i from i by -1 until i = 0\n                   compute x = function mod(xs(i) * p + ts(i + 1), mod)\n                   move ts(i) to p\n                   move x to ts(i)\n               end-perform\n           end-perform\n           compute result = function mod(ts(1), mod)\n           goback.\n       end program product-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22514,"user_id":53,"body":"       identification division.\n       program-id. product-sum.\n       data division.\n       local-storage section.\n       01 e                pic 9(10) value 1000000007.\n       01 arr.\n          05 len           pic 99 value 21.\n          05 ns            pic 9(20) occurs 1 to 21 times\n                                     depending on len.\n       linkage section.\n       01  a.\n           05 arr-length   pic 9(8).\n           05 xs           pic 9(8) occurs 0 to 100000 times\n                                    depending on arr-length\n                                    indexed by i j.\n       01  m               pic 99.\n       01  result          pic 9(10).\n       procedure division using a m result.\n          initialize result\n          move 1 to ns(1)\n          perform varying j from 1 until j > arr-length\n            perform varying i from m by -1 until i = 0\n              compute ns(i + 1) = function rem \n                (ns(i + 1) + (xs(j) * ns(i)), e)\n            end-perform\n          end-perform\n          move ns(m + 1) to result\n          goback.\n       end program product-sum.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22515,"user_id":50,"body":"       identification division.\n       program-id. product-sum.\n       data division.\n       local-storage section.\n       01 j              pic 9(8).\n       01 x              pic 9(8).\n       01 mm             pic 9(10) value 1000000007.\n       01 truc.\n          05 len         pic 99.\n          05 s           pic 9(20) occurs 1 to 21 times\n                                   depending on len.\n      \n       linkage section.\n       01  a.\n           05 arr-length   pic 9(8).\n           05 xs           pic 9(8) occurs 3 to 100000 times \n                                     depending on arr-length\n                                     indexed by i.\n       01  m               pic 99.\n       01  result          pic 9(10).\n       procedure division using a m result.\n      \n      * Implementation of Unnamed's Python solution\n      * see https:\/\/www.codewars.com\/kata\/reviews\/5d6542bbdf74a50001d00ffe\/groups\/5d8f5cd167a9fa0001fb6a0a\n      \n           add 1 to m\n           move m to len\n           compute s(1) = 1\n\n           perform varying i from 1 until i > arr-length\n                compute x = xs(i)\n                perform varying j from m by -1 until j = 1\n                    compute s(j) = function rem(s(j) + s(j - 1) * x, mm)\n                end-perform\n           end-perform\n      \n           move s(m) to result\n      \n           goback.\n       end program product-sum.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5da1df6d8b0f6c0026e6d58d":[{"id":22516,"user_id":168,"body":"       identification division.\n       program-id. sections.\n      \n       data division.\n       working-storage section.\n       01 n           pic 9(8) usage binary.\n       01 d           pic 9(8) usage binary.\n       01 e           pic 9(8) usage binary.\n       linkage section.\n       01 k           pic 9(11).\n       01 result      pic 9(8).\n       procedure division using k result.\n          compute n = k ** 0.5\n          if n * n <> k\n              compute result = 0\n              goback\n          end-if\n          compute result = 1\n          perform varying d from 2 by 1 until d * d > n\n              perform varying e from 0 until function mod(n, d) > 0\n                  divide d into n                  \n              end-perform\n              compute result = result * (3 * e + 1)\n          end-perform\n          if n > 1\n              multiply 4 by result\n          end-if\n          goback.\n       end program sections.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22517,"user_id":50,"body":"       identification division.\n       program-id. sections.\n      \n       data division.\n       local-storage section.\n       01 n           pic 9(6).\n       01 i           pic 9(6).\n       01 e           pic 9(2).\n      \n       linkage section.\n       01 k           pic 9(11).\n       01 result      pic 9(8).\n       procedure division using k result.\n          \n          compute n = function sqrt(k)\n      \n          if n * n <> k\n              goback\n          end-if\n          \n          move 1 to result\n          \n          perform varying i from 2 until i > n\n              perform varying e from 0 until function rem(n, i) <> 0\n                  divide n by i giving n\n              end-perform\n        \n              compute result = result * (3 * e + 1)\n      \n          end-perform\n      \n          goback.\n       end program sections.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22518,"user_id":53,"body":"       identification division.\n       program-id. sections.\n      \n       data division.\n       local-storage section.\n       01 s           pic 9(6).\n       01 i           pic 9(6).\n       01 j           pic 9(2).\n      \n       linkage section.\n       01 k           pic 9(11).\n       01 r           pic 9(8).\n       procedure division using k r.\n          compute s = k ** 0.5\n          move 0 to r\n          if s ** 2 <> k goback end-if\n          move 1 to r\n          perform varying i from 2 until i > s\n              perform varying j from 0 \n                      until function rem(s, i) <> 0\n                  divide s by i giving s\n              end-perform\n              compute r = r * (3 * j + 1)\n          end-perform\n          goback.\n       end program sections.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5dae2599a8f7d90025d2f15f":[{"id":22519,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CONSECUTIVE-DUCKS.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n           INITIALIZE RESULT\n           PERFORM UNTIL N = 1\n               IF FUNCTION REM(N, 2) = 1 THEN\n                   SET RESULT TO 1\n               END-IF\n               DIVIDE 2 INTO N\n           END-PERFORM.           \n       END PROGRAM CONSECUTIVE-DUCKS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22520,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CONSECUTIVE-DUCKS.\n       DATA DIVISION.\n       working-storage section.\n       01 a    usage binary-double.\n       01 b    usage binary-double.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n          compute a = n\n          compute b = n - 1\n          call \"CBL_AND\" using a b by value 8\n          if b = 0 then move 0 to result else move 1 to result end-if\n          Goback.\n       END PROGRAM CONSECUTIVE-DUCKS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22521,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CONSECUTIVE-DUCKS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 R           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n      \n          Perform until 1 = 0,\n              evaluate true\n                when n = 1\n                    Move 0 to result,\n                    exit perform,\n                when n = 0\n                    Move 1 to result,\n                    exit perform,\n                when other\n                    Divide n by 2 giving n remainder r,\n                    If r = 1\n                      Move 1 to result,\n                      Exit perform\n                    End-if\n              end-evaluate\n          End-perform\n\n          Goback.\n       END PROGRAM CONSECUTIVE-DUCKS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22522,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CONSECUTIVE-DUCKS.\n       DATA DIVISION.\n       local-storage section.\n       77 power2      pic s9(18) comp-5.\n      \n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n          perform varying power2 from 1 by power2 until power2 >= n\n          end-perform\n          compute result = function min(power2 - n, 1)\n          Goback.\n       END PROGRAM CONSECUTIVE-DUCKS.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22523,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. CONSECUTIVE-DUCKS.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9.\n       PROCEDURE DIVISION USING N RESULT.\n          Perform until 1 = 0\n              evaluate true\n                when n = 1\n                    Move 0 to result\n                    exit perform\n                when n = 0\n                    Move 1 to result\n                    exit perform\n                when other\n                    Compute i = function rem (n, 2)\n                    Compute n = n \/ 2\n                    If i = 1\n                      Move 1 to result\n                      Exit perform\n                    End-if\n              end-evaluate\n          End-perform\n\n          Goback.\n       END PROGRAM CONSECUTIVE-DUCKS.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5dd462a573ee6d0014ce715b":[{"id":22524,"user_id":421,"body":"       identification division.\n       program-id. SameCase.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  a               pic x.\n       01  b               pic x.\n       01  result          pic s9.\n       procedure division using a b result.           \n           if (a >= 'a' and a <= 'z' or a >= 'A' and a <= 'Z') and\n              (b >= 'a' and b <= 'z' or b >= 'A' and b <= 'Z') then\n               if a >= 'a' and a <= 'z' and b >= 'a' and b <= 'z' or\n                  a >= 'A' and a <= 'Z' and b >= 'A' and b <= 'Z' then\n                   set result to 1\n               else\n                   set result to 0\n               end-if\n          else\n               set result to -1\n          end-if.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22525,"user_id":null,"body":"       identification division.\n       program-id. SameCase.\n      \n       data division.\n       linkage section.\n       01  a pic x.\n           88 a-upper VALUE 'A' THRU 'Z'.\n           88 a-lower VALUE 'a' THRU 'z'.\n           88 a-alpha VALUE 'A' THRU 'Z' 'a' THRU 'z'.\n       01  b pic x.\n           88 b-upper VALUE 'A' THRU 'Z'.\n           88 b-lower VALUE 'a' THRU 'z'.\n           88 b-alpha VALUE 'A' THRU 'Z' 'a' THRU 'z'.\n       01  result          pic s9.\n       procedure division using a b result.           \n           EVALUATE TRUE ALSO TRUE\n               WHEN a-upper ALSO b-upper\n               WHEN a-lower ALSO b-lower\n                   MOVE 1 TO result\n               WHEN a-alpha ALSO b-alpha\n                   MOVE 0 TO RESULT\n               WHEN OTHER\n                   MOVE -1 TO result\n           END-EVALUATE.\n           goback.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22526,"user_id":168,"body":"       identification division.\n       program-id. SameCase.\n       \n       environment division.\n       configuration section.\n       repository. function all intrinsic.\n      \n       data division.\n       linkage section.\n       01  a pic x.\n       01  b pic x.\n       01  result          pic s9.\n       procedure division using a b result.\n           evaluate true\n              when lower-case(a) = upper-case(a) or \n                   lower-case(b) = upper-case(b)\n                  move -1 to result\n              when lower-case(a) = a and lower-case(b) = b or\n                   upper-case(a) = a and upper-case(b) = b\n                  move 1 to result\n              when other\n                  move 0 to result\n           end-evaluate.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22527,"user_id":null,"body":"       identification division.\n       program-id. SameCase.\n      \n       data division.\n       working-storage section.\n       01 a-case pic x.\n       01 b-case pic x.\n       linkage section.\n       01  a pic x.\n       01  b pic x.\n       01  result          pic s9.\n       procedure division using a b result.           \n           if a alphabetic and a not = space and \n              b alphabetic and b not = space then\n              if a is alphabetic-lower then\n                 move 'L' to a-case\n              else\n                 move 'U' to a-case\n              end-if\n              if b is alphabetic-lower then\n                 move 'L' to b-case\n              else\n                 move 'U' to b-case\n              end-if\n              if a-case is equal to b-case then\n                 move 1 to result\n              else\n                 move 0 to result\n              end-if\n           else\n              move -1 to result\n           end-if\n           goback.\n       end program SameCase.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22528,"user_id":null,"body":"       identification division.\n       program-id. SameCase.\n      \n       data division.\n       linkage section.\n       01  a pic x.\n       01  b pic x.\n       01  result          pic s9.\n       procedure division using a b result.           \n      \n       Move 0 to result\n       IF a=SPACE OR b=SPACE OR \n       Not a IS ALPHABETIC OR Not b IS ALPHABETIC THEN\n          Move -1 to result\n       ELSE IF Function Upper-Case(a) = a AND Function Upper-Case(b) = b THEN\n          Move 1 to result\n       ELSE IF Function Lower-Case(a) = a AND Function Lower-Case(b) = b THEN\n          MOVE 1 to result\n       END-IF\n      \n           goback.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22529,"user_id":53,"body":"       identification division.\n       program-id. SameCase.\n      \n       data division.\n       local-storage section.\n       01  x pic 9 value 0.\n       01  y pic 9 value 0.\n       linkage section.\n       01  a pic x.\n       01  b pic x.\n       01  result          pic s9.\n       procedure division using a b result.           \n      \n          if function ord(a) >= function ord('A') and\n             function ord(a) <= function ord('Z') then\n            move 1 to x\n          else if function ord(a) >= function ord('a') and\n                  function ord(a) <= function ord('z') then\n            move 2 to x\n          end-if end-if\n      \n          if function ord(b) >= function ord('A') and\n             function ord(b) <= function ord('Z') then\n            move 1 to y\n          else if function ord(b) >= function ord('a') and\n                  function ord(b) <= function ord('z') then\n            move 2 to y\n          end-if end-if\n      \n          if x = 0 or y = 0 then move -1 to result, goback end-if\n          if x = y then move 1 to result, goback end-if\n          move 0 to result\n\n          goback.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22530,"user_id":null,"body":"       identification division.\n       program-id. SameCase.\n      \n       data division.\n       linkage section.\n       01  a pic x.\n       01  b pic x.\n       01  result          pic s9.\n       procedure division using a b result.           \n      \n       evaluate true\n      \n       when a is not alphabetic or b is not alphabetic\n       move -1 to result\n      \n       when a = space or b = space\n       move -1 to result\n      \n       when Function Upper-case(a) = a and Function Upper-case(b) = b \n       move 1 to result\n      \n       when Function Lower-case(a) = a and Function Lower-case(b) = b\n       move 1 to result\n      \n       when Function Upper-case(a) = a and Function Upper-case(b) <> b\n       move 0 to result\n      \n       when Function Lower-case(a) = a and Function Lower-case(b) <> b\n       move 0 to result\n           \n       when other move -1 to result\n      \n       end-evaluate\n\n           goback.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22531,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SameCase.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  A           PIC X.\n           88  A-LW             VALUE 'a' THRU 'z'.\n           88  A-UP             VALUE 'A' THRU 'Z'.\n       01  B           PIC X.\n           88  B-LW             VALUE 'a' THRU 'z'.\n           88  B-UP             VALUE 'A' THRU 'Z'.\n       01  RESULT      PIC S9.\n       PROCEDURE DIVISION USING A B RESULT.\n           EVALUATE  TRUE\n               WHEN (A-LW AND B-LW) OR (A-UP AND B-UP)  SET RESULT TO 1\n               WHEN (A-LW AND B-UP) OR (A-UP AND B-LW)  SET RESULT TO 0\n               WHEN  OTHER                              SET RESULT TO -1\n           END-EVALUATE.\n       END PROGRAM SameCase.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22532,"user_id":50,"body":"       identification division.\n       program-id. SameCase.\n      \n       data division.\n       local-storage section.\n       01 l constant 'abcdefghijklmnopqrstuvwxyz'.\n       01 u constant 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n       01 c pic 9.\n       01 d pic 9.\n       01 e pic 9.\n       01 f pic 9.\n       linkage section.\n       01  a pic x.\n       01  b pic x.\n       01  result   pic s9 sign leading.\n       procedure division using a b result.\n      \n           inspect l tallying c for all a\n           inspect l tallying d for all b\n           inspect u tallying e for all a\n           inspect u tallying f for all b\n           if c + d + e + f = 2\n              if c = d\n                 move 1 to result\n              else\n                 move 0 to result\n              end-if\n           else\n              move -1 to result\n           end-if\n\n           goback.\n       end program SameCase.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5e0607115654a900140b3ce3":[{"id":22533,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQ.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          CALL 'SEQ-REC' USING \n            BY CONTENT N \n            BY REFERENCE RESULT\n          GOBACK.\n       END PROGRAM SEQ.\n\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQ-REC.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(10).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n          IF N < 2 THEN\n            MOVE N TO RESULT\n          ELSE\n            COMPUTE I = N \/ 2\n            CALL 'SEQ-REC' USING I RESULT\n            COMPUTE RESULT = RESULT * 3\n              + FUNCTION REM (N, 2)\n          END-IF\n          GOBACK.\n       END PROGRAM SEQ-REC.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22534,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQ RECURSIVE.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 R           PIC 9.\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n           IF N = 0\n              COMPUTE RESULT = 0\n           ELSE\n              DIVIDE N BY 2 GIVING N REMAINDER R\n              CALL 'SEQ' USING N RESULT\n              COMPUTE RESULT = 3 * RESULT + R\n           END-IF.\n       END PROGRAM SEQ.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22535,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SEQ.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 L           PIC 9(32).\n       01 X           PIC 9(32).\n       01 O           PIC 9(32).\n       01 B           PIC 9(32).\n       LINKAGE SECTION.\n       01 N           PIC 9(10).\n       01 RESULT      PIC 9(20).\n       PROCEDURE DIVISION USING N RESULT.\n\n        Move 0 to l,\n        Move 0 to x,\n        Move 0 to o,\n        Move 0 to b,\n\n        Perform until n = 0,\n          Compute x = 10 * x + function rem(n,2),\n          Compute n = n \/ 2\n          if x = 0 then add 1 to l end-if\n        end-perform\n        \n        Perform until x = 0,\n          Compute o = 10 * o + function rem(x, 10),\n          Compute x = x \/ 10,\n        end-perform\n\n        Perform until o = 0,\n          Compute b = 10 * b + function rem(o, 10),\n          Compute o = o \/ 10,\n        end-perform\n\n        Compute b = b * 10 ** l,\n        Move 0 to l,\n\n        Perform until b = 0,\n          Compute o = 3 * o + function rem(b,10),\n          Compute b = b \/ 10,\n          If o = 0 then add 1 to l end-if\n        end-perform\n\n        Compute result = o * 3 ** l,\n      \n        Goback.\n       END PROGRAM SEQ.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5e0b72d2d772160011133654":[{"id":22536,"user_id":53,"body":"       identification division.\n       program-id. Solve.\n       data division.\n       linkage section.\n       01 arr.\n          03  w          pic 9(6).\n          03  g          pic 9(6).\n          03  b          pic 9(6).\n       01 result         pic 9(8).\n       procedure division using arr result.\n          move function min(w + g, g + b, w + b,\n            function abs(w + g + b) \/ 2) to result\n          goback.\n       end program Solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22537,"user_id":76,"body":"       identification division.\n       program-id. Solve.\n      \n       data division.\n\n       linkage section.\n       01 arr.\n          03  w pic 9(6).\n          03  g pic 9(6).\n          03  b pic 9(6).\n       01 result         pic 9(8).\n      \n       procedure division using arr result.\n         move function min((w + g + b) \/ 2, \n          w + g + b - function max(w, g, b))\n          to result.\n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22538,"user_id":50,"body":"       identification division.\n       program-id. Solve.\n      \n       data division.\n\n       linkage section.\n       01 arr.\n          03  a          pic 9(6).\n          03  b          pic 9(6).\n          03  c          pic 9(6).\n       01 result         pic 9(8).\n      \n       procedure division using arr result.\n      * Moving `(a + b + c) \/ 2` one line below\n      * throws `error: 'c' cannot be subscripted`\n          move function min(a + b,\n                            b + c,\n                            a + c, (a + b + c) \/ 2) to result.\n      \n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5e28ae347036fa001a504bbe":[{"id":22539,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KingIsInCheck.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       77  Y                   PIC 9(2).\n       77  X                   PIC 9(2).\n\n       01  T-BIGCHESSBOARD.\n           05  B-ROW                    OCCURS 22 INDEXED I.\n               10  B-SQUARE    PIC X    OCCURS 22 INDEXED J.\n\n       01  T-LINE.\n           05  L-LINE                   OCCURS 8.\n               10  L-SQUARE    PIC X    OCCURS 7.\n\n       LINKAGE SECTION.\n       01  CHESSBOARD.\n           05  ROW             PIC X(8) OCCURS 8.\n       01  RESULT              PIC 9.\n\n       PROCEDURE DIVISION USING CHESSBOARD RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > 8\n               MOVE ROW(I)  TO B-ROW(I + 7)(8:15)\n           END-PERFORM\n\n           PERFORM VARYING I FROM 1 UNTIL I > 22\n                   AFTER   J FROM 1 UNTIL J > 22\n               IF  B-SQUARE(I, J) = 'K'\n                   MOVE I  TO Y\n                   MOVE J  TO X\n               END-IF\n           END-PERFORM\n\n           IF  'P' = (B-SQUARE(Y - 1, X - 1) OR B-SQUARE(Y - 1, X + 1))\n           OR  'N' = (B-SQUARE(Y - 2, X - 1) OR B-SQUARE(Y - 2, X + 1)\n           OR  B-SQUARE(Y + 2, X - 1) OR B-SQUARE(Y + 2, X + 1)\n           OR  B-SQUARE(Y + 1, X - 2) OR B-SQUARE(Y - 1, X - 2)\n           OR  B-SQUARE(Y + 1, X + 2) OR B-SQUARE(Y - 1, X + 2))\n               MOVE 1  TO RESULT\n               GOBACK\n           END-IF\n\n           PERFORM VARYING I FROM 1 UNTIL I > 7\n               MOVE B-SQUARE(Y - I, X - I)  TO L-SQUARE(1, I)  *> NW\n               MOVE B-SQUARE(Y - I, X + I)  TO L-SQUARE(2, I)  *> NE\n               MOVE B-SQUARE(Y + I, X - I)  TO L-SQUARE(3, I)  *> SW\n               MOVE B-SQUARE(Y + I, X + I)  TO L-SQUARE(4, I)  *> SE\n               MOVE B-SQUARE(Y - I, X)      TO L-SQUARE(5, I)  *> N\n               MOVE B-SQUARE(Y + I, X)      TO L-SQUARE(6, I)  *> S\n               MOVE B-SQUARE(Y, X + I)      TO L-SQUARE(7, I)  *> E\n               MOVE B-SQUARE(Y, X - I)      TO L-SQUARE(8, I)  *> W\n           END-PERFORM\n\n           PERFORM VARYING I FROM 1 UNTIL I > 8\n               IF  FUNCTION TRIM(L-LINE(I))(1:1) = 'Q'\n               OR (FUNCTION TRIM(L-LINE(I))(1:1) = 'B' AND I < 5)\n               OR (FUNCTION TRIM(L-LINE(I))(1:1) = 'R' AND I > 4)\n                   MOVE 1  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM KingIsInCheck.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22540,"user_id":50,"body":"       identification division.\n       program-id. KingIsInCheck.\n      \n       data division.\n       local-storage section.\n       01  x       usage index.\n       01  y       usage index.\n       01  a       usage index.\n       01  b       usage index.\n      \n       linkage section.\n       01  chessboard.\n           05  row occurs 8 times.\n               07  square pic a occurs 8 times indexed i j k.\n                   88 king   value 'K'.\n                   88 bishop value 'B' or 'Q'.\n                   88 knight value 'N'.\n                   88 rook   value 'R' or 'Q'.\n                   88 pawn   value 'P' or 'Q'.\n                   88 s      value space.\n       01  result         pic 9.\n      \n       procedure division using chessboard result.\n      \n          move 1 to result\n          perform varying i from 1 until x > 0\n                  after   j from 1 until j = 9\n            if king(i, j)\n               move i to y\n               move j to x\n               exit perform\n            end-if\n          end-perform\n      \n          if (1 < x and y and pawn(y - 1, x - 1))\n          or (1 < y and x < 8 and pawn(y - 1, x + 1))\n             goback\n          end-if\n      \n          perform varying k from 1 until k = 8\n              if 1 > x - k or y - k exit perform end-if\n              if bishop(y - k, x - k) goback end-if\n              if not s(y - k, x - k) exit perform end-if\n          end-perform\n      \n          perform varying k from 1 until k = 8\n              if 1 > y - k or 8 < x + k exit perform end-if\n              if bishop(y - k, x + k) goback end-if\n              if not s(y - k, x + k) exit perform end-if\n          end-perform\n      \n          perform varying k from 1 until k = 8\n              if 8 < x + k or y + k exit perform end-if\n              if bishop(y + k, x + k) goback end-if\n              if not s(y + k, x + k) exit perform end-if\n          end-perform\n      \n          perform varying k from 1 until k = 8\n              if 1 > x - k or 8 < y + k exit perform end-if\n              if bishop(y + k, x - k) goback end-if\n              if not s(y + k, x - k) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(x - 1) by -1 until i = 0\n              if rook(y, i) goback end-if\n              if not s(y, i) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(x + 1) until i = 9\n              if rook(y, i) goback end-if\n              if not s(y, i) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(y - 1) by -1 until i = 0\n              if rook(i, x) goback end-if\n              if not s(i, x) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(y + 1) until i = 9\n              if rook(i, x) goback end-if\n              if not s(i, x) exit perform end-if\n          end-perform\n      \n          perform varying a from -2 until a = 3\n                  after   b from -2 until b = 3\n            if function abs(a) + function abs(b) = 3\n            and 0 < x + a and y + b\n            and 9 > x + a and y + b\n            and knight(y + b, x + a) goback end-if\n          end-perform\n          initialize result.\n      \n       end program KingIsInCheck.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22541,"user_id":50,"body":"       identification division.\n       program-id. KingIsInCheck.\n      \n       data division.\n       local-storage section.\n       01  x       usage index.\n       01  y       usage index.\n       01  a       usage index.\n       01  b       usage index.\n      \n       linkage section.\n       01  chessboard.\n           05  row occurs 8 times.\n               07  square pic a occurs 8 times indexed i j k.\n                   88 king   value 'K'.\n                   88 bishop value 'B' or 'Q'.\n                   88 knight value 'N'.\n                   88 rook   value 'R' or 'Q'.\n                   88 pawn   value 'P' or 'Q'.\n                   88 s      value space.\n       01  result         pic 9.\n      \n       procedure division using chessboard result.\n      \n          move 1 to result\n          perform varying i from 1 until x > 0\n                  after   j from 1 until j = 9\n            if king(i, j)\n               move i to y\n               move j to x\n               exit perform\n            end-if\n          end-perform\n      \n          if (1 < x and y and pawn(y - 1, x - 1))\n          or (1 < y and x < 8 and pawn(y - 1, x + 1))\n             goback\n          end-if\n      \n          perform varying k from 1 until k = 8\n              if 1 > x - k or y - k exit perform end-if\n              if bishop(y - k, x - k) goback end-if\n              if not s(y - k, x - k) exit perform end-if\n          end-perform\n      \n          perform varying k from 1 until k = 8\n              if 1 > y - k or 8 < x + k exit perform end-if\n              if bishop(y - k, x + k) goback end-if\n              if not s(y - k, x + k) exit perform end-if\n          end-perform\n      \n          perform varying k from 1 until k = 8\n              if 8 < x + k or y + k exit perform end-if\n              if bishop(y + k, x + k) goback end-if\n              if not s(y + k, x + k) exit perform end-if\n          end-perform\n      \n          perform varying k from 1 until k = 8\n              if 1 > x - k or 8 < y + k exit perform end-if\n              if bishop(y + k, x - k) goback end-if\n              if not s(y + k, x - k) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(x - 1) by -1 until i = 0\n              if rook(y, i) goback end-if\n              if not s(y, i) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(x + 1) until i = 9\n              if rook(y, i) goback end-if\n              if not s(y, i) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(y - 1) by -1 until i = 0\n              if rook(i, x) goback end-if\n              if not s(i, x) exit perform end-if\n          end-perform\n      \n          perform varying i from function abs(y + 1) until i = 9\n              if rook(i, x) goback end-if\n              if not s(i, x) exit perform end-if\n          end-perform\n      \n          perform varying a from -2 until a = 3\n                  after   b from -2 until b = 3\n            if function abs(a) + function abs(b) = 3\n            and 0 < x + a and y + b\n            and 9 > x + a and y + b\n            and knight(y + b, x + a) goback end-if\n          end-perform\n          initialize result.\n      \n       end program KingIsInCheck.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5e4bb05b698ef0001e3344bc":[{"id":22542,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  c               pic s9(38) sign leading.\n       01  d               pic s9(38) sign leading.\n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(9) occurs 4 to 70 times \n                                    depending on arr-length\n                                    indexed by i.\n       01  result.\n           05 A            pic s9(38) sign leading.\n           05 B            pic s9(38) sign leading.\n       procedure division using arr result.\n          initialize result\n          move xs(1) to A\n          move xs(2) to B\n          perform varying i from 3 by 2 until i > arr-length\n            compute c = A * xs(i) + B * xs(i + 1)\n            compute d = function abs(B * xs(i) - A * xs(i + 1))\n            move c to A\n            move d to B\n          end-perform\n          goback.\n       end program solve.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22543,"user_id":168,"body":"       identification division.\n       program-id. solve.\n       data division.\n       working-storage section.\n       01  x               pic s9(38).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(9) occurs 4 to 70 times \n                                    depending on arr-length indexed i.\n       01  result.\n           05 A            pic s9(38) sign leading.\n           05 B            pic s9(38) sign leading.\n      \n       procedure division using arr result.\n           move 1 to a\n           move 0 to b\n           perform varying i from 1 by 2 until i > arr-length\n               compute x = a * xs(i) - b * xs(i + 1)\n               compute b = a * xs(i + 1) + b * xs(i)\n               move x to a\n           end-perform\n           move function abs(a) to a\n           move function abs(b) to b\n           goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22544,"user_id":50,"body":"       identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01  c              pic s9(38).\n       01  d              pic s9(38).\n       01  na             pic s9(38).\n       01  nb             pic s9(38).\n      \n       linkage section.\n       01  arr.\n           05 arr-length   pic 9(2).\n           05 xs           pic 9(9) occurs 4 to 70 times \n                                     depending on arr-length\n                                     indexed by i, j.\n       01  result.\n           05 A      pic s9(38) sign leading.\n           05 B      pic s9(38) sign leading.\n      \n       procedure division using arr result.\n      * Implementation of yigoli's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5e4d013977d51a0001b702a6\/groups\/61b469aea9533b000158b6b1\n           move xs(1) to a\n           move xs(2) to b\n           perform varying i from 3 by 2 until i > arr-length\n                compute j = i + 1\n                move xs(i) to c\n                move xs(j) to d\n                compute na = a * c - b * d\n                compute nb = a * d + b * c\n                move na to a\n                move nb to b\n          end-perform\n          compute a = function abs(a)\n          compute b = function abs(b)\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5e60cc55d8e2eb000fe57a1c":[{"id":22545,"user_id":null,"body":"       identification division.\n       program-id. nBonacciRatio.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(4)v9(15).\n      \n       procedure division using n result.\n         compute result = n \/ 2 + function sqrt(n ** 2 \/ 4 + 1).\n       end program nBonacciRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22546,"user_id":527,"body":"       identification division.\n       program-id. nBonacciRatio.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(4)v9(15).\n      \n       procedure division using n result.\n       compute result = (n + (n**2 + 4)**0.5) \/ 2.\n       end program nBonacciRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22547,"user_id":168,"body":"       identification division.\n       program-id. nBonacciRatio.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(4)v9(15).\n      \n       procedure division using n result.\n           compute result = function abs((n + (n * n + 4) ** 0.5) \/ 2).\n       end program nBonacciRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22548,"user_id":53,"body":"       identification division.\n       program-id. nBonacciRatio.\n       data division.\n       linkage section.\n       01  n                 pic 9(4).\n       01  r                 pic 9(4)v9(15).\n       procedure division using n r.\n          compute r = function abs ((n + function sqrt(n * n + 4)) \/ 2)\n          goback.\n       end program nBonacciRatio.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22549,"user_id":50,"body":"       identification division.\n       program-id. nBonacciRatio.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(4).\n       01  result            pic 9(4)v9(15).\n      \n       procedure division using n result.\n      \n          compute result = (n + function sqrt(n ** 2 + 4)) \/ 2\n      \n           goback.\n       end program nBonacciRatio.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5e74588a25ba6800325e9233":[{"id":22550,"user_id":50,"body":"      * Implementation of Monadius' Javascript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5e745c82ea7c9d000117e627\/groups\/5f1a189bf9aef90001b80614\n       identification division.\n       program-id. LargestRectangleInGrid.\n      \n       data division.\n       \n       linkage section.\n       01  matrix.\n           03  m         pic 9(2).\n           03  n         pic 9(2).\n           03  filler    occurs 4 to 12 depending m.\n               05 filler pic 9 occurs 12\n                  indexed i j h hMax w.\n                  88  o  value 0.\n       01  r             pic 9(3).\n      \n       procedure division using matrix r.\n      \n          initialize r\n          perform varying i from 0 until i = m\n                  after   j from 0 until j = n\n              compute hMax = m - i\n            perform varying w from 0\n            until function abs(j + w) >= n\n                  or  o(i + 1, j + w + 1)\n              perform varying h from 0 until h > hMax\n                if h = hMax or o(i + h + 1, j + w + 1)\n                  move h to hMax\n                  move function max((w + 1) * h, r) to r\n                  exit perform\n                end-if\n              end-perform\n            end-perform\n          end-perform.\n      \n       end program LargestRectangleInGrid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22551,"user_id":53,"body":"       identification division.\n       program-id. LargestRectangleInGrid.\n       data division.\n       linkage section.\n       01  matrix.\n           03  h         pic 9(2).\n           03  w         pic 9(2).\n           03            occurs 4 to 12 depending h.\n               05        pic 9 occurs 12 indexed i j k m n.\n                  88  p  value 0.\n       01  r             pic 9(3).\n       procedure division using matrix r.\n          initialize r\n          perform varying i from 0 until i = h\n                    after j from 0 until j = w\n            subtract i from h giving k\n            perform varying n from 0 until \n                function abs(j + n) >= w or p(i + 1, j + n + 1)\n              perform varying m from 0 until m > k\n                if m = k or p(i + m + 1, j + n + 1) then\n                  move m to k\n                  move function max((n + 1) * m, r) to r\n                  exit perform\n                end-if\n              end-perform\n            end-perform\n          end-perform\n          goback.\n       end program LargestRectangleInGrid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5ea39ab1d8425e0029fcd035":[{"id":22552,"user_id":50,"body":"       identification division.\n       program-id. PingPong.\n      \n       data division.\n       working-storage section.\n       01 token       pic a(4).\n          88  ok        value 'ping', 'pong'.\n       01 lastPlayer  pic a(4).\n          88 lastIsPing value 'ping'.\n       01 i           usage index.\n      \n       local-storage section.\n       01 ping        pic 9(3).\n       01 pong        pic 9(3).\n       01 server      pic a(4).\n          88 pingServes  value 'ping'.\n      \n       linkage section.\n       01 sounds      pic x(1000).\n       01 result      pic a(4).\n      \n       procedure division using sounds result.\n      *  display 'sounds = \"' function trim(sounds trailing) '\"'\n          perform varying i from 1 by 5\n          until i > function stored-char-length(sounds)\n            move sounds(i:4) to token\n            evaluate true also server\n            when ok also space\n                    move token to server lastPlayer\n            when ok also any\n                    move token to lastPlayer\n            when any also not space\n                    if lastPlayer <> server\n                      if pingServes add 1 to ping\n                      else add 1 to pong end-if\n                    end-if\n                    initialize server\n            end-evaluate\n          end-perform\n      \n          evaluate true\n          when ping > pong  move 'ping' to result\n          when ping < pong  move 'pong' to result\n          when lastIsPing   move 'pong' to result\n          when other        move 'ping' to result\n          end-evaluate.\n      \n       end program PingPong.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5edc8c53d7cede0032eb6029":[{"id":22553,"user_id":53,"body":"\t     identification division.\n       program-id. solve.\n       data division.\n       local-storage section.\n       01 m           pic s9(20).\n       01 i           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n          move -1 to result\n          compute i = function sqrt(n)\n          perform until i = 0\n            compute m = n - i ** 2\n            if m > 0 and function rem(m, 2 * i) = 0\n              compute result = (m \/ (2 * i)) ** 2\n              exit perform\n            end-if\n            subtract 1 from i\n          end-perform\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22554,"user_id":168,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       working-storage section.\n       01 d           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n          perform varying d from function sqrt(n) by -1 until d = 0\n              if n > d * d and function mod(n - d * d, 2 * d) = 0\n                  compute result = ((n - d * d) \/ (2 * d)) ** 2\n                  goback\n              end-if\n          end-perform\n          compute result = -1\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22555,"user_id":50,"body":"       identification division.\n       program-id. solve.\n      \n       data division.\n       local-storage section.\n       01 x           pic s9(20).\n       01 i           pic 9(8).\n\n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n\n          compute i = function sqrt(n)\n          perform until i = 0\n              compute x = n - i ** 2\n              if x > 0 and function rem(x, 2 * i) = 0\n                compute result = function integer(x \/ (2 * i)) ** 2\n                goback\n              end-if\n              subtract 1 from i\n          end-perform\n          \n          move -1 to result\n\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5effa412233ac3002a9e471d":[{"id":22556,"user_id":53,"body":"       identification division.\n       program-id. addition recursive.\n       environment division.\n       configuration section.\n       repository. function rem intrinsic.\n       data division.\n       local-storage section.\n       01 d           pic 99.\n       01 n           pic 9(10).\n       01 a           pic 9(8).\n       01 b           pic 9(8).\n       01 f           pic 999.\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 result      pic 9(10).\n       procedure division using x y result.\n          compute d = rem(x, 10) + rem(y, 10),\n          if x + y = 0 then move d to result, goback end-if,\n          divide 10 into x giving a,\n          divide 10 into y giving b,\n          call 'addition' using a b n,\n          if d >= 10 then move 100 to f\n          else move 10 to f end-if,\n          compute result = n * f + d,\n          goback.\n       end program addition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22557,"user_id":null,"body":"       identification division.\n       program-id. addition.\n      \n       data division.\n       local-storage section.\n       77 summ       pic 9(2).\n      \n       linkage section.\n       01 x           pic 9(1) occurs 8 times indexed by i.\n       01 y           pic 9(1) occurs 8 times.\n       01 result      pic 9(10).\n       procedure division using x y result.\n          initialize result\n          perform varying i from 1 until i > 8\n             compute summ = x(i) + y(i)\n             if summ >= 10 then\n                compute result = result * 100\n             else\n                compute result = result * 10\n             end-if\n             compute result = result + summ\n          end-perform      \n          goback.\n       end program addition.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22558,"user_id":null,"body":"       identification division.\n       program-id. addition.\n      \n       data division.\n       local-storage section.\n       77 result-s    pic x(10).\n       77 result-p    usage is index.\n       77 summe       pic z9.\n       77 i           usage is index.\n       77 first-num   usage is index.\n      \n       linkage section.\n       01 x           pic 9 occurs 8 times.\n       01 y           pic 9 occurs 8 times.\n       01 result      pic 9(10).\n      \n       procedure division using x y result.\n          initialize result-s result\n          set first-num to 0\n          perform varying i from 1 until i > 8 or first-num > 0\n             if x(i) + y(i) > 0 then set first-num to i end-if\n          end-perform\n          if first-num = 0 then goback end-if\n          set result-p to 1\n          perform varying i from first-num until i > 8\n             compute summe = x(i) + y(i)\n             string function trim(summe)\n               into result-s with pointer result-p\n             end-string\n          end-perform\n          move result-s to result(12 - result-p:)     \n          goback.\n       end program addition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22559,"user_id":168,"body":"       identification division.\n       program-id. addition.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9.\n       01 j           pic 99 value 1.\n       01 t           pic z9.\n       01 res         pic x(16).\n       linkage section.\n       01 x           pic 9(8).\n       01 redefines x.\n          05 xd pic 9 occurs 8 times.\n       01 y           pic 9(8).\n       01 redefines y.\n          05 yd pic 9 occurs 8 times.\n       01 result      pic 9(10).\n       procedure division using x y result.\n          perform varying i from 1 by 1 until i > 8\n            compute t = xd(i) + yd(i)\n            string function trim(t) into res with pointer j\n          end-perform\n          compute result = function numval(res)\n          goback.\n       end program addition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22560,"user_id":168,"body":"       identification division.\n       program-id. addition.\n      \n       data division.\n       working-storage section.\n       01 i           pic 9.\n       01 res.\n          05 v pic z9 occurs 8 times.\n       linkage section.\n       01 x           pic 9(8).\n       01 redefines x.\n          05 xd pic 9 occurs 8 times.\n       01 y           pic 9(8).\n       01 redefines y.\n          05 yd pic 9 occurs 8 times.\n       01 result      pic 9(10).\n       procedure division using x y result.\n          perform varying i from 1 by 1 until i > 8\n            compute v(i) = xd(i) + yd(i)\n          end-perform\n          inspect res replacing all ' ' by ',' after initial ' '\n          compute result = function numval-c(res)\n          goback.\n       end program addition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22561,"user_id":50,"body":"       identification division.\n       program-id. addition.\n      \n       data division.\n       local-storage section.\n       01 p           pic 9(10) value 1.\n       01 a           pic 9.\n       01 b           pic 9(2).\n       linkage section.\n       01 x           pic 9(8).\n       01 y           pic 9(8).\n       01 result      pic 9(10).\n       procedure division using x y result.\n      \n          perform until x = 0 and y = 0\n            divide 10 into x giving x remainder a\n            divide 10 into y giving y remainder b\n            add a to b\n            compute result = result + p * b\n            if b > 9 \n              multiply 100 by p\n            else\n              multiply 10 by p\n            end-if\n          end-perform\n      \n          goback.\n       end program addition.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f0ed36164f2bc00283aed07":[{"id":22562,"user_id":421,"body":"       identification division.\n       program-id. over-the-road.\n       AUTHOR. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n           COMPUTE result = n * 2 - addr + 1.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22563,"user_id":null,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n          compute result = n * 2 + 1 - addr\n          goback.\n       end program over-the-road.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22564,"user_id":null,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       working-storage section.\n       01  even-odd            pic 9(04) comp.\n       01  x                   pic 9(18) comp-3.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n      \n      * Good luck\n      *    divide by 2 to determine if it's even or odd address number\n           divide addr by 2 giving x remainder even-odd.\n           \n           if even-odd = 0\n             compute result = \n                     ( n * 2 ) - ( ( ( addr - 1 ) \/ 2 ) * 2 )\n           else\n             compute result = ( n * 2 ) - ( addr - 1 )\n           end-if.\n      \n          goback.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22565,"user_id":null,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n         compute result = n * 2 + 1 - addr.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22566,"user_id":220,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.      \n          COMPUTE result = n * 2 + 1 - addr.      \n          goback.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22567,"user_id":53,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n          compute result = 2 * n + 1 - addr\n          goback.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22568,"user_id":527,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n       compute result = 2 * n + 1 - addr.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22569,"user_id":168,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n          compute result = 2 * n - addr + 1.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22570,"user_id":50,"body":"       identification division.\n       program-id. over-the-road.\n       data division.\n       linkage section.\n       01 addr        pic 9(20).\n       01 n           pic 9(20).\n       01 result      pic 9(20).\n       procedure division using addr n result.\n      \n          compute result = 1 - addr + 2 * n\n      \n          goback.\n       end program over-the-road.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f5daf1a209a64001183af9b":[{"id":22571,"user_id":53,"body":"       identification division.\n       program-id. make-chocolates.\n       data division.\n       local-storage section.\n       01 a         pic 9(8).\n       linkage section.\n       01 s         pic 9(8).\n       01 b         pic 9(8).\n       01 g         pic 9(8).\n       01 r         pic s9(8) sign leading.\n       procedure division using s b g r.\n          move b to a\n          move 0 to r\n          if g = 0 then goback end-if\n          perform until g < 5 or b = 0\n            subtract 5 from g\n            subtract 1 from b\n          end-perform\n          if g = 0 then goback end-if\n          perform until b > a\n            if function rem(g, 2) = 0 then\n              if function integer(g \/ 2) > s then\n                move -1 to r\n              else\n                divide 2 into g giving r\n              end-if\n              goback\n            end-if\n            add 5 to g\n            add 1 to b\n          end-perform\n          move -1 to r\n          goback.\n       end program make-chocolates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22572,"user_id":168,"body":"       identification division.\n       program-id. make-chocolates.\n      \n       data division.\n       working-storage section.\n       01 b           pic s9(8).\n       linkage section.\n       01 small       pic 9(8).\n       01 big         pic 9(8).\n       01 goal        pic 9(8).\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using small big goal result.\n          compute big = function min(big, goal \/ 5)\n          compute small = function max(0, (goal - 2 * small + 4) \/ 5)\n          perform varying b from big by -1 until b < small\n              compute result = goal - 5 * b\n              if function mod(result, 2) = 0\n                  divide 2 into result\n                  goback\n              end-if\n          end-perform\n          compute result = -1\n          goback.\n       end program make-chocolates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22573,"user_id":50,"body":"       identification division.\n       program-id. make-chocolates.\n      \n       data division.\n       local-storage section.\n       01 n           pic 9(8).\n\n       linkage section.\n       01 small       pic 9(8).\n       01 big         pic 9(8).\n       01 goal        pic 9(8).\n       01 result      pic s9(8) sign leading.\n      \n       procedure division using small big goal result.\n      \n          compute n = 5 * function min\n                      (function integer(goal \/ 5), big)\n      \n          if function rem(goal - n, 2) = 1\n              if n = 0\n                move -1 to result\n                goback\n              else\n                subtract 5 from n\n              end-if\n          end-if\n      \n          if goal - n <= 2 * small\n              compute result = function integer\n                               ((goal - n ) \/ 2)\n          else\n              move -1 to result\n          end-if\n      \n          goback.\n       end program make-chocolates.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f6d533e1475f30001e47514":[{"id":22574,"user_id":53,"body":"       identification division.\n       program-id. Consecutive.\n       data division.\n       linkage section.\n       01  arr.\n           05  arr-len       pic 9(4).\n           05  xs            pic s9(6) occurs 2 to 1000 times \n                                       depending on arr-len\n                                       indexed by i.\n       01  a                 pic s9(6).\n       01  b                 pic s9(6).\n       01  result            pic 9.\n       procedure division using arr a b result.\n          initialize result\n          perform varying i from 2 until i > arr-len\n            if (xs(i) = a and xs(i - 1) = b) \n                or (xs(i) = b and xs(i - 1) = a) then\n              set result to 1\n              exit perform\n            end-if\n          end-perform\n          goback.\n       end program Consecutive.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22575,"user_id":null,"body":"       identification division.\n       program-id. Consecutive.\n       data division.\n       linkage section.\n       01  arr.\n           05  arrLength     pic 9(4).\n           05  xs            pic s9(6) occurs 2 to 1000 times \n                                       depending on arrLength\n                                       indexed by i.\n       01  a                 pic s9(6).\n       01  b                 pic s9(6).\n       01  result            pic 9.\n      \n       procedure division using arr a b result.\n          initialize result\n          perform varying i from 1 until i >= arrLength or result > 0\n              if (xs(i    ) = a or xs(i    ) = b) and \n                 (xs(i + 1) = a or xs(i + 1) = b) then\n                  set result to 1\n              end-if\n          end-perform\n          goback.\n       end program Consecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22576,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Consecutive.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05  LEN        PIC 9(4).\n           05  XS         PIC S9(6) OCCURS 1000 DEPENDING LEN INDEXED I.\n       01  A              PIC S9(6).\n       01  B              PIC S9(6).\n       01  RESULT         PIC 9.\n\n       PROCEDURE DIVISION USING ARR A B RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 2 UNTIL I > LEN\n               IF (XS(I - 1) = A AND XS(I) = B)\n               OR (XS(I - 1) = B AND XS(I) = A)\n                   MOVE 1  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM Consecutive.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22577,"user_id":168,"body":"       identification division.\n       program-id. Consecutive.\n       data division.\n       linkage section.\n       01  arr.\n           05  arrLength     pic 9(4).\n           05  xs            pic s9(6) occurs 2 to 1000 times \n                                       depending on arrLength indexed i.\n       01  a                 pic s9(6).\n       01  b                 pic s9(6).\n       01  result            pic 9.\n      \n       procedure division using arr a b result.\n          move 0 to result\n          perform varying i from 2 until i > arrLength\n              if xs(i) = a and xs(i - 1) = b or\n                 xs(i) = b and xs(i - 1) = a\n                    move 1 to result\n                    goback\n              end-if\n          end-perform.\n       end program Consecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22578,"user_id":50,"body":"       identification division.\n       program-id. Consecutive.\n       data division.\n       linkage section.\n       01  arr.\n           05  l             pic 9(4).\n           05  xs            pic s9(6) occurs 2 to 1000\n                                       depending l indexed i.\n       01  a                 pic s9(6).\n       01  b                 pic s9(6).\n       01  result            pic 9.\n      \n       procedure division using arr a b result.\n      \n          if l = 2\n              move 1 to result\n          else\n              initialize result\n          end-if\n      \n          perform varying i from 2 until i = l\n              evaluate xs(i)\n              when a\n                   if b = xs(i - 1) or xs(i + 1)\n                      move 1 to result\n                   end-if\n                   goback\n              when b\n                   if a = xs(i - 1) or xs(i + 1)\n                      move 1 to result\n                   end-if\n                   goback\n              end-evaluate\n          end-perform.\n      \n       end program Consecutive.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f70c883e10f9e0001c89673":[{"id":22579,"user_id":null,"body":"       identification division.\n       program-id. Flip.\n       data division.\n      \n       linkage section.\n       01  d                pic a.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs               occurs 250 times \n                               depending on arrLength.\n           10 xs-num        pic 9(3).\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           pic 9(3) occurs 250 times \n                                     depending on resLength.\n      \n       procedure division using d arr result.\n      \n          if d equals to 'R' then\n             sort xs ascending xs-num\n          else\n             sort xs descending xs-num\n          end-if\n          move arr to result\n          goback.\n       end program Flip.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22580,"user_id":168,"body":"       identification division.\n       program-id. Flip.\n       data division.\n      \n       linkage section.\n       01  d                pic a.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(3) occurs 250 times \n                                      depending on arrLength.\n       01  result.\n           05 resLength     pic 9(3).\n           05 res occurs 250 times depending on resLength.\n              10 res-xs     pic 9(3).\n      \n       procedure division using d arr result.\n          move arr to result\n          if d = 'R'\n              sort res ascending res-xs\n          else\n              sort res descending res-xs\n          end-if.\n       end program Flip.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22581,"user_id":53,"body":"       identification division.\n       program-id. Flip.\n       data division.\n       linkage section.\n       01  d                pic a.\n       01  arr.\n           05 arr-len       pic 9(3).\n           05 xs            pic 9(3) occurs 250 times \n                                     depending on arr-len.\n       01  result.\n           05 res-len       pic 9(3).\n           05 res           occurs 250 times \n                            depending on res-len.\n              07 n          pic 9(3).\n       procedure division using d arr result.\n          move arr to result\n          if d = 'R' \n            sort res on ascending key n\n          else          \n            sort res on descending key n\n          end-if\n          goback.\n       end program Flip.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22582,"user_id":50,"body":"       identification division.\n       program-id. Flip.\n       data division.\n      \n       linkage section.\n       01  d                pic a.\n           88  flipRight    value 'R'.\n       01  arr.\n           05 arrLength     pic 9(3).\n           05 xs            pic 9(3) occurs 250 times \n                                      depending on arrLength.\n       01  result.\n           05 resLength     pic 9(3).\n           05 res           occurs 250 times  depending on resLength.\n              07 n          pic 9(3).\n      \n       procedure division using d arr result.\n      \n          move arr to result\n          if flipRight sort res on  ascending key n\n          else         sort res on descending key n.\n      \n       end program Flip.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f70e4cce10f9e0001c8995a":[{"id":22583,"user_id":421,"body":"       identification division.\n       program-id. solve.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  stones.\n           03 len      pic 9(3).\n           03 strng.\n               05 stone pic a occurs 3 to 250 times \n                              depending on len indexed by i.\n       01  result      pic 9(3).\n\n       procedure division using stones result.\n           initialize result\n           perform varying i from 2 by 1 until i > len\n               if stone(i) = stone(i - 1) then\n                   add 1 to result\n               end-if\n           end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22584,"user_id":null,"body":"       identification division.\n       program-id. solve.\n\n       data division.\n      \n       linkage section.\n       01  stones.\n           03 len      pic 9(3).\n           03 strng.\n               05 stone pic a occurs 3 to 250 times \n                              depending on len\n                              indexed by i.\n       01  result      pic 9(3).\n\n       procedure division using stones result.\n           initialize result\n           perform varying i from 1 until i >= len\n              if stone(i) = stone(i + 1) then\n                 set result up by 1\n              end-if\n           end-perform      \n           goback.\n       end program solve.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22585,"user_id":168,"body":"       identification division.\n       program-id. solve.\n\n       data division.\n      \n       linkage section.\n       01  stones.\n           03 len      pic 9(3).\n           03 strng.\n               05 stone pic a occurs 3 to 250 times \n                              depending on len indexed i.\n       01  result      pic 9(3).\n\n       procedure division using stones result.\n           move 0 to result\n           perform varying i from 2 until i > len\n               if stone(i) = stone(i - 1) then add 1 to result end-if\n           end-perform.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22586,"user_id":53,"body":"       identification division.\n       program-id. solve.\n       data division.\n       linkage section.\n       01  stones.\n           03 len      pic 9(3).\n           03 strng.\n               05 stone pic a occurs 3 to 250 times \n                              depending on len\n                              indexed by i.\n       01  result      pic 9(3).\n       procedure division using stones result.\n          move 0 to result\n          perform varying i from 2 until i > len\n            if stone(i) = stone(i - 1) then\n              add 1 to result\n            end-if\n          end-perform\n          goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22587,"user_id":50,"body":"       identification division.\n       program-id. solve.\n\n       data division.\n       linkage section.\n       01  stones.\n           03 len      pic 9(3).\n           03 strng.\n               05 stone pic a occurs 3 to 250 times \n                              depending on len indexed i.\n       01  result      pic 9(3).\n\n       procedure division using stones result.\n           \n           move 0 to result\n           perform varying i from 2 until i > len\n              if stone(i) = stone(i - 1)\n                  add 1 to result end-if\n           end-perform\n      \n           goback.\n       end program solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f77d62851f6bc0033616bd8":[{"id":22588,"user_id":null,"body":"       identification division.\n       program-id. ValidSpacing.\n\n       data division.\n       local-storage section.\n       77 invalid-count     usage is index.\n      \n       linkage section.\n       01  s.\n           03 s-length      pic 9(2).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 10 times \n                              depending on s-length.\n       01  result           pic 9.\n\n       procedure division using s result.\n           set invalid-count to 0\n           inspect s-chars tallying invalid-count for leading space\n           inspect s-chars tallying invalid-count for trailing space\n           inspect s-chars tallying invalid-count for all '  '\n           compute result = 1 - function min(1, invalid-count)\n           goback.\n       end program ValidSpacing.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22589,"user_id":53,"body":"       identification division.\n       program-id. ValidSpacing.\n       data division.\n       linkage section.\n       01  s.\n           03 s-length      pic 9(2).\n           03 s-chars.\n               05 d         pic a occurs 1 to 10 times \n                            depending on s-length indexed by i.\n       01  result           pic 9.\n       procedure division using s result.\n           set result to 0\n           if d of s(1) = ' ' or d of s(s-length) = ' ' then\n              exit paragraph\n           end-if\n           perform varying i from 2 until i > s-length\n              if d of s(i) = d of s(i - 1) and d of s(i) = ' ' then \n                exit paragraph \n              end-if\n           end-perform\n           set result to 1\n           goback.\n       end program ValidSpacing.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22590,"user_id":50,"body":"       identification division.\n       program-id. ValidSpacing.\n\n       data division.\n       linkage section.\n       01  s.\n           03 s-length      pic 9(2).\n           03 s-chars.\n               05 s-char pic a occurs 1 to 10 times \n                         depending on s-length indexed i.\n       01  result           pic 9.\n\n       procedure division using s result.\n      \n           move 0 to result\n           if s-char of s(1) = ' '\n           or s-char of s(s-length) = ' '\n              goback, end-if\n          \n           perform varying i from 3 until i > s-length - 1\n              if  s-char of s(i) = s-char of s(i - 1)\n              and s-char of s(i) = ' ' then goback end-if\n           end-perform\n           move 1 to result\n      \n           goback.\n       end program ValidSpacing.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f7c38eb54307c002a2b8cc8":[{"id":22591,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. RemoveParentheses.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 S.\n          03 LEN      PIC 9(3).\n          03 CHR      PIC X OCCURS 500 DEPENDING LEN INDEXED I.\n       01 RESULT.\n          03 RESLEN   PIC 9(3).\n          03 RECCHR   PIC X OCCURS 500 DEPENDING RESLEN.\n\n       PROCEDURE DIVISION USING S RESULT.\n           INITIALIZE RESULT TALLY\n           PERFORM VARYING I FROM 1 UNTIL I > LEN\n               EVALUATE TRUE\n                   WHEN CHR(I) = '('  ADD 1        TO TALLY\n                   WHEN CHR(I) = ')'  SUBTRACT 1 FROM TALLY\n                   WHEN TALLY  = 0    ADD 1        TO RESLEN\n                                      MOVE CHR(I)  TO RECCHR(RESLEN)\n               END-EVALUATE\n           END-PERFORM.\n       END PROGRAM RemoveParentheses.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22592,"user_id":50,"body":"       identification division.\n       program-id. RemoveParentheses.\n       data division.\n       local-storage section.\n       01 n           pic 9(3).\n      \n       linkage section.\n       01 s.\n          03 l       pic 9(3).\n          03 c pic x occurs 500 indexed i.\n       01 result.\n          03 k       pic 9(3).\n          03 r pic x occurs 500.\n      \n       procedure division using s result.\n          initialize result\n          perform varying i from 1 until i > l\n              evaluate c(i)\n              when '('     add 1 to n\n              when ')'     subtract 1 from n\n              when other\n                    if n = 0\n                        set k up by 1\n                        move c(i) to r(k)\n                    end-if\n              end-evaluate\n          end-perform.\n      \n       end program RemoveParentheses.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5f8341f6d030dc002a69d7e4":[{"id":22593,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. LeastLarger.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARR.\n           05 ARRLEN        PIC 9(2).\n           05 XS            PIC S9 OCCURS 20 DEPENDING ARRLEN INDEXED J.\n       01  I                USAGE INDEX.\n       01  RESULT           USAGE INDEX.\n\n       PROCEDURE DIVISION USING ARR I RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING J FROM 1 UNTIL J > ARRLEN\n               IF  XS(J) > XS(I) AND (RESULT = 0 OR XS(J) < XS(RESULT))\n                   MOVE J  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM LeastLarger.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22594,"user_id":null,"body":"       identification division.\n       program-id. LeastLarger.\n       data division.\n       working-storage section.\n       01  x    pic s99.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9 occurs 20 times \n                                   depending on arrLength indexed j.\n       01  i                usage index.\n       01  result           usage index.\n      \n       procedure division using arr i result.\n          compute result = 0\n          compute x = 10\n      \n          perform varying j from 1 until j > arrLength\n              if xs(i) < xs(j) and xs(j) < x\n                compute x = xs(j)\n                compute result = j\n              end-if\n          end-perform.\n       end program LeastLarger.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22595,"user_id":null,"body":"       identification division.\n       program-id. LeastLarger.\n       data division.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9 occurs 20 times \n                                   depending on arrLength\n                                   indexed by i-xs.\n       01  i                usage index.\n       01  result           usage index.\n      \n       procedure division using arr i result.\n          initialize result\n          perform varying i-xs from 1 until i-xs > arrLength\n             if xs(i-xs) > xs(i) and \n               (result = 0 or xs(i-xs) < xs(result)) then\n                set result to i-xs\n             end-if\n          end-perform      \n          goback.\n       end program LeastLarger.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22596,"user_id":76,"body":"       identification division.\n       program-id. LeastLarger.\n       data division.\n       local-storage section.\n       01  min-val   pic s9.\n       01  curr-val  pic s9.\n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9 occurs 20 times \n                                   depending on arrLength\n                                   indexed by j.\n       01  i                usage index.\n       01  result           usage index.\n      \n       procedure division using arr i result.\n         initialize result\n         set min-val to 9\n         move xs(i) to curr-val\n         perform varying j from 1 by 1 until j > arrLength\n            if xs(j) > curr-val and xs(j) <= min-val then\n              set result to j\n              set min-val to xs(j)\n            end-if\n         end-perform\n         goback.\n       end program LeastLarger.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22597,"user_id":168,"body":"       identification division.\n       program-id. LeastLarger.\n       data division.\n       working-storage section.\n       01  m    pic s99.\n      \n       linkage section.\n       01  arr.\n           05 arrLength     pic 9(2).\n           05 xs            pic s9 occurs 20 times \n                                   depending on arrLength indexed j.\n       01  i                usage index.\n       01  result           usage index.\n      \n       procedure division using arr i result.\n          move 10 to m\n          move 0 to result\n          perform varying j from 1 until j > arrLength\n              if xs(j) > xs(i) and xs(j) < m\n                  move xs(j) to m\n                  move j to result\n              end-if\n          end-perform.\n       end program LeastLarger.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22598,"user_id":50,"body":"       identification division.\n       program-id. LeastLarger.\n       data division.\n       local-storage section.\n       01  diff          pic 9(2) value 99.\n      \n       linkage section.\n       01  arr.\n           05 l           pic 9(2).\n           05 xs          pic s9 occurs 20 depending l\n                          indexed j.\n       01  i              usage index.\n       01  result         usage index.\n      \n       procedure division using arr i result.\n      \n          initialize result\n          perform varying j from 1 until diff = 1 or j > l\n              if xs(j) - xs(i) > 0 and < diff\n                move j to result\n                compute diff = xs(j) - xs(i)\n              end-if\n          end-perform.\n      \n       end program LeastLarger.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5fb856190d5230001d48d721":[{"id":22599,"user_id":421,"body":"       identification division.\n       program-id. pentagonal.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n           if n <= 0 then\n               set result to -1\n           else\n               compute result = (5 * n * n - 5 * n + 2) \/ 2.\n       end program pentagonal.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22600,"user_id":null,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n          if n <= 0 then\n              set result to -1\n          else\n              compute result = (n - 1) * n * 5 \/ 2 + 1\n          end-if\n          goback.\n       end program pentagonal.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22601,"user_id":null,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n       pic s9(10) sign leading.\n       01 result  pic s9(20) sign leading.\n       procedure division using n result.\n          if n>0 compute result = 5 * n * (n - 1)\/2 + 1\n          else set result to -1. \n       end program pentagonal.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22602,"user_id":null,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n        if n<1 \n          move -1 to result\n        else \n          multiply 5 by n giving result\n          subtract 1 from n\n          multiply n by result\n          divide result by 2 giving result\n          add 1 to result\n        end-if.\n       end program pentagonal.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22603,"user_id":null,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n         if n > 0\n           compute result = n * (n - 1) * 5 \/ 2 + 1\n         else\n           compute result = -1.\n       end program pentagonal.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22604,"user_id":53,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic s9(20) sign leading.\n       procedure division using n result.\n          move -1 to result\n          if n < 1 then goback end-if\n          compute result = (5 * n ** 2 - 5 * n + 2) \/ 2\n          goback.\n       end program pentagonal.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22605,"user_id":50,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          if n < 1 move -1 to result goback end-if\n          subtract 1 from n\n          compute result = 5 * n * (n + 1) \/ 2 + 1\n      \n          goback.\n       end program pentagonal.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22606,"user_id":168,"body":"       identification division.\n       program-id. pentagonal.\n       data division.\n       linkage section.\n       01 n           pic s9(10) sign leading.\n       01 result      pic 9(20).\n       procedure division using n result.\n          if n > 0\n              compute result = (5 * n * (n - 1) + 2) \/ 2\n          else\n              compute result = -1\n          end-if.\n       end program pentagonal.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5fc4349ddb878a0017838d0f":[{"id":22607,"user_id":421,"body":"       identification division.\n       program-id. red-knight.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 N           pic 9.\n       01 P           pic 9(7).\n       01 result.\n          05 colour  pic a(5).\n          05 h-pos   pic 9(7).\n      \n       procedure division using n p result.\n           move \"White\" to colour\n           if function rem(P - N, 2) = 1 then\n               move \"Black\" to colour\n           end-if\n           compute h-pos = P * 2.\n       end program red-knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22608,"user_id":168,"body":"       identification division.\n       program-id. red-knight.\n      \n       data division.\n       working-storage section.\n       01 colors pic a(10) value 'WhiteBlack'.\n\n       linkage section.\n       01 N           pic 9.\n       01 P           pic 9(7).\n       01 result.\n          05 colour  pic a(5).\n          05 h-pos   pic 9(7).\n      \n       procedure division using n p result.\n          move colors(function mod(n + p, 2) * 5 + 1:5) to colour\n          multiply p by 2 giving h-pos\n          goback.\n       end program red-knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22609,"user_id":null,"body":"       identification division.\n       program-id. red-knight.\n      \n       data division.\n       working-storage section.\n       01 pawn-colors.\n           05              pic a(5) value 'White'.\n           05              pic a(5) value 'Black'.\n       01 pawn-colors-tab  pic a(5) occurs 2 times\n                                    redefines pawn-colors.      \n\n       linkage section.\n       01 N           pic 9.\n       01 P           pic 9(7).\n       01 result.\n          05 colour   pic a(5).\n          05 h-pos    pic 9(7).\n      \n       procedure division using n p result.\n          move pawn-colors-tab(function mod(p + n, 2) + 1) to colour\n          compute h-pos = p * 2\n          goback.\n       end program red-knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22610,"user_id":null,"body":"       identification division.\n       program-id. red-knight.\n      \n       data division.\n\n       linkage section.\n       01 N           pic 9.\n       01 P           pic 9(7).\n       01 result.\n          05 colour  pic a(5).\n          05 h-pos   pic 9(7).\n      \n       procedure division using n p result.\n         compute h-pos = P * 2\n         evaluate function mod(N + P, 2)\n           when 0 move \"White\" to colour\n           when 1 move \"Black\" to colour\n         end-evaluate.\n       end program red-knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22611,"user_id":53,"body":"       identification division.\n       program-id. red-knight.\n       data division.\n       local-storage section.\n       01 k           pic 9.\n       01 bin1        usage binary-short.\n       01 bin2        usage binary-short.\n       linkage section.\n       01 n           pic 9.\n       01 p           pic 9(7).\n       01 result.\n          05 colour  pic a(5).\n          05 h-pos   pic 9(7).\n       procedure division using n p result.\n          move n to bin1\n          move function rem (p, 2) to bin2\n          call 'CBL_XOR' using bin1 bin2 by value 4\n          move bin2 to k\n          if k = 0 then move 'White' to colour\n          else move 'Black' to colour end-if\n          multiply 2 by p giving h-pos\n          goback.\n       end program red-knight.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22612,"user_id":50,"body":"       identification division.\n       program-id. red-knight.\n      \n       data division.\n\n       linkage section.\n       01 N           pic 9.\n       01 P           pic 9(7).\n       01 result.\n          05 colour  pic a(5).\n          05 h-pos   pic 9(7).\n      \n       procedure division using n p result.\n      \n          if function rem(n + p, 2) = 1\n              move 'Black' to colour\n          else\n              move 'White' to colour\n          end-if\n        \n          compute h-pos = 2 * p\n      \n          goback.\n       end program red-knight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"600bfda8a4982600271d6069":[{"id":22613,"user_id":53,"body":"       identification division.\n       program-id. find-reverse-number.\n       data division.\n       local-storage section.\n       01 m           pic 9(20).\n       01 i           pic 99.\n       01 j           pic 99.\n       01 o           pic 9(8).\n       linkage section.\n       01 n           pic 9(8).\n       01 r           pic 9(20).\n       procedure division using n r.\n          compute n = n - 1\n          if n < 10 then\n            move 1 to i\n            call 'f' using n i r\n            goback\n          end-if\n          compute n = n - 10\n          if n < 9 then\n            move 2 to i\n            compute o = n + 1\n            call 'f' using o i r\n            goback\n          end-if\n          compute n = n - 8\n          move 3 to i\n          move 90 to m\n          perform until 1 < 0\n            if n < m then\n              call 'f' using n i r\n              goback\n            end-if\n            compute n = n - m\n            compute j = i + 1\n            if n < m then\n              call 'f' using n j r\n              goback\n            end-if\n            compute n = n - m\n            compute i = i + 2\n            compute m = m * 10\n          end-perform\n          goback.\n       end program find-reverse-number.\n      \n       identification division.\n       program-id. f.\n       data division.\n       local-storage section.\n       01 t           pic 99.\n       01 m           pic 9(9).\n       linkage section.\n       01 n           pic 9(8).\n       01 k           pic 99.\n       01 r           pic 9(20).\n       procedure division using n k r.\n          compute t = k \/ 2\n          if function rem(k, 2) = 0 then\n            compute t = t - 1\n          end-if\n          compute m = 10 ** t\n          compute m = m + n - 1\n          move m to r\n          if function rem(k, 2) <> 0 then\n            compute m = m \/ 10\n          end-if\n          perform until m = 0\n            compute r = r * 10\n            compute r = r + function rem(m, 10)\n            compute m = m \/ 10\n          end-perform\n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22614,"user_id":50,"body":"       identification division.\n       program-id. find-reverse-number.\n      \n       data division.\n       local-storage section.\n       01 l           pic 9(8).\n       01 a           pic 9(8).\n       01 i           pic 9(8).\n       01 e           pic 9(8).\n       01 r           pic 9.\n      \n       linkage section.\n       01 n           pic 9(8).\n       01 result      pic 9(20).\n       procedure division using n result.\n      \n          if n < 10\n            compute result = n - 1\n            goback\n          end-if\n      \n          compute l = function log10(n)\n\n          if n < 1.1 * 10 ** l\n              subtract 1 from l\n          end-if\n      \n          compute a = 10 ** l\n      \n          subtract a from n\n\n          if n < a\n            move n to i\n          else\n            compute i = function integer(n \/ 10)\n          end-if\n\n          perform until i = 0 \n              divide i by 10 giving i remainder r\n              compute e = 10 * e + r\n          end-perform\n\n          compute result = n * a + e\n      \n          goback.\n       end program find-reverse-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"600c18ec9f033b0008d55eec":[{"id":22615,"user_id":53,"body":"       identification division.\n       program-id. find-reverse-number.\n       data division.\n       local-storage section.\n       01 m           pic 9(32).\n       01 i           pic 99.\n       01 j           pic 99.\n       01 o           pic 9(32).\n       linkage section.\n       01 n           pic 9(32).\n       01 r           pic 9(32).\n       procedure division using n r.\n          compute n = n - 1\n          if n < 10 then\n            move 1 to i\n            call 'f' using n i r\n            goback\n          end-if\n          compute n = n - 10\n          if n < 9 then\n            move 2 to i\n            compute o = n + 1\n            call 'f' using o i r\n            goback\n          end-if\n          compute n = n - 8\n          move 3 to i\n          move 90 to m\n          perform until 1 < 0\n            if n < m then\n              call 'f' using n i r\n              goback\n            end-if\n            compute n = n - m\n            compute j = i + 1\n            if n < m then\n              call 'f' using n j r\n              goback\n            end-if\n            compute n = n - m\n            compute i = i + 2\n            compute m = m * 10\n          end-perform\n          goback.\n       end program find-reverse-number.\n      \n       identification division.\n       program-id. f.\n       data division.\n       local-storage section.\n       01 t           pic 99.\n       01 m           pic 9(32).\n       linkage section.\n       01 n           pic 9(32).\n       01 k           pic 99.\n       01 r           pic 9(32).\n       procedure division using n k r.\n          compute t = k \/ 2\n          if function rem(k, 2) = 0 then\n            compute t = t - 1\n          end-if\n          compute m = 10 ** t\n          compute m = m + n - 1\n          move m to r\n          if function rem(k, 2) <> 0 then\n            compute m = m \/ 10\n          end-if\n          perform until m = 0\n            compute r = r * 10\n            compute r = r + function rem(m, 10)\n            compute m = m \/ 10\n          end-perform\n          goback.\n       end program f.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22616,"user_id":50,"body":"       identification division.\n       program-id. find-reverse-number.\n      \n       data division.\n       local-storage section.\n       01 l           pic 99.\n       01 a           pic 9(32).\n       01 i           pic 9(32).\n       01 e           pic 9(32).\n       01 r           pic 9.\n      \n       linkage section.\n       01 n           pic 9(32).\n       01 result      pic 9(32).\n       procedure division using n result.\n      \n          if n < 10\n            compute result = n - 1\n            goback\n          end-if\n      \n          compute l = function log10(n)\n\n          if n < 1.1 * 10 ** l\n              subtract 1 from l\n          end-if\n      \n          compute a = 10 ** l\n      \n          subtract a from n\n\n          if n < a\n            move n to i\n          else\n            compute i = function integer(n \/ 10)\n          end-if\n\n          perform until i = 0 \n              divide i by 10 giving i remainder r\n              compute e = 10 * e + r\n          end-perform\n\n          compute result = n * a + e\n\n          goback.\n       end program find-reverse-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22617,"user_id":168,"body":"       identification division.\n       program-id. find-reverse-number.\n      \n       data division.\n       working-storage section.\n       01 k           pic 9(8).\n       01 t           pic 9(32).\n       01 i           pic 99.\n       linkage section.\n       01 n           pic 9(32).\n       01 result      pic 9(32).\n       procedure division using n result.\n          if n <= 10\n              compute result = n - 1\n              goback\n          end-if\n          compute k = function log10(n \/ 2)\n          compute t = 10 ** k\n          subtract t from n\n          compute i = 1\n          if n >= 10 * t\n              compute n = n - 9 * t\n              inspect n tallying i for leading '0'\n              move function concat(n(i:), function reverse(n(i:)))\n                to result\n          else\n              inspect n tallying i for leading '0'\n              move function concat(n(i:), function reverse(n(i:))(2:))\n                to result\n          end-if\n          goback.\n       end program find-reverse-number.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"602afedfd4a64d0008eb4e6e":[{"id":22618,"user_id":53,"body":"       identification division.\n       program-id. GetDay.\n       data division.\n       local-storage section.\n       01  monthNamesTable.\n           03  filler       pic x(13) value 'January      '.\n           03  filler       pic x(13) value 'February     '.\n           03  filler       pic x(13) value 'March        '.\n           03  filler       pic x(13) value 'April        '.\n           03  filler       pic x(13) value 'May          '.\n           03  filler       pic x(13) value 'June         '.\n           03  filler       pic x(13) value 'July         '.\n           03  filler       pic x(13) value 'August       '.\n           03  filler       pic x(13) value 'September    '.\n           03  filler       pic x(13) value 'October      '.\n           03  filler       pic x(13) value 'November     '.\n           03  filler       pic x(13) value 'December     '.\n       01  redefines monthNamesTable.\n           03  monthNames pic x(13) occurs 12.\n       01  monthLenTable.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 28.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n       01  redefines monthLenTable.\n           03  monthLengths pic 9(2) occurs 12 indexed m.\n       01  lim              pic 9(3) value 31.\n       01  d                pic 9(3).\n       01  n                pic 9(2).\n       01  dDisp            pic z(2)9.\n      \n       linkage section.\n       01  rank             pic 9(3).\n       01  leap             pic 9.\n           88  isLeap       value 1.\n       01  result           pic x(13).\n       procedure division using rank leap result.\n          initialize result\n          move rank to d\n          if isLeap move 29 to monthLengths(2) end-if\n          perform varying m from 1 until m = 12\n            if rank > lim then\n              add monthLengths(m + 1) to lim\n              subtract monthLengths(m) from d\n            else \n              exit perform\n            end-if\n          end-perform\n          move d to dDisp\n          move function trim(monthNames(m)) to result\n          string result delimited by space ', ' function trim(dDisp)\n            into result\n          end-string\n          goback.\n       end program GetDay.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22619,"user_id":50,"body":"       identification division.\n       program-id. GetDay.\n       data division.\n       local-storage section.\n       01  monthLenTable.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 28.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n           03  filler       pic 9(2) value 30.\n           03  filler       pic 9(2) value 31.\n       01  redefines monthLenTable.\n           03  monthLengths pic 9(2) occurs 12 indexed m.\n       01  lim              pic 9(3) value 31.\n       01  d                pic 9(3).\n       01  n                pic 9(2).\n       01  dDisp            pic z(2)9.\n      \n       linkage section.\n       01  rank             pic 9(3).\n       01  leap             pic 9.\n           88  isLeap       value 1.\n       01  result           pic x(13).\n      \n       procedure division using rank leap result.\n      \n          move rank to d\n      \n          if isLeap move 29 to monthLengths(2) end-if\n      \n          perform varying m from 1 until m = 12\n            if rank > lim\n                  add monthLengths(m + 1) to lim\n                  subtract monthLengths(m) from d\n            else  exit perform end-if\n          end-perform\n      \n          move d to dDisp\n          evaluate m\n          when 1     move 'January'   to result\n          when 2     move 'February'  to result\n          when 3     move 'March'     to result\n          when 4     move 'April'     to result\n          when 5     move 'May'       to result\n          when 6     move 'June'      to result\n          when 7     move 'July'      to result\n          when 8     move 'August'    to result\n          when 9     move 'September' to result\n          when 10    move 'October'   to result\n          when 11    move 'November'  to result\n          when other move 'December'  to result\n          end-evaluate\n          \n          string\n              result delimited by space\n              ', '\n              function trim(dDisp)\n              into result\n          end-string\n      \n          goback.\n       end program GetDay.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"60576b180aef19001bce494d":[{"id":22620,"user_id":50,"body":"       identification division.\n       program-id. count-checkerboard.\n      \n       data division.\n       local-storage section.\n       01 x           pic 9(32).\n       01 a           pic 9(32).\n      \n       linkage section.\n       01 w           pic 9(32).\n       01 h           pic 9(32).\n       01 r           pic 9(32).\n       01 result      pic 9(32).\n       procedure division using w h r result.\n      \n          compute x = r * function integer(w \/ (2 * r))\n          compute x = x + function max(0, w - 2 * x - r)\n          compute a = r * function integer(h \/ (2 * r))\n          compute a = a + function max(0, h - 2 * a - r)\n          compute result = x * (h - a) + (w - x) * a\n      \n          goback.\n       end program count-checkerboard.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22621,"user_id":168,"body":"       identification division.\n       program-id. count-checkerboard.\n      \n       data division.\n       working-storage section.\n       01 q           pic 9(32).\n       01 t           pic 9(32).\n       01 r1          pic 9(32).\n       01 r2          pic 9(32).\n       linkage section.\n       01 w           pic 9(32).\n       01 h           pic 9(32).\n       01 r           pic 9(32).\n       01 result      pic 9(32).\n       procedure division using w h r result.\n          divide w by function abs(2 * r) giving q remainder t\n          compute r1 = q * r + function max(0, t - r)\n          compute r2 = q * r + function min(r, t)\n          divide h by function abs(2 * r) giving q remainder t\n          compute result = (r1 + r2) * q * r \n                          + r1 * function min(r, t)\n                          + r2 * function max(0, t - r).\n       end program count-checkerboard.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22622,"user_id":53,"body":"       identification division.\n       program-id. count-checkerboard.\n      \n       data division.\n      \n       local-storage section.\n       01 b           pic 9(32).\n       01 s           pic 9(32).\n       01 x           pic 9(32).\n       01 y           pic 9(32).\n      \n       linkage section.\n       01 w           pic 9(32).\n       01 h           pic 9(32).\n       01 r           pic 9(32).\n       01 result      pic 9(32).\n      \n       procedure division using w h r result.\n          compute b = w \/ (2 * r)\n          compute s = h \/ (2 * r)\n          compute x = b * r + function max(0, w - b * 2 * r - r)\n          compute y = s * r + function max(0, h - s * 2 * r - r)\n          compute result = x * (h - y) + (w - x) * y\n          goback.\n      \n       end program count-checkerboard.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"605ae9e1d2be8a0023b494ed":[{"id":22623,"user_id":null,"body":"       identification division.\n       program-id. countSalutes.\n       data division.\n      \n       linkage section.\n       01  hallway.\n           05 len            pic 9(3).\n           05 people         pic x occurs 1 to 100 times \n                                 depending on len\n                                 indexed by i.\n       01  result            pic 9(3).\n      \n       procedure division using hallway result.\n           initialize result\n           perform varying i from 1 until i > len\n              if people(i) = '>' then\n                 inspect hallway(i + 4 : ) tallying result for all '<'\n              end-if\n           end-perform\n           multiply 2 by result\n           goback.\n       end program countSalutes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22624,"user_id":null,"body":"       identification division.\n       program-id. countSalutes.\n       data division.\n       local-storage section.\n       77 i                  usage is index.\n      \n       linkage section.\n       01  hallway.\n           05 len            pic 9(3).\n           05 people         pic x occurs 1 to 100 times \n                                   depending on len\n                                   indexed by i-people.\n       01  result            pic 9(3).\n      \n       procedure division using hallway result.\n           initialize result\n           perform varying i-people from 1 until i-people > len\n              if people(i-people) = '>' then\n                 perform varying i from i-people until i > len\n                    if people(i) = '<' then\n                       set result up by 2\n                    end-if\n                 end-perform\n              end-if\n           end-perform\n           goback.\n       end program countSalutes.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22625,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. countSalutes.\n       DATA DIVISION.      \n       LINKAGE SECTION.\n       01  HALLWAY.\n           05  LEN         PIC  9(3).\n           05  PEOPLE      PIC  X(1) OCCURS 100 DEPENDING LEN INDEXED I.\n       01  RESULT          PIC  9(3).\n\n       PROCEDURE DIVISION USING HALLWAY RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 0 BY 1 UNTIL I > LEN\n               IF  PEOPLE(I) = '>'\n                   INSPECT HALLWAY(I + 3:) TALLYING RESULT FOR ALL '<'\n               END-IF\n           END-PERFORM\n           MULTIPLY 2 BY RESULT.\n       END PROGRAM countSalutes.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22626,"user_id":null,"body":"       identification division.\n       program-id. countSalutes.\n       data division.\n       local-storage section.\n       01  met               pic 9(3).\n      \n       linkage section.\n       01  hallway.\n           05 len            pic 9(3).\n           05 people         pic x occurs 1 to 100 times \n                                 depending on len\n                                 indexed by i.\n       01  result            pic 9(3).\n      \n       procedure division using hallway result.\n       set result to 0\n       set met to 0\n       perform varying i from 1 until i > len\n         evaluate people(i)\n           when '>' add 2 to met\n           when '<' add met to result.\n       end program countSalutes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22627,"user_id":168,"body":"       identification division.\n       program-id. countSalutes.\n       data division.\n       working-storage section.\n       01  n                 pic 9(3).\n      \n       linkage section.\n       01  hallway.\n           05 len            pic 9(3).\n           05 people         pic x occurs 1 to 100 times \n                                 depending on len indexed i.\n       01  result            pic 9(3).\n      \n       procedure division using hallway result.\n           move 0 to result n\n           perform varying i from 1 until i > len\n               evaluate people(i)\n                   when '>' add 2 to n\n                   when '<' add n to result\n               end-evaluate\n           end-perform.\n       end program countSalutes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22628,"user_id":53,"body":"       identification division.\n       program-id. countSalutes.\n       data division.\n       local-storage section.\n       01  r                 pic 9(3) value 0.\n       01  s                 pic 9(3) value 0.\n       linkage section.\n       01  hallway.\n           05 len            pic 9(3).\n           05 people.\n              07 person      pic x occurs 1 to 100 times \n                             depending on len indexed i.\n       01  result            pic 9(3).\n       procedure division using hallway result.\n          perform varying i from 1 until i > len\n            evaluate person(i)\n              when  '>'     add 1 to r\n              when  '<'     compute s = s + 2 * r\n            end-evaluate\n          end-perform\n          move s to result\n          goback.\n       end program countSalutes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22629,"user_id":50,"body":"       identification division.\n       program-id. countSalutes.\n       data division.\n       local-storage section.\n       01  a                 pic 9(3).\n       01  b                 pic 9(3).\n      \n       linkage section.\n       01  hallway.\n           05 len            pic 9(3).\n           05 people.\n              07 person      pic x occurs 1 to 100 times \n                             depending on len indexed i.\n       01  result            pic 9(3).\n      \n       procedure division using hallway result.\n      \n          perform varying i from 1 until i > len\n            evaluate person(i)\n            when  '>'     add 1 to a\n            when  '<'     add a to b\n            end-evaluate\n          end-perform\n          multiply 2 by b giving result\n      \n          goback.\n       end program countSalutes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"605f5d33f38ca800322cb18f":[{"id":22630,"user_id":null,"body":"       identification division.\n       program-id. TapCodeTranslation.\n      \n       data division.\n       working-storage section.\n       77 i           usage index.\n       77 j           usage index.\n       77 p           usage index.\n       77 row         usage index.\n       77 colum       usage index.\n       77 dots        pic x(5) value '.....'.     \n       01 chars pic a(50)\n        value 'A B CKD E F G H I J L M N O P Q R S T U V W X Y Z '.\n\n       linkage section.\n       01 txt         pic a(10).\n       01 result      pic x(119).\n      \n       procedure division using txt result.      \n          initialize result\n          set p to 1\n          move function upper-case(txt) to txt\n          perform varying i from 1 until i > 10\n             if txt(i:1) not = space then\n                perform varying j from 1 until j > 50\n                                            or chars(j:1) = txt(i:1)\n                   continue\n                end-perform\n                compute row = j \/ 10 + 1\n                compute colum = function mod((j - 1) \/ 2, 5) + 1\n                string dots(1 : row)   \n                       space\n                       dots(1 : colum) \n                       space\n                  into result with pointer p\n                end-string\n             end-if\n          end-perform\n          goback.\n       end program TapCodeTranslation.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22631,"user_id":50,"body":"       identification division.\n       program-id. TapCodeTranslation.\n      \n       data division.\n       local-storage section.\n       01 i           usage index.\n       01 j           usage index.\n      \n       linkage section.\n       01 txt         pic a(10).\n       01 result      pic x(119).\n      \n       procedure division using txt result.\n      \n          initialize result\n          set i to 1\n          perform varying j from 1\n                  until   j > function stored-char-length(txt)\n            evaluate txt(j:1)\n            when 'a'    string '. . ' into result with pointer i\n            when 'b'    string '. .. ' into result with pointer i\n            when 'c'    string '. ... ' into result with pointer i\n            when 'd'    string '. .... ' into result with pointer i\n            when 'e'    string '. ..... ' into result with pointer i\n            when 'f'    string '.. . ' into result with pointer i\n            when 'g'    string '.. .. ' into result with pointer i\n            when 'h'    string '.. ... ' into result with pointer i\n            when 'i'    string '.. .... ' into result with pointer i\n            when 'j'    string '.. ..... ' into result with pointer i\n            when 'k'    string '. ... ' into result with pointer i\n            when 'l'    string '... . ' into result with pointer i\n            when 'm'    string '... .. ' into result with pointer i\n            when 'n'    string '... ... ' into result with pointer i\n            when 'o'    string '... .... ' into result with pointer i\n            when 'p'    string '... ..... ' into result with pointer i\n            when 'q'    string '.... . ' into result with pointer i\n            when 'r'    string '.... .. ' into result with pointer i\n            when 's'    string '.... ... ' into result with pointer i\n            when 't'    string '.... .... ' into result with pointer i\n            when 'u'    string '.... ..... ' into result with pointer i\n            when 'v'    string '..... . ' into result with pointer i\n            when 'w'    string '..... .. ' into result with pointer i\n            when 'x'    string '..... ... ' into result with pointer i\n            when 'y'    string '..... .... ' into result with pointer i\n            when other  string '..... ..... ' into result with pointer i\n            end-evaluate\n          end-perform\n      \n          goback.\n       end program TapCodeTranslation.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6066ae080168ff0032c4107a":[{"id":22632,"user_id":null,"body":"       identification division.\n       program-id. maxSumBetweenTwoNegatives.\n       data division.\n       local-storage section.\n       77 act-sum            pic s9(4) sign leading.\n       77 negative-exists    pic x.\n          88 negative-exists-false   value x'00'.\n          88 negative-exists-true    value x'01' through x'FF'.\n             \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 40 times \n                                      depending on arr-length\n                                      indexed by i.\n       01  result            pic s9(4) sign leading.\n      \n       procedure division using arr result.\n           set negative-exists-false to true\n           move -1 to result\n           set act-sum to 0\n           perform varying i from 1 until i > arr-length\n              if xs(i) < 0 then\n                 if negative-exists-true then\n                    if act-sum > result then\n                       set result to act-sum\n                    end-if\n                 else\n                    set negative-exists-true to true\n                 end-if\n                 set act-sum to 0\n              else\n                 add xs(i) to act-sum\n              end-if\n           end-perform\n           goback.\n       end program maxSumBetweenTwoNegatives.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22633,"user_id":168,"body":"       identification division.\n       program-id. maxSumBetweenTwoNegatives.\n       data division.\n       working-storage section.\n       01  s                 pic s9(4).\n       01  f                 pic 9.\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 40 times \n                                      depending on arr-length indexed i.\n       01  result            pic s9(4) sign leading.\n      \n       procedure division using arr result.\n           move -1 to result s\n           move 0 to f\n           perform varying i from 1 until i > arr-length\n               if xs(i) < 0\n                   move function max(result, s) to result\n                   move 0 to s\n                   move 1 to f\n               else\n                   compute s = s + f * xs(i)\n               end-if\n           end-perform.\n       end program maxSumBetweenTwoNegatives.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22634,"user_id":53,"body":"       identification division.\n       program-id. maxSumBetweenTwoNegatives.\n       data division.\n       local-storage section.\n       01 m                  pic s9(4) value 0.\n       01 n                  pic s9(4) value -1.\n       01 k                  pic 9(2) value 0.\n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 40 times \n                                       depending on arr-length\n                                       indexed by i.\n       01  r                 pic s9(4) sign leading.\n       procedure division using arr r.\n          move -1 to r\n          perform varying i from 1 until i > arr-length\n            evaluate true\n              when xs(i) < 0\n                add 1 to k\n                compute m = function max (m, n)\n                move 0 to n\n              when n > -1\n                add xs(i) to n\n            end-evaluate\n          end-perform\n          if k > 1 then move m to r end-if\n          goback.\n       end program maxSumBetweenTwoNegatives.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22635,"user_id":50,"body":"       identification division.\n       program-id. maxSumBetweenTwoNegatives.\n       data division.\n       local-storage section.\n       01  n                 pic s9(4).\n      \n       linkage section.\n       01  arr.\n           05 arr-length     pic 9(2).\n           05 xs             pic s9(2) occurs 0 to 40 times \n                             depending on arr-length indexed i.\n       01  result            pic s9(4) sign leading.\n      \n       procedure division using arr result.\n      \n      * Implementation of Wisdou's JavaScript solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/606c78d88e18220001d31e79\/groups\/606d60bcca1831000181ebb9\n      \n          move -1 to result, n\n          perform varying i from 1 until i > arr-length\n            evaluate n      also   xs(i)\n              when   = -1   also   < 0      move 0 to n\n              when   >= 0   also   < 0      move function max(result, n)\n                                            to result, move 0 to n\n              when   >= 0   also   any      add xs(i) to n\n            end-evaluate\n          end-perform\n      \n          goback.\n       end program maxSumBetweenTwoNegatives.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6071ef9cbe6ec400228d9531":[{"id":22636,"user_id":null,"body":"       identification division.\n       program-id. Calculator.\n      \n       data division.\n       local-storage section.\n       77 op1-len     usage is index.\n       77 op1-str     pic x(100).\n      \n       77 op-len     usage is index.\n       77 op-str     pic x(2).\n      \n       77 op2-len     usage is index.\n       77 op2-str     pic x(100).\n       \n       linkage section.\n       01 txt         pic x(100).\n       01 result      pic x(2500).\n      \n       procedure division using txt result.     \n          initialize result\n          unstring txt delimited by space\n              into op1-str count op1-len\n                   op-str  count op-len\n                   op2-str count op2-len\n          end-unstring         \n          evaluate op-str(1:op-len)\n             when '+'  move all '.' to result(1 : op1-len + op2-len)\n             when '-'  move all '.' to result(1 : op1-len - op2-len)\n             when '*'  move all '.' to result(1 : op1-len * op2-len)\n             when '\/\/' move all '.' to result(1 : op1-len \/ op2-len)\n          end-evaluate\n          goback.\n       end program Calculator.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22637,"user_id":null,"body":"       identification division.\n       program-id. Calculator.\n       data division.\n       local-storage section.\n       01 a       pic 9(4).\n       01 b       pic 9(2). \n       linkage section.\n       01 txt     pic x(100).\n       01 result  pic x(2500).\n       procedure division using txt result.\n          inspect txt tallying a for leading '.'.\n          inspect txt tallying b for all '.' after ' '.\n          evaluate txt(a + 2:2)\n            when '+ ' add b to a\n            when '- ' subtract b from a\n            when '* ' multiply b by a\n            when '\/\/' divide b into a.\n          initialize result. move all '.' to result(1:a).\n       end program Calculator.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22638,"user_id":null,"body":"       identification division.\n       program-id. Calculator.\n       data division.\n       local-storage section.\n       01 op      pic x(2).\n       01 sa       pic x(97).\n       01 sb       pic x(97). \n       01 a       pic 9(4).\n       01 b      pic 9(2). \n       linkage section.\n       01 txt     pic x(100).\n       01 result  pic x(2500).\n       procedure division using txt result.\n          unstring txt delimited by ' ' into sa op sb.\n          inspect sa tallying a for leading '.'.\n          inspect sb tallying b for leading '.'.\n          evaluate op\n            when '+ ' add b to a\n            when '- ' subtract b from a\n            when '* ' multiply b by a\n            when '\/\/' divide b into a.\n          initialize result. move all '.' to result(1:a).\n       end program Calculator.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22639,"user_id":null,"body":"       identification division.\n       program-id. Calculator.\n       data division.\n       local-storage section.\n       01 op      pic x(2).\n       01 a       pic x(97).\n       01 b       pic x(97). \n       01 l       pic 9(4).\n       01 lb      pic 9(2). \n       linkage section.\n       01 txt     pic x(100).\n       01 result  pic x(2500).\n       procedure division using txt result.\n          unstring txt delimited by ' ' into a op b.\n          inspect a tallying l for characters before ' '.\n          inspect b tallying lb for characters before ' '.\n          evaluate op\n            when '+ ' add lb to l\n            when '- ' subtract lb from l\n            when '* ' multiply lb by l\n            when '\/\/' divide lb into l.\n          initialize result. move all '.' to result(1:l).\n       end program Calculator.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22640,"user_id":53,"body":"       identification division.\n       program-id. Calculator.\n       data division.\n       local-storage section.\n       01 a           pic 9(4).\n       01 b           pic 9(2).\n       01 c           pic x(2).\n       01 i           usage index.\n       01 j           usage index.\n       01 t           pic x.\n       linkage section.\n       01 txt         pic x(100).\n       01 result      pic x(2500).\n       procedure division using txt result.\n      \n         initialize result\n         perform prse\n         perform prc\n         goback.\n      \n        prse.\n         set i to 1\n         unstring txt \n            delimited by ' + ' or ' - ' or ' * ' or ' \/\/ '\n            into t delimiter in c count in a  with pointer i\n         end-unstring\n         unstring txt\n            delimited by space into t count in b with pointer i\n         end-unstring\n         .\n      \n        prc.\n         evaluate c(2:)\n           when '+'    \n            add b to a\n           when '-'   \n            subtract b from a\n           when '*'   \n            multiply b by a\n           when other  \n            divide b into a\n         end-evaluate\n         perform varying j from 1 until j > a\n           move '.' to result(j:1)\n         end-perform\n         initialize result(j:)\n         .\n      \n       end program Calculator.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22641,"user_id":168,"body":"       identification division.\n       program-id. Calculator.\n      \n       data division.\n       working-storage section.\n       01 a           pic 9(4).\n       01 b           pic 99.\n       \n       linkage section.\n       01 txt         pic x(100).\n       01 result      pic x(2500).\n      \n       procedure division using txt result.\n          initialize a b result\n          inspect txt tallying a for leading '.' \n                               b for all '.' after ' '\n          evaluate txt(a + 2:1)\n              when '+' add b to a\n              when '-' subtract b from a\n              when '*' multiply b by a\n              when '\/' divide b into a\n          end-evaluate\n          move all '.' to result(1:a)\n          goback.\n       end program Calculator.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22642,"user_id":50,"body":"       identification division.\n       program-id. Calculator.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(4).\n       01 b           pic 9(2).\n       01 i           usage index value 1.\n       01 op          pic x(2).\n       01 junk        pic x.\n      \n       linkage section.\n       01 txt         pic x(100).\n       01 result      pic x(2500).\n      \n       procedure division using txt result.\n      \n         unstring\n            txt \n            delimited by ' + '\n                       or ' * '\n                        or ' - '\n                         or ' \/\/ '\n            into junk\n            delimiter in op\n            count in a\n            with pointer i\n         end-unstring\n      \n         unstring\n            txt\n            delimited by space\n            into junk\n            count in b\n            with pointer i\n         end-unstring\n          \n         evaluate op(2:)\n         when '+'    add b to a\n         when '-'    subtract b from a\n         when '*'    multiply b by a\n         when other  divide b into a\n         end-evaluate\n          \n         perform varying i from 1 until i > a\n           move '.' to result(i:1)\n         end-perform\n         initialize result(i:).\n      \n       end program Calculator.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6076d4edc7bf5d0041b31dcf":[{"id":22643,"user_id":168,"body":"       identification division.\n       program-id. sort-bytes.\n\n       data division.\n       working-storage section.\n       01 x usage binary-long unsigned.\n       01 redefines x.\n          05 bytes pic x occurs 4 times.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          move n to x\n          sort bytes on ascending key bytes\n          move x to result\n          goback.\n       end program sort-bytes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22644,"user_id":50,"body":"       identification division.\n       program-id. sort-bytes.\n      \n       data division.\n       local-storage section.\n       01 bin         usage binary-long.\n       01 i           pic 9.\n       01 j           pic 9.\n       01 tmp         pic 9(8).\n       01 bytes-table.\n          05 byte occurs 4 times.\n             10 byte-val pic 9(8).\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10) value 0.\n       procedure division using n result.\n      \n      * compute bytes and store them into bytes-table\n          move n to bin\n          call 'CBL_AND' using 255 bin by value 4\n          move bin to byte-val(1)\n          divide 256 into n\n          move n to bin\n          call 'CBL_AND' using 255 bin by value 4\n          move bin to byte-val(2)\n          divide 256 into n\n          move n to bin\n          call 'CBL_AND' using 255 bin by value 4\n          move bin to byte-val(3)\n          divide 256 into n\n          move n to bin\n          call 'CBL_AND' using 255 bin by value 4\n          move bin to byte-val(4)\n      \n      * bubble sort descending\n          perform varying i from 1 by 1 until i = 4\n            compute j = i + 1\n            perform until j > 4\n              if byte-val(i) < byte-val(j)\n                move byte-val(i)   to tmp\n                move byte-val(j)   to byte-val(i)\n                move tmp           to byte-val(j)\n              end-if\n              add 1  to j\n            end-perform\n          end-perform\n\n      * assemble sorted bytes\n          perform varying i from 1 by 1 until i > 4\n            compute result = result * 256 + byte-val(i)\n          end-perform\n\n          goback.\n       end program sort-bytes.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22645,"user_id":53,"body":"       identification division.\n       program-id. sort-bytes.\n       data division.\n       working-storage section.\n       01 bin usage binary-long unsigned.\n       01 redefines bin.\n          05 bytes pic x occurs 4 times.\n       linkage section.\n       01 n           pic 9(10).\n       01 result      pic 9(10).\n       procedure division using n result.\n          move n to bin,\n          sort bytes on ascending key bytes,\n          move bin to result,\n          goback.\n       end program sort-bytes.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"60a94f1443f8730025d1744b":[{"id":22646,"user_id":50,"body":"       identification division.\n       program-id. Grid.\n      \n       environment division.\n       configuration section.\n       special-names.\n            symbolic characters lf is 11.\n      \n       data division.\n       working-storage section.\n       01 alpha pic a(26) value 'abcdefghijklmnopqrstuvwxyz'.\n       01 redefines alpha.\n          03 l pic a occurs 26 indexed i.\n       \n       local-storage section.\n       01 j           usage index value 1.\n       01 k           usage index.\n       01 g           usage index value 1.\n      \n       linkage section.\n       01 n           pic s9(2).\n       01 result      pic x(20000).\n      \n       procedure division using n result.\n      \n          initialize result\n          if n < 1 goback end-if\n          set i to 1\n          perform varying k from 1 until k > n * n\n              if function mod(k, n) = 0\n                 string l(i) lf into result with pointer j\n                 compute g = function max(1, function mod(g + 1, 27))\n                 set i to g\n              else\n                 string l(i) space into result with pointer j\n                 compute i = function max(1, function mod(i + 1, 27))\n              end-if\n          end-perform\n          move space to result(j - 1 : 1)\n          .\n      \n       end program Grid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22647,"user_id":null,"body":"       identification division.\n       program-id. Grid.\n      \n       data division.\n       local-storage section.\n       77 i           usage is index.\n       77 j           usage is index.\n       77 p           usage is index.\n       linkage section.\n       01 n           pic s9(2).\n       01 result      pic x(20000).\n      \n       procedure division using n result.\n          initialize result\n          set p to 1\n          perform varying i from 0 until i >= n\n             if i > 0 then\n                string function char(11) into result with pointer p\n                end-string\n             end-if\n             perform varying j from 0 until j >= n\n                if j > 0 then\n                   string space into result with pointer p\n                   end-string\n                end-if\n                string function char(function ord('a') + \n                                     function mod(j + i, 26))\n                  into result with pointer p\n                end-string\n             end-perform\n          end-perform\n          goback.\n       end program Grid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22648,"user_id":null,"body":"       identification division.\n       program-id. Grid.\n       data division.\n       working-storage section.\n       01 i       pic 9(2).\n       01 j       pic 9(2).\n       01 lf      pic x value x'0a'.\n       01 a       pic a(26) value 'abcdefghijklmnopqrstuvwxyz'.\n       linkage section.\n       01 n       pic s9(2).\n       01 result  pic x(20000).\n       procedure division using n result.\n          initialize result.\n          if n>0\n            perform varying i from 0 until i = n\n              perform varying j from 0 until j = n \n                move a(1 + function mod(i + j, 26) : 1) \n                  to result(2*(n * i + j) + 1 : 1)\n              end-perform\n              if i<n - 1 move lf to result(2*(n * i + n) : 1)\n            end-perform.\n       end program Grid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22649,"user_id":null,"body":"       identification division.\n       program-id. Grid.\n       data division.\n       working-storage section.\n       01 a       pic a(26) value 'abcdefghijklmnopqrstuvwxyz'.\n       01 i       pic 9(2).\n       01 j       pic 9(2).\n       01 lf      pic x. \n       linkage section.\n       01 n       pic s9(2).\n       01 result  pic x(20000).\n       procedure division using n result.\n          initialize result.\n          if n>0\n            move function char(11) to lf\n            perform varying i from 0 until i = n\n              perform varying j from 0 until j = n \n                move a(1 + function mod(i + j, 26) : 1) \n                  to result(2*(n * i + j) + 1 : 1)\n              end-perform\n              if i<n - 1 move lf to result(2*(n * i + n) : 1)\n            end-perform.\n       end program Grid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22650,"user_id":168,"body":"       identification division.\n       program-id. Grid.\n      \n       data division.\n       working-storage section.\n       01 i   usage index.\n       01 j   usage index.\n       01 p   usage index.\n       01 c   pic x.\n      \n       linkage section.\n       01 n           pic s9(2).\n       01 result      pic x(20000).\n      \n       procedure division using n result.\n          initialize result\n          if n <= 0 then goback end-if\n          move 1 to p\n          perform varying i from 0 until i = n\n                    after j from 0 until j = n\n              move space to c\n              if j = n - 1 and i <> n - 1 then move x'0a' to c end-if\n              string function char(98 + function mod(i + j, 26)) c\n                into result with pointer p\n          end-perform\n          goback.\n       end program Grid.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22651,"user_id":53,"body":"       identification division.\n       program-id. Grid.\n       data division.\n       working-storage section.\n       01 lf          pic x.\n       01 alpha       pic a(26) value 'abcdefghijklmnopqrstuvwxyz'.\n       01 redefines alpha.\n          03 d        pic a occurs 26.\n       local-storage section.\n       01 i           usage index.\n       01 j           usage index.\n       01 k           usage index.\n       01 l           usage index.\n       linkage section.\n       01 n           pic s9(2).\n       01 result      pic x(20000).\n       procedure division using n result.\n          initialize result\n          if n < 1 then goback end-if\n          move function char(11) to lf\n          set i j l to 1\n          perform varying k from 1 until k > n ** 2\n            if function rem(k, n) is zero\n               string d(i) lf into result with pointer j\n               move function max(1, function rem(l + 1, 27)) to l i\n            else\n               string d(i) space into result with pointer j\n               compute i = function max(1, function rem(i + 1, 27))\n            end-if\n          end-perform\n          move space to result(j - 1:1)\n          goback.\n       end program Grid.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"60b744478e8d62003d327e6a":[{"id":22652,"user_id":53,"body":"       identification division.\n       program-id. IsInCantor.\n       data division.\n       local-storage section.\n       01 m           pic 9(9).\n       linkage section.\n       01 num         pic 9(8).\n       01 den         pic 9(8).\n       01 n           pic 9(4).\n       01 result      pic 9.\n       procedure division using num den n result.\n          initialize result\n          if num > den goback end-if\n          move num to m\n          perform n times\n             multiply 3 by m\n             if m > den and m < den * 2 then goback end-if\n             move function rem(m, den) to m\n          end-perform\n          set result to 1\n          goback.\n       end program IsInCantor.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22653,"user_id":50,"body":"      * Implementation of Mortonfox's Python solution\n      * https:\/\/www.codewars.com\/kata\/reviews\/60b8a4408a11e7000110c32e\/groups\/60c788c445d540000143ae1e\n       identification division.\n       program-id. IsInCantor.\n      \n       data division.\n       local-storage section.\n       01 nu          pic 9(9).\n      \n       linkage section.\n       01 num         pic 9(8).\n       01 den         pic 9(8).\n       01 n           pic 9(4).\n       01 result      pic 9.\n      \n       procedure division using num den n result.\n      \n          initialize result\n          if num > den goback end-if\n          move num to nu\n          perform n times\n             multiply 3 by nu\n             if nu > den and nu < den * 2 goback end-if\n             move function rem(nu, den) to nu\n          end-perform\n          move 1 to result.\n       end program IsInCantor.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61123a6f2446320021db987d":[{"id":22654,"user_id":421,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n           set result to -1\n           perform until function rem(n, 3) = 0\n               divide n by 10 giving n\n           end-perform\n           if n <> 0 then\n               set result to n\n           end-if.\n       end program prev-mult-of-three.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22655,"user_id":168,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       data division.\n       working-storage section.\n       01 i           pic 9.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n          perform varying i from 8 by -1 until i = 0\n            if function mod(n(1:i), 3) = 0\n               move n(1:i) to result\n               exit perform\n            end-if\n          end-perform\n          if result = 0 then move -1 to result.\n       end program prev-mult-of-three.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22656,"user_id":53,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n          perform until function rem (n, 3) = 0\n            divide 10 into n\n          end-perform,\n          if n > 0 then move n to result\n          else move -1 to result end-if,\n          goback.\n       end program prev-mult-of-three.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22657,"user_id":null,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n          perform until n = 0 or function mod(n, 3) = 0\n             compute n = n \/ 10\n          end-perform\n          if n = 0 then\n             move -1 to result\n          else\n             move n to result\n          end-if\n          goback.\n       end program prev-mult-of-three.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22658,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. prev-mult-of-three.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N           PIC  9(8).\n       01  RESULT      PIC S9(8) SIGN LEADING.\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM UNTIL FUNCTION REM(N, 3) = 0  OR  N < 10\n               DIVIDE N BY 10 GIVING N\n           END-PERFORM\n      \n           MOVE -1  TO RESULT\n           IF  FUNCTION REM(N, 3) = 0\n               MOVE N  TO RESULT\n           END-IF.\n       END PROGRAM prev-mult-of-three.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22659,"user_id":null,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n         perform until function mod(n, 3) = 0\n           if n < 10 then\n             set result to -1\n             goback\n           else\n             divide 10 into n\n           end-if\n         end-perform\n         set result to n.\n       end program prev-mult-of-three.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22660,"user_id":53,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n          move -1 to result\n          perform until function rem(n, 3) = 0\n            divide 10 into n\n          end-perform\n          if n <> 0 then move n to result end-if\n          goback.\n       end program prev-mult-of-three.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22661,"user_id":50,"body":"       identification division.\n       program-id. prev-mult-of-three.\n       data division.\n       linkage section.\n       01 n           PIC 9(8).\n       01 result      PIC s9(8) sign leading.\n       procedure division using n result.\n          \n        perform until n = 0\n          if function rem(n, 3) = 0\n            exit perform\n          end-if\n          divide 10 into n giving n\n        end-perform\n        if n = 0\n          move -1 to result\n        else\n          move n to result\n        end-if\n\n          goback.\n       end program prev-mult-of-three.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6129095b201d6b000e5a33f0":[{"id":22662,"user_id":527,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n           compute result = x * (y + 1) * (z + 1)\n                          + y * (z + 1) * (x + 1)\n                          + z * (x + 1) * (y + 1).\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22663,"user_id":421,"body":"       identification division.\n       program-id. boxlines.  \n       author. \"ejini\u6218\u795e\".\n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n           compute result = x * (y + 1) * (z + 1) + \n                            (x + 1) * y * (z + 1) + \n                            (x + 1) * (y + 1) * z.\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22664,"user_id":null,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n           compute result = 2*(x*y + y*z + x*z) + 3*x*y*z + x + y + z\n           goback.\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22665,"user_id":null,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n           compute result = x * y * z * 12 -\n                           ((x - 1) * y + x * (y - 1) +\n                            (y - 1) * z + y * (z - 1) +\n                            (x - 1) * z + x * (z - 1)) * 2 -\n                           ((x - 1) * (y - 1) * z +\n                            (y - 1) * (z - 1) * x +\n                            (x - 1) * (z - 1) * y) * 3\n           goback.\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22666,"user_id":163,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n           COMPUTE RESULT = x * (y + 1) * (z + 1) +\n                            (x + 1) * y * (z + 1) +\n                            (x + 1) * (y + 1) * z.\n           goback.\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22667,"user_id":168,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n           compute result = ((x + 1) * y + x * (y + 1)) * (z + 1) \n                            + (x + 1) * (y + 1) * z.\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22668,"user_id":50,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  result     pic 9(15).   \n       procedure division using x y z result.\n      \n            compute result = z * (3 * x * y + 1 + 2 * (x + y))\n                           + 2 * x * y + x + y\n           goback.\n       end program boxlines.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22669,"user_id":53,"body":"       identification division.\n       program-id. boxlines.        \n       data division.\n       linkage section.\n       01  x          pic 9(5).\n       01  y          pic 9(5).\n       01  z          pic 9(5).       \n       01  r          pic 9(15).   \n       procedure division using x y z r.\n          compute r = x * (y + 1) * (z + 1) + \n                      (x + 1) * y * (z + 1) + \n                      (x + 1) * (y + 1) * z\n          goback.\n       end program boxlines.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6138ee916cb50f00227648d9":[{"id":22670,"user_id":50,"body":"       identification division.\n       program-id. Joust.\n      \n       data division.\n       working-storage section.\n       01  sp               pic x(100).\n       01  i                usage index.\n      \n       linkage section.\n       01  knights.\n           03  l            pic 9(3).\n           03  k1           pic x(102).\n           03  k2           pic x(102).\n       01  v1               pic 9. \n       01  v2               pic 9. \n       01 result.\n           03  rl           pic 9(3).\n           03  r1           pic x(102).\n           03  r2           pic x(102).\n      \n       procedure division using knights v1 v2 result.\n      \n          if zero = v1 and v2\n             move knights to result\n             goback\n          end-if\n          perform varying i from 1 until k2(i:1) = '<'\n          continue end-perform\n          if i < 4\n             move knights to result\n             goback\n          end-if\n          move l to rl\n          compute i rounded mode toward-greater =\n                                 (i - 3) \/ (v1 + v2)\n          string sp(1:i * v1) k1 into r1\n          move k2(1 + i * v2:) to r2.\n      \n       end program Joust.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"614ac445f13ead000f91b4d0":[{"id":22671,"user_id":168,"body":"       identification division.\n       program-id. Solve.\n      \n       data division.\n       working-storage section.\n       01 v           pic s9(10).\n       01 s           pic s9.\n       01 xs          pic s9.\n       01 lhs         pic s9.\n       01 i           usage index.\n       01 t           pic x(10).\n      \n       linkage section.\n       01 equation    pic x(65).\n       01 result      pic s9(6) sign leading.\n      \n       procedure division using equation result.\n          move 0 to v\n          move 1 to i s lhs xs\n          perform until i > length of equation\n              unstring equation delimited by all ' '\n                  into t with pointer i\n              evaluate t\n                  when '=' move -1 to lhs s\n                  when '+' move lhs to s\n                  when '-' compute s = -lhs\n                  when 'x' compute xs = -s\n                  when other compute v = v + function numval(t) * s\n              end-evaluate\n          end-perform\n          compute result = v * xs\n          goback.\n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22672,"user_id":null,"body":"       identification division.\n       program-id. Solve.\n      \n       data division.\n      \n       working-storage section.\n       01  ws-variables.\n           05 ind         pic s9(4) comp.\n           05 memb        pic  x  value 'r'.\n           05 x-memb      pic  x.\n           05 x-sign      pic  x. \n           05 power       pic 9(2).\n           05 term        pic s9(6).\n           05 total-l     pic s9(6).\n           05 total-r     pic s9(6).\n           05 eqn         pic 9.\n       01  ws-equation.\n           05 eq  pic x occurs 67.\n\n       linkage section.\n       01 equation    pic x(65).\n       01 result      pic s9(6) sign leading.\n      \n       procedure division using equation result.\n          initialize result\n          initialize  ws-variables\n          move  '; ' to  ws-equation\n          move  equation  to  ws-equation(2:)\n          move length of equation  to  ind\n          move 'r'  to  memb\n      \n          perform  until  ind  equal zeroes\n              evaluate  eq(ind)\n                  when  spaces\n                      move 0 to power\n                  when  '0' thru '9'\n                      move  eq(ind)  to  eqn\n                      compute  term  =  term + eqn * (10 ** power)\n                      add 1  to power\n                  when  '+'\n                      if  memb  equal 'r'\n                          add term to total-r\n                      else\n                          add term to total-l\n                      end-if\n                      move  0   to  term\n                  when  '-'\n                      if  memb  equal 'r'\n                          subtract  term  from  total-r\n                      else\n                          subtract  term  from  total-l\n                      end-if\n\n                      if  term equal  0\n                          move  '-'  to  x-sign\n                      else\n                          move  0   to  term\n                      end-if\n      \n                  when  '='\n                      move  'l'  to  memb\n                      add  term  to total-r\n                      move 0  to term\n\n                  when  ';'\n                      add  term  to  total-l\n                      move 0  to term\n      \n                  when  'x'\n                      move  0  to term                \n                      if  memb   equal  'l'\n                          move  'l'  to  x-memb   \n                      else\n                          move  'r'  to  x-memb   \n                      end-if\n                      \n              end-evaluate\n              \n              subtract  1  from  ind\n          end-perform\n          if  x-memb  =  'l'\n              compute  result  =  total-r  -  total-l\n          else\n              compute  result  =  total-l  -  total-r\n          end-if\n       \n          if  x-sign = '-'\n              compute result =  result * -1\n          end-if\n           \n          goback.\n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22673,"user_id":50,"body":"       identification division.\n       program-id. Solve.\n      \n       data division.\n       working-storage section.\n       01 token       pic x(6).\n          88  negX      value '- x'.\n       01 q           pic x.\n       01 a           pic x(65).\n       01 b           pic x(65).\n      \n       local-storage section.\n       01 k           pic 9.\n          88 xInA     value 1.\n       01 neg         pic s9 value 1.\n       01 i           usage index value 1.\n      \n       linkage section.\n       01 equation    pic x(65).\n       01 x           pic s9(6) sign leading.\n      \n       procedure division using equation x.\n      \n          initialize x\n          unstring equation delimited by '= '\n                   into a with pointer i\n          move equation(i:) to b\n          set i to 1\n          perform until i > function stored-char-length(a)\n            unstring a delimited by space into token with pointer i\n            evaluate token\n            when '-' move -1 to neg\n            when '+' move  1 to neg\n            when other\n                if function test-numval(token) = 0\n                     compute x = x - neg * function numval(token)\n                else move 1 to k end-if\n                move 1 to neg\n          end-perform\n          move 1 to neg\n          set i to 1\n          perform until i > function stored-char-length(b)\n            unstring b delimited by space into token with pointer i\n            evaluate token\n            when '-' move -1 to neg\n            when '+' move  1 to neg\n            when other\n                if xInA or function test-numval(token) = 0\n                    compute x = x + neg * function numval(token)\n                end-if\n                move 1 to neg\n          end-perform\n          display x ', ' k\n          unstring equation delimited by '- x' into q delimiter in token\n          if (negX and xInA) or (not negX and not xIna)\n              multiply -1 by x.\n      \n       end program Solve.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61559bc4ead5b1004f1aba83":[{"id":22674,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-SPIRAL.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(16).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE RESULT = (N + 1) * (N + 1) \/ 2 - 1.\n       END PROGRAM COUNT-SPIRAL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22675,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-SPIRAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(16).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION USING N RESULT.\n         COMPUTE RESULT = N * N \/ 2 + N - FUNCTION MOD(N + 1, 2).\n       END PROGRAM COUNT-SPIRAL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22676,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-SPIRAL.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 Q           PIC 9(16).\n       LINKAGE SECTION.\n       01 N           PIC 9(16).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION USING N RESULT.\n           COMPUTE Q = N \/ 4\n           IF FUNCTION MOD(N, 4) = 0 THEN SUBTRACT 1 FROM Q.\n           COMPUTE RESULT = 4 * Q * (N - 2 * Q + 1)\n           EVALUATE FUNCTION MOD(N, 4)\n               WHEN 0 ADD 11 TO RESULT\n               WHEN 1 ADD 1 TO RESULT\n               WHEN 2 ADD 3 TO RESULT\n               WHEN 3 ADD 7 TO RESULT\n           END-EVALUATE.\n       END PROGRAM COUNT-SPIRAL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22677,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. COUNT-SPIRAL.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N           PIC 9(16).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION USING N RESULT.\n       COMPUTE RESULT = (N + 1) ** 2 \/ 2 - 1 .\n       END PROGRAM COUNT-SPIRAL.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22678,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 ND          PIC 9(15).\n       01 RESULT      PIC 9(31).\n       01 DUMMY       PIC 9(15).\n       01 REM         PIC 9.\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL SECTION.\n           DIVIDE N BY 2 GIVING DUMMY REMAINDER REM.\n           IF REM IS NOT EQUAL TO ZERO\n               DIVIDE N BY 2 GIVING ND\n               MOVE ND TO RESULT\n               ADD 1 TO ND\n               MULTIPLY ND BY RESULT\n               MULTIPLY 2 BY RESULT\n               ADD N TO RESULT\n           ELSE\n               MOVE N TO ND\n               SUBTRACT 1 FROM ND\n               DIVIDE 2 INTO ND\n               MOVE ND TO RESULT\n               ADD 1 TO RESULT\n               MULTIPLY ND BY RESULT\n               DIVIDE 2 INTO RESULT\n               MULTIPLY 2 BY RESULT\n               ADD ND TO RESULT\n               MULTIPLY 2 BY RESULT\n               ADD 1, N TO RESULT\n           END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22679,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 RESULT      PIC 9(31).\n       LOCAL-STORAGE SECTION.\n       01 q           PIC 9(31).\n       01 r           PIC 9(31).\n       01 B           PIC 9(31).\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL SECTION.\n       mOvE 2 tO B\n       dIvIdE B iNtO n gIVInG q rEmAiNdEr r\n       cOMpuTE rEsUlT = 2 * ( q + 1 ) * \n                            ( q + r )\n       suBtRaCt 1 fRom reSUlt giving REsuLT\n       END pROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22680,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL SECTION.\n       compute result = (n + 1)**2 \/ 2 - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22681,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 RESULT      PIC 9(31).\n       01 WS-TEMP     PIC 9(15).\n       01 WS-REM      PIC 9.\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL SECTION.\n           DIVIDE N BY 2 GIVING WS-TEMP REMAINDER WS-REM\n           IF WS-REM EQUAL ZEROES\n              COMPUTE RESULT = (N * (WS-TEMP + 1) - 1)\n           ELSE\n              COMPUTE RESULT = (N * (WS-TEMP + 1)) + WS-TEMP\n           END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22682,"user_id":76,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL\n         COMPUTE RESULT = (N + 1) * (N + 1) \/ 2 - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22683,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL SECTION.\n       COMPUTE RESULT = N + (N * (N + 1) \/ 2 - (N \/ 2 + 1))\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22684,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 N           PIC 9(15).\n       01 RESULT      PIC 9(31).\n       PROCEDURE DIVISION.\n       COUNT-SPIRAL SECTION.\n          COMPUTE RESULT = (N + 1) ** 2 \/ 2 - 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6159b2ad19b85f0027bfe964":[{"id":22685,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A               PIC X(100).\n       01 B               PIC X(100).\n       01 NAME            PIC X(200).                        \n       PROCEDURE DIVISION USING A B NAME.\n           STRING A DELIMITED BY SPACE\n                  B DELIMITED BY SIZE\n           INTO NAME           \n           GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22686,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 STRING-01           PIC X(100).\n       01 STRING-02           PIC X(100).\n       01 ANSWER              PIC X(200).                       \n       PROCEDURE DIVISION USING STRING-01 STRING-02 ANSWER.\n        STRING STRING-01 DELIMITED BY SPACE\n               STRING-02 DELIMITED BY SIZE\n          INTO ANSWER\n        END-STRING.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22687,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 STRING-01           PIC X(100).\n       01 STRING-02           PIC X(100).\n       01 ANSWER              PIC X(2000).\n       PROCEDURE DIVISION USING STRING-01 STRING-02 ANSWER.\n         STRING STRING-01 DELIMITED BY SPACE\n                STRING-02 DELIMITED BY SIZE\n         INTO ANSWER.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22688,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC X(100).\n       01 B           PIC X(100).\n       01 NAME        PIC X(200).                        \n       PROCEDURE DIVISION USING A B NAME.\n          STRING A DELIMITED BY SPACE\n                 B DELIMITED BY SIZE\n               INTO NAME\n            END-STRING\n          GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22689,"user_id":50,"body":"          IDENTIFICATION DIVISION.\n          PROGRAM-ID. SOLUTION.\n          DATA DIVISION.\n          LINKAGE section.\n          01 a           PIC X(100).\n          01 b           PIC X(100).\n          01 c              PIC X(200).\n          PROCEDURE division using a b c.\n            string a delimited by space\n                b\n               into c\n            goback.\n          end program SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22690,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 STRING-01           PIC X(100).\n       01 STRING-02           PIC X(100).\n       01 ANSWER              PIC X(200).\n       PROCEDURE DIVISION USING STRING-01 STRING-02 ANSWER.\n       STRING STRING-01 DELIMITED BY SPACE\n              STRING-02 DELIMITED BY SIZE\n              INTO ANSWER\n       END-STRING\n       GOBACK.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22691,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 A           PIC X(100).\n       01 B           PIC X(100).\n       01 ANSWER      PIC X(100).\n       PROCEDURE DIVISION USING A B ANSWER.\n        STRING A DELIMITED BY SPACE \n               B DELIMITED BY SIZE \n          INTO ANSWER.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22692,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 C           PIC 99 VALUE 1 .\n       LINKAGE SECTION.\n       01 A           PIC X(100).\n       01 B           PIC X(100).\n       01 NAME        PIC X(100).\n       PROCEDURE DIVISION USING A B NAME.\n           INITIALIZE NAME\n           STRING A DELIMITED BY SPACE\n                  B DELIMITED BY SIZE\n                  INTO NAME\n                  WITH POINTER C\n           END-STRING.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22693,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC A(100).\n       01 B           PIC A(100).\n       01 NAME        PIC A(200).\n       PROCEDURE DIVISION.\n       SOLUTION.\n           STRING A DELIMITED BY SPACE B DELIMITED BY SIZE INTO NAME\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22694,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n          01 A           PIC X(100).\n          01 B           PIC X(100).\n          01 NAME        PIC X(200).  \n          01 COUNTER     PIC 9(2).\n          \n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n     \n          MOVE 1 TO COUNTER.\n          STRING A DELIMITED BY SPACE \n                 B DELIMITED BY SIZE\n            INTO NAME WITH POINTER COUNTER.\n        \n\n        END-SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22695,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC A(100).\n       01 B           PIC A(100).\n       01 NAME        PIC A(200).                         \n       PROCEDURE DIVISION.\n       SOLUTION.\n       STRING A DELIMITED BY SPACE\n              B DELIMITED BY SIZE\n              INTO NAME.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22696,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC X(100).\n       01 B           PIC X(100).\n       01 ANSWER      PIC X(200).\n       01 NAME        PIC X(200).\n       PROCEDURE DIVISION.\n        SOLUTION.\n      \n      *STRING-01 IS DELIMITED BY SPACE AND STRING-02 IS DELIMITED BY SIZE STRING THEM INTO ANSWER WITH POINTER BEING 1.\n           MOVE A  TO ANSWER(1:100).   \n           MOVE B  TO ANSWER(101:100).\n           STRING A DELIMITED BY SPACES INTO NAME.\n           STRING A DELIMITED BY SPACES B DELIMITED BY SIZE INTO NAME.\n           DISPLAY A '+' B '=' NAME.\n      \n       END PROGRAM KATA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22697,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A                  PIC X(100).\n       01 B           PIC X(100).\n       01 NAME                PIC X(200).                         \n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n         STRING A DELIMITED BY SPACE\n                B DELIMITED BY SIZE\n   \t\t          INTO NAME     \n\n      *****STRING-01 IS DELIMITED BY SPACE AND STRING-02 IS DELIMITED BY SIZE STRING THEM INTO ANSWER WITH POINTER BEING 1\n\n       END PROGRAM KATA.\n      \n      \n      \n      * YEPP","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22698,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID.  KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC X(100).\n       01 B           PIC X(100).\n       01 NAME        PIC X(200).\n       \n       PROCEDURE DIVISION.\n       SOLUTION.\n           STRING A DELIMITED BY SPACE, \n                  B DELIMITED BY SIZE\n                  INTO NAME.\n      \n       END PROGRAM KATA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22699,"user_id":438,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC A(100).\n       01 B           PIC A(100).\n       01 NAME        PIC A(100). \n       PROCEDURE DIVISION.\n       SOLUTION.\n         STRING A DELIMITED BY SPACE B DELIMITED BY SIZE INTO NAME\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22700,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A         PIC A(100).\n       01 B         PIC A(100).\n       01 NAME      PIC A(200).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n           STRING A DELIMITED BY SPACE\n                  B DELIMITED BY SIZE\n                  INTO NAME\n           END-STRING.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22701,"user_id":106,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A    PIC X(100).\n       01 B    PIC X(100).\n       01 NAME PIC X(200).\n       PROCEDURE DIVISION.\n       SOLUTION.\n            STRING A DELIMITED BY SPACE\n                   B DELIMITED BY SIZE\n               INTO NAME\n            END-STRING\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22702,"user_id":76,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A           PIC X(100).\n       01 B           PIC X(100).\n       01 NAME        PIC X(200). \n       PROCEDURE DIVISION.\n       SOLUTION\n         STRING A DELIMITED BY SPACE, B INTO NAME\n       END PROGRAM KATA","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22703,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A                 PIC A(100).\n       01 B                 PIC A(100).\n       01 NAME              PIC A(200).                         \n       PROCEDURE DIVISION.\n       SOLUTION.\n            STRING A DELIMITED BY SPACE\n                   B DELIMITED BY SIZE\n               INTO NAME\n            END-STRING.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61618efa52747c000dd1347c":[{"id":22704,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-DATE . \n           05 P PIC 9(2).\n           05 Q PIC 9(2).\n           05 R PIC 9(2).\n       01 RESULT.\n           05 Y PIC 9(4).\n           05 M PIC 9(2).\n           05 D PIC 9(2).\n       PROCEDURE DIVISION USING INPUT-DATE RESULT.\n           IF Q OF INPUT-DATE > 12 THEN\n               MOVE FUNCTION DATE-OF-INTEGER(\n                    R OF INPUT-DATE + 100 \n                        * ((Q OF INPUT-DATE - 13) + 87 \n                        * P OF INPUT-DATE) + \n                            FUNCTION INTEGER-OF-DATE(20000101)) \n              TO RESULT\n           ELSE\n               COMPUTE Y OF RESULT = 1900 + P OF INPUT-DATE\n               COMPUTE M OF RESULT = Q OF INPUT-DATE\n               COMPUTE D OF RESULT = R OF INPUT-DATE\n           END-IF.\n        END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22705,"user_id":168,"body":"       identification division.\n       program-id. SOLUTION.\n       data division.\n       linkage section.\n       01 input-date.\n          05 p    pic 99.\n          05 q    pic 99.\n          05 r    pic 99.\n       01 result.\n          05 y    pic 9999.\n          05 m    pic 99.\n          05 d    pic 99.\n       01 res-int redefines result pic 9(8).\n       procedure division using input-date result.\n           if q <= 12 then\n                compute y = 1900 + p\n                move q to m\n                move r to d\n           else\n                subtract 13 from q\n                move 20000101 to res-int\n                compute res-int = function integer-of-date(res-int) \n                                    + r + q * 100 + p * 8700\n                compute res-int = function date-of-integer(res-int)\n           end-if.\n       end program SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22706,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 T PIC 9(8).\n       01 U PIC 9(8).\n       LINKAGE SECTION.\n       01 INPUT-DATE . \n           05 P PIC 9(2).\n           05 Q PIC 9(2).\n           05 R PIC 9(2).\n       01 RESULT.\n           05 Y PIC 9(4).\n           05 M PIC 9(2).\n           05 D PIC 9(2).\n       PROCEDURE DIVISION USING INPUT-DATE RESULT.\n           IF Q OF INPUT-DATE > 12 THEN\n               MOVE FUNCTION INTEGER-OF-DATE(20000101) TO T\n               COMPUTE U = R OF INPUT-DATE + 100 \n                        * ((Q OF INPUT-DATE - 13) + 87 \n                        * P OF INPUT-DATE) + T\n               MOVE FUNCTION DATE-OF-INTEGER(U) TO RESULT\n           ELSE\n               COMPUTE Y OF RESULT = 1900 + P OF INPUT-DATE\n               COMPUTE M OF RESULT = Q OF INPUT-DATE\n               COMPUTE D OF RESULT = R OF INPUT-DATE\n           END-IF.\n        END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22707,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  INPUT-DATE.\n           05  P                              PIC 9(4).\n           05  Q                              PIC 9(2).\n           05  R                              PIC 9(2).\n       01  INPUT-DATE-N REDEFINES INPUT-DATE  PIC 9(8).\n       01  RESULT.\n           05  Y                              PIC 9(4).\n           05  M                              PIC 9(2).\n           05  D                              PIC 9(2).\n       01  RESULT-N     REDEFINES RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       SOLUTION.\n           IF  Q < 13\n               COMPUTE RESULT-N = INPUT-DATE-N + 19000000\n           ELSE\n               COMPUTE INPUT-DATE-N = INPUT-DATE-N - ((P + 1) * 1300)\n                                    + 145732\n               MOVE FUNCTION DATE-OF-INTEGER(INPUT-DATE-N)  TO RESULT\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22708,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n      * Input :\n       01 INPUT-DATE.\n          05 P    PIC 99.\n          05 Q    PIC 99.\n          05 R    PIC 99.\n      * Output :\n       01 RESULT.\n          05 Y    PIC 9999.\n          05 M    PIC 99.\n          05 D    PIC 99.\n       01 res-int redefines result pic 9(8).\n       PROCEDURE DIVISION.\n       SOLUTION.\n              if Q <= 12 then\n                  compute Y = 1900 + P\n                  move Q to M\n                  move R to D\n              else\n                  subtract 13 from Q\n                  move 20000101 to res-int\n                  compute res-int = function integer-of-date(res-int) \n                    + R + Q * 100 + P * 8700\n                  compute res-int = function date-of-integer(res-int)\n              end-if\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22709,"user_id":null,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 CONSTANTS.\n         05 CTN-20000101   PIC 9(8) VALUE 20000101.\n       01 INPUT-DATE.\n         05 P              PIC 9(02).\n         05 Q              PIC 9(02).\n         05 R              PIC 9(02).\n       01 RESULT.\n         05 Y              PIC 9(04).\n         05 M              PIC 9(02).\n         05 D              PIC 9(02).\n       01 VARIABLES.\n         05 WS-TOTAL-D     PIC 9(06).\n         05 WS-AUX         PIC 9(08).\n      \n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n           IF Q < 13 THEN\n            COMPUTE Y = P + 1900\n            MOVE Q TO M\n            MOVE R TO D\n           ELSE \n            COMPUTE WS-TOTAL-D =\n                   (P * 8700) + ((Q - 13) * 100) + R\n            MOVE FUNCTION INTEGER-OF-DATE(CTN-20000101) TO WS-AUX\n            ADD WS-TOTAL-D TO WS-AUX\n            MOVE FUNCTION DATE-OF-INTEGER(WS-AUX) TO RESULT\n           END-IF\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22710,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-DATE.\n          05 P PIC 9(2).\n          05 Q PIC 9(2).\n          05 R PIC 9(2).\n           \n       01 RESULT.\n         05 Y PIC 9(4).\n         05 M PIC 9(2).\n         05 D PIC 9(2).\n      \n       01 DIAS   PIC 9(6).\n       01 FECSAL PIC 9(8).\n      \n       PROCEDURE DIVISION.\n        SOLUTION.\n      \n           IF Q < 13\n              COMPUTE Y = 1900 + P\n              COMPUTE M = Q\n              COMPUTE D = R\n           ELSE\n              DISPLAY INPUT-DATE\n      *       COMPUTE Q = Q - 13 \n      *       MOVE INPUT-DATE TO DIAS\n      *       STRING P Q R DELIMITED BY SIZE INTO DIAS\n              COMPUTE DIAS = (P * 87 + Q - 13) * 100 + R \n            \n              COMPUTE FECSAL = \n                           FUNCTION DATE-OF-INTEGER (\n                           FUNCTION INTEGER-OF-DATE(20000101) + DIAS)\n              MOVE FECSAL TO RESULT\n              \n              DISPLAY RESULT\n            END-IF.\n      \n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22711,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-DATE.\n           05 P       PIC 9(2).\n           05 Q       PIC 9(2).\n           05 R       PIC 9(2).\n       01 TEMP        PIC 9(8).\n       01 RESULT.\n           05 Y       PIC 9(4).\n           05 M       PIC 9(2).\n           05 D       PIC 9(2).\n       PROCEDURE DIVISION.\n       SOLUTION.\n           IF Q <= 12 THEN\n               COMPUTE Y = 1900 + P\n               COMPUTE M = Q\n               COMPUTE D = R\n           ELSE\n               COMPUTE TEMP = FUNCTION DATE-OF-INTEGER(\n                                 FUNCTION INTEGER-OF-DATE(20000101) +\n                                 (P * 87 + Q - 13) * 100 + R\n                               )\n               MOVE TEMP TO RESULT\n           END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22712,"user_id":76,"body":"123456*        \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n        01 INPUT-DATE.\n          02 P       PIC 99.\n          02 Q       PIC 99.\n          02 R       PIC 99.\n        01 RESULT.\n          02 Y       PIC 9999.\n          02 M       PIC 99.\n          02 D       PIC 99.\n        01 Y2K       PIC 9(8) VALUE 20000101.\n        01 dateAsInt PIC 9(8) VALUE ZEROS.\n        01 daysToAdd PIC 9(8) VALUE ZEROS.\n       PROCEDURE DIVISION.\n       SOLUTION.\n            IF Q < 13 THEN\n              COMPUTE Y = 1900 + P\n              MOVE Q TO M\n              MOVE R TO D\n            ELSE\n              COMPUTE dateAsInt = FUNCTION INTEGER-OF-DATE(Y2K)\n              COMPUTE daysToAdd = P * 8700 + (Q - 13) * 100 + R\n              ADD daysToAdd TO dateAsInt\n              MOVE FUNCTION DATE-OF-INTEGER(dateAsInt) TO RESULT\n            END-IF\n        ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22713,"user_id":106,"body":"      * https:\/\/codegolf.stackexchange.com\/q\/167962\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-DATE.\n           05 P       PIC 9(2).\n           05 Q       PIC 9(2).\n           05 R       PIC 9(2).\n       01 RESULT.\n           05 Y       PIC 9(4).\n           05 M       PIC 9(2).\n           05 D       PIC 9(2).\n       01 T PIC 9(8).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n           IF Q <= 12 THEN\n               COMPUTE Y = P + 1900\n               COMPUTE M = Q\n               COMPUTE D = R\n           ELSE\n               MOVE FUNCTION INTEGER-OF-DATE(20000101) TO T\n               COMPUTE T = R + 100 * ((Q - 13) + 87 * P) + T\n               MOVE FUNCTION DATE-OF-INTEGER(T) TO RESULT\n           END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22714,"user_id":438,"body":"      * It took me approximately 45 minutes.       \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-DATE.\n           05 P       PIC 9(2).\n           05 Q       PIC 9(2).\n           05 R       PIC 9(2).\n       01 RESULT.\n           05 Y       PIC 9(4).\n           05 M       PIC 9(2).\n           05 D       PIC 9(2).\n       01 TEMP-VAR    PIC 9(8).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n            IF Q OF INPUT-DATE <= 12 THEN \n                COMPUTE Y OF RESULT = 1900 + P OF INPUT-DATE\n                COMPUTE M OF RESULT = Q OF INPUT-DATE\n                COMPUTE D OF RESULT = R OF INPUT-DATE\n            ELSE \n                COMPUTE TEMP-VAR = 87 * P OF INPUT-DATE\n                COMPUTE TEMP-VAR = TEMP-VAR + (Q OF INPUT-DATE - 13)\n                COMPUTE TEMP-VAR = 145732 + R OF INPUT-DATE + 100 \n                                    * TEMP-VAR\n                COMPUTE TEMP-VAR = FUNCTION DATE-OF-INTEGER(TEMP-VAR)\n                MOVE TEMP-VAR TO RESULT\n            END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22715,"user_id":53,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 A PIC 9(8).\n       01 B PIC 9(8).\n       01 C PIC 9(8).\n       01 E PIC 9(8).\n       01 INPUT-DATE. \n          05 P PIC 9(2).\n          05 Q PIC 9(2).\n          05 R PIC 9(2).\n       01 RESULT.\n          05 Y PIC 9(4).\n          05 M PIC 9(2).\n          05 D PIC 9(2).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n            IF Q OF INPUT-DATE <= 12 THEN\n                COMPUTE Y OF RESULT = P OF INPUT-DATE + 1900\n                COMPUTE M OF RESULT = Q OF INPUT-DATE\n                COMPUTE D OF RESULT = R OF INPUT-DATE\n            ELSE\n                MOVE FUNCTION INTEGER-OF-DATE(20000101) TO A\n                COMPUTE E = 87 * P OF INPUT-DATE\n                COMPUTE C = E + (Q OF INPUT-DATE - 13)\n                COMPUTE B = A + R OF INPUT-DATE + 100 * C\n                MOVE FUNCTION DATE-OF-INTEGER(B) TO RESULT\n            END-IF.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61619bff52747c000dd2b159":[{"id":22716,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       AUTHOR. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-01. \n           05 A         PIC 9(5). \n           05 B         PIC 9(5).\n           05 C         PIC 9(5).\n       01 RESULT.\n           05 D         PIC 9(6).\n           05 E         PIC 9(6).\n           05 F         PIC 9(6).\n       PROCEDURE DIVISION USING INPUT-01 RESULT.       \n           MULTIPLY A BY 10 GIVING D\n           ADD 30 TO B GIVING E\n           SUBTRACT 10 FROM C GIVING F.          \n       END PROGRAM SOLUTION.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22717,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-01.\n           02 A PIC 9(5).\n           02 B PIC 9(5).\n           02 C PIC 9(5).\n       01 RESULT.\n           02 D PIC 9(6).\n           02 E PIC 9(6).\n           02 F PIC 9(6).\n       PROCEDURE DIVISION USING INPUT-01 RESULT.\n           COMPUTE D = 10 * A\n           COMPUTE E = 30 + B\n           COMPUTE F = C - 10.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22718,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 arr.\n         05 a pic 9(5).\n         05 b pic 9(5).\n         05 c pic 9(5).\n       01 o.\n          05 d pic 9(6).\n          05 e pic 9(6).\n          05 f pic 9(6).\n       PROCEDURE DIVISION USING arr o.\n          compute d = 10 * a\n          compute e = 30 + b\n          compute f = c - 10\n          goback.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22719,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-01.\n          05 A PIC 9(5).\n          05 B PIC 9(5).\n          05 C PIC 9(5).\n       01 RESULT.\n          05 D PIC 9(6).\n          05 E PIC 9(6).\n          05 F PIC 9(6).\n       PROCEDURE DIVISION USING INPUT-01 RESULT.\n         COMPUTE D OF RESULT = A OF INPUT-01 * 10\n         COMPUTE E OF RESULT = B OF INPUT-01 + 30\n         COMPUTE F OF RESULT = C OF INPUT-01 - 10.\n       END PROGRAM SOLUTION.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22720,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-01.\n          05 A PIC 9(5).\n          05 B PIC 9(5).\n          05 C PIC 9(5).\n       01 RESULT.\n          05 D PIC 9(6).\n          05 E PIC 9(6).\n          05 F PIC 9(6).\n       PROCEDURE DIVISION USING INPUT-01 RESULT.\n         COMPUTE D = A * 10\n         COMPUTE E = B + 30\n         COMPUTE F = C - 10.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22721,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. SOLUTION.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 INPUT-01.\n           05 A          PIC 9(5).\n           05 B          PIC 9(5).\n           05 C          PIC 9(5).\n       01 RESULT.\n           05 D          PIC 9(6).\n           05 E          PIC 9(6).\n           05 F          PIC 9(6).\n       PROCEDURE DIVISION USING INPUT-01 RESULT.\n       SOLUTION SECTION.\n          MULTIPLY A OF INPUT-01 BY 10 GIVING D OF RESULT\n          ADD 30 TO B OF INPUT-01 GIVING E OF RESULT\n          SUBTRACT 10 FROM C OF INPUT-01 GIVING F OF RESULT.\n       END PROGRAM SOLUTION.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22722,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01. \n          05 A  PIC 9(05).\n          05 B  PIC 9(05).\n          05 C  PIC 9(05).\n       01 RESULT.    \n          05  D PIC 9(06).\n          05  E PIC 9(06).\n          05  F PIC 9(06).\n      \n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n          COMPUTE D = A * 10.\n          COMPUTE E = B + 30. \n          COMPUTE F = C - 10.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22723,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n         05 A    PIC 9(5).\n         05 B    PIC 9(5).\n         05 C    PIC 9(5).\n       01 RESULT.\n         05 D    PIC 9(6).\n         05 E    PIC 9(6).\n         05 F    PIC 9(6).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n         COMPUTE D = A * 10\n         COMPUTE E = B + 30\n         COMPUTE F = C - 10\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22724,"user_id":518,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n          05 A PIC 9(06).\n          05 B PIC 9(06).\n          05 C PIC 9(06).\n       01 RESULT.\n          05 D PIC 9(06).\n          05 E PIC 9(06).\n          05 F PIC 9(06).\n       PROCEDURE DIVISION.\n       SOLUTION.\n*******\n              \n           MULTIPLY 10 BY A\n           ADD 30 TO B\n           SUBTRACT 10 FROM C\n              \n            MOVE A TO D\n            MOVE B TO E\n            MOVE C TO F\n*******\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22725,"user_id":76,"body":"123456*        \n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n        01 INPUT-01.\n          02 A PIC 9(5).\n          02 B PIC 9(5).\n          02 C PIC 9(5).\n        01 RESULT.\n          02 D PIC 9(6).\n          02 E PIC 9(6).\n          02 F PIC 9(6).\n       PROCEDURE DIVISION.\n       SOLUTION.\n       COMPUTE D = A * 10.\n       COMPUTE E = B + 30.\n       COMPUTE F = C - 10.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22726,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n         01 INPUT-01.\n           05 A         PIC 9(5).\n           05 B         PIC 9(5).\n           05 C         PIC 9(5).\n         01 RESULT.\n           05 D         PIC 9(6).\n           05 E         PIC 9(6).\n           05 F         PIC 9(6).\n       PROCEDURE DIVISION.\n       SOLUTION.\n         COMPUTE D = A * 10\n         COMPUTE E = B + 30\n         COMPUTE F = C - 10\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22727,"user_id":100,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n           05 A       PIC 9(5).\n           05 B       PIC 9(5).\n           05 C       PIC 9(5).\n       01 RESULT.\n           05 D       PIC 9(6).\n           05 E       PIC 9(6).\n           05 F       PIC 9(6).\n       PROCEDURE DIVISION.\n       SOLUTION.\n          COMPUTE D = A * 10 .\n          COMPUTE E = B + 30 .\n          COMPUTE F = C - 10 .\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22728,"user_id":482,"body":"       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n           05 a pic 9(5).\n           05 b pic 9(5).\n           05 c pic 9(5).\n       01 RESULT.\n           05 d pic 9(6).\n           05 e pic 9(6).\n           05 f pic 9(6).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n           multiply A by 10 giving d\n           add 30 to b giving e\n           subtract 10 from c giving f\n       END PROGRAM KATA.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22729,"user_id":53,"body":"123456*\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n         05 A    PIC 9(05).\n         05 B    PIC 9(05).\n         05 C    PIC 9(05).\n       01 RESULT.\n         05 D    PIC 9(06).\n         05 E    PIC 9(06).\n         05 F    PIC 9(06).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n           COMPUTE D = A * 10.\n           COMPUTE E = B + 30.\n           COMPUTE F = C - 10.\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22730,"user_id":438,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n           05 A       PIC 9(5).\n           05 B       PIC 9(5).\n           05 C       PIC 9(5).\n       01 RESULT.\n           05 D       PIC 9(06).\n           05 E       PIC 9(06).\n           05 F       PIC 9(06).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n          COMPUTE D = A * 10\n          COMPUTE E = B + 30\n          COMPUTE F = C - 10\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22731,"user_id":106,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 INPUT-01.\n           05 A PIC 9(5).\n           05 B PIC 9(5).\n           05 C PIC 9(5).\n       01 RESULT.\n           05 D PIC 9(6).\n           05 E PIC 9(6).\n           05 F PIC 9(6).\n       PROCEDURE DIVISION.\n       SOLUTION SECTION.\n           MULTIPLY A OF INPUT-01 BY 10 GIVING D OF RESULT\n           ADD B OF INPUT-01 TO 30 GIVING E OF RESULT\n           SUBTRACT 10 FROM C OF INPUT-01 GIVING F OF RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6167e70fc9bd9b00565ffa4e":[{"id":22732,"user_id":168,"body":"       identification division.\n       program-id. Barista.\n      \n       data division.\n       linkage section.\n       01  coffees.\n           05  len           pic 9(2).\n           05  brewTime      occurs 0 to 30 times \n                             depending on len indexed by i.\n                10 t         pic 9(3).\n       01  result            pic 9(5).\n      \n       procedure division using coffees result.\n          compute result = len * (len - 1)\n          sort brewTime on descending key t\n          perform varying i from 1 until i > len\n              compute result = result + i * t(i)\n          end-perform.\n       end program Barista.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22733,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Barista.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  COFFEES.\n           05  LEN           PIC 9(2).\n           05  BREWTIMES     OCCURS 30 DEPENDING LEN INDEXED I.\n               10 BREWTIME   PIC 9(3).\n       01  RESULT            PIC 9(5).\n\n       PROCEDURE DIVISION USING COFFEES RESULT.\n           INITIALIZE RESULT\n           SORT BREWTIMES DESCENDING BREWTIME\n           PERFORM VARYING I FROM LEN BY -1 UNTIL I = 0\n               COMPUTE RESULT = RESULT + BREWTIME(I) * I + (I - 1) * 2\n           END-PERFORM.\n       END PROGRAM Barista.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22734,"user_id":null,"body":"       identification division.\n       program-id. Barista.\n      \n       data division.\n       local-storage section.\n       77 act-wait           pic s9(9) comp-5 value 0.\n      \n       linkage section.\n       01  coffees.\n           05  len           pic 9(2).\n           05  brewTime-tab           occurs 0 to 30 times \n                                      depending on len\n                                      indexed by i.\n               10 brewTime pic 9(3).\n       01  result            pic 9(5).\n      \n       procedure division using coffees result.\n          initialize result\n          sort brewTime-tab ascending brewTime\n          if len >= 1 then\n             set act-wait to brewTime(1)\n          end-if\n          compute result = result + act-wait\n          perform varying i from 2 until i > len\n             compute act-wait = act-wait + 2 + brewTime(i)\n             compute result = result + act-wait\n          end-perform\n          goback.\n       end program Barista.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22735,"user_id":53,"body":"       identification division.\n       program-id. Barista.\n       data division.\n       local-storage section.\n       01 x             pic 9(5).\n       linkage section.\n       01  coffees.\n           05  len      pic 9(2).\n           05  xs occurs 0 to 30 depending len indexed i.\n               07  brewTime  pic 9(3).\n       01  result            pic 9(5).\n       procedure division using coffees result.\n          initialize result\n          sort xs on ascending brewTime\n          perform varying i from 1 until i > len\n            add brewTime(i) to x\n            add x to result\n            add 2 to x\n          end-perform\n          goback.\n       end program Barista.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22736,"user_id":50,"body":"       identification division.\n       program-id. Barista.\n       data division.\n       local-storage section.\n       01 k            pic 9(5).\n      \n       linkage section.\n       01  arr.\n           05  l        pic 9(2).\n           05  c occurs 0 to 30 depending l indexed i.\n               07  n    pic 9(3).\n       01  a            pic 9(5).\n      \n       procedure division using arr a.\n      \n          initialize a\n          sort c on ascending key n\n          perform varying i from 1 until i > l\n            add n(i) to k\n            add k to a\n            add 2 to k\n          end-perform.\n      \n       end program Barista.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61707b71059070003793bc0f":[{"id":22737,"user_id":168,"body":"       identification division.\n       program-id. FindHeight.\n      \n       data division.\n       local-storage section.\n       01 s1  pic 9(15) value 1.\n       01 s2  pic 9(15) value 1.\n      \n       linkage section.\n       01 cubes       pic 9(12).\n       01 result      pic 9(4).\n      \n       procedure division using cubes result.\n          move 0 to result\n          perform until s2 > cubes\n              add 1 to result\n              add result 1 to s1\n              add s1 to s2\n          end-perform.\n       end program FindHeight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22738,"user_id":53,"body":"       identification division.\n       program-id. FindHeight.\n       data division.\n       local-storage section.\n       01 a           pic 9(12) value 1.\n       01 b           pic 9(12) value 1.\n       linkage section.\n       01 cubes       pic 9(12).\n       01 result      pic 9(4).\n       procedure division using cubes result.\n          initialize result\n          perform until b > cubes\n            add 1 to result\n            add 1 to a\n            add result to a\n            add a to b\n          end-perform\n          goback.\n       end program FindHeight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22739,"user_id":50,"body":"       identification division.\n       program-id. FindHeight.\n      \n       data division.\n       local-storage section.\n       01 a           pic 9(12).\n       \n       linkage section.\n       01 cubes       pic 9(12).\n       01 x           pic 9(4).\n      \n       procedure division using cubes x.\n      \n          compute x = (cubes * 6) ** function abs(1 \/ 3)\n          if x * (x + 1) * (x + 2) \/ 6 > cubes\n          then subtract 1 from x\n      \n      *   naive solution\n      *    perform varying x from 1 until a > cubes\n      *      compute a = a + x * (x + 1) \/ 2\n      *   end-perform\n      *   subtract 2 from x\n          .\n      \n       end program FindHeight.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"617ae2c4e321cd00300a2ec6":[{"id":22740,"user_id":168,"body":"       identification division.\n       program-id. IsConstructable.\n      \n       data division.\n       working-storage section.\n       01  b           usage index.\n       01  c           usage index.\n       01  i           usage index.\n      \n       linkage section.\n       01  a           pic 9(10).\n       01  result      pic 9.\n      \n       procedure division using a result.\n          compute b = function sqrt(a)\n          perform varying i from 1 until i > b\n              compute c = function sqrt(a - i * i)\n              if c * c + i * i = a\n                  move 1 to result\n                  goback\n              end-if\n          end-perform\n          move 0 to result.\n       end program IsConstructable.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22741,"user_id":53,"body":"       identification division.\n       program-id. IsConstructable.\n       data division.\n       local-storage section.\n       01  i           pic 9(10).\n       01  j           pic 9(10).\n       01  p           pic 9(10).\n       01  x           pic 9(10).\n       01  y           pic 9(10)v9(10).\n       linkage section.\n       01  a           pic 9(10).\n       01  r           pic 9.\n       procedure division using a r.\n          move 1 to r\n          compute p = function sqrt(a)\n          perform varying i from 1 until i > p\n            compute j = a - i * i\n            compute x = function sqrt (j)\n            compute y = function sqrt (j)\n            if x = y then goback end-if\n          end-perform\n          move 0 to r\n          goback.\n       end program IsConstructable.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22742,"user_id":50,"body":"       identification division.\n       program-id. IsConstructable.\n      \n       data division.\n       local-storage section.\n       01  s           pic 9(10).\n       01  p           pic 9(10).\n       01  e           pic 9(10).\n      \n       linkage section.\n       01  a           pic 9(10).\n       01  result      pic 9.\n      \n       procedure division using a result.\n      \n      * Implementation of monadius' Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/617d4e6a17134c0001526f9c\/groups\/617d9360ef08800001734b46\n          \n          move 0 to result\n          move 2 to p\n      \n          compute s = function integer(function sqrt(a))\n      \n          perform until p > s\n            perform varying e from 0 until function rem(a, p) <> 0\n              divide p into a\n            end-perform\n            if function rem(p, 4) =  3\n            and function rem(e, 2) = 1\n            then goback\n            else add 1 to p, end-if\n          end-perform\n          if function rem(a, 4) <> 3 then move 1 to result, end-if\n      \n          goback.\n       end program IsConstructable.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"617bfa617cdd1f001a5cadc9":[{"id":22743,"user_id":421,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOIYAMA.\n       author. \"ejini\u6218\u795e\".\n       DATA DIVISION.\n       working-storage section.\n       01 n           pic 9(5).\n       01 i           pic 9(5).\n       LINKAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING W RESULT.\n           initialize RESULT\n           compute n = W \/ 2 + 1\n           perform varying i from n by 1 until i > W\n               compute RESULT = RESULT + i * i - ((i - n) * 2) \n                                * ((i - n) * 2 + 1)\n           end-perform.\n       END PROGRAM HOIYAMA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22744,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOIYAMA.\n       DATA DIVISION.\n       local-storage section.\n       77 middle      usage is index.\n       77 act-width   usage is index.\n       77 i           usage is index.\n       LINKAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING W RESULT.\n          initialize result\n          set middle to w\n          perform varying act-width from 1 by 2 until act-width > w\n             perform varying i from middle by -1 \n                       until i < middle - (act-width - 1) \/ 2\n                compute result = result + i * 2\n             end-perform\n             compute result = result - middle\n             set middle down by 1\n          end-perform\n          goback.\n       END PROGRAM HOIYAMA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22745,"user_id":527,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOIYAMA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING W RESULT.\n           COMPUTE RESULT = (W + 1) * (W ** 2 + W + 2) \/ 8.\n       END PROGRAM HOIYAMA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22746,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOIYAMA.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       01 K           PIC 9(20).\n       01 TMP         PIC 9(20).\n       LINKAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING W RESULT.\n       MOVE W TO TMP\n       MOVE 8 to K\n       ADD 1 TO TMP GIVING TMP\n       PERFORM VARYING I FROM 0 BY 1 Until i = 2\n            COMPUTE TMP = (W + 1) * TMP\n       END-PERFORM\n       MULTIPLY W BY W GIVING W\n       SUBTRACT W FROM TMP GIVING TMP\n       DIVIDE K INTO TMP giving TMP\n       ADD 1 TO TMP GIVING RESULT .\n       END PROGRAM HOIYAMA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22747,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOIYAMA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING W RESULT.\n           COMPUTE W = W \/ 2\n           COMPUTE RESULT = (W + 1) * (W * (2 * W + 3) + 2) \/ 2.\n       END PROGRAM HOIYAMA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22748,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HOIYAMA.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION USING W RESULT.\n       COMPUTE RESULT = \n                ((W + 1) ** 3 - W ** 2)\n                    \/ 8 + 1 .\n       END PROGRAM HOIYAMA.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22749,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       01 K           PIC 9(20).\n       01 TMP         PIC 9(20).\n       PROCEDURE DIVISION.\n       HOIYAMA SECTION.\n       MOVE W TO TMP\n       MOVE 8 to K\n       ADD 1 TO TMP GIVING TMP\n       PERFORM VARYING I FROM \n                    0 BY 1 Until i = 2\n            COMPUTE TMP = (W + 1) *\n            TMP END-PERFORM\n       MULTIPLY W BY W GIVING W\n       SUBTRACT W FROM TMP GIVING TMP\n       DIVIDE K INTO TMP giving TMP\n       ADD 1 TO TMP GIVING RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22750,"user_id":232,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       HOIYAMA SECTION.\n          COMPUTE RESULT = 1 + ((1 + W) ** 3 - W * W) \/ 8\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22751,"user_id":168,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       HOIYAMA SECTION\n       divide 2 into w\n       compute result = (w + 1) * (w * (2 * w + 3) + 2) \/ 2\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22752,"user_id":50,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       LOCAL-STORAGE SECTION.\n       01 I           PIC 9(8).\n       01 K           PIC 9(8).\n       01 Z           PIC 9(8).\n       PROCEDURE DIVISION.\n       HOIYAMA SECTION.\n       COMPUTE Z = ((W + 1) ** 3 - W * W) \/ 8 + 1\n      * Sadly the code below fails on some random tests :(\n      * WHYYYYYY?\n       MOVE W TO RESULT\n       MOVE 8 to K\n       ADD 1 TO RESULT GIVING RESULT\n       PERFORM VARYING I FROM \n                    0 BY 1 Until i = 2\n            COMPUTE RESULT = (W + 1) *\n            RESULT END-PERFORM\n       MULTIPLY W BY W GIVING W\n       SUBTRACT W FROM RESULT GIVING RESULT\n       DIVIDE K INTO RESULT.\n       ADD 1 TO RESULT GIVING RESULT\n       MOVE Z TO RESULT\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22753,"user_id":53,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. KATA.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 W           PIC 9(8).\n       01 RESULT      PIC 9(8).\n       PROCEDURE DIVISION.\n       HOIYAMA SECTION.\n            COMPUTE RESULT = \n                ((W + 1) ** 3 - W ** 2)\n                    \/ 8 + 1\n       END PROGRAM KATA.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6198292d4694c10007832b70":[{"id":22754,"user_id":168,"body":"       identification division.\n       function-id. ceiling.\n       data division.\n       linkage section.\n       01 n         comp-1.\n       01 result    pic 9(4).\n\n       procedure division using n returning result.\n           compute result rounded mode toward-greater = n.\n       end function ceiling.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22755,"user_id":50,"body":"       identification division.\n       function-id.   ceiling.\n       author.        akar-0.\n       date-written.  11\/27\/2021.\n   \n       environment division.\n       configuration section.\n\n       data division.\n\n       linkage section.\n       01 n         comp-1.\n       01 result    pic 9(4).\n       procedure division using n returning result.\n           compute result rounded mode toward-greater = n.\n\n       end function ceiling.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22756,"user_id":53,"body":"123456*\n       identification division.\n       function-id. ceiling.\n       environment division.\n       data division.\n       linkage section.\n       01 n         comp-1.\n       01 result    pic 9(4).\n       procedure division using n returning result.\n       compute result = n + 0.999999 .\n       exit function\n       .\n       end function ceiling.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22757,"user_id":76,"body":"123456*\n       identification division.\n       function-id. ceiling.\n       data division.\n       linkage section.\n       01 n         comp-1.\n       01 result    pic 9(4).\n\n       procedure division using n returning result.\n           if function integer(n) = n\n             move n to result\n           else\n             move function integer(n + 1) to result\n           end-if.\n       end function ceiling.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22758,"user_id":null,"body":"123456*       \n       identification division.\n       function-id. ceiling.\n       data division.\n       linkage section.\n           01 n      comp-1.\n           01 result pic 9(4).\n       procedure division using n returning result.\n           set result to function integer(n).\n           if result<n add 1 to result.\n       end function ceiling.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22759,"user_id":null,"body":"123456*       \n       identification division.\n       function-id. ceiling.\n       \n       data division.\n       linkage section.\n           01 n      comp-1.\n           01 result pic 9(4).\n\n       procedure division using n returning result.\n           compute result = function integer(n).\n           if result<n then add 1 to result.\n       end function ceiling.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22760,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       FUNCTION-ID. CEILING.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N         COMP-1.\n       01 RESULT    PIC 9(4).\n       PROCEDURE DIVISION USING N RETURNING RESULT.\n           COMPUTE RESULT = N + .999.\n       END FUNCTION CEILING.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22761,"user_id":106,"body":"123456*\n       IDENTIFICATION DIVISION.\n       FUNCTION-ID. CEILING.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01 N         COMP-1.\n       01 RESULT    PIC 9(4).\n       PROCEDURE DIVISION USING N RETURNING RESULT.\n           COMPUTE RESULT = N + 0.9999\n           GOBACK.\n       END FUNCTION CEILING.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"619f200fd0ff91000eaf4a08":[{"id":22762,"user_id":null,"body":"       identification division.\n       program-id. OddOrEven.\n       data division.\n       linkage section.\n       01  n           pic 9(4).\n       01  result      pic 9.\n           88  EVEN    value 0.\n           88  ODD     value 1.\n           88  EITHER  value 2.\n      \n       procedure division using n result.\n          evaluate function mod(n, 4)\n             when 0     set even   to true\n             when 2     set odd    to true                \n             when other set either to true\n          end-evaluate\n          goback.\n       end program OddOrEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22763,"user_id":168,"body":"       identification division.\n       program-id. OddOrEven.\n       data division.\n       linkage section.\n       01  n           pic 9(4).\n       01  result      pic 9.\n           88  EVEN    value 0.\n           88  ODD     value 1.\n           88  EITHER  value 2.\n      \n       procedure division using n result.\n          evaluate function mod(n, 4)\n              when 0 set even to true\n              when 2 set odd to true\n              when other set either to true\n          end-evaluate.\n       end program OddOrEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22764,"user_id":50,"body":"       identification division.\n       program-id. OddOrEven.\n      \n       data division.\n       linkage section.\n       01  n           pic 9(4).\n       01  result      pic 9.\n           88  EVEN    value 0.\n           88  ODD     value 1.\n           88  EITHER  value 2.\n      \n       procedure division using n result.\n      \n          evaluate function mod(n, 4)\n          when 0      set EVEN to true\n          when 2      set ODD to true\n          when other  set EITHER to true\n          end-evaluate.\n      \n       end program OddOrEven.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61a8c3a9e5a7b9004a48ccc2":[{"id":22765,"user_id":168,"body":"       identification division.\n       program-id. Direction.\n      \n       data division.\n       working-storage section.\n       01 directions values 'E NEN NWW SWS SE'.\n          05 dirs pic a(2) occurs 8 times indexed i.\n      \n       linkage section.\n       01 facing      pic a(2).\n       01 turn        pic s9(4).\n       01 result      pic a(2).\n      \n       procedure division using facing turn result.\n           move 1 to i\n           search dirs varying i\n               when facing = dirs(i)\n                   move dirs(function mod(i - 1 - turn \/ 45, 8) + 1)\n                     to result\n           end-search.\n       end program Direction.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22766,"user_id":null,"body":"       identification division.\n       program-id. Direction.\n      \n       data division.\n       working-storage section.\n       01 directions.\n          05        pic a(2) value 'N'.\n          05        pic a(2) value 'NE'.\n          05        pic a(2) value 'E'.\n          05        pic a(2) value 'SE'.\n          05        pic a(2) value 'S'.\n          05        pic a(2) value 'SW'.\n          05        pic a(2) value 'W'.\n          05        pic a(2) value 'NW'.\n       01 directions-tab    pic a(2) occurs 8 times indexed by i\n                            redefines directions.\n      \n       linkage section.\n       01 facing      pic a(2).\n       01 turn        pic s9(4).\n       01 result      pic a(2).\n      \n       procedure division using facing turn result.\n          set i to 1\n          search directions-tab varying i\n             when directions-tab(i) = facing\n                continue\n          end-search\n          move directions-tab(function mod(i + turn \/ 45 - 1, 8) + 1) \n            to result     \n          goback.\n       end program Direction.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22767,"user_id":null,"body":"       identification division.\n       program-id. Direction.\n      \n       data division.\n       working-storage section.\n       01 directions.\n          05        pic a(2) value 'N'.\n          05        pic a(2) value 'NE'.\n          05        pic a(2) value 'E'.\n          05        pic a(2) value 'SE'.\n          05        pic a(2) value 'S'.\n          05        pic a(2) value 'SW'.\n          05        pic a(2) value 'W'.\n          05        pic a(2) value 'NW'.\n       01 directions-tab    pic a(2) occurs 8 times indexed by i\n                            redefines directions.\n      \n       linkage section.\n       01 facing      pic a(2).\n       01 turn        pic s9(4).\n       01 result      pic a(2).\n      \n       procedure division using facing turn result.\n          initialize result\n          set i to 2\n          search directions-tab varying i\n             when directions-tab(i) = facing\n                continue\n          end-search\n          move directions-tab(function mod(i + turn \/ 45 - 1, 8) + 1) \n            to result\n          display 'result=' result\n      \n          goback.\n       end program Direction.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22768,"user_id":null,"body":"       identification division.\n       program-id. Direction.\n       data division.\n       working-storage section.\n       01 tbl value 'N NEE SES SWW NW'.\n          05 ws     pic a(2) occurs 8 times indexed i.\n       linkage section.\n       01 facing    pic a(2).\n       01 turn      pic s9(4).\n       01 result    pic a(2).\n       procedure division using facing turn result.\n          set i to 1. \n          search ws \n            when ws(i) = facing \n              move ws(1 + function mod(i + turn\/45 + 23, 8)) to result.  \n       end program Direction.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22769,"user_id":null,"body":"       identification division.\n       program-id. Direction.\n       data division.\n       working-storage section.\n       01 tbl value 'N NEE SES SWW NW'.\n          05 ws     pic a(2) occurs 8 times indexed i.\n       linkage section.\n       01 facing    pic a(2).\n       01 turn      pic s9(4).\n       01 result    pic a(2).\n       procedure division using facing turn result.\n          set i to 1. \n          search ws \n            when ws(i) = facing \n              compute i = i + turn\/45 + 23\n              compute i = 1 + i - 8*(i\/8)\n              move ws(i) to result.  \n       end program Direction.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22770,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. Direction.\n       DATA DIVISION.\n       LOCAL-STORAGE SECTION.\n       01 CNT                    PIC  9(02).\n       01 DIR                    PIC  X(16) VALUE 'N NEE SES SWW NW'.\n       01 E-DIR REDEFINES DIR    PIC  X(02) OCCURS 8 INDEXED I.\n       LINKAGE SECTION.\n       01 FACING                 PIC  A(02).\n       01 TURN                   PIC S9(04).\n       01 RESULT                 PIC  A(02).\n\n       PROCEDURE DIVISION USING FACING TURN RESULT.\n           INSPECT DIR TALLYING CNT FOR LEADING CHARACTERS BEFORE FACING\n           COMPUTE I = FUNCTION MOD(CNT \/ 2 * 45 + TURN, 360) \/ 45 + 1\n           MOVE E-DIR(I)  TO RESULT.\n       END PROGRAM Direction.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22771,"user_id":50,"body":"       identification division.\n       program-id. Direction.\n      \n       data division.\n       working-storage section.\n       01 dirTable value 'N NEE SES SWW NW'.\n          03 dir pic a(2) occurs 8 indexed i.\n          \n       linkage section.\n       01 facing      pic a(2).\n       01 turn        pic s9(4).\n       01 result      pic a(2).\n      \n       procedure division using facing turn result.\n      \n          perform varying i from 1 until i = 9\n            if facing = dir(i)\n               move dir(function mod(i - 1 + function integer(\n                        function mod(turn, 360) \/ 45), 8) + 1) to result\n               goback\n            end-if\n          end-perform.\n      \n       end program Direction.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"61ce25e92ca4fb000f689fb0":[{"id":22772,"user_id":50,"body":"       identification division.\n       program-id. ISBN-Converter.\n      \n       data division.\n       working-storage section.\n       01 j           usage index.\n      \n       local-storage section.\n       01 checkNumber pic 9.\n       01 k           usage index.\n      \n       linkage section.\n       01 ISBN        pic x(13).\n       01 result      pic x(17).\n      \n       procedure division using ISBN result.\n      \n          move function concat('978-' ISBN(1:12))\n          to result\n          perform varying j from 1 until j = 16\n              if result(j:1) is numeric\n                 compute checkNumber = checkNumber +\n                 function numval(result(j:1))\n                 * (1 + 2 * function mod(k, 2))\n                 set k up by 1\n              end-if\n          end-perform\n          compute checkNumber = 10 - checkNumber\n          move checkNumber to result(17:).\n      \n       end program ISBN-Converter.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6210fb7aabf047000f3a3ad6":[{"id":22773,"user_id":50,"body":"       identification division.\n       program-id. AssembleString.\n      \n       data division.\n       local-storage section.\n       01  initString pic x(15)\n           value '###############'.\n      \n       linkage section.\n       01  array.\n           03  arrLen pic 9(2).\n           03  strLen pic 9(2).\n           03  str    pic x(20) occurs 0 to 10 times\n                                depending on arrLen\n                                indexed by i j.\n       01  result     pic x(20).\n      \n       procedure division using array result.\n      \n          initialize result\n          move initString to result(1:strLen)\n      \n          perform varying i from 1 until i > strLen\n          perform varying j from 1 until j > arrLen\n              if str(j)(i:1) <> '*'\n                 move str(j)(i:1) to result(i:1)\n                 exit perform\n              end-if\n          end-perform end-perform\n      \n          goback.\n       end program AssembleString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22774,"user_id":53,"body":"       identification division.\n       program-id. AssembleString.\n       data division.\n       linkage section.\n       01  array.\n           03  h      pic 9(2).\n           03  w      pic 9(2).\n           03  str    pic x(20) occurs 0 to 10 times\n                                depending on h\n                                indexed by i j.\n       01  word       pic x(20).\n       procedure division using array word.\n          initialize word\n          move '###############' to word(1:w)\n          perform varying i from 1 until i > w\n            perform varying j from 1 until j > h\n              if str(j)(i:1) <> '*' then\n                move str(j)(i:1) to word(i:1)\n                exit perform\n              end-if\n            end-perform \n          end-perform\n          goback.\n       end program AssembleString.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22775,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AssembleString.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARRAY.\n           03  ARRLEN  PIC 9(2).\n           03  STRLEN  PIC 9(2).\n           03  STR     PIC X(20) OCCURS 10 DEPENDING ARRLEN INDEXED I J.\n       01  RESULT      PIC X(20).\n\n       PROCEDURE DIVISION USING ARRAY RESULT.\n\n           PERFORM VARYING I FROM 1 UNTIL I > ARRLEN\n               DISPLAY I ' ' STR(I)\n           END-PERFORM\n\n           INITIALIZE RESULT\n           IF  ARRLEN > 0\n               MOVE STR(1)  TO RESULT\n               PERFORM VARYING I FROM 1 UNTIL I > STRLEN\n                   PERFORM VARYING J FROM 1 UNTIL J > ARRLEN\n                       IF  STR(J)(I:1) NOT = '*'\n                           MOVE STR(J)(I:1)  TO RESULT(I:1) \n                       END-IF\n                   END-PERFORM\n               END-PERFORM\n               TRANSFORM RESULT FROM '*' TO '#'\n           END-IF.\n       END PROGRAM AssembleString.     ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22776,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AssembleString.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  ARRAY.\n           03  ARRLEN  PIC 9(2).\n           03  STRLEN  PIC 9(2).\n           03  STR     PIC X(20) OCCURS 10 DEPENDING ARRLEN INDEXED I J.\n       01  RESULT      PIC X(20).\n\n       PROCEDURE DIVISION USING ARRAY RESULT.\n           INITIALIZE RESULT\n           IF  ARRLEN > 0\n               MOVE STR(1)  TO RESULT\n               PERFORM VARYING I FROM 1 UNTIL I > STRLEN\n                   PERFORM VARYING J FROM 1 UNTIL J > ARRLEN\n                       IF  STR(J)(I:1) NOT = '*'\n                           MOVE STR(J)(I:1)  TO RESULT(I:1)\n                       END-IF\n                   END-PERFORM\n               END-PERFORM\n               TRANSFORM RESULT FROM '*' TO '#'\n           END-IF.\n       END PROGRAM AssembleString.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22777,"user_id":50,"body":"       identification division.\n       program-id. AssembleString.\n      \n       data division.\n       local-storage section.\n       01  initString pic x(20)\n           value '####################'.\n      \n       linkage section.\n       01  array.\n           03  arrLen pic 9(2).\n           03  strLen pic 9(2).\n           03  str    pic x(20) occurs 0 to 10 times\n                                depending on arrLen\n                                indexed by i j.\n       01  result     pic x(20).\n      \n       procedure division using array result.\n      \n          initialize result\n          move initString to result(1:strLen)\n      \n          perform varying i from 1 until i > strLen\n          perform varying j from 1 until j > arrLen\n              if str(j)(i:1) <> '*'\n                 move str(j)(i:1) to result(i:1)\n                 exit perform\n              end-if\n          end-perform end-perform\n      \n          goback.\n       end program AssembleString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22778,"user_id":168,"body":"       identification division.\n       program-id. AssembleString.\n      \n       data division.\n\n       linkage section.\n       01  array.\n           03  arrLen pic 9(2).\n           03  strLen pic 9(2).\n           03  str    pic x(20) occurs 0 to 10 times\n                                depending on arrLen indexed i j.\n       01  result     pic x(20).\n      \n       procedure division using array result.\n          initialize result\n          perform varying j from 1 until j > strLen\n              move '#' to result(j:1)\n              perform varying i from 1 until i > arrLen\n                  if str(i)(j:1) <> '*'\n                      move str(i)(j:1) to result(j:1)\n                      exit perform\n                  end-if\n              end-perform\n          end-perform\n          goback.\n       end program AssembleString.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"622de76d28bf330057cd6af8":[{"id":22779,"user_id":50,"body":"       identification division.\n       program-id. AmountOfPages.\n      \n       data division.\n       working-storage section.\n       01 edges.\n          03  pic 9(6) value 1.\n          03  pic 9(6) value 11.\n          03  pic 9(6) value 192.\n          03  pic 9(6) value 2893.\n          03  pic 9(6) value 38894.\n          03  pic 9(6) value 488894.\n       01 redefines edges.\n          03 e occurs 6 indexed i pic 9(6).\n       01 adding.\n          03  pic 9(6) value 0.\n          03  pic 9(6) value 9.\n          03  pic 9(6) value 108.\n          03  pic 9(6) value 1107.\n          03  pic 9(6) value 11106.\n          03  pic 9(6) value 111105.\n       01 redefines adding.\n          03 a pic 9(6) occurs 6.\n      \n       linkage section.\n       01 n           pic 9(6).\n       01 result      pic 9(6).\n      \n       procedure division using n result.\n          if n = 488895 move 100000 to result goback end-if\n          set i to 1\n          search e\n              when e(i) > n\n                compute result = (n + a(i - 1)) \/ (i - 1)\n          end-search.\n      \n       end program AmountOfPages.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22780,"user_id":168,"body":"       identification division.\n       program-id. AmountOfPages.\n      \n       data division.\n       local-storage section.\n       01 k   pic 9(5).\n       01 p   pic 9(6) value 9.\n      \n       linkage section.\n       01 summary     pic 9(6).\n       01 result      pic 9(5).\n      \n       procedure division using summary result.\n          move 0 to result\n          perform varying k from 1 until summary < k * p\n              compute summary = summary - k * p\n              add p to result\n              multiply 10 by p\n          end-perform\n          divide k into summary\n          add summary to result.\n       end program AmountOfPages.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22781,"user_id":53,"body":"       identification division.\n       program-id. AmountOfPages.\n       data division.\n       local-storage section.\n       01 s           pic s9(6).\n       01 k           pic 9(5) value 0.\n       01 n           pic 9(5) value 1.\n       01 m           pic 9(6).\n       01 p           pic 9(6).\n       linkage section.\n       01 summary     pic 9(6).\n       01 result      pic 9(5).\n       procedure division using summary result.\n          initialize result\n          move summary to s\n          perform until s <= 0\n            compute m = 9 * 10 ** (n - 1)\n            multiply m by n giving p\n            if p <= s then\n              add m to k\n              subtract p from s\n              add 1 to n\n            else\n              add function integer(s \/ n) to k\n              exit perform\n            end-if\n          end-perform\n          move k to result\n          goback.\n       end program AmountOfPages.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"624f3171c0da4c000f4b801d":[{"id":22782,"user_id":50,"body":"       identification division.\n       program-id. Barista.\n       data division.\n       local-storage section.\n       01 timesTable.\n          03 t pic 9(5) occurs 99 indexed i.\n      \n       linkage section.\n       01  arr.\n           05  l        pic 9(2).\n           05  e occurs 0 to 30 depending l indexed j.\n               07  n    pic 9(2).\n       01  d            pic 9(2).\n       01  o            pic 9(5).\n      \n       procedure division using arr d o.\n          initialize o\n          sort e on ascending key n\n          perform varying j from 1 until j > l or n(j) > 0\n          continue end-perform\n          set i to 1\n          perform varying j from j until j > l\n            add n(j) to t(i)\n            add t(i) to o\n            add 2 to t(i)\n            compute i = function max(1, function mod(i + 1, d + 1))\n          end-perform.\n      \n       end program Barista.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22783,"user_id":168,"body":"       identification division.\n       program-id. Barista.\n      \n       data division.\n       local-storage section.\n       01 tbl.\n          05 xs pic 9(4) occurs 30 times indexed k.\n      \n       linkage section.\n       01  coffees.\n           05  len           pic 9(2).\n           05  brewTime      occurs 0 to 30 times \n                             depending on len indexed by i.\n              10 ts          pic 9(2).\n       01  coffeeMachines    pic 9(2).\n       01  result            pic 9(5).\n      \n       procedure division using coffees coffeeMachines result.\n          sort brewTime on ascending key ts\n          move 0 to k result\n          perform varying i from 1 until i > len\n              if ts(i) > 0\n                  add 1 to k\n                  if k <= coffeeMachines\n                      move ts(i) to xs(k)\n                  else\n                      compute xs(k) = xs(k - coffeeMachines) + 2 + ts(i)\n                  end-if\n              end-if\n          end-perform\n          perform varying i from 1 until i > k\n              add xs(i) to result\n          end-perform.\n       end program Barista.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22784,"user_id":53,"body":"       identification division.\n       program-id. Barista.\n       data division.\n       local-storage section.\n       01 cache.\n          03 hs pic 9(5) occurs 99 indexed i.\n       linkage section.\n       01  arr.\n           05  w        pic 9(2).\n           05  x occurs 0 to 30 depending w indexed j.\n               07  n    pic 9(2).\n       01  s            pic 9(2).\n       01  res          pic 9(5).\n       procedure division using arr s res.\n          initialize res\n          move 1 to i\n          sort x on ascending n\n          perform varying j from 1 until j > w or n(j) > 0 continue\n          end-perform\n          perform varying j from j until j > w\n            add n(j) to hs(i)\n            add hs(i) to res\n            add 2 to hs(i)\n            compute i = function rem(i + 1, s + 1)\n            if i < 1 then move 1 to i end-if\n          end-perform\n          goback.\n       end program Barista.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"6262f9f7afc4729d8f5bef48":[{"id":22785,"user_id":168,"body":"       identification division.\n       program-id. WhiteBlackAreas.\n      \n       data division.\n       local-storage section.\n       01  filler.\n           05 r-sums pic 9(10) occurs 2 times.\n       01  filler.\n           05 c-sums pic 9(10) occurs 2 times.\n       linkage section.\n       01  n                 pic 9(5).\n       01  cs.\n           05  c             pic 9(3) occurs 41000 times \n                                      depending on n indexed i.\n       01  rs.\n           05  r             pic 9(3) occurs 41000 times \n                                      depending on n.\n       01  result.\n           03  fst           pic 9(10).\n           03  snd           pic 9(10).\n      \n       procedure division using n cs rs result.\n          perform varying i from 1 until i > n\n              add r(i) to r-sums(function mod(i, 2) + 1)\n              add c(i) to c-sums(function mod(i, 2) + 1)\n          end-perform\n          compute fst = c-sums(1) * r-sums(1) + c-sums(2) * r-sums(2)\n          compute snd = c-sums(2) * r-sums(1) + c-sums(1) * r-sums(2)\n          goback.\n       end program WhiteBlackAreas.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22786,"user_id":50,"body":"       identification division.\n       program-id. WhiteBlackAreas.\n       data division.\n       local-storage section.\n       01  a                 pic 9(10).\n       01  b                 pic 9(10).\n       01  c                 pic 9(10).\n       01  d                 pic 9(10).\n      \n       linkage section.\n       01  n                 pic 9(5).\n       01  cs.\n           05  cl            pic 9(3) occurs 41000 times \n                                      depending on n indexed i.\n       01  rs.\n           05  r             pic 9(3) occurs 41000 times \n                                      depending on n.\n       01  result.\n           03  fst           pic 9(10).\n           03  snd           pic 9(10).\n      \n       procedure division using n cs rs result.\n      \n          perform varying i from 1 until i > n\n              if function mod(i, 2) = 0\n                add cl(i) to b\n                add r(i)  to d\n              else\n                add cl(i) to a\n                add r(i)  to c\n              end-if\n           end-perform\n           compute fst = a * c + b * d\n           compute snd = a * d + b * c.\n      \n       end program WhiteBlackAreas.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"62652939385ccf0030cb537a":[{"id":22787,"user_id":50,"body":"       identification division.\n       program-id. Promotion.\n      \n       data division.\n       local-storage section.\n       01  ki      usage index.\n       01  kj      usage index.\n       01  pj      usage index.\n      \n       linkage section.\n       01  board.\n           03  rows occurs 8.\n               05  square pic a occurs 8 indexed i j.\n                   88 pawn   value 'P'.\n                   88 king   value 'K'.\n       01  result  pic a(12).\n      \n       procedure division using board result.\n      \n          initialize result\n          perform varying i from 1 until i = 9\n          after j from 1 until j = 9\n          or pj > 0 and ki > 0\n              evaluate true\n              when king(i, j)\n                   move i to ki\n                   move j to kj\n              when pawn(i, j)\n                   move j to pj\n              end-evaluate\n          end-perform\n      \n          if ki = zero or pj = zero then goback end-if      \n      \n          evaluate true\n          when 8 - ki = function abs(pj - kj)\n              move 'queen bishop' to result\n          when ki = 8 or kj = pj\n              move 'queen rook' to result\n          when function abs(pj - kj) = 1 and ki = 6\n            or function abs(pj - kj) = 2 and ki = 7\n              move 'knight' to result\n          end-evaluate.\n      \n       end program Promotion.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22788,"user_id":50,"body":"       identification division.\n       program-id. Promotion.\n      \n       data division.\n       local-storage section.\n       01  ki      usage index.\n       01  kj      usage index.\n       01  pj      usage index.\n      \n       linkage section.\n       01  board.\n           03  rows occurs 8.\n               05  square pic a occurs 8 indexed i j.\n                   88 pawn   value 'P'.\n                   88 king   value 'K'.\n       01  result  pic a(12).\n      \n       procedure division using board result.\n      \n          initialize result\n          perform varying i from 8 by -1 until i zero\n          after j from 1 until j = 9 or pj and ki > 0\n              evaluate true\n              when king(i, j)\n                   move i to ki\n                   move j to kj\n              when pawn(i, j)\n                   move j to pj\n              when i < 8 and pj = 0\n                   goback\n              end-evaluate\n          end-perform\n      \n          if 0 = ki or pj then goback end-if      \n      \n          evaluate true\n          when 8 - ki = function abs(pj - kj)\n              move 'queen bishop' to result\n          when ki = 8 or kj = pj\n              move 'queen rook' to result\n          when function abs(pj - kj) = 1 and ki = 6\n            or function abs(pj - kj) = 2 and ki = 7\n              move 'knight' to result\n          end-evaluate.\n      \n       end program Promotion.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"62665d43e67fbaf7b37212d2":[{"id":22789,"user_id":50,"body":"       identification division.\n       program-id. FromWhomTheBellTools.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  rl            pic 9(4).\n           05  r             pic 9(5) occurs 0 to 1000 times \n                                      depending on rl indexed by i.\n      \n       procedure division using n result.\n      \n          move n to rl\n          perform varying i from 1 until i > n\n            compute r(i) = i * (n - i + 1)\n          end-perform.\n      \n       end program FromWhomTheBellTools.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22790,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. FromWhomTheBellTools.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N               PIC 9(3).\n       01  RESULT.\n           05  LEN         PIC 9(4).\n           05  RES         PIC 9(5) OCCURS 1000 DEPENDING LEN.\n\n       PROCEDURE DIVISION USING N RESULT.\n           PERFORM TEST AFTER VARYING LEN FROM 1 UNTIL LEN = N\n               COMPUTE RES(LEN) = LEN * (N + 1 - LEN)\n           END-PERFORM.\n       END PROGRAM FromWhomTheBellTools.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22791,"user_id":168,"body":"       identification division.\n       program-id. FromWhomTheBellTools.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  resLength     pic 9(4).\n           05  res           pic 9(5) occurs 0 to 1000 times \n                                      depending on resLength indexed i.\n      \n       procedure division using n result.\n          move n to resLength\n          perform varying i from 1 until i > n\n              compute res(i) = i * (n + 1 - i) \n          end-perform.\n       end program FromWhomTheBellTools.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22792,"user_id":53,"body":"       identification division.\n       program-id. FromWhomTheBellTools.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  result.\n           05  res-len       pic 9(4).\n           05  res           pic 9(5) occurs 0 to 1000 times \n                                      depending on res-len\n                                      indexed by i j.\n       procedure division using n result.\n          initialize result\n          set i to 0\n          set j to n\n          perform until i >= n\n            add 1 to res-len\n            set res(res-len) to j\n            add 1 to i\n            compute j = j + n - 2 * i\n          end-perform\n          goback.\n       end program FromWhomTheBellTools.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"62a611067274990047f431a8":[{"id":22793,"user_id":53,"body":"       identification division.\n       program-id. AlternateValues.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  a                 pic a(10).\n       01  b                 pic a(10).\n       01  result.\n           05  resLength     pic 9(3).\n           05  res           pic a(10) occurs 0 to 100 times \n                                       depending on resLength.\n       procedure division using n a b result.\n          initialize result\n          perform until resLength = n\n            add 1 to resLength\n            if function rem(resLength, 2) = 1 then\n              move a to res(resLength)\n            else\n              move b to res(resLength)\n            end-if\n          end-perform\n          goback.\n       end program AlternateValues.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22794,"user_id":null,"body":"       identification division.\n       program-id. AlternateValues.\n       data division.\n      \n       linkage section.\n       01  n                 pic 9(3).\n       01  firstValue        pic a(10).\n       01  secondValue       pic a(10).\n       01  result.\n           05  resLength     pic 9(3).\n           05  res-tab       pic a(10) occurs 0 to 100 times \n                                       depending on resLength.      \n       procedure division using n firstValue secondValue result.\n          initialize result\n          perform n times\n             set resLength up by 1\n             if function mod(resLength, 2) = 1 then\n                move firstValue to res-tab(resLength)\n             else\n                move secondValue to res-tab(resLength)\n             end-if\n          end-perform\n          goback.\n       end program AlternateValues.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22795,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. AlternateValues.\n       DATA DIVISION.\n       LINKAGE SECTION.\n       01  N                 PIC 9(3).\n       01  FIRSTVALUE        PIC A(10).\n       01  SECONDVALUE       PIC A(10).\n       01  RESULT.\n           05  RESLENGTH     PIC 9(3).\n           05  RES           PIC A(10) OCCURS 100 INDEXED I.\n\n       PROCEDURE DIVISION USING N FIRSTVALUE SECONDVALUE RESULT.\n           MOVE N  TO RESLENGTH\n           PERFORM VARYING I FROM 1 BY 2 UNTIL I > N\n               MOVE FIRSTVALUE   TO RES(I)\n               MOVE SECONDVALUE  TO RES(I + 1)\n           END-PERFORM.\n       END PROGRAM AlternateValues.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22796,"user_id":168,"body":"       identification division.\n       program-id. AlternateValues.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  firstValue        pic a(10).\n       01  secondValue       pic a(10).\n       01  result.\n           05  resLength     pic 9(3).\n           05  res           pic a(10) occurs 0 to 100 times \n                                      depending on resLength indexed i.\n      \n       procedure division using n firstValue secondValue result.\n          move n to resLength\n          perform varying i from 1 until i > n\n              if function mod(i, 2) = 1 then\n                  move firstValue to res(i)\n              else\n                  move secondValue to res(i)\n              end-if\n          end-perform.\n       end program AlternateValues.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22797,"user_id":50,"body":"       identification division.\n       program-id. AlternateValues.\n       data division.\n       linkage section.\n       01  n                 pic 9(3).\n       01  firstValue        pic a(10).\n       01  secondValue       pic a(10).\n       01  result.\n           05  resLength     pic 9(3).\n           05  res           pic a(10) occurs 0 to 100 times \n                                       depending on resLength\n                                       indexed by i.\n      \n       procedure division using n firstValue secondValue result.\n      \n          move n to resLength\n          perform varying i from 1 until i > n\n              if function mod(i, 2) = 1\n                 move firstValue to res(i)\n              else\n                 move secondValue to res(i)\n              end-if\n          end-perform.\n      \n       end program AlternateValues.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"62a933d6d6deb7001093de16":[{"id":22798,"user_id":50,"body":"       identification division.\n       program-id. GetTheVowels.\n       data division.\n       working-storage section.\n       01 vowels value 'aeiou'. \n          05 v  pic a occurs 5 times.\n      \n       linkage section.\n       01 wrd.\n          05 c pic a occurs 5000 times indexed by i.\n       01 result      pic 9(4).\n      \n       procedure division using wrd result.\n      \n          initialize result\n          perform varying i from 1 until c(i) = space\n            if c(i) = v(1 + function mod(result, 5))\n              add 1 to result\n            end-if\n          end-perform.\n      \n       end program GetTheVowels.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22799,"user_id":53,"body":"       identification division.\n       program-id. GetTheVowels.\n       data division.\n       working-storage section.\n       01 vowels value 'aeiou'. \n          05 v        pic a occurs 5 times.\n       linkage section.\n       01 wrd.\n          05 c        pic a occurs 5000 times \n                      indexed by i.\n       01 result      pic 9(4).\n       procedure division using wrd result.\n          initialize result\n          perform varying i from 1 \n              until i > length of function trim(wrd)\n            if c(i) = v(1 + function rem(result, 5)) then\n              add 1 to result\n            end-if\n          end-perform\n          goback.\n       end program GetTheVowels.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22800,"user_id":null,"body":"       identification division.\n       program-id. GetTheVowels.\n       data division.\n       working-storage section.\n       01 vowels value 'aeiou'.\n          03 vs     pic a occurs 5 times.\n       01 i         pic 9(4).\n       01 j         pic 9. \n       linkage section.\n       01 wrd       pic a(5000).\n       01 result    pic 9(4).\n      \n       procedure division using wrd result.\n          set result to 0, set j to 1\n          perform varying i from 1 until wrd(i:1) = space\n            if wrd(i:1) = vs(j) \n              add 1 to result, compute j = 1 + function mod(j, 5).\n       end program GetTheVowels.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22801,"user_id":null,"body":".      identification division.\n       program-id. GetTheVowels.\n       data division.\n       working-storage section.\n       01 vowels value 'aeiou'.\n          03 vs     pic a occurs 5 times.\n       01 i         pic 9(4).\n       01 j         pic 9. \n       linkage section.\n       01 wrd       pic a(5000).\n       01 result    pic 9(4).\n      \n       procedure division using wrd result.\n          set result to 0, set j to 1\n          perform varying i from 1 until wrd(i:1) = space\n            if wrd(i:1) = vs(j) \n              add 1 to result, compute j = 1 + function mod(j, 5).\n       end program GetTheVowels.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22802,"user_id":null,"body":"       identification division.\n       program-id. GetTheVowels.\n       data division.\n       working-storage section.\n       01 vowels value 'aeiou'.\n          03 vs     pic a occurs 5 times.\n       01 i         pic 9(4).\n       01 l         pic 9(4). \n       01 j         pic 9.  \n       linkage section.\n       01 wrd       pic a(5000).\n       01 result    pic 9(4).\n      \n       procedure division using wrd result.\n          set result to 0, set l to 0, set j to 1\n          inspect wrd tallying l for trailing space\n          compute l = function length(wrd) - l\n          perform varying i from 1 until i > l\n            if wrd(i:1) = vs(j) \n              add 1 to result, compute j = 1 + function mod(j, 5).\n       end program GetTheVowels.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22803,"user_id":168,"body":"       identification division.\n       program-id. GetTheVowels.\n       data division.\n       working-storage section.\n       01 vowels      pic a(5) value \"aeiou\".\n       01 v           usage index.\n       01 i           usage index.\n      \n       linkage section.\n       01 wrd         pic a(5000).\n       01 result      pic 9(4).\n      \n       procedure division using wrd result.\n          move 1 to v\n          move 0 to result\n          perform varying i from 1 until i > 5000 or wrd(i:1) = space\n              if wrd(i:1) = vowels(v:1)\n                  add 1 to v result\n                  if v > 5 then move 1 to v end-if\n              end-if\n          end-perform.\n       end program GetTheVowels.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22804,"user_id":null,"body":"       IDENTIFICATION DIVISION.\n       PROGRAM-ID. GetTheVowels.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01  VOWELS      PIC A(5) VALUE 'aeiou'.\n       LINKAGE SECTION.\n       01  WRD         PIC A OCCURS 5000 INDEXED I.\n       01  RESULT      PIC 9(4).\n      \n       PROCEDURE DIVISION USING WRD RESULT.\n           INITIALIZE RESULT\n           PERFORM VARYING I FROM 1 UNTIL I > 5000\n               IF  WRD(I) = VOWELS(FUNCTION REM(RESULT, 5) + 1:1)\n                   ADD 1  TO RESULT\n               END-IF\n           END-PERFORM.\n       END PROGRAM GetTheVowels.","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22805,"user_id":null,"body":"       identification division.\n       program-id. GetTheVowels.\n\n       data division.\n       local-storage section.\n       77 i                   usage is index.\n       77 prev-vowel-num      pic 9 value 0.\n       77 act-chr             pic a.\n       77 act-num             pic 9 redefines act-chr.\n      \n       linkage section.\n       01 wrd         pic a(5000).\n       01 result      pic 9(4).\n      \n       procedure division using wrd result.\n          initialize result\n          perform varying i from 1 until i > 5000\n             move wrd(i:1) to act-chr\n             inspect act-chr converting 'aeiou' to '01234'            \n             if act-chr is numeric then\n                if result = 0\n                   if act-num = 0 then\n                      set result up by 1\n                   end-if\n                else\n                   if function mod(prev-vowel-num + 1, 5) = act-num then\n                      set prev-vowel-num to act-num\n                      set result up by 1\n                   end-if\n                end-if\n             end-if\n          end-perform\n          goback.\n       end program GetTheVowels.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"62cecd4e5487c10028996e04":[{"id":22806,"user_id":168,"body":"       identification division.\n       program-id. RacePodium.\n       data division.\n       linkage section.\n       01  blocks      pic 9(6).\n       01  result.\n           03 snd      pic 9(6).\n           03 fst      pic 9(6).\n           03 thrd     pic 9(6).\n      \n       procedure division using blocks result.\n          if blocks = 7\n              move 000002000004000001 to result\n          else\n              compute fst = (blocks + 5) \/ 3\n              compute snd = fst - 1\n              compute thrd = blocks - 2 * fst + 1\n          end-if.\n       end program RacePodium.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22807,"user_id":53,"body":"       identification division.\n       program-id. RacePodium.\n       data division.\n       linkage section.\n       01  n           pic 9(6).\n       01  result.\n           03 b        pic 9(6).\n           03 a        pic 9(6).\n           03 c        pic 9(6).\n       procedure division using n result.\n          initialize result\n          divide 3 into n giving c\n          add 2 to c giving a\n          add 1 to c giving b\n          if function abs(a + b + c) > n then\n            subtract 1 from c\n          end-if\n          if function abs(a + b + c) > n then\n            subtract 1 from b\n          end-if\n          if function abs(a + b + c) > n then\n            subtract 1 from a\n          end-if\n          perform until function abs(b + 1) >= a or c <= 1\n            add 1 to b\n            subtract 1 from c\n          end-perform\n          goback.\n       end program RacePodium.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22808,"user_id":50,"body":"       identification division.\n       program-id. RacePodium.\n       data division.\n       working-storage section.\n       01  q           pic 9(6).\n       01  r           pic 9.\n      \n       linkage section.\n       01  blocks      pic 9(6).\n       01  result.\n           03 snd      pic 9(6).\n           03 fst      pic 9(6).\n           03 thrd     pic 9(6).\n      \n       procedure division using blocks result.\n      \n      \n          divide blocks by 3 giving q remainder r\n          evaluate r\n          when 0\n              move q to snd\n              compute fst = q + 1\n              compute thrd = q - 1\n          when 1\n              if q = 2\n                move q to snd\n                compute fst = q + 2\n                compute thrd = q - 1\n              else\n                compute snd = q + 1\n                compute fst = q + 2\n                compute thrd = q - 2\n              end-if\n            when other\n              compute snd = q + 1\n              compute fst = q  + 2\n              compute thrd = q - 1\n            end-evaluate.\n      \n       end program RacePodium.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"52a78825cdfc2cfc87000005":[{"id":22809,"user_id":168,"body":"       identification division.\n       program-id. calc.\n       data division.\n       working-storage section.\n       01  vals pic s9(8)v9(8) occurs 100 times indexed by v.\n       01  ops-stack occurs 100 times indexed by k.\n           05 ops      pic x.\n           05 prs      pic 9.\n\n       01  val     pic x(20).\n       01  l       pic 99.\n       01  op      pic x.\n       01  prevOp  pic x.\n       01  pr      pic 9.\n      \n       linkage section.\n       01  expression.\n           05 expLen     pic 9(3).\n           05 str.\n              10 expChar pic x occurs 0 to 300 times \n                               depending on expLen indexed i j.\n       01  result        pic s9(8)v9(8).\n      \n       procedure division using expression result.\n           move 0 to j v k result\n      * remove spaces\n           perform varying i from 1 until i > expLen\n               if expChar(i) <> space\n                   add 1 to j\n                   if i > j then move expChar(i) to expChar(j) end-if\n               end-if\n           end-perform\n           move j to expLen\n\n      * shunting-yard algorithm\n           move 1 to i\n           move space to prevOp\n           perform until i > expLen\n               move 0 to l\n               move space to op\n               unstring str \n                   delimited by '+' or '-' or '\/' or '*' or '(' or ')'\n                   into val delimiter in op count in l\n                   with pointer i\n               if l > 0\n                   add 1 to v\n                   move function numval-f(val) to vals(v)\n               end-if\n               if op = '-' and l = 0 and prevOp <> ')'\n                   move '~' to op\n               end-if\n               if op <> space\n                   move op to prevOp\n               end-if\n               move 9 to pr\n               evaluate op\n                   when '(' when ')' move 0 to pr\n                   when '+' when '-' move 1 to pr\n                   when '*' when '\/' move 2 to pr\n                   when '~' move 3 to pr\n               end-evaluate\n               if op <> '('\n                   perform perform-ops\n               end-if\n               if pr < 9 and op <> ')'\n                   add 1 to k\n                   move op to ops(k)\n                   move pr to prs(k)\n               end-if\n           end-perform\n\n           move 0 to pr\n           perform perform-ops\n           if v = 1\n               move vals(1) to result\n           else\n               display 'Value stack error: v = ' v\n           end-if\n           goback.\n\n       perform-ops.\n           perform until k = 0 or prs(k) < pr\n               evaluate ops(k) also v\n                   when '(' also any\n                       subtract 1 from k\n                       exit perform\n                   when '~' also >= 1\n                       multiply -1 by vals(v)\n                   when '+' also >= 2\n                       add vals(v) to vals(v - 1)\n                       subtract 1 from v\n                   when '-' also >= 2\n                       subtract vals(v) from vals(v - 1)\n                       subtract 1 from v\n                   when '*' also >= 2\n                       multiply vals(v) by vals(v - 1)\n                       subtract 1 from v\n                   when '\/' also >= 2\n                       divide vals(v) into vals(v - 1)\n                       subtract 1 from v\n                   when other\n                       display 'Error: value stack underflow'\n                       goback\n               end-evaluate\n               subtract 1 from k\n           end-perform.\n\n       end program calc.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22810,"user_id":53,"body":"       identification division.\n       program-id. calc.\n       data division.\n       local-storage section.\n       01  token         pic x.\n       01  num-arr.\n           05 num-len    pic 9(3).\n           05 num        pic x occurs 0 to 300 times\n                               depending on num-len.\n       01  stack-arr.\n           03  ptr       pic 9(3).\n           03  stack     pic s9(8)v9(8) occurs 0 to 300 times\n                                depending on ptr.\n       linkage section.\n       01  expression.\n           05 exp-len    pic 9(3).\n           05 exp        pic x occurs 0 to 300 times\n                               depending on exp-len\n                               indexed by i i0.\n       01  result        pic s9(8)v9(8).\n       procedure division using expression result.\n          initialize result\n          perform normalize\n          display exp(1:exp-len)\n          perform expr\n          move stack(1) to result\n          goback.\n        expr.\n          perform term\n          perform forever\n            perform peek\n            if token = '+' or token = '-' then\n              perform shift\n              if token = '+' then\n                perform term\n                subtract 1 from ptr\n                add stack(ptr + 1) to stack(ptr)\n              else\n                perform term\n                subtract 1 from ptr\n                subtract stack(ptr + 1) from stack(ptr)\n              end-if\n            else\n              exit perform\n            end-if\n          end-perform\n          .\n        term.\n          perform factor\n          perform forever\n            perform peek\n            if token = '*' or token = '\/' then\n              perform shift\n              if token = '*' then\n                perform factor\n                subtract 1 from ptr\n                multiply stack(ptr + 1) by stack(ptr)\n              else\n                perform factor\n                subtract 1 from ptr\n                divide stack(ptr + 1) into stack(ptr)\n              end-if\n            else\n              exit perform\n            end-if\n          end-perform\n          .\n        factor.\n          perform peek\n          evaluate true\n            when function ord(token) >= function ord('0')\n                and function ord(token) <= function ord('9')\n              perform decnum\n            when token = '('\n              perform shift\n              perform expr\n              perform shift\n            when token = '-'\n              perform shift\n              perform factor\n              multiply -1 by stack(ptr)\n          end-evaluate\n          .\n        decnum.\n          set num-len to 1\n          perform shift\n          move token to num(num-len)\n          perform forever\n            perform peek\n            if (function ord(token) >= function ord('0')\n                and function ord(token) <= function ord('9'))\n                or token = '.' then\n              perform shift\n              add 1 to num-len\n              move token to num(num-len)\n            else\n              exit perform\n            end-if\n          end-perform\n          add 1 to ptr\n          move function numval(num(1:num-len)) to stack(ptr)\n          .\n        peek.\n          if i > exp-len then\n            move space to token\n          else\n            move exp(i) to token\n          end-if\n          .\n        shift.\n          perform peek\n          add 1 to i\n          .\n        normalize.\n          set i0 to 0\n          perform varying i from 1 until i > exp-len\n            if exp(i) <> space\n              add 1 to i0\n              move exp(i) to exp(i0)\n            end-if\n          end-perform\n          move i0 to exp-len\n          set i to 1\n          .\n       end program calc.\n ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22811,"user_id":50,"body":"      * Solution based on gun73r's Python solution\n      * See https:\/\/www.codewars.com\/kata\/reviews\/5ad0d4dd6165e69a5f00141d\/groups\/61fe6b29fb076500017be6dd\n       identification division.\n       program-id. calc.\n      \n       data division.\n       local-storage section.\n       01  opStack.\n           03  osl      pic 9(3).\n           03  op       pic x occurs 0 to 300 times\n                        depending on osl indexed by osIndx.\n       01  lst.\n           03  lstLen   pic 9(3).\n           03  lstElem  pic x(7) occurs 0 to 300 times\n                        depending on lstElem indexed by lIndx.\n       01  a.\n           03  aLen     pic 9(3).\n           03  token    pic x(7) occurs 0 to 300 times\n                        depending on aLen indexed by aIndx.\n               88 tokenIsOp value '*', '+', '\/', '-'.\n               88 tokenIsUnaryMinus value 'u'.\n       01  st.\n           03  stackLen pic 9(3).\n           03  stack    pic s9(8)v9(8) occurs 0 to 300 times\n                        depending on stackLen.\n       01  prevChar     pic x.\n           88  prevIsOp value '+', '-', '(', '\/', '*', space.\n       01  x            pic x.\n       01  cost         pic 9.\n       01  e            pic x(7).\n           88  eIsOp    value '+', '-', '*', '\/', '(', ')', 'u'.\n       01  arg2         pic s9(8)v9(8).\n\n       linkage section.\n       01  s.\n           05  sLen      pic 9(3).\n           05  sChar     pic x occurs 0 to 300 times \n                         depending on sLen indexed k i.\n               88  OpInS value '+', '-', '*', '\/', '(', ')', 'u'.\n       01  result        pic s9(8)v9(8).\n      \n       procedure division using s result.\n          initialize result\n      \n          perform removeSpaces thru calculate\n      \n          move stack(stackLen) to result\n      \n          goback.\n      \n        removeSpaces.\n          move 0 to k\n          perform varying i from 1 until i > sLen\n              if sChar(i) <> space\n                 add 1 to k\n                 move sChar(i) to sChar(k)\n              end-if\n          end-perform\n          move k to sLen\n            .\n      \n        tokenize.\n          move 1 to lstLen\n          perform varying i from 1 until i > sLen\n            if OpInS(i)\n              move sChar(i) to x\n              if x = '-' and prevIsOp \n                 then move 'u' to x       end-if\n              if lstElem(lstLen) <> space\n                 then add 1 to lstLen    end-if\n              move x to lstElem(lstLen)\n              add 1 to lstLen\n              move space to lstElem(lstLen)\n            else\n              move function concat(\n                      function trim(lstElem(lstLen)), \n                      sChar(i)\n                     )          to lstElem(lstLen)\n            end-if\n            move sChar(i) to prevChar\n          end-perform\n      \n          perform until lstElem(lstLen) <> space\n              subtract 1 from lstLen\n          end-perform\n          .\n      \n        makePostfix.\n          perform varying lIndx from 1 until lIndx > lstLen\n            move lstElem(lIndx) to e\n            if eIsOp\n               call 'GetCost' using e cost\n               evaluate cost\n               when 3\n                    add 1 to osl\n                    move e to op(osl)\n               when 4\n                    perform forever\n                      move op(osl) to e\n                      subtract 1 from osl\n                      if e = '(' exit perform end-if\n                      add 1 to aLen\n                      move e to token(aLen)\n                   end-perform\n               when other\n                   if osl > 0\n                      call 'Refill' using cost opStack a\n                   end-if\n                   add 1 to osl\n                   move e to op(osl)\n              end-evaluate\n            else\n              add 1 to aLen\n              move e to token(aLen)\n            end-if\n          end-perform\n      \n          perform varying osIndx from osl by -1 until osIndx = 0\n            add 1 to aLen\n            move op(osIndx) to token(aLen)\n          end-perform\n          .\n      \n        calculate.\n          perform varying aIndx from 1 until aIndx > aLen\n            evaluate true\n            when  tokenIsUnaryMinus(aIndx)\n                  multiply -1 by stack(stackLen)\n            when tokenIsOp(aIndx)\n                  perform makeOperation\n            when  other\n                  perform pushToStack\n            end-evaluate\n          end-perform\n            .\n      \n        makeOperation.\n            move stack(stackLen) to arg2\n            subtract 1 from stackLen\n            evaluate token(aIndx)\n            when '+'    add arg2 to stack(stackLen)\n            when '-'    subtract arg2 from stack(stackLen)\n            when '*'    multiply arg2 by stack(stackLen)\n            when other  divide arg2 into stack(stackLen)\n            end-evaluate\n              .\n      \n          pushToStack.\n            add 1 to stackLen\n            move function numval(token(aIndx))\n            to stack(stackLen)\n              .\n      \n       end program calc.\n      \n       identification division.\n       program-id. Refill recursive.\n      \n       data division.\n       local-storage section.\n       01  prevCost  pic 9.\n\n       linkage section.\n       01  cost   pic 9.\n       01  opStack.\n           03  osl     pic 9(3).\n           03  op pic x occurs 0 to 300 times\n               depending on osl indexed by osIndx.\n       01  a.\n           03  aLen    pic 9(3).\n           03  token   pic x(7) occurs 0 to 300 times\n                       depending on aLen indexed by aIndx.\n      \n       procedure division using cost opStack a.\n      \n          if osl = 0 goback end-if\n          \n          call 'GetCost' using op(osl) prevCost\n          if prevCost <> 3 and cost <= prevCost\n            add 1 to aLen\n            move op(osl) to token(aLen)\n            subtract 1 from osl\n            call 'Refill' using cost opStack a\n          end-if\n      \n          goback.\n       end program Refill.\n      \n       identification division.\n       program-id. GetCost.\n      \n       data division.\n\n       linkage section.\n       01  e      pic x.\n       01  cost   pic 9.\n      \n       procedure division using e cost.\n      \n            evaluate e\n            when '+'    \n            when '-'     move 1 to cost \n            when '*'\n            when '\/'     move 2 to cost\n            when '('     move 3 to cost\n            when ')'     move 4 to cost\n            when other   move 5 to cost\n            end-evaluate\n      \n          goback.\n       end program GetCost.\n    ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"58e61f3d8ff24f774400002c":[{"id":22812,"user_id":50,"body":"       identification division.\n       program-id. AssemblerInterpreter.\n       environment division.\n       configuration section.\n       special-names.\n          symbolic characters lf is 11.\n      \n       data division.\n       local-storage section.\n       01  l       pic 9(3).\n       01  tmp     pic x(100).\n            88     blankLine value ';', space.\n       01  token   pic x(20).\n       01  n       pic s9(8).\n       01  nDisp   pic -(8)9.\n       01  j       usage index.\n      *    table of labels contained in the program;\n      *    each element is a pair formed by\n      *    1) index of label's first instruction\n      *    2) label identifier\n       01  labelsTable.\n           05  lbLen                pic 9(2).\n           05 filler occurs 0 to 50 times depending on lbLen.\n              07  lbl               pic x(10).\n              07  lbIndx            usage index.\n      *    calls and jumps instructions (used in `setLabelsAndJumps`)\n       01  tmpLb.\n           05  tmpLbLen             pic 9(2).\n           05  filler occurs 0 to 50 times\n               depending on tmpLbLen indexed by tmpLbIndx.\n               07  indxInProg       usage index.\n               07  labelIndentifier pic x(10).\n      *    registers values ('a' is at index 1, 'b' at index 2, etc.)\n       01  v            pic s9(8) occurs 26 times.\n       01  callStack.\n            05 callsLen pic 9(3).\n            05 callIndx usage index occurs 0 to 999 times\n                                    depending on callsLen.\n      *    preinterpreted program\n       01  prog.\n            03  len  pic 9(2).\n            03  filler occurs 0 to 99 times\n                depending on len indexed by i.\n      *             instruction of the current line\n                05  token1 pic x(10).\n                    88 JmpOrCall value 'call', 'jmp', 'je',\n                                       'jne', 'jge', 'jg', 'jle', 'jl'.\n                    88 BinaryOp  value 'mul', 'div', 'add','sub', 'mov'.\n                    88 UnaryOp   value 'dec', 'inc'.\n      *         first argument if token1 is unary or binary operation\n      *         (literal numeric in num1 or register index in r1; if r1 = 0 it's a literal, othewise it's a register)\n      *         r1 also stores the index of the first instruction of the procedure in case of a jump or call,\n      *         or the index of the instruction arguments in msgTbl in case of `msg`\n                05  token2.\n                    07  r1     usage index.\n                    07  num1   pic s9(8).\n      *         second argument, if token1 is a binary operation (literal numeric or register index)\n                05  token3.\n                    07  r2     usage index.\n                    07  num2   pic s9(8).\n      *    result of the last `cmp` instruction, as the difference of the two values tested\n       01  cmp pic s9(4).\n      *    index and content of `msg` instructions - Interpreted during the execution of the program \n       01  msgTbl.\n           05 msgLen          pic 9(2).\n           05  filler occurs 0 to 50 times\n                      depending on msgLen.\n               07 msgIndx     usage index.\n               07 msgContent  pic x(100).\n       01  tokenizedMsg.\n           05  ltm            pic 9(2).\n           05  filler occurs 0 to 50 times depending on ltm.\n                07  msgReg    usage index.\n                07  ls        pic 9(2).\n                07  msgLit    pic x(50).\n      \n       linkage section.\n       01  progS.\n           05  progLen        pic 9(3).\n           05  progStr.\n               07  filler pic x occurs 0 to 999 times \n                   depending on progLen indexed by indS.\n       01  result.\n           05  resLen         pic 9(2).\n           05  o.\n               07  filler pic x  occurs 0 to 99 times\n                   depending on resLen indexed by oi.\n      \n       procedure division using progS result.\n      \n          initialize result\n          perform tokenizeCode thru executeProgram\n      *   if this point is reached, the program code finished without meeting `end`\n          move 2 to resLen\n          move '-1' to o\n      \n        goback.\n      \n        tokenizeCode.\n          set indS to 1\n          perform until indS > progLen\n              unstring progStr delimited by lf into tmp pointer indS\n              call 'StripComments' using tmp\n              if blankLine exit perform cycle end-if\n              move length function trim(tmp) to l\n      *       identify the first token:\n      *       if it's a label, store its identifier and the index of its first instruction in labelsTable, and skip to next line\n              if tmp(l:1) = ':'\n                 add 1 to lbLen\n                 move tmp(1:l - 1) to lbl(lbLen)\n                 compute lbIndx(lbLen) = len + 1\n                 exit perform cycle\n              end-if\n      \n              add 1 to len\n              set j to 1\n              perform parseNextToken\n              move token to token1(len)\n      \n              evaluate true\n              when token1(len) = 'end' or 'ret'\n      *            instructions with no arguments, they will be interpreted when executing the program\n                   exit perform cycle\n              when JmpOrCall(len)\n      *            add an entry to tmpLb;\n      *            current entry of sanitized program will be completed in `setLabelsAndJumps` paragraph\n                   add 1 to tmpLbLen\n                   move len to indxInProg(tmpLbLen)\n                   perform parseNextToken\n                   move token to labelIndentifier(tmpLbLen)\n              when UnaryOp(len)\n                   perform parseNextToken\n                   call 'FindRegisterIndex' using token r1(len)\n              when token1(len) = 'cmp'\n      *            it's better to handle this case separately from other binary operations since token2 can be register or literal numeric\n                   perform parseToken2\n                   if token is alphabetic\n                         call 'FindRegisterIndex' using token r1(len)\n                   else  move function numval(token) to num1(len) end-if\n                   perform parseNextToken thru identifyToken3\n              when BinaryOp(len)\n                   perform parseToken2\n                   call 'FindRegisterIndex' using token r1(len)\n                   perform parseNextToken thru identifyToken3\n              when token1(len) = 'msg'\n      *           index and arguments (as a string) of the instruction are stored is msgTbl\n                  add 1 to msgLen\n                  move len to msgIndx(msgLen)\n                  move function trim(tmp(5:)) to msgContent(msgLen)\n              when other\n                  display 'Error tokenizing code' lf\n                          'Unidentified token1: \"' token1(len) '\"'\n                          ' at index ' len\n                  goback\n              end-evaluate\n        end-perform\n           .\n          \n        setLabelsAndJumps.\n          perform varying tmpLbIndx from 1 until tmpLbIndx > tmpLbLen\n             set j to 1\n             perform until lbl(j) = labelIndentifier(tmpLbIndx)\n                add 1 to j\n             end-perform\n             move lbIndx(j) to r1(indxInProg(tmpLbIndx))\n          end-perform\n          .\n      \n        executeProgram.\n          move 99 to resLen\n          set i oi to 1\n          perform until i > len\n            evaluate token1(i)\n            when 'end'\n                 compute resLen = oi - 1\n                 goback\n            when 'ret'\n                 move callIndx(callsLen) to i\n                 subtract 1 from callsLen\n                 exit perform cycle\n            when 'cmp'\n                 perform comparison\n            when 'div'\n                 perform getToken3\n                 compute v(r1(i)) = v(r1(i)) \/ n\n            when 'mul'\n                 perform getToken3\n                 compute v(r1(i)) = v(r1(i)) * n\n            when 'add'\n                 perform getToken3\n                 compute v(r1(i)) = v(r1(i)) + n\n            when 'sub'\n                 perform getToken3\n                 compute v(r1(i)) = v(r1(i)) - n\n            when 'mov'\n                 perform getToken3\n                 move n to v(r1(i))\n            when 'dec'\n                 subtract 1 from v(r1(i))\n            when 'inc'\n                 add      1  to  v(r1(i))\n            when 'call'\n      *          jump to the corresponding procedure and store current index + 1 in callStack\n                 add 1 to callsLen\n                 compute callIndx(callsLen) = i + 1\n                 move r1(i) to i\n                 exit perform cycle\n            when 'je'\n                 if cmp is zero\n                    move r1(i) to i\n                    exit perform cycle\n                 end-if\n            when 'jne'\n                 if cmp is not zero\n                    move r1(i) to i\n                    exit perform cycle\n                 end-if\n            when 'jge'\n                 if cmp is not less than zero\n                    move r1(i) to i\n                    exit perform cycle\n                 end-if\n            when 'jg'\n                 if cmp is positive\n                    move r1(i) to i\n                    exit perform cycle\n                 end-if\n            when 'jle'\n                 if cmp is not greater than zero\n                    move r1(i) to i\n                    exit perform cycle\n                 end-if\n            when 'jl'\n                 if cmp is negative\n                    move r1(i) to i\n                    exit perform cycle\n                 end-if\n            when 'jmp'\n                 move r1(i) to i\n                 exit perform cycle\n            when 'msg'\n              set j to 1\n              perform until msgIndx(j) = i add 1 to j end-perform\n              move msgContent(j) to tmp\n              call 'parseMsg' using tmp tokenizedMsg\n              perform varying j from 1 until j > ltm\n                  if msgReg(j) > 0\n                     move v(msgReg(j)) to nDisp\n                     string function trim(nDisp) into o pointer oi\n                  else\n                     string msgLit(j)(1:ls(j))   into o pointer oi\n                  end-if\n              end-perform\n            when other\n               display 'Error interpreting program' lf\n                       'Unidentified token1: \"' token1(i) '\"'\n                       ' at index ' i\n               goback\n            end-evaluate\n            add 1 to i\n          end-perform\n          .\n      \n        parseNextToken.\n            initialize token\n            perform until token <> space\n              unstring tmp delimited by space into token pointer j\n            end-perform\n           .\n        \n        identifyToken3.\n            if token is alphabetic\n                  call 'FindRegisterIndex' using token r2(len)\n            else  move function numval(token) to num2(len) end-if\n          .\n      \n        parseToken2.\n            initialize token\n            perform until token <> space\n              unstring tmp delimited by ',' into token pointer j\n            end-perform\n            move function trim(token) to token\n          .\n\n        comparison.\n           if r1(i) = 0 move num1(i)  to cmp\n           else         move v(r1(i)) to cmp end-if\n           perform getToken3\n           subtract n from cmp\n           .\n      \n        getToken3.\n           if r2(i) = 0 move num2(i)  to n\n           else         move v(r2(i)) to n    end-if\n            .\n\n       end program AssemblerInterpreter.\n      \n       identification division.\n       program-id. StripComments.\n       data division.\n       local-storage section.\n       01  i    pic 9(3).\n      \n       linkage section.\n       01  s    pic x(100).\n            88 blankLine value ';', space.\n      \n       procedure division using s.\n      \n          move function trim(s) to s\n          if blankLine goback end-if\n      \n          inspect s tallying i for all \";\"\n          if i = 0 goback end-if\n      \n          move length function trim(s) to i\n          perform until s(i:1) = ';'\n      *       if ';' is inside a msg string, stop\n              if s(i:1) = \"'\" goback end-if\n              subtract 1 from i\n          end-perform\n      \n          move s(1:i - 1) to s\n      \n          goback.\n       end program StripComments.\n      \n       identification division.\n       program-id. FindRegisterIndex.\n       data division.\n      \n       linkage section.\n       01  s       pic a.\n       01  indx    usage index.\n      \n       procedure division using s indx.\n      \n          compute indx = function ord(s) - 97\n      \n          goback.\n       end program FindRegisterIndex.\n      \n       identification division.\n       program-id. parseMsg.\n\n       data division.\n       local-storage section.\n       01  i              usage index.\n       01  j              usage index.\n       01  tmp            pic x(100).\n       01  str.\n           05  strLen     pic 9(3).\n           05  strChars.\n               07 chr     pic x occurs 1 to 100 times\n                               depending on strLen.\n      \n       linkage section.\n       01  s      pic x(100).\n       01  o.\n           05  l  pic 9(2).\n           05  filler occurs 0 to 50 times\n                      depending on l.\n                   07  ri usage index.\n                   07  ls pic 9(2).\n                   07  st pic x(50).\n      \n       procedure division using s o.\n      \n            initialize o\n            \n            move length function trim(s) to strLen\n            move s to strChars\n            set j to 1\n            perform varying l from 1 until j > strLen\n                if chr(j) is alphabetic\n                    call 'FindRegisterIndex' using chr(j) ri(l)\n                    add 1 to j\n                else\n                    add 1 to j\n                    move j to i\n                    unstring strChars delimited by \"'\"\n                    into tmp with pointer j\n                    move tmp to st(l)\n                    compute ls(l) = j - i - 1\n                end-if\n                perform until j > strLen or chr(j) <> space and  ','\n                    add 1 to j\n                end-perform\n            end-perform\n\n          goback.\n       end program parseMsg.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}],"5a08b22b32b8b96f4700001c":[{"id":22813,"user_id":50,"body":"       identification division.\n       program-id. tower recursive.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(38).\n       01 p           pic 9(38).\n\n       linkage section.\n       01 base        pic 9(38).\n       01 h           pic 9(38).\n       01 m           pic 9(38).\n       01 result      pic 9(38).\n      \n       procedure division using base h m result.\n\n          if m = 1\n             goback\n          end-if\n      \n          move 1 to result\n      \n          if base = 1 or h = 0\n            goback\n          end-if\n\n          perform varying i from 0 until i = h\n      \n              if result > function log(m) \/ function log(base)\n                  call 'phi' using\n                       by content m\n                       by reference p\n                  \n                  subtract 1 from h\n\n                  call 'tower' using\n                       by content base h p\n                       by reference h\n      \n                  add h to p\n      \n                  call 'power-mod' using\n                        by content base p m\n                        by reference result\n\n                  goback\n              else\n                  compute result = base ** result\n              end-if\n          end-perform\n      \n          compute result = function rem(result, m)\n      \n          goback.\n       end program tower.\n\n      \n       identification division.\n       program-id. phi.\n       data division.\n       local-storage section.\n       01 p           pic 9(38).\n       linkage section.\n       01 n           pic 9(38).\n       01 result      pic 9(38).\n       procedure division using n result.\n      \n          if n < 3\n            move 1 to result\n            goback\n          end-if\n\n          move n to result\n  \n          perform varying p from 2 by 1 until p * p > n\n            if function rem(n, p) = 0\n              compute result = result - result \/ p\n              divide p into n\n              perform until function rem(n, p) <> 0\n                    divide p into n\n              end-perform\n            end-if\n          end-perform\n          if n > 1 then compute result = result - result \/ n end-if\n\n          goback.\n       end program phi.\n\n       identification division.\n       program-id. power-mod.\n      \n       data division.\n\n       linkage section.\n       01 x           pic 9(38).\n       01 y           pic 9(38).\n       01 n           pic 9(38).\n       01 result      pic 9(38).\n       procedure division using x y n result.\n      \n            move 1 to result\n      \n            compute x = function rem(x, n)\n          \n            perform until y = 0\n                if function rem(y, 2) = 1\n                    compute result = function rem(result * x, n)\n                end-if\n                divide 2 into y\n                compute x = function rem(x * x, n)\n            end-perform\n      \n          goback.\n       end program power-mod.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22814,"user_id":168,"body":"       identification division.\n       program-id. tower recursive.\n      \n       data division.\n       local-storage section.\n       01 i           pic 9(38).\n       01 t           pic 9(38).\n       01 p           pic 9(38).\n\n       linkage section.\n       01 base        pic 9(38).\n       01 h           pic 9(38).\n       01 m           pic 9(38).\n       01 result      pic 9(38).\n      * Translation of ksrahmadi's Python solution\n       procedure division using base h m result.\n          evaluate true\n            when m = 1\n              compute result = 0\n            when h = 0\n              compute result = 1\n            when h = 1\n              compute result = function mod(base, m)\n            when h = 2\n              call 'power-mod' using \n                by content base base m\n                by reference result\n            when other\n              call 'totient' using by content m by reference t\n              subtract 1 from h\n              call 'tower' using \n                  by content base h t\n                  by reference p\n              if p = 0 then compute p = t end-if\n              call 'power-mod' using\n                  by content base p m by reference result\n          end-evaluate.\n       end program tower.\n      \n       identification division.\n       program-id. totient.\n       data division.\n       working-storage section.\n       01 p           pic 9(38).\n       linkage section.\n       01 n           pic 9(38).\n       01 result      pic 9(38).\n       procedure division using n result.\n          compute result = n\n          perform varying p from 2 by 1 until p * p > n\n              if function mod(n, p) = 0\n                  perform with test after until function mod(n, p) <> 0\n                      divide p into n    \n                  end-perform\n                  compute result = result - result \/ p\n              end-if\n          end-perform\n          if n > 1\n             compute result = result - result \/ n\n          end-if.\n       end program totient.\n\n       identification division.\n       program-id. power-mod.\n      \n       data division.\n       linkage section.\n       01 x           pic 9(38).\n       01 y           pic 9(38).\n       01 n           pic 9(38).\n       01 result      pic 9(38).\n       procedure division using x y n result.\n          compute result = 1\n          perform until y = 0\n              if function mod(y, 2) = 0\n                  compute x = function mod(x * x, n)\n                  divide 2 into y\n              else\n                  compute result = function mod(result * x, n)\n                  subtract 1 from y\n              end-if\n          end-perform.\n       end program power-mod.\n","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"},{"id":22815,"user_id":53,"body":"       identification division.\n       program-id. tower recursive. \n       data division.\n       local-storage section.\n       01 a           pic 9(38).\n       01 p           pic 9(38). \n       linkage section.\n       01 b           pic 9(38).\n       01 h           pic 9(38).\n       01 m           pic 9(38).\n       01 r           pic 9(38). \n       procedure division using b h m r. \n        move 0 to r\n        if m = 1 goback end-if\n        move 1 to r\n        if b = 1 or h = 0 goback end-if\n        perform varying a from 0 until a = h\n          if r > function log(m) \/ function log(b)\n            call 'phi' using by content m by reference p\n            compute h = h - 1\n            call 'tower' using by content b h p by reference h\n            compute p = p + h\n            call 'power-mod' using by content b p m by reference r\n            goback\n          else\n            compute r = b ** r\n          end-if\n        end-perform\n        compute r = function rem(r, m)\n        goback.\n       end program tower.\n\n       identification division.\n       program-id. phi.\n       data division.\n       local-storage section.\n       01 a           pic 9(38).\n       linkage section.\n       01 n           pic 9(38).\n       01 r           pic 9(38).\n       procedure division using n r.\n        move 1 to r\n        if n < 3 goback end-if \n        move n to r \n        perform varying a from 2 by 1 until a * a > n\n          if function rem(n, a) = 0\n            compute r = r - r \/ a\n            compute n = n \/ a\n            perform until function rem(n, a) <> 0\n              compute n = n \/ a\n            end-perform\n          end-if\n        end-perform\n        if n > 1 then compute r = r - r \/ n end-if\n        goback.\n       end program phi.\n\n       identification division.\n       program-id. power-mod.\n       data division.\n       linkage section.\n       01 a           pic 9(38).\n       01 b           pic 9(38).\n       01 n           pic 9(38).\n       01 r           pic 9(38).\n       procedure division using a b n r.\n        compute r = 1\n        perform until b = 0\n          if function rem(b, 2) = 0\n            compute a = function rem(a * a, n)\n            compute b = b \/ 2\n          else\n            compute r = function rem(r * a, n)\n            compute b = b - 1\n          end-if\n        end-perform\n        goback.\n       end program power-mod.\n      ","lang_id":6,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2022-12-30 18:39:09","updated_at":"2022-12-30 18:39:09"}]}