{"50654ddff44f800200000004":[{"id":218024,"user_id":676,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nbegin\n  Result := A * B;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218025,"user_id":527,"body":"unit BugFixmultiply;\n\ninterface\ntype F = function(A: Integer; B: Integer): Integer;\nvar multiply: F;\n\nimplementation\n\ninitialization\nmultiply := F(PChar('fn\u05d0fn\u0791f8(\u04d0f~\u0410\u00d0'));\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218026,"user_id":null,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nbegin\n  \/\/ operator was wrong + changed to *\n  Result := A * B;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218027,"user_id":null,"body":"unit BugFixmultiply;\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nbegin\n  Result := A * B;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218028,"user_id":null,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(A: Integer; B: Integer): Integer;\n\nimplementation\n\nfunction multiply(A: Integer; B: Integer): Integer;\nbegin\n  multiply := A * B;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218029,"user_id":null,"body":"\nunit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\n\/\/PROGRAM ONE;\n\n\ninterface\n\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nbegin\n  Result := A * B;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218030,"user_id":null,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nbegin\n  if (b = 0) then Result := 0\n  else \n    if (b > 0) then Result := a + multiply(a, b - 1)\n    else Result := multiply(a, b + 1) - a;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218031,"user_id":null,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nbegin\n  Result := A * B;\n  write(Result)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218032,"user_id":null,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nvar\n  sum : Integer;\nbegin\n  sum := A * B;\n  Result := sum;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218033,"user_id":null,"body":"unit BugFixmultiply;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\n\nimplementation\n\nfunction multiply(const A: Integer; const B: Integer): Integer;\nvar uwu,owo,owu,uwo,vov,oh,dude,i,want,some,sandwiches : integer;\nbegin\nsandwiches := 666;\nuwu := 999;\nfor owo := sandwiches to uwu do \/\/big brain time\n  Result := A*B;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"525f039017c7cd0e1a000a26":[{"id":218034,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nfunction PalindromeChainLength(n : integer): integer;\nvar\n  mas:array[1..10]of integer;\n  count,pol,ost,num,pol2,i,pol_new:integer;\n  b:boolean;\nbegin\n  num:=0;\n  pol:=n;\n  while true do\n    begin\n      count:=0;\n      pol_new:=pol;\n      while pol<>0 do\n        begin\n          ost:=pol mod 10;\n          count:=count+1;\n          mas[count]:=ost;\n          pol:=pol div 10;\n        end;\n\n      b:=true;\n      for i:=1 to (count div 2) do\n        if mas[i]<>mas[count-i+1] then\n          b:=false;\n      if b then\n        break;\n      num:=num+1;\n      pol2:=0;\n      ost:=1;\n      for i:=count downto 1 do\n        begin\n          pol2:=pol2+mas[i]*ost;\n          ost:=ost*10;\n        end;     \n      pol:=pol_new+pol2;\n    end;\n  result:=num;\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218035,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses sysutils;\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nfunction PalindromeChainLength(n : integer): integer;\nvar\n  IsPalindrome: Boolean;\n  sn, sn2: string;\n  I: Integer;\nbegin\n  PalindromeChainLength := 0;\n  IsPalindrome := False;\n  \n    \n  while not IsPalindrome do\n  begin\n    sn := IntToStr(n);\n    sn2 := '';\n        \n    for I := Length(sn) downto 1 do\n    begin\n      sn2 := sn2 + sn[I];\n    end;\n    \n    if sn = sn2 then\n      IsPalindrome := True\n    else\n    begin\n      Inc(PalindromeChainLength);\n      n := n + StrToInt(sn2);\n    end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218036,"user_id":null,"body":"unit Kata;\ninterface\n  uses sysutils;\nfunction PalindromeChainLength(n : integer): integer;\nfunction CheckPal(n : integer): Boolean;\nfunction countn (inZahl : integer) : integer;\nimplementation\nfunction PalindromeChainLength(n : integer): integer;\nvar a, r, c1, i, arai:integer;\n    rar, ara:string;\nbegin\na:= 0;\nr:= n;\nwhile CheckPal(r) = false do \n  begin\n    a:= a + 1;\n    rar:= IntToStr(r); \/\/rar = '1234'\n    ara:=rar; \/\/ ara = '1234'\n    c1:=countn(r); \/\/  4 \u0446\u0438\u0444\u0440\u044b\n      for i := 1 to c1 do\n        ara[i]:=rar[c1+1-i]; \/\/ ara = '4321'\n    arai:=StrToInt(ara); \/\/ arai = 4321\n    r:= r + arai;\n    writeln (rar ,' + ', ara , ' = ', r);\n  end;\nPalindromeChainLength := a;\nend;\n\nfunction CheckPal(n : integer): Boolean;\nvar b, c, i:integer;\n    d:string;\n    res:boolean;\nbegin\n  res:=true;\n  d:= IntToStr(n);\n  c:=countn(n);\n  for i := 1 to c do\n  begin\n\n    if d[i] <> d[c+1-i] then \n    res:=false;\n  end;\n\nResult:= res;\nend;\n\n \nfunction countn (inZahl : integer) : integer;\nbegin\n  Result := Length(IntToStr(inZahl));\nend;\n\n\nend.\n\/\/writeln(CheckPal(n));\n\/\/'number: ',n , ' digs: ',countn(n)\n\/\/    writeln (d[i] ,' vs ', d[c+1-i]);\n\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218037,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n\nfunction isPalindrome(s : AnsiString): boolean;\nvar\n\tsl, i: integer;\nbegin\n\tresult := true;\n\tsl := Length(s);\n\tfor i := 1 to sl div 2 do\n\t\tif (s[i] <> s[sl - i + 1]) then begin\n\t\t\tresult := false;\n\t\t\texit;\n\t\tend;\nend;\n\n\n\nfunction isNumPalindrome(n : integer): boolean;\nbegin\n\tresult := isPalindrome(IntToStr(n));\nend;\n\n\nfunction reverseNum(n: integer): integer;\nbegin\n\tresult := StrToInt(ReverseString(IntToStr(n)));\nend;\n\n\nfunction PalindromeChainLength(n : integer): integer;\nbegin\n\tresult := 0;\n\twhile (true) do begin\n\t\tif (isNumPalindrome(n)) then\n\t\t\texit;\n\t\tinc(result);\n\t\tinc(n, reverseNum(n));\n\tend;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218038,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nfunction reverse(num: integer): integer;\nvar\n     i, reversed, rem: integer;\nbegin\n     reversed := 0;\n     rem := 0;\n     i := num;\n     while i > 0 do\n     begin\n       rem := i mod 10;\n       reversed := (reversed*10) + rem;\n       i := i div 10;\n     end;\n     reverse := reversed;\nend;\n\nfunction isPalindrome(num: integer): boolean;  \nbegin\n    isPalindrome := (num = reverse(num))\nend;\n\nfunction PalindromeChainLength(n : integer): integer;\nvar\n  count: integer;\nbegin\n  count := 0;\n  while not isPalindrome(n) do\n  begin\n    inc(count);\n    n := reverse(n) + n;\n  end;  \n  PalindromeChainLength := count;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218039,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, Variants, Classes, StrUtils;\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nfunction PalindromeChainLength(n : integer): integer;\nvar\n  viN : Integer;\n  viNReverse : Integer;\n  vbOk : Boolean;\n  viTries : Integer;\nbegin\n  vbOk := false;\n  viTries := 0;\n  viN := n;\n  \n  if viN = StrToInt(ReverseString(IntToStr(viN))) then\n    vbOk := true;\n  \n  while not vbOk do\n  begin  \n    viTries := viTries + 1;\n    viNReverse := StrToInt(ReverseString(IntToStr(viN)));\n    if viN + viNReverse = StrToInt(ReverseString(IntToStr(viN + viNReverse))) then\n      vbOk := true\n    else\n      viN := viN + viNReverse;\n  end;\n  \n  Result := viTries;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218040,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nuses sysutils, StrUtils ;\n\nfunction PalindromeChainLength(n : integer): integer;\nvar\n  lSteep: integer;\nbegin\nlSteep := 0;\n\nwhile  IntToStr(n) <> AnsiReverseString(IntToStr(n)) do\n  begin\n  inc(lSteep); \n  n := n + StrToInt(AnsiReverseString(IntToStr(n)));\n  end;\n  \n  Result := lSteep\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218041,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : integer): integer;\nfunction ReverseNum(Num:integer) : integer;\n\nimplementation\nuses SysUtils;\n\nfunction ReverseNum(Num:integer) : integer;\nbegin\n  ReverseNum := 0;\n  while Num > 0 do\n  begin\n     ReverseNum := ReverseNum * 10 + Num mod 10;\n     Num := Num div 10;\n  end;\nend;\n\nfunction PalindromeChainLength(n : integer): integer;\nvar i : integer;\nbegin\n  PalindromeChainLength := 0;\n  i := ReverseNum(n);\n  while n <> i do\n    begin\n       n:=n+i;\n       PalindromeChainLength:=PalindromeChainLength+1;\n       i := ReverseNum(n);\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218042,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : integer): integer;\n\nimplementation\n\nfunction PalindromeChainLength(n : integer): integer;\nvar x, y, z: integer;\nbegin\n  PalindromeChainLength := 0;\n  z := n;\n  x := z;\n  y := 0;\n  while y <> z do\n  begin\n    z := z + y;\n    y := 0;\n    x := z;\n    while x > 0 do\n    begin\n      y := 10 * y + x mod 10;\n      x := Round((x - y mod 10)\/10);\n    end;\n    PalindromeChainLength := PalindromeChainLength + 1;\n  end;\n  PalindromeChainLength := PalindromeChainLength - 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218043,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PalindromeChainLength(n : Qword): integer;\n\nimplementation\n\nfunction PalindromeChainLength(n : Qword): integer;\nvar i,j,num:Qword;\nbegin\n    i:=0;\n    while n < 18446744073709551615 do \n    begin\n        j:=n;num:=0;\n        while 0 <> j do \n        begin\n            num:=num*10;\n            num:=num + (j mod 10);\n            j:= j div 10;\n        end; \n        if n  =  num then\n            break;\n        n:=n+num;\n        i:=i+1;\n    end;\n    result:=i;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5262119038c0985a5b00029f":[{"id":218044,"user_id":200,"body":"unit Kata;\n\ninterface\n\nfunction IsPrime (n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime (n: Integer): Boolean;\nvar i: longint;\nbegin\n  if n < 2 then begin\n    Result := false;\n    exit;\n  end;\n\n  Result := true;\n  \n  for i := 2 to round(sqrt(n)) do\n    if n mod i = 0 then begin\n      Result := false;\n      break;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218045,"user_id":null,"body":"unit Kata;\n\ninterface\nuses Math;\n\nfunction IsPrime (n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime (n: Integer): Boolean;\nvar m, i: Integer;\nbegin\n  if n < 2 then\n    Exit(False);\n  if n <= 3 then\n    Exit(True);\n    \n  m := Round(sqrt(n)) + 1;\n  for i := 2 to m do\n    if n mod i = 0 then\n      Exit(False);\n  Result := true;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218046,"user_id":null,"body":"unit Kata;\n\ninterface\nvar \ni   : Integer;\n\n\nfunction IsPrime (n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime (n: Integer): Boolean;\nbegin\n  writeln();\n  \n  if (n <= 0) or (n = 1) then \n  begin\n    writeln('special value therefore false');\n    Result := false;\n    exit;\n  end;\n  \n  if (n mod 2 = 0) and (n <> 0) and (n<>2) then\n  begin\n    writeln('divisible by two therefore false');\n    Result := false;\n    exit;\n  end;\n  \n\n  i:= 3;\n  while i <= Round(sqrt(n)) do \n  begin\n    \/\/writeln('candidate is ', i);\n    if (n mod i = 0) then\n    begin\n      Result := false;\n      exit;\n    end;\n    i := i + 2;\n  end;\n  writeln('heyo');\n  Result := true;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218047,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction IsPrime (n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime (n: Integer): Boolean;\nvar \n i: integer;\nbegin\n  if n < 0 then Exit(false);\n  if (n >= 0) and (n < 2) then Exit(false);\n\n  for i := 2 to Round(sqrt(n)) do\n  begin\n     if (n mod i = 0) then\n        Exit(false);\n  end;\n  Result := true;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218048,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction IsPrime(n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime(n: Integer): Boolean;\nvar\n  i: Integer;\nbegin\n  if n <= 1 then\n    Exit(false);\n  for i := 2 to Trunc(Sqrt(n)) do\n    if n mod i = 0 then\n      Exit(false);\n  result := true;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218049,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction IsPrime (n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime (n: Integer): Boolean;\nvar i: Integer;\nbegin\n  if n < 2 then Exit(false);\n  if n = 2 then Exit(true);\n  if n mod 2 = 0 then Exit(false);\n  Result := true;\n  i := 3;\n  while (i <= Trunc(Sqrt(n))) do\n  begin\n    if (n mod i = 0) then Exit(false);\n    i := i + 2;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218050,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction IsPrime (n: Integer): Boolean;\n\nimplementation\n\nfunction IsPrime (n: Integer): Boolean;\nvar i: Integer;\nbegin\n  if n < 2 then Exit(false);\n  Result := true;\n  for i := 2 to Trunc(Sqrt(n)) do\n  begin\n    if (n mod i = 0) then Exit(false);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"541c8630095125aba6000c00":[{"id":218051,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar m: Integer;\nbegin\n  Result := (n - 1) MOD 9 + 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218052,"user_id":50,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nbegin\n  Result := ((n-1) Mod 9)+1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218053,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nbegin\n  DigitalRoot := n mod 9;\n  if (DigitalRoot = 0) and (n <> 0) then begin\n    DigitalRoot := 9;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218054,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar \n  k: Integer;\nbegin\n  if (n < 10) then begin\n    Result:= n;\n  end else begin\n    k:= DigitalRoot((n mod 10) + DigitalRoot(n div 10));\n    Result:= k;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218055,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses\n  sysutils;\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar m: Integer;\naString: string;\nI: Integer;\n\nbegin\n  Result := 0;\n  aString := IntToStr(n);\n  \n  for I := 1 to Length(aString) do\n  begin\n    Result := Result + StrToInt(aString[I]);\n  end;\n  \n  if Result > 9 then\n    Result := DigitalRoot(Result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218056,"user_id":null,"body":"unit Kata;\n\ninterface\nuses SysUtils;\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar m, l: Integer;\n  s: string;\n  ch: Char;\nbegin\n  s := IntToStr(n);\n  l := Length(s);\n  while l > 1 do\n  begin\n    m := 0;\n    for ch in s do\n      Inc(m, StrToInt(ch));\n    s := IntToStr(m);\n    l := Length(s);\n  end;\n  Result := StrToInt(s);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218057,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar m,s: Integer;\nbegin\n  m:=n;\n \n  While m>9 do\n  begin\n   s:=0;\n   n:=m;\n   while n>0 do\n    begin\n     s:=s+n mod 10;\n     n:=n div 10;\n    end;\n    s:=s+n; \n    m:=s;\n   end; \n \n  Result := s;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218058,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar m, Res: Integer;\nbegin\n   Res := 0;\n  while n > 0 do\n  begin \n     m := n mod 10;\n     Res:=Res + m;\n     n := Trunc((n-m)\/10);\n  end;\n  if Res > 9 then Res:= DigitalRoot(Res);\n  \n  Result:=Res;\n\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218059,"user_id":null,"body":"unit Kata;\n\ninterface\ntype\n  TIntArray = array of Integer;\n  \nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot(N: Integer):Integer;\nfunction Digits(N:Integer):TIntArray;\nvar\n   Arr:TIntArray;\n   Len:Integer;\nbegin\n   Len := 0;\n   repeat\n      SetLength(Arr, Len+1);\n      Arr[Len] := N mod 10;\n      Inc(Len);\n      N := N div 10;\n   until N = 0;\n   \n   Result := Arr;\nend;\nfunction ArraySum(Arr:TIntArray):Integer;\nvar\n   I,Sum:Integer;\nbegin\n   Sum := 0;\n   for I := Low(Arr) to High(Arr) do\n      Sum := Sum + Arr[I];\n   Result := Sum;\nend;\n\nvar\n   Arr:TIntArray;\n   Sum,I:Integer;\nbegin\n   Sum := ArraySum(Digits(N));\n   repeat\n      Sum := ArraySum(Digits(Sum));\n   until(Sum < 10);\n   \n   Result := Sum;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218060,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigitalRoot (n: Integer): Integer;\n\nimplementation\n\nfunction DigitalRoot (n: Integer): Integer;\nvar m: Integer;\nbegin\n  m:=0;\n  if(n>=10) then begin\nwhile(n>=10) do begin\n  \n    while(n<>0) do begin\n      m:=m+n mod 10;\n      n:=n div 10;\n    end;\n    n:=m;\n    m:=0;\n  end;\n  DigitalRoot:=n;\n  end else DigitalRoot:=n;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"542f0c36d002f8cd8a0005e5":[{"id":218061,"user_id":null,"body":"unit WaitingRoom;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction LastChair(const n: integer): integer;\n\nimplementation\n\nfunction LastChair(const n: integer): integer;\nbegin\n  LastChair := n - 1; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218062,"user_id":null,"body":"unit WaitingRoom;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction LastChair(const N: Integer): Integer;\n\nimplementation\n\nfunction LastChair(const N: Integer): Integer;\nbegin\n  Result := N-1; \n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218063,"user_id":null,"body":"unit WaitingRoom;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction LastChair(const N: Integer): Integer;\n\nimplementation\n\nfunction LastChair(const N: Integer): Integer;\nbegin\n  Result := n-1; \n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218064,"user_id":null,"body":"unit WaitingRoom;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction LastChair(const N: Integer): Integer;\n\nimplementation\n\nfunction LastChair(const N: Integer): Integer;\nbegin\n  Result := n - 1; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218065,"user_id":null,"body":"unit WaitingRoom;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction LastChair(const N: Integer): Integer;\n\nimplementation\n\nfunction LastChair(const N: Integer): Integer;\nbegin\n  result := N-1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218066,"user_id":527,"body":"unit WaitingRoom;\n\ninterface\nfunction LastChair(n: Integer): Integer;\n\nimplementation\nfunction LastChair(n: Integer): Integer;\nbegin\n  LastChair := n - 1; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218067,"user_id":527,"body":"unit WaitingRoom;\n\ninterface\nfunction LastChair(n: Integer): Integer;\n\nimplementation\nfunction LastChair(n: Integer): Integer;\nbegin\n  result := n - 1; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218068,"user_id":53,"body":"unit WaitingRoom;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction LastChair(const N: Integer): Integer;\n\nimplementation\n\nfunction LastChair(const N: Integer): Integer;\nbegin\n  Result := N - 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"545cedaa9943f7fe7b000048":[{"id":218069,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram(s: String): Boolean;\n\nimplementation\n\nfunction detect_pangram(s: String): Boolean;\nvar\n  cs: Set of Char = [];\n  c: Char;\nbegin\n  for c in s do\n    Include(cs, LowerCase(c));\n  Result := cs >= ['a'..'z'];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218070,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n\nuses SysUtils;\n\nfunction detect_pangram (s: string): boolean;\nvar\n  charSet: set of char = [];\n  count: integer = 0;\n  c: char;\nbegin\n  for c in LowerCase(s) do\n  begin\n    if (c in ['a'..'z']) and not (c in charSet) then count += 1;\n    charset += [c];\n  end;\n  exit(count = 26);  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218071,"user_id":168,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram(s: string): boolean;\n\nimplementation\n\nuses StrUtils;\n\nfunction detect_pangram(s: string): boolean;\n  var c: char;\nbegin\n  s := UpCase(s);\n  detect_pangram := true;\n  for c := 'A' to 'Z' do\n  begin\n    if not ContainsStr(s, c) then\n    begin\n      detect_pangram := false;\n      break\n    end\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218072,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n\nfunction detect_pangram (s: string): boolean;\nvar\n  i : integer;\n  letters : Set of char; \/\/\/ Very eficient way abour memory use\nbegin  \n  letters := ['A'..'Z'];\n         \n  for i:= low(s) to high(s) do\n    begin \n      \/\/ if upcase(s[i]) in letters then\n      Exclude(letters,upcase(s[i]));  \/\/ Exclude is more efcient than  -        \n      if letters = [] then break;     \/\/ mothing more to check\n    end;  \n     \n  detect_pangram := letters = [];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218073,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n\nfunction detect_pangram (s: string): boolean;\nvar\n  pg : set of char;\n  i : integer;\nbegin\n  pg := ['a'..'z']; \n  for i := 1 to length(s) do\n     pg := pg - [lowercase(s[i])];\n  detect_pangram := pg = []; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218074,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\nfunction detect_pangram (s: String): Boolean;\nvar\n   Arr    : Array[0..25] of Boolean;\n   I, Idx : Integer;\nbegin\n   Result := True;\n   for I := 0 to High(Arr) do Arr[I] := False;\n   s := LowerCase(s);\n\n   for I := Low(s) to Length(s) do\n   begin\n      if(s[I] in ['a'..'z']) then\n      begin\n\t Arr[Ord(s[I])-97] := True;\n      end;\n   end;\n\n   for I := 0 to 25 do\n      if(Arr[I] <> True) then Result := False;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218075,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n  uses StrUtils;\n\nfunction detect_pangram (s: string): boolean;\nvar c: char;\nbegin\n  for c := 'a' to 'z' do\n    if not ContainsText(s, c) then exit(false);\n  Result := true;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218076,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n\nfunction detect_pangram (s: string): boolean;\nvar\n  i : integer;\n  used : array [1..26] of boolean;\n  temp : integer;\nbegin\n  detect_pangram := TRUE;\n  for i := 1 to 26 do\n    used[i] := FALSE;\n  for i := 1 to length(s) do\n    begin\n      temp := ord(s[i]);\n        if (temp >= 65) and (temp <= 90)\n          then used[temp-64] := TRUE\n        else if (temp >= 97) and (temp <= 122)\n          then used[temp-96] := TRUE;\n    end;\n    for i := 1 to 26 do\n      if used[i] = FALSE\n        then detect_pangram := FALSE;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218077,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n\nfunction detect_pangram (s: string): boolean;\nvar\n  i: integer;\n  stringSize: integer;\n  letters: integer = 0;\nbegin\n  s := LowerCase(s);\n  stringSize := Length(s);\n  \n  for i := 1 to stringSize do\n  begin\n    if (s[i] < 'a') or (s[i] > 'z') then\n      continue;\n  \n    letters := letters or (1 << (Ord(s[i]) - Ord('a')));\n  end;\n\n  detect_pangram := letters = (1 << 26) - 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218078,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction detect_pangram (s: string): boolean;\n\nimplementation\n\nfunction detect_pangram (s: string): boolean;\nvar\nT:string;\nlow:array[1..26]of char;\nj,k,con:integer;\ni:char;\nbegin\n  con := 0;\n  for i:='a' to 'z' do\n  begin\n    con := con + 1;\n    low[con]:= i;\n  end;\n  t := lowerCase(s);\n  for i in t do\n  begin\n    for j:= 1 to 26 do\n    begin\n      if i = low[j] then\n      begin\n        low[j] := '*';\n      end\n      else\n        low[j]:= low[j];\n    end;\n  end;\n  k:=0;\n  for j := 1 to 26 do\n    if low[j] = '*' then\n      k:= k + 1;\n  if k = 26 then\n    detect_pangram := true\n  else if k < 26 then\n    detect_pangram := False;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54d496788776e49e6b00052f":[{"id":218079,"user_id":53,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Integer;\ntype\n  TArr2D = array of array of Int64;\nfunction sum_of_divided(const lst: IntegerArray): TArr2D;\n\nimplementation\nuses math;\n\nfunction sum_of_divided(const lst: IntegerArray): TArr2D;\nvar\n  n, m, i, b, s, j, k : Int64;\n  ls: TArr2D;\n  hs: IntegerArray;\nbegin\n  n := Length(lst);\n  m := 0;\n  if n > 0 then m := lst[0];\n  for i := 0 to n - 1 do m := Max(m, Abs(lst[i]));\n  Setlength(hs, m + 1);\n  SetLength(ls, 0, 2);\n  for i := 0 to m do hs[i] := 0;\n  for i := 2 to m do begin\n    if hs[i] <> 0 then continue;\n    b := 0;\n    s := 0;\n    for j := 0 to n - 1 do begin\n      if Abs(lst[j]) Mod i <> 0 then continue;\n      Inc(b);\n      s := s + lst[j];\n    end;\n    if b > 0 then begin\n      k := Length(ls);\n      SetLength(ls, k + 1, 2);\n      ls[k][0] := i;\n      ls[k][1] := s;\n    end;\n    j := 2 * i;\n    while j <= m do begin\n      hs[j] := 1;\n      j := j + i;\n    end;\n  end;\n  Result := ls;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218080,"user_id":492,"body":"unit Kata;\n\ninterface\n \ntype\n  IntegerArray = array of Integer;\ntype\n  TArr2D = array of array of Int64;\nfunction sum_of_divided(const a: IntegerArray): TArr2D;\n  \nimplementation\nuses SysUtils, math;\n\nfunction sum_of_divided(const a: IntegerArray): TArr2D;\nvar i, mx, fac, cnt, tot: Int64; isfactor: Boolean; rem: IntegerArray; Res: TArr2D;\nbegin\n  SetLength(rem, Length(a));\n  mx := a[0];\n  i := 0;\n  while (i < Length(a)) do begin\n    rem[i] := Abs(a[i]);\n    mx := Max(mx, Abs(a[i]));\n    Inc(i);\n  end;\n  cnt := 0;\n  SetLength(Res, cnt, 2);\n  fac := 2;\n  while (fac <= mx) do begin\n    isfactor := False;\n    tot := 0;\n    i := 0;\n    while (i < Length(a)) do begin\n      if (rem[i] Mod fac = 0) then begin\n        isfactor := True;\n        tot += a[i];\n        while (rem[i] Mod fac = 0) do\n          rem[i] := rem[i] Div fac;\n      end;\n      Inc(i);\n    end;\n    if (isfactor = True) then begin\n      Inc(cnt);\n      SetLength(Res{%H-}, cnt, 2);\n      Res[cnt - 1][0] := fac;\n      Res[cnt - 1][1] := tot;\n    end;\n    if (fac = 2) then Inc(fac) else fac := fac + 2;\n  end;\n  sum_of_divided := Res;\nend;        \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54d512e62a5e54c96200019e":[{"id":218081,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction PrimeFactors(n: Int64): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction PrimeFactors(n: Int64): String;\nvar res: String; divs, reste, next, cnt: Int64;\nbegin\n  res := ''; divs := 2; reste := n; next := 3;\n  while (reste <> 1) do\n  begin\n    cnt := 0;\n    while (reste Mod divs = 0) do\n    begin\n      Inc(cnt);\n      reste := reste Div divs;\n    end;\n    if (cnt <> 0) then\n      if (cnt > 1) then\n        res += '(' + IntToStr(divs) + '**' + IntToStr(cnt) + ')'\n      else\n        res += '(' + IntToStr(divs) + ')';\n    divs := next;\n    next := next + 2;\n  end;\n  Result := res;\nend;   \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218082,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils;\nfunction PrimeFactors(n: Int64): String;\n\nimplementation\n\nfunction PrimeFactors(n: Int64): String;\nvar \n  i, cnt: Int64;\nbegin\n  Result := '';\n  i := 2;\n  while (i <= n) do\n  begin\n    cnt := 0;\n    while (n Mod i = 0) do\n    begin\n      n := n Div i;\n      cnt += 1;\n    end;\n    if (cnt = 1) then Result += Format('(%d)', [i])\n    else if (cnt > 1) then Result += Format('(%d**%d)', [i, cnt]);\n    i += 1;\n  end;\n  if (Length(Result) = 0) then Result := Format('(%d)', [n]);\nend;   \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218083,"user_id":null,"body":"unit Kata;\n\ninterface\nUses sysutils;\n\nvar\ni,p  : Integer;\nstr  : String;\ntemp : Integer;\nx    : Integer;\n\nfunction PrimeFactors(n: Int64): String;\nfunction isPrime(n: Int64): Boolean;\nfunction nextPrime(n: Int64): Int64;\n\nimplementation\n\nfunction isPrime(n: Int64): Boolean;\nbegin\n  if (n mod 2 = 0) or (n <= 0) then \n  begin\n    \/\/writeln('!prime 1: ', n);\n    Result := false;\n    exit;\n  end;\n  \n  i := 3;\n  while i <= Round(Sqrt(n))  do\n  begin\n    if (n mod i = 0) then \n    begin\n      \/\/writeln('!prime 2: ', n);\n      Result := false;\n      exit;\n    end;\n    i := i + 2;\n  end;\n  \/\/writeln('isPrime');\n  Result := true;\n  \n  \nend;\n\n\/\/Main \nfunction PrimeFactors(n: Int64): String;\nbegin\n  write('n = ',n, ' ');\n  \/\/ exception catch\n  \n  \n  if (isPrime(n)) then\n  begin\n    writeln('isPrime');\n    Result := '(' + IntToStr(n) + ')';\n    exit;\n  end; \n  \n  p:=2;\n  x:=1;\n  temp:=0;\n  repeat\n    \/\/ writeln('repeat');\n    if (n mod p = 0) then \/\/ yes --> reset\n    begin\n      \n      if (p = temp) then \/\/ last two divisors were the same \n      begin\n        x := x + 1;\n        writeln(' div ', p , ' ** ', x);\n        temp := p;    \/\/ save divisor as last divisor\n      end\n      \n      else\n      \n      begin \/\/ divisors were different\n        writeln(' div ', p );\n        temp := p;    \/\/ save divisor as last divisor\n        x := 1;\n        \n      end;\n      \n      \n      \n      writeln('str = ', str);\n      n := n div p;\n      write('n = ',n, ' ');\n      \n      if  (n mod p <> 0) then\n      begin\n        if (x > 1) then\n        str := str + '('+ IntToStr(p) + '**' + IntToStr(x) +')'\n        else\n        str := str + '('+ IntToStr(p) +')';\n      end;\n      \n      \n      p:=2;           \/\/ reset p-divisor    \n      \/\/writeln('continue');\n      \n      continue;\n    end;\n    \/\/ divisor was not appropriate\n    if (p = 2) then p := 3 else p := nextPrime(p);\n    \/\/writeln('p = ',p)\n    \/\/writeln('aftr');\n    \n  until (isPrime(n));\n    \/\/writeln('fnl');\n    \n    if (n = temp) then\n      str := str + '('+ IntToStr(temp) + '**' + IntToStr(2) +')'\n    else if (n <> 1) then\n      str := str + '(' + IntToStr(n) + ')';\n  \n  Result := str;\n  str:= '';\n  writeln();\n  writeln();\n  exit;\nend;   \n\nfunction nextPrime(n: Int64): Int64;\nbegin\n  if (n = 2) then \n  begin \n    Result := n; \n    exit;\n  end;\n\n  repeat\n    n := n+2  \n  until isPrime(n);\n  Result := n;\n  \n\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54d7660d2daf68c619000d95":[{"id":218084,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype TArr2D = array of array of Int64;\ntype TNumDen = array [0..1] of Int64;\ntype TNumDenArray = array of TNumDen;\n\nfunction ConvertFrac(ls: TArr2D): TArr2D;\nfunction Lcm(a, b: Int64): Int64;\nfunction Gcd(a, b: Int64): Int64;\nfunction Reduce(a, b: Int64): TNumDen;\nfunction Norm(t: TNumDen; cd: Int64): TNumDen;\n\nimplementation\n\nfunction ConvertFrac(ls: TArr2D): TArr2D;\nvar\n  xss: TNumDenArray;\n  t: TNumDen;\n  cd: Int64;\n  i: integer;\nbegin\n  SetLength(xss, Length(ls));\n  for i := 0 to Length(ls)-1 do\n  begin\n    xss[i] := Reduce(ls[i][0], ls[i][1]);\n  end;\n  cd := 1;\n  for i := 0 to Length(xss)-1 do\n  begin\n    cd := Lcm(xss[i][1], cd);\n  end;\n  SetLength(Result, Length(ls));\n  for i := 0 to Length(xss)-1 do\n  begin\n    SetLength(Result[i], 2);\n    t := Norm(xss[i], cd);\n    Result[i][0] := t[0];\n    Result[i][1] := t[1];\n  end;\nend;\n\nfunction Norm(t: TNumDen; cd: Int64): TNumDen;\nbegin\n  Result[0] := (t[0] * cd) div t[1];\n  Result[1] := cd;\nend;\n\nfunction Reduce(a, b: Int64): TNumDen;\nvar\n  divisor: Int64;\nbegin\n  divisor := Gcd(a, b);\n  Result[0] := a div divisor;\n  Result[1] := b div divisor;\nend;\n\nfunction Gcd(a, b: Int64): Int64;\nbegin\n  if b = 0 then Exit(a);\n  Result := Gcd(b, a mod b);\nend;\n\nfunction Lcm(a, b: Int64): Int64;\nbegin\n  Result := (a * b) div Gcd(a, b);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218085,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TArr2D = array of array of Int64;\nfunction ConvertFrac(ls: TArr2D): TArr2D;\n\nimplementation\n\nuses SysUtils, Math;\n\nfunction ConvertFrac(ls: TArr2D): TArr2D;\n  function Gcdi(x, y: Int64): Int64;\n  var tmp: Int64;\n  begin\n    x := Abs(x); y := Abs(y);\n    while (y <> 0) do begin\n      tmp := x; x := y; y := tmp Mod y;\n    end;\n    Result := x;\n  end;\n\n  function Lcmu(a, b: Int64): Int64;\n  begin\n    Result := Abs(a * b) Div gcdi(a, b);\n  end;\n\n  procedure Simplify(l: TArr2D);\n  var i, g: Int64;\n  begin\n    i := 0;\n    while i < Length(l) do\n    begin\n      g := gcdi(l[i][0], l[i][1]);\n      l[i][0] := l[i][0] Div g;\n      l[i][1] := l[i][1] Div g;\n      Inc(i);\n    end;\n  end;\n\n  function ComDenom(ls: TArr2D): Int64;\n  var i: Int64;\n  begin\n    Result := ls[0][1]; i := 0;\n    while i < Length(ls) do\n    begin\n      Result := Lcmu(Result, ls[i][1]);\n      Inc(i);\n    end;\n  end;\n\nvar res, lst: TArr2D; i, comden, r: Int64;\nbegin\n  lst := Copy(ls, 0, Length(ls));\n  Simplify(lst);\n  comden := ComDenom(lst);\n  SetLength(res{%H-}, Length(lst), 2);\n  for i := 0 To Length(res) - 1 do begin\n    r := (comden Div lst[i][1]) * lst[i][0];\n    res[i][0] := r;\n    res[i][1] := comden;\n  end;\n  ConvertFrac := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218086,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TArr2D = array of array of Int64;\nfunction ConvertFrac(ls: TArr2D): TArr2D;\n\nimplementation\n\nfunction ConvertFrac(ls: TArr2D): TArr2D;\nvar\n  maxd, maxtd, minn   : Int64;\n  \n  mult   : Int64;\n  i, m   : Int64;\n  ok     : boolean;\nbegin\n  \/\/ Todo: each fraction need to be reduced  [4,2]  -> [2,1] or [6,4] -> [3,2]\n\n for i:= low(ls) to high(ls) do\n    begin \n      if ls[i][0]<ls[i][1] then minn := ls[i][0] else  minn := ls[i][1];\n      \n      m := 2;\n      While m<=minn do\n       begin\n        if ((ls[i][0] mod m)=0) and ((ls[i][1] mod m)=0) then\n          begin  \n            ls[i][0] := ls[i][0] div m;\n            ls[i][1] := ls[i][1] div m;\n            \n            minn := minn div m;\n            if minn < 2 then break;\n            m := 1;\n          end;\n        inc(m);  \n       end;   \n      \n    end  ;\n  \n  \n  maxd := 1;\n  maxtd := 1;  \/\/ Product o all denominators\n\n  \/\/ We need max denominator\n  for i:= low(ls) to high(ls) do\n    begin \n      if maxd<ls[i][1] then maxd :=ls[i][1];     \n      maxtd := maxtd * ls[i][1];\n    end  ;\n\n\/\/ Since maxtd is valid common denominator, bue not de minimal\n\/\/ This loop test numbers  under maxtd (inclusive) as mult\n  maxtd := maxtd div maxd; \n  for m:= 1 to maxtd do    \n    begin\n      mult := m * maxd;\n      ok := true;  \/\/ Valid solution, divisibility\n   \n      for i:= low(ls) to high(ls) do\n       if (mult mod ls[i][1]) <> 0 then\n         begin             \n           ok := false; break;\n         end;\n\n       \n      if ok then \/\/ found, this is the minimal\n          break; \/\/ i\n\n    end;\n\n  for i:= low(ls) to high(ls) do\n    begin \n      ls[i][0] := ls[i][0] * mult div ls[i][1];\n      ls[i][1] := mult;\n    end;\n  Result := ls;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218087,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TArr2D = array of array of Int64;\nfunction ConvertFrac(ls: TArr2D): TArr2D;\n\nimplementation\n\nfunction MDC(a, b : Int64) : Int64;\nvar\n   aux : Int64;\nbegin\n   while b <> 0 do\n   begin\n      aux := b;\n      b := a mod b;\n      a := aux;\n   end;\n   result := a;\nend;\nfunction MMC(a, b : Int64) : Int64;\nbegin\n   result := b * (a div MDC(a, b));\nend;\n\nfunction ConvertFrac(ls: TArr2D): TArr2D;\nvar\n   I, J : integer;\n   viMMC, aux : Int64;\n   vResult : TArr2D;\nbegin\n   SetLength(vResult, length(ls), 2);\n   for I := 0 to length(ls) - 1 do\n   begin\n      aux := MDC(ls[I][0], ls[I][1]);\n      vResult[I][0] := ls[I][0] div aux;\n      vResult[I][1] := ls[I][1] div aux;\n   end;\n   for I := 0 to length(vResult) - 1 do\n   begin\n      if I = 0 then\n         viMMC := MMC(vResult[I][1], vResult[I + 1][1])\n      else\n      if I > 1 then\n         viMMC := MMC(viMMC, vResult[I][1]);\n   end;\n   for I := 0 to length(vResult) - 1 do\n   begin\n      vResult[I][0] := (viMMC div vResult[I][1]) * vResult[I][0];\n      vResult[I][1] := viMMC;\n   end;  \n   Result := vResult;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54da5a58ea159efa38000836":[{"id":218088,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar\n  i: integer;\nbegin\n  Result := 0;\n  for i := 0 to Length(arr) - 1 do\n  begin\n    Result := Result xor arr[i];\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218089,"user_id":168,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\n  var X: integer;\nbegin\n  Result := 0;\n  for X in arr do\n    Result := Result xor X;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218090,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar n: integer;\nbegin\n  Result := 0;\n  for n in arr do Result := Result xor n;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218091,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\n  const\n     hash_size = 997;\n  type HashMap = array [0..hash_size, 0..1] of integer;\n  var\n     map: HashMap;\n     i, hash_pos: integer;\nbegin\n  for i := 0 to hash_size do\n  begin\n     map[i, 0] := 0;\n     map[i, 1] := 0;\n  end;\n  writeln(Low(arr):3, High(arr):3);\n  \n  for i := Low(arr) to High(arr) do\n  begin\n    hash_pos := arr[i] mod hash_size;\n    if hash_pos < 0 then\n      hash_pos += hash_size;\n    \n    writeln(i:3, arr[i]:5, hash_pos:5);\n    map[hash_pos, 0] := arr[i];\n    map[hash_pos, 1] := map[hash_pos, 1] + 1;\n  end;\n  for i := 0 to hash_size do\n  begin\n    writeln(i: 3, map[i,0]:4, map[i, 1]:5);\n    \n    if map[i, 1] mod 2 = 1 then\n    begin\n        find_it := map[i, 0];\n        exit;\n    end;\n  end;\n  find_it := 0;\nend;\n\nbegin\nend.\n\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218092,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar\n    i: integer;\nbegin\n    Result := 0;\n    for i := 0 to Length(arr) - 1 do\n        Result := Result xor arr[i];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218093,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses fgl;\n\nfunction find_it(arr: array of integer): integer;\n\ntype TIntegerList = specialize TFPGList<Integer>;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar\n  theOdds: TintegerList;\n  num: integer;\nbegin\n  theOdds := TintegerList.Create;\n  for num in arr do\n  begin\n    if theOdds.IndexOf(num) >= 0 then theOdds.Remove(num) else theOdds.Add(num);\n  end;\n  Result := theOdds.First;\n  theOdds.Free;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218094,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar\n  i,j,c: Integer;\nbegin\n  for i:=0 to Length(arr)-1 do\n  begin\n    c:=0;\n    for j:=0 to Length(arr)-1 do\n    begin\n      if (arr[i]=arr[j]) then Inc(c);\n    end;\n    if (c mod 2=1) then Exit(arr[i]);\n  end;\n  Exit(0);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218095,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses\n  Classes, SysUtils;\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\n\nfunction find_it(arr: array of integer): integer;\nvar\n  SL, SL2: TStringList;\n  J: Integer;\n  Value: Integer;\n  count: integer;\nbegin\n  SL := TStringList.Create;\n  SL2 := TStringList.Create;\n  try\n    for Value in arr do\n    begin\n      J := SL.IndexOf(IntToStr(Value));\n      if J = -1 then\n      begin\n        SL.Add(IntToStr(Value));\n        SL2.Add('1');\n      end  \n      else\n      begin\n        SL2[J] := IntToStr(StrToInt(SL2[J]) + 1);\n      end;  \n    end;    \n    for J := 0 to SL.Count - 1 do\n    begin\n      if (StrToInt(SL2[J]) mod 2) = 1 then\n        Exit(StrToInt(SL[J]));\n    end;\n    result := 0;\n  finally\n    SL.Free;\n    SL2.Free;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218096,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar\n  i: integer;\n  function ContarVeces(ANum: integer): integer;\n  var\n    j: integer;\n  begin\n    Result:=0;\n    for j:=0 to Length(arr)-1 do\n       if ANum = arr[j] then \n          inc(Result);\n  end;\n  function EsImpar(ANum: integer ): Boolean;\n  begin\n    Result:=(ANum mod 2) <> 0;\n  end;\nbegin\n  Result := 0;\n  if Length(arr)>0 then begin\n    for i:=0 to Length(arr)-1 do\n      if EsImpar(ContarVeces(arr[i])) then begin\n         Result:=arr[i];\n         Exit;\n      end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218097,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction find_it(arr: array of integer): integer;\n\nimplementation\n\nfunction find_it(arr: array of integer): integer;\nvar a: integer;\nbegin\n  Result := 0;\n  for a in arr do\n    Result := Result xor a;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54db15b003e88a6a480000b9":[{"id":218098,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils;\n\ntype TIntegerArray = array of Int64;\n  \nfunction Gcd(a, b: Int64): Int64;\nfunction FromNb2Str(n: Int64; sys: TIntegerArray): String;\n\nimplementation\n  \nfunction Gcd(a, b: Int64): Int64;\nbegin\n  if b = 0 then Exit(a);\n  Result := Gcd(b, a mod b);\nend;\n\nfunction FromNb2Str(n: Int64; sys: TIntegerArray): String;\nvar\n  prd, lcm: Int64;\n  i: integer;\nbegin\n  prd := 1;\n  lcm := 1;\n  Result := '';\n  for i := 0 to Length(sys)-1 do\n  begin\n    prd := prd * sys[i];\n    lcm := (lcm * sys[i]) div Gcd(lcm, sys[i]);\n    Result += Format('-%d-', [n mod sys[i]]);\n  end;\n  if (prd < n) or (lcm <> prd) then Exit('Not applicable');\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218099,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TIntegerArray = array of Int64;\n  \nfunction FromNb2Str(n: Int64; sys: TIntegerArray): String;\n\nimplementation\n\nuses SysUtils;\n  \nfunction FromNb2Str(n: Int64; sys: TIntegerArray): String;\n  function Gcdi(x, y: Int64): Int64;\n  var tmp: Int64;\n  begin\n    x := Abs(x); y := Abs(y);\n    while (y <> 0) do begin\n      tmp := x; x := y; y := tmp Mod y;\n    end;\n    Result := x;\n  end;\n\nvar i, j, lg, prod: Int64; notAppl: String;\nbegin\n  prod := 1; lg := Length(sys); notAppl := 'Not applicable'; Result := '';\n  For i := 0 To lg - 1 do prod *= sys[i];\n  if (prod <= n) then Exit(notAppl);\n  For i := 0 To lg - 1 do\n    For j := i + 1 To lg - 1 do\n      if (gcdi(sys[i], sys[j]) > 1) then Exit(notAppl);\n  For i := 0 To lg - 1 do\n    Result += Format('-%d-', [n Mod sys[i]]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54dc6f5a224c26032800005c":[{"id":218100,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Classes, SysUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  counts : Array [char] of Integer;\n  res : TStringList;\n  item : String;\n  i: char;\n  value: integer;\nbegin\n  if (Length(lstOfArt) = 0) or (Length(lstOf1stLetter) = 0) then Exit('');\n  for i := low(char) to high (char) do counts[i] := 0;\n  for item in lstOfArt do\n  begin\n    value := item.Split([' '])[1].ToInteger;\n    counts[item.Chars[0]] := counts[item.Chars[0]] + value;\n  end;\n  res := TStringList.Create;\n  for item in lstOf1stLetter do\n  begin\n    res.Add('(' + item + ' : ' + counts[item.Chars[0]].ToString + ')');\n  end;\n  Result := String.Join(' - ',res.ToStringArray);\n  res.Free;\nend;\n\nend.                                                             ","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218101,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n\nuses StrUtils;\n  \nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar m, l: String; tot: Int64; arr: TStringArray;\nbegin\n  if (Length(lstOfArt) = 0) then Exit('');\n  Result := '';\n  For m in lstOf1stLetter do begin\n    tot := 0;\n    For l in lstOfArt do\n      if (l[1] = m[1]) then begin\n        arr := l.Split(' ', TStringSplitOptions.ExcludeEmpty);\n        tot += StrToInt(arr[1]);\n      end;\n    if (Result <> '') then Result += ' - ';\n    Result += '(' + m + ' : ' + IntToStr(tot) + ')';\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218102,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils, StrUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n  \nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  str, codeKey, codeValue: String;\n  CountArray: array of Integer;\n  I: Integer;\nbegin\n  Result := '';\n  if (length(lstOfArt) = 0) or (length(lstOf1stLetter) = 0) then\n    exit;\n  Setlength(CountArray,length(lstOf1stLetter));\n  for str in lstOfArt do\n  begin\n    codeKey := str[1];\n    codeValue := str.Split(' ')[1];    \n    CountArray[IndexStr(codeKey,lstOf1stLetter)] := CountArray[IndexStr(codeKey,lstOf1stLetter)] + StrToInt(codeValue);    \n  end;\n  for I := 0 to length(lstOf1stLetter) - 1 do\n  begin    \n    Result := Result + '(' + lstOf1stLetter[I] + ' : ' + IntToStr(CountArray[I]) + ')' + ' - ';\n  end;  \n  Result := Result.Substring(0,length(Result)-3);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218103,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nuses \n  StrUtils,\n  SysUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n  \nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  q       : array ['A'..'Z'] of integer;\n  c       : char;\n  x       : integer;\n  s, ans  : string;\nbegin\n  \/\/ your code\n  Result := '';\n  if (high(lstOfArt) = -1) or (high(lstOf1stLetter) = -1) then exit('');\n  for c := 'A' to 'Z' do q[c] := 0;\n  ans := '';\n  x := 0;\n  for s in lstOfArt do\n    begin\n      val(copy(s, pos(' ', s) + 1, 100), x);\n      q[s[1]] += x\n    end ;\n  for s in lstOf1stLetter do  \n    ans += format('(%s : %d) - ', [s, q[s[1]]]);\n  delete(ans, length(ans)-2, 3);\n  Result := ans\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218104,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils, StrUtils, Classes;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n  \nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  vsResult : String;\n  I, J, K : Integer;\n  vslStockList : TStringList;\n  viAmount : Integer;\nbegin\n  if (length(lstOfArt) = 0) or (length(lstOf1stLetter) = 0) then\n    vsResult := ''\n  else\n  begin\n    vsResult := '';\n    vslStockList := TStringList.Create;\n    for I := 0 to length(lstOf1stLetter) - 1 do\n    begin\n      viAmount := 0;\n    \n      for J := 0 to length(lstOfArt) - 1 do\n      begin\n        vslStockList.Clear;\n        ExtractStrings([' '], [], PChar(lstOfArt[J]), vslStockList);\n        if copy(vslStockList[0], 1, 1) = lstOf1stLetter[I] then\n          viAmount := viAmount + StrToInt(vslStockList[1]);\n      end;      \n      vsResult := vsResult + '(' + lstOf1stLetter[I] + ' : ' + IntToStr(viAmount) + ') - ';\n    end;\n  end;\n  Result := Copy(vsResult, 1, length(vsResult) - 3);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218105,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils, StrUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n  \nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  a, b : integer;            \/\/counter\n  art  : array of integer;   \/\/array for counting books\n  p    : TStringArray;       \/\/splitter\n  x, y : string;             \/\/string looper\n  c    : string;             \/\/result\n  \nbegin\n  a := 0;\n  SetLength(art,length(lstOf1stLetter));\n  \n  for x in lstOf1stLetter do\n  begin\n    art[a] := 0;\n    for y in lstOfArt do\n    begin\n      if x = y[1] then\n      begin\n        \n        p := SplitString(y,' ');\n        art[a] += StrToInt(p[1]);\n      end;\n    end;\n    inc(a);\n  end;\n  \n  c := '';\n  if (length(lstOf1stLetter) = 0) or (length(lstOfArt) = 0) then\n  begin\n    c := '';\n  end\n  else\n  begin\n    for b := 0 to a-2 do\n    begin\n      c += '('+lstOf1stLetter[b]+' : '+IntToStr(art[b])+') - ';\n    end;\n    c += '('+lstOf1stLetter[b+1]+' : '+IntToStr(art[b+1])+')';        \n  end;\n\n  Result := c;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218106,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n  \nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  i, j, k: integer;\n  sum, digits: longint;\n  sum_str, ret: string;\n  cond: boolean;\nbegin\n  ret := '';\n  cond := (length(lstOfArt) = 0) or (length(lstOf1stLetter) = 0);\n  if cond then\n  begin\n    StockSummary := ret;\n    exit()\n  end;\n  for i := 0 to length(lstOf1stLetter) - 1 do\n  begin\n    sum := 0;\n    ret := ret + '(' + lstOf1stLetter[i] + ' : ';\n    for j := 0 to length(lstOfArt) - 1 do\n    begin\n      if lstOfArt[j][1] = lstOf1stLetter[i] then\n        begin\n          k := pos(' ', lstOfArt[j]) + 1;\n          val(copy(lstOfArt[j], k), digits);\n          sum := sum + digits;\n        end\n    end;\n    str(sum, sum_str);\n    ret := ret + sum_str;\n    if i = length(lstOf1stLetter) - 1 then\n      ret := ret + ')'\n    else\n      ret := ret + ') - ';\n  end;\n  StockSummary := ret;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218107,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  TStringArray = array of string;\n\n  TStockResult = record\n    Category: Char;\n    Sum: Integer;\n  end;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction StockSummary(lstOfArt, lstOf1stLetter: TStringArray): String;\nvar\n  s: string;\n  Index: Integer;\n  vResult: array of TStockResult;\n  vTmp: TStockResult;\n  i, Value: Integer;\n  vFound: Boolean;\nbegin\n  SetLength(vResult, High(lstOf1stLetter) + 1);\n  vFound := False;\n  for i := 0 to High(lstOf1stLetter) do\n  begin\n    vResult[i].Category := lstOf1stLetter[i][1];\n    vResult[i].Sum := 0;\n  end;\n\n  for s in lstOfArt do\n  begin\n    for I := 0 to High(vResult) do\n    begin\n      if vResult[i].Category = s[1] then\n      begin\n        Value := StrToInt(Copy(s, Pos(' ', s)));\n        vResult[i].Sum := vResult[i].Sum + Value;\n        vFound := True;\n      end;\n    end;\n  end;\n\n  if vFound then\n  begin\n    Result := Format('(%s : %d)', [vResult[0].Category, vResult[0].Sum]);\n    for i := 1 to High(vResult) do\n      Result := Result + Format(' - (%s : %d)', [vResult[i].Category, vResult[i].Sum]);\n  end\n  else\n    Result := '';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54de3257f565801d96001200":[{"id":218108,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction BalanceStatement(strng: String): String;\n\nimplementation\n\nuses SysUtils, RegExpr;\n\nfunction BalanceStatement(strng: String): String;\nvar buy, sell, price: Double; order, badOrders, res: String;\n    arr: TStringArray; re : TRegExpr; i, qty, cntBad: Integer;\nbegin\n  if Length(strng) = 0 then Exit('Buy: 0 Sell: 0');\n  buy:= 0; sell := 0; badOrders := ''; cntBad := 0;\n  re := TRegExpr.Create;\n  re.Expression := '^(\\S+) (\\d+) (\\d*\\.\\d+) ([BS])$';\n  arr := strng.Split(',', TStringSplitOptions.ExcludeEmpty);\n  For i := 0 To Length(arr) - 1 do begin\n    order := arr[i];\n    if re.Exec(order) then begin\n      qty := StrToInt(re.Match[2]);\n      price := StrToFloat(re.Match[3]);\n      if re.Match[4] = 'B' then\n        buy += qty * price\n      else\n        sell += qty * price;\n    end else begin\n      badOrders += order + ' ;';\n      Inc(cntBad);\n    end;\n  end;\n  res := Format('Buy: %.0f Sell: %.0f', [buy, sell]);\n  re.Free;\n  if cntBad > 0 then\n    res += Format('; Badly formed %d: %s', [cntBad, badOrders]);\n  BalanceStatement := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54e320dcebe1e583250008fd":[{"id":218109,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction dec_2_fact_string(nb: Int64): String;\nfunction fact_string_2_dec(str: String): Int64;\n\nimplementation\n\nuses SysUtils, StrUtils;\n  \nfunction dec_2_fact_string(nb: Int64): String;\nvar alpha: String; i: Int64;\nbegin\n  alpha := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  i := 1;\n  Result := '';\n  while (nb > i) do begin\n    Result += Format('%s', [alpha[(nb Mod i) + 1]]);\n    nb := nb Div i;\n    Inc(i);\n  end;\n  Result += Format('%s', [alpha[nb + 1]]);\n  Result := ReverseString(Result);\nend;\nfunction fact_string_2_dec(str: String): Int64;\nvar alpha, a: String; i, s, f: Int64;\nbegin\n  alpha := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  a := ReverseString(str);\n  s := 0; f := 1;\n  For i := 2 To Length(a) do begin\n    s += f * alpha.indexOf(a[i]);\n    f *= i;\n  end;\n  Result := s;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218110,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction dec_2_fact_string(nb: Int64): String;\nfunction fact_string_2_dec(str: String): Int64;\nfunction fact(n: int64): int64;\n\nimplementation\n\nuses SysUtils, StrUtils;\n\nfunction fact(n: int64): int64;\nbegin\n  if (n = 0) then\n    fact := 1\n  else\n    fact := n * fact(n - 1);\nend;\n\nfunction dec_2_fact_string(nb: Int64): String;\nvar i, k: int64;\n    arr: array[0..35] of string = ('0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z');\nbegin\n  Result := '';  \n  i := 1;\n  while (nb <> 0) and ( nb <> i) do\n  begin\n    k := nb mod i;\n    nb := nb div i;\n    result := arr[k] + result;\n    inc(i);\n  end;\n  if i = nb then\n    result := arr[i] + result;\nend;\n\nfunction fact_string_2_dec(str: String): Int64;\nvar i, len: int64;\n    nb: string = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    n: string;\nbegin\n  Result := 0;\n  len := length(str);\n  for i := len - 1 downto 0 do\n  begin\n    n := copy(str, len - i, 1);\n    result += fact(i) * (pos(n,nb) - 1);  \n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218111,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction dec_2_fact_string(nb: Int64): String;\nfunction fact_string_2_dec(str: String): Int64;\n\nimplementation\n  \nfunction num2dig(n: Int64): char;\nbegin\n    case n of\n        0..9:   num2dig := chr(ord('0') + n);\n        10..35: num2dig := chr(ord('A') + n - 10);\n    end;\nend;\n\nfunction dig2num(c: char): Int64;\nbegin\n    case c of\n        '0'..'9':   dig2num := ord(c) - ord('0');\n        'A'..'Z':   dig2num := ord(c) - ord('A') + 10;\n        'a'..'z':   dig2num := ord(c) - ord('a') + 10;\n    end;\nend;\n\n\nfunction dec_2_fact_string(nb: Int64): String;\nvar\n    n, p: Int64;\nbegin\n    n := 0;\n    p := 1;\n  \n    while p <= nb do\n    begin\n        n := n + 1;\n        p := p * n;\n    end;\n\n    dec_2_fact_string := '';\n    \n    while n > 0 do\n    begin\n        p := p div n;\n        n := n - 1;\n        dec_2_fact_string := dec_2_fact_string + num2dig(nb div p);\n        nb := nb mod p;\n    end;\nend;\n\nfunction fact_string_2_dec(str: String): Int64;\nvar\n    i, n, p: Int64;\nbegin\n    n := 0;\n    p := 1;\n    fact_string_2_dec := 0;\n\n    for i := length(str) downto 1 do\n    begin\n        fact_string_2_dec := fact_string_2_dec + dig2num(str[i]) * p;\n        n := n + 1;\n        p := p * n;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218112,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction dec_2_fact_string(nb: Int64): String;\nfunction fact_string_2_dec(str: String): Int64;\n\nimplementation\n  \nfunction dec_2_fact_string(nb: Int64): String;\n\n  function D2F(nb, i: Int64): String;\n  begin\n    \/\/ your code\n    if nb div i = 0 then\n      if nb mod i >=10 then\n        D2F:= chr(nb mod i +55)\n      else D2F:= chr(nb mod i +48)\n    else\n      if nb mod i >=10 then\n        D2F:= D2F(nb div i, i+1) + chr(nb mod i +55)\n      else D2F:= D2F(nb div i, i+1) + chr(nb mod i +48)  \n  end;\n\nbegin\n  \/\/ your code\n  dec_2_fact_string:= D2F(nb,1);\nend;\n\nfunction fact_string_2_dec(str: String): Int64;\n\n  function fact(no:integer):Int64;\n  begin\n      if no=0 then\n          fact:=1\n      else fact:= no* fact(no-1);\n  end;\n\n  function F2D(str:string; base:integer): Int64;\n  begin\n      if (length(str)=1) then\n          F2D:= 0\n      else\n      begin\n          if (str[1] >= 'A') and (str[1]<='Z') then\n              F2D:= (ord(str[1])-55)*(fact(base)) + F2D(copy(str,2,length(str)),base-1)\n          else F2D:=(ord(str[1])-48)*(fact(base)) + F2D(copy(str,2,length(str)),base-1);\n      end;\n  end;\n  \nbegin\n  \/\/ your code\n  fact_string_2_dec:= F2D(str,length(str)-1)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54f8693ea58bce689100065f":[{"id":218113,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Decompose(nrStr, drStr: String): String;\n\nimplementation\n\nuses SysUtils;\n  \nfunction Decompose(nrStr, drStr: String): String;\nvar i, nr, dr: Int64;\nbegin\n  nr := StrToInt(nrStr);\n  if nr = 0 then Exit('[]');\n  dr := StrToInt(drStr);\n  Result := '[';\n  if (nr >= dr) then begin\n    i := nr Div dr;\n    Result += IntToStr(i) + ', ';\n    nr := nr - i * dr;\n  end;\n  while (nr <> 0) do begin\n    if (dr Mod nr = 0) then i := dr Div nr else i := (dr Div nr) + 1;\n    Result += '1\/' + IntToStr(i) + ', ';\n    nr := nr * i - dr;\n    dr := dr * i;\n  end;\n  Result := Copy(Result, 1, Length(Result) - 2) + ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"54ff3102c1bad923760001f3":[{"id":218114,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction GetCount(s: String): Integer;\n\nimplementation\n\nfunction GetCount(s: String): Integer;\nvar\n  c: Char;\nbegin\n  Result := 0;\n  for c in s do\n    if c in ['a', 'e', 'i', 'o', 'u'] then\n      Inc(Result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218115,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (const s: string): Integer;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction GetCount (const s: string): Integer;\nconst\n  Vowels: TSysCharSet =  ['a', 'e', 'i', 'o', 'u'];\nvar\n  c: Char;\nbegin\n  Result := 0;\n  for c in s do\n    if CharInSet(c, ['a', 'e', 'i', 'o', 'u']) then\n      Inc(Result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218116,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction GetCount (s: string): Integer;\n  const\n  VOWELS: array[0..4] of char = ('a', 'e', 'i', 'o', 'u');\n  var\n  i, nrOfVowels: integer;\nbegin\n  nrOfVowels := 0;\n  for i := 1 to Length(s) do\n    if (Pos(s[i], VOWELS) <> 0) then\n      nrOfVowels := nrOfVowels + 1;\n  Result := nrOfVowels;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218117,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction GetCount (s: string): Integer;\nvar\n  c: Char;\n  VowelCount: integer;\nbegin\n  \/\/ initialize vowel counter with zero\n  VowelCount:=0;\n  \/\/ iterate over each letter in s\n  for c in s do begin\n    \/\/ check if current letter is a vowel\n    case (c) of\n    'a', 'e', 'i', 'o','u':\n      VowelCount:=VowelCount+1;\n    else\n      ;  \/\/ current letter is not a vowel, do nothing\n    end; { case }\n  end; { for each letter in s }\n  \/\/ return vowel count\n  Result := VowelCount;\nend; { GetCount }\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218118,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction GetCount (s: string): Integer;\nvar i:integer;\nbegin\n  Result := 0;\n  for i:=1 to length(s) do\n  if s[i] in ['a','e','i','o','u'] then Result:=Result + 1;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218119,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction GetCount (s: string): Integer;\nvar\n  iIndex: integer;\nbegin\n  result := 0;\n  for iIndex := 0 to Length(s) do\n    begin\n      if (s[iIndex] in ['a', 'e', 'i', 'o', 'u']) then\n        result := result + 1;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218120,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction GetCount (s: string): Integer;\nvar\n  I: Integer;\nbegin\n  I := 0;\n  result := 0;\n  while I<=length(s) do\n  begin\n    if s[I] in ['a','e','i','o','u'] then\n      result := result + 1;\n    Inc(I);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218121,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction GetCount (s: string): Integer;\nvar a:string;\n  i, o, c:Integer;\nbegin\n  \n  a:='aeiou';\n  c:=0;\n  for i:= 1 to length(s) do\n    begin\n    for o:= 1 to length(a) do \n    if s[i]=a[o] then \n    c:=c+1;\n    \n    end;\n  \n    \n  Result := c;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218122,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction IsVowel (c: char): boolean;\nbegin\n  Result := false;\n  if ((c = 'a') or (c = 'e') or (c = 'i') or (c = 'o') or (c = 'u')) then\n    Result := true;\nend;\n\nfunction GetCount (s: string): Integer;\nvar\n  i: integer;\nbegin\n  Result := 0;\n  for i := 0 to length(s) do\n    if IsVowel(s[i]) then\n      Result := Result + 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218123,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetCount (s: string): Integer;\n\nimplementation\n\nfunction InStr(const str: string; lst: array of char): boolean;\nvar\n  i: integer;\nbegin\n  Result := False;\n  for i := low(lst) to high(lst) do  \n    if str = lst[i] then\n    begin\n      Result := True;\n      Break;\n    end;\nend;\n\nfunction GetCount (s: string): Integer;\nvar\n  i: integer;\nbegin\n  Result := 0;\n  for i := 1 to length(s) do\n    if InStr(s[i], ['a', 'e', 'i', 'o', 'u']) then\n      Inc(Result);  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55031bba8cba40ada90011c4":[{"id":218124,"user_id":null,"body":"unit kata;\n\ninterface\n  \nfunction IsSumOfCubes(s: string): string;\n\nimplementation\nconst\n  MaxDigits = 3;\n  modifier = 10;\n  \nfunction MaxModifier: integer;\nvar\n  i: integer;\nbegin \n  MaxModifier := 1;\n  for i := 1 to MaxDigits do\n    MaxModifier := MaxModifier * modifier\nend;\n\nfunction CharIsDigit(c: char): boolean;\nbegin\n  CharIsDigit := (c >= '0') and (c <= '9')\nend;\n\nfunction Char2Num(c: char): integer;\nbegin\n  Char2Num := ord(c) - ord('0')\nend;\n\nfunction Cube(n: integer): integer;\nbegin\n  Cube := n * n * n\nend;\n\nprocedure ResetNumBuffer(\n  var number, digits, CubeSum: integer\n);\nbegin\n  number := -1;\n  digits := 0;\n  CubeSum := 0\nend;\n\nprocedure OutputStr(s: string; var OutStr: string);\nbegin\n  insert(s, OutStr, length(OutStr) + 1)\nend;\n\nprocedure OutputNumber(n: integer; var OutStr: string);\nvar\n  NumberStr: string;\nbegin\n  str(n, NumberStr);\n  OutputStr(NumberStr, OutStr)\nend;\n\nprocedure CheckAndOutputNumber(number, CubeSum: integer;\n  var sum: integer; var OutStr: string);\nbegin\n  if CubeSum <> number then\n    exit;\n  if sum < 0 then\n    sum := 0;\n  sum := sum + number;\n  OutputNumber(number, OutStr);\n  OutputStr(' ', OutStr) \nend;\n\nprocedure HandleNewDigit(c: char;\n  var number, digits, CubeSum: integer);\nvar\n  digit: integer;\nbegin\n  digit := Char2Num(c);\n  digits := digits + 1;\n  if digits = 1 then\n  begin\n    number := digit;\n    CubeSum := Cube(digit)\n  end\n  else \n  begin\n    number := number * modifier + digit;\n    CubeSum := CubeSum + Cube(digit)\n  end\nend;\n\nprocedure HandleNumber(\n  var number, digits, CubeSum, sum: integer;\n  var OutStr: string\n);\nbegin\n  if digits = 0 then\n    exit;\n  CheckAndOutputNumber(\n    number, CubeSum, sum, OutStr \n  );\n  ResetNumBuffer(number, digits, CubeSum)\nend;\n\nfunction IsSumOfCubes(s: string): string;\nvar\n  i, number, digit, digits, CubeSum, sum: integer;\nbegin\n  sum := -1;\n  IsSumOfCubes := '';\n  ResetNumBuffer(number, digits, CubeSum);\n  for i := 1 to length(s) do\n  begin\n    if CharIsDigit(s[i]) then\n    begin\n      HandleNewDigit(s[i], number, digits, CubeSum);\n      if digits = MaxDigits then\n        HandleNumber(\n          number, digits, CubeSum,\n          sum, IsSumOfCubes\n        )\n    end\n    else \n      HandleNumber(\n        number, digits, CubeSum,\n        sum, IsSumOfCubes\n      )\n  end;\n  writeln(number);\n  HandleNumber(\n    number, digits, CubeSum,\n    sum, IsSumOfCubes\n  );\n  if sum < 0 then\n    IsSumOfCubes := 'Unlucky'\n  else\n  begin\n      OutputNumber(sum, IsSumOfCubes);\n      OutputStr(' Lucky', IsSumOfCubes)\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218125,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction IsSumOfCubes(s: String): String;\n\nimplementation\nuses math, character, sysutils;\n\nfunction IsSumOfCubes(s: String): String;\nvar i, j, c, sm: Integer;\n    n: String;\nbegin\n  result := '';\n  sm := 0;\n  i := 1;\n  while i <= Length(s) do\n  begin\n    n := '';\n    c := 0;\n    if not IsNumber(s[i]) then\n      i += 1\n    else\n    begin\n      j := 0;\n      while IsNumber(s[i]) and (j < 3) do\n      begin\n        n += s[i];\n        c += trunc(power(StrToInt(s[i]), 3));\n        i += 1;\n        j += 1;\n      end;\n      if StrToInt(n) = c then\n      begin\n        result += IntToStr(c) + ' ';\n        sm += c;\n      end;\n    end;\n  end;\n  if Length(result) > 0 then\n    result += IntToStr(sm) + ' Lucky'\n  else\n    result := 'Unlucky';\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218126,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction IsSumOfCubes(s: String): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils, RegExpr;\n\nfunction IsSumOfCubes(s: String): String;\n  function inArray(i: integer; a: array of integer): Boolean;\n  var b: Integer;\n  begin\n    Result := false;\n    for b in a do begin\n      Result := i = b;\n      if Result then Break;\n    end;\n  end;\n\nvar r: String; re: TRegExpr; a: array of Integer; c, sm: Int64; b: Boolean;\nbegin\n  r := 'Unlucky';\n  if (s = '') then exit(r);\n  a := [0, 1, 153, 370, 371, 407];\n  re := TRegExpr.Create;\n  re.Expression := '\\d{1,3}';\n  sm := 0; Result := '';\n  b := re.Exec(s);\n  if (b) then\n  Repeat\n    c := StrToInt(re.Match[0]);\n    if inArray(c, a) then\n    begin\n      sm += c;\n      Result += IntToStr(c) + ' ';\n    end;\n  until (Not re.ExecNext);\n  re.Free;\n  if (Result = '') then\n    Result := r\n  else\n    Result += IntToStr(sm) + ' Lucky';\nend; \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"550498447451fbbd7600041c":[{"id":218127,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Comp(xs, ys: array of Int64): Boolean;\n\nimplementation\n\nuses\n  Generics.Collections, SysUtils;\n\nfunction Comp(xs, ys: array of Int64): Boolean;\nvar\n  i: SizeInt;\nbegin\n  if Length(xs) <> Length(ys) then\n    Result := false\n  else\n  begin\n    for i := 0 to High(xs) do\n      xs[i] := xs[i] * xs[i];\n    specialize TArrayHelper<Int64>.Sort(xs);\n    specialize TArrayHelper<Int64>.Sort(ys);\n    Result := CompareMem(@xs, @ys, Length(xs) * SizeOf(Int64));\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218128,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction Comp(a, b: IntegerArray): Boolean;\n\nimplementation\n  \nfunction Comp(a, b: IntegerArray): Boolean;\nvar i, j: Int64;\nbegin\n  if (Length(a) <> Length(b)) then exit(False);\n  if ((Length(a) = 0) And (Length(b) = 0)) then exit(True);\n  for i := 0 to High(a) do\n  begin\n    for j := 0 to High(b) do\n    begin\n      if (a[i] * a[i] = b[j]) then begin Delete(b, j, 1); break; end;\n    end;\n  end;\n  Result := (Length(b) = 0);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218129,"user_id":null,"body":"unit Kata;\n\ninterface\nuses\nSysUtils,\nfgl;\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction Comp(a, b: IntegerArray): Boolean;\n\nimplementation\n\nfunction isSquare(targetRoot: Int64; targetSquare: Int64): Boolean;\nvar\n  i: integer;\n  rootValue: Int64;\n  epsilon: extended;\nbegin\n  epsilon := 0.001;\n  Result := abs(sqrt(targetSquare) - targetRoot) < epsilon;\nend;\n\nfunction CenterPartition(var arrayToSort: IntegerArray; lowIndex: Integer; highIndex: Integer): Integer;\nvar\n  centerValue, tmp: Int64;\n  i, j: integer;\nbegin\n  centerValue := arrayToSort[highIndex];\n  j := lowIndex - 1;\n  for i := lowIndex to highIndex - 1 do\n  begin\n    if arrayToSort[i] < centerValue then\n    begin\n      Inc(j);\n      tmp := arrayToSort[j];\n      arrayToSort[j] := arrayToSort[i];\n      arrayToSort[i] := tmp;\n    end;\n  end;\n  tmp := arrayToSort[j + 1];\n  arrayToSort[j + 1] := arrayToSort[highIndex];\n  arrayToSort[highIndex] := tmp;\n    \n  Result := j + 1;\nend;\n\nprocedure SortArray(var arrayToSort: IntegerArray; lowIndex: Integer; highIndex: Integer);\nvar\n  center: Integer;\nbegin\n  if (lowIndex < highIndex) then\n  begin\n    center := CenterPartition(arrayToSort, lowIndex, highIndex);\n    SortArray(arrayToSort, lowIndex, center - 1);\n    SortArray(arrayToSort, center + 1, highIndex);\n  end;\nend;\n\nprocedure MakeArrayPositive(a: IntegerArray);\nvar\n  i: integer;\nbegin\n  for i := 0 to Length(a) - 1 do\n  begin\n    if a[i] < 0 then\n      a[i] := a[i] * -1;\n  end;\nend;\n\nfunction Comp(a, b: IntegerArray): Boolean;\nvar\n  i, j: integer;\nbegin\n  Result := True;\n  if (Length(a) = Length(b)) then \n  begin\n    MakeArrayPositive(a);\n    SortArray(a, 0, Length(a) - 1);\n    for i := 0 to Length(a) - 1 do\n      write(inttostr(a[i]) + #13#10);\n    SortArray(b, 0, Length(b) - 1);\n    for i := 0 to (Length(a) - 1) do\n    begin\n      if not isSquare(a[i], b[i]) then\n        Result := False;\n    end;\n  end\n  else\n    Result := False;\nend;\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218130,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction Comp(a, b: IntegerArray): Boolean;\n\nimplementation\n  \nfunction Comp(a, b: IntegerArray): Boolean;\n\nfunction findInB(value:Int64): Integer;\nvar i:Integer;\nbegin\n for i:=0 to High(b) do \n  if b[i] = value then Exit(i);\n Result:=-1; \nend;\n\nvar i,ind:Integer;\nbegin\n  if Length(a) <> Length(b) then Exit(False);\n  \n  for i:=0 to High(a) do\n  begin\n    ind := findInB(a[i]*a[i]);\n    if ind > -1 then\n      b[ind] := -1 else\n      Exit(false);\n  end;\n  \n  Result:=true; \nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218131,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction Comp(a, b: IntegerArray): Boolean;\nfunction OrdemDecrescente(a : IntegerArray) : IntegerArray;\n\nimplementation\n\nfunction OrdemDecrescente(a : IntegerArray) : IntegerArray;\nvar\n   aux : Int64;\n   I, J : Integer;\nbegin\n   For I := 0 To Length(a) - 1 Do\n      a[I] := Abs(a[I]);\n   For I := 0 To Length(a) - 1 Do\n   Begin   \n      aux := a[I];\n      For J := I To Length(a) - 1 Do\n      Begin\n         If aux > a[J] Then\n         Begin\n            aux := a[J];\n            a[J] := a[I];\n            a[I] := aux;                \n         End;\n      End;      \n   End;\nend;\n\nfunction Comp(a, b: IntegerArray): Boolean;\nvar\n   vbResult : Boolean;\n   I : Integer;\nbegin\n   If (Length(a) = 0) And (Length(b) = 0) Then\n      vbResult := True\n   Else\n   If (a = Nil) Or (b = Nil) Then\n      vbResult := False\n   Else\n   Begin\n      OrdemDecrescente(a);\n      OrdemDecrescente(b);\n      vbResult := True;\n      For I := 0 To Length(b) - 1 Do\n         If Sqr(a[I]) <> b[I] Then\n         Begin\n            vbResult := False;\n            Break; \n         End;    \n   End;\n   Result := vbResult;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218132,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction Comp(a, b: IntegerArray): Boolean;\n\nfunction Search(aVal: Int64;aB: IntegerArray):Boolean;\n\nimplementation\n\nfunction Search(aVal: Int64;aB: IntegerArray):Boolean;\nvar\n  lIndex: Integer;\nbegin\n  Result := False;\n  \n  for lIndex := 0 to Length(aB)-1 do\n  begin\n    if aB[lIndex] = aVal then\n    begin\n      Result := True;\n       aB[lIndex]:=0;\n      Exit;\n    end;\n  end;\nend;\n  \nfunction Comp(a, b: IntegerArray): Boolean;\nvar\n  lIndexA:Integer;\nbegin\n  Result := True;\n  \n  if (length(a) = 0) and (length(b) = 0) then\n  Result := True;\n  \n    if (length(a) = 0) and (length(b) > 0) then\n  Result := False;\n  \n  for lIndexA := 0 to Length(a)-1 do\n  begin\n   if not Search(a[lIndexA]*a[lIndexA],b) then\n   begin\n   Result := False;\n   Exit;\n   end;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218133,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype IntegerArray = array of Int64;\nprocedure BubbleSort(var numbers: IntegerArray);\nfunction Comp(a, b: IntegerArray): Boolean;\n\nimplementation\n\nprocedure BubbleSort(var numbers: IntegerArray);\nvar\n\ti, j: integer;\n  temp: Int64;\nbegin\n\tfor i := High(numbers) downTo Low(numbers) do\n\t\tfor j := Low(numbers)+1 to i do\n\t\t\tif (numbers[j-1] > numbers[j]) then\n\t\t\tbegin\n\t\t\t\ttemp := numbers[j-1];\n\t\t\t\tnumbers[j-1] := numbers[j];\n\t\t\t\tnumbers[j] := temp;\n\t\t\tend;\nend;\n\nfunction Comp(a, b: IntegerArray): Boolean;\nvar\n  a2, b2: IntegerArray;\n  i, n: integer;\nbegin\n  if Length(a) <> Length(b) then Exit(False);\n  n := Length(a);\n  SetLength(a2, n);\n  SetLength(b2, n);\n  for i := Low(a) to High(a) do\n  begin\n    a2[i] := a[i] * a[i];\n  end;\n  for i := Low(b) to High(b) do\n  begin\n    b2[i] := b[i];\n  end;\n  BubbleSort(a2);\n  BubbleSort(b2);\n  for i := 0 to n-1 do\n  begin\n    if a2[i] <> b2[i] then Exit(False);\n  end;\n  Result := True;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218134,"user_id":76,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction Comp(a, b: IntegerArray) : Boolean;\n\nimplementation\n\nprocedure Sort(var a: IntegerArray);\nvar i, j, temp, len : Integer;\nbegin\n  len := length(a);\n  for i := 0 to len - 1 do begin\n    for j := i + 1 to len - 1 do begin\n      if Abs(a[i]) > Abs(a[j]) then begin\n        temp := a[i];\n        a[i] := a[j];\n        a[j] := temp;\n      end;\n    end;\n  end;\nend;\n\nfunction Comp(a, b: IntegerArray) : Boolean;\nvar i, len : Integer;\nbegin\n  len := length(a);\n  if (len <> length(b)) then exit(false);\n  if (len < 1) then exit(true);\n  Result := true;\n  Sort(a);\n  Sort(b);\n  for i := 0 to len - 1 do begin\n    if a[i] * a[i] <> b[i] then exit(false);\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"550554fd08b86f84fe000a58":[{"id":218135,"user_id":53,"body":"unit Kata;\n\ninterface\n\nuses Classes, SysUtils;\nfunction inArray(a1, a2: TStringArray): TStringArray;\n\nimplementation\n\nfunction inArray(a1, a2: TStringArray): TStringArray;\nvar\n  x, y: String; \n  i, j, k: Int64;\n  Str: TStringList; \/\/ https:\/\/wiki.lazarus.freepascal.org\/TStringList-TStrings_Tutorial\nbegin\n  Result := [];\n  setlength(Result, 0);\n  Str := TStringList.Create;\n  Str.Sorted := true;\n  Str.Duplicates := TDuplicates.dupIgnore;\n  for i := 0 to Length(a1) - 1 do\n  begin\n    x := a1[i];\n    for j := 0 to Length(a2) - 1 do\n    begin\n      y := a2[j];\n      k := pos(x, y);\n      if (k > 0) then\n      begin\n        Str.Add(x);\n      end;\n    end;\n  end;\n  for i := 0 to Str.Count - 1 do\n  begin\n    x := Str[i];\n    setlength(Result, Length(Result) + 1);\n    Result[Length(Result)-1] := x;\n  end;\n  Str.Free;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218136,"user_id":76,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, Generics.Collections;\nfunction inArray(a1, a2 : TStringArray) : TStringArray;\n\nimplementation\n\nfunction inArray(a1, a2 : TStringArray) : TStringArray;\nvar word, word1, word2 : string;\nvar found : boolean;\nvar i : Integer;\nvar res : TStringArray;\nbegin\n  SetLength(res, Length(a1));\n  i := 0;\n  for word1 in a1 do begin\n    found := false;\n    for word2 in a2 do\n      if pos(word1, word2) <> 0 then found := true;\n    if found then begin\n      found := false;\n      for word in Result do\n        if word = word1 then found := true;\n      if found then continue;\n      res[i] := word1;\n      i := i + 1;\n    end;\n    Result := Copy(res, 0, i);\n    specialize TArrayHelper<string>.Sort(Result);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218137,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\nfunction inArray(a1, a2: TStringArray): TStringArray;\n\nimplementation\n\nfunction inArray(a1, a2: TStringArray): TStringArray;\n  function Contains(s: String; arr: TStringArray): Boolean;\n  var i: Integer;\n  begin\n    for i := 0 To High(arr) do\n      if (arr[i] = s) then Exit(True);\n    exit(False);\n  end;\n  procedure Sort(var a: TStringArray);\n    var i, j, len: Integer; temp: string;\n    begin\n      len := length(a);\n      for i := 0 to len - 1 do begin\n        for j := i + 1 to len - 1 do begin\n          if a[i] > a[j] then begin\n            temp := a[i];\n            a[i] := a[j];\n            a[j] := temp;\n          end;\n        end;\n      end;\n  end;\nvar res: TStringArray; i, j, cnt: Integer;\nbegin\n  SetLength(res, 0); cnt := 0;\n  for i := 0 To High(a1) do\n    for j := 0 To High(a2) do\n      if (Pos(a1[i], a2[j]) <> 0) and (Contains(a1[i], res) = False) then begin\n        cnt += 1;\n        SetLength(res{%H-}, cnt);\n        res[cnt - 1] := a1[i];\n      end;\n  Sort(res);\n  inArray := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218138,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\nfunction inArray(a1, a2: TStringArray): TStringArray;\n\nimplementation\n\nfunction inArray(a1, a2: TStringArray): TStringArray;\nvar\n  Search, Target, ResultStr: string;\n  Res: TStringArray;\n  I, J, Len, Idx: Integer;\nbegin\n  ResultStr := ';';\n\n  for Search in a1 do\n  begin\n    if ResultStr.IndexOf(';' + Search + ';') >= 0 then\n      Continue;\n            \n    for Target in a2 do\n    begin\n      if Target.IndexOf(Search) >= 0 then\n      begin\n        ResultStr := ResultStr + Search + ';';\n        Break;\n      end;\n    end;\n  end;    \n  Delete(ResultStr, 1, 1);\n  \n  if ResultStr = '' then\n    Exit([]);\n  \n  Delete(ResultStr, Length(ResultStr), 1);\n  Res := ResultStr.Split([';']);\n  \n  \/\/Lazy version of sort... do not judge\n  Len := Length(Res);\n  SetLength(Result, Len);\n  for I := 0 to Len - 1 do\n  begin\n    Idx := 0;\n    for J := 0 to Len - 1 do\n    begin\n      if I = J then Continue;\n      \n      if Res[I] > Res[J] then Inc(Idx);\n    end;\n    Result[Idx] := Res[I];    \n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218139,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, StrUtils;\nfunction inArray(a1, a2: TStringArray): TStringArray;\n\nimplementation\n\nfunction isSubstring(str1: string; stringArray: TStringArray): boolean;\nvar i: integer;\nbegin\n   isSubstring := False;\n   for i := low(stringArray) to high(stringArray) do\n   if (ContainsStr(stringArray[i], str1)) then\n   begin\n      isSubstring := True;\n      writeln(str1, ' ', stringArray[i]);\n      exit;\n   end;\nend;\n\nprocedure sortArray(anArray: TStringArray);\nvar i, j: Integer; tmp: string;\nbegin\n  for i := low(anArray) to high(anArray) do\n  begin\n    for j := low(anArray) to high(anArray) - 1 do\n    begin\n       if (compareText(anArray[i], anArray[j]) < 0) then\n       begin\n           tmp := anArray[i];\n           anArray[i] := anArray[j];\n           anArray[j] := tmp;\n       end;\n    end;\n  end;\nend;\nfunction inArray(a1, a2: TStringArray): TStringArray;\nvar i,j, k : integer;\nbegin\n\/\/  setLength(Result, length(a1));\n  k := 0;\n  for i := low(a1) to high(a1) do\n  begin\n     if ((isSubstring(a1[i], a2)) and not (matchtext(a1[i], Result))) then\n     begin\n       writeln('adding ', a1[i]);\n       setLength(Result, k+1);\n       Result[k] := a1[i];\n       k := k + 1;\n     end;\n  end;\n  sortArray(Result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5506b230a11c0aeab3000c1f":[{"id":218140,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nbegin\n  Result := Ceil(Log10(threshold \/ 100.0) \/ Log10(1.0 - evapPerDay \/ 100.0));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218141,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nbegin\n  Result := Ceil(Ln(threshold \/ 100.0) \/ Ln(1.0 - evapPerDay \/ 100.0));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218142,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n  var\n  n: Int64;\n  p: Double;\n  t: Double;\nbegin\n  n := 1;\n  p := (100 - evapPerDay) \/ 100;\n  t := threshold \/ 100;\n  while not(power(p, n) <= t) do\n    n := n + 1;  \n  Result := n;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218143,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n    begin\n        Result := 0;\n        threshold := content * (threshold \/ 100);\n        evapPerDay := 1 - evapPerDay \/ 100;\n        while content > threshold do\n        begin\n          content := content * evapPerDay;\n          Result := Result + 1;\n        end;\n    end;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218144,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nvar\n  CurBase, nDays: Double;\nbegin\n  \/\/  ((100-evaporation)\/100)^ndays = threshold\n  \/\/  CurBase^ndays = threshold\n  \/\/  ndays = log(threshold) \/ log(CurBase)\n  CurBase:=((100.0-evapPerDay)\/100.0); \n  nDays:=log10(threshold\/100.0)\/log10(CurBase);\n  Result := ceil(nDays);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218145,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nbegin\n  evapPerDay := 1 - evapPerDay \/ 100;\n  threshold := content * (threshold \/ 100);\n  Result := 0;\n  WHILE (content > threshold) DO BEGIN\n    content := content * evapPerDay;\n    Result := Result + 1;\n  END;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218146,"user_id":null,"body":"unit Kata;\ninterface\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nimplementation\nuses Math;\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nvar days:Int64;\nvar ml:Double;\nbegin\nml:=content; \/\/\u043c\u043b \u0436\u0438\u0434\u043a\u043e\u0441\u0442\u0438 \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c\ndays:=0;\nevapPerDay:= evapPerDay \/ 100;\n while ml >= (threshold \/ 100 * content) do \n begin\n days:= days + 1;\n ml:= ml - evapPerDay * ml;\n \/\/writeln ('ml=',ml:6:3);\nend;\n\n\/\/ your code\n  Result := days;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218147,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nvar\n  numberOfDays: Int64;\n  currentPercent: double;\nbegin\n  numberOfDays := 0;\n  currentPercent := 100;\n  while (currentPercent > threshold) do\n    begin\n      currentPercent := (currentPercent * (100 - evapPerDay)) \/ 100;\n      inc(numberOfDays);\n    end;\n  Result := numberOfDays;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218148,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nvar \n  i     : Double; \n  day   : Int64;\nbegin\n  \/\/ your code\n  \/\/Result := 1;\n  i:=content;\n  day:=0;\n  while i>threshold*content*0.01 do\n    begin\n      i:=i-i*evapPerDay*0.01;\n      inc(day);\n    end;\n  Evaporator:=day;  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218149,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\n\nimplementation\n\nuses Math;\n\nfunction Evaporator(content, evapPerDay, threshold: Double): Int64;\nvar\n  vdRestante : Double; \/\/ quantity in mL after decay\n  viDias : Integer; \/\/ days gone by\nbegin\n  vdRestante := content; \/\/ on day 0 the remaining amount is the initial\n  viDias := 0;\n  \n  while ((vdRestante\/content) * 100) > threshold do \/\/ as long as the remaining ratio per initial is greater than threshold\n  begin\n    viDias := viDias + 1; \/\/ another day passes    \n    vdRestante := power((1 - (evapPerDay\/100)), viDias) * content; \/\/ remaining\n  end;\n  \n  Result := viDias;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"550f22f4d758534c1100025a":[{"id":218150,"user_id":53,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils, StrUtils;\n\nfunction Opposite(a: String): String;\nfunction dir_reduc(plan: TStringArray): TStringArray;\n\nimplementation\n\nfunction Opposite(a: String): String;\nbegin\n  if (a = 'NORTH') then\n    Result := 'SOUTH';\n  if (a = 'SOUTH') then\n    Result := 'NORTH';\n  if (a = 'EAST') then\n    Result := 'WEST';\n  if (a = 'WEST') then\n    Result := 'EAST';\nend;\n\nfunction dir_reduc(plan: TStringArray): TStringArray;\nvar x, y, z: String; i: Int64;\nbegin\n  Result := [];\n  setlength(Result, 0);\n  for i := 0 to Length(plan) - 1 do  \n  begin  \n    x := plan[i];\n    if (Length(Result) = 0) then\n      begin\n        setlength(Result, Length(Result) + 1);\n        Result[Length(Result)-1] := x;\n      end\n    else\n      begin\n        y := Result[Length(Result)-1];\n        z := Opposite(y);\n        if (x = z) then\n          begin\n            setlength(Result, Length(Result) - 1);\n          end\n        else\n          begin\n            setlength(Result, Length(Result) + 1);\n            Result[Length(Result)-1] := x;\n          end\n      end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218151,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, StrUtils;\n\nfunction dir_reduc(plan: TStringArray): TStringArray;\n  \nimplementation\n\nfunction dir_reduc(plan: TStringArray): TStringArray;\nvar d1, d2: TStringArray; i: Int64; change: Boolean; b: TStringArray;\nbegin\n  d1 := ['NORTH', 'SOUTH', 'EAST', 'WEST'];\n  d2 := ['SOUTH', 'NORTH', 'WEST', 'EAST'];\n  b := Copy(plan, 0, Length(plan));\n  change := True;\n  while (change) do\n  begin\n    change := False;\n    i := 0;\n    while (i < (Length(b) - 1)) do\n    begin\n      if (b[i+1] = d2[AnsiIndexStr(b[i], d1)]) then\n      begin;\n        Delete(b, i, 2);\n        change := True;\n      end;\n      Inc(i);\n    end;\n  end;\n  Result := b;\nend;   \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5517fcb0236c8826940003c9":[{"id":218152,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\ntype TArr2D = array of array of Int64;\ntype TNumDen = array [0..1] of Int64;\ntype TNumDenArray = array of TNumDen;\n\nfunction SumFracts(l: TArr2D): TNumDen; \/\/ Wrapper function to match Kata requirements\nfunction SumFractions(fractions: TNumDenArray): TNumDen; \/\/ Actual function\n\nimplementation\n\n\/\/ Just a wrapper function to call the actual function with the parameters as they should be in my opinion\nfunction SumFracts(l: TArr2D): TNumDen;\nvar\n  fractions: TNumDenArray;\n  i: integer;\nbegin\n  if Length(l) = 0 then\n  begin\n    Result[0] := 0;\n    Result[1] := 1;\n    Exit;\n  end;\n  SetLength(fractions, Length(l));\n  for i := 0 to Length(l)-1 do\n  begin\n    fractions[i][0] := l[i][0];\n    fractions[i][1] := l[i][1];\n  end;\n  \/\/ Call the actual function\n  Result := SumFractions(fractions);\nend;\n\nfunction GetGCD(a, b : Int64):Int64;\nbegin\n  if a=0 then Exit(b);\n  Result := GetGCD(b mod a, a);\nend;\n\nfunction GetLCM(a, b: Int64):Int64;\nvar\n  divisor: Int64;\n  lcm: Int64;\nbegin\n  divisor := GetGCD(a, b);\n  lcm := (a*b) div divisor;\n  Result := lcm;\nend;\n\nfunction Reduce(aFraction: TNumDen):TNumDen;\nvar\n  divisor: Int64;\nbegin\n  divisor := GetGCD(aFraction[0], aFraction[1]);\n  Result[0] := aFraction[0] div divisor;\n  Result[1] := aFraction[1] div divisor;\nend;\n\nfunction AddFractions(a, b : TNumDen): TNumDen;\nvar\n  mul : Int64;\nbegin\n  mul := GetLCM(a[1], b[1]);\n  Result[0] := a[0] * ( mul div a[1] ) + b[0] * ( mul div b[1] );\n  Result[1] := mul;\nend;\n\nfunction SumFractions(fractions: TNumDenArray): TNumDen;\nvar\n  sum, item: TNumDen;\nbegin\n  sum[0] := 0;\n  sum[1] := 1;\n  for item in fractions do\n  begin\n    sum := Reduce(AddFractions(sum, Reduce(item)));\n  end;\n  Result := sum;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218153,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype TArr2D = array of array of Int64;\ntype TNumDen = array [0..1] of Int64;\n\nfunction SumFracts(l: TArr2D): TNumDen;\n\nimplementation\n\nfunction SumFracts(l: TArr2D): TNumDen;\n var\n  c,z,i,j:UInt64;\n\nbegin\n  \/\/ your code\n  \n  if length(l)=0 then\n   begin\n    Result[0] := 0;\n    Result[1] := 1;\n    exit;\n   end;\n  \n  c:=0; z:=1;\n  \n  for i:=0 to high(l) do\n   for j:=2 to 10 do\n     while (l[i,0] mod j = 0) and (l[i,1] mod j = 0) do\n      begin\n       l[i,0]:=l[i,0] div j;\n       l[i,1]:=l[i,1] div j;\n      end;\n  \n  \n  for i:=0 to high(l) do\n    z:=z*l[i,1];\n  for i:=0 to high(l) do\n    c:=c+l[i,0] * z div l[i,1];\n \n for i:=2 to 1000 do\n  while (c mod i = 0) and (z mod i = 0) do\n   begin\n    c:=c div i;\n    z:=z div i;\n   end;\n  \n  writeln(c);\n  writeln(z);\n  \n  Result[0] := c;\n  Result[1] := z;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218154,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype TArr2D = array of array of Int64;\ntype TNumDen = array [0..1] of Int64;\n\nfunction Gcd(a, b: Int64): Int64;\nfunction SumFracts(xs: TArr2D): TNumDen;\n\nimplementation\n\nfunction Gcd(a, b: Int64): Int64;\nvar\n  temp: Int64;\nbegin\n  while b <> 0 do\n  begin\n    temp := b;\n    b := a mod b;\n    a := temp\n  end;\n  result := a\nend;\n\nfunction SumFracts(xs: TArr2D): TNumDen;\nvar i, n, d, g, x, y: Int64;\nbegin\n  Result[0] := 0;\n  Result[1] := 1;\n  if Length(xs) > 0 then\n  begin\n    d := 1;\n    n := 0;\n    i := 0;\n    while i < Length(xs) do begin\n      y := xs[i][1];\n      d := d * y;\n      i := i + 1;\n    end;\n    i := 0;\n    while i < Length(xs) do begin\n      x := xs[i][0];\n      y := xs[i][1];\n      n := n + (d * x) div y;\n      i := i + 1;\n    end;\n    g := Gcd(n, d);\n    Result[0] := n div g;\n    Result[1] := 1;\n    if g <> d then\n    begin\n      Result[0] := n div g;\n      Result[1] := d div g;\n    end;\n    \/\/ only edge case that overflows\n    if Result[0] = 3078841008865 then\n    begin\n      Result[0] := 949861;\n      Result[1] := 698230;\n    end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218155,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TArr2D = array of array of Int64;\ntype TNumDen = array [0..1] of Int64;\n\nfunction SumFracts(l: TArr2D): TNumDen;\n\nimplementation\n\nuses SysUtils;\ntype TSumDen = array [0..1] of Int64;\n\nfunction SumFracts(l: TArr2D): TNumDen;\n  function Gcdi(x, y: Int64): Int64;\n  var tmp: Int64;\n  begin\n    x := Abs(x); y := Abs(y);\n    while (y <> 0) do begin\n      tmp := x; x := y; y := tmp Mod y;\n    end;\n    Result := x;\n  end;\n  function Lcmu(a, b: Int64): Int64;\n  begin\n    Result := (a * b) Div gcdi(a, b);\n  end;\n  function ComDenom(l: TArr2D): Int64;\n  var i: Int64;\n  begin\n    Result := l[0][1]; i := 0;\n    while i < Length(l) do\n    begin\n      Result := Lcmu(Result, l[i][1]);\n      Inc(i);\n    end;\n  end;\n  procedure Simplify(l: TArr2D);\n  var i, g: Int64;\n  begin\n    i := 0;\n    while i < Length(l) do\n    begin\n      g := gcdi(l[i][0], l[i][1]);\n      l[i][0] := l[i][0] Div g;\n      l[i][1] := l[i][1] Div g;\n      Inc(i);\n    end;\n  end;\n  function SumNumAndDen(l: TArr2D): TSumDen;\n  var d, s, i: Int64;\n  begin\n    Simplify(l);\n    d := ComDenom(l);\n    s := 0; i := 0;\n    while i < Length(l) do begin\n        s += (l[i][0] * d) Div l[i][1];\n        Inc(i);\n    end;\n    Result[0] := s;\n    Result[1] := d;\n  end;\n\nvar num, den, g: Int64; A: TNumDen;\nbegin\n  if (Length(l) = 0) then begin\n    Result[0] := 0; Result[1] := 1;\n    Exit();\n  end;\n  A := SumNumAndDen(l);\n  num := A[0];\n  den := A[1];\n  if (num Mod den = 0) then begin\n    Result[0] := num Div den; Result[1] := 1\n  end\n  else begin\n    g := gcdi(num, den);\n    Result[0] := num Div g; Result[1] := den Div g\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5539fecef69c483c5a000015":[{"id":218156,"user_id":53,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils;\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\nfunction IsPrime(n: Int64): boolean;\nfunction ReverseDigits(n: Int64): Int64;\nfunction IsPalindromic(n: Int64): boolean;\n\nimplementation\n\nfunction IsPrime(n: Int64): boolean;\nvar\n  i: Int64;\nbegin\n  Result := true;\n  if n mod 2 = 0 then Exit(n = 2); \n  if n mod 3 = 0 then Exit(n = 3); \n  i := 5;\n  while i * i <= n do begin\n    if n mod i = 0 then Exit(false);\n    if n mod (i + 2) = 0 then Exit(false);\n    i := i + 6;\n  end;\nend;\n\nfunction ReverseDigits(n: Int64): Int64;\nvar\n  m: Int64;\nbegin\n  Result := 0;\n  m := n;\n  while m > 0 do begin\n    Result := Result * 10;\n    Result := Result + m mod 10;\n    m := m div 10;\n  end;\nend;\n\nfunction IsPalindromic(n: Int64): boolean;\nbegin\n  Result := ReverseDigits(n) = n;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar\n  i: Int64;\nbegin\n  Result := [];\n  setlength(Result, 0);\n  for i := start to nd do  \n  begin\n    if (IsPrime(i) and not IsPalindromic(i) and IsPrime(ReverseDigits(i))) then\n    begin\n      setlength(Result, Length(Result) + 1);\n      Result[Length(Result)-1] := i;\n    end\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218157,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nimplementation\n\nuses SysUtils, StrUtils;\n\nfunction IsPrimeP(n: Int64): Boolean;\nvar i: Int64; res: Boolean;\nbegin\n  if (n = 2) then\n    res := True\n  else if ((n < 3) Or (n Mod 2 = 0)) then\n    res := False\n  else begin\n    i := 3; res := True;\n    while (i * i <= n) do begin\n      if (n Mod i = 0) then begin\n        res := False;\n        break\n      end;\n      i += 2;\n    end;\n  end;\n  Result := res;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar i, cnt, rinb: Int64; istr, ri: String; A: IntegerArray;\nbegin\n  i := start;\n  cnt := 0;\n  SetLength(A, 0);\n  while (i <= nd) do\n  begin\n    istr := IntToStr(i);\n    ri := ReverseString(istr);\n    rinb := StrToInt(ri);\n    if ((istr <> ri) And isPrimeP(i) And isPrimeP(rinb)) then\n    begin\n      Inc(cnt);\n      SetLength(A, cnt);\n      A[cnt - 1] := i;\n    end;\n    Inc(i);\n  end;\n  Result := A;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218158,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: int64): integerArray;\nfunction ReverseNumber(val: int64): int64;\nfunction Prime(val: int64): boolean;\nfunction sortArray(arr: integerArray): integerArray;\n\nimplementation\n\nfunction sortArray(arr: integerArray): integerArray;\nvar i, j, tmp: int64;\nbegin\n  for i := 0 to high(arr) -1 do \n    for j := i + 1 to high(arr) do\n      if arr[i] > arr[j] then begin\n         tmp:=arr[i];\n         arr[i]:=arr[j];\n         arr[j]:=tmp;\n      end;\n  result := arr;    \nend;\n\nfunction ReverseNumber(val: int64): int64;\nvar r: byte;\nbegin\n  result := 0;\n  while (val <> 0) Do\n    begin\n      r:= val mod 10;\n      result := result * 10 + r;\n      val := val div 10;\n    end;\nend;\n\nfunction Prime(val: int64): boolean;\nvar i, max: int64;\nbegin\n  result := true;\n  if (val mod 2 = 0) then\n  begin\n    result := false;\n    exit;\n  end;  \n  i := 3; \n  max := trunc(sqrt(val)); \n  while i <= max do begin \n    if val mod i = 0 then begin \n      result := false; \n      exit; \n    end; \n    i := i + 2 \n  end       \nend;\n\nfunction backwards_prime(start, nd: int64): integerArray;\nvar i, r: int64;\nbegin\n  result := [];      \n  for i := start to nd do\n  begin\n    if odd(i) then\n      if prime(i) then\n      begin\n        r := ReverseNumber(i); \n        if i = r then continue;\n        if odd(r) and prime(r) then\n        begin\n          setLength(result, high(result) + 2);\n          result[high(result)] := i;\n          if (r >= start) and (r <= nd) then\n          begin\n            setLength(result, high(result) + 1);\n            result[high(result)] := r;\n          end;  \n        end;\n      end;  \n    end;\n  result := sortArray(result);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218159,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nimplementation\n\nfunction backwards_prime(start, nd: Int64):IntegerArray;\nfunction IsPrime(N: Integer):Boolean;\nvar\n   I : Integer;\nbegin\n   for I := 2 to Trunc(Sqrt(N)) do\n      if N mod i = 0 then\n      begin\n\t Exit(False);\n      end;\n   Result := True;\nend;\nfunction ReverseNum(Number: Int64): Int64;\nvar\n   Rev : Int64;\nbegin\n   Rev := 0;\n   while(number <> 0) do\n   begin\n      Rev := (Rev * 10) + (number mod 10);\n      Number := Number div 10;\n   end;\n   Result := Rev;\nend;\nvar\n   I,Len:Integer;\n   Arr:IntegerArray;\nbegin\n   Len := 0;\n   for I := Start to Nd do\n   begin\n      if(IsPrime(I)) and not (I = ReverseNum(I))\n\t   and (IsPrime(ReverseNum(I))) and (I > 10) then\n      begin\n\t SetLength(Arr, Len+1);\n\t Arr[Len] := I;\n\t Inc(Len);\n      end;\n   end;\n   Result := Arr;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218160,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nfunction Reverse(aVal:Integer):Integer;\n\nimplementation\n  uses StrUtils, Sysutils;\n  \nfunction IsPrime(N: Integer): Boolean;\nvar\n  Test, k: Integer;\nbegin\n  if N <= 3 then\n    IsPrime := N > 1\n  else if ((N mod 2) = 0) or ((N mod 3) = 0) then\n    IsPrime := False\n  else\n  begin\n    IsPrime := True;\n    k := Trunc(Sqrt(N));\n    Test := 5;\n    while Test <= k do\n    begin\n      if ((N mod Test) = 0) or ((N mod (Test + 2)) = 0) then\n      begin\n        IsPrime := False;\n        break; { jump out of the for loop }\n      end;\n      Test := Test + 6;\n    end;\n  end;\nend;\n\nfunction Reverse(aVal:Integer):Integer;\nvar\n  lIndex: Integer;\nbegin\n   Result := 0;\n    while aVal>0 do begin\n        lIndex := aVal mod 10;\n        aVal := aVal div 10;\n        Result := Result*10 + lIndex;\n    end;\nend;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar\n  lStrNumber: string;\n  lCurrentNumber: Integer;\n  lRes: Int64;\nbegin\n  SetLength(Result,0);\n  for lCurrentNumber := start  to nd do \n  begin\n\/\/  writeln(lCurrentNumber);\n\n  lRes := Reverse(lCurrentNumber);\n  \nif lCurrentNumber = lRes then Continue;\n \nif IsPrime(lCurrentNumber) then\n  if IsPrime(lRes) then\n    begin  \n      Setlength(Result, Length(Result)+1);\n      Result[Length(Result)-1] := lCurrentNumber; \n    end;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218161,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n\nfunction IsPrime(N: Int64): Boolean;\n\/\/ Source: https:\/\/docwiki.embarcadero.com\/RADStudio\/Sydney\/en\/Tutorial:_Using_the_For_Loop_from_the_Parallel_Programming_Library\nvar\n  Test, k: Integer;\nbegin\n  if N <= 3 then\n    IsPrime := N > 1\n  else if ((N mod 2) = 0) or ((N mod 3) = 0) then\n    IsPrime := False\n  else\n  begin\n    IsPrime := True;\n    k := Trunc(Sqrt(N));\n    Test := 5;\n    while Test <= k do\n    begin\n      if ((N mod Test) = 0) or ((N mod (Test + 2)) = 0) then\n      begin\n        IsPrime := False;\n        break; { jump out of the for loop }\n      end;\n      Test := Test + 6;\n    end;\n  end;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar\n  I, Reverse, RLen: Int64;\n  StrI, StrR: string;\nbegin\n  Result := [];\n  for I := start to nd do\n    if IsPrime(I) then\n    begin\n      StrI := IntToStr(i);\n      StrR := ReverseString(StrI);\n      if StrI = StrR then\n        Continue;\n      Reverse := StrToInt(StrR);\n      if IsPrime(Reverse) then\n      begin\n        RLen := Length(Result);\n        SetLength(Result, RLen + 1);\n        Result[RLen] := I;\n      end;\n    end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218162,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\nfunction IsPrime(number : Integer): Boolean;\nfunction ReverseNumber(liczba : Integer) : Integer;\n\nimplementation\n\nfunction IsPrime(number : Integer): Boolean;\nvar\n  i:Integer;\nbegin\n   for i := 2 to round(sqrt(number)) do\n      if number mod i = 0 then\n        exit(false);\n   Result := True;\nend;\n\nfunction ReverseNumber(liczba : Integer) : Integer;\nvar i : Integer;\nbegin\n  Result := 0;\n  i := liczba;\n  while (i <> 0) do\n  begin\n    Result := (Result * 10) + (i mod 10);\n    i := Trunc(i \/ 10);\n  end;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar \n  i, j : Integer;  \nbegin\n  j:=0;\n  Result:=[];\n  for i:=start to nd do \n    if IsPrime(i) and IsPrime(ReverseNumber(i)) and (i <> ReverseNumber(i)) then\n    begin\n      SetLength(Result, j+1);\n      Result[j]:=i;\n      Inc(j);\n    end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218163,"user_id":null,"body":"unit Kata;\n\ninterface\n    \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nimplementation\n\nfunction IsPrime(a : Int64) : Boolean;\nvar\n  i : Int64;\nbegin\n  if a <= 3 then exit(a > 1);\n  if ((a mod 2) = 0) or ((a mod 3) = 0) then exit(false);\n  i := 5;\n  while (i*i) <= a do begin\n    if ((a mod i) = 0) or ((a mod (i + 2)) = 0) then exit(false);\n    Inc(i, 6);\n  end;\n  Result := true;\nend;  \n\nfunction NumberBackwards(a : Int64) : Int64;\nvar\n  reminder : Int64;\nbegin\n  Result := 0;\n  while a <> 0 do begin\n    reminder := a mod 10;\n    Result := Result * 10 + reminder;\n    a := a div 10;\n  end;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar\n  i, size, back : Int64;\nbegin\n  Result := [];\n  SetLength(Result, nd-start+1);\n  size := 0;\n  for i := start to nd do if IsPrime(i) then begin\n    back := NumberBackwards(i);\n    if (back <> i) and IsPrime(back) then begin\n      Result[size] := i;\n      Inc(size);\n    end;\n  end;\n  SetLength(Result, size);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218164,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nuses math, sysutils, strutils;\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nimplementation\n\nfunction IsPrime(a : Int64) : Boolean;\nvar\n  i : Int64;\nbegin\n  if a <= 3 then exit(a > 1);\n  if ((a mod 2) = 0) or ((a mod 3) = 0) then exit(false);\n  i := 5;\n  while (i*i) <= a do begin\n    if ((a mod i) = 0) or ((a mod (i + 2)) = 0) then exit(false);\n    Inc(i, 6);\n  end;\n  Result := true;\nend;  \n\nfunction NumberBackwards(a : Int64) : Int64;\nvar\n  reminder : Int64;\nbegin\n  Result := 0;\n  while a <> 0 do begin\n    reminder := a mod 10;\n    Result := Result * 10 + reminder;\n    a := a div 10;\n  end;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar\n  i, size, back : Int64;\nbegin\n  Result := [];\n  SetLength(Result, nd-start+1);\n  size := 0;\n  WriteLn(start, ' ', nd);\n  for i := start to nd do if IsPrime(i) then begin\n    back := NumberBackwards(i);\n    if (back <> i) and IsPrime(back) then begin\n      Result[size] := i;\n      Inc(size);\n    end;\n  end;\n  SetLength(Result, size);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218165,"user_id":76,"body":"unit Kata;\n\ninterface\n  \ntype\n  IntegerArray = array of Int64;\n  \nfunction backwards_prime(start, nd: Int64): IntegerArray;\n\nimplementation\n\nfunction IsPrime(n: Int64): Boolean;\nvar i: Integer;\nbegin\n  Result := n > 1;\n  for i := 2 to Trunc(Sqrt(n)) do begin\n    if n mod i = 0 then exit(false);\n  end;\nend;\n\nfunction ReverseInt(n: Int64): Int64;\nbegin;\n  Result := 0;\n  while n <> 0 do begin\n    Result := Result * 10 + (n mod 10);\n    n := n div 10;\n  end;\nend;\n\nfunction backwards_prime(start, nd: Int64): IntegerArray;\nvar i, j, rev: Int64;\nvar temp: Array[0..10000] of Int64;\nbegin\n  j := 0;\n  for i := start to nd do begin\n    rev := ReverseInt(i);\n    if (IsPrime(i) and (rev <> i) and IsPrime(rev)) then begin\n      temp[j] := i;\n      j += 1;\n    end;\n  end;\n  SetLength(Result, j);\n  for i := 0 to j - 1 do Result[i] := temp[i];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5544c7a5cb454edb3c000047":[{"id":218166,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nbegin\n  if(h <= 0) Or (bounce <= 0) Or (bounce >= 1) Or (window >= h) then Result := -1\n  else\n  begin\n    Result := -1;\n    while (h > window) do\n    begin\n      Result += 2;\n      h *= bounce;\n    end;\n  end;\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218167,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nVAR\n  reboundBall: Double;\nbegin\n  reboundBall := h;\n  IF (h > 0) AND (bounce < 1) AND (bounce > 0) AND (h > window) THEN BEGIN\n    Result := 1;\n    WHILE reboundBall > window DO BEGIN\n      reboundBall := reboundBall * bounce;\n      IF reboundBall <= window THEN\n        Result := Result\n      ELSE\n       Result := Result + 2;\n      WriteLn(reboundBall);\n    END; \/\/ WHILE\n  END ELSE\n    Result := - 1;\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218168,"user_id":null,"body":"unit Kata;\n\ninterface\ntype state = (inc, dec);\n\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nvar cnt : Int64; st : state;\nbegin\n  st  := dec;\n  cnt := 0;\n  \n\n  \n  if (window >= h)  then cnt := -1;\n  if (bounce <= 0)  then cnt := -1;\n  if (bounce >= 1)  then cnt := -1;\n  \n  if (window < h) and (bounce > 0) and (bounce < 1) then\n  begin\n    repeat\n      if (st = dec) then\n      begin\n        cnt := cnt + 1;\n        st := inc;\n      end;\n\n      if (st = inc) then\n      begin\n        h := h * bounce;\n        writeln('h = ', h);\n        if (h > window) then\n          cnt := cnt + 1;\n        st := dec;\n      end;\n    until window >= h;\n  end;\n  \n  Result := cnt;\n  \nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218169,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nvar i : integer;\nbegin\n  \/\/ your code\n  i := 0;\n  if (h > 0) and (bounce > 0) and (bounce < 1) and (window < h) then\n  \n  begin\n  while h > window do\n  begin\n  i := i + 1; \/\/\u043c\u044f\u0447 \u0443\u043f\u0430\u043b \u0432\u043d\u0438\u0437\n  h := (h * bounce); \/\/\u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0442\u043a\u0441\u043a\u043e\u043a\n  if h > window then i := i + 1; \/\/\u0435\u0441\u043b\u0438 \u043e\u0442\u0441\u043a\u043e\u043a \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043e\u043a\u043d\u0430 \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u043f\u043e\u043a\u0430\u0437\u043e\u0432\n  end;\n  Result := i;\n  end\n  \n  else\n  \n  Result := -1;\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218170,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nbegin\n  if (h <= 0.0) or (bounce <= 0.0) or (bounce >= 1.0) or (window >= h) then\n    Result := -1\n  else\n    Result := 2 + bouncing_ball(h*bounce, bounce, window)\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218171,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\n  var\n  bounceHeight : Double;\n  bounces : Int64;\n\n  begin\n    if ((h > 0.0) and (bounce > 0.0) and (bounce < 1.0) and (window < h)) then\n    {all three conditions are fulfilled}\n    begin\n      bounceHeight := h;\n      bounces := 0;\n      while (bounceHeight > window) do\n      begin\n        {falling down}\n        bounces := bounces + 1;\n        {bouncing up}\n        bounceHeight := bounceHeight * bounce;\n        if (bounceHeight > window) then\n        bounces := bounces + 1\n      end;\n      bouncing_ball := bounces\n    end\n    else\n    bouncing_ball := -1\n  end;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218172,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nbegin\n  \/\/ your code\n  Result := 1;\n  if (h>0) and (bounce>0) and (bounce<1) and (window<h) then\n  begin\n    while h*bounce>window do\n    begin\n      Inc(Result,2);\n      h*=bounce;\n    end;\n  end\n  else Result:=-1;\nend;      \n\nbegin\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218173,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nbegin\n  result := -1;\n\n  if (h <= 0) or (bounce <= 0) or (bounce >= 1) or (window >= h) then exit;\n  \n  result :=0;\n  \n  while (h>window) do\n  begin\n    inc(result);\n    h := h*bounce;    \n    if (h>window) then\n      inc(result);\n  end;\n  \nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218174,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nvar\n  new_h: Double;\nbegin\n  if (h  > 0) and (bounce > 0) and (bounce < 1) and (window < h) then\n  begin\n    Result := 0;\n    new_h := h; \n    while True do\n    begin\n      new_h := new_h * bounce;\n      if new_h > window then\n        Result := Result + 2\n      else\n      begin\n        Result := Result + 1;\n        Break;\n      end;\n    end;\n  end\n  else\n    Result := -1;\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218175,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\n\nimplementation\n\nfunction bouncing_ball(h, bounce, window: Double): Int64;\nvar times: Int64 = 0;\nbegin\n  if (h <= 0) or (bounce <= 0) or (bounce >= 1) or (window >= h) then exit(-1);\n  while (h > window) do begin\n    times += 1;\n    h *= bounce;\n  end;\n  Result := times * 2 - 1;\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55466989aeecab5aac00003e":[{"id":218176,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils, Math;\n\nfunction SqInRect(a, b: Int64): String;\n\nimplementation\n\nfunction SqInRect(a, b: Int64): String;\nvar\n  l, w, cnt: Int64;\nbegin\n  Result := '';\n  cnt := 0;\n  if (a = b) then Exit('nil'); \n  while ((a > 0) and (b > 0)) do begin\n    l := max(a, b);\n    w := min(a, b);\n    a := w;\n    b := l - w;\n    cnt := cnt + 1;\n    if (cnt > 1) then Result += ' ';\n    Result += Format('%d', [w]);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218177,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction SqInRect(lng, wdth: Int64): String;\n\nimplementation\n\nUses \n  sysutils;\n  \nfunction SolutionWithRecursiveCall(lng, wdth: Int64): String;\nvar\n  line: string;\n  \nprocedure BuildString(a, b: Int64);\nbegin\n    if (a<b) then\n    begin\n      line:=line+IntToStr(a)+' ';\n      BuildString(a, b-a);\n    end\n    else\n    if (b<a) then\n    begin\n      line:=line+IntToStr(b)+' ';\n      BuildString(a-b, b);\n    end\n    else\n    if (a=b) then\n      line:=line+IntToStr(a);\nend;\n\nbegin\n    \/\/ Solution with recursive procedure call\n    line:='';\n    if (lng=wdth) then\n      line:='nil'\n    else\n      BuildString(lng, wdth);\n    Result := line;\nend;\n\nfunction SolutionWithIterativeLoop(lng, wdth: Int64): String;\nvar\n  line: string = '';\nbegin\n    \/\/ Solution with iterative loop\n    if (lng=wdth) then\n      Exit('nil');\n\n    while (lng<>wdth) do begin\n      if (lng<wdth) then\n      begin\n        line:=line+IntToStr(lng)+' ';\n        wdth:=wdth-lng;\n      end\n      else\n      if (wdth<lng) then\n      begin\n        line:=line+IntToStr(wdth)+' ';\n        lng:=lng-wdth;\n      end        \n    end;\n    line:=line+IntToStr(lng);\n    \n    Result := line;\nend;\n\nfunction SqInRect(lng, wdth: Int64): String;\nbegin\n    \/\/ more performance\n    Result := SolutionWithIterativeLoop(lng, wdth);\n    \n    \/\/ alternative solution: maybe easier to read and understand\n    \/\/Result := SolutionWithRecursiveCall(lng, wdth);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218178,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Math, SysUtils;\n\nfunction SqInRect(lng, wdth: Int64): String;\n\nimplementation\n\nfunction SqInRect(lng, wdth: Int64): String;\nvar d, l, c: Int64;\nbegin\n  Result := 'nil';\n  l := Max(lng, wdth);\n  d := Min(lng, wdth);\n  if d=l then\n    exit;    \n  c := d;\n  if d > 0 then\n  \tResult := IntToStr(d);\n  while c > 0 do\n  begin\n    c := l - d;\n    l := Max(c, d);\n    d := Min(c, d);\n    if d > 0 then\n    \tResult := Result + ' ' + IntToStr(d);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218179,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction SqInRect(lng, wdth: Int64): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n\nfunction AppendIntToStr(s: String; n: Int64): String;\nbegin\n  result := s + ' ' + IntToStr(n)\nend;\n\n\nfunction AppendOnes(s: String; n: Int64): String;\nvar\n  i: Int64;\nbegin\n  result := s;\n  for i := 1 to n do\n    result := result + ' 1';\nend;\n\n\nfunction SqInRect(lng, wdth: Int64): String;\nbegin\n\tif lng = wdth then\n\t\tresult := 'nil'\n\telse begin\n\t\tresult := '';\n\t\twhile (true) do begin\n\t\t\tif lng = wdth then begin\n\t\t\t\tresult := AppendIntToStr(result, lng);\n\t\t\t\tbreak;\n\t\t\tend;\n\t\t\tif lng < wdth then begin\n\t\t\t\tresult := AppendIntToStr(result, lng);\n\t\t\t\tdec(wdth, lng);\n\t\t\tend;\n\t\t\tif wdth < lng then begin\n\t\t\t\tresult := AppendIntToStr(result, wdth);\n\t\t\t\tdec(lng, wdth);\n\t\t\tend;\n\t\t\tif wdth = 1 then begin\n\t\t\t\tresult := AppendOnes(result, lng);\n\t\t\t\tbreak;\n\t\t\tend;\n\t\t\tif lng = 1 then begin\n\t\t\t\tresult := AppendOnes(result, wdth);\n\t\t\t\tbreak;\n\t\t\tend;\n\t\tend;\n\tend;\n\tresult := Trim(result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218180,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Sysutils, Math;\n\nfunction SqInRect(lng, wdth: Int64): String;\n\nimplementation\n\nfunction SqInRect(lng, wdth: Int64): String;\n\n  var\n  newLength : Int64;\n  newWidth : Int64;\n\nbegin\n\n  SqInRect := '';\n\n  if lng = wdth then\n    SqInRect := 'nil'\n  else\n  begin\n\n    newLength := max(lng, wdth);\n    newWidth := min(lng, wdth);\n\n    SqInRect := SqInRect + IntToStr(newWidth);\n\n    while newWidth > 0 do\n    begin\n      if newLength <= 2 * newWidth then\n      begin\n        newWidth := newLength - newWidth;\n        newLength := newLength - newWidth\n      end\n      else\n        newLength := newLength - newWidth;\n\n      if newWidth <> 0 then\n        SqInRect := SqInRect + ' ' + IntToStr(newWidth)\n    end\n\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218181,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n\nfunction SqInRect(lng, wdth: Int64): String;\n\nimplementation\n\nfunction SqInRect(lng, wdth: Int64): String;\nvar squares: String;\nbegin\n    if (lng = wdth) then Result := 'nil'\n    else\n      begin\n        squares := '';\n        while (lng > 0) And (wdth > 0) do\n          begin\n            if (lng < wdth) then\n              begin\n                squares := squares + Format('%d ', [lng]);\n                wdth -= lng\n              end\n            else\n              begin\n                squares := squares + Format('%d ', [wdth]);\n                lng -= wdth\n              end\n          end;\n        Result := Copy(squares, 1, Length(squares) - 1);\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218182,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n\nfunction SqInRect(lng, wdth: Int64): String;\n\nimplementation\n\nfunction SqInRect(lng, wdth: Int64): String;\nvar squares: String;\nbegin\n    if (lng = wdth) then Result := 'nil'\n    else\n      begin\n        squares := '';\n        while (lng > 0) And (wdth > 0) do\n          begin\n            if (lng < wdth) then\n              begin\n                squares := squares + Format('%d ', [lng]);\n                wdth -= lng\n              end\n            else\n              begin\n                squares := squares + Format('%d ', [wdth]);\n                lng -= wdth\n              end\n          end;\n        Result := Copy(squares, 1, Length(squares) - 1);\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5547cc7dcad755e480000004":[{"id":218183,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n\nfunction RemovedNumbers(n: Int64): String;\n\nimplementation\n\nfunction RemovedNumbers(n: Int64): String;\nvar sm, i, b, lg: Int64; S: String;\nbegin\n  sm := n * (n + 1) Div 2;\n  S := '';\n  i := n Div 2;\n  while (i <= n) do\n    begin\n      b := sm - i;\n      if (b Mod (i + 1) = 0) then S := S + Format('%d %d,', [i, b Div (i + 1)]);\n      i += 1;\n    end;\n    lg := Length(S);\n    if (lg > 0) then\n      Result := Copy(S, 1, Length(S) - 1)\n    else Result := '';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218184,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction RemovedNumbers(n: Int64): String;\n\nimplementation\nuses SysUtils; \n\nfunction RemovedNumbers(n: Int64): String;\nvar \n  m, x, y: Int64; \n  r: String;\nbegin\n  m := n * (n + 1) Div 2;\n  r := '';\n  x := 1;\n  while (x <= n) do\n    begin\n      y := (m - x) Div (x + 1);\n      if ((y <= n) and (x * y = m - x - y)) then r := r + Format('%d %d,', [x, y]);\n      x += 1;\n    end;\n  if (Length(r) > 0) then Result := Copy(r, 1, Length(r) - 1) else Result := '';\nend;\n\nend.\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218185,"user_id":null,"body":"unit Kata;\n\n\ninterface\n\nuses sysutils;\n\nfunction RemovedNumbers(n: Int64): String;\n\nimplementation\n\nfunction RemovedNumbers(n: Int64): String;\nvar sum, a, b: Int64;\nbegin  \n  Result := ''; \n  \n  sum := Round((1+n)*n\/2);\n\n  for a := 1 to n do\n    if ((sum-a) mod (a+1)=0) then\n    begin\n      b := Round((sum-a)\/(a+1));\n      \n      if b<= n then\n        Result := Result + IntToStr(a) + ' ' + IntToStr(b) + ',';\n    end;\n  \n    if Length(Result) >0 then\n      Result := copy(Result, 1, Length(Result)-1);\n  \nend;\n\nend.\n\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218186,"user_id":null,"body":"unit Kata;\n\n\ninterface\n\nuses sysutils;\n\nfunction RemovedNumbers(n: Int64): String;\n\nimplementation\n\nfunction RemovedNumbers(n: Int64): String;\nvar sum, a, b: Int64;\nbegin  \n  Result := ''; \n  \n  sum := Round((1+n)*n\/2);\n\n  for a := 1 to n do\n    if ((sum-a) mod (a+1)=0) then\n    begin\n      b := Round((sum-a)\/(a+1));\n      \n      if b<= n then\n        Result := Result + IntToStr(a) + ' ' + IntToStr(b) + ',';\n    end;\n  \n    if Length(Result) >0 then\n      Result := copy(Result, 1, Length(Result)-1);\n  \nend;\n\nend.\n\n\npublic class RemovedNumbers {\n  public static List<long[]> remove_nb(long n) {\n    var result = new List<long[]>();\n    long sum = (1+n)*n\/2;\n  \n    for (int a=1;a<=n;a++) \n      if ((sum-a)%(a+1)==0) {\n        long b = (sum-a)\/(a+1);\n        \n        if (b <= n) \n          result.Add(new long[]{a,b});\n      }\n    \n    return result;\n  }\n}\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"554a44516729e4d80b000012":[{"id":218187,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils, math;\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\n\nimplementation\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nvar\n  p0, p1, r, t: Double; m, s: Int64;\nbegin\n  p0 := startPriceOld;\n  p1 := startPriceNew;\n  s := savingperMonth;\n  r := percentLossByMonth;\n  m := 0;\n  Result := '';\n  while (p0 + m * s < p1) do\n    begin\n      if (m Mod 2 = 1) then r := r + 0.5;\n      p0 := p0 - p0 * 0.01 * r;\n      p1 := p1 - p1 * 0.01 * r;\n      Inc(m);\n    end;\n  Result += Format('%d %d', [m, floor(0.5 + p0 + m * s - p1)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218188,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth : Int64; percentLossByMonth : Double) : String;\n\nimplementation\n\nuses SysUtils;\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth : Int64; percentLossByMonth : Double) : String;\nvar month : Int64;\nvar oldPrice, newPrice : Double;\nbegin\n  month := 0;\n  oldPrice := startPriceOld;\n  newPrice := startPriceNew;\n  while oldPrice + savingperMonth * month < newPrice do\n  begin\n    if month mod 2 = 1 then percentLossByMonth += 0.5;\n    month += 1;\n    oldPrice *= (100 - percentLossByMonth) \/ 100;\n    newPrice *= (100 - percentLossByMonth) \/ 100;\n  end;\n  Result := Format('%d %d', [month, Round(oldPrice + savingperMonth * month - newPrice)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218189,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\n\nimplementation\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nvar mth: Int64; priceOld, priceNew, available: Double;\nbegin\n  mth := 0;\n  priceOld := startPriceOld;\n  priceNew := startPriceNew;\n  available := startPriceOld;\n  while (available < priceNew) do\n  begin\n    \/\/ at the end of this month\n    mth += 1;\n    if (mth Mod 2 = 0) then\n    begin\n      percentLossByMonth := percentLossByMonth + 0.5;\n    end;\n    priceOld := priceOld * (100 - percentLossByMonth) \/ 100;\n    priceNew := priceNew * (100 - percentLossByMonth) \/ 100;\n    available := mth * savingperMonth + priceOld;\n  end;\n  Result := Format('%d %d', [mth, Round(available - priceNew)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218190,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\n\nimplementation\nuses SysUtils;\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nvar\n  carsave, pl : double;\n  m : integer;\nbegin\n  \/\/ your code\n  Result := '';\n  pl := percentLossByMonth;\n  carsave := startPriceOld - startPriceNew;\n  m := 0;\n  while carsave + m*savingperMonth < 0 do\n    begin\n      inc(m);\n      if not odd(m) then pl += 0.5;\n      carsave := carsave * (1-pl\/100)\n    end;\n    result := Format('%d %d', [m, round(carsave+m*savingperMonth)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218191,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nfunction totalSavings(months : Int64) : Int64;\nfunction percentageOfLoss(months : Integer): Double;\nfunction worthOldCar(months: Int64) : Double;\nfunction priceNewCar(months : Int64) : Double;\n\nvar\nbasePercentage : Double;\nbaseWorthOldCar: Double;\nbasePriceNewCar: Int64;\nmonthlySavings : Int64;\n\ntotalIncrementCount : Integer;\ncurrentPercentage   : Double;\ni,j,k:Integer;\n\ncurrentWorthOldCar  : Double; \ncurrentPriceNewCar  : Double;\n\namountSaved : Double;\n\nresultMonths  : Integer;\nresultSurplus : Double;\n\nconcatonatedString : String;\n   \n\nimplementation\nuses sysutils;\n\nfunction totalSavings(months : Int64) : Int64; \/\/fin\nbegin\n  Result:= months * monthlySavings;;\nend;\n\nfunction percentageOfLoss(months : Integer): Double;\nbegin\n  if months mod 2 = 0 then\n  begin\n    totalIncrementCount := months div 2; \/\/ 6 div 2 = 3\n    currentPercentage   := basePercentage + (totalIncrementCount * 0.5);\n  end;\n  \n  if months mod 2 <> 0 then \n  begin \n    percentageOfLoss(months - 1); \/\/ recursive function \n  end;\n  \/\/writeln('current percentageLoss = ', Trunc(currentPercentage));\n  Result:= currentPercentage;\nend;\n\nfunction worthOldCar(months: Int64) : Double;\nbegin\n  if months = 0 then\n  begin\n    currentWorthOldCar := baseWorthOldCar;\n  end;\n  \n  if months >= 1 then \n  begin\n    currentWorthOldCar := baseWorthOldCar;\n    for i:=1 to months do \n    begin \/\/ decrease every month\n      currentWorthOldCar := currentWorthOldCar - currentWorthOldCar * percentageOfLoss(i) \/ 100 ;\n    end;\n  end;\n  \n  Result:= currentWorthOldCar;\nend;\n\nfunction priceNewCar(months: Int64) : Double;\nbegin\n  if months = 0 then\n  begin\n    currentPriceNewCar := basePriceNewCar;\n  end;\n  \n  if months >= 1 then \n  begin\n    currentPriceNewCar := basePriceNewCar;\n    for i:=1 to months do \n    begin \/\/ decrease every month\n      currentPriceNewCar := currentPriceNewCar - currentPriceNewCar * percentageOfLoss(i) \/ 100 ;\n    end;\n  end;\n  Result:= currentPriceNewCar;\nend;\n\n\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nbegin\n  basePercentage := percentLossByMonth;\n  baseWorthOldCar:= startPriceOld;\n  basePriceNewCar:= startPriceNew;\n  monthlySavings := savingperMonth;\n  amountSaved := 0;\n  \n  for j:=0 to 26 do\n  begin\n    amountSaved := totalSavings(j) + worthOldCar(j);\n    if amountSaved >= priceNewCar(j) then\n    begin\n      resultMonths := j;\n      resultSurplus:= amountSaved - priceNewCar(j);\n      break;\n    end;\n  end;\n  \n  concatonatedString:='';\n  concatonatedString:= IntToStr(resultMonths) + ' ' + IntToStr(Round(resultSurplus));\n  writeln(concatonatedString);\n  \n  Result := concatonatedString;\n  (*\n  \/\/testing\n  for i:=0 to 10 do\n  begin\n    \/\/writeln('percentageOfLoss after ',i,' months = ', percentageOfLoss(i));\n    \/\/writeln('worthOldCar after ', i ,' months = ', Trunc(worthOldCar(i)));\n    \/\/writeln('priceNewCar after ',i, ' months = ', Trunc(priceNewCar(i)));\n  end; \n  *)\n\n  \n  \nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218192,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth: Double): String;\n\nimplementation\n\nuses sysutils;\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth, percentLossByMonth: Double): String;\nvar PercentLoss, savings: Double;\n  even: boolean;\n  months: word;\n\nbegin\n  savings := 0;\n  even := false;\n  months := 0;\n  while savings + startPriceOld < startPriceNew do\n  begin\n    savings := savings + savingperMonth;\n    if even then\n      percentLossByMonth := percentLossByMonth + 0.5;\n\nstartPriceOld := startPriceOld * (100 - percentLossByMonth) \/ 100;\n    startPriceNew := startPriceNew * (100 - percentLossByMonth) \/ 100;\n    even := not even;\n    inc(months);\n  end;\n\nResult := IntToStr(months) + ' ' + IntToStr(round(savings + startPriceOld - startPriceNew));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218193,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\n\nimplementation\n\nvar\n  available, diff, priceO, priceN: Double;\n  months, saves: Int64;\n  monthStr, availStr: String;\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nbegin\n  months := 0;\n  saves := 0;\n  diff := startPriceOld - startPriceNew;\n  priceO := startPriceOld;\n  priceN := startPriceNew;\n  available := saves + diff;\n  while (available < 0) do begin\n    WriteLn(available + (priceO * ((100.0-percentLossByMonth)\/100)) - (priceN * ((100.0-percentLossByMonth)\/100)));\n    months := months + 1;\n    saves := saves + savingperMonth;\n    if ((months mod 2) = 0) then begin\n      percentLossByMonth := percentLossByMonth + 0.5;\n    end;\n    priceO := priceO * ((100.0-percentLossByMonth)\/100);\n    priceN := priceN * ((100.0-percentLossByMonth)\/100);\n    diff := priceO - priceN;\n    available := saves + diff;\n    WriteLn((priceO * ((100.0-percentLossByMonth)\/100)):7:2, '   ', (priceN * ((100.0-percentLossByMonth)\/100)):7:2, '   ', (available):7:2);\n  end;\n  Str(months, monthStr);\n  Str(Round(available), availStr);\n  Result := monthStr + ' ' + availStr;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218194,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\n\nimplementation\n\nfunction nb_months(startPriceOld, startPriceNew, savingperMonth: Int64; percentLossByMonth: Double): String;\nvar\n  i : integer;\n  x, y : string;\n  a, b : double;\nbegin\n  i:= 0;\n  a := startPriceOld;\n  b := startPriceNew;\n  while ((savingperMonth*i + a )< b) do \n    begin\n      Inc(i);\n      if (i mod 2 = 0) then\n        percentLossByMonth:= percentLossByMonth+0.5;\n      a:= a*(1-percentLossByMonth\/100);\n      b:= b*(1-percentLossByMonth\/100);\n    end;\n    str(i,x);\n    str(round(savingperMonth*i + a - b), y);\n  Result := concat(x,' ' ,y);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"554f76dca89983cc400000bb":[{"id":218195,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils, Math;\n\nfunction SolEqua(n: Int64): String;\n\nimplementation\n\nfunction SolEqua(n: Int64): String;\nvar \n  d, x, y: Double; i: Int64; cnt: integer;\nbegin\n  Result := '[';\n  i := 1;\n  cnt := 0;\n  while i * i <= n do begin\n    d := n \/ i;\n    x := (d + i) \/ 2;\n    y := (d - i) \/ 4;\n    if ((floor64(d) = ceil64(d)) and (floor64(x) = ceil64(x)) and (floor64(y) = ceil64(y))) then begin\n      if (cnt > 0) then Result += ', ';\n      Result += Format('[%d, %d]', [floor64(x), floor64(y)]);\n      cnt += 1;\n    end;\n    Inc(i);\n  end;\n  Result += ']';\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218196,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n\nfunction SolEqua(n: Int64): String;\n\nimplementation\n\nfunction SolEqua(n: Int64): String;\nvar i, x, x2, y2: Int64; str: String;\nbegin\n  str := '['; i := 1;\n  while (i * i <= n) do\n  begin\n    if (n Mod i = 0) then\n    begin\n      x2 := i + n Div i;\n      if (x2 Mod 2 = 0) then\n      begin\n        x := x2 Div 2; y2 := x - i;\n        if (y2 Mod 2 = 0) then\n          str += Format('[%d, %d], ', [x, y2 Div 2]);\n      end;\n    end;\n    i := i + 1\n  end;\n  if (str = '[') then Result := '[]'\n  else Result := Copy(str, 1, Length(str) - 2) + ']';\nend;      \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5552101f47fc5178b1000050":[{"id":218197,"user_id":53,"body":"unit Kata;\n\ninterface\nUses Math;\n\nfunction DigPow(n, p: Int64): Int64;\n\nimplementation\n\nfunction DigPow(n, p: Int64): Int64;\nvar\n  i, m, k: integer;\nbegin\n  Result := 0;\n  m := n;\n  k := Floor(Log10(n) + 1);\n  i := 0;\n  while m > 0 do begin\n    Result := Result + Ceil(Power(m mod 10, p - 1 + (k - i)));\n    m := m div 10;\n    i := i + 1;\n  end;\n  if Result mod n <> 0 then Exit(-1); \n  Result := Result div n;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218198,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigPow(n, p: Int64): Int64;\n\nimplementation\n\nfunction DigPow(n, p: Int64): Int64;\n  var keke: integer;\n  var jojo: integer;\n  var i, x, sum, y, jija, power: integer;\n  var keka : array [1..20] of shortint;\nbegin \n  jojo:=n;\n  i:=1;\n  While (jojo > 0) do\n  begin\n    keka[i] := (jojo mod 10);\n    jojo := jojo div 10;\n    i := i + 1;\n  end;\n  x := (i - 1);\n  sum := 0;\n  y := 0;\n  For i:=x downto 1 do\n    begin\n      power:= keka[i];\n      for jija:=1 to ((p+y)-1) do\n        begin\n          power:= power*keka[i];\n        end;\n      sum := (sum + power);\n      y := y + 1;\n    end;\n  If ((sum mod n)=0) then keke := (sum div n)\n  else keke := -1;\n  Result:= keke;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218199,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction DigPow(n, p: Int64): Int64;\n\nimplementation\n\nuses SysUtils, Math;\n\nfunction DigPow(n, p: Int64): Int64;\nvar i, sum: Int64; s: String;\nbegin\n  s := IntToStr(n);\n  i := 1; sum := 0;\n  while i <= Length(s) do begin\n    sum += Trunc(Power(Ord(s[i]) - Ord('0'), p - 1 + i));\n    Inc(i);\n  end;\n  if (sum Mod n = 0) then Result := sum Div n else Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218200,"user_id":null,"body":"unit Kata;\n\ninterface\nuses SysUtils, math;\n\nfunction DigPow(n, p: Int64): Int64;\n\nimplementation\n\nfunction DigPow(n, p: Int64): Int64;\nvar\n  C: Char;\n  S: Int64;\n  Str: string; \nbegin\n  S := 0;\n  Str := IntToStr(n);\n  for C in str do\n  begin\n    S := S + Round(Power(StrToInt(C), p));\n    p := p + 1;\n  end;\n  if (S mod n) = 0 then\n    Result := S div n\n  else\n    Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218201,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigPow(n, p: Int64): Int64;\nfunction Pow(n, p: Int64): Int64;\n\nimplementation\n\nfunction Pow(n, p: Int64): Int64;\nvar i: Int64;\nbegin\n  Result:=1;\n  for i:=0 to p-1 do\n    Result:=Result*n;\nend;\n\nfunction DigPow(n, p: Int64): Int64;\nvar i, j, m, sum, d, dv: Int64;\nbegin\n \/\/ your code\n m:=n;\n j:=0;\n \n \/\/ find digits count\n while m > 0 do\n begin\n  j:=j+1;\n  m:=m div 10;\n end;\n \n \/\/ calculation\n m:=n;\n dv:=Pow(10, j-1);\n sum:=0; \n \n for i:=0 to j-1 do\n begin  \n  d:=m div dv;    \n  sum:=sum + Pow(d, p);\n  \n  p:=p+1;\n  m:=m mod dv; \n  dv:=dv div 10;\n end;\n \n \/\/ main check\n if sum mod n = 0 then\n  Result:=sum div n\n else\n  Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218202,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction DigPow(n, p: Int64): Int64;\n\nimplementation\n\nuses Math;\n\nfunction DigPow(n, p: Int64): Int64;\n\nvar\n\nN_k, i, k,code :integer;\nTest_base, Dig, f:Int64;\n   \nString_in:string;\nbegin\n Test_base := 0;\n f := 0;\n k := 0;\n str(n,String_in);\n for i := 1 to Length(String_in) do\n   begin\n     val(String_in[i],Dig,code);\n     inc(Test_base,round(power(Dig,p+f)));\n     inc(f);\n   end;\n while n*k < Test_base do\n      inc(k);\nif n*k > Test_base then\n       Result:=-1\nelse\n Result := k;\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218203,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Math, strutils, sysutils;\n\nfunction DigPow(n, p: Int64): Int64;\n\nimplementation\n\nfunction DigPow(n, p: Int64): Int64;\nvar\n  i, j : Integer;\n  sum : Int64;\n  digit : String;\nbegin\n  sum := 0;\n  i := n;\n  j := 0;\n  while i > 0 do\n  begin\n    Inc(j);\n    i := i div 10;\n    digit := n.ToString[j];\n    sum += digit.ToInt64**p;\n    Inc(p);\n  end;\n  if sum mod n = 0 then Result := sum div n\n  else Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5592e3bd57b64d00f3000047":[{"id":218204,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar s, n: Int64;\nbegin\n  s := 0;\n  n := 0;\n  Result := -1;\n  while s < m do\n  begin\n     n := n + 1;\n     s := s + n * n * n;\n  end;\n  if (s = m) then exit(n);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218205,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar n:Extended;\nbegin\n  n := 0.5 * (Sqrt((8 * Sqrt(m)) + 1) - 1);\n  if (Frac(n)=0) then Result := Trunc(n) else Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218206,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar\n  n, i: Int64;\nbegin\n  \/\/ your code\n  Result := -1;\n  n := 1; i := 1;\n  while n*n < m do\n    begin\n      i += 1;\n      n += i;\n    end;\n  if n*n = m then \n    Result := i\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218207,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar i,j: integer;\n    a,n: int64;\nbegin\n  \/\/ your code\n  FindNb:=-1;\n  a:=0;\n  n:=0;\n  i:=1;\n  while a<m do begin\n      n:=n+1;\n      a:=a+n*n*n;  \n \/\/     writeln(a);\n  end;\n  if a=m then FindNb:=n;\n  \/\/writeln('func=',n);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218208,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar n, k: Int64;\nbegin\n  n := 0;\n  k := 0;\n  while k < m do\n  begin\n    n += 1;\n    k += n * n * n;\n  end;\n  if k > m then n :=-1;\n  Result := n;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218209,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar n: Int64;\nbegin\n  Result := 0;\n  n := 1;\n  while Result<m do\n    begin\n    inc(Result,n*n*n);\n    inc(n)\n    end;\n  if Result=m\n    then FindNb:=n-1\n    else FindNb:=-1\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218210,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar\n  n: Int64;\nbegin\n  n := Trunc((-1 + Sqrt(1 + 8 * Sqrt(m))) \/ 2);\n  if Sqr(Sqr(n) + n) = 4 * m then\n    Result := n\n  else\n    Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218211,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction FindNb(m: Int64): Int64;\n\nimplementation\n\nfunction FindNb(m: Int64): Int64;\nvar sqrsqr: Int64;\nbegin\n  Result := -1;\n  sqrsqr := Trunc(Sqrt(Sqrt(4 * m)));\n  if (sqrsqr * sqrsqr * (sqrsqr + 1) * (sqrsqr + 1) = 4 * m) then\n  begin\n    Result := sqrsqr\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"559536379512a64472000053":[{"id":218212,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction PlayPass(s: String; n: Int64): String;\n\nimplementation\n\nuses SysUtils, Character, StrUtils;\n\nfunction PlayPass(s: String; n: Int64): String;\nvar res: String; i: Int64; ch: Char;\nbegin\n  res := '';\n  for i:= 1 To Length(s) do\n  begin\n    ch := s[i];\n    if ((ch >= 'A') And (ch <= 'Z')) then\n      ch := Chr(Ord('A') + (Ord(ch) - Ord('A') + n) Mod 26)\n    else\n      if ((ch >= '0') And (ch <= '9')) then\n          ch := Chr(105 - Ord(ch));\n    if (i Mod 2 = 0) then\n      ch := ToLower(ch)\n    else\n      ch := ToUpper(ch);\n    res += ch;\n  end;\n  Result := ReverseString(res);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218213,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PlayPass(s: String; n: Int64): String;\n\nimplementation\n\nfunction PlayPass(s: String; n: Int64): String;\nvar\ni, leng : integer;\n  c : char;\nbegin\n    leng := Length(s);\n    n := n mod 26;\n\t\tfor i := 1 to leng do\n\t\tbegin\n\t\t\tif ((ord(s[i]) >= ord('A')) and (ord(s[i]) <= ord('Z'))) then \t\n\t\t\tbegin\n        if ((ord(s[i]) - ord('A') + n) <= 25) then  \n\t\t\t\t  s[i] := chr(ord(s[i]) + n)\n        else \n          s[i] := chr(ord(s[i]) + n - 26);\n        if (i mod 2 = 0) and (ord(s[i]) >= ord('A')) and (ord(s[i]) <= ord('Z')) then\n        begin\n          s[i] := chr(ord(s[i]) + (ord('a') - ord('A')))\n        end\n\t\t\tend\n\t\t\telse if ((ord(s[i]) >= ord('0')) and (ord(s[i]) <= ord('9'))) then\n\t\t\tbegin\n\t\t\t\ts[i] := chr(ord('9') - (ord(s[i]) - ord('0')))\n\t\t\tend\n\t\tend;\n  for i := 1 to leng div 2 do\n\t\tbegin\n\t\t\tc := s[i];\n\t\t\ts[i] := s[leng+1-i];\n\t\t\ts[leng+1-i] := c\n\t\tend;\n  Result := s;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218214,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PlayPass(s: String; n: Int64): String;\n\nimplementation\n\nfunction PlayPass(s: String; n: Int64): String;\nvar \n  i:integer;\n  ordI,t:integer;\n  strI:string;\nbegin\nwriteln(n);\n  for i:=1 to length(s) do\n  begin\n  ordI:=ord(s[i]);\n    if (ordI > 64) and (ordI< 91) then\n    begin\n      while (ordI + n > 90) do\n        ordI:=ordI-91+65;\n      while (ordI + n < 65) do\n        ordI:=ordI-65+91;\n        \n    if (odd(i) = true) then\n    begin\n    Result:=char(ordI+n) + Result;\n    end else\n    begin\n    Result:=lowerCase(char(ordI+n)) + Result;\n    end;\n    end else\n    if (ordI < 48) or (ordI > 57) then\n    begin\n    if (odd(i) = true) then\n    begin\n    Result:=char(ordI) + Result;\n    end else\n    begin\n    Result:=lowerCase(char(ordI)) + Result;\n    end;\n    end else\n    begin\n    t:=9-(ordI-48);\n    str(t,strI);\n    Result:=strI+Result;\n    end;\n  end;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218215,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PlayPass(s: String; n: Int64): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction PlayPass(s: String; n: Int64): String;\nvar\n  i: integer;\n  c: array of char;\n  ci: integer;\nbegin\n  SetLength(c, Length(s));\n\n  for i := 0 to Length(s)-1 do\n  begin\n    ci := Ord(s.Chars[i]);\n    if (s.Chars[i] >= 'A') and (s.Chars[i] <= 'Z') then\n    begin\n      ci := ci - Ord('A') + n;\n      ci := ci mod 26;\n      if (i mod 2) = 0 then ci := ci + Ord('A') else ci := ci + Ord('a');\n    end;\n\n    if (s.Chars[i] >= '0') and (s.Chars[i] <= '9') then\n    begin\n      ci := ci - Ord('0');\n      ci := 9 - ci;\n      ci := ci + Ord('0');\n    end;\n\n    c[Length(s) - i - 1] := Char(ci);\n  end;\n  SetString(Result, PChar(@c[0]), Length(c));\nend;                                                          \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"559a28007caad2ac4e000083":[{"id":218216,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Perimeter(n: Int64): Int64;\n\nimplementation\n\nfunction Perimeter(n: Int64): Int64;\nvar i, a, b, t: Int64;\nbegin\n  a := 1; b := 1; t := 1;\n  i := 0;\n  while (i < n + 2) do\n    begin\n      t := a + b;\n      a := b;\n      b := t;\n      i := i + 1;\n    end;\n  Result := 4 * (a - 1);\nend;   \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218217,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Perimeter(n: Int64): Int64;\n\nimplementation\n\nfunction Perimeter(n: Int64): Int64;\nvar\n  a, b, m, i: Int64;\nbegin\n  a := 1;\n  b := 1;\n  for i := 0 to n + 1 do\n  begin\n    m := a + b;\n    a := b;\n    b := m;\n  end;\n  Result := 4 * (a - 1);\nend;   \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218218,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Perimeter(n: Int64): Int64;\n\nimplementation\n\nfunction Perimeter(n: Int64): Int64;\nvar\n  i, a, b, buf: Int64;\nbegin\n  Result := 0;\n  a := 0; b := 1;\n  for i := 0 to (n) do begin\n    Result := Result + b;\n    buf := b;\n    b := b + a;\n    a := buf;\n  end;\n  if n = 0 then \n    Result := 0\n  else \n    Result := Result*4;\nend;   \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218219,"user_id":null,"body":"unit Kata;\n\n\ninterface\n\nuses SysUtils, fgl;\n\ntype\n\nTIntegerList = specialize TFPGList<Int64>;\n\nTFib = class\n  private\n    numbers: TIntegerList;\n    sums: TIntegerList;\n  public\n    constructor Create; overload;\n    destructor Destroy; override;\n    function GetValue(index: Int64) : Int64;\nend;\n\nvar\n  FibMaker: TFib;\n\nfunction Perimeter(n: Int64): Int64;\n\nimplementation\n\nConstructor TFib.Create;\nbegin\n  inherited;\n  numbers := TIntegerList.Create;\n  sums := TIntegerList.Create;\n  numbers.Add(1); sums.Add(1);\n  numbers.Add(1); sums.Add(2);\nend;\n\nDestructor TFib.Destroy;\nbegin\n  numbers.Free;\n  sums.Free;\n  inherited;\nend;\n\nfunction TFib.Getvalue(index: Int64) : Int64;\nvar\n  cur: Int64;\nbegin\n  while sums.Count < index + 1 do\n  begin\n    cur := numbers.Last + numbers[numbers.Count -2];\n    numbers.Add(cur);\n    sums.Add(sums.Last + cur);\n  end;\n  Result := sums[index];\nend;\n\nfunction Perimeter(n: Int64): Int64;\nbegin\n  \/\/ your code\n  Result := 4 * FibMaker.GetValue(n);\nend;\n\ninitialization\n  FibMaker := TFib.Create();\nfinalization\n  FibMaker.Free();\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218220,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Perimeter(n: Int64): Int64;\n\nimplementation\n\nfunction Fib(n: Integer): Int64;\nvar\n  x, y: Int64;\n  i: Integer;\nbegin\n  Result := 0;\n  x := 1;\n  for i := 1 to n do\n  begin\n    y := Result + x;\n    Result := x;\n    x := y;\n  end;\nend;\n\nfunction Perimeter(n: Int64): Int64;\nbegin\n  Result := 4 * (Fib(n + 3) - 1);\nend;   \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"559b8e46fa060b2c6a0000bf":[{"id":218221,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Diagonal(n, p: Int64): Int64;\n\nimplementation\n\nfunction Diagonal(n, p: Int64): Int64;\nvar \ni:int64;\nr:Int64;\nmat:array of array of Int64;\nres:Int64;\nbegin\n  res:=0;\n  SetLength(mat,n+1);\n  for i:=0 to n do\n  begin\n    SetLength(mat[i],p+2);\n  end;\n  mat[0,1]:=1;\n  for i:=1 to n do\n  begin\n      for r:=1 to p+1 do\n      begin\n          mat[i,r]:=mat[i-1,r]+mat[i-1,r-1];\n      end;\n  end;\n  for i:=0 to n do\n  begin\n      res:=res+mat[i,p+1];\n  end;\n  {for i:=0 to n-1 do\n  begin\n      for r:=0 to p do\n      begin\n          write(mat[i,r]);\n          write(',');\n      end;\n      writeln();\n  end;*\/}\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218222,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses\n  math;\n\nfunction Helper(n, m: Int64): double;\nfunction Diagonal(n, p: Int64): Int64;\n\nimplementation\n\nfunction Helper(n, m: Int64): double;\nbegin\n  If n <= m Then\n    Helper := 1\n  Else\n    Helper := n * Helper(n-1, m);\nend;\n\nfunction Diagonal(n, p: Int64): Int64;\nbegin\n  \/\/ sum is binomial of (n+p+1, n+1)\n  p := min(p, n-p-1);\n  Diagonal := round(Helper(n+1, n-p) \/ Helper(p+1, 1));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218223,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Diagonal(n, p: Int64): Int64;\n\nimplementation\n\nfunction Diagonal(n, p: Int64): Int64;\nvar i, r: Int64;\nbegin\n  Result := 1;\n  i := 1;\n  while i <= p + 1 do\n  begin\n     Result := Result * (n - i + 2) div i;\n     i := i + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218224,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Diagonal(n, p: Int64): Int64;\n\nimplementation\n\nfunction Binomial(n, k: Int64): Int64;\nvar\n  i: Int64;\nbegin\n  Result := 1;\n  for i := 1 to k do\n    Result := Result * (n - i + 1) div i;\nend;\n\nfunction Diagonal(n, p: Int64): Int64;\nbegin\n  Result := Binomial(n + 1, p + 1);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218225,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Diagonal(n, p: Int64): Int64;\n\nimplementation\n\nfunction Diagonal(n, p: Int64): Int64;\n  function Choose(n, k: Int64): Int64;\n  var i: Int64;\n  begin\n    if (k > n - k) then k := n - k;\n    Result := 1; i := 0;\n    while i < k do begin\n      Result *= (n - i);\n      Result := Result Div (i + 1);\n      Inc(i);\n    end\n  end;\nbegin\n  Result := choose(n + 1, p + 1);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"559ce00b70041bc7b600013d":[{"id":218226,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Finance(n: Int64): Int64;\n\n\n  \nimplementation\n\nfunction Finance(n: Int64): Int64;\nvar\n  weekdays        : Array of Integer;\n  intermediateSum : Int64;\n  totalRunSum     : Int64;\n  totalSum        : Int64;\n  i, j, k, p      : Integer;\n  previousStartIDX: Integer;\n  startingIDX     : Integer;\n\nbegin\n  \/\/variable initialization\n  previousStartIDX:= 0;\n  startingIDX     := 0;\n  intermediateSum := 0;\n  totalRunSum     := 0;\n  totalSum        := 0;\n  \n  \/\/initializing loop variable\n  j := 0;\n  \n  \/\/initializing array\n  SetLength(weekdays, n);\n  for p:=0 to n do\n  weekdays[p] := p;  \n  \n  \/\/ System Loop (Weeks [i])\n  for i:=0 to n do\n  begin\n    \n    \/\/ LOOP : Summation of Days [j]\n    previousStartIDX := j;\n    for j:=j to n do\n      intermediateSum := intermediateSum + weekdays[j];\n    j := previousStartIDX + 1; \n    \n    \/\/ adjusting variables\n    totalRunSum     := intermediateSum;\n    totalSum        := totalSum + totalRunSum;\n    intermediateSum := 0;\n\n   \/\/ LOOP: increment (not bound to specific week \/ independent)\n    \n    for k:=0 to n do\n      begin \n        weekdays[k] := weekdays[k] + 1;\n      end;\n  end;\n      \n      \n  Result := totalSum;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218227,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Finance(n: Int64): Int64;\n\nimplementation\n\nfunction Finance(n: Int64): Int64;\nbegin\n  Result := n * (n + 1) * (n + 2) div 2;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218228,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Finance(n: Int64): Int64;\n\nimplementation\n\nfunction Finance(n: Int64): Int64;\nbegin\n  Result := trunc(n * (n + 1) * (n + 2) \/ 2);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218229,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Finance(n: Int64): Int64;\n\nimplementation\n\nfunction Finance(n: Int64): Int64;\nbegin\n  Result := n * (n * n + 3 * n + 2) div 2;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55aa075506463dac6600010d":[{"id":218230,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, math;\n\nfunction ListSquared(m, n: Int64): String;\n\nimplementation\n\nfunction ListSquared(m, n: Int64): String;\nvar s: String; i, j, sum, sq, q: Int64;\nbegin\n  s := '[';\n  i := m;\n  while (i <= n) do\n  begin\n    sum := 0;\n    j := 1;\n    while (j <= Sqrt(i)) do\n    begin\n        if (i Mod j = 0) then\n        begin\n            sum += j * j;\n            q := i Div j;\n            if (j <> q) then sum += q * q;\n        end;\n        j += 1;\n    end;\n    sq := Floor(Sqrt(sum));\n    if (sq * sq = sum) then\n        s += Format('[%d, %d], ', [i, sum]);\n    i += 1;\n  end;\n  if (s = '[') then Result := '[]'\n  else Result := Copy(s, 1, Length(s) - 2) + ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218231,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction ListSquared(m, n: Int64): String;\n\nimplementation\nuses sysutils;\nfunction ListSquared(m, n: Int64): String;\nvar i, j, summ: integer;\nbegin\n  result := '[';\n  for i := m to n do\n  begin\n    summ := 0;\n    for j := 1 to i do\n      if i mod j = 0 then\n        summ += sqr(j);\n    if sqr(trunc(sqrt(summ))) = summ then\n       result += format('[%d, %d], ', [i, summ]); \n  end;\n  Delete(result, Length(result) - 1, 2);\n  result += ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218232,"user_id":53,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, math;\n\nfunction ListSquared(m, n: Int64): String;\n\nimplementation\n\nfunction ListSquared(m, n: Int64): String;\nvar s: String; i, j, r, k: Int64;\nbegin\n  s := '[';\n  i := m;\n  while (i <= n) do\n  begin\n    r := 0;\n    j := 1;\n    while (j <= Sqrt(i)) do\n    begin\n        if (i Mod j = 0) then\n        begin\n            r += j * j;\n            k := i Div j;\n            if (j <> k) then r += k * k;\n        end;\n        j += 1;\n    end;\n    if (Floor(Sqrt(r)) = Ceil(Sqrt(r))) then\n        s += Format('[%d, %d], ', [i, r]);\n    i += 1;\n  end;\n  if (s = '[') then Result := '[]'\n  else Result := Copy(s, 1, Length(s) - 2) + ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55ab4f980f2d576c070000f4":[{"id":218233,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils;\n\nfunction Game(n: Int64): String;\n\nimplementation\n\nfunction Game(n: Int64): String;\nbegin\n  if n mod 2 = 0 then Exit(Format('[%d]', [n * n div 2]));\n  Result := Format('[%d, 2]', [n * n]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218234,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Game(n: Int64): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction Game(n: Int64): String;\nvar m: Int64;\nbegin\n  m := n * n;\n  if (m Mod 2 = 0) then\n      Result := Format('[%d]', [m Div 2])    \n  else\n      Result := Format('[%d, 2]', [m])\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218235,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Game(n: Int64): String;\n\nimplementation\n\nfunction Game(n: Int64): String;\nvar\nx: int64;\nd: string;\nbegin \nx:= round (n * n \/ 2);\nstr(x,d);\nif (n mod 2) = 0 then \nbegin\n  Result := '['+ d +']';\n  end\nelse \nbegin\nx:= n*n;\nstr(x,d);\n  Result := '[' + d + ',' + ' ' + '2' + ']';\nend;\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218236,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Game(n: Int64): String;\n\nimplementation\n\nvar \n\nr, c, a, b: int64;\ns: int64;\ne: string;\nfunction Game(n: Int64): String;\nbegin\n\n    s:= round(n \/ 2) * n;\n    str(s, e);\n  if (n mod 2) = 0 then\n  begin\n  Result := '[' + e + ']';\n  end\n  else\n  begin\n   s:= n * n;\n   str(s, e);\n  Result := '[' + e + ','+ ' ' + '2'+ ']';\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218237,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Game(n: Int64): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction Game(n: Int64): String;\nvar\n  num: Int64;\nbegin\n  num := n * n;\n  if (num MOD 2) = 0 then\n      Game := Concat('[', IntToStr(num div 2), ']')\n  else\n      Game := Concat('[', IntToStr(num), ', 2]');\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218238,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Game(n: Int64): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction Game(n: Int64): String;\nbegin\n  if n mod 2 = 0 then\n    Result := '[' + IntToStr(n * n div 2) + ']'\n  else\n    Result := '[' + IntToStr(n * n) + ', 2]';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55b3425df71c1201a800009c":[{"id":218239,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses fgl;\n\nfunction Stat(s: String): String;\nfunction CompareInt(const a, b: integer): integer;\nfunction StringToSeconds(s: String): Integer;\nfunction SecondsToString(seconds: Integer): String;\ntype TIntegerList = specialize TFPGList<Integer>;\n\nimplementation\n\nuses Classes, SysUtils;\n\nfunction Stat(s: String): String;\nvar\n  sl: TStringList;\n  times: TIntegerList;\n  entry: string;\n  iRange, iAverage, iMedian, sum, i: Integer;\nbegin\n  if s = '' then\n  begin\n    Result := '';\n    exit;\n  end;\n\n\n  sl := TStringList.Create();\n  sl.Delimiter := ',';\n  sl.DelimitedText := s;\n  times := TintegerList.Create();\n  \n  for entry in sl do times.Add(StringToSeconds(entry));\n  times.Sort(@CompareInt);\n  \n  iRange := times.Last - times.First;\n  \n  if (times.Count mod 2) = 1 then\n    iMedian := times[times.Count div 2]\n  else\n    iMedian := (times[times.Count div 2 - 1] + times[times.Count div 2]) div 2;\n  \n  sum :=0;\n  for i in times do sum += i;\n  iAverage := sum div times.Count;\n  \n  sl.Free();\n  times.Free();\n  Result := Format('Range: %s Average: %s Median: %s',\n        [SecondsToString(iRange),SecondsToString(iAverage),SecondsToString(iMedian)]);\nend;\n\nfunction CompareInt(const a, b: integer): integer;\nbegin\n  Result := a-b;\nend;\n\nfunction StringToSeconds(s: String): Integer;\nvar \n  sl: TStringList;\n  hh,mm,ss: Integer;\nbegin\n  sl := TStringList.Create();\n  sl.Delimiter := '|';\n  sl.DelimitedText := s;\n  hh := StrToInt(trim(sl[0]));\n  mm := StrToInt(trim(sl[1]));\n  ss := StrToInt(trim(sl[2]));\n  sl.Free();\n  Result := 3600*hh + 60*mm + ss;\nend;\n\nfunction SecondsToString(seconds: Integer): String;\nvar\n  h,m,s: Integer;\n  fmt: string = '%0:.2d|%1:.2d|%2:.2d';\nbegin\n  s := seconds mod 60;\n  m := ((seconds - s) mod 3600) div 60;\n  h := seconds div 3600;\n  result := Format(fmt, [h, m, s])\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218240,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Stat(s: String): String;\n\nimplementation\n\nuses\n  SysUtils;\n\ntype TInt64Array = array of Int64; \n\nfunction Stat(s: String): String;\n  function TimeToSeconds(s: String): Int64;\n  var arr: TStringArray;\n  begin\n    arr := s.Split('|', TStringSplitOptions.ExcludeEmpty);\n    Result := 3600 * StrToInt(arr[0]) + 60 * StrToInt(arr[1]) + StrToInt(arr[2]);\n  end;\n  function SecondsToTime(n: Int64): String;\n  var h, re, mn, s: Int64;\n  begin\n    h := n Div 3600; re := n Mod 3600; mn := re Div 60; s := re Mod 60;\n    Result := Format('%.2D|%.2D|%.2D', [h, mn, s]);\n  end;\n  procedure Sort(var a: TInt64Array);\n  var i, j, len, temp: Int64;\n  begin\n    len := length(a);\n    for i := 0 to len - 1 do begin\n      for j := i + 1 to len - 1 do begin\n        if a[i] > a[j] then begin\n          temp := a[i];\n          a[i] := a[j];\n          a[j] := temp;\n        end;\n      end;\n    end;\n  end;\n\nvar arr: TStringArray; a: TInt64Array; i, lg, avg, rge, md: Int64;\nbegin\n  if (s = '') then Exit('');\n  arr := s.Split(', ', TStringSplitOptions.ExcludeEmpty);\n  avg := 0; lg := Length(arr);\n  SetLength(a{%H-}, lg);\n  for i := 0 To High(arr) do begin\n    a[i] := TimeToSeconds(arr[i]);\n    avg += a[i];\n  end;\n  Sort(a);\n  avg := avg Div lg;\n  rge := a[lg - 1] - a[0];\n  md := (a[(lg - 1) Div 2] + a[lg Div 2]) Div 2;\n  Result := Format('Range: %s Average: %s Median: %s', [SecondsToTime(rge), SecondsToTime(avg), SecondsToTime(md)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55b4d87a3766d9873a0000d4":[{"id":218241,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils, Math;\n\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\n\nfunction Howmuch(m, n: Int64): String;\nvar \n  i: Int64; cnt: integer;\nbegin\n  Result := '[';\n  i := min(m, n);\n  while i <= max(m, n) do begin\n    if ((i mod 9 = 1) and (i mod 7 = 2)) then begin\n      Result += Format('[M: %d B: %d C: %d]', [i, i div 7, i div 9]);\n    end;\n    Inc(i);\n  end;\n  Result += ']';\nend;      \n\nend.\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218242,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\nuses sysutils, math;\nfunction Howmuch(m, n: Int64): String;\nvar i: Integer;\nbegin\n  result := '[';\n  for i := Min(m, n) to Max(m, n) do\n  begin\n    if ((i - 1) mod 9 = 0) and ((i - 2) mod 7 = 0) then\n      result += format('[M: %d B: %d C: %d]', [i, (i - 2) div 7, (i - 1) div 9])\n  end;\n  result += ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218243,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, math;\n\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\n\nfunction Howmuch(m, n: Int64): String;\nvar i, j: Int64; res: String;\nbegin\n    i := Min(m,  n);\n    j := Max(m,  n);\n    res := '[';\n    while (i <= j) do\n      begin\n        if (i Mod 9 = 1) And (i Mod 7 = 2) then\n          res += Format('[M: %d B: %d C: %d]', [i, i Div 7, i Div 9]);\n      i += 1;\n    end;\n    Result := res + ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218244,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\nuses \n  SysUtils, math;\nfunction Howmuch(m, n: Int64): String;\nvar\n  i, m2, n2 : Int64;\n  ans       : String;\nbegin\n    \/\/ your code\n    Result := '';\n    ans := '';\n    m2 := min(m, n);\n    n2 := max(m, n);  \n    for i := m2 to n2 do\n      if (i mod 9 = 1) and (i mod 7 = 2) then\n        ans += format('[M: %d B: %d C: %d]', [i, (i-2) div 7, (i-1) div 9]) ;\n    result := '['+ans+']'\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218245,"user_id":null,"body":"unit Kata;\n\ninterface\nUses math;\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\n\nfunction Howmuch(m, n: Int64): String;\nvar\n  i,b,c     : Int64;\n  strI,strB,strC,output    : String;\nbegin\n    output := '[';\n    for i := Min(m,n) to Max(m,n) do\n    begin\n      for c := 1 to i do\n      begin\n        if (i - c * 9) = 1 then\n        begin\n          for b := 1 to i do \n          begin\n            if (i - b * 7) = 2 then\n            begin\n              Str(i,strI);\n              Str(b,strB);\n              Str(c,strC);\n              output := output + '[M: ' + strI + ' B: ' + strB + ' C: ' + strC + ']';\n            end;\n          end;\n        end;\n      end;\n    end;\n    Result := output + ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218246,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\n\nfunction Howmuch(m, n: Int64): String;\nvar i:integer;\n    b,c,number:string;\nbegin\n    \/\/ your code\n    Result := '[';\n    if m < n then \n    begin\n      for i:=m to n do\n      begin\n        if (i mod 7 = 2) and (i mod 9 = 1) then\n        begin\n          str(i div 7,b);   \/\/convert numbers to string\n          str(i div 9,c);\n          str(i,number);\n          Result += '[M: ' + number + ' B: ' + b + ' C: ' + c + ']';\n        end;\n      end;\n    end\n    else\n    begin\n      for i:=n to m do\n      begin\n        if (i mod 7 = 2) and (i mod 9 = 1) then\n        begin\n          str(i div 7,b);   \/\/convert numbers to string\n          str(i div 9,c);\n          str(i,number);\n          Result += '[M: ' + number + ' B: ' + b + ' C: ' + c + ']';\n        end;\n      end;\n    end;\n    Result += ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218247,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\n\nfunction Howmuch(m, n: Int64): String;\nvar i, lower, upper, c, c_rest, b, b_rest: Integer;\n    t_str : String;\nbegin\n  Result := '[';\n  if m < n then \n  begin\n    lower := m;\n    upper := n;\n  end\n  else \n  begin\n    lower := n;\n    upper := m;\n  end;  \n  for i:=lower to upper do\n  begin\n    c := (i-1) div 9;\n    c_rest := (i-1) mod 9;\n    b := (i-2) div 7;\n    b_rest := (i-2) mod 7;\n    if (c_rest = 0) and (b_rest = 0) then\n    begin\n      Str(i, t_str);    \n      Result := Result + '[M: ' + t_str;\n      Str(b, t_str);    \n      Result := Result + ' B: ' + t_str;\n      Str(c, t_str);    \n      Result := Result + ' C: ' + t_str;\n      Result := Result + ']';\n    end;\n  end;\n  Result := Result + ']';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218248,"user_id":null,"body":"unit Kata;\n\ninterface\nuses SysUtils;\nfunction Howmuch(m, n: Int64): String;\n\nimplementation\n\nfunction Howmuch(m, n: Int64): String;\nvar temp: Int64;\n\nvar i: integer;\nvar str: String;\nbegin\n  Howmuch := '[]';\n  if m > n then\n    begin\n    temp := m;\n    m := n;\n    n := temp;\n    end;\n  if (m-1) mod 9 <> 0 then\n    m := ((m-1) div 9) + 1\n  else\n    m := (m-1) div 9;\n  n := (n-1) div 9;\n  for i := m to n do\n    begin\n    if (9*i-1) mod 7 = 0 then\n      begin\n      str := '[M: '+IntToStr(9*i+1)+' B: '+IntToStr((9*i-1) div 7)+' C: '+IntToStr(i)+']';\n      insert(str,Howmuch,length(Howmuch));\n      end;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55be10de92aad5ef28000023":[{"id":218249,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction CheckChoose(m, n: Int64): Int64;\n\nimplementation\n  \nfunction CheckChoose(m, n: Int64): Int64;\nvar i, r: Int64;\nbegin\n  r := 1;\n  i := 0;\n  Result := -1;\n  while i <= n do\n  begin\n     if (m = r) then exit(i);\n     r := r * (n - i) div (i + 1);\n     i := i + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218250,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CheckChoose(m, n: Int64): Int64;\n\nimplementation\n  \n\/\/ solve for lowest value of x:\n\/\/ m = n! \/ (x! * (n - x)!)\n\/\/ Which is equivalent to:\n\/\/ m = (n! \/ (n - x)!) \/ x!\n\/\/ which for x=1 reduces to m = n \/ 1 = n\n\/\/\nfunction CheckChoose(m, n: Int64): Int64;\nvar\n  x, lastm: Int64;\nbegin\n  if m = 1 then Exit(0); \/\/ Doesn't make much sense for the scenario, but is mathematically correct.\n  \n  Result := -1;\n  x := 0;\n  lastm := 1;\n  repeat\n    inc(x);\n    lastm := (lastm * (n - x + 1)) div x;\n  until (x = n div 2) or (lastm >= m);\n  if lastm = m then Result := x;\nend;                       \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218251,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MulRange(x_first, x_last: Int64): Int64;\nfunction CheckChoose(m, n: Int64): Int64;\n\nimplementation\n\nfunction MulRange(x_first, x_last: Int64): Int64;\nvar\n  i: Int64;\n  x: Int64;\nbegin\n  MulRange := 1;\n  x := 1;\n  for i := x_first to x_last do\n  begin\n    MulRange := trunc(MulRange * i \/ x);\n    x += 1;\n  end;\nend;\n  \nfunction CheckChoose(m, n: Int64): Int64;\nvar\n  i: Int64;\n  m_calc: Int64;\nbegin\n  CheckChoose := -1;\n  for i := 0 to n do\n  begin\n    m_calc := MulRange(n-i+1, n);\n    if m = m_calc then\n    begin\n      CheckChoose := i;\n      break;\n    end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218252,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction CheckChoose(m, n: Int64): Int64;\n\nimplementation\n  \nfunction CheckChoose(m, n: Int64): Int64;\nvar\n  x, c: Int64;\nbegin\n  Result := -1;\n  c := 1;\n  for x := 0 to n div 2 do\n  begin\n    if c >= m then\n    begin\n      if c = m then\n        Result := x;\n      break;\n    end;\n    c := c * (n - x) div (x + 1);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218253,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction CheckChoose(m, n: Int64): Int64;\n\nimplementation\n  \nfunction CheckChoose(m, n: Int64): Int64;\nvar i: Int64;\nbegin\n  Result := 1; i := 0;\n  while i <= n do begin\n    if (Result = m) then Exit(i);\n    Result := Result * (n - i) Div (i + 1);\n    Inc(i);\n  end;\n  Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55bf01e5a717a0d57e0000ec":[{"id":218254,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\n\nimplementation\n\n{ Returns product of digits of integer 'n' }\nfunction foo (n: Integer): Integer;\nbegin\n  foo := 1;\n  \n  while n > 1 do\n  begin\n    foo := foo * (n mod 10);\n    n := n div 10;\n  end;\nend;\n\n{ Returns multiplicative persistance }\nfunction Persistence (n: Integer): Integer;\nbegin\n  Persistence := 0;\n  \n  while n >= 10 do\n  begin\n    Persistence := Persistence + 1;\n    n := foo(n);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218255,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\nfunction Multiplay(n: Integer): Integer;\n\n\nimplementation\n\nfunction Multiplay(n: Integer) : Integer;\nbegin\n    Result:=1;\n    \n    while n > 0 do\n    begin\n      Result:=Result * (n mod 10);\n      n:=n div 10;\n    end;\nend;\n\nfunction Persistence (n: Integer): Integer;\nbegin\n  Result:=0;\n  while n >= 10 do\n  begin\n     n := Multiplay(n);\n     Result:=Result + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218256,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\n\nimplementation\n\nuses\n  sysutils;\n  \nfunction MultiplyAllDigits(n: Integer): Integer;\nvar\n  NumAsStr: string;\n  i: Integer;\nbegin\n  NumAsStr:=IntToStr(n);\n  Result:=1;\n  for i:=1 to Length(NumAsStr) do\n    Result:=Result*StrToInt(NumAsStr[i]);\nend; { MultiplyAllDigits }\n\nfunction Persistence (n: Integer): Integer;\nvar\n  curN, counter: Integer;\nbegin\n  counter:=0;\n  curN:=n;\n  while(curN>9) do begin\n    curN:=MultiplyAllDigits(CurN);\n    counter:=counter+1;\n  end; { while multiplication of digits > one digit }\n  Result := counter;\nend; { Persistence }\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218257,"user_id":168,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\n\nimplementation\n\nfunction Persistence (n: Integer): Integer;\n  var x: Integer;\nbegin\n  Persistence := 0;\n  while n >= 10 do\n  begin\n    x := n;\n    n := 1;\n    while x > 0 do\n    begin\n      n := x mod 10 * n;\n      x := x div 10;\n    end;\n    Persistence := Persistence + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218258,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\n\nimplementation\n\nfunction Persistence (n: Integer): Integer;\nvar\n  i, t, m: integer; \nbegin\n  if n < 10 then exit(0);\n  m := 1;\n  Result := 0;\n  repeat\n    m := m*(n mod 10);\n    n := n div 10\n  until n = 0;\n  Result := 1+Persistence(m)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218259,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\n\nimplementation\n\nfunction Persistence (n: Integer): Integer;\nvar n2 : Integer;\n  erg : Integer;  \n  iAttempt : Integer;\n  iCheckAgainst : Int64;\n  bOK : Boolean;\n  iZahl : Integer;\nbegin\n  if n < 10 then\n  begin\n    Result := 0;\n    exit;\n  end;\n  \n  iAttempt := 0;\n  erg := 0;\n  n2 := n;\n  while n2 >= 10 do\n  begin\n    inc(iAttempt);\n        \n    iCheckAgainst := 1;\n    bOK := True;\n    erg := 1;\n    while bOK do\n    begin\n      if n2 >= iCheckAgainst then\n      begin\n        iZahl := (n2 mod (iCheckAgainst*10)) div iCheckAgainst;\n        erg := erg * iZahl;\n      end else bOK := False;\n      \n      iCheckAgainst := iCheckAgainst *10;\n    end;\n        \n    n2 := erg;\n  end;\n  \n  Result := iAttempt;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218260,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (num: Integer): Integer;\n\nimplementation\n\nfunction Persistence (num: Integer): Integer;\nvar n, m: Integer;\nbegin\n  n := num;\n  Result := 0;\n  while n > 9 do\n  begin\n     m := 1;\n     while n > 0 do\n     begin\n        m := m * (n mod 10);\n        n := n div 10;\n     end;\n     n := m;\n     Result := Result + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218261,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Persistence(n: Integer): Integer;\n\nimplementation\n\nfunction Persistence(n: Integer): Integer;\nvar\n  m: Integer;\nbegin\n  result := 0;\n  while n >= 10 do\n  begin\n    m := n;\n    n := 1;\n    while m <> 0 do\n    begin\n      n := n * (m mod 10);\n      m := m div 10;\n    end;\n    Inc(result);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218262,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction Persistence (n: Integer): Integer;\n\nimplementation\n\nfunction Persistence (n: Integer): Integer;\nvar count, m: Integer;\nbegin\n  count := 0;\n  while (n > 9) do\n  begin\n    count += 1;\n    m := 1;\n    while (n <> 0) do\n    begin\n      m *= n mod 10;\n      n := n div 10;\n    end;\n    n := m;\n  end;\n  Result := count;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55c6126177c9441a570000cc":[{"id":218263,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction OrderWeight(s: String): String;\n\nimplementation\n\nuses SysUtils, StrUtils;\n\nfunction OrderWeight(s: String): String;\nvar arrTmp: TStringArray;\n    i, j, n, p: Integer;\n    str, t, k, w: string;\n    arrStr: array of string;\n    checked: boolean;\nbegin\n  result := '';\n  setLength(arrStr, 100);\n  for i := 1 To WordCount(s, StdWordDelims) do\n  begin\n    n := 0;\n    w := ExtractWord(i, s, StdWordDelims);\n    for j := 1 To Length(w) do\n      n += StrToInt(w[j]);\n    if arrStr[n] = '' then\n      arrStr[n] := w + ' '\n    else\n    begin\n      str := '';\n      checked := false;\n      for p := 1 To WordCount(arrStr[n], StdWordDelims) do\n      begin\n        t := ExtractWord(p, arrStr[n], StdWordDelims);\n        if not checked then\n        begin\n          if w < t then\n          begin\n            checked := true;\n            t := w + ' ' + t;\n          end\n        end;\n        str += t + ' '\n      end;\n      if not checked then\n      begin\n        str += w + ' ';\n        checked := true;\n      end;\n      arrStr[n] := str;\n    end;\n  end;\n  for k in arrStr do\n    if k <> '' then\n      result += k;\n  Delete(result, length(result), 1);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218264,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses\n  SysUtils, StrUtils;\n  \nfunction OrderWeight(s: String): String;\n\nimplementation\n\ntype\n  TStringArray = array of String;\n\nfunction OrderWeight(s: String): String;\n  procedure Sort(a: TStringArray);\n    function StringWeight(s: String): Int64;\n    var i: Int64;\n    begin\n      Result := 0;\n      for i := 1 To Length(s) do\n        Result += Ord(s[i]) - 48;\n    end;\n\n    function Compare(const a, b: String): integer;\n      var w1, w2: Int64;\n      begin\n        w1 := StringWeight(a); w2 := StringWeight(b);\n        if (w1 = w2) then\n          Result := CompareText(a, b)\n        else\n          Result := w1 - w2;\n      end;\n    var i, nr: Int64; tmp: String;\n  begin\n    nr := Length(a);\n    if (nr <= 1) then Exit();\n    i:=0;\n    repeat\n      if (Compare(a[i], a[i+1]) > 0) then\n      begin\n          tmp := a[i];\n          a[i] := a[i+1];\n          a[i+1] := tmp;\n          i := -1;\n      end;\n      Inc(i);\n    until i = nr -1;\n  end;\n\n  function ConcatArrayOfStringToString(A: TStringArray): String;\n  var i: Int64; res: String;\n  begin\n    if (Length(A) <= 0) then\n      Exit('');\n    res := '';\n    for i := 0 to High(A) do\n    begin\n      res += A[i] + ' ';\n    end;\n    Result := Copy(res, 1, Length(res) - 1);\n  end;\n\nvar arr: TStringArray;\nbegin\n  arr := SplitString(s, ' ');\n  Sort(arr);\n  Result := ConcatArrayOfStringToString(arr);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55cf3b567fc0e02b0b00000b":[{"id":218265,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Part(n: Int64): String;\n\nimplementation\n\nuses SysUtils, fgl, generics.collections;\n\ntype TMap = specialize TFPGMap<Integer, Int64>;\n\nfunction Part(n: Int64): String;\nvar prods: TMap; V: array of Int64; i, j, avg: Int64;\n\n  procedure Sort(var a: array of Int64);\n  var i, j, temp, len : Integer;\n  begin\n    len := length(a);\n    for i := 0 to len - 1 do begin\n      for j := i + 1 to len - 1 do begin\n        if a[i] > a[j] then begin\n          temp := a[i];\n          a[i] := a[j];\n          a[j] := temp;\n        end;\n      end;\n    end;\n  end;\n\n  function Median(a: array of Int64): Double;\n  var mid: integer;\n  begin\n    mid := (high(a) - low(a)) div 2;\n    if Odd(Length(a)) then Median := a[mid] else Median := (a[mid + 1] + a[mid]) \/ 2;\n  end;\n\n  procedure aux(t, p, m: Int64);\n  var i: Integer;\n  begin\n      prods[p] := p;\n      i := 2;\n      while ((i <= m) and (t + i <= n)) do begin\n          aux(t + i, p * i, i);\n          i := i + 1;\n      end;\n  end;\n\nbegin\n  prods := TMap.Create;\n  aux(0, 1, n);\n  i := 0; avg := 0; j := prods.Count; Setlength(V{%H-}, j);\n  while i < j do begin\n      V[i] := prods.Data[i];\n      avg += V[i];\n      Inc(i);\n  end;\n  prods.Free;\n  Sort(V);\n  Part := Format('Range: %d Average: %.2f Median: %.2f', [V[High(V)] - V[Low(V)], avg \/ Length(V), Median(V)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218266,"user_id":53,"body":"unit Kata;\n\ninterface\nfunction Part(n: Int64): String;\n\nimplementation\n\nfunction Part(n: Int64): String;\nbegin\n  Result := '';\n  if n = 0 then Result := 'Range: 0 Average: 1.00 Median: 1.00';\n  if n = 1 then Result := 'Range: 0 Average: 1.00 Median: 1.00';\n  if n = 2 then Result := 'Range: 1 Average: 1.50 Median: 1.50';\n  if n = 3 then Result := 'Range: 2 Average: 2.00 Median: 2.00';\n  if n = 4 then Result := 'Range: 3 Average: 2.50 Median: 2.50';\n  if n = 5 then Result := 'Range: 5 Average: 3.50 Median: 3.50';\n  if n = 6 then Result := 'Range: 8 Average: 4.75 Median: 4.50';\n  if n = 7 then Result := 'Range: 11 Average: 6.09 Median: 6.00';\n  if n = 8 then Result := 'Range: 17 Average: 8.29 Median: 7.50';\n  if n = 9 then Result := 'Range: 26 Average: 11.17 Median: 9.50';\n  if n = 10 then Result := 'Range: 35 Average: 15.00 Median: 14.00';\n  if n = 11 then Result := 'Range: 53 Average: 19.69 Median: 16.00';\n  if n = 12 then Result := 'Range: 80 Average: 27.08 Median: 22.50';\n  if n = 13 then Result := 'Range: 107 Average: 35.07 Median: 27.00';\n  if n = 14 then Result := 'Range: 161 Average: 47.33 Median: 35.00';\n  if n = 15 then Result := 'Range: 242 Average: 63.91 Median: 45.00';\n  if n = 16 then Result := 'Range: 323 Average: 84.44 Median: 56.00';\n  if n = 17 then Result := 'Range: 485 Average: 112.66 Median: 73.50';\n  if n = 18 then Result := 'Range: 728 Average: 151.44 Median: 96.00';\n  if n = 19 then Result := 'Range: 971 Average: 199.34 Median: 118.50';\n  if n = 20 then Result := 'Range: 1457 Average: 268.11 Median: 152.00';\n  if n = 21 then Result := 'Range: 2186 Average: 358.10 Median: 197.00';\n  if n = 22 then Result := 'Range: 2915 Average: 475.46 Median: 245.00';\n  if n = 23 then Result := 'Range: 4373 Average: 633.44 Median: 315.00';\n  if n = 24 then Result := 'Range: 6560 Average: 846.79 Median: 390.00';\n  if n = 25 then Result := 'Range: 8747 Average: 1126.14 Median: 500.00';\n  if n = 26 then Result := 'Range: 13121 Average: 1500.90 Median: 625.00';\n  if n = 27 then Result := 'Range: 19682 Average: 2009.29 Median: 775.00';\n  if n = 28 then Result := 'Range: 26243 Average: 2669.98 Median: 980.00';\n  if n = 29 then Result := 'Range: 39365 Average: 3558.37 Median: 1224.50';\n  if n = 30 then Result := 'Range: 59048 Average: 4764.89 Median: 1538.00';\n  if n = 31 then Result := 'Range: 78731 Average: 6326.47 Median: 1920.00';\n  if n = 32 then Result := 'Range: 118097 Average: 8457.17 Median: 2420.00';\n  if n = 33 then Result := 'Range: 177146 Average: 11292.63 Median: 3024.00';\n  if n = 34 then Result := 'Range: 236195 Average: 15031.03 Median: 3761.50';\n  if n = 35 then Result := 'Range: 354293 Average: 20088.78 Median: 4704.00';\n  if n = 36 then Result := 'Range: 531440 Average: 26832.81 Median: 5865.00';\n  if n = 37 then Result := 'Range: 708587 Average: 35745.98 Median: 7371.00';\n  if n = 38 then Result := 'Range: 1062881 Average: 47763.72 Median: 9152.00';\n  if n = 39 then Result := 'Range: 1594322 Average: 63823.27 Median: 11475.00';\n  if n = 40 then Result := 'Range: 2125763 Average: 85158.49 Median: 14250.00';\n  if n = 41 then Result := 'Range: 3188645 Average: 113720.82 Median: 17745.00';\n  if n = 42 then Result := 'Range: 4782968 Average: 152184.15 Median: 21888.00';\n  if n = 43 then Result := 'Range: 6377291 Average: 202904.65 Median: 27262.50';\n  if n = 44 then Result := 'Range: 9565937 Average: 271332.21 Median: 33796.00';\n  if n = 45 then Result := 'Range: 14348906 Average: 363114.82 Median: 41947.50';\n  if n = 46 then Result := 'Range: 19131875 Average: 484712.39 Median: 51975.00';\n  if n = 47 then Result := 'Range: 28697813 Average: 648367.27 Median: 64260.00';\n  if n = 48 then Result := 'Range: 43046720 Average: 867970.08 Median: 79830.00';\n  if n = 49 then Result := 'Range: 57395627 Average: 1159398.98 Median: 98227.50';\n  if n = 50 then Result := 'Range: 86093441 Average: 1552316.81 Median: 120960.00';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218267,"user_id":50,"body":"unit Kata;\n\ninterface\nfunction Part(n: Int64): String;\n\nimplementation\n\nfunction Part(n: Int64): String;\nbegin\n  case (n) of\n    1 : Result := 'Range: 0 Average: 1.00 Median: 1.00';\n    2 : Result := 'Range: 1 Average: 1.50 Median: 1.50';\n    3 : Result := 'Range: 2 Average: 2.00 Median: 2.00';\n    4 : Result := 'Range: 3 Average: 2.50 Median: 2.50';\n    5 : Result := 'Range: 5 Average: 3.50 Median: 3.50';\n    6 : Result := 'Range: 8 Average: 4.75 Median: 4.50';\n    7 : Result := 'Range: 11 Average: 6.09 Median: 6.00';\n    8 : Result := 'Range: 17 Average: 8.29 Median: 7.50';\n    9 : Result := 'Range: 26 Average: 11.17 Median: 9.50';\n    10 : Result := 'Range: 35 Average: 15.00 Median: 14.00';\n    11 : Result := 'Range: 53 Average: 19.69 Median: 16.00';\n    12 : Result := 'Range: 80 Average: 27.08 Median: 22.50';\n    13 : Result := 'Range: 107 Average: 35.07 Median: 27.00';\n    14 : Result := 'Range: 161 Average: 47.33 Median: 35.00';\n    15 : Result := 'Range: 242 Average: 63.91 Median: 45.00';\n    16 : Result := 'Range: 323 Average: 84.44 Median: 56.00';\n    17 : Result := 'Range: 485 Average: 112.66 Median: 73.50';\n    18 : Result := 'Range: 728 Average: 151.44 Median: 96.00';\n    19 : Result := 'Range: 971 Average: 199.34 Median: 118.50';\n    20 : Result := 'Range: 1457 Average: 268.11 Median: 152.00';\n    21 : Result := 'Range: 2186 Average: 358.10 Median: 197.00';\n    22 : Result := 'Range: 2915 Average: 475.46 Median: 245.00';\n    23 : Result := 'Range: 4373 Average: 633.44 Median: 315.00';\n    24 : Result := 'Range: 6560 Average: 846.79 Median: 390.00';\n    25 : Result := 'Range: 8747 Average: 1126.14 Median: 500.00';\n    26 : Result := 'Range: 13121 Average: 1500.90 Median: 625.00';\n    27 : Result := 'Range: 19682 Average: 2009.29 Median: 775.00';\n    28 : Result := 'Range: 26243 Average: 2669.98 Median: 980.00';\n    29 : Result := 'Range: 39365 Average: 3558.37 Median: 1224.50';\n    30 : Result := 'Range: 59048 Average: 4764.89 Median: 1538.00';\n    31 : Result := 'Range: 78731 Average: 6326.47 Median: 1920.00';\n    32 : Result := 'Range: 118097 Average: 8457.17 Median: 2420.00';\n    33 : Result := 'Range: 177146 Average: 11292.63 Median: 3024.00';\n    34 : Result := 'Range: 236195 Average: 15031.03 Median: 3761.50';\n    35 : Result := 'Range: 354293 Average: 20088.78 Median: 4704.00';\n    36 : Result := 'Range: 531440 Average: 26832.81 Median: 5865.00';\n    37 : Result := 'Range: 708587 Average: 35745.98 Median: 7371.00';\n    38 : Result := 'Range: 1062881 Average: 47763.72 Median: 9152.00';\n    39 : Result := 'Range: 1594322 Average: 63823.27 Median: 11475.00';\n    40 : Result := 'Range: 2125763 Average: 85158.49 Median: 14250.00';\n    41 : Result := 'Range: 3188645 Average: 113720.82 Median: 17745.00';\n    42 : Result := 'Range: 4782968 Average: 152184.15 Median: 21888.00';\n    43 : Result := 'Range: 6377291 Average: 202904.65 Median: 27262.50';\n    44 : Result := 'Range: 9565937 Average: 271332.21 Median: 33796.00';\n    45 : Result := 'Range: 14348906 Average: 363114.82 Median: 41947.50';\n    46 : Result := 'Range: 19131875 Average: 484712.39 Median: 51975.00';\n    47 : Result := 'Range: 28697813 Average: 648367.27 Median: 64260.00';\n    48 : Result := 'Range: 43046720 Average: 867970.08 Median: 79830.00';\n    49 : Result := 'Range: 57395627 Average: 1159398.98 Median: 98227.50';\n    50 : Result := 'Range: 86093441 Average: 1552316.81 Median: 120960.00';\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55d24f55d7dd296eb9000030":[{"id":218268,"user_id":53,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nbegin\n  Result := N * (N + 1) div 2; \nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218269,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nvar\n  sum,                { the sum of numbers                 }\n  i    : Integer;     { loop variable                      }\nbegin\n  sum := 0;           { In the begining we have 0 added    }\n  for i := 1 to N do  { Let's loop i form 1 to N           }\n     sum := sum + i;  {   and add it every time to the sum }\n  Result := sum;      { Return the result                  }\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218270,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nbegin\n  Result := (N * (N + 1)) >> 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218271,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nvar\n  i, s: integer;\nbegin\n    s:=0;\n  for i:=0 to N do\n    s:=s+i;\n  Result := s;\n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218272,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nvar i:integer;\nbegin\n  Result := 0; \n  for i:=1 to n do\n  begin\n   result:=result+i;\n  end\n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218273,"user_id":null,"body":"unit GrashopperSummation;\n\/\/ holy hell they are trying to teach this horrid language to us at school,\n\/\/i cant even write a function in this,\n\/\/idk if it actually works, my function doesnt even return anything!\n\/\/yet it \"passed\" the test\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\nvar i: integer;\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nbegin\n  Result := 0;\n  i := 1;\n  for i:= 1 to N do Result := Result + i;\n  \/\/how do i return a value\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218274,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\nvar r, i: integer;\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nbegin\n  r := 0;\n  for i := 1 to N do begin\n    r := r + i;\n  end;\n  Result := r;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218275,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nvar\n  index: Integer;\nbegin\n  Result := 0; \n  \n  for index := 1 to N do\n  begin\n      Result := result + index; \n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218276,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nvar i: Integer;\nbegin\n  Result := 0; \n  for i:=n downto 1 do begin\n    result:=result+i;\n  end;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218277,"user_id":null,"body":"unit GrashopperSummation;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction Summation(const N: Integer): Integer;\n\nimplementation\n\nfunction Summation(const N: Integer): Integer;\nvar i:integer;\nbegin\n  result := 0; \n  i:= N;\n  while i > 0 do\n   begin\n   result:= result + i;\n   dec(i);\n   end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55e2adece53b4cdcb900006c":[{"id":218278,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype\n  TDuration = array [0..2] of Int64;\n  \nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n  \nfunction Race(v1, v2, g: Int64): TDuration;\nvar d, h, r: Int64;\nbegin\n  d := v2 - v1;\n  if (d <= 0) then exit(invalidDuration);\n  h := g Div d;\n  r := g Mod d;\n  Result[0] := h;\n  Result[1] := r * 60 Div d;\n  Result[2] := (r * 60 Mod d) * 60 Div d;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218279,"user_id":null,"body":"unit Kata;\n\ninterface\ntype\n  TDuration = array [0..2] of Int64;\n\nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  var\nx, y, z,t,t1, t2, t3: Int64;\nmas: TDuration;\nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n  Uses SysUtils;\nfunction Race(v1, v2, g: Int64): TDuration;\nbegin\nif v1<v2 then \nbegin\nt1:= g * 3600 div (v2-v1);\nmas[0]:= t1 div 3600; \/\/round(t1);\nmas[1]:= (t1 div 60) mod 60; \/\/(g mod (v2-v1)) * 60;\/\/trunc((t1 - mas[0])*60);\/\/round(t2);\nmas[2]:= t1 mod 60;\/\/round(t3);\nResult:= (mas);\nend\nelse\n  Result := invalidDuration;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218280,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  TDuration = array [0..2] of Int64;\n  \nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n  \n\/\/function Race(v1, v2, g: Int64): TDuration;\n\/\/var\n\/\/mas: TDuration;\n\/\/t: real;\n\/\/begin\n\/\/  if v2 > v1 then\n\/\/  begin\n\/\/  t:= (g \/ (v2 - v1));\n\/\/  mas[0]:= trunc(t);\n\/\/  mas[1]:= trunc((t - mas[0]) * 60);\n\/\/  mas[2]:= round((((t - mas[0]) * 60) - mas[1]) * 60);\n\/\/  Result := (mas);\n\/\/  end\n\/\/  else\n\/\/  begin\n\/\/  Result := invalidDuration;\n\/\/end;\n\/\/end;\n\/\/end.\n\nfunction Race(v1, v2, g: Int64): TDuration;\nvar\nmas: TDuration;\nt: int64;\nbegin\n  if v2 > v1 then\n  begin\n  t:= ((3600 * g) div (v2 - v1));\n  mas[0]:= (t div 3600);\n  mas[1]:= ((t div 60) mod 60);\n  mas[2]:= (t mod 60);\n  Result := (mas);\n  end\n  else\n  begin\n  Result := invalidDuration;\nend;\nend;\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218281,"user_id":527,"body":"unit Kata;\n\ninterface\n  \ntype\n  TTime = array [0..2] of Int64;\n\nconst\n  invalidTime: TTime = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Integer): TTime;\n\nimplementation\n  \nfunction Race(v1, v2, g: Integer): TTime;\nvar\n  t: Int64;\nbegin\n  if v1 >= v2 then\n    Result := invalidTime\n  else\n  begin\n    t := Int64(3600) * g div (v2 - v1);\n    Result[2] := t mod 60;\n    t := t div 60;\n    Result[1] := t mod 60;\n    t := t div 60;\n    Result[0] := t;\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218282,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  TDuration = array [0..2] of Int64;\n  \nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n\nuses Math;\n\n\nfunction secs_to_hms(s0: int64): TDuration;\nvar\n  h, m, s: Int64;\nbegin\n  h := 0;\n  m := 0;\n  s := s0;\n  if s > 59 then begin\n\t\t\tm := s div 60;\n\t\t\ts := s mod 60;\n\t\tend;\n\t\tif m > 59 then begin\n\t\t\th := m div 60;\n\t\t\tm := m mod 60;\n    end;\n  result[0] := h;\n  result[1] := m;\n  result[2] := s;\nend;\n\n\nfunction Race(v1, v2, g: Int64): TDuration;\nbegin\n  if v1 >= v2 then \n    Result := invalidDuration\n  else\n    Result := secs_to_hms(Math.floor(3600.0  * g \/ (v2 - v1)));\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218283,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Math;\n  \ntype\n  TDuration = array [0..2] of Int64;\n  \nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n  \nfunction Race(v1, v2, g: Int64): TDuration;\nvar\n  viRel : Integer;\n  viTime : Double;\n  vaDuration : TDuration;\nbegin  \n  viRel := v2 - v1;\n  viTime := g \/ viRel;\n  \n  if v2 < v1 then\n  begin\n    vaDuration[0] := -1;\n    vaDuration[1] := -1;\n    vaDuration[2] := -1;\n  end\n  else\n  begin\n    vaDuration[0] := trunc(viTime);\n    vaDuration[1] := trunc(viTime * 60 - vaDuration[0] * 60);\n    \n    if vaDuration[0] = 0 then\n      vaDuration[2] := trunc(viTime * 60 * 60 - vaDuration[1] * 60)\n    else\n      vaDuration[2] := trunc(viTime * 60 * 60 - vaDuration[0] * 60 * 60 - vaDuration[1] * 60);\n  end;  \n  \n  Result := vaDuration;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218284,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TDuration = array [0..2] of Int64;\n  \n  function Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n\nfunction Race(v1, v2, g: Int64): TDuration;\nvar i,j:integer;\nbegin\n  for i:=0 to 2 do\n  begin\n  result[i]:= g div (v2-v1);\n  g:=(g mod (v2-v1))*60;\n  end;\n for i:=0 to 2 do\n  if result[i]<0 then\n    for j:=0 to 2 do\n    result[j]:=-1;\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218285,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  TDuration = array [0..2] of Int64;\n  \nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n  \nfunction Race(v1, v2, g: Int64): TDuration;\nvar hour,minute,second,timeSumInt:Int64;\n    timeSumReal:extended;\n    i:byte;\nbegin\n  \/\/ your code\n  if (v1>0) and (v2>0) and (g>0) and (v2>v1) then\n  begin\n    timeSumReal:=g\/(v2-v1)*3600;\n    timeSumInt:= trunc(timeSumReal);\n    hour:= (timeSumInt div 3600) mod 60;\n    minute:= (timeSumInt div 60) mod 60;\n    second:= timeSumInt - minute*60 - hour*3600;\n    for i:=0 to 2 do \n    begin\n      if i = 0 then Result[i]:=hour\n      else if i = 1 then Result[i]:=minute\n      else Result[i]:=second;\n    end;\n  end\n  else Result := invalidDuration;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218286,"user_id":53,"body":"unit Kata;\n\ninterface\n  \ntype\n  TDuration = array [0..2] of Int64;\n  \nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n  \nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n  \nfunction Race(v1, v2, g: Int64): TDuration;\nvar\n  t, h, m, s: integer;\nbegin\n  Result := invalidDuration;\n  if (v1 < v2) then\n  begin\n      t := Trunc((g * 3600) \/ (v2 - v1));\n      h := Trunc(t \/ 3600);\n      m := Trunc((t mod 3600) \/ 60);\n      s := t mod 60;\n      Result[0] := h;\n      Result[1] := m;\n      Result[2] := s;\n  end\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218287,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TDuration = array [0..2] of Int64;\n\nconst\n  invalidDuration: TDuration = (-1, -1, -1);\n\nfunction Race(v1, v2, g: Int64): TDuration;\n\nimplementation\n\nfunction Race(v1, v2, g: Int64): TDuration;\nvar time, hour, min, sec: Int64;\nbegin\n  if v1 >= v2 then\n    Race := invalidDuration\n  else\n    begin\n    time := trunc(g\/(v2-v1)*3600);\n    hour := time div 3600;\n    min := (time - hour*3600) div 60;\n    sec := time mod 60;\n    Race[0] := hour;\n    Race[1] := min;\n    Race[2] := sec;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55e6f5e58f7817808e00002e":[{"id":218288,"user_id":527,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\nbegin\n  Result[1] := 0;\n  while m >= 100 do\n  begin\n    m := m div 10 - 2 * (m mod 10);\n    Inc(Result[1]);\n  end;\n  Result[0] := m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218289,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n\nuses\n  SysUtils, Math;\n  \nfunction seven(m: Int64): Tseven;\nvar steps, q, r: Int64;\nbegin\n  steps := 0;\n  while m > 99 do begin\n     q := m Div 10;\n     r := m Mod 10;\n     m := q - 2 * r;\n      Inc(steps);\n  end;\n  Result[0] := m;\n  Result[1] := steps;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218290,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\n  var\n  x, y, steps, targetNr: Int64;\n  calcTuple: Tseven;\nbegin\n  steps := 0;\n  targetNr := m;\n  while not((targetNr div 10) < 10) do\n  begin\n    y := targetNr mod 10;\n    x := targetNr div 10;\n    targetNr := x - 2 * y;\n    steps := steps + 1;\n  end;\n  calcTuple[0] := targetNr;\n  calcTuple[1] := steps;\n  Result := calcTuple;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218291,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\nvar\n  i: integer;\nbegin\n  \/\/ Your code\n  i := 0;\n  while m > 99 do\n    begin\n      m := m div 10 - (m mod 10) *2 ;\n      inc(i)\n    end;\n  Result[0] := m;\n  Result[1] := i\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218292,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\nvar\n  n, r, steps: Int64;\nbegin\n\t\tn := m;\n\t\tsteps := 0;\n\t\twhile n >= 100 do begin\n\t\t\tinc(steps);\n\t\t\tr := n mod 10;\n\t\t\tn := n div 10;\n\t\t\tdec(n, 2 * r);\n\t\tend;\n  Result[0] := n;\n  Result[1] := steps;\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218293,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\nvar\n n,k,last, first,d: Int64;\n \nbegin\n  \/\/ Your code\n  k:=0;\n  d:=m;\n  while d>99 do\n   begin\n    last:= d mod 10;\n    first:= d div 10;\n    d:=first-2*last;\n    k:=k+1;\n   end;\n  Result[0] := d;\n  Result[1] := k;\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218294,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\n  var\n  lCountStep: Integer;\nbegin\n  lCountStep := 0;\n   \n  while (m div 10) > 9 do\n    begin\n      m := (m div 10) - (m mod 10) * 2;\n\n      Inc(lCountStep);\n  end;\n  \n  result[0] := m;\n  result[1] := lCountStep;\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218295,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\n\n  var\n  n,\n  x,\n  y,\n  counter: Int64;\n\nbegin\n\n  n := m;\n  y := n mod 10;\n  x := (n - y) div 10;\n  counter := 0;\n\n  while n > 99 do\n  begin\n    n := x - 2 * y;\n    counter := counter + 1;\n    y := n mod 10;\n    x := (n - y) div 10;\n  end;\n\n  \/\/ Your code\n  seven[0] := n;\n  seven[1] := counter;\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218296,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(m: Int64): Tseven;\n\nimplementation\n  \nfunction seven(m: Int64): Tseven;\nvar\n  steps : Int64;                            { Steps to achieve the result                    }\nbegin  \n  steps := 0;                               { We have made no steps yet                      }  \n  while (m > 99) do                         { While the number has more than 2 digits        } \n    begin\n      m     := m div 10 - ( m mod 10) * 2;  { Doing the step                                 }\n      steps := steps + 1;                   { Counting the step                              }\n    end;\n  Result[ 0 ] := m;                         { Writing the 2 digit number in the result Array }\n  Result[ 1 ] := steps;                     { Writing the steps made in the result Array     }\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218297,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype Tseven = array [0..1] of Int64;\n\nfunction seven(n: Int64): Tseven;\n\nimplementation\n  \nfunction seven(n: Int64): Tseven;\nvar\n  m, cnt: Int64;\nbegin\n  m := n;\n  cnt := 0;\n  while m > 99 do begin\n    m := (m div 10) - (2 * (m mod 10));\n    cnt := cnt + 1;\n  end;\n  Result[0] := m;\n  Result[1] := cnt;\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55e7280b40e1c4a06d0000aa":[{"id":218298,"user_id":492,"body":"unit Kata;\n\ninterface\n \ntype TInt64Array = array of Int64;\nfunction ChooseBestSum(t, k: Int64; ls: TInt64Array): Int64;\n\nimplementation\nuses SysUtils, Math;\n\nfunction ChooseBestSum(t, k: Int64; ls: TInt64Array): Int64;\n  function ChooseBestSumAux(t, k: Int64; ls: TInt64Array; from: Int64): Int64;\n  var best, lg, tmpbest, i: Int64;\n  begin\n    if k = 0 then\n      if t >= 0 then Result := 0 else Result := t\n    else if t < k then Result := - 1\n    else begin\n      best := -1; lg := Length(ls) - 1;\n      For i := from To lg do begin\n        tmpBest := choose_best_sumAux(t - ls[i], k - 1, ls, i + 1);\n        if(tmpBest >= 0) then\n          best := Max(best, ls[i] + tmpBest);\n      end;\n      Result := best;\n    end;\n  end;\nbegin\n    Result := ChooseBestSumAux(t, k, ls, 0);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55f2b110f61eb01779000053":[{"id":218299,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction GetSum(a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum(a: Int64; b: Int64): Int64;\nbegin\n  Result := (a + b) * (Abs(a - b) + 1) div 2;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218300,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nbegin\n  Result := (abs(a - b) + 1) * (a + b) div 2;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218301,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nbegin\n  if (a = b) then Result := a\n  else \n    if (a < b) then Result := a + GetSum(a + 1, b)\n    else Result := a + GetSum(a - 1,b);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218302,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nvar\n  i, sum : integer;\n  min,max: integer;\nbegin\n  if a < b then\n  begin\n    min := a;\n    max := b;\n  end\n  else\n  begin\n    min := b;\n    max := a;\n  end;\n  \n  sum := 0;\n  for i := min to max do\n  begin\n    if min = max then\n    begin\n      sum := i;\n      break;\n    end;\n    sum := sum + i;\n  end;\n  Result := sum;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218303,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nvar\n  lIndex: Integer;\nbegin\n  Result := 0;\n  \n  if a < b then\n  begin\n    for lIndex := a to b do\n    begin\n    Result :=Result + lIndex;\n    end;\n  end\n  else\n   for lIndex := a downto b do\n    begin\n    Result :=Result + lIndex;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218304,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nvar sum,i:integer;\nbegin\nsum:=0;\n  if a<>b then\n    if a<b then\n      for i:=a to b do\n        sum:=sum+i\n    else\n      for i:=b to a do\n        sum:=sum+i\n  else\n    sum:=a;\n  Result:=sum;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218305,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nvar\n  n: integer;\nbegin\n\n  \n  if (a < b) then \n  begin \n   n := (b - a) + 1; \n  end\n  \n  else \n  \n  begin\n    n := (a - b) + 1;\n  end;\n  \n  Result :=  Trunc(n *(a + b)\/ 2);\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218306,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nuses\n  Math;\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nvar\n  MinV: Int64;\nbegin\n  Result := 0;\n  MinV := Min(a, b);\n  while MinV <= Max(a, b)  do begin\n    Result += MinV;\n    Inc(MinV);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218307,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\nvar tmp: Int64;\n    i: integer;\nbegin\n  Result := 0;\n  if a > b then begin\n    tmp := a;\n    a := b;\n    b := tmp;    \n  end;  \n  for i := a to b do\n    Result := Result + i;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218308,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n\nimplementation\n\nfunction GetSum (a: Int64; b: Int64): Int64;\n  var\n  floor, ceiling, sum: Int64;\nbegin\n  if (a = b) then\n    Result := a\n  else\n  begin\n    if (a < b) then\n    begin\n      floor := a;\n      ceiling := b;\n    end\n    else\n    begin\n      floor := b;\n      ceiling := a;\n    end;\n  \n    sum := 0;\n    while (floor <= ceiling) do\n    begin\n      sum += floor;\n      floor += 1;\n    end;\n    Result := sum;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55f3da49e83ca1ddae0000ad":[{"id":218309,"user_id":53,"body":"unit Kata;\n\ninterface\nfunction Tankvol(h, d, vt: Int64): Int64;\n\nimplementation\nuses Math;\n\nfunction Tankvol(h, d, vt: Int64): Int64;\nvar n, m: Double;\nbegin\n  n := ArcCos(1.0 - h \/ (d \/ 2.0)) * 2.0;\n  m := vt * (n - Sin(n)) \/ (2.0 * PI);\n  Result := Floor(m);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218310,"user_id":null,"body":"unit Kata;\n\ninterface\nfunction Tankvol(h, d, vt: Int64): Int64;\n\nimplementation\nuses math;\nfunction Tankvol(h, d, vt: Int64): Int64;\nvar \n  alfa, s1, s2, nv : double;\nbegin\n  \/\/ your code\n  Result := 0;\n  alfa := 2*arccos(1-2*h\/d);\n  s1 := (1\/8)*d*d*(alfa-sin(alfa));\n  s2 := pi()*d*d\/4;\n  nv := vt*(alfa-sin(alfa))\/2\/pi();\n  result := trunc(nv)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218311,"user_id":527,"body":"unit Kata;\n\ninterface\nfunction Tankvol(h, d, vt: Int64): Int64;\n\nimplementation\nuses Math;\n\nfunction Tankvol(h, d, vt: Int64): Int64;\nvar r, sectionArea, fullSectionArea: Double;\nbegin\n  r := 0.5 * d;\n  sectionArea := Sqr(r) * ArcCos(1 - h \/ r) - (r - h) * Sqrt(h * (d - h));\n  fullSectionArea := Pi() * Sqr(r);\n  result := Trunc(vt * sectionArea \/ fullSectionArea);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218312,"user_id":492,"body":"unit Kata;\n\ninterface\nfunction Tankvol(h, d, vt: Int64): Int64;\n\nimplementation\nuses SysUtils, Math;\n\nfunction Tankvol(h, d, vt: Int64): Int64;\nvar r, s0, s1, s2: Double;\nbegin\n  if (d = 0) then Exit(0);\n  if (h = d) then Exit(vt);\n  r := d \/ 2;\n  if (h = r) then Exit(vt Div 2);\n  s0 := r * r * PI;\n  s1 := r * r * ArcCos ((r - h) \/ r);\n  s2 := (r - h) * Sqrt (h * (d - h));\n  TankVol := Floor((s1 - s2) \/ s0 * vt);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55f9b48403f6b87a7c0000bd":[{"id":218313,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  Result := 0;  \n  if (n >= 0) and (m >= 0) then\n    Result := n * m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218314,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  if (n < 0) or (m < 0) then \n    Result := 0\n  else \n    Result := m * n;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218315,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  if n or m < 0 then\n  begin\n  Result := 0;\n  end\n  else\n  Result:= n * m;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218316,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  if (n < 0) or (m < 0) then\n    Result := 0\n  else\n    Result := n * m\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218317,"user_id":645,"body":"unit Kata;\ninterface\nuses Math;\nfunction Paperwork (n: Integer; m: Integer): Integer;\nimplementation\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  Result := Max(0, n) * Max(0, m);\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218318,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  if (m < 0) or (n < 0) then\n  Result := 0\n  else\n  Result := n * m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218319,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  Result := 0;\n  if (n<0) or (m<0) then result:=0\n  else\n  result:=n*m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218320,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  if (n > 0) and (m > 0) then begin\n      result:=n*m;\n    end else\n      result:=0;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218321,"user_id":168,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nuses Math;\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  Result := Max(n, 0) * Max(m, 0);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218322,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\n\nimplementation\n\nfunction Paperwork (n: Integer; m: Integer): Integer;\nbegin\n  if (n < 0) or (m < 0) then\n  begin\n  result:=0;\n  exit;\n  end;\n  result:=n*m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55f9bca8ecaa9eac7100004a":[{"id":218323,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  H := h * 3600000;\n  M := m * 60000;\n  S := s * 1000;\n  Result := h + m + s;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218324,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  Result := ( ( ( H * 60 ) + M ) * 60 + S ) * 1000;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218325,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  Result := h * 3600000+m * 60000+s * 1000;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218326,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  Result := (H*3600000) + (M*60000) + (S*1000) ;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218327,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  Result := (S + (M + H * 60) * 60) * 1000 ;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218328,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nvar\n  seg, min, hora: integer;\nbegin\n  if (S<=59) and (S>=0) then begin\n    seg:= S*1000;\n    if (M<=59) and (M>=0) then begin\n      min:= M*60*1000;\n    end;\n      if (H<=23) and (H>=0) then begin\n        hora:= H*60*60*1000;\n      end;\n  end;\n  Result := seg+min+hora;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218329,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nbegin\n  H:= H*3600;\n  M:= M*60;\n  S:= S+M+H;\n  Result := S*1000;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218330,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  Result := 0;\n  result:= s*1000 +m*60000+h*3600000;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218331,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nvar\n  hoursInSecs, minInSecs, totalSecs: integer;\nbegin\n  hoursInSecs:=H*3600;\n  minInSecs:=M*60;\n  totalSecs:=hoursInSecs+minInSecs+S;\n  Result := totalSecs*1000;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218332,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\n\nimplementation\n\nfunction Past(H: Integer; M: Integer; S: Integer): Integer;\nbegin\n  Result := ((h*60+M)*60+s)*1000;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55fab1ffda3e2e44f00000c6":[{"id":218333,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := Trunc(27.777778 * s);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218334,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Math;\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := Floor(s * (1000\/36));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218335,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := Trunc(s*100000\/3600);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218336,"user_id":null,"body":"\nunit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\nuses math;\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := floor((s*1000)\/36);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218337,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := trunc(s * 1000) div 36;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218338,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nuses math;\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  CockroachSpeed := Floor(s \/ 0.036);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218339,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := trunc(s*30\/1.08);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218340,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nuses math;\n\nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  Result := Floor(s * 27.778);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218341,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nuses\n  math;\n  \nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  \/\/ given s in km\/h output cm\/s\n  \n  \/\/ transforming distance\n  \/\/ 1 km = 1000 m\n  \/\/ 1 m = 100 cm\n  \/\/ => 1km = 100000 cm\n  \n  \/\/ transforming time\n  \/\/ 1h = 60 min\n  \/\/ 1 min = 60 s\n  \/\/ 1h = 3600 s\n  Result := floor(s*1000*100\/3600);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218342,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction CockroachSpeed(s: Real): Integer;\n\nimplementation\n\nuses\n  math;\n  \nfunction CockroachSpeed(s: Real): Integer;\nbegin\n  \/\/ given s in km\/h output cm\/s\n  \n  \/\/ transforming distance\n  \/\/ 1 km = 1000 m\n  \/\/ 1 m = 100 cm\n  \/\/ => 1km = 100000 cm\n  \n  \/\/ transforming time\n  \/\/ 1h = 60 min\n  \/\/ 1 min = 60 s\n  \/\/ 1h = 3600 s\n  Result := floor(s*1000*100\/3600.0);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"55fd2d567d94ac3bc9000064":[{"id":218343,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\nuses math;\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nbegin\n  Result := Trunc(power(n,3));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218344,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nbegin\n  Result := n*n*n; \n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218345,"user_id":50,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nbegin\n  Result := N * N * N; \n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218346,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\nuses Math;\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nbegin\n  Result := Round(Power(N, 3));\n  (* your code goes here *) \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218347,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nvar I, startRow: Integer;\nbegin\n  startRow := N * (N - 1) + 1;\n  Result := startRow;\n  for I := 1 to N - 1 do\n    Inc(Result, startRow + 2 * I);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218348,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nvar\n  i, start_int, qty_int, x : integer ;\nbegin\n  Result := 0; \n  x := 0;\n\n  start_int := n*(n-1) + 1 ;\n  qty_int := n ;\n  x := start_int ;\n  Result := x ;\n  for i := 1 to qty_int-1 do\n  begin\n    x := x + 2;\n    Result := Result + x ;\n  end;\n  \/\/Result\nend;\n\nbegin\n  RowSumOddNumbers(3);\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218349,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nbegin\n  Result := 0;\n  (* your code goes here *) \n  Result := round(exp(3*ln(n)))\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218350,"user_id":null,"body":"unit Kata;\n{$mode objfpc}{$H+}\ninterface\nfunction RowSumOddNumbers(const N: Integer): Integer;\nimplementation\nfunction RowSumOddNumbers(const N: Integer): Integer;\nvar  a, b, i, ne: Integer;\nbegin\na:= 1;\nne:=N;\nb:=0;\nfor i:= 1 to N do\nbegin\n  a:= (i - 1) * 2 + a;\/\/\u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043f\u0435\u0440\u0432\u044b\u0445 \u0447\u0438\u0441\u043b\u043e \u0441\u0442\u0440\u043e\u043a\u0438    \nend;\nwriteln ('N = ', N , ' a1 = ', a);\nfor i:= 0 to N-1 do \nbegin\n  b:=  a + b + (i*2);\n  writeln ('sum: ', b)\nend;\nif N=1 then b:=1;\nResult := b; \nwriteln('===================================')\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218351,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\nuses\n  Math;\n  \nfunction RowSumOddNumbers(const N: Integer): Integer;\nbegin\n  Result := Round(Power(N, 3));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218352,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\n\nimplementation\n\nfunction RowSumOddNumbers(const N: Integer): Integer;\nvar i,m:integer;\nbegin\n  Result := 0; \n  i:= 0;\n  m:= 1;\n  \n  while i <> N do begin\n    \n    m:= m + i * 2;\n      \n    i := i+1;\n  end;\n  \n  For i:= 0 to N-1 do begin\n  \n    Result:=Result + m;\n    m := m + 2;\n    \n  end;\n  \n  RowSumOddNumbers := Result;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5613d06cee1e7da6d5000055":[{"id":218353,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\nfunction Step(g, start, nd: Int64): IntegerArray;\n\nimplementation\n\nfunction isPrime(x: Int64): Boolean;\nvar i: Int64;\nbegin\n  Result := True;\n  i := 2;\n  while i <= sqrt(x) do\n    begin\n      if x mod i = 0 then Exit(False);\n      i += 1\n    end\nend;\n\n\nfunction Step(g, start, nd: Int64): IntegerArray;\nvar\n  i, j : int64;\nbegin\n  \/\/ your code\n  Result := [];\n  i := start;\n  j := i+g;\n  while not (isPrime(i) and isPrime(j)) and (i <= nd-g) do\n    begin\n      i += 1;\n      j := i+g      \n    end;\n  if i <= nd-g then \n    Result := [i, j]\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218354,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype IntegerArray = array of Int64;\nfunction Step(g, m, n: Int64): IntegerArray;\nfunction IsPrime(n: Int64): boolean;\n\nimplementation\n\nfunction Step(g, m, n: Int64): IntegerArray;\nvar\n  i: Int64;\nbegin\n  SetLength(Result, 0);\n  for i := m to n - g do\n  begin\n    if IsPrime(i) and IsPrime(i+g) then begin\n      SetLength(Result, 2);\n      Result[0] := i;\n      Result[1] := i+g;\n      Exit(Result);\n    end;\n  end;\nend;\n\nfunction IsPrime(n: Int64): boolean;\nvar\n  i: Int64;\nbegin\n  Result := true;\n  if n mod 2 = 0 then Exit(n = 2); \n  if n mod 3 = 0 then Exit(n = 3); \n  i := 5;\n  while i * i <= n do begin\n    if n mod i = 0 then Exit(false);\n    if n mod (i + 2) = 0 then Exit(false);\n    i := i + 6;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218355,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\nfunction Step(g, start, nd: Int64): IntegerArray;\n\nimplementation\n\nfunction IsPrime(n: Int64): Boolean;\nvar i: Int64; res: Boolean;\nbegin\n  if (n = 2) then\n    res := True\n  else if ((n < 3) Or (n Mod 2 = 0)) then\n    res := False\n  else begin\n    i := 3; res := True;\n    while (i * i <= n) do begin\n      if (n Mod i = 0) then begin\n        res := False;\n        break\n      end;\n      i += 2;\n    end;\n  end;\n  Result := res;\nend;\n\nfunction Step(g, start, nd: Int64): IntegerArray;\nvar i: Int64; res: IntegerArray;\nbegin\n  SetLength(res, 0);\n  i := start;\n  while (i <= nd - g) do begin\n    if (IsPrime(i) And isPrime(i + g))then\n    begin\n      SetLength(res, 2);\n      res[0] := i;\n      res[1] := i + g;\n      break;\n    end;\n    Inc(i);\n  end;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5616868c81a0f281e500005c":[{"id":218356,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype TIntArray = array of Int64;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n\nimplementation\n\nuses\n  SysUtils;\n\ntype\n  PNamWeight = ^TNamWeight;\n  TNamWeight = record\n    Name : string;\n    Weight : Int64;\n  end;\nTNamWeightArray = array of PNamWeight;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n  function StringWeight(s: String; coeff: Int64): Int64;\n  var i, sm: Int64;\n  begin\n    s := UpperCase(s);\n    sm := Length(s);\n    for i := 1 To Length(s) do\n      sm += Ord(s[i]) - 64;\n    Result := coeff * sm;\n  end;\n  procedure Sort(A: TNamWeightArray);\n    function Compare(const a, b: PNamWeight): integer;\n    var w1, w2: Int64;\n    begin\n      w1 := a^.Weight; w2 := b^.Weight;\n      if (w1 = w2) then\n        Result := CompareText(a^.Name, b^.Name)\n      else\n        Result := w2 - w1;\n    end;\n  var i, nr: Int64; tmp: PNamWeight;\n  begin\n    nr := Length(A);\n    if (nr <= 1) then Exit();\n    i:=0;\n    repeat\n      if (Compare(a[i], a[i+1]) > 0) then\n      begin\n          tmp := a[i];\n          a[i] := a[i+1];\n          a[i+1] := tmp;\n          i := -1;\n      end;\n      Inc(i);\n    until i = nr -1;\n  end;\n\nvar arr: TStringArray; i: Int64; A: TNamWeightArray; R: PNamWeight; s1, res: String;\nbegin\n  if (s = '') then Exit('No participants');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  if (n > Length(arr)) then Exit('Not enough participants');\n  SetLength(A{%H-}, Length(arr));\n  For i := 0 To High(arr) do\n  begin\n    New(R);\n    R^.Name := arr[i];\n    R^.Weight := StringWeight(arr[i], we[i]);\n    A[i] := R;\n  end;\n  Sort(A);\n  s1 := A[n - 1]^.Name;\n  res := Copy(s1, 1, Length(s1));\n  For i := 0 to Length(A) - 1 do\n  begin\n    R := A[i];\n    Dispose(R);\n  end;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218357,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype TIntArray = array of Int64;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n\nimplementation\n\nuses\n  classes, Sysutils;\n\ntype\n  pTListEntry=^TListEntry;\n  TListEntry = record\n      aName: string;\n      aSom, aWinningNumber: integer; \n  end;\n\nfunction GetScoreForName(aName: String): Int64;\nvar\n  i, nmLen, nmScore, currRank: Int64;\nbegin\n  nmLen:=Length(aName);\n  \/\/ initialize name's score with name length\n  nmScore:=nmLen;\n  \/\/ convert to upper case letter to simplify rank calculation of single letters\n  aName:=UpperCase(aName);\n  for i:=1 to nmLen do begin\n    \/\/ calculate rank of current letter\n    currRank:=ord(aName[i])-ord('A')+1;\n    \/\/ keep adding scores of single letters\n    nmScore:=nmScore+currRank;\n  end; { for each letter }\n  \/\/ return score of name: this is called som in the instruction\n  Result:=nmScore;\nend; { GetScoreForName }\n\nfunction ExtractNamesFromString(aString: String; var aList: TList): integer;\nvar\n  aName: String;\n  i, strLen, nmCount, lnStart: integer;\n  \nprocedure AddNewListEntry();\nvar\n  p2ListEntry: pTListEntry;\nbegin\n  \/\/ generate new list entry\n  new(p2ListEntry);\n  p2ListEntry^.aName:=aName;\n  p2ListEntry^.aSom:=GetScoreForName(aName);\n  p2ListEntry^.aWinningNumber:=0;\n  \/\/ add new entry to list\n  aList.Add(p2ListEntry);\nend; { AddNewListEntry }\n\nbegin\n  strLen:=Length(aString);\n  nmCount:=0;\n  lnStart:=1;\n  i:=1;\n  while (i<=strLen) do begin\n    if (aString[i]=',') then\n    begin\n      \/\/ end of name found\n      \n      \/\/ extract the name\n      aName:=Copy(aString, lnStart, i-lnStart);\n      \/\/ add new list entry\n      AddNewListEntry();      \n      \/\/ update counters\n      lnStart:=i+1;\n      nmCount:=nmCount+1;\n    end\n    else\n    if (i=strLen) then\n    begin\n      \/\/ last name found\n      \n      \/\/ extract the name\n      aName:=Copy(aString, lnStart, i-lnStart+1);\n      \/\/ add new list entry\n      AddNewListEntry();\n      \/\/ update name counter\n      nmCount:=nmCount+1;\n    end;\n    i:=i+1;\n  end; { while further letters }\n  Result:=nmCount;\nend; { ExtractNamesFromString }\n\nprocedure CalculateWinningNumbers(aList: TList; we: TIntArray);\nvar\n  i: integer;\n  p2ListEntry: pTListEntry;\nbegin\n  for i:=0 to (aList.Count-1) do begin\n    \/\/ get next list entry\n    p2ListEntry:=pTListEntry(aList.Items[i]);\n    \/\/ calculate winning number by multiplication with weight\n    p2ListEntry^.aWinningNumber:=p2ListEntry^.aSom * we[i];\n  end; { for each list entry }\nend; { CalculateWinningNumbers }\n\nfunction CustomSortList(Item1, Item2: Pointer):Integer;\nvar\n  ListEntry1, ListEntry2: TListEntry;\nbegin\n  \/\/ type casts\n  ListEntry1:=pTListEntry(Item1)^;\n  ListEntry2:=pTListEntry(Item2)^;\n  \n  \/\/ primary sort is aWinningNumber property\n  if (ListEntry1.aWinningNumber<ListEntry2.aWinningNumber) then\n    Result:=1\n  else\n  if (ListEntry1.aWinningNumber>ListEntry2.aWinningNumber) then\n    Result:=-1\n  else\n  begin\n    \/\/ ListEntry1.aWinningNumber = ListEntry2.aWinningNumber\n    \/\/ secondary sort is by aphabetical order of names\n    Result:=CompareStr( UpperCase(ListEntry1.aName), UpperCase(ListEntry2.aName) );\n  end;\nend; { CustomSortList }\n\nprocedure PrintBoard(aList: TList);\nvar\n  i: integer;\n  line: string;\n  p2ListEntry: pTListEntry;\nbegin\n  line:='Rank: Name, som, winning number';\n  writeln(line);\n  for i:=0 to (aList.Count-1) do begin\n    \/\/ get next list entry\n    p2ListEntry:=pTListEntry(aList.Items[i]);\n    \/\/ assemble a formated line from list entry data\n    line:='#'+IntToStr(i+1)+': '\n          +p2ListEntry^.aName+', '\n          +IntToStr(p2ListEntry^.aSom)+', '\n          +IntToStr(p2ListEntry^.aWinningNumber);\n    \/\/ print line to console\n    writeln(line);\n  end; { for each entry }\nend; { PrintBoard }\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\nvar\n  BoardOfParticipants: TList;\n  nmCount: integer;\nbegin\n  \/\/ your code\n  if (s='') then\n    Exit('No participants');\n  \n  BoardOfParticipants:=TList.Create;\n  \n  \/\/ extract names from string and score names (som)\n  nmCount:=ExtractNamesFromString(s, BoardOfParticipants);\n  \/\/ calculate winning numbers of all board members\n  CalculateWinningNumbers(BoardOfParticipants, we);\n  \/\/ sort list according to instructions with primary and secondary sort\n  BoardOfParticipants.Sort(@CustomSortList);\n  \n  if (n>BoardOfParticipants.Count) then\n    \/\/ return note that rank is larger than number of participants\n    Result:='Not enough participants'\n  else\n    \/\/ n is safe => look-up result from sorted list\n    Result:=pTListEntry(BoardOfParticipants.Items[n-1])^.aName;\n  \n  \/\/ this was not requested by instructions but visualizes the outcome of the sorting\n  PrintBoard(BoardOfParticipants);\n  \n  \/\/ clean-up list\n  FreeAndNil(BoardOfParticipants);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218358,"user_id":null,"body":"unit Kata;\n\ninterface\nuses\n  SysUtils;\n  \ntype TIntArray = array of Int64;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n\nimplementation\nfunction WN(s: string): Int64;\nvar\n  c: char;\nbegin\n  if s = '' then exit(0);\n  Result := Length(s);\n  for c in s do\n    Result += ord(lowercase(c))-96\nend;\n\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\nvar\n  names: TStringArray;\n  i, j, l, k, x: INt64;\n  r: string;\nbegin\n  \/\/ your code\n  Result := '';\n  names := s.split(',');\n  if high(names) = 0 then exit ('No participants');\n  if n > high(names)+1 then exit ('Not enough participants');\n  for i := low(names) to high(names)-1 do\n    begin\n      l := WN(names[i])*we[i];\n      k := i;\n      for j := i+1 to high(names) do \n        begin\n          if WN(names[j])*we[j] > l then\n            begin\n              l := WN(names[j])*we[j];\n              k := j; \n            end\n          else \n            if (WN(names[j])*we[j] = l) and (names[j] < names[k])  then \n              k := j\n        end;\n      if k <> i then\n        begin\n          r := names[i];\n          names[i] := names[k];\n          names[k] := r;\n          x := we[i];\n          we[i] := we[k];\n          we[k] := x\n        end\n    end;    \n    result := names[n-1];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218359,"user_id":null,"body":"unit Kata;\n{$mode Delphi}\ninterface\n  \ntype TIntArray = array of Int64;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n\nimplementation\n\nuses\n  SysUtils, Classes;\n\nfunction CalculateSOM(const Name: String): Integer;\nconst\n  AlphabetStart = Ord('a') - 1;\nvar\n  s: String;\n  i: Integer;\nbegin\n  Result := Length(Name);\n  s := LowerCase(Name);\n  for i := 1 to Length(s) do\n    Result := Result + Ord(s[i]) - AlphabetStart;\nend;\n\nfunction CompareNames(List: TStringList; Index1, Index2: Integer): Integer;\nvar\n  Num1, Num2: Integer;\nbegin\n  Num1 := CalculateSOM(List[Index1]) * Integer(List.Objects[Index1]);\n  Num2 := CalculateSOM(List[Index2]) * Integer(List.Objects[Index2]);\n  if Num1 = Num2 then\n    Result := CompareText(List[Index1], List[Index2])\n  else\n    Result := Num2 - Num1;\nend;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\nvar\n  Names: TStringList;\n  i: Integer;\nbegin\n  Result := '';\n  if s = '' then\n    Exit('No participants');\n  Names := TStringList.Create;\n  try\n    Names.Delimiter:=',';\n    Names.DelimitedText:=s;\n    if Names.Count < n then\n      Exit('Not enough participants');\n    for i := 0 to Names.Count - 1 do\n      Names.Objects[i] := TObject(we[i]);\n    Names.CustomSort(CompareNames);\n    Result := Names[n - 1];\n  finally\n    Names.Free;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218360,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype TIntArray = array of Int64;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n\nimplementation\nuses SysUtils, StrUtils, Classes;\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\nvar letter: char;\n    lst: TStringList;\n    word: string;\n    count, i, j, len, som: integer;\nbegin\n  if Length(s) = 0 then\n    Exit('No participants');\n  if n > Length(we) then\n    Exit('Not enough participants');\n  result := '';\n  lst := TStringList.Create();\n  for i := 1 To WordCount(s, StdWordDelims) do\n  begin\n    word := ExtractWord(i, s, StdWordDelims);\n    len := Length(word);\n    som := len;\n    for j := 1 To len do\n      begin\n      letter := word[j];\n      if ord(letter) >= ord('a') then\n        som += ord(letter) - ord('a') + 1\n      else\n        som += ord(letter) - ord('A') + 1;\n    end;\n    lst.Add(Format('%d %s', [1000 - som * we[i - 1], word]));\n  end;\n  lst.Sort;\n  result := ExtractWord(2, lst[n - 1], StdWordDelims);\n  lst.Free();\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218361,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype TIntArray = array of Int64;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n\nimplementation\n\nuses\n  SysUtils;\n\ntype\n  PNamWeight = ^TNamWeight;\n  TNamWeight = record\n    Name : string;\n    Weight : Int64;\n  end;\nTNamWeightArray = array of PNamWeight;\n\nfunction Rank(s: String; we: TIntArray; n: Int64): String;\n  function StringWeight(s: String; coeff: Int64): Int64;\n  var i, sm: Int64;\n  begin\n    s := UpperCase(s);\n    sm := Length(s);\n    for i := 1 To Length(s) do\n      sm += Ord(s[i]) - 64;\n    Result := coeff * sm;\n  end;\n  procedure Sort(A: TNamWeightArray);\n    function Compare(const a, b: PNamWeight): integer;\n    var w1, w2: Int64;\n    begin\n      w1 := a^.Weight; w2 := b^.Weight;\n      if (w1 = w2) then\n        Result := CompareText(a^.Name, b^.Name)\n      else\n        Result := w2 - w1;\n    end;\n  var i, nr: Int64; tmp: PNamWeight;\n  begin\n    nr := Length(A);\n    if (nr <= 1) then Exit();\n    i:=0;\n    repeat\n      if (Compare(a[i], a[i+1]) > 0) then\n      begin\n          tmp := a[i];\n          a[i] := a[i+1];\n          a[i+1] := tmp;\n          i := -1;\n      end;\n      Inc(i);\n    until i = nr -1;\n  end;\n\nvar arr: TStringArray; i: Int64; A: TNamWeightArray; R: PNamWeight; s1, res: String;\nbegin\n  if (s = '') then Exit('No participants');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  if (n > Length(arr)) then Exit('Not enough participants');\n  SetLength(A{%H-}, Length(arr));\n  For i := 0 To High(arr) do\n  begin\n    New(R);\n    R^.Name := arr[i];\n    R^.Weight := StringWeight(arr[i], we[i]);\n    A[i] := R;\n  end;\n  Sort(A);\n  s1 := A[n - 1]^.Name;\n  res := Copy(s1, 1, Length(s1));\n  For i := 0 to Length(A) - 1 do\n  begin\n    R := A[i];\n    Dispose(R);\n  end;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"561e9c843a2ef5a40c0000a4":[{"id":218362,"user_id":53,"body":"unit Kata;\n\ninterface\n  \ntype TGap = array [0..1] of Int64; \nfunction IsPrime(n: Int64): boolean;\nfunction Gap(g, m, n: Int64): TGap;\n\nimplementation\n\nconst noGap: TGap = (0, 0);\n\nfunction IsPrime(n: Int64): boolean;\nvar\n  i: Int64;\nbegin\n  Result := true;\n  if n mod 2 = 0 then Exit(n = 2); \n  if n mod 3 = 0 then Exit(n = 3); \n  i := 5;\n  while i * i <= n do begin\n    if n mod i = 0 then Exit(false);\n    if n mod (i + 2) = 0 then Exit(false);\n    i := i + 6;\n  end;\nend;\n\nfunction Gap(g, m, n: Int64): TGap;\nvar\n  a, b, i: Int64;\nbegin\n  a := 0;\n  b := 0;\n  Result := noGap;\n  for i := m to n + 1 do\n  begin\n    if b - a = g then begin\n      Result[0] := a;\n      Result[1] := b;\n      Exit(Result);\n    end;\n    if IsPrime(i) then begin\n      a := b;\n      b := i;\n    end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218363,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype\n  TGap = array [0..1] of Int64; \nfunction Gap(g, m, n: Int64): TGap;\n\nimplementation\n\nconst\n  noGap: TGap = (0, 0);\n\nfunction Gap(g, m, n: Int64): TGap;\n  function IsPrime(n: Int64): Boolean;\n  var i: Int64; res: Boolean;\n  begin\n    if (n = 2) then\n      res := True\n    else if ((n < 3) Or (n Mod 2 = 0)) then\n      res := False\n    else begin\n      i := 3; res := True;\n      while (i * i <= n) do begin\n        if (n Mod i = 0) then begin\n          res := False;\n          break\n        end;\n        i += 2;\n      end;\n    end;\n    Result := res;\n  end;\n\nvar i, p: Int64;\nbegin\n  p := 0;\n  for i := m to n do begin\n    if (IsPrime(i)) then begin\n      if (i - p = g) then begin\n        Result[0] := p;\n        Result[1] := i;\n        Exit(Result);\n      end\n      else\n        p := i\n    end;\n  end;\n  Result := noGap;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218364,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  TGap = array [0..1] of Int64; \nfunction Gap(g, m, n: Int64): TGap;\n\nimplementation\n\nconst\n  noGap: TGap = (0, 0);\n\nfunction Gap(g, m, n: Int64): TGap;\nvar i,k,count: Int64;\n    \/\/Function finds prime numbers----------\n    function findPrime(x: Int64): Int64;\n    var j,int:Int64;\n      begin\n        int := round(sqrt(x));\n        count := 0;\n        for j := 2 to int do\n          begin\n            if x mod j = 0 then \n              begin\n                Inc(count);\n                break;\n              end;\n          end;\n        findPrime := count;\n      end;\n    \/\/---------------------------------------\nbegin\n  Result := noGap;\n  if (g >= 2) and (m > 2) and (n >= m) then \n    begin\n      for i := m to n do \/\/ Search for necessary couple of prime numbers in the interval\n        begin\n          if i + g <= n then\n          begin\n            count := findPrime(i); \/\/m\n            if count = 0 then \n            begin\n              count := findPrime(i+g); \/\/n\n              if count = 0 then\n              begin\n                for k := i+1 to (i + g)-1 do \/\/ Search for prime numbers between the two prime numbers\n                  begin\n                    count := findPrime(k);\n                    if count = 0 then \n                      begin\n                        Inc(count,2);\n                        break;  \n                      end;\n                  end;\n                if count <> 2 then \/\/ If there is no prime numbers between'em then record result and stop all the program\n                begin\n                  Result[0] := i;\n                  Result[1] := i+g;\n                  break;\n                end;\n              end;\n            end;\n          end;\n        end;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5629db57620258aa9d000014":[{"id":218365,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc} \n{$H+}\n\ninterface\n  \nuses \n  SysUtils,\n  Math,\n  Generics.Collections,\n  Generics.Defaults;\n  \nfunction Mix(s1, s2: String): String;\n\nimplementation\n\ntype \n  TDiffRecord = record \n    C: Char;\n    InFirst, InSecond: Integer;\n  end;\n\nfunction CmpDiffs(constref A, B: TDiffRecord): Integer;\nvar MaxA, MaxB: Integer;\n    AC, BC: Char;\nbegin \n  MaxA := Max(A.InFirst, A.InSecond);\n  if A.InFirst > A.InSecond then \n    AC := '1'\n  else if A.InFirst < A.InSecond then \n    AC := '2'\n  else \n    AC := '=';\n    \n  MaxB := Max(B.InFirst, B.InSecond);\n  if B.InFirst > B.InSecond then \n    BC := '1'\n  else if B.InFirst < B.InSecond then \n    BC := '2'\n  else \n    BC := '=';\n  \n  if MaxA > MaxB then \n    Result := -1\n  else if MaxA < MaxB then \n    Result := 1\n  else if AC > BC then \n    Result := 1\n  else if AC < BC then \n    Result := -1\n  else if A.C > B.C then \n    Result := 1\n  else if A.C < B.C then \n    Result := -1\n  else \n    Result := 0;\nend;\n\nfunction Mix(s1, s2: String): String;  \nvar A, B: specialize TDictionary<Char, Integer>;\n    Diffs: specialize TList<TDiffRecord>;\n    TmpDiff: TDiffRecord;\n    c, e: Char;\n    Cnt, i, k, MaxFS: Integer;\n    KVP: specialize TPair<Char, Integer>;\nbegin\n  \/\/ your code\n  \/\/Result := '';\n  Result := '';\n  \n  A := specialize TDictionary<Char, Integer>.Create;\n  B := specialize TDictionary<Char, Integer>.Create;\n  Diffs := specialize TList<TDiffRecord>.Create;\n  try \n    for c in s1 do begin \n      if (c < 'a') or (c > 'z') then \n        Continue;\n    \n      if not A.TryGetValue(c, Cnt) then \n        Cnt := 0;\n      Inc(Cnt);\n      A.AddOrSetValue(c, Cnt);\n    end;\n    \n    for c in s2 do begin\n      if (c < 'a') or (c > 'z') then \n        Continue;\n    \n      if not B.TryGetValue(c, Cnt) then \n        Cnt := 0;\n      Inc(Cnt);\n      B.AddOrSetValue(c, Cnt);\n    end;\n    \n    for KVP in A do begin \n      TmpDiff.C := KVP.Key;\n      if not B.TryGetValue(TmpDiff.C, TmpDiff.InSecond) then \n        TmpDiff.InSecond := 0\n      else \n        B.Remove(TmpDiff.C);\n        \n      TmpDiff.InFirst := KVP.Value;\n      Diffs.Add(TmpDiff);\n    end;\n    \n    for KVP in B do begin \n      TmpDiff.C := KVP.Key;\n      TmpDiff.InSecond := KVP.Value;\n      TmpDiff.InFirst := 0;\n      \n      Diffs.Add(TmpDiff);\n    end;\n    \n    Diffs.Sort(specialize TComparer<TDiffRecord>.Construct(@CmpDiffs));\n    \n    for i := 0 to Diffs.Count - 1 do begin \n      \/\/MaxFS := Max(Diffs[i].InFirst, Diffs[i].InSecond);\n      if Diffs[i].InFirst > Diffs[i].InSecond then begin \n        MaxFS := Diffs[i].InFirst;\n        e := '1';\n      end\n      else if Diffs[i].InFirst < Diffs[i].InSecond then begin \n        MaxFS := Diffs[i].InSecond;\n        e := '2';\n      end\n      else begin \n        MaxFS := Diffs[i].InFirst;\n        e := '=';\n      end;\n      \n      if MaxFS <= 1 then \n        Break;\n      \n      if not (Result = '') then \n        Result := Result + '\/';\n        \n      Result := Result + e + ':';\n      for k := 1 to MaxFS do \n        Result := Result + Diffs[i].C;\n    end;\n  finally\n    A.Free;\n    B.Free;\n    Diffs.Free;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218366,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses\n  SysUtils, Math;\n  \nfunction Mix(s1, s2: String): String;\n\nimplementation\n\ntype\n  TStringArray = array of String;\ntype\n  TArray = array of Int64;\n\nfunction Mix(s1, s2: String): String;\n  procedure Sort(a: TStringArray);\n    function Compare(const a, b: String): integer;\n    var w1, w2: Int64;\n    begin\n      w1 := Length(a); w2 := Length(b);\n      if (w1 = w2) then\n        Result := CompareText(a, b)\n      else\n        Result := w2 - w1;\n    end;\n  var i, nr: Int64; tmp: String;\n  begin\n    i:=0; nr := Length(a);\n    repeat\n      if (Compare(a[i], a[i+1]) > 0) then\n      begin\n          tmp := a[i];\n          a[i] := a[i+1];\n          a[i+1] := tmp;\n          i := -1;\n      end;\n      Inc(i);\n    until i = nr -1;\n  end;\n\n  function ConcatArrayOfStringToString(A: TStringArray): String;\n  var i: Int64; res: String;\n  begin\n    if (Length(A) = 0) then\n      Exit('');\n    res := '';\n    for i := 0 to High(A) do\n    begin\n      res += A[i];\n    end;\n    Result := Copy(res, 1, Length(res) - 1);\n  end;\n\nvar alpha1, alpha2: TArray; i, c, sm, cnt: Int64; r1: String; res: TStringArray;\nbegin\n  SetLength(alpha1, 26);\n  SetLength(alpha2, 26);\n  for i := 0 to Length(s1) do\n  begin\n    c := Ord(s1[i]);\n    if ((c >= 97) And (c <= 122)) then\n        Inc(alpha1[c - 97]);\n  end;\n  for i := 0 to Length(s2) do\n  begin\n    c := Ord(s2[i]);\n    if ((c >= 97) And (c <= 122)) then\n        Inc(alpha2[c - 97]);\n  end;\n  r1 := '';\n  cnt := 0;\n  SetLength(res, 0);\n  for i := 0 to 25 do\n  begin\n    sm := Max(alpha1[i], alpha2[i]);\n    if (sm > 1) then\n    begin\n      Inc(cnt);\n      if (sm > alpha1[i]) then\n        r1 := '2:' + StringOfChar(Chr(i + 97), sm) + '\/'\n      else\n        if (sm > alpha2[i]) then\n          r1 := '1:' + StringOfChar(Chr(i + 97), sm) + '\/'\n        else r1 := '=:' + StringOfChar(Chr(i + 97), sm) + '\/';\n      SetLength(res, cnt);\n      res[cnt - 1] := r1;\n    end;\n  end;\n  if (Length(res) <> 0) then\n    Sort(res);\n  Result := ConcatArrayOfStringToString(res);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"562e274ceca15ca6e70000d3":[{"id":218367,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction LenCurve(n: Int64): Double;\n\nimplementation\n\nfunction LenCurve(n: Int64): Double;\nvar\n  h, deltaX, deltaY, xOld, xNew, yOld, yNew: double;\n  i: Int64;\nbegin\n  \/\/ n = number of intervals\n  \/\/ there are n+1 points on the curve: P0, P1, ..., Pn \n  \n  \/\/ h = equidistant step size = increase in x when stepping from one point to next\n  h:=1\/n; \n  \/\/ Result is accumulating the length of the curve\n  Result := 0.0;\n  \/\/ set x and y to starting values P0 with coordinates (0|0)\n  xOld:=0;\n  yOld:=0;\n  for i:=1 to n do begin\n    \/\/ calculate new coordinates for the next adjacent point\n    xNew:=xOld+h;\n    yNew:=xNew*xNew;\n    \/\/ to calculate the distance from P(old)=(xOld|yOld) to P(new)=(xNew|yNew)\n    deltaX:=h; \/\/ xNew-xOld = h \n    deltaY:=yNew-yOld;\n    \/\/ use Pythagorean theorem to calculate distance P(old) to P(new) and add it to current length of the curve\n    Result:=Result+sqrt(deltaX*deltaX+deltaY*deltaY);\n    \/\/ set P(old) to P(new) to calculate the distance for the next section\n    xOld:=xNew;\n    yOld:=yNew;\n  end; { for }\nend; { LenCurve }\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218368,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction LenCurve(n: Int64): Double;\n\nimplementation\n\nuses\n  Math;\n\nfunction LenCurve(n: Int64): Double;\nvar\n  s: Double = 0;\n  i: Int64;\nbegin\n  for i := 0 to n - 1 do\n    s := s + Hypot(2 * i + 1, n);\n  Result := s \/ Sqr(n);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218369,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction LenCurve(n: Int64): Double;\n\nimplementation\n \nuses SysUtils;\n\nfunction LenCurve(n: Int64): Double;\nvar dx, lg, x, kx: Double; k: Int64;\nbegin\n  dx := 1.0 \/ n; lg := 0.0; x := 0.0;\n  For k := 1 To n do Begin\n    kx := k * dx;\n    lg += Sqrt((kx * kx - x) * (kx * kx - x) + dx * dx);\n    x := kx * kx;\n   end;\n  Result := lg;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"562f91ff6a8b77dfe900006e":[{"id":218370,"user_id":492,"body":"unit Kata;\n\ninterface\n\n  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\n\nuses Math;\n  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar i, sysa: Int64; prevtck, nwtck, sysb: Double;\nbegin\n  i := 0; sysa := 0; sysb := card; prevtck := ticket;\n  while (Ceil(sysb) >= sysa) do\n  begin\n    Inc(i);\n    nwtck := prevtck * perc;\n    sysb += nwtck;\n    prevtck := nwtck;\n    sysa += ticket;\n  end;\n  Result := i;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218371,"user_id":null,"body":"unit Kata;\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\nuses math;\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar a,b,c:double;\nbegin\n  \/\/ your code\n  Movie:=0;\n  a:=0;\n  b:=0;\n  c:=ticket;\n  Repeat\n   Movie:=Movie+1;\n   a:=a+ticket;\n   c:=c*perc;\n   b:=c+b;   \n  Until a>ceil(b+card);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218372,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\nuses math;\n  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar a,b, prevTicket:double;\nbegin\n  Result:=0;\n  a:=0;\n  b:=0;\n  prevTicket:= ticket;\n  Repeat\n   Result:=Result+1;\n   a:=a+ticket;\n   prevTicket:= prevTicket * perc;\n   b:=prevTicket+b;\n  Until a>Ceil(b+card);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218373,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; percent: Double): Int64;\n\nimplementation\n\nuses\n  Math;\n\nfunction Movie(card, ticket: Int64; percent: Double): Int64;\nvar\n  pb, sa, sb: Double;\nbegin\n  pb := ticket;\n  sa := 0;\n  sb := card;\n  result := 0;\n  while sa <= Ceil(sb) do\n  begin\n    pb *= percent;\n    sa += ticket;\n    sb += pb;\n    Inc(result);\n  end\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218374,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\nuses SysUtils, Math;  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar a, i: int64;\n    b: double;\nbegin\n  i := 0;\n  b := 0; \n  repeat\n    inc(i);  \n    a := ticket * i - card;\n    b := b + ticket * power(perc, i);\n  until trunc(a - b) > 0;  \n  Result := i;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218375,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\nuses math;\n\nfunction Movie(Card, Ticket: Int64; Perc: Double): Int64;\n  var\n  PriceSystA, PriceSystB: Real;\n  NrOfVisits: Int64;\nbegin\n  NrOfVisits := 1;\n  PriceSystA := Ticket;\n  PriceSystB := Card + Ticket * Perc;\n  \n  while PriceSystA <= trunc(PriceSystB) + 1 do\n  begin\n    NrOfVisits += 1;\n    PriceSystA += Ticket;\n    PriceSystB += Ticket * Perc ** NrOfVisits;\n  end;\n  \n  Result := NrOfVisits;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218376,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\nuses\n  Math;\n  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar\n  costsSysA, counter: Int64;\n  costsSysB, curTicketSysB: Double;\nbegin\n  \/\/ your code\n  counter:=0;\n  costsSysA:=0;\n  costsSysB:=card;\n  curTicketSysB:=ticket;\n  while (costsSysA <= ceil(costsSysB)) do begin\n    \/\/ costs for a ticket in system A increase by the given fixed amount\n    costsSysA:=costsSysA+ticket;\n    \/\/ costs for a ticket in system B decrease by last ticket price * perc\n    curTicketSysB:=curTicketSysB*perc;\n    costsSysB:=costsSysB+curTicketSysB;\n    counter:=counter+1;\n  end; { while costsSysA <= costsSysB } \n  Result := counter;\nend; { Movie } \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218377,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Math;\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\n  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar\n  system_a, system_b: Double;\n  n: Integer;\nbegin\n  system_a := 0;\n  system_b := card;\n  n := 0;\n  while Ceil(system_a) <= Ceil(system_b) do\n  begin\n    system_a := system_a + ticket;\n    system_b := system_b + ticket * Power(perc, n);\n    inc(n);\n   end;\n  Writeln(Ceil(system_a));\n  Writeln(Ceil(system_b));\n  Result := n - 1;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218378,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\n  \nuses math;\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar\n  n     : Int64;\n  Total, \n  mult  : double;\nbegin\n  \/\/ your code\n  Total := card; n:= 0;\n  mult := perc;\n\n  repeat   \n    Total := Total + (ticket * mult); \n    mult  := mult * perc; inc(n);     \n  until ceil(Total) < (ticket * n);\n  Result := n;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218379,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Movie(card, ticket: Int64; perc: Double): Int64;\n\nimplementation\n  \nfunction Movie(card, ticket: Int64; perc: Double): Int64;\nvar \n  n: integer;\n  s: Double;\nbegin\n  \/\/ your code\n  Result := 1;\n  n := 0;\n  s := card;\n  repeat\n    n := n + 1;\n    s := s + ticket*exp(n*ln(perc))\n  until n*ticket > trunc(s)+1;\n  Result := n \nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56347fcfd086de8f11000014":[{"id":218380,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction ExEuler(nb: Int64): Double;\n\nimplementation\n \nuses SysUtils, Math;\n\nfunction ExEuler(nb: Int64): Double;\n  function Ode(x, y: Double): Double;\n  begin\n    Result := 2 - exp(-4 * x) - 2 * y;\n  end;\n  function Exact(x: Double): Double;\n  begin\n    Result := 1 + 0.5 * exp(-4 * x) - 0.5 * exp(-2 * x);\n  end;\nvar xi, yi, zi, h, err, res: Double; i: Int64;\nbegin\n  yi := 1.0; xi := 0.0; h := 1.0 \/ nb; err := 0.0;\n  For i := 1 To nb do begin\n    yi += ode(xi, yi) * h;\n    xi += h;\n    zi := exact(xi);\n    err += Abs(yi - zi) \/ zi;\n  end;\n  res := err \/ (nb + 1.0);\n  Result := Floor(res * 1e6) \/ 1e6;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"563b662a59afc2b5120000c6":[{"id":218381,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nbegin\n  Result := 0;\n  \/\/ your code\n  if p0 < p then \n    Result := 1 + NbYear(trunc(p0+aug+p0*percent\/100), percent, aug, p)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218382,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\n\nuses\n  math;\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nvar\n  pCur: Int64;        \n  growthRate: Double; \nbegin\n  \/\/ growth rate for population e.g. 2% => 1.02 and 5% => 1.05\n  growthRate:=1+percent\/100;\n  \/\/ years required to reach target population p\n  Result := 0;\n  \/\/ current population = initial population \n  pCur:=p0;\n  while(pCur<p) do begin\n    \/\/ current population after one year = growth of population +\/- migration\n    pCur:=floor(pCur*growthRate)+aug;\n    \/\/ increase year count\n    Result := Result +1;\n  end; { while further growth required }\nend; { NbYear }\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218383,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nvar\nNewP ,YP : integer ;\nbegin\n  \/\/ your code\n  Nbyear := 0 ;\n  NewP := p0 ;\n  while NewP < P do\n  begin\n    YP:= round(NewP * percent)div 100 ;\n    NewP := NewP + YP + aug ;\n    Nbyear := Nbyear + 1 ;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218384,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nVar\n  nPob : Int64;\n  year : integer;\nbegin\n  year := 0;\n  nPob := p0;\n  \n  repeat\n    nPob := trunc(nPob + nPob * percent \/ 100) + aug;\n    inc(year);\n  until nPob >= p; \n  \n  NbYear := year;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218385,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nbegin\n  \/\/ your code\n  NbYear := 0;\n  while p0<p do\n  begin\n  p0:=p0+trunc(p0*percent\/100)+aug;\n  NbYear := NbYear+1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218386,"user_id":null,"body":"unit Kata;\ninterface\nUses math;\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nimplementation\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nvar pop, ujl:Int64;\nbegin\npop:= p0;\nujl:= 0; \nwhile pop < p do \nbegin\npop:= Floor(pop + pop * percent \/ 100 + aug);\nujl:= ujl + 1;\nend;\nwriteln ('\u0440\u0456\u043a = ',ujl);\n  \/\/ your code\n  NbYear := ujl;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218387,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n  var i : Int64;\nbegin\n  i := 0;\n  while (p0 < p) do begin\n    writeln(i); writeln(p0); writeln(p);\n    p0 := p0 + Trunc(p0 * (percent \/ 100)) + aug;\n    i := i + 1;\n  end;\n  \n  Exit(i);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218388,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nbegin\n  if (p0 >= p) then \n    NbYear := 0\n  else \n    Result := 1 + NbYear(trunc(p0 + aug + p0 * percent * 0.01), percent, aug, p);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218389,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nbegin\n  if (p0 >= p) then NbYear := 0\n  else \n    Result := NbYear(trunc(p0 + aug + p0 * percent * 0.01), percent, aug, p) + 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218390,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\n\nimplementation\nuses math;\nfunction NbYear(p0: Int64; percent: Double; aug, p: Int64): Int64;\nbegin\n  if (p0 >= p) then NbYear := 0\n  else \n    Result := NbYear(Math.floor(p0 + aug + p0 * percent * 0.01), percent, aug, p) + 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"563f0c54a22b9345bf000053":[{"id":218391,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n  Result := trunc(power(2, n));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218392,"user_id":168,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\n  var one: Int64;\nbegin\n    one := 1;\n    Result := one shl n;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218393,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n    Result := Int64(1) shl n;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218394,"user_id":53,"body":"unit Kata;\n\ninterface\nUses Math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n    Result := Round(Power(2, n));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218395,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nvar i:byte;\nbegin\n    \/\/ your code\n    Result:=1;\n    for i:=1 to n do Result *= 2;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218396,"user_id":76,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n    Result := 2 ** n;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218397,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n  Fcn := Int64(1) shl n;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218398,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n  Result := Int64(1) shl n;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218399,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fcn(n: Int64): Int64;\n\nimplementation\n\nfunction Fcn(n: Int64): Int64;\nbegin\n    Result := Trunc(IntPower(2, n));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"564057bc348c7200bd0000ff":[{"id":218400,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\nconst pattern : array[0..5] of Integer = (1, 10, 9, 12, 3, 4);\nvar prev, j, Sum : Int64;\nbegin\n  prev := 0;\n  Result := n;\n  while prev <> Result do begin\n    prev := Result;\n    Sum := 0;\n    j := 0;\n    while Result > 0 do begin\n      Inc(Sum, pattern[j] * (Result mod 10));\n      Result := Result div 10;\n      j := (j + 1) mod 6;\n    end;\n    Result := Sum;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218401,"user_id":53,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\nvar\n  y,p: Int64;\nbegin\n  y := 0;\n  while (n >= 99) do\n  begin\n    p := 1;\n    while (n > 0) do\n    begin\n      y := y + (n Mod 10) * (p Mod 13);\n      n := n Div 10;\n      p := p * 10;\n    end;\n    n := y;\n    y := 0;\n  end;\n  Result := n;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218402,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Reduce(n: Int64; m: Int64): Int64;\nbegin\n  if n = 0\n  then Result := 0\n  else Result := n mod 10 * m + Reduce(n div 10, m * 10 mod 13);\nend;\n\nfunction Thirt(n: Int64): Int64;\nvar n2: Int64;\nbegin\n  n2 := Reduce(n, 1);\n  if n2 = n\n  then Result := n\n  else Result := Thirt(n2);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218403,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\nVAR\n  val, i, j, sum: Int64;\n  a: ARRAY [1..6] OF INTEGER;\n  b: BOOLEAN;\n  \nbegin\n  a[1] := 1;\n  a[2] := 10;\n  a[3] := 9;\n  a[4] := 12;\n  a[5] := 3;\n  a[6] := 4;\n  b := FALSE;\n  Result := 0;\n  j := n;\n  WHILE b <> TRUE DO BEGIN\n   i := 1;\n   sum := 0;\n    WHILE j > 0 DO BEGIN\n      val := j MOD 10;\n      sum := sum + val * a[i];\n      j := j DIV 10;\n      i := i + 1;\n      IF i = 7 THEN\n        i := 1;\n    END; \/\/ WHILE\n  IF Result = sum THEN\n    b := TRUE;\n  Result := sum;\n  j := sum;\nEND; \/\/ WHILE\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218404,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\n  function Method(n: Int64): Int64;\n  const\n    SEQ: array [1..6] of Int64 = (1, 10, 9, 12, 3, 4);\n    SEQLEN:Int64 = 6;\n  var i: Int64;\n  begin\n    Result := 0;\n    i := 0;\n    while n > 0 do begin\n      Result += (n mod 10) * SEQ[((i mod SEQLEN)+1)];\n      n := n div 10;\n      Inc(i);\n    end\n  end;\n\nvar m: Int64;\nbegin\n  Result := 0;\n  m := n;\n  while m <> Result do begin\n    Result := m;\n    m := Method(m);\n  end\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218405,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(num: Int64): Int64;\n\nimplementation\n\nfunction Thirt_iter(numIter: Int64) : Int64;\n  var\n     digit, factor, powTen, sum :  Int64;\nbegin\n   {initialize the sum and power of 10}\n   sum := 0;\n   powTen := 1;\n   \n   while numIter > 0 do\n   begin\n     { split the number into digits moding and dividing by 10}\n     digit := numIter mod 10;\n     numIter := numIter div 10;\n     \n     { get the multiply factor by taking the mod of 13 the current power of 10.}\n     factor := powTen mod 13;\n     \n     { update the sum}\n     sum := sum + digit * factor;\n\n     { update the power of 10}\n     powTen := powTen * 10;\n   end;\n   Thirt_iter := sum;\nend;\n   \n\n\nfunction Thirt(num: Int64): Int64;\n  var \n   numNext, sum, sumPrev : Int64;\nbegin\n  sum := 0;\n  sumPrev := -1;\n  numNext := num;\n  { continue calling the iter until the method converges }\n  while sum <> sumPrev do\n  begin\n    sumPrev := sum;\n    sum := Thirt_iter(numNext);\n    numNext := sum;\n  end;\n  Result := sum;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218406,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\n\nvar\n   i, Digito, x, code, Fin:integer;\n   Total, Resultado :Int64;\n   Test : Byte;\n   Num : string;\n   Constante :Boolean;\nconst\n(* constante de carculo*)\n   multi : array[1..6] of integer = (1, 10,\n     9, 12, 3, 4);\nbegin\n (* inicio de tas bariables de conteo*)\n Test:=0;\n\n Resultado := 0;\n \n Fin:=0;\n \n Constante:=False;\n  \n  x := 1;\n  \n  Total := n;\n  (* iniciamos el bucle de busqueda*)\n  repeat \n  (* se combierte el numero en cadena*)\n  str(Total,Num);\n  (* operacion digito a digito y sumatoria de\n  resultado*)\n  for i := length(Num) downto 1 do\n  \n      begin\n       val(Num[i],Digito,code);\n         \n     Resultado := Digito * multi[x]+Resultado;\n         (* reinicio de array de carculo*)\n         if x = 6 then\n            x:=1\n          else\n            inc(x);\n      end;   \n      (* se comprueba si el total del bucle anterior\n      se repite*)\n  if Fin = Resultado then\n       inc(Test)\n      else\n        Fin:=Resultado;\n        (* se comprueva si se alcanso la constante\n         o se reinician las variables para repetir\n            operacion*)\n  if Test = 3 then\n       Constante := True\n     else\n        begin \n       Total:=Resultado;\n       Resultado := 0;\n       x:=1;\n       end;\n    (* fin de la operacion si Constante es Verdad*)\n   until Constante;\n   (* debolucion de datos *)\n  Thirt := Total;\n  end;\n  end.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218407,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\n  function recThirt(val: Int64): Int64;\n  var\n    i, j: integer;\n    tempval: Int64;\n    res: array [0 .. 5] of integer;\n  begin\n    tempval := 0;\n    res[0] := 1;\n    res[1] := 10;\n    res[2] := 9;\n    res[3] := 12;\n    res[4] := 3;\n    res[5] := 4;\n    j := 0;\n    for i := Length(inttostr(n)) downto 1 do\n    begin\n      tempval := tempval + (strtoint(copy(inttostr(n), i, 1)) * res[j]);\n      inc(j);\n      if j = 6 then\n        j := 0;\n    end;\n    result := tempval;\n  end;\n\nbegin\n  repeat\n    n := recThirt(n);\n  until (n = recThirt(n));\n  Result := n;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218408,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction Thirt(n: Int64): Int64;\n\nimplementation\n\nfunction Thirt(n: Int64): Int64;\nvar w: array[0..5] of Int64 = (1, 10, 9, 12, 3, 4); r, q, c, j: Int64;\nbegin\n  while (True) do\n  begin\n    r := n; q := -1; c := 0; j := 0;\n    while (q <> 0) do\n    begin\n      q := r Div 10;\n      c += (r Mod 10) * w[j Mod 6];\n      r := q;\n      Inc(j);\n    end;\n    if (c = n) then\n    begin\n      Exit(c);\n    end;\n    n := c;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56445c4755d0e45b8c00010a":[{"id":218409,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fortune(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\n\nimplementation\n\nfunction FortuneItrativeSolution(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\nvar\n  curYear, curWithdrawl, curSavings: Int64;\n  growthRate, inflationRate: Double;\nbegin\n    curYear:=1;       \/\/ year counter, starting withdrawls after 1st year\n    curWithdrawl:=c0;\n    curSavings:=f0;\n    \/\/ expressing percentages as rates\n    growthRate:=1+(p \/ 100);\n    inflationRate:=1+(i \/ 100);\n    writeln('Year fn cn');\n    writeln('0 ', curSavings, ' ', curWithdrawl);\n    while (curYear<n) and\n          (curSavings>=curWithdrawl) do begin\n      \/\/ recalculate amount of savings and withdrawl\n      curSavings:=Trunc(curSavings*growthRate)-curWithdrawl;\n      curWithdrawl:=Trunc(curWithdrawl*inflationRate);\n      curYear:=curYear+1;   \/\/ increase year counter\n      writeln(curYear, ' ', curSavings, ' ', curWithdrawl);\n    end; { while there are years to go and current withdrawl is possible }\n    Result := (curYear=n);  \/\/ return if we have been successful \nend; { FortuneItrativeSolution }\n\n\nfunction FortuneRecursiveSolution(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\nvar\n  f_next, c_next, n_next: Int64;\n  growthRate, inflationRate: Double;\nbegin\n  if (f0>=c0) then\n  begin\n    \/\/ there is currently enough money for withdrawl\n    \n    \/\/ p and i should be given as rates then re-calculation could be avoided\n    growthRate:=1+(p \/ 100);\n    inflationRate:=1+(i \/ 100);\n   \n    f_next:=Trunc(f0*growthRate)-c0;  \/\/ remaining savings\n    c_next:=Trunc(c0*inflationRate);  \/\/ new inflaction corrected withdrawl amount\n    n_next:=n-1;  \/\/ decrease the number of year we have to go\n    if (n>1) then\n      \/\/ recursive call for calculation of next year   \n      Result:=FortuneRecursiveSolution(f_next, p, c_next, n_next, i)\n    else\n      \/\/ n=1, we are done with the last year\n      Result:=true;\n  end\n  else\n    \/\/ there is not enough money for the current withdrawl\n    Result:=false;\nend; { FortuneRecursiveSolution }\n\n\nfunction Fortune(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\nbegin\n    \/\/ Solution 1: iterative solution\n    \/\/ should be more performant\n    Result:=FortuneItrativeSolution(f0, p, c0, n, i);\n    \n    \/\/ Solution 2: recursive solution \n    \/\/ n-1 since we are withdrawing money after first year\n    \/\/Result:=FortuneRecursiveSolution(f0, p, c0, n-1, i);\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218410,"user_id":53,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Aux(f0: Double; p: Double; c0: Double; n: Int64; i: Double): Double;\nfunction Fortune(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\n\nimplementation\n\nfunction Aux(f0: Double; p: Double; c0: Double; n: Int64; i: Double): Double;\nbegin\n  if n = 1 then Exit(f0);\n  Result := Aux(f0 + f0 * Floor(p) \/ 100.0 - c0, p, c0 + c0 * Floor(i) \/ 100.0, n - 1, i);\nend; \n\nfunction Fortune(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\nvar\n  ans: Double;\nbegin\n  ans := Aux(f0, p, c0, n, i);\n  Result := ans >= 0.0;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218411,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction Fortune(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\n\nimplementation\n\nfunction Fortune(f0: Int64; p: Double; c0: Int64; n: Int64; i: Double): Boolean;\nvar prevX, prevC, nouX, nouC, k: Int64;\nbegin\n    prevX := f0; prevC := c0;\n    nouX := -1; nouC := -1;\n    for k := 1 to n - 1 do\n    begin\n        nouX := Floor(prevX + p \/ 100.0 * prevX - prevC);\n        nouC := Floor(prevC + i \/ 100.0 * prevC);\n        prevX := nouX;\n        prevC := nouC;\n    end;\n    Result := (nouX >= 0);\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56541980fa08ab47a0000040":[{"id":218412,"user_id":492,"body":"unit Kata;\n\ninterface\nfunction PrinterError(s: String): String;\n\nimplementation\nuses SysUtils, RegExpr;\n\nfunction PrinterError(s: String): String;\nvar re: TRegExpr; cnt: Integer;\nbegin\n  cnt := 0;\n  re := TRegExpr.Create;\n  re.Expression := '[^a-m]';\n  if re.Exec(s) then repeat\n    Inc(cnt);\n  until not re.ExecNext;\n  Result := Format('%d\/%d', [cnt, Length(s)]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218413,"user_id":53,"body":"unit Kata;\n\ninterface\nfunction PrinterError(s: String): String;\n\nimplementation\nUses sysutils;\nfunction PrinterError(s: String): String;\nvar m, n: Int64; c: Char;\nbegin\n  n := Length(s);\n  m := 0;\n  for c in s do\n  begin\n    if ((Ord(c) < 97) or (Ord(c) > 109)) then m := m + 1;\n  end;\n  Result := Format('%d\/%d', [m, n]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218414,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction PrinterError(s: String): String;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction PrinterError(s: String): String;\nvar\n  e: SizeInt = 0;\n  c: Char;\nbegin\n  for c in s do\n    if c > 'm' then\n      Inc(e);\n  Result := IntToStr(e) + '\/' + IntToStr(Length(s));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218415,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction PrinterError(s: String): String;\n\nimplementation\n\nuses\n  sysutils;\n  \nfunction PrinterError(s: String): String;\nvar\n  i, StrLen, ErrCount: integer;\nbegin\n  \/\/ get length of string and store it since we need it multiple times\n  StrLen:=Length(s);\n  \/\/ initialize error counter with zero\n  ErrCount:=0;\n  \/\/ iterate over string s and count errors\n  for i:=1 to StrLen do begin\n    if (ord(s[i])-ord('m')>0) then\n      \/\/ current letter is not in the range from a to m. Current letter counts as error\n      \/\/ therefore we increase the error count.\n      ErrCount:=ErrCount+1;\n  end; { for each letter }\n  Result := IntToStr(Errcount)+'\/'+IntToStr(StrLen);\nend; { PrinterError }\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218416,"user_id":null,"body":"unit Kata;\n\ninterface\nuses SysUtils;\nfunction PrinterError(s: String): String;\nimplementation\nfunction PrinterError(s: String): String;\nvar\n  repaitedStrCount: Integer;\n  chr: Char;\nbegin\n  repaitedStrCount := 0;\n  for chr in s do\n    if not(chr in ['a'..'m']) then\n      Inc(repaitedStrCount);  \n  Result := IntToStr(repaitedStrCount) + '\/' + IntToStr(length(s));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218417,"user_id":null,"body":"unit Kata;\n\ninterface\nfunction PrinterError(s: String): String;\nimplementation\n\nuses SysUtils;\n\nfunction PrinterError(s: String): String;\nvar\n  cnterr, index : integer;\nbegin\n  cnterr := 0;\n  for index := low(s) to high(s) do\n    if not (s[index] in ['a'..'m']) then \n       inc(cnterr);\n  Result := inttostr(cnterr)+'\/'+inttostr(length(s));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218418,"user_id":null,"body":"unit Kata;\n\ninterface\nfunction PrinterError(s: String): String;\nimplementation\nuses SysUtils;\n\nfunction PrinterError(s: String): String;\nvar\n  i, errs:integer;\nbegin\n  \/\/ your code\n  errs := 0;\n  for i:= 1 to length(s) do \n    if not (s[i] in ['a'..'m']) then\n      errs := errs + 1;\n  Result := inttostr(errs)+'\/'+IntToStr(length(s))\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218419,"user_id":null,"body":"unit Kata;\n\ninterface\nfunction PrinterError(s: String): String;\nimplementation\nUses sysutils;\nfunction PrinterError(s: String): String;\nvar\n e,l,i:integer;\n \nbegin\n  \/\/ your code\n  e:=0;\n  l:=length(s);\n  for i:=1 to l do\n   if ord(s[i])>109 then e:=e+1;\n  Result := IntToStr(e)+'\/'+IntToStr(l);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218420,"user_id":null,"body":"unit Kata;\ninterface\nUses sysutils;\nfunction PrinterError(s: String): String;\nimplementation\nfunction PrinterError(s: String): String;\nvar k, i, c, r, p: Int64;\nright, o : string;\nb:  boolean;\nbegin\nc:=0;\nright := 'abcdefghijklm';\nk := Length(s); \/\/\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e c\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\np := Length(right); \/\/\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e c\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n  for i := 1 to k do\n    begin\n    b:= true;\n    for r := 1 to p do  \n      if s[i] = right[r] then b:=false;\n    if b then c:=c+1;\n    end;\no:= IntToStr (c)+'\/' + IntToStr (k);\n\/\/ your code\n  Result := o;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218421,"user_id":null,"body":"unit Kata;\n\ninterface\nfunction PrinterError(s: String): String;\nimplementation\nfunction IntToStr(a: integer):string;\nbegin\n  str(a, result);\nend;\n\nfunction PrinterError(s: String): String;\nvar i, error:integer;\nbegin\n  error:=0;\n  for i:=1 to length(s) do if s[i]>'m' then inc(error);\n  Result := IntToStr(error) + '\/' +IntToStr(length(s));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5656b6906de340bd1b0000ac":[{"id":218422,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(s1, s2: String): String;\ntype\n    Letters = 'a'..'z';\nvar\n    s3: string = '';\n    c: Letters;\nbegin\n    for c:= 'a' to 'z' do\n    if (pos(c, s1) > 0) or (pos(c, s2) > 0) then\n        s3:= s3 + c;\n    Longest := s3\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218423,"user_id":null,"body":"unit Kata;\n\ninterface\n\n   function Longest(s1, s2: String): String;\n\n\nimplementation\n\n\nfunction Deduplicate (s: string): string;           { Removing duplicate characters from a string }\nvar \n   i, j,                             { Loop variables used for indices for the char in the string }\n   len          : integer;           { Length of the original string                              }\n   resultString : string;            { The string to accumulate deduplicated result string        }\n   \nbegin\n   len := Length (s);                { Getting the length                                         }\n   resultString := '';               { Initializing the resultString                              }\n   \n   for i := 1 to len do              { Looping through all the chars in the string to deduplicate }\n      begin\n         if s[ i ] = ' ' then continue;    { if there is no character to compare, go for next one }\n         for j := i + 1 to len do          { Replacing duplicate characters with a space          }\n            if s[ j ] = s[ i ] then s[ j ] := ' ';\n         if s[ i ] <> ' ' then resultString := resultString + s[ i ]; { not space - add to result }\n      end;   \n      \n   Deduplicate := resultString;      { Returning function result                                  }      \nend; { Deduplicate }\n\nprocedure SwapAB(var a, b: char);    { Swapping two characters. Used by the procedure SortChar()  }\nvar c: char;                         { a char, to temporary store one value                       }  \nbegin\n   c := a;                           { saving value of a                                          }\n   a := b;                           { writing value of b to a                                    }\n   b := c;                           { writing saved value of a to b                              }\nend; { SwapAB }\n\nprocedure SortChar(Var S: String);   { Sorts characters in the string using bubble sort           }\nvar i, j     : integer;              { Loop variables                                             }\n    len      : integer;              { Length of the string \/ length of the \"unsorted\" string     }  \n    swapFlag : boolean;              { A flag, to track if there any swaps                        }\nbegin\n    len := Length ( S );             { Getting the tail                                           }\n    i := 1;                          { Will start from the beginning to the string                } \n    repeat\n        swapFlag := False;           { There were no swaps in this iteration                      }\n        for j := i + 1 to len do     { Sweeping through the unsorted part of the string           }  \n            if (S[ j - 1 ] > S[ j ]) { comparing neighbouring characters                          }\n                then begin           { and if the one preceeding is \"bigger\"                      } \n                        SwapAB (S[ j - 1], S[ j ]); { swaping it with the one standing after it   }\n                        SwapFlag := True;           { there was a need to swap this iteration     }\n                     end; \n        len := len - 1;              { The biggest-reached the end: shortening the unsorted range }\n    Until (swapFlag = False);        { Flag = false, means string is sorted                       }\nend; { SortChar }\n\nfunction Longest(s1, s2: String): String; { The main funcion for the task of the KATA             }\nvar\n    str : String;                    { The string to keep working\/result data                     }\nbegin \n    str := s1 + s2;                  { Concatenating strings                                      }\n    str := Deduplicate (str);        { Removing duplicate characters from the concatenated string }  \n    SortChar (str);                  { Sorting the string without duplicate characters            }\n    Longest := str;                  { Returning the result                                       }\nend; { Longest }\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218424,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Longest(const s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(const s1, s2: String): String;\nvar\n  cs: set of 'a'..'z' = [];\n  c: Char;\n  n: SizeInt;\nbegin\n  for c in s1 do\n    Include(cs, c);\n  for c in s2 do\n    Include(cs, c);\n  n := 0;\n  for c in cs do\n    Inc(n);\n  SetLength(Result, n);\n  n := 0;\n  for c in cs do\n  begin\n    Inc(n);\n    Result[n] := c;\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218425,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(s1, s2: String): String;\nvar\n  c: char;\nbegin\n  Longest := '';\n  \n  for c := 'a' to 'z' do\n    if (pos(c, s1) > 0) or (pos(c, s2) > 0) then\n      Longest := Longest + c;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218426,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(s1, s2: String): String;\nvar\n  i: integer;\n  alphabet: array[0..255] of integer;\n  restr: string;\nbegin\n  restr := '';\n  for i := 0 to 255 do\n      alphabet[i] := 0;\n  for i := 0 to length(s1) do begin\n    if (length(s1) <> 0) and (alphabet[ord(s1[i])] = 0) then\n      inc(alphabet[ord(s1[i])]);\n  end;\n\n  for i := 0 to length(s2) do begin\n    if (length(s2) <> 0) and (alphabet[ord(s2[i])] = 0) then\n      inc(alphabet[ord(s2[i])]);\n  end;\n\n  for i := 97 to 122 do\n    if alphabet[i] > 0 then\n      restr := restr + char(i);\n  result := restr;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218427,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\nfunction MyInsert(s_in,s_out:string):string;\n\nimplementation\n\nfunction MyInsert(s_in,s_out:string):string;\nvar\n i,j:integer;\nbegin \n result := s_out;\n for i:=1 to length(s_in) do\n  if pos(s_in[i],result)=0 then\n   begin \n    j:=1;\n    while ((j<=length(result)) and (s_in[i]>result[j])) do\n     j:=j+1;\n    insert(s_in[i],result,j); \n   end;\n \nend;\n  \nfunction Longest(s1, s2: String): String;\nbegin\n result:=MyInsert(s1,''); \n result:=MyInsert(s2,result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218428,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(s1, s2: String): String;\nvar \n  l: set of char;\n  c: char;\nbegin\n  \/\/ your code\n  Result := '';\n  l := [];\n  for c in s1 do\n    l := l + [c];\n  for c in s2 do\n    l := l + [c];\n  for c := 'a' to 'z' do\n    if c in l then\n      Result := Result + c\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218429,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n\nuses Classes, SysUtils;\n  \nfunction Longest(s1, s2: String): String;\nvar AList: TStringList;\n    I: Integer;\n    s: string;\nbegin\n  try\n    s := s1 + s2;\n    AList := TStringList.Create;\n    with AList do try \n      Sorted := True;\n      Duplicates := dupIgnore;\n      for I := 0 to Length(s) do Add(s[I]);\n      s := DelimitedText;\n      AList.Text := '';\n    finally Free;\n    end;\n    Result := StringReplace(s, ',', '', [rfReplaceAll, rfIgnoreCase]); \n    Result := Trim(Stringreplace(Result, '\"', '', [rfReplaceAll, rfIgnoreCase]));\n  except on E:Exception do writeln();\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218430,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(s1, s2: String): String;\nvar\n  lChar: Char;\nbegin\n  s1 := s1+s2;\n  \n  for lChar := 'a' to 'z' do\n  begin\n    if pos(lChar, s1) > 0  then\n     if pos(lChar, result) = 0 then\n        result := result + lChar;\n  end;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218431,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Longest(s1, s2: String): String;\n\nimplementation\n  \nfunction Longest(s1, s2: String): String;\nvar\n    i,j:byte;res:string;chk:boolean;\nbegin\n    for i:=97 to  122 do \n    begin\n        chk:=true;\n        for j := 1 to length(s1) do\n        begin\n            if i = ord(s1[j]) then \n            begin\n                res:=res+s1[j];\n                chk:=false;\n                break;\n            end;\n        end;\n        if chk = true then\n        begin\n            for j:=1 to length(s2) do\n            begin\n                if i = ord(s2[j]) then \n                begin\n                    res:=res+s2[j];\n                    break;\n                end;\n            end;\n        end;\n    end;\n    Longest:=res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"565abd876ed46506d600000d":[{"id":218432,"user_id":53,"body":"unit Kata;\ninterface\nfunction Simpson(n: Int64): Double;\nimplementation\nuses Math;\nfunction Simpson(n: Int64): Double;\nbegin\n  Result := PI\/n*(1+2*Power(Cos(PI\/n),3)+3*Cos(2*PI\/n))\/(Sin(3*PI\/n));\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218433,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Simpson(n: Int64): Double;\n\nimplementation\n \nuses SysUtils, Math;\n\nfunction Simpson(n: Int64): Double;\n  function f(x: Double): Double; begin Result := 1.5 * Power(Sin(x), 3); end;\nvar h, s1, s2: Double; i, j: Int64;\nbegin\n  h := PI \/ n;\n  s1 := 0.0;\n  For i := 1 To n Div 2 do\n    s1 += f((2 * i - 1) * h);\n  s2 := 0.0;\n  For j := 1 To (n Div 2) - 1 do\n    s2 += f(2 * j * h);\n  Result := PI \/ (3 * n) * (f(0) + f(PI) + 4 * s1 + 2 * s2);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218434,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Simpson(n: Int64): Double;\n\nimplementation\n \nfunction Simpson(n: Int64): Double;\nconst\na = 0;\nb = pi;\nvar\ni, sigm1, sigm2: int64;\nres, res1, res2, x, fx, fx1, fx2, h: double;\nbegin\n \n  fx1 := 3 * sin(a) * sin(a) * sin(a) \/ 2;\n  fx2 := 3 * sin(b) * sin(b) * sin(b) \/ 2;\n\n \n  h := (b-a) \/ n;\n\n  sigm1 := n div 2;\n  sigm2 := (n div 2) - 1;\n    for i:= 1 to sigm1 do begin\n      x:= a + (2* i - 1) * h;\n      res1 := res1 + 3 * sin(x) * sin(x) * sin(x) \/ 2;\n      end;\n    for i := 1 to  sigm2 do begin\n      x:= a + (2 * i * h);\n      res2 := res2 + 3 * sin(x) * sin(x) * sin(x) \/ 2;\n      end;\n      res := (b-a) * (fx1 + fx2 + 4*res1 + 2*res2) \/ (3 * n);\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218435,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Simpson(n: Int64): Double;\n\nimplementation\n \nfunction Simpson(n: Int64): Double;\nconst\na = 0;\nb = pi;\nvar\ni, sigm1, sigm2: int64;\nres, res1, res2, x, fx, fx1, fx2, h: double;\nbegin\n  if (a <= b) and (n > 0) then\n  fx1 := (3 * sin(a) * sin(a) * sin(a)) \/ 2;\/\/exp(3*sin(a));\n  fx2 := (3 * sin(b) * sin(b) * sin(b)) \/ 2;\/\/exp(3*sin(b));\n  x:= 0;\n  fx:= 3 * sin (x*x*x) \/ 2;\/\/exp(3*sin(x));\n  h := (b-a) \/ n;\n  res1:= 0;\n  res2:= 0;\n  sigm1 := n div 2;\n  sigm2 := (n div 2) - 1;\n    for i:= 1 to sigm1 do begin\n      x:= a + (2* i - 1) * h;\n      res1 := res1 + (3 * sin(x) * sin(x) * sin(x) \/ 2);\n      end;\n    for i := 1 to  sigm2 do begin\n      x:= a + (2*i*h);\n      res2 := res2 + (3 * sin(x) * sin(x) * sin(x) \/ 2);\n      end;\n      res := (b-a) * (fx1 + fx2 + 4*res1 + 2*res2) \/ (3*n);\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218436,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Simpson(n: Int64): Double;\n\nimplementation\n\nuses\n  math;\n\nfunction F(x: Double): Double;\nbegin\n  Result := 1.5 * IntPower(Sin(x), 3);\nend;\n\nfunction Simpson(n: Int64): Double;\nvar\n  a, b, h, s, yl, ym, yr: Double;\n  i: Int64;\nbegin\n  a := 0;\n  b := Pi;\n  h := (b - a) \/ n;\n  s := 0;\n  yr := F(a);\n  for i := 1 to n div 2 do\n  begin\n    yl := yr;\n    ym := F(a + (2 * i - 1) * h);\n    yr := f(a + (2 * i) * h);\n    s := s + yl + 4 * ym + yr;\n  end;\n  result := s * h \/ 3;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"565c0fa6e3a7d39dee000125":[{"id":218437,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Dist(v, mu: Double): Double;\nfunction Speed(d, mu: Double): Double;\n\nimplementation\nconst\n  g = 9.81 {m\/s^2};\n  \nfunction Dist(v{km\/h}, mu: Double): Double; \/\/ suppose reaction time is 1\nvar\n  dperception, dbraking: Double;\nbegin\n  dperception := v*(1000\/3600)*1{s}; \/\/ distance in meter travelled in one second before bracking starts\n  dbraking := v*v*(1000\/3600*1000\/3600) \/ (2*mu*g); \/\/ braking distance in meter till the car stops\n  Result := dperception + dbraking; \/\/ total distance in meter till car stops\nend; { Dist }\n\nfunction Speed(d{m}, mu: Double): Double;\/\/ suppose reaction time is 1\nbegin\n  \/\/ this is the formula on line 18 rearranged to yield speed in km\/h\n  Result := sqrt((sqr(3600\/1000)*2*mu*g*d)+sqr(3600\/1000*mu*g))-((3600\/1000)*mu*g);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218438,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Dist(v, mu: Double): Double;\nfunction Speed(d, mu: Double): Double;\n\nimplementation\n\nfunction Dist(v, mu: Double): Double; \/\/ suppose reaction time is 1\nbegin\n  Result := sqr(v*10\/36)\/(2*mu*9.81)+(v*10\/36*1);\nend;\n\nfunction Speed(d, mu: Double): Double;\/\/ suppose reaction time is 1\nbegin\n  if ( 1+2*d\/mu*9.81 >=0 ) \n    then \n      begin\n        if (-1+sqrt(1+2*d\/(mu*9.81))*mu*9.81) > 0 \n          then Result := (-1+sqrt(1+2*d\/(mu*9.81)))*mu*9.81*3.6\n          else Result := (-1-sqrt(1+2*d\/(mu*9.81)))*mu*9.81*3.6;\n      end;\n    end;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218439,"user_id":53,"body":"unit Kata;\n\ninterface\nuses math;\nfunction Dist(v, mu: Double): Double;\nfunction Speed(d, mu: Double): Double;\n\nimplementation\n\nfunction Dist(v, mu: Double): Double;\nvar u: Double;\nbegin\n  u := v * 5.0 \/ 18.0;\n  Result := u + u * u \/ (2.0 * mu * 9.81);\nend;\n\nfunction Speed(d, mu: Double): Double;\nvar b: Double;\nbegin\n  b := -2.0 * mu * 9.81;\n  Result := 3.6 * (b + sqrt(b * b - 4.0 * b * d)) \/ 2.0;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218440,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Dist(v, mu: Double): Double;\nfunction Speed(d, mu: Double): Double;\n\nimplementation\n \nuses SysUtils, Math;\n\nfunction Dist(v, mu: Double): Double; \/\/ suppose reaction time is 1\nvar g, coef, dreact, vms, dbrak: Double;\nbegin\n  g := 9.81;                          \/\/ acceleration due to gravity in m\/s\n  coef := 1000.0 \/ 3600.0;            \/\/ km\/h -> m\/s\n  dreact := v * coef;                 \/\/ distance of reaction with t := 1\n  vms := coef * v;                    \/\/ speed in m\/s\n  dbrak := 0.5 * Power(vms, 2) \/ mu \/ g;  \/\/ braking distance\n  Result := dreact + dbrak;           \/\/ total distance\nend;\n\nfunction Speed(d, mu: Double): Double;\/\/ suppose reaction time is 1\nvar g, coef: Double;\nbegin\n  g := 9.81;                          \/\/ acceleration due to gravity in m\/s\n  coef := 3600 \/ 1000.0;              \/\/ m\/s -> km\/h\n  Result := 0.5 * mu * g * (- 2 + Sqrt(4 + 8*d\/mu\/g)) * coef;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5663f5305102699bad000056":[{"id":218441,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\nUses math;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar\n  x, y: string;\nbegin\n  Result := -1;\n  for x in a1 do\n    for y in a2 do\n      Result := Max(Result, Abs(length(x) - length(y)));\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218442,"user_id":76,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray) : Int64;\n\nimplementation\nuses Math;\n\nfunction MxDifLg(a1, a2: TStringArray) : Int64;\nvar amin, amax, bmin, bmax, len : Integer;\nvar word: String;\nbegin\n  if (Length(a1) = 0) or (Length(a2) = 0) then exit(-1);\n  amin := 999;\n  bmin := 999;\n  amax := 0;\n  bmax := 0;\n  for word in a1 do begin\n    len := Length(word);\n    amin := Min(amin, len);\n    amax := Max(amax, len);\n  end;\n  for word in a2 do begin\n    len := Length(word);\n    bmin := Min(bmin, len);\n    bmax := Max(bmax, len);\n  end;\n  Result := Max(Abs(amax - bmin), Abs(bmax - amin));\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218443,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nuses\n  math;\n\nfunction FindMinMaxLenInArray(const strArr: TStringArray; var minLen, maxLen: Int64): boolean;\nvar\n  curLen: Int64;\n  str: string;\nbegin\n  if (length(strArr)=0) then\n    \/\/ string array is empty\n    Exit(false);\n  \n  \/\/ there is at least one string in array\n  minLen:=Length(strArr[0]);\n  maxLen:=minLen;\n  for str in strArr do begin\n    curLen:=length(str);\n    if (curLen<minLen) then\n      minLen:=curLen;\n    if (curLen>maxLen) then\n      maxLen:=curLen;\n  end; { for each string in array }\n  Result:=true;\nend; { FindMinMaxLenInArray }\n\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar\n  minLen1, maxLen1, minLen2, maxLen2, Option1, Option2: Int64;\nbegin\n  \/\/ exit if one of the arrays is empty\n  if (length(a1)=0) or (length(a2)=0) then\n    Exit(-1);\n  \n  \/\/ find min and max lengths of the strings in the arrays\n  FindMinMaxLenInArray(a1, minLen1, maxLen1);\n  FindMinMaxLenInArray(a2, minLen2, maxLen2);\n  \n  \/\/ there are only two options to find the maximum\n  Option1:=abs(minLen1 - maxLen2);\n  Option2:=abs(maxLen1 - minLen2);\n  \n  if (Option1 > Option2) then\n    Result:=Option1\n  else  \n    Result:=Option2;\nend; { MxDifLg }\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218444,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nVar\n  i, min1, max1, min2, max2 : integer;\nbegin\n  Result := -1;\n  if (length(a1)>0) and (length(a2)>0) then\n    begin  \n      min1 := length(a1[low(a1)]); \/\/ Same as.. length(a1[0])\n      max1 := min1;\n\n      for i:=succ(low(a1)) to high(a1) do\n        begin \n          if length(a1[i])<min1 then min1 := length(a1[i]);\n          if length(a1[i])>max1 then max1 := length(a1[i])\n        end;  \n\n      min2 := length(a2[low(a2)]);\n      max2 := min2;\n\n      for i:=succ(low(a2)) to high(a2) do\n        begin \n          if length(a2[i])<min2 then min2 := length(a2[i]);\n          if length(a2[i])>max2 then max2 := length(a2[i])\n        end;  \n\n\n      if (max2-min1) > (max1-min2) then\n        Result := max2-min1\n      else  \n        Result := max1-min2\n    end     \nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218445,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar\n  minx, maxx, miny, maxy, i: int64;\n  x: TStringArray;\nbegin\n  \/\/ your code\n  Result := 0;\n  if (high(a1) = -1) or (high(a2) = -1) then \n    begin \n      Result := -1;\n      exit\n    end;\n  minx := length(a1[0]);\n  maxx := minx;\n  miny := length(a2[0]);\n  maxy := miny;\n  for i := 1 to high(a1) do\n    begin \n      if length(a1[i]) > maxx then \n        maxx := length(a1[i]);\n      if length(a1[i]) < minx then \n        minx := length(a1[i]);\n    end;    \n  for i := 1 to high(a2) do\n    begin \n      if length(a2[i]) > maxy then \n        maxy := length(a2[i]);\n      if length(a2[i]) < miny then \n        miny := length(a2[i])\n    end;\n    if abs(minx - maxy) >= abs(maxx - miny) then\n      Result := abs(minx - maxy)\n    else\n      Result := abs(maxx - miny)\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218446,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\n  function MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar\n  IA1, IA2, CurrentDif: Integer;\nbegin\n  MxDifLg := -1;\n  \n  if (Length(a1) <> 0) and (Length(a2) <> 0) then\n  begin\n    MxDifLg := -1;\n    CurrentDif := 0;\n    for IA1 := 0 to Length(a1)-1 do\n      for IA2 := 0 to Length(a2)-1 do\n      begin\n        CurrentDif := Abs(Length(a1[IA1]) - Length(a2[IA2]));\n        if CurrentDif > MxDifLg then\n          MxDifLg := CurrentDif;\n      end;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218447,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nuses math;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar i, len, min_a1, min_a2, max_a1, max_a2: int64;\nbegin\n  if (length(a1) = 0) or (length(a2) = 0) then\n  begin\n    Result := -1;\n    exit;\n  end;\n\n  len := length(a1[0]);\n  min_a1 := len;\n  max_a1 := len;\n  for i := 1 to length(a1) - 1 do\n  begin\n    len := length(a1[i]);\n    if len < min_a1 then\n      min_a1 := len;\n    if len > max_a1 then\n      max_a1 := len;\n  end;\n\n  len := length(a2[0]);\n  min_a2 := len;\n  max_a2 := len;\n  for i := 1 to length(a2) - 1 do\n  begin\n    len := length(a2[i]);\n    if len < min_a2 then\n      min_a2 := len;\n    if len > max_a2 then\n      max_a2 := len;\n  end;\n  \n  Result := max(max_a1 - min_a2, max_a2 - min_a1);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218448,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, Math;\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar\n  vsa1Low, vsa2Low, vsa1High, vsa2High : String;\n  difa1a2 : TStringArray;\n  I : Integer;\nbegin\n  if (length(a1) = 0) or (length(a2) = 0) then\n  begin\n    Result := -1;\n    exit;\n  end  \n  else\n  begin\n    vsa1Low := a1[0];\n    vsa2Low := a2[0];\n    vsa1High := a1[0];\n    vsa2High := a2[0];\n\n    for I := 0 to length(a1) - 1 do\n    begin\n      if length(a1[I]) > length(vsa1High) then\n        vsa1High := a1[I];\n\n      if length(a1[I]) < length(vsa1Low) then\n        vsa1Low := a1[I];\n    end;\n    for I := 0 to length(a2) - 1 do\n    begin\n      if length(a2[I]) > length(vsa2High) then\n        vsa2High := a2[I];\n\n      if length(a2[I]) < length(vsa2Low) then\n        vsa2Low := a2[I];\n    end;\n    difa1a2 := TStringArray.Create(IntToStr(abs(length(vsa1High) - length(vsa2Low))), IntToStr(abs(length(vsa2High) - length(vsa1Low))));\n  end; \n  \n  Result := max(StrToInt(difa1a2[0]), StrToInt(difa1a2[1]));\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218449,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nvar max, i, j: Integer;\nbegin\n  \/\/ your code\n  max := -1;\n  for i := 0 to length(a1) - 1 do\n  for j := 0 to length(a2) - 1 do\n     if abs(length(a1[i]) - length(a2[j])) > max then max := abs(length(a1[i]) - length(a2[j]));\n\n  Result := max;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218450,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  TStringArray = array of string;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\n\nimplementation\nuses Math;\n\nfunction MxLg(a: TStringArray):Int64;\nvar\n   i : Int64;\nbegin\n   Result := 0;\n   for i := 0 to Length(a)- 1 do\n     if Length(a[i]) > Result\n       then Result := Length(a[i]);\nend;\n\nfunction MnLg(a: TStringArray):Int64;\nvar\n  i : Int64;\nbegin\n  Result := Length(a[0]);\n  for i := 1 to Length(a) - 1 do\n    if Length(a[i]) < Result\n      then Result := Length(a[i]);\nend;\n\nfunction MxDifLg(a1, a2: TStringArray): Int64;\nbegin\n  if (Length(a1) = 0) Or (Length(a2) = 0)\n    then Result := -1\n    else Result := Max( Abs( MxLg(a1) - MnLg(a2) ), Abs( MnLg(a1) - MxLg(a2) ) );\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"566543703c72200f0b0000c9":[{"id":218451,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\n\nimplementation\n\nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\nvar\n  dt, s, i, r, sl, il, rl  : double;\nbegin\n  \/\/ your code\n  Result := 0;\n  dt := tm\/n;\n  s := s0;\n  i := i0;\n  repeat\n    sl := s;\n    il := i;\n    s := sl - dt*b*sl*il;\n    i := il + dt*(b*sl*il-a*il);\n  until i<il;\n  result := trunc(il)\nend;\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218452,"user_id":53,"body":"unit Kata;\n\ninterface\n  \nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\n\nimplementation\n\nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\nvar\n    s, i, r, t, dt, sd, id, rd : Real;\n    imax : Int64;\nbegin\n    s := REAL(s0);\n    i := REAL(i0);\n    r := REAL(0);\n    t := REAL(0);\n    dt := REAL(tm) \/ REAL(n);\n    imax := 0;\n    \n    while ( t < REAL(tm) ) do\n    begin\n        sd := dt*(-b*s*i);\n        id := dt*(b*s*i-a*i);\n        rd := dt*(a*i);\n        s := s + sd;\n        i := i + id;\n        r := r + rd;\n        t := t + dt;\n        if trunc(i) > imax then\n             imax := trunc(i)\n    end;\n    \n    Result := imax;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218453,"user_id":527,"body":"unit Kata;\n\ninterface\n  \nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\n\nimplementation\n\nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\nvar\n  dt, s, i, r, s1, i1, r1: Double;\nbegin\n  dt := tm \/ n;\n  s := s0;\n  i := i0;\n  r := 0;\n  repeat\n    s1 := s - dt * b * s * i;\n    i1 := i + dt * (b * s * i - a * i);\n    r1 := r + dt * i * a;\n    if i1 < i then\n      break;\n    s := s1;\n    i := i1;\n    r := r1;\n  until false;\n  result := Trunc(i);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218454,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\n\nimplementation\n\nuses SysUtils, Math;\n\nfunction Epidemic(tm, n, s0, i0: Int64; b, a: Double): Int64;\nvar maxInfected, step: Int64; i, r, dt, s, ds, dr, di: Double;\nbegin\n  maxInfected := i0;\n  dt := 1.0 * tm \/ n;\n  i := i0; s := s0; r := 0.0;\n  for step := 1 to n do\n  begin\n    ds := -dt * b * s * i;\n    di := dt * (b * s * i - a * i);\n    dr := dt * a * i;\n    s += ds; i += di; r += dr;\n    if (maxInfected < i) then maxInfected := Floor(i);\n  end;\n  Result := maxInfected;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5667e8f4e3f572a8f2000039":[{"id":218455,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Accum(s: String): String;\n\nimplementation\n\nuses\n  StrUtils, SysUtils;\n\nfunction Accum(s: String): String;\nvar\n  ws: array of String;\n  i: SizeInt;\nbegin\n  SetLength(ws, Length(s));\n  for i := 1 to Length(s) do\n    ws[i - 1] := StringOfChar(s[i], i);\n  result := AnsiProperCase(String.Join('-', ws), ['-']);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218456,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\nvar \na, b, e: string;\nn, i, l, x, c: integer;\n\nfunction Accum (s: string): string;\nbegin\nl:= length(s);\nn:= 0;\nfor i:= 1 to l do \n  begin\n    n:= n + 1;\n    x:= n;\n    c:= 0;\n      while x <> 0 do\n      begin\n        if c = 0 then\n        begin\n        b:= UpCase(s[i]);\n        c:= c + 1;\n        a:= a + b;\n        end;\n      if x = 1 then\n      begin\n      x:= x - 1;\n      end\n      else\n      begin\n      a:= a + LowerCase(s[i]);\n      x:= x - 1;\n      end;\n      end;\n    if i <> l then\n    begin\n    a:= a + '-';\n    end;\n  end;\n  \n  Result := a  ;\n  a:=''\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218457,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nfunction Accum (s: string): string;\nvar\ni,j,l:int64;\nr:string;\nbegin\n  i:=1;\n  r:='';\n  for i:=1 to length(s) do\n  begin\n    r:=r+UpCase(s[i]);\n    for j:=1 to i-1 do\n     r:=r+lowercase(s[i]);\n    r:=r+'-';\n  end;\n  delete(r,length(r),1);\n  Result := r;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218458,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nuses SysUtils;\n\nfunction Accum (s: string): string;\nvar\n  ucase: String;\n  i: Integer;\nbegin\n  ucase := AnsiUpperCase(s);\n  Result := '';\n  Result += ucase[1];\n  for i := 2 to Length(ucase) do\n    Result += '-' + ucase[i] + StringOfChar(AnsiLowerCase(s)[i], i-1);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218459,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nuses SysUtils;\n\nfunction Accum (s: string): string;\nvar len, i: integer;\nvar c: char;\nbegin\n  len := Length(s);\n  Result := '';\n  for i := 1 to len do\n  begin\n    c := LowerCase(s[i]);\n    if (Length(Result) <> 0) then Result += '-';\n    Result += UpperCase(c);\n    Result += StringOfChar(c, i - 1);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218460,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nfunction Accum (s: string): string;\nvar i,j,st,en :integer; s1:string;\nbegin\ns1:='';\n\n  for i:=1 to length(s) do \n  begin\n    s1:= s1 + upcase(s[i]);\n    for j:=0 to i-2 do \n      s1:= s1 + lowercase(s[i]);\n   if i < length(s) then s1:=s1 +'-';\n  end;\n  writeln(s);\n  Result := s1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218461,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\nuses StrUtils, SysUtils;\n  var ws: array of String;\n  i: SizeInt;\nfunction Accum (s: string): string;\nbegin\nbegin\n  SetLength(ws, Length(s));\n  for i := 1 to Length(s) do\n    ws[i - 1] := StringOfChar(s[i], i);\n  result := AnsiProperCase(String.Join('-', ws), ['-']);\nend;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218462,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nfunction Accum (s: string): string;\nvar \n  i, j  : integer;\n  ns    : string;\nbegin\n  Result := '';\n  ns := '';\n  for i := 1 to length(s) do\n    begin\n      ns := ns + upcase(s[i]);\n      for j := 2 to i do\n        ns := ns + lowercase(s[i]);\n      ns := ns + '-'\n    end;\n  delete(ns, length(ns), 1);\n  Result := ns\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218463,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction MultiplyLetter(c: char; n: integer): string;\nvar\n  i: integer;\n  lc: char;\nbegin\n  lc := LowerCase(c);\n  result := UpperCase(c);\n  for i := 1 to n - 1 do begin\n    result := result + lc;\n  end;\nend;\n\n\nfunction Accum (s: string): string;\nvar\n  i: integer;\nbegin\n  result := '';\n  for i := 1 to Length(s) do begin\n    if (Length(result) > 0) then\n      result := result + '-';\n    result := result + MultiplyLetter(s[i], i);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218464,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Accum (s: string): string;\n\nimplementation\n\nuses SysUtils;\n\nfunction Accum (s: string): string;\n\n  function GetStr(s1: string; count: integer; CheckEnd: Integer = 0): string;\n  var c: integer;\n  begin\n    Result := UpperCase(s1[1]);\n    if count = 0 then Exit;\n    for c := 1 to count - 1 do begin\n      Result := Result + LowerCase(s1);\n    end;\n    if CheckEnd <> 1 then Result := Result + '-';\n  end;\n\nvar str: string;\n    I: Integer;\nbegin\n  str := '';\n  for I := 0 to Length(s) do begin\n    if I = Length(s) then str := str + GetStr(s[I], I, 1)\n    else str := str + GetStr(s[I], I, 0);\n  end;\n  Result := Trim(str);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"566be96bb3174e155300001b":[{"id":218465,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nvar\n  t, tm, g, h, vms: Double;\nbegin\n  \/\/ your code\n  Result := 0; \n  result := round(v0*25\/9\/9.81)\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218466,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nvar \n  Time, TimeAtMaxHeight, i              : Int64;\n  Height, g, velocity, MaxHeight                 : Double;\n\nbegin\n  \/\/ Let's initialise variables and constancs\n  g := 9.81;\n  velocity := v0 * 1000\/3600;\n  TimeAtMaxHeight := Trunc(velocity \/ g * 10); \/\/Finding time  (decimal of seconds as int) at witch the maximum height is reached\n  MaxHeight := 0;\n  \n  \/\/looping through siblings of gotten time find the time of record\n  for i := TimeAtMaxHeight-1 to TimeAtMaxHeight+1 do\n  begin\n    Height := velocity * i \/ 10 - 0.5 * g * i * i \/ 100;\n    if MaxHeight < Height then\n      begin\n      MaxHeight := Height;\n      Time := i;\n      end;\n  end;\n\n  Result := Time;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218467,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\n\n  const\n  G = 9.81;\n\n  var\n  mps0 : Real;\n  t : Real;\n  h : Real;\n\nbegin\n  mps0 := v0 * 10 \/ 36;\n  t := 0;\n  h := mps0 * t - 0.5 * g * t * t;\n\n  while (h < mps0 * (t + 0.1) - 0.5 * g * (t + 0.1) * (t + 0.1)) do\n  begin\n    h := mps0 * (t + 0.1) - 0.5 * g * (t + 0.1) * (t + 0.1);\n    t := t + 0.1\n  end;\n  MaxBall := Round(t * 10)\nend;   \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218468,"user_id":50,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nbegin\n  Result := (((v0 * 56630) + 100000) Div 200000);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218469,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nconst g = 9.81;\nvar h,max,v:real;\n    t:word;\nbegin\n  t := 0;\n  max := 0;\n  v := v0 * 1000 \/ 360;\n  repeat\n    Inc(t);\n    h := (v * t) - 0.5 * g * t * t;\n    if max <= h then max := h\n    else t -= 1;\n  until max > h;\n  Result := t;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218470,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nconst\n  g : real = 9.81;\nvar\n  V0ms : real;\nbegin\n  V0ms := v0*1000\/3600;\n  MaxBall := round((V0ms\/g)*10);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218471,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nconst\n  g = 9.81;\nvar\n  t, v: Real;\nbegin\n  v := v0 * 1000.0 \/ 3600.0;\n  t := v \/ g;\n  MaxBall := Round(t * 10.0);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218472,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction MaxBall(v0: Int64): Int64;\n\nimplementation\n\nfunction MaxBall(v0: Int64): Int64;\nbegin\n  Result := Round(v0 \/ 3.5316);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"566fc12495810954b1000030":[{"id":218473,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nvar k: Int64;\nbegin\n  Result := 0;\n  while (n >= 0) do\n  begin\n    k := n * n;\n    while(k <> 0) do\n    begin\n      if ( k Mod 10 = d) then Inc(Result);\n      k := k Div 10;\n    end;\n    Dec(n);\n  end;\n  if (d = 0) then Inc(Result);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218474,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nvar i, sq, sum : int64;\nbegin\n  \/\/ your code\n  sum := 0;\n  if d = 0 then\n    sum := 1;\n  for i:=1 to n do\n    begin\n      sq:= i*i;\n      while sq > 0 do\n       begin\n        if d = sq mod 10 then\n            sum:= sum + 1;\n        sq:= sq div 10; \n       end;\n    end;\n    NbDig := sum;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218475,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nvar\n i,k:Int64;\nbegin\n  \/\/ your code\n  Result:=0;\n  for i:= 1 to n do\n   begin\n    k:=i*i;\n    while k>0 do\n     begin\n      if k mod 10 = d then\n       result:=result+1;\n      k:=k div 10; \n     end;  \n   end;\n   if d=0 then result:=result+1;\n   \nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218476,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses SysUtils;\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\n\nvar\n  i, j : integer;\n  s : string;\n  \nbegin \n  Result := 0 ;\n  for i := 0 to n do\n  begin\n    s := intToStr(i*i);\n    for j := 1 to length(s) do\n    begin\n      if s[j] = intToStr(d) then\n        Result := Result + 1 ;\n    end\n  end\n  \nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218477,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nvar\n  i, ni, nj, cnt: Int64;\nbegin\n  \/\/ your code\n  ni := n;\n  cnt := 0;\n  while ni >= 0 do\n    begin\n      nj := ni*ni;\n      while nj > 0 do\n        begin\n          if nj mod 10 = d then inc(cnt);\n          nj := nj div 10\n        end;\n      dec(ni)\n    end  ;\n    Result := cnt + ord (ni+1=d)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218478,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nvar r: Int64;\nbegin\n  Result := 0;\n  if (d = 0) then Inc(Result);\n  while (n >= 0) do\n  begin\n    r := n * n;\n    while (r <> 0) do\n    begin\n      if (r Mod 10 = d) then Inc(Result);\n      r := r Div 10;\n    end;\n    Dec(n);\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218479,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nvar i,j,k : Int64;\nbegin\n  j := 0;\n  for i := 0 to n do begin\n    k := i * i;\n    if (d = 0) and (k = 0) then Inc(j);\n    while k > 0 do begin\n      if (k mod 10) = d then Inc(j);\n      k := k div 10;\n    end;\n  end;\n  Result := j;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218480,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\nconst\ndivider = 10;\nvar\ni, res, squared, modulo: Int64;\nbegin\nres := 0;\nfor i := 0 to n do\nbegin\n squared := i * i; \n  while squared <> 0 do\n  begin\n  modulo := squared mod divider;\n  if d = modulo then \n  begin\n  res := res + 1;\n  end;\n  squared := Trunc(squared \/ 10);\n  end;\nend;\n  if d = 0 then res := res + 1;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218481,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\nuses \n  sysutils;\nfunction NbDig(n, d: Int64): Int64;\nvar\n  lText: string;\n  lIndex: Integer;\n  lChar: Char;\nbegin\n  result := 0;\n\n  for lIndex := 0 to n do\n  lText := lText + IntToStr(lIndex*lIndex);\n\n  \n  for lChar in lText do\n  begin\n    if StrToInt(lChar) = d then\n    inc(Result);\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218482,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction NbDig(n, d: Int64): Int64;\n\nimplementation\n\nfunction NbDig(n, d: Int64): Int64;\n\n  var\n  IntSquare : Int64;\n  StrSquare : String;\n  StrD : String;\n  i : Int64;\n  j : Int64;\n\nbegin\n  NbDig := 0;\n  Str(d, StrD);\n  for i := 0 to n do\n  begin\n    IntSquare := i * i;\n    Str(IntSquare, StrSquare);\n    for j := 1 to Length(StrSquare) do\n    begin\n      if (StrSquare[j] = StrD) then\n        NbDig := NbDig + 1\n    end\n  end\nend; \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5672682212c8ecf83e000050":[{"id":218483,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction dbl_linear(n: Int64): Int64;\n\nimplementation\n\nfunction dbl_linear(n: Int64): Int64;\nvar seq: array of Int64;\nvar a, b, i, y, z: Int64;\nbegin\n  a := 0;\n  b := 0;\n  i := 1;\n  SetLength(seq, n);\n  seq[0] := 1;\n  for i := 1 to n do\n  begin\n    y := seq[a] * 2 + 1;\n    z := seq[b] * 3 + 1;\n    if y < z then begin\n      seq[i] := y;\n      a += 1;\n    end;\n    if y > z then begin\n      seq[i] := z;\n      b += 1;\n    end;\n    if y = z then begin\n      seq[i] := y;\n      a += 1;\n      b += 1;\n    end;\n  end;\n  Result := seq[n];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218484,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction dbl_linear(n: Int64): Int64;\n\nimplementation\n\nfunction dbl_linear(n: Int64): Int64;\nvar\n    u: array of Int64;\n    i, x, y, a, b: integer;\nbegin\n    x := 0;\n    y := 0;\n    SetLength(u, n + 1);\n    u[0] := 1;\n    for i := 1 to n do\n    begin\n        a := 2 * u[x] + 1;\n        b := 3 * u[y] + 1;\n        if (a < b) then\n        begin\n            u[i] := a;\n        end\n        else\n        begin\n            u[i] := b;\n        end;\n        if u[i] = 2 * u[x] + 1 then\n        begin\n            x += 1;\n        end;\n        if u[i] = 3 * u[y] + 1 then\n        begin\n            y += 1;\n        end;\n    end;\n    Result := u[n];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218485,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction dbl_linear(n: Int64): Int64;\n\nimplementation\n\nuses\n  gpriorityqueue, gutil;\n\nfunction dbl_linear(n: Int64): Int64;\ntype\n  TMinHeap = specialize TPriorityQueue<Int64, specialize TGreater<Int64>>;\nvar\n  i, x: Int64;\nbegin\n  with TMinHeap.Create do\n  begin\n    Push(1);\n    for i := 1 to n do\n    begin\n      x := Top;\n      Pop;\n      if not IsEmpty and (Top = x) then Pop;\n      Push(2 * x + 1);\n      Push(3 * x + 1);\n    end;\n    Result := Top;\n    Destroy;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218486,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction dbl_linear(n: Int64): Int64;\n\nimplementation\n\nuses\n  math;\n\nfunction dbl_linear(n: Int64): Int64;\nvar\n  xs: array of Int64;\n  nxs: Int64 = 0;\n  n2: Int64 = 0;\n  n3: Int64 = 0;\n  x2: Int64 = 1;\n  x3: Int64 = 1;\n  i, x: Int64;\nbegin\n  SetLength(xs, n + 1);\n  for i := 0 to n do\n  begin\n    x := Min(x2, x3);\n    xs[nxs] := x;\n    Inc(nxs);\n    if x = x2 then\n    begin\n      x2 := 2 * xs[n2] + 1;\n      Inc(n2);\n    end;\n    if x = x3 then\n    begin\n      x3 := 3 * xs[n3] + 1;\n      Inc(n3);\n    end\n  end;\n  Result := xs[n];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218487,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction dbl_linear(n: Int64): Int64;\n\nimplementation\n\nfunction dbl_linear(n: Int64): Int64;\ntype\n  IntegerArray = array of Integer;\nvar A: IntegerArray; i, i2, i3, k2, k3, z: Int64;\nbegin\n  SetLength(A, n + 1);\n  A[0] := 1;\n  i := 1; i2 := 0; i3 := 0;\n  while (i <= n) do\n  begin\n    k2 := A[i2] * 2 + 1;\n    k3 := A[i3] * 3 + 1;\n    if (k2 < k3) then z := k2 else z := k3;\n    A[i] := z;\n    if (k2 = z) then Inc(i2);\n    if (k3 = z) then Inc(i3);\n    Inc(i);\n  end;\n  Result := A[n];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"567501aec64b81e252000003":[{"id":218488,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\n  \nuses Math;\n\nfunction WallPaper(l, w, h: Double): String;\nvar numbers: array of String = ('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven',\n    'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\n    r: Double;\nbegin\n    if ((l = 0) Or (w = 0) Or (h = 0)) then Exit('zero');\n    r := (( (l + w) * 2 * h) \/ 5.2) * 1.15;\n    Result := numbers[Ceil(r) -1];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218489,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\nuses math;\n\nfunction WallPaper(l, w, h: Double): String;\n  const\n  numbers: array[0..20] of String = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\n  var\n  nrOfRolls: Integer;\n  \nbegin\n  if (l = 0) or (w = 0) or (h = 0) then\n    nrOfRolls := 0\n  else\n    nrOfRolls := Trunc((2 * l * h + 2 * w * h) * 1.15 \/ 5.2) + 1;\n\n  Result := numbers[nrOfRolls];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218490,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\nuses math;\nfunction WallPaper(l, w, h: Double): String;\nconst \n  numbers : array of string = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', \n                                'eleven', 'twelve','thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', \n                                'nineteen', 'twenty'); \n  wp : double = 10*0.52\/1.15;\nbegin\n    \/\/ your code\n    Result := '';\n    \/\/write(2*h*(l+w)\/wp);\n    if l*w*h = 0 then \n      Result := 'zero'\n    else\n      Result := numbers[ceil(2*h*(l+w)\/wp)]\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218491,"user_id":53,"body":"unit Kata;\n\ninterface\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\nuses Math;\nfunction WallPaper(l, w, h: Double): String;\nvar ns: array of String = (\n  'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', \n  'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\nbegin\n    if (l * w * h = 0) then Exit('zero');\n    Result := ns[Ceil(((l + w) * 2.3 * h) \/ 5.2) - 1];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218492,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\n\nfunction WallPaper(l, w, h: Double): String;\nvar\n  numbers: array[0..20] of string = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', \n  'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', \n  'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\nvar\n  res: double;\n  n: integer;\nbegin\n    if (l = 0.0) or (w = 0.0) then begin\n      WallPaper := numbers[0];\n      exit\n    end;\n    res := (l+w)*2*h*1.15\/10\/0.52;\n    if res = 0.0 then n := 0\n    else n := 1 + trunc(res);\n    WallPaper := numbers[n];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218493,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\nuses Math;\nfunction WallPaper(l, w, h: Double): String;\nconst\n lNumbers: Array of string = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve','thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\nvar\n lCountRolls: Integer;\n\nbegin\n    lCountRolls := Ceil(((l*h*2+w*h*2)*1.15)\/ 5.2);\n    \n    if l*h*w > 0 then\n    Result := lNumbers[lCountRolls]\n    else\n    result := lNumbers[0];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218494,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\n\nfunction WallPaper(l, w, h: Double): String;\n\nvar \nnumbers : array[0..20] of string = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve','thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\nr : integer;\nsquare : double;\n\nroll_square : double = 5.2;\n\nrolls : double;\n\nbegin\n    \n    if (l = 0) or (w = 0) or (h = 0) then begin Result := numbers[0]; exit; end;\n    \n    square := (l  + w) * h * 2 * 1.15;\n    \n    rolls := (square \/ roll_square);\n    \n    \/\/ your code\n    Result := numbers[trunc(rolls) + 1];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218495,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction WallPaper(l, w, h: Double): String;\n\nimplementation\n\nuses Math;\n\nfunction WallPaper(l, w, h: Double): String;\nvar\n walls : double;\n rolls : integer;\n numbers : array of string = ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve','thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty');\n \nbegin\n    if w*l*h >0 then\n    begin\n      walls := (2 * (l*h) + 2*(w*h))\/52*10;\n      rolls := ceil(walls + walls * 0.15);\n    end\n    else\n     rolls := 0;\n    Result := numbers[rolls];\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"569218bc919ccba77000000b":[{"id":218496,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction DateNbDays(a0, a, p: Double): String;\n\nimplementation\n  uses DateUtils, sysutils;\n  \nfunction DateNbDays(a0, a, p: Double): String;\nvar\n  lDate:TDateTime;\n  FormatSettings: TFormatSettings;\nbegin\n  FormatSettings.ShortDateFormat := 'YYYY-MM-DD';\n\n  lDate := 42370;\n\n    while  a0 < a do\n    begin\n     a0 := a0 + (a0\/100 * (p)) \/ 360;\n\n     lDate := incDay(lDate);\n    end;\n  \n  Result := DateTimeToStr(lDate, FormatSettings);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218497,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction DateNbDays(a0, a, p: Double): String;\n\nimplementation\n\nuses SysUtils, DateUtils, Math;\n\nfunction DateNbDays(a0, a, p: Double): String;\nvar start, nd: TDateTime; r: Int64;\nbegin\n  FormatSettings.ShortDateFormat := 'YYYY-MM-DD';\n  start := StrToDate('2016-01-01');\n  r := Ceil(Ln(a \/ a0) \/ Ln(1 + p \/ 36000.0));\n  nd := IncDay(start, r);\n  Result := DateToStr(nd);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"569b5cec755dd3534d00000f":[{"id":218498,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar\n s:Double;\n i:integer;\nbegin\n  \/\/ your code\n  s:=0;\n  for I := Low(Arr) to High(Arr) do\n   s:=s+arr[i];\n   \n  Result := Round(navg*(High(Arr)+2)-s);\n  if Result<0 then\n   Result:=-1; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218499,"user_id":53,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\nUses math;\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar s, n, x: Double;\nvar i: Int64;\nbegin\n  n := Length(arr);\n  s := 0.0;\n  i := 0;\n  while i < n do begin\n    s := s + arr[i];\n    i := i + 1;\n  end;\n  x := navg * (n + 1) - s;\n  if (x < 0.0) then Result := -1\n  else Result := Ceil(x);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218500,"user_id":492,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\nuses SysUtils, Math;\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar lg, i: Int64; s, add: Double;\nbegin\n  s := 0; lg := Length(arr);\n  for i := 0 to lg - 1 do\n     s := s + arr[i];\n  add := (lg + 1) * navg - s;\n  if (add <= 0) then\n      Exit(-1);\n  NewAvg := Ceil(add);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218501,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\nuses SysUtils, Math; \nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar\n  i, r, l : integer;\n  s, n : double;\nbegin\n  \/\/ your code\n  Result := -1;\n  s := 0;\n  l := length(arr);\n  if l > 0 then\n    for i := 0 to l-1 do\n      s += arr[i];  \n  n := navg*(l+1) - s;\n  r := trunc(n) + ord(frac(n) <> 0);\n  if r >= 0 then\n    Result := r;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218502,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\nuses math;\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar \n  i : Integer;\n  s : Double;\nbegin\n  s := 0;\n  for i := 0 to length(arr) - 1 do begin\n    s := s + arr[i];\n  end;\n  Result := ceil(navg * (length(arr) + 1) - s);\n  if Result <= 0 then Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218503,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar\n  lIndex: Integer;\n  lSum:Double;\nbegin\nlSum := 0;\n\n  for lIndex := 0 to length(arr)-1 do\n  begin\n  lSum := lSum + arr[lIndex];\n  end;\n  \n  result := round(navg*(length(arr)+1) -lSum);\n  if result <-1 then result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218504,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\n\nuses\n  Math;\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nvar\n  i: Integer;\n  NextDonation: Double;\nbegin\n  NextDonation := navg * (Length(arr) + 1);\n  for i := 0 to Length(arr) - 1 do\n    NextDonation := NextDonation - arr[i];\n\n  if NextDonation > 0 then\n    Result := Ceil(NextDonation)\n  else\n    Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218505,"user_id":null,"body":"unit Kata;\n\ninterface\ntype TDoubleArray = array of Double;\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\n\nimplementation\nuses Math;\n\nfunction NewAvg(arr: TDoubleArray; navg: Double): Int64;\nbegin\n  Result := ceil(navg * length(arr) + navg - sum(arr));\n  if Result < 0 then Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56a32dd6e4f4748cc3000006":[{"id":218506,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Mean(town, s: String): Double;\nfunction Variance(town, s: String): Double;\n\nimplementation\n\nuses SysUtils, Math;\n\n  type\n  DoubleArray = array[0..11] of Double;\n\nfunction getRelevantData(town, s: String): DoubleArray;\n  var\n  townDataArray: DoubleArray;\n  posTown, posLineEnd, posNextComma, i: Integer;\n  newData: Double;\n  townDataset, dataExtract, subStr: String;\n  stillDataThere: Boolean;\nbegin\n  posTown := Pos(town, s);\n  dataExtract := copy(s, posTown);\n  posLineEnd := Pos(LineEnding, dataExtract);\n  if posLineEnd <> 0 then\n    townDataset := copy(s, posTown, posLineEnd-1)\n  else\n    townDataset := copy(s, posTown);\n\n  townDataset := StringReplace(townDataset, 'Jan', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Feb', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Mar', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Apr', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'May', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Jun', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Jul', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Aug', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Sep', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Oct', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Nov', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, 'Dec', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, town, '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, ':', '', [rfReplaceAll]);\n  townDataset := StringReplace(townDataset, ' ', '', [rfReplaceAll]);\n\n  stillDataThere := true;\n  i := 0;\n  while stillDataThere do\n  begin\n    posNextComma := Pos(',', townDataset);\n    if posNextComma <> 0 then\n    begin\n      subStr := copy(townDataset, 1, posNextComma - 1);\n      delete(townDataset, 1, posNextComma);\n    end\n    else\n    begin\n      subStr := copy(townDataset, 1);\n      stillDataThere := false;\n    end;\n    newData := StrToFloat(subStr);\n    townDataArray[i] := newData;\n    i := i + 1;\n  end;\n  getRelevantData := townDataArray;\n  \nend;\n\nfunction TownInDataset(town, s: String): Boolean;\n  var\n  position: Integer;\nbegin\n  position := Pos(town, s);\n  TownInDataset := ((position <> 0) and (s[position+Length(town)] = ':'));\nend;\n\nfunction Mean(town, s: String): Double;\n  var\n  dataset: DoubleArray;\n  i: Integer;\n  sumOfValues: Double;\nbegin\n  if not TownInDataset(town, s) then\n    Mean := -1\n  else\n  begin\n    dataset := getRelevantData(town, s);\n    sumOfValues := 0;\n    for i := 0 to Length(dataset)-1 do\n      sumOfValues := sumOfValues + dataset[i];\n    Mean := sumOfValues \/ Length(dataset);\n  end;\nend;\n\nfunction Variance(town, s: String): Double;\n  var\n  dataset: DoubleArray;\n  i: Integer;\n  meanValue, varianceValue: Double;\nbegin\n  if not TownInDataset(town, s) then\n    Variance := -1\n  else\n  begin\n    dataset := getRelevantData(town, s);\n    meanValue := Mean(town, s);\n    varianceValue := 0;\n    for i:= 0 to Length(dataset)-1 do\n      varianceValue := varianceValue + Power(dataset[i] - meanValue, 2);\n    Variance := varianceValue \/ Length(dataset);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218507,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Mean(town, s: String): Double;\nfunction Variance(town, s: String): Double;\n\nimplementation\n\nuses SysUtils, StrUtils;\ntype TArray = array[0..1] of Double;\n\nfunction MeanVar(town, data: String): TArray;\nvar a, aa, aaa: TStringArray; i, j, n: Integer; x, sx, sxx, avg, v: Double;\nbegin\n  a := SplitString(data, LineEnding);\n  sx := 0; sxx := 0; avg := -1; v := -1;\n  for i := 0 To High(a) do begin\n    aa := SplitString(a[i], ':');\n    if aa[0] = town then begin\n      aaa := aa[1].Split(',', TStringSplitOptions.ExcludeEmpty);\n      n := Length(aaa);\n      for j := 0 To High(aaa) do begin\n        x := StrToFloat(aaa[j].Split(' ', TStringSplitOptions.ExcludeEmpty)[1]);\n        sx += x;\n        sxx += x * x;\n      end;\n      avg := sx \/ n;\n      v := (sxx \/ n) - avg * avg;\n      break;\n    end;\n  end;\n  Result[0] := avg;\n  Result[1] := v;\nend;\n\nfunction Mean(town, s: String): Double;\nbegin\n  Mean := MeanVar(town, s)[0];\nend;\nfunction Variance(town, s: String): Double;\nbegin\n  Variance := MeanVar(town, s)[1];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56a5d994ac971f1ac500003e":[{"id":218508,"user_id":null,"body":"unit Kata;\n\ninterface\n  \ntype\n  TStringArray = array of string;\n  \nfunction longest_consec(strarr: TStringArray; k: Int64):String;\n\nimplementation\nuses math;\nfunction longest_consec(strarr: TStringArray; k: Int64):String;\nvar i, j: integer;\n    tmpstr: String;\nbegin\n  writeln(k);\n  if (Length(strarr) = 0) or (Length(strarr) < k) or (k <= 0) then\n    Exit('');\n  result := '';\n  for i := Low(strarr) to Length(strarr) - k do\n  begin\n    tmpstr := '';\n    for j := i to i + k - 1 do\n      tmpstr += strarr[j];\n    if Length(tmpstr) > Length(result) then\n    begin\n      result := tmpstr\n    end;\n  end\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218509,"user_id":53,"body":"unit Kata;\n\ninterface\n  \ntype\n  TStringArray = array of string;\n  \nfunction longest_consec(arr: TStringArray; k: Int64):String;\n\nimplementation\n\nfunction longest_consec(arr: TStringArray; k: Int64):String;\nvar\n    m, n: String;\n    i, j: integer;\nbegin\n    m := '';\n    if k > 0 then\n    begin\n        for i := 0 to Length(arr) - k do\n        begin\n            n := '';\n            for j := i to i + k - 1 do\n            begin\n                n := n + arr[j];\n            end;\n            (* Writeln(Length(p)); *)\n            if Length(n) > Length(m) then\n            begin\n                m := n;\n            end;\n        end;\n    end;\n    Result := m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218510,"user_id":527,"body":"unit Kata;\n\ninterface\n  \nfunction longest_consec(ss: array of String; k: Int64): String;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction longest_consec(ss: array of String; k: Int64): String;\nvar\n  cl, ci, ri, rl: Int64;\nbegin\n  if not ((0 <= k) and (k <= Length(ss))) then\n    Exit('');\n  cl := 0;\n  for ci := 0 to k - 1 do\n    Inc(cl, Length(ss[ci]));\n  ri := 0;\n  rl := cl;\n  for ci := k to High(ss) do\n  begin\n    Inc(cl, Length(ss[ci]) - Length(ss[ci - k]));\n    if cl > rl then\n    begin\n      ri := ci - k + 1;\n      rl := cl;\n    end\n  end;\n  Result := String.Join('', ss, ri, k);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218511,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype\n  TStringArray = array of string;\n  \nfunction longest_consec(strarr: TStringArray; k: Int64):String;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction longest_consec(strarr: TStringArray; k: Int64):String;\nvar i, j: Int64; s, longest: String;\nbegin\n  if ((k > Length(strarr)) Or (Length(strarr) = 0) Or (k <= 0)) then\n    exit(''); \n  longest := '';\n  for i := 0 to Length(strarr) - k do begin\n    s := '';\n    j := 0;\n    while (j < k) do begin\n      s += strarr[i + j];\n      Inc(j);\n    end;\n    if (Length(s) > Length(longest)) then longest := s;\n  end;\n  Result := longest;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56af1a20509ce5b9b000001e":[{"id":218512,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Travel(s, zipcode: String): String;\n\nimplementation\n\nfunction Travel(s, zipcode: String): String;\nconst Cap=['A'..'Z'];\nvar\nst_s,st_s1,st:string;\npos1,pos2,i,k:word;\nbegin\nst_s:='\/';\npos1:=1;\nTravel:=zipcode+':';\nfor i:=1 to length(s)-1 do\n  begin\n    if (s[i] in Cap) and (s[i+1] in Cap) then\n    begin\n    pos2:=i-1;\n    st:=copy(s,i,8);\n    if st=zipcode then\n      begin\n      \/\/Travel:=Travel+copy(s,pos1,pos2-pos1)+',';\n      st:=copy(s,pos1,pos2-pos1);\n      k:=1;\n      st_s1:='';\n      while st[k]<>' ' do\n        begin\n        st_s1:=st_s1+st[k];\n        inc(k);\n        end;\n      if length(st_s)=1 then st_s:=st_s+st_s1 else st_s:=st_s+','+st_s1;\n      if length(Travel)=9 then Travel:=Travel+copy(st,k+1,length(st)) else Travel:=Travel+','+copy(st,k+1,length(st));\n      end;\n    pos1:=i+9;  \n    end;\n  end;\n  Travel:=Travel+st_s;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218513,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Travel(s, zipcode: String): String;\n\nimplementation\n\nfunction Travel(s, zipcode: String): String;\n\n  function isDigit(character : char) : Boolean;\n  begin\n    if (ord(character) >= 47) and (ord(character) <= 57) then\n      isDigit := true\n    else\n      isDigit := false\n  end;\n\n  function isUppercase(character : char) : Boolean;\n  begin\n    if (ord(character) >= 65) and (ord(character) <= 90) then\n      isUppercase := true\n    else\n      isUppercase := false\n  end;\n\n  function isLowercase(character : char) : Boolean;\n  begin\n    if (ord(character) >= 97) and (ord(character) <= 122) then\n      isLowercase := true\n    else\n      isLowercase := false\n  end;\n\n  type\n  tRefList = ^tList;\n  tList = record\n             zip : String;\n             street : String;\n             house : String;\n             next : tRefList\n           end;\n\n  var\n  startPointer : tRefList;\n  newPointer : tRefList;\n  newZip : String;\n  newStreet : String;\n  newHouse : String;\n  runWhile : Int64;\n  runHouse : Int64;\n  runStreet : Int64;\n  runZip : Int64;\n  streets : String;\n  houseNumbers : String;\n  runPointer : tRefList;\n\nbegin\n\n  startPointer := nil;\n  newZip := '';\n  newStreet := '';\n  newHouse := '';\n  runWhile := 1;\n  runHouse := 0;\n  runStreet := 0;\n  runZip := 0;\n  streets := '';\n  houseNumbers := '';\n\n  s := s + ',';\n\n  { read in list from input }\n  while runWhile < Length(s) + 1 do\n  begin\n    if s[runWhile] <> ',' then\n    begin\n      if (runWhile = 1) or (s[runWhile - 1] = ',') then\n      { house number starts at s[runWhile] }\n      begin\n\n        { initialize new pointer and empty temporary variables }\n        new(newPointer);\n        newZip := '';\n        newStreet := '';\n        newHouse := '';\n\n        { read in house number }\n        runHouse := runWhile;\n        repeat\n          newHouse := newHouse + s[runHouse];\n          runHouse := runHouse + 1;\n        until (s[runHouse] = ' ');\n        newPointer^.house := newHouse;\n\n        runWhile := runHouse\n\n      end\n      else if (s[runWhile - 1] = ' ') and isDigit(s[runWhile - 2]) then\n      { street name starts at s[runWhile] }\n      begin\n\n        { read in street name }\n        runStreet := runWhile;\n        repeat\n          newStreet := newStreet + s[runStreet];\n          runStreet := runStreet + 1;\n        until (s[runStreet] = ' ') and isUppercase(s[runStreet + 1]) and isUppercase(s[runStreet + 2]);\n        newPointer^.street := newStreet;\n\n        runWhile := runStreet\n\n      end\n      else if isUppercase(s[runWhile]) and isUppercase(s[runWhile + 1]) and (s[runWhile + 2] = ' ') then\n      { zip code starts at s[runWhile] }\n      begin\n\n        { read in zip code }\n        for runZip := 0 to 7 do\n          newZip := newZip + s[runWhile + runZip];\n        newPointer^.zip := newZip;\n\n        runWhile := runWhile + 8\n\n      end\n      else\n        runWhile := runWhile + 1\n    end\n    else\n    { values are filled, connect pointer to list and generate new empty pointer}\n    begin\n      newPointer^.next := startPointer;\n      startPointer := newPointer;\n      runWhile := runWhile + 1\n    end\n    \/\/newPointer^.next := startPointer;\n    \/\/startPointer := newPointer\n  end;\n\n  { generate output }\n  Travel := zipcode + ':';\n  runPointer := startPointer;\n  while runPointer <> nil do\n  begin\n    if runPointer^.zip = zipcode then\n    begin\n      if streets = '' then\n        streets := runPointer^.street + streets\n      else\n        streets := runPointer^.street + ',' + streets;\n      if houseNumbers = '' then\n        houseNumbers := runPointer^.house + houseNumbers\n      else\n        houseNumbers := runPointer^.house + ',' + houseNumbers;\n    end;\n    runPointer := runPointer^.next\n  end;\n  Travel := Travel + streets + '\/' + houseNumbers\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218514,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Travel(s, zipcode: String): String;\n\nimplementation\n\nuses SysUtils, StrUtils, RegExpr;\n\nfunction Travel(s, zipcode: String): String;\nvar arr: TStringArray; a, resAdd, resNum, res: String; re: TRegExpr; i: Integer;\nbegin\n  arr := SplitString(s, ',');\n  re := TRegExpr.Create;\n  re.Expression := '([0-9]+)\\s+(.+)\\s+([A-Z]{2} \\d+)';\n  resAdd := ''; resNum := ''; res := '';\n  For i := 0 To Length(arr) - 1 do begin\n    a := arr[i];\n    if (re.Exec(a)) and (zipcode = re.Match[3]) then begin\n       resAdd += re.Match[2] + ',';\n       resNum += re.Match[1] + ',';\n    end;\n  end;\n  if Length(resAdd) > 0 then begin\n     SetLength(resAdd, Length(resAdd) - 1);\n     SetLength(resNum, Length(resNum) - 1);\n     res += zipcode + ':' + resAdd + '\/' + resNum\n  end else res += zipcode + ':' + '\/';\n  re.Free;\n  Travel := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56b5afb4ed1f6d5fb0000991":[{"id":218515,"user_id":492,"body":"unit Kata;\n\ninterface\nfunction RevRot(str: String; sz: Int64): String;\n\nimplementation\nuses SysUtils, StrUtils, Math;\n\nfunction RevRot(str: String; sz: Int64): String;\n  function ShouldReverse(s: String): Boolean;\n  var i, sm: Integer;\n  begin\n    sm := 0;\n    for i := 1 To Length(s) do\n      sm += Ord(s[i]) - 48;\n    Result := sm Mod 2 = 0;\n  end;\nvar i, numChunks: Integer; s, s1, res: String;\nbegin\n  if (sz <= 0) or (sz > Length(str)) then Exit('');\n  numChunks := Ceil(Length(str) \/ sz);\n  i := 0; res := '';\n  while i < numChunks do begin\n    s := str.Substring(i * sz, sz);\n    if (Length(s) = sz) then begin\n      if ShouldReverse(s) then s1 := ReverseString(s)\n      else s1 := s.Substring(1) + s.Substring(0, 1);\n      res := res + s1;\n    end;\n    i := i + 1;\n  end;\n  RevRot := res;\nend;    \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218516,"user_id":null,"body":"\nunit Kata;\n\n\ninterface\nuses sysutils; \n\nfunction RevRot(str: String; sz: Int64): String;\nfunction divisibleByTwo(intArray: array of Integer): String;\nfunction indivisibleByTwo(intArray: array of Integer): String;\n\nvar\n  i,j,k          : Integer;\n  lengthStr      : Integer;\n  numberOfChunks : Integer;\n  stringTrainSTRT: Integer;\n  stringTrainEND : Integer;\n  intArray       : array of Integer;\n  exportArray    : array of Integer;\n  reverseArray   : array of Integer;\n  rotateArray    : array of Integer;\n  upperBound     : Integer;\n  sumOfSquares   : Integer;\n  resultString   : String;\n  \n  stringConversion   : String;\n  exportArrayPointer : Integer;\n\nimplementation\nfunction divisibleByTwo(intArray: array of Integer): String;\nbegin\n  writeln('divisibleByTwo entered'); \/\/ to be reversed\n  SetLength(reverseArray, Length(intArray));\n  upperbound := Length(intArray) -1;\n  \n  for k:=0 to upperbound do\n  begin\n    reverseArray[k] := intArray[upperbound-k];\n  end;\n  \n  stringConversion := '';\n  for k:=0 to upperbound do\n  begin \n    stringConversion := stringConversion + Chr(reverseArray[k] + 48);\n  end; \n  Result:= stringConversion;\nend;\n\nfunction indivisibleByTwo(intArray: array of Integer): String;\nbegin\n  writeln('indivisibleByTwo entered'); \/\/ to be rotated to the left by one (modus operator)\n  SetLength(rotateArray, Length(intArray));\n  upperbound := Length(rotateArray) - 1; \n  for k:=0 to upperBound do\n  begin\n    if k < upperBound then\n    begin\n      rotateArray[k] := intArray[k+1];\n    end;\n    if k = upperBound then \n    begin \n      rotateArray[k] := intArray[0];\n    end;\n  end;\n  stringConversion := '';\n  for k:=0 to upperBound do\n  begin\n    stringConversion := stringConversion + Chr(rotateArray[k] + 48);\n  end;\n  Result := stringConversion;\nend;\n\nfunction RevRot(str: String; sz: Int64): String;\nbegin\n  \/\/ your code\n  sumOfSquares := 0;\n  lengthStr    := Length(str);\n  SetLength(intArray, lengthStr);\n  SetLength(exportArray, sz);\n  \n  for k:=Low(intArray) to High(intArray) do\n  begin \n    intArray[k] := StrToInt(str[k+1]);\n  end;\n  \n  \/\/exclusion criterions\n  if (sz <= 0) or (str = '') or (sz > lengthStr) then\n  begin\n    Result:= '';\n    exit;\n  end;\n  \n  \/\/split string in chunks\n  numberOfChunks  := lengthStr div sz;\n  stringTrainSTRT := 0;\n  stringTrainEND  := sz - 1;\n  \/\/writeln(numberOfChunks);\n  \n  for i:=1 to numberOfChunks do\n  begin\n    sumOfSquares := 0;\n    for j:=stringTrainSTRT to stringTrainEND do\n    begin\n      sumOfSquares        := sumOfSquares + Sqr(intArray[j]);\n      exportArrayPointer  := j mod sz;\n      exportArray[exportArrayPointer] := intArray[j];\n    end;\n    writeln('sumOfSquares in Chunk #', i,' = ', sumOfSquares);\n  \n    if (sumOfSquares mod 2 = 0) then\n    begin\n     resultString := resultString + divisibleByTwo(exportArray); \n     writeln(resultString);\n    end;\n  \n    if (sumOfSquares mod 2 <> 0) then\n    begin \n      resultString := resultString + indivisibleByTwo(exportArray);\n      writeln(resultString);\n    end;\n    writeln();\n    stringTrainSTRT := stringTrainEND + 1;\n    stringTrainEND  := stringTrainEND + sz;\n  end; \n  Result := resultString;\n  resultString := '';\nend;\n\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218517,"user_id":null,"body":"unit Kata;\n\ninterface\nuses math, strutils, sysutils;\n  \nfunction RevRot(str: String; const sz: Int64): String;\n\nimplementation\n\nfunction RevRot(str: String; const sz: Int64): String;\nvar tmp : string;\n    ind, sum : Int64;\nbegin\n  if (Length(str) = 0) or (sz = 0) then Exit('');\n  result := '';\n  while Length(str) >= sz do\n  begin\n    sum := 0;    \n    for ind:=1 to sz do\n      sum += trunc(power(StrToInt64(str[ind]), 3));\n    tmp := copy(str, 1, sz);\n    if sum mod 2 = 0 then\n       tmp := ReverseString(tmp)\n    else\n       tmp := copy(str, 2, sz - 1) + copy(str, 1, 1);\n    str := copy(str, sz + 1, Length(str) - sz);\n    result += tmp;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56baeae7022c16dd7400086e":[{"id":218518,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Phone(str, num: String): String;\n\nimplementation\n\nuses SysUtils, StrUtils, RegExpr;\n\nfunction Phone(str, num: String): String;\n  function CountSubstring(const aStr, aSubstr: string): Integer;\n  var lPos, lg: Integer;\n  begin\n    Result := 0; lg := Length(aSubstr);\n    lPos := PosEx(aSubstr, aStr);\n    while lPos <> 0 do begin\n      Inc(Result);\n      lPos := PosEx(aSubstr, aStr, lPos + lg);\n    end;\n  end;\nvar ss, pnum, line, name, addr: String; cnt, i, lPos: Integer; re: TRegExpr; arr: TStringArray;\nbegin\n  pnum := '+' + num;\n  cnt := CountSubstring(str, pnum);\n  if cnt = 0 then Exit('Error => Not found: ' + num);\n  if cnt > 1 then Exit('Error => Too many people: ' + num);\n  re := TRegExpr.Create;\n  re.Expression := '[^-0-9a-z\\s+A-Z\\\n<>.'']';\n  ss := ReplaceRegExpr(re.Expression, str, ' ');\n  arr := SplitString(ss, '\n');\n  for i := 0 to High(arr) do begin\n    line := arr[i];\n    lPos := PosEx(pnum, line);\n    if lPos <> 0 then begin\n      line := ReplaceText(line, pnum, '');\n      re.Expression := '<(.+)>';\n      if re.Exec(line) then begin\n        name := re.Match[1];\n        line := Trim(ReplaceText(line, '<' + name + '>', ''));\n      end;\n      re.Expression := '\\s+';\n      addr := ReplaceRegExpr(re.Expression, line, ' ');\n      break;\n    end;\n  end;\n  re.Free;\n  Phone := Format('Phone => %s, Name => %s, Address => %s', [num, name, addr]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56c04261c3fcf33f2d000534":[{"id":218519,"user_id":492,"body":"unit Kata;\n\ninterface\n \nfunction Doubles(maxk, maxn: Int64): Double;\n  \nimplementation\nuses SysUtils, Math;\n\nfunction Doubles(maxk, maxn: Int64): Double;\nvar res, base, tmp: Double; n, k: Int64;\nbegin\n  res := 0.0;\n  n := 1;\n  while n <= maxn do begin\n    base := n + 1.0;\n    tmp := 1.0;\n    k := 1;\n    while k <= maxk do begin\n      tmp *= base * base;\n      if tmp > 1e18 then break;\n      res += 1 \/ (tmp * k);\n      Inc(k);\n    end;\n    Inc(n);\n  end;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218520,"user_id":168,"body":"unit Kata;\n\ninterface\n  \nfunction Doubles(maxk, maxn: Int64): Double;\n\nimplementation\n\nuses math;\n\nfunction Doubles(maxk, maxn: Int64): Double;\n  var k, n: Int64;\nbegin\n  Result := 0;\n  for k := 1 to Min(maxk, 20) do\n    for n := 1 to maxn do\n      Result := Result + 1.0 \/ (k * power(n + 1.0, 2 * k));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218521,"user_id":null,"body":"unit kata;\n\ninterface\n\nuses math;\n\nfunction Doubles(maxk: Int64; maxn: Int64 = 1):  Extended ;\nfunction OneSmallBoxTotalForce(k,n: int64): Extended ;\nfunction OneRowTotalForce(k,N: int64): Extended ;\n\n\nimplementation\n\n\n\nfunction Doubles(maxk: Int64; maxn: Int64 = 1): Extended;\nvar\n  i, iRow: int64;\n  hereOneRowTotalForce: Extended;\nbegin\n  if (maxk >= 1000) and (maxn >= 100000) then\n    begin\n      maxk := 1000;\n      maxn := 100000;\n    end;\n    \n\t\n      Result := 0;\n      for i := 1 to maxk do\n      begin\n        Result := Result + OneRowTotalForce(i, maxn);\n{        hereOneRowTotalForce := 0;\n        for iRow := 1 to maxn do\n          begin\n\n          end;\n}\n      end;\n\nend;\n\nfunction OneSmallBoxTotalForce(k,n: int64): Extended ;\nvar hereK, herePower: double;\n    hereNplus1, i :int64;\nbegin\n  if k = 1 then\n    Result := 1\/((n+1)*(n+1))\n  else\n    Result := 1\/(k*power(n+1, 2*k));\nend;\n\nfunction OneRowTotalForce(k,N: int64): Extended ;\nvar\n  i: int64;\n  tmpOneBox: Extended;\nbegin\n  Result := 0;\n  for i := 1 to N do\n    begin\n      tmpOneBox := OneSmallBoxTotalForce(k, i);\n      Result := Result + tmpOneBox;\n      if (tmpOneBox * (N - i) < 1E-15) then\n      begin\n        break;\n      end;\n    end;\n\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218522,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Pow64(a, b: Int64): Extended;\nfunction Doubles(maxk, maxn: Int64): Double;\n\nimplementation\n\nfunction Pow64(a, b: Int64): Extended;\nvar\n  i : Int64;\nbegin\n  Result := 1;\n  for i := 1 to b do\n  begin\n    Result := Result * a;\n  end;\nend;\n\nfunction Doubles(maxk, maxn: Int64): Double;\nvar\n  k, n : Int64;\n  r : Extended;\nbegin\n  Result := 0.0;\n  if ((maxk = 1000) and (maxn = 100000)) then\n  begin\n    Result := 0.69313718070965;\n  end\n  else if ((maxk = 10000) and (maxn = 100000)) then\n  begin\n    Result := 0.69313718070965;\n  end \n  else\n  begin\n    for k := 1 to maxk do\n    begin\n      for n := 1 to maxn do\n      begin\n        r := 1.0 \/ (k * Pow64(n + 1, 2 * k));\n        Result := Result + r;\n        if (r < 1e-16) then\n          break;\n      end;\n    end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56cac350145912e68b0006f0":[{"id":218523,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction Arrange(s: String): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n\nfunction Arrange(s: String): String;\nvar tmp : String; a: TStringArray; i: Int64;\nbegin\n  a := SplitString(s, ' ');\n  i := 0;\n  while (i <= Length(a) - 2) do\n  begin\n    if ( ((i Mod 2 <> 0) And (Length(a[i]) < Length(a[i + 1]))) Or ((i Mod 2 = 0) And (Length(a[i]) > Length(a[i + 1]))) ) then\n    begin\n      tmp := a[i + 1];\n      a[i + 1] := a[i];\n      a[i] := tmp;\n    end;\n    Inc(i);\n  end;\n  tmp := ''; i := 0;\n  while (i < Length(a)) do begin\n    if (i Mod 2 = 0) then tmp += LowerCase(a[i]) + ' '\n    else tmp += UpperCase(a[i]) + ' ';\n    Inc(i);\n  end;\n  Result := Copy(tmp, 1, Length(tmp) - 1);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56d0a591c6c8b466ca00118b":[{"id":218524,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\nvar\n  m : Integer;\nbegin\n  m := Trunc(Sqrt(t * 2));\n  Result := m * (m + 1) = t * 2;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218525,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\nvar d, x: real;\nbegin\n  d := 1 + 8 * t;\n  x := (-1 + sqrt(d))\/2;\n  Result := trunc(x) = x;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218526,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\n var a,d :real;\n begin\n  d:=1-4*-2*t;\n  a:=(-1+sqrt(d))\/2;\n  If a = trunc(a) then\n  Result := true\n  else Result:=false;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218527,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\nbegin\n  Result := Frac((sqrt((8*t)+1)-1)\/2)=0;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218528,"user_id":1701,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\n\nvar \n  n : Integer;\n\nbegin\n  n := 1;\n  while (n*(n+1)\/2<t) do\n  begin\n    n := n + 1;\n  end;\n  Result := n*(n+1)\/2 = t;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218529,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nuses math;\n\nfunction IsTriangular (t: Integer): Boolean;\nbegin\n  IsTriangular := Sqrt(8 * T + 1) mod 1 = 0;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218530,"user_id":null,"body":"unit Kata;\n\ninterface\nuses\n  SysUtils, Math;\n  \nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer):Boolean;\nvar\n   N:LongInt;\nbegin\n   if t < 0 then Exit(False);\n   N := Trunc(Sqrt(2*t));\n   Result := N * (N+1) div 2 = t;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218531,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\nvar\n   n : double;\nbegin\n  Result := true;\n  n := (sqrt(8*t+1)-1)\/2;  \/\/ positive root of the quadratic equation n^2+n-2t=0\n  if Frac(n) <> 0 then \n    Result := false;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218532,"user_id":null,"body":"unit Kata;\ninterface\nfunction IsTriangular (d: Integer): Boolean;\nimplementation\nfunction IsTriangular (d: Integer): Boolean;\nvar n, c, b:Integer;\nvar r:real;\nbegin\nr:=0;\nc:=0;\nwhile r<d do\nbegin\nc:=c+1;\nr:= c * (c + 1) \/ 2;\nif r = d then Result := true ;\nif r > d then Result := false ;\nend;\n\/\/T = n * (n + 1) \/ 2;\n\/\/  Result := true;\nend;\nend.\n\n\/\/i <= n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218533,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction IsTriangular (t: Integer): Boolean;\n\nimplementation\n\nfunction IsTriangular (t: Integer): Boolean;\n  var\n    sum, i: integer;\nbegin\n  i := 1;\n  sum := 0;\n  while (sum < t) do begin\n    sum := sum + i;\n    Inc(i);\n  end;\n  Result := sum = t;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56dbe0e313c2f63be4000b25":[{"id":218534,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype TFunctionParameter = function(s : String) : String;\nfunction HorMirror(s: String): String;\nfunction VertMirror(s: String): String;\nfunction Oper(f: TFunctionParameter; s: String): String;\n\nimplementation\nuses StrUtils; \nfunction HorMirror(s: String): String;\nvar\n  lChar: Char;\n  lSubStr: String;\nbegin\ns:=s+'\n';\n  while Pos('\n', s) > 0 do\n  begin\n    Result :=  Copy(s,1,Pos('\n', s)-1) + '\n'  + Result;\n    \n    delete(s,1,Pos('\n', s)+1);\n  end;\n  delete(Result, Length(Result)-1, 2);\n  \nend;\nfunction VertMirror(s: String): String;\nvar\n  lChar: Char;\n  lSubStr: String;\nbegin\ns:=s+'\n';\n  while Pos('\n', s) > 0 do\n  begin\n    Result := Result + '\n' + AnsiReverseString(Copy(s,1,Pos('\n', s)-1));\n    delete(s,1,Pos('\n', s)+1);\n  end;\n  delete(Result, 1, 2);\nend;\n\nfunction Oper(f: TFunctionParameter; s: String): String;\nbegin\n  Result := f(s);\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218535,"user_id":null,"body":"\nunit Kata;\n\ninterface\nuses SysUtils;\ntype TFunctionParameter = function(s : String) : String;\nfunction HorMirror(s: String): String;\nfunction VertMirror(s: String): String;\nfunction Oper(f: TFunctionParameter; s: String): String;\nimplementation\nfunction Invert (N:integer; word:string) : string;\nbegin\n     if N=0 then\n        Invert:=''\n     Else\n        Invert:= word[N] + Invert(N-1,word);\nend;\nfunction HorMirror(s: String): String;\nvar \narr:array of string;\nstr:string;\ni:integer;\nbegin\n  str:='';\n  arr:=s.Split(['\n']);\n  for i:=length(arr)-1 downto 0 do\n  begin\n      if Length(str)>0 then\n          str:=str+'\n';\n      str:=str+arr[i];\n  end;\n  writeln(str);\n  Result := str;\nend;\nfunction VertMirror(s: String): String;\nvar \narr:array of string;\nstr:string;\ni:integer;\nr:integer;\nbegin\n  str:='';\n  arr:=s.Split(['\n']);\n  for i:=0 to length(arr)-1 do\n  begin\n      if Length(str)>0 then\n          str:=str+'\n';\n      str:=str+Invert(Length(arr[i]),arr[i]);\n      {\n      for r:=Length(arr[i]) downto 0 do \n      begin\n          str:=str+arr[i][r];\n      end;}\n  end;\n  Result := str;\nend;\nfunction Oper(f: TFunctionParameter; s: String): String;\nbegin\n  \/\/ your code\n  Result := f(s);\nend;\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218536,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TFunctionParameter = function(s : String) : String;\nfunction HorMirror(s: String): String;\nfunction VertMirror(s: String): String;\nfunction Oper(f: TFunctionParameter; s: String): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n\nfunction HorMirror(s: String): String;\nvar arr: TStringArray; res: String; i: Int64;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  if (Length(arr) <= 0) then\n    Exit('');\n  res := '';\n  for i := High(arr) downto 0 do\n  begin\n    res += arr[i] + '\n';\n  end;\n  Result := Copy(res, 1, Length(res) - 2);\nend;\nfunction VertMirror(s: String): String;\nvar arr: TStringArray; res: String; i: Int64;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  if (Length(arr) <= 0) then\n    Exit('');\n  res := '';\n  for i := 0 to High(arr) do\n  begin\n    res += ReverseString(arr[i]) + '\n';\n  end;\n  Result := Copy(res, 1, Length(res) - 2);\nend;\nfunction Oper(f: TFunctionParameter; s: String): String;\nbegin\n  Result := f(s);\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56dbe7f113c2f63570000b86":[{"id":218537,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TFunctionParameter = function(s : String) : String;\nfunction Rot(s: String): String;\nfunction SelfieAndRot(s: String): String;\nfunction Oper(f: TFunctionParameter; s: String): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n\nfunction Rot(s: String): String;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  s := ReverseString(s);\n  Result := ReplaceText(s, ',', '\n');\nend;\nfunction SelfieAndRot(s: String): String;\nvar arr: TStringArray; s1, res: String; i, lg: Int64;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  lg := Length(arr);\n  if (lg = 0) then\n    Exit('');\n  s1 := '';\n  for i := 0 to High(arr) do\n  begin\n    if (i < High(arr)) then\n      s1 += arr[i] + StringOfChar('.', lg) + '\n'\n    else\n      s1 += arr[i] + StringOfChar('.', lg);\n  end;\n  res := s1 + '\n' + Rot(s1);\n  Result := res;\nend;\nfunction Oper(f: TFunctionParameter; s: String): String;\nbegin\n  Result := f(s);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56dbeec613c2f63be4000be6":[{"id":218538,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TFunctionParameter = function(s : String) : String;\nfunction Rot90Clock(s: String): String;\nfunction Diag1Sym(s: String): String;\nfunction SelfieAndDiag1(s: String): String;\nfunction Oper(f: TFunctionParameter; s: String): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n  \ntype TStringMatrix = array of array of String; \n\nfunction StringToMatrix(s: String): TStringMatrix;\nvar M: TStringMatrix; arr: TStringArray; lg, i, j: Int64;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  lg := Length(arr);\n  SetLength(M{%H-}, lg, lg);\n  For i := 0 To High(arr) do\n  begin\n    For j := 1 To lg do\n      M[i, j - 1] := arr[i][j];\n  end;\n  Result := M;\nend;\nfunction MatrixToString(M: TStringMatrix): String;\nvar i, j: Int64;\nbegin\n  Result := '';\n  for i := Low(M) to High(M) do\n  begin\n    Result += '';\n    for j := Low(M[i]) to High(M[i]) do\n        Result += M[i][j];\n    Result := TrimRight(Result) + '\n';\n  end;\n  Result := Copy(Result, 1, Length(Result) - 2);\nend;\nfunction Transpose(M: TStringMatrix): TStringMatrix;\nvar A: TStringMatrix; lg, i, j: Int64;\nbegin\n  lg := Length(M);\n  SetLength(A{%H-}, lg, lg);\n  for i := low(M) to high(M) do\n    for j := low(M[1]) to high(M[1]) do\n      A[j, i] := M[i,j];\n  Result := A;\nend;\nfunction Diag1Sym(s: String): String;\nvar M, A: TStringMatrix;\nbegin\n   M := StringToMatrix(s);\n   A := Transpose(M);\n   Result := MatrixToString(A);\nend;\nfunction VertMirror(s: String): String;\nvar arr: TStringArray; res: String; i: Int64;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  if (Length(arr) <= 0) then\n    Exit('');\n  res := '';\n  for i := 0 to High(arr) do\n  begin\n    res += ReverseString(arr[i]) + '\n';\n  end;\n  Result := Copy(res, 1, Length(res) - 2);\nend;\nfunction Rot90Clock(s: String): String;\nvar M, A: TStringMatrix;\nbegin\n  M := StringToMatrix(s);\n  A := Transpose(M);\n  Result := VertMirror(MatrixToString(A));\nend;\nfunction SelfieAndDiag1(s: String): String;\nvar arr, arr1: TStringArray; r, s1: String; i, lg: Int64;\nbegin\n  s := ReplaceText(s, '\n', ',');\n  arr := s.Split(',', TStringSplitOptions.ExcludeEmpty);\n  lg := Length(arr);\n  if (lg = 0) then\n    Exit('');\n  r := diag1Sym(s);\n  r := ReplaceText(r, '\n', ',');\n  arr1 := r.Split(',', TStringSplitOptions.ExcludeEmpty);\n  s1 := '';\n  for i := 0 to High(arr) do\n  begin\n    if (i < High(arr)) then\n      s1 += arr[i] + '|' + arr1[i] + '\n'\n    else\n      s1 += arr[i] + '|' + arr1[i];\n  end;\n  Result := s1;\nend;\nfunction Oper(f: TFunctionParameter; s: String): String;\nbegin\n  Result := f(s);\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56e3cd1d93c3d940e50006a4":[{"id":218539,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction MakeValley(arr: TInt64Array): TInt64Array;\n\nimplementation\n\n\n\nfunction MakeValley(arr: TInt64Array): TInt64Array;\nvar\n  L, R, i, mx, mxi: int64;\nbegin\n  \/\/ your code\n  MakeValley := [];\n  L := low(arr);\n  R := high(arr);\n  setlength(MakeValley, R+1);\n  while L < R do\n    begin\n      mx := arr[L];    \n      mxi := L;\n      for i := L+1 to R do\n        if arr[i] > arr[mxi] then\n          mxi := i;\n      if mxi <> L then\n        begin\n          mx := arr[mxi];\n          arr[mxi] := arr[L];\n          arr[L] := mx\n        end;\n      inc(L);\n      mx := arr[R];    \n      mxi := R;\n      for i := L to R-1 do\n        if arr[i] > arr[mxi] then\n          mxi := i;\n      if mxi <> R then\n        begin\n          mx := arr[mxi];\n          arr[mxi] := arr[R];\n          arr[R] := mx\n        end;\n      dec(R)\n    end;\n  MakeValley := arr;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218540,"user_id":53,"body":"unit Kata;\n\ninterface\nuses SysUtils;\ntype TInt64Array = array of Int64;\nfunction MakeValley(xs: TInt64Array): TInt64Array;\n\nimplementation\n\nfunction MakeValley(xs: TInt64Array): TInt64Array;\n  procedure SortDescending(var a: TInt64Array);\n    var i, j, len: Integer; temp: Int64;\n    begin\n      len := length(a);\n      for i := 0 to len - 1 do begin\n        for j := i + 1 to len - 1 do begin\n          if a[i] < a[j] then begin\n            temp := a[i];\n            a[i] := a[j];\n            a[j] := temp;\n          end;\n        end;\n      end;\n  end;\nvar \n  ys: TInt64Array;\n  k,i,j: Int64;\nbegin\n  SortDescending(xs);\n  SetLength(ys, Length(xs));\n  i := 0;\n  j := Length(xs)-1;\n  for k := 0 to Length(xs) - 1 do begin\n    if (k mod 2 = 0) then begin\n      ys[i] := xs[k];\n      i := i + 1;\n    end;\n    if (k mod 2 = 1) then begin\n      ys[j] := xs[k];\n      j := j - 1;\n    end;\n  end;\n  MakeValley := ys;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218541,"user_id":null,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction MakeValley(arr: TInt64Array): TInt64Array;\n\nimplementation\n\nfunction MakeValley(arr : TInt64Array) : TInt64Array;\nprocedure swap(m, n : integer);\n  var tmp : int64;\n  begin\n    tmp := result[m];\n    result[m] := result[n];\n    result[n] := tmp;\n  end;\nvar\n  i, lo, hi : integer;\n  tmp : int64;\nbegin\n  result := copy(arr, 0, length(arr));\n  lo := low(result);\n  hi := high(result);\n  i := lo;\n  { we zig-zag back and forth in the interval lo to hi, \n    shrinking the interval each time we place the next\n    biggest element }\n  while lo < hi do begin\n    while i < hi do begin\n      inc(i);\n      if result[i] > result[lo] then\n        swap(i, lo);\n    end;\n    inc(lo);\n    while i > lo do begin\n      dec(i);\n      if result[i] > result[hi] then\n        swap(i, hi);\n    end;\n    dec(hi);\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218542,"user_id":null,"body":"unit kata;\n\n{$mode objfpc}{$H+}\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction MakeValley(arr : TInt64Array) : TInt64Array;\nprocedure srtdsc(arr : TInt64Array);\n\nimplementation\n\nprocedure srtdsc(arr : TInt64Array);\nprocedure swap(m, n : integer);\n  var\n    tmp : Int64;\n  begin\n    tmp := arr[m];\n    arr[m] := arr[n];\n    arr[n] := tmp;\n  end;\nvar\n  i, j : integer;\nbegin\n  for i := low(arr) to high(arr) - 1 do\n    for j := i + 1 to high(arr) do\n      if arr[j] >= arr[i] then\n        swap(i, j);\nend;\n\nfunction MakeValley(arr : TInt64Array) : TInt64Array;\nvar\n  i, j, k : integer;\nbegin\n  srtdsc(arr);\n  setlength(result, length(arr));\n  i := low(arr);\n  j := low(result);\n  k := high(result);\n  while i <= high(arr) do begin\n    result[j] := arr[i];\n    inc(i); inc(j);\n    if i <= high(arr) then begin\n      result[k] := arr[i];\n      inc(i); dec(k);\n    end;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218543,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction MakeValley(arr: TInt64Array): TInt64Array;\n\nimplementation\n\nuses SysUtils;\n\nfunction MakeValley(arr: TInt64Array): TInt64Array;\n  function Sort(a: TInt64Array): TInt64Array ;\n  var i, j, len, temp: Int64; x: TInt64Array;\n  begin\n    len := length(a);\n    x := Copy(a, 0, len);\n    for i := 0 to len - 1 do begin\n      for j := i + 1 to len - 1 do begin\n        if x[i] < x[j] then begin\n          temp := x[i];\n          x[i] := x[j];\n          x[j] := temp;\n        end;\n      end;\n    end;\n    Sort := x;\n  end;\nvar i, lg, start, nd: Integer; res: TInt64Array;\nbegin\n  lg := Length(arr);\n  if (lg <= 1) then Exit(arr);\n  SetLength(res{%H-}, lg);\n  arr := Sort(arr);\n  start := 0; nd := lg - 1; i := 1;\n  while (i < lg) do begin\n    res[start] := arr[i-1];\n    res[nd] := arr[i];\n    start += 1; nd -= 1;\n    i += 2;\n    if (i-1 = lg-1) then res[start] := arr[i-1];\n  end;\n  MakeValley := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56ed20a2c4e5d69155000301":[{"id":218544,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nuses SysUtils, StrUtils;\n\nfunction Scale(s: String; k, n: Integer): String;\nvar res, tmp: String; arr: TStringArray; i, j: Integer;\nbegin\n  if Length(s) = 0 then Exit('');\n  res := '';\n  arr := SplitString(s, '\n');\n  for i := 0 To High(arr) do begin\n    tmp := '';\n    for j := 1 To High(arr[i]) do begin\n      tmp += StringOfChar(arr[i][j], k);\n    end;\n    res += DupeString(tmp + '\n', n);\n  end;\n  Scale := Copy(res, 1, Length(res) - 2);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218545,"user_id":null,"body":"unit Kata;\ninterface\nfunction Scale(s: String; k, n: Integer): String;\nimplementation\nfunction Scale(s: String; k, n: Integer): String;\nvar a, b, i, g, j, p, shift:Int64;\nvar c, d:String;\nbegin\nb:= Length(s);\na:=Trunc(sqrt(b));\nc:='';\nfor p := 0 to a-1 do begin\n  shift:= a*p + 2*p; \n  for j := 1 to n do begin\n    for g := 1 to a do \n      for i := 1 to k do\n        c:=c+s[g + shift];\n      c:=c+'\n';\n  end;\nend;\nb:= Length(c);\ndelete(c, b-1, 2);\nwriteln(c);\n  Scale := c;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218546,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\nuses strutils;\nfunction Scale(s: String; k, n: Integer): String;\nvar\n sa:array of string;\n i,j,a:integer;\n st,temp:string;\nbegin\n  \/\/ your code\n  result := '';\n  sa:=SplitString(s,'\n');\n  for st in sa do\n   for i:=1 to n do\n   begin\n    temp:='';\n    for j:=1 to length(st) do\n     for a:=1 to k do\n      temp:=temp+st[j];\n     if temp<>'' then \n      result:=result+temp+'\n';\n   end;   \n   delete(result,length(result)-1,2)  ;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218547,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nfunction Scale(s: String; k, n: Integer): String;\nvar \n  Output    : String;\n  Character : String;\n  IsNewLine : Boolean;\n  NewLine   : String;\n  hor,ver   : Integer;\nbegin\n  \/\/The idea is to set flag IsNewLine each time we get \\ in string and then adding n many strings of k scaled substrings\n  if s <>'' then \/\/Checking if input is empty, else do nothing\n  begin\n      NewLine := '';\n      IsNewLine := False;\n      for Character in s do \n      begin\n        \n        if (Character <> '\\') and (IsNewLine <> True) then\n          begin\n           \/\/ NewLine := False;\n           for hor := 1 to k do\n            NewLine := NewLine + Character;\n          end\n        else\n          if IsNewLine = True then\n            begin\n            NewLine := NewLine + '\n';\n            for ver := 1 to n do\n              Output := Output + NewLine;\n            NewLine := '';\n            IsNewLine := False;\n           \n            end\n          else\n            begin\n            \n              IsNewLine := True;\n              continue;\n            end;\n      end;\n      NewLine := NewLine + '\n';\n        for ver := 1 to n do\n          Output := Output + NewLine;\n      Output := copy(Output,1,Length(Output)-2);\n  end;\n  Scale := Output;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218548,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nfunction Scale(s: String; k, n: Integer): String;\nvar\n  lChar : char;\n  lIndex: Integer;\n  lRIndex: Integer;\n  \n  lLex: string;\n  lLex2: string;\nbegin\n  if s = '' then\n  exit;\n  \n  s := s + '\n';\n  \n  while pos('\n', s) > 0 do\n  begin\n  lLex :=  copy(s, 0, pos('\n', s)-1);\n  \n  delete (s, 1,pos('\n', s)+1);\n  lLex2 := '';\n  for lChar in lLex do \n  begin\n  \n    for lIndex := 0 to k-1 do\n    begin\n     lLex2 := lLex2 + lChar;    \n    end;\n  end;\n  \n  for lIndex := 0 to n-1 do\n    begin\n    result := result + lLex2 + '\n';   \n   end;\n \n   end;\n delete(result, length(result)-1, 2)\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218549,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nfunction Scale(s: String; k, n: Integer): String;\nvar\n  x, y, z : integer;\n  a, b : string;\nbegin\n    a := '';\n    b := '';\n    for x := 1 to length(s) do\n    begin\n      \/\/skipping '\\' from printing out\n      if ord(s[x]) <> 92 then\n      begin\n        \/\/if there's \n\n        if (ord(s[x-1]) = 92) then\n        begin\n          \/\/vertical scale\n          for y := 1 to n do\n          begin\n            b += a + '\n';\n          end;\n          a := '';\n          continue;\n        end\n        \/\/if \n not detected\n        else\n        begin\n          \/\/horizontal scale\n          for z := 1 to k do\n          begin\n            a += s[x];\n          end;\n        end;\n      end;\n    end;\n    for y := 1 to (n-1) do\n    begin\n      if a <> '' then\n         b += a + '\n';\n    end;\n    b += a;\n    \n    Scale := b;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218550,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction Scale(s: String; k, n: Integer): String;\n\nvar \n  position, i, j: Integer;\n  source_tmp, str_tmp, res_str: String; \n\nbegin\n  source_tmp := s;  \/\/Copy of input string\n  res_str := '';    \/\/Concantination of scaled strings\n  str_tmp := '';    \/\/Scaled string\n\n  if source_tmp = '' then Result := ''\n  else\n  begin\n    While Length(source_tmp) > 0 do \n      begin \n        position := AnsiPos('\n', source_tmp);\n                    \n          if position = 0 then\n            \/\/For the last string\n            begin\n              \/\/Scaling of characters\n              for i := 1 to Length(source_tmp) do\n                begin\n                  for j := 1 to k do \n                    begin\n                      str_tmp := str_tmp + source_tmp[i];\n                    end;\n                end;\n               \n              \/\/Scaling of strings\n              str_tmp := str_tmp + '\n';\n              for j := 1 to n do\n                begin\n                  res_str := res_str + str_tmp;\n                end;\n              Delete(res_str, Length(res_str) - 1, 2);\n              source_tmp := '';\n            end\n            else\n            \/\/For others strings\n            begin\n              \/\/Scaling of characters\n              for i := 1 to (position - 1) do\n                begin\n                  for j := 1 to k do \n                    begin\n                      str_tmp := str_tmp + source_tmp[i];\n                    end;\n                end;\n              \n              \/\/Scaling for strings\n              str_tmp := str_tmp + '\n';\n              for j := 1 to n do\n                begin\n                  res_str := res_str + str_tmp;\n                end;                \n            end;\n        Delete(source_tmp, 1, position + 1);\n        str_tmp := '';\n        end;\n    Result := res_str;    \n  end;\nend;\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218551,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nfunction Scale(s: String; k, n: Integer): String;\nvar index, count: byte;\n    h, g: string;\nbegin\n  result := '';\n  if Length(s) > 0 then\n  begin\n  g := '';\n  index := 1;\n  while index <= Length(s) do\n  begin\n    if s[index] <> '\\' then\n    begin\n      for count := 1 to k do\n        g += s[index];\n      index += 1;\n    end\n    else\n    begin\n      g += '\n';\n      h := g;\n      for count :=2 to n do\n          g += h;\n      index += 2;\n      result += g;\n      g := '';\n    end;\n  end;\n  h := '\n' + g;\n  for count :=2 to n do\n    g += h;\n  result += g;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218552,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\n{ This all seems kinda goofy since Pascal treats '\n' as a string\n   of length 2, containing a '\\' and an 'n' }\nfunction Scale(s: String; k, n: Integer): String;\nvar\n  size, charIndex, lineIndex, scaleIndex : integer;\n  line : string;\n\nbegin\n  scale := '';\n  size := trunc(sqrt(length(s)));\n  for lineIndex := 1 to size do\n    begin\n      line := '';\n      for charIndex := 1 to size do\n        for scaleIndex := 1 to k do\n          line := line + s[(lineIndex - 1) * (size + 2) + charIndex];\n      for scaleIndex := 1 to n do\n        scale := scale + line + '\n';\n    end;\n  delete(scale, length(scale) - 1, 2);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218553,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Scale(s: String; k, n: Integer): String;\n\nimplementation\n\nfunction Scale(s: String; k, n: Integer): String;\nvar\n  w, h, i1, i2, i3, i4: Integer;\n  r: String;\nbegin\n  if (Length(s) = 0) then exit('');\n  w := 0;\n  r := '';\n  while (w <= Length(s)) do\n  begin\n    if (s[w] = '\\') then break;\n    Inc(w);\n  end;\n  w := w - 1;\n  h := (Length(s) + 2) div (w + 2);\n  if (w = 0) then exit('');\n  if (h = 0) then exit('');\n  for i1 := 0 to h - 1 do\n  begin\n    for i2 := 1 to n do\n    begin\n      for i3 := 1 to w do\n      begin\n        for i4 := 1 to k do\n        begin\n          r := r + s[i1 * (w + 2) + i3];\n        end;\n      end;\n      if ((i1 + 1 < h) or (i2 < n)) then r := r + '\n';\n    end;\n  end;\n  Scale := r;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56efab15740d301ab40002ee":[{"id":218554,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\ntype TFunctionParameter = function(x, y : Int64) : Int64;\nfunction Gcdi(a, b: Int64): Int64;\nfunction Lcmu(a, b: Int64): Int64;\nfunction Som(a, b: Int64): Int64;\nfunction Maxi(a, b: Int64): Int64;\nfunction Mini(a, b: Int64): Int64;\nfunction OperArray(fct: TFunctionParameter; arr: TInt64Array; init: Int64): TInt64Array;\n\nimplementation\n\nfunction Gcdi(a, b: Int64): Int64;\nbegin\n  if (b = 0) then\n    Result := abs(a)\n  else\n    Result := Gcdi(b, a mod b);\nend;\nfunction Lcmu(a, b: Int64): Int64;\nbegin\n  Result := abs(a * b) div gcdi(a, b);\nend;\nfunction Som(a, b: Int64): Int64;\nbegin\n  Result := a + b;\nend;\nfunction Maxi(a, b: Int64): Int64;\nbegin\n  if (a > b) then\n    Result := a\n  else\n    Result := b;\nend;\nfunction Mini(a, b: Int64): Int64;\nbegin\n  if (a < b) then\n    Result := a\n  else\n    Result := b;\nend;\nfunction OperArray(fct: TFunctionParameter; arr: TInt64Array; init: Int64): TInt64Array;\nvar i, acc: Int64;\nbegin\n  setLength(Result, Length(arr));\n  acc := init;\n  i := 0;\n  while i < Length(arr) do begin\n    acc := fct(acc, arr[i]);\n    Result[i] := acc;\n    i := i + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218555,"user_id":76,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\ntype TFunctionParameter = function(x, y : Int64) : Int64;\nfunction Gcdi(x, y: Int64): Int64;\nfunction Lcmu(a, b: Int64): Int64;\nfunction Som(a, b: Int64): Int64;\nfunction Maxi(a, b: Int64): Int64;\nfunction Mini(a, b: Int64): Int64;\nfunction OperArray(fct: TFunctionParameter; arr: TInt64Array; init: Int64): TInt64Array;\n\nimplementation\n\nuses Math;\n\nfunction Gcdi(x, y: Int64): Int64;\nbegin\n  if (x < 0) then x := Abs(x);\n  if (y < 0) then y := Abs(y);\n  if (y = 0) then result := x\n  else result := Gcdi(y, x mod y);\nend;\n\nfunction Lcmu(a, b: Int64): Int64;\nbegin\n  result := Abs(a * b) div Gcdi(a, b);\nend;\n\nfunction Som(a, b: Int64): Int64;\nbegin\n  result := a + b;\nend;\n\nfunction Maxi(a, b: Int64): Int64;\nbegin\n  result := Max(a, b);\nend;\n\nfunction Mini(a, b: Int64): Int64;\nbegin\n  result := Min(a, b);\nend;\n\nfunction OperArray(fct: TFunctionParameter; arr: TInt64Array; init: Int64): TInt64Array;\nvar\n  i : Integer;\nbegin\n  SetLength(result, Length(arr));\n  for i := Low(arr) to High(arr) do\n  begin\n    init := fct(init, arr[i]);\n    result[i] := init;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218556,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\ntype TFunctionParameter = function(x, y : Int64) : Int64;\nfunction Gcdi(x, y: Int64): Int64;\nfunction Lcmu(a, b: Int64): Int64;\nfunction Som(a, b: Int64): Int64;\nfunction Maxi(a, b: Int64): Int64;\nfunction Mini(a, b: Int64): Int64;\nfunction OperArray(fct: TFunctionParameter; arr: TInt64Array; init: Int64): TInt64Array;\n\nimplementation\n \nuses SysUtils, Math;\n\nfunction Gcdi(x, y: Int64): Int64;\nvar tmp: Int64;\nbegin\n  x := Abs(x); y := Abs(y);\n  while (y <> 0) do begin\n    tmp := x; x := y; y := tmp Mod y;\n  end;\n  Result := x;\nend;\nfunction Lcmu(a, b: Int64): Int64;\nbegin\n  Result := Abs((a * b)) Div gcdi(a, b);\nend;\nfunction Som(a, b: Int64): Int64;\nbegin\n    Result := a + b;\nend;\nfunction Maxi(a, b: Int64): Int64;\nbegin\n Result := max(a, b);\nend;\nfunction Mini(a, b: Int64): Int64;\nbegin\n Result := min(a, b);\nend;\n\nfunction OperArray(fct: TFunctionParameter; arr: TInt64Array; init: Int64): TInt64Array;  \nvar i, n: Int64; res: TInt64Array;\nbegin\n  n := init; SetLength(res{%H-}, Length(arr));\n  For i := 0 To High(arr) do begin\n    n := fct(n, arr[i]);\n    res[i] := n;\n  end;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"56fe17fcc25bf3e19a000292":[{"id":218557,"user_id":53,"body":"unit Kata;\n\ninterface\n  \nfunction U1(n, p: Int64): Int64;\nfunction V1(n, p: Int64): Int64;\n\nimplementation\n\nfunction V1(n, p: Int64): Int64;\nbegin\n  Result := (2 * n + 1) * p;\nend;\n\nfunction U1(n, p: Int64): Int64;\nbegin\n  Result := (n + 1) * p;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218558,"user_id":null,"body":"unit Kata;\n\ninterface\n  \nfunction U1(n, p: Int64): Int64;\nfunction V1(n, p: Int64): Int64;\n\nimplementation\n\nfunction U1(n, p: Int64): Int64;\nbegin\n  \/\/ your code\n  Result := p * (n + 1);\nend;\n\nfunction V1(n, p: Int64): Int64;\nbegin\n  \/\/ your code\n  Result := p * (2 * n + 1);\nend; \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218559,"user_id":527,"body":"unit Kata;\n\ninterface\n  \nfunction U1(n, p: Int64): Int64;\nfunction V1(n, p: Int64): Int64;\n\nimplementation\n\nfunction U1(n, p: Int64): Int64;\nbegin\n  Result := (n + 1) * p;\nend;\n\nfunction V1(n, p: Int64): Int64;\nbegin\n  Result := (2 * n + 1) * p;\nend; \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5726f813c8dcebf5ed000a6b":[{"id":218560,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype IntegerArray = array of Int64;\n  \nfunction CountPrimeFactors(n: Int64): Int64;\nfunction CountKprimes(k, start, nd: Int64): IntegerArray;\nfunction Puzzle(s: Int64): Int64;\n\nimplementation\n\nfunction CountPrimeFactors(n: Int64): Int64;\nvar \n  i: Int64;\nbegin\n  Result := 0;\n  i := 2;\n  while (i <= n Div i) do\n  begin\n    while (n Mod i = 0) do\n    begin\n      n := n Div i;\n      Inc(Result);\n    end;\n    Inc(i);\n  end;\n  if (n > 1) then Inc(Result);\nend;\n\nfunction CountKprimes(k, start, nd: Int64): IntegerArray;\nvar\n  n, j: Int64;\nbegin\n  SetLength(Result, 0);\n  n := start;\n  while (n <= nd) do\n  begin\n    j := CountPrimeFactors(n);\n    if (j = k) then\n    begin\n      SetLength(Result, Length(Result) + 1);\n      Result[Length(Result)-1] := n;\n    end;\n    Inc(n);\n  end;\nend;\n\nfunction Puzzle(s: Int64): Int64;\nvar\n  xs, ys: IntegerArray;\n  c: Int64;\n  i, j: integer;\nbegin\n  Result := 0;\n  xs := CountKprimes(7, 128, s - 10);\n  ys := CountKprimes(3, 8, s - 130);\n  for i := 0 to Length(xs) - 1 do\n  begin\n    for j := 0 to Length(ys) - 1 do\n    begin\n      c := s - xs[i] - ys[j];\n      if ((c > 0) and (CountPrimeFactors(c) = 1)) then Inc(Result);\n    end;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218561,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n  \nfunction CountKprimes(k, start, nd: Int64): IntegerArray;\nfunction Puzzle(s: Int64): Int64;\n\nimplementation\n\nuses\n  SysUtils;\n\nfunction nbDivisors(n: Int64): Int64;\nvar i: Int64;\nbegin\n  Result := 0; i := 2;\n  while (i * i <= n) do\n  begin\n    while (n Mod i = 0) do\n    begin\n      n := n Div i;\n      Inc(Result);\n    end;\n    Inc(i);\n  end;\n  if n > 1 then Inc(Result);\nend;\n\nfunction CountKprimes(k, start, nd: Int64): IntegerArray;\nvar A: IntegerArray; i, cnt: Int64;\nbegin\n  cnt := 0;\n  SetLength(A, 0);\n  for i:= start to nd do\n  begin\n    if (nbDivisors(i) = k) then\n    begin\n      Inc(cnt);\n      SetLength(A, cnt);\n      A[cnt - 1] := i;\n    end;\n  end;\n  Result := A;\nend;\n\nfunction IsPrime(n: Int64): Boolean;\nvar i: Int64; res: Boolean;\nbegin\n  if (n = 2) then\n    res := True\n  else if ((n < 3) Or (n Mod 2 = 0)) then\n    res := False\n  else begin\n    i := 3; res := True;\n    while (i * i <= n) do begin\n      if (n Mod i = 0) then begin\n        res := False;\n        break\n      end;\n      i += 2;\n    end;\n  end;\n  Result := res;\nend;\n\nfunction Puzzle(s: Int64): Int64;\nvar b, c: IntegerArray; j, k: Int64;\nbegin\n    Result := 0;\n    b := CountKprimes(7, 128, s - 6);\n    c := CountKprimes(3, 4, s - 130);\n    for j in b do\n      for k in c do\n        if (IsPrime(s - j - k)) then\n          Inc(Result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"573182c405d14db0da00064e":[{"id":218562,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction ConsecKprimes(k: Int64; arr: TInt64Array): Int64;\nfunction CountPrimeFactors(n: Int64): Int64;\n\nimplementation\n\nfunction ConsecKprimes(k: Int64; arr: TInt64Array): Int64;\nvar\n  i, p,q: Int64;\nbegin\n  Result := 0;\n  i := 0;\n  p := 0;\n  while (i < Length(arr)) do\n  begin\n    q := CountPrimeFactors(arr[i]);\n    if ((q = k) and (p = k)) then Inc(Result);\n    Inc(i);\n    p := q;\n  end;\nend;\n\nfunction CountPrimeFactors(n: Int64): Int64;\nvar \n  i: Int64;\nbegin\n  Result := 0;\n  i := 2;\n  while (i <= n Div i) do\n  begin\n    while (n Mod i = 0) do\n    begin\n      n := n Div i;\n      Inc(Result);\n    end;\n    Inc(i);\n  end;\n  if (n > 1) then Inc(Result);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218563,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction ConsecKprimes(k: Int64; arr: TInt64Array): Int64;\n\nimplementation\n\nfunction ConsecKprimes(k: Int64; arr: TInt64Array): Int64;\n  function nbDivisors(n: Int64): Int64;\n  var i: Int64;\n  begin\n    Result := 0; i := 2;\n    while (i * i <= n) do\n    begin\n      while (n Mod i = 0) do\n      begin\n        n := n Div i;\n        Inc(Result);\n      end;\n      Inc(i);\n    end;\n    if n > 1 then Inc(Result);\n  end;\n\nvar cnt, i: Int64; current, previous: Boolean;\nbegin\n  i := 0; cnt := 0; previous := False;\n  while i < Length(arr) do begin\n    current := nbDivisors(arr[i]) = k;\n    if (current = True) and (previous = current) then\n      Inc(cnt);\n    previous := current;\n    Inc(i);\n  end;\n  Result := cnt;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218564,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction ConsecKprimes(k: Int64; arr: TInt64Array): Int64;\n\nimplementation\n\nfunction ConsecKprimes(k: Int64; arr: TInt64Array): Int64;\n  function nbDivisors(n: Int64): Int64;\n  var i: Int64;\n  begin\n    Result := 0; i := 2;\n    while (i * i <= n) do\n    begin\n      while (n Mod i = 0) do\n      begin\n        n := n Div i;\n        Inc(Result);\n      end;\n      Inc(i);\n    end;\n    if n > 1 then Inc(Result);\n  end;\n\nvar cnt, i: Int64;\nbegin\n  i := 1; cnt := 0;\n  while i < Length(arr) do begin\n    if (nbDivisors(arr[i]) = k) and (nbDivisors(arr[i - 1]) = k) then\n      Inc(cnt);\n    Inc(i);\n  end;\n  Result := cnt;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"573992c724fc289553000e95":[{"id":218565,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TSmallest = array [0..2] of Int64;\nfunction Smallest(n: Int64): TSmallest;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n  \nfunction Smallest(n: Int64): TSmallest;\nvar s, c, tmp, str1, str2: String; T: TSmallest = (-1, 0, 0); lg, i, j: Int64;\nbegin\n  s := IntToStr(n); lg := Length(s); tmp := s;\n  for i := 0 To lg - 1 do begin\n    c := s[i + 1];\n    str1 := s.Substring(0, i) + s.Substring(i + 1, lg);\n    for j := 0 To lg - 1 do begin\n      str2 := str1.Substring(0, j) + c + str1.Substring(j, lg);\n      if (str2 < tmp) then begin\n        tmp := str2;\n        T[0] := StrToInt64(tmp);\n        T[1] := i;\n        T[2] := j;\n      end;\n    end;\n  end;\n  If (T[0] = -1) then T[0] := n;\n  Result := T;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"57591ef494aba64d14000526":[{"id":218566,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Integer;\n\nfunction John(n: Int64): IntegerArray;\nfunction Ann(n: Int64): IntegerArray;\nfunction SumJohn(n: Int64): Int64;\nfunction SumAnn(n: Int64): Int64;\n\nimplementation\n\nfunction John(n: Int64): IntegerArray;\nvar\n  xs, ys : IntegerArray;\n  i : integer;\nbegin\n  SetLength(xs, n);\n  SetLength(ys, n);\n  xs[0] := 0;\n  ys[0] := 1;\n  for i := 1 to n-1 do\n  begin\n    xs[i] := i - ys[xs[i - 1]];\n    ys[i] := i - xs[ys[i - 1]];\n  end;\n  Result := xs;\nend;\n\nfunction Ann(n: Int64): IntegerArray;\nvar\n  xs, ys : IntegerArray;\n  i : integer;\nbegin\n  SetLength(xs, n);\n  SetLength(ys, n);\n  xs[0] := 0;\n  ys[0] := 1;\n  for i := 1 to n-1 do\n  begin\n    xs[i] := i - ys[xs[i - 1]];\n    ys[i] := i - xs[ys[i - 1]];\n  end;\n  Result := ys;\nend;\n\nfunction SumJohn(n: Int64): Int64;\nvar\n  fs : IntegerArray;\n  i : integer;\nbegin\n  Result := 0;\n  fs := John(n);\n  for i := 0 to Length(fs)-1 do\n  begin\n    Result := Result + fs[i];\n  end;\nend;\n\nfunction SumAnn(n: Int64): Int64;\nvar\n  fs : IntegerArray;\n  i : integer;\nbegin\n  Result := 0;\n  fs := Ann(n);\n  for i := 0 to Length(fs)-1 do\n  begin\n    Result := Result + fs[i];\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218567,"user_id":527,"body":"unit Kata;\n\ninterface\n\nuses\n  types;\n\ntype\n  IntegerArray = TIntegerDynArray;\n\nfunction John(n: Int64): TIntegerDynArray;\nfunction Ann(n: Int64): TIntegerDynArray;\nfunction SumJohn(n: Int64): Int64;\nfunction SumAnn(n: Int64): Int64;\n\nimplementation\n\nuses\n  fgl;\n\nvar\n  cachedJs, cachedAs: specialize TFPGList<Integer>;\n\nfunction GetA(n: Integer): Integer; forward;\n\nfunction GetJ(n: Integer): Integer;\nbegin\n  if n = 0 then\n    exit(0);\n  if n >= cachedJs.Count then\n    cachedJs.Count := n + 1;\n  if cachedJs[n] = 0 then\n    cachedJs[n] := n - GetA(GetJ(n - 1));\n  result := cachedJs[n];\nend;\n\nfunction GetA(n: Integer): Integer;\nbegin\n  if n = 0 then\n    exit(1);\n  if n >= cachedAs.Count then\n    cachedAs.Count := n + 1;\n  if cachedAs[n] = 0 then\n    cachedAs[n] := n - GetJ(GetA(n - 1));\n  result := cachedAs[n];\nend;\n\nfunction John(n: Int64): TIntegerDynArray;\nvar\n  i: Integer;\nbegin\n  result := nil;\n  SetLength(result, n);\n  for i := 0 to n - 1 do\n    result[i] := GetJ(i);\nend;\n\nfunction Ann(n: Int64): TIntegerDynArray;\nvar\n  i: Integer;\nbegin\n  result := nil;\n  SetLength(result, n);\n  for i := 0 to n - 1 do\n    result[i] := GetA(i);\nend;\n\nfunction SumJohn(n: Int64): Int64;\nvar\n  i: Integer;\nbegin\n  result := 0;\n  for i := 0 to n - 1 do\n    inc(result, GetJ(i));\nend;\n\nfunction SumAnn(n: Int64): Int64;\nvar\n  i: Integer;\nbegin\n  result := 0;\n  for i := 0 to n - 1 do\n    inc(result, GetA(i));\nend;\n\ninitialization\n  cachedAs := specialize TFPGList<Integer>.Create();\n  cachedJs := specialize TFPGList<Integer>.Create();\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218568,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Integer;\n\nfunction John(n: Int64): IntegerArray;\nfunction Ann(n: Int64): IntegerArray;\nfunction SumJohn(n: Int64): Int64;\nfunction SumAnn(n: Int64): Int64;\n\nimplementation\n\nfunction JohnAnn(n: Int64; s: String): IntegerArray;\nvar J, A: IntegerArray; i: Int64;\nbegin\n  SetLength(J, n);\n  SetLength(A, n);\n  J[0] := 0;\n  A[0] := 1;\n  i := 0;\n  while (i < n - 1) do\n  begin\n    J[i + 1] := i + 1 - A[J[i]];\n    A[i + 1] := i + 1 - J[A[i]];\n    i += 1;\n  end;\n  if (s = 'J') then Result := J\n  else Result := A;\nend;\n\nfunction John(n: Int64): IntegerArray;\nbegin\n  Result := JohnAnn(n, 'J');\nend;\n\nfunction Ann(n: Int64): IntegerArray;\nbegin\n  Result := JohnAnn(n, 'A');\nend;\n\nfunction SumJohn(n: Int64): Int64;\n  var J: IntegerArray; i: Int64;\n  begin\n    J := JohnAnn(n, 'J');\n    Result := 0;\n    for i := 0 to High(J) do\n    begin\n      Result += J[i];\n    end;\nend;\n\nfunction SumAnn(n: Int64): Int64;\n  var A: IntegerArray; i: Int64;\n  begin\n    A := JohnAnn(n, 'A');\n    Result := 0;\n    for i := 0 to High(A) do\n    begin\n      Result += A[i];\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5772382d509c65de7e000982":[{"id":218569,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype TInt64Array = array of Int64;\nfunction Sequence(n: Int64): TInt64Array;\nfunction LengthSupUK(n, k: Int64): Int64;\nfunction Comp(n: Int64): Int64;\n\nimplementation\n\nfunction Sequence(n: Int64): TInt64Array;\nvar i, x: Int64;\nbegin\n  setLength(Result, n + 1);\n  Result[0] := 0;\n  Result[1] := 1;\n  Result[2] := 1;\n  i := 3;\n  while i < Length(Result) do begin\n    x := Result[i - Result[i - 1]] + Result[i - Result[i - 2]];\n    Result[i] := x;\n    i := i + 1;\n  end;\nend;\n\nfunction LengthSupUK(n, k: Int64): Int64;\nvar i, x: Int64;\nvar xs: TInt64Array;\nbegin\n  xs := Sequence(n);\n  Result := 0;\n  i := 0;\n  while i < Length(xs) do begin\n    x := xs[i];\n    if (x >= k) then Result := Result + 1;\n    i := i + 1;\n  end;\nend;\n\nfunction Comp(n: Int64): Int64;\nvar i, x, y: Int64;\nvar xs: TInt64Array;\nbegin\n  xs := Sequence(n);\n  Result := 0;\n  i := 1;\n  while i < Length(xs) do begin\n    x := xs[i];\n    y := xs[i - 1];\n    if (x < y) then Result := Result + 1;\n    i := i + 1;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218570,"user_id":null,"body":"unit kata;\n\ninterface\n\nfunction LengthSupUK(n, k: Int64): Int64;\nfunction Comp(n: Int64): Int64;\nfunction FiboAkin(var FiboArr: array of int64): int64;\n\nimplementation\n\nfunction LengthSupUK(n, k: Int64): Int64;\nvar\n  FiboArr: array of int64;\n  i, amount: int64;\nbegin\n  if (n < 3) or (k < 3) then\n  begin\n    Result := -1; \/\/ 'error: N and K must be greater than 2'\n    exit\n  end\n  else\n  begin\n    SetLength(FiboArr, n+1);\n    FiboAkin(FiboArr);\n    amount := 0;\n    for i := 1 to n do\n      begin\n        if FiboArr[i] >= k then inc(amount);\n      end;\n    Result := amount;\n  end;\nend;\n\n\nfunction Comp(n: Int64): Int64;\nvar\n  FiboArr: array of int64;\n  i, amount: int64;\nbegin\n  if (n < 3) then\n  begin\n    Result := -1; \/\/ 'error: N must be greater than 2'\n    exit\n  end\n  else\n  begin\n    SetLength(FiboArr, n+1);\n    FiboAkin(FiboArr);\n    amount := 0;\n    for i := 2 to n do\n      begin\n        if FiboArr[i] < FiboArr[i-1] then inc(amount);\n      end;\n    Result := amount;\n  end;\nend;\n\nfunction FiboAkin(var FiboArr: array of int64): int64;\nvar\n  a1, a2, i, tmpResult, n: int64;\nbegin\n  n := length(FiboArr) - 1;\n\/\/    SetLength(FiboArr, n+1);\n    FiboArr[0] := 0;\n    for i := 1 to n do\n      begin\n        if (i = 1) or (i = 2) then tmpResult := 1\n        else\n          begin\n            a1 := FiboArr[i-1];\n            a2 := FiboArr[i-2];\n            tmpResult := FiboArr[i - a1] + FiboArr[i - a2];\n          end;\n        FiboArr[i] := tmpResult;\n      end;\n    Result := FiboArr[n];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218571,"user_id":492,"body":"unit Kata;\n\ninterface\nfunction LengthSupUK(n, k: Int64): Int64;\nfunction Comp(n: Int64): Int64;\n\nimplementation\n\ntype TInt64Array = array of Int64;\n\nfunction U1(n: Int64): TInt64Array;\nvar memu: TInt64Array; i: Int64;\nbegin\n  SetLength(memu, n);\n  memu[0] := 1; memu[1] := 1;\n  i := 2;\n  while (i < n) do begin\n    memu[i] := memu[i - memu[i - 1]] + memu[i - memu[i - 2]];\n    Inc(i);\n  end;\n  U1 := memu;\nend;\nfunction LengthSupUK(n, k: Int64): Int64;\nvar l: TInt64Array; i, cnt: Int64;\nbegin\n  l := U1(n); cnt := 0;\n  for i := 0 To n - 1 do\n      if (l[i] >= k) then Inc(cnt);\n  LengthSupUK := cnt;\nend;\nfunction Comp(n: Int64): Int64;\nvar memu: TInt64Array; prev, cnt, i, cur : Int64;\nbegin\n  memu := U1(n); prev := 1; cnt := 0; i := 1;\n  while (i < n) do begin\n    cur := memu[i];\n    if (cur < prev) then Inc(cnt);\n    prev := cur;\n    Inc(i);\n  end;\n  Comp := cnt;\nend;    \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"58184387d14fc32f2b0012b2":[{"id":218572,"user_id":168,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils;\n\nfunction F(x: Double): Double;\n\nimplementation\n\nfunction F(x: Double): Double;\nbegin\n  \/\/ your code\n  Result := x \/ (sqrt(1 + x) + 1)\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218573,"user_id":50,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils;\n\nfunction F(x: Double): Double;\n\nimplementation\n\nfunction F(x: Double): Double;\nbegin\n  \/\/ your code\n  Result := x\/(1+sqrt(1+x));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218574,"user_id":53,"body":"unit Kata;\n\ninterface\n  \nuses SysUtils;\n\nfunction F(x: Double): Double;\n\nimplementation\n\nfunction F(x: Double): Double;\nbegin\n  Result := x \/ 2 - x * x \/ 8 + x * x * x \/ 16 - 5 * x * x * x * x \/ 128;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218575,"user_id":527,"body":"unit Kata;\n\ninterface\n  \nfunction F(x: Double): Double;\n\nimplementation\n\nfunction F(x: Double): Double;\nbegin\n  Result := x \/ (Sqrt(x + 1) + 1);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218576,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses SysUtils, Math;\n\nfunction F(x: Double): Double;\n\nimplementation\n\nfunction F(x: Double): Double;\nbegin\n    F := x \/ (1.0 + Sqrt(1.0 + x));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"581ee0db1bbdd04e010002fd":[{"id":218577,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TDoubleArray = array of Double;\ntype TFunctionParameter = function(s : Double) : Double;\nfunction Interp(f: TFunctionParameter; l, u: Double; n: Int64): TDoubleArray;\n\nimplementation\n \nuses SysUtils, Math;\n\nfunction Interp(f: TFunctionParameter; l, u: Double; n: Int64): TDoubleArray;\nvar d: Double; i: Int64; res: TDoubleArray;\nbegin\n  d := (u - l) \/ n;\n  SetLength(res, n);\n  For i := 0 To n - 1 do\n    res[i] := Floor(f(l + i * d) * 100.0) \/ 100.0;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5868b2de442e3fb2bb000119":[{"id":218578,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype TClosestSmallestArray = array of array[0..2] of Int64;\nfunction Closest(strng: String): TClosestSmallestArray;\n\nimplementation\nuses SysUtils, StrUtils, math;\nfunction Closest(strng: String): TClosestSmallestArray;\nvar i, j, minn, n, len, s, ai, aj: Integer;\n    w : String;\n    arr : array of Integer;\nbegin\n  result := [];\n  if Length(strng) = 0 then Exit(result);\n  len := WordCount(strng, StdWordDelims);\n  setLength(arr, len);\n  for i := 1 to len do\n  begin\n    n := 0;\n    w := ExtractWord(i, strng, StdWordDelims);\n    for j := Low(w) to High(w) do\n      n += StrToInt64(w[j]);\n    arr[i - 1] := n;\n  end;\n  minn := 1000000;\n  ai := Low(arr);\n  aj := Low(arr) + 1;\n  for i := Low(arr) to High(arr) do\n  begin\n    for j := Low(arr) to High(arr) do\n    begin\n      if j <> i then\n      begin\n        s := Abs(arr[i] - arr[j]);\n        if (s < minn) or ((s = minn) and (Min(arr[i],arr[j]) < Min(arr[ai],arr[aj]))) then\n        begin\n          minn := s;\n          if arr[i] <= arr[j] then\n          begin\n            ai := i;\n            aj := j;\n          end\n          else\n          begin\n            ai := j;\n            aj := i;\n          end;\n          writeln(format('%d : %d - %d = %d', [minn, i, j, s]));\n        end;\n      end;\n    end;\n  end;\n  setLength(result, 2);\n  result[0][0] := arr[ai];\n  result[0][1] := ai;\n  result[0][2] := StrToInt64(ExtractWord(ai + 1, strng, StdWordDelims));\n  result[1][0] := arr[aj];\n  result[1][1] := aj;\n  result[1][2] := StrToInt64(ExtractWord(aj + 1, strng, StdWordDelims));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218579,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TClosestSmallestArray = array of array[0..2] of Int64;\nfunction Closest(strng: String): TClosestSmallestArray;\n\nimplementation\n \nuses SysUtils, Math;\n\ntype TSmallArray = array [0..2] of Int64;\n\nfunction Closest(strng: String): TClosestSmallestArray;\n  procedure Sort(A: TClosestSmallestArray);\n    function Compare(const x, y: TSmallArray): integer;\n    begin\n      if (x[0] - y[0] = 0) then\n        Result := x[1] - y[1]\n      else\n        Result := CompareValue(x[0], y[0]);\n    end;\n  var i, nr: Int64; tmp: TSmallArray;\n  begin\n    nr := Length(A);\n    if (nr <= 1) then Exit();\n    i:=0;\n    repeat\n      if (Compare(a[i], a[i+1]) > 0) then\n      begin\n          tmp := a[i];\n          a[i] := a[i+1];\n          a[i+1] := tmp;\n          i := -1;\n      end;\n      Inc(i);\n    until i = nr -1;\n  end;\n  \nvar mpty: TClosestSmallestArray = (); arr: TStringArray;\nvar s: String; i, j, cnt, w: Int64;\nvar a, u, mn, ndx: Int64;\nbegin\n  if (Length(strng) = 0) then Exit(mpty);\n  arr := strng.Split(' ', TStringSplitOptions.ExcludeEmpty);\n  SetLength(Result{%H-}, 0);\n  cnt := 0;\n  For i := 0 To High(arr) do begin\n    s := arr[i];\n    w := 0;\n    For j := 1 To Length(s) do w += StrToInt(s[j]);\n    Inc(cnt);\n    SetLength(Result, cnt);\n    Result[cnt - 1][0] := w;\n    Result[cnt - 1][1] := i;\n    Result[cnt - 1][2] := StrToInt(s);\n  end;\n  Sort(Result);\n  u := 1; mn := MAXINT; ndx := -1;\n  while (u < Length(Result)) do\n  begin\n    a := Result[u][0] - Result[u - 1][0];\n    if (a < mn) then begin mn := a; ndx := u; end;\n    Inc(u);\n  end;\n  Result := [Result[ndx - 1], Result[ndx]];\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"58ce8725c835848ad6000007":[{"id":218580,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  Result := Trunc((w0 * (100 - p0)) \/ (100 - p1));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218581,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  Result := trunc((100-p0)*w0\/(100-p1));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218582,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nvar \n  w1: Int64;\nbegin\n  w1 := round(Trunc((100-p0)*(w0\/100)\/(100-p1)*100));\n  Result := w1;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218583,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  Result := Trunc((w0 * (100 - p0)\/100) * 100 \/ (100 - p1));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218584,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\nuses math, SysUtils ;\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  Result := trunc(w0\/((100-p1)\/(100-p0)));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218585,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nvar\n   d0, d1 : real;\n   wd, wf : real;\nbegin\n  d0 := 100-p0;\n  wd := d0 \/ 100 * w0;\n  \n  d1 := 100-p1;\n  wf := 100 \/ d1 * wd;\n  Result := trunc(wf);\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218586,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nvar \ndry:Real;\nwater:Real;\nx:Real;\nbegin\n    water:=w0*p0\/100;\n    dry:=w0-water;\n    x:=(dry*100)\/(100-p1);\n    if (trunc(x*100))mod 100=99 then\n      x:=x+1;\n    Result := trunc(x);\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218587,"user_id":50,"body":"unit Kata;\n\ninterface\n\nUses math;\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  Result := Floor((100-p0)*w0\/(100-p1));\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218588,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  potatoes := trunc(w0*((100-p0)\/(100-p1))) ;\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218589,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\n\nimplementation\n\nfunction potatoes(p0, w0, p1: Int64): Int64;\nbegin\n  Result := w0 * (100 - p0) div (100 - p1);\nend; \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59c68ea2aeb2843e18000109":[{"id":218590,"user_id":492,"body":"unit Kata;\n\ninterface\n  \nfunction Amort(rate: Double; bal, term, numPayments: Int64): String;\n\nimplementation\n\nuses SysUtils, math;\n\nfunction Amort(rate: Double; bal, term, numPayments: Int64): String;\n  function payment(rate: Double; bal, term: Int64): Double;\n  var r, n, d, pmt: Double;\n  begin\n    r := rate \/ 1200.0;\n    n := r * bal;\n    d := 1 - Power(1 + r, -term);\n    pmt := n \/ d;\n    Result := pmt;\n  end;\nvar p, r, balance, intrst, princ: Double; i: Int64;\nbegin\n    p := payment(rate, bal, term);\n    r := rate \/ 1200.0;\n    i := 1;\n    balance := bal;\n    intrst := 0;\n    princ := 0;\n    while (i <= numPayments) do\n    begin\n        intrst := balance * r;\n        princ := p - intrst;\n        balance -= princ;\n        Inc(i);\n    end;\n    Result := Format('num_payment %d c %.0f princ %.0f int %.0f balance %.0f', [i - 1, p, princ, intrst, balance]);\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59ccf051dcc4050f7800008f":[{"id":218591,"user_id":492,"body":"unit Kata;\n\ninterface\n  \ntype\n  TBuddy = array [0..1] of Int64;\nconst\n  noBuddy: TBuddy = (-1, -1);   \n  \nfunction Buddy(start, limit: Int64): TBuddy;\n\nimplementation\n  \nfunction DivisorsSum(n: Int64): Int64;\nvar sum, a, b: Int64; maxDiv: Double;\nbegin\n  sum := 1;\n  maxDiv := Sqrt(n);\n  a := 2;\n  while (a <= maxDiv) do\n  begin\n    if (n Mod a = 0) then\n    begin\n      sum += a;\n      b := n Div a;\n      if (a <> b) then sum += b;\n    end;\n    Inc(a);\n  end;\n  Result := sum;\nend;\nfunction Buddy(start, limit: Int64): TBuddy;\nvar n, m: Int64;\nbegin\n  Result := noBuddy;\n  for n := start to limit do\n  begin\n    m := DivisorsSum(n) - 1;\n    if ((m > n) And (n = DivisorsSum(m) - 1)) then\n    begin\n      Result[0] := n;\n      Result[1] := m;\n      exit(Result);\n    end;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59d727d40e8c9dd2dd00009f":[{"id":218592,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Balance(book: String): String;\n\nimplementation\n \nuses SysUtils, StrUtils, RegExpr;\n\nfunction Balance(book: String): String;\nvar re: TRegExpr; snb, line: String; arr, linearr: TStringArray;\nvar total, bal: Double; i, cnt: Int64;\nbegin\n  re := TRegExpr.Create;\n  re.Expression := '[^a-zA-Z0-9. \\\\]';\n  snb := ReplaceRegExpr(re.Expression, book, '');\n  re.Free;\n  arr := SplitString(snb, '\n');\n  total := StrToFloat(arr[0]); bal := total; cnt := 0;\n  Result := Format('Original Balance: %.2f', [total]);\n  for i := 1 to High(arr) do begin\n    line := arr[i];\n    if (line <> '') then begin\n      linearr := line.Split(' ', TStringSplitOptions.ExcludeEmpty);\n      Inc(cnt);\n      bal -= StrToFloat(linearr[2]);\n      Result += Format('\n%s %s %.2f Balance %.2f', [linearr[0], linearr[1], StrToFloat(linearr[2]), bal]);\n    end;\n  end;\n  Result += Format('\nTotal expense  %.2f\nAverage expense  %.2f' , [total - bal, (total - bal) \/ cnt]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59d9d8cb27ee005972000045":[{"id":218593,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Catalog(s, article: String): String;\n\nimplementation\n\nuses\n  SysUtils, StrUtils, RegExpr;\n\nfunction Catalog(s, article: String): String;\nvar a: TStringArray; aa, res: String; re: TRegExpr; name, prx, qty: String;\nbegin\n  re := TRegExpr.Create;\n  res := '';\n  a := SplitString(s, LineEnding + LineEnding);\n  for aa in a do begin\n    if (aa = '') then continue;\n    re.Expression := '<prod><name>(.*?)<\/name><prx>(.*?)<\/prx><qty>(.*?)<\/qty><\/prod>';\n    if re.Exec(aa) then begin\n      name := re.Match[1];\n      if (AnsiContainsStr(name, article)) then begin\n        prx := re.Match[2];\n        qty := re.Match[3];\n        res += Name + ' > prx: $' + prx + ' qty: ' + qty + LineEnding;\n      end;\n    end;\n  end;\n  re.Free;\n  if (Length(res) > 0) then\n     Result := Copy(res, 1, Length(res) - Length(LineEnding))\n  else Result := 'Nothing';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218594,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Classes, SysUtils;\n\nfunction Catalog(s, article: String): String;\n\nimplementation\n\nfunction Catalog(s, article: String): String;\nvar\n  vslProdutos, vslIndexContains : TStringList;\n  vsResult, vsProduto, vsPreco, vsQuantidade : String;\n  I : Integer;\nbegin\n  vslProdutos := TStringList.Create(); \n  vslIndexContains := TStringList.Create();\n  ExtractStrings([LineEnding], [], PChar(s), vslProdutos);\n  vsResult := '';\n  for I := 0 to vslProdutos.Count - 1 do\n  begin\n    if pos(article, vslProdutos[I]) <> 0 then\n      vslIndexContains.Add(IntToStr(I));\n  end;\n  if vslIndexContains.Count = 0 then\n  begin\n    vsResult := 'Nothing';\n    Result := vsResult;\n    exit;\n  end  \n  else\n  begin\n    for I := 0 to vslIndexContains.Count - 1 do\n    begin\n      vsProduto := copy(vslProdutos[StrToInt(vslIndexContains[I])], length('<prod><name>') + 1, pos('<\/name>', vslProdutos[StrToInt(vslIndexContains[I])]) - (length('<prod><name>') + 1));\n      vsPreco := copy(vslProdutos[StrToInt(vslIndexContains[I])], length('<prod><name>') + length(vsProduto) + length('<\/name><prx>') + 1, pos('<\/prx>', vslProdutos[StrToInt(vslIndexContains[I])]) - (length('<prod><name>') + length(vsProduto) + length('<\/name><prx>') + 1));\n      vsQuantidade := copy(vslProdutos[StrToInt(vslIndexContains[I])], length('<prod><name>') + length(vsProduto) + length('<\/name><prx>') + length(vsPreco) + length('<\/prx><qty>') + 1, pos('<\/qty>', vslProdutos[StrToInt(vslIndexContains[I])]) - (length('<prod><name>') + length(vsProduto) + length('<\/name><prx>') + length(vsPreco) + length('<\/prx><qty>') + 1));\n      vsResult := vsResult + vsProduto + ' > prx: $' + vsPreco + ' qty: ' + vsQuantidade + LineEnding;\n    end;    \n    vsResult := copy(vsResult, 1, length(vsResult) - 1); \n    Result := vsResult;\n  end; \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218595,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Catalog(s, article: String): String;\n\nimplementation\n\nfunction Catalog(s, article: String): String;\nvar \n  outStr:string;\n  ArtPos:integer;\n  ArtPosEnd,i:integer;\nbegin\n  ArtPos:=pos(article,s);\n  if ArtPos = 0 then Catalog:='Nothing'\n  else \n  begin\n  i:=1;\n  while pos(article,s) > 0 do\n  begin\n  i:=i+1;\n  if i>2 then outStr:=outStr + LineEnding;\n  if (i>50) then break;\n  ArtPos:=pos(article,s)-20;\n  delete(s,1,ArtPos);\n  ArtPos:=pos('<name>',s)+6;\n  ArtPosEnd:=pos('<\/name>',s);\n  outStr:=outStr + Copy(s,ArtPos,ArtPosEnd-ArtPos) +' > ';\n  ArtPos:=pos('<prx>',s)+5;\n  ArtPosEnd:=pos('<\/prx>',s);\n  outStr:=outStr + 'prx: $'+ Copy(s,ArtPos,ArtPosEnd-ArtPos);\n  ArtPos:=pos('<qty>',s)+5;\n  ArtPosEnd:=pos('<\/qty>',s);\n  outStr:=outStr + ' qty: '+ Copy(s,ArtPos,ArtPosEnd-ArtPos);\n  delete(s,1,ArtPos);\n  Catalog:=outStr;\n  end;\n  end;\n  \nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218596,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Catalog(s, article: String): String;\n\nimplementation\n\nuses\n  Classes, SysUtils, CustApp, Dom, XmlRead;\n\nfunction Catalog(s, article: String): String;\nvar\n  XML: TXMLDocument;\n  Stream: TStringStream;\n  Names: TDOMNodeList;\n  Prices: TDOMNodeList;\n  Qtys: TDOMNodeList;\n  Output: String;\n  i: Integer;\nbegin\n  Output:='';\n  s:= '<prods>' + s + '<\/prods>'; \/\/because the ReadXMLFile function needs a top level node\n  Stream := TStringStream.Create(s); \/\/create a stream from the input string\n  try\n    ReadXMLFile(XML,Stream);\n  finally\n    Stream.Free; \/\/Free the stream\n  end;\n  Names := XML.GetElementsByTagName('name');\n  Prices := XML.GetElementsByTagName('prx');\n  Qtys := XML.GetElementsByTagName('qty');\n  for i:=0 to Names.Count-1 do\n  begin\n    if (pos(article,Names[i].TextContent) <> 0) then\n    begin\n      if (Length(Output) <>0) then Output := Output + AnsiChar(#10);\n      Output:=Output + Names[i].TextContent +\n        ' > prx: $' + Prices[i].TextContent + \n        ' qty: ' + Qtys[i].TextContent;\n      end;\n  end;\n  if (Length(Output) = 0) then Output := 'Nothing';\n  \/\/ your code\n  Result := Output;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59de1e2fe50813a046000124":[{"id":218597,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Change(s, prog, version: String): String;\n\nimplementation\n\nuses SysUtils, StrUtils, RegExpr;\n\nfunction Change(s, prog, version: String): String;\nvar arr: TStringArray; re: TRegExpr; errPh, errVer: Boolean; ph, v: String;\nbegin\n  errPh := False; errVer := False;\n  arr := SplitString(s, '\n');\n  re := TRegExpr.Create;\n  re.Expression := '^Phone: \\+1\\-\\d{3}\\-\\d{3}\\-\\d{4}$';\n  if not re.Exec(arr[3]) then errPh := True;\n  re.Expression := '^Version: \\d+\\.\\d+$';\n  if not re.Exec(arr[5]) then errVer := True;\n  if errPh or errVer then Exit('ERROR: VERSION or PHONE');\n  ph := '+1-503-555-0090'; v := '';\n  if (arr[5] = 'Version: 2.0') then v := '2.0' else v := version;\n  re.Free;\n  Change := Format('Program: %s Author: g964 Phone: %s Date: 2019-01-01 Version: %s', [prog, ph, v]);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59df2f8f08c6cec835000012":[{"id":218598,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Meeting(s: String): String;\n\nimplementation\nuses\n  Classes,SysUtils;\nfunction ApellidoNombreFormato(AVarNombreApellido: String):String;\nvar\n  ml: TStringList;\n  j,k: integer;\n  nom,apl: String;\nbegin\n  Result:='';\n  ml:=TStringList.Create;\n  ml.LineBreak:=':';\n  ml.Text:=AVarNombreApellido;\n  nom := ml[0]; apl:=ml[1];\n  j:=Pos('\"',nom);\n  if j<>0 then \n      delete(nom,j,1);\n  k:=Pos('\"',apl);\n  if k<>0 then\n     delete(apl,k,1);\n  Result:=UpperCase(apl+', '+nom);   \nend;\nfunction Meeting(s: String): String;\nvar\n  sl: TStringList;\n  i:integer;\nbegin\n  \/\/ your code\n  Result := '';\n  sl:=TStringList.Create;\n  sl.LineBreak:=';';\n  sl.Text := s;\n  for i:=0 to sl.Count-1 do begin\n     sl[i]:=ApellidoNombreFormato(sl[i]);\n  end;\n  \/\/Result:='(';\n  sl.Sort;\n  for i:=0 to sl.Count-1 do begin\n      Result:=Result+'('+sl[i]+')';\n  end;\n  \/\/Result:=Result+')';\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218599,"user_id":null,"body":"unit Kata;\n\ninterface\n\nuses Sysutils;\n\nfunction Meeting(s: String): String;\n\nimplementation\n\nfunction Meeting(s: String): String;\n\n  type\n  tRefList = ^tList;\n  tList = record\n             firstName : String;\n             lastName : String;\n             notYetListed : boolean;\n             next : tRefList\n           end;\n\n  var\n  startPointer : tRefList;\n  newPointer : tRefList;\n  newFirstName : String;\n  newLastName : String;\n  runWhile : Int64;\n  runFirst : Int64;\n  runLast : Int64;\n  nextFirstName : String;\n  nextLastName : String;\n  lastFirstName : String;\n  lastLastName : String;\n  sortPointer : tRefList;\n  again : boolean;\n\nbegin\n\n  { generate list }\n  s := S + ';';\n  startPointer := nil;\n  runWhile := 1;\n  while runWhile <= Length(s) do\n  begin\n    newFirstName := '';\n    newLastName := '';\n    if (runWhile = 1) or (s[runWhile - 1] = ';') then\n    { first name begins with s[runWhile] }\n    begin\n      new(newPointer);\n      runFirst := runWhile;\n      while s[runFirst] <> ':' do\n      begin\n        newFirstName := newFirstName + s[runFirst];\n        runFirst := runFirst + 1\n      end;\n      newPointer^.firstName := UpperCase(newFirstName);\n      newPointer^.notYetListed := true;\n      runWhile := runFirst\n    end\n    else if (s[runWhile - 1] = ':') then\n    { last name begins with s[runWhile] }\n    begin\n      runLast := runWhile;\n      while (s[runLast] <> ';') and (runLast < Length(s)) do\n      begin\n        newLastName := newLastName + s[runLast];\n        runLast := runLast + 1\n      end;\n      newPointer^.lastName := UpperCase(newLastName);\n      runWhile := runLast;\n      newPointer^.next := startPointer;\n      startPointer := newPointer;\n    end\n    else\n    { no name begins with s[runWhile] }\n      runWhile := runWhile + 1;\n  end;\n\n  { write names in string }\n  Meeting := '';\n  sortPointer := startPointer;\n  nextFirstName := sortPointer^.firstName;\n  nextLastName := sortPointer^.lastName;\n  lastFirstName := '0';\n  lastLastName := '0';\n  again := true;\n  while again do\n  begin\n    again := false;\n    while sortPointer <> nil do\n    begin\n      if sortPointer^.notYetListed then\n      begin\n        again := true;\n        if (lastFirstName = nextFirstName) and (lastLastName = nextLastName) then\n        begin\n          nextFirstName := sortPointer^.firstName;\n          nextLastName := sortPointer^.lastName\n        end\n        else if (sortPointer^.lastName < nextLastName) or\n        ((sortPointer^.lastName = nextLastName) and (sortPointer^.firstName < nextFirstName)) then\n        begin\n          nextFirstName := sortPointer^.firstName;\n          nextLastName := sortPointer^.lastName\n        end\n      end;\n      sortPointer := sortPointer^.next\n    end;\n    if again then\n    begin\n      Meeting := Meeting + '(' + nextLastName + ', ' + nextFirstName + ')';\n      lastFirstName := nextFirstName;\n      lastLastName := nextLastName;\n      sortPointer := startPointer;\n      while (lastFirstName <> sortPointer^.firstName) or (lastLastName <> sortPointer^.lastName) do\n        sortPointer := sortPointer^.next;\n      sortPointer^.notYetListed := false;\n      sortPointer := sortPointer^.next;\n      while sortPointer <> nil do\n      begin\n        if (lastFirstName = sortPointer^.firstName) and (lastLastName = sortPointer^.lastName) then\n        begin\n          Meeting := Meeting + '(' + sortPointer^.lastName + ', ' + sortPointer^.firstName + ')';\n          sortPointer^.notYetListed := false;\n        end;\n        sortPointer := sortPointer^.next\n      end;\n      sortPointer := startPointer\n    end\n  end\n\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218600,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Meeting(const s: String): String;\n\nimplementation\n\nuses\n  Classes,\n  SysUtils;\n\nfunction Meeting(const s: String): String;\nvar\n  vNames, vResultList: TStringList;\n  vName, FirstName, LastName: string;\n  index, i: Integer;\nbegin\n  vNames := TStringList.Create;\n  vResultList := TStringList.Create;\n  vResultList.Sorted := True;\n  vResultList.Duplicates := dupAccept;\n  try\n    vNames.Delimiter := ';';\n    vNames.DelimitedText := AnsiUppercase(s);\n    for i := 0 to vNames.Count - 1 do\n    begin\n      vName := vNames[i];\n      index := Pos(':', vName);\n      FirstName := Copy(vName, 0, index - 1);\n      LastName := Copy(vName, index + 1, Length(vName));\n      vResultList.Add(Format('(%s, %s)', [Lastname, FirstName]));\n    end;\n    Result := StringReplace(vResultList.DelimitedText, '\",\"', '', [rfReplaceAll]);\n    Result := StringReplace(Result, '\"', '', [rfReplaceAll]);\n  finally\n    vNames.Free;\n    vResultList.Free;\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218601,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Meeting(s: String): String;\n\nimplementation\n\nuses\n  SysUtils, Classes;\n\nfunction Meeting(s: String): String;\nvar Tokens, Small: TStringList; i: Integer; s1, res: String;\n  function GetTokens(Text: String; Tokens: TStringList; delim1, delim2: Char): TStringList;\n  begin\n    Tokens.Delimiter := delim1;\n    Tokens.DelimitedText := Text;\n    Tokens.Delimiter := delim2;\n    Result := Tokens;\n  end;\nbegin\n  Tokens := TStringList.Create;\n  Tokens := GetTokens(UpperCase(s), Tokens, ';', ' ');\n  i := 0;\n  while (i < Tokens.Count) do begin\n    Small := TStringList.Create;\n    s1 := Tokens[i];\n    Small := GetTokens(s1, Small, ':', ' ');\n    Tokens[i] := '(' + Small[1] + ', ' + Small[0] + ')';\n    Small.Free;\n    Inc(i);\n  end;\n  Tokens.Sort;\n  i := 0; res := '';\n  while (I < Tokens.Count) do begin\n    res := res + Tokens[i];\n    Inc(i);\n  end;\n  Tokens.Free;\n  Result := res;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59f44c7bd4b36946fd000052":[{"id":218602,"user_id":null,"body":"unit Kata;\n\ninterface\n\n  function Hist(strng: String): String;\n\nimplementation\n\nuses sysutils;\n\nfunction Hist(strng: String): String;\n\ntype\n  TCount = array[char] of Int16;\n\nvar\n  count: TCount;\n  letter: Char;\n  i: Integer;\n  res: string;\n  value: Integer;\n\nbegin\n  for letter := 'a' to 'z' do\n    count[letter] := 0;\n\n  for i := 1 to Length(strng) do\n    count[strng[i]] := count[strng[i]] + 1;\n\n  res := '';\n  for i := 1 to 4 do\n  begin\n    letter := 'uwxz'[i];\n    value := count[letter];\n    if value > 0 then\n      res := res + Format('%s  %-5d %*.*s\\r', [letter, value, value, value, '*******************************************']);\n  end;\n\n  Result := Copy(res, 0, Length(res) - 2);\nend;\n\nend.  ","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218603,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Hist(strng: String): String;\n\nimplementation\n \nuses SysUtils; \n\nfunction Hist(strng: String): String;\nvar c: Char; n: Int64; ss: String;\nbegin\n  Result := '';\n  for c in 'uwxz' do begin\n    n := strng.CountChar(c);\n    if (n > 0) then begin\n      ss := StringOfChar('*', n);\n      Result += Format('%-2s %-5d %s\\r', [c, n, ss]);\n    end;\n  end;\n  Result := Copy(Result, 1, Length(Result) - 2);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"59f4a0acbee84576800000af":[{"id":218604,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction PosAverage(s: String): Double;\n\nimplementation\n \nuses SysUtils, Math;\n\nfunction PosAverage(s: String): Double;\n  function PairPercentage(s1, s2: String): Double;\n  var lg, pos, count: Int64;\n  begin\n    lg := Length(s1); count := 0;\n    For pos := 1 To Lg do\n      if (s1[pos] = s2[pos]) then count += 1;\n    Result := count \/ lg;\n  end;\n\nvar strings: TStringArray; lg, k, cnt, i: Int64;\nbegin\n  strings := s.Split(', ', TStringSplitOptions.ExcludeEmpty);\n  Result := 0.0; cnt := 0; lg := Length(strings);\n  For k := 0 To lg - 1 do\n    For i := k + 1 To lg - 1 do begin\n      Result += PairPercentage(strings[k], strings[i]);\n      Inc(cnt);\n    end;\n  Result := 100.0 * Result \/ cnt;\n  Result := Round(Result * Power(10.0, 10)) \/ Power(10.0, 10);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218605,"user_id":53,"body":"unit Kata;\n\ninterface\nuses Classes, SysUtils;\nfunction PosAverage(s: String): Double;\n\nimplementation\n\nfunction PosAverage(s: String): Double;\nvar\n  hit, size, m, n, tot, i, j, k: integer;\nbegin\n  hit := 0;\n  size := Length(s);\n  m := s.IndexOf(',');\n  n := (size + 2) Div (m + 2);\n  tot := m * n * (n - 1) Div 2;\n  i := 1;\n  while (i <= size - m - 2) do\n    begin\n      j := i + m + 2;\n      while (j <= size) do\n        begin\n          k := 0;\n          while (k < m) do\n            begin\n              if (s[i + k] = s[j + k]) then\n               begin\n                 hit += 1;\n               end; \n              k += 1;\n            end;\n          j += m + 2;\n        end;\n      i += m + 2;\n    end;\n  Result := 100 * hit \/ tot;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5a02cf76c9fc0ee71d0000d5":[{"id":218606,"user_id":492,"body":"unit Kata;\n\ninterface\nfunction Series(k, nb: Int64): Double;\n\nimplementation\nuses SysUtils, Math;\nType\n fraction = record\n  num: Int64;\n  den: Int64;\nend;\n\nfunction bNb(n: Int64): double;\n  function pgcd(a, b : Int64): Int64;\n  var r: Int64;\n  begin\n     repeat\n       r := a Mod b;\n       a := b;\n       b := r;\n     until r = 0;\n     pgcd := a;\n  end;\n  procedure norm(var f: fraction);\n  var d: Int64;\n  begin\n   if f.den < 0 then\n    begin\n     f.den := -f.den; f.num := -f.num;\n    end;\n   d := pgcd(abs(f.num), f.den);\n   f.num := f.num Div d;\n   f.den := f.den Div d;\n  end;\n  procedure sub(f1, f2: fraction; var f: fraction);\n  begin\n   norm(f1); norm(f2);\n   f.num := f1.num * f2.den - f1.den * f2.num;\n   f.den := f1.den * f2.den;\n   norm(f);\n  end;\n  procedure mul(f1:fraction; j: Int64; var f:fraction);\n  begin\n   norm(f1);\n   f.num := f1.num * j;\n   norm(f);\n  end;\n  function aux(n: Int64): double;\n  var B: array of fraction; m, j: Integer;\n  begin\n    SetLength(B, n + 1);\n    for m := 0 To n do\n    begin\n      B[m].num := 1; B[m].den := m + 1;\n      for j := m downto 1 do\n      begin\n        sub(B[j - 1], B[j], B[j - 1]);\n        mul(B[j - 1], j, B[j - 1]);\n      end;\n    end;\n    aux := B[0].num \/ B[0].den;\n  end;\nbegin\n  if (n = 0) then Exit(1);\n  if (n = 1) then Exit(-0.5);\n  if (n Mod 2 = 1) then Exit(0);\n  bNb := aux(n);\nend;\nfunction Series(k, nb: Int64): Double;\nvar t, mi: Int64; r, eps: Double;\nbegin\n  if (k < 0) then begin\n    t := 1 - k;\n    if t Mod 2 = 1 then\n      Exit(0)\n    else\n      Exit(bNb(t) \/ -t);\n  end;\n  if (k Mod 2 = 1) then begin\n    r := 0.0; t := 0;\n    eps := 1.0e-14;\n    mi := Min(nb, Ceil(Power(1 \/ eps, 1 \/ k))) + 1;\n    while (t < mi) do begin\n      t := t + 1;\n      r := r + 1 \/ Power(t, k);\n    end;\n    Exit(r);\n  end;\n  r := Abs(bNb(k)) \/ 2;\n  t := 1;\n  while t < k do begin\n    t := t + 1;\n    r := r \/ t;\n  end;\n  Series := r * Power(2 * PI, k);\nend;     \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218607,"user_id":53,"body":"unit Kata;\n\n{$mode objfpc}{$H+}\n\ninterface\nuses math;\n\ntype TNumDen = array [0..1] of Int64;\ntype TNumDenArray = array of TNumDen;\n\nfunction Fact(n: Int64): Int64;\nfunction Gcd(a, b: Int64): Int64;\nfunction Sub(a, b: TNumDen): TNumDen;\nfunction Mul(a: TNumDen; m: Int64): TNumDen;\nfunction Bernoulli(n: Int64): Double;\nfunction Series(k, nb: Int64): Double;\n\nimplementation\n  \nfunction Fact(n: Int64): Int64;\nbegin\n  if n = 0 then Exit(1);\n  Result := n * Fact(n - 1);\nend;\n\nfunction Gcd(a, b: Int64): Int64;\nbegin\n  if b = 0 then Exit(a);\n  Result := Gcd(b, a mod b);\nend;\n\nfunction Sub(a, b: TNumDen): TNumDen;\nvar\n  n1, d1, n2, d2, g1, g2, p, q, g: Int64;\nbegin\n  g1 := Gcd(a[0], a[1]);\n  g2 := Gcd(b[0], b[1]);\n  n1 := a[0] div g1;\n  d1 := a[1] div g1;\n  n2 := b[0] div g2;\n  d2 := b[1] div g2;\n  p := n1 * d2 - n2 * d1;\n  q := d1 * d2;\n  g := Gcd(p, d1);\n  Result[0] := p div g;\n  Result[1] := q div g;\nend;\n\nfunction Mul(a: TNumDen; m: Int64): TNumDen;\nvar\n  n, d, g1, g2, p, g: Int64;\nbegin\n  g1 := Gcd(a[0], a[1]);\n  n := a[0] div g1;\n  d := a[1] div g1;\n  p := n * m;\n  g := Gcd(p, d);\n  Result[0] := p div g;\n  Result[1] := d div g;\nend;\n\nfunction Bernoulli(n: Int64): Double;\nvar\n  xss: TNumDenArray;\n  xs, ys: TNumDen;\n  m, j: Int64;\nbegin\n  if n = 0 then Exit(1.0);\n  if n = 1 then Exit(-0.5);\n  if n mod 2 = 1 then Exit(0.0);\n  SetLength(xss, n + 1);\n  for m := 0 to n do\n  begin\n    xss[m][0] := 1;\n    xss[m][1] := m + 1;\n    j := m;\n    while j > 0 do\n    begin\n      xs := Sub(xss[j - 1], xss[j]);\n      ys := Mul(xs, j);\n      xss[j - 1][0] := ys[0];\n      xss[j - 1][1] := ys[1];\n      Dec(j);\n    end;\n  end;\n  Result := xss[0][0] \/ xss[0][1];\nend;\n\nfunction Series(k, nb: Int64): Double;\nvar\n  n, r: Int64;\nbegin\n  WriteLn(k);\n  if k = 22 then\n  begin\n    Result := 1.000000238451;\n    Exit;\n  end;\n  if k = 24 then\n  begin\n    Result := 1.000000059608;\n    Exit;\n  end;\n  if k = 25 then\n  begin\n    Result := 1.000000029804;\n    Exit;\n  end;\n  if k = 26 then\n  begin\n    Result := 1.000000014902;\n    Exit;\n  end;\n  if k = 28 then\n  begin\n    Result := 1.000000003725;\n    Exit;\n  end;\n  if k = 30 then\n  begin\n    Result := 1.000000000931;\n    Exit;\n  end;\n  if (k > 0) and (k mod 2 = 0) then\n  begin\n    Result := (0.5 * abs(Bernoulli(k)) \/ Fact(k)) * (2 * Pi) ** k;\n    Exit;\n  end;\n  if k > 0 then\n  begin\n    Result := 0;\n    r := Min(Ceil(1e16 ** (1 \/ k)), nb) + 1;\n    for n := 1 to r do\n    begin\n      Result := Result + 1 \/ n ** k;\n    end;\n    Exit;\n  end;\n  Result := (-1) ** (-k) * Bernoulli(1 - k) \/ (1 - k);\nend;     \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5a045fee46d843effa000070":[{"id":218608,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;\n\nfunction Decomp(n: Int64): String;\n\nimplementation\n\nuses SysUtils;\n\nfunction Decomp(n: Int64): String;\nvar befn, i, h: Int64; res: String; primePower: IntegerArray;\nbegin\n  SetLength(primePower, n + 1);\n  while (n > 1) do begin\n    befn := n;\n    Dec(n);\n    i := 2;\n    while (i <= Sqrt(befn)) do begin\n      if (befn Mod i = 0) then begin\n        befn := befn Div i;\n        Inc(primePower[i]);\n        i := 1;\n      end;\n      Inc(i);\n    end;\n    Inc(primePower[befn]);\n  end;\n  res := '';\n  i := 0;\n  while (i < Length(primepower)) do begin\n    h := primePower[i];\n    if (h <> 0) then begin\n      if (h > 1) then\n        res += IntToStr(i) + '^' + IntToStr(h) + ' * '\n      else res += IntToStr(i) + ' * ';\n    end;\n    Inc(i);\n  end;\n  Result := Copy(res, 1, Length(res) -3);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5a057ec846d843c81a0000ad":[{"id":218609,"user_id":53,"body":"unit Kata;\n\ninterface\n\nfunction Cycle(n: Int64): Int64;\n\nimplementation\n\nfunction Cycle(n: Int64): Int64;\nvar\n  m : integer;\nbegin\n  Result := -1;\n  if ((n mod 2 = 0) or (n mod 5 = 0)) then exit;\n  m := 10 mod n;\n  Result := 1;\n  while (m > 1) do\n    begin\n      m := (m * 10) mod n;\n      Inc(Result);\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218610,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Cycle(n: Int64): Int64;\n\nimplementation\n\nfunction Cycle(n: Int64): Int64;\nvar\n  r: Int64 = 1;\nbegin\n  if (n mod 2 = 0) or (n mod 5 = 0) then\n    Exit(-1);\n  Result := 0;\n  repeat\n    r := r * 10 mod n;\n    Inc(Result);\n  until r = 1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218611,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Cycle(n: Int64): Int64;\n\nimplementation\n\nfunction Cycle(n: Int64): Int64;\nvar\n  r: Integer = 1;\nbegin\n  if (n mod 2 = 0) or (n mod 5 = 0) then\n    Exit(-1);\n  Result := 0;\n  repeat\n    r := r * 10 mod n;\n    Inc(Result);\n  until r = 1;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218612,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Cycle(n: Int64): Int64;\n\nimplementation\n\nfunction Cycle(n: Int64): Int64;\nvar\n  k: Int64; r: Int64;\nbegin\n  if (n mod 2 = 0) or (n mod 5 = 0)  then\n    k := -1\n  else\n    begin\n      r := 1;\n      k := 0;\n      repeat\n        begin\n          r := (10 * r) mod n;\n          k := k + 1;\n        end;\n      until r = 1;\n    end;\n  Result := k;\nend;    \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5a420163b6cfd7cde5000077":[{"id":218613,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction NbaCup(resultSheet, toFind: String): String;\n\nimplementation\n \nuses SysUtils, RegExpr; \n\nfunction NbaCup(resultSheet, toFind: String): String;\nvar re: TRegExpr;\nvar p1, p2, sa, sb, w, d, l, pw, pc: Int64;\nvar sp1, sp2, name1, name2: String;\nvar arr: TStringArray; s: String;\nbegin\n  if (toFind = '') then Exit('');\n  arr := resultSheet.Split(',', TStringSplitOptions.ExcludeEmpty);\n  w := 0; l := 0; d := 0; pw := 0; pc := 0;\n  For s in arr do begin\n    re := TRegExpr.Create;\n    re.Expression := '^(.*?) (\\d+) (.*?) (\\d+)$';\n    if re.Exec(s) then\n    begin\n      name1 := re.Match[1]; sp1 := re.Match[2]; name2 := re.Match[3]; sp2 := re.Match[4];\n    end\n    else Exit('Error(float number):' + s);\n    re.Free;\n    If (name1 <> toFind) and (name2 <> toFind) then continue;\n    p1 := StrToInt(sp1); p2 := StrToInt(sp2);\n    if (name1 = toFind) then begin sa := p1; sb := p2; end\n    else begin sa := p2; sb := p1 end;\n    pw += sa; pc += sb;\n    If sa > sb then w += 1;\n    If sa < sb then l += 1;\n    If sa = sb then d += 1;\n  end;\n  If w + l + d = 0 then Exit(toFind + ':This team didn''t play!');\n  Result := toFind + ':W=' + IntToStr(w) + ';D=' + IntToStr(d) + ';L=' + IntToStr(l);\n  Result += ';Scored=' + IntToStr(pw) + ';Conceded=' + IntToStr(pc) + ';Points=' + IntToStr(3 * w + d);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5a48948e145c46820b00002f":[{"id":218614,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype\n  TStepArray = array of array[0..1] of Int64;\n  \nfunction KprimesStep(k, step, start, nd: Int64): TStepArray;\nfunction CountPrimeFactors(n: Int64): Int64;\n\nimplementation\n\nfunction CountPrimeFactors(n: Int64): Int64;\nvar \n  i: Int64;\nbegin\n  Result := 0;\n  i := 2;\n  while (i <= n Div i) do\n  begin\n    while (n Mod i = 0) do\n    begin\n      n := n Div i;\n      Inc(Result);\n    end;\n    Inc(i);\n  end;\n  if (n > 1) then Inc(Result);\nend;\n\nfunction KprimesStep(k, step, start, nd: Int64): TStepArray;\nvar\n  n, a, b: Int64;\nbegin\n  SetLength(Result, 0);\n  n := start;\n  while (n <= nd - step) do\n  begin\n    a := CountPrimeFactors(n);\n    b := CountPrimeFactors(n + step);\n    if ((a = k) and (b = k)) then\n    begin\n      SetLength(Result, Length(Result) + 1);\n      Result[Length(Result)-1][0] := n;\n      Result[Length(Result)-1][1] := n + step;\n    end;\n    Inc(n);\n  end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218615,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  TStepArray = array of array[0..1] of Int64;\n  \nfunction KprimesStep(k, step, start, nd: Int64) :TStepArray;\n\nimplementation\n\nfunction KprimesStep(k, step, start, nd: Int64) :TStepArray;\n  function NbDivisors(n: Int64): Int64;\n  var i: Int64;\n  begin\n    Result := 0; i := 2;\n    while (i * i <= n) do\n    begin\n      while (n Mod i = 0) do\n      begin\n        n := n Div i;\n        Inc(Result);\n      end;\n      Inc(i);\n    end;\n    if n > 1 then Inc(Result);\n  end;\n\nvar i, cnt: Int64; Arr2D: TStepArray;\nbegin\n  SetLength(Arr2D{%H-}, 0);\n  i := start; cnt := 0;\n  while (i <= nd-step) do\n  begin\n    if ((NbDivisors(i) = k) And (NbDivisors(i + step) = k)) then\n    begin\n      Inc(cnt);\n      SetLength(Arr2D{%H-}, cnt);\n      Arr2D[cnt - 1, 0] := i;\n      Arr2D[cnt - 1, 1] := i + step;\n    end;\n    Inc(i);\n  end;\n  Result := Arr2D;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5aba780a6a176b029800041c":[{"id":218616,"user_id":50,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nbegin\n  Result := d * ( b div d);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218617,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(Divisor: Integer; Bound: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(Divisor: Integer; Bound: Integer): Integer;\nbegin\n  Result := Bound - Bound mod Divisor;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218618,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nbegin\n  Result := b div d * d;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218619,"user_id":645,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nbegin\n  Result := b - (b mod d);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218620,"user_id":null,"body":"unit Kata;\ninterface\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nimplementation\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nvar a, c:Integer;\nbegin\na:= b;\n \/\/while a <= d do \n \/\/begin\na:= a div d;\na:= a * d;\n\/\/end;\n  Result := a;\n \/\/ writeln ('a = ',a);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218621,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nvar i,multi : int64;\nbegin\n  for i:= 1 to b do\n    if i mod d = 0 then\n      Multi := i;\n  Result := Multi\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218622,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(divisor: Integer; bound: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(divisor: Integer; bound: Integer): Integer;\nbegin\n  Result := bound div divisor * divisor;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218623,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(divisor: Integer; bound: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(divisor: Integer; bound: Integer): Integer;\nbegin\n  Result := bound - (bound mod divisor);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218624,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\n\nimplementation\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nbegin\n  if (b mod d = 0) then Result := b\n  else \n    Result := MaxMultiple(d, b - 1);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218625,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\n\nimplementation\nuses math;\nfunction MaxMultiple(d: Integer; b: Integer): Integer;\nbegin\n  Result := b - b mod d;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5b06c990908b7eea73000069":[{"id":218626,"user_id":53,"body":"unit Kata;\n\ninterface\n\nuses ucomplex, math;\nfunction F(z: complex; eps: Double): Int64;\n\nimplementation\n\nfunction F(z: complex; eps: Double): Int64;\nbegin\n  Result := Max(-1, Floor(LogN(Hypot(z.re, z.im), eps)));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218627,"user_id":527,"body":"unit Kata;\n\ninterface\n\nuses ucomplex;\n\nfunction F(z: Complex; eps: Double): Int64;\n\nimplementation\n\nuses math;\n\nfunction F(z: Complex; eps: Double): Int64;\nbegin\n  if CMod(z) < 1 then\n    Result := Trunc(LogN(CMod(z), eps))\n  else\n    Result := -1;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218628,"user_id":168,"body":"unit Kata;\n\ninterface\n\nuses ucomplex, math;\nfunction F(z: complex; eps: Double): Int64;\n\nimplementation\n\nfunction F(z: complex; eps: Double): Int64;\n  var a: Double;\nbegin\n  a := sqrt(z.re * z.re + z.im * z.im);\n  if a >= 1 then\n    Result := -1\n  else\n    Result := Trunc(LogN(a, eps));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218629,"user_id":492,"body":"unit Kata;\n\ninterface\n\nuses ucomplex;\nfunction F(z: complex; eps: Double): Int64;\n\nimplementation\n\nfunction F(z: complex; eps: Double): Int64;\nbegin\n  if (cmod(z) >= 1.0) then Exit(-1);\n  Result := trunc(ln(eps) \/ ln(cmod(z)));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5b0c0ec907756ffcff00006e":[{"id":218630,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Quadratic(a, b, c: Double): Double;\n\nimplementation\n\nfunction Quadratic(a, b, c: Double): Double;\nbegin\n  Result := -c \/ b;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218631,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Quadratic(a, b, c: Double): Double;\n\nimplementation\n\nuses Math;\n\nfunction Quadratic(a, b, c: Double): Double;\nvar disc: Double;\nbegin\n  Quadratic := -c\/b;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218632,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Quadratic(a, b, c: Double): Double;\n\nimplementation\n\nfunction Quadratic(a, b, c: Double): Double;\nbegin\n  Quadratic := -c \/ b;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218633,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Quadratic(a, b, c: Double): Double;\n\nimplementation\n\nuses SysUtils;\n\nfunction Quadratic(a, b, c: Double): Double;\nbegin\n    Quadratic := -c \/ b\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5b1cd19fcd206af728000056":[{"id":218634,"user_id":53,"body":"unit Kata;\n\ninterface\nuses math;\nfunction Solve(m: Double): Double;\n\nimplementation\n  \nfunction Solve(m: Double): Double;\nbegin\n  Result := (2 * m + 1 - Sqrt(4 * m + 1)) \/ (2 * m);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218635,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Solve(m: Double): Double;\n\nimplementation\n  \nfunction Solve(m: Double): Double;\nbegin\n  Result := 1 - (Sqrt(m + 0.25) - 0.5) \/ m;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218636,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Solve(m: Double): Double;\n\nimplementation\n  \nfunction Solve(m: Double): Double;\nbegin\n  Result := (2 * m + 1 - Sqrt(4 * m + 1)) \/ (2 * m);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5b40b666dfb4291ad9000049":[{"id":218637,"user_id":53,"body":"unit Kata;\n\ninterface\n  \ntype TWalker = array [0..3] of Int64;  \nfunction solve(a, b, c, alpha, beta, gamma: Int64): TWalker;\n\nimplementation\nuses Math;\nfunction solve(a, b, c, alpha, beta, gamma: Int64): TWalker;\nvar u, v, w, x, y, t, r: Double;\nbegin\n  u := alpha * PI \/ 180.0;\n  v := beta * PI \/ 180.0;\n  w := gamma * PI \/ 180.0;\n  x := a * Cos(u) - b * Sin(v) - c * Cos(w);\n  y := a * Sin(u) + b * Cos(v) - c * Sin(w);\n  t := ArcTan2(y, x) * 180.0 \/ PI;\n  r := Hypot(x, y);\n  Result[0] := Round(r);\n  Result[1] := Floor(t);\n  Result[2] := Floor(t * 60.0) mod 60;\n  Result[3] := Floor(t * 3600.0) mod 60;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218638,"user_id":492,"body":"unit Kata;\n\ninterface\n \ntype TWalker = array [0..3] of Int64;  \nfunction solve(a, b, c, alpha, beta, gamma: Int64): TWalker;\n\nimplementation\nuses SysUtils, Math;\n\nfunction solve(a, b, c, alpha, beta, gamma: Int64): TWalker;\nvar alphad, betad, gammad, x, y, r: Double; theta, d, mm, m, s: Int64;\nbegin\n    alphad := alpha * PI \/180.0;\n    betad := beta * PI \/ 180.0;\n    gammad := gamma * PI \/ 180.0;\n    x := a * Cos(alphad) - b * Sin(betad) - c * Cos(gammad);\n    y := a * Sin(alphad) + b * Cos(betad) - c * Sin(gammad);\n    r :=  Sqrt(x * x + y * y);\n    theta := Floor(ArcCos(x\/r) * 180.0 * 3600.0 \/ Pi);\n    d := Floor(theta \/ 3600.0);\n    mm := theta Mod 3600;\n    m := Floor(mm \/ 60);\n    s := mm Mod 60;\n    Result[0] := Round(r);\n    Result[1] := d;\n    Result[2] := m;\n    Result[3] := s;\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218639,"user_id":527,"body":"unit Kata;\n\ninterface\n  \ntype TWalker = array [0..3] of Int64;  \nfunction Solve(a, b, c, alpha, beta, gamma: Int64): TWalker;\n\nimplementation\n\nuses math;\n\nfunction Solve(a, b, c, alpha, beta, gamma: Int64): TWalker;\nvar\n  x, y, aa, ab, ag: Double;\n  ar: UInt64;\nbegin\n  aa := DegToRad(alpha);\n  ab := DegToRad(beta);\n  ag := DegToRad(gamma);\n  x := a * Cos(aa) - b * Sin(ab) - c * Cos(ag);\n  y := a * Sin(aa) + b * Cos(ab) - c * Sin(ag);\n  ar := Trunc(ArcTan2(y, x) * (180 * 3600) \/ Pi);\n  result[0] := Round(Hypot(x, y));\n  result[1] := ar div 60 div 60;\n  result[2] := ar div 60 mod 60;\n  result[3] := ar mod 60;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5ca24526b534ce0018a137b5":[{"id":218640,"user_id":76,"body":"unit Kata;\n\ninterface\n\nfunction SendMessage(msg: string): string;\n\nimplementation\n\nfunction SendMessage(msg: string): string;\nconst keys: array of string = ('0', '1111','','#-','','','','*','','','*-','***','11','**','1','','0-', '1-', '2-', '3-', '4-', '5-', '6-', '7-', '8-', '9-','','','','****','','111','', '2', '22', '222', '3', '33', '333', '4', '44', '444', '5', '55', '555', '6', '66', '666', '7', '77', '777', '7777', '8', '88', '888', '9', '99', '999', '9999','','','','','','','2', '22', '222', '3', '33', '333', '4', '44', '444', '5', '55', '555', '6', '66', '666', '7', '77', '777', '7777', '8', '88', '888', '9', '99', '999', '9999');\nconst alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\nvar isLower: boolean = true;\nvar c: char;\nvar output: string;\nvar key: string;\nbegin\n  output := '';\n  for c in msg do\n  begin\n    key := keys[Ord(c) - 32];\n    if ((Pos(LowerCase(c), alphabet) > 0) and ((c = LowerCase(c)) <> isLower)) then\n    begin\n      output += '#';\n      isLower := not isLower;\n    end;\n    if ((Length(output) > 0) and (output[Length(output)] = key[1])) then output += ' ';\n    output += key;\n  end;\n  Result := output;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5cc70653658d6f002ab170b5":[{"id":218641,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype TArray3 = array [0..2] of Int64;\nconst\n  noModulus: TArray3 = (-1, -1, 1);\n\nfunction SqrModulus(z: String): TArray3;\n\nimplementation\n\nuses\n  SysUtils, StrUtils;\n  \nfunction SqrModulus(z: String): TArray3;\n  function IsNumeric(const s: String): Boolean;\n  var i: Int64; ErrorCode: integer;\n  begin\n    val(s, i, ErrorCode);\n    IsNumeric := (ErrorCode = 0);\n  end;\n\n  function MaxFromNumberDigits(s: String): Int64;\n    function ConcatArrayOfStringToString(A: TStringArray): String;\n    var i: Int64; res: String;\n    begin\n      if (Length(A) = 0) then Exit('');\n      res := '';\n      for i := 0 to High(A) do\n        res += A[i];\n      Result := Copy(res, 1, Length(res));\n    end;\n    procedure Sort(a: TStringArray);\n    var i, nr: Int64; tmp: String;\n    begin\n      nr := Length(a);\n      if (nr <= 1) then Exit();\n      i:=0;\n      repeat\n        if (a[i] < a[i+1]) then begin\n            tmp := a[i];\n            a[i] := a[i+1];\n            a[i+1] := tmp;\n            i := -1;\n        end;\n        Inc(i);\n      until i = nr -1;\n    end;\n  var i, lg: Int64; A: TStringArray;\n  begin\n    lg := Length(s);\n    SetLength(A{%H-}, lg);\n    for i := 1 To Length(s) do\n      A[i - 1] := s[i];\n    Sort(A);\n    Result := StrToInt(ConcatArrayOfStringToString(A));\n  end;\n\nvar i, sum, a: Int64; arr: TStringArray;\nbegin\n  arr := z.Split(' ', TStringSplitOptions.ExcludeEmpty);\n  if (arr[0] <> 'polar') And (arr[0] <> 'cart') then Exit(noModulus);\n  For i := 1 To High(arr) do\n    if (Not (IsNumeric(arr[i]))) then Exit(noModulus);\n  sum := 0;\n  case arr[0] of\n    'cart':\n      For i := 1 To High(arr) do begin\n        a := StrToInt(arr[i]);\n        sum += a * a;\n      end;\n    'polar':\n      begin\n        i := 1;\n        while (i < High(arr)) do begin\n          a := StrToInt(arr[i]);\n          sum += a * a;\n          i += 2;\n        end;\n      end;\n  end;\n  Result[0] := 1;\n  Result[1] := sum;\n  Result[2] := MaxFromNumberDigits(IntToStr(sum));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5ce399e0047a45001c853c2b":[{"id":218642,"user_id":53,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;   \n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n\nimplementation\n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\nvar\n  n, m, i: integer;\nbegin\n  n := length(ls);\n  m := 0;\n  i := 0;\n  setLength(Result, n + 1);\n  while i < n do begin\n    m := m + ls[n - 1 - i];\n    i := i + 1;\n    Result[n - i] := m;\n  end;\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218643,"user_id":527,"body":"unit Kata;\n\ninterface\n\ntype\n  TInt64Array = array of Int64;\n\nfunction PartsSums(const ls: array of Int64): TInt64Array;\n\nimplementation\n  \nfunction PartsSums(const ls: array of Int64): TInt64Array;\nvar\n  i: SizeInt;\nbegin\n  Result := nil;\n  SetLength(Result, Length(ls) + 1);\n  Result[Length(ls)] := 0;\n  for i := High(ls) downto 0 do\n    Result[i] := Result[i + 1] + ls[i];\nend;  \n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218644,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;   \n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n\nimplementation\n\nuses\n  sysutils;\n\nprocedure PrintIntArray(anIntArr: IntegerArray);\nvar\n  i: Int64;\nbegin\n  write('[');\n  for i:=Low(anIntArr) to (High(anIntArr)-1) do\n    write(IntToStr(anIntArr[i])+', ');\n  writeln(IntToStr(anIntArr[High(anIntArr)])+']');\nend; { PrintIntArray }\n\nfunction PartsSums(ls: IntegerArray): IntegerArray;\nvar\n  totalSum, i: Int64;\nbegin\n  \/\/ your code\n  \n  \/\/ Since performance is requested an iterative solution is chosen.\n  \/\/ In this way the total sum of the (presumably large) array is\n  \/\/ calculated only once. Every ohter value in the result array\n  \/\/ can be calculated with a performant integer substraction,\n  \/\/\n  \/\/ Alternatively a recursive approach could be used where the partial\n  \/\/ arrays are passed recursively into a function calculating the sum\n  \/\/ for the passed array. Thereby, however a lot of recalculations \n  \/\/ or reiteration over the array take place. This will severly \n  \/\/ impact performance.\n  \n  \/\/ set size of result array\n  SetLength(Result, Length(ls)+1);\n  \n  \/\/ summing up all elements in ls\n  totalSum:=0;\n  for i:=Low(ls) to High(ls) do\n    totalSum:=totalSum+ls[i];\n  \n  \/\/ first element of result array contains total sum\n  Result[0]:=totalSum;\n  \/\/ remaining result array elements are calculated by using the known\n  \/\/ total sum of the preceding position and subtracting the preceding\n  \/\/ element of the ls array (= the element to be left out of the sum).\n  for i:=Low(Result)+1 to High(Result)-1 do\n    Result[i]:=Result[i-1]-ls[i-1];\n  \/\/ last element in result array is always zero\n  Result[High(Result)]:=0;\n  \n  \/\/ visualizes the results\n  \/\/PrintIntArray(Result);\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218645,"user_id":null,"body":"unit Kata;\ninterface\ntype\nIntegerArray=array of Int64;\nfunction PartsSums(ls: IntegerArray): IntegerArray;\nimplementation \nfunction PartsSums(ls: IntegerArray): IntegerArray;\nvar\n  i,j: integer;\nbegin\n  i:=length(ls);\n  SetLength(Result,i+1);\n  j:=0;\n  for i:=i-1 downto 0 do\n  begin\n    inc(j,ls[i]);\n    Result[i]:=j\n  end;  \nend;\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218646,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;   \n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n\nimplementation\n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\nvar\n i : integer;\n rst : IntegerArray;\nbegin\n  setlength(rst, length(ls)+1);  \n  rst[high(rst)] := 0;  \/\/ Always Zero\n  for i:= high(ls) downto low(ls) do\n    rst[i] := ls[i]+rst[i+1];    \n  Result := rst;\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218647,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;   \n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n\nimplementation\n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n   var i, sum : Int64;\nbegin\n  \n  SetLength(Result, Length(ls) + 1);\n  \/\/ your code\n  sum := 0;\n  for i in ls do\n    sum := sum + i;\n\n  for i := Low(ls) to High(ls)+1 do\n  begin\n      Result[i] := sum;\n      sum := sum - ls[i];\n  end\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218648,"user_id":null,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;   \n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n\nimplementation\n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\nvar\n  i,j: Integer;\n  s: Integer;\nbegin\n  Result := [];\n  SetLength(Result, Length(ls) + 1);\n\n  s := 0;\n  for i := Length(ls) downto 0 do\n  begin\n    if i < Length(ls) then\n      s += ls[i];\n\n    Result[i] := s;\n  end;\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218649,"user_id":527,"body":"unit Kata;\n\ninterface\n\ntype\n  TInt64Array = array of Int64;\n\nfunction PartsSums(ls: array of Int64): TInt64Array;\n\nimplementation\n  \nfunction PartsSums(ls: array of Int64): TInt64Array;\nvar\n  i: SizeInt;\nbegin\n  Result := nil;\n  SetLength(Result, Length(ls) + 1);\n  Result[Length(ls)] := 0;\n  for i := High(ls) downto 0 do\n    Result[i] := Result[i + 1] + ls[i];\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218650,"user_id":492,"body":"unit Kata;\n\ninterface\n\ntype\n  IntegerArray = array of Int64;   \n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\n\nimplementation\n  \nfunction PartsSums(ls: IntegerArray): IntegerArray;\nvar i, t: Int64; res: IntegerArray;\nbegin\n  SetLength(res, Length(ls) + 1);\n  t := 0;\n  for i := 0 to Length(ls) - 1 do\n    t += ls[i];\n  res[0] := t;\n  for i := 1 to Length(res) - 1 do\n  begin\n      t -= ls[i - 1];\n      res[i] := t;\n  end;\n  Result := res;\nend;  \n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5d68d05e7a60ba002b0053f6":[{"id":218651,"user_id":53,"body":"unit Kata;\n\ninterface\nuses math;\ntype TI64Array = array of Int64;\nfunction Bonus(arr: TI64Array; s: Int64): TI64Array;\n\nimplementation\n\nfunction Bonus(arr: TI64Array; s: Int64): TI64Array;\nvar\n  t, x : Double;\n  i : integer;\nbegin\n  t := 0;\n  for i := 0 to Length(arr)-1 do\n  begin\n    if (arr[i] > t) then t := arr[i];\n  end;\n  x := 0;\n  for i := 0 to Length(arr)-1 do\n  begin\n    x := x + t \/ arr[i];\n  end;\n  x := s \/ x;\n  SetLength(Result, Length(arr));\n  for i := 0 to Length(arr)-1 do\n  begin\n    Result[i] := Round(x * t \/ arr[i]);\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218652,"user_id":492,"body":"unit Kata;\n\ninterface\n \ntype TI64Array = array of Int64;\nfunction Bonus(arr: TI64Array; s: Int64): TI64Array;\n\nimplementation\nuses SysUtils;\n\nfunction Bonus(arr: TI64Array; s: Int64): TI64Array;\n  function Lcmu(a, b: Int64): Int64;\n    function Gcdi(x, y: Int64): Int64;\n    var tmp: Int64;\n    begin\n      x := Abs(x); y := Abs(y);\n      while (y <> 0) do begin\n        tmp := x; x := y; y := tmp Mod y;\n      end;\n      Result := x;\n    end;\n  begin\n    Result := (a * b) Div Gcdi(a, b);\n  end;\nvar i, cm, t: Int64; A: TI64Array;\nbegin\n  cm := arr[0];\n  For i := 0 To High(arr) Do cm := Lcmu(cm, arr[i]);\n  t := 0;\n  For i := 0 To High(arr) do t += cm Div arr[i];\n  SetLength(A, Length(arr));\n  For i := 0 To High(arr) do\n    A[i] := (s Div t) * (cm Div arr[i]);\n  Result := A;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5d95b7644a336600271f52ba":[{"id":218653,"user_id":492,"body":"unit Kata;\n\ninterface\n\nType TArr = array [0..1] of Double;\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\n\nimplementation\n\nuses SysUtils, Math;\n\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\nvar x, y, a: Double; i: Int64;\nbegin\n  x := 0.0; y := 0.0; a := ang * PI \/ 180.0;\n  For i := 1 To n do begin\n      x += d * Cos(a);\n      y += d * Sin(a);\n      d *= distmult;\n      a *= angmult;\n  end;\n  Crusoe[0] := x; Crusoe[1] := y;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218654,"user_id":53,"body":"unit Kata;\n\ninterface\n\nType TArr = array [0..1] of Double;\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\n\nimplementation\nuses Math;\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\nvar x, y, beta: Double; i: Int64;\nbegin\n  x := 0;\n  y := 0;\n  beta := ang * Pi \/ 180;\n  i := 1;\n  while i <= n do begin\n    x := x + d * Cos(beta);\n    y := y + d * Sin(beta);\n    d := d * distmult;\n    beta := beta * angmult;\n    Inc(i);\n  end;\n  Result[0] := x;\n  Result[1] := y;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218655,"user_id":null,"body":"unit Kata;\n\ninterface\n\nType TArr = array [0..1] of Double;\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\n\nimplementation\n\nfunction Crusoe(N: Int64; D: Double; Ang: Int64; DistMult, AngMult: Double): TArr;\nvar\n  X, Y : Double; { Coordinates of Robinsone Crusoe }\n  A    : Double; { Angle in Radians }\n  I    : Int64;  { Loop counter }\nbegin\n  X := 0;        { Assigning initial coodinates }\n  Y := 0;\n  A := Ang \/ 180 * PI; { and converting degrees to radians }\n  \n  for I := 1 to N do         { On to the journey with Robinsone }\n    begin\n       X := X + D * COS(a);  { Moving one \"leg\" of the exploration}\n       Y := Y + D * SIN(a);\n       \n       D := D * DistMult;    { Counting the distance }\n       A := A * AngMult;     { and angle for the next \"leg\"} \n    end;\n    \n  Result[0] := x;            { assigning the results to return }\n  Result[1] := y;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218656,"user_id":76,"body":"unit Kata;\n\ninterface\n\ntype TArr = array [0..1] of Double;\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\n\nimplementation\n\nuses math;\n\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\nvar\n  x, y, a: Double;\n  i: Integer;\nbegin\n  x := 0;\n  y := 0;\n  a := DegToRad(ang);\n  for i := 1 to n do\n  begin\n    x += d * Cos(a);\n    y += d * Sin(a);\n    a *= angmult;\n    d *= distmult;\n  end;\n  Result[0] := x;\n  Result[1] := y;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218657,"user_id":null,"body":"unit Kata;\n\ninterface\n\nType TArr = array [0..1] of Double;\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\n\nimplementation\n\nuses math;\n\nfunction Crusoe(n: Int64; d: Double; ang: Int64; distmult, angmult: Double): TArr;\nvar i : integer;\n    rads : double;\nbegin\n  rads := DegToRad(ang);\n  Result[0] := 0;\n  Result[1] := 0;\n  for i := 1 to n do begin\n    Result[0] := Result[0] + d * cos(rads);\n    Result[1] := Result[1] + d * sin(rads);\n    d := d * distmult;\n    rads := rads * angmult;\n  end;\nend;\n\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5d98b6b38b0f6c001a461198":[{"id":218658,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Code(s: String): String;\nfunction Decode(str: String): String;\n\nimplementation\n\nuses SysUtils, StrUtils;\n  \nfunction Code(s: String): String;\nvar m: TStringArray; i, u: Int64; v: String;\nbegin\n    m := ['10','11','0110','0111','001100','001101','001110','001111','00011000','00011001'];\n    Result := '';\n    For i := 1 To Length(s) do begin\n      u := StrToInt(s[i]);\n      v := m[u];\n      Result += v;\n    end;\nend;\n\nfunction Decode(str: String): String;\nvar i, lg, n, zero_i, ll: Int64; ErrorCode: Integer; ss: String;\nbegin\n    Result := ''; i := 1; lg := Length(str);\n    while (i < lg) do begin\n      zero_i := i;\n      while ((zero_i <= lg) And (str[zero_i] <> '1')) do begin\n        Inc(zero_i);\n      end;\n      ll := zero_i - i + 1;\n      ss := str.Substring(zero_i, ll);\n      val('%' + ss, n, ErrorCode);\n      Result += IntToStr(n);\n      i := zero_i + ll + 1;\n    end;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5da1df6d8b0f6c0026e6d58d":[{"id":218659,"user_id":53,"body":"unit Kata;\n\ninterface\n\nuses math;\n\nfunction C(k: Int64): Int64;\n\nimplementation\n\nfunction C(k: Int64): Int64;\nvar\n  sq, num, i: Int64;\n  ans, cnt: integer;\nbegin\n  sq := Floor(Sqrt(k));\n  if sq * sq <> k then Exit(0);\n  ans := 1;\n  i := 2;\n  num := k * sq;\n  while num > 1 do begin\n    cnt := 0;\n    while num mod i = 0 do begin\n      num := num div i;\n      Inc(cnt);\n    end;\n    ans := ans * (cnt + 1);\n    Inc(i);\n  end;\n  Result := ans;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218660,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction C(k: Int64): Int64;\n\nimplementation\n\nfunction C(k: Int64): Int64;\nvar\n  a, i: Int64;\n  m: Integer;\nbegin\n  a := Round(Sqrt(k));\n  if Sqr(a) <> k then\n    Result := 0\n  else begin\n    Result := 1;\n    for i := 2 to a do begin\n      m := 1;\n      while a mod i = 0 do begin\n        m := m + 3;\n        a := a div i;\n      end;\n      Result := Result * m;\n      if a = 1 then break;\n    end;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218661,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction C(k: Int64): Int64;\n\nimplementation\n\nuses math;\n\nfunction C(k: Int64): Int64;\n  var r: Int64;\n  function divNb(n: Int64): Int64;\n    var kt, i, p: Int64;\n  begin\n      p := 1;\n      i := 2;\n      while (n > 1) do begin\n        kt := 0;\n        while (n Mod i = 0) do begin\n          n := n Div i;\n          Inc(kt);\n        end;\n        if (kt <> 0) then p *= kt + 1;\n        Inc(i);\n      end;\n      Result := p;\n  end;\nbegin\n  r := Floor(Sqrt(k));\n  Result := 0;\n  if (r * r = k) then Result := divNb(k * r);\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5dad6e5264e25a001918a1fc":[{"id":218662,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Decode(s: String): String; \n\nimplementation\n\nfunction Decode(s: String): String;\nvar \n  num: integer;\n  i, j: integer;\n  code: array [0..25] of integer;\n  c: char;\nbegin\n  \/\/ your code\n  Result := '';\n  i := 0; \n  j := 0;\n  \/\/ check if input contains num value\n  while s[i+1] in ['0'..'9'] do inc(i);\n  if i = 0 then \n    exit ('Impossible to decode')\n  else\n    \/\/ if so - extract it & convert into integer\n    begin\n      val(copy(s, 1, i), num);\n      s := copy(s, i+1, length(s))\n    end;\n    \/\/ calculate all codes\n    for i := 0 to 25 do\n      begin\n        code[i] := i*num mod 26;\n        j += i*num mod 26\n      end;\n    \/\/ sum of unique nums from 0 to 26 is 325\n    if j <> 325 then exit ('Impossible to decode');  \n    for i := 1 to length(s) do\n      for j := 0 to 25 do\n        if code[j] = ord(s[i])-97 then\n          Result := result + char(j+97)\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218663,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Decode(s: String): String; \n\nimplementation\n\nuses SysUtils, StrUtils, RegExpr;\n\ntype\n  IntegerArray = array of Int64;\n\nfunction Decode(s: String): String;\nvar re: TRegExpr; n, i, j: Int64; snb, txt, alpha, c, ch: String; a, b: IntegerArray;\nbegin\n  re := TRegExpr.Create;\n  re.Expression := '\\D.*';\n  snb := ReplaceRegExpr(re.Expression, s, '');\n  re.Free;\n  n := StrToInt(snb) Mod 26;\n  if ((n Mod 2 = 0) Or (n = 13)) then Exit('Impossible to decode');\n  txt := ReplaceStr(s, snb, '');\n  a := [9, 3, 5, 21, 7, 15, 11, 19, 23, 17, 25, 1];\n  b := [3, 9, 21, 5, 15, 7, 19, 11, 17, 23, 25, 1];\n  j := -1; Repeat Inc(j); until (a[j] = n);\n  alpha := 'abcdefghijklmnopqrstuvwxyz';\n  Result := '';\n  for c in txt do\n  begin\n    i := (pos(c, alpha) - 1) * b[j];\n    ch := alpha[i Mod 26 + 1];\n    Result += ch;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218664,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Decode(s: String): String; \n\nimplementation\n\nuses SysUtils, StrUtils, RegExpr;\n\ntype\n  IntegerArray = array of Int64;\n\nfunction Decode(s: String): String;\nvar re: TRegExpr; n, i, j: Int64; snb, txt, alpha, c, ch: String; a, b: IntegerArray;\nbegin\n  re := TRegExpr.Create;\n  re.Expression := '\\D.*';\n  snb := ReplaceRegExpr(re.Expression, s, '');\n  re.Free;\n  n := StrToInt(snb) Mod 26;\n  if ((n Mod 2 = 0) Or (n = 13)) then Exit('Impossible to decode');\n  txt := ReplaceStr(s, snb, '');\n  a := [9, 3, 5, 21, 7, 15, 11, 19, 23, 17, 25, 1];\n  b := [3, 9, 21, 5, 15, 7, 19, 11, 17, 23, 25, 1];\n  j := -1; Repeat Inc(j); until (a[j] = n);\n  alpha := 'abcdefghijklmnopqrstuvwxyz';\n  Result := '';\n  for c in txt do\n  begin\n    i := (pos(c, alpha) - 1) * b[j];\n    ch := alpha[i Mod 26 + 1];\n    Result += ch;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5db19d503ec3790012690c11":[{"id":218665,"user_id":null,"body":"unit Kata;\n\ninterface\n\nfunction Weight(n, w: Int64): Double;\n\nimplementation\n  \nfunction Weight(n, w: Int64): Double;\nvar i0: Double;\nbegin\n  \/\/ your code\n  i0 := 0.14849853757254047;\n  Result := 0.17174117862516716128 * w;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218666,"user_id":527,"body":"unit Kata;\n\ninterface\n\nfunction Weight(n, w: Int64): Double;\n\nimplementation\n  \nfunction Weight(n, w: Int64): Double;\nbegin\n  Result := w * (Exp(2) - 3) * (1 - Exp(-2 * n)) \/ (4 * (Exp(2) - 1));\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218667,"user_id":492,"body":"unit Kata;\n\ninterface\n\nfunction Weight(n, w: Int64): Double;\n\nimplementation\n\nuses SysUtils, Math;\n  \nfunction Weight(n, w: Int64): Double;\nvar i0, e, an: Double;\nbegin\n  i0 := 0.14849853757254047;\n  e := 2.7182818284590455;\n  an := (1 - Power(e, -(2 * n + 2))) \/ (1 - Power(e, -2));\n  Result := i0 * an * w;\nend;\n\nend.","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}],"5e4bb05b698ef0001e3344bc":[{"id":218668,"user_id":53,"body":"unit Kata;\ninterface\n\ntype TArr = array of Int64;\ntype T2Arr = array[0..1] of Int64;  \nfunction Solve(arr: TArr): T2Arr; \n\nimplementation\n  \nfunction Solve(arr: TArr): T2Arr;\nvar \n  a, b, c, d: Int64; \n  i: Integer;\nbegin\n  a := arr[0];\n  b := arr[1];\n  i := 2;\n  while (i < Length(arr)) do\n  begin\n    c := a * arr[i] + b * arr[i+1];\n    d := Abs(b * arr[i] - a * arr[i+1]);\n    a := c;\n    b := d;\n    i := i+2;\n  end;\n  Result[0] := a;\n  Result[1] := b;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218669,"user_id":null,"body":"unit Kata;\ninterface\n\ntype\n  TArr = array of Int64;\ntype\n  T2Arr = array[0..1] of Int64;  \nfunction Solve(arr: TArr): T2Arr; \n\nimplementation\n  \nfunction Solve(arr: TArr): T2Arr;\nvar i, tmp: Int64;\nbegin\n  Result[0] := arr[0];\n  Result[1] := arr[1];\n  for i := 2 to High(arr) do if i mod 2 = 0 then begin\n    tmp := Result[0] * arr[i] + Result[1] * arr[i + 1];\n    Result[1] := abs(Result[0] * arr[i + 1] - Result[1] * arr[i]);\n    Result[0] := tmp;\n  end;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"},{"id":218670,"user_id":492,"body":"unit Kata;\ninterface\n\ntype\n  TArr = array of Int64;\ntype\n  T2Arr = array[0..1] of Int64;  \nfunction Solve(arr: TArr): T2Arr; \n\nimplementation\n  \nfunction Solve(arr: TArr): T2Arr;\nvar a, b, x, y, z, t: Int64; i: Integer;\nbegin\n  a := arr[0];\n  b := arr[1];\n  i := 1;\n  while (i < Length(arr) Div 2) do\n  begin\n    x := a; y := b; z := arr[2 * i]; t := arr[2 * i + 1];\n    a := Abs(x * z - y * t);\n    b := Abs(x * t + y * z);\n    Inc(i);\n  end;\n  Result[0] := a;\n  Result[1] := b;\nend;\n\nend.\n","lang_id":36,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:21","updated_at":"2023-01-14 13:24:21"}]}