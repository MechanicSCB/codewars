{"50654ddff44f800200000004":[{"id":336523,"user_id":516,"body":"#!\/bin\/bash -e\necho $(($1*$2))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336524,"user_id":null,"body":"#!\/bin\/bash -e\na=$1\nb=$2\necho $((a*b))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336525,"user_id":null,"body":"echo $[$1*$2]","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336526,"user_id":null,"body":"#!\/bin\/bash\n\n# multiply two given numbers.\n# Integers and floating point allowed.\n[[ $1 && $2 =~ ^[0-9]+$ ]] && echo $1 * $2 |bc || echo \"Invalid number(s).\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336527,"user_id":null,"body":"bc<<<$1*$2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336528,"user_id":null,"body":"#!\/bin\/bash -e\necho $(expr $1 * $2)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336529,"user_id":null,"body":"echo $( bc -l <<< \"$1 * $2\" )","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336530,"user_id":null,"body":"#!\/bin\/bash -e\na=$1\nb=$2\nc=`expr $a * $b`\necho $c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336531,"user_id":null,"body":"#!\/bin\/bash -e\n\/*  \n  \u03c3\u03c5\u03b3\u03b3\u03c1\u03b1\u03c6\u03ad\u03b1\u03c2:\u00a0\u0391\u03bd\u03b4\u03c1\u03ad\u03b1\u03c2\u00a0\u03a8\n  \u03b7\u03bc\u03b5\u03c1\u03bf\u03bc\u03b7\u03bd\u03af\u03b1:\u00a029\u00a0\u0394\u03b5\u03ba\u03b5\u03bc\u03b2\u03c1\u03af\u03bf\u03c5\u00a02020\u00a020:53 04:53\n  \u03ba\u03b1\u03c4\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7: \u0392\u03cc\u03c1\u03b5\u03b9\u03bf\u03c2 39.4\u00b0N 74.4\u00b0W 6\u00b0  \n  \u03c5\u03c8\u03cc\u03bc\u03b5\u03c4\u03c1\u03bf:   7 \u03bc\u03ad\u03c4\u03c1\u03b1\n*\/\n\na=$1\nb=$2\necho $((a*b))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336532,"user_id":null,"body":"#!\/bin\/bash \n\nset -e\n\nmain() {\n  a=$1\n  b=$2\n  echo $((a*b))\n}\n\nmain $@","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"514b92a657cdc65150000006":[{"id":336533,"user_id":null,"body":"#!\/bin\/bash\n\nn=$1\nsum=0\nfor ((i=0; i<$n; i++)); do\n  if [ $((i%3)) -eq 0 ] || [ $((i%5)) -eq 0 ]; then\n    sum=$((sum+i));\n  fi\ndone\n\necho $sum","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336534,"user_id":null,"body":"#!\/bin\/bash\nsum=0\nfor (( i=2; i<$1; i++ ))\ndo\n  if (( i%3==0 )) || (( i%5==0 ))\n  then\n    (( sum+=$i ))\n  fi\ndone\necho \"$sum\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336535,"user_id":null,"body":"#!\/bin\/bash\nthree=$[ ($1 - 1) \/ 3 ]\nfive=$[ ($1 - 1) \/ 5 ]\nfifteen=$[ ($1 - 1) \/ 15 ]\ncountone=$[ ( ( $three + 1 ) * $three ) * 3 \/ 2 ]\ncounttwo=$[ ( ( $five + 1 ) * $five ) * 5 \/ 2 ]\ncountthree=$[ ( ( $fifteen + 1 ) * $fifteen ) * 15 \/ 2 ]\necho $[ $countone + $counttwo - $countthree ]","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336536,"user_id":null,"body":"#!\/bin\/bash\n\nn=$1\n\ncnt=0\n\nfor (( i=0; i<$n; i++ )); do\n  f3=$(( i % 3 ))\n  f5=$(( i % 5 ))\n\n  if [[ $f3 == 0 && $f5 == 0 ]]; then\n    cnt=$((cnt + i))\n    continue;\n  fi\n\n  if [[ $f3 == 0 ]]; then\n    cnt=$((cnt + i))\n  fi\n\n  if [[ $f5 == 0 ]]; then\n    cnt=$((cnt + i))\n  fi\n\ndone\n\necho $cnt","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336537,"user_id":null,"body":"#!\/bin\/bash\nseq 1 $(($1-1))|awk 'BEGIN{s=0;}{if($1%5==0||$1%3==0){s+=$1}}END{print s}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336538,"user_id":152,"body":"#!\/bin\/bash\n\necho $1 | awk 'BEGIN { sum = 0 }\n                     { for (i = 0; i < $0; i = i + 1) {\n                           if (i % 3 == 0 || i % 5 == 0) {\n                               sum = sum + i\n                           }\n                       }\n                     }\n               END   { print sum }'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336539,"user_id":null,"body":"#!\/bin\/bash\n  \n  if [ \"$1\" -le \"3\" ] \n  then\n    echo 0\n    exit\n  elif  [ \"$1\" -le \"5\" ]\n  then\n    echo 3\n    exit\n  fi\n  \n  declare -a threes\n  declare -a fives\n  threes[0]=3\n  fives[0]=5\n  three_mult=3\n  five_mult=5\n  i=2\n  j=2\n  \n  five_mult=$[$i*$five_mult] \n  while [ $five_mult -lt $1 ]\n  do\n    \n    fives[i-1]=$five_mult\n    i=$[$i+1]\n    five_mult=$[$i*5]  \n  done\n  \n  three_mult=$[$j*$three_mult]\n  while [ $three_mult -lt $1 ]\n  do\n    threes[j-1]=$three_mult\n    j=$[$j+1]\n    three_mult=$[$j*3]  \n  done\n  \n  mults=(`for mult in \"${threes[@]}\" \"${fives[@]}\" ; do echo \"$mult\" ; done | sort -du`)\n  sm=0\n  for mult in ${mults[@]}\n  do\n    sm=$[$sm+$mult]\n    #echo $sm\n  done\n  \n  echo $sm\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336540,"user_id":null,"body":"#!\/bin\/bash\n\nlimit=$1\n(( limit <= 0 )) && echo \"0\" && exit 1\n\nget_multiples_of(){\n  n=$1; i=0\n  while (( i*n < limit )); do\n    echo $(( n * i++ ))\n  done\n}\n\nfor d in 3 5; do get_multiples_of ${d}; done | sort -u | paste -sd \"+\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336541,"user_id":null,"body":"sum=0\nfor i in $(seq 1 $(($1 - 1))); do\n  [ $(($i % 3)) -eq 0 -o $(($i % 5)) -eq 0 ] && sum=$(( $sum + $i ))\ndone\necho \"$sum\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336542,"user_id":null,"body":"#!\/bin\/bash\n\nseq() {\n  for (( i=0; i<$1; i=$i+${2:-1} ))\n  do\n    echo $i\n  done\n}\n\nnumbers=($( seq $1 3 ) $( seq $1 5 ))\necho ${numbers[@]} | tr ' ' '\n' | sort -nu | awk '\n{a+=$1}\nEND{print a}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"515decfd9dcfc23bb6000006":[{"id":336543,"user_id":274,"body":"echo \"$1\" | egrep -q \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\" && echo \"True\" || echo \"False\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336544,"user_id":null,"body":"adr=\"$1\"\necho $adr | grep -q [1-255].[1-255].[1-255].[1-255]\nif [ $? -eq 0 ]\n  then\n  echo \"True\"\nelse\n  echo \"False\"\n  fi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336545,"user_id":492,"body":"ip=\"$1\"\nif [[ $ip =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then\n  echo \"True\"\nelse\n  echo \"False\"\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336546,"user_id":null,"body":"#!\/bin\/bash -ur\n\ndeclare -r ip_octet='(2([0-4][0-9]|5[0-5])|1[0-9]{2}|[1-9]?[0-9])'\ndeclare -r ip_regex+=\"^(($ip_octet\\.){3}($ip_octet))\\$\"\n\n[[ ${#*} -eq 1 ]] && [[ ${1:-''} =~  $ip_regex ]] && echo \"True\" || echo \"False\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336547,"user_id":null,"body":"echo $1 | grep -E '(([1-9][0-9]*|0)\\.){3}([1-9][0-9]*)' >\/dev\/null && echo True || echo False\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336548,"user_id":null,"body":"#!\/bin\/bash\nadr=\"$1\"\nregex=\"(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\"\n\n[[ $adr =~ ^$regex\\.$regex\\.$regex\\.$regex$ ]] && echo \"True\" || echo \"False\"\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336549,"user_id":null,"body":"adr=\"$1\"\n\nIFS='.' read -r -a ip <<< \"$adr\"\n\nif [[ ${#ip[@]} -eq 4 && ! $adr =~ 0[0-9] && ! $adr =~ ' ' ]]; then\n\nfor oct in ${ip[@]}; do\n\n        if [[ $oct -gt 255 || $oct -lt 0 || $oct =~ [^0-9] || ! $oct ]]; then\n                echo \"False\"\n                exit\n        fi\n\ndone\n        echo \"True\"\n\nelse\n        echo \"False\"\n\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336550,"user_id":null,"body":"#!\/bin\/bash\n\nadr=\"$1\"\n\nif [[ \"$adr\" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then\n  echo \"True\"\nelse\n  echo \"False\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336551,"user_id":null,"body":"echo \"$1\" | grep -Eq \"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\" && echo \"True\" || echo \"False\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336552,"user_id":null,"body":"adr=\"$1\"\nre='^[0-9]+$'\ndots=\"${adr\/\/[^.]}\"\nif [ ${#dots} -ne 3 ];then\necho \"False\"\nexit 1\nfi\nIFS='.' read -ra ADDR <<< \"$adr\"\nfor i in \"${ADDR[@]}\"; do\n   if ! [[ $i =~ $re ]] || [ $i -lt 0 ] || [ $i -gt 255 ] || [ `echo $i | grep ^0 |wc -l` -ne 0 ] ; then\n        echo \"False\"\n        exit 1\n   fi\ndone\necho \"True\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"51c89385ee245d7ddf000001":[{"id":336553,"user_id":null,"body":"printf \"Value is %05d\" $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336554,"user_id":null,"body":"# Make it green, than make it clean :)\necho \"Value is 00005\"\necho \"Value is 01204\"\necho \"Value is 00000\"\necho \"Value is 55555\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336555,"user_id":527,"body":"echo \"Value is 00005Value is 01204Value is 00000Value is 55555\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336556,"user_id":null,"body":"printf \"Value is %.5d\", $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336557,"user_id":null,"body":"# Make it green, than make it clean :)\nloop=$(echo \"5 - ${#1}\" | bc)\nzeros=\"\"\nfor (( i=0; i<$loop; i++))\ndo\n  zeros+=\"0\"\ndone\necho \"Value is $zeros$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336558,"user_id":null,"body":"echo $1 | perl -e 'printf \"Value is %05d\", <>'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336559,"user_id":null,"body":"#!\/usb\/bin\/bash\n\nprintf \"Value is %05d\" $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336560,"user_id":null,"body":"printf -v o \"%05d\" $1\necho \"Value is $o\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336561,"user_id":148,"body":"echo $(printf \"Value is %05d\" $1)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336562,"user_id":17,"body":"#!\/bin\/bash\n\nprintf \"Value is %05d\" $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"51c8991dee245d7ddf00000e":[{"id":336563,"user_id":null,"body":"result=\nfor word in $1; do\n  result=\"$word $result\"\ndone\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336564,"user_id":null,"body":"#!\/bin\/bash\necho $1 | tac -s ' ' | tr '\n' ' '\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336565,"user_id":null,"body":"#!\/bin\/bash\nfor i in $(echo $1); do echo $i; done | tac | tr '\n' ' ' && echo","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336566,"user_id":null,"body":"result=\nfor word in $@; do\n  result=\"$word $result\"\ndone\n\necho \"$result\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336567,"user_id":null,"body":"echo $1 | awk '{ for (i=NF; i>1; i--) printf(\"%s \",$i); print $1; }'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336568,"user_id":152,"body":"echo \"$1\" | awk '{ i = NF;\n                   while (i > 0) {\n                       printf(\"%s \", $i)\n                       i = i - 1\n                   }\n                 }'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336569,"user_id":null,"body":"IFS=' '\noutput=()\nread -r -a array <<< \"$1\"\nindex=${#array[@]}\n((index -= 1))\nwhile [ $index -gt -1 ]; do\n    output+=(${array[index]})\n    ((index -= 1))\ndone\necho ${output[@]}\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336570,"user_id":null,"body":"count=$(echo $1 | wc -w)\narr=($(echo $1))\nresult=\"\"\nfor ((i=(count-1); i>=0; i--)); do\n    result+=${arr[i]}\n    if ((i>0)); then\n        result+=\" \"\n    fi\ndone\necho \"${result}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336571,"user_id":null,"body":"stringarray=($1)\n\nfor a in ${stringarray[@]}; do sentence=\"$a $sentence\"; done\n\necho $sentence","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336572,"user_id":null,"body":"echo $(printf '%s\n' $1 | tac)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"51f2b4448cadf20ed0000386":[{"id":336573,"user_id":null,"body":"#!\/bin\/bash\n\n#code here   input args 1,out the result\n\necho $1 | cut -f1 -d \"#\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336574,"user_id":null,"body":"echo ${1%%#*}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336575,"user_id":null,"body":"#!\/bin\/bash\n\n#code here   input args 1,out the result\necho $1 | cut -d# -f1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336576,"user_id":null,"body":"#!\/bin\/bash\n\ncut -d '#' -f1 <<< $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336577,"user_id":null,"body":"#!\/bin\/bash\n\nremove_url_anchor(){\nstripcode=`echo $1|sed 's\/#\/ \/g'|awk '{print $1}'`\necho $stripcode\n}\n\nremove_url_anchor $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336578,"user_id":1750,"body":"#!\/bin\/bash\n\nsed -e 's\/#.*\/\/' <<< $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336579,"user_id":null,"body":"#!\/bin\/bash\n\necho \"${1\/\\#*\/}\"  ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336580,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | egrep -o \"^[^#]*\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336581,"user_id":null,"body":"#!\/bin\/bash\n\n# input args 1,out the result\necho \"$1\" | cut -d'#' -f1\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336582,"user_id":null,"body":"#!\/bin\/bash\n\n#Gets URL as arg and deletes everything after first '#' symbol and returns result\necho \"$1\" | cut -f1 -d \"#\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"523b4ff7adca849afe000035":[{"id":336583,"user_id":2540,"body":"#!\/bin\/bash\ngreet() {\n    echo \"hello world!\";\n}\ngreet ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336584,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\ndeclare -r  -- _fixedProficiency=5 # fixes a space. -1 if there isn't one\ndeclare -r  -- _proficiencyTarget=\"hello world\"\ndeclare -ra -- _pool=(d e h l o r w)\n\ndeclare -A -- _population\ndeclare -A -- _scores\n\ndeclare -- _crossoverType=\"RANDOM\"\ndeclare -- _goalReached=false\ndeclare -- _highestScoreOwner=\"\"\ndeclare -- _breedingSets=1\ndeclare -- _generation=0\ndeclare -- _highestScore=100\ndeclare -- _personCount=0\ndeclare -- _populationCount=4\ndeclare -- _proficiencyCount=${#_proficiencyTarget}\n\nlevenshtein ()\n{\n    local -r -- target=$1\n    local -r -- given=$2\n    local -r -- targetLength=${#target}\n    local -r -- givenLength=${#given}\n    local -- alt\n    local -- cost\n    local -- ins\n    local -- gIndex=0\n    local -- lowest\n    local -- nextGIndex\n    local -- nextTIndex\n    local -- tIndex\n    local -A -- leven\n\n    while (( $gIndex <= $givenLength )); do\n\n        tIndex=0\n        while (( $tIndex <= $targetLength )); do\n            (( $gIndex == 0 )) && leven[0,$tIndex]=$tIndex\n            (( $tIndex == 0 )) && leven[$gIndex,0]=$gIndex\n\n            (( tIndex++ ))\n        done\n\n        (( gIndex++ ))\n    done\n\n    gIndex=0\n    while (( $gIndex < $givenLength )); do\n\n        tIndex=0\n        while (( $tIndex < $targetLength )); do\n            [[ \"${target:tIndex:1}\" == \"${given:gIndex:1}\" ]] && cost=0 || cost=1\n\n            (( nextTIndex = $tIndex + 1 ))\n            (( nextGIndex = $gIndex + 1 ))\n\n            (( del = leven[$gIndex,$nextTIndex] + 1 ))\n            (( ins = leven[$nextGIndex,$tIndex] + 1 ))\n            (( alt = leven[$gIndex,$tIndex] + $cost ))\n\n            (( lowest = $ins <= $del ? $ins : $del ))\n            (( lowest = $alt <= $lowest ? $alt : $lowest ))\n\n            leven[$nextGIndex,$nextTIndex]=$lowest\n\n            (( tIndex++ ))\n        done\n\n        (( gIndex++ ))\n    done\n\n    return $lowest\n}\n\nbuildPopulation ()\n{\n    local -- count=0\n    local -- proficiencies=\"\"\n\n    while (( count < $_populationCount )); do\n        generateRandomProficiencies \"proficiencies\"\n\n        _population[\"person_$_personCount\"]=$proficiencies\n        (( _personCount++ ))\n        (( count++ ))\n    done\n}\n\ngenerateRandomProficiencies ()\n{\n    local -- prof=0\n    local -- profs=\"\"\n\n    while (( prof < $_proficiencyCount )); do\n        if (( $prof == $_fixedProficiency )); then\n            profs+=\" \"\n        else\n            profs+=\"${_pool[$(( $RANDOM % ${#_pool[@]} ))]}\"\n        fi\n\n        (( prof++ ))\n    done\n\n    printf -v \"$1\" \"%s\" \"$profs\"\n}\n\nbuildScores ()\n{\n    local -- person=\"\"\n    local -- score\n\n    for person in ${!_population[@]}; do\n        levenshtein \"$_proficiencyTarget\" \"${_population[$person]}\"\n        score=$?\n        (( $score == 0 )) && _goalReached=true\n        _scores[$person]=$score\n    done\n}\n\nbreed ()\n{\n    local -- breedingSet=0\n    local -- firstStrongest=\"\"\n    local -- secondStrongest=\"\"\n\n    while (( breedingSet < $_breedingSets )); do\n        getStrongest \"firstStrongest\"\n        unset _scores[$firstStrongest]\n        getStrongest \"secondStrongest\"\n        unset _scores[$secondStrongest]\n\n        crossover $firstStrongest $secondStrongest\n\n        (( breedingSet++ ))\n    done\n\n    (( _breedingSets++ ))\n}\n\ncrossover ()\n{\n    local -r -- first=${_population[$1]}\n    local -r -- second=${_population[$2]}\n    local -- crossoverPoint=0\n    local -- firstChild=\"\"\n    local -- firstChildName=\"\"\n    local -- secondChild=\"\"\n    local -- secondChildName=\"\"\n\n    case $_crossoverType in\n        ('SINGLE') {\n            crossoverPoint=$(( $_proficiencyCount \/ 2 ))\n            firstChild=${first:0:$crossoverPoint}${second:$crossoverPoint}\n            secondChild=${second:0:$crossoverPoint}${first:$crossoverPoint}\n        };;\n        (\"RANDOM\") {\n            while (( $crossoverPoint < $_proficiencyCount )); do\n                if (( $RANDOM & 1 )); then\n                    firstChild+=${first:$crossoverPoint:1}\n                    secondChild+=${second:$crossoverPoint:1}\n                else\n                    firstChild+=${second:$crossoverPoint:1}\n                    secondChild+=${first:$crossoverPoint:1}\n                fi\n                (( crossoverPoint++ ))\n            done\n        };;\n    esac\n\n    (( _personCount++ ))\n    firstChildName=\"person_$_personCount\"\n    (( _personCount++ ))\n    secondChildName=\"person_$_personCount\"\n\n    _population[$firstChildName]=$firstChild\n    _population[$secondChildName]=$secondChild\n\n    mutate $firstChildName\n    mutate $secondChildName\n\n    (( _populationCount += 2 ))\n}\n\ngetStrongest ()\n{\n    local -- maximum=$_proficiencyCount*2\n    local -- person=\"\"\n    local -- strongest=\"\"\n\n    for person in ${!_scores[@]}; do\n        if (( ${_scores[$person]} <= $maximum )); then\n            strongest=$person\n            maximum=${_scores[$person]}\n        fi\n    done\n\n    printf -v \"$1\" \"%s\" \"$strongest\"\n\n    if (( ${_scores[$strongest]} <= $_highestScore )); then\n        _highestScore=${_scores[$strongest]}\n        _highestScoreOwner=$strongest\n    fi\n}\n\ncull ()\n{\n    (( ${#_scores[@]} )) || return\n\n    local -r -- maxBreedingSet=$_breedingSets**2\n    local --  breedingSet=0\n    local --  weakestPerson=\"\"\n\n    while (( breedingSet < $maxBreedingSet )); do\n        getWeakest \"weakestPerson\"\n        [[ \"$weakestPerson\" == \"\" ]] && return\n\n        unset _scores[$weakestPerson]\n        unset _population[$weakestPerson]\n\n        (( _populationCount-- ))\n        (( breedingSet++ ))\n    done\n}\n\ngetWeakest ()\n{\n    local -- minimum=0\n    local -- person=\"\"\n    local -- weakest=\"\"\n\n    for person in ${!_scores[@]}; do\n        if (( ${_scores[$person]} > $minimum )); then\n            weakest=$person\n            minimum=${_scores[$person]}\n        fi\n    done\n\n    printf -v \"$1\" \"%s\" \"$weakest\"\n}\n\nmutate ()\n{\n    local -- newProf=\"\"\n    local -- person=\"$1\"\n    local -- proficiencies=${_population[$person]}\n    local -- profIndex=0\n\n    while (( profIndex < $_proficiencyCount )); do\n        if (( $profIndex != $_fixedProficiency )); then\n            case $(( ($RANDOM + 1) % 100 )) in\n                (9[0-9]) {\n                    newProf=${proficiencies:0:$profIndex}\n                    newProf+=${_pool[$RANDOM % ${#_pool[@]}]}\n                    newProf+=${proficiencies:$(( $profIndex + 1 ))}\n\n                    proficiencies=$newProf\n                };;\n            esac\n        fi\n\n        (( profIndex++ ))\n    done\n\n    _population[$person]=$proficiencies\n}\n\nbuildPopulation\n\nuntil $_goalReached; do\n    _scores=()\n    (( _generation++ ))\n\n    buildScores\n    breed\n    cull\n\n    printf \"generation: %-3s \" $_generation >&2\n    printf \"population: %-4s \" $_populationCount >&2\n    printf \"highest: %-11s \" $_highestScoreOwner >&2\n    printf \"score: %-2s \" $_highestScore >&2\n    printf \"genes: %s\n\" \"${_population[$_highestScoreOwner]}\" >&2\ndone\n\necho >&2\necho \"${_population[$_highestScoreOwner]}!\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336585,"user_id":null,"body":"#!\/bin\/bash\ngreet(){\n   printf \"\\x68\\x65\\x6c\\x6c\\x6f\\x20\\x77\\x6f\\x72\\x6c\\x64\\x21\"\n}\ngreet","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336586,"user_id":null,"body":"#!\/bin\/bash\n# Write a function `greet` that returns \"hello world!\"\ngreet {\necho 'hello world!' \n}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336587,"user_id":null,"body":"#!\/bin\/bash\n# Write a function `greet` that returns \"hello world!\"\ngreet(){\n\n  array=(h e l l o)\n  array2=(w o r l d !)\n  \n  for i in ${array[@]}; do\n    string1+=$i\n  done\n  \n  for j in ${array2[@]}; do\n    string2+=$j\n  done\n  \n  echo \"${string1} ${string2}\"\n}\ngreet","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336588,"user_id":null,"body":"#!\/bin\/bash\necho \"hello world!\"\nexit","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336589,"user_id":null,"body":"#!\/bin\/bash\n# Write a function `greet` that returns \"hello world!\"\ngreet () {\n  turn=\"hello world!\"\n}\ngreet\necho $turn","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336590,"user_id":null,"body":"#!\/bin\/bash\nfunction greet()\n{\n  words=($1 ' ' $2) #array assigning arguments and a space as values\n  \n  echo ${words[@]}\"!\" #echo all values of the array with the exclamation\n}\ngreet hello world #call function greet with two arguments","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336591,"user_id":null,"body":"#!\/bin\/bash\nperl -e 'print \"hello world!\n\"'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336592,"user_id":null,"body":"#!\/bin\/bash\n\nawk 'BEGIN {print \"hello world!\"}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"525f47c79f2f25a4db000025":[{"id":336593,"user_id":null,"body":"regex='^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$'\n[[ $1 =~ $regex ]] && echo True || echo False","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336594,"user_id":null,"body":"input=$1\nregexp=\"^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$\"\nif [[ $input =~ $regexp ]]; then\n  echo \"True\"\nelse\n  echo \"False\"\nfi\n\n  ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336595,"user_id":null,"body":"# echo \"$1\"\ngrep -qE '^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$'<<<$1\n([ $? -eq 0 ] && echo \"True\") || echo \"False\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336596,"user_id":1096,"body":"#!\/bin\/bash\n\nregex='^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$'\nif [[ $1 =~ $regex ]]; then\n  echo True\nelse\n  echo False\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336597,"user_id":null,"body":"[[ $1 =~ ^\\([0-9]{3}\\)[[:space:]][0-9]{3}-[0-9]{4}$ ]] && echo True || echo False","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336598,"user_id":null,"body":"# echo \"$1\"\n# echo \"$1\"\ninput=$1;\n[[ $input =~ ^\\([0-9]{3}\\)[[:space:]][0-9]{3}\\-[0-9]{4}$ ]] && echo \"True\" || echo \"False\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336599,"user_id":null,"body":"#!\/bin\/bash\n\nre='^\\([[:digit:]]{3}\\)[[:space:]]{1}[0-9]{3}-[0-9]{4}$' \nif [[ \"$1\" =~ $re ]]; then\n  echo True\nelse\n  echo False\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336600,"user_id":null,"body":"# \/bin\/bash\nre=^[\\(][0-9]{3}[\\)]' '[0-9]{3}-[0-9]{4}$\nif [[ \"$1\" =~ $re ]]; then\necho True\nelse\necho False\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336601,"user_id":null,"body":"if [[ $1 =~ ^\\([0-9]{3}\\)[[:space:]][0-9]{3}-[0-9]{4}$ ]] ; then\n    echo \"True\"\nelse\n    echo \"False\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336602,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ \"$1\" =~ ^\\([0-9]{3}\\)[[:space:]][0-9]{3}\\-[0-9]{4}$ ]]; then\n    echo \"True\"\nelse\n    echo \"False\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"526571aae218b8ee490006f4":[{"id":336603,"user_id":null,"body":"#!\/bin\/bash\necho \"obase=2;$1\" | bc | grep -o 1 |wc -l\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336604,"user_id":null,"body":"#!\/bin\/bash\n\nbc <<< \"obase=2;$1\" | grep -o 1 | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336605,"user_id":null,"body":"#!\/bin\/bash\nn=$1\ncnt=0\nwhile [[ $n != 0 ]]; do\n  if [[ $(($n&1)) == 1 ]]; then\n    cnt=$(($cnt + 1))\n  fi\n  n=$(($n >> 1))\ndone\necho \"$cnt\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336606,"user_id":null,"body":"n=$1\nbits=0\nwhile (( $n > 0 )); do\n  $((bits+=n&1, n>>=1))\ndone\necho $bits","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336607,"user_id":1045,"body":"#!\/bin\/bash\necho \"obase=2; $1\"|bc|tr -cd \"1\"|wc -m","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336608,"user_id":null,"body":"#!\/bin\/bash\nn=$1\n#code me\nqt=\necho \"obase=2;$n\" |  bc -l | grep -o '1' | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336609,"user_id":null,"body":"#!\/bin\/bash\nn=$1\n\necho \"obase=2;$n\" | bc | tr -cd '1' | wc -c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336610,"user_id":null,"body":"#!\/bin\/bash\ncnt=0\nwhile IFS='' read -r -d '' -n 1 c; do\n  if [[ \"$c\" == \"1\" ]]; then cnt=$(($cnt+1)); fi\ndone < <(echo \"obase=2;$1\" | bc)\necho $cnt","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336611,"user_id":null,"body":"#!\/bin\/bash\necho \"obase=2;$1\" | bc | sed s\/0\/\/g | awk '{ print length }'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336612,"user_id":null,"body":"#!\/bin\/bash\nn=`bc <<< \"obase=2;$1\"`\ngrep -o \"1\" <<< \"$n\" | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"52685f7382004e774f0001f7":[{"id":336613,"user_id":null,"body":"#!\/bin\/bash\n\nseconds=$1\nprintf \"%02d:%02d:%02d\" $(( $seconds \/ 3600 )) $(( $seconds \/ 60 % 60 )) $(( $seconds % 60 ))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336614,"user_id":null,"body":"#!\/bin\/bash\nH=$(($1\/3600))\nM=$((($1-$H*3600)\/60))\nS=$(($1-$H*3600-$M*60))\n\ntime=($H $M $S)\ncounter=0\n\nfor i in \"${time[@]}\"\ndo\n  counter=$(($counter+1));\n  if [[ $i == 0 ]]; then\n    echo -n $i$i\n  elif [[ $i -le 9 ]]; then\n    echo -n \"0\"$i\n  else\n    echo -n $i\n  fi\n  if [[ ${#time[@]} != $counter ]]; then\n    echo -n \":\"\n  fi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336615,"user_id":null,"body":"#!\/bin\/bash\nseconds=$1\ns=$(( seconds%60 ))\nm=$(( (seconds\/60)%60 ))\nh=$(( seconds\/3600 ))\n\nprintf '%02d:' \"$h\"\nprintf '%02d:' \"$m\"\nprintf '%02d' \"$s\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336616,"user_id":null,"body":"#!\/bin\/bash\n\n#seconds=$1\nHH=00\nMM=00\nSS=00\nif [ $1 -le 359999 ];then\n  SS=$[$1 % 60]\n  MM=$[$1 \/ 60 % 60]\n  HH=$[$1 \/ 3600]\n  [ $SS -lt 10 ] && SS=0$SS\n  [ $MM -lt 10 ] && MM=0$MM\n  [ $HH -lt 10 ] && HH=0$HH\n  echo $HH:$MM:$SS\nelse\n  echo \"The Number is too large!\"\nfi\n#echo $seconds\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336617,"user_id":null,"body":"#!\/bin\/bash\nprintf \"%02d:%02d:%02d\" $(($1\/3600)) $(($1%3600\/60)) $(($1%60))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336618,"user_id":null,"body":"#!\/bin\/bash\n\nseconds=$1\n# Do something\n# echo $seconds\nhour=$(($seconds \/ 3600))\nprintf -v hour \"%02d\" $hour\n# echo $hour\nminute=$((($1 % 3600) \/ 60))\nprintf -v minute \"%02d\" $minute\nsecond=$(($1% 60))\nprintf -v second \"%02d\" $second\necho $hour:$minute:$second\n# echo $hour\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336619,"user_id":null,"body":"#!\/bin\/bash\n\nseconds=$1\nminutes=0\nhours=0\ntest=10\n\nlet \"minutes = seconds \/ 60\" \nlet \"seconds = seconds % 60\" \n\nlet \"hours = minutes \/ 60\" \nlet \"minutes = minutes % 60\"\n\n\n\nif [ $seconds -lt $test ]\nthen\nseconds=\"0${seconds}\"\nfi\n\nif [ $minutes -lt $test ]\nthen\nminutes=\"0${minutes}\"\nfi\n\nif [ $hours -lt $test ]\nthen\nhours=\"0${hours}\"\nfi\n\n\necho \"$hours:$minutes:$seconds\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336620,"user_id":null,"body":"#!\/bin\/bash\n\nminutes=$(( $1\/60%60 ))\nhours=$(( $1\/60\/60 ))\nseconds=$(( $1%60 ))\n\nprintf \"%02d:%02d:%02d\" $hours $minutes $seconds\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336621,"user_id":null,"body":"#!\/bin\/bash\n\nseconds=$1\n\nsecs2hrt () {\n    hh=$(( seconds \/ 3600 ))\n    mm=$(( ( seconds \/ 60 ) % 60 ))\n    ss=$(( seconds % 60 ))\n    printf \"%02d:%02d:%02d\n\" \"$hh\" \"$mm\" \"$ss\"\n}\n\nsecs2hrt \"$seconds\"\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336622,"user_id":53,"body":"#!\/bin\/bash\n\nt=$1\nprintf \"%02d:%02d:%02d\" \"$((t\/3600))\" \"$(($((t\/60)) % 60))\" \"$((t % 60))\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"52742f58faf5485cae000b9a":[{"id":336623,"user_id":null,"body":"#!\/bin\/bash\nfunction duration() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"now\"\n        exit\n    else\n        dur=$1\n    fi\n    delim=( $((365*24*3600)) $((24*3600)) 3600 60 1 )\n    item=(year day hour minute second)\n    for ((i=0;i<${#delim[@]};i++)); do\n        echo=$(( dur\/${delim[$i]} ))\n        if [[ $echo -ne 0 ]]; then\n            echo -n \"$echo ${item[$i]}\"\n            if [[ $echo -gt 1 ]]; then\n                echo -n \"s\"\n            fi\n            echo -n \", \"\n        fi\n        dur=$(( dur%${delim[$i]} ))\n    done | sed -E \"s\/, $\/\/;s\/(.*), (.*?)\/\\1 and \\2\/\"\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336624,"user_id":null,"body":"#!\/bin\/bash\nfunction duration() {\nif (( $1==0 )); then\n  echo now\nelse\n  y=$(( $1\/31536000 ))\n  d=$(( $1%31536000\/86400 ))\n  h=$(( $1%31536000%86400\/3600 ))\n  m=$(( $1%31536000%86400%3600\/60 ))\n  s=$(( $1%31536000%86400%3600%60 ))\n  case $y in\n    0)\n      y=\"\"\n      ;;\n    1)\n      y=\"1 year, \"\n      ;;\n    *)\n      y+=\" years, \"\n  esac\n  case $d in\n    0)\n      d=\"\"\n      ;;\n    1)\n      d=\"1 day, \"\n      ;;\n    *)\n      d+=\" days, \"\n  esac\n  case $h in\n    0)\n      h=\"\"\n      ;;\n    1)\n      h=\"1 hour, \"\n      ;;\n    *)\n      h+=\" hours, \"\n  esac\n  case $m in\n    0)\n      m=\"\"\n      ;;\n    1)\n      m=\"1 minute, \"\n      ;;\n    *)\n      m+=\" minutes, \"\n  esac\n  case $s in\n    0)\n      s=\"\"\n      ;;\n    1)\n      s=\"1 second, \"\n      ;;\n    *)\n      s+=\" seconds\"\n  esac\n  echo $y$d$h$m$s | sed 's\/[, ]*$\/\/'|sed 's\/\\(.*\\),\/\\1 and\/'\nfi\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336625,"user_id":null,"body":"#!\/bin\/bash                                                                                                                                                                                                 #!\/bin\/bash\ndiv=(31536000 86400 3600 60 1) \ntime=(years days hours minutes seconds)\nfor i in {0..4}\n{ time[$i]=\" $(($1\/div[i])) ${time[i]}\" ; set $(($1%div[i])) ; } \nans=`(IFS=,;  echo \"${time[*]}\") |  sed -E 's\/,? \\b0 \\w+\/\/g;s\/(\\b1\\b \\w+)s\/\\1\/g;s\/, ([^,]*)$\/ and \\1\/;s\/^[^0-9]+\/\/'`\necho ${ans:-now}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336626,"user_id":null,"body":"#!\/bin\/bash\n\nfunction duration() {\n  if [ $1 == 0 ]; then\n    echo now\n    return\n  fi\n  t=$1\n  s=$((t%60))\n  m=$((t\/60%60))\n  h=$((t\/3600%24))\n  d=$((t\/86400%365))\n  y=$((t\/31536000))\n  echo \"$y years, $d days, $h hours, $m minutes, $s seconds\" | sed 's\/\\<0 \\w*,\\?\\s*\/\/g;s\/\\(\\<1 \\w*\\)s\\>\/\\1\/g;s\/,\\s*$\/\/;s\/,\\([^,]*$\\)\/ and\\1\/'\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336627,"user_id":null,"body":"#!\/bin\/bash\nfunction duration() {\n  date=($(($1\/60\/60\/24\/365)) $((($1-$(($1\/60\/60\/24\/365))*60*60*24*365)\/3600\/24)) $(($1\/60\/60%24)) $(($1\/60%60)) $(($1%60)))\n  values=(\"year\" \"day\" \"hour\" \"minute\" \"second\")\n  \n  for (( i=0; i < ${#date[@]}; ++i )); do\n    if [ ${date[$i]} -ne 0 ] && [ ${date[$i]} -ge 2 ]; then\n      result=\"$result ${date[$i]} ${values[$i]}s, \"\n    elif [[ ${date[$i]} -ne 0 ]]; then\n      result=\"$result ${date[$i]} ${values[$i]}, \"\n    elif [[ $1 == 0 ]]; then \n      echo \"now\" & exit \n    fi\n  done\n  echo $result | sed 's\/.$\/\/' | perl -pe 's\/.*\\K,\/ and\/'\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336628,"user_id":null,"body":"#!\/bin\/bash\n\nfunction duration() {\n  if [ $1 -eq 0 ]; then\n    echo \"now\"\n    exit 0\n  fi  \n  units=(\"year\" \"day\" \"hour\" \"minute\" \"second\")\n  unitsValue=(0 0 0 0 0)\n  unitsValue[4]=$(expr $1 % 60)\n  unitsValue[3]=$(expr $1 \/ 60)\n  unitsValue[2]=$(expr ${unitsValue[3]} \/ 60)\n  unitsValue[3]=$(expr ${unitsValue[3]} % 60)\n  unitsValue[1]=$(expr ${unitsValue[2]} \/ 24)\n  unitsValue[2]=$(expr ${unitsValue[2]} % 24)\n  unitsValue[0]=$(expr ${unitsValue[1]} \/ 365)\n  unitsValue[1]=$(expr ${unitsValue[1]} % 365)\n\n  output=\"\"\n  for index in ${!unitsValue[@]}; do\n    if [ ${unitsValue[index]} -ne 0 ]; then\n      if [ ${unitsValue[index]} -gt 1 ]; then\n        output+=\"${unitsValue[index]} ${units[index]}s, \"\n        continue\n      fi\n      output+=\"${unitsValue[index]} ${units[index]}, \"\n    fi\n  done\n  output=$(echo $output | sed 's\/.$\/\/' | sed 's\/\\(.*\\),\/\\1 and\/')\n  echo $output\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336629,"user_id":null,"body":"#!\/bin\/bash\n\nfunction duration() {\n  printf \"%d year, %d day, %d hour, %d minute, %d second\" $(($1\/(3600*24*365))) $((($1\/(3600*24))%365)) $((($1\/3600)%24)) $((($1\/60)%60)) $(($1%60)) | sed -E 's\/(^|, )0 [a-z]+\/\/g;s\/(([0-9]{2,}|[2-9]) [a-z]+)\/\\1s\/g;s\/^, \/\/;s\/^$\/now\/' | rev | sed 's\/,\/dna \/1' | rev\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336630,"user_id":null,"body":"#!\/bin\/bash\n\nfunction duration() {\n  n=$1\n  if [ $n -eq 0 ] ; then\n    echo 'now'\n    return\n  fi\n  let secs=n%60 ; let n=n\/60\n  let mins=n%60 ; let n=n\/60\n  let hour=n%24 ; let n=n\/24\n  let days=n%365; let n=n\/365\n  year=$n\n  \n  k=0\n  \n  [ $secs -ne 0 ] && let k=k+1\n  [ $mins -ne 0 ] && let k=k+1\n  [ $hour -ne 0 ] && let k=k+1\n  [ $days -ne 0 ] && let k=k+1\n  [ $year -ne 0 ] && let k=k+1\n  \n  if [ $year -ne 0 ]; then\n    [ $year -eq 1 ] && echo -n \"1 year\" || echo -n $year\" years\"\n    [ $k -eq 1 ] && return \n    [ $k -ge 3 ] && echo -n \", \" || echo -n \" and \"\n    let k=k-1\n  fi\n  \n  if [ $days -ne 0 ]; then\n    [ $days -eq 1 ] && echo -n \"1 day\" || echo -n $days\" days\"\n    [ $k -eq 1 ] && return \n    [ $k -ge 3 ] && echo -n \", \" || echo -n \" and \"\n    let k=k-1\n  fi\n  \n  if [ $hour -ne 0 ]; then\n    [ $hour -eq 1 ] && echo -n \"1 hour\" || echo -n $hour\" hours\"\n    [ $k -eq 1 ] && return \n    [ $k -ge 3 ] && echo -n \", \" || echo -n \" and \"\n    let k=k-1\n  fi\n \n  if [ $mins -ne 0 ]; then\n    [ $mins -eq 1 ] && echo -n \"1 minute\" || echo -n $mins\" minutes\"\n    [ $k -eq 1 ] && return \n    [ $k -ge 3 ] && echo -n \", \" || echo -n \" and \"\n    let k=k-1\n  fi\n \n  if [ $secs -ne 0 ]; then\n    [ $secs -eq 1 ] && echo -n \"1 second\" || echo -n $secs\" seconds\"\n  fi\n\n  return\n\n}\n\nduration \"$1\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336631,"user_id":null,"body":"#!\/bin\/bash\n\nfunction duration() {\n  [[ $1 -eq 0 ]] && echo \"now\" && exit\n  s=$(( $1%60 ))\n  m=$(( ($1%(60*60))\/60))\n  h=$(( ($1%(60*60*24))\/(60*60) ))\n  d=$(( ($1%(60*60*24*365))\/(60*60*24) ))\n  y=$(( ($1)\/(60*60*24*365) ))\n  separator=\" and \"\n  separate=false\n  ret=\"\"\n  arr=($s \"second\" $m \"minute\" $h \"hour\" $d \"day\" $y \"year\")\n  for (( i=0; i< ${#arr[@]}; i+=2)); do \n    [[ ${arr[i]} -eq 0 ]] && continue\n    [[ $separate = true ]] && ret=\"$separator$ret\" && separator=\", \"\n    [[ ${arr[i]} -eq 1 ]] && ret=\"${arr[i]} ${arr[i+1]}$ret\" \n    [[ ${arr[i]} -gt 1 ]] && ret=\"${arr[i]} ${arr[i+1]}s$ret\" \n    separate=true\n  done\n  echo $ret\n}\nduration \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336632,"user_id":null,"body":"#!\/bin\/bash\n\np=\"$1\"\ndeclare -A m=([years]=$((365*24*60*60)) [days]=$((24*60*60)) [hours]=$((60*60)) [minutes]=60 [seconds]=1)\nr=\"$(for t in years days hours minutes seconds; do\n  echo -n \", $(( $p \/ ${m[$t]} )) $t\" | sed 's\/^, 0 .*\/\/; s\/^\\(, 1 .*\\)s$\/\\1\/'\n  (( p %= \"${m[$t]}\" ))\ndone | sed 's\/^, \/\/; s\/, \\(\\S\\+ \\S\\+\\)$\/ and \\1\/; s\/$\/\n\/')\"\necho \"${r:-now}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"52e1476c8147a7547a000811":[{"id":336633,"user_id":null,"body":"password=$1\nif [[ \n     \"$password\" =~ ^[[:alnum:]]{6,}$ &&\n     \"$password\" =~ [[:upper:]] &&\n     \"$password\" =~ [[:lower:]] &&\n     \"$password\" =~ [[:digit:]] \n   ]]; then\n  echo \"true\";\nelse\n  echo \"false\";\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336634,"user_id":null,"body":"#!\/bin\/bash\n[[ -n $(grep -P '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])^[a-zA-Z0-9]{6,}$' <<< \"$1\") ]] && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336635,"user_id":null,"body":"grep -Pq '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]{6,}$' <<<\"$1\" && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336636,"user_id":null,"body":"#!\/bin\/bash\n\npassword=\"$1\"\nregex='(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])^[a-zA-Z0-9]{6,}$'\n\ngrep -qP \"$regex\" <<< \"$password\" && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336637,"user_id":null,"body":"[[\n     $1 =~ ^[A-Za-z0-9]{6,}$\n  && $1 =~ [A-Z]\n  && $1 =~ [a-z]\n  && $1 =~ [0-9] \n\n]] && echo true || echo false\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336638,"user_id":null,"body":"password=$1\nif [[\n  ! \"${password}\" =~ ^[[:alnum:]]{6,}$ ||\n  ! \"${password}\" =~ [[:digit:]] ||\n  ! \"${password}\" =~ [[:lower:]] ||\n  ! \"${password}\" =~ [[:upper:]]\n]]; then\n  echo \"false\"\n  exit 1\nfi\necho \"true\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336639,"user_id":null,"body":"check () {\n  if [[ ${#1} -ge 6 && $1 == *[A-Z]* && $1 == *[a-z]* && $1 == *[0-9]* && $1 != *[[:punct:]]* ]]; then echo true; else echo false; fi\n}\ncheck $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336640,"user_id":null,"body":"r='(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])^\\w{6,}$'\necho $1 | grep -qP \"$r\" && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336641,"user_id":null,"body":"[[ \"$1\" =~ [a-z] && \"$1\" =~ [A-Z] && \"$1\" =~ [0-9] && \"$1\" =~ ^[0-9a-zA-Z]{6,}$ ]] && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336642,"user_id":null,"body":"echo \"$1\" | sed 's\/.\/&\n\/g' | LC_COLLATE=C sort | paste -sd \"\" | sed -r '\/.......*\/{s\/[0-9]{1,}[A-Z]{1,}[a-z]{1,}\/true\/}; \/^true$\/!s\/.*\/false\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"52fba66badcd10859f00097e":[{"id":336643,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | sed 's\/[aeiou]\/\/gi'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336644,"user_id":null,"body":"#!\/bin\/bash\n\necho \"${1\/\/[aeiouAEIOU]\/}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336645,"user_id":null,"body":"#!\/bin\/bash\n\ntr -d 'AaEeIiOoUu' <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336646,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | sed 's\/[aeiou]\/\/ig'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336647,"user_id":null,"body":"#!\/bin\/bash\n\n$1=\"This website is for losers LOL!\" \n# your code here #input text as $1,output as result\n\necho $1 | tr --delete \"ieoOau\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336648,"user_id":null,"body":"#!\/bin\/bash\n\nsed 's\/[aiueo]\/\/ig' <<< $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336649,"user_id":null,"body":"#!\/bin\/bash\n\nstring=$1 #Variable with $1 as input text\n\nanti-troll () {\n    echo \"$string\" | sed -r 's\/[AaEeIiOoUu]+\/\/g'\n    return\n}\n\nanti-troll","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336650,"user_id":null,"body":"#!\/bin\/bash\necho $1 | sed s\/[euioaEUIOA]\/\"\"\/g","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336651,"user_id":null,"body":"#!\/bin\/bash\n\necho \"$(echo \"$1\" | tr -d aeiouAEIOU)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336652,"user_id":null,"body":"#!\/bin\/bash\n\n# your code here #input text as $1,output as result\ninput_string=\"$1\"\n\ninput_length=\"${#input_string}\"\nstring_index=0\noutput=\"\"\n\nwhile [ ${string_index} -lt ${input_length} ]\ndo\n  ch=\"${input_string:${string_index}:1}\"\n  \n  echo ${ch} | grep \"[aeiou]\" > \/dev\/null\n  if [ $? -ne 0 ]\n  then\n    output=\"${output}${ch}\"\n  fi\n\n  string_index=$(($string_index+1))\n  #let \"string_index=string_index+1\"\ndone\n\necho \"${output}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"530e15517bc88ac656000716":[{"id":336653,"user_id":527,"body":"tr 'A-Za-z' 'N-ZA-Mn-za-m' <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336654,"user_id":null,"body":"echo $1 | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336655,"user_id":null,"body":"var=$1\necho $var | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'\n# you code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336656,"user_id":null,"body":"tr a-zA-Z n-za-mN-ZA-M <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336657,"user_id":527,"body":"tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm' <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336658,"user_id":null,"body":"var=$1\n\necho $var | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336659,"user_id":null,"body":"var=$1\necho $var | tr '[a-zA-Z]' '[n-za-mN-ZA-M]'\n# you code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336660,"user_id":null,"body":"var=$1\n\n# you code here\nfunction rot13() {    \n    cat | tr \"$(echo -n {A..Z} {a..z} | tr -d ' ')\" \"$(echo -n {N..Z} {A..M} {n..z} {a..m} | tr -d ' ')\" \n}\necho \"$1\" | rot13","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336661,"user_id":null,"body":"var=$( echo $1 | sed \"s\/\\s\/-\/g\" )\nlc=( {a..z} )\nuc=( {A..Z} )\n\nfor char in $( echo $var | grep -Eo . )\ndo\n    if (( $( echo $char | grep -Eo \"\\-|\\!|[0-9]\" | wc -l ) > 0 ))\n    then\n        cipher+=$char\n        continue\n    fi\n    for num in {0..25}\n    do\n        if [ $char == ${lc[$num]} ]\n        then\n            cipher_val=$(( $num+ 13 ))\n            if (( $cipher_val > 25 ))\n            then\n                cipher_val=$(( -1 + $cipher_val - 25 ))\n            fi\n            cipher+=${lc[$cipher_val]}\n        fi\n        if [ $char == ${uc[$num]} ]\n        then\n            cipher_val=$(( $num+ 13 ))\n            if (( $cipher_val > 25 ))\n            then\n                cipher_val=$(( -1 + $cipher_val - 25 ))\n            fi\n            cipher+=${uc[$cipher_val]}\n        fi\n    done\ndone\n\necho $cipher | sed \"s\/-\/ \/g\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336662,"user_id":null,"body":"#!\/bin\/bash\nset -e\necho $1 | tr 'A-Za-z' 'N-ZA-Mn-za-m'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"53da3dbb4a5168369a0000fe":[{"id":336663,"user_id":527,"body":"if [ $(($1 % 2)) -eq 0 ]\n  then echo \"Even\"\n  else echo \"Odd\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336664,"user_id":676,"body":"(( $1 & 1 )) && echo \"Odd\" || echo \"Even\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336665,"user_id":null,"body":"#!\/bin\/bash\n\n# Modulo operation to find even\/odd numbers via given integer argument\n(($1 % 2 == 0)) && echo \"Even\" || echo \"Odd\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336666,"user_id":null,"body":"#!\/bin\/bash\n\n# Determine whether given integer is an odd or even number.\n\ninteger=$1\n\n# When too many args were passed to script.\nif [[ $# > 1 ]]\nthen\n  echo \"Script takes only one argument.\"\n  exit 1\nfi\n\n# When passed argument is not a valid integer.\nvalid_integer=\"^[+-]?[0-9]+$\"\nif ! [[ $integer =~ $valid_integer ]]\nthen\n  echo \"This is not a valid integer.\"\n  exit 1\nfi\n\n(( $integer % 2 == 0 )) && echo \"Even\" || echo \"Odd\"\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336667,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -e\n\nfunction even_or_odd() {\n  local num=$1\n  ensure_integer \"$num\"\n  local rr=(Even Odd)\n  printf '%s' \"${rr[((\"$num\" & 0x1))]}\"\n}\n\nfunction ensure_integer() {\n  local text=$1\n  if [[ \"$text\" =~ ^[+-]?[0-9]+$ ]]; then\n    return 0\n  fi\n  printf 1>&2 '%s is Not an Integer Number\n' \"$text\"\n  return 1\n}\n\n\neven_or_odd \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336668,"user_id":null,"body":"if [ $(($1 % 2))  == 0 ]\nthen\n  echo Even\nelse\n  echo Odd\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336669,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -e\n\nfunction even_or_odd() {\n  local num=$1\n  local array=(\"Even\" \"Odd\")\n  printf '%s' \"${array[$((\"$num\" % 2))]}\"\n}\n\neven_or_odd $@","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336670,"user_id":null,"body":"#! \/bin\/bash\n\n\n[ $(( $1 % 2 )) == 0 ] && echo 'Even' || echo 'Odd'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336671,"user_id":null,"body":"r=(\"Even\" \"Odd\")\necho \"${r[(( $1 & 1 ))]}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336672,"user_id":null,"body":"(($(($1%2))==0)) && echo Even || echo Odd","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"53ee5429ba190077850011d4":[{"id":336673,"user_id":564,"body":"echo $(($1 * 2))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336674,"user_id":null,"body":"expr 2 \\* $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336675,"user_id":null,"body":"# $1 will be an integer. Double it and print it.\necho $[$1*2]\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336676,"user_id":152,"body":"echo \"2*${1}\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336677,"user_id":null,"body":"#!\/bin\/bash\n\nnumber=$1\necho $(($number * 2))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336678,"user_id":null,"body":"# $1 will be an integer. Double it and print it.\nans=$(($1 * 2))\n\necho $ans\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336679,"user_id":null,"body":"# $1 will be an integer. Double it and print it.\n\necho $(expr $1 + $1)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336680,"user_id":null,"body":"# $1 will be an integer. Double it and print it.\n#!\/bin\/bash \necho \"$(($1 * 2))\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336681,"user_id":null,"body":"# $1 will be an integer. Double it and print it.\n#echo $1\nzm=$(($1*2))\necho $zm","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336682,"user_id":null,"body":"# $1 will be an integer. Double it and print it.\nINT=${1}\nDOUBLE=$((${INT} + ${INT}))\n\necho ${DOUBLE}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"542f0c36d002f8cd8a0005e5":[{"id":336683,"user_id":53,"body":"echo $(( $1 - 1 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336684,"user_id":527,"body":"echo \"$1 - 1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336685,"user_id":null,"body":"nb_chairs=$1\n\n# algorythmically\n# ---------------\n# occupied=(1 ${nb_chairs})\n# for((i=3; i<=nb_chairs; i++)); do\n#   let max=0 to=0 c1=1\n#   for j in $(echo \"${occupied[@]:1}\" | tr ' ' '\n' | sort -n); do\n#     let c2=j d=c2-c1 c1=j\n#     (( max < d )) && let max=d to=c2 \n#   done\n#   occupied+=( $((to-(max+1)\/2)) )\n# done\n# echo \"${occupied[$((nb_chairs-1))]}\"\n\n# logically\n# ---------\necho $((nb_chairs-1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336686,"user_id":null,"body":"# TODO: last_chair, the argument is $1\necho $(($1-1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336687,"user_id":null,"body":"echo $[$1 - 1]","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336688,"user_id":null,"body":"echo \"$(($1-1))\"\n\n# 22.12.2021","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336689,"user_id":null,"body":"expr $1 - 1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336690,"user_id":527,"body":"@ r = $1 - 1\necho $r","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336691,"user_id":527,"body":"echo \"$1 - 1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54bf1c2cd5b56cc47f0007a1":[{"id":336692,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | grep -o . | sort -f | uniq -id | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336693,"user_id":null,"body":"#!\/bin\/bash\nls -la","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336694,"user_id":null,"body":"#!\/bin\/bash\ngrep -o .<<<$1|sort -f|uniq -id|wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336695,"user_id":null,"body":"#!\/bin\/bash\n\nsolution() {\n  word=${1^^}\n  counter=0\n  array=()\n  for (( i=0; i<${#word}; i++ )); do\n    count=$(echo $word| tr -cd \"${word:$i:1}\" | wc -c)\n    if [ $count -gt 1 ] ; then\n        string=$(echo ${array[@]})\n        isExist=$(echo $string| tr -cd \"${word:$i:1}\" | wc -c)\n        if [ $isExist -eq 0 ]; then\n          ((counter += 1))\n          array+=(\"${word:$i:1}\")\n       fi\n    fi\n  done\n  echo $counter\n}\n\nsolution $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336696,"user_id":495,"body":"#!\/bin\/bash\necho $1 | tr [A-Z] [a-z] | grep -o . | sort | uniq -d | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336697,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 \\\n   | tr '[:upper:]' '[:lower:]' \\\n   | awk -F '' 'BEGIN{OFS=\"\n\"} {$1=$1; print $0}' \\\n   | sort \\\n   | uniq -c \\\n   | awk '{if ($1>=2) print $2}' \\\n   | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336698,"user_id":null,"body":"#!\/bin\/bash\ndubs () {\n    echo $1 |tr 'a-z' 'A-Z' |sed -E 's\/.\/&\n\/g' |sort |uniq -d |wc -l\n}\ndubs $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336699,"user_id":null,"body":"#!\/bin\/bash\nstring=$1\nlength_of_string=`echo $string | wc -c`\nlength_of_string=$(($length_of_string-1))\n#echo \"length_of_string=$length_of_string\"\nindex=1\nprevious_character=\"\"\noccurred=0\nif [ \"$length_of_string\" != \"0\" ]\nthen\n  while [ \"$index\" -le \"$length_of_string\" ]\n  do\n    character=`expr substr $string $index 1`\n    occurence=`echo $string | grep -o $character | wc -l`\n    echo \"$index  $previous_character | $character\"\n    if [ $occurence -gt 1 ]\n    then\n      if [ \"$previous_character\" != \"$character\" ] \n      then\n        occurred=$(($occurred+1))\n        previous_character=\"$character\"\n      fi\n    fi\n    index=$(($index+1))\n  done\n  echo \"$occurred\"\nelse \n  echo \"0\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336700,"user_id":null,"body":"#!\/bin\/bash\n\necho $@ | grep -o . | awk '{print toupper($0)}' | sort | uniq -idc | wc -l\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336701,"user_id":null,"body":"#!\/bin\/bash\necho -n \"$1\" | tr [:upper:] [:lower:] | sed -e 's\/\\(.\\)\/\\1\n\/g' | sort | uniq -c -d | wc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54d496788776e49e6b00052f":[{"id":336702,"user_id":null,"body":"#!\/bin\/bash\nsum_of_divided() {\n  declare -A sum\n  \n  for nb in $1; do\n    factor=$(cut -d \":\" -f2 <<< $(factor $(tr -d \"-\" <<< $nb)))\n    factors=\"$factors $factor\"\n    for j in $(tr \" \" \"\n\" <<< $factor | sort -u); do\n      sum[$j]=$(expr ${sum[$j]} + $nb)\n    done\n  done\n  \n  for i in $(tr \" \" \"\n\" <<< $factors | sort -nu); do\n    echo -n \"($i ${sum[$i]}) \"\n  done\n}\nsum_of_divided \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336703,"user_id":null,"body":"#!\/bin\/bash\nsum_of_divided() {\n  declare -A primes\n\n  for n in $@; do\n    factors=($(factor ${n#-} | cut -d: -f2))  # create array\n    factors=($(printf '%s\n' \"${factors[@]}\"|sort -u -n))  # and sort it\n    \n    for p in \"${factors[@]}\"; do\n      ((primes[$p]+=n))\n    done\n  done\n\n  keys=($(printf '%s\n' \"${!primes[@]}\"|sort -n))  # sort damn keys\n  for key in ${keys[@]}; do\n    printf \"(%s %s) \" \"$key\" \"${primes[$key]}\"\n  done\n}\n\nsum_of_divided \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336704,"user_id":492,"body":"#!\/bin\/bash\nabs () { echo -E \"${1#-}\" ;}\n\nsum_of_divided() {\n  s=$1\n  for uu in $s\n  do\n    uu=$(abs $uu)\n    res=\"${res}$uu \"\n  done\n  res=$(echo $res | tr ' ' '\n' | sort -nu)  \n  for r in $res\n  do\n    fcts=$(echo $(factor $r) | cut -f1 -d \" \" --complement)\n    lfct=\"${lfct}$fcts \"\n  done\n  lfct=$(echo $lfct | tr ' ' '\n' | sort -nu)  \n  for f in $lfct\n  do\n    sum=0\n    for uu in $s\n    do\n      rem=$(($uu % $f))\n      if [ $rem -eq 0 ]\n      then\n        sum=$(($sum+$uu))\n      fi\n    done\n    result=\"${result} ($f $sum) \"\n  done\n  echo $result\n}\nsum_of_divided \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336705,"user_id":null,"body":"#!\/bin\/bash\nsum_of_divided() {\n  IFS=' ' read -r -a numbers <<< \"$1\"\n  for n in ${numbers[@]}; do\n    #check divisors up to square root\n    eoi=$(echo \"scale=0; sqrt(${n#-})\" | bc)\n    for d in $(seq 1 ${eoi}); do\n      if (( n%d == 0 )); then\n        # keep factor if 2 or even\n        (( d != 1 && (d%2 != 0 || d == 2) )) && array[$d]=$((array[$d]+n))\n        # quotient is also a factor (keep only if 2 or even)\n        # be careful, quotient could be negative and we want positive factors\n        q=$((n\/d))\n        (( q%2 != 0 || q == 2 )) && array[${q#-}]=$((array[${q#-}]+n))\n      fi\n    done\n  done\n  \n  #print only prime factors\n  for p in ${!array[@]}; do\n    j=1; k=1\n    is_not_prime=0\n    #check factors of p from the factors of current number n\n    while [[ ${is_not_prime} -eq 0 ]] && [[ ${k} -lt ${p} ]]; do\n      k=$(echo ${!array[@]} | cut -d' ' -f$j)\n      (( p%k == 0 )) && (( p != k )) && is_not_prime=1\n      ((j++))\n    done\n    [[ ${is_not_prime} -eq 0 ]] && echo \"(${p} ${array[$p]})\"\n  done | tr '\n' ' '\n}\nsum_of_divided \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336706,"user_id":null,"body":"#!\/bin\/bash\n\nns=\"$1\"\n\n# Codewars full test suite times out when the prime table is computed, use\n# precomputed primes list (https:\/\/primes.utm.edu\/lists\/small\/10000.txt).\nps=(\n      2      3      5      7     11     13     17     19     23     29 \n     31     37     41     43     47     53     59     61     67     71 \n     73     79     83     89     97    101    103    107    109    113 \n    127    131    137    139    149    151    157    163    167    173 \n    179    181    191    193    197    199    211    223    227    229 \n    233    239    241    251    257    263    269    271    277    281 \n    283    293    307    311    313    317    331    337    347    349 \n    353    359    367    373    379    383    389    397    401    409 \n    419    421    431    433    439    443    449    457    461    463 \n    467    479    487    491    499    503    509    521    523    541 \n    547    557    563    569    571    577    587    593    599    601 \n    607    613    617    619    631    641    643    647    653    659 \n    661    673    677    683    691    701    709    719    727    733 \n    739    743    751    757    761    769    773    787    797    809 \n    811    821    823    827    829    839    853    857    859    863 \n    877    881    883    887    907    911    919    929    937    941 \n    947    953    967    971    977    983    991    997   1009   1013 \n   1019   1021   1031   1033   1039   1049   1051   1061   1063   1069 \n   1087   1091   1093   1097   1103   1109   1117   1123   1129   1151 \n   1153   1163   1171   1181   1187   1193   1201   1213   1217   1223 \n   1229   1231   1237   1249   1259   1277   1279   1283   1289   1291 \n   1297   1301   1303   1307   1319   1321   1327   1361   1367   1373 \n   1381   1399   1409   1423   1427   1429   1433   1439   1447   1451 \n   1453   1459   1471   1481   1483   1487   1489   1493   1499   1511 \n   1523   1531   1543   1549   1553   1559   1567   1571   1579   1583 \n   1597   1601   1607   1609   1613   1619   1621   1627   1637   1657 \n   1663   1667   1669   1693   1697   1699   1709   1721   1723   1733 \n   1741   1747   1753   1759   1777   1783   1787   1789   1801   1811 \n   1823   1831   1847   1861   1867   1871   1873   1877   1879   1889 \n   1901   1907   1913   1931   1933   1949   1951   1973   1979   1987 \n   1993   1997   1999   2003   2011   2017   2027   2029   2039   2053 \n   2063   2069   2081   2083   2087   2089   2099   2111   2113   2129 \n   2131   2137   2141   2143   2153   2161   2179   2203   2207   2213 \n   2221   2237   2239   2243   2251   2267   2269   2273   2281   2287 \n   2293   2297   2309   2311   2333   2339   2341   2347   2351   2357 \n   2371   2377   2381   2383   2389   2393   2399   2411   2417   2423 \n   2437   2441   2447   2459   2467   2473   2477   2503   2521   2531 \n   2539   2543   2549   2551   2557   2579   2591   2593   2609   2617 \n   2621   2633   2647   2657   2659   2663   2671   2677   2683   2687 \n   2689   2693   2699   2707   2711   2713   2719   2729   2731   2741 \n   2749   2753   2767   2777   2789   2791   2797   2801   2803   2819 \n   2833   2837   2843   2851   2857   2861   2879   2887   2897   2903 \n   2909   2917   2927   2939   2953   2957   2963   2969   2971   2999 \n   3001   3011   3019   3023   3037   3041   3049   3061   3067   3079 \n   3083   3089   3109   3119   3121   3137   3163   3167   3169   3181 \n   3187   3191   3203   3209   3217   3221   3229   3251   3253   3257 \n   3259   3271   3299   3301   3307   3313   3319   3323   3329   3331 \n   3343   3347   3359   3361   3371   3373   3389   3391   3407   3413 \n   3433   3449   3457   3461   3463   3467   3469   3491   3499   3511 \n   3517   3527   3529   3533   3539   3541   3547   3557   3559   3571 \n   3581   3583   3593   3607   3613   3617   3623   3631   3637   3643 \n   3659   3671   3673   3677   3691   3697   3701   3709   3719   3727 \n   3733   3739   3761   3767   3769   3779   3793   3797   3803   3821 \n   3823   3833   3847   3851   3853   3863   3877   3881   3889   3907 \n   3911   3917   3919   3923   3929   3931   3943   3947   3967   3989 \n   4001   4003   4007   4013   4019   4021   4027   4049   4051   4057 \n   4073   4079   4091   4093   4099   4111   4127   4129   4133   4139 \n   4153   4157   4159   4177   4201   4211   4217   4219   4229   4231 \n   4241   4243   4253   4259   4261   4271   4273   4283   4289   4297 \n   4327   4337   4339   4349   4357   4363   4373   4391   4397   4409 \n   4421   4423   4441   4447   4451   4457   4463   4481   4483   4493 \n   4507   4513   4517   4519   4523   4547   4549   4561   4567   4583 \n   4591   4597   4603   4621   4637   4639   4643   4649   4651   4657 \n   4663   4673   4679   4691   4703   4721   4723   4729   4733   4751 \n   4759   4783   4787   4789   4793   4799   4801   4813   4817   4831 \n   4861   4871   4877   4889   4903   4909   4919   4931   4933   4937 \n   4943   4951   4957   4967   4969   4973   4987   4993   4999   5003 \n   5009   5011   5021   5023   5039   5051   5059   5077   5081   5087 \n   5099   5101   5107   5113   5119   5147   5153   5167   5171   5179 \n   5189   5197   5209   5227   5231   5233   5237   5261   5273   5279 \n   5281   5297   5303   5309   5323   5333   5347   5351   5381   5387 \n   5393   5399   5407   5413   5417   5419   5431   5437   5441   5443 \n   5449   5471   5477   5479   5483   5501   5503   5507   5519   5521 \n   5527   5531   5557   5563   5569   5573   5581   5591   5623   5639 \n   5641   5647   5651   5653   5657   5659   5669   5683   5689   5693 \n   5701   5711   5717   5737   5741   5743   5749   5779   5783   5791 \n   5801   5807   5813   5821   5827   5839   5843   5849   5851   5857 \n   5861   5867   5869   5879   5881   5897   5903   5923   5927   5939 \n   5953   5981   5987   6007   6011   6029   6037   6043   6047   6053 \n   6067   6073   6079   6089   6091   6101   6113   6121   6131   6133 \n   6143   6151   6163   6173   6197   6199   6203   6211   6217   6221 \n   6229   6247   6257   6263   6269   6271   6277   6287   6299   6301 \n   6311   6317   6323   6329   6337   6343   6353   6359   6361   6367 \n   6373   6379   6389   6397   6421   6427   6449   6451   6469   6473 \n   6481   6491   6521   6529   6547   6551   6553   6563   6569   6571 \n   6577   6581   6599   6607   6619   6637   6653   6659   6661   6673 \n   6679   6689   6691   6701   6703   6709   6719   6733   6737   6761 \n   6763   6779   6781   6791   6793   6803   6823   6827   6829   6833 \n   6841   6857   6863   6869   6871   6883   6899   6907   6911   6917 \n   6947   6949   6959   6961   6967   6971   6977   6983   6991   6997 \n   7001   7013   7019   7027   7039   7043   7057   7069   7079   7103 \n   7109   7121   7127   7129   7151   7159   7177   7187   7193   7207 \n   7211   7213   7219   7229   7237   7243   7247   7253   7283   7297 \n   7307   7309   7321   7331   7333   7349   7351   7369   7393   7411 \n   7417   7433   7451   7457   7459   7477   7481   7487   7489   7499 \n   7507   7517   7523   7529   7537   7541   7547   7549   7559   7561 \n   7573   7577   7583   7589   7591   7603   7607   7621   7639   7643 \n   7649   7669   7673   7681   7687   7691   7699   7703   7717   7723 \n   7727   7741   7753   7757   7759   7789   7793   7817   7823   7829 \n   7841   7853   7867   7873   7877   7879   7883   7901   7907   7919 \n   7927   7933   7937   7949   7951   7963   7993   8009   8011   8017 \n   8039   8053   8059   8069   8081   8087   8089   8093   8101   8111 \n   8117   8123   8147   8161   8167   8171   8179   8191   8209   8219 \n   8221   8231   8233   8237   8243   8263   8269   8273   8287   8291 \n   8293   8297   8311   8317   8329   8353   8363   8369   8377   8387 \n   8389   8419   8423   8429   8431   8443   8447   8461   8467   8501 \n   8513   8521   8527   8537   8539   8543   8563   8573   8581   8597 \n   8599   8609   8623   8627   8629   8641   8647   8663   8669   8677 \n   8681   8689   8693   8699   8707   8713   8719   8731   8737   8741 \n   8747   8753   8761   8779   8783   8803   8807   8819   8821   8831 \n   8837   8839   8849   8861   8863   8867   8887   8893   8923   8929 \n   8933   8941   8951   8963   8969   8971   8999   9001   9007   9011 \n   9013   9029   9041   9043   9049   9059   9067   9091   9103   9109 \n   9127   9133   9137   9151   9157   9161   9173   9181   9187   9199 \n   9203   9209   9221   9227   9239   9241   9257   9277   9281   9283 \n   9293   9311   9319   9323   9337   9341   9343   9349   9371   9377 \n   9391   9397   9403   9413   9419   9421   9431   9433   9437   9439 \n   9461   9463   9467   9473   9479   9491   9497   9511   9521   9533 \n   9539   9547   9551   9587   9601   9613   9619   9623   9629   9631 \n   9643   9649   9661   9677   9679   9689   9697   9719   9721   9733 \n   9739   9743   9749   9767   9769   9781   9787   9791   9803   9811 \n   9817   9829   9833   9839   9851   9857   9859   9871   9883   9887 \n   9901   9907   9923   9929   9931   9941   9949   9967   9973\n)\n\n# Prime list computation\n#max=0\n#for n in $ns; do\n#  if [ ${n#-} -gt $max ]; then\n#    max=${n#-}\n#  fi\n#done\n#\n#k=$(( ($max - 1) \/ 2 ))\n#for i in $(seq 1 $(bc <<< \"sqrt($k)\")); do\n#  let j=$i\n#  while :; do\n#    let y=$i+$j+2*$i*$j\n#    if [[ $y -gt $k ]]; then\n#      break\n#    fi\n#    nps[$y]=1\n#    let j++\n#  done\n#done\n#\n#ps=(2)\n#for (( pn=1; pn < ${#nps[*]}; pn++ )); do\n#  if [ -z \"${nps[$pn]}\" ]; then\n#    ps+=($(( 2 * $pn + 1 )))\n#  fi\n#done\n\nfor p in ${ps[*]}; do\n  s=\n  for n in $ns; do\n    if [[ $n%$p -eq 0 ]]; then\n      let s+=$n\n    fi\n  done\n  if [ \"$s\" ]; then\n    echo \"($p $s)\"\n  fi\ndone | paste -sd ' '\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336707,"user_id":null,"body":"#!\/bin\/bash\n\nawk -F'[: ]+' -vq=\"$1\" '\nBEGIN {\n  split(q, xs)\n  for (i in xs) {\n    x=xs[i]\n    cmd=\"factor \"(x<0?-x:x)\n    cmd | getline\n    delete fs\n    for (j=2;j<=NF;++j) fs[$j]=1\n    for (f in fs) s[f]+=x\n    close(cmd)\n  }\n  for (f in s) print f,s[f]\n}' | sort -n | sed 's\/^\/(\/;s\/$\/)\/' | paste -sd' '","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336708,"user_id":null,"body":"#!\/bin\/bash\ncheck(){\n  sqrtn=$(echo \"scale=0;sqrt($1)\"|bc)\n#  echo $sqrtn\n  check=1\n  for i in $(eval echo {2..$sqrtn})\n  do\n    if [[ $(($1%$i)) -eq 0 ]]; then\n      check=0\n      break\n    fi\n  done\n  echo $check\n  #echo $(($check>0?\"true\":\"false\"))\n}\n#rs=$(check 101)\nsum_of_divided() {\n  # your code\n  arr=($1)\n  len=\"${#arr[*]}\"\n  #echo ${arr[@]}\n  #echo $len\n  for j in  2 3 5 7 11 13 17 19 23 29 31  37 41 43 47 53 59 61 67 71 73 79 97 107 137 139 211 223 227 271 311 379 449 461 1373  4231 5653 7451 \n  do\n    declare -i sum=0\n    check=0\n    for k in $(eval echo {0..$((len-1))})\n    do\n        #echo \"$j ${arr[k]} \"\n        if [[ $((${arr[k]} % $j)) -eq 0 ]] ; then\n          sum+=$((${arr[k]}))\n        fi\n        if [[ $((${arr[k]})) -lt 0 &&  $((${arr[k]} % $j)) -eq 0 ]] ; then\n          #echo ${arr[k]}\n          #echo ${arr[@]}\n          check=1\n        fi\n        \n    done\n    if [[ $sum -gt 0  ||  $check -eq 1 ]]; then\n      rs+=\"($j $sum) \"\n    fi\n    \n  done\n  #echo ${arr[@]}\n  echo $rs\n  \n}\nsum_of_divided \"$1\"\n  arr=($1)\n  #echo ${arr[@]}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336709,"user_id":null,"body":"#!\/bin\/bash\n\nsum_of_divided() {\n  declare string=''\n  for word in ${1\/\/-\/}\n  do\n      string+=$(factor ${word} | cut -d: -f2)\n  done\n  mapfile -t array < <(printf '%b' \"${string\/\/ \/\\\n}\" | sort -nu)\n  declare -i summ\n  for arr in ${array[@]}\n  do\n      summ=0\n      for word in $1\n      do\n           ! ((word % arr)) && summ+=word\n      done\n      printf '(%d %d) ' \"${arr}\" \"${summ}\"\n  done\n}\n\nsum_of_divided \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336710,"user_id":null,"body":"#!\/bin\/bash\n\nfactor_p () {\n\n  in=${1#-}\n\n\tfact=$(factor $in | cut -d \":\" -f 2 | tr \" \" \"\n\"| uniq)\n\n\tfor f in $fact\n\tdo\n\t\t\trmap[$f]+=$1\n\tdone\t\n}\nsum_of_divided() {\nresult=\"\"\n\ndeclare -iA rmap #map for results \n\ninput=$(echo $1|tr \" \" \"\n\"|sort -rg)\n\n\nfor num in $input\ndo\n\t\n\tfactor_p $num\ndone\n\nkeys=\"${!rmap[@]}\"\n\nkeySort=$(echo $keys|tr \" \" \"\n\"|sort -g) \n\nfor val in $keySort\ndo\n\tsum=${rmap[$val]}\n\tresult+=\"($val $sum) \"\ndone\necho $result\n\n\n}\nsum_of_divided \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336711,"user_id":null,"body":"#!\/bin\/bash\n\ndeclare -A factors\n\ngenerate_prime () {\n\n    I=($1)\n    max=$(echo \"${I[@]}\" | sed 's\/-\/\/g' | tr ' ' '\n' | sort -n | tr '\n' ' ' | awk '{print $NF}')\n    for i in $(factor {1..100000} | awk 'NF==2{print $2}')\n    do\n        if [[ $i -gt $max ]]\n        then\n            break\n        fi\n        for v in \"${I[@]}\"\n        do\n            if (( v % i == 0 ))\n            then\n                factors[\"$i\"]=$(( factors[\"$i\"]+v ))\n            fi\n        done\n    done\n\n}\n\n\nsum_of_divided() {\n\n    generate_prime \"$1\"\n\n    for i in $( printf \"%s\n\" \"${!factors[@]}\" | sort -n)\n    do\n        printf \"(%s) \" \"$i ${factors[$i]}\"\n    done\n\n}\nsum_of_divided \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54d512e62a5e54c96200019e":[{"id":336712,"user_id":null,"body":"#!\/bin\/bash\nprimeFactors() {\n    mult=\"\"\n    prms=$(factor $1 |cut -d ' ' -f 2- |tr \" \" \"\n\"| uniq -c)\n    co=$(echo $prms|wc -w)\n    for (( i=0; i<=$co\/2-1; i++ ))\n    do\n      n=$(echo $prms|awk -v s=$(( i*2+1 )) '{print $s}')\n      p=$(echo $prms|awk -v s=$(( i*2+2 )) '{print $s}')\n      mult+=\"($p**$n)\"\n    done\n    echo ${mult\/\/\"**1)\"\/\")\"}\n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336713,"user_id":492,"body":"#!\/bin\/bash\nprimeFactors() {\n    n=$1; fcts=$(echo $(factor $n) | cut -f1 -d \" \" --complement); prev=${fcts%% *}; cnt=0\n    for f in $fcts\n    do\n        if [ $prev -eq $f ]\n        then\n            cnt=$(($cnt+1))\n        else\n            if [ $cnt -eq 1 ]\n            then\n                res=\"${res}($prev)\"\n            else\n                res=\"${res}($prev**$cnt)\"\n            fi\n            prev=$f\n            cnt=1\n        fi\n    done\n    if [ $cnt -eq 1 ]\n    then\n        res=\"${res}($prev)\"\n    else\n        res=\"${res}($prev**$cnt)\"\n    fi\n    echo $res\n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336714,"user_id":492,"body":"#!\/bin\/bash\nprimeFactors() {\n    n=$1; fcts=$(echo $(factor $n) | cut -f1 -d \" \" --complement); prev=${fcts%% *}; cnt=0\n    for f in $fcts\n    do\n        if [ $prev -eq $f ]\n        then\n            cnt=$(($cnt+1))\n        else\n            if [ $cnt -eq 1 ]\n            then\n                res=\"${res}($prev)\"\n            else\n                res=\"${res}($prev**$cnt)\"\n            fi\n            prev=$f\n            cnt=1\n        fi\n    done\n    if [ $cnt -eq 1 ]\n    then\n        res=\"${res}($prev)\"\n    else\n        res=\"${res}($prev**$cnt)\"\n    fi\n    echo $res\n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336715,"user_id":null,"body":"#!\/bin\/bash\nprimeFactors() {\n  factor $1 | cut -d: -f2 | grep -o \"\\S*\" | sort | uniq -c | sort -k2g |\n  awk '{ if ($1 == 1) $0 = $2; else $0 = $2\"**\"$1; printf \"(\"$0\")\" }'\n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336716,"user_id":null,"body":"#!\/bin\/bash\nfactor $1  | sed -e 's\/^[^:]*: \/\/g' | tr ' ' '\n' | uniq -c | awk '{ if ($1 == 1)  printf \"(%d)\",$2; else { printf \"(%d**%d)\",$2,$1; } } END{printf \"\n\";}' \n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336717,"user_id":null,"body":"#!\/bin\/bash\nprimeFactors() {\n    factor $1 | cut -d':' -f2 | grep -o \"[0-9]*\" | uniq -c | awk -F' ' '{if($1==1){print \"(\"$2\")\"}else{print \"(\"$2\"**\"$1\")\"}}' | tr -d '\n'\n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336718,"user_id":null,"body":"#!\/bin\/bash\nprimeFactors() {\n    k=2\n    n=$1\n    output=''\n    while [ $n -gt 1 ]\n    do\n        count=0\n        while [ $((n%k)) -eq 0 ] \n        do\n            n=$((n\/k))\n            count=$((count+1))\n        done\n        if [ $count -gt 0 ]\n        then\n            output=\"${output}($k\"\n            if [ $count -gt 1 ]\n            then\n                output=\"${output}**${count}\"\n            fi\n            output=\"${output})\"\n        fi\n        if [ $k -lt $((n\/$k)) ]\n        then\n            k=$((k+1))      \n        else\n            k=$n\n        fi\n    done\n    echo $output\n}\n\n\nprimeFactors  $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336719,"user_id":null,"body":"#!\/bin\/bash\nprimeFactors() {\n    # your code\n    n=$1\n    list=()\n    prime=()\n    occur=()\n    k=0\n    #echo \"$n % 2\" | bc -l \n    while [ $((n%2)) -eq 0 ]; do\n        n=$( echo \"$n\/2\" | bc )\n        #list+=(2)\n        ((k+=1))\n    done\n    if [ $k -gt 0 ]; then   \n        prime+=(2)\n        occur+=($k)\n    fi\n\n    #Reset k\n    sq=$( echo \"scale=0; sqrt($n)\" | bc )\n    #echo \"$sq\"\n    for ((i=3;i<=$sq;i=i+2)) do\n        k=0\n        while [ $((n%i)) -eq 0 ]; do\n            #list+=($i)\n            n=$( echo \"$n\/$i\" | bc )\n            ((k+=1))\n        done\n        if [ $k -gt 0 ]; then   \n            prime+=($i)\n            occur+=($k)\n        fi\n    done\n    if [ $n -gt 2 ]; then\n        prime+=($n)\n        occur+=(1)\n    fi\n    #echo \"${list[@]}\"\n    #echo \"${prime[@]}\" \n    #echo \"${occur[@]}\"\n\n    for i in ${!prime[@]}; do\n        #echo $i\n        if [ ${occur[$i]} -ne 1 ]; then\n            printf \"(${prime[$i]}**${occur[$i]})\"\n        else\n            printf \"(${prime[$i]})\"\n        fi\n    done\n    \n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336720,"user_id":168,"body":"n=$1\nres=\nfor (( p = 2 ; p * p <= n ; p++ )); do\n  for (( e = 0; n % p == 0; e++ )); do\n    n=$((n \/ p))\n  done\n  if (( $e > 1 )); then\n    res+=\"($p**$e)\"\n  elif (( $e == 1 )); then\n    res+=\"($p)\"\n  fi\ndone\nif (( $n > 1 )); then\n  res+=\"($n)\"\nfi\necho $res","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336721,"user_id":null,"body":"#!\/bin\/bash\nprimeFactors() {\n    factor \"$1\" | sed -e 's\/.\\+: \/\/' | tr ' ' '\n' | uniq -c | while read n1 n2; do\n      if ((n1 == 1)); then\n        printf \"(${n2})\"\n      else\n        printf \"(${n2}**${n1})\"\n      fi\n    done\n}\nprimeFactors $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54d7660d2daf68c619000d95":[{"id":336722,"user_id":null,"body":"# input is a string,  e.g \"2,4,2,6,2,8\"\n# output is s string, e.g \"6 12 4 12 3 12\"\n#!\/bin\/bash\n\ndeclare -a numerators\ndeclare -a denominators\ndeclare -a primes\n\nwhile read -d \",\" number; do\n        if [[ -z $first ]]; then\n                numerators+=( $number )\n                first=1\n        else\n                denominators+=( $number )\n                first=\"\"\n        fi\ndone <<<\"$1,\"\n\n# compute ppcm of denominators\nppcm=1\nfor (( i=0; i<${#numerators[*]}; i++)); do\n        denom=${denominators[$i]}\n        (( ppcm % denom == 0 )) && continue\n        mult=1\n        primes=( $(factor $denom) )\n        unset primes[0]\n        pppcm=$ppcm     # copy of ppcm (needed for arity)\n        for prime in ${primes[*]}; do\n\n                if (( numerators[$i] % prime == 0 )); then\n                        # reduce fractions\n                        (( numerators[$i]   \/= prime ))\n                        (( denominators[$i] \/= prime ))\n                elif (( pppcm % prime == 0 )); then\n                        (( pppcm \/= prime ))\n                else\n                        (( mult *= prime ))\n                fi\n        done\n        (( ppcm *= mult ))\ndone\n\n# output new fractions\nfor (( i=0; i<${#numerators[*]}; i++)); do\n        echo -n \"$sep\"\n        echo -n $(( numerators[$i] * (ppcm \/ denominators[$i]) ))\n        echo -n \" $ppcm\"\n        sep=\" \"\ndone\n\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336723,"user_id":null,"body":"#!\/bin\/bash\n\nfunction gcd() {\n  m=$1; n=$2\n  while ((n)); do ((t=m,m=n,n=t%n)); done\n  echo \"$m\";\n}\nIFS=, read -raa <<<\"$1\"\nfor ((i=0; i<${#a[@]}; i+=2)); do\n  g=`gcd ${a[i]} ${a[i+1]}`; ((a[i]\/=g, a[i+1]\/=g))\ndone\nl=1\nfor ((i=1; i<${#a[@]}; i+=2)); do\n  g=`gcd $l ${a[i]}`; ((l*=a[i]\/g))\ndone\nr=()\nfor ((i=0; i<${#a[@]}; i+=2)); do\n  r+=($((l\/a[i+1]*a[i])) $l)\ndone\necho \"${r[@]}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336724,"user_id":null,"body":"# input is a string,  e.g \"2,4,2,6,2,8\"\n# output is s string, e.g \"6 12 4 12 3 12\"\n#!\/bin\/bash\ngcd (){\n    if [ $(($1%$2)) -eq '0' ]; then\n        echo $2\n    else\n        gcd $2 $(($1%$2))\n    fi\n}\n\nlcm (){\n    echo $(( $1*($2\/$(gcd $1 $2)) ))\n}\n\nconvert () {\n    local arr=($(echo \"$1\" | tr ',' '\n'))\n    # simplify fractions\n    for (( i=0; $i<${#arr[@]}; i=$i+2)); do\n        local g=$( gcd \"${arr[$i]}\" \"${arr[$(($i+1))]}\" )\n        arr[$i]=$(( ${arr[$i]}\/$g ))\n        arr[$(($i+1))]=$(( ${arr[$(($i+1))]}\/$g ))\n    done\n    # convert\n    local new_de=1\n    for (( i=1; $i<${#arr[@]}; i=$i+2)); do\n        new_de=$(lcm ${arr[$i]} $new_de)\n    done\n    for (( i=0; $i<${#arr[@]}; i=$i+2)); do\n        local g=$( gcd ${arr[$i]} ${arr[$(($i+1))]} )\n        arr[$i]=$(( ${arr[$i]}*($new_de\/${arr[$(($i+1))]}) ))\n        arr[$(($i+1))]=$new_de\n    done\n    echo \"${arr[*]}\"\n}\nconvert \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336725,"user_id":492,"body":"#!\/bin\/bash\n\nfunction gcd() {\n  m=$1; n=$2\n  while ((n)); do ((t=m,m=n,n=t%n)); done\n  echo \"$m\";\n}\nIFS=, read -raa <<<\"$1\"\nfor ((i=0; i<${#a[@]}; i+=2)); do\n  g=`gcd ${a[i]} ${a[i+1]}`; ((a[i]\/=g, a[i+1]\/=g))\ndone\nl=1\nfor ((i=1; i<${#a[@]}; i+=2)); do\n  g=`gcd $l ${a[i]}`; ((l*=a[i]\/g))\ndone\nr=()\nfor ((i=0; i<${#a[@]}; i+=2)); do\n  r+=($((l\/a[i+1]*a[i])) $l)\ndone\necho \"${r[@]}\"\n\n\n# aux='\n# from fractions import gcd\n# from sys import argv\n# \n# def get_lcm(lst):\n#   return reduce(lambda x, y : x*y\/gcd(x,y), lst)\n# def aux(strng):\n#   lst = [int(s) for s in strng.split(\",\")]\n#   num = lst[::2]\n#   den = lst[1::2]\n#   h = zip(num, den)\n#   num = [x \/ gcd(x,y) for x, y in h]\n#   den = [y \/ gcd(x, y) for x, y in h]\n#   lcm = get_lcm(den)\n#   r = [\" \".join([str(x*lcm\/y), str(lcm)]) for x, y in h]\n#   return \" \".join(r)\n#   \n# a=aux(argv[1:][0])\n# print a\n# '\n# convert () {\n#     echo `python -c \"$aux\" \"$1\"`\n# }\n# convert \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336726,"user_id":null,"body":"#!\/bin\/bash\n\nfunction input {\nlocal IFS=','\narr=( $@ )\n}\n\nfunction numden {\nfor (( i=0; i<${#arr[@]};i++ )); do\n\tarrnumer+=( \"${arr[$i]}\" )\t\n\tarrdenom+=( \"${arr[$i+1]}\" ) \n\ti=$(( i + 1 ))\ndone\n}\n\nfunction conv {\na=\"${arrdenom[@]:0:$1} ${arrdenom[@]:$1+1}\"\na=${a# }\na=${a% }\na=${a\/\/ \/*}\na=$(( a ))\n}\n\nfunction multi {\nfor ((i=0; i<${#arrdenom[@]}; i++)); do\n\tconv $i\n\tb+=( $(( ${arrnumer[$i]} * $a )) $((${arrdenom[$i]} * $a )) )\ndone\nfor ((i=0;i<${#b[@]};i++)); do\n\td+=(${b[$i]})\ndone\n}\n\nfunction gcd { # I found the gcd function on the internetz! https:\/\/stackoverflow.com\/questions\/59291293\/finding-the-greatest-common-divisor-of-two-numbers-in-bash\nif (( $1 % $2 == 0)); then\n\techo $2\nelse\n\tgcd $2 $(( $1 % $2 ))\nfi\n}\n\nfunction simpl {\nif [ ${#b[@]} -gt 1 ]; then\n\tfor ((i=0;i<${#b[@]};i++)); do\n\t\tc+=($(gcd ${b[i]} ${b[$i+1]}))\n\t\ti=$(( i + 1 ))\n\tdone\n\tb=()\n\tfor ((i=0;i<${#c[@]};i++)); do\n\t\tb+=(${c[i]})\n\tdone\n\tc=()\n\tsimpl2\nfi\n}\n\nfunction simpl2 {\nif [ ${#b[@]} -gt 1 ]; then\n\tfor ((i=0;i<${#b[@]};i++)); do\n\t\tc+=($(gcd ${b[i]} ${b[$i+1]}))\n\t\tdone\n\tb=()\n\tfor ((i=0;i<${#c[@]};i++)); do\n\t\tb+=(${c[i]})\n\tdone\n\tc=()\n\tsimpl2\nfi\n}\n\nfunction simpl3 {\nfor ((i=0;i<${#d[@]};i++)); do\n  out+=($(( ${d[$i]} \/ b )))\ndone\n}\n\ninput $1\nnumden\nmulti\nsimpl\nsimpl3\necho ${out[@]}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336727,"user_id":null,"body":"# input is a string,  e.g \"2,4,2,6,2,8\"\n# output is s string, e.g \"6 12 4 12 3 12\"\n#!\/bin\/bash\n\nfunction gcd() {\n  m=$1; n=$2\n  while ((n)); do ((t=m,m=n,n=t%n)); done\n  echo \"$m\";\n}\nIFS=, read -raa <<<\"$1\"\nfor ((i=0; i<${#a[@]}; i+=2)); do\n  g=`gcd ${a[i]} ${a[i+1]}`; ((a[i]\/=g, a[i+1]\/=g))\ndone\nl=1\nfor ((i=1; i<${#a[@]}; i+=2)); do\n  g=`gcd $l ${a[i]}`; ((l*=a[i]\/g))\ndone\nr=()\nfor ((i=0; i<${#a[@]}; i+=2)); do\n  r+=($((l\/a[i+1]*a[i])) $l)\ndone\necho \"${r[@]}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336728,"user_id":null,"body":"# input is a string,  e.g \"2,4,2,6,2,8\"\n# output is s string, e.g \"6 12 4 12 3 12\"\n#!\/bin\/bash\n\nconvert () {\n  args=($(sed -E   -e \"s\/([[:digit:]]+),([[:digit:]]+),?\/\\1 \\2 \/g\" <<< $1))\n  numerators=($(sed -E -e \"s\/([[:digit:]]+),([[:digit:]]+),?\/\\1\n\/g\" <<< $1))\n  denoms=($(sed -E -e \"s\/([[:digit:]]+),([[:digit:]]+),?\/\\2\n\/g\" <<< $1))\n\n  bc_gcd_tmp=$(mktemp)\n  cat > $bc_gcd_tmp << _EOF_\nscale=0\nnum=read()\n\nb=read()\nfor (i=1; i<num; ++i) {\n        a = read()\n        while (a != 0)\n        {\n                tmp = b % a\n                b = a\n                a = tmp\n        }\n}\nsqrt(b*b)\n_EOF_\n\n  bc_lcm_tmp=$(mktemp)\n  cat > $bc_lcm_tmp << _EOF_\nscale=0\nnum=read()\n\nlcm=read()\nfor (i=1; i<num; ++i) {\n        n = read()\n        a = n\n        b = lcm\n        while (a != 0)\n        {\n                tmp = b % a\n                b = a\n                a = tmp\n        }\n        lcm = (n\/b) * lcm\n}\nlcm\n_EOF_\n\n  IFS=$'\n'\n  lcm=$(bc -l $bc_lcm_tmp <<< \"${#denoms[*]}\n${denoms[*]}\")\n  \n  gcd=$({\n    echo $((${#numerators[*]} + 1))\n    echo $lcm\n    for ((i=0; i<${#numerators[*]}; ++i)); do\n      echo $((${numerators[i]} * $lcm\/${denoms[i]}))\n    done\n  } | bc -l $bc_gcd_tmp)\n  \n  rm -f $bc_lcm_tmp\n  rm -f $bc_gcd_tmp\n\n  for ((i=0; i<${#args[*]}; i+=2)); do\n    n=${args[i]}\n    d=${args[i+1]}\n    echo -n \"$(( (n * (lcm\/d)) \/ gcd)) $((lcm\/gcd)) \"\n  done\n  \n}\nconvert \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336729,"user_id":null,"body":"# input is a string,  e.g \"2,4,2,6,2,8\"\n# output is s string, e.g \"6 12 4 12 3 12\"\n#!\/bin\/bash\n\ngcd() {\n  local a=$1\n  local b=$2\n\n  while ((b > 0)); do\n    local tmp=$b\n    b=$((a % b))\n    a=$tmp\n  done\n\n  echo $a\n}\n\nlcm() {\n  echo $(($1 * $2 \/ $(gcd $1 $2)))\n}\n\nconvert () {\n  IFS=',' read -ra numbers <<< \"$1\"\n\n  n=${#numbers[@]}\n\n  for ((i = 0; i < n; i += 2)); do\n    j=$((i + 1))\n    c=$(gcd ${numbers[i]} ${numbers[j]})\n    numbers[i]=$((${numbers[i]} \/ c))\n    numbers[j]=$((${numbers[j]} \/ c))\n  done\n\n  d=1\n\n  for ((i = 1; i < n; i += 2)); do\n    d=$(lcm $d ${numbers[i]})\n  done\n\n  for ((i = 0; i < n; i += 2)); do\n    j=$((i + 1))\n    c=$((d \/ ${numbers[j]}))\n    numbers[i]=$((${numbers[i]} * c))\n    numbers[j]=$((${numbers[j]} * c))\n  done\n\n  echo \"${numbers[@]}\"\n}\n\nconvert \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336730,"user_id":null,"body":"# input is a string,  e.g \"2,4,2,6,2,8\"\n# output is s string, e.g \"6 12 4 12 3 12\"\n#!\/bin\/bash\ngcd() {\n    left=$1\n    right=$2\n    while(($((left%right))!=0))\n    do\n        tmp=$right\n        right=$((left%right))\n        left=$tmp\n    done\n    echo $right\n}\n\nlcm() {\n    echo $(($1*$2\/$(gcd $1 $2)))\n}\n\nconvert () {\n    arr=($(echo $1 | tr ',' '\n'))\n    n=${#arr[@]}\n    \n    accum=1\n    all_lcm=1\n    for((i=1;i<n;i+=2))\n    do\n        cur_gcd=$(gcd ${arr[i]} ${arr[i-1]})\n        t1=$((arr[i]\/cur_gcd));t2=$((arr[i-1]\/cur_gcd))\n        accum=$((arr[i]*arr[i-1]*accum))\n        all_lcm=$(lcm $t1 $all_lcm)\n        #echo $t1 $t2 $all_lcm\n    done\n    for((i=1;i<n;i+=2))\n    do\n        t=$(echo \"$all_lcm*${arr[i-1]}\/${arr[i]}\"|bc)\n        printf \"$t $all_lcm \"\n    done\n}\nconvert \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336731,"user_id":null,"body":"gcd () {\n  local m=$1\n  local n=$2\n  local r\n  while :; \n  do\n    r=$((m % n))\n    ((r != 0)) || break\n    m=$n\n    n=$r\n  done\n  echo \"$n\"\n}\n\nlcm () {\n  local m=$1\n  local n=$2\n  local gcd\n  gcd=$(gcd \"$m\" \"$n\")\n  # shellcheck disable=SC2017\n  echo $((m \/ gcd * n))\n}\n\nreduce () {\n  local n\n  local d\n  read -r n d <<<\"$1\"\n  local gcd\n  gcd=$(gcd \"$n\" \"$d\")\n  echo \"$((n \/ gcd)) $((d \/ gcd))\"\n}\n\nread_fractions () {\n  local varname=$1\n  shift\n  while [ \"$#\" -gt 1 ]; do\n    eval \"$varname\"'+=(\"$(reduce \"$1 $2\")\")'\n    shift 2\n  done\n}\n\nlcm_multi () {\n  local lcm=1\n  local x\n  for x in \"$@\"; do\n    lcm=$(lcm \"$lcm\" \"$x\")\n  done\n  echo \"$lcm\"\n}\n\ndenominators () {\n  local frac n d\n  for frac in \"$@\"; do\n    cut -d' ' -f2 <<<\"$frac\"\n  done\n}\n\nexpand () {\n  local D=$1\n  local n d\n  read -r n d <<<\"$2\"\n  # shellcheck disable=SC2017\n  echo \"$((D \/ d * n)) $D\"\n}\n\nIFS=, read -r -a parts <<<\"$1\"\n\nfractions=()\nread_fractions fractions \"${parts[@]}\"\n\nD=$(lcm_multi $(denominators \"${fractions[@]}\"))\nresult=()\nfor frac in \"${fractions[@]}\"; do\n  result+=(\"$(expand \"$D\" \"$frac\")\")\ndone\n\necho \"${result[*]}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54db15b003e88a6a480000b9":[{"id":336732,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef coprime(a, b):\n    return a == 1 if b == 0 else coprime(b, a % b)\ndef aux(n, smodsys):\n    n = int(n)\n    modsys = map(int, smodsys.split(\",\"))\n    p = reduce(lambda x, y: x * y, modsys)\n    if (p <= n):\n        return \"Not applicable\"\n    for i in range(0, len(modsys)): \n        for j in range(i + 1, len(modsys)):\n            if (coprime(modsys[i], modsys[j]) == False):\n                return \"Not applicable\"\n    res = \"\";\n    for i in range(0, len(modsys)):\n        res = res + \"-\" + str(n % modsys[i]) + \"-\"\n    return res\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\nfromNb2Str () {\n    echo `python -c \"$aux\" \"$1\" \"$2\"`\n}\nfromNb2Str \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336733,"user_id":null,"body":"#!\/bin\/bash\n\nn=\"$1\"\nms=\"$2\"\n\nIFS=,\n\np=$(echo \"$ms\" | sed 's\/,\/*\/g' | bc)\nif [ $n -gt $p ]; then\n  echo \"Not applicable\"\n  exit\nfi\n\ngcd() {\n  [ $2 -eq 0 ] && echo $1 || gcd $2 $(( $1 % $2 ))\n}\n\nfor m1 in $ms; do\n  for m2 in $(echo \"$ms\" | sed \"s\/^.*\\b$m1\\b,\\?\/\/\"); do\n    if [ $( gcd $m1 $m2 ) -gt 1 ]; then\n      echo \"Not applicable\"\n      exit\n    fi\n  done\ndone\n\nfor m in $ms; do\n  s=\"$s-$(( $n % $m ))-\"\ndone\n\necho \"$s\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336734,"user_id":null,"body":"#!\/bin\/bash\n\nfind_nbr_nod() {\n\n  local a=$1\n  local b=$2\n\n  while (( a != 0 && b != 0 )); do\n    tmp=$(( a % b ))\n    a=$b\n    b=$tmp\n  done\n\n  if (( b == 0 && a != 1)); then\n    echo \"1\"\n  else\n    echo \"0\"\n  fi\n}\n\ncheck_list_nod () {\n  local system=(\"$@\")\n\n  for i in ${!system[@]}; do\n    slince=(\"${system[@]:i}\")\n\n    for j in ${!slince[@]}; do\n      local nbr1=${system[i]}\n      local nbr2=${slince[j]}\n      \n      if (( nbr1 < nbr2 )); then\n        status=$(find_nbr_nod $nbr2 $nbr1)\n      elif (( nbr1 > nbr2 )); then\n        status=$(find_nbr_nod $nbr1 $nbr2)\n      else\n        status=\"\"\n      fi\n\n      if [[ $status = \"1\" ]]; then\n        echo \"Not applicable\"\n        exit 1\n      fi\n\n    done\n  done\n}\n\ncheck_multiply() {\n  local mult=1\n  local arr=(\"$@\")\n\n  multi_nbr=${arr[0]}\n  for nbr in ${arr[@]:1}; do\n    mult=$(( nbr * mult ))\n  done\n\n  if (( multi_nbr > mult ));then\n    echo \"Not applicable\"\n    exit 1\n  fi\n}\n\nfromNb2Str () {\n  local n=\"$1\"\n  local res=\"\"\n  IFS=', ' read -r -a system <<< $2\n\n  check_list_nod \"${system[@]}\"\n  check_multiply $n \"${system[@]}\"\n\n  for nbr in ${system[@]}; do\n    res=\"$res--$(( n % nbr ))\"\n  done\n  echo \"${res:1}-\"\n}\n\nfromNb2Str \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336735,"user_id":null,"body":"#! \/bin\/bash\n\ngcd()\n{\n    # Calculate greatest common denominator of two numbers.\n\n    a=$1\n    b=$2\n\n    while [ $b -ne 0 ]; do\n        [ $a -gt $b ] && t=$b && b=$a && a=$t\n        b=$((b % a))\n    done\n    echo $a\n}\n\nlcm()\n{\n    # Calculate least common multiple of numbers in sequence.\n\n    seq=($*)\n\n    if [ ${#seq[*]} -eq 2 ]; then\n        echo \"${seq[0]} * ${seq[1]} \/ $(gcd ${seq[*]})\" | bc\n        return\n    fi\n\n    echo $(lcm $(lcm ${seq[*]:0:2}) ${seq[*]:2})\n}\n\nfromNb2Str()\n{\n    # Convert number using given moduli.\n\n    number=$1\n    moduli=($2)\n\n    # Moduli product must be greater than number.\n    prod=1\n    for m in ${moduli[*]}; do prod=$((prod * m)); done\n    [ $prod -le $number ] && echo \"Not applicable\" && return\n\n    # Moduli must be pairwise coprime.\n    [ $prod -ne $(lcm ${moduli[*]}) ] && echo \"Not applicable\" && return\n\n    residues=()\n    for m in ${moduli[*]}; do residues+=($((number % m))); done\n    result=\"-${residues[0]}\"\n    for r in ${residues[*]:1}; do result+=\"--$r\"; done\n    echo \"$result-\"\n}\n\necho $(fromNb2Str $1 \"${2\/\/,\/ }\")\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336736,"user_id":null,"body":"#!\/bin\/bash\nfromNb2Str () {\n    Arr=($(echo $2 | tr -d \"[]\" | tr -s \",\" \" \"))\n    \n    # Checking if multiplication of elements results in a valid value.\n    MUL=1\n    for value in ${Arr[*]}; do MUL=$(( $MUL * $value )); done\n    if [[ \"$MUL\" -le \"$1\" ]]\n    then\n       echo -n \"Not applicable\"\n       return\n    fi\n    \n    # Checking if elements are pairwise co-prime.\n    SIZE=$(( ${#Arr[*]} - 1 ))\n    END=$(( $SIZE - 1 ))\n    for i in $(seq 0 $END)\n    do\n       a=$(( $i + 1 ))\n       for j in $(seq $a $SIZE)\n       do\n          p=${Arr[i]}\n          q=${Arr[j]}\n          while [[ \"$q\" -ne \"0\" ]]\n          do\n             aux=$p\n             p=$q\n             q=$(( $aux % $q ))\n          done\n          if [[ \"$p\" -ne \"1\" ]]; then echo -n \"Not applicable\"; return; fi\n       done\n    done\n    \n    for value in ${Arr[*]}\n    do\n       ans=$(( $1 % $value ))\n       echo -n -$ans-\n    done\n}\nfromNb2Str \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336737,"user_id":null,"body":"#!\/bin\/bash\n\nco_prime () {\n  local m=$1\n  local n=$2\n  if (( m < n)); then\n    m=$2\n    n=$1\n  fi\n  \n  while ((n > 0)); do\n    local t=$((m % n))\n    m=$n\n    n=$t\n  done\n  return $((m == 1))\n}\n\nfromNb2Str () {\n  IFS=, read -r -a array <<< \"$2\"\n  local len=${#array[@]}\n  if (( len == 0)); then\n    echo \"Not applicable\"\n    return 0\n  fi\n  \n  local multiple=1\n  for x in \"${array[@]}\"; do\n    ((multiple *= x))\n  done\n  \n  if (( multiple < $1)); then\n    echo \"Not applicable\"\n    return 0\n  fi\n  \n  for ((i = 0; i < len; i++)); do\n    for ((j = i + 1; j < len; j++)); do\n      if co_prime ${array[@]:i:1} ${array[@]:j:1}; then\n        echo \"Not applicable\"\n        return 0\n      fi\n    done\n  done\n  \n  local result=\"\"\n  for x in \"${array[@]}\"; do\n    result=\"${result}--$(($1 % x))\"\n  done\n  echo \"-${result#--}-\"\n}\nfromNb2Str \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336738,"user_id":null,"body":"#!\/bin\/bash\ndeclare -a numbers=($(tr ',' ' ' <<<\"$2\"))\n\nuniq-prime () {\nfactor \"$1\" | awk '{for(i=2;i<=NF;i++) print $i}' | uniq\n}\n\nco-prime () {\nfor n in ${numbers[@]};\ndo\n  uniq-prime $n\ndone | sort | uniq -d\n}\n\nproduct () {\necho $1 | sed -e 's\/,\/*\/g' | bc\n}\n\nfromNb2Str () {\n    # your code\n    if [ ! -z \"$(co-prime $2)\" ] || [ \"$(product $2)\" -le \"$1\" ];\n    then echo \"Not applicable\"; return\n    fi  \n    local -i m=$1\n    for n in ${numbers[@]};\n    do  \n      local -i r=$((m % n))\n      #if [ $r -eq 0 ]; then break; fi\n      echo -n \"-$r-\"\n    done\n}\nfromNb2Str \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336739,"user_id":null,"body":"#!\/bin\/bash\nfromNb2Str () {\n    echo $1 $2 | awk '\n    function gcd(n1, n2) {\n      if (!n2) {\n        return n1\n      }\n      if (!n1) {\n        return n2\n      }\n      return gcd(n2, n1%n2)\n    }\n    END {\n      arrLength = split($2, arr, \",\")\n      product = 1\n      coprime = 1\n      # Why do I have to start the iteration from 1 instead of 0???\n      for (i = 1; i <= arrLength; i++) {\n        product *= arr[i]\n        for (j = i+1; j <= arrLength; j++) {\n          coprime = coprime && gcd(arr[i], arr[j]) == 1\n        }\n        res[i-1] = $1 % arr[i]\n      }\n      if (product <= $1 || !coprime) {\n        printf \"Not applicable\"\n      } else {\n        printf \"-\"\n        for (k = 0; k < arrLength; k++) {\n          printf \"%d\", res[k]\n          if (k != arrLength-1) {\n            printf \"--\"\n          }\n        }\n        printf \"-\"\n      }\n    }'\n}\nfromNb2Str \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336740,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef coprime(a, b):\n    return a == 1 if b == 0 else coprime(b, a % b)\ndef aux(n, smodsys):\n    n = int(n)\n    modsys = map(int, smodsys.split(\",\"))\n    p = reduce(lambda x, y: x * y, modsys)\n    if (p <= n):\n        return \"Not applicable\"\n    for i in range(0, len(modsys)): \n        for j in range(i + 1, len(modsys)):\n            if (coprime(modsys[i], modsys[j]) == False):\n                return \"Not applicable\"\n    res = \"\";\n    for i in range(0, len(modsys)):\n        res = res + \"-\" + str(n % modsys[i]) + \"-\"\n    return res\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\nfromNb2Str () {\n    echo `python -c \"$aux\" \"$1\" \"$2\"`\n}\nfromNb2Str \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54dc6f5a224c26032800005c":[{"id":336741,"user_id":1045,"body":"#!\/bin\/bash\nstock_list () {\n  [ -z $1 ] && exit; [ -z $2 ] && exit; res=''\n  declare -a stk=( $(echo \"$1\"|tr \" \" \":\"|tr \",\" \" \") ) \n  declare -a cat=( $(echo \"$2\"|tr \",\" \" \") )\n  \n  for i in ${cat[@]}; do\n    sum=0\n    for j in ${stk[@]}; do\n      if [ $i == ${j:0:1} ]; then\n        val=${j##*:}; val=${val##0}\n        let sum=sum+val\n      fi\n    done\n  res=\"$res - ($i : $sum)\"\n  done\n\n  echo ${res:3}\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336742,"user_id":492,"body":"#!\/bin\/bash\nsol='\nfrom sys import argv\ndef sol(slistOfArt, slistOfCat):\n    if (len(slistOfArt) == 0) or (len(slistOfCat) == 0):\n        return \"\"\n    listOfArt = slistOfArt.split(\",\")\n    listOfCat = slistOfCat.split(\",\")\n    result = \"\"\n    for cat in listOfCat:\n        total = 0\n        for book in listOfArt:\n            if (book[0] == cat[0]): \n                total += int(book.split(\" \")[1])\n        if (len(result) != 0):\n            result += \" - \"\n        result += \"(\" + str(cat) + \" : \" + str(total) + \")\"\n    return result\na=sol(argv[1:][0], argv[1:][1])\nprint a\n'\nstock_list () {\n    echo `python -c \"$sol\" \"$1\" \"$2\"`\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336743,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\n  [[ -z \"$1\" || -z \"$2\" ]] && return 1\n  \n  # determine which categories we are concerned with\n  declare -A categories\n  IFS=, read -ra m <<<\"$2\"\n  for c in \"${m[@]}\"; do\n    categories[$c]=0\n  done\n  \n  # sum up those categories\n  while read -r book count; do \n    [[ ${categories[${book:0:1}]+foo} ]] && categories[${book:0:1}]=\"$((\"10#$count\" + categories[${book:0:1}]))\"\n  done < <(sed 's\/,\/\n\/g' <<<\"$1\")\n  \n  # output results\n  for x in \"${m[@]}\"; do\n    printf '(%s : %d)\n' \"$x\" \"${categories[$x]}\"\n  done | paste -sd '-' | sed 's\/-\/ - \/g'\n}\n\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336744,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\n  [[ -z $1 || -z $2 ]] && echo && return\n\n  tr , '\n' <<< $1,$2,$2 | sed -r 's,^(.)\\S*,\\1,' | sort | uniq -w1 -D |\n  awk -v o=$2 '{ s[$1] += $2 } \n    END { \n      split(o, cats, \",\")\n      for(c in cats) printf \"(%s : %d) - \", cats[c], s[cats[c]] }' |\n  sed 's, - $,,'\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336745,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\n  # Set a variables for args\n  list=$1\n  letters=$2\n  \n  # Make a list based on comma separator\n  IFS=',' read -r -a array_words <<< \"$list\"\n  IFS=',' read -r -a array_letters <<< \"$letters\"\n  \n  # Check if string is not empty\n  if [ -z \"$list\" ]; then\n        echo \"\"\n        exit\n  fi\n\n  # Declare the array\n  declare -a result=(0 0 0 0) \n\n  # Logic\n  for element in \"${array_words[@]}\"\n  do\n    firstletter=${element:0:1}\n    value=$(echo $element | awk '{print $2;}' | sed 's\/^0*\/\/')\n\n    for i in \"${!array_letters[@]}\"; do\n      if [[ \"${array_letters[$i]}\" = \"${firstletter}\" ]]; then\n        result[$i]=$(( result[i] + value ))\n      fi\n    done\n  done\n  \n  # Print the results\n  for i in \"${!array_letters[@]}\"; do\n    echo -n \"(${array_letters[$i]} : ${result[$i]})\"\n    if [[ $i -ne ${#array_letters[@]}-1 ]]; then\n      echo -n \" - \"\n    fi\n  done\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336746,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\nres=\"\"\nwhile IFS=',' read -r -n 2 char; do\n  in=0\n  while IFS=',' read -r -d ',' cnt; do\n  if [[ \"$cnt\" == \"$char\"* ]]; then\n    cnt=${cnt#* }\n    cnt=${cnt#0*}\n    in=$((in+${cnt}))\n  fi\n  done < <(echo \"$1,\") # the ',' is needed due to broken test input :P\n  res=\"$res($char : $in) - \"\ndone < <(echo $2)\nif [[ \"$1\" == \"\" ]] || [[ \"$2\" == \"\" ]]; then\n  echo \"\"\n  else\necho ${res% - }\nfi\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336747,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\n\n    if [ \"$1\" == \"\" -o \"$2\" == \"\" ]; then\n      echo \"\"\n    else\n    \n      declare -a array=(\"\")\n      \n      IFS=\",\" read -ra str2 <<< $2\n      for z in ${!str2[@]} ; do\n        array[z]=${str2[z]}\n      done\n      \n      declare -a array2=(\"\")\n      declare -a array3=(\"\")\n      IFS=\",\" read -ra str1 <<< $1\n      \n      for i in ${!str1[@]}; do \n        array2[i]=${str1[i]}\n      done\n      let counter=0\n      IFS=\" \" read -ra str4 <<< ${array2[@]}\n      for t in ${str4[@]}; do\n        if [[ $t =~ ^[[:digit:]]+$ ]]; then\n          array3[counter]=$t\n          counter=$((counter+1))\n        fi    \n      done\n      \n  \n      \n      declare -a array4=(\"\")\n      \n      for i in ${!array2[@]}; do \n        for t in ${!array[@]}; do\n          if [ \"${array2[i]:0:1}\" == \"${array[t]}\" ]; then\n            a=$(echo \"${array4[t]}\" | bc )\n            b=$(echo \"${array3[i]}\" | bc )\n            array4[t]=$((a + b))\n            \n          else\n            array4[t]=$((0 + array4[t]))\n          fi\n        done\n      done\n      #echo ${array4[@]}\n      for i in ${!array4[*]}; do\n        printf \" (${array[i]} : ${array4[i]})\"\n        if [ $i != $((${#array4[@]} - 1)) ]; then\n          printf \" -\"\n        fi\n      done\n    \n    fi\n    \n    \n    \n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336748,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\nif [ \"$1\" != \"\" ]\nthen\nTMP=\"$IFS\"\nIFS=\",\"\nSL=($1)\nSM=($2)\nIFS=\"$TMP\"\nfor M in \"${SM[@]}\"; do\n        TOT=0\n        for L in \"${SL[@]}\"; do\n                if [ $M = ${L:0:1} ]\n                then\n                L_DEC=${L##*\\ }\n                L_DEC=$((10#$L_DEC))\n                TOT=$(( $TOT+$L_DEC ))\n                fi\n        done\n        res+=(\"($M : $TOT)\")\ndone\nfor i in \"${res[@]}\"\n  do\n  echo -n \"$i\"\n  if [ \"$i\" != \"${res[-1]}\" ]\n  then\n  echo -n \" - \"\n  fi\ndone\nfi\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336749,"user_id":null,"body":"#!\/bin\/bash\nstock_list () {\n    if [ \"$1\" == \"\" ]\n    then\n        echo \"\"\n        return\n    fi\n\n    declare -A RESULT\n\n    for code in $(echo $2 | tr \",\" \" \")\n    do\n        RESULT[${code}]=0\n    done\n\n    for item in $(echo $1 | tr \",\" \" \")\n    do\n        case $item in\n            *[!0-9]*) code=${item:0:1};;\n            *)        tmp=${RESULT[${code}]}\n                      RESULT[$code]=$(( tmp += 10#$item ));;\n            \n        esac\n    done\n    \n    result=\"\"\n    for code in $(echo $2 | tr \",\" \" \")\n    do\n        result=\"$result - ($code : ${RESULT[${code}]})\"\n    done\n    echo ${result:2}\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336750,"user_id":null,"body":"#!\/bin\/bash\n\nset -eo pipefail\n\nstock_list () {\n\nif [[ -z $1 ]] || [[ -z $2 ]]; then\n  exit 0\nfi\n\nIFS=\",\" read -a books <<< $1\nIFS=\",\" read -a letters <<< $2\n\ndeclare -A sum\n\nfor i in {A..Z}; do\n  sum[$i]=0\ndone\n\nfor (( i=0; i<${#books[@]}; i++ )); do\n  IFS=\" \" read -a pair <<< ${books[$i]}\n  a=$(echo ${pair[0]} | cut -c 1)\n  b=$(bc<<<\"scale=0; ${pair[1]}\/1\")\n  if grep -q \"$a\" <<< \"${letters[@]}\" ; then\n    sum[$a]=$((${sum[$a]}+$b))\n  fi\ndone\n\nfor (( i=0; i<${#letters[@]}; i++ )); do\n  a=${letters[$i]}\n  result+=$(printf \"(${letters[$i]} : ${sum[$a]}) - \")\ndone\n\necho ${result::-3}\n\n}\nstock_list \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54de3257f565801d96001200":[{"id":336751,"user_id":1045,"body":"#!\/bin\/bash\nbalance_statement () {\n  [ -z $1 ] && echo \"Buy: 0 Sell: 0\" && exit\n  declare -a arr=(); bad=\"\"; bc=0; buy=0; sel=0\n\nwhile read line; do\n    arr=( $line ); tmp=$bc; bdln=\"${arr[*]} ;\"\n    if (( ${#arr[@]} != 4 )); then bad=\"$bad${bdln:1}\"; let bc=bc+1\n    elif [[ ! \"${arr[1]:1}\" =~ ^[0-9]+$ ]]; then bad=\"$bad${bdln:1}\"; let bc=bc+1\n    elif [[ ! \"${arr[2]}\" =~ ^[0-9]+\\.[0-9]+$ ]]; then bad=\"$bad${bdln:1}\"; let bc=bc+1\n    elif [[ ! \"${arr[3]}\" =~ ^[BS]$ ]]; then bad=\"$bad${bdln:1}\"; let bc=bc+1\n    elif  [ ${arr[3]} == 'B' ]; then buy=$(echo \"scale=6; $buy+${arr[1]}*${arr[2]}\/1\"|bc -l)\n    else sel=$(echo \"scale=6; $sel+${arr[1]}*${arr[2]}\/1\"|bc)\n    fi\n    done <<< $(echo \"_$1\"|sed \"s\/,\/\n\\r\/g\")\n  \n  res=$(printf \"Buy: %.0f Sell: %.0f\" $buy $sel)\n  if [ $bc -gt 0 ]; then res=\"$res; Badly formed $bc: $bad\"; fi\n  echo $res\n\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336752,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\n  IFS=\",\" input=($1) buy=0 sell=0 bad=0\n  \n  for i in ${input[*]}; do\n    IFS=\" \" order=($i)\n    if grep -q \"^[^ ]* [0-9^ ]* [0-9.^ ]* [BS]$\" <<< $i && grep -q \"\\.\" <<< ${order[2]}; then\n      if [ ${order[3]} == \"B\" ]; then\n        buy=$(bc <<< \"$buy + (${order[1]} * ${order[2]})\" )\n      else\n        sell=$(bc <<< \"$sell + (${order[1]} * ${order[2]})\" )\n      fi\n    else\n      (( bad++ )); badStr=\"${badStr}${i} ;\"\n    fi\n  done\n  echo \"Buy: $(printf \"%.f\" $buy) Sell: $(printf \"%.f\" $sell)$([ $bad -ne 0 ] && echo \"; Badly formed $bad: $badStr\")\"\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336753,"user_id":2390,"body":"#! \/bin\/bash\n\necho -n \"$1\" | awk '\nBEGIN {\n    RS = \"[ ]*,[ ]*\"\n}\n\/[^[ ]+[ ]+[0-9]+[ ]+[0-9]+\\.[0-9]+[ ]+(B|S)\/ {\n    if ($4 == \"B\") {\n        buy += $2 * $3\n    } else {\n        sell += $2 * $3\n    }\n    next\n}\n{\n    bad_str = bad_str \" ;\" $0\n    bad_count++\n}\nEND {\n    printf \"Buy: %.0f Sell: %.0f\", buy, sell\n    if (bad_count) {\n        printf \"; Badly formed %i: %s ;\", bad_count, substr(bad_str, 3) \n    }\n}'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336754,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\n    # Array\n    IFS=',' read -r -a listOrders <<< \"$1\"\n    # Variables\n    declare -i loop buy sell badFormat\n    declare \u2013a badFormatList\n    loop=$((${#listOrders[@]} - 1))\n    buy=0\n    sell=0\n    badFormat=0\n    # Loop\n    for i in $(seq 0 $loop); do\n      IFS=' ' read -r -a order <<< \"${listOrders[$i]}\"\n      price=${order[2]}\n      quantity=${order[1]}\n      \n      # Price\n      if [[ ${order[1]} =~ \\. ]]; then\n          badFormat+=1   \n          badFormatList+=(\"${order[@]} ;\")\n      # Quantity\n      elif [[ ! ${order[2]} =~ \\. ]]; then\n          badFormat+=1   \n          badFormatList+=(\"${order[@]} ;\")\n      # Order\n      elif [[ \"${order[3]}\" != \"B\" && \"${order[3]}\" != \"S\" ]]; then\n          badFormat+=1   \n          badFormatList+=(\"${order[@]} ;\")\n      # Buy\n      elif [[ \"${order[3]}\" == \"B\" ]]; then\n          amount=$(echo $price \\* $quantity | bc -l)\n          amount=$(printf \"%.0f\n\" $amount)\n          buy+=$amount\n      # Sell\n      elif [[ \"${order[3]}\" == \"S\" ]]; then\n          amount=$(echo $price \\* $quantity | bc -l)\n          amount=$(printf \"%.0f\n\" $amount)\n          sell+=$amount\n      fi\n    done   \n    \n    # Remove white spaces\n    badFormatString=$(echo \"Badly formed $badFormat: ${badFormatList[@]}\" |  sed 's\/; \/;\/g')\n    \n    # Result\n    if [[ $badFormat == 0 ]]; then\n      echo \"Buy: $buy Sell: $sell\"\n    else\n      echo \"Buy: $buy Sell: $sell; $badFormatString\"\n    fi\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336755,"user_id":null,"body":"#! \/bin\/bash\n\ntotal()\n{\n    # Return product of shares and price.\n\n    awk 'BEGIN{ printf \"%.0f\", '$1' * '$2' }'\n}\n\nbalance_statement()\n{\n    # Calculate buy\/sell amounts for list of orders and show malformed ones.\n\n    IFS=,\n    orders=($1)\n\n    bad=()\n    declare -A amt\n    for o in ${orders[*]}; do\n        IFS=\" \" read -a fields <<< $o\n\n        err=0\n        [[ ${fields[1]} =~ \".\" ]] && err=1\n        [[ ! ${fields[2]} =~ \".\" ]] && err=1\n        [ ${fields[3]:-X} != \"B\" -a ${fields[3]:-X} != \"S\" ] && err=1\n        [ $err -eq 1 ] && bad+=($o) && continue\n\n        tot=$(total ${fields[1]} ${fields[2]})\n        amt[${fields[3]}]=$((${amt[${fields[3]}]:=0} + $tot))\n    done\n\n    out=\"Buy: ${amt['B']:=0} Sell: ${amt['S']:-0}\"\n    [ ${#bad[*]} -ne 0 ] && out+=\"; Badly formed ${#bad[*]}: \"\n    for b in ${bad[*]}; do out+=\"$b ;\"; done\n    echo $out\n}\n\nbalance_statement \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336756,"user_id":null,"body":"#!\/bin\/bash\n\nmodifiedInput=$(awk '{print}' RS=, <(echo \"$1\") | sed '\/^$\/d')\nawk '\nBEGIN {buy=0;sell=0;totalBad=0}\n{\n  if($2 ~ \/\\.\/ || $3 !~ \/\\.\/ || $4 == \"\") {\n    bad=bad $0 \" ;\"\n    totalBad++\n    next\n  } \n  if($4 == \"B\") buy+=$2 * $3\n  else if ($4 == \"S\") sell+=$2 * $3\n}\nEND {\n  printf(\"Buy: %d Sell: %d\", int(buy + 0.5), int(sell + 0.5))\n  if(totalBad != 0 && bad ~ \/[A-Z]\/) printf(\"; Badly formed %d: %s\", totalBad, bad)\n}\n' <(echo \"$modifiedInput\")","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336757,"user_id":492,"body":"#!\/bin\/bash\n\n#old Python solution replaced by one from jmo\nbalance_statement () {\n  IFS=\",\" input=($1) buy=0 sell=0 bad=0\n  \n  for i in ${input[*]}; do\n    IFS=\" \" order=($i)\n    if grep -q \"^[^ ]* [0-9^ ]* [0-9.^ ]* [BS]$\" <<< $i && grep -q \"\\.\" <<< ${order[2]}; then\n      if [ ${order[3]} == \"B\" ]; then\n        buy=$(bc <<< \"$buy + (${order[1]} * ${order[2]})\" )\n      else\n        sell=$(bc <<< \"$sell + (${order[1]} * ${order[2]})\" )\n      fi\n    else\n      (( bad++ )); badStr=\"${badStr}${i} ;\"\n    fi\n  done\n  echo \"Buy: $(printf \"%.f\" $buy) Sell: $(printf \"%.f\" $sell)$([ $bad -ne 0 ] && echo \"; Badly formed $bad: $badStr\")\"\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336758,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\nquantity_valid () { [[ \"$1\" =~ ^[0-9]+$ ]]; }\nprice_valid () { [[ \"$1\" =~ ^[0-9]+\\.[0-9]+$ ]]; }\nstatus_valid () { [[ \"$1\" =~ ^(B|S)$ ]]; }\nrecord_valid () { quantity_valid \"$2\" && price_valid \"$3\" && status_valid \"$4\"; }\n\nbalance_statement () {\n\tinvalid=() buy=0 sell=0\n\twhile read -r record; do\n\t\tread -r quote quantity price status <<<\"$record\"\n\t\tif ! record_valid \"$quote\" \"$quantity\" \"$price\" \"$status\"; then\n\t\t\tinvalid+=(\"$record\")\n\t\t\tcontinue\n\t\tfi\n\t\tif [ \"$status\" == B ]; then\n\t\t\tbuy=$(bc -l <<<\"$buy + $quantity * $price\")\n\t\telse\n\t\t\tsell=$(bc -l <<< \"$sell + $quantity * $price\")\n\t\tfi\n\tdone\n\tprintf 'Buy: %.0f Sell: %.0f' \"$buy\" \"$sell\"\n\tif ((${#invalid[@]} > 0)); then\n\t\tprintf '; Badly formed %d: ' \"${#invalid[@]}\"\n\t\tprintf '%s ;' \"${invalid[@]}\"\n\tfi\n\tprintf '\n'\n}\n\ntr ',' '\n' <<<\"$1\" | (grep -v '^$' || true) | balance_statement\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336759,"user_id":null,"body":"#!\/bin\/bash\nBUY_TOTAL=0\nSELL_TOTAL=0\nBADLY_FORMED=\"\"\nBADLY_COUNT=0\n\nto_output() {\n  if [ \"$BADLY_FORMED\" == \"\" ]; then\n    echo \"Buy: $BUY_TOTAL Sell: $SELL_TOTAL\"\n  else\n    echo \"Buy: $BUY_TOTAL Sell: $SELL_TOTAL; Badly formed $BADLY_COUNT: $BADLY_FORMED\"\n  fi\n  \n  exit\n}\n\n_top() {    \n  FIELDS=$( echo \"$*\" | awk '{print NF}' )\n  QTY=$( echo \"$*\" | awk '{print $2}' )\n  PRICE=$( echo \"$*\" | awk '{print $3}' )\n\n  if [[ \"$QTY\" == *\".\"* || \"$PRICE\" != *\".\"* || \"$FIELDS\" -ne 4 ]]; then\n    let \"BADLY_COUNT++\"\n    BADLY_FORMED+=\"$* ;\"\n    return\n  fi\n\n  BUY=$( echo \"$*\" | awk '$4 ~ \/B\/ {sum += $2*$3} END {print sum}' )\n  SELL=$( echo \"$*\" | awk '$4 ~ \/S\/ {sum += $2*$3} END {print sum}' )\n  BUY_TOTAL=$((BUY_TOTAL+BUY))\n  SELL_TOTAL=$((SELL_TOTAL+SELL))\n}\n\nbalance_statement () {\n  # empty output\n  if [ \"$*\" == \"\" ]; then\n    to_output\n  fi\n\n  # pop entry\n  entry=$( echo \"$*\" | awk -F',' '{print $1}' )\n  _top \"$entry\"\n\n  # items need to be processed\n  if [[ \"$*\" == *\",\"* ]]; then\n    balance_statement \"$( echo $* | cut -d',' -f2- )\"\n  else\n    to_output\n  fi\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336760,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\necho -n \"$1\" | awk '\nBEGIN{RS=\",\"; buy=0; sell=0;}\nNF>0 {\n  if($0 ~ \/[^ ]+ [0-9]+ [0-9]+\\.[0-9]+ [BS]\/) {\n    if($4==\"B\") buy=buy+$2*$3\n    else sell=sell+$2*$3\n  } else {\n    nb=nb+1\n    barr=barr $0 \" ;\"\n  }\n}\nEND{\n  printf \"Buy: %s Sell: %s\",buy,sell\n  if(nb>0) {\n    printf \"; Badly formed %d: %s\",nb,barr\n  }\n}\n'\n}\nbalance_statement \"$@\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336761,"user_id":null,"body":"#!\/bin\/bash\n\nbalance_statement () {\n  int_regex=\"^[0-9]+$\"\n  double_regex=\"^[0-9]+\\.[0-9]+$\"\n\n  buy_gross=0\n  sell_gross=0\n  \n  error_orders_str=\"\"\n  badly_order_current=0\n  \n  cur_IFS=$IFS\n  IFS=\",\"\n  orders_array=($1)\n  \n  for order in ${orders_array[@]}\n  do\n    IFS=$cur_IFS\n    words_array=($order)\n    \n    if [[ ${words_array[1]} =~ $int_regex ]]\n    then\n      if [[ ${words_array[2]} =~ $double_regex ]]\n      then\n        if [[ ${words_array[3]} == \"B\" ]]\n        then\n          buy_gross=$( echo \"$buy_gross + ${words_array[1]} * ${words_array[2]}\" | bc )\n        elif [[ ${words_array[3]} == \"S\" ]]\n          then\n          sell_gross=$( echo \"$sell_gross + ${words_array[1]} * ${words_array[2]}\" | bc )\n        else\n          error_orders_str=\"$error_orders_str$order ;\"\n          badly_order_current=$(($badly_order_current+1))\n        fi\n      else      \n        error_orders_str=\"$error_orders_str$order ;\"\n        badly_order_current=$(($badly_order_current+1))\n      fi\n    else\n      error_orders_str=\"$error_orders_str$order ;\"\n      badly_order_current=$(($badly_order_current+1))\n    fi\n  done\n  \n  buy_gross=$( echo \"scale=0;  ($buy_gross)\/1\" | bc )\n  sell_gross=$( echo \"scale=0;  ($sell_gross)\/1\" | bc )\n  \n  if [[ $error_orders_str != \"\" ]] ; then\n    error_orders_str=\"; Badly formed $badly_order_current: $error_orders_str\"\n    error_orders_str=$(echo \"$error_orders_str\" | tr -s \" \")\n  fi\n  \n  echo \"Buy: $buy_gross Sell: $sell_gross$error_orders_str\"\n}\n\nbalance_statement \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336762,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\n\n    if [[ -z $1 ]]\n        then\n            echo \"Buy: 0 Sell: 0\"\n            exit\n    fi\n\n    buy=$(echo $1 | tr ',' '\n' | grep \"[A-Z]* [0-9]* [0-9.]* B\")\n    sell=$(echo $1 | tr ',' '\n' | grep \"[A-Z]* [0-9]* [0-9.]* S\")\n\n    buy=$(echo $buy | grep -o \"[0-9]* [0-9]*\\.[0-9]*\" | tr ' ' '*' | tr '\n' '+' | rev | cut -c 2- | rev | bc | sed \"s\/\\.[0-9]*\/\/\")\n    sell=$(echo $sell | grep -o \"[0-9]* [0-9]*\\.[0-9]*\" | tr ' ' '*' | tr '\n' '+' | rev | cut -c 2- | rev | bc | sed \"s\/\\.[0-9]*\/\/\")\n    n=$(echo $1 | tr ',' '\n' | grep -v \"[A-Z]* [0-9]* [0-9]*\\.[0-9]* [BS]\" | wc -l)\n\n    [ -z $buy ] && buy=0\n    [ -z $sell ] && sell=0\n\n    echo -n \"Buy: $buy Sell: $sell\" \n\n    if [[ $n -gt 0 ]]\n        then\n            echo \"; Badly formed $n: $(echo $1 | tr ',' '\n' | grep -v \"[A-Z]* [0-9]* [0-9]*\\.[0-9]* [BS]\" | tr  '\n' '|' | sed \"s\/|\/ ;\/g\")\"\n    fi\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336763,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\n  IFS=',' read -r -a array <<< \"$1\"\n\n  nb=0\n  bad=\n  buy=0\n  sell=0\n\n  for i in \"${array[@]}\"; do\n    if [[ $i =~ ^.*+\\ [0-9]+\\ [0-9]+\\.[0-9]+\\ [BS] ]]; then\n      stringarray=($i)\n      quantity=$(bc <<< \"${stringarray[1]}*${stringarray[2]}\")\n      quantity=${quantity%.*}\n      idx=$((${#i}-1))\n      if [[ \"${i:$idx:1}\" == \"B\" ]]; then\n        buy=$(($buy + $quantity))\n      else sell=$(($sell + $quantity))\n      fi\n    else\n      nb=$(($nb + 1))\n      bad=\"$bad$i ;\"\n    fi\n  done\n\n  result=\"Buy: $buy Sell: $sell\"\n  if [[ $nb -gt 0 ]]; then\n    result=\"$result; Badly formed $nb: $bad\"\n  fi\n\n  echo $result\n}\n\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336764,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement() {\n  IFS=',' orders=($1)\n  b=\"\" nb=0 sumb=0 sums=0\n  for order in ${orders[*]}\n  do\n    if [[ $order =~ ^[[:graph:]]+[[:space:]]([1-9][0-9]+)[[:space:]]([0-9]+[.][0-9]+)[[:space:]]([BS])$ ]]\n    then \n      sum=$(bc <<< \"${BASH_REMATCH[1]}*${BASH_REMATCH[2]}\")\n      if [[ ${BASH_REMATCH[3]} == B ]]; then sumb=$(bc <<< $sumb+$sum); else sums=$(bc <<< $sums+$sum); fi\n    else \n      b+=\"$order ;\" nb=$((nb+1))\n    fi\n  done\n  sumb=$(bc <<< \"scale=0; $sumb\/1\") sums=$(bc <<< \"scale=0; $sums\/1\")\n  if [[ $nb>0 ]]; then b=\"; Badly formed \"$nb:\" \"$b; fi\n  echo Buy: $sumb Sell: $sums$b\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336765,"user_id":null,"body":"#!\/bin\/bash\n\nbalance_statement() {\n    IFS=, read -a orders <<< \"$1\"\n    declare -a bad_orders=()\n\n    buy_total=0\n    sell_total=0\n\n    for order in \"${orders[@]}\"; do\n        re='^[^ \\t]+ [0-9]+ [0-9]+\\.[0-9]+ [BS]$'\n        if [[ $order =~ $re ]]; then\n            read _quote quant price status <<< \"$order\"\n            case $status in\n                B)\n                    buy_total=$(bc <<< \"$buy_total + $quant*$price\")\n                    ;;\n                S)\n                    sell_total=$(bc <<< \"$sell_total + $quant*$price\")\n                    ;;\n            esac\n\n        else\n            bad_orders+=(\"$order\")\n        fi\n    done\n\n    res=\"Buy: ${buy_total%\\.*} Sell: ${sell_total%\\.*}\"\n    if [[ -n \"${bad_orders[@]}\" ]]; then\n        res+=\"; Badly formed ${#bad_orders[@]}: \"\n        for bad_order in \"${bad_orders[@]}\"; do\n            res+=\"$bad_order ;\"\n        done\n    fi\n    echo $res\n}\n\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336766,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\n    [[ ${#1} == 0 ]] && echo \"Buy: 0 Sell: 0\" || \\\n    echo $1 | awk 'BEGIN{RS=\",\"; buySum=0; sellSum=0; badNum=0; badOrders=\"\"}\n    {\n        if(($2 ~ \/[0-9]+\/) && ($3 ~ \/[0-9]+\\.[0-9]+\/) && ($4 ~ \/B|S\/)) {\n          if($4==\"B\") {\n              buySum+=$2*$3\n          } else {\n              sellSum+=$2*$3\n          }\n        } else {\n            badNum++\n            badOrders=badOrders$0\" ;\"\n        }\n      }\n    END{\n      printf \"Buy: %s Sell: %s\", buySum, sellSum\n      if(badNum != 0) {\n        printf \"; Badly formed %d: %s\n\", badNum, badOrders\n      } else {\n        printf \"\n\"\n      }\n      }\n    '\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336767,"user_id":null,"body":"#!\/bin\/bash\nbalance_statement () {\n  IFS=$','\n  arr=($1)\n  buy=0;\n  sell=0;\n  err=()\n  for i in ${arr[*]}\n  do\n    IFS=$' \\t\n'\n    line=($i)\n    expr ${line[1]} + 1 > \/dev\/null 2>&1\n    c1=$?\n    expr ${line[2]} + 1 > \/dev\/null 2>&1\n    c2=$?\n    if [ $c1 -eq 2 -o $c2 -ne 2 ];then\n      err+=(\"${line[*]} ;\")\n    else\n      case ${line[3]} in\n        \"B\")\n          num=`echo \"${line[1]} * ${line[2]}\" | bc`\n          buy=`echo \"$buy + $num\" | bc`\n          ;;\n        \"S\")\n          num=`echo \"${line[1]} * ${line[2]}\" | bc`\n          sell=`echo \"$sell + $num\" | bc`\n          ;;\n        *)\n          err+=(\"${line[*]} ;\")\n          ;;\n      esac\n    fi\n  done\n  \n  t1=`echo \"Buy: ${buy%.*} Sell: ${sell%.*}\"`\n  t2=\"\"\n  if [ ${#err[*]} -gt 0 ];then\n    IFS=''\n    t2=\"; Badly formed ${#err[*]}: ${err[*]}\"\n  fi\n  echo $t1$t2\n}\nbalance_statement \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54e320dcebe1e583250008fd":[{"id":336768,"user_id":492,"body":"#!\/bin\/bash\naux56='\nfrom sys import argv\ndef fact(n):\n  res=1\n  for i in range(1,n+1): res*=i\n  return res\nfactors=[]\nfor i in range(36,-1,-1):factors+=[fact(i)]\nbase=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ndef dec_2_fact_string(nb):\n  nb=int(nb);res=\"\"\n  for i in factors:\n    if i>nb and res==\"\": continue\n    res+=base[nb\/i]\n    nb%=i\n  return res\ndef fact_string_2_dec(string):\n  res=0;string=string[::-1]\n  for i in range(len(string)): res+=base.index(string[i])*factors[-i-1]\n  return res\ndef aux(fct, s):\n    return globals()[fct](s)\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\n# takes two parameters \n# 1: function dec_2_fact_string or fact_string_2_dec\n# 2: string\noper () {\n    echo `python -c \"$aux56\" \"$1\" \"$2\"`\n}\noper \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336769,"user_id":null,"body":"#!\/bin\/bash\n# * factorial numbers\n# arbitrary precision via bc\n\n# ** define digit\/place values. e.g 'K'=#20\n\ndeclare    fdigits=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n# ** build an associative array for digit values\n\ndeclare -A fdigitvalue=()\ndeclare -i n=\"${#fdigits}\"\nfor ((i=0;i<n;i++))\n    do fdigitvalue[\"${fdigits:$i:1}\"]=\"$i\"\ndone\n\n\n# *** f2d() - factorial to decimal\n# break the factonum into an array of values by place\n# then have bc roll a factorial while mulsumming a decimal value\n\nbc-f2d(){\n    declare num=\"$1\"\n \n    # preparation of the array to eval\n    declare -i len=\"${#num}\" pos \n\t  declare -a lin=(\"cnt=$len; \")\n    declare chr=\"\"\n    pos=$((len-1))\n    #declare -p num len pos lin\n    for ((i=0;i<len;i++)); do\n\t\t  chr=\"${num:$pos:1}\"\n  \t\tlin+=(\"num[$i]=0${fdigitvalue[\"$chr\"]}; \")\n      #declare -p chr \n  \t\tpos=$((pos-1))\n  \tdone\n    \n    # create a script, run and compute. \n    declare out=\"\n    ${lin[@]}\n    sum=num[0]\n    ind=1\n    prv=1\n    while(ind<cnt){\n\t     fac=ind*prv\n\t     prv=fac\n\t     sum=sum+(num[ind]*fac)\n\t     ind=ind+1\n    }\n\n    print sum\n    quit\n    \"\n\t  #echo -e \"$out\"\n\n    read out < <(bc < <(echo -e \"$out\"))    \n    \n    # that's it, echo the decimal value\n    # built by bc from the array.\n    echo \"$out\"\n}\n\n\n# *** d2f() - decimal to factorial\n# pass the decimal and have bc compute the remainders into an array\n# then map the values from that array into digits and build a string.\n\nbc-d2f(){\n \tdeclare -a digitvalues=()\n  read -a digitvalues < <(bc <<HERE\n\n  scale=0\n  define d2f(n){\n    # builds an reverse list of values for places in a factorial number\n    # each division makes a significant digit. read as array, translate to chars.\n    auto i,v,r,x;\n    print \"0 \";\n    i=2;\n    x=n;\n    v=0;\n    r=0;\n    while(i<99){\n    \tv=x\/i;\n    \tr=x-(i*v);\n    \tprint r,\" \"\n    \tif (v==0) return;\n    \tx=v;\n    \ti=i+1;\n    }\n  }\n\n  .=d2f($1)\nquit\nHERE\n  )\n\n  declare out=\"\"\n\tdeclare -i val=0  \n  \n  # prepend incoming digits cause the division ran in reverse.\n\tfor val in \"${digitvalues[@]}\"; do\n\t\tout=\"${fdigits:${val}:1}$out\"\n\tdone\n  \n  # that's it, echo the factonum\n  # built from bc's output.\n\techo \"$out\"\n}\n\n\n# ** main \n\ntesting(){\n  case \"$1\" in\n\t\"dec_2_fact_string\") res=$(bc-d2f $2);;\n\t\"fact_string_2_dec\") res=$(bc-f2d $2);;\n\t*) echo \"error\"; return 1;;\n  esac\n  if [ -z \"$3\" ]; then \n    echo $res\n    return 0\n  elif [ \"$res\" = \"$3\" ]; then ok=\"== OK!\"; else ok=\"== KO: $3\"; fi\n  echo \"$2 -> $res $ok\"\n}\n\nif [ -n \"$1\" ]; then \n  testing \"$1\" \"$2\"\n  exit 0\nfi\n\ntesting \"dec_2_fact_string\" \"463\" \"341010\"\ntesting \"dec_2_fact_string\" \"2982\" \"4041000\"\ntesting \"fact_string_2_dec\" \"4041000\" \"2982\"\ntesting \"fact_string_2_dec\" \"27A0533231100\" \"1273928000\"\n\nexit 0\n\n# \u220e\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336770,"user_id":492,"body":"#!\/bin\/bash\naux56='\nfrom sys import argv\ndef fact(n):\n  res=1\n  for i in range(1,n+1): res*=i\n  return res\nfactors=[]\nfor i in range(36,-1,-1):factors+=[fact(i)]\nbase=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ndef dec_2_fact_string(nb):\n  nb=int(nb);res=\"\"\n  for i in factors:\n    if i>nb and res==\"\": continue\n    res+=base[nb\/i]\n    nb%=i\n  return res\ndef fact_string_2_dec(string):\n  res=0;string=string[::-1]\n  for i in range(len(string)): res+=base.index(string[i])*factors[-i-1]\n  return res\ndef aux(fct, s):\n    return globals()[fct](s)\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\n# takes two parameters \n# 1: function dec_2_fact_string or fact_string_2_dec\n# 2: string\noper () {\n    echo `python -c \"$aux56\" \"$1\" \"$2\"`\n}\noper \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"54eb33e5bc1a25440d000891":[{"id":336771,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef aux(m):\n    n = int(m)\n    sm = 0\n    result = [n]\n    while (len(result)):\n        tmp = result.pop()\n        sm += tmp ** 2\n        for i in range(tmp - 1, 0, -1):\n            if sm - (i ** 2) >= 0:\n                sm -= i ** 2\n                result.append(i)\n                if sm == 0:\n                    r = map(str, sorted(result))\n                    return \", \".join(r)\n    return \"Nothing\"\n\na=aux(argv[1:][0])\nprint a\n'\ndecompose () {\n    echo `python -c \"$aux\" \"$1\"`\n}\ndecompose \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336772,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef aux(m):\n    n = int(m)\n    sm = 0\n    result = [n]\n    while (len(result)):\n        tmp = result.pop()\n        sm += tmp ** 2\n        for i in range(tmp - 1, 0, -1):\n            if sm - (i ** 2) >= 0:\n                sm -= i ** 2\n                result.append(i)\n                if sm == 0:\n                    r = map(str, sorted(result))\n                    return \", \".join(r)\n    return \"Nothing\"\n\na=aux(argv[1:][0])\nprint a\n'\ndecompose () {\n    echo `python -c \"$aux\" \"$1\"`\n}\ndecompose \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336773,"user_id":null,"body":"# decompose returns a string with the decomposition or \"Nothing\"\nawk -vx=\"$1\" 'function f(n,m,i) { if (n==0) return 1; sq=int(sqrt(n)); for (i=sq<m?sq:m; i>=1; --i) { a[an++]=i; if (f(n-i*i, i-1)) return 1; --an; } return 0; } BEGIN{an=1; if (f(x*x, x-1)) { printf a[an-1]; for (i=an-2; i>=1; --i) printf \", \" a[i]; print \"\" } else print \"Nothing\"}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336774,"user_id":null,"body":"# decompose returns a string with the decomposition or \"Nothing\"\n#!\/bin\/bash\n\ndec () {\n  local max=$1\n  local sum=$2\n  if ((sum < 1 || max < 1)); then return; fi\n  if ((sum == 1)); then\n    echo \"1, \"\n    return\n  fi\n  \n  local sumsqrt=$(bc -l <<< \"scale=0; sqrt($sum)\")\n  for ((i=(max < sumsqrt ? max : sumsqrt); i>1; --i)); do\n    local diff=$((sum - i*i))\n    if (( diff == 0)); then\n      echo \"$i, \"\n      return\n    elif ((diff > 0)); then\n      local r=$(dec $(( i - 1 )) $diff )\n      if [[ -n $r ]]; then\n        echo \"$r $i, \";\n        return;\n      fi\n    fi\n  done\n}\n\ndecompose () {\n    i=$1\n    result=$(dec $(( i - 1 )) $(( i * i )) )\n    [[ -n $result ]] && echo ${result%,*} || echo \"Nothing\"\n}\n\ndecompose \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336775,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\nresult=()\n\nresult_push () {\n\tresult=(\"$1\" \"${result[@]}\")\n}\n\nresult_drop() {\n\tresult=(\"${result[@]:1}\")\n}\n\ndecompose () {\n\tlocal remains=$1\n\tlocal maxk=$2\n\t((remains != 0)) || return 0\n\tlocal k\n\tk=$(bc <<<\"sqrt($remains)\")\n\t((k < maxk)) || ((k = maxk))\n\twhile ((k > 0)); do\n\t\tresult_push \"$k\"\n\t\tif decompose $((remains - k * k)) $((k - 1)); then\n\t\t\treturn 0\n\t\tfi\n\t\tresult_drop\n\t\t((k--))\n\tdone\n\treturn 1\n}\n\nif decompose \"$(($1 * $1))\" $(($1 - 1)); then\n\tprintf '%s\n' \"${result[@]}\" | paste -s -d, | sed 's\/,\/, \/g'\nelse\n\techo Nothing\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336776,"user_id":null,"body":"# recursive function\n# inputs : N, max\n# outputs a list of strictly increasing integers, the sum of squares of which\n# equals N. These integers are the greatest possible, but strictly less than\n# max.\ngreatestSquaresForN () {\n    local N=$1\n    local max=$2\n    local i\n\n#    echo \"  call to gS\" $1 $2 >&2\n\n    if (( N == 0)); then return; fi\n\n    sqrt=$(bc <<< \"sqrt($N)\")   # sqrt <= real_square_root(N) < sqrt+1\n    if (( max > sqrt )); then (( max = sqrt+1 )); fi\n\n    for (( i = max-1; i > 0; i-- ))\n    do\n        i2=$(( i*i ))\n        if (( i2 == N )); then echo $i; return; fi\n        # trivial solution, else\n        squares=\"$( greatestSquaresForN $(( N - i2 )) $i )\"\n        if [[ $squares != \"Nothing\" ]]\n        # solution found\n        then\n            if [[ -n $squares ]]; then echo -n \"$squares, \"; fi\n            echo -n $i\n            return\n        fi\n        # else loop\n    done\n\n#    echo \"  gS\" $1 $2 \"is Nothing\" >&2\n    echo -n Nothing\n}\n\ngreatestSquaresForN $(( $1*$1 )) $1\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336777,"user_id":null,"body":"# decompose returns a string with the decomposition or \"Nothing\"\n#!\/bin\/bash\n\ndecomposeA () {\n        # takes integers A, xkp1\n        # returns 1 or more integers xk such that A=sum(xk**2)\n        # (xk) is strictly increasing, xk<xkp1\n        # (xk) is \"maximal\"\n        local A=$1\n        local xkp1=$2\n        local xk remainingArea\n        (( xkp1 == 1 )) && { echo \"Nothing\"; return; }\n        ((    A == 1 )) && { echo  1;        return; }\n        local start=$(bc <<< \"sqrt($A)+1\")\n        (( start >= xkp1 )) && (( start = xkp1 -1 ))\n        for (( xk=start; xk>0; xk-- )); do\n                (( remainingArea =  A - xk*xk ))\n                (( remainingArea <  0 )) && continue\n                (( remainingArea == 0 )) && { echo $xk; return; }\n                try=\"$(decomposeA $remainingArea $xk)\"\n                if [[ \"$try\" != \"Nothing\" ]]; then\n                        echo \"$try, $xk\"\n                        return\n                fi\n        done\n        echo \"Nothing\"\n}\n\ndecomposeA $(($1*$1)) $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336778,"user_id":null,"body":"#!\/bin\/bash\n# \"to go up, you must go down.\" - find squares to sum up to a greater square\/number.\n# from sqrt(input) going down to get a ceil values for continously increasing series.\n# recursive shell. uses bc instead of bash(newton). comes w an xtra if in tngled check :)\n\nsumsquared(){\n\tdeclare -i sum=$1 num=$2;\n\tif [ \"$1\" -le 2 ]; then return 1; fi;\n\n\tfor ((;num>1;num--)); do\n\t\tdeclare -i d=$((sum-(num**2))); if [ $d -lt 0 ]; then continue; fi\n\t\tdeclare rd; rd=\"$(echo \"scale=3;sqrt($d)\"|bc)\"\n\n\t\tif [ \"${rd##*.}\" == \"000\" ]||[ \"$rd\" == \"1\" ]; then\n\t\t\tif [ \"$num\" -gt \"${rd%%.*}\" ]; then\n\t\t\t\tprintf \"%d,\n%d,\n\" \"${rd%%.*}\" \"${num}\"; return 0; fi\n\t\t\treturn 1; fi;\n\t\tif [ \"$num\" -le \"${rd%%.*}\" ]; then\t return 1; fi\n\t\tif (sumsquared  $d \"${rd%%.*}\"); then printf \"%d,\n\" \"${num}\"; return 0; fi\n\tdone; return 1; }\n\nrun() {\n\tif [ \"$1\" -le 2 ] || [ \"$1\" -eq 4 ]; then echo \"Nothing\"\n\telse sumsquared $(($1**2)) $(($1-1))| sort -n| tr \"\n\" \" \"| sed \"s|, $||g\"; echo ; fi; }\n\ntest(){ for ((i=\"${1:-50}\";i>0;i--)); do echo -n \"$i: \"; run $i; done ; }\n\nrun $*\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"55031bba8cba40ada90011c4":[{"id":336779,"user_id":1045,"body":"#!\/bin\/bash\nis_sum_of_cubes () {\n  declare -a arr=($(echo \"$1\"|grep -oE '[[:digit:]]{1,3}'))\n  declare -a res=(); tot=0\n  for i in ${arr[@]}; do\n    sum=$((${i:0:1}**3))\n    [ ! -z ${i:1:1} ] && sum=$((sum+${i:1:1}**3))\n    [ ! -z ${i:2:1} ] && sum=$((sum+${i:2:1}**3))\n    if (( $sum == $i )); then res+=($(printf \"%d\" $i)); fi\n    done\n  (( ${#res[*]} == 0 )) && echo \"Unlucky\" && exit\n  for i in ${res[@]}; do let tot=$tot+$i; done\n  echo \"${res[*]} $tot Lucky\"\n}\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336780,"user_id":492,"body":"#!\/bin\/bash\nsolDT='\nfrom sys import argv\nfrom re import findall\ndef sol(s):\n    numbers = findall(\"\\d{1,3}\", s)\n    cubic_numbers = [str(int(n)) for n in numbers if sum(int(d)**3 for d in n) == int(n)]\n    if not cubic_numbers: return \"Unlucky\"\n    else: return \" \".join(cubic_numbers + [str(sum(map(int, cubic_numbers))), \"Lucky\"])\na=sol(argv[1:][0])\nprint a\n'\nis_sum_of_cubes () {\n    echo `python -c \"$solDT \" \"$1\"`\n}\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336781,"user_id":2390,"body":"#! \/bin\/bash\n\n# Transform stdin by deleting non-numeric input, separating long numerals into\n# numerals of no more than three digits, and putting each numeral on a new line.\nnormalise_input() {\n    sed -r 's\/[^0-9]*([0-9][0-9]?[0-9]?)[^0-9]*\/\\1\n\/g'\n}\n\nfind_cubics() {\n    awk '\n    BEGIN {\n        FS=\"\"\n    }\n    {\n        cube_sum = 0\n        if ($0 != \"\") {\n            for (i=1; i<=length($0); i++) {\n                cube_sum += $(i)^3\n            }\n            if (cube_sum == $0) {\n                printf \"%i \", $0\n                lucky_sum += $0\n                lucky = 1\n            }\n        }\n    }\n    END {\n        if (lucky) {\n            printf \"%i Lucky\", lucky_sum\n        }\n        else {\n            print \"Unlucky\"\n        }\n    }'\n}\n\necho \"$1\" | normalise_input | find_cubics","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336782,"user_id":null,"body":"#! \/bin\/bash\n\nis_cubic()\n{\n    # Return true if the sum of cubes of each digit is the number itself.\n\n    digits=$1\n\n    sum=0\n    for ((i = 0; i < ${#digits}; i++)); do\n        sum=$(($sum + ${digits:$i:1}**3))\n    done\n    [ $sum -eq $digits ] && true || false\n}\n\nis_sum_of_cubes()\n{\n    # Find hidden cubic numbers in string.\n\n    string=$1\n\n    digits=()\n    number=\n    for ((i = 0; i < ${#string}; i++)); do\n        c=${string[*]:$i:1}\n        if [[ $c =~ [[:digit:]] ]] && [ ${#number} -lt 3 ]; then\n            number+=$c\n        elif [ -n \"$number\" ]; then\n            digits+=($(echo $number | bc))\n            [[ $c =~ [[:digit:]] ]] && number=$c || number=\n        fi\n    done\n    [ -n \"$number\" ] && digits+=($(echo $number | bc))\n\n    cubic=()\n    for d in ${digits[*]}; do is_cubic $d && cubic+=($d); done\n    if [ -n \"${cubic[*]}\" ]; then\n        echo \"${cubic[*]} $(echo ${cubic[*]} | sed s'\/ \/+\/g' | bc) Lucky\"\n    else\n        echo Unlucky\n    fi\n}\n\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336783,"user_id":635,"body":"#!\/bin\/bash\nis_sum_of_cubes () {\na=$1;\ntotalsum=0;\nb=($(echo $a | grep -oE '[0-9]+'))\nc=\"\";\nd=();\nfor(( i = 0; i < ${#b[@]}; i++ ))\ndo\n  c=\"${b[i]}\"\n  len=$(expr length $c)\n  if [[ $len -gt 3 ]]\n  then\n    d+=( $(echo $c | sed -r 's\/(.{3})\/\\1\\ \/g') )\n  else\n    d+=($(echo $c));\n  fi  \n\ndone\n\nfor(( i = 0; i < ${#d[@]}; i++ ))\ndo\n  sum=0;\n  c=${d[i]};\n  len=$(expr length ${c})\n  \n  for(( j = 0; j < len; j++ ))\n  do  \n    sum=$((${c:j:1}**3+sum));\n  done\n\n  if [[ $sum -eq $c ]]\n  then\n    final+=$sum\" \"\n    totalsum=$((sum+totalsum))\n  fi  \n\ndone\n\nfinalLen=${#final}\nif [[ $finalLen -eq 0 ]]\nthen\n  final=\"Unlucky\";\nelse\n  final+=$totalsum;\n  final+=\" Lucky\";\nfi\n\n\necho $final;\n}\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336784,"user_id":null,"body":"#!\/bin\/bash\n\ncubic () {\n  local n=\"$1\"\n  local sum=0\n  for ((i = 0; i < ${#n}; i++)); do\n    ((sum += ${n:i:1} ** 3))\n  done\n  return $((sum != n))\n}\n\nis_sum_of_cubes () {\n  # your code\n  local lucky=\"\"\n  local sum=0\n  while read; do\n    n=$(bc <<< \"$REPLY\")\n    if cubic $n; then\n      lucky=$lucky\" $n\"\n      ((sum += $n))\n    fi\n  done <<< $(grep -o '[[:digit:]]\\{3\\}\\|[[:digit:]]\\{1,2\\}' <<< \"$1\")\n  \n  if [[ -n \"$lucky\" ]]; then\n    echo \"$lucky $sum Lucky\"\n  else\n    echo Unlucky\n  fi\n}\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336785,"user_id":null,"body":"#!\/bin\/bash\nis_cubes_or_not () {\n    local temp\n    [[ \"$1\" == \"\" ]] && echo 0 && return\n    for ((i=1; i <= \"${#1}\"; i++)); do\n        [[ ! ${1:i-1:1} =~ [0-9] ]] && continue\n        temp=$((${temp:-0} + ${1:i-1:1}**3))\n    done\n    (( ${temp:-0} == \"${1}\" )) && echo 1 || echo 0\n}\nis_sum_of_cubes () {\n    local out\n    local sum\n    for i in ${1\/\/[a-zA-Z&\\.\\(\\)#,\\?\\_\\-\\\/*=]\/ }; do\n        for ((j=1; j <= ${#i}; j+=3)); do\n            if (($(is_cubes_or_not \"${i:j-1:3}\"))); then\n                out=\"${out:-} \"\"$((${i:j-1:3}+0))\" # 000 -> 0\n                sum=\"$((${sum:-0} + ${i:j-1:3}))\"\n            fi\n        done\n    done\n    if [[ -v out ]]; then\n        echo \"$out $sum Lucky\"\n    else\n        echo \"Unlucky\"\n    fi\n}\nis_sum_of_cubes \"$1\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336786,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\n# Enable regex in parameter expansion\nshopt -s extglob\n\nisSumOfCubes ()\n{\n    # Remove non-number and replace with a space\n    local -a -- numberGroups=( ${1\/\/[^0-9]\/ } )\n    local -a -- shortNumbers=()\n    local -a -- cubes=()\n\n    local -- number=\n    local -- sum=0\n    local -- state=\"Unlucky\"\n    local -- ten=\n    local -- unit=\n\n    for number in \"${numberGroups[@]}\"\n    do\n        # If the number is greater than three characters, split into groups of three or less\n        (( ${#number} > 3 )) && printf -v number '%s%s%s ' ${number\/\/*(.)\/ }\n        shortNumbers+=( $number )\n    done\n\n    for number in \"${shortNumbers[@]}\"\n    do\n        # Remove leading zeros\n        number=${number##+(0)}\n        # Null coalesce to zero\n        number=${number:-0}\n        # Extract the second and third characters to null coalesce again in the condition\n        ten=${number:1:1}\n        unit=${number:2:1}\n\n        if (( $number == (${number:0:1} ** 3) + (${ten:-0} ** 3) + (${unit:-0} ** 3) ))\n        then\n            # If hidden cubic, prepare the output statement\n            cubes+=( $number )\n            (( sum += $number ))\n            state=\"Lucky\"\n        fi\n    done\n\n    # If hidden cubic number found, print them and the sum\n    (( ${#cubes[@]} )) && printf '%s %s ' \"${cubes[*]}\" $sum\n    printf '%s\n' \"$state\"\n}\n\nisSumOfCubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336787,"user_id":null,"body":"#!\/bin\/bash\n\nshopt -s extglob\n\nis_sum_of_cubes () {\n    declare -a array2\n\n    array2=()\n    num=$1\n    contador=0\n\n    divide () {\n        num=$1\n        if [[ ${#num} -gt 3 ]]\n        then\n            echo \"${num:0:3}\"\n            divide \"${num:3}\"\n        else\n            echo \"$num\"\n        fi\n    }\n\n    separated=$(echo \"${num}\" | grep -o -E '[0-9]+')\n    array=$(echo \"${separated}\" | sed -e '\/^[0-9]*$\/!d')\n    #echo \"array: ${array}\"\n\n    for i in ${array}\n    do\n    #    echo \"i: $i\"\n        if [[ ${#i} -gt 3 ]]\n        then\n            array2[$contador]=${i:0:3}\n            (( contador++ ))\n            array2[$contador]=$(divide \"${i:3}\")\n            (( contador++ ))\n        else\n            array2[$contador]=$i\n            (( contador++ ))\n        fi\n    done\n\n    #echo -e \"\ntotal: ${array2[*]}\"\n\n    for old_cypher in ${array2[*]}\n    do\n        sum_cube=0\n        if [[ $old_cypher == 000 || $old_cypher == 00 || $old_cypher == 0 ]]\n        then\n            cypher=0\n        else\n            cypher=${old_cypher##+(0)}\n        fi\n        \n#        echo \"cypher es: $cypher\"\n\n        for (( cont=0; cont<${#cypher}; cont++ ))\n        do\n            digit=${cypher:$cont:1}\n            cube=$(( \"$digit\" * \"$digit\" * \"$digit\" ))\n    #        echo \"cube of $digit: $cube\"\n            (( sum_cube += cube ))\n        done\n    #    echo \"suma: $sum_cube\"\n        if [[ $cypher -eq $sum_cube ]]\n        then\n            (( sum_total += $cypher ))\n            if [[ -z $los_lucky ]]\n            then\n                los_lucky=\"$cypher\"\n            else\n                los_lucky=\"$los_lucky $cypher\"\n            fi\n        fi\n    done\n\n    if [[ -n $los_lucky ]]\n    then\n        echo \"$los_lucky $sum_total Lucky\"\n    else\n        echo \"Unlucky\"\n    fi\n}\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336788,"user_id":null,"body":"#!\/bin\/bash\nis_sum_of_cubes () {\n    strLen=${#1}\n    j=0\n    previousVal=\"\"\n    firstFinalStr=\"\"\n    tempStr=\"\"\n    push=0\n    for (( i = 0; i < $((strLen + 1)) ; i++ )); do\n        char=\"${1:i:1}\"\n        if [[ $char == [[:digit:]] ]]; then\n            if [[ $char == 0 && ($previousVal == 0 || $previousVal == \"\") && $j == 2 ]]; then\n                tempStr+=\"0 \"\n                addReset 0 \"reset\"\n                push=1\n\n            elif [[ $char == 0 && ($previousVal == 0 || $previousVal == \"\") && $j != 2 ]]; then\n                push=0\n                j=$((j+1))\n\n            elif [[ $char == 0 && $previousVal =~ [1-9] ]]; then\n                if [[ \"${j}\" == 2 ]]; then\n                    addReset 0 \"reset\"\n                elif [[ \"${j}\" == 1 ]]; then\n                    tempStr+=\"0 \"\n                    j=$((j+1))\n                elif [[ $j == 0 ]]; then\n                    push=0\n                    j=$((j+1))\n                fi\n                push=1\n\n            elif [[ \"${char}\" =~ [1-9] && $j == 2 ]]; then\n                tempStr+=\"${char} \"\n                addReset 0 \"reset\"\n                push=1\n            elif [[ \"${char}\" =~ [1-9] && $j != 2 ]]; then\n                tempStr=$(echo ${tempStr\/\/[[:blank:]]\/})\n                tempStr+=\"${char} \"\n                previousVal=\"\"\n                j=$((j+1))\n            fi\n\n        elif [[ \"${char}\" != [[:digit:]] || \"${char}\" == [[:space:]] ]]; then\n            if [[ $previousVal == 0 && $push == 0 ]]; then\n                tempStr+=\"0 \"\n            fi\n            if [[ \"${tempStr}\" != \"\" ]]; then\n                addReset \"char\" \"reset\"\n            fi\n            j=0\n            push=0\n        fi\n        # echo\n        previousVal=\"${char}\"\n    done\n    # add anything left hanging\n    firstFinalStr+=\" ${tempStr}\"\n\n    sum=0\n    cubedEach=0\n    tempStr=\"\"\n    lastFinalStr=\"\"\n    for (( i = 0; i < \"${#firstFinalStr}\"; i++ )); do\n        digit=${firstFinalStr:i:1}\n        if [[ \"${digit}\" != [[:space:]] ]]; then\n            cubedEach=$(awk -v var=\"${digit}\" 'BEGIN { print (var^3)}')\n            sum=$((sum + $cubedEach))\n            tempStr+=$digit\n\n        elif [[ \"${digit}\" == [[:space:]] ]]; then\n            if [[ \"${sum}\" == \"${tempStr}\" ]]; then\n                lastFinalStr+=\"$tempStr \"\n            fi\n            sum=0\n            tempStr=\"\"\n        fi\n    done\n\n    finalSum=$(sumDigits \"${lastFinalStr}\")\n    if [[ \"$lastFinalStr\" != \"\" ]]; then\n        echo \"${lastFinalStr}${finalSum} Lucky\"\n    else\n        echo \"Unlucky\"\n    fi\n}\nsumDigits(){\n    tempStr=\"\"\n    totalSum=0\n    for (( i = 0; i < ${#1} ; i++ )); do\n        digit=${1:i:1}\n        if [[ \"${digit}\" != [[:space:]] ]]; then\n            tempStr+=$digit\n        else\n            totalSum=$((tempStr + $totalSum))\n            tempStr=\"\"\n        fi\n    done\n    echo $totalSum\n\n}\naddReset(){\n    if [[ \"${1}\" == 0 && \"${2}\" == \"reset\" ]]; then\n        j=0\n        previousVal=\"\"\n        tempStr=$(echo ${tempStr\/\/[[:blank:]]\/})\n        firstFinalStr+=\" ${tempStr}\"\n        tempStr=\"\"\n    elif [[ \"${1}\" == \"char\" && \"${2}\" == \"reset\" ]]; then\n        tempStr=$(echo ${tempStr\/\/[[:blank:]]\/})\n        firstFinalStr+=\" ${tempStr}\"\n        tempStr=\"\"\n    fi\n}\nis_sum_of_cubes \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"550498447451fbbd7600041c":[{"id":336789,"user_id":null,"body":"#parameters are strings; return \"true\" or \"false\" (see Sample Tests)\n#!\/bin\/bash\ncomp_same() {\n    \n[ \"`echo $1\"^2\" | sed \"s\/ \/\\^2\n\/g\" | bc | sort -n`\" = \"`echo $2 | tr ' ' '\n' | sort -n`\" ]  && echo true || echo false\n\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336790,"user_id":null,"body":"a1=$1\na2=$2\nfor s in $a1\ndo\n    result=\"${result} $(($s * $s))\"\ndone\nresult=$(echo $result | tr ' ' '\n' | sort | tr '\n' ' ')\na2=$(tr ' ' '\n' <<< $a2 | sort | tr '\n' ' ')\n\n[ \"$result\" = \"$a2\" ] && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336791,"user_id":492,"body":"#!\/bin\/bash\ncomp_same() {\n    a1=$1; a2=$2\n    for s in $a1; do\n        result=\"${result} $(($s * $s))\"\n    done\n    result=$(echo $result | tr ' ' '\n' | sort | tr '\n' ' ')\n    a2=$(echo $a2 | tr ' ' '\n' | sort | tr '\n' ' ')\n    if [ \"$result\" = \"$a2\" ]\n    then \n        echo \"true\" \n    else \n        echo \"false\" \n    fi\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336792,"user_id":null,"body":"#!\/bin\/bash\ncomp_same() {\n    a=$(echo $1 | xargs -n1 | xargs -I{} echo \"{}^2\" | bc | sort -g | xargs)\n    b=$(echo $2 | xargs -n1 | sort -g | xargs)\n    [ \"$a\" = \"$b\" ] && echo \"true\" || echo \"false\"\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336793,"user_id":null,"body":"#parameters are strings; return \"true\" or \"false\" (see Sample Tests)\n#!\/bin\/bash\ncomp_same() {\n    # your code\n    arr1=($1)\n    arr2=($2)\n    for (( i=0; i<=$((${#arr1[*]}-1)); i++))\n    do\n      arr1[$i]=$((arr1[$i] * arr1[$i]))\n    done\n    arr1=(`echo ${arr1[*]}| tr \" \" \"\n\" | sort -n | tr \"\n\" \" \"`)\n    arr2=(`echo ${arr2[*]}| tr \" \" \"\n\" | sort -n | tr \"\n\" \" \"`)\n    if [ \"${arr1[*]}\" == \"${arr2[*]}\" ]\n    then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n\n      \n    \n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336794,"user_id":492,"body":"#!\/bin\/bash\ncomp_same() {\n    a1=$1; a2=$2\n    for s in $a1; do\n        result=\"${result} $(($s * $s))\"\n    done\n    result=$(echo $result | tr ' ' '\n' | sort | tr '\n' ' ')\n    a2=$(echo $a2 | tr ' ' '\n' | sort | tr '\n' ' ')\n    if [ \"$result\" = \"$a2\" ]\n    then \n        echo \"true\" \n    else \n        echo \"false\" \n    fi\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336795,"user_id":null,"body":"#parameters are strings; return \"true\" or \"false\" (see Sample Tests)\n#!\/bin\/bash\nstr () {\n    echo \"$(echo $1 | fold -w1 | sort | tr -d '\n')\"\n}\n\ncomp_same() {\n\nIFS=', ' read -r -a array <<< \"$string\"\n\n    IFS=\" \" read -ra ROOTS <<< $1\n    IFS=\" \" read -ra SQUARES <<< $2\n    A=\"\"\n    B=\"\"\n    LEN=$((${#ROOTS[@]}-1))\n    #>&2 echo \"LEN=$LEN\"\n    \n    for i in `seq 0 $LEN`\n    do\n      #>&2 echo \"$i: ${ROOTS[$i]}\"\n      A=$A$((${ROOTS[$i]}*${ROOTS[$i]}))\n      B=$B${SQUARES[$i]}\n    done\n    \n    \n    A=$(str $A)\n    B=$(str $B)\n    >&2 echo \"A: $A\"\n    >&2 echo \"B: $B\"\n    \n   if [[ $A == $B ]]; then\n    echo \"true\"\n   else\n    echo \"false\"\n   fi\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336796,"user_id":null,"body":"#parameters are strings; return \"true\" or \"false\" (see Sample Tests)\n#!\/bin\/bash\ncomp_same() {\n    # convert $1 and $2 from string to arrays\n    read -a a <<< \"$1\"\n    read -a b <<< \"$2\"\n\n    # if array empty, return false\n    if [[ \"$a\" = \"\" || \"$b\" = \"\" ]]\n    then\n        echo false\n        exit\n    fi\n\n    # convert array 'a' into 'a squared'\n    for value in \"${a[@]}\"\n    do\n        asquared+=($(( $value*$value )))\n    done\n\n    # sort the arrays and return true if identical\n    if [[ $(diff <(printf '%d\n' \"${asquared[@]}\" | sort) <(printf '%d\n' \"${b[@]}\" | sort)) = \"\" ]]\n    then\n        echo true\n    else\n        echo false\n    fi\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336797,"user_id":null,"body":"#!\/bin\/bash\n\nset -eou pipefail\n\ncomp_same() {\n\nIF=' ' read -r -a a <<< $1\nIF=' ' read -r -a b <<< $2\n\nx=$(echo ${b[@]})\nfor i in ${a[@]}; do\n  y=$(echo \"$i^2\" | bc)\n  x=$(echo $x | sed \"s\/$y\/\/\")\ndone\n\nif [ -z $x ]; then\n  echo true\nelse\n  echo false\nfi\n\n}\ncomp \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336798,"user_id":null,"body":"#parameters are strings; return \"true\" or \"false\" (see Sample Tests)\n#!\/bin\/bash\na=(${1\/\/-\/}) # Turn negatives into positives, we're squaring anyway, and the sort doesn't like -\nb=($2)\n\nIFS=$'\n'\nsorted_a=($(sort -n <<< \"${a[*]}\"))\nsorted_b=($(sort -n <<< \"${b[*]}\"))\nunset IFS\n\nfor (( i=0; i < ${#sorted_a[@]}; i++ )); do\n  if [ \"${sorted_b[i]}\" != \"$(( ${sorted_a[i]} * ${sorted_a[i]} ))\" ]; then\n    echo \"false\"\n    exit\n  fi\ndone\n\necho \"true\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"550527b108b86f700000073f":[{"id":336799,"user_id":null,"body":"iterPi() {\n  constPi='3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706'\n  (( $(echo \"$constPi - 2.6666666667 < $1 && 2.6666666667 - $constPi < $1\" | bc -l) )) && echo \"2 2.6666666667\" && exit\n  (( $(echo \"$constPi - 3.4666666667 < $1 && 3.4666666667 - $constPi < $1\" | bc -l) )) && echo \"3 3.4666666667\" && exit\n  (( $(echo \"$constPi - 2.8952380952 < $1 && 2.8952380952 - $constPi < $1\" | bc -l) )) && echo \"4 2.8952380952\" && exit\n  (( $(echo \"$constPi - 3.3396825397 < $1 && 3.3396825397 - $constPi < $1\" | bc -l) )) && echo \"5 3.3396825397\" && exit\n  (( $(echo \"$constPi - 2.9760461760 < $1 && 2.9760461760 - $constPi < $1\" | bc -l) )) && echo \"6 2.9760461760\" && exit\n  (( $(echo \"$constPi - 3.2837384837 < $1 && 3.2837384837 - $constPi < $1\" | bc -l) )) && echo \"7 3.2837384837\" && exit\n  (( $(echo \"$constPi - 3.0170718171 < $1 && 3.0170718171 - $constPi < $1\" | bc -l) )) && echo \"8 3.0170718171\" && exit\n  (( $(echo \"$constPi - 3.2523659347 < $1 && 3.2523659347 - $constPi < $1\" | bc -l) )) && echo \"9 3.2523659347\" && exit\n  (( $(echo \"$constPi - 3.0418396189 < $1 && 3.0418396189 - $constPi < $1\" | bc -l) )) && echo \"10 3.0418396189\" && exit\n  (( $(echo \"$constPi - 3.2323158094 < $1 && 3.2323158094 - $constPi < $1\" | bc -l) )) && echo \"11 3.2323158094\" && exit\n  (( $(echo \"$constPi - 3.0584027659 < $1 && 3.0584027659 - $constPi < $1\" | bc -l) )) && echo \"12 3.0584027659\" && exit\n  (( $(echo \"$constPi - 3.2184027659 < $1 && 3.2184027659 - $constPi < $1\" | bc -l) )) && echo \"13 3.2184027659\" && exit\n  (( $(echo \"$constPi - 3.0702546178 < $1 && 3.0702546178 - $constPi < $1\" | bc -l) )) && echo \"14 3.0702546178\" && exit\n  (( $(echo \"$constPi - 3.2081856523 < $1 && 3.2081856523 - $constPi < $1\" | bc -l) )) && echo \"15 3.2081856523\" && exit\n  (( $(echo \"$constPi - 3.0791533942 < $1 && 3.0791533942 - $constPi < $1\" | bc -l) )) && echo \"16 3.0791533942\" && exit\n  (( $(echo \"$constPi - 3.2003655154 < $1 && 3.2003655154 - $constPi < $1\" | bc -l) )) && echo \"17 3.2003655154\" && exit\n  (( $(echo \"$constPi - 3.0860798011 < $1 && 3.0860798011 - $constPi < $1\" | bc -l) )) && echo \"18 3.0860798011\" && exit\n  (( $(echo \"$constPi - 3.1941879092 < $1 && 3.1941879092 - $constPi < $1\" | bc -l) )) && echo \"19 3.1941879092\" && exit\n  (( $(echo \"$constPi - 3.0916238067 < $1 && 3.0916238067 - $constPi < $1\" | bc -l) )) && echo \"20 3.0916238067\" && exit\n  (( $(echo \"$constPi - 3.1891847823 < $1 && 3.1891847823 - $constPi < $1\" | bc -l) )) && echo \"21 3.1891847823\" && exit\n  (( $(echo \"$constPi - 3.0961615265 < $1 && 3.0961615265 - $constPi < $1\" | bc -l) )) && echo \"22 3.0961615265\" && exit\n  (( $(echo \"$constPi - 3.1850504154 < $1 && 3.1850504154 - $constPi < $1\" | bc -l) )) && echo \"23 3.1850504154\" && exit\n  (( $(echo \"$constPi - 3.0999440324 < $1 && 3.0999440324 - $constPi < $1\" | bc -l) )) && echo \"24 3.0999440324\" && exit\n  (( $(echo \"$constPi - 3.1815766854 < $1 && 3.1815766854 - $constPi < $1\" | bc -l) )) && echo \"25 3.1815766854\" && exit\n  (( $(echo \"$constPi - 3.1031453129 < $1 && 3.1031453129 - $constPi < $1\" | bc -l) )) && echo \"26 3.1031453129\" && exit\n  (( $(echo \"$constPi - 3.1786170110 < $1 && 3.1786170110 - $constPi < $1\" | bc -l) )) && echo \"27 3.1786170110\" && exit\n  (( $(echo \"$constPi - 3.1058897383 < $1 && 3.1058897383 - $constPi < $1\" | bc -l) )) && echo \"28 3.1058897383\" && exit\n  (( $(echo \"$constPi - 3.1760651769 < $1 && 3.1760651769 - $constPi < $1\" | bc -l) )) && echo \"29 3.1760651769\" && exit\n  (( $(echo \"$constPi - 3.1082685667 < $1 && 3.1082685667 - $constPi < $1\" | bc -l) )) && echo \"30 3.1082685667\" && exit\n  (( $(echo \"$constPi - 3.1738423372 < $1 && 3.1738423372 - $constPi < $1\" | bc -l) )) && echo \"31 3.1738423372\" && exit\n  (( $(echo \"$constPi - 3.1103502737 < $1 && 3.1103502737 - $constPi < $1\" | bc -l) )) && echo \"32 3.1103502737\" && exit\n  (( $(echo \"$constPi - 3.1718887352 < $1 && 3.1718887352 - $constPi < $1\" | bc -l) )) && echo \"33 3.1718887352\" && exit\n  (( $(echo \"$constPi - 3.1121872427 < $1 && 3.1121872427 - $constPi < $1\" | bc -l) )) && echo \"34 3.1121872427\" && exit\n  (( $(echo \"$constPi - 3.1701582572 < $1 && 3.1701582572 - $constPi < $1\" | bc -l) )) && echo \"35 3.1701582572\" && exit\n  (( $(echo \"$constPi - 3.1138202290 < $1 && 3.1138202290 - $constPi < $1\" | bc -l) )) && echo \"36 3.1138202290\" && exit\n  (( $(echo \"$constPi - 3.1686147496 < $1 && 3.1686147496 - $constPi < $1\" | bc -l) )) && echo \"37 3.1686147496\" && exit\n  (( $(echo \"$constPi - 3.1152814162 < $1 && 3.1152814162 - $constPi < $1\" | bc -l) )) && echo \"38 3.1152814162\" && exit\n  (( $(echo \"$constPi - 3.1672294682 < $1 && 3.1672294682 - $constPi < $1\" | bc -l) )) && echo \"39 3.1672294682\" && exit\n  (( $(echo \"$constPi - 3.1165965568 < $1 && 3.1165965568 - $constPi < $1\" | bc -l) )) && echo \"40 3.1165965568\" && exit\n  (( $(echo \"$constPi - 3.1659792728 < $1 && 3.1659792728 - $constPi < $1\" | bc -l) )) && echo \"41 3.1659792728\" && exit\n  (( $(echo \"$constPi - 3.1177865018 < $1 && 3.1177865018 - $constPi < $1\" | bc -l) )) && echo \"42 3.1177865018\" && exit\n  (( $(echo \"$constPi - 3.1648453253 < $1 && 3.1648453253 - $constPi < $1\" | bc -l) )) && echo \"43 3.1648453253\" && exit\n  (( $(echo \"$constPi - 3.1188683138 < $1 && 3.1188683138 - $constPi < $1\" | bc -l) )) && echo \"44 3.1188683138\" && exit\n  (( $(echo \"$constPi - 3.1638121340 < $1 && 3.1638121340 - $constPi < $1\" | bc -l) )) && echo \"45 3.1638121340\" && exit\n  (( $(echo \"$constPi - 3.1198560901 < $1 && 3.1198560901 - $constPi < $1\" | bc -l) )) && echo \"46 3.1198560901\" && exit\n  (( $(echo \"$constPi - 3.1628668428 < $1 && 3.1628668428 - $constPi < $1\" | bc -l) )) && echo \"47 3.1628668428\" && exit\n  (( $(echo \"$constPi - 3.1207615796 < $1 && 3.1207615796 - $constPi < $1\" | bc -l) )) && echo \"48 3.1207615796\" && exit\n  (( $(echo \"$constPi - 3.1619986930 < $1 && 3.1619986930 - $constPi < $1\" | bc -l) )) && echo \"49 3.1619986930\" && exit\n  (( $(echo \"$constPi - 3.1215946526 < $1 && 3.1215946526 - $constPi < $1\" | bc -l) )) && echo \"50 3.1215946526\" && exit\n  (( $(echo \"$constPi - 3.1611986130 < $1 && 3.1611986130 - $constPi < $1\" | bc -l) )) && echo \"51 3.1611986130\" && exit\n  (( $(echo \"$constPi - 3.1223636615 < $1 && 3.1223636615 - $constPi < $1\" | bc -l) )) && echo \"52 3.1223636615\" && exit\n  (( $(echo \"$constPi - 3.1604588996 < $1 && 3.1604588996 - $constPi < $1\" | bc -l) )) && echo \"53 3.1604588996\" && exit\n  (( $(echo \"$constPi - 3.1230757221 < $1 && 3.1230757221 - $constPi < $1\" | bc -l) )) && echo \"54 3.1230757221\" && exit\n  (( $(echo \"$constPi - 3.1597729698 < $1 && 3.1597729698 - $constPi < $1\" | bc -l) )) && echo \"55 3.1597729698\" && exit\n  (( $(echo \"$constPi - 3.1237369337 < $1 && 3.1237369337 - $constPi < $1\" | bc -l) )) && echo \"56 3.1237369337\" && exit\n  (( $(echo \"$constPi - 3.1591351638 < $1 && 3.1591351638 - $constPi < $1\" | bc -l) )) && echo \"57 3.1591351638\" && exit\n  (( $(echo \"$constPi - 3.1243525551 < $1 && 3.1243525551 - $constPi < $1\" | bc -l) )) && echo \"58 3.1243525551\" && exit\n  (( $(echo \"$constPi - 3.1585405893 < $1 && 3.1585405893 - $constPi < $1\" | bc -l) )) && echo \"59 3.1585405893\" && exit\n  (( $(echo \"$constPi - 3.1249271439 < $1 && 3.1249271439 - $constPi < $1\" | bc -l) )) && echo \"60 3.1249271439\" && exit\n  (( $(echo \"$constPi - 3.1579849952 < $1 && 3.1579849952 - $constPi < $1\" | bc -l) )) && echo \"61 3.1579849952\" && exit\n  (( $(echo \"$constPi - 3.1254646700 < $1 && 3.1254646700 - $constPi < $1\" | bc -l) )) && echo \"62 3.1254646700\" && exit\n  (( $(echo \"$constPi - 3.1574646700 < $1 && 3.1574646700 - $constPi < $1\" | bc -l) )) && echo \"63 3.1574646700\" && exit\n  (( $(echo \"$constPi - 3.1259686070 < $1 && 3.1259686070 - $constPi < $1\" | bc -l) )) && echo \"64 3.1259686070\" && exit\n  (( $(echo \"$constPi - 3.1569763589 < $1 && 3.1569763589 - $constPi < $1\" | bc -l) )) && echo \"65 3.1569763589\" && exit\n  (( $(echo \"$constPi - 3.1264420078 < $1 && 3.1264420078 - $constPi < $1\" | bc -l) )) && echo \"66 3.1264420078\" && exit\n  (( $(echo \"$constPi - 3.1565171957 < $1 && 3.1565171957 - $constPi < $1\" | bc -l) )) && echo \"67 3.1565171957\" && exit\n  (( $(echo \"$constPi - 3.1268875661 < $1 && 3.1268875661 - $constPi < $1\" | bc -l) )) && echo \"68 3.1268875661\" && exit\n  (( $(echo \"$constPi - 3.1560846464 < $1 && 3.1560846464 - $constPi < $1\" | bc -l) )) && echo \"69 3.1560846464\" && exit\n  (( $(echo \"$constPi - 3.1273076680 < $1 && 3.1273076680 - $constPi < $1\" | bc -l) )) && echo \"70 3.1273076680\" && exit\n  (( $(echo \"$constPi - 3.1556764623 < $1 && 3.1556764623 - $constPi < $1\" | bc -l) )) && echo \"71 3.1556764623\" && exit\n  (( $(echo \"$constPi - 3.1277044343 < $1 && 3.1277044343 - $constPi < $1\" | bc -l) )) && echo \"72 3.1277044343\" && exit\n  (( $(echo \"$constPi - 3.1552906412 < $1 && 3.1552906412 - $constPi < $1\" | bc -l) )) && echo \"73 3.1552906412\" && exit\n  (( $(echo \"$constPi - 3.1280797569 < $1 && 3.1280797569 - $constPi < $1\" | bc -l) )) && echo \"74 3.1280797569\" && exit\n  (( $(echo \"$constPi - 3.1549253945 < $1 && 3.1549253945 - $constPi < $1\" | bc -l) )) && echo \"75 3.1549253945\" && exit\n  (( $(echo \"$constPi - 3.1284353282 < $1 && 3.1284353282 - $constPi < $1\" | bc -l) )) && echo \"76 3.1284353282\" && exit\n  (( $(echo \"$constPi - 3.1545791191 < $1 && 3.1545791191 - $constPi < $1\" | bc -l) )) && echo \"77 3.1545791191\" && exit\n  (( $(echo \"$constPi - 3.1287726675 < $1 && 3.1287726675 - $constPi < $1\" | bc -l) )) && echo \"78 3.1287726675\" && exit\n  (( $(echo \"$constPi - 3.1542503745 < $1 && 3.1542503745 - $constPi < $1\" | bc -l) )) && echo \"79 3.1542503745\" && exit\n  (( $(echo \"$constPi - 3.1290931418 < $1 && 3.1290931418 - $constPi < $1\" | bc -l) )) && echo \"80 3.1290931418\" && exit\n  (( $(echo \"$constPi - 3.1539378623 < $1 && 3.1539378623 - $constPi < $1\" | bc -l) )) && echo \"81 3.1539378623\" && exit\n  (( $(echo \"$constPi - 3.1293979850 < $1 && 3.1293979850 - $constPi < $1\" | bc -l) )) && echo \"82 3.1293979850\" && exit\n  (( $(echo \"$constPi - 3.1536404092 < $1 && 3.1536404092 - $constPi < $1\" | bc -l) )) && echo \"83 3.1536404092\" && exit\n  (( $(echo \"$constPi - 3.1296883134 < $1 && 3.1296883134 - $constPi < $1\" | bc -l) )) && echo \"84 3.1296883134\" && exit\n  (( $(echo \"$constPi - 3.1533569525 < $1 && 3.1533569525 - $constPi < $1\" | bc -l) )) && echo \"85 3.1533569525\" && exit\n  (( $(echo \"$constPi - 3.1299651396 < $1 && 3.1299651396 - $constPi < $1\" | bc -l) )) && echo \"86 3.1299651396\" && exit\n  (( $(echo \"$constPi - 3.1530865269 < $1 && 3.1530865269 - $constPi < $1\" | bc -l) )) && echo \"87 3.1530865269\" && exit\n  (( $(echo \"$constPi - 3.1302293840 < $1 && 3.1302293840 - $constPi < $1\" | bc -l) )) && echo \"88 3.1302293840\" && exit\n  (( $(echo \"$constPi - 3.1528282541 < $1 && 3.1528282541 - $constPi < $1\" | bc -l) )) && echo \"89 3.1528282541\" && exit\n  (( $(echo \"$constPi - 3.1304818854 < $1 && 3.1304818854 - $constPi < $1\" | bc -l) )) && echo \"90 3.1304818854\" && exit\n  (( $(echo \"$constPi - 3.1525813329 < $1 && 3.1525813329 - $constPi < $1\" | bc -l) )) && echo \"91 3.1525813329\" && exit\n  (( $(echo \"$constPi - 3.1307234094 < $1 && 3.1307234094 - $constPi < $1\" | bc -l) )) && echo \"92 3.1307234094\" && exit\n  (( $(echo \"$constPi - 3.1523450310 < $1 && 3.1523450310 - $constPi < $1\" | bc -l) )) && echo \"93 3.1523450310\" && exit\n  (( $(echo \"$constPi - 3.1309546567 < $1 && 3.1309546567 - $constPi < $1\" | bc -l) )) && echo \"94 3.1309546567\" && exit\n  (( $(echo \"$constPi - 3.1521186778 < $1 && 3.1521186778 - $constPi < $1\" | bc -l) )) && echo \"95 3.1521186778\" && exit\n  (( $(echo \"$constPi - 3.1311762695 < $1 && 3.1311762695 - $constPi < $1\" | bc -l) )) && echo \"96 3.1311762695\" && exit\n  (( $(echo \"$constPi - 3.1519016581 < $1 && 3.1519016581 - $constPi < $1\" | bc -l) )) && echo \"97 3.1519016581\" && exit\n  (( $(echo \"$constPi - 3.1313888375 < $1 && 3.1313888375 - $constPi < $1\" | bc -l) )) && echo \"98 3.1313888375\" && exit\n  (( $(echo \"$constPi - 3.1516934061 < $1 && 3.1516934061 - $constPi < $1\" | bc -l) )) && echo \"99 3.1516934061\" && exit\n  (( $(echo \"$constPi - 3.1315929036 < $1 && 3.1315929036 - $constPi < $1\" | bc -l) )) && echo \"100 3.1315929036\" && exit\n  (( $(echo \"$constPi - 3.1514934011 < $1 && 3.1514934011 - $constPi < $1\" | bc -l) )) && echo \"101 3.1514934011\" && exit\n  (( $(echo \"$constPi - 3.1317889676 < $1 && 3.1317889676 - $constPi < $1\" | bc -l) )) && echo \"102 3.1317889676\" && exit\n  (( $(echo \"$constPi - 3.1513011627 < $1 && 3.1513011627 - $constPi < $1\" | bc -l) )) && echo \"103 3.1513011627\" && exit\n  (( $(echo \"$constPi - 3.1319774912 < $1 && 3.1319774912 - $constPi < $1\" | bc -l) )) && echo \"104 3.1319774912\" && exit\n  (( $(echo \"$constPi - 3.1511162472 < $1 && 3.1511162472 - $constPi < $1\" | bc -l) )) && echo \"105 3.1511162472\" && exit\n  (( $(echo \"$constPi - 3.1321589012 < $1 && 3.1321589012 - $constPi < $1\" | bc -l) )) && echo \"106 3.1321589012\" && exit\n  (( $(echo \"$constPi - 3.1509382439 < $1 && 3.1509382439 - $constPi < $1\" | bc -l) )) && echo \"107 3.1509382439\" && exit\n  (( $(echo \"$constPi - 3.1323335928 < $1 && 3.1323335928 - $constPi < $1\" | bc -l) )) && echo \"108 3.1323335928\" && exit\n  (( $(echo \"$constPi - 3.1507667725 < $1 && 3.1507667725 - $constPi < $1\" | bc -l) )) && echo \"109 3.1507667725\" && exit\n  (( $(echo \"$constPi - 3.1325019323 < $1 && 3.1325019323 - $constPi < $1\" | bc -l) )) && echo \"110 3.1325019323\" && exit\n  (( $(echo \"$constPi - 3.1506014798 < $1 && 3.1506014798 - $constPi < $1\" | bc -l) )) && echo \"111 3.1506014798\" && exit\n  (( $(echo \"$constPi - 3.1326642601 < $1 && 3.1326642601 - $constPi < $1\" | bc -l) )) && echo \"112 3.1326642601\" && exit\n  (( $(echo \"$constPi - 3.1504420379 < $1 && 3.1504420379 - $constPi < $1\" | bc -l) )) && echo \"113 3.1504420379\" && exit\n  (( $(echo \"$constPi - 3.1328208925 < $1 && 3.1328208925 - $constPi < $1\" | bc -l) )) && echo \"114 3.1328208925\" && exit\n  (( $(echo \"$constPi - 3.1502881414 < $1 && 3.1502881414 - $constPi < $1\" | bc -l) )) && echo \"115 3.1502881414\" && exit\n  (( $(echo \"$constPi - 3.1329721241 < $1 && 3.1329721241 - $constPi < $1\" | bc -l) )) && echo \"116 3.1329721241\" && exit\n  (( $(echo \"$constPi - 3.1501395061 < $1 && 3.1501395061 - $constPi < $1\" | bc -l) )) && echo \"117 3.1501395061\" && exit\n  (( $(echo \"$constPi - 3.1331182295 < $1 && 3.1331182295 - $constPi < $1\" | bc -l) )) && echo \"118 3.1331182295\" && exit\n  (( $(echo \"$constPi - 3.1499958666 < $1 && 3.1499958666 - $constPi < $1\" | bc -l) )) && echo \"119 3.1499958666\" && exit\n  (( $(echo \"$constPi - 3.1332594649 < $1 && 3.1332594649 - $constPi < $1\" | bc -l) )) && echo \"120 3.1332594649\" && exit\n  (( $(echo \"$constPi - 3.1498569753 < $1 && 3.1498569753 - $constPi < $1\" | bc -l) )) && echo \"121 3.1498569753\" && exit\n  (( $(echo \"$constPi - 3.1333960699 < $1 && 3.1333960699 - $constPi < $1\" | bc -l) )) && echo \"122 3.1333960699\" && exit\n  (( $(echo \"$constPi - 3.1497226006 < $1 && 3.1497226006 - $constPi < $1\" | bc -l) )) && echo \"123 3.1497226006\" && exit\n  (( $(echo \"$constPi - 3.1335282686 < $1 && 3.1335282686 - $constPi < $1\" | bc -l) )) && echo \"124 3.1335282686\" && exit\n  (( $(echo \"$constPi - 3.1495925256 < $1 && 3.1495925256 - $constPi < $1\" | bc -l) )) && echo \"125 3.1495925256\" && exit\n  (( $(echo \"$constPi - 3.1336562706 < $1 && 3.1336562706 - $constPi < $1\" | bc -l) )) && echo \"126 3.1336562706\" && exit\n  (( $(echo \"$constPi - 3.1494665473 < $1 && 3.1494665473 - $constPi < $1\" | bc -l) )) && echo \"127 3.1494665473\" && exit\n  (( $(echo \"$constPi - 3.1337802728 < $1 && 3.1337802728 - $constPi < $1\" | bc -l) )) && echo \"128 3.1337802728\" && exit\n  (( $(echo \"$constPi - 3.1493444751 < $1 && 3.1493444751 - $constPi < $1\" | bc -l) )) && echo \"129 3.1493444751\" && exit\n  (( $(echo \"$constPi - 3.1339004597 < $1 && 3.1339004597 - $constPi < $1\" | bc -l) )) && echo \"130 3.1339004597\" && exit\n  (( $(echo \"$constPi - 3.1492261302 < $1 && 3.1492261302 - $constPi < $1\" | bc -l) )) && echo \"131 3.1492261302\" && exit\n  (( $(echo \"$constPi - 3.1340170047 < $1 && 3.1340170047 - $constPi < $1\" | bc -l) )) && echo \"132 3.1340170047\" && exit\n  (( $(echo \"$constPi - 3.1491113443 < $1 && 3.1491113443 - $constPi < $1\" | bc -l) )) && echo \"133 3.1491113443\" && exit\n  (( $(echo \"$constPi - 3.1341300709 < $1 && 3.1341300709 - $constPi < $1\" | bc -l) )) && echo \"134 3.1341300709\" && exit\n  (( $(echo \"$constPi - 3.1489999594 < $1 && 3.1489999594 - $constPi < $1\" | bc -l) )) && echo \"135 3.1489999594\" && exit\n  (( $(echo \"$constPi - 3.1342398118 < $1 && 3.1342398118 - $constPi < $1\" | bc -l) )) && echo \"136 3.1342398118\" && exit\n  (( $(echo \"$constPi - 3.1488918264 < $1 && 3.1488918264 - $constPi < $1\" | bc -l) )) && echo \"137 3.1488918264\" && exit\n  (( $(echo \"$constPi - 3.1343463719 < $1 && 3.1343463719 - $constPi < $1\" | bc -l) )) && echo \"138 3.1343463719\" && exit\n  (( $(echo \"$constPi - 3.1487868051 < $1 && 3.1487868051 - $constPi < $1\" | bc -l) )) && echo \"139 3.1487868051\" && exit\n  (( $(echo \"$constPi - 3.1344498875 < $1 && 3.1344498875 - $constPi < $1\" | bc -l) )) && echo \"140 3.1344498875\" && exit\n  (( $(echo \"$constPi - 3.1486847630 < $1 && 3.1486847630 - $constPi < $1\" | bc -l) )) && echo \"141 3.1486847630\" && exit\n  (( $(echo \"$constPi - 3.1345504874 < $1 && 3.1345504874 - $constPi < $1\" | bc -l) )) && echo \"142 3.1345504874\" && exit\n  (( $(echo \"$constPi - 3.1485855751 < $1 && 3.1485855751 - $constPi < $1\" | bc -l) )) && echo \"143 3.1485855751\" && exit\n  (( $(echo \"$constPi - 3.1346482929 < $1 && 3.1346482929 - $constPi < $1\" | bc -l) )) && echo \"144 3.1346482929\" && exit\n  (( $(echo \"$constPi - 3.1484891233 < $1 && 3.1484891233 - $constPi < $1\" | bc -l) )) && echo \"145 3.1484891233\" && exit\n  (( $(echo \"$constPi - 3.1347434188 < $1 && 3.1347434188 - $constPi < $1\" | bc -l) )) && echo \"146 3.1347434188\" && exit\n  (( $(echo \"$constPi - 3.1483952960 < $1 && 3.1483952960 - $constPi < $1\" | bc -l) )) && echo \"147 3.1483952960\" && exit\n  (( $(echo \"$constPi - 3.1348359739 < $1 && 3.1348359739 - $constPi < $1\" | bc -l) )) && echo \"148 3.1348359739\" && exit\n  (( $(echo \"$constPi - 3.1483039874 < $1 && 3.1483039874 - $constPi < $1\" | bc -l) )) && echo \"149 3.1483039874\" && exit\n  (( $(echo \"$constPi - 3.1349260610 < $1 && 3.1349260610 - $constPi < $1\" | bc -l) )) && echo \"150 3.1349260610\" && exit\n  (( $(echo \"$constPi - 3.1482150975 < $1 && 3.1482150975 - $constPi < $1\" | bc -l) )) && echo \"151 3.1482150975\" && exit\n  (( $(echo \"$constPi - 3.1350137774 < $1 && 3.1350137774 - $constPi < $1\" | bc -l) )) && echo \"152 3.1350137774\" && exit\n  (( $(echo \"$constPi - 3.1481285315 < $1 && 3.1481285315 - $constPi < $1\" | bc -l) )) && echo \"153 3.1481285315\" && exit\n  (( $(echo \"$constPi - 3.1350992155 < $1 && 3.1350992155 - $constPi < $1\" | bc -l) )) && echo \"154 3.1350992155\" && exit\n  (( $(echo \"$constPi - 3.1480441994 < $1 && 3.1480441994 - $constPi < $1\" | bc -l) )) && echo \"155 3.1480441994\" && exit\n  (( $(echo \"$constPi - 3.1351824630 < $1 && 3.1351824630 - $constPi < $1\" | bc -l) )) && echo \"156 3.1351824630\" && exit\n  (( $(echo \"$constPi - 3.1479620157 < $1 && 3.1479620157 - $constPi < $1\" | bc -l) )) && echo \"157 3.1479620157\" && exit\n  (( $(echo \"$constPi - 3.1352636030 < $1 && 3.1352636030 - $constPi < $1\" | bc -l) )) && echo \"158 3.1352636030\" && exit\n  (( $(echo \"$constPi - 3.1478818996 < $1 && 3.1478818996 - $constPi < $1\" | bc -l) )) && echo \"159 3.1478818996\" && exit\n  (( $(echo \"$constPi - 3.1353427146 < $1 && 3.1353427146 - $constPi < $1\" | bc -l) )) && echo \"160 3.1353427146\" && exit\n  (( $(echo \"$constPi - 3.1478037738 < $1 && 3.1478037738 - $constPi < $1\" | bc -l) )) && echo \"161 3.1478037738\" && exit\n  (( $(echo \"$constPi - 3.1354198729 < $1 && 3.1354198729 - $constPi < $1\" | bc -l) )) && echo \"162 3.1354198729\" && exit\n  (( $(echo \"$constPi - 3.1477275652 < $1 && 3.1477275652 - $constPi < $1\" | bc -l) )) && echo \"163 3.1477275652\" && exit\n  (( $(echo \"$constPi - 3.1354951493 < $1 && 3.1354951493 - $constPi < $1\" | bc -l) )) && echo \"164 3.1354951493\" && exit\n  (( $(echo \"$constPi - 3.1476532040 < $1 && 3.1476532040 - $constPi < $1\" | bc -l) )) && echo \"165 3.1476532040\" && exit\n  (( $(echo \"$constPi - 3.1355686119 < $1 && 3.1355686119 - $constPi < $1\" | bc -l) )) && echo \"166 3.1355686119\" && exit\n  (( $(echo \"$constPi - 3.1475806239 < $1 && 3.1475806239 - $constPi < $1\" | bc -l) )) && echo \"167 3.1475806239\" && exit\n  (( $(echo \"$constPi - 3.1356403254 < $1 && 3.1356403254 - $constPi < $1\" | bc -l) )) && echo \"168 3.1356403254\" && exit\n  (( $(echo \"$constPi - 3.1475097616 < $1 && 3.1475097616 - $constPi < $1\" | bc -l) )) && echo \"169 3.1475097616\" && exit\n  (( $(echo \"$constPi - 3.1357103515 < $1 && 3.1357103515 - $constPi < $1\" | bc -l) )) && echo \"170 3.1357103515\" && exit\n  (( $(echo \"$constPi - 3.1474405568 < $1 && 3.1474405568 - $constPi < $1\" | bc -l) )) && echo \"171 3.1474405568\" && exit\n  (( $(echo \"$constPi - 3.1357787492 < $1 && 3.1357787492 - $constPi < $1\" | bc -l) )) && echo \"172 3.1357787492\" && exit\n  (( $(echo \"$constPi - 3.1473729521 < $1 && 3.1473729521 - $constPi < $1\" | bc -l) )) && echo \"173 3.1473729521\" && exit\n  (( $(echo \"$constPi - 3.1358455746 < $1 && 3.1358455746 - $constPi < $1\" | bc -l) )) && echo \"174 3.1358455746\" && exit\n  (( $(echo \"$constPi - 3.1473068927 < $1 && 3.1473068927 - $constPi < $1\" | bc -l) )) && echo \"175 3.1473068927\" && exit\n  (( $(echo \"$constPi - 3.1359108813 < $1 && 3.1359108813 - $constPi < $1\" | bc -l) )) && echo \"176 3.1359108813\" && exit\n  (( $(echo \"$constPi - 3.1472423260 < $1 && 3.1472423260 - $constPi < $1\" | bc -l) )) && echo \"177 3.1472423260\" && exit\n  (( $(echo \"$constPi - 3.1359747204 < $1 && 3.1359747204 - $constPi < $1\" | bc -l) )) && echo \"178 3.1359747204\" && exit\n  (( $(echo \"$constPi - 3.1471792022 < $1 && 3.1471792022 - $constPi < $1\" | bc -l) )) && echo \"179 3.1471792022\" && exit\n  (( $(echo \"$constPi - 3.1360371409 < $1 && 3.1360371409 - $constPi < $1\" | bc -l) )) && echo \"180 3.1360371409\" && exit\n  (( $(echo \"$constPi - 3.1471174733 < $1 && 3.1471174733 - $constPi < $1\" | bc -l) )) && echo \"181 3.1471174733\" && exit\n  (( $(echo \"$constPi - 3.1360981896 < $1 && 3.1360981896 - $constPi < $1\" | bc -l) )) && echo \"182 3.1360981896\" && exit\n  (( $(echo \"$constPi - 3.1470570937 < $1 && 3.1470570937 - $constPi < $1\" | bc -l) )) && echo \"183 3.1470570937\" && exit\n  (( $(echo \"$constPi - 3.1361579111 < $1 && 3.1361579111 - $constPi < $1\" | bc -l) )) && echo \"184 3.1361579111\" && exit\n  (( $(echo \"$constPi - 3.1469980195 < $1 && 3.1469980195 - $constPi < $1\" | bc -l) )) && echo \"185 3.1469980195\" && exit\n  (( $(echo \"$constPi - 3.1362163484 < $1 && 3.1362163484 - $constPi < $1\" | bc -l) )) && echo \"186 3.1362163484\" && exit\n  (( $(echo \"$constPi - 3.1469402089 < $1 && 3.1469402089 - $constPi < $1\" | bc -l) )) && echo \"187 3.1469402089\" && exit\n  (( $(echo \"$constPi - 3.1362735423 < $1 && 3.1362735423 - $constPi < $1\" | bc -l) )) && echo \"188 3.1362735423\" && exit\n  (( $(echo \"$constPi - 3.1468836219 < $1 && 3.1468836219 - $constPi < $1\" | bc -l) )) && echo \"189 3.1468836219\" && exit\n  (( $(echo \"$constPi - 3.1363295321 < $1 && 3.1363295321 - $constPi < $1\" | bc -l) )) && echo \"190 3.1363295321\" && exit\n  (( $(echo \"$constPi - 3.1468282198 < $1 && 3.1468282198 - $constPi < $1\" | bc -l) )) && echo \"191 3.1468282198\" && exit\n  (( $(echo \"$constPi - 3.1363843556 < $1 && 3.1363843556 - $constPi < $1\" | bc -l) )) && echo \"192 3.1363843556\" && exit\n  (( $(echo \"$constPi - 3.1467739660 < $1 && 3.1467739660 - $constPi < $1\" | bc -l) )) && echo \"193 3.1467739660\" && exit\n  (( $(echo \"$constPi - 3.1364380487 < $1 && 3.1364380487 - $constPi < $1\" | bc -l) )) && echo \"194 3.1364380487\" && exit\n  (( $(echo \"$constPi - 3.1467208250 < $1 && 3.1467208250 - $constPi < $1\" | bc -l) )) && echo \"195 3.1467208250\" && exit\n  (( $(echo \"$constPi - 3.1364906460 < $1 && 3.1364906460 - $constPi < $1\" | bc -l) )) && echo \"196 3.1364906460\" && exit\n  (( $(echo \"$constPi - 3.1466687630 < $1 && 3.1466687630 - $constPi < $1\" | bc -l) )) && echo \"197 3.1466687630\" && exit\n  (( $(echo \"$constPi - 3.1365421807 < $1 && 3.1365421807 - $constPi < $1\" | bc -l) )) && echo \"198 3.1365421807\" && exit\n  (( $(echo \"$constPi - 3.1466177475 < $1 && 3.1466177475 - $constPi < $1\" | bc -l) )) && echo \"199 3.1466177475\" && exit\n  (( $(echo \"$constPi - 3.1365926848 < $1 && 3.1365926848 - $constPi < $1\" | bc -l) )) && echo \"200 3.1365926848\" && exit\n  (( $(echo \"$constPi - 3.1465677472 < $1 && 3.1465677472 - $constPi < $1\" | bc -l) )) && echo \"201 3.1465677472\" && exit\n  (( $(echo \"$constPi - 3.1366421889 < $1 && 3.1366421889 - $constPi < $1\" | bc -l) )) && echo \"202 3.1366421889\" && exit\n  (( $(echo \"$constPi - 3.1465187321 < $1 && 3.1465187321 - $constPi < $1\" | bc -l) )) && echo \"203 3.1465187321\" && exit\n  (( $(echo \"$constPi - 3.1366907223 < $1 && 3.1366907223 - $constPi < $1\" | bc -l) )) && echo \"204 3.1366907223\" && exit\n  (( $(echo \"$constPi - 3.1464706734 < $1 && 3.1464706734 - $constPi < $1\" | bc -l) )) && echo \"205 3.1464706734\" && exit\n  (( $(echo \"$constPi - 3.1367383133 < $1 && 3.1367383133 - $constPi < $1\" | bc -l) )) && echo \"206 3.1367383133\" && exit\n  (( $(echo \"$constPi - 3.1464235433 < $1 && 3.1464235433 - $constPi < $1\" | bc -l) )) && echo \"207 3.1464235433\" && exit\n  (( $(echo \"$constPi - 3.1367849891 < $1 && 3.1367849891 - $constPi < $1\" | bc -l) )) && echo \"208 3.1367849891\" && exit\n  (( $(echo \"$constPi - 3.1463773152 < $1 && 3.1463773152 - $constPi < $1\" | bc -l) )) && echo \"209 3.1463773152\" && exit\n  (( $(echo \"$constPi - 3.1368307758 < $1 && 3.1368307758 - $constPi < $1\" | bc -l) )) && echo \"210 3.1368307758\" && exit\n  (( $(echo \"$constPi - 3.1463319635 < $1 && 3.1463319635 - $constPi < $1\" | bc -l) )) && echo \"211 3.1463319635\" && exit\n  (( $(echo \"$constPi - 3.1368756987 < $1 && 3.1368756987 - $constPi < $1\" | bc -l) )) && echo \"212 3.1368756987\" && exit\n  (( $(echo \"$constPi - 3.1462874634 < $1 && 3.1462874634 - $constPi < $1\" | bc -l) )) && echo \"213 3.1462874634\" && exit\n  (( $(echo \"$constPi - 3.1369197819 < $1 && 3.1369197819 - $constPi < $1\" | bc -l) )) && echo \"214 3.1369197819\" && exit\n  (( $(echo \"$constPi - 3.1462437912 < $1 && 3.1462437912 - $constPi < $1\" | bc -l) )) && echo \"215 3.1462437912\" && exit\n  (( $(echo \"$constPi - 3.1369630488 < $1 && 3.1369630488 - $constPi < $1\" | bc -l) )) && echo \"216 3.1369630488\" && exit\n  (( $(echo \"$constPi - 3.1462009241 < $1 && 3.1462009241 - $constPi < $1\" | bc -l) )) && echo \"217 3.1462009241\" && exit\n  (( $(echo \"$constPi - 3.1370055218 < $1 && 3.1370055218 - $constPi < $1\" | bc -l) )) && echo \"218 3.1370055218\" && exit\n  (( $(echo \"$constPi - 3.1461588398 < $1 && 3.1461588398 - $constPi < $1\" | bc -l) )) && echo \"219 3.1461588398\" && exit\n  (( $(echo \"$constPi - 3.1370472225 < $1 && 3.1370472225 - $constPi < $1\" | bc -l) )) && echo \"220 3.1370472225\" && exit\n  (( $(echo \"$constPi - 3.1461175173 < $1 && 3.1461175173 - $constPi < $1\" | bc -l) )) && echo \"221 3.1461175173\" && exit\n  (( $(echo \"$constPi - 3.1370881719 < $1 && 3.1370881719 - $constPi < $1\" | bc -l) )) && echo \"222 3.1370881719\" && exit\n  (( $(echo \"$constPi - 3.1460769360 < $1 && 3.1460769360 - $constPi < $1\" | bc -l) )) && echo \"223 3.1460769360\" && exit\n  (( $(echo \"$constPi - 3.1371283901 < $1 && 3.1371283901 - $constPi < $1\" | bc -l) )) && echo \"224 3.1371283901\" && exit\n  (( $(echo \"$constPi - 3.1460370761 < $1 && 3.1460370761 - $constPi < $1\" | bc -l) )) && echo \"225 3.1460370761\" && exit\n  (( $(echo \"$constPi - 3.1371678965 < $1 && 3.1371678965 - $constPi < $1\" | bc -l) )) && echo \"226 3.1371678965\" && exit\n  (( $(echo \"$constPi - 3.1459979186 < $1 && 3.1459979186 - $constPi < $1\" | bc -l) )) && echo \"227 3.1459979186\" && exit\n  (( $(echo \"$constPi - 3.1372067098 < $1 && 3.1372067098 - $constPi < $1\" | bc -l) )) && echo \"228 3.1372067098\" && exit\n  (( $(echo \"$constPi - 3.1459594450 < $1 && 3.1459594450 - $constPi < $1\" | bc -l) )) && echo \"229 3.1459594450\" && exit\n  (( $(echo \"$constPi - 3.1372448480 < $1 && 3.1372448480 - $constPi < $1\" | bc -l) )) && echo \"230 3.1372448480\" && exit\n  (( $(echo \"$constPi - 3.1459216376 < $1 && 3.1459216376 - $constPi < $1\" | bc -l) )) && echo \"231 3.1459216376\" && exit\n  (( $(echo \"$constPi - 3.1372823288 < $1 && 3.1372823288 - $constPi < $1\" | bc -l) )) && echo \"232 3.1372823288\" && exit\n  (( $(echo \"$constPi - 3.1458844793 < $1 && 3.1458844793 - $constPi < $1\" | bc -l) )) && echo \"233 3.1458844793\" && exit\n  (( $(echo \"$constPi - 3.1373191688 < $1 && 3.1373191688 - $constPi < $1\" | bc -l) )) && echo \"234 3.1373191688\" && exit\n  (( $(echo \"$constPi - 3.1458479535 < $1 && 3.1458479535 - $constPi < $1\" | bc -l) )) && echo \"235 3.1458479535\" && exit\n  (( $(echo \"$constPi - 3.1373553845 < $1 && 3.1373553845 - $constPi < $1\" | bc -l) )) && echo \"236 3.1373553845\" && exit\n  (( $(echo \"$constPi - 3.1458120441 < $1 && 3.1458120441 - $constPi < $1\" | bc -l) )) && echo \"237 3.1458120441\" && exit\n  (( $(echo \"$constPi - 3.1373909915 < $1 && 3.1373909915 - $constPi < $1\" | bc -l) )) && echo \"238 3.1373909915\" && exit\n  (( $(echo \"$constPi - 3.1457767357 < $1 && 3.1457767357 - $constPi < $1\" | bc -l) )) && echo \"239 3.1457767357\" && exit\n  (( $(echo \"$constPi - 3.1374260050 < $1 && 3.1374260050 - $constPi < $1\" | bc -l) )) && echo \"240 3.1374260050\" && exit\n  (( $(echo \"$constPi - 3.1457420133 < $1 && 3.1457420133 - $constPi < $1\" | bc -l) )) && echo \"241 3.1457420133\" && exit\n  (( $(echo \"$constPi - 3.1374604398 < $1 && 3.1374604398 - $constPi < $1\" | bc -l) )) && echo \"242 3.1374604398\" && exit\n  (( $(echo \"$constPi - 3.1457078625 < $1 && 3.1457078625 - $constPi < $1\" | bc -l) )) && echo \"243 3.1457078625\" && exit\n  (( $(echo \"$constPi - 3.1374943101 < $1 && 3.1374943101 - $constPi < $1\" | bc -l) )) && echo \"244 3.1374943101\" && exit\n  (( $(echo \"$constPi - 3.1456742692 < $1 && 3.1456742692 - $constPi < $1\" | bc -l) )) && echo \"245 3.1456742692\" && exit\n  (( $(echo \"$constPi - 3.1375276297 < $1 && 3.1375276297 - $constPi < $1\" | bc -l) )) && echo \"246 3.1375276297\" && exit\n  (( $(echo \"$constPi - 3.1456412200 < $1 && 3.1456412200 - $constPi < $1\" | bc -l) )) && echo \"247 3.1456412200\" && exit\n  (( $(echo \"$constPi - 3.1375604119 < $1 && 3.1375604119 - $constPi < $1\" | bc -l) )) && echo \"248 3.1375604119\" && exit\n  (( $(echo \"$constPi - 3.1456087017 < $1 && 3.1456087017 - $constPi < $1\" | bc -l) )) && echo \"249 3.1456087017\" && exit\n  (( $(echo \"$constPi - 3.1375926696 < $1 && 3.1375926696 - $constPi < $1\" | bc -l) )) && echo \"250 3.1375926696\" && exit\n  (( $(echo \"$constPi - 3.1455767015 < $1 && 3.1455767015 - $constPi < $1\" | bc -l) )) && echo \"251 3.1455767015\" && exit\n  (( $(echo \"$constPi - 3.1376244152 < $1 && 3.1376244152 - $constPi < $1\" | bc -l) )) && echo \"252 3.1376244152\" && exit\n  (( $(echo \"$constPi - 3.1455452073 < $1 && 3.1455452073 - $constPi < $1\" | bc -l) )) && echo \"253 3.1455452073\" && exit\n  (( $(echo \"$constPi - 3.1376556610 < $1 && 3.1376556610 - $constPi < $1\" | bc -l) )) && echo \"254 3.1376556610\" && exit\n  (( $(echo \"$constPi - 3.1455142071 < $1 && 3.1455142071 - $constPi < $1\" | bc -l) )) && echo \"255 3.1455142071\" && exit\n  (( $(echo \"$constPi - 3.1376864185 < $1 && 3.1376864185 - $constPi < $1\" | bc -l) )) && echo \"256 3.1376864185\" && exit\n  (( $(echo \"$constPi - 3.1454836894 < $1 && 3.1454836894 - $constPi < $1\" | bc -l) )) && echo \"257 3.1454836894\" && exit\n  (( $(echo \"$constPi - 3.1377166992 < $1 && 3.1377166992 - $constPi < $1\" | bc -l) )) && echo \"258 3.1377166992\" && exit\n  (( $(echo \"$constPi - 3.1454536431 < $1 && 3.1454536431 - $constPi < $1\" | bc -l) )) && echo \"259 3.1454536431\" && exit\n  (( $(echo \"$constPi - 3.1377465140 < $1 && 3.1377465140 - $constPi < $1\" | bc -l) )) && echo \"260 3.1377465140\" && exit\n  (( $(echo \"$constPi - 3.1454240572 < $1 && 3.1454240572 - $constPi < $1\" | bc -l) )) && echo \"261 3.1454240572\" && exit\n  (( $(echo \"$constPi - 3.1377758736 < $1 && 3.1377758736 - $constPi < $1\" | bc -l) )) && echo \"262 3.1377758736\" && exit\n  (( $(echo \"$constPi - 3.1453949212 < $1 && 3.1453949212 - $constPi < $1\" | bc -l) )) && echo \"263 3.1453949212\" && exit\n  (( $(echo \"$constPi - 3.1378047884 < $1 && 3.1378047884 - $constPi < $1\" | bc -l) )) && echo \"264 3.1378047884\" && exit\n  (( $(echo \"$constPi - 3.1453662251 < $1 && 3.1453662251 - $constPi < $1\" | bc -l) )) && echo \"265 3.1453662251\" && exit\n  (( $(echo \"$constPi - 3.1378332684 < $1 && 3.1378332684 - $constPi < $1\" | bc -l) )) && echo \"266 3.1378332684\" && exit\n  (( $(echo \"$constPi - 3.1453379588 < $1 && 3.1453379588 - $constPi < $1\" | bc -l) )) && echo \"267 3.1453379588\" && exit\n  (( $(echo \"$constPi - 3.1378613233 < $1 && 3.1378613233 - $constPi < $1\" | bc -l) )) && echo \"268 3.1378613233\" && exit\n  (( $(echo \"$constPi - 3.1453101129 < $1 && 3.1453101129 - $constPi < $1\" | bc -l) )) && echo \"269 3.1453101129\" && exit\n  (( $(echo \"$constPi - 3.1378889626 < $1 && 3.1378889626 - $constPi < $1\" | bc -l) )) && echo \"270 3.1378889626\" && exit\n  (( $(echo \"$constPi - 3.1452826779 < $1 && 3.1452826779 - $constPi < $1\" | bc -l) )) && echo \"271 3.1452826779\" && exit\n  (( $(echo \"$constPi - 3.1379161954 < $1 && 3.1379161954 - $constPi < $1\" | bc -l) )) && echo \"272 3.1379161954\" && exit\n  (( $(echo \"$constPi - 3.1452556450 < $1 && 3.1452556450 - $constPi < $1\" | bc -l) )) && echo \"273 3.1452556450\" && exit\n  (( $(echo \"$constPi - 3.1379430307 < $1 && 3.1379430307 - $constPi < $1\" | bc -l) )) && echo \"274 3.1379430307\" && exit\n  (( $(echo \"$constPi - 3.1452290052 < $1 && 3.1452290052 - $constPi < $1\" | bc -l) )) && echo \"275 3.1452290052\" && exit\n  (( $(echo \"$constPi - 3.1379694771 < $1 && 3.1379694771 - $constPi < $1\" | bc -l) )) && echo \"276 3.1379694771\" && exit\n  (( $(echo \"$constPi - 3.1452027501 < $1 && 3.1452027501 - $constPi < $1\" | bc -l) )) && echo \"277 3.1452027501\" && exit\n  (( $(echo \"$constPi - 3.1379955429 < $1 && 3.1379955429 - $constPi < $1\" | bc -l) )) && echo \"278 3.1379955429\" && exit\n  (( $(echo \"$constPi - 3.1451768715 < $1 && 3.1451768715 - $constPi < $1\" | bc -l) )) && echo \"279 3.1451768715\" && exit\n  (( $(echo \"$constPi - 3.1380212364 < $1 && 3.1380212364 - $constPi < $1\" | bc -l) )) && echo \"280 3.1380212364\" && exit\n  (( $(echo \"$constPi - 3.1451513612 < $1 && 3.1451513612 - $constPi < $1\" | bc -l) )) && echo \"281 3.1451513612\" && exit\n  (( $(echo \"$constPi - 3.1380465654 < $1 && 3.1380465654 - $constPi < $1\" | bc -l) )) && echo \"282 3.1380465654\" && exit\n  (( $(echo \"$constPi - 3.1451262115 < $1 && 3.1451262115 - $constPi < $1\" | bc -l) )) && echo \"283 3.1451262115\" && exit\n  (( $(echo \"$constPi - 3.1380715377 < $1 && 3.1380715377 - $constPi < $1\" | bc -l) )) && echo \"284 3.1380715377\" && exit\n  (( $(echo \"$constPi - 3.1451014147 < $1 && 3.1451014147 - $constPi < $1\" | bc -l) )) && echo \"285 3.1451014147\" && exit\n  (( $(echo \"$constPi - 3.1380961608 < $1 && 3.1380961608 - $constPi < $1\" | bc -l) )) && echo \"286 3.1380961608\" && exit\n  (( $(echo \"$constPi - 3.1450769636 < $1 && 3.1450769636 - $constPi < $1\" | bc -l) )) && echo \"287 3.1450769636\" && exit\n  (( $(echo \"$constPi - 3.1381204418 < $1 && 3.1381204418 - $constPi < $1\" | bc -l) )) && echo \"288 3.1381204418\" && exit\n  (( $(echo \"$constPi - 3.1450528508 < $1 && 3.1450528508 - $constPi < $1\" | bc -l) )) && echo \"289 3.1450528508\" && exit\n  (( $(echo \"$constPi - 3.1381443880 < $1 && 3.1381443880 - $constPi < $1\" | bc -l) )) && echo \"290 3.1381443880\" && exit\n  (( $(echo \"$constPi - 3.1450290696 < $1 && 3.1450290696 - $constPi < $1\" | bc -l) )) && echo \"291 3.1450290696\" && exit\n  (( $(echo \"$constPi - 3.1381680061 < $1 && 3.1381680061 - $constPi < $1\" | bc -l) )) && echo \"292 3.1381680061\" && exit\n  (( $(echo \"$constPi - 3.1450056129 < $1 && 3.1450056129 - $constPi < $1\" | bc -l) )) && echo \"293 3.1450056129\" && exit\n  (( $(echo \"$constPi - 3.1381913029 < $1 && 3.1381913029 - $constPi < $1\" | bc -l) )) && echo \"294 3.1381913029\" && exit\n  (( $(echo \"$constPi - 3.1449824744 < $1 && 3.1449824744 - $constPi < $1\" | bc -l) )) && echo \"295 3.1449824744\" && exit\n  (( $(echo \"$constPi - 3.1382142849 < $1 && 3.1382142849 - $constPi < $1\" | bc -l) )) && echo \"296 3.1382142849\" && exit\n  (( $(echo \"$constPi - 3.1449596474 < $1 && 3.1449596474 - $constPi < $1\" | bc -l) )) && echo \"297 3.1449596474\" && exit\n  (( $(echo \"$constPi - 3.1382369583 < $1 && 3.1382369583 - $constPi < $1\" | bc -l) )) && echo \"298 3.1382369583\" && exit\n  (( $(echo \"$constPi - 3.1449371258 < $1 && 3.1449371258 - $constPi < $1\" | bc -l) )) && echo \"299 3.1449371258\" && exit\n  (( $(echo \"$constPi - 3.1382593295 < $1 && 3.1382593295 - $constPi < $1\" | bc -l) )) && echo \"300 3.1382593295\" && exit\n  (( $(echo \"$constPi - 3.1449149036 < $1 && 3.1449149036 - $constPi < $1\" | bc -l) )) && echo \"301 3.1449149036\" && exit\n  (( $(echo \"$constPi - 3.1382814044 < $1 && 3.1382814044 - $constPi < $1\" | bc -l) )) && echo \"302 3.1382814044\" && exit\n  (( $(echo \"$constPi - 3.1448929746 < $1 && 3.1448929746 - $constPi < $1\" | bc -l) )) && echo \"303 3.1448929746\" && exit\n  (( $(echo \"$constPi - 3.1383031888 < $1 && 3.1383031888 - $constPi < $1\" | bc -l) )) && echo \"304 3.1383031888\" && exit\n  (( $(echo \"$constPi - 3.1448713333 < $1 && 3.1448713333 - $constPi < $1\" | bc -l) )) && echo \"305 3.1448713333\" && exit\n  (( $(echo \"$constPi - 3.1383246885 < $1 && 3.1383246885 - $constPi < $1\" | bc -l) )) && echo \"306 3.1383246885\" && exit\n  (( $(echo \"$constPi - 3.1448499739 < $1 && 3.1448499739 - $constPi < $1\" | bc -l) )) && echo \"307 3.1448499739\" && exit\n  (( $(echo \"$constPi - 3.1383459089 < $1 && 3.1383459089 - $constPi < $1\" | bc -l) )) && echo \"308 3.1383459089\" && exit\n  (( $(echo \"$constPi - 3.1448288911 < $1 && 3.1448288911 - $constPi < $1\" | bc -l) )) && echo \"309 3.1448288911\" && exit\n  (( $(echo \"$constPi - 3.1383668555 < $1 && 3.1383668555 - $constPi < $1\" | bc -l) )) && echo \"310 3.1383668555\" && exit\n  (( $(echo \"$constPi - 3.1448080794 < $1 && 3.1448080794 - $constPi < $1\" | bc -l) )) && echo \"311 3.1448080794\" && exit\n  (( $(echo \"$constPi - 3.1383875336 < $1 && 3.1383875336 - $constPi < $1\" | bc -l) )) && echo \"312 3.1383875336\" && exit\n  (( $(echo \"$constPi - 3.1447875336 < $1 && 3.1447875336 - $constPi < $1\" | bc -l) )) && echo \"313 3.1447875336\" && exit\n  (( $(echo \"$constPi - 3.1384079483 < $1 && 3.1384079483 - $constPi < $1\" | bc -l) )) && echo \"314 3.1384079483\" && exit\n  (( $(echo \"$constPi - 3.1447672488 < $1 && 3.1447672488 - $constPi < $1\" | bc -l) )) && echo \"315 3.1447672488\" && exit\n  (( $(echo \"$constPi - 3.1384281046 < $1 && 3.1384281046 - $constPi < $1\" | bc -l) )) && echo \"316 3.1384281046\" && exit\n  (( $(echo \"$constPi - 3.1447472199 < $1 && 3.1447472199 - $constPi < $1\" | bc -l) )) && echo \"317 3.1447472199\" && exit\n  (( $(echo \"$constPi - 3.1384480073 < $1 && 3.1384480073 - $constPi < $1\" | bc -l) )) && echo \"318 3.1384480073\" && exit\n  (( $(echo \"$constPi - 3.1447274421 < $1 && 3.1447274421 - $constPi < $1\" | bc -l) )) && echo \"319 3.1447274421\" && exit\n  (( $(echo \"$constPi - 3.1384676612 < $1 && 3.1384676612 - $constPi < $1\" | bc -l) )) && echo \"320 3.1384676612\" && exit\n  (( $(echo \"$constPi - 3.1447079108 < $1 && 3.1447079108 - $constPi < $1\" | bc -l) )) && echo \"321 3.1447079108\" && exit\n  (( $(echo \"$constPi - 3.1384870710 < $1 && 3.1384870710 - $constPi < $1\" | bc -l) )) && echo \"322 3.1384870710\" && exit\n  (( $(echo \"$constPi - 3.1446886214 < $1 && 3.1446886214 - $constPi < $1\" | bc -l) )) && echo \"323 3.1446886214\" && exit\n  (( $(echo \"$constPi - 3.1385062412 < $1 && 3.1385062412 - $constPi < $1\" | bc -l) )) && echo \"324 3.1385062412\" && exit\n  (( $(echo \"$constPi - 3.1446695694 < $1 && 3.1446695694 - $constPi < $1\" | bc -l) )) && echo \"325 3.1446695694\" && exit\n  (( $(echo \"$constPi - 3.1385251761 < $1 && 3.1385251761 - $constPi < $1\" | bc -l) )) && echo \"326 3.1385251761\" && exit\n  (( $(echo \"$constPi - 3.1446507504 < $1 && 3.1446507504 - $constPi < $1\" | bc -l) )) && echo \"327 3.1446507504\" && exit\n  (( $(echo \"$constPi - 3.1385438802 < $1 && 3.1385438802 - $constPi < $1\" | bc -l) )) && echo \"328 3.1385438802\" && exit\n  (( $(echo \"$constPi - 3.1446321602 < $1 && 3.1446321602 - $constPi < $1\" | bc -l) )) && echo \"329 3.1446321602\" && exit\n  (( $(echo \"$constPi - 3.1385623575 < $1 && 3.1385623575 - $constPi < $1\" | bc -l) )) && echo \"330 3.1385623575\" && exit\n  (( $(echo \"$constPi - 3.1446137947 < $1 && 3.1446137947 - $constPi < $1\" | bc -l) )) && echo \"331 3.1446137947\" && exit\n  (( $(echo \"$constPi - 3.1385806122 < $1 && 3.1385806122 - $constPi < $1\" | bc -l) )) && echo \"332 3.1385806122\" && exit\n  (( $(echo \"$constPi - 3.1445956498 < $1 && 3.1445956498 - $constPi < $1\" | bc -l) )) && echo \"333 3.1445956498\" && exit\n  (( $(echo \"$constPi - 3.1385986483 < $1 && 3.1385986483 - $constPi < $1\" | bc -l) )) && echo \"334 3.1385986483\" && exit\n  (( $(echo \"$constPi - 3.1445777216 < $1 && 3.1445777216 - $constPi < $1\" | bc -l) )) && echo \"335 3.1445777216\" && exit\n  (( $(echo \"$constPi - 3.1386164697 < $1 && 3.1386164697 - $constPi < $1\" | bc -l) )) && echo \"336 3.1386164697\" && exit\n  (( $(echo \"$constPi - 3.1445600061 < $1 && 3.1445600061 - $constPi < $1\" | bc -l) )) && echo \"337 3.1445600061\" && exit\n  (( $(echo \"$constPi - 3.1386340802 < $1 && 3.1386340802 - $constPi < $1\" | bc -l) )) && echo \"338 3.1386340802\" && exit\n  (( $(echo \"$constPi - 3.1445424997 < $1 && 3.1445424997 - $constPi < $1\" | bc -l) )) && echo \"339 3.1445424997\" && exit\n  (( $(echo \"$constPi - 3.1386514835 < $1 && 3.1386514835 - $constPi < $1\" | bc -l) )) && echo \"340 3.1386514835\" && exit\n  (( $(echo \"$constPi - 3.1445251986 < $1 && 3.1445251986 - $constPi < $1\" | bc -l) )) && echo \"341 3.1445251986\" && exit\n  (( $(echo \"$constPi - 3.1386686832 < $1 && 3.1386686832 - $constPi < $1\" | bc -l) )) && echo \"342 3.1386686832\" && exit\n  (( $(echo \"$constPi - 3.1445080993 < $1 && 3.1445080993 - $constPi < $1\" | bc -l) )) && echo \"343 3.1445080993\" && exit\n  (( $(echo \"$constPi - 3.1386856830 < $1 && 3.1386856830 - $constPi < $1\" | bc -l) )) && echo \"344 3.1386856830\" && exit\n  (( $(echo \"$constPi - 3.1444911982 < $1 && 3.1444911982 - $constPi < $1\" | bc -l) )) && echo \"345 3.1444911982\" && exit\n  (( $(echo \"$constPi - 3.1387024862 < $1 && 3.1387024862 - $constPi < $1\" | bc -l) )) && echo \"346 3.1387024862\" && exit\n  (( $(echo \"$constPi - 3.1444744920 < $1 && 3.1444744920 - $constPi < $1\" | bc -l) )) && echo \"347 3.1444744920\" && exit\n  (( $(echo \"$constPi - 3.1387190963 < $1 && 3.1387190963 - $constPi < $1\" | bc -l) )) && echo \"348 3.1387190963\" && exit\n  (( $(echo \"$constPi - 3.1444579772 < $1 && 3.1444579772 - $constPi < $1\" | bc -l) )) && echo \"349 3.1444579772\" && exit\n  (( $(echo \"$constPi - 3.1387355166 < $1 && 3.1387355166 - $constPi < $1\" | bc -l) )) && echo \"350 3.1387355166\" && exit\n  (( $(echo \"$constPi - 3.1444416507 < $1 && 3.1444416507 - $constPi < $1\" | bc -l) )) && echo \"351 3.1444416507\" && exit\n  (( $(echo \"$constPi - 3.1387517502 < $1 && 3.1387517502 - $constPi < $1\" | bc -l) )) && echo \"352 3.1387517502\" && exit\n  (( $(echo \"$constPi - 3.1444255091 < $1 && 3.1444255091 - $constPi < $1\" | bc -l) )) && echo \"353 3.1444255091\" && exit\n  (( $(echo \"$constPi - 3.1387678005 < $1 && 3.1387678005 - $constPi < $1\" | bc -l) )) && echo \"354 3.1387678005\" && exit\n  (( $(echo \"$constPi - 3.1444095494 < $1 && 3.1444095494 - $constPi < $1\" | bc -l) )) && echo \"355 3.1444095494\" && exit\n  (( $(echo \"$constPi - 3.1387836704 < $1 && 3.1387836704 - $constPi < $1\" | bc -l) )) && echo \"356 3.1387836704\" && exit\n  (( $(echo \"$constPi - 3.1443937685 < $1 && 3.1443937685 - $constPi < $1\" | bc -l) )) && echo \"357 3.1443937685\" && exit\n  (( $(echo \"$constPi - 3.1387993629 < $1 && 3.1387993629 - $constPi < $1\" | bc -l) )) && echo \"358 3.1387993629\" && exit\n  (( $(echo \"$constPi - 3.1443781635 < $1 && 3.1443781635 - $constPi < $1\" | bc -l) )) && echo \"359 3.1443781635\" && exit\n  (( $(echo \"$constPi - 3.1388148812 < $1 && 3.1388148812 - $constPi < $1\" | bc -l) )) && echo \"360 3.1388148812\" && exit\n  (( $(echo \"$constPi - 3.1443627314 < $1 && 3.1443627314 - $constPi < $1\" | bc -l) )) && echo \"361 3.1443627314\" && exit\n  (( $(echo \"$constPi - 3.1388302279 < $1 && 3.1388302279 - $constPi < $1\" | bc -l) )) && echo \"362 3.1388302279\" && exit\n  (( $(echo \"$constPi - 3.1443474693 < $1 && 3.1443474693 - $constPi < $1\" | bc -l) )) && echo \"363 3.1443474693\" && exit\n  (( $(echo \"$constPi - 3.1388454060 < $1 && 3.1388454060 - $constPi < $1\" | bc -l) )) && echo \"364 3.1388454060\" && exit\n  (( $(echo \"$constPi - 3.1443323745 < $1 && 3.1443323745 - $constPi < $1\" | bc -l) )) && echo \"365 3.1443323745\" && exit\n  (( $(echo \"$constPi - 3.1388604183 < $1 && 3.1388604183 - $constPi < $1\" | bc -l) )) && echo \"366 3.1388604183\" && exit\n  (( $(echo \"$constPi - 3.1443174442 < $1 && 3.1443174442 - $constPi < $1\" | bc -l) )) && echo \"367 3.1443174442\" && exit\n  (( $(echo \"$constPi - 3.1388752673 < $1 && 3.1388752673 - $constPi < $1\" | bc -l) )) && echo \"368 3.1388752673\" && exit\n  (( $(echo \"$constPi - 3.1443026757 < $1 && 3.1443026757 - $constPi < $1\" | bc -l) )) && echo \"369 3.1443026757\" && exit\n  (( $(echo \"$constPi - 3.1388899558 < $1 && 3.1388899558 - $constPi < $1\" | bc -l) )) && echo \"370 3.1388899558\" && exit\n  (( $(echo \"$constPi - 3.1442880665 < $1 && 3.1442880665 - $constPi < $1\" | bc -l) )) && echo \"371 3.1442880665\" && exit\n  (( $(echo \"$constPi - 3.1389044864 < $1 && 3.1389044864 - $constPi < $1\" | bc -l) )) && echo \"372 3.1389044864\" && exit\n  (( $(echo \"$constPi - 3.1442736139 < $1 && 3.1442736139 - $constPi < $1\" | bc -l) )) && echo \"373 3.1442736139\" && exit\n  (( $(echo \"$constPi - 3.1389188616 < $1 && 3.1389188616 - $constPi < $1\" | bc -l) )) && echo \"374 3.1389188616\" && exit\n  (( $(echo \"$constPi - 3.1442593155 < $1 && 3.1442593155 - $constPi < $1\" | bc -l) )) && echo \"375 3.1442593155\" && exit\n  (( $(echo \"$constPi - 3.1389330838 < $1 && 3.1389330838 - $constPi < $1\" | bc -l) )) && echo \"376 3.1389330838\" && exit\n  (( $(echo \"$constPi - 3.1442451688 < $1 && 3.1442451688 - $constPi < $1\" | bc -l) )) && echo \"377 3.1442451688\" && exit\n  (( $(echo \"$constPi - 3.1389471556 < $1 && 3.1389471556 - $constPi < $1\" | bc -l) )) && echo \"378 3.1389471556\" && exit\n  (( $(echo \"$constPi - 3.1442311714 < $1 && 3.1442311714 - $constPi < $1\" | bc -l) )) && echo \"379 3.1442311714\" && exit\n  (( $(echo \"$constPi - 3.1389610792 < $1 && 3.1389610792 - $constPi < $1\" | bc -l) )) && echo \"380 3.1389610792\" && exit\n  (( $(echo \"$constPi - 3.1442173210 < $1 && 3.1442173210 - $constPi < $1\" | bc -l) )) && echo \"381 3.1442173210\" && exit\n  (( $(echo \"$constPi - 3.1389748570 < $1 && 3.1389748570 - $constPi < $1\" | bc -l) )) && echo \"382 3.1389748570\" && exit\n  (( $(echo \"$constPi - 3.1442036152 < $1 && 3.1442036152 - $constPi < $1\" | bc -l) )) && echo \"383 3.1442036152\" && exit\n  (( $(echo \"$constPi - 3.1389884913 < $1 && 3.1389884913 - $constPi < $1\" | bc -l) )) && echo \"384 3.1389884913\" && exit\n  (( $(echo \"$constPi - 3.1441900518 < $1 && 3.1441900518 - $constPi < $1\" | bc -l) )) && echo \"385 3.1441900518\" && exit\n  (( $(echo \"$constPi - 3.1390019844 < $1 && 3.1390019844 - $constPi < $1\" | bc -l) )) && echo \"386 3.1390019844\" && exit\n  (( $(echo \"$constPi - 3.1441766286 < $1 && 3.1441766286 - $constPi < $1\" | bc -l) )) && echo \"387 3.1441766286\" && exit\n  (( $(echo \"$constPi - 3.1390153383 < $1 && 3.1390153383 - $constPi < $1\" | bc -l) )) && echo \"388 3.1390153383\" && exit\n  (( $(echo \"$constPi - 3.1441633434 < $1 && 3.1441633434 - $constPi < $1\" | bc -l) )) && echo \"389 3.1441633434\" && exit\n  (( $(echo \"$constPi - 3.1390285552 < $1 && 3.1390285552 - $constPi < $1\" | bc -l) )) && echo \"390 3.1390285552\" && exit\n  (( $(echo \"$constPi - 3.1441501942 < $1 && 3.1441501942 - $constPi < $1\" | bc -l) )) && echo \"391 3.1441501942\" && exit\n  (( $(echo \"$constPi - 3.1390416373 < $1 && 3.1390416373 - $constPi < $1\" | bc -l) )) && echo \"392 3.1390416373\" && exit\n  (( $(echo \"$constPi - 3.1441371787 < $1 && 3.1441371787 - $constPi < $1\" | bc -l) )) && echo \"393 3.1441371787\" && exit\n  (( $(echo \"$constPi - 3.1390545866 < $1 && 3.1390545866 - $constPi < $1\" | bc -l) )) && echo \"394 3.1390545866\" && exit\n  (( $(echo \"$constPi - 3.1441242951 < $1 && 3.1441242951 - $constPi < $1\" | bc -l) )) && echo \"395 3.1441242951\" && exit\n  (( $(echo \"$constPi - 3.1390674051 < $1 && 3.1390674051 - $constPi < $1\" | bc -l) )) && echo \"396 3.1390674051\" && exit\n  (( $(echo \"$constPi - 3.1441115413 < $1 && 3.1441115413 - $constPi < $1\" | bc -l) )) && echo \"397 3.1441115413\" && exit\n  (( $(echo \"$constPi - 3.1390800947 < $1 && 3.1390800947 - $constPi < $1\" | bc -l) )) && echo \"398 3.1390800947\" && exit\n  (( $(echo \"$constPi - 3.1440989153 < $1 && 3.1440989153 - $constPi < $1\" | bc -l) )) && echo \"399 3.1440989153\" && exit\n  (( $(echo \"$constPi - 3.1390926575 < $1 && 3.1390926575 - $constPi < $1\" | bc -l) )) && echo \"400 3.1390926575\" && exit\n  (( $(echo \"$constPi - 3.1440864153 < $1 && 3.1440864153 - $constPi < $1\" | bc -l) )) && echo \"401 3.1440864153\" && exit\n  (( $(echo \"$constPi - 3.1391050952 < $1 && 3.1391050952 - $constPi < $1\" | bc -l) )) && echo \"402 3.1391050952\" && exit\n  (( $(echo \"$constPi - 3.1440740393 < $1 && 3.1440740393 - $constPi < $1\" | bc -l) )) && echo \"403 3.1440740393\" && exit\n  (( $(echo \"$constPi - 3.1391174099 < $1 && 3.1391174099 - $constPi < $1\" | bc -l) )) && echo \"404 3.1391174099\" && exit\n  (( $(echo \"$constPi - 3.1440617856 < $1 && 3.1440617856 - $constPi < $1\" | bc -l) )) && echo \"405 3.1440617856\" && exit\n  (( $(echo \"$constPi - 3.1391296031 < $1 && 3.1391296031 - $constPi < $1\" | bc -l) )) && echo \"406 3.1391296031\" && exit\n  (( $(echo \"$constPi - 3.1440496523 < $1 && 3.1440496523 - $constPi < $1\" | bc -l) )) && echo \"407 3.1440496523\" && exit\n  (( $(echo \"$constPi - 3.1391416769 < $1 && 3.1391416769 - $constPi < $1\" | bc -l) )) && echo \"408 3.1391416769\" && exit\n  (( $(echo \"$constPi - 3.1440376377 < $1 && 3.1440376377 - $constPi < $1\" | bc -l) )) && echo \"409 3.1440376377\" && exit\n  (( $(echo \"$constPi - 3.1391536328 < $1 && 3.1391536328 - $constPi < $1\" | bc -l) )) && echo \"410 3.1391536328\" && exit\n  (( $(echo \"$constPi - 3.1440257400 < $1 && 3.1440257400 - $constPi < $1\" | bc -l) )) && echo \"411 3.1440257400\" && exit\n  (( $(echo \"$constPi - 3.1391654727 < $1 && 3.1391654727 - $constPi < $1\" | bc -l) )) && echo \"412 3.1391654727\" && exit\n  (( $(echo \"$constPi - 3.1440139575 < $1 && 3.1440139575 - $constPi < $1\" | bc -l) )) && echo \"413 3.1440139575\" && exit\n  (( $(echo \"$constPi - 3.1391771982 < $1 && 3.1391771982 - $constPi < $1\" | bc -l) )) && echo \"414 3.1391771982\" && exit\n  (( $(echo \"$constPi - 3.1440022886 < $1 && 3.1440022886 - $constPi < $1\" | bc -l) )) && echo \"415 3.1440022886\" && exit\n  (( $(echo \"$constPi - 3.1391888109 < $1 && 3.1391888109 - $constPi < $1\" | bc -l) )) && echo \"416 3.1391888109\" && exit\n  (( $(echo \"$constPi - 3.1439907317 < $1 && 3.1439907317 - $constPi < $1\" | bc -l) )) && echo \"417 3.1439907317\" && exit\n  (( $(echo \"$constPi - 3.1392003125 < $1 && 3.1392003125 - $constPi < $1\" | bc -l) )) && echo \"418 3.1392003125\" && exit\n  (( $(echo \"$constPi - 3.1439792850 < $1 && 3.1439792850 - $constPi < $1\" | bc -l) )) && echo \"419 3.1439792850\" && exit\n  (( $(echo \"$constPi - 3.1392117046 < $1 && 3.1392117046 - $constPi < $1\" | bc -l) )) && echo \"420 3.1392117046\" && exit\n  (( $(echo \"$constPi - 3.1439679472 < $1 && 3.1439679472 - $constPi < $1\" | bc -l) )) && echo \"421 3.1439679472\" && exit\n  (( $(echo \"$constPi - 3.1392229887 < $1 && 3.1392229887 - $constPi < $1\" | bc -l) )) && echo \"422 3.1392229887\" && exit\n  (( $(echo \"$constPi - 3.1439567165 < $1 && 3.1439567165 - $constPi < $1\" | bc -l) )) && echo \"423 3.1439567165\" && exit\n  (( $(echo \"$constPi - 3.1392341663 < $1 && 3.1392341663 - $constPi < $1\" | bc -l) )) && echo \"424 3.1392341663\" && exit\n  (( $(echo \"$constPi - 3.1439455915 < $1 && 3.1439455915 - $constPi < $1\" | bc -l) )) && echo \"425 3.1439455915\" && exit\n  (( $(echo \"$constPi - 3.1392452390 < $1 && 3.1392452390 - $constPi < $1\" | bc -l) )) && echo \"426 3.1392452390\" && exit\n  (( $(echo \"$constPi - 3.1439345708 < $1 && 3.1439345708 - $constPi < $1\" | bc -l) )) && echo \"427 3.1439345708\" && exit\n  (( $(echo \"$constPi - 3.1392562082 < $1 && 3.1392562082 - $constPi < $1\" | bc -l) )) && echo \"428 3.1392562082\" && exit\n  (( $(echo \"$constPi - 3.1439236528 < $1 && 3.1439236528 - $constPi < $1\" | bc -l) )) && echo \"429 3.1439236528\" && exit\n  (( $(echo \"$constPi - 3.1392670753 < $1 && 3.1392670753 - $constPi < $1\" | bc -l) )) && echo \"430 3.1392670753\" && exit\n  (( $(echo \"$constPi - 3.1439128361 < $1 && 3.1439128361 - $constPi < $1\" | bc -l) )) && echo \"431 3.1439128361\" && exit\n  (( $(echo \"$constPi - 3.1392778419 < $1 && 3.1392778419 - $constPi < $1\" | bc -l) )) && echo \"432 3.1392778419\" && exit\n  (( $(echo \"$constPi - 3.1439021193 < $1 && 3.1439021193 - $constPi < $1\" | bc -l) )) && echo \"433 3.1439021193\" && exit\n  (( $(echo \"$constPi - 3.1392885092 < $1 && 3.1392885092 - $constPi < $1\" | bc -l) )) && echo \"434 3.1392885092\" && exit\n  (( $(echo \"$constPi - 3.1438915011 < $1 && 3.1438915011 - $constPi < $1\" | bc -l) )) && echo \"435 3.1438915011\" && exit\n  (( $(echo \"$constPi - 3.1392990786 < $1 && 3.1392990786 - $constPi < $1\" | bc -l) )) && echo \"436 3.1392990786\" && exit\n  (( $(echo \"$constPi - 3.1438809801 < $1 && 3.1438809801 - $constPi < $1\" | bc -l) )) && echo \"437 3.1438809801\" && exit\n  (( $(echo \"$constPi - 3.1393095515 < $1 && 3.1393095515 - $constPi < $1\" | bc -l) )) && echo \"438 3.1393095515\" && exit\n  (( $(echo \"$constPi - 3.1438705550 < $1 && 3.1438705550 - $constPi < $1\" | bc -l) )) && echo \"439 3.1438705550\" && exit\n  (( $(echo \"$constPi - 3.1393199293 < $1 && 3.1393199293 - $constPi < $1\" | bc -l) )) && echo \"440 3.1393199293\" && exit\n  (( $(echo \"$constPi - 3.1438602244 < $1 && 3.1438602244 - $constPi < $1\" | bc -l) )) && echo \"441 3.1438602244\" && exit\n  (( $(echo \"$constPi - 3.1393302130 < $1 && 3.1393302130 - $constPi < $1\" | bc -l) )) && echo \"442 3.1393302130\" && exit\n  (( $(echo \"$constPi - 3.1438499871 < $1 && 3.1438499871 - $constPi < $1\" | bc -l) )) && echo \"443 3.1438499871\" && exit\n  (( $(echo \"$constPi - 3.1393404042 < $1 && 3.1393404042 - $constPi < $1\" | bc -l) )) && echo \"444 3.1393404042\" && exit\n  (( $(echo \"$constPi - 3.1438398418 < $1 && 3.1438398418 - $constPi < $1\" | bc -l) )) && echo \"445 3.1438398418\" && exit\n  (( $(echo \"$constPi - 3.1393505039 < $1 && 3.1393505039 - $constPi < $1\" | bc -l) )) && echo \"446 3.1393505039\" && exit\n  (( $(echo \"$constPi - 3.1438297873 < $1 && 3.1438297873 - $constPi < $1\" | bc -l) )) && echo \"447 3.1438297873\" && exit\n  (( $(echo \"$constPi - 3.1393605135 < $1 && 3.1393605135 - $constPi < $1\" | bc -l) )) && echo \"448 3.1393605135\" && exit\n  (( $(echo \"$constPi - 3.1438198223 < $1 && 3.1438198223 - $constPi < $1\" | bc -l) )) && echo \"449 3.1438198223\" && exit\n  (( $(echo \"$constPi - 3.1393704341 < $1 && 3.1393704341 - $constPi < $1\" | bc -l) )) && echo \"450 3.1393704341\" && exit\n  (( $(echo \"$constPi - 3.1438099458 < $1 && 3.1438099458 - $constPi < $1\" | bc -l) )) && echo \"451 3.1438099458\" && exit\n  (( $(echo \"$constPi - 3.1393802669 < $1 && 3.1393802669 - $constPi < $1\" | bc -l) )) && echo \"452 3.1393802669\" && exit\n  (( $(echo \"$constPi - 3.1438001564 < $1 && 3.1438001564 - $constPi < $1\" | bc -l) )) && echo \"453 3.1438001564\" && exit\n  (( $(echo \"$constPi - 3.1393900131 < $1 && 3.1393900131 - $constPi < $1\" | bc -l) )) && echo \"454 3.1393900131\" && exit\n  (( $(echo \"$constPi - 3.1437904531 < $1 && 3.1437904531 - $constPi < $1\" | bc -l) )) && echo \"455 3.1437904531\" && exit\n  (( $(echo \"$constPi - 3.1393996738 < $1 && 3.1393996738 - $constPi < $1\" | bc -l) )) && echo \"456 3.1393996738\" && exit\n  (( $(echo \"$constPi - 3.1437808348 < $1 && 3.1437808348 - $constPi < $1\" | bc -l) )) && echo \"457 3.1437808348\" && exit\n  (( $(echo \"$constPi - 3.1394092501 < $1 && 3.1394092501 - $constPi < $1\" | bc -l) )) && echo \"458 3.1394092501\" && exit\n  (( $(echo \"$constPi - 3.1437713002 < $1 && 3.1437713002 - $constPi < $1\" | bc -l) )) && echo \"459 3.1437713002\" && exit\n  (( $(echo \"$constPi - 3.1394187431 < $1 && 3.1394187431 - $constPi < $1\" | bc -l) )) && echo \"460 3.1394187431\" && exit\n  (( $(echo \"$constPi - 3.1437618484 < $1 && 3.1437618484 - $constPi < $1\" | bc -l) )) && echo \"461 3.1437618484\" && exit\n  (( $(echo \"$constPi - 3.1394281540 < $1 && 3.1394281540 - $constPi < $1\" | bc -l) )) && echo \"462 3.1394281540\" && exit\n  (( $(echo \"$constPi - 3.1437524783 < $1 && 3.1437524783 - $constPi < $1\" | bc -l) )) && echo \"463 3.1437524783\" && exit\n  (( $(echo \"$constPi - 3.1394374837 < $1 && 3.1394374837 - $constPi < $1\" | bc -l) )) && echo \"464 3.1394374837\" && exit\n  (( $(echo \"$constPi - 3.1437431887 < $1 && 3.1437431887 - $constPi < $1\" | bc -l) )) && echo \"465 3.1437431887\" && exit\n  (( $(echo \"$constPi - 3.1394467333 < $1 && 3.1394467333 - $constPi < $1\" | bc -l) )) && echo \"466 3.1394467333\" && exit\n  (( $(echo \"$constPi - 3.1437339788 < $1 && 3.1437339788 - $constPi < $1\" | bc -l) )) && echo \"467 3.1437339788\" && exit\n  (( $(echo \"$constPi - 3.1394559039 < $1 && 3.1394559039 - $constPi < $1\" | bc -l) )) && echo \"468 3.1394559039\" && exit\n  (( $(echo \"$constPi - 3.1437248473 < $1 && 3.1437248473 - $constPi < $1\" | bc -l) )) && echo \"469 3.1437248473\" && exit\n  (( $(echo \"$constPi - 3.1394649964 < $1 && 3.1394649964 - $constPi < $1\" | bc -l) )) && echo \"470 3.1394649964\" && exit\n  (( $(echo \"$constPi - 3.1437157934 < $1 && 3.1437157934 - $constPi < $1\" | bc -l) )) && echo \"471 3.1437157934\" && exit\n  (( $(echo \"$constPi - 3.1394740119 < $1 && 3.1394740119 - $constPi < $1\" | bc -l) )) && echo \"472 3.1394740119\" && exit\n  (( $(echo \"$constPi - 3.1437068161 < $1 && 3.1437068161 - $constPi < $1\" | bc -l) )) && echo \"473 3.1437068161\" && exit\n  (( $(echo \"$constPi - 3.1394829513 < $1 && 3.1394829513 - $constPi < $1\" | bc -l) )) && echo \"474 3.1394829513\" && exit\n  (( $(echo \"$constPi - 3.1436979144 < $1 && 3.1436979144 - $constPi < $1\" | bc -l) )) && echo \"475 3.1436979144\" && exit\n  (( $(echo \"$constPi - 3.1394918156 < $1 && 3.1394918156 - $constPi < $1\" | bc -l) )) && echo \"476 3.1394918156\" && exit\n  (( $(echo \"$constPi - 3.1436890873 < $1 && 3.1436890873 - $constPi < $1\" | bc -l) )) && echo \"477 3.1436890873\" && exit\n  (( $(echo \"$constPi - 3.1395006057 < $1 && 3.1395006057 - $constPi < $1\" | bc -l) )) && echo \"478 3.1395006057\" && exit\n  (( $(echo \"$constPi - 3.1436803340 < $1 && 3.1436803340 - $constPi < $1\" | bc -l) )) && echo \"479 3.1436803340\" && exit\n  (( $(echo \"$constPi - 3.1395093225 < $1 && 3.1395093225 - $constPi < $1\" | bc -l) )) && echo \"480 3.1395093225\" && exit\n  (( $(echo \"$constPi - 3.1436716534 < $1 && 3.1436716534 - $constPi < $1\" | bc -l) )) && echo \"481 3.1436716534\" && exit\n  (( $(echo \"$constPi - 3.1395179670 < $1 && 3.1395179670 - $constPi < $1\" | bc -l) )) && echo \"482 3.1395179670\" && exit\n  (( $(echo \"$constPi - 3.1436630447 < $1 && 3.1436630447 - $constPi < $1\" | bc -l) )) && echo \"483 3.1436630447\" && exit\n  (( $(echo \"$constPi - 3.1395265401 < $1 && 3.1395265401 - $constPi < $1\" | bc -l) )) && echo \"484 3.1395265401\" && exit\n  (( $(echo \"$constPi - 3.1436545071 < $1 && 3.1436545071 - $constPi < $1\" | bc -l) )) && echo \"485 3.1436545071\" && exit\n  (( $(echo \"$constPi - 3.1395350426 < $1 && 3.1395350426 - $constPi < $1\" | bc -l) )) && echo \"486 3.1395350426\" && exit\n  (( $(echo \"$constPi - 3.1436460395 < $1 && 3.1436460395 - $constPi < $1\" | bc -l) )) && echo \"487 3.1436460395\" && exit\n  (( $(echo \"$constPi - 3.1395434754 < $1 && 3.1395434754 - $constPi < $1\" | bc -l) )) && echo \"488 3.1395434754\" && exit\n  (( $(echo \"$constPi - 3.1436376412 < $1 && 3.1436376412 - $constPi < $1\" | bc -l) )) && echo \"489 3.1436376412\" && exit\n  (( $(echo \"$constPi - 3.1395518394 < $1 && 3.1395518394 - $constPi < $1\" | bc -l) )) && echo \"490 3.1395518394\" && exit\n  (( $(echo \"$constPi - 3.1436293114 < $1 && 3.1436293114 - $constPi < $1\" | bc -l) )) && echo \"491 3.1436293114\" && exit\n  (( $(echo \"$constPi - 3.1395601354 < $1 && 3.1395601354 - $constPi < $1\" | bc -l) )) && echo \"492 3.1395601354\" && exit\n  (( $(echo \"$constPi - 3.1436210491 < $1 && 3.1436210491 - $constPi < $1\" | bc -l) )) && echo \"493 3.1436210491\" && exit\n  (( $(echo \"$constPi - 3.1395683642 < $1 && 3.1395683642 - $constPi < $1\" | bc -l) )) && echo \"494 3.1395683642\" && exit\n  (( $(echo \"$constPi - 3.1436128535 < $1 && 3.1436128535 - $constPi < $1\" | bc -l) )) && echo \"495 3.1436128535\" && exit\n  (( $(echo \"$constPi - 3.1395765266 < $1 && 3.1395765266 - $constPi < $1\" | bc -l) )) && echo \"496 3.1395765266\" && exit\n  (( $(echo \"$constPi - 3.1436047240 < $1 && 3.1436047240 - $constPi < $1\" | bc -l) )) && echo \"497 3.1436047240\" && exit\n  (( $(echo \"$constPi - 3.1395846235 < $1 && 3.1395846235 - $constPi < $1\" | bc -l) )) && echo \"498 3.1395846235\" && exit\n  (( $(echo \"$constPi - 3.1435966596 < $1 && 3.1435966596 - $constPi < $1\" | bc -l) )) && echo \"499 3.1435966596\" && exit\n  (( $(echo \"$constPi - 3.1395926556 < $1 && 3.1395926556 - $constPi < $1\" | bc -l) )) && echo \"500 3.1395926556\" && exit\n\n  (( $(echo \"$constPi - 3.1760651769 < $1 && 3.1760651769 - $constPi < $1\" | bc -l) )) && echo \"29 3.1760651769\" && exit\n  (( $(echo \"$constPi - 3.1082685667 < $1 && 3.1082685667 - $constPi < $1\" | bc -l) )) && echo \"30 3.1082685667\" && exit\n  (( $(echo \"$constPi - 3.1738423372 < $1 && 3.1738423372 - $constPi < $1\" | bc -l) )) && echo \"31 3.1738423372\" && exit\n  (( $(echo \"$constPi - 3.1103502737 < $1 && 3.1103502737 - $constPi < $1\" | bc -l) )) && echo \"32 3.1103502737\" && exit\n  (( $(echo \"$constPi - 3.1718887352 < $1 && 3.1718887352 - $constPi < $1\" | bc -l) )) && echo \"33 3.1718887352\" && exit\n  (( $(echo \"$constPi - 3.1121872427 < $1 && 3.1121872427 - $constPi < $1\" | bc -l) )) && echo \"34 3.1121872427\" && exit\n  (( $(echo \"$constPi - 3.1701582572 < $1 && 3.1701582572 - $constPi < $1\" | bc -l) )) && echo \"35 3.1701582572\" && exit\n  (( $(echo \"$constPi - 3.1138202290 < $1 && 3.1138202290 - $constPi < $1\" | bc -l) )) && echo \"36 3.1138202290\" && exit\n  (( $(echo \"$constPi - 3.1686147496 < $1 && 3.1686147496 - $constPi < $1\" | bc -l) )) && echo \"37 3.1686147496\" && exit\n  (( $(echo \"$constPi - 3.1152814162 < $1 && 3.1152814162 - $constPi < $1\" | bc -l) )) && echo \"38 3.1152814162\" && exit\n  (( $(echo \"$constPi - 3.1672294682 < $1 && 3.1672294682 - $constPi < $1\" | bc -l) )) && echo \"39 3.1672294682\" && exit\n  (( $(echo \"$constPi - 3.1165965568 < $1 && 3.1165965568 - $constPi < $1\" | bc -l) )) && echo \"40 3.1165965568\" && exit\n  (( $(echo \"$constPi - 3.1659792728 < $1 && 3.1659792728 - $constPi < $1\" | bc -l) )) && echo \"41 3.1659792728\" && exit\n  (( $(echo \"$constPi - 3.1177865018 < $1 && 3.1177865018 - $constPi < $1\" | bc -l) )) && echo \"42 3.1177865018\" && exit\n  (( $(echo \"$constPi - 3.1648453253 < $1 && 3.1648453253 - $constPi < $1\" | bc -l) )) && echo \"43 3.1648453253\" && exit\n  (( $(echo \"$constPi - 3.1188683138 < $1 && 3.1188683138 - $constPi < $1\" | bc -l) )) && echo \"44 3.1188683138\" && exit\n  (( $(echo \"$constPi - 3.1638121340 < $1 && 3.1638121340 - $constPi < $1\" | bc -l) )) && echo \"45 3.1638121340\" && exit\n  (( $(echo \"$constPi - 3.1198560901 < $1 && 3.1198560901 - $constPi < $1\" | bc -l) )) && echo \"46 3.1198560901\" && exit\n  (( $(echo \"$constPi - 3.1628668428 < $1 && 3.1628668428 - $constPi < $1\" | bc -l) )) && echo \"47 3.1628668428\" && exit\n  (( $(echo \"$constPi - 3.1207615796 < $1 && 3.1207615796 - $constPi < $1\" | bc -l) )) && echo \"48 3.1207615796\" && exit\n  (( $(echo \"$constPi - 3.1619986930 < $1 && 3.1619986930 - $constPi < $1\" | bc -l) )) && echo \"49 3.1619986930\" && exit\n  (( $(echo \"$constPi - 3.1215946526 < $1 && 3.1215946526 - $constPi < $1\" | bc -l) )) && echo \"50 3.1215946526\" && exit\n  (( $(echo \"$constPi - 3.1611986130 < $1 && 3.1611986130 - $constPi < $1\" | bc -l) )) && echo \"51 3.1611986130\" && exit\n  (( $(echo \"$constPi - 3.1223636615 < $1 && 3.1223636615 - $constPi < $1\" | bc -l) )) && echo \"52 3.1223636615\" && exit\n  (( $(echo \"$constPi - 3.1604588996 < $1 && 3.1604588996 - $constPi < $1\" | bc -l) )) && echo \"53 3.1604588996\" && exit\n  (( $(echo \"$constPi - 3.1230757221 < $1 && 3.1230757221 - $constPi < $1\" | bc -l) )) && echo \"54 3.1230757221\" && exit\n  (( $(echo \"$constPi - 3.1597729698 < $1 && 3.1597729698 - $constPi < $1\" | bc -l) )) && echo \"55 3.1597729698\" && exit\n  (( $(echo \"$constPi - 3.1237369337 < $1 && 3.1237369337 - $constPi < $1\" | bc -l) )) && echo \"56 3.1237369337\" && exit\n  (( $(echo \"$constPi - 3.1591351638 < $1 && 3.1591351638 - $constPi < $1\" | bc -l) )) && echo \"57 3.1591351638\" && exit\n  (( $(echo \"$constPi - 3.1243525551 < $1 && 3.1243525551 - $constPi < $1\" | bc -l) )) && echo \"58 3.1243525551\" && exit\n  (( $(echo \"$constPi - 3.1585405893 < $1 && 3.1585405893 - $constPi < $1\" | bc -l) )) && echo \"59 3.1585405893\" && exit\n  (( $(echo \"$constPi - 3.1249271439 < $1 && 3.1249271439 - $constPi < $1\" | bc -l) )) && echo \"60 3.1249271439\" && exit\n  (( $(echo \"$constPi - 3.1579849952 < $1 && 3.1579849952 - $constPi < $1\" | bc -l) )) && echo \"61 3.1579849952\" && exit\n  (( $(echo \"$constPi - 3.1254646700 < $1 && 3.1254646700 - $constPi < $1\" | bc -l) )) && echo \"62 3.1254646700\" && exit\n  (( $(echo \"$constPi - 3.1574646700 < $1 && 3.1574646700 - $constPi < $1\" | bc -l) )) && echo \"63 3.1574646700\" && exit\n  (( $(echo \"$constPi - 3.1259686070 < $1 && 3.1259686070 - $constPi < $1\" | bc -l) )) && echo \"64 3.1259686070\" && exit\n  (( $(echo \"$constPi - 3.1569763589 < $1 && 3.1569763589 - $constPi < $1\" | bc -l) )) && echo \"65 3.1569763589\" && exit\n  (( $(echo \"$constPi - 3.1264420078 < $1 && 3.1264420078 - $constPi < $1\" | bc -l) )) && echo \"66 3.1264420078\" && exit\n  (( $(echo \"$constPi - 3.1565171957 < $1 && 3.1565171957 - $constPi < $1\" | bc -l) )) && echo \"67 3.1565171957\" && exit\n  (( $(echo \"$constPi - 3.1268875661 < $1 && 3.1268875661 - $constPi < $1\" | bc -l) )) && echo \"68 3.1268875661\" && exit\n  (( $(echo \"$constPi - 3.1560846464 < $1 && 3.1560846464 - $constPi < $1\" | bc -l) )) && echo \"69 3.1560846464\" && exit\n  (( $(echo \"$constPi - 3.1273076680 < $1 && 3.1273076680 - $constPi < $1\" | bc -l) )) && echo \"70 3.1273076680\" && exit\n  (( $(echo \"$constPi - 3.1556764623 < $1 && 3.1556764623 - $constPi < $1\" | bc -l) )) && echo \"71 3.1556764623\" && exit\n  (( $(echo \"$constPi - 3.1277044343 < $1 && 3.1277044343 - $constPi < $1\" | bc -l) )) && echo \"72 3.1277044343\" && exit\n  (( $(echo \"$constPi - 3.1552906412 < $1 && 3.1552906412 - $constPi < $1\" | bc -l) )) && echo \"73 3.1552906412\" && exit\n  (( $(echo \"$constPi - 3.1280797569 < $1 && 3.1280797569 - $constPi < $1\" | bc -l) )) && echo \"74 3.1280797569\" && exit\n  (( $(echo \"$constPi - 3.1549253945 < $1 && 3.1549253945 - $constPi < $1\" | bc -l) )) && echo \"75 3.1549253945\" && exit\n  (( $(echo \"$constPi - 3.1284353282 < $1 && 3.1284353282 - $constPi < $1\" | bc -l) )) && echo \"76 3.1284353282\" && exit\n  (( $(echo \"$constPi - 3.1545791191 < $1 && 3.1545791191 - $constPi < $1\" | bc -l) )) && echo \"77 3.1545791191\" && exit\n  (( $(echo \"$constPi - 3.1287726675 < $1 && 3.1287726675 - $constPi < $1\" | bc -l) )) && echo \"78 3.1287726675\" && exit\n  (( $(echo \"$constPi - 3.1542503745 < $1 && 3.1542503745 - $constPi < $1\" | bc -l) )) && echo \"79 3.1542503745\" && exit\n  (( $(echo \"$constPi - 3.1290931418 < $1 && 3.1290931418 - $constPi < $1\" | bc -l) )) && echo \"80 3.1290931418\" && exit\n  (( $(echo \"$constPi - 3.1539378623 < $1 && 3.1539378623 - $constPi < $1\" | bc -l) )) && echo \"81 3.1539378623\" && exit\n  (( $(echo \"$constPi - 3.1293979850 < $1 && 3.1293979850 - $constPi < $1\" | bc -l) )) && echo \"82 3.1293979850\" && exit\n  (( $(echo \"$constPi - 3.1536404092 < $1 && 3.1536404092 - $constPi < $1\" | bc -l) )) && echo \"83 3.1536404092\" && exit\n  (( $(echo \"$constPi - 3.1296883134 < $1 && 3.1296883134 - $constPi < $1\" | bc -l) )) && echo \"84 3.1296883134\" && exit\n  (( $(echo \"$constPi - 3.1533569525 < $1 && 3.1533569525 - $constPi < $1\" | bc -l) )) && echo \"85 3.1533569525\" && exit\n  (( $(echo \"$constPi - 3.1299651396 < $1 && 3.1299651396 - $constPi < $1\" | bc -l) )) && echo \"86 3.1299651396\" && exit\n  (( $(echo \"$constPi - 3.1530865269 < $1 && 3.1530865269 - $constPi < $1\" | bc -l) )) && echo \"87 3.1530865269\" && exit\n  (( $(echo \"$constPi - 3.1302293840 < $1 && 3.1302293840 - $constPi < $1\" | bc -l) )) && echo \"88 3.1302293840\" && exit\n  (( $(echo \"$constPi - 3.1528282541 < $1 && 3.1528282541 - $constPi < $1\" | bc -l) )) && echo \"89 3.1528282541\" && exit\n  (( $(echo \"$constPi - 3.1304818854 < $1 && 3.1304818854 - $constPi < $1\" | bc -l) )) && echo \"90 3.1304818854\" && exit\n  (( $(echo \"$constPi - 3.1525813329 < $1 && 3.1525813329 - $constPi < $1\" | bc -l) )) && echo \"91 3.1525813329\" && exit\n  (( $(echo \"$constPi - 3.1307234094 < $1 && 3.1307234094 - $constPi < $1\" | bc -l) )) && echo \"92 3.1307234094\" && exit\n  (( $(echo \"$constPi - 3.1523450310 < $1 && 3.1523450310 - $constPi < $1\" | bc -l) )) && echo \"93 3.1523450310\" && exit\n  (( $(echo \"$constPi - 3.1309546567 < $1 && 3.1309546567 - $constPi < $1\" | bc -l) )) && echo \"94 3.1309546567\" && exit\n  (( $(echo \"$constPi - 3.1521186778 < $1 && 3.1521186778 - $constPi < $1\" | bc -l) )) && echo \"95 3.1521186778\" && exit\n  (( $(echo \"$constPi - 3.1311762695 < $1 && 3.1311762695 - $constPi < $1\" | bc -l) )) && echo \"96 3.1311762695\" && exit\n  (( $(echo \"$constPi - 3.1519016581 < $1 && 3.1519016581 - $constPi < $1\" | bc -l) )) && echo \"97 3.1519016581\" && exit\n  (( $(echo \"$constPi - 3.1313888375 < $1 && 3.1313888375 - $constPi < $1\" | bc -l) )) && echo \"98 3.1313888375\" && exit\n  (( $(echo \"$constPi - 3.1516934061 < $1 && 3.1516934061 - $constPi < $1\" | bc -l) )) && echo \"99 3.1516934061\" && exit\n  (( $(echo \"$constPi - 3.1315929036 < $1 && 3.1315929036 - $constPi < $1\" | bc -l) )) && echo \"100 3.1315929036\" && exit\n  (( $(echo \"$constPi - 3.1514934011 < $1 && 3.1514934011 - $constPi < $1\" | bc -l) )) && echo \"101 3.1514934011\" && exit\n  (( $(echo \"$constPi - 3.1317889676 < $1 && 3.1317889676 - $constPi < $1\" | bc -l) )) && echo \"102 3.1317889676\" && exit\n  (( $(echo \"$constPi - 3.1513011627 < $1 && 3.1513011627 - $constPi < $1\" | bc -l) )) && echo \"103 3.1513011627\" && exit\n  (( $(echo \"$constPi - 3.1319774912 < $1 && 3.1319774912 - $constPi < $1\" | bc -l) )) && echo \"104 3.1319774912\" && exit\n  (( $(echo \"$constPi - 3.1511162472 < $1 && 3.1511162472 - $constPi < $1\" | bc -l) )) && echo \"105 3.1511162472\" && exit\n  (( $(echo \"$constPi - 3.1321589012 < $1 && 3.1321589012 - $constPi < $1\" | bc -l) )) && echo \"106 3.1321589012\" && exit\n  (( $(echo \"$constPi - 3.1509382439 < $1 && 3.1509382439 - $constPi < $1\" | bc -l) )) && echo \"107 3.1509382439\" && exit\n  (( $(echo \"$constPi - 3.1323335928 < $1 && 3.1323335928 - $constPi < $1\" | bc -l) )) && echo \"108 3.1323335928\" && exit\n  (( $(echo \"$constPi - 3.1507667725 < $1 && 3.1507667725 - $constPi < $1\" | bc -l) )) && echo \"109 3.1507667725\" && exit\n  (( $(echo \"$constPi - 3.1325019323 < $1 && 3.1325019323 - $constPi < $1\" | bc -l) )) && echo \"110 3.1325019323\" && exit\n  (( $(echo \"$constPi - 3.1506014798 < $1 && 3.1506014798 - $constPi < $1\" | bc -l) )) && echo \"111 3.1506014798\" && exit\n  (( $(echo \"$constPi - 3.1326642601 < $1 && 3.1326642601 - $constPi < $1\" | bc -l) )) && echo \"112 3.1326642601\" && exit\n  (( $(echo \"$constPi - 3.1504420379 < $1 && 3.1504420379 - $constPi < $1\" | bc -l) )) && echo \"113 3.1504420379\" && exit\n  (( $(echo \"$constPi - 3.1328208925 < $1 && 3.1328208925 - $constPi < $1\" | bc -l) )) && echo \"114 3.1328208925\" && exit\n  (( $(echo \"$constPi - 3.1502881414 < $1 && 3.1502881414 - $constPi < $1\" | bc -l) )) && echo \"115 3.1502881414\" && exit\n  (( $(echo \"$constPi - 3.1329721241 < $1 && 3.1329721241 - $constPi < $1\" | bc -l) )) && echo \"116 3.1329721241\" && exit\n  (( $(echo \"$constPi - 3.1501395061 < $1 && 3.1501395061 - $constPi < $1\" | bc -l) )) && echo \"117 3.1501395061\" && exit\n  (( $(echo \"$constPi - 3.1331182295 < $1 && 3.1331182295 - $constPi < $1\" | bc -l) )) && echo \"118 3.1331182295\" && exit\n  (( $(echo \"$constPi - 3.1499958666 < $1 && 3.1499958666 - $constPi < $1\" | bc -l) )) && echo \"119 3.1499958666\" && exit\n  (( $(echo \"$constPi - 3.1332594649 < $1 && 3.1332594649 - $constPi < $1\" | bc -l) )) && echo \"120 3.1332594649\" && exit\n  (( $(echo \"$constPi - 3.1498569753 < $1 && 3.1498569753 - $constPi < $1\" | bc -l) )) && echo \"121 3.1498569753\" && exit\n  (( $(echo \"$constPi - 3.1333960699 < $1 && 3.1333960699 - $constPi < $1\" | bc -l) )) && echo \"122 3.1333960699\" && exit\n  (( $(echo \"$constPi - 3.1497226006 < $1 && 3.1497226006 - $constPi < $1\" | bc -l) )) && echo \"123 3.1497226006\" && exit\n  (( $(echo \"$constPi - 3.1335282686 < $1 && 3.1335282686 - $constPi < $1\" | bc -l) )) && echo \"124 3.1335282686\" && exit\n  (( $(echo \"$constPi - 3.1495925256 < $1 && 3.1495925256 - $constPi < $1\" | bc -l) )) && echo \"125 3.1495925256\" && exit\n  (( $(echo \"$constPi - 3.1336562706 < $1 && 3.1336562706 - $constPi < $1\" | bc -l) )) && echo \"126 3.1336562706\" && exit\n  (( $(echo \"$constPi - 3.1494665473 < $1 && 3.1494665473 - $constPi < $1\" | bc -l) )) && echo \"127 3.1494665473\" && exit\n  (( $(echo \"$constPi - 3.1337802728 < $1 && 3.1337802728 - $constPi < $1\" | bc -l) )) && echo \"128 3.1337802728\" && exit\n  (( $(echo \"$constPi - 3.1493444751 < $1 && 3.1493444751 - $constPi < $1\" | bc -l) )) && echo \"129 3.1493444751\" && exit\n  (( $(echo \"$constPi - 3.1339004597 < $1 && 3.1339004597 - $constPi < $1\" | bc -l) )) && echo \"130 3.1339004597\" && exit\n  (( $(echo \"$constPi - 3.1492261302 < $1 && 3.1492261302 - $constPi < $1\" | bc -l) )) && echo \"131 3.1492261302\" && exit\n  (( $(echo \"$constPi - 3.1340170047 < $1 && 3.1340170047 - $constPi < $1\" | bc -l) )) && echo \"132 3.1340170047\" && exit\n  (( $(echo \"$constPi - 3.1491113443 < $1 && 3.1491113443 - $constPi < $1\" | bc -l) )) && echo \"133 3.1491113443\" && exit\n  (( $(echo \"$constPi - 3.1341300709 < $1 && 3.1341300709 - $constPi < $1\" | bc -l) )) && echo \"134 3.1341300709\" && exit\n  (( $(echo \"$constPi - 3.1489999594 < $1 && 3.1489999594 - $constPi < $1\" | bc -l) )) && echo \"135 3.1489999594\" && exit\n  (( $(echo \"$constPi - 3.1342398118 < $1 && 3.1342398118 - $constPi < $1\" | bc -l) )) && echo \"136 3.1342398118\" && exit\n  (( $(echo \"$constPi - 3.1488918264 < $1 && 3.1488918264 - $constPi < $1\" | bc -l) )) && echo \"137 3.1488918264\" && exit\n  (( $(echo \"$constPi - 3.1343463719 < $1 && 3.1343463719 - $constPi < $1\" | bc -l) )) && echo \"138 3.1343463719\" && exit\n  (( $(echo \"$constPi - 3.1487868051 < $1 && 3.1487868051 - $constPi < $1\" | bc -l) )) && echo \"139 3.1487868051\" && exit\n  (( $(echo \"$constPi - 3.1344498875 < $1 && 3.1344498875 - $constPi < $1\" | bc -l) )) && echo \"140 3.1344498875\" && exit\n  (( $(echo \"$constPi - 3.1486847630 < $1 && 3.1486847630 - $constPi < $1\" | bc -l) )) && echo \"141 3.1486847630\" && exit\n}\n\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336800,"user_id":492,"body":"#!\/bin\/bash\nabs () { echo -E \"${1#-}\" ;}\niterPi() {\n    epsilon=$1; value=0; cnt=0; factor=1; divider=1; pi=3.1415926535897932\n    while [ 1 ]\n    do\n        d=$(bc <<< \"scale=16; $pi - ($value * 4)\")\n        d=$(abs $d)\n        if (( $(echo \"$d < $epsilon\" | bc -l) )); then break; fi\n        value=$(bc <<< \"scale=16; $value + $factor \/ $divider\")\n        factor=$((-$factor))\n        divider=$(($divider+2))\n        cnt=$(($cnt+1))\n    done\n    t=$(bc <<< \"scale=16; $value * 4\")\n    printf \"%d %.10f\n\" $cnt $t\n}\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336801,"user_id":null,"body":"#!\/bin\/bash\n\ncoproc bc\n\ncompute() {\n  echo $1 >&${COPROC[1]}\n  read <&${COPROC[0]}\n  echo $REPLY\n}\n\nabs() {\n  echo ${1#-}\n}\n\niterPi() {\n  epsilon=$1\n  currentPi=0\n  Pi=3.141592653589793238462643383279502884197169399375105820974944592\n\n  declare -i divider=1\n  declare -i iter=0\n  operation=\"+\"\n\n  echo \"scale=16;\" >&${COPROC[1]}\n\n  while [ $(compute $(abs $(compute \"$Pi - $currentPi\"))\" > $epsilon\" ) == \"1\" ]; do\n    currentPi=$(compute \"$currentPi $operation 4 \/ $divider\")\n    if [ $(($iter % 2)) -eq 0 ]; then\n      operation=\"-\"\n    else\n      operation=\"+\"\n    fi\n    divider+=2\n    iter+=1\n  done\n\n  currentPi=$(compute \"${currentPi:0:12} + (0.${currentPi:12} > 0.5) \/ 10000000000\")\n  echo $iter ${currentPi:0:12}\n}\niterPi $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336802,"user_id":53,"body":"#!\/bin\/bash\necho $1 | awk '\n{\n  epsilon = $1;\n  cpi = 3.14159265358979323846;\n  pi4 = 1.0;\n  sign = -1.0;\n  iterations = 1;\n  denom = 3.0;\n  while (4.0 * pi4 - cpi >= epsilon || cpi - 4.0 * pi4 >= epsilon) {\n    pi4 = pi4 + sign * (1.0 \/ denom);\n    sign = sign * (-1.0);\n    denom = denom + 2.0;\n    iterations = iterations + 1;\n  }\n  ans = 4.0 * pi4;\n  printf(\"%d %0.10f\", iterations, ans);\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336803,"user_id":null,"body":"#! \/bin\/bash\n\ncalc()\n{\n    # Run awk on arithmetic expression.\n\n    awk \"function abs(x) { return (x >= 0) ? x : -x } BEGIN { $1 }\"\n}\n\niterPi()\n{\n    # Return number of iterations to calculate Pi within epsilon.\n\n    eps=$1\n    pi=\"atan2(0, -1)\"\n\n    sum=1\n    n=1\n    while [ $(calc \"print (abs(($sum * 4) - $pi) > $eps) ? 1 : 0\") -eq 1 ]; do\n        [ $((n % 2)) -eq 1 ] && num=-1 || num=1\n        den=$(((n - 1) * 2 + 3))\n        sum=$(calc \"printf \\\"%.15f\\\", $sum + $num \/ $den\")\n        n=$((++n))\n    done\n    echo $n\" \"$(calc \"printf \\\"%.10f\\\", $sum * 4\")\n}\n\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336804,"user_id":null,"body":"#!\/bin\/bash\niterPi() {\n    local pi result count\n    result=0\n    pi=$(echo \"scale=18; 4*a(1)\" | bc -l)\n    for ((count=0; $(bc -l <<< \"re=$pi-$result*4; ! -1*$1<re || ! re<$1\"); count++)); do\n        if ((count % 2)); then\n            result=$(bc -l <<< \"scale=18; $result-1\/(2*$count+1)\")\n        else\n            result=$(bc -l <<< \"scale=18; $result+1\/(2*$count+1)\")\n        fi\n    done\n    echo \"$count $(bc -l <<< \"scale=10; rou=10^scale; (($result*4) * rou + 0.5)\/rou\")\"\n}\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336805,"user_id":null,"body":"#!\/bin\/bash\n\niterPi() {\n    PI=3.14159265358979\n    pi=1\n    counter=3\n    diff=1\n    prec=$1\n    fact=-1\n    while [ $diff -gt 0 ]; do\n      pi=$( echo $pi+$fact\/$counter | bc -l )\n      let fact=-fact\n      let counter+=2\n      diff=$( echo \"($PI-$pi*4)*$fact > $prec \" | bc -l )\n    done\n    printf \"%d %.10f\n\" $(( (counter-1)\/2 )) $( echo $pi*4 | bc -l )\n}\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336806,"user_id":null,"body":"#!\/bin\/bash\niterPi() {\n    bc -lq <<EOF\n    define abs(n) {if(n>0) return n else return (-n);}\n    factor=1\n    divider=1\n    result=0\n    count=0\n    scale=16\n    pi=a(1)*4\n    while(abs(result-pi)>$1){\n        result+=factor*4\/divider;\n        factor*=(-1);\n        divider+=2;\n        count+=1;\n    }\n    scale=10\n    print count,\" \",(result+0.00000000005)\/1.0\nEOF\n}\niterPi $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336807,"user_id":null,"body":"#!\/bin\/bash\niterPi() {\n    export BC_LINE_LENGTH=0\n    bc -lq <<EOF\n    define abs(n) { if(n<0) return (-n) else return (n); }\n    define round10(num) { scale = 10; num10 = num\/1; if((num - num10) > 0.00000000005) num10 += 0.0000000001; return num10; }\n    scale=13\n    epsilon4=$1\/4; pi4=a(1)\n    it=1; sign=-1; den=3; acc=1.0\n    while (abs(acc-pi4) > epsilon4) {\n      acc += sign\/den\n      den += 2\n      sign *= -1\n      it +=1\n    }\n    \n    print it,\" \",round10(4*acc)\nEOF\n}\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336808,"user_id":null,"body":"#!\/bin\/bash\niterPi() {\n  eps=$1\n  scale=13\n  pi=$(bc -l <<< \"4*a(1)\")\n  \n  if [[ $(bc <<< \"1000 * $eps\" |  cut -d '.' -f1) -le 50 ]]\n  then\n    i=20\n    result=\".7729059516676\"\n  elif [[ $(bc <<< \"1000 * $eps\" |  cut -d '.' -f1) -le 100 ]]\n  then\n    i=10\n    result=\".760459904733\"\n  else\n    i=0\n    result=0\n  fi\n  \n  difference=$(bc <<< \"scale=10;sqrt((4 * $result - $pi) ^ 2)\/$eps\")\n  \n  while [[ \"$(echo $difference | cut -d '.' -f1)\" -ge 1 ]]\n  do\n    result=$(bc <<< \"scale=$scale;$result + ((-1) ^ $i) \/ (2 * $i + 1)\")\n    difference=$(bc <<< \"scale=10;sqrt((4 * $result - $pi) ^ 2)\/$eps\")\n    i=$(( i + 1 ))\n  done\n  \n  show=$(bc <<< \"scale=10;4*$result+0.00000000005\")\n  echo \"$i ${show:0:12}\"\n}\niterPi $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"550554fd08b86f84fe000a58":[{"id":336809,"user_id":null,"body":"for s1 in $1\ndo \n  [[ $2 = *$s1* ]] && echo $s1\ndone | sort -u | paste -sd,","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336810,"user_id":null,"body":"for s in $1; do grep -q $s <<< $2 && echo $s; done | sort -u | paste -sd,","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336811,"user_id":null,"body":"for i in $1; do grep -q \"$i\" <<< $2 && echo $i; done | sort -u | tr \"\n\" \",\" | sed s\/,$\/\/","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336812,"user_id":null,"body":"#return a string with words separated by commas (see \"Sample Tests\")\n#!\/bin\/bash\ninArray() {\n  for s1 in $1; do\n    for s2 in $2; do\n      [[ $s2 = *$s1* ]] && echo $s1\n    done\n  done | sort -u | tr '\n', ',' | head -c -1\n}\ninArray \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336813,"user_id":492,"body":"#!\/bin\/bash\ninArray() {\n    a1=$1; a2=$2\n    for s in $a1; do\n        if echo \"$a2\" | grep -q \"$s\"; then\n            result=\"${result} $s\"\n        fi\n    done\n    result=$(echo $result | tr ' ' '\n' | sort -u | tr '\n' ',')\n    result=${result:0:${#result}-1}\n    echo $result\n}\ninArray \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336814,"user_id":null,"body":"#return a string with words separated by commas (see \"Sample Tests\")\n\n#!\/bin\/bash\ninArray() {\n    sorted1=$(echo \"$1\" | tr \" \" \"\n\" | sort -u)\n\n    for j in $sorted1; do \n      if [[ $2 == *$j* ]]; then \n        if [[ -z \"$str\" ]]; then\n          str=$j\n        else\n          str=\"$str,$j\"\n        fi\n      fi\n    done\n    echo \"$str\"\n}\ninArray \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336815,"user_id":null,"body":"#return a string with words separated by commas (see \"Sample Tests\")\n#!\/bin\/bash\nfunction inArray () {                                                                                                                                                                                                                        \n        declare -a return_arr                                                                                                                                                                                                                \n                                                                                                                                                                                                                                             \n        for arr2_word in $(printf \"%s\n\" $2); do                                                                                                                                                                                             \n                for arr1_word in $(printf \"%s\n\" $1); do                                                                                                                                                                                     \n                        if [[ \"${arr2_word}\" =~ .*\"${arr1_word}\".* ]]; then                                                                                                                                                                  \n                                return_arr+=(\"${arr1_word}\")                                                                                                                                                                                 \n                        else                                                                                                                                                                                                                 \n                                continue                                                                                                                                                                                                     \n                        fi                                                                                                                                                                                                                   \n                done                                                                                                                                                                                                                         \n        done                                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                             \n        printf %s, $(echo \"${return_arr[@]}\" | tr ' ' '\n' | sort -u) | sed 's\/.$\/\/'                                                                                                                                                                     \n                                                                                                                                                                                                                                             \n}    # ----------  end of function inArray  ----------  \ninArray \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336816,"user_id":null,"body":"#return a string with words separated by commas (see \"Sample Tests\")\n#!\/bin\/bash\ninArray() {\n    if [[ -z $1 || -z $2 ]];then\n      echo \"\"\n      exit 0\n    fi\n    for i in $1;do\n      for j in $2;do\n        if [[ $j =~ $i ]];then\n          result=\"$result $i\"\n        fi\n      done\n    done\n    echo $result | tr ' ' '\n' | sort | uniq | sed ':a;N;$!ba;s\/\n\/,\/g'\n\n}\ninArray \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336817,"user_id":null,"body":"#return a string with words separated by commas (see \"Sample Tests\")\n#!\/bin\/bash\ninArray() {\n    result=''\n    numberOfWords=$(echo ${1} | wc -w)\n    counter=0\n    for stringOne in $1\n    do\n        ((counter=counter+1))\n      for stringTwo in $2\n      do\n        if [[ \"${stringTwo}\" == *\"${stringOne}\"* ]]\n        then\n          if [[ $counter -eq  $numberOfWords ]]\n          then\n            result+=\"${stringOne}\"\n            break\n          fi\n          result+=\"${stringOne},\"\n        fi\n      done\n    done\n    result=$(echo \"$result\" | tr ',' '\n' | grep -v '^$' | sort | uniq | tr '\n' ',')\n    result=${result::-1}\n    echo $result\n}\ninArray \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336818,"user_id":null,"body":"#return a string with words separated by commas (see \"Sample Tests\")\n#!\/bin\/bash\nread -a arr1 <<< \"$1\"\n\n[[ \"${#arr1[@]}\" -eq 0 ]] || [[ -z \"$2\" ]] &&  echo \"\" && exit 1\n\n\nsorted=$(for element in ${arr1[@]}; do\n                echo \"$2\" | grep -os \"$element\" &>\/dev\/null && echo \"$element \"\n        done | sort | uniq)\n\nsorted=$(echo $sorted | awk '{print $0}')\necho ${sorted\/\/ \/,}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5506b230a11c0aeab3000c1f":[{"id":336819,"user_id":null,"body":"#!\/bin\/bash\nevaporator () {\n  res=$(bc -l <<< \"l($3\/100)\/l(1-$2\/100)\")\n  echo $(bc <<< \"$res-$res%1+1\")\n}\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336820,"user_id":null,"body":"evaporator () {\n    echo \"\n    scale = 5\n    deo = $1\n    count = 0\n    while (deo >= $1*$3\/100) {\n      deo = deo-deo*$2\/100\n      count += 1\n    }\n    print count\" | bc\n}\nevaporator $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336821,"user_id":null,"body":"#!\/bin\/bash\nevaporator () {\n  local threshold=\"$3\"\n  local loss_perc=\"$2\"\n\n  local loss_ratio=$(echo \"(100 - $loss_perc) \/ 100.0\" | bc -l)\n\n  # days = log base $loss_ratio of ($threshold \/ 100)\n  local days=`echo \"l($threshold \/ 100.0) \/ l($loss_ratio)\" | bc -l`\n\n  # Return ceiling of $days\n  local int_part=$(echo $days | sed 's\/\\..*\/\/')\n  local dec_digits=$(echo $days | sed 's\/.*\\.0*\\([0-9]\\+\\).*\/\\1\/')\n  [[ $dec_digits -eq 0 ]] && echo $int_part || echo $((int_part + 1))\n}\n\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336822,"user_id":null,"body":"#!\/bin\/bash\nevap_per_day=$2\nthreshold=$3\nawk \"BEGIN { \n  r = log($threshold \/ 100) \/ log((100 - $evap_per_day) \/ 100);\n  print int(r) == r ? r : int(r) + 1;\n}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336823,"user_id":492,"body":"#!\/bin\/bash\nauxTP='\nfrom sys import argv\nfrom math import ceil, log\nimport math\ndef aux(content, evap_per_day, threshold):\n  evap_per_day = float(evap_per_day); threshold = float(threshold)\n  return int(ceil(log(threshold \/ 100.0) \/ log(1.0 - evap_per_day \/ 100.0)))\na=aux(argv[1:][0], argv[1:][1], argv[1:][2])\nprint a\n'\nevaporator () {\n    echo `python -c \"$auxTP\" \"$1\" \"$2\" \"$3\"`\n}\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336824,"user_id":492,"body":"#!\/bin\/bash\nauxTP='\nfrom sys import argv\nfrom math import ceil, log\nimport math\ndef aux(content, evap_per_day, threshold):\n  evap_per_day = float(evap_per_day); threshold = float(threshold)\n  return int(ceil(log(threshold \/ 100.0) \/ log(1.0 - evap_per_day \/ 100.0)))\na=aux(argv[1:][0], argv[1:][1], argv[1:][2])\nprint a\n'\nevaporator () {\n    echo `python -c \"$auxTP\" \"$1\" \"$2\" \"$3\"`\n}\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336825,"user_id":null,"body":"#!\/bin\/bash\nevaporator () {\n    # your code\necho $2 $3 | awk '\n{\n  print int(log($2\/100)\/log(1-$1\/100))+1;\n}\n'\n    \n}\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336826,"user_id":null,"body":"#!\/bin\/bash\nevaporator () {\n    bc -ql <<< \"\n      days = l($3\/100) \/ l(1-$2\/100)\n      scale=0\n      (days+0.9999)\/1\"\n}\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336827,"user_id":null,"body":"#!\/bin\/bash\nevaporator () {\n    day=$(awk -v ev=\"$2\" -v lim=\"$3\" '\n            BEGIN{\n                day=0;\n                base=100;\n                ev=ev\/100\n                while (base > lim) {\n                    day++\n                    base = base*(1-ev)\n                };\n                print day}'\n        )\n    \n    echo $day\n}\nevaporator \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336828,"user_id":null,"body":"#!\/bin\/bash\n\nevap_per_day=$2\ncontent=$3\n\necho \"$evap_per_day\" \"$content\" | awk '{ print int(log($2 \/ 100) \/ log(1 - $1 \/ 100)) + 1}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5508249a98b3234f420000fb":[{"id":336829,"user_id":492,"body":"#!\/bin\/bash\naux65='\nfrom sys import argv\ndef shift_char(c, i):\n    r = c\n    if \"a\" <= c <= \"z\":\n        o = (ord(c) - ord(\"a\") + i) % 26\n        if o < 0:\n            o += 26\n        r = chr(o + ord(\"a\"))\n    elif \"A\" <= c <= \"Z\":\n        o = (ord(c) - ord(\"A\") + i) % 26\n        if o < 0:\n            o += 26\n        r = chr(o + ord(\"A\"))\n    return r\ndef moving_shift(string, shift):\n    encoded = \"\"; shift = int(shift)\n    for s in string:\n        encoded += shift_char(s, shift)\n        shift += 1\n    chunk = len(encoded) \/\/ 5\n    if len(encoded) % 5 != 0:\n        chunk += 1\n    return \";\".join([encoded[i * chunk:(i + 1) * chunk] for i in range(5)])\ndef demoving_shift(strings, shift):\n    encoded = strings; shift = int(shift)\n    result = \"\"\n    offset = -shift\n    for s in encoded:\n        result += shift_char(s, offset)\n        offset -= 1\n    return result\ndef aux(fct, s, o):\n    return globals()[fct](s, o)\na=aux(argv[1:][0], argv[1:][1], argv[1:][2])\nprint a\n'\n# takes 3 parameters \n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\noper () {\n    echo `python -c \"$aux65\" \"$1\" \"$2\" \"$3\"`\n}\noper \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336830,"user_id":null,"body":"#!\/bin\/bash\n# takes 3 parameters \n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\n#v = [\"J vltasl rlhr \", \"zdfog odxr ypw\", \" atasl rlhr p \", \"gwkzzyq zntyhv\", \" lvz wp!!!\"]\noper () {\n    # your code\n    #use 2 for loop string \n    # -1,-2,-3\n    #decode\n    s=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    maxs=$(echo ${#s})\n    \n    #echo $2\n    len=${#2}\n    rs=\"\"\n    shift=$3    \n    #echo \"chieu dai chuoi $len\"\n    # part str =5 distance \n    #distance=$((len\/5))    \n    distance=$(($len%5?len\/5+1:len\/5))\n    #echo $distance\n    #exit 1\n    \n    declare -i part=1\n    declare -i oldpart=0\n    for i in $(eval echo {0..$((len-1))}); do\n      if [[ ! ${2:$i:1} == \" \"  && ${2:$i:1} =~ [A-Za-z]  ]] ; then\n        #find in s and get s+1\n        ch=${2:$i:1}\n        \n        #echo \"character current $ch\"\n        # find index character in s and replace\n        substr=${s%%$ch*}\n        #echo $substr\n        index=$(echo ${#substr})\n        \n        if [[ $1 == \"moving_shift\" ]] ; then\n         idc=$((index+i+shift))\n        else\n          idc=$((index-(i+shift)))  \n        fi\n        ##check index get abs move idc to >26 if index >26 and else\n        if [[ $idc -ge $maxs && $index -ge 26 ]]; then\n            idc=$(((idc%26)+26))         \n          elif [[ $idc -ge 26 && $index -lt 26 ]] ; then\n            idc=$((idc%26))\n          elif [[ $idc -lt 0 && $index -lt 26 ]] ; then              \n              idc=$((26+(idc%26)))\n          elif [[ $idc -le 26 && $index -ge 26 && $idc -ge 0 ]] ; then\n              #echo ${s:$idc:1}\n              idc=$((26+(idc%26)))\n              #echo ${s:$idc:1}\n          elif [[ $idc -lt 0 && $index -ge 26 ]] ; then\n              ## idc -26 -52\n              idc=$((52+(idc%26)))              \n              if [[ $idc -ge 52 ]] ; then\n                idc=$((26+(idc%26)))\n              fi          \n        fi\n\n        temp=$(echo ${s:$idc:1})\n        rs+=$temp      \n      else\n       rs+=${2:$((i+0)):1}      \n      fi\n      if [[ $((i+1-oldpart)) -eq $distance  && $part -le 4 ]] ; then\n        #echo $((i-oldpart))\n        if [[ $1 == \"moving_shift\" ]] ; then\n         rs+=\";\"\n        fi                \n        oldpart=$((i+1))        \n        part+=1\n      fi\n\n    done   \n    if [[ part -lt 5 ]] ;  then\n      rs+=\";\"\n    fi\n    tp=$(echo ${rs})\n    echo $tp       \n}\noper \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336831,"user_id":null,"body":"#!\/bin\/bash\n# takes 3 parameters\n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\n\noper () {\n  local nshift=$3\n  local slength=$(( ${#2} ))\n  local chunksize=$(( $slength \/ 5 ))\n  (( ($slength % 5) != 0 )) && chunksize=$(( $chunksize + 1 ))\n  local pos=0\n  while IFS= read -r c; do\n    pos=$(( pos + 1 ))\n    if [[ \"$1\" == \"moving_shift\" ]]; then\n      shift_char \"$1\" \"$c\" \"$nshift\"\n      (( ($pos % $chunksize) == 0 )) && [[ $pos -lt $slength ]] && printf \";\"\n      nshift=$(( nshift + 1 ))\n    elif [[ \"$1\" == \"demoving_shift\" ]]; then\n      shift_char \"$1\" \"$c\" \"$nshift\"\n      nshift=$(( nshift + 1 ))\n    fi\n    #[[ $pos == 14 ]] && break\n  done < <(echo \"$2\" | grep -o .)\n  \n  [[ \"$1\" == \"moving_shift\" && $slength -le 12 ]] && printf \";\"\n}\n\nshift_char () {\n  local action=\"$1\" c=\"$2\" nshift=\"$3\"\n\n  if [[ \"${c}\" =~ ^[a-z]$ ]]; then\n    \"$action\" \"${c}\" \"$nshift\" 97\n  elif [[ \"${c}\" =~ ^[A-Z]$ ]]; then\n    \"$action\" \"${c}\" \"$nshift\" 65\n  else\n    printf \"%s\" \"$c\"\n  fi\n}\n\nmoving_shift () {\n  local nshift=\"$2\"  ashift=\"$3\"\n  local dc=\"$(printf \"%d\" \"'$1\")\"\n  dc=$(( ((($dc - $ashift) + $nshift) % 26) + $ashift ))\n  printf \"\\x$(printf \"%x\" \"$dc\")\"\n}\n\ndemoving_shift () {\n  local nshift=\"$2\"  ashift=\"$3\"\n  local dc=\"$(printf \"%d\" \"'$1\")\"\n  dc=$(( ($dc - $ashift + 26 - $nshift) % 26 ))\n  [[ $dc -lt 0 ]] && dc=$((26 + $dc))\n  dc=$(( $dc + $ashift))\n  printf \"\\x$(printf \"%x\" \"$dc\")\"\n}\n\noper \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336832,"user_id":null,"body":"#! \/bin\/bash\n\nchr()\n{\n    # Return ASCII character for number.\n\n    printf \"\\\\$(printf '%o' $1)\"\n}\n\nord()\n{\n    # Return ASCII number for character.\n\n    printf '%d' \"'$1\"\n}\n\nroll()\n{\n    # Shift letter by amount modulo 26; other characters are unchanged.\n\n    ltr=$1\n    amt=$2\n    num=$(ord \"$ltr\")\n\n    if [ $num -ge 65 -a $num -le 90 ]; then\n        beg=65\n    elif [ $num -ge 97 -a $num -le 122 ]; then\n        beg=97\n    else\n        echo \"$ltr\"\n        return\n    fi\n\n    rem=$((($num - $beg + $amt) % 26))\n    [ $rem -lt 0 ] && rem=$((26 + $rem))\n    echo $(chr $(($beg + $rem)))\n}\n\nmoving_shift()\n{\n    # Encode string using Caeser cipher with increasing shift.\n\n    str=$1\n    amt=$2\n    len=${#str}\n    seg=5\n    div=$(($len \/ $seg))\n    [ $(($len % $seg)) -ne 0 ] && div=$(($div + 1))\n\n    i=0\n    s=$amt\n    msg=()\n    while [ $i -lt $len ]; do\n        sub=\n        while [ ${#sub} -lt $div ]; do\n            sub+=$(roll \"${str:$i:1}\" $s)\n            i=$(($i + 1))\n            [ $i -ge $len ] && break\n            s=$(($s + 1))\n        done\n        msg+=(\"$sub\")\n    done\n\n    out=\n    for s in \"${msg[@]:0:$seg-1}\"; do out+=\"$s;\"; done\n    echo \"$out${msg[*]:$seg-1:1}\"\n}\n\ndemoving_shift()\n{\n    # Decode string using Caeser cipher with decreasing shift.\n\n    str=\"${*:1:${#*}-1}\"\n    amt=${*:${#*}:1}\n    len=${#str}\n\n    i=0\n    s=-$amt\n    msg=''\n    while [ $i -lt $len ]; do\n        msg+=$(roll \"${str:$i:1}\" $s)\n        i=$(($i + 1))\n        s=$(($s - 1))\n    done\n    echo \"$msg\"\n}\n\necho $($1 \"$2\" $3)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336833,"user_id":null,"body":"#!\/bin\/bash\n# takes 3 parameters \n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\nmoving_shift() {\n\tciphertext=$(do_shift \"$1\" \"$2\" 1)\n\techo $(split \"$ciphertext\")\n}\n\ndemoving_shift() {\n\tdo_shift \"$1\" \"$2\" \"-1\"\n}\ndo_shift() {\n\t# echo \"peppo\"\n\tlocal input=$1\n\tlocal s=$2\n\tlocal dir=$3\n\n\tlocal i=0\n\tdeclare -A charToIndex\n\tfor c in {a..z}; do\n\t\tchars+=$c\n\t\tcharToIndex[$c]=$i\n\t\t((++i))\n\tdone\n\n\tfor ((i=0; i<${#input}; ++i, ++s)); do\n\t\tnewChar=${input:i:1}\n\t\tif [[ $newChar =~ [a-zA-Z] ]]; then\n\t\t\torgChar=$newChar\n\t\t\tindex=(${charToIndex[${orgChar,}]})\n\t\t\t((index = (26 + index + (s*dir) ) % 26))\n\t\t\tnewChar=${chars:$index:1}\n\t\t\t[[ \"$orgChar\" =~ [A-Z] ]] && newChar=${newChar^}\n\t\tfi\n\t\tcipherText+=$newChar\n\tdone\n\techo $cipherText\n}\n\nsplit() {\n\tinput=$1\n\tlenPerPart=$(( (${#input} + 5 - 1) \/ 5 )) # ceil(input\/5)\n\tout=()\n\tfor i in {0..4}; do\n\t\tout[$i]=${input:(($lenPerPart * $i)):$lenPerPart} \n\tdone\n\tIFS=';'\n\techo \"${out[*]}\"\n}\n\necho $($1 \"$2\" \"$3\")\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336834,"user_id":null,"body":"#!\/bin\/bash\n# takes 3 parameters \n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\nexport LC_COLLATE=C;\n\nalpha=('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z');\nAlpha=('A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z');\n\nshift_letter() {\n\n    if [[ $1 =~ [A-Z] ]]; then\n        local j=1\n        for i in ${Alpha[@]}; do\n            if [[ $i = $1 ]]; then\n                break;\n            fi\n            j=$((j+1));\n        done\n\n        j=$(($j+$2-1));\n        j=$(($j%26));\n\n        echo ${Alpha[$j]};\n    elif [[ $1 =~ [a-z] ]]; then\n        local j=1\n        for i in ${alpha[@]}; do\n            if [[ $i = $1 ]]; then\n                break;\n            fi\n            j=$((j+1));\n        done\n\n        j=$(($j+$2-1));\n        j=$(($j%26));\n\n        echo ${alpha[$j]};\n    else\n        echo $1\n    fi\n}\n\nmoving_shift() {\n    local message=\"$1\";\n    local shift_range=\"$2\";\n    local res=\"\";\n\n\n    local length=${#message};\n    local div=$((length\/5))\n    local rest=$((length%5))\n\n    if [[ $rest -gt 0 ]]; then\n        div=$((div+1));\n    fi\n\n    local numsep=0\n    for (( i=0; i<${#message}; i++ )); do\n        letter=\"${message:$i:1}\";\n        if [[ -z \"${letter\/\/ }\" ]]; then\n            res+=\" \";\n        else\n            local shift_nb=$((i + shift_range))\n            shifted_letter=$(shift_letter $letter $shift_nb);\n            res+=$shifted_letter;\n        fi\n\n        local sep=$((i+1))\n        sep=$((sep%div))\n        if [[ $sep -eq 0 ]] && [[ i -lt $((div * 5 - 1)) ]]; then\n            res+=\";\"\n            numsep=$((numsep + 1))\n        fi\n    done\n\n    if [[ $numsep -lt 4 ]]; then\n        res+=\";\"\n    fi\n\n    echo $res;\n}\n\ndemoving_shift() {\n    \n    local message=\"$1\";\n    local shift_range=\"$2\";\n    local res=\"\";\n\n    local length=${#message};\n    local div=$((length\/5))\n    local rest=$((length%5))\n\n    for (( i=0; i<${#message}; i++ )); do\n        letter=\"${message:$i:1}\";\n        if [[ -z \"${letter\/\/ }\" ]]; then\n            res+=\" \";\n        else\n            local shift_nb=$((0 - i - shift_range))\n            shifted_letter=$(shift_letter $letter $shift_nb);\n            res+=$shifted_letter;\n        fi\n    done\n\n    echo $res;\n}\n\noper() {\n    \"$1\" \"$2\" \"$3\"\n}\noper \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336835,"user_id":null,"body":"#!\/bin\/bash\ndemoving_shift () {\n   for ((i=0; i<${#str} ; i++)); do\n    [ \"${str:$i:1}\" != \" \" ] && echo -n $(sed \"y\/${alpha1:$rot}${alpha1::$rot}\/${alpha1}\/\" <<< ${str:$i:1} | sed \"y\/${alpha2:$rot}${alpha2::$rot}\/${alpha2}\/\") || echo -n \" \"\n    [ $rot -lt 26 ] && ((rot++)) || rot=$(expr $rot - 26 + 1)\n  done\n}\n\nmoving_shift () {\n  resStr=$(for ((i=0; i<${#str} ; i++)); do\n    [ \"${str:$i:1}\" != \" \" ] && echo -n $(sed \"y\/${alpha1}\/${alpha1:$rot}${alpha1::$rot}\/\" <<< ${str:$i:1} | sed \"y\/${alpha2}\/${alpha2:$rot}${alpha2::$rot}\/\") || echo -n \" \"\n    [ $(((($i + 1) % $cuttingSize))) -eq 0 ] && echo -n \";\"\n    [ $rot -lt 26 ] && ((rot++)) || rot=1\n  done)\n  [ $(grep -o \";\" <<< $resStr | wc -l) -lt 5 ] && resStr=\"${resStr};\"\n  [ $(grep -o \";\" <<< $resStr | wc -l) -gt 4 ] && [ \"${str:${#str}-1}\" != \";\" ] && resStr=$(sed s\/\";$\"\/\/ <<< $resStr)\n  echo -n $resStr\n}\nalpha1=\"abcdefghijklmnopqrstuvwxyz\" alpha2=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nstr=$2 rot=$3\ncuttingSize=$(bc <<< \"if (${#2} % 5 == 0) print ${#2} \/5 else print ${#2} \/ 5 + 1 \")\n$1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336836,"user_id":null,"body":"#!\/bin\/bash\n\nswitchKeyValue() {\n    arr=($1)\n    for index in \"${!arr[@]}\"\n    do\n        char=${arr[$index]}\n        eval \"$2[$char]=$index\"\n    done\n}\n\nlog() {\n    echo $* 1>&2\n}\n\nALPHA=({A..Z})\ndeclare -A ALPHA_INDEX\nswitchKeyValue \"${ALPHA[*]}\" ALPHA_INDEX\n\nalpha=({a..z})\ndeclare -A alpha_index\nswitchKeyValue \"${alpha[*]}\" alpha_index\n\nALPHA_NUM=${#ALPHA[@]}\n\ninitShift=1\n\n#Param1: index of char in the run\n#Param2: index in the run\n#Return: index of encoded char in ALPHA\/alpha\nencodeIndex() {\n    local sh=$(($initShift+$1))\n    local index=$((($2+$sh)%$ALPHA_NUM))\n    echo $index\n}\n\n#Param1: index of char in the run\n#Param2: index in the run\n#Return: index of decoded char in ALPHA\/alpha\ndecodeIndex() {\n    local sh=$(($initShift+$1))\n    local index=$((($2-$sh)%$ALPHA_NUM))\n    (( $index < 0)) && index=$(($index+$ALPHA_NUM))\n    echo $index\n}\n\n\n#Param1: orginal run\n#Param2: function for get index\n#Return: processed run\nprocessRun() {\n    run=\"$1\"\n    indexFunc=$2\n    code=\"\"\n    for((x=0;x<${#run};x++))\n    do\n        local char=${run:$x:1}\n        if [[ ${ALPHA_INDEX[$char]} ]]; then\n            local index=$($2 $x ${ALPHA_INDEX[$char]})\n            code=\"$code${ALPHA[$index]}\"\n        elif [[ ${alpha_index[$char]} ]]; then\n            local index=$($2 $x ${alpha_index[$char]})\n            code=\"$code${alpha[$index]}\"\n        else\n            code=\"$code$char\"\n        fi\n    done\n    echo \"$code\"\n}\n\n#Param1: string\nmoving_shift() {\n    local encoded=$(processRun \"$1\" encodeIndex)\n    local len=${#encoded}\n    local runLen=$((($len+4)\/5))\n    local ret=\"\"\n    for i in {0..4}\n    do\n        run=${encoded:$(($runLen*$i)):$runLen}\n        [[ $i == 0 ]] && ret=$run || ret=\"$ret;$run\"\n    done\n    echo \"$ret\"\n\n}\n\n#Param1: encoded string\ndemoving_shift() {\n    processRun \"$1\" decodeIndex\n}\n\n# takes 3 parameters\n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\noper () {\n    initShift=$3\n    case $1 in\n        \"moving_shift\")\n            moving_shift \"$2\"\n            ;;\n        \"demoving_shift\")\n            demoving_shift \"$2\"\n            ;;\n    esac\n}\n\noper \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336837,"user_id":null,"body":"#!\/bin\/bash\nalphalow=\"abcdefghijklmnopqrstuvwxyz\"\nalphaupp=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nmoving_shift () {\n        local currentshift=$2\n        local diffshift=$3\n        local ord neword\n        while IFS='' read -r -N 1 char; do\n                ord=$(printf '%d\n' \"'$char\")\n                if (( ord>=97 && ord<=122 )); then\n                        (( neword = (ord-97 + currentshift)%26 ))\n                        echo -n ${alphalow:$neword:1}\n                elif (( ord>=65 && ord<=90 )); then\n                        (( neword = (ord-65 + currentshift)%26 ))\n                        echo -n ${alphaupp:$neword:1}\n                else\n                        echo -n \"$char\"\n                fi\n                (( currentshift += diffshift ))\n        done <<< \"$1\"\n}\n\nmoving_shift () {\n        local encoded=\"$(moving_shift \"$1\" \"$2\" 1)\"\n        # now cut it in 5\n        local chunk\n        local length residue\n        (( length = ${#encoded} \/ 5 ))\n        (( residue = ${#encoded} % 5 ))\n        #echo ${#encoded}, $length, $residue\n        if (( residue > 0 )); then\n                (( length++ ))\n        fi\n        local separator=\"\"\n        local chunk_number=1    # kludgy\n        while IFS='' read -r -n $length chunk; do\n                if (( chunk_number > 5 )); then\n                        break\n                fi\n                echo -n $separator\n                echo -n \"$chunk\"\n                separator=\";\"\n                (( chunk_number++ ))\n        done <<< \"$encoded\"\n        if (( chunk_number <= 5 )); then\n                echo -n \";\"\n        fi\n        echo\n}\n\ndemoving_shift () {\n        moving_shift \"$1\" \"-$2\" -1\n}\n\n# takes 3 parameters \n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\n$1 \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336838,"user_id":null,"body":"#!\/bin\/bash\n# takes 2 parameters\n# 1: character to shift\n# 2: number of characters to shift\nfunction caesar() {\n  if echo \"$1\" | grep --quiet \" \" ; then\n    echo -n \" \"\n    return 0\n  fi\n  UPPERS=ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\n  lowers=abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\n  if echo \"$1\" | grep --quiet --extended-regexp '[a-z]' ; then\n    echo -n \"$1\" | tr \"${lowers:0:26}\" \"${lowers:$2:26}\"\n  else\n    echo -n \"$1\" | tr \"${UPPERS:0:26}\" \"${UPPERS:$2:26}\"\n  fi\n}\n\n\n# takes 3 parameters \n# 1: function  moving_shift or demoving_shift\n# 2: string\n# 3: shift\noper () {\n    # your code\n    if [[ \"$1\" = \"moving_shift\" ]] ; then\n      demoving=1\n      shifter=1\n      number=\"$3\"\n    elif [[ \"$1\" = \"demoving_shift\" ]] ; then\n      demoving=0\n      shifter=-1\n      number=$((26-$3)) # TODO this might be wrong and needs to be thought out more\n      # don't have to do anything to translate the array into a single string again\n    fi\n    IFS=\n    answer=$(echo \"$2\" | while read -rn1 char ; do\n      echo -n \"$(caesar \"$char\" \"$number\")\"\n      number=$((number+shifter))\n      if [[ \"$number\" -ge 26 ]] ; then\n        number=$((number%26))\n      elif [[ \"$number\" -lt 0 ]] ; then\n        number=$((number+26))\n      fi\n    done)\n    unset IFS\n    if [[ $((${#answer}%5)) -eq 0 ]] ; then\n      iter=1\n      index=0\n      size=$((${#answer}\/5))\n      while [[ \"$iter\" -le 5 ]] ; do\n        echo -n \"${answer:$index:$size}\"\n        if [[ \"$iter\" -lt 5 ]] ; then\n          if [[ \"$demoving\" -eq 1 ]] ; then\n            echo -n \";\"\n          fi\n        fi\n        let iter++\n        index=$((index+size))\n      done\n      echo \"\"\n    else\n      size=$((${#answer}\/5))\n      iter=1\n      index=0\n      remainder=$((${#answer}-size*4))\n      while [[ \"$iter\" -lt 5 ]] ; do\n        if [[ \"$remainder\" -gt 0 ]] ; then\n          echo -n \"${answer:$index:$((size+1))}\"\n          let remainder--\n          index=$((index+size+1))\n        else\n          echo -n \"${answer:$index:$size}\"\n          index=$((index+size))\n        fi\n        if [[ \"$demoving\" -eq 1 ]] ; then\n          if [[ \"$remainder\" -gt 0 ]] ; then\n            echo -n \";\"\n          fi\n        fi\n        let iter++\n      done\n      if [[ \"$remainder\" -gt 0 ]] ; then\n        echo -n \"${answer:$index:$remainder}\"\n      else\n        echo -n \"\"\n      fi\n      echo \"\"\n    fi\n}\noper \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"550f22f4d758534c1100025a":[{"id":336839,"user_id":null,"body":"#!\/bin\/bash\n\n#code here\n# bash it not easy to handle list,so input a string like 'NSSNE'  --> OUTPUT: 'E'\necho $1 | sed ': again s\/NS\/\/g;s\/SN\/\/g;s\/WE\/\/g;s\/EW\/\/g; t again'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336840,"user_id":null,"body":"#!\/bin\/bash\nresult=$1\nfor (( i=0; i <= $((`echo -n \"$1\" | wc -c` \/ 2)); ++i )); do\n  result=`echo \"$result\" | sed 's\/NS\/\/g' | sed 's\/SN\/\/g' | sed 's\/EW\/\/g' | sed 's\/WE\/\/g'`\ndone\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336841,"user_id":null,"body":"#!\/bin\/bash\n\nc=\"$1\"\nfunction main {\nlen=$[${#c}-1]\nfor (( i=0 ; i < len  ; i++ )); do\nn=$[$i+1]\nif [ ${c:$i:1} = \"N\" ]\nthen\n\tif [ ${c:$n:1} = \"S\" ]\n\tthen\n\t\tc=\"${c:0:$i}${c:$i+2}\"\n\t\tmain $c\n\tfi\nelif [ ${c:$i:1} = \"S\" ]\nthen\n\tif [ ${c:$n:1} = \"N\" ]\n\tthen\n\t\tc=\"${c:0:$i}${c:$i+2}\"\n\t\tmain $c\n\tfi\nelif [ ${c:$i:1} = \"E\" ]\nthen\n\tif [ ${c:$n:1} = \"W\" ]\n\tthen\n\t\tc=\"${c:0:$i}${c:$i+2}\"\n\t\tmain $c\n\tfi\nelif [ ${c:$i:1} = \"W\" ]\nthen\n\tif [ ${c:$n:1} = \"E\" ]\n\tthen\n\t\tc=\"${c:0:$i}${c:$i+2}\"\n\t\tmain $c\n\tfi\nfi\ndone\n}\n\nmain $1\necho $c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336842,"user_id":1045,"body":"#!\/bin\/bash\nstr=\"$1\"; len=0\nwhile (( len != ${#str} )); do\n  len=${#str}\n  str=$(echo $str|sed -E 's\/(NS)|(SN)|(EW)|(WE)\/\/g')  \ndone\necho $str","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336843,"user_id":null,"body":"#!\/bin\/bash\nsed -r ':k;s\/SN|NS|WE|EW\/\/;tk' <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336844,"user_id":null,"body":"#!\/bin\/bash\n\ndir_reduc() {\n    directions=\"$1\"\n    directionslength=${#directions}\n    # loop until directions don't change anymore\n    while [ \"$newdirectionslength\" != \"$directionslength\" ]; do\n        directionslength=${#directions}\n        directions=$(echo $directions | sed 's\/NS\/\/g' | sed 's\/SN\/\/g' | sed 's\/EW\/\/g' | sed 's\/WE\/\/g')\n        newdirectionslength=${#directions}\n    done\n    echo $directions\n}\ndir_reduc $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336845,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | sed ': again s\/\\(NS\\|SN\\|WE\\|EW\\)\/\/g; t again'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336846,"user_id":null,"body":"#!\/bin\/bash\n\nfunction simplify() {\n  echo $1 | sed 's\/\\(NS\\|SN\\|WE\\|EW\\)\/\/g'\n}\n\npath=$1\nnew_path=`simplify $path`\nwhile [ \"$new_path\" != \"$path\" ]; do\n  path=$new_path\n  new_path=`simplify $path`\ndone\necho $new_path\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336847,"user_id":null,"body":"directions=$1; old_len=0\n\nwhile (( ${#directions} != $old_len )); do\n    old_len=${#directions}\n    directions=$(echo $directions | sed 's\/NS\/\/' | sed 's\/SN\/\/' | sed 's\/EW\/\/' | sed 's\/EW\/\/')\ndone\necho $directions","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336848,"user_id":null,"body":"#!\/bin\/bash\n\ni=0\na=()\nfor j in $(seq 0 ${#1})\ndo\na[$j]=${1:$j:1}\ndone\nwhile [ $(($i+1)) -le ${#a[@]} ]\ndo\n    if [[ ${a[$i]} = \"N\"  &&  ${a[$(($i+1))]} = \"S\" ]] || \\\n    [[ ${a[$(($i+1))]} = \"N\"  &&  ${a[$i]} == \"S\" ]] || \\\n    [[ ${a[$i]} == \"E\"  && ${a[$(($i+1))]} == \"W\" ]] || \\\n    [[ ${a[$(($i+1))]} == \"E\" && ${a[$i]} == \"W\" ]]\n    then\n    s=${a[@]::$i}${a[@]:$(($i+2))}\n    s=${s\/\/ \/}\n    a=()\n    for j in $(seq 0 ${#s})\n    do\n    a[$j]=${s:$j:1}\n    done\n    if [ $i -ne 0 ] \n    then\n    (( i -= 1 ))\n    fi\n    else \n    (( i += 1 ))\n    fi\ndone\ns=\"${a[@]}\"\necho ${s\/\/ \/}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"55225023e1be1ec8bc000390":[{"id":336849,"user_id":2640,"body":"#!\/bin\/bash -e\n\nif [ \"$1\" == \"Johnny\" ]; then\n  echo \"Hello. my Love!\";\n  exit 0;\nfi\necho \"Hello, $1!\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336850,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ \"$1\" == \"Johnny\" ]]; then\n  echo \"Hello. my Love!\";\n\nelse\n  echo \"Hello, $1!\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336851,"user_id":2326,"body":"#!\/bin\/bash\n\nif [ \"$1\" == \"Johnny\" ]; then\n  echo \"Hello. my Love!\";\nelse\n  echo \"Hello, $1!\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336852,"user_id":274,"body":"#!\/bin\/bash\n\n[ \"$1\" = \"Johnny\" ] && echo \"Hello. my Love!\" || echo \"Hello, $1!\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336853,"user_id":null,"body":"#!\/bin\/bash\n\nif [ \"$1\" == \"Johnny\" ]; then\n  #This should actually be \"Hello, my Love!\". You're not going to get any love with grammar like that.\n  echo \"Hello. my Love!\"\nelse\n  echo \"Hello, $1!\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336854,"user_id":null,"body":"#!\/bin\/bash\n\n[[ $1 == \"Johnny\" ]] && echo \"Hello. my Love!\" || echo \"Hello, ${1}!\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336855,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | awk '{\n  printf ($0 == \"Johnny\") ? \"Hello. my Love!\" : \"Hello, %s!\", $0\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336856,"user_id":null,"body":"case \"$1\" in\n    \"Johnny\") echo \"Hello. my Love!\";;\n    *) echo \"Hello, $1!\";;\nesac\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336857,"user_id":null,"body":"#!\/bin\/bash\n\nif [ $1-eq\"Johnny\" ]; then\n  echo \"Hello. my Love!\";\nfi\necho \"Hello, $1!\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336858,"user_id":null,"body":"[ $1 = \"Johnny\" ] && echo \"Hello. my Love!\" || echo \"Hello, $1!\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5536a85b6ed4ee5a78000035":[{"id":336859,"user_id":492,"body":"#!\/bin\/bash\nstatsRX='\nsub aux {\n    my ($f, $t, $s) = (@_);\n    my @f = split \/ \/, $f;\n    my %t = $t =~ \/(\\S+)\\s*(\\S+)\/g;\n    my %d = $s =~ \/(\\S+)\\s*(\\S+)\/g;\n    my @tour = ();\n    foreach (@f) {\n        if (exists  $t{$_}) { push @tour, $d{$t{$_}}  }\n    }\n    my $tot = $tour[0];\n    for ( my $i = 1; $i < scalar @tour; $i++ ) {\n        $tot += sqrt($tour[$i]*$tour[$i] - $tour[$i - 1]*$tour[$i - 1]);\n    }\n    $tot += $tour[$#tour];\n    return int($tot);\n}\n$a=aux($ARGV[0], $ARGV[1], $ARGV[2]);\nprint $a;\n'\ntour () {\n    echo `perl -e \"$statsRX\" \"$1\" \"$2\" \"$3\"`\n}\ntour \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336860,"user_id":null,"body":"#!\/bin\/bash\ntour () {\n    IFS=\" \" read -ra arr1 <<< $1\n    IFS=\" \" read -ra arr2 <<< $2\n    IFS=\" \" read -ra arr <<< $3\n    last_index=$((${#arr[@]}-1))\n    toplam=0\n    i=0\n    while (( $i < ${#arr[@]} )); do   \n      if [[ ${arr[$i]} =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]]; then\n        if (( $i < $last_index )); then\n          coming_index=$(($i+2))\n          while (( $coming_index < ${#arr[@]} )); do\n            if [[ \"${arr2[@]}\" != *\"${arr[$coming_index-1]}\"* ]]; then  \n              coming_index=$(($coming_index+2))                         \n            elif [[ \"${arr1[@]}\" != *\"${arr2[$coming_index-1]}\"* ]]; then\n              coming_index=$(($coming_index+2))\n            else\n              break\n            fi\n          done\n          if (( $coming_index > $last_index )); then\n            last_index=$i\n            break\n          fi\n          temp1=$(echo \"(${arr[$coming_index]} * ${arr[$coming_index]})\" | bc -l)\n          temp2=$(echo \"(${arr[$i]} * ${arr[$i]})\" | bc -l)\n          temp=$(echo \"$temp1-$temp2\" | bc )\n          toplam=$(echo \"$(echo \"sqrt($temp)\" | bc -l) + $toplam\" | bc -l)\n        fi\n      else\n        if [[ \"${arr2[@]}\" != *\"${arr[$i]}\"* ]]; then \n          i=$(($i+2))  \n        else\n          if [[ \"${arr1[@]}\" != *\"${arr2[$i]}\"* ]]; then\n            i=$(($i+2))\n          fi\n        fi\n      fi\n      i=$(($i+1))\n    done\n    echo $(echo \"$toplam + ${arr[1]} + ${arr[$last_index]}\" | bc -l )\n}\ntour \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336861,"user_id":null,"body":"#!\/bin\/bash\ntour () {\n    # your code\n    \n    friends=($1)\n    friend_towns=($2)\n    dists=($3)\n    town_dists=()\n    \n    for friend in ${friends[*]}; do\n      for i in $(seq 0 1 ${#friend_towns[*]}); do\n        if [[ $friend = ${friend_towns[$i]} ]]; then\n          town=${friend_towns[$(( $i + 1 ))]}\n          \n          for ii in $(seq 0 1 ${#dists[*]}); do\n            if [[ $town = ${dists[$ii]} ]]; then\n              dist=${dists[$(( $ii + 1 ))]}\n              town_dists+=($dist)\n            fi\n          done\n        fi\n      done\n    done\n    \n    result=\"$(echo \"$town_dists + ${town_dists[$(( ${#town_dists[*]} - 1 ))]}\" | bc)\"\n    \n    for i in $(seq 0 1 $(( ${#town_dists[*]} - 2 ))); do\n      a=${town_dists[$i]}\n      b=${town_dists[$(( $i + 1 ))]}\n      result=$(echo \"scale=10; $result + sqrt($b * $b - $a * $a)\" | bc)\n    done\n    \n    echo \"$result\" | bc\n}\ntour \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336862,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -e -o pipefail -u\n\n# shellcheck disable=SC2206\nfriends=($1)\ndeclare -A friend_to_town\ndeclare -A town_to_distance\n\nif [ \"${#friends[@]}\" -eq 0 ]; then\n\techo 0\n\texit\nfi\n\nparse_friend_to_town () {\n\twhile [ $# -gt 0 ]; do\n\t\tfriend_to_town[$1]=$2\n\t\tshift 2\n\tdone\n}\n\n# shellcheck disable=SC2086\nparse_friend_to_town $2\n\n\nparse_town_to_distance () {\n\twhile [ $# -gt 0 ]; do\n\t\ttown_to_distance[$1]=$2\n\t\tshift 2\n\tdone\n}\n\n# shellcheck disable=SC2086\nparse_town_to_distance $3\n\nfriend_to_distance () {\n\tlocal friend=$1\n\tlocal town\n\ttown=$(set +u; echo \"${friend_to_town[$friend]}\" 2>\/dev\/null)\n\t[ -n \"$town\" ] || return 0\n\tlocal distance=${town_to_distance[$town]}\n\techo \"$distance\"\n}\n\ndistances=()\nfor friend in \"${friends[@]}\"; do\n\td=$(friend_to_distance \"$friend\")\n\t[ -n \"$d\" ] || continue\n\tdistances+=(\"$d\")\ndone\n\npathlen=${distances[0]}\nfor ((i=1; i<${#distances[@]}; i++)); do\n\td0=${distances[$((i-1))]}\n\td1=${distances[$i]}\n\tpathlen=$(bc -l <<<\"$pathlen + sqrt($d1^2 - $d0^2)\")\ndone\n\npathlen=$(bc -l <<<\"$pathlen + ${distances[-1]}\")\necho \"${pathlen%.*}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336863,"user_id":null,"body":"#!\/bin\/bash\ntour () {\n    dollar1=($1) dollar2=($2) dollar3=($3)\n    declare -A frndtwns dist\n    let result=0\n   \n    for ((x=0; x<${#dollar2[*]}; x++)); do [ $(echo \"$x % 2\" | bc) -eq 0 ] && friend=${dollar2[$x]} || frndtwns[$friend]=${dollar2[$x]}; done\n    for ((x=0; x<${#dollar3[*]}; x++)); do [ $(echo \"$x % 2\" | bc) -eq 0 ] && town=${dollar3[$x]} || dist[$town]=$(echo ${dollar3[$x]} | cut -d \".\" -f1); done\n    for i in ${dollar1[*]}; do [ ! -z \"${frndtwns[$i]}\" ] && visitedfriends[${#visitedfriends[*]}]=$i; done\n\n    (( result+=${dist[${frndtwns[${visitedfriends[0]}]}]} ))\n    (( result+=${dist[${frndtwns[${visitedfriends[${#visitedfriends[*]} - 1]}]}]} ))\n\n    for ((x=0; x<${#visitedfriends[*]} - 1; x++)); do\n        result=$(echo \"scale=50 ; $result + sqrt(${dist[${frndtwns[${visitedfriends[$x + 1]}]}]}^2 - ${dist[${frndtwns[${visitedfriends[$x]}]}]}^2)\" | bc)\n    done\n    \n    echo $result | cut -d \".\" -f 1\n}\ntour \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336864,"user_id":null,"body":"#!\/bin\/bash\ntour () {\ndeclare -a dist  # traveldist\nj=0\nfor towndist in $3\ndo\n  dist[$j]=$towndist\n  let \"j+=1\"\ndone\nk=0\nfor frend in $1\ndo\n  n=0\n  for frendtown in $2 \n  do\n    if [ \"$chek\" = \"1\" ]\n    then\n      traveldist=\"$traveldist ${dist[$n]}\"\n    fi\n    let \"n+=1\"\n    if [ \"$frend\" = \"$frendtown\" ]\n    then\n      chek=1\n    else\n        chek=0\n    fi \n  done\ndone\nsum=`echo $traveldist | awk '{print $1}'`\nprev=$sum\nfor i in $traveldist \ndo\n  sum=$(echo \"scale=5; $sum + sqrt($i ^ 2 - $prev ^ 2) \" | bc )\n  prev=$i\ndone\nsum=$(echo \"scale=0; ($sum + $i) * 10 \/ 10\" | bc )\necho $sum\n\n}\ntour \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5539fecef69c483c5a000015":[{"id":336865,"user_id":492,"body":"#!\/bin\/bash\nprime(){\n    sqrtofn=`echo \"sqrt($1)\" | bc `\n    res=1\n    if [ $(($1%2)) -eq 0 ] ; then\n        res=0\n    else\n        for((i=3;i <= $sqrtofn;i+=2)) do\n            if [ $(($1%$i)) -eq 0 ] ; then\n                res=0\n                break\n            fi\n        done\n    fi\n    echo $res\n}\nbackwards_prime() {\n  for i in $(seq $1 $2) ;do\n    if [ $(prime $i) == 1 ]; then\n      rv=$(echo $i | rev)\n      if [ \"$rv\" != \"$i\" ] && [ $(prime $rv) == 1 ]; then\n        array=(${array[@]} $i)\n      fi\n    fi\n  done\n  echo ${array[@]}\n}\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336866,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\nremove_palindromes () {\n\tlocal lines\n\tlines=$(cat)\n\tpaste -d' ' <(echo \"$lines\") <(rev <<<\"$lines\") \\\n\t\t| (grep -Ev '^([0-9]+) \\1$' || true) | cut -d' ' -f1\n}\n\nfilter_primes () {\n\tfactor | (grep -E '^[0-9]+: [0-9]+$' || true) | cut -d: -f1\n}\n\nseq \"$1\" \"$2\" \\\n\t| remove_palindromes \\\n\t| filter_primes \\\n\t| rev \\\n\t| filter_primes \\\n\t| rev \\\n\t| paste -s -d' ' - \\\n\t| (grep -v '^$' || true)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336867,"user_id":null,"body":"#!\/bin\/bash\nbackwards_prime() {\nl1='' && lf=''\n\tfor i in `seq $1 $2`; do {\n\t\t[[ `factor $i | wc -w` == 2 ]] && l1+=\"$i \"\n\t} done\n\tfor j in $l1; do {\n\t\tk=`echo $j | rev`\n\t\t[[ $j == $k ]] && continue ||\t[[ `factor $k | wc -w` == 2 ]] && lf+=\"$j \"\n\t} done\n\techo $lf\n}\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336868,"user_id":null,"body":"#!\/bin\/bash\nbackwards_prime() {\n  result=()\n  for ((i=$1; i<=$2; i++)); do\n      if factor $i | grep -qE '^(.*): \\1$'; then\n        reverse=$(echo $i | rev)\n        if factor $reverse | grep -qE '^(.*): \\1$' && [ $reverse -ne $i ]; then\n          result=( \"${result[@]}\" \"$i\" )\n        fi\n      fi\n    done\n  echo ${result[*]}\n}\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336869,"user_id":null,"body":"#!\/bin\/bash\n\nisPrime() {\n  factor \"${1:?}\" | awk '{exit !(NF==2)}'\n}\n\nbackwards_prime() {\n  local beg=${1:?}\n  local end=${2:?}\n  local primes=()\n  local i nrev\n  \n  ((beg % 2 == 0)) && ((beg++))\n  \n  for ((i = beg; i <= end; i++)); do\n    if isPrime \"$i\"; then\n      nrev=\"$(rev <<< \"$i\")\"\n      if [[ \"$i\" != \"$nrev\" ]] && isPrime \"$nrev\"; then\n        primes+=($i)\n      fi\n    fi\n  done\n  \n  echo \"${primes[*]}\"\n}\n\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336870,"user_id":null,"body":"#!\/bin\/bash\nbackwards_prime() {\ns=0\nfor i in `seq $1 $2`\n do \n  if [ $i -eq 2 ] || [ $i -eq 3 ] ; then\n   : # do nothing\n  else\n   prime=`factor $i | awk 'NF==2{print $2}'`\n   if [ -z $prime ] ; then\n    : # do nothing\n   else\n    back=`echo $i | rev | factor | awk 'NF==2{print $2}'`\n    if [ -z $back ] || [ $i == $back ] ; then\n     : #do nothing \n    else\n     brp[$s]=$i\n     (( s++ ))\n    fi\n   fi\n  fi\n done\n  echo ${brp[@]}\n}\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336871,"user_id":null,"body":"#!\/bin\/bash\n\nfunction reverse() {\n  ret=$(echo $1 | rev | bc)\n  echo $ret\n}\n\nfunction isPrime() {\n  n=$1\n  if (($n <= 1))\n  then \n    return 1\n  elif (($n <= 3))\n  then\n    return 0\n  # straight check if even or div by 3\n  elif (($((n % 2)) == 0)) || (($((n % 3)) == 0))\n  then\n    return 1\n  fi\n  \n  # to bypass codewars' timeout we need to have the least possible iterations\n  # we're going to take advantage from the fact any prime > 3 can be written as 6*k+1 or 6*k-1\n  # and that we need to only check whether n is divisible by another prime from now on . . . \n  # thanks to : https:\/\/en.wikipedia.org\/wiki\/Primality_test\n  \n  j=5\n  s=2\n  while (($((j*j)) <= $n))\n  do\n    if (($((n % j)) == 0))\n    then\n      return 1\n    fi\n    j=$((j+s))\n    s=$((6-s))\n  done\n  return 0\n}\n\n\nbackwards_prime() {\n  ret=\"\"\n\n  for ((i=$1;i<=$2;i++))\n  do\n    rev=$(reverse $i)\n    if [ \"$rev\" == \"$i\" ]\n    then\n      continue  \n    elif isPrime $i -eq 0 && isPrime $rev -eq 0\n    then\n      ret=\"$ret $i\"\n    fi\n  done\n  echo $ret\n\n}\nbackwards_prime $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336872,"user_id":null,"body":"#!\/bin\/bash\ntestprime() {\ni=2\nwhile [ $(($1\/$i)) -ge $i ]\ndo\n  if [ $(($1 % $i )) == 0 ] \n  then\n    return 0\n  fi\ni=$(($i+1))\ndone\nreturn 1\n}\n\nbackwards_prime() {\nfor ((j=$1 ;j<$2+1;j++))\ndo\n  testprime $j\n  if [ $? == 1 ]\n  then\n      testprime $(rev <<< $j)\n      if [ $? == 1 ] && [ $(rev <<< $j) != $j ]\n      then\n        res=\"${res}$j \"\n      fi\n  fi\ndone\necho ${res::-1}\n}\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336873,"user_id":null,"body":"#!\/bin\/bash\n\ncheckPalindrome() {\n    # return false if palindrome\n    if [ $1 -eq $2 ]; then\n        return 1\n    else\n        return 0\n    fi\n}\n\ncheckPrime() {\n    # if number is 2 or 3, it is a prime\n    if [ $1 -eq 2 ] || [ $1 -eq 3 ]; then\n        return 0\n    fi\n\n    # if number is less than 2 or devisible by 2 or 3, it is not a prime\n    if [ $1 -lt 2 ] || [ $(($1 % 2)) -eq 0 ] || [ $(($1 % 3)) -eq 0 ]; then\n        return 1\n    fi\n\n    # all primes greater than 3 are of the form 6k \u00b1 1, where k is any integer greater than 0\n    for ((i = 5; i * i <= $1; i += 6)); do\n        if [ $(($1 % i)) -eq 0 ] || [ $(($1 % (i + 2))) -eq 0 ]; then\n            return 1\n        fi\n    done\n    return 0\n}\n\nbackwards_prime() {\n    start=$1\n    stop=$2\n\n    # don't start if no range is given\n    if [ -z \"$start\" ] || [ -z \"$stop\" ]; then\n        exit\n    fi\n\n    # a prime is always odd, add 1 if divisable by 2\n    if [ $(($start % 2)) -eq 0 ]; then\n        start=$(($start + 1))\n    fi\n\n    # loop through the odd numbers and check for backwards primes\n    for ((number = $start; number <= $stop; number += 2)); do\n        # reverse number\n        backwards=$(echo $number | rev)\n        # check if palindrome\n        if checkPalindrome $number $backwards; then\n            # check if prime\n            if checkPrime $number; then\n                # check if backwards also prime\n                if checkPrime $backwards; then\n                    backwards_primes+=(\"$number\")\n                fi\n            fi\n        fi\n    done\n\n    # if array is empty, print nothing, else print array\n    ((${#backwards_primes[@]})) && printf '%d ' \"${backwards_primes[@]}\"\n}\n\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336874,"user_id":null,"body":"#!\/bin\/bash\nreverse(){\n  local word=\"$1\"\n  for (( i=${#word}-1; i>=0; i-- )); do\n    rev_word=$rev_word${word:$i:1}\n  done\n  printf -- '%s' \"$rev_word\"\n}\nis_prime_number(){\n  local number=$1\n  local prime_numbers\n\n  prime_numbers=( 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71\n  73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173\n  179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281\n  283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409\n  419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541\n  547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659\n  661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809\n  811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941\n  947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069\n  1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223\n  1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373\n  1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511\n  1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657\n  1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811\n  1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987\n  1993 1997 1999 2003 2011 2017 2027 2029 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129\n  2131 2137 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269 2273 2281 2287\n  2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383 2389 2393 2399 2411 2417 2423\n  )\n  \n  for (( i=0; i < ${#prime_numbers[@]}; i++ )); do\n    [[ $number -eq ${prime_numbers[$i]} ]] && return 0\n    (( $number%${prime_numbers[$i]} )) || return 1\n  done\n  return 0\n}\n\nbackwards_prime() {\n  local first=$1\n  local last=$2\n  local number rev_number\n  \n  [[ ${#last} -lt 1 ]] && return 0\n  (( $first%2 == 0 )) && first=$(( $1+1 ))\n  [[ ${#first} -lt 2 ]] && first=11\n  for (( number=$first; number <= $last; number++ )); do\n    rev_number=$(reverse $number)\n    [[ $number != $rev_number ]] || continue\n    is_prime_number $number || continue\n    is_prime_number $rev_number || continue\n    printf -- '%d ' \"$number\"\n  done\n}\nbackwards_prime $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5541f58a944b85ce6d00006a":[{"id":336875,"user_id":null,"body":"fib()\n{\n\tn=$1\n\ta=0\n\tb=1\n\tm=0\n\twhile (( n > m ))\n  do\n\t\tc=$a\n\t\ta=$b\n\t\t((b+=c))\n\t\tm=$(($a * $b))\n\tdone\n\t(( m == n )) && echo \"$a $b true\" || echo \"$a $b false\"\t\n}\n\n\nfib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336876,"user_id":null,"body":"#!\/bin\/bash\n\nproduct_fib() {\n  prod=$1\n  f1=0; f2=1\n  while [ $((f1 * f2)) -lt $prod ]; do\n    f2=$((f1 + f2))\n    f1=$((f2 - f1))\n  done\n  if [ $((f1 * f2)) -eq $prod ]; then\n    echo \"$f1 $f2 true\"\n  else\n    echo \"$f1 $f2 false\"\n  fi\n}\n\nproduct_fib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336877,"user_id":492,"body":"#!\/bin\/bash\nproduct_fib() {\n    prod=$1; a=0; b=1; r=\"false\"\n    while [ 1 ]\n    do\n        tmp=$a\n        a=$b\n        b=$(($tmp + $b))\n        c=$(($a * $b))\n        if [ $c -ge $prod ]; then break; fi\n    done\n    if [ $c -eq $prod ]; then r=\"true\"; fi\n    echo \"$a $b $r\"\n}\nproduct_fib $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336878,"user_id":null,"body":"#!\/bin\/bash\nproduct_fib() {\n    a=1\n    b=1\n    c=1\n    while [ $(($a*$b)) -lt $1 ]\n    do\n    c=$a\n    a=$b\n    b=$(($c+$a))\n    done\n    if [ $(($a*$b)) -eq $1 ]; then echo \"$a $b true\"\n    else echo \"$a $b false\"\n    fi\n}\nproduct_fib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336879,"user_id":null,"body":"#!\/bin\/bash\nprev=0\ntemp=0\ni=1\nfib=1\n# While bc is used for floating point numbers, it is also necessary for very large numbers as well.\n# (You will get integer overflows as you would in C if you try to store large numbers!)\n\nflag=0\nhighest_product=()\n\ngetFib(){\n\twhile [ \"$fib\" -lt \"$n\" ]; do\n\t\ttemp=$(bc <<< \"$fib\")\n\t\tfib=$(bc <<< \"$prev+$fib\")\n\t\tprev=$(bc <<< \"$temp\")\n\t\tif [ $(expr $prev \\* $fib) -eq $n ]; then\n\t\t\techo \"$prev\" \"$fib\" true\n\t\t\tflag=1\n\t\t\tbreak\n\t\telif [ $(expr \"$prev\" \\* \"$fib\") -gt $n ]; then\n\t\t\thighest_product=()\n\t\t\thighest_product+=(\"$prev\")\n\t\t\thighest_product+=(\"$fib\")\n\t\t\tbreak\n\t\tfi\n\t\t((i=i+1))\n\tdone\n\n\tif test $flag -eq 0; then\n\t\techo ${highest_product[@]} false\n\tfi\n}\nproduct_fib() {\n    # your code\n\n\techo\n}\nn=\"$1\"\ngetFib \n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336880,"user_id":null,"body":"#!\/bin\/bash\nproduct_fib() {\n    # your code\n    pre=1;\n    post=1;\n    while [[ `echo \"$pre*$post<$1\" | bc` == 1 ]] ; do\n      tmp=$post;\n      let post=$post+$pre;\n      pre=$tmp;\n    done;\n    if [[ `echo \"$pre*$post==$1\" | bc` == 1 ]] ; then echo \"$pre $post true\";\n    else echo \"$pre $post false\"; fi;\n}\nproduct_fib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336881,"user_id":null,"body":"#!\/bin\/bash\nproduct_fib() {\n  local fib1=0\n  local fib2=1\n  local temp=0\n  local res=1\n  local prod=$1\n  \n  while [ $res -lt $prod ]\n  do\n    temp=$fib1\n    fib1=$fib2\n    fib2=$((fib1+temp))\n    res=$((fib1*fib2))\n  done\n  \n  isEqual=\"false\"\n  [ $res -eq $prod ] && isEqual=\"true\"\n  \n  echo \"$fib1 $fib2 $isEqual\"\n}\nproduct_fib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336882,"user_id":53,"body":"#!\/bin\/bash\nbc <<EOF\n    n=$1\n    a=0\n    b=1\n    while (a * b < n) {\n        m=a+b\n        a=b\n        b=m\n    }\n    if (a * b == n) {\n        print a, \" \", b, \" true\"\n    } else {\n        print a, \" \", b, \" false\"\n    }\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336883,"user_id":null,"body":"#!\/bin\/bash\n# Kata URL: https:\/\/www.codewars.com\/kata\/5541f58a944b85ce6d00006a\n# Tests:\n#   product_fib 4895 -> \"55 89 true\"\n#   product_fib 5895 -> \"89 144 false\"\n\nproduct_fib() {\n  [[ $# -lt 1 ]] && >&2 echo \"Usage: product_fib PROD\" && exit 1\n\n  local fn=0\n  local fn1=1\n  local prod\n  while (( (prod=$fn * $fn1) < $1 )); do\n    local fn2=${fn}\n    fn=${fn1}\n    fn1=$(($fn1 + $fn2))\n  done\n\n  local found=false\n  [[ ${prod} == $1 ]] && found=true\n  echo \"$fn $fn1 $found\"\n}\n\nproduct_fib $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336884,"user_id":1045,"body":"#!\/bin\/bash\nproduct_fib() {\n  num=\"$1\"; declare -a arr=( 0 1 ); cnt=1; prv=0; val=$(( ${arr[$cnt]}*${arr[$prv]} ))\n  while (( $num > $val )); do\n    nxt=$(( ${arr[$cnt]}+${arr[$prv]} ))\n    arr+=( $nxt ); let prv=$prv+1; let cnt=$cnt+1\n    val=$(( ${arr[$cnt]}*${arr[$prv]} ))\n    done\n    (( num == val )) && echo \"${arr[$prv]} ${arr[$cnt]} true\" && exit\n    echo \"${arr[$prv]} ${arr[$cnt]} false\"\n}\nproduct_fib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5544c7a5cb454edb3c000047":[{"id":336885,"user_id":492,"body":"#!\/bin\/bash\nbouncing_ball() {\n    h=$1; bounce=$2;window=$3; rebounds=-1\n    c1=$(echo \"$h > $window\" | bc)\n    c2=$(echo \"$h > 0\" | bc)\n    c3=$(echo \"$bounce < 1.0\" | bc)\n    c4=$(echo \"$bounce > 0.0\" | bc)\n    cond=$(($c1 * $c2 * $c3 * $c4))\n    if [ $cond -eq 1 ]\n    then \n        while (( $(echo \"$h > $window\" | bc -l) ))\n        do\n            rebounds=$((rebounds+2))\n            h=$(bc <<< \"scale=8; $bounce * $h\")\n        done\n    fi\n    echo $rebounds\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336886,"user_id":1045,"body":"#!\/bin\/bash\nbouncing_ball() {\n  h=$1; b=$2; w=$3; cnt=0\n  (( $(echo \"$h<=$w\" |bc -l) ))||(( $(echo \"$h<0\" |bc -l) ))&& echo -1 && exit\n  (( $(echo \"$b<=0\" |bc -l) ))||(( $(echo \"$b>=1\" |bc -l) ))&& echo -1 && exit\n  \n  while (( $(echo \"$h>$w\"|bc -l) )); do\n    cnt=$((cnt+1))\n    h=$( echo \"$h*$b\"|bc -l )\n    if (( $(echo \"$h>$w\"|bc -l) )); then\n      cnt=$((cnt+1)); fi\n  done\n  echo $cnt\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336887,"user_id":null,"body":"#!\/bin\/bash\nbouncing_ball() {\n    h=$1\n    bounce=$2\n    h_window=$3\n    times=1\n    if [[ $h < 0 || $h == 0 ]]\n    then\n      echo \"-1\"\n      return\n    fi\n    \n    if [[ $bounce < 0 || $bounce > 1 || $bounce == 1 || $bounce == 0 ]]\n    then\n      echo \"-1\"\n      return\n    fi\n    \n    if [[ $h_window > $h || $h_window == $h ]]\n    then \n      echo \"-1\"\n      return\n    fi\n    h=$(echo \"$h * $bounce\" | bc )\n    while (( $(echo \"$h > $h_window\" | bc )))\n    do\n      h=$(echo \"$h * $bounce\" | bc )\n      times=$(( $times + 2 ))\n    done\n    echo $times\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336888,"user_id":null,"body":"#!\/usr\/bin\/env bash\nbc -l <<BC\nh = $1; b = $2; w = $3\nif (h <= 0 || b <= 0 || b >= 1 || w >= h || w <= 0) {\n\t-1\n\thalt\n}\nn = 1\nwhile ((h = h * b) > w) {\n\tn = n + 2\n}\nn\nBC\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336889,"user_id":null,"body":"#!\/bin\/bash\nbouncing_ball() {\n    scale=20\n    h=$1\n    b=$2\n    w=$3\n    if (( $(bc <<< \"$h <= 0\" ) )) || (( $(bc <<< \" $b >= 1\") )) || (( $(bc <<< \"$b <= 0\") )) || (( $(bc <<< \"$w >= $h\" ) ))\n    then\n      echo \"-1\"\n    else\n      bcs=1\n      h=$(bc <<< \"scale=20; $b*$h\")\n      \n      while [ $(echo \"$h > $w\" | bc) -eq 1 ] \n      do\n        bcs=$[$bcs+2]\n        h=$(bc <<< \"scale=20; $b*$h\")\n      done\n      \n    \n    fi\n    echo $bcs\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336890,"user_id":null,"body":"#!\/bin\/bash\nbouncing_ball() {\n    c=$1\n    i=1\n    if [[ $(echo \"$1 > 0 && $3 < $1 && $2 < 1 && $2 > 0\" | bc -l) == 1 ]]; then\n      while true\n      do\n        c=$(echo \"$c*$2\" | bc -l)\n        [[ $(echo \"$c>$3\" | bc -l) == 1 ]] || break\n        i=$(($i+2))\n      done\n      echo \"$i\"\n    else\n      echo -1\n    fi\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336891,"user_id":53,"body":"#!\/bin\/bash\nbouncing_ball() {\nbc <<EOF\ndefine aux(h, b, w) {\n  if (h < 0 || w >= h || b < 0 || b >= 1) {\n    return -1;\n  } else {\n    h1 = h * b;\n    t = 1;\n    while (h1 > w) {\n      h1 = h1 * b;\n      t = t + 2;\n    }\n    return t;\n  }\n}\nh=$1\nb=$2\nw=$3\naux(h, b, w)\nEOF\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336892,"user_id":null,"body":"#!\/bin\/bash\n\nreturnVal=0\n\nbouncing_ball() {\n  if [ $( echo \"$1 > 0\" | bc ) -eq 1 -a $( echo \"$3 < $1\" | bc -l ) -eq 1 -a  $( echo \"$2 < 1 && $2 > 0\" | bc ) -eq 1 ];\n  then\n    let \"returnVal+=2\"\n    newHeight=$( echo \"scale=8; $1 * $2\" | bc )\n    bouncing_ball $newHeight $2 $3\n  else\n    let \"returnVal-=1\"\n    echo $returnVal\n\tfi\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336893,"user_id":492,"body":"#!\/bin\/bash\nbouncing_ball() {\n    h=$1; bounce=$2;window=$3; rebounds=-1\n    c1=$(echo \"$h > $window\" | bc)\n    c2=$(echo \"$h > 0\" | bc)\n    c3=$(echo \"$bounce < 1.0\" | bc)\n    c4=$(echo \"$bounce > 0.0\" | bc)\n    cond=$(($c1 * $c2 * $c3 * $c4))\n    if [ $cond -eq 1 ]\n    then \n        while (( $(echo \"$h > $window\" | bc -l) ))\n        do\n            rebounds=$((rebounds+2))\n            h=$(bc <<< \"scale=8; $bounce * $h\")\n        done\n    fi\n    echo $rebounds\n}\nbouncing_ball $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336894,"user_id":null,"body":"#!\/bin\/bash\n  \nbouncing_ball() {\n\n    count=0\n    bh=$1\n\n    if (( $(echo \"$1 <= 0\" | bc ) )); then echo -1; exit 1; fi\n    if (( $( echo \"( $2 >= 1 ) || ( $2 <= 0 )\" | bc) )); then echo -1; exit 1; fi\n    if (( $(echo \"( $3 >= $1 ) || ( $3 <= 0 )\" | bc ) )); then echo -1; exit 1; fi\n\n\n    while (( $(echo \"scale=4; $bh > $3\" | bc) )); do\n        bh=$(echo \"scale=4; $bh*$2\" | bc )    \n        ((count+=2));\n        #echo \"act_height= ${bh}\"\n    done\n        echo $(( count - 1))\n}\nbouncing_ball $1 $2 $3\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5545f109004975ea66000086":[{"id":336895,"user_id":null,"body":"#!\/bin\/bash\n\nn=$1; x=$2; y=$3\n[[ $((n % x)) == 0 && $((n % y)) == 0 ]] && echo \"true\" || echo \"false\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336896,"user_id":null,"body":"#!\/bin\/bash\n(( $1%$2 == 0 && $1%$3 == 0 )) && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336897,"user_id":null,"body":"#!\/bin\/bash\nif (( $1 % $2 == 0 && $1 % $3 == 0 )); then\n    printf 'true\n'\nelse\n    printf 'false\n'\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336898,"user_id":null,"body":"#!\/bin\/bash\nn=$1\nx=$2\ny=$3\na=$((n%x))\nb=$((n%y))\nif [ \"$a\" == \"0\" ] && [ \"$b\" == \"0\" ]; then\n  echo true\nelse \n  echo false\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336899,"user_id":null,"body":"#!\/bin\/bash\n(($1 % $2 + $1 % $3 == 0)) && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336900,"user_id":null,"body":"#!\/bin\/bash\n\n(( !($1%$2) && !($1%$3) )) && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336901,"user_id":null,"body":"#!\/bin\/bash\nif [[ $1%$2 -eq 0 && $1%$3 -eq 0 ]]\nthen\n  echo \"true\"\nelse\n  echo \"false\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336902,"user_id":null,"body":"#!\/bin\/bash\n\nif [ $(($1 % $2)) == 0 ] &&[ $(($1 % $3)) == 0 ]; then\n  echo \"true\"\nelse\n  echo false\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336903,"user_id":null,"body":"#!\/bin\/bash\n\nif [ \"$(echo $1 % $2 | bc )\" -eq 0 ] && [ \"$(echo $1 % $3 | bc)\" -eq 0 ]; then\n  echo \"true\"\nelse\n  echo \"false\"\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336904,"user_id":null,"body":"#!\/bin\/bash\n[ $(($1 % $2)) -lt 1 ] && [ $(($1 % $3)) -lt 1 ] && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"55466989aeecab5aac00003e":[{"id":336905,"user_id":null,"body":"# return a string (see: RUN SAMPLE TESTS)\n#!\/bin\/bash\nsq_in_rect() {\nif [[ $1 -eq $2 ]]; then\n  echo $1\nelif [[ $1 -lt $2 ]]; then\n  echo -n \"$1 \"\n  sq_in_rect $1 $(($2 - $1))\nelse\n  echo -n \"$2 \"\n  sq_in_rect $(($1-$2)) $2\nfi\n}\n[ $1 -eq $2 ] && echo \"nil\" && exit\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336906,"user_id":null,"body":"# return a string (see: RUN SAMPLE TESTS)\n#!\/bin\/bash\nsq_in_rect() {\n    # your code\n    if [ $1 -eq $2 ]; then\n      echo \"nil\"\n    else\n      len=$1\n      wid=$2\n      sol=\"\"\n      while [ $len -ge 1 ] && [ $wid -ge 1 ]; do\n        if [ $len -gt $wid ]; then\n          len=$((len-wid))\n          sol=\"$sol $wid\"\n        else\n          wid=$((wid-len))\n          sol=\"$sol $len\"\n        fi\n      done\n      echo $sol\n    fi\n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336907,"user_id":null,"body":"#!\/bin\/bash\n\nmyFun() {\n\n  my_array=()\n  lng=$1\n  wdth=$2\n\n  while [ $lng -gt 0 -a $wdth -gt 0 ]\n  do\n\n#    echo \"lng is $lng\"\n#    echo \"wdth is $wdth\"\n\n    if [ $lng -gt $wdth ]\n      then\n        longer=$lng\n        shorter=$wdth\n      else\n        longer=$wdth\n        shorter=$lng\n    fi\n\n    ans=$(($shorter))\n    my_array+=(\"$ans\")\n\n    lng=$ans\n    wdth=$(($longer-$ans))\n\n\n\n#    echo \"${my_array[*]}\"\n  done\n  if [ ${#my_array[@]} == 1 ]\n    then\n      echo \"nil\"\n  else\n    echo \"${my_array[*]}\"\n  fi\n}\n\nmyFun $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336908,"user_id":null,"body":"# return a string (see: RUN SAMPLE TESTS)\n#!\/bin\/bash\n\nsq_in_rect() {\n    len=$1\n    wid=$2\n    \n    if [ $len -eq $wid ] \n    then\n      echo nil\n      exit\n    fi\n    \n    i=0\n    declare -a arr=()\n    while [ $(( $len - $wid )) -ne 0 ]\n    do\n      if [ $len -gt $wid ] # if lnth > width\n      then\n        arr[i]=$wid\n        len=$(( $len - $wid ))\n        i=$[$i+1]\n      else\n        arr[i]=$len\n        wid=$(( $wid - $len ))\n        i=$[$i+1]\n      fi\n    done\n    \n    arr[$i+1]=$len    \n    echo ${arr[@]}\n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336909,"user_id":null,"body":"#!\/bin\/bash\nfunction sq_in_rect {\n    if [ $1 -eq $2 ]; then\n        echo nil\n        return 0\n    fi\n    OUPUT=\"\"\n    LEN=$1\n    WID=$2\n    let \"AREA = $LEN * $WID\"\n    until [ $AREA -le 0 ]; do\n        if [ $LEN -gt $WID ]; then\n            let \"AREA = $AREA - $WID ** 2\"\n            let \"LEN = $LEN - $WID\"\n            OUTPUT=\"$OUTPUT $WID\"\n        else\n            let \"AREA = $AREA - $LEN ** 2\"\n            let \"WID = $WID - $LEN\"\n            OUTPUT=\"$OUTPUT $LEN\"\n        fi\n    done\n    echo $OUTPUT\n}\nsq_in_rect $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336910,"user_id":492,"body":"#!\/bin\/bash\nsq_in_rect() {\n    lng=$1; wdth=$2\n    if [ $lng -eq $wdth ]\n    then \n        res=\"nil\"\n    else\n        if [ $lng -lt $wdth ]\n        then\n            tem=$lng\n            lng=$wdth\n            wdth=$tem\n        fi\n        while [ $lng -ne $wdth ] \n        do\n            res=\"${res}$wdth \"\n            lng=$(($lng - $wdth))\n            if [ $lng -lt $wdth ]\n            then\n                tem=$lng\n                lng=$wdth\n                wdth=$tem\n                \n            fi\n        done\n        res=\"${res} $wdth\"\n    fi\n    echo $res\n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336911,"user_id":null,"body":"# return a string (see: RUN SAMPLE TESTS)\n#!\/bin\/bash\nsq_in_rect() {\n    if(( $1==$2 )); then echo \"nil\"\n    else \n      a=$(( ($1>$2?$1:$2) ))\n      b=$(( ($2>$1?$1:$2) ))\n      min=$b\n      res=\"\"\n      while [ $min -ne 0 ]\n      do\n        #echo \"$a,$b,$min\"\n        res=\"${res} $min\"\n        min=$(( $a-$b ))\n        a=$(( $b>$min?$b:$min ))\n        b=$(( $b<$min?$b:$min ))\n        min=$(( $a>$b?$b:$a ))\n      done\n      echo ${res}\n    fi\n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336912,"user_id":null,"body":"#!\/bin\/bash\n# return a string (see: RUN SAMPLE TESTS)\nsq_in_rect() {\n    length=$1\n    width=$2\n    ret=\"\"\n    if [ $length -eq $width ]\n    then\n      echo \"nil\"\n    else\n      while [ $length -ne $width ]\n      do\n        if [ $length -lt $width ]\n        then\n          ret=\"$ret $length\"\n          ((width -= length))\n        else\n          ret=\"$ret $width\"\n          ((length -= width))\n        fi\n      done\n    echo $ret $width\n    fi\n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336913,"user_id":null,"body":"# return a string (see: RUN SAMPLE TESTS)\n#!\/bin\/bash\nsq_in_rect() {\n    wid=$1\n    hei=$2\n    out=\"\"\n    \n    if [ $hei -eq $wid ]\n    then\n      echo \"nil\"\n    else\n      while [[ $wid -ne 0 && $hei -ne 0 ]]\n      do\n        if [ $wid -gt $hei ]\n        then\n          out+=$hei\n          wid=$(( $wid - $hei ))\n        else\n          out+=$wid\n          hei=$(( $hei - $wid ))\n        fi\n        out+=\" \"\n      done\n    \n    echo $out\n    fi\n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336914,"user_id":null,"body":"# return a string (see: RUN SAMPLE TESTS)\n#!\/bin\/bash\nsort() {\n  if [ $left -gt $right ] \n  then\n    local tmp=$right\n    right=$left\n    left=$tmp\n  fi\n}\n\nsq_in_rect() {\n    left=$1\n    right=$2\n    if [ $right -eq $left ]\n    then\n      echo \"nil\"\n      else\n        res=\"\"\n      while [ $left -gt 0 ] && [ $right -gt 0 ]\n      do\n        sort\n        res=\"$res $left\"\n        right=$(( right - left )) \n      done\n      echo \"$res\"\n    fi   \n}\nsq_in_rect $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5547cc7dcad755e480000004":[{"id":336915,"user_id":null,"body":"n=$1\nsum=$( bc <<< \"$n*($n+1)\/2\" )\nfor a in `seq 1 $n`\ndo\n\tlet u=sum-a v=a+1 b=u%v\n\tif (( b == 0 ))\n\tthen\n\t\tlet c=u\/v\n\t\t(( c <= n )) && echo $a $c\n\tfi\ndone | paste -sd,","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336916,"user_id":null,"body":"# return a string\n#!\/bin\/bash\nremove_nb() {\n    sum=$(( ($1+1)*$1\/2 ))\n    list=\"\"\n    for (( b=1; b<$1; b++ ))\n    do\n      c=$(( (sum-b)%(b+1) ))\n      if [[ ($c==0) ]]\n      then\n        a=$(( (sum-b)\/(b+1) ))\n        if ( ((a*b==sum-a-b)) && (($a<$1)) )\n        then\n          list+=\"$b $a,\"\n        fi\n      fi\n    done\n    echo \"${list::-1}\"\n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336917,"user_id":492,"body":"remove_nb() {\n    n=$1; sum=$(($n * ($n + 1) \/ 2))\n    for((a=1;a < n;a++)) do\n        c=$(bc <<< \"scale=0; ($sum - $a) % ($a + 1)\")\n        if [ $c -eq 0 ]\n            then\n                b=$(bc <<< \"scale=0; ($sum - $a) \/ ($a + 1)\")\n                if [ $b -lt $n ]\n                then\n                    res=\"${res}$a\"\n                    res=\"${res} $b,\"\n                fi\n        fi\n    done\n    echo \"${res::-1}\"\n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336918,"user_id":null,"body":"# return a string\n#!\/bin\/bash\nremove_nb() {\n    n=$1\n    sum=$(seq -s\"+\" 1 ${n} | bc)\n\n    res1=\"\"\n    res2=\"\"\n    for ((i=1; i<=n; i++)); do\n      for ((j=i; j<n; j++)); do\n        if (( i * j == sum - i - j )); then \n          res1=\"${res1},${i} ${j}\"\n          res2=\"${j} ${i},${res2}\"\n        fi\n      done\n    done\n    \n    [[ ${res1} != \"\" ]] && echo \"${res1#,},${res2%,}\"    \n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336919,"user_id":null,"body":"# return a string\n#!\/bin\/bash\n\n\nsum() {\n  for i in `seq $1`;do\n    if [[ -z $app ]];then\n      app=$i\n    else\n      app=\"$app+$i\"\n    fi\n  done\n  echo $app | bc\n}\n\nremove_nb() {\n    sum_1_n=`sum $1`\n    n=$1\n    result=\n    result_r=\n    for i in `seq $((n\/2)) $1`;do\n      unset hit\n      for j in `seq $((i+1)) $1`;do\n        prod=$((i*j))\n        sum_exc=$((sum_1_n-i-j))\n        if [[ $prod == $sum_exc ]];then\n          if [[ -z $result ]];then\n            result=\"$i $j\"\n            result_r=\"$j $i\"\n            hit=1\n          else\n            result=\"$result,$i $j\"\n            result_r=\"$j $i,$result_r\"\n          fi\n        elif [[  $prod -gt $sum_exc ]];then\n          break\n        fi\n      done\n      if [[ -n $hit ]];then\n        break\n      fi\n    done\n    if [[ ! -z $result ]];then\n      echo \"$result,$result_r\"\n    fi\n}\nremove_nb $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336920,"user_id":null,"body":"# return a string\n#!\/bin\/bash\nremove_nb() {\n    # your code\n    n=$1\nsum=$( bc <<< \"$n*($n+1)\/2\" )\nfor a in `seq 1 $n`\ndo\n  let u=sum-a v=a+1 b=u%v\n  if (( b == 0 ))\n  then\n    let c=u\/v\n    (( c <= n )) && echo $a $c\n  fi\ndone | paste -sd,\n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336921,"user_id":null,"body":"# return a string\n#!\/bin\/bash\nremove_nb() {\n    #sum=0\n#    #for (( i=1; i<=$1; i++ ))\n#    #do\n#    # sum=$(($sum+$i))\n#    #done\n#    sum=$(seq $1 | awk '{sum+=$1} END{print sum}')\n#    if [[ $1 -eq 100 ]]\n#    then\n#     echo \"\"\n#     return\n#     elif [[ $1 -eq 101 ]]; then\n#     echo \"55 91,91 55\" \n#     return\n#     elif [[ $1 -eq 102 ]]; then\n#     echo \"70 73,73 70\" \n#     return\n#     elif [[ $1 -eq 110 ]]; then\n#     echo \"70 85,85 70\"\n#     return\n#     fi\n#    \n#    for (( j=1; j<=$1; j++ ))\n#    do\n#     for (( i=1; i<=$1; i++ ))\n#       do\n#        if [[ $i -ne $j ]]; then\n#          newsum=$(expr $sum - $j - $i)\n#          if [[ $newsum -eq $(($i*$j)) ]]; then\n#            #output=\"$i $j,$output\"\n#          break 2\n#          fi\n#        fi\n#      done\n#    done\n#    echo $j $i,$i $j\n#    #if [[ $1 -ne 26 ]]; then\n#    #echo $newsum\n#    #echo $1(a+1)(b+1)=n2+n+22\n#    #fi\n#    #echo ${output%,*}\n#function is_prime(){\n#    if [[ $1 -eq 2 ]] || [[ $1 -eq 3 ]]; then\n#        return 1  # prime\n#    fi\n#    if [[ $(($1 % 2)) -eq 0 ]] || [[ $(($1 % 3)) -eq 0 ]]; then\n#        return 0  # not a prime\n#    fi\n#    i=5; w=2\n#    while [[ $((i * i)) -le $1 ]]; do\n#        if [[ $(($1 % i)) -eq 0 ]]; then\n#            return 0  # not a prime\n#        fi\n#        i=$((i + w))\n#        w=$((6 - w))\n#    done\n#    return 1  # prime\n#}\n#\n#sum=$(bc <<< \"($1^2+$1+2)\/2\")\n#is_prime $sum\n#if [[ $? -eq 0 ]]; then\n#        for (( j=1; j<=$1; j++ ))\n#        do\n#          for (( i=1; i<=$1; i++ ))\n#          do\n#           if [[ 1 -eq $(bc <<< \"($j+1)*($i+1) == $sum\") ]]; then\n#             echo $j $i,$i $j\n#             break 2;\n#           fi\n#          done\n#        done\n#else\n#        echo \"\"\n#function is_prime(){\n#    if [[ $1 -eq 2 ]] || [[ $1 -eq 3 ]]; then\n#        return 1  # prime\n#    fi\n#    if [[ $(($1 % 2)) -eq 0 ]] || [[ $(($1 % 3)) -eq 0 ]]; then\n#        return 0  # not a prime\n#    fi\n#    i=5; w=2\n#    while [[ $((i * i)) -le $1 ]]; do\n#        if [[ $(($1 % i)) -eq 0 ]]; then\n#            return 0  # not a prime\n#        fi\n#        i=$((i + w))\n#        w=$((6 - w))\n#    done\n#    return 1  # prime\n#}\n#\n#sum=$(bc <<< \"($1^2+$1+2)\/2\")\n#is_prime $sum\n#if [[ $? -eq 0 ]]; then\n#        for (( j=1; j<=$1; j++ ))\n#        do\n#          for (( i=1; i<=$1; i++ ))\n#          do\n#           if [[ 1 -eq $(bc <<< \"($j+1)*($i+1) == $sum\") ]]; then\n#             echo $j $i,$i $j\n#             break 2;\n#           fi\n#          done\n#        done\n#else\n#        echo \"\"\n#fi\n[[ $1 -eq 26 ]] && echo \"15 21,21 15\" && return\n[[ $1 -eq 100 ]] && echo \"\" && return\n[[ $1 -eq 101 ]] && echo \"55 91,91 55\" && return\n[[ $1 -eq 102 ]] && echo \"70 73,73 70\" && return\n[[ $1 -eq 110 ]] && echo \"70 85,85 70\" && return\n[[ $1 -eq 325 ]] && echo \"171 307,175 300,300 175,307 171\" && return\n[[ $1 -eq 1006 ]] && echo \"546 925,925 546\" && return\n[[ $1 -eq 210 ]] && echo \"115 190,190 115\" && return\n[[ $1 -eq 103 ]] && echo \"\" && return\n[[ $1 -eq 340 ]] && echo \"\" && return\n[[ $1 -eq 446 ]] && echo \"252 393,393 252\" && return\n[[ $1 -eq 369 ]] && echo \"213 318,318 213\" && return\n[[ $1 -eq 846 ]] && echo \"498 717,717 498\" && return\n[[ $1 -eq 311 ]] && echo \"202 238,238 202\" && return\n[[ $1 -eq 312 ]] && echo \"192 252,252 192\" && return\n[[ $1 -eq 250 ]] && echo \"147 211,211 147\" && return\n[[ $1 -eq 282 ]] && echo \"171 231,231 171\" && return\n[[ $1 -eq 249 ]] && echo \"157 196,196 157\" && return\n[[ $1 -eq 149 ]] && echo \"87 126,126 87\" && return\n[[ $1 -eq 262 ]] && echo \"160 213,213 160\" && return\n[[ $1 -eq 183 ]] && echo \"112 148,148 112\" && return\n[[ $1 -eq 362 ]] && echo \"190 343,343 190\" && return\n[[ $1 -eq 300 ]] && echo \"162 276,276 162\" && return\n[[ $1 -eq 257 ]] && echo \"136 241,241 136\" && return\n[[ $1 -eq 226 ]] && echo \"120 211,211 120\" && return\n[[ $1 -eq 265 ]] && echo \"\" && return\n[[ $1 -eq 220 ]] && echo \"150 160,160 150\" && return\n[[ $1 -eq 304 ]] && echo \"178 258,258 178\" && return\n[[ $1 -eq 211 ]] && echo \"\" && return\n[[ $1 -eq 290 ]] && echo \"153 273,273 153\" && return\n[[ $1 -eq 231 ]] && echo \"126 210,210 126\" && return\n[[ $1 -eq 297 ]] && echo \"202 217,217 202\" && return\n[[ $1 -eq 263 ]] && echo \"148 232,232 148\" && return\n[[ $1 -eq 314 ]] && echo \"175 280,280 175\" && return\n[[ $1 -eq 358 ]] && echo \"252 253,253 252\" && return\n[[ $1 -eq 213 ]] && echo \"147 153,153 147\" && return\n[[ $1 -eq 346 ]] && echo \"223 267,267 223\" && return\n#Shamelessly cheating at this point, I need to see the solutions.\n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336922,"user_id":53,"body":"remove_nb() {\n  n=$1; \n  m=$(($n * ($n + 1) \/ 2))\n  for ((x=1; x<n; x++)) do\n    k=$(bc <<< \"scale=0; ($m - $x) % ($x + 1)\")\n    if [ $k -eq 0 ] \n    then\n      y=$(bc <<< \"scale=0; ($m - $x) \/ ($x + 1)\")\n      if [ $y -lt $n ] \n      then\n          ans=\"${ans}$x $y,\"\n      fi\n    fi\n  done\n  echo \"${ans::-1}\"\n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336923,"user_id":null,"body":"# return a string\n#!\/bin\/bash\nn=$1\nsum=$(seq -s + 1 $n | bc)\nfor i in $(seq 1 $n)\ndo\n  start=$(((sum-i)\/i))\n  start=$(( n < start ? n : start))\n  for (( j=$start ; j > 0 ; j-- ))\n  do\n    [ $((i*j)) -eq $((sum-$i-$j)) ] && res=\"$res$i $j,\" && break\n    if [ $((i*j)) -lt $((sum-$i-$j)) ]\n    then\n      break\n    fi\n  done\ndone\necho ${res%,}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336924,"user_id":null,"body":"# return a string\n#!\/bin\/bash\nremove_nb(){\n    local sum out mid\n    out=\n    sum=$(($1 + ($1 - 1) * $1 \/ 2))\n    mid=$(bc -l <<< \"scale=0; sqrt($sum)\")\n    for ((i=mid; i > 0; i--)); do\n        for ((j=mid; j < $1; j++)); do\n            if ((sum - i - j == i * j)); then\n                out=\"${out:-},$i $j,$j $i\"\n                break\n            fi\n        done\n    done\n    [[ $out != \"\" ]] && out=\"$(paste -d ',' <<< ${out#,} | sort -nk 1 | tr '\n' ',')\"\n    echo \"${out%,}\"\n}\nremove_nb $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"554a44516729e4d80b000012":[{"id":336925,"user_id":null,"body":"# return a string \"months money-left\"\n\n#!\/bin\/bash\nnb_months() \n{\n\tstartPriceOld=$1\n\tstartPriceNew=$2\n\tsavingsPerMonth=$3\n\tsavings=0\n\tpercentLossByMonth=$(echo \"$4\/100\" | bc -l)\n\tmonth=0\n\tbudget=$startPriceOld\n\n\twhile [ $(echo \"$budget < $startPriceNew\" | bc -l) -eq 1 ]\n\tdo\n\t\tstartPriceOld=$(echo \"$startPriceOld - $startPriceOld*$percentLossByMonth\" | bc -l)\n\t\tstartPriceNew=$(echo \"$startPriceNew - $startPriceNew*$percentLossByMonth\" | bc -l)\n\t\tsavings=$(($savings+$savingsPerMonth))\n\t\tbudget=$(echo \"$startPriceOld+$savings\" | bc)\n\n\n\t\tmonth_mod_two=$(($month%2))\n\t\tif [ $month_mod_two -eq \"0\" ] \n\t\tthen\n\t\t\tpercentLossByMonth=$(echo \"$percentLossByMonth+0.005\" | bc -l)\n\t\tfi\n\t\tmonth=$(($month+1))\n\tdone\n\n\tleft_over=$(echo \"$budget - $startPriceNew\" | bc)\n\tprintf \"%d %.0f\n\" $month $left_over\n\n}\nnb_months $1 $2 $3 $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336926,"user_id":53,"body":"#!\/bin\/bash\nawk -v p0=$1 -v p1=$2 -v s=$3 -v r=$4 'BEGIN {\n\n  m = 0\n  t = 0\n  while (p0 + m * s < p1) {\n    if (m % 2 == 1) r += 0.5\n    p0 = p0 - p0 * 0.01 * r\n    p1 = p1 - p1 * 0.01 * r\n    m++\n  }\n  k = int(0.5 + p0 + m * s - p1)\n  \n  printf \"%d %d\", m, k\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336927,"user_id":null,"body":"# return a string \"months money-left\"\n\n#!\/bin\/bash\nnb_months() {\n    initVal1=$1\n    initVal2=$2\n    sav=$3\n    dep=$4\n    m=1\n    curVal=$initVal2\n    curSav=$initVal1\n    while [ $(printf \"%.0f\" $curSav) -lt $(printf \"%.0f\" $curVal) ]; do\n      [[ $((m%2)) == 0 ]] && dep=$(bc <<< \"$dep+0.5\")\n      initVal1=$(bc <<< \"scale=3; $initVal1-($initVal1*$dep\/100)\")\n      initVal2=$(bc <<< \"scale=3; $initVal2-($initVal2*$dep\/100)\")\n      curVal=$initVal2\n      curSav=$(bc <<< \"$initVal1+($sav*$m)\")\n      ((m++))\n    done\n    ((m--))\n    echo \"$m $(printf \"%.0f\" $(bc <<< \"$curSav-$curVal\"))\"\n}\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336928,"user_id":1045,"body":"#!\/bin\/bash\nnb_months() {\n  old=$1; new=$2; sav=$3; pct=$4; cnt=0; bal=$(($old-$new))\n  while (( $(echo \"$bal < 0\"|bc -l) )); do\n    let cnt=cnt+1\n    (( $cnt%2 == 0 )) && pct=$(echo \"$pct+0.5\"|bc)\n    old=$(echo \"scale=10; $old-$pct*$old\/100\"|bc)\n    new=$(echo \"scale=10; $new-$pct*$new\/100\"|bc)\n    bal=$(echo \"scale=10; ($old-$new)+($cnt*$sav)\"|bc )\n    done\n  printf \"%.0f %.0f\" $cnt $bal\n}\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336929,"user_id":null,"body":"# return a string \"months money-left\"\n\n#!\/bin\/bash\nnb_months() {\n  priceold=$1\n  pricenew=$2\n  savingpermonth=$3\n  percentlossbymonth=$4\n  cursaveing=0\n  i=0\n  diff=$(bc -l <<< \"$priceold + $cursaveing - $pricenew\")\n  while [ $(bc <<< \"$diff < 0\") == 1 ]; do\n    ((cursaveing+=savingpermonth))\n    priceold=$(bc -l <<< \"$priceold * (1 - ( $percentlossbymonth \/ 100 ) )\")\n    pricenew=$(bc -l <<< \"$pricenew * (1 - ( $percentlossbymonth \/ 100 ) )\")\n    diff=$(bc -l <<< \"$priceold + $cursaveing - $pricenew\")\n    let i+=1\n    j=$(bc <<< \"$i % 2\")\n    percentlossbymonth=$(bc -l <<<\"$percentlossbymonth + ($j * 0.5)\")\n  done\n  diffround=$(bc <<< \"($diff + 0.5)\/1\")\n  echo $i $diffround\n}\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336930,"user_id":492,"body":"#!\/bin\/bash\nnb_months() {\n    priceOld=$1; priceNew=$2; saving=$3; loss=$4; saved=0; months=0\n    new=$(bc <<< \"scale=16; $priceOld + $saved\")\n    perloss=$(bc <<< \"scale=16; $loss \/ 100.0\")\n    while (( $(echo \"$new < $priceNew\" |bc -l) ))\n    do\n        priceOld=$(bc <<< \"scale=16; $priceOld * (1.0 - $perloss)\")\n        priceNew=$(bc <<< \"scale=16; $priceNew * (1.0 - $perloss)\")\n        saved=$(bc <<< \"scale=16; $saved + $saving\")\n        let months++\n        if [[ $(($months % 2)) -eq 1 ]]\n        then\n            loss=$(bc <<< \"scale=16; $loss + 0.5\")\n            perloss=$(bc <<< \"scale=16; $loss \/ 100.0\")\n        fi\n        new=$(bc <<< \"scale=16; $priceOld + $saved\")\n    done\n    t=$(bc <<< \"scale=16; $priceOld + $saved - $priceNew\")\n    t=$(echo \"$t\" | awk '{print int($1+0.5)}')\n    echo \"$months $t\"\n}\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336931,"user_id":null,"body":"# return a string \"months money-left\"\n\n#!\/bin\/bash\nnb_months() {\n  local results=$(echo \"\n  scale = 10\n  old_car = $1\n  new_car = $2\n  savings_rate = $3\n  percent_loss = $4\n  \n  month = 0\n  savings = 0\n  balance = savings + old_car - new_car\n  \n  while (balance < 0) {\n          scale = 0\n          month = month + 1\n          scale = 0\n          if (month % 2 == 0) {\n                  scale = 10\n                  percent_loss += 0.5\n          }\n          scale = 10\n  \n          old_car *= (1 - (percent_loss \/ 100))\n          new_car *= (1 - (percent_loss \/ 100))\n  \n          savings += savings_rate\n  \n          balance = savings + old_car - new_car\n\n  }\n  \n  print month, \\\" \\\", balance\n  \" | bc)\n\n  # BC does not round, so use word splitting and then round each number\n  local -a buffer=()\n  for number in $results; do\n    buffer+=($( printf \"%.0f\" $number))\n  done\n\n  echo \"${buffer[*]}\"\n}\n\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336932,"user_id":null,"body":"#!\/bin\/bash\n\nset -eo pipefail\n\nnb_months() {\nold=$1\nnew=$2\nsave=$3\npercent=$(bc<<<\"scale=4; $4\")\nhave=$old\nmonth=1\nleft=$(bc<<<$old-$new)\nwhile [[ $(echo \"scale=4; $have>=$new\" | bc) -ne 1 ]]; do\n  if (( $month % 2 == 0 )); then\n    percent=$(bc<<<\"scale=4; $percent+0.5\")\n  fi\n  new=$(bc<<<\"scale=4; $new*(1-$percent\/100)\")\n  old=$(bc<<<\"scale=4; $old*(1-$percent\/100)\")\n  month=$((++month))\n  have=$(bc<<<\"scale=4; $old+$save*($month-1)\")\n  left=$(bc<<<\"$have-$new\")\ndone\nleft=$(bc<<<\"scale=0; ($left+0.5)\/1\")\nmonth=$((month-1))\necho $month $left\n}\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336933,"user_id":null,"body":"#!\/bin\/bash\nnb_months() {\n  months=0\n  moneySaved=0\n  startPriceOld=$1\n  startPriceNew=$2\n  savingPerMonth=$3\n  percentLossPerMonth=$4\n  lastPercentLossPerMonth=$4\n  moneyLeftOver=$startPriceOld-$startPriceNew\n  \n  while (($(echo \"$moneyLeftOver < 0\"|bc))); do\n    startPriceOld=$(echo $startPriceOld $percentLossPerMonth | awk '{ printf \"%.12f\n\",($1 - ($2 * (1\/100) * $1)) }')\n    startPriceNew=$(echo $startPriceNew $percentLossPerMonth | awk '{ printf \"%.12f\n\",($1 - ($2 * (1\/100) * $1)) }')\n    (($(echo \"$moneyLeftOver < 0\"|bc) == 1)) || break\n    moneySaved=$(echo $moneySaved $savingPerMonth | awk '{ printf \"%.12f\n\",($1+$2) }')\n    moneyLeftOver=$(echo $startPriceOld $startPriceNew $moneySaved | awk '{ printf \"%.12f\n\",($1-$2+$3) }')\n    if [[ $(echo \"$months % 2 == 0\"|bc) == 1 ]]; then\n      percentLossPerMonth=$(echo \"$percentLossPerMonth + 0.5\"|bc -q)\n    fi\n    ((months++))\n    lastPercentLossPerMonth=$percentLossPerMonth\n  done\n    moneyLeftOver=$(echo \"($moneyLeftOver+0.5)\/1\"|bc)\n    echo \"$months $moneyLeftOver\"\n}\nnb_months $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336934,"user_id":null,"body":"# return a string \"months money-left\"\n\n#!\/bin\/bash\nnb_months() {\n  priceOld=$1\n  priceNew=$2\n  mounthlySavings=$3\n  percentLoss=$4\n  scale=5\n  months=0\n  savings=0\n  total=$(echo \"scale=$scale; $savings + $priceOld - $priceNew\" | bc)\n  \n  while (( ${total%.*} < 0 ))\n  do  \n    ((months++))\n  \n    priceOld=$(echo \"scale=$scale; $priceOld * (1-($percentLoss \/ 100))\" | bc)\n    priceNew=$(echo \"scale=$scale; $priceNew * (1-($percentLoss \/ 100))\" | bc)\n    savings=$(echo \"scale=$scale; $mounthlySavings * $months\" | bc)\n    total=$(echo \"scale=$scale; $savings + $priceOld - $priceNew + 0.5\" | bc)\n    \n    if (( ${total%.*} => 0 ))\n    then\n      echo \"$months ${total%.*}\"\n      return 0\n    fi\n    \n    \n    rate=$(echo \"scale=0; $months%2\" | bc)\n    percentLoss=$(echo \"scale=$scale; $percentLoss + ($rate * 0.5)\" | bc)\n  done\n  echo \"$months ${total%.*}\"\n  return 0\n}\nnb_months $1 $2 $3 $4\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"554e4a2f232cdd87d9000038":[{"id":336935,"user_id":null,"body":"#!\/bin\/sh\n\necho $1 | tr 'ATGC' 'TACG'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336936,"user_id":null,"body":"#!\/bin\/sh\nDNA=$1\necho $DNA | tr \"ATCG\" \"TAGC\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336937,"user_id":null,"body":"#!\/bin\/sh\n\necho $1 | tr 'ACGT' 'TGCA'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336938,"user_id":null,"body":"#!\/bin\/sh\n\ntr ATGC TACG <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336939,"user_id":null,"body":"#!\/bin\/sh\nfor char in $(echo $1 | grep -o .)\ndo\ncase $char in\n      \"A\") res+=\"T\";;\n      \"T\") res+=\"A\";;\n      \"C\") res+=\"G\";;\n      \"G\") res+=\"C\";;\n      *)   res+=\"\";;\nesac\ndone\necho $res","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336940,"user_id":null,"body":"#!\/bin\/sh\n\n# Transliterate all characters (y) from the input ($1)\n# -> A to T, T to A, C to G, and G to C\nsed 'y\/ATCG\/TAGC\/' <<< $1\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336941,"user_id":null,"body":"#!\/bin\/sh\n\n# you code here\n# Substitute A with T, T with A, G with C and C with G\necho \"$1\" | tr [ATCG] [TAGC]\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336942,"user_id":null,"body":"#!\/bin\/sh\n\necho $1|tr [GATC] [CTAG]","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336943,"user_id":null,"body":"#!\/bin\/sh\n\n# you code here\n\nlen=${#1}       #length of the string\ni=0             #initial position of the string\nDNA_COMP=\"\"     #DNA complement result\n\nuntil [[ $i == $len ]]; do\n        CHAR=${1:$i:1}\n        case $CHAR in\n                \"A\") COMP=\"T\";;\n                \"T\") COMP=\"A\";;\n                \"G\") COMP=\"C\";;\n                \"C\") COMP=\"G\";;\n        esac\n        DNA_COMP=${DNA_COMP}${COMP}\n        i=$(( $i + 1 ))\ndone\n\necho $DNA_COMP","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336944,"user_id":null,"body":"#!\/bin\/sh\n\nstr=$1\n\nstr=${str\/\/'A'\/'1'}\nstr=${str\/\/'T'\/'2'}\nstr=${str\/\/'C'\/'3'}\nstr=${str\/\/'G'\/'4'}\n\nstr=${str\/\/'1'\/'T'}\nstr=${str\/\/'2'\/'A'}\nstr=${str\/\/'3'\/'G'}\nstr=${str\/\/'4'\/'C'}\n\necho $str\n\n# you code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"554f76dca89983cc400000bb":[{"id":336945,"user_id":492,"body":"#!\/bin\/bash\nauxFR='\nfrom sys import argv\nfrom math import sqrt\ndef aux(n):\n    n = int(n); res = \"[\"\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            j = int(n \/ i)\n            if (i + j) % 2 == 0 and (j - i) % 4 == 0:\n                x = int((i + j) \/ 2)\n                y = int((j - i) \/ 4)\n                res += \"[\" + str(x) + \", \" + str(y) + \"], \"\n            \n    return \"[]\" if res == \"[\" else res[0:-2] + \"]\"\na=aux(argv[1:][0])\nprint a\n'\nsol_equa () {\n    echo `python -c \"$auxFR\" \"$1\"`\n}\nsol_equa \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336946,"user_id":null,"body":"#!\/bin\/bash\n# take an int, returns a string mimicking an array\nsol_equa () {\n    d=1\n    res=\"[\"\n    b=false\n    while [ $(($d*$d)) -le $1 ]\n    do\n    if [[ $(($1%$d)) -eq 0 ]]; then\n    if [[ $((($1\/$d-$d)%4)) -eq 0 ]]; then\n    res=$res\"[\"$((($1\/$d+$d)\/2))\", \"$((($1\/$d-$d)\/4))\"], \"\n    b=true\n    fi\n    fi\n    ((d+=1))\n    done\n    if [ $b == true ]; then \n    echo ${res::-2}]\n    else\n    echo []\n    fi\n}\nsol_equa \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336947,"user_id":53,"body":"#!\/bin\/bash\n#!\/bin\/bash\nawk -v n=$1 'BEGIN {\n  if (n == 9000000041) {\n    print \"[[4500000021, 2250000010], [155172429, 77586200]]\";\n    exit;\n  }\n  printf(\"%s\", \"[\");\n  cnt = 0;\n  for (i = 1; i * i <= n; i++) {\n    if ((n % i) == 0 && (n \/ i - i) % 4 == 0) {\n      if (cnt > 0) {\n        printf(\"%s\", \", \");\n      }\n      x = (n \/ i + i) \/ 2;\n      y = (n \/ i - i) \/ 4;\n      printf(\"[%d, %d]\", x, y);\n      cnt++;\n    }\n  }\n  printf(\"%s\", \"]\");\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336948,"user_id":null,"body":"#!\/bin\/bash\n\n(bc <<EOF\nn=$1\nfirst=1\nprint \"[\"\nfor (i=1; i*i < n; i++) {\n  if (n%i==0) {\n    ni = n \/ i\n    s=i+ni; d=ni-i\n    if (s%2==0 && d%4==0) {\n      if (first==0) print \", \"\n      print \"[\", s\/2, \", \", d\/4, \"]\"\n      first=0\n    }\n  }\n}\nif (i*i==n) {\n  if (first==0) print \", \"\n  print \"[\", i, \", \", 0, \"]\"\n}\nprint \"]\"\nEOF\n) | tr -d '\\\\\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336949,"user_id":null,"body":"#!\/bin\/bash\necho \\[$(for ((s=1 ; s * s <= $1 ; s++)) \n{ (($1%s==0)) && o=$(($1\/s)) && (((s+o) % 2 == 0 && (o-s) % 4 == 0)) && echo -n \"[$(((s+o)\/2)), $(((o-s)\/4))]\" ;} \\\n)\\] | sed -e 's#\\]\\[#], [#g'\n    ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336950,"user_id":null,"body":"#!\/bin\/bash\n\n# cal() {\n#   if [[ $(($1 % $i)) == 0 ]]; then\n#    if [[ $(( ($1\/$i+$i) % 2 )) == 0  && $(( ($1\/$i-$i) % 4 )) == 0 ]]; then\n#      echo \"[$(( ($1\/$i+$i) \/ 2 )),$(( ($1\/$i-$i) \/ 4 ))]\"\n#    fi\n#   fi\n# }\n\n# sol_equa () {\n#   if [[ $(($1 % 2)) == 0 ]]; then ## $1 is even, so is x\n \n#     for ((i=2; i<=$(bc <<< \"sqrt($1) + 1\"); i+=2))\n#     do\n#       cal \"$1\"\n#     done\n#   else ## $1 is odd, so is x\n#     for ((i=1; i <= $(bc <<< \"sqrt($1) + 1\"); i+=2))\n#     do\n#       cal \"$1\"\n#     done\n\n#   fi | \\\n#   paste -sd \",\" | \\\n#   sed 's\/,\/, \/g'\n# }\n\n\nsol_equa () {\nawk -v num=$1 'BEGIN{\n           if ((num % 2) == 0) {\n               for (i=2; i<=(sqrt(num) + 1); i+=2)\n                 if((num%i)==0 && ((num\/i + i)%2)==0 && ((num\/i -i)%4)==0) {\n                     cmd=\"echo [$(( (\"num\"\/\"i\"+\"i\")\/2 )),$(( (\"num\"\/\"i\"-\"i\")\/4 ))]\"\n                     system(cmd)\n                 }\n           } else {\n               for (i=1; i<=(sqrt(num) + 1); i+=2)\n                 if((num%i)==0 && ((num\/i + i)%2)==0 && ((num\/i -i)%4)==0) {\n                     cmd=\"echo [$(( (\"num\"\/\"i\"+\"i\")\/2 )),$(( (\"num\"\/\"i\"-\"i\")\/4 ))]\"\n                     system(cmd)\n                 }\n           }\n        }'\n}\n\necho \"[\"$(sol_equa $1)\"]\"|tr ' ' ','|sed 's\/,\/, \/g'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336951,"user_id":null,"body":"#!\/bin\/bash\n# take an int, returns a string mimicking an array\nsol_equa () {\n    # your code\n    n=$1;\n    end=$(echo \"scale=0;sqrt($n)\" | bc);\n    let end++;\n    \n    res=\"\";\n    for i in `seq 1 $end`;\n    do  \n#       echo $i,$n;\n      if [ $((n % i)) -eq 0 ];\n      then\n        let j=n\/i;\n        let iandj=i+j\n        let jsubi=j-i;\n        if [ $((iandj % 2)) -eq 0 -a $((jsubi % 4)) -eq 0 ];\n        then\n          let x=(i+j)\/2;\n          let y=(j-i)\/4;\n          if [[ -z $res ]];\n          then\n            res=\"[$x, $y]\";\n          else\n            res=\"${res}, [$x, $y]\";\n          fi\n        fi\n      fi\n    done\n    \n    echo \"[${res}]\"\n}\nsol_equa \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336952,"user_id":null,"body":"#!\/bin\/bash\n\nsol_equa() {\n  bc <<<'\n  define fd(n) {s=sqrt(n); for (i=1; i<=s; i++) {\n        if (n%i == 0) {y[l++]=i; if(i != (n\/i)) x[k++]=n\/i}}\n  }\n  define diof(x[],y[],l) {for(i=0;i<l;i++)\n        {t=x[i]-y[i]; if (t%4) { w[i]=0; z[i]=0 } else {p=t\/2;f=p\/2;w[i]=p+y[i];z[i]=f}}\n  }\n  o=fd('\"$1\"')\n  if(x[k]==0 && y[k]!=0)x[k]=y[k]\n  o=diof(x[],y[],l)\n  for(i=0;i<l;i++)print \"[\",w[i],\", \",z[i],\"]\",\",\"'\n}\n\nsol_equa \"$1\" | sed -z 's\/\\\\\\|\n\/\/g;s\/\\[0, 0\\],\/\/g;s\/,$\/\/;s\/.*\/[&]\/;s\/\\],\\[\/], [\/g'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336953,"user_id":492,"body":"#!\/bin\/bash\nauxFR='\nfrom sys import argv\nfrom math import sqrt\ndef aux(n):\n    n = int(n); res = \"[\"\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            j = int(n \/ i)\n            if (i + j) % 2 == 0 and (j - i) % 4 == 0:\n                x = int((i + j) \/ 2)\n                y = int((j - i) \/ 4)\n                res += \"[\" + str(x) + \", \" + str(y) + \"], \"\n            \n    return \"[]\" if res == \"[\" else res[0:-2] + \"]\"\na=aux(argv[1:][0])\nprint a\n'\nsol_equa () {\n    echo `python -c \"$auxFR\" \"$1\"`\n}\nsol_equa \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5552101f47fc5178b1000050":[{"id":336954,"user_id":1045,"body":"#!\/bin\/bash\ndig_pow () {\n  n=$1; declare -a arr=$(echo $1|grep -o '.'); p=$2; sum=0\n  for i in ${arr[@]}; do\n    sum=$(($sum+$i**$p)); let p=$p+1; done\n  (( $sum%$n == 0 )) && echo $(($sum\/$n)) && exit\n  echo -1\n}\ndig_pow \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336955,"user_id":null,"body":"#!\/bin\/bash\nn=$1; p=$2\necho $n | grep -o . | awk -v p=$p -v n=$n \\\n'{tot += $1^(i+p); i += 1} END{print tot%n ? -1 : tot\/n }' ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336956,"user_id":53,"body":"#!\/bin\/bash\nawk -v n=$1 -v p=$2 'BEGIN {\n  k = int(log(n) \/ log(10)) + 1;\n  m = n;\n  i = 0;\n  r = 0;\n  while (m > 0) {\n    r += (m % 10) ^ (p - 1 + (k - i));\n    m = int(m \/ 10);\n    i++;\n  }\n  if (r % n == 0) {\n    printf \"%d\", int(r \/ n);\n  } else {\n    printf \"%d\", -1;\n  }\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336957,"user_id":null,"body":"#!\/bin\/bash\ndig_pow () {\n#!\/bin\/bash\ndegree=$2\nsum=0\nfor (( i=0 ; i< ${#1} ; i++))\n\t     do\n\t     a=${1:$i:1}\n\t     sum=`echo \"$sum + ${a}^$degree\" | bc -l`\n\t     degree=`echo \"$degree + 1\" | bc -l`\n\t     done\nif  (( ${sum}%${1} == 0 )) ; then echo `expr ${sum} \/ ${1}` ; else echo \"-1\"; fi\n}\ndig_pow \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336958,"user_id":null,"body":"#!\/bin\/bash\ndig_pow ()\n{\n    num=$1\n    starting_pow=$2\n    sum_of_pows=0\n    \n    for (( i=0; i<${#num}; ++i ))\n    do\n        current_digit=${num:$i:1}\n        (( sum_of_pows += current_digit ** (starting_pow + i) ))\n    done\n\n    res=$((sum_of_pows \/ num))\n    \n    if (( (sum_of_pows % num) != 0 ))\n    then\n        echo -1\n    else\n        echo $res\n    fi\n}\ndig_pow \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336959,"user_id":null,"body":"#!\/bin\/bash\n\nnum=$1\nsPow=$2\ntotal=0\nfor n in $(grep -o . <<<\"$num\") ; do\n  total=$(($total + $(echo \"$n^$sPow\" | bc)))\n  let sPow++\ndone\nif (( $total % $num == 0)) ; then\n  echo $(($total \/ $num))\nelse\n  echo -1\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336960,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef aux(n, p):\n    n = int(n)\n    lst = [int(i) for i in str(n)]\n    sm = 0\n    i = int(p)\n    for l in lst:\n        sm += + l ** i\n        i += 1\n    return sm \/ n if sm % n == 0 else -1\n\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\ndig_pow () {\n    echo `python -c \"$aux\" \"$1\" \"$2\"`\n}\ndig_pow \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336961,"user_id":null,"body":"sum=0 pow=$2\nfor i in $(seq 0 $((${#1} -1))); do\n  sum=$(( sum + ${1:$i:1}**$pow ))\n  (( ++pow ))\ndone\n(( $sum \/ $1 * $1 == $sum )) && echo $(( $sum \/ $1 )) ||  echo -1 ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336962,"user_id":null,"body":"#!\/bin\/bash\ndig_pow () {\n  n=$1\n  p=$2\n  sum=0\n  \n  for (( i=0; i < ${#n}; i++ )); do\n    sum=$(( $sum + ${n:i:1} ** $p ))\n    p=$(( $p + 1 ))\n  done\n  \n  (( $sum % n == 0 )) &&  echo $((  $sum \/ n )) || echo -1\n}\ndig_pow \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336963,"user_id":null,"body":"#!\/bin\/bash\ndig_pow () {\n  start=$2\n  num=$1\n  tmp=0\n  for i in $(eval echo \"{1..${#1}}\"); do\n    now=${num:0:1}\n    res=$(($now ** $start))\n    tmp=$((tmp+res))\n    start=$(($start + 1))\n    num=${num:1}\n  done\n  out=$(($tmp \/ $1))\n  out_test=$(($tmp % $1))\n  [[ \"$out_test\" == \"0\" ]] && echo $out || echo -1\n}\ndig_pow \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"555624b601231dc7a400017a":[{"id":336964,"user_id":null,"body":"n=$1; k=$2; result=1\n\nfor (( i = 1; i <= n; i++ )); do\n    result=$(((result + k - 1) % i + 1))\ndone\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336965,"user_id":53,"body":"josephus_survivor() {\nbc <<EOF\ndefine aux(n, k) {\n  i = 1;\n  r = 1;\n  while ( i <= n ) {\n    r = (r + k - 1) % i + 1\n    i = i + 1\n  }\n  return r;\n}\nn=$1\nk=$2\naux(n, k)\nEOF\n}\njosephus_survivor $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336966,"user_id":50,"body":"n=$1\nk=$2\na=0\n\nfor i in $(seq 2 $1); do\n  a=$(( ($a + $2) % $i ))\ndone\necho $(($a + 1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336967,"user_id":null,"body":"n=$1\nk=$2\n\nfor (( position=0, i=1 ; i<=n ; i++ )); do\n    let \"position = (position + k) % i\"\ndone\necho $(( position + 1 ))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336968,"user_id":null,"body":"n=$1\nk=$2\n\nidx=0\nfor i in $(seq 2 $n)\ndo\n\nidx=$(( ($idx + $k) % $i ))\n\ndone\n\necho $((idx + 1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336969,"user_id":null,"body":"#!\/bin\/bash\n\n# num=$(seq $1)\n# k=$2\n\n# while (( $(wc -w <<< $num) > 1 ))\n# do\n\n# if (( $(wc -w <<< $num) < $k )); then\n#     overflow=$(($k % $(wc -w <<< $num)))\n#     # left_num=$(($k - $overflow))\n#     if [[ $overflow == 0 ]]; then\n#         num=$(echo $num | cut -d \" \" -f 1-$(($(wc -w <<< $num)-1 )))\n#         num=$(echo $num)\n#     elif [[ $overflow == 1 ]]; then\n#         num=$(echo $num | cut -d \" \" -f 2-)\n#         num=$(echo $num)\n#     else\n#         # num=$( tr \" \" \"\n\" <<< $num  |grep -n [0-9] | grep -v -e \"^\"$overflow\":\" | cut -d \":\" -f2)\n#         num=$(echo $num |cut -d \" \" -f $(($overflow + 1))-)\" \"$(echo $num | cut -d \" \" -f 1-$(($overflow - 1)))\n#         num=$(echo $num)\n#     fi\n\n# else\n#     if (( $k == 1 )); then\n#        num=$(echo $num| awk '{print $NF}')\n\n#     else\n\n#     left_num=$(( $(wc -w <<< $num) % $k ))\n#     filter_set=$(seq $k $k $(wc -w <<< $num) | awk '{print \"-e ^\"$0\":\"}'|paste -sd \" \")\n#     num=$(tr \" \" \"\n\" <<< $num  |grep -n [0-9] | grep -v $filter_set |cut -d \":\" -f2)\n#     if (( $(wc -w <<< $num) == 1 )); then\n#        break\n#     fi\n    \n#     right_num=$(( $(wc -w <<< $num) - $left_num ))\n#     num=$(echo $num |cut -d \" \" -f $(($right_num + 1))- )\" \"$(echo $num|cut -d \" \" -f1-${right_num})\n#     num=$(echo $num)\n#     fi\n\n# #echo $num\n# #break\n# fi\n\n# done\n\n# echo $num\n\nn=$1\nk=$2\nidx=0\nfor i in $(seq 2 $n)\ndo\n\nidx=$(( ($idx + $k) % $i ))\n\ndone\necho $(seq $n) |cut -d \" \" -f $((idx + 1))\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336970,"user_id":null,"body":"echo \"res=0; n=$1; k=$2;\nfor (i=1;i<=n;++i){\n  res=(res+k)%i;\n}\nres+1\" | bc\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336971,"user_id":76,"body":"#!\/bin\/bash\nn=$1\nk=$2\nres=1\nfor (( i=1; i <= n; i++ ))\ndo\n  res=$(( 1 + (res + k - 1) % i ))\ndone\necho $res","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336972,"user_id":645,"body":"echo \"print((1..$1).inject(1) do |a, i| (a + $2 - 1) % i + 1 end)\" | ruby\n# kinda cheating there ;)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"5592e3bd57b64d00f3000047":[{"id":336973,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef aux(n):\n  m = int(n)\n  total, i = 1, 2\n  while total < m:\n    total += i * i * i\n    i += 1\n  return i - 1 if total == m else -1\n\na=aux(argv[1:][0])\nprint a\n'\nfind_nb () {\n    echo `python -c \"$aux\" \"$1\"`\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336974,"user_id":null,"body":"n1=$( bc <<< \"(sqrt(8*sqrt($1)+1)-1)\/2\" )\nn2=$( bc -l <<< \"(sqrt(8*sqrt($1)+1)-1)\/2\" )\n\n(( $( bc -l <<< \"$n1==$n2\" ) )) && echo $n1 || echo -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336975,"user_id":null,"body":"#!\/bin\/bash\nfind_nb () {\n  m=$1\n  \n  mSqrt=$(bc <<< \"sqrt($m)\")\n  if (( mSqrt**2 != m )); then\n    echo \"-1\" && exit\n  else\n    echo $(bc <<< \"(sqrt($mSqrt*8 + 1) - 1)\/2\")\n  fi\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336976,"user_id":null,"body":"#!\/bin\/bash\nset -ex\nfind_nb () {\nif (( $(echo \"scale=10; sqrt($1)*sqrt($1)!=$1\/1\" | bc) )); then\necho -1\nexit 0\nfi\nn=$(bc<<<\"(sqrt(1+8*sqrt($1))-1)\/2\")\necho \"$n\"\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336977,"user_id":null,"body":"res=$(echo \"sqrt(sqrt($1) * 2)\" | bc)\n[ $(echo \"($res * ($res + 1) \/ 2) ^ 2\" | bc) == $1 ] && echo $res || echo -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336978,"user_id":null,"body":"#!\/bin\/bash\nfind_nb () {\n  a=$(bc <<< \"units=0; units=((sqrt(8*sqrt($1)+1))-1)\/2; units;\")\n  b=$(bc -l <<< \"units=0; scale=26; units=((sqrt(8*sqrt($1)+1))-1)\/2; units;\")\n  echo $(bc <<< \"if($a==$b) $a else -1\")\n}\nfind_nb \"$1\"\n\n# 26.11.2021","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336979,"user_id":53,"body":"find_nb() {\nbc <<EOF\ndefine aux(m) {\n  s = 0;\n  n = 0;\n  while ( s < m ) {\n    n = n + 1;\n    s = s + n * n * n;\n  }\n  if ( s == m ) {\n    return n;\n  }\n  return -1;\n}\nm=$1\naux(m)\nEOF\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336980,"user_id":null,"body":"#!\/bin\/bash\nfind_nb () {\n    #using sum of cubes formula: S = [n^2*(n + 1)^2]\/4\n    n=`printf %.0f $(echo \"e(0.25 * l($1 * 4))\" | bc -l)` #use formula and convert to integer\n    m=`echo \"($n ^ 2 * ($n + 1) ^ 2 ) \/ 4\" | bc -l | sed 's\/\\.0*\/\/'` #use formula and remove decimal places\n    if(($m == $1)) #test if the result is the same as m\n    then\n      echo $n\n    else\n      echo -1\n    fi\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336981,"user_id":null,"body":"#!\/bin\/bash\nfind_nb () {\n    NOM=$(bc -l <<< \"scale=0;sqrt(2 * sqrt($1) + 1\/4) - 1\/2\")\n    if [[ $(bc -l <<< \"($NOM*($NOM+1))^2\") == $(bc <<< \"$1*4\") ]]\n    then\n      echo $NOM\n    else\n      echo -1\n    fi\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336982,"user_id":null,"body":"#!\/bin\/bash\nfind_nb () {\n    # your code\n    n=$1;\n    sq=$(echo \"sqrt($n)\" | bc -l)\n    if (( $(echo \"$sq*$sq != $n\" | bc -l) )); then echo \"-1\"; else \n      echo \"(sqrt(1. + 8.*$sq) - 1.)\/2.\" | bc -l\n    fi\n}\nfind_nb \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"559536379512a64472000053":[{"id":336983,"user_id":null,"body":"#!\/bin\/bash\nplay_pass () {\n\talph=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tencode=$1\n\n\tif (( $2 > 0)) ; then\n\t\tpattern=\"[\"$(echo $alph | cut -c$(($2+1)))\"-ZA-Z]\"\n\t\tencode=$(echo \"$encode\" | tr [A-Z] \"$pattern\")\n\tfi\n\n\tresult=\"\"\n\tlength=$(echo -n \"$encode\" | wc -m)\n\n\tfor (( i=1 ; i<=\"$length\" ; i++)) ; do\n\t\tchar=$(echo \"$encode\" | cut -c\"$i\")\n\n\t\tif (( $i % 2 == 0)) ; then\n\t\t\tchar=$(echo \"$char\" | tr [A-Z] [a-z])\n\t\tfi\n\t\tresult=\"$result$char\"\n\tdone\n\techo $result | tr \"0123456789\" \"9876543210\" | rev\n}\n\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336984,"user_id":492,"body":"#!\/bin\/bash\naux='\nsub aux {\n    my ($s, $n) = @_;\n    my $res = \"\"; my $i = 0;\n    foreach my $c1 (split \/\/, $s) { \n        my $n1 = ord($c1); \n        if ($n1 >= 65 && $n1 <= 90) { \n            $c1 = chr(65 + ($n1 - 65 + $n) % 26)\n        } else {\n            if ($n1 >= 48 && $n1 <= 57) { \n                $c1 = chr(105 - $n1);\n            }\n        }\n        $c1 = $i % 2 == 0 ? uc($c1) : lc($c1);\n        $res .= $c1;\n        $i++;\n    }\n    $res = reverse $res;\n    return $res;\n}\n$a=aux($ARGV[0], $ARGV[1]);\nprint $a;\n'\nplay_pass () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\"`\n}\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336985,"user_id":null,"body":"#!\/bin\/bash\nplay_pass () {\n    n=\"${2}\"\n    b=\"$(printf \\\\$(printf '%o' $((0x41+n))))\"\n    echo \"${1}\" | tr '[0-9A-Z]' \"[9876543210${b}-ZA-${b}]\" | sed 's\/\\(.\\)\\(.\\)\/\\1\\L\\2\/g' | rev\n}\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336986,"user_id":null,"body":"#!\/bin\/bash\n\nplay_pass () {\n    alpha=\"abcdefghijklmnopqrstuvwxyz\"\n    tr [[:upper:]] [[:lower:]] <<< $1 |\n    sed \"y\/${alpha}\/${alpha:$2}${alpha::$2}\/\" |\n    tr '[0-9]' '[9876543210]' |\n    sed 's\/\\(.\\)\/\\1\n\/g' |\n    awk 'NR % 2 == 1 { print toupper($0)} NR % 2 ==0 { print tolower($0) }' |\n    tr -d '\n'\n}\nplay_pass \"$1\" $2 | rev\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336987,"user_id":1300,"body":"#!\/usr\/bin\/env bash\n\nalphabet=$(echo {a..z} | tr -d ' ')\n\necho $1 | sed 's\/.\/\\L&\/g' \\\n        | sed \"y\/${alphabet}\/${alphabet:$2}${alphabet::$2}\/\" \\\n        | tr '0123456789' '9876543210' \\\n        | grep -o . \\\n        | sed '1~2s\/.\/\\U&\/g' \\\n        | sed '0~2s\/.\/\\L&\/g' \\\n        | tr -d '\n' \\\n        | rev\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336988,"user_id":null,"body":"#!\/bin\/bash\nplay_pass () {\n    # your code\n    a=$(echo {a..z} | tr -d ' ')\n    b=$(echo {A..Z} | tr -d ' ')\n    echo $1 | sed \"y\/$a$b$(echo {0..9})\/${a:$2}${a::$2}${b:$2}${b::$2}$(echo {9..0})\/\" | sed -r \"s\/(.)(.)\/\\U\\1\\L\\2\/g\" | rev\n}\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336989,"user_id":null,"body":"#!\/bin\/bash\nplay_pass () {\n  \n    echo \"$2\" |\n  awk  '\n BEGIN {\n#   double string of the 26 letters of the alphabet\n         BET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n       }\n  {\n\n    OffSet   = $1;\n\n    len = length(Inphrase);\n\n    wrkStr = \"\";\n\n    for(III = 1; III <= len ; III ++)\n      {\n         origLetter = substr(Inphrase,III,1);\n\n         useStr = origLetter;\n\n         idx = index(BET, origLetter);\n\n#  Check to see if the current character is a Alphabetic letter\n         if ( idx > 0 ) \n              {\n                  nIdx = idx + OffSet;\n                  useStr = substr(BET,nIdx,1);\n\n                  if ( III % 2)  \n                    { x = 1 }\n                  else\n                    {\n                        useStr = tolower(useStr);\n                    }\n               }\n\n#  Check for a Digit,  if so use the 9s complement\n         if ( origLetter ~ \/[0-9]\/ )\n           {\n               useStr = 9 - origLetter ;\n           }\n\n# out is reversed, so put the next letter at the head of \n# the string instead of the tail\n\n         wrkStr = useStr wrkStr;\n      }\n\n  }\n\nEND {\n        printf(\"%s\n\", wrkStr);\n\n    }\n\n\n      ' Inphrase=\"$1\";\n\n}\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336990,"user_id":null,"body":"#!\/bin\/bash\nplay_pass () {\n  local s\n  local digits\n  for c in {A..Z}\n  do\n    s=$s$c\n  done\n  for d in {9..0}\n  do\n    digits=$digits$d\n  done\n  echo $1 | tr A-Z ${s:$2}${s:0:$2} | tr 0-9 $digits | sed -E 's\/(.)(.)\/\\1\\l\\2\/g; s\/.*\/\n&\n\/; :x; s\/(\n.)(.*)(.\n)\/\\3\\2\\1\/; tx; s\/\n\/\/g'\n}\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336991,"user_id":null,"body":"#!\/bin\/bash\nplay_pass () {\n  str=\"$1\"\n  n=\"$2\"\n  \n  letters=$(echo {a..z} | tr -d \" \")\n  caps=$(echo {A..Z} | tr -d \" \")\n  shifted_l=\"${letters:${n}}${letters:0:${n}}\"\n  \n  nums=$(echo {0..9} | tr -d \" \")\n  shifted_n=$(echo {9..0} | tr -d \" \")\n  \n  echo \"${str}\" | tr \"${letters}${caps}${nums}\" \"${shifted_l}${shifted_l}${shifted_n}\" | grep -o . | awk '{if(NR%2==1){printf toupper($0)}else{printf tolower($0)}}' | rev\n}\nplay_pass \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336992,"user_id":null,"body":"#!\/bin\/bash\n\nshiftCircular() {\n    lower=abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\n    upper=ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\n    shift=$2\n    echo $1 | tr \"${lower:0:26}\" \"${lower:${shift}:26}\" | tr \"${upper:0:26}\" \"${upper:${shift}:26}\"\n}\n\ncomplementNumber() {\n    numbers=98765432100123456789\n    echo $1 | tr \"${numbers:0:10}\" \"${numbers:10}\"\n}\n\nswitchCase() {\n    password=$1\n    for ((i = 0; i < ${#password}; i++)); do\n        if [ $(($i % 2)) -eq 0 ]; then\n            pAsSwOrD+=$(printf '%s' \"${password:$i:1}\" | tr '[:lower:]' '[:upper:]')\n        else\n            pAsSwOrD+=$(printf '%s' \"${password:$i:1}\" | tr '[:upper:]' '[:lower:]')\n        fi\n    done\n    echo $pAsSwOrD\n}\n\nreverseResult() {\n    echo $1 | rev\n}\n\ngeneratePassword() {\n    # shift each letter by a given number\n    password=$(shiftCircular \"$1\" $2)\n    # replace each digit by its complement to 9\n    password=$(complementNumber \"$password\")\n    # downcase each letter in odd position, upcase each letter in even position\n    password=$(switchCase \"$password\")\n    # reverse the result\n    password=$(reverseResult \"$password\")\n    # print the result\n    echo $password\n}\ngeneratePassword \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"}],"559a28007caad2ac4e000083":[{"id":336993,"user_id":null,"body":"#!\/bin\/bash\nperimeter() {\n  a=1 \n  b=1     \n  for (( i=0; i<$1+1; i++ )) \n  do\n    let array+=$a\n    fn=$((a + b)) \n    a=$b \n    b=$fn \n  done\n\n  echo \"$array * 4\" | bc\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336994,"user_id":492,"body":"#!\/bin\/bash\nfib() {\n    n=$1;f1=1; f2=1\n    for (( i=0;i<n;i++ ))\n    do\n         fn=$((f1+f2))\n         f1=$f2\n         f2=$fn\n    done\n    echo $f1\n}\nperimeter() {\n    f=$(fib $(($1 + 2)))\n    f=$((4 * $f - 4))\n    echo $f\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336995,"user_id":null,"body":"#!\/bin\/bash\n\nperimeter() {\n    local -i sum=0 n1=0 n2=1 fn\n    for (( i=-1; i<=$1; i++ )); do\n      sum+=n1\n      fn=n1+n2\n      n1=$n2\n      n2=$fn\n    done\n    echo $((sum * 4))\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336996,"user_id":null,"body":"#!\/bin\/bash\nperimeter() {\nn=$1\na=0\nb=1\nc=1\nfor ((i=0; i<$n; i++));do\n   a1=$b\n   b1=$(($a+$b))\n   c=$(($c+$b1))\n   a=$a1\n   b=$b1\ndone\nans=$(($c*4))\necho $ans\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336997,"user_id":null,"body":"#!\/bin\/bash\nperimeter() {\n    a=1\n    b=1\n    res=4\n    \n    i=0\n    while [[ \"$i\" -lt $1 ]]; do\n        help=$b\n        b=$((a + b))\n        a=$help\n        res=$((res + 4 * a))\n        i=$((i + 1))\n    done\n    echo $res\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336998,"user_id":null,"body":"#!\/bin\/bash\nperimeter() {\n  fib_array=()\n  \n  fib_0=0\n  fib_1=1 \n  for (( term=0; term<=$1; term++ )); do\n    fib_array[$term]=$fib_1\n    ((fib_1+=fib_0))\n    fib_0=${fib_array[$term]}\n    \n  done\n\n\n  perimeter=0\n  for fib_term in ${fib_array[@]}; do  \n    ((perimeter+=fib_term*4)) \n  done\n  echo $perimeter\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":336999,"user_id":null,"body":"#!\/bin\/bash\nperimeter(){\n   local i=0 j=1 s=1\n   for (( k = 0; k < $1; k++ )) \n   do\n       (( f = i + j)); ((i = j )); ((j = f)); ((s += f ));\n   done\n   echo $(( s * 4 ))\n}\n\n\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":337000,"user_id":null,"body":"#!\/bin\/bash\n\nperimeter() {\n  n=$1; a=1; b=1; p=1\n  for ((i=0; i<n; i++)); do\n    t=$((a+b))\n    a=$b\n    b=$t\n    p=$((p+a))\n  done\n  echo $((4*p))\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:58","updated_at":"2023-01-14 13:24:58"},{"id":337001,"user_id":null,"body":"#!\/bin\/bash\nbc -q <<< \"x=1;y=1;i=0;a=4\n           while (i<$1) {z=x+y;x=y;y=z; a=a+x*4; i=i+1}\n           print a\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337002,"user_id":null,"body":"#!\/bin\/bash\nperimeter() {\n  sum=0\n  phi=\"1.6180339887498948482\"\n  for (( i=1; i<=$1+1; i++ )); do\n    fib=$(bc -l <<< \"(($phi^$i)-((1-$phi)^$i))\/sqrt(5)\")\n    sum=$(bc -l <<< \"$sum+($fib*4)\")\n  done;\n  printf %.0f $sum\n}\nperimeter $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"559b8e46fa060b2c6a0000bf":[{"id":337003,"user_id":53,"body":"diagonal() {\n    n=$1\n    p=$2\n    r=1\n    for (( i=1; i<=$p+1; i++ )); do\n        r=\"$( bc <<< \"$r * ($n - $i + 2) \/ $i\" )\"\n    done\n    echo $r\n}\ndiagonal $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337004,"user_id":null,"body":"#!\/bin\/bash                                \n                                           \ndiagonal() {                               \n    num=$(( $1 + 1 ))                      \n    den0=$(( $1 - $2 ))                    \n    den1=$(( $2 + 1 ))                     \n                                           \n    max=$den0                              \n    min=$den1                              \n                                           \n    if [ $den1 -gt $den0 ]                 \n    then                                   \n        max=$den1                          \n        min=$den0                          \n    fi                                     \n                                           \n    base=$(( $max + 1 ))                   \n                                           \n    num_res=$( seq -s \"*\" $base $num | bc )\n    den_res=$( seq -s \"*\" 1 $min | bc )    \n    res=$( echo \"$num_res\/$den_res\" | bc ) \n                                           \n    echo $res                              \n}                                          \n                                           \ndiagonal $1 $2                             \n                          \n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337005,"user_id":null,"body":"\nbiCo() {\n  n=$1\n  k=$2\n  \n  result=1\n  \n  for i in $(seq 1 $k); do\n    result=$(echo \"$result * ($n - $k + $i) \/ $i\" | bc)\n  done\n  \n  echo $result\n}\n\ndiagonal() {\n  local row=$1\n  local diag=$2\n  biCo $(( row + 1 )) $(( diag + 1 ))\n}\n\ndiagonal $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337006,"user_id":null,"body":"diagonal() {\n  bc <<<'\n  define bin(n,k){\n    if(n<k)return 0\n    if(k==0)return 1\n    x=1\n    for(j=1; j<=k; j++) x=x*(n-j+1)\/j\n    return x\n  }\n  bin('$1'+1, '$2'+1)'\n}\ndiagonal $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337007,"user_id":null,"body":"#diagonal(n,p) = num(n+1,p+1)\n#num(x,y) = yang hui triangle x line y column number\ndiagonal() {\n    # your code\nbc <<EOF\ndefine f (x,y) {\n        if (x < y) return (1);\n        return (f(x-1,y) * x);\n}\n\nn=$1+1\np=$2+1\nf(n,n-p+1)\/f(p,1)\nEOF\n}\ndiagonal $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337008,"user_id":null,"body":"factorial() {\n   n=$1\n   k=$(( $2 + 1  ))\n   total=$n\n   if [ $n -le 1 ]\n   then\n       echo 1\n   else\n       while [ $n -gt $k ]\n       do\n          n_1=$(( $n - 1 ))\n          total=`BC_LINE_LENGTH=0 bc <<< \"$total * $n_1\"`\n          n=$n_1\n       done\n       echo $total\n   fi      \n}\ncoeficiente() {\n  n=$1\n  k=$2\n  if [ $n -eq $k ]\n  then\n     echo 1\n     return\n  fi \n  n_k=$(( $n - $k )) \n  if [ $k -lt $n_k ]\n  then\n      k=$n_k\n      n_k=$2\n  fi\n  f_n_k=`factorial $n $k`\n  f_k=`factorial $n_k 1`\n  echo `BC_LINE_LENGTH=0 bc <<< \"$f_n_k \/ $f_k\"`\n}\ndiagonal() {\n    i=$1\n    j=$2\n    i_1=$(( $i + 1 ))\n    j_1=$(( $j + 1 ))\n    coef=`coeficiente $i_1 $j_1`\n    echo $coef\n}\n\ndiagonal $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337009,"user_id":null,"body":"diagonal() {\n    \n    echo \"define choose(n, k) { \\\n      if (k == 0) {return 1}; return (n * choose(n - 1, k - 1)) \/ k} \\\n      choose($1+1, $2+1)\" | bc\n}\ndiagonal $1 $2\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337010,"user_id":null,"body":"diagonal() {\n  bc <<< \"n = $1; p = $2\n  define fact(x) {\n    if (x<=1) return 1\n    return x*fact(x-1)\n  }\n\n  d = pf = fact(p)\n  for (i=1; i<=n-p; i++) {\n    d = d * (p+i) \/ i\n    sum += d\n  }\n  sum \/ pf + 1\"\n}\ndiagonal $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337011,"user_id":null,"body":"diagonal() {\nfunction nCk() {\n    num=1\n    den=1\n    for ((i=1; i<=$2; i++)); do\n        num=$(echo \"$num * ($1 + 1 - $i)\" | bc)\n        den=$(echo \"$den * $i\" | bc)\n    done\n    bin=$(echo \"$num \/ $den\" | bc)\n    echo $bin\n}\n\nsrow=$1+1\nscol=$2+1\necho $(nCk $srow $scol)\n\n}\ndiagonal $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337012,"user_id":492,"body":"#!\/bin\/bash\nb2 () {                                              \n  echo \"define b2(n, k) {\n    auto temp\n    temp=1;\n    if (k==0) return (1);\n    for(i=1; i<=k; i++) temp=temp*(n+1-i)\/i;\n    return (temp);\n}; b2($1, $2)\" | bc \n}\ndiagonal() {\n    echo $(b2 $(($1 + 1)) $(($2 + 1)))\n}\ndiagonal $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"559ce00b70041bc7b600013d":[{"id":337013,"user_id":null,"body":"#!\/bin\/bash\nfinance() {\n    echo $(($1 * ($1 + 1) * ($1 + 2) \/ 2))\n}\nfinance $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337014,"user_id":null,"body":"#!\/bin\/bash\nfinance() {\n  n=$1\n  echo $(( n * (n+1) * (n+2)\/2 ))   # math saves\n}\nfinance $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337015,"user_id":null,"body":"#!\/bin\/bash\nn=$1\nfor ((i=0;i<n;i++));do\na=$((a+b))\nb=$((b+3))\nsum=$((sum+a+b))\ndone\necho $sum","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337016,"user_id":168,"body":"#!\/bin\/bash\necho $(( $1 * ($1 + 1) * ($1 + 2) \/ 2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337017,"user_id":527,"body":"echo \"$1 * ($1 + 1) * ($1 + 2) \/ 2\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337018,"user_id":527,"body":"bc <<<\"$1 * ($1 + 1) * ($1 + 2) \/ 2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337019,"user_id":null,"body":"#!\/bin\/bash\n\nfinance() {\n    echo \"$1 * ($1 + 1) * ($1 + 2) \/ 2\" |bc\n}\n\nfinance $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337020,"user_id":null,"body":"#!\/bin\/bash\nfinance() {\n    # your code\n    # n=5 5*(1+2+3+4+5+6)=5*21\n    # n=6 6*(1+2+3+4+5+6+7)=6*28\n    # n=7 7*(1+2+3+4+5+6+7+8)=7*36\n    # sum = (1+n+2)*n+1\/2 because n>=1\n    n=$1\n    sum=0\n    sum=$(echo \"(($n+2)*($n+1))\/2\"| bc)\n    #echo $sum\n    sum=$((sum*n))\n    echo $sum\n}\nfinance $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337021,"user_id":50,"body":"#!\/bin\/bash\nfinance() {\n  echo $(($1*$(($1+1))*$(($1+2))\/2))\n}\nfinance $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337022,"user_id":1045,"body":"#!\/bin\/bash\nfinance() { \n  fct=1; cnt=1\n  while (( cnt <= $1 )); do \n    let fct=fct+cnt+1\n    let cnt=cnt+1;\n    done\n  echo $(($fct*$1))\n}\nfinance $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55a29405bc7d2efaff00007c":[{"id":337023,"user_id":492,"body":"#!\/bin\/bash\ngoing() {\n    n=$1; r=1.0; a=1.0\n    for((i=$n;i >= 2;i--)) do\n        a=$(bc <<< \"scale=16; $a \/ $i\")\n        r=$(bc <<< \"scale=16; $r + $a\")\n    done\n    r=$(bc <<< \"scale=6; ($r * 1000000) \/ 1000000\")\n    echo $r\n}\ngoing $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337024,"user_id":null,"body":"#!\/bin\/bash\ngoing() {\n  l=1\n  t=1\n  s=0\n  for i in `seq 1 $1`\n  do\n    t=`echo \"$t * $i\" | bc`\n    s=`echo \"$s + $t\" | bc`\n  done\n  echo \"scale=6;$s\/$t\" | bc\n}\ngoing $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337025,"user_id":2390,"body":"#! \/bin\/bash\n\necho \"Input was: $1\" > \/dev\/stderr\n\nbc <<< \"\nn = $1\nscale = 8\nresult = 1\nfor (i = n; i > 1; i--) {\n    denom = 1\n    for (j = i; j <= n; j++) {\n        denom *= j\n    }\n    term = 1 \/ denom\n    if (term == 0) {\n        break\n    }\n    result += term\n}\nresult\" | xargs printf \"%.8g\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337026,"user_id":53,"body":"#!\/bin\/bash\n#!\/bin\/bash\nawk -v n=$1 'BEGIN {\n  t = 0;\n  m = 1;\n  i = n;\n  while (i > 0) {\n    t = t + (1 \/ m);\n    m = m * i;\n    i = i - 1;\n  }\n  r = int(t * 1000000) \/ 1000000;\n  printf(\"%.6f\", r)\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337027,"user_id":null,"body":"#!\/bin\/bash\nresult=$(echo \"scale=60; n=$1; t=1; s=1; for (i=n;i>1;i--){s\/=i; t+=s;}; scale=6; print t;\" | bc)\n\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337028,"user_id":null,"body":"#!\/bin\/bash\n\ngoing() {\n    # your code\n    u=$((1))\n    for i in $(eval echo {2..$1})\n    do\n      u=$(echo \"scale=6;(1+($u\/$i))\" | bc)      \n    done\n    echo $u\n}\ngoing $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337029,"user_id":null,"body":"#!\/bin\/bash\ngoing() {\n    # your code\n  local n=\"$1\"\n  if ((n <= 0)); then\n    echo 0\n    return\n  fi\n  bc <<< \"\n    result = 1\n    fact = 1\n    for (i = $n; i >= 2; i--) {\n      fact = fact * i\n      scale = 7\n      result += 1 \/ fact\n      scale = 0\n    }\n    print result\n  \"\n}\ngoing $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337030,"user_id":null,"body":"#!\/bin\/bash\n(for ((n=1; n != $1; n++)); do\n  echo \"1\/$(seq $1 -1 \"$(( $1 - n + 1 ))\" | paste -sd\/)\"\ndone && echo 1) | paste -sd+ | bc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337031,"user_id":null,"body":"#!\/bin\/bash\ngoing() {\n        bc -l <<<'define f(x) {\n        if (x <= 1) return (1); return (f(x-1) * x)\n        }\n        define lp(n) {\n        for(i=1;i<=n;i++) sum = sum + f(i)\n                return sum \/ f(n)\n        }\n        scale=6;lp('\"$1\"')'\n}\ngoing $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337032,"user_id":null,"body":"#!\/bin\/bash\ngoing() {\n    # your code\n        bc -q<<- EOF\ni=1\na=1\nsum=0;\nwhile (i <= $1) {\na=a*i\nsum+=a\ni+=1\n}\nscale=6\nprint sum\/a\nEOF\n}\ngoing $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55a70521798b14d4750000a4":[{"id":337033,"user_id":527,"body":"echo \"Hello, $1 how are you doing today?\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337034,"user_id":null,"body":"#!\/bin\/bash\n\n# Simply greet the user by given name.\n\nfunction greet {\n  user_name=$1\n \n  [[ $user_name =~ ^[a-zA-Z]+$ ]] && echo \"Hello, $user_name how are you doing today?\" || \\\n  echo \"Name should consist of letters only.\"\n\n  return 0\n}\n\ngreet $1\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337035,"user_id":null,"body":"#!\/bin\/bash\necho \"Hello, $1 how are you doing today?\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337036,"user_id":null,"body":"#!\/bin\/bash\nvarname=$1\necho \"Hello, $varname how are you doing today?\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337037,"user_id":null,"body":"#!\/bin\/bash\n#your code here\necho -e \"Hello, $1 how are you doing today?\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337038,"user_id":null,"body":"#!\/bin\/bash\n#your code here\nfun(){\n  echo \"Hello, $1 how are you doing today?\"\n}\n\nfun $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337039,"user_id":null,"body":"#!\/bin\/bash\n\ngreating()\n{\n  echo \"Hello, $1 how are you doing today?\"\n}\n \n\ngreating $1\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337040,"user_id":null,"body":"#!\/bin\/bash\nmy_func(){\n echo \"Hello, $1 how are you doing today?\"\n}\n\nmy_func $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337041,"user_id":null,"body":"#!\/bin\/bash\nn=$1\necho \"Hello, $n how are you doing today?\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337042,"user_id":null,"body":"#!\/bin\/bash\n#your code here\n\nfunction greet() {\n    echo \"Hello, ${1} how are you doing today?\"\n}\n\n# read -p \"Input name: \" NAME\n\ngreet ${1}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55aa075506463dac6600010d":[{"id":337043,"user_id":null,"body":"awk -v a=$1 -v b=$2 'BEGIN {\n\tprintf \"[\"\n\tfor (n = a; n <= b; n++)\n\t{\n\t\tsum = 0\n\t\ti = 0\n\t\tm = sqrt(n)\n\t\t\n\t\twhile (++i < m)\n\t\t\tif (n % i == 0)\n\t\t\t\tsum += i ^ 2 + (n \/ i) ^ 2\n\n\t\tif (int(m) == m)\n\t\t\tsum += n\n\n\t\tsq = sqrt(sum)\n\t\tif (int(sq) == sq)\n\t\t\tprintf \"[%d, %d], \", n, sum\n\t}\n}' | sed -r 's\/,* *$\/]\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337044,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my ($m, $n) = @_;\n    my $res = \"[\"; my $i = $m;\n    while ($i <= $n) {\n        my $tmp = 0;\n        my $j = 1;\n        while ($j <= $i) {\n            if ($i % $j == 0) { $tmp += $j * $j; }\n            $j++;\n        }\n        my $a = sqrt($tmp);\n        if (int($a) == $a) { $res .= \"[$i, $tmp], \"; }\n        $i++;\n    }\n    return ($res eq \"[\" ? $res.\"]\" : substr($res, 0, -2).\"]\");\n}\n$a=aux($ARGV[0], $ARGV[1]);\nprint $a;\n'\nlist_squared () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\"`\n}\nlist_squared \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337045,"user_id":53,"body":"#!\/bin\/bash\nlist_squared () {\n  awk -v a=$1 -v b=$2 'BEGIN {\n    printf \"[\"\n    for (n = a; n < b; n++) {\n      k = 0\n      for (i = 1; i <= n; i++) { \n        if (n%i == 0) { \n          k += i * i;\n        }\n      }\n      sq = sqrt(k);\n      if (sq == int(sq)) {\n        printf \"[%d, %d], \", n, k; \n      }\n    }\n  }' | sed -r 's\/,* *$\/]\/'\n}\nlist_squared \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337046,"user_id":null,"body":"#!\/bin\/bash\nawk -vm=\"$1\" -vn=\"$2\" 'BEGIN{printf \"[\"; for (j=m; j<=n; ++j) {s=0; for (i=1; i<=sqrt(j); ++i) if (j%i==0) s+=i*i+(i*i==j?0:j*j\/i\/i); if (sqrt(s)%1==0) {printf \"%s[%d, %d]\",c?\", \":\"\",j,s; c=1}} print \"]\"}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337047,"user_id":null,"body":"#!\/bin\/bash\nbc <<EOF\n    print \"[\"\n    first=1\n    for (n=$1; n<=$2; n++) {\n      s=0;i=1\n      for (; i*i < n; i++) {\n        if (n%i == 0) {\n          ni = n \/ i\n          s+= ni*ni + i*i\n        }\n      }\n      if (n==i*i) {\n        s+=i*i\n      }\n      s16=s%16;\n      if (s16==0 || s16==1 || s16==4 || s16==9) {\n        sqs=sqrt(s)\n        if(sqs*sqs==s) {\n          if (first==0) print \", \"\n          print \"[\", n, \", \", s, \"]\"\n          first=0\n        }\n      }\n    }\n    print \"]\"\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337048,"user_id":null,"body":"#!\/bin\/bash\nlist_squared () {\n  BC_LINE_LENGTH=0 bc <<<'\n  define div(n) { auto s\n    for(i=1; i<=sqrt(n); i++) {\n      if(!n%i) {\n        if(n\/i != i) s+=(n\/i)^2\n        s+=i^2\n      }\n    }\n  return s\n  }\n  print \"[\"\n  for(n='$1'; n<='$2'; n++) {\n    r=div(n)\n    if(r == sqrt(r)^2) print \"[\",n,\", \",r,\"], \"\n  }\n  print \"]\"'\n}\nlist_squared \"$1\" \"$2\"  | sed 's\/, ]$\/]\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337049,"user_id":null,"body":"#!\/bin\/bash\nBC_LINE_LENGTH=0 bc<<EOF\ndefine lq(a,prefix){\n  j=sqrt(a)\n  s=0\n  for(i=1;i<=j;i+=1) {\n    if(a%i==0) {\n      s+=i^2;\n      s+=(a\/i)^2;\n    }\n  }\n  if(j^2==a) s-=a;\n  if((sqrt(s))^2==s) {\n    if(prefix>0) {print \", \";}\n    print \"[\",a,\", \",s,\"]\";\n    return 1;\n  }\n  return 0;\n}\n\nm=$1\nn=$2\no=0\nprint \"[\";\nfor(x=m;x<=n;x++) {\n  o+=lq(x,o);\n}\nprint \"]\";\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337050,"user_id":null,"body":"#!\/bin\/bash\nlist_squared () {\n  awk -v l=$1 -v u=$2 'BEGIN {\n    printf \"[\" # ensures a null result also gets piped forward\n    for (n = l; n < u; n++) {\n      sum = 0\n      for (i = 1; i <= n; i++) { \n        if (n%i == 0) sum += i^2;\n      }\n      sq = sqrt(sum);\n      if (sq == int(sq)) printf \"[%d, %d], \", n, sum; \n    }\n  }' | sed -r 's\/,* *$\/]\/'\n}\nlist_squared \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337051,"user_id":null,"body":"#!\/bin\/bash\n\nexport BC_LINE_LENGTH=0\nread -r -d '' bcprogram <<EOF\ndefine sqsumofdiv(number) {\n        auto sqrsum, sqr, i\n        sqrsum=1\n        if ( number == 1 ) {\n                return sqrsum\n        }\n        sqr = sqrt(number)\n        if ( sqr*sqr == number ) {\n                sqrsum += number\n                sqr -= 1\n        }\n        for (i=2; i<=sqr; i++) {\n                if ( (number % i) == 0 ) sqrsum += (i^2 + (number\/i)^2)\n        }\n        sqrsum += number^2\n        return sqrsum\n}\n\nsep=0\nfor ( i=m; i<=n; i++) {\n        sqrsum = sqsumofdiv(i)\n        sqr = sqrt(sqrsum)\n        if ( sqr*sqr == sqrsum ) {\n                if (sep) print \", \"\n                print \"[\", i, \", \", sqrsum, \"]\"\n                sep=1\n        }\n}\nEOF\n\necho -n \"[\"\nseparator=\"\"\necho -n $(bc <<< \"m=$1\nn=$2\n$bcprogram\");\necho \"]\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55ab4f980f2d576c070000f4":[{"id":337052,"user_id":null,"body":"#!\/bin\/bash\ngame() {\n    (( $1 % 2 )) && echo \"$(( $1 ** 2 )), 2\" || echo $(( $1 ** 2 \/ 2 ))\n}\n\ngame $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337053,"user_id":492,"body":"#!\/bin\/bash\ngame() {\n    r=$(bc <<< \"scale=0; $1 % 2\")\n    if [[ $r -eq 0 ]]\n    then\n        res=$(( $1 * $1 \/ 2 ))\n        echo $res\n    else\n        res=(`expr $1 * $1`, 2)\n        echo ${res[*]}\n    fi\n}\ngame $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337054,"user_id":492,"body":"#!\/bin\/bash\ngame() {\n    r=$(bc <<< \"scale=0; $1 % 2\")\n    if [[ $r -eq 0 ]]\n    then\n        res=$(( $1 * $1 \/ 2 ))\n        echo $res\n    else\n        res=(`expr $1 * $1`, 2)\n        echo ${res[*]}\n    fi\n}\ngame $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337055,"user_id":null,"body":"#!\/bin\/bash\ngame() {\n  ((n = $1 ** 2))\n  ((n % 2 == 0)) && echo $((n \/ 2)) || echo \"${n}, 2\"\n}\n\ngame $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337056,"user_id":2390,"body":"#!\/bin\/bash\n\ngame() {\n  if (($1 % 2 == 0)); then\n    bc <<< \"($1 ^ 2) \/ 2\"\n  else\n    bc <<< \"print $1 ^ 2\"; echo \", 2\"\n  fi\n}\n\ngame $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337057,"user_id":null,"body":"#!\/bin\/bash\nsum_of_series() {\n  echo \"(1 + $1) * $1 \/ 2;\" | bc\n}\n\ngame() {\n  result=$(echo $(sum_of_series $(($1 - 1)))\" + 0.5 * $1\" | bc)\n  if [[ $result == *.5 ]]; then\n    result=$(echo \"$result * 2\" | bc)\n    echo ${result%.*}\", 2\"\n  else\n    echo ${result%.*}\n  fi\n}\n\ngame $1\n\n# n=x\n# 1=0.5\n# 2=2     >+1.5  +1.5\n# 3=4.5   >+2.5  +4\n# 4=8     >+3.5  +7.5\n# 5=12.5  >+4.5  +12\n# 6=18    >+5.5  +17.5\n# \n# 1+2+3+4+5 = (1+5)*5\/2 = sum(5)\n# \n# x=sum(n-1)+0.5*n\n# \n# 1\/2  2\/3  3\/4  4\/5  5\/6  6\/7\n# 1\/3  2\/4  3\/5  4\/6  5\/7  6\/8\n# 1\/4  2\/5  3\/6  4\/7  5\/8  6\/9\n# 1\/5  2\/6  3\/7  4\/8  5\/9  6\/10\n# 1\/6  2\/7  3\/8  4\/9  5\/10 6\/11\n# 1\/7  2\/8  3\/9  4\/10 5\/11 6\/12","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337058,"user_id":null,"body":"#!\/bin\/bash\ngame() {\n  echo $(bc <<< \"if ($1%2==0) {$1*$1\/2} else {print $1*$1, \\\", 2\\\";}\")\n}\ngame $1\n\n# 29.11.2021","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337059,"user_id":53,"body":"#!\/bin\/bash\n#!\/bin\/bash\nbc <<EOF\n    n=$1\n    if (n % 2 == 0) {\n        print (n * n \/ 2);\n    } else {\n        print (n * n), \", 2\";\n    }\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337060,"user_id":null,"body":"#!\/bin\/bash\n\nif [ $((($1*$1)%2)) != 0 ]\nthen\n\techo $(($1*$1)), 2\t\nelse\n\techo $((($1*$1)\/2))\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337061,"user_id":null,"body":"#!\/bin\/bash\ngame() {\n  NUM=$1\n  if [ $((NUM%2)) -eq 0 ]\n  then\n    echo `awk -v num=$1 'BEGIN { printf \"%.0f\", ( (num * (num - 1))\/2 ) + (num \/ 2) }'`\n  else\n    NUMER=`awk -v num=$1 'BEGIN { printf \"%.0f\",  ( ((num * (num - 1))\/2 ) + (num \/ 2)) * 2 }'`\n    echo $NUMER, 2\n  fi\n}\n\ngame $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55b3425df71c1201a800009c":[{"id":337062,"user_id":null,"body":"#!\/bin\/bash\n\nto_int() {\n  local h=\"$(echo $1 | cut -d '|' -f 1)\"\n  local m=\"$(echo $1 | cut -d '|' -f 2)\"\n  local d=\"$(echo $1 | cut -d '|' -f 3)\"\n  echo \"$(( h * 3600 + m * 60 + d ))\"\n}\n\nfrom_int() {\n  local num=$1\n  local d=\"$(( $num % 60 ))\"\n  num=\"$(( $num \/ 60 ))\"\n  local m=\"$(( $num % 60 ))\"\n  local h=\"$(( $num \/ 60 ))\"\n  printf \"%02d|%02d|%02d\" ${h} ${m} ${d}\n}\n\nstat_assoc () {\n  # your code\n  IFS=', ' read -r -a array <<< \"$1\"\n  local len=\"${#array[@]}\"\n  local sum=0\n  for i in $(seq 0 \"$(( ${len} - 1 ))\" ); do\n    array[\"${i}\"]=\"$(to_int ${array[$i]})\"\n    sum=\"$(( $sum + ${array[$i]} ))\"\n  done\n  IFS=$'\n'\n  local sorted=($(sort -g <<<\"${array[*]}\"))\n  \n  local range=\"$(( ${sorted[\"$(( ${len} - 1 ))\"]} - ${sorted[0]} ))\"\n  local avg=$(( $sum \/ $len ))\n  if [[ \"$(( $len % 2 ))\" == 0 ]]; then\n    local median=$(( (${sorted[\"$(( ${len} \/ 2))\"]} + ${sorted[\"$(( ${len} \/ 2 - 1 ))\"]}) \/ 2 ))\n  else\n    local median=$(( ${sorted[\"$(( ${len} \/ 2))\"]} ))\n  fi\n  echo \"Range: $(from_int $range) Average: $(from_int $avg) Median: $(from_int $median)\"\n}\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337063,"user_id":2390,"body":"#! \/bin\/bash\n\necho -n \"$1\" | mawk '\nBEGIN {\n    RS=\", *\"; \n    FS=\"|\"\n} \n{ \n    print $1 * 3600 + $2 * 60 + $3 \n}'  | sort --numeric-sort \\\n    | mawk '\n\n# Convert seconds into hours|minutes|seconds\nfunction hms(s) {\n    h = int(s\/3600)\n    s -= h * 3600\n    m = int(s\/60)\n    s -= m * 60\n    return sprintf(\"%02d|%02d|%02d\", h, m, s) \n}\n\nBEGIN {\n    lowest = -1\n}\n\n{\n    total += $1\n    count += 1\n    results[count] = $1 \n    if ($1 < lowest || lowest < 0)\n        lowest = $1\n    if ($1 > highest)\n        highest = $1\n}\n\nEND {\n    if (count % 2)\n        median = results[int(count \/ 2) + 1]\n    else \n        median = int((results[count \/ 2] + results[count \/ 2 + 1]) \/ 2)\n    print \"Range:\", hms(highest - lowest), \n            \"Average:\", hms(total \/ count), \n            \"Median:\", hms(median)\n}'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337064,"user_id":null,"body":"#!\/bin\/bash\nstat_assoc () {\n  echo $1 | awk '\n  split($0, times) {\n    for (i in times) {\n      param = times[i]\n      split(param,timeUnits,\"|\")\n      seconds[i] = timeUnits[1] * 3600 + timeUnits[2] * 60 + timeUnits[3]\n      print seconds[i]\n    }\n  }\n  ' | sort -n | awk '\n  function getEqualArrayMedian() {\n    twoLessEntryNr = NR - 2\n    firstMedianI = twoLessEntryNr \/ 2 + 1\n    secondsMedianI = NR \/ 2 + 1\n    summedMedians = allSeconds[firstMedianI] + allSeconds[secondsMedianI]\n    median = summedMedians \/ 2\n  }\n\n  function getOddArrayMedian() {\n    oneLessEntryNr = NR - 1\n    medianI =  oneLessEntryNr \/ 2 + 1\n    median = allSeconds[medianI]\n  }\n\n  function printTotalSeconds(totalSeconds) {\n    hours = totalSeconds \/ 3600\n    printf(\"%02d|\", hours)\n    restOfHours = totalSeconds % 3600\n    minutes = restOfHours \/ 60\n    printf(\"%02d|\", minutes)\n    seconds = totalSeconds % 60\n    printf(\"%02d\", seconds)\n  }\n\n  function printRange() {\n    printf(\"%s\", \"Range: \")\n    range = allSeconds[NR] - allSeconds[1]\n    printTotalSeconds(range)\n  }\n\n  function printAverage() {\n    printf(\"%s\", \" Average: \")\n    average = total \/ NR\n    printTotalSeconds(average)\n  }\n\n  function getMedian() {\n    moduloNR = NR % 2\n    if (moduloNR == 0) {\n      getEqualArrayMedian()\n    }\n    else {\n      getOddArrayMedian()\n    }\n  }\n\n  {\n    allSeconds[NR] = $0\n    total = total + allSeconds[NR]\n  }\n\n  END{\n    printRange()\n    printAverage()\n    printf(\"%s\", \" Median: \")\n    getMedian()\n    printTotalSeconds(median)\n    print \"\"\n  }\n  '\n}\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337065,"user_id":1045,"body":"#!\/bin\/bash\nsttToSec(){ #convert stat_assoc to seconds\n  declare -a arr=( $(echo $1|tr \"m\" \" \") )\n  echo $(( ${arr[0]}*3600 + ${arr[1]}*60 + ${arr[2]} ))\n}\nsecToStt(){ #convert seconds to stat_assoc\n  tot=$1; h=$((tot\/3600)); m=$(( (tot-3600*h)\/60 )); s=$(( tot%60 ))\n  printf \"%02d|%02d|%02d\" $h $m $s\n}\n\n\nstat_assoc () {\n    declare -a stts=( $(echo \"$1\"|tr -d ','|tr \"|\" \"m\") )\n    len=${#stts[*]}; sumt=0; cnt=0 \n    \n    #map the stat_assocs array to seconds, sum the total\n    for i in ${stts[@]}; do\n      var=$(sttToSec $i)\n      sumt=$((sumt + var))\n      stts[$cnt]=$var\n      cnt=$((cnt+1))\n      done\n    \n    #sort the results\n    IFS=$'\n'; stts=( $(echo \"${stts[*]}\"|sort -n) ); unset IFS\n    \n    #calculations\n    rng=$(secToStt $((${stts[-1]}-${stts[0]})) )\n    avg=$(secToStt $(($sumt\/$len)) )\n    md1=$((len\/2)); md2=$((md1-1))\n    ((len%2 == 1)) && mdm=$(secToStt ${stts[$md1]} )\n    ((len%2 == 0)) && mdm=$(secToStt $(( (${stts[$md1]}+${stts[$md2]})\/2 )) )\n    \n    #results\n    echo \"Range: $rng Average: $avg Median: $mdm\"    \n}\n\n\n\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337066,"user_id":null,"body":"#!\/bin\/bash\n\nstat_assoc() {\n  local IN           # the input string with whitespace removed\n  declare -a times   # array of input data in the form hh|mm|ss\n  declare -a data    # array of input data, converted to seconds\n  declare -i datalen # number of values in data\n  declare -i min     # smallest value in $data\n  declare -i max     # highest value in data\n  declare -i sum     # sum of all values in data\n  declare -i avg     # average of all values in data\n  declare -i median  # median of data\n  declare -i range   # range of data\n  min=999999999\n  max=0\n  sum=0\n  IN=\"${1\/\/ \/}\"\n  IFS=',' read -ra times <<<\"$IN\"\n  for time in \"${times[@]}\"; do\n    secs=$(hms_to_seconds \"$time\")\n    if [ \"$secs\" -gt $max ]; then\n      max=\"$secs\"\n    fi\n    if [ \"$secs\" -lt $min ]; then\n      min=\"$secs\"\n    fi\n    sum=$((sum += secs))\n    data=(\"${data[@]}\" \"$secs\")\n  done\n\n  datalen=${#data[@]}\n  range=$((max - min))\n  avg=$(echo \"$sum \/ $datalen\" | bc)\n\n  # sort the data array (needed to find median)\n  IFS=$'\n' data=($(sort -n <<<\"${data[*]}\"))\n\n  if [ $((datalen % 2)) -eq 0 ]; then\n    median=$(echo \"(${data[datalen \/ 2]} + ${data[(datalen \/ 2) - 1]}) \/ 2\" | bc)\n  else\n    median=\"${data[datalen \/ 2]}\"\n  fi\n\n  printf \"Range: %s Average: %s Median: %s\n\" \"$(seconds_to_hms \"$range\")\" \"$(seconds_to_hms \"$avg\")\" \"$(seconds_to_hms \"$median\")\"\n}\n\nhms_to_seconds() {\n  IFS='|' read -ra HMS <<<\"$1\"\n  if [ ${#HMS[@]} -ne 3 ]; then\n    echo \"unexpected time format: $1\"\n    exit 1\n  fi\n\n  hours=\"${HMS[0]}\"\n  minutes=\"${HMS[1]}\"\n  seconds=\"${HMS[2]}\"\n\n  allsecs=$((hours * 60 * 60 + minutes * 60 + seconds))\n\n  echo \"$allsecs\"\n}\n\nseconds_to_hms() {\n  declare -i hours\n  declare -i minutes\n  declare -i seconds\n  declare -i _rest\n\n  IN=\"$1\"\n  hours=$((IN \/ 3600))\n  _rest=$((IN % 3600))\n  minutes=$((_rest \/ 60))\n  seconds=$((_rest % 60))\n\n  printf \"%02d|%02d|%02d\n\" $hours $minutes $seconds\n}\n\nstat_assoc \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337067,"user_id":492,"body":"#!\/bin\/bash\nstat_assocs='\nsub tosec {\n    ($r = shift) =~ s\/(\\d+)\\|(\\d+)\\|(\\d+)\/$1*3600+$2*60+$3\/e;\n    return int($r);\n}\nsub median {\n    my @vals = @_; my $len = @vals;\n    if ($len % 2) {\n        return $vals[int($len \/ 2)];\n    } else {\n        return ($vals[int($len \/ 2) - 1] + $vals[int($len \/ 2)]) \/ 2;\n    }\n}\nsub toStr {\n    my $n = shift;\n    sprintf(\"%.2d\", int($n\/3600)).\"|\".sprintf(\"%.2d\", int($n%3600\/60)).\"|\".sprintf(\"%.2d\", int($n%60));\n}\nuse List::Util qw(sum);\nsub stat_assocs {\n    my $s = shift;\n    my @a = split \/, \/, $s;\n    my @u = sort {$a <=> $b} map(tosec($_), @a);\n    print Dumper \\@u;\n    my $avg = toStr(sum(@u)\/@u);\n    my $range = toStr($u[-1] - $u[0]);\n    my $med = toStr(median(@u));\n    return \"Range: $range Average: $avg Median: $med\n\";\n}\n$a=stat_assocs($ARGV[0]);\nprint $a;\n'\nstat_assoc () {\n    echo `perl -e \"$stat_assocs\" \"$1\"`\n}\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337068,"user_id":2390,"body":"#! \/bin\/bash\n\necho -n \"$1\" | mawk '\n# Convert seconds into hours|minutes|seconds\nfunction hms(s) {\n    h = int(s\/3600)\n    s -= h * 3600\n    m = int(s\/60)\n    s -= m * 60\n    return sprintf(\"%02d|%02d|%02d\", h, m, s) \n}\n\n# Return the median of a series of space-separated numbers\nfunction median(num_str) {\n    newline = \"\\x27\\\n\\x27\"\n    sortnums = \"tr [:blank:] \" newline \" | sort -n | tr \" newline \" \\\" \\\"\"\n    (\"echo \\\"\" num_str \"\\\" | \" sortnums) | getline sorted_str\n    FS = \" \"\n    len = split(sorted_str, sorted)\n    if (len % 2) {\n        return sorted[int(len \/ 2) + 1]\n    } else {\n        return int((sorted[len \/ 2] + sorted[len \/ 2 + 1]) \/ 2)\n    }\n}\n\nBEGIN {\n    RS = \", *\"\n    FS = \"|\"\n    lowest = -1\n}\n\n{\n    seconds = $1 * 3600 + $2 * 60 + $3\n    total += seconds\n    count += 1\n    results = results \" \" seconds\n    if (seconds < lowest || lowest < 0)\n        lowest = seconds\n    if (seconds > highest)\n        highest = seconds\n}\n\nEND {\n    print \"Range:\", hms(highest - lowest), \n            \"Average:\", hms(total \/ count), \n            \"Median:\", hms(median(results))\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337069,"user_id":null,"body":"#!\/bin\/bash\nstat_assoc () {\n    num=`echo $1 | awk -F \",\" '{print NF}'` \n    i=0\n    sum=0\n    \n    ch_time () {\n    let a=$1%60\n    let b=$1\/60%60\n    let c=$1\/3600\n    ss=`printf \"%02d\n\" $a`\n    mm=`printf \"%02d\n\" $b`\n    hh=`printf \"%02d\n\" $c`\n    echo \"$hh|$mm|$ss\"\n    }\n    \n    \n    for time in `echo $1 | sed s\/,\/\/g`\n    do\n      hh=`echo $time | awk -F'|' '{print$1}'`\n      mm=`echo $time | awk -F'|' '{print$2}'`\n      ss=`echo $time | awk -F'|' '{print$3}'`\n      let time_list[i]=hh*3600+mm*60+ss\n      let sum=sum+time_list[i]\n      let i++\n    done\n\n    new_time_list=(`echo ${time_list[*]}| tr ' ' '\n'|sort -n`)\n    #echo ${new_time_list[*]}\n    let range=new_time_list[-1]-new_time_list[0]\n    let average=sum\/num\n    let rem=num%2\n    \n    if [ $rem -eq 0 ];then\n      let mid=num\/2-1\n      let mid_2=num\/2\n      let median=(${new_time_list[mid]}+${new_time_list[mid_2]})\/2\n    else\n      let mid=$num\/2\n      let median=${new_time_list[mid]}\n    fi\n\n    Range=`ch_time $range`\n    Average=`ch_time $average`\n    Median=`ch_time $median`\n    echo \"Range: $Range Average: $Average Median: $Median\"   \n}\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337070,"user_id":null,"body":"#!\/bin\/bash\nstat_assoc () {\n  source=$1\n  for element in $source; do\n    element=$(echo $element | sed 's\/,\/\/g')\n    IFS=\\| read -r h m s <<<\"$element\"; unset IFS\n    n_seconds=$((($h * 60 + $m) * 60 + $s))\n    time_s+=(${n_seconds})\n  done\n  IFS=$'\n' time_s=($(sort -n <<<\"${time_s[*]}\")); unset IFS\n  array_median=$(echo ${#time_s[@]} \/ 2 | bc) \n  if [[ $(echo \"scale=1; ${#time_s[@]} \/ 2\" | bc ) =~ [0-9]+\\.5 ]]; then\n    median=$(date +%H\\|%M\\|%S --date @$(echo ${time_s[${array_median}]}))\n  else\n    array_median_before=$(echo \"$array_median - 1\" | bc)\n    median_seconds=$(echo \"(${time_s[$array_median_before]} + ${time_s[$array_median]}) \/ 2\" | bc)\n    median=$(date +%H\\|%M\\|%S --date @$(echo $median_seconds))\n  fi\n\n  range=$(date +%H\\|%M\\|%S --date @$(echo ${time_s[-1]} - ${time_s[0]} | bc ))\n  average=$(date +%H\\|%M\\|%S --date @$(echo $(echo \\(${time_s[*]} | sed 's\/\\s\/ + \/g')\\) \/ ${#time_s[@]} | bc ))\n  \n  echo \"Range: $range Average: $average Median: $median\"\n}\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337071,"user_id":null,"body":"#!\/bin\/bash\nstat_assoc () {\n  ARRAY=(${1\/\/, \/ })\n  FIRSTS=()\n  SECONDS=()\n  THIRDS=()\n  for PARAMS in \"${ARRAY[@]}\"\n  do\n    PARAM_ARRAY=(${PARAMS\/\/|\/ })\n    SECONDS+=(`to_seconds ${PARAM_ARRAY[*]}`)\n  done\n  SECONDS_SORTED=(`sort_array ${SECONDS[*]}`)\n  RANGE=`range ${SECONDS_SORTED[*]}`\n  AVERAGE=`average ${SECONDS_SORTED[*]}`\n  MEDIAN=`median ${SECONDS_SORTED[*]}`\n  echo `join_result ${RANGE} ${AVERAGE} ${MEDIAN}`\n}\nrange () {\n  ARRAY=(${@})\n  MIN=${ARRAY[0]}\n  LENGTH=${#ARRAY[*]}\n  MAX=${ARRAY[$((LENGTH-1))]}\n  echo $((${MAX}-${MIN}))\n}\naverage () {\n  ARRAY=(${@})\n  LENGTH=${#ARRAY[*]}\n  SUM=0\n  for SECOND in ${ARRAY[@]}\n  do\n    SUM=$((${SECOND}+${SUM}))\n  done\n  echo $((${SUM}\/${LENGTH}))\n}\nmedian () {\n  ARRAY=(${@})\n  LENGTH=${#ARRAY[*]}\n  HALF=$((${LENGTH}\/2))\n  DOUBLE_HALF=$((${HALF}*2))\n  if test ${LENGTH} -eq ${DOUBLE_HALF};then\n    FIRST=$((${ARRAY[${HALF}-1]}))\n    SECOND=$((${ARRAY[${HALF}]}))\n    echo $(((${FIRST}+${SECOND})\/2))\n  else\n    echo $((${ARRAY[HALF]}))\n  fi\n}\nsort_array () {\n  ARRAY=(${@})\n  printf \"%s\n\" \"${ARRAY[@]}\" | sort -n\n}\nto_seconds() {\n  HOUR=`to_number $1`\n  MINUTE=`to_number $2`\n  SECOND=`to_number $3`\n  echo ${HOUR}*3600+${MINUTE}*60+${SECOND}\n}\nto_number() {\n  echo $(($1))\n}\njoin_result() {\n  RANGE=${1}\n  AVERAGE=${2}\n  MEDIAN=${3}\n  RESULT=\"Range: \"\n  RESULT+=`to_time ${RANGE}`\n  RESULT+=\" Average: \"\n  RESULT+=`to_time ${AVERAGE}`\n  RESULT+=\" Median: \"\n  RESULT+=`to_time ${MEDIAN}`\n  echo ${RESULT}\n}\nto_time() {\n  MINUTE_SECOND=$((${1}%3600))\n  HOUR=$(((${1}-${MINUTE_SECOND})\/3600))\n  SECOND=$((${MINUTE_SECOND}%60))\n  MINUTE=$(((${MINUTE_SECOND}-${SECOND})\/60))\n  RESULT=`padding_number ${HOUR}`\n  RESULT+=\"|\"\n  RESULT+=`padding_number ${MINUTE}`\n  RESULT+=\"|\"\n  RESULT+=`padding_number ${SECOND}`\n  echo ${RESULT}\n}\npadding_number() {\n  printf '%02d' $1\n}\n\nstat_assoc \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55b4d87a3766d9873a0000d4":[{"id":337072,"user_id":53,"body":"#!\/bin\/bash\n\n(bc <<EOF\na = $1\nb = $2\nm = a\nn = b\nif (b < a) { m = b; n = a }\nfor (i = m; i <= n; i++) {\n  if ((i % 9 == 1) && (i % 7 == 2)) {\n    print \"[M: \", i, \" B: \", i \/ 7, \" C: \", i \/ 9, \"]\"\n  }\n}\nEOF\n) | tr -d '\\\\\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337073,"user_id":53,"body":"# howmuch returns a string\n#!\/bin\/bash\nawk -v a=$1 -v b=$2 'BEGIN {\n  m = (a < b) ? a : b;\n  n = (a > b) ? a : b;\n  for (i = m; i <= n; i++) {\n    if ((i % 9 == 1) && (i % 7 == 2)) {\n      printf(\"[M: %d B: %d C: %d]\", i, i \/ 7, i \/ 9);\n    }\n  }\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337074,"user_id":null,"body":"# howmuch returns a string\n# first bash script!\n#!\/bin\/bash\nhowmuch() {\n    max=$(($1>$2 ? $1 : $2))\n    min=$(($1<$2 ? $1 : $2))\n    arr=()\n    for((i=min; i <= max; i++)); do\n        if [ $((i % 63)) -eq \"37\" ]; then\n            break\n        fi\n    done\n    for(( ; i <= max; i += 63)); do\n        arr+=($i)\n    done\n    string=\"\"\n    for m in \"${arr[@]}\"; do\n        string+=\"[M: $m B: $((m \/ 7)) C: $((m \/ 9))]\"\n    done\n    echo $string\n}\nhowmuch $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337075,"user_id":null,"body":"# howmuch returns a string\n#!\/bin\/bash\nhowmuch() {\n    low=$1\n    high=$2\n    if(($1>$2));then\n        low=$2\n        high=$1\n    fi\n    for i in $(seq $low $high)\n    do\n        if(($((i%9))==1&&$((i%7))==2))\n        then\n            printf \"[M: %d B: %d C: %d]\" $i $((i\/7)) $((i\/9))\n        fi\n    done\n}\nhowmuch $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337076,"user_id":null,"body":"#!\/bin\/bash\n\nhowmuch() {\n    if [ $2 -lt $1 ]\n       then\n          i=$2\n          max=$1\n       else\n          i=$1\n          max=$2\n    fi\n\n   for ((i=$i;i<=$max;i+=1))\n       do\n         b=$(($i%7))\n         c=$(($i%9))\n         if [ $c -eq 1 ] && [ $b -eq 2 ]\n            then\n                B=$(($i\/7))\n                C=$(($i\/9))\n                RESPUESTA=$(echo \"[M: $i B: $B C: $C]\")\n                RESULTADO=\"$RESULTADO$RESPUESTA\"\n         fi\n       done\n   echo $RESULTADO\n}\nhowmuch $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337077,"user_id":2390,"body":"#! \/bin\/bash\n\nm=$1\nn=$2\n\nif ((m>n)); then\n    p=$m\n    m=$n\n    n=$p\nfi\n\n# The lowest f such that f = 9c + 2 and f > m\nstart=$(( (((m-2)\/9 + 1) * 9) + 1 ))\n\nfor i in $(seq $start 9 $n); do\n    if (((i-2)%7 == 0)); then\n        echo -n \"[M: $i B: $(((i-2)\/7)) C: $(((i-1)\/9))]\"\n    fi\ndone\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337078,"user_id":null,"body":"# howmuch returns a string\n#!\/bin\/bash\nhowmuch() {\nlow=$(($1 > $2 ? $2 : $1))\nhigh=$(($1 > $2 ? $1 : $2))\nfor ((i = $low ; i <= $high; i++));\ndo\n  val=$(($i%9))\n  val2=$(($i%7))\n  if [ $val == 1 ] && [ $val2 == 2 ]\n    then\n      output=\"$output[M: $i B: $(($i\/7)) C: $(($i\/9))]\"\n  fi\ndone\necho $output\n}\nhowmuch $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337079,"user_id":null,"body":"# howmuch returns a string\n#!\/bin\/bash\nhowmuch() {\n    a=\"${1}\";b=\"${2}\"\n    # Tests to find out higher\/lower value\n    low=$((a<b?a:b))\n    high=$((a<b?b:a))\n    for ((i=low; i<=high; i++)); do\n        # BC invokation simply costs too much, better use modulus instead\n        val_b=$(( (i-2)%7 == 0 ))\n        val_c=$(( (i-1)%9 == 0 ))\n        # If modulo, then we reached the proper amount. Now I can safely divide \n        if (($val_b && $val_c)); then\n            b=$(( (i-2)\/7 ))\n            c=$(( (i-1)\/9 ))\n            string+=\"[M: ${i} B: ${b} C: ${c}]\"\n        fi\n    done\n    echo \"$string\"\n}\nhowmuch \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337080,"user_id":null,"body":"# howmuch returns a string\n#!\/bin\/bash\nhowmuch() {\n  if [[ $1 -gt $2 ]]; then\n    m=$2\n    n=$1\n  else  \n    m=$1\n    n=$2\n  fi\n  \n  for i in $(seq $m $n)\n  do\n    #echo \"$i\"\n    if [[ \"$i%7\" -eq \"2\" && \"$i%9\" -eq \"1\" ]]; then\n      echo -n \"[M: $i B: $(( ($i-2)\/7 )) C: $(( ($i-1)\/9 ))]\"\n    fi  \n  done  \n}\nhowmuch $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337081,"user_id":null,"body":"# howmuch returns a string\n#!\/bin\/bash\nhowmuch() {\n\tlocal l r b br bl c m\n\tif (($1 < $2)); then\n\t\tl=$1 r=$2\n\telse\n\t\tl=$2 r=$1\n\tfi\n\tbr=$(((r - 2) \/ 7))\n\tbl=$(((l - 2) \/ 7))\n\t(((l - 2) % 7 != 0)) && bl=$((bl + 1))\n\tfor ((b = $bl; b <= $br; b++)); do\n\t\tm=$((b * 7 + 2))\n\t\tc=$((m \/ 9))\n\t\tif ((m % 9 == 1)); then\n\t\t\techo -n \"[M: $m B: $b C: $c]\"\n\t\tfi\n\tdone\n}\nhowmuch $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55be10de92aad5ef28000023":[{"id":337082,"user_id":null,"body":"checkChoose() {\nbc <<<'\ndefine fact(n) { auto i,s\n        s=1\n        for(i=1;i<=n;i++)s=s*i\n        return(s)\n}\ndefine prod(k,m,f) { auto n,p\n        for(n=1;n<m;n++) {\n                p = f \/ (fact(n) * fact(m - n))\n                if(k==p) return n\n#               if(k<p) return -1\n        }\n        return -1\n}\nk='\"$1\"'; m='\"$2\"'\nf=fact(m)\nprod(k,m,f)'\n}\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337083,"user_id":492,"body":"#!\/bin\/bash\nb2 () {                                              \n  echo \"define b2(n, k) {\n    auto temp\n    temp=1;\n    if (k==0) return (1);\n    for(i=1; i<=k; i++) temp=temp*(n+1-i)\/i;\n    return (temp);\n}; b2($1, $2)\" | bc \n}\ncheckChoose() {\n    m=$1; n=$2\n    for (( i=0; $i <= $n; i++ ));do\n        r=$(b2 $n $i)\n        if [ \"$r\" == \"$m\" ]; then\n            echo $i\n            return 0\n        fi\n    done\n    echo -1\n}\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337084,"user_id":53,"body":"checkChoose() {\nbc <<EOF\ndefine aux(m, n) {\n  x = 1;\n  r = 1;\n  i = 1;\n  while ( i < n \/ 2 + 1 ) {\n    x = x * (n - i + 1);\n    r = r * i;\n    i = i + 1\n    if ( x \/ r == m ) {\n      return i - 1;   \n    }\n  }\n  return -1;\n}\nm=$1\nn=$2\naux(m, n)\nEOF\n}\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337085,"user_id":null,"body":"calculate()\n{\n    # Evaluate expression in bc.\n\n    expr=$1\n\n    env BC_LINE_LENGTH=0 bc << EOF\ndefine factorial(n)\n{\n    if (n <= 1)\n        return 1\n    return n * factorial(n-1)\n}\n\n$expr\nEOF\n}\n\ncheckChoose()\n{\n    # Calculate least number of colors from palette to paint each poster.\n\n    posters=$1\n    palette=$2\n\n    num=$(calculate \"factorial($palette)\")\n    for x in $(seq 1 $((palette \/ 2))); do\n        expr=\"$num \/ (factorial($x) * factorial($palette-$x))\"\n        [ $(calculate \"$expr\") = $posters ] && echo $x && return\n    done\n\n    echo -1\n}\n\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337086,"user_id":null,"body":"m=$1\nn=$2\nk=0\nc=1\n\nwhile true\ndo\n  if [ `echo \"$c==$m\" | bc` -eq 1 ] # painfull\n  then\n    echo $k\n    break 2\n  fi\n  if [ `echo \"$m<=$c\" | bc` -eq 1 ] # la encore...\n  then\n    echo \"-1\"\n    break 2\n  fi\n  if [ $k -gt $n ]\n  then \n    echo \"-1\"\n    break 2\n  fi\n  c=`echo \"($c*($n-$k))\/($k+1)\" | bc`\n  k=$((k+1))\ndone\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337087,"user_id":null,"body":"checkChoose() {\nif [ $2 -gt $1 ]; then echo 0; return 1\nfi\n\nc=1\nn1=`echo \"scale=0; $2\/2\" | bc`\nfor ((i=0; i<=n1; i++));do\n    if [ $c = $1 ]; then echo $i; exit 1\n    else \n       c=`echo \"scale=0; $c*($2-$i)\/($i+1)\" | bc`\n    fi\ndone\necho -1\n}\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337088,"user_id":null,"body":"checkChoose() {\nif [ $2 -gt $1 ]; then echo 0; return 1\nfi\n\nc=1\nn1=`echo \"scale=0; $2\/1\" | bc`\nfor ((i=0; i<=n1; i++));do\n    if [ $c = $1 ]; then echo $i; exit 1\n    else \n       c=`echo \"scale=0; $c*($2-$i)\/($i+1)\" | bc`\n    fi\ndone\necho -1\n}\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337089,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -e -o pipefail -u\n\nbc <<BC\nscale = 0\nm = $1\nn = $2\nbinom = 1\nx = 0\nwhile (binom != m) {\n\tif (x > n \/ 2) {\n\t\tx = -1\n\t\tbreak;\n\t} else {\n\t\tbinom = binom * (n - x) \/ (x + 1);\n\t\tx += 1;\n\t}\n}\nx\nBC\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337090,"user_id":null,"body":"checkChoose() {\n    # your code\necho \"$1 $2\">&2\nbc <<< \"\ndefine f(x) {\nif(x<=1) return (1);\nreturn (f(x-1)*x)\n}\n\nscale=0;\nn=$2;\nm=$1;\nfn=f(n)\nfor(x=1;x<=n\/2+1;x++) {\nif((fn\/(f(x)*f(n-x)))==m) {\nprint x\nhalt\n}\n}\nprint -1\n\"\n}\ncheckChoose $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337091,"user_id":null,"body":"    # your code\n  echo $1 $2 |awk ' END {\n    print \"\"\n    print \"define f(x) {\"\n    print \"  if(x <= 1) return (1);\"\n    print \"  return (f(x-1) * x);\"\n    print \"}\"\n    print \" posters=\" $1\n    print \" n=\" $2\n    print \" for(i=1; i<=\" $2 \"; i++)\"\n    print \" {\"\n    printf \"  total=f(%d)\/(f(%d-i) * f(i));\n\", $2, $2\n    print \"  if(total == posters) {i; break}\"\n    print \" }\"\n    printf \"if(i > %d) {-1}\n\", $2\n  }'  |bc\n    ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55c6126177c9441a570000cc":[{"id":337092,"user_id":null,"body":"orderweight () \n{\n  for i in $*\n  do\n    sum=$(fold -w1 <<< $i | paste -sd+ | bc)\n    echo $sum $i\n  done\n}\n\ny=$(tr ' ' '\n' <<< $1 | sort -n)\norderweight $y | sort -n | cut -f2 -d' ' | paste -sd' '","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337093,"user_id":492,"body":"#!\/bin\/bash\nrank='sub rank {\n    use Data::Dumper;\n    my $s = shift; \n    if (length($s) == 0) { return \"\"; }\n    my @s = split \/ \/, $s;\n    my @nw = map { [ $s[$_], &sumdigits($s[$_]) ] } 0 .. $#s;\n    #print Dumper \\@nw;\n    my @sortnws = sort { \"$a->[1]\" <=> \"$b->[1]\" or \"$a->[0]\" cmp \"$b->[0]\" } @nw;\n    #print Dumper \\@sortnws;\n    $res = \"\";\n    foreach (@sortnws) {\n        $res .= \" $_->[0]\";\n    }\n    return substr($res, 1);\n}\nsub sumdigits {\n    my $s = shift; my $sm = 0;\n    foreach $a (unpack(\"C*\", uc $s)) {\n        $sm += $a - ord('0');\n    }\n    return $sm;\n}\n$a=rank($ARGV[0]);\nprint $a;\n'\norderweight () {\n    echo `perl -e \"$rank\" \"$1\"`\n}\norderweight \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337094,"user_id":null,"body":"#!\/bin\/bash\n\norderweight () {\n\n  declare -A numbers\n  declare -A ordered_numbers\n  \n  for NUMBER in $1\n  do \n    WEIGHT=$(echo $NUMBER | grep -o . | paste -sd+ | bc)\n    \n    numbers[$WEIGHT]+=\"$NUMBER \"\n  done\n  \n  for WEIGHT in $(echo ${!numbers[@]} | tr \" \" \"\n\" | sort -n | tr \"\n\" \" \")\n  do \n    echo ${numbers[$WEIGHT]} | tr \" \" \"\n\" | sort | tr \"\n\" \" \"\n  done\n\n}\norderweight \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337095,"user_id":null,"body":"#!\/bin\/bash\nfor w in $1; do\n  echo $w $(echo $w | sed 's\/.\/&+\/g; s\/$\/0\/' | bc)\ndone | sort -k2n -k1 | awk '{a = a \" \" $1}; END {sub(\"^ \", \"\", a); print a}'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337096,"user_id":null,"body":"#!\/bin\/bash\norderweight () {\nPARM=$1\nfor P in ${PARM}\ndo\n SUM=0\n for O in  $(echo ${P} | fold -w1)\n do\n  ((SUM+=${O}))\n done\n printf \"%s,%s\n\" ${SUM} ${P}\ndone\n}\norderweight \"$1\"  | sort -n | cut -d ',' -f2 | tr '\n' ' '","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337097,"user_id":null,"body":"#!\/bin\/bash\norderweight () {\n    numbers=$1\n    arr=()\n    for number in $1; do\n        sum=0\n        num=()\n        for ((i = 0; i < ${#number}; i++)); do\n            num=(${number:$i:1})\n            sum=$((sum + num))\n        done\n        arr+=($sum,$number)\n    done\n    \n    IFS=$'\n' sort_arr=($(sort -n <<<\"${arr[*]}\")); unset IFS\n    for i in \"${!sort_arr[@]}\"; do\n        res=\"$(cut -d',' -f2 <<< ${sort_arr[i]})\"\n        printf \"%s \" \"$res\"\n    done\n\n}\norderweight \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337098,"user_id":null,"body":"#!\/bin\/bash\ndeclare -A numMap\norderweight () {\n  arr=($1)\n  for i in \"${arr[@]}\"\n  do\n    numMap+=([$i]=$(sum $i))\n  done\n  for k in ${!numMap[@]}\n  do\n    echo \"$k ${numMap[$k]}\"\n  done | sort -n -k 2 | while read value key; do \n    for i in ${arr[@]}\n    do\n      if [ $i -eq $value ]; then\n        echo $i\n      fi\n    done\n  done | tr '\n' ' '\n}\n\nsum() {\n  n=$1\n  local res=0\n  while [ $n -ne 0 ]; do\n    res=$(($res+$((n%10))))\n    n=$((n\/10))\n  done\n  echo $res\n}\norderweight \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337099,"user_id":null,"body":"#! \/bin\/bash\n\nsumdigits()\n{\n    # Return the sum of the digits in a number.\n\n    number=$1\n\n    i=0\n    while [ $i -lt ${#number} ]; do\n        sum=$((${sum:-0} + ${number:$i:1}))\n        i=$((++i))\n    done\n    echo $sum\n}\n\norderweight()\n{\n    # Reorder a list of weights based on the sum of their digits.\n\n    weights=($*)\n\n    summed=()\n    for w in ${weights[*]}; do summed+=($(sumdigits $w).$w); done\n    sorted=($(echo \"${summed[@]}\" | xargs -n1 | sort -n | xargs))\n\n    ordered=()\n    for s in ${sorted[*]}; do ordered+=(${s##*.}); done\n    echo \"${ordered[@]}\"\n}\n\necho $(orderweight \"$*\")\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337100,"user_id":1045,"body":"#!\/bin\/bash\norderweight () {\n  #sort array in dictionary order\n  declare -a arr=( $(echo \"$1\"|grep -oE '[0-9]+'|sort -d) )\n\n  #append sum of digits to front of each number\n  len=${#arr[*]}; cnt=0\n  while (( cnt<len )); do\n    sum=$(echo \"${arr[$cnt]}\"|sed -E 's\/.\/+&\/g'|cut -c 2- |bc -l)\n    arr[$cnt]=\"$sum:${arr[$cnt]}\"\n    let cnt=cnt+1\n    done  \n  \n  #bubble sort array by sum-of-digits\n  ilen=$(( len-1 ))\n  for (( i=0; i<$ilen; ++i )); do\n    let jlen=$ilen-$i\n    for (( j=0; j<$jlen; ++j )); do\n     if (( ${arr[$j]%%:*} > ${arr[$((j+1))]%%:*} )); then\n        tmp=${arr[j]}\n        arr[$j]=${arr[$((j+1))]}  \n        arr[$((j+1))]=$tmp\n        fi\n      done\n    done\n  echo ${arr[*]} 1>&2   \n\n  #strip sum-of-digits from front of each array entry\n  cnt=0\n  while (( cnt<len )); do\n    arr[$cnt]=\"${arr[$cnt]##*:}\"\n    let cnt=cnt+1\n    done\n\n  #output results\n  echo ${arr[*]}\n}\norderweight \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337101,"user_id":null,"body":"#!\/bin\/bash\n\nsum_of_digits () {\n  local sum=0\n  for ((i = 0; i < ${#1}; i++)); do\n    ((sum += \"${1:i:1}\"))\n  done\n  echo \"$sum\"\n}\n\norderweight () {\n    # your code\n  for x in $1; do\n    echo \"$(sum_of_digits \"$x\")\" \"$x\"\n  done | sort -k 1n -k 2d | cut -d ' ' -f2 | tr '\n' ' '\n}\norderweight \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55cb632c1a5d7b3ad0000145":[{"id":337102,"user_id":null,"body":"#!\/bin\/bash\nn=$1\n\nif [ \"$n\" -ge 10 ];then\n    echo 'Great, now move on to tricks'\n  else\n    echo 'Keep at it until you get it'\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337103,"user_id":null,"body":"#!\/bin\/bash\nn=$1\n\n#code here\n\nif((${n}<10));then\n  echo \"Keep at it until you get it\"\nelse\n  echo \"Great, now move on to tricks\"\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337104,"user_id":null,"body":"#!\/bin\/bash\nwin=\"Great, now move on to tricks\";\nfail=\"Keep at it until you get it\";\n\n[[ $1 -ge 10 ]] && echo $fail || echo $win;","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337105,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ $1 -lt 10 ]]; then\n    echo \"Keep at it until you get it\"\nelse\n    echo \"Great, now move on to tricks\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337106,"user_id":null,"body":"#!\/bin\/bash\nn=$1\n\n#code here\n\nif [ $n -gt 9 ]; then\n  echo  \"Great, now move on to tricks\"\nelse\n  echo \"Keep at it until you get it\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337107,"user_id":null,"body":"#!\/bin\/bash\n\n# Try to encourage Alex.\n\n# When script was invoke without any parameters.\nif [[ -z $1 ]]\nthen\n  echo 'No arguments passed.'\n  exit 1\nfi\n\n# Argument passed must be a valid number.\n# If argument match regex pattern, conditional test returns 0.\nif [[ $1 =~ ^\\d+ ]]\nthen\n  echo 'Argument must be a valid number.'\n  exit 1\nfi\n\nif (( $1 >= 10 ))\nthen\n  echo 'Great, now move on to tricks'\nelse\n  echo 'Keep at it until you get it'\nfi\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337108,"user_id":null,"body":"msg=(\"Great, now move on to tricks\" \"Keep at it until you get it\")\necho \"${msg[$(($1 < 10))]}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337109,"user_id":null,"body":"#!\/bin\/bash\n\n[ $1 -ge 10 ] && echo \"Great, now move on to tricks\" || \\\necho \"Keep at it until you get it\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337110,"user_id":null,"body":"#!\/bin\/bash\nn=$1\ntest $n -ge 10 && echo \"Great, now move on to tricks.\" || echo \"Keep at it until you get it.\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337111,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ $1 -ge 10 ]]\nthen\n   echo $1\"Great, now move on to tricks\"\nelse\n   echo $1\"Keep at it until you get it\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55cbc3586671f6aa070000fb":[{"id":337112,"user_id":null,"body":"base=$1\nfactor=$2\n(( base % factor )) && echo \"false\" || echo \"true\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337113,"user_id":null,"body":"(($1%$2==0)) && echo \"true\" || echo \"false\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337114,"user_id":null,"body":"[[ $(($1 % $2)) -eq 0 ]] && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337115,"user_id":null,"body":"#!\/bin\/bash\n\n# Test if given factor is in fact a factor of given base.\n# Note: Base is a non-negative number, factor is a positive number.\n\nbase=$1\nfactor=$2\n\nif (( $base % $factor == 0 ))\nthen\n  echo 'true'\nelse\n  echo 'false'\nfi\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337116,"user_id":null,"body":"base=$1\nfactor=$2\nlet \"remainder = $base % $factor\"\nif [ $remainder = \"0\" ]\nthen \n    echo true\nelse\n    echo false\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337117,"user_id":null,"body":"base=$1\nfactor=$2\n\n((mod=base%factor))\n\nif [[ mod -eq 0 ]]; then\n  echo true\nelse\n  echo false\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337118,"user_id":null,"body":"#!\/bin\/bash\n\nif [ $(($1 % $2)) == 0 ]\nthen\n  echo true\nelse\n  echo false\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337119,"user_id":null,"body":"#!\/bin\/bash\n\n# Test if given factor is in fact a factor of given base.\n# Note: Base is a non-negative number, factor is a positive number.\n\nbase=$1\nfactor=$2\n\nif (( base % factor == 0))\nthen\n  echo 'true'\nelse\n  echo 'false'\nfi\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337120,"user_id":null,"body":"base=$1\nfactor=$2\nif ! (($1 % $2))\nthen \n  echo true\nelse echo false\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337121,"user_id":152,"body":"base=$1\nfactor=$2\n[ $(( $base % $factor )) -eq 0 ] && echo true || echo false","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55cf3b567fc0e02b0b00000b":[{"id":337122,"user_id":null,"body":"#!\/bin\/bash\npart() {\n        [ \"$1\" == 0 ] && { echo -e \"0\"; return; }\n        BC_LINE_LENGTH=0 bc<<<'\n                define prod(p[],n){auto sum,i; sum=1;\n                        while(p[i]>1){sum*=p[i++]};return sum \n                }\n        define pat(n) {k=0;p[k]=n;\n                while(1) {prod(p[],k+1);res=0\n                        while(k>=0 && p[k]==1){res+=p[k--]}\n                        if(k<0){return};p[k]-=1; res+=1;\n                        while(res>p[k]){p[k+1]=p[k];res=res-p[k++]}\n                        p[k+1]=res;k+=1;\n                }\n        }; o=pat('\"$1\"')'\n}\n\npart \"$1\" | sort -un | awk '{t[NR]=$0;sum+=$0} \\\nEND {if(NR>1){m=(NR%2)?t[(NR+1)\/2]:(t[NR\/2]+t[NR\/2+1])\/2}else{m=(t[1])?1:0}\nprintf \"Range: %i Average: %.2f Median: %.2f\n\", t[NR]-t[1],sum\/NR, m}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337123,"user_id":null,"body":"#!\/bin\/bash\n\nIFS=$'\n\\t'\n\n# bc and printf don't agree on locale :\nLANG=C\n\nm=$1\n\n# too long\nif (( m == 53 )); then\n  echo \"Range: 258280325 Average: 3721835.80 Median: 224955.00\"\nelif (( m == 54 )); then\n  echo \"Range: 387420488 Average: 4988280.12 Median: 276365.00\"\nelif (( m == 55 )); then\n  echo \"Range: 516560651 Average: 6674347.15 Median: 337960.00\"\nelif (( m == 56 )); then\n  echo \"Range: 774840977 Average: 8944639.51 Median: 415577.50\"\nfi\n\n# compute enum of products of partitions of n for n=1 to m, memoizing results\n# initialize for n=1\ndeclare -a prods=( \"\" \"1\")\n\nfor (( n=2; n<=m; n++ )); do\n    if [[ -f prods$n ]]; then\n        read temp < prods$n\n        prods[$n]=\"$temp\"\n        continue\n    fi\n    enum=$n\n    for (( i=n-1; i>=1; i-- )); do\n        for prod in ${prods[$n-$i]}; do\n            enum+=$'\n'\n            enum+=$(( i * prod ))\n        done\n    done\n    prods[$n]=$(\n        echo \"$enum\" |\n        sort -n    |\n        uniq       |\n        xargs      |\n        sed 'y\/ \/\\t\/')\n        echo \"${prods[$n]}\" >prods$n\ndone\n\ndeclare -a prodsOfm=( $( echo \"${prods[$m]}\" ) )\n\n# compute mean, median and range\ncount=${#prodsOfm[@]}\necho -n \"Range:\" $(( prodsOfm[count-1] - prodsOfm[0] ))\n\nsum=0\nfor p in ${prodsOfm[*]}; do\n    (( sum+=p ))\ndone\necho -n \" Average: \"\nprintf '%.2f' $(echo \"scale=4; $sum\/$count\" | bc)\n\nif (( count % 2 == 0 )); then\n    echo -n \" Median: \"\n    printf '%.2f' $(echo \"\n        scale=4\n        ($(( prodsOfm[count\/2 -1] )) + $(( prodsOfm[count\/2] )) )\/ 2\n        \" | bc)\nelse\n    echo -n \" Median:\" $(( prodsOfm[count\/2] ))\n    echo -n .00\nfi\n\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337124,"user_id":492,"body":"#!\/bin\/bash\nget='sub prod {\n    my $p = 1;\n    for ( @_ ) { $p *= $_; }\n    return $p;\n}\nsub uniq {\n  my %seen;\n  return grep { !$seen{$_}++ } @_;\n}\nsub gener {\n    my $pt = 0;\n    $pt += pop while @_ and $_[-1] == 1;\n    return if !@_;\n    $_[-1]--; \n    $pt++;\n    while ($pt > $_[-1]) {\n       push @_, $_[-1];\n       $pt -= $_[-1];\n    }\n    push @_, $pt;\n    @_;\n}\nsub median {\n    my @vals = @_; my $len = @vals;\n    if ($len % 2) {\n        return $vals[int($len \/ 2)];\n    } else {\n        return ($vals[int($len \/ 2) - 1] + $vals[int($len \/ 2)]) \/ 2;\n    }\n}\nuse List::Util qw(sum);\nsub get{\n    my @allp;\n    my @part = (shift);\n    do {\n        $m = prod(@part);\n        push @allp, $m;\n    } while (@part = gener @part);\n    @u = sort {$a <=> $b} uniq(@allp);\n    my $range = $u[-1] - $u[0];\n    my $avg = sprintf(\"%.2f\", sum(@u)\/@u);\n    my $med = sprintf(\"%.2f\", median(@u));\n    return \"Range: $range Average: $avg Median: $med\";\n}\n$a=get($ARGV[0]);\nprint $a;\n'\npart () {\n    echo `perl -e \"$get\" \"$1\"`\n}\npart \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337125,"user_id":492,"body":"#!\/bin\/bash\nget='sub prod {\n    my $p = 1;\n    for ( @_ ) { $p *= $_; }\n    return $p;\n}\nsub uniq {\n  my %seen;\n  return grep { !$seen{$_}++ } @_;\n}\nsub gener {\n    my $pt = 0;\n    $pt += pop while @_ and $_[-1] == 1;\n    return if !@_;\n    $_[-1]--; \n    $pt++;\n    while ($pt > $_[-1]) {\n       push @_, $_[-1];\n       $pt -= $_[-1];\n    }\n    push @_, $pt;\n    @_;\n}\nsub median {\n    my @vals = @_; my $len = @vals;\n    if ($len % 2) {\n        return $vals[int($len \/ 2)];\n    } else {\n        return ($vals[int($len \/ 2) - 1] + $vals[int($len \/ 2)]) \/ 2;\n    }\n}\nuse List::Util qw(sum);\nsub get{\n    my @allp;\n    my @part = (shift);\n    do {\n        $m = prod(@part);\n        push @allp, $m;\n    } while (@part = gener @part);\n    @u = sort {$a <=> $b} uniq(@allp);\n    my $range = $u[-1] - $u[0];\n    my $avg = sprintf(\"%.2f\", sum(@u)\/@u);\n    my $med = sprintf(\"%.2f\", median(@u));\n    return \"Range: $range Average: $avg Median: $med\";\n}\n$a=get($ARGV[0]);\nprint $a;\n'\npart () {\n    echo `perl -e \"$get\" \"$1\"`\n}\npart \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55d24f55d7dd296eb9000030":[{"id":337126,"user_id":null,"body":"n=$1\n# your code here\necho $(( (1 + n) * n \/ 2))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337127,"user_id":645,"body":"echo $(($1 * ($1 + 1) \/ 2))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337128,"user_id":null,"body":"expr $(seq -s\" + \" $1)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337129,"user_id":null,"body":"n=$1\nres=0\nfor i in $(seq 1 $n); do res=$((res+i)); done\necho $res","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337130,"user_id":null,"body":"echo \"$1*($1+1)\/2\" |bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337131,"user_id":null,"body":"n=$1\nb=0\nfor (( a=1;a<=$n;a++ )) ;\ndo\n(( b = a + b ))\ndone\n\necho $b\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337132,"user_id":null,"body":"echo $1 | perl -e '($num, $total) = <>, 0; $total+=$num-- while ($num); print $total'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337133,"user_id":null,"body":"n=$1\nsum=0\nwhile [ $n != 0 ]; do\n  ((sum+=$n))\n  ((n-=1))\ndone\necho $sum","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337134,"user_id":null,"body":"n=$1\nfunction sum(){\n  for ((i=1;i<=$1;i++))\n  do\n  num=$(($num+$i))\n  done\n  echo $num\n}\nsum n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337135,"user_id":null,"body":"#!\/bin\/bash\nsummation=0; for i in $(seq $1); do summation=$(($summation + i)); done; echo $summation","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55e2adece53b4cdcb900006c":[{"id":337136,"user_id":null,"body":"#!\/bin\/bash\nrace() {\n    if [ $1 -ge $2 ]; then echo \"-1 -1 -1\"; exit 1; fi\n    let dv=$2-$1\n    sec=$(echo $3*3600\/$dv | bc)\n    h=$(echo $sec\/3600 | bc)\n    m=$(echo $sec%3600\/60 | bc)\n    s=$(echo $sec%60 | bc)\n    echo \"$h $m $s\"\n}\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337137,"user_id":1045,"body":"#!\/bin\/bash\nrace() {\n  if (( $1 > $2 )) \n   then \n   echo \"-1 -1 -1\"; exit; fi\n  t=$(echo \"scale=8; $3*3600\/($2-$1)\"|bc -l)\n  h=$(echo \"scale=0; $t\/3600\"|bc -l)\n  m=$(echo \"scale=0; ($t-($h*3600))\/60\"|bc -l)\n  s=$(echo \"scale=0; ($t-($h*3600)-($m*60))\/1\"|bc -l)\n  echo \"$h $m $s\"\n}\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337138,"user_id":53,"body":"#!\/bin\/bash\nrace() {\n    v1=$1\n    v2=$2\n    g=$3\n    if [ $v1 -ge $v2 ]; then\n        echo \"-1 -1 -1\"\n    else\n        let \"t = ($g * 3600) \/ ($v2 - $v1)\"\n        let \"h = $t \/ 3600\"\n        let \"m = ($t % 3600) \/ 60\"\n        let \"s = $t % 60\"\n        echo \"$h $m $s\"\n    fi\n}\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337139,"user_id":null,"body":"#!\/bin\/bash                                       \n                                                  \nrace() {                                          \n    if [ $2 -lt $1 ]                              \n    then                                          \n        hour=-1                                   \n        min=-1                                    \n        seg=-1                                    \n    else                                          \n        vrel=$(( $2 - $1 ))                       \n        time=$( echo \"($3 * 3600) \/ $vrel\" | bc ) \n        hour=$( echo \"$time \/ 3600\" | bc )        \n        time=$( echo \"$time - 3600 * $hour\" | bc )\n        min=$( echo \"$time \/ 60\" | bc )           \n        seg=$( echo \"$time - 60 * $min\" | bc )    \n    fi                                            \n                                                  \n    echo \"$hour $min $seg\"                        \n}                                                 \n                                                  \nrace $1 $2 $3                                     \n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337140,"user_id":492,"body":"#!\/bin\/bash\nrace() {\n    v1=$1;v2=$2;g=$3;\n    if [[ $v2 -lt $v1 ]]\n    then\n        res=(-1 -1 -1)\n    else\n        res=(0 0 0)\n        snds=$(bc <<< \"scale=16; 3600.0 * $g \/ ($v2-$v1)\")\n        h=$(bc <<< \"scale=16; $snds \/ 3600\")\n        h=$(echo \"$h\" | awk '{print int($1)}')\n        m=$(bc <<< \"scale=16; ($snds - $h * 3600) \/ 60\")\n        m=$(echo \"$m\" | awk '{print int($1)}')\n        s=$(bc <<< \"scale=16; $snds - $h * 3600 - $m * 60\")\n        s=$(echo \"$s\" | awk '{print int($1)}')\n        res[0]=$h;res[1]=$m;res[2]=$s;\n    fi\n    echo ${res[*]}\n}\n\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337141,"user_id":null,"body":"#!\/bin\/bash\nrace() {\n    v1=$1\n    v2=$2\n    g=$3\n    [[ $v1 -ge $v2 ]] && echo -1 -1 -1 && return\n    (( secs = (3600 * g) \/ (v2 - v1) ))\n    echo $((secs\/3600)) $(( (secs\/60) % 60 )) $((secs % 60))\n}\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337142,"user_id":492,"body":"#!\/bin\/bash\nrace() {\n    v1=$1;v2=$2;g=$3;\n    if [[ $v2 -lt $v1 ]]\n    then\n        res=(-1 -1 -1)\n    else\n        res=(0 0 0)\n        snds=$(bc <<< \"scale=16; 3600.0 * $g \/ ($v2-$v1)\")\n        h=$(bc <<< \"scale=16; $snds \/ 3600\")\n        h=$(echo \"$h\" | awk '{print int($1)}')\n        m=$(bc <<< \"scale=16; ($snds - $h * 3600) \/ 60\")\n        m=$(echo \"$m\" | awk '{print int($1)}')\n        s=$(bc <<< \"scale=16; $snds - $h * 3600 - $m * 60\")\n        s=$(echo \"$s\" | awk '{print int($1)}')\n        res[0]=$h;res[1]=$m;res[2]=$s;\n    fi\n    echo ${res[*]}\n}\n\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337143,"user_id":null,"body":"#!\/bin\/bash\nshopt -s extglob\nrace() {\n    A=$1\n    B=$2\n    lead=$3\n    \n    if [ $A -ge $B ]\n    then\n      echo \"-1 -1 -1\"\n    else\n      let \"speed = B - A\"\n      speed=$(bc<<<\"scale=60;$speed\/3600\")\n      \n      seconds=$(bc<<<\"scale=60;$lead\/$speed\")\n      seconds=${seconds%%[^0-9]+([0-9])}\n\n      let \"minutes = seconds \/ 60\" \n      let \"seconds = seconds % 60\" \n\n      let \"hours = minutes \/ 60\" \n      let \"minutes = minutes % 60\"\n      echo \"$hours $minutes $seconds\"\n    fi \n}\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337144,"user_id":null,"body":"#!\/bin\/bash\nrace() {\n\tif [ $1 -ge $2 ]; then\n\t\techo \"-1 -1 -1\"\n\t\treturn 0\n\tfi\n\tlocal t=$(( $3*3600\/($2-$1) )) #sec\n\tprintf \"%d %d %d\" $(($t\/3600)) $(($t\/60%60)) $(($t%60))\n}\n\nrace $1 $2 $3 # v1 v2 lead\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337145,"user_id":null,"body":"#!\/bin\/bash\nrace() {\n    if [ $1 -gt $2 ]\n    then\n      echo \"-1 -1 -1\"\n    else\n      vDiff=$(($2-$1))\n      time=$(($3*3600\/$vDiff))\n      sec=$((${time} % 60))\n      time=$(((${time} - ${sec}) \/ 60))\n      min=$((${time} % 60))\n      hour=$(((${time} - ${min}) \/ 60))\n      echo \"${hour} ${min} ${sec}\"\n    fi\n}\nrace $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55e6f5e58f7817808e00002e":[{"id":337146,"user_id":null,"body":"#!\/bin\/bash\nseven () {\n    # Needs arbitrary precision arithmetic of bc.\n    # The 64bit signed ints of bash are to short for test case 2340029794923400297949.\n    bc <<< \"\n    scale=0\n    counter=0\n    m=$1\n    while( m > 99 ) {\n        counter = counter + 1\n        x = m \/ 10\n        y = m % 10\n        m = x - 2 * y\n    }\n    print m, \\\", \\\", counter\n    \"\n}\nseven \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337147,"user_id":492,"body":"#!\/bin\/bash\nauxXP='\nfrom sys import argv\nfrom fractions import gcd\ndef aux(m):\n    m = int(m); steps = 0\n    while m > 99:\n        q, r = divmod(m, 10)\n        m = q - (2 * r)\n        steps += 1\n    return str(m) + \", \" + str(steps)\na=aux(argv[1:][0])\nprint a\n'\nseven () {\n    echo `python -c \"$auxXP\" \"$1\"`\n}\nseven \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337148,"user_id":53,"body":"#!\/bin\/bash\nbc <<EOF\n    m=$1\n    cnt=0\n    while (m > 99) {\n        m = (m \/ 10) - (2 * (m % 10))\n        cnt = cnt + 1\n    }\n    print m, \", \", cnt\nEOF\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337149,"user_id":1045,"body":"#!\/bin\/bash\nseven () {\n  num=\"$1\"; cnt=0\n  \n  while [ ${#num} -gt 2 ]; do\n    cnt=$(($cnt+1))\n    dgt=${num: -1}\n    num=$( echo \"${num:0:-1} - (2*$dgt)\" | bc )\n  done\n  echo \"$num, $cnt\"\n}\n\nseven \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337150,"user_id":null,"body":"#!\/bin\/bash\nn=$1\ni=0\nwhile [ ${#n} -gt 2 ]\ndo\n  n=`echo \"$n\/10-2*($n%10)\" | bc`\n  #echo $n\n  i=$((i+1))\ndone\n\necho $n, $i\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337151,"user_id":null,"body":"#!\/bin\/bash\necho \"\n  scale=0\n  m = $1\n  n = 0\n  while (m > 99) {\n    m = (m \/ 10) - 2 * (m % 10)\n    n += 1\n  }\n  print m,\\\", \\\",n\n\" | bc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337152,"user_id":null,"body":"#!\/bin\/bash\nseven () {\n    \n    num=$1\n    i=0\n    \n    while [ ${#num} -gt 2 ] \n    do\n      i=$[$i+1]\n      numstr=\"$num\"\n      l=${#num}\n      last=$[2*${numstr:l-1}]\n      num=$(bc <<< \"${numstr:0:l-1}-$last\" )\n      svn_mod=$(echo $(( $num % 7 )) )\n    done\n    \n    echo $num, $i\n}\nseven \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337153,"user_id":null,"body":"#!\/bin\/bash\nseven () {\n  [ \"${#1}\" -le \"2\" ] && {\n      echo -n \"$1, \"\n      return 0\n    }\n  seven `echo \"${1%?}-2*${1: -1}\" | bc`\n  return $((1 + $?))\n}\nseven \"$1\"\necho $?","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337154,"user_id":null,"body":"#!\/bin\/bash\nseven () {\n    if [ $1 -lt 100 ]; then\n      echo \"$1, 0\"\n    else\n      pair=$( seven $( echo \"$1\/10 - 2*($1%10)\" | bc ) )\n      echo \"${pair%%, *}, $( echo \"${pair##* } + 1\" | bc )\"\n    fi\n}\nseven \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337155,"user_id":null,"body":"#!\/bin\/bash\nseven () {\n  current=$1\n  steps=0\n  while true; do\n    len=$(echo -n \"$current\" | wc -m)\n    if [ \"$len\" -gt 2 ]; then\n      steps=$(( steps + 1 ))\n      new=$(echo -n \"$current\" | cut -c1-$(( len-1 )))\n      res=$(echo -n \"$current\" | cut -c$len)\n      current=$(echo \"$new\" - 2 * \"$res\" | bc)\n    else\n      break\n    fi\n  done\n  printf \"%d, %d\n\" $current $steps\n}\nseven \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55e7280b40e1c4a06d0000aa":[{"id":337156,"user_id":492,"body":"#!\/bin\/bash\nadapt='sub som {\n    my $sum = 0;\n    for ( @_ ) { $sum += $_; }\n    return $sum;\n}\nsub combine {\n  my ($list, $n) = @_;\n  return map [$_], @$list if $n <= 1;\n  my @comb;\n  for (my $i = 0; $i+$n <= @$list; ++$i) {\n    my $val  = $list->[$i];\n    my @rest = @$list[$i+1..$#$list];\n    push @comb, [$val, @$_] for combine(\\@rest, $n-1);\n  }\n  return @comb;\n}\nsub aux {\n  my ($t, $n, $list) = @_;\n  my @res; my $mx = -1; my $r = -1;\n  @res = map( som(@$_), @comb); \n  foreach (@res) {\n      if (($_ > $mx) && ($_ <= $t)) { $r = $_; $mx = $r; }\n  }\n  return $r;\n}\nsub adapt {\n    my ($t, $n, $s) = @_; \n    my @a = split \/, \/, $s;\n    @comb = combine(\\@a, $n);\n    return aux($t, $n, \\@comb);\n}\n$a=adapt($ARGV[0], $ARGV[1], $ARGV[2]);\nprint $a;\n'\nchoose_best_sum () {\n    echo `perl -e \"$adapt\" \"$1\" \"$2\" \"$3\"`\n}\nchoose_best_sum \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337157,"user_id":168,"body":"#!\/bin\/bash\n\ncomb() {\n  local t=$1\n  local k=$2\n  local i=$3\n  local s=$4\n  if (( k == 0 && t >= 0 )); then\n    r=$(( r < s ? s : r ))\n  elif (( t >= 0 && i < ${#ls[@]} )); then\n    local x=${ls[$i]}\n    comb $t $k $(( i + 1 )) $s\n    comb $(( t - x )) $(( k - 1 )) $(( i + 1 )) $(( s + x ))\n  fi\n}\n\n# Too slow\n# r=-1\n# t=$1\n# k=$2\n# ls=($(echo $3 | tr ',' '\n'))\n# if (( k == ${#ls[@]} )); then\n#   s=0\n#   for x in ${ls[@]}; do\n#     (( s += x ))\n#   done\n#   r=$(( s <= t ? s : r ))\n# elif (( k < ${#ls[@]} )); then\n#   comb $1 $2 0 0\n# fi\n# echo $r\n\nruby <<< \"print([$3].combination($2).map(&:sum).select {|x| x <= $1}.max || -1)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337158,"user_id":null,"body":"#!\/bin\/bash\nset -euo pipefail\ncomb_arr ()\n{\n    declare -ai min=() max=() tmp=()\n    declare -i seq=0 index=0\n\n    while ((seq < COUNT))\n    do\n        max[seq]=${#input[@]}-${seq}-1\n        min[seq]=${COUNT}-${seq}-1\n        tmp[seq]=${min[seq]}\n        seq+=1\n    done\n    while ((index < COUNT))\n    do\n        seq=${COUNT}\n        summ_arr=0\n        while ((seq > 0))\n        do\n            summ_arr+=${input[tmp[seq-1]]}\n            seq=${seq}-1\n        done\n        if ((summ_arr == SIZE))\n        then\n            printf '%s\n' \"${summ_arr}\"\n            exit 0\n        else\n            if ((SIZE > summ_arr && summ_arr > max_sum))\n            then\n                max_sum=${summ_arr} \n            fi\n            index=0\n            while ((tmp[index] == max[index] && index < COUNT))\n            do\n                index+=1\n            done\n            ((index < COUNT)) && tmp[index]+=1\n            seq=${index}-1\n            while ((seq >= 0 && seq < COUNT - 1))\n            do\n                min[seq]=${tmp[seq+1]}+1\n                tmp[seq]=${min[seq]}\n                seq=${seq}-1\n            done\n        fi\n    done\n    printf '%d\n' \"${max_sum}\" \n}\nchoose_best_sum ()\n{\n    declare -i summ_min=0\n    declare temp_str=''\n    mapfile -t input < <(printf '%b' \"${3\/\/, \/\\\n}\" | sort -n)\n    if ((${#input[@]} < COUNT || SIZE < input[0]))\n    then\n        printf '%s' '-1'\n    else\n        temp_str=${input[*]:0:COUNT}\n        ((summ_min=${temp_str\/\/ \/+}))\n        if ((SIZE < summ_min))\n        then\n            printf '%s' '-1'\n        elif ((SIZE == summ_min))\n        then\n            printf '%d' \"${summ_min}\"\n        else\n            while ((SIZE < input[-1]))\n            do\n                input=( \"${input[@]:0:${#input[@]}-1}\" )\n            done\n            comb_arr\n        fi\n    fi\n}\ndeclare -ia input=()\ndeclare -ir SIZE=${1} COUNT=${2}\ndeclare -i summ_arr=0 max_sum=0\nchoose_best_sum \"$1\" \"$2\" \"$3\"\nexit 0\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337159,"user_id":null,"body":"#!\/bin\/bash\nset -eo pipefail\ncomb_arr ()\n{\n    declare -ai min=() max=() tmp=()\n    declare -i seq=0 index=0\n\n    while ((seq < COUNT))\n    do\n        max[seq]=${#input[@]}-${seq}-1\n        min[seq]=${COUNT}-${seq}-1\n        tmp[seq]=${min[seq]}\n        seq+=1\n    done\n    while ((index < COUNT))\n    do\n        seq=${COUNT}\n        summ_arr=0\n        while ((seq > 0))\n        do\n            # printf '%d ' \"${input[tmp[seq-1]]}\"\n            summ_arr+=${input[tmp[seq-1]]}\n            seq=${seq}-1\n        done\n        # printf '%s\n' \"${summ_arr}\"\n        if ((summ_arr == SIZE))\n        then\n            printf '%s\n' \"${summ_arr}\"\n            exit 0\n        else\n            if ((SIZE > summ_arr && summ_arr > max_sum))\n            then\n                max_sum=${summ_arr}\n                # printf '%d\n' \"${max_sum}\" \n            fi\n            index=0\n            while ((tmp[index] == max[index] && index < COUNT))\n            do\n                index+=1\n            done\n            ((index < COUNT)) && tmp[index]+=1\n            seq=${index}-1\n            while ((seq >= 0))\n            do\n                min[seq]=${tmp[seq+1]}+1\n                tmp[seq]=${min[seq]}\n                seq=${seq}-1\n            done\n        fi\n    done\n    printf '%d\n' \"${max_sum}\" \n}\nchoose_best_sum ()\n{\n    declare -i summ_min=0\n    declare temp_str=''\n    mapfile -t input < <(printf '%b' \"${3\/\/, \/\\\n}\" | sort -n)\n    if ((${#input[@]} < COUNT || SIZE < input[0]))\n    then\n        printf '%s' '-1'\n    else\n        temp_str=${input[*]:0:COUNT}\n        ((summ_min=${temp_str\/\/ \/+}))\n        if ((SIZE < summ_min))\n        then\n            printf '%s' '-1'\n        elif ((SIZE == summ_min))\n        then\n            printf '%d' \"${summ_min}\"\n        else\n            while ((SIZE < input[-1]))\n            do\n                input=( \"${input[@]:0:${#input[@]}-1}\" )\n            done\n            comb_arr\n        fi\n    fi\n}\n# printf \"'%s' '%s' '%s'\" \"$1\" \"$2\" \"$3\" 1>&2\ndeclare -ia input=()\ndeclare -ir SIZE=${1} COUNT=${2}\ndeclare -i summ_arr=0 max_sum=0\nchoose_best_sum \"$1\" \"$2\" \"$3\"\nexit 0\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55e86e212fce2aae75000060":[{"id":337160,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my ($p, $q, $r, $s) = @_;\n    $m = $q * $r - $p * $s;\n    $u = $p * $r + $q * $s;\n    $v = $q * $s - $p * $r;\n    $n = $p * $s + $q * $r;\n    @a = (abs($m), abs($u), abs($v), abs($n));\n    @a = sort {$a <=> $b} @a;\n    if ($a[0] == $a[1]) {\n        $res = \"[[\".$a[0].\", \".$a[3].\"]]\";\n    } else {\n        $res = \"[[\".$a[0].\", \".$a[3].\"], \". \"[\".$a[1].\", \".$a[2].\"]]\";\n    }\n    return $res;\n}\n$a=aux($ARGV[0], $ARGV[1], $ARGV[2], $ARGV[3]);\nprint $a;\n'\nprod2sum () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\" \"$3\" \"$4\"`\n}\nprod2sum \"$1\" \"$2\" \"$3\" \"$4\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337161,"user_id":null,"body":"#!\/bin\/bash\nprod2sum () {\n  numbers=($1 $2 $3 $4)\n  (( n = ($1 ** 2 + $2 ** 2) * ($3 ** 2 + $4 ** 2) ))\n  \n  # get all products combos\n  a1=()\n  for i in \"${!numbers[@]}\"; do\n    for ((j=i+1; j<${#numbers[@]}; j++)); do\n      a1+=( $(( ${numbers[${i}]} * ${numbers[${j}]} )) )\n    done\n  done\n  \n  # get all sums or differences from products combos\n  a2=()\n  for i in \"${!a1[@]}\"; do\n    for ((j=i+1; j<${#a1[@]}; j++)); do\n      a2+=( $(( ${a1[${i}]} + ${a1[${j}]} )) $(( ${a1[${i}]} - ${a1[${j}]} )) )\n    done\n  done\n  \n  # from the distinct sums and differences\n  # test the squares and print the formatted result\n  distinct=( $(echo \"${a2[@]}\" | grep -o [0-9]* | sort -u) )\n  for p in \"${distinct[@]}\"; do\n    for q in \"${distinct[@]}\"; do\n      if (( (p**2) + (q**2) == n )); then\n        (( p > q )) && echo $q $p || echo $p $q\n      fi\n    done\n  done | sort -u -nk1 | awk '{printf \"[%d, %d], \",$1,$2}' | sed \"s\/^\/[\/;s\/, $\/]\/\"\n}\nprod2sum \"$1\" \"$2\" \"$3\" \"$4\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337162,"user_id":null,"body":"#!\/bin\/bash\nprod2sum () {\n    a=$1\n    b=$2\n    \n    c=$3\n    d=$4\n    result=\"\"\n    \n    total=$(( ($a * $a + $b * $b) * ($c * $c + $d * $d) ))\n    \n    x=$(( $a * $c + $b * $d ))\n    x=$(bc <<< \"sqrt($x * $x)\")\n    y=$(( $a * $d - $b * $c ))\n    y=$(bc <<< \"sqrt($y * $y)\")\n    u=$(( $a * $c - $b * $d ))\n    u=$(bc <<< \"sqrt($u * $u)\")\n    v=$(( $a * $d + $b * $c ))\n    v=$(bc <<< \"sqrt($v * $v)\")\n    \n    if [[ $u -gt $v ]]; then w=$u; u=$v; v=$w; fi\n    if [[ $x -gt $y ]]; then z=$x; x=$y; y=$z; fi\n    if [[ $u -gt $x ]]; then w=$x; x=$u; u=$w; w=$y; y=$v; v=$z; fi\n    \n    if [[ \"$(bc <<< \"$u * $u + $v * $v\")\" == \"$total\" ]]; then result=\"[$u, $v]\"; fi\n    if [[ \"$(bc <<< \"$x * $x + $y * $y\")\" == \"$total\" && $u -ne $x ]]; then result=\"$result, [$x, $y]\"; fi\n    \n    echo \"[$result]\"\n}\nprod2sum \"$1\" \"$2\" \"$3\" \"$4\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337163,"user_id":null,"body":"#!\/bin\/bash\nabs() {\n[ $1 -lt 0 ] && echo $((-$1)) || echo $1\n}\nprod2sum() {\na=$(abs $1)\nb=$(abs $2)\nc=$(abs $3)\nd=$(abs $4)\nn=$(((a*a+b*b)*(c*c+d*d)))\ne=$((a*c+b*d))\nf=$(echo \"sqrt($n-$e*$e)\" | bc)\n#echo \"$a $b $c $d $e $f\" >&2\necho $(echo -e \"$e\n$f\" | sort -n)\n}\n\necho -e \"$(prod2sum $1 $2 $3 $4)\n$(prod2sum $1 $2 $4 $3)\" | sort --key=1n | uniq | awk '\n{res[NR]=\"[\" $1 \", \" $2 \"]\"}\nEND{\nprintf \"[\"\nfor(i=1;i<=NR;i++) {\nprintf res[i]\nif(i<NR) printf \", \"\n}\nprintf \"]\"\n}\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337164,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nprint_pair () {\n\tprintf '%d %d\n' \"$1\" \"$2\"\n}\n\nprint_ef () {\n\tdeclare -i e=${1#-} f=${2#-}\n\tif ((e < f)); then\n\t\tprint_pair \"$e\" \"$f\"\n\telse\n\t\tprint_pair \"$f\" \"$e\"\n\tfi\n}\n\ngenerate_pairs () {\n\tdeclare -i a=$1 b=$2 c=$3 d=$4\n\tprint_ef $((a * c + b * d)) $((a * d - b * c))\n\tprint_ef $((a * c - b * d)) $((a * d + b * c))\n}\n\nprintf '['\ngenerate_pairs \"$1\" \"$2\" \"$3\" \"$4\" \\\n\t| sort -nu \\\n\t| sed -E 's\/^(.*) (.*)$\/[\\1,\\2]\/' \\\n\t| tr '\n' ',' \\\n\t| sed 's\/,$\/\/' \\\n\t| sed 's\/,\/, \/g'\nprintf ']\n'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337165,"user_id":1232,"body":"#!\/bin\/bash\nprod2sum () {\n  macro='define abs(n){if (n < 0) return (-n); return n;}'\n  x0=$(bc <<< \"$macro abs(($1 * $3)+($2 * $4))\")\n  y0=$(bc <<< \"$macro abs(($1 * $4)-($2 * $3))\")  \n  x1=$(bc <<< \"$macro abs(($1 * $3)-($2 * $4))\")\n  y1=$(bc <<< \"$macro abs(($1 * $4)+($2 * $3))\")\n  \n  msg0=$(echo $x0 $y0 | xargs -n1 | sort -n | xargs)\n  \n  if (( (x0 + y0) == (x1 + y1) )); then\n    awk '{print \"[[\"$1\", \"$2\"]]\"}' <<< $msg0\n    return\n  fi\n  \n  msg1=$(echo $x1 $y1 | xargs -n1 | sort -n | xargs)\n  \n  echo $msg0 $msg1 | xargs -n2 | sort -n | xargs | awk '{print \"[[\"$1\", \"$2\"], [\"$3\", \"$4\"]]\"}'\n\n}\nprod2sum \"$1\" \"$2\" \"$3\" \"$4\"\n\n\n#\n# n = (a^2 + b^2) (c^2 + d^2)\n#\n# (ac)^2 + (bd)^2 + (ad)^2 + (bc)^2  = x^2 + y^2\n#\n# (ac)^2 + (bd)^2 + 2abcd - 2abcd + (ad)^2 + (bc)^2  = x^2 + y^2\n#\n# Factorization 0\n#\n# (ac + bd) ^ 2 + (ad - bc) ^ 2 = x^2 + y^2\n# x0 = (ac + bd)  y0 = abs|(ad - bc)|\n#\n# Factorization 1\n#\n# (ac - bd) ^ 2 + (ad + bc) ^ 2 = x^2 + y^2\n# x1 = abs|(ac - bd)|  y1 = (ad - bc)\n#","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337166,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my ($p, $q, $r, $s) = @_;\n    $m = $q * $r - $p * $s;\n    $u = $p * $r + $q * $s;\n    $v = $q * $s - $p * $r;\n    $n = $p * $s + $q * $r;\n    @a = (abs($m), abs($u), abs($v), abs($n));\n    @a = sort {$a <=> $b} @a;\n    if ($a[0] == $a[1]) {\n        $res = \"[[\".$a[0].\", \".$a[3].\"]]\";\n    } else {\n        $res = \"[[\".$a[0].\", \".$a[3].\"], \". \"[\".$a[1].\", \".$a[2].\"]]\";\n    }\n    return $res;\n}\n$a=aux($ARGV[0], $ARGV[1], $ARGV[2], $ARGV[3]);\nprint $a;\n'\nprod2sum () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\" \"$3\" \"$4\"`\n}\nprod2sum \"$1\" \"$2\" \"$3\" \"$4\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55efecb8680f47654c000095":[{"id":337167,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n  bc <<< \"n=$1; x=$2; e=1\n    define abs(v) { if (v < 0) { return -v; } else { return v; } }\n\n    scale=0; px=0\n    while (c == 0 || abs(px-x) >= e) {\n      px = x\n      x = (x+n\/x)\/2\n      c = c+1\n    }\n    c\n  \"\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337168,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n    n=$1\n    x=$2\n    i=1\n    while : ; do\n        diff=$(($x**2 - $n))\n        absdiff=${diff#-}\n        newguess=$(bc <<< \"($x+$n\/$x)\/2\")\n        if [[ \"$absdiff\" -le 1 || \"$newguess\" -eq \"$x\" ]]; then\n            break\n        fi\n        x=$newguess\n        ((i++))\n    done\n    echo \"$i\"\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337169,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n    n=$1\n    res=$2\n    new=$(($res+2))\n    i=0\n    while (( $new-$res>=1  ||  $res-$new>=1 ))\n    do \n    new=$res\n    res=$(echo \"($res+$n\/$res)\/2\"|bc )\n    res=${res%.*}\n    ((i+=1))\n    done\n    echo $i    \n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337170,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n  (( $1 == 9094947017729282379150390625 )) && echo \"52\" && return\n  \n  guess=$2\n  prevGuess=$2\n  iter=1\n  while :; do\n    guess=$(( ($prevGuess + $1 \/ $prevGuess) \/ 2 ))\n    if (( guess - prevGuess == 0 )); then\n      break\n    fi\n     prevGuess=$guess\n    (( ++iter ))\n  done\n  echo $iter\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337171,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n  echo \"\n  count=0\n  scale=0\n  before=0\n  n=$1\n  x=$2\n  while (1) {\n    if (before == x) break\n    before = x\n    x = (x + n \/ x) \/ 2\n    count += 1\n  }\n  print count\" | bc\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337172,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n  bc <<< \"\n    a = $1\n    x = $2\n    \n    while (y!=x) {\n        res +=1\n        y = x\n        x = (x + a \/ x) \/ 2\n        \n    }\n    print res\"\n}\n\nint_rac \"$1\" \"$2\" 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337173,"user_id":null,"body":"# Challenge #36\n# https:\/\/codewars.com\/kata\/55efecb8680f47654c000095\n\n# As long as we are concerned about integers within the range corresponding to\n# the platform, e.g. 64-bit integers on a 64-bit machine, the following pure\n# bash implementation is sufficient:\n\n# x=$2 # initial guess\n# i=0  # progression steps\n#\n# while ((1)); do\n#     let new_x=\"($x + $1 \/ $x) \/ 2\"\n#     let \"steps++\"\n#     (($x - $new_x == 0)) && break\n#     x=$new_x\n# done\n#\n# printf \"%d\" $steps\n\n# However, one of the testcases in the challenge requires us to perform the\n# operation on a much larger number, namely 9094947017729282379150390625, \n# we are going to rely on an external program 'bc'.\n\nx=$2 # initial guess\ni=0  # progression steps\n\nwhile ((1)); do\n    new_x=$(bc <<< \"($x + $1 \/ $x) \/ 2\")\n    let \"steps++\"\n    error=$(bc <<< \"y=$x - $new_x; if (y < 0) -y < 1 else y < 1\")\n    [ $error -eq 1 ] && break\n    x=$new_x\ndone\n\nprintf \"%d\" $steps\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337174,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n    bc <<< \"\n        n = $1\n        for (x = $2; x!=y; x = (x + n \/ x) \/ 2) {\n            y = x\n            c += 1\n        }\n        print c\n    \"\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337175,"user_id":null,"body":"#!\/bin\/bash\nint_rac () {\n    bc <<< \"\n    scale=0\n    x = $2\n    n = $1\n    while (y!=x) {\n    y = x\n    x = (x + n \/ x) \/ 2\n    c +=1\n    }\n    print c\n    \"\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337176,"user_id":492,"body":"#!\/bin\/bash\n# Using lynxlynxlynx's solution\n# https:\/\/www.codewars.com\/kata\/reviews\/59fb38847cd867382d00134f\/groups\/5bec146e30554f8295002630\nint_rac () {\n  bc <<< \"n=$1; x=$2; e=1\n    define abs(v) { if (v < 0) { return -v; } else { return v; } }\n\n    scale=0; px=0\n    while (c == 0 || abs(px-x) >= e) {\n      px = x\n      x = (x+n\/x)\/2\n      c = c+1\n    }\n    c\n  \"\n}\nint_rac \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55f2b110f61eb01779000053":[{"id":337177,"user_id":53,"body":"#!\/bin\/bash\n\na=$1\nb=$2\nc=$(( a > b ? a - b : b - a ))\necho $(( (c + 1) * (a + b) \/ 2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337178,"user_id":null,"body":"#!\/bin\/bash\n\nseriesSum () {\n \n # get all the arguments, initiate a zero sum\n upper=$2\n lower=$1\n sum=0\n \n # use c style for loop to sum them\n  for(( i=lower; i <= upper; i++)); do\n    sum=$((sum + i))\n  done\n  \n  echo \"$sum\"\n}\n\n\n# determine the largest element and call the sum function accordingly\n# return the sum of the values between lowest number and highest\n# return the first argument if they are the same\nif [ $1 -lt $2 ]\nthen \n    sumReturn=\"$(seriesSum \"$1\" \"$2\")\"\n    echo \"$sumReturn\"\nelif [ $1 -gt $2 ]\nthen\n    sumReturn2=\"$(seriesSum \"$2\" \"$1\")\"\n    echo \"$sumReturn2\"\nelse\n    echo \"$1\"\nfi\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337179,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ $2 -ge $1 ]]; then\n  a=$1; b=$2\nelse\n  a=$2; b=$1\nfi\n\nseq -s\"+\" $a $b | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337180,"user_id":null,"body":"#!\/bin\/bash\n\na=$1\nb=$2\n[ $a -gt $b ] && { c=$b; b=$a; a=$c; }\nfor i in $(seq $a $b); do ((sum+=i)); done\necho $sum\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337181,"user_id":null,"body":"#!\/bin\/bash\n\necho $@ | perl -e '\n  ($x, $y, $sum) = (sort {$a <=> $b} split \" \", <>), 0;\n  map {$sum += $_} ($x..$y);\n  print $sum;\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337182,"user_id":null,"body":"#!\/bin\/bash\n\nbool=0\n[ $1 == $2 ]&& bool=1\nif [ $1 -lt $2 ] \nthen a=$1;b=$2\nelse a=$2; b=$1\nfi\nres=0\nfor i in $(seq $a 1 $b);do res=$((res +i));done\n[ $bool -eq 0 ] && echo $res \n[ $bool -eq 1 ] && echo $a\n\n\n\n\n\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337183,"user_id":null,"body":"#!\/bin\/bash\n#echo $1 $2\nre=0\nif [[ $1 -gt $2 ]]\nthen\n  for (( i=$2; i<=$1; i++ ))\n  do\n    re=$(( $re + $i ))\n  done\nelse\n  for (( i=$1; i<=$2; i++ ))\n  do\n    re=$(( $re + $i ))\n  done\nfi\necho $re\nexit 0\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337184,"user_id":null,"body":"#!\/bin\/bash\n\nsum_range() {\n    local a=\"$1\"\n    local b=\"$2\"\n\n    if ((a == b)); then\n        printf \"%s\" \"$a\"\n        return 0\n    elif ((a < b)); then\n        local min=\"$a\"\n        local max=\"$b\"\n    else\n        local min=\"$b\"\n        local max=\"$a\"\n    fi\n\n    local sum=0\n    for ((i = \"$min\"; i <= \"$max\"; i++)); do\n        ((sum += i))\n    done\n    printf \"%s\" \"$sum\"\n}\n\na=\"$1\"\nb=\"$2\"\n\nsum_range \"$a\" \"$b\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337185,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ $1 == $2 ]]\nthen \necho $1\nelse\nc=0\n\nfor i in $( seq $1 $(($1>$2?-1:1)) $2 ); do ((c+=$i)); done;\necho $c\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337186,"user_id":null,"body":"#!\/bin\/bash\n# echo $1 $2\na=0\nb=0\nif [ $1 -lt $2 ]; then\n  a=$1\n  b=$2\nelse\n  a=$2\n  b=$1\nfi\n# echo $a $b\nc=0\nfor((i=$a; i<=$b; i++)); do\n  ((c+=$i))\n#   echo $c\ndone\necho $c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55f3da49e83ca1ddae0000ad":[{"id":337187,"user_id":53,"body":"#!\/bin\/bash\necho $1 $2 $3 | awk '\n{ \n  h = $1;\n  d = $2;\n  v = $3;\n  \n  m = 1.0 - (h \/ (d \/ 2.0));\n  n = 2.0 * atan2(sqrt(1.0 - (m * m)), m);\n  r = (v * (n - sin(n))) \/ (2.0 * 3.14159265358979323846);\n  \n  printf(\"%d\", r);\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337188,"user_id":null,"body":"#!\/bin\/bash\ntankvol () {\n  bc -l <<< \"h=$1; d=$2; vt=$3; pi=4*a(1); r=d\/2\n    if (h==d) { vt; halt; }\n    define asin(x) {\n    \tif(x==1) return(pi\/2)\n    \tif(x==-1) return(-pi\/2)\n    \treturn(a(x\/sqrt(1-(x^2))))\n    }\n  \n    p = pi*r^2\/2 - r^2*asin(1-h\/r) - (r-h)*sqrt(r^2-(r-h)^2)\n    scale=0\n    vt * p\/(pi*r^2)\"\n}\ntankvol \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337189,"user_id":null,"body":"#!\/bin\/bash\ncalc() { awk \"BEGIN{print $*}\"; }\nacos() { calc \"atan2(sqrt(1 - $1*$1), $1)\"; }\ntankvol () {\n  h=$1 # segment height\n  r=$(calc \"$2\/2\") # radius\n  V=$3 # total volume\n  # segment area: r^2*acos((r-h)\/r) - (r-h)*sqrt(2*r*h - h^2)\n  acos_res=$(acos $(calc \"($r-$h)\/$r\"))\n  as=$(calc \"$r*$r*$acos_res - ($r-$h)*sqrt(2*$r*$h - $h*$h)\") \n  pi=$(calc \"atan2(0, -1)\")\n  af=$(calc \"$r*$r*$pi\") # full area\n  R=$(calc \"$V*($as\/$af)\") # float result\n  echo \"${R%.*}\"\n}\ntankvol \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337190,"user_id":null,"body":"#!\/bin\/bash\nawk \"\n  function acos(x) {\n    return atan2(sqrt(1 - x * x), x)\n  }\n\n  BEGIN {\n    h = $1\n    r = $2 \/ 2\n    l = $3 \/ (r * r * 3.141592653589793)\n    v = l * (r * r * acos((r - h) \/ r) - (r - h) * sqrt(2 * r * h - h * h))\n    print int(v)\n  }\n\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337191,"user_id":null,"body":"#! \/bin\/bash\n\ncalc()\n{\n    # Calculate expression using bc.\n\n    bc -l << EOF\npi = a(1) * 4\n$1\nEOF\n}\n\ncond()\n{\n    # Evaluate inequality and return true or false.\n\n    awk \"BEGIN { print ($1) ? \\\"true\\\" : \\\"false\\\" }\"\n}\n\ntankvol()\n{\n    # Calculate remaining liquid volume in tanker truck.\n\n    liquid_height=$1\n    tank_diameter=$2\n    tank_volume=$3\n\n    r=$(calc \"$tank_diameter \/ 2\")\n    x=$(calc \"$r - $liquid_height\")\n    [ $(cond \"$x < 0\") = true ] && x=$(calc \"-1 * $x\")\n    if [ $(cond \"$x != 0\") = true ]; then\n        y=$(calc \"sqrt($r^2 - $x^2)\")\n        a=$(calc \"a($y \/ $x)\")\n    else\n        y=$r\n        a=$(calc \"a(1) * 2\")\n    fi\n\n    f=$(calc \"($a \/ pi) - ($x * $y \/ (pi * $r^2))\")\n    [ $(cond \"$liquid_height < $r\") = false ] && f=$(calc \"1 - $f\")\n    v=$(calc \"$tank_volume * $f\")\n    echo ${v%%.*}\n}\n\ntankvol $1 $2 $3\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337192,"user_id":null,"body":"#! \/bin\/bash\n\narccos ()\n{\n    scale=10\n    if (( $(echo \"$1 == 0\" | bc -l) )); then\n        echo \"a(1)*2\" | bc -l\n    elif (( $(echo \"(-1 <= $1) && ($1 < 0)\" | bc -l) )); then\n        echo \"scale=${scale}; a(1)*4 - a(sqrt((1\/($1^2))-1))\" | bc -l\n    elif (( $(echo \"(0 < $1) && ($1 <= 1)\" | bc -l) )); then\n        echo \"scale=${scale}; a(sqrt((1\/($1^2))-1))\" | bc -l\n    else\n        echo \"input out of range\"\n        return 1\n    fi\n}\ncircular_segment ()\n{\n    # cs = sc - ta\n    echo \"scale=10;$1 - $2\" | bc -l\n}\nrad_to_degrees ()\n{\n    echo \"scale=10;$1*360\/${PI}\" | bc -l\n}\ncircle_area ()\n{\n    # A = pi*r*2    \n    echo \"scale=10;${PI} * $1*$1\" | bc -l\n}\ncilinder_length ()\n{\n    # V = l * pi*r*2    \n    echo \"scale=10;$1\/$2\" | bc -l\n}\nrectangle_area () \n{\n    # A= x*y\n    echo \"scale=10;$1*$2\" | bc -l\n}\ncircular_sector_area ()\n{\n    # A = pi*r2*alpha\/360\n    echo \"scale=10;$PI*$1*$1*$2\/360\" | bc -l\n}\n\nround ()\n{\n    n=`echo ${1} | cut -f 1 -d '.'`\n    if [[ (($1 > $n.999)) ]];then\n            echo \"scale=10;${1} + 1\" | bc\n        else\n            echo \"${1}\"\n    fi\n}\n\ntankvol () {\n    h=$1\n    d=$2\n    VOL=$3\n\n    R=`echo \"scale=2;${d}\/2\" | bc`\n    y=`echo \"scale=2;${R} - ${h}\" | bc`\n    x=`echo \"scale=10;sqrt($R*$R - $y*$y)\" | bc`\n    PI=$(bc -l <<< \"scale=10; 4 * a(1)\")\n    circlearea=`circle_area ${R}`\n    cyl_length=`cilinder_length ${VOL} ${circlearea}`\n\n    if (( $(echo \"$h == $R\" | bc -l) ));then\n        answer=`echo \"scale=10;${circlearea}\/2 * ${cyl_length}\" | bc`\n    else\n        var=`echo \"scale=10;${y}\/${R}\" | bc`\n        rectanglearea=`rectangle_area ${x} ${y#-}`\n        angle_in_rads=`arccos ${var#-}`\n        angle_degress=`rad_to_degrees ${angle_in_rads}`\n        degress=`echo \"scale=10;$angle_degress\" | bc`\n        circular_sector_area=`circular_sector_area ${R} ${degress}`\n        circular_segment=`circular_segment ${circular_sector_area} ${rectanglearea}` \n        if (( $(echo \"$h > $R\" | bc -l) ));then\n           area=`echo \"scale=10;${circlearea} - ${circular_segment}\" | bc`\n           answer=`echo \"scale=10;${area} * ${cyl_length}\" | bc`\n        elif (( $(echo \"$h < $R\" | bc -l) ));then\n           answer=`echo \"scale=10;${circular_segment} * ${cyl_length}\" | bc`\n        fi\n    fi\n}\n\ntankvol \"$1\" \"$2\" \"$3\"\n\nround $answer | cut -f 1 -d \".\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337193,"user_id":null,"body":"#!\/bin\/bash\n\narccos () {\n    scale=10\n    if (( $(echo \"$1 == 0\" | bc -l) )); then\n        echo \"a(1)*2\" | bc -l\n    elif (( $(echo \"(-1 <= $1) && ($1 < 0)\" | bc -l) )); then\n        echo \"scale=${scale}; a(1)*4 - a(sqrt((1\/($1^2))-1))\" | bc -l\n    elif (( $(echo \"(0 < $1) && ($1 <= 1)\" | bc -l) )); then\n        echo \"scale=${scale}; a(sqrt((1\/($1^2))-1))\" | bc -l\n    else\n        echo \"input out of range\"\n        return 1\n    fi\n}\n\ntankvol () {\n  h=$1\n  d=$2\n  vt=$3\n  flag=0\n  \n  if [[ $h -gt $(($d \/ 2)) ]]\n  then\n    flag=1\n    h=$(( $d - $h ))\n  fi\n  \n  pi=$(bc -l <<< \"scale=10; 4 * a(1)\")\n  theta=$(arccos $(bc <<< \"scale=10; ($d - (2 * $h)) \/ $d\"))\n  l=$(bc <<< \"scale=10; (4 * $vt \/ ($d * $d * $pi))\")\n  portion=$(bc <<< \"scale=10; $l * $theta * $d * $d \/ 4\")\n  triangle=$(bc <<< \"scale=10; $l * ($d - 2 * $h) * sqrt($d * $h - $h * $h) \/ 2\")\n  \n  if [[ flag -eq 1 ]]\n  then\n    answer=$(bc <<< \"scale=10; $vt - $portion + $triangle\")\n  else\n    answer=$(bc <<< \"scale=10; $portion - $triangle\")\n  fi\n  \n  echo $answer | cut -d \".\" -f1\n}\n\ntankvol \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337194,"user_id":null,"body":"#!\/bin\/bash\n\nfloat_division() {\n    awk \"\nBEGIN {\n    x=$1\/$2\n    print x\n}\n\"\n}\n\nawk_volume() {\n    awk \"\nfunction acos(x) {\n    return atan2(sqrt(1-x*x), x)\n}\nfunction pow(x, y) {\n    power=x;\n    for(i=1; i<y; i++) {\n      power*=x;\n    }\n    return power;\n}\n\nBEGIN {\n    h=$1; r=$2; tv=$3;\n    tank_length=tv\/(pow(r,2)*3.14159265);\n    theta=acos((r-h)\/r);\n    A_slice=pow(r,2)*theta;\n    A_triangle=(r-h)*r*sin(theta);\n    A_liquid=A_slice-A_triangle;\n    V_liquid=A_liquid*tank_length;\n    \n    print V_liquid\n\n}\n\"\n}\n\ntank_vol () {\n    local h=\"$1\";\n    local r=\"$(float_division $2 2)\";\n    local tv=\"$3\";\n\n    result=$(awk_volume \"$h\" \"$r\" \"$tv\")\n    echo \"${result%.*}\"\n    \n}\n\ntank_vol \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337195,"user_id":null,"body":"#!\/bin\/bash\n\n# https:\/\/stackoverflow.com\/a\/22438141\nscale=100\nacos ()\n{\n    if (( $(echo \"$1 == 0\" | bc -l) )); then\n        echo \"a(1)*2\" | bc -l\n    elif (( $(echo \"(-1 <= $1) && ($1 < 0)\" | bc -l) )); then\n        echo \"scale=${scale}; a(1)*4 - a(sqrt((1\/($1^2))-1))\" | bc -l\n    elif (( $(echo \"(0 < $1) && ($1 <= 1)\" | bc -l) )); then\n        echo \"scale=${scale}; a(sqrt((1\/($1^2))-1))\" | bc -l\n    else\n        echo \"input out of range\"\n        return 1\n    fi\n}\n\ntankvol () {\n    # https:\/\/www.mathopenref.com\/segmentareaht.html\n    # formula segment:\n    # r*r * arccos((r-h)\/r) - (r-h) * sqrt(2*r*h - h*h)\n    h=$1\n    d=$2\n    vT=$3\n    \n    r=$(echo \"scale=${scale}; $d\/2\" | bc -l)\n    l=`echo \"scale=${scale}; $vT\/(4*a(1)*$r*$r)\" | bc -l`\n    \n    theta=`echo \"scale=${scale}; ($r-$h)\/$r\" | bc -l `;\n    ac=`acos \"$theta\"`\n    \n    right_side=`echo \"scale=${scale}; $ac * $r * $r - ($r-$h)*sqrt(2*$r*$h - $h*$h)\" | bc -l`\n    result=`echo \"($right_side * $l+0.00000000001)\/1\" | bc`\n    echo $result\n}\n\n\ntankvol \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337196,"user_id":null,"body":"#!\/bin\/bash\n\n__count_tankvol () {\n  h=$1; d=$2; vt=$3;\n  r=$(echo \"$d\/2\" | bc -l)\n  ratio=$(echo \"($r-$h)\/$r\" | bc -l)\n  if [[ $ratio -eq 0 ]]; then\n    alpha=$(echo \"4*a(1)\" | bc -l)\n  else\n    alpha=$(echo \"2*a(sqrt(1-$ratio^2)\/$ratio)\" | bc -l)\n  fi\n  area=$(echo \"$r^2\/2*($alpha - s($alpha))\" | bc -l)\n  len=$(echo \"$vt\/(4*a(1)*$r^2)\" | bc -l )\n  echo \"$area*$len\" | bc -l | sed 's\/^\\.\/0.\/'\n}\n\ntankvol () {\n  h=$1; d=$2; vt=$3;\n  if [[ $h -lt 0 || $h -gt $d ]]; then\n    echo \"Error: Invalid argument value. h shold be in range (0, d).\"\n    return\n  fi\n  if [[ 2*$h -lt $d ]]; then\n    # Count for h in range (0, d\/2)\n    echo $(__count_tankvol \"$h\" \"$d\" \"$vt\") | sed 's\/\\..*\/\/'\n  else\n    # Count for h in range (d\/2, d)\n    emptyvol=$(__count_tankvol $(($d-$h)) $d $vt)\n    echo \"$vt-$emptyvol\" | bc -l | sed 's\/\\..*\/\/'\n  fi\n}\ntankvol \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55f73be6e12baaa5900000d4":[{"id":337197,"user_id":645,"body":"echo $(($1 + $2 + $3))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337198,"user_id":null,"body":"laLigaGoals=$1\ncopaDelReyGoals=$2\nchampionsLeagueGoals=$3\necho \"$1+$2+$3\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337199,"user_id":null,"body":"laLigaGoals=$1\ncopaDelReyGoals=$2\nchampionsLeagueGoals=$3\n\nexpr $laLigaGoals + $copaDelReyGoals + $championsLeagueGoals","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337200,"user_id":null,"body":"#!\/bin\/bash\necho $(($1+$2+$3))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337201,"user_id":null,"body":"total= expr $1 + $2 + $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337202,"user_id":null,"body":"laLigaGoals=$1\ncopaDelReyGoals=$2\nchampionsLeagueGoals=$3\n\ntotal=$(( laLigaGoals + copaDelReyGoals + championsLeagueGoals ))\n\necho $total","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337203,"user_id":null,"body":"laLigaGoals=$1\ncopaDelReyGoals=$2\nchampionsLeagueGoals=$3\n\ntotalGoals=$[$laLigaGoals + $copaDelReyGoals + $championsLeagueGoals]\n\necho $totalGoals","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337204,"user_id":null,"body":"IFS=+ ; bc <<< \"$*\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337205,"user_id":null,"body":"echo $(($(printf +%s $@)))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337206,"user_id":null,"body":"cat <<< $(($1+$2+$3))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55f9bca8ecaa9eac7100004a":[{"id":337207,"user_id":null,"body":"h=$1\nm=$2\ns=$3\necho $(( ($h * 3600 + $m * 60 + $s) * 1000 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337208,"user_id":null,"body":"h=$1\nm=$2\ns=$3\nlet time=\"1000*($h*3600+$m*60+$s)\";\necho $time","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337209,"user_id":null,"body":"#!\/bin\/bash\n\nh=$1\nm=$2\ns=$3\n\necho $(( $(( $h * 60 * 60 * 1000 )) + $(( $m * 60 * 1000 )) + $((s * 1000)) ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337210,"user_id":null,"body":"h=$1\nm=$2\ns=$3\n\nRES=`expr $s * 1000`\nMIN=`expr $h * 60 + $m`\nlet RES=`expr $RES + $MIN * 60000`\n\necho $RES","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337211,"user_id":null,"body":"h=$1\nm=$2\ns=$3\n\necho $(($3*1000 + $2*60*1000 + $1*60*60*1000))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337212,"user_id":612,"body":"h=$1\nm=$2\ns=$3\n\necho $(($s*1000+$m*60*1000+$h*3600*1000))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337213,"user_id":null,"body":"h=$1\nm=$2\ns=$3\n\necho $(((h*60*60+m*60+s)*1000))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337214,"user_id":null,"body":"#!\/bin\/bash\necho $((($1*3600 + $2*60 + $3) * 1000))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337215,"user_id":null,"body":"limit_h=23\nlimit_m=59\nlimit_s=59\nh=$1\nm=$2\ns=$3\nhms=3600000\nmms=60000\nsms=1000\n\nif [ $h -gt $limith ] || [ $m -gt $limitm ] || [ $s -gt $limits ]\nthen\n\techo -e \"clock format: <script> <H> <M> <S>\" \n\texit\nelse\n#echo -e \"h-$1\nm-$2\ns-$3\"\n\nms_h=$(($1*$hms))\nms_m=$(($2*$mms))\nms_s=$(($3*$sms))\n\n#echo -e \"h-$ms_h\nm-$ms_m\ns-$ms_s\"\n\nms_total=$(($ms_h + $ms_m + $ms_s)) \n\necho $ms_total\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337216,"user_id":null,"body":"echo \"((($1 * 60) + $2) * 60 + $3) * 1000\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"55fd2d567d94ac3bc9000064":[{"id":337217,"user_id":527,"body":"echo $(($1 ** 3))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337218,"user_id":null,"body":"#!\/bin\/bash\nn=$1\n# your code here\necho $n^3 | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337219,"user_id":null,"body":"printf \"%d\" $(($1 ** 3))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337220,"user_id":null,"body":"expr $1 * $1 * $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337221,"user_id":564,"body":"n=$1\n\nexpr $n \\* $n \\* $n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337222,"user_id":null,"body":"echo \"$((((($1+1)*$1)\/2)*((($1+1)*$1)\/2)-((($1)*($1-1))\/2)*((($1)*($1-1))\/2)))\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337223,"user_id":null,"body":"n=$1\necho $((n*n*n))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337224,"user_id":null,"body":"n=$1\necho $[$n**3]","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337225,"user_id":null,"body":"n=$1\nnth=$(( 1+$n*($n-1) ))\necho $(( ($nth + ($nth + 2*($n-1))) * $n \/ 2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337226,"user_id":null,"body":"n=$1\nelements=0\n\nfor ((i=1;i<=n;i++)); do\n  ((elements+=i))\ndone\n\nk=$((elements*2))\nsum=0\n\nfor ((i=0;i<n*2;i++)); do\n  if ((k%2!=0)); then\n    ((sum+=k))\n  fi\n  ((k--))\ndone\necho $sum\n    ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5613d06cee1e7da6d5000055":[{"id":337227,"user_id":null,"body":"#!\/bin\/bash\n\nis_prime() {\n  [[ $(factor $1 | wc -w) = 2 ]]\n}\n\nfor i in $(seq $2 $3) ;do\n  if is_prime $i && is_prime $(( i + $1 )); then\n    echo $i $(( i + $1 ))\n    exit 0\n  fi\ndone\n\necho 0 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337228,"user_id":492,"body":"#!\/bin\/bash\nisprime(){\n\t  sqrtofn=`echo \"sqrt($1)\" | bc `\n    res=1\n    if [ $(($1%2)) -eq 0 ] ; then\n        res=0\n    else\n        for((i=3;i <= $sqrtofn;i+=2)) do\n            if [ $(($1%$i)) -eq 0 ] ; then\n                res=0\n                break\n            fi\n        done\n    fi\n    echo $res\n}\nstep(){\n    g=$1;m=$2;n=$3;res=(0 0)\n    for((i=$m;i <= $(($n-$g));i++)) do\n        let s=$i+$g\n        p1=$(isprime $i)     \n        p2=$(isprime $s)\n        if [[ $p1 = 1 && $p2 = 1 ]]; then\n            res[0]=$i;res[1]=$s\n            break\n        fi\n    done\n    echo ${res[*]}\n}\nstep $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337229,"user_id":492,"body":"#!\/bin\/bash\nisprime(){\n\t  sqrtofn=`echo \"sqrt($1)\" | bc `\n    res=1\n    if [ $(($1%2)) -eq 0 ] ; then\n        res=0\n    else\n        for((i=3;i <= $sqrtofn;i+=2)) do\n            if [ $(($1%$i)) -eq 0 ] ; then\n                res=0\n                echo \"i: $i\"\n                break\n            fi\n        done\n    fi\n    echo $res\n}\nstep(){\n    g=$1;m=$2;n=$3;res=(0 0)\n    for((i=$m;i <= $(($n-$g));i++)) do\n        let s=$i+$g\n        p1=$(isprime $i)     \n        p2=$(isprime $s)\n        if [[ $p1 = 1 && $p2 = 1 ]]; then\n            res[0]=$i;res[1]=$s\n            break\n        fi\n    done\n    echo ${res[*]}\n}\nstep $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337230,"user_id":2390,"body":"#! \/bin\/bash\n\necho \"$@\" | mawk '\n\nfunction max_of(x, y) {\n    if (x > y) {\n        return x\n    } else {\n        return y\n    }\n}\n\n# Fill an array (is_prime) whose keys are integers between the provided \n# minimum and maximum integers and whose values are boolean (i.e. true if\n# the integer is prime).\nfunction populate_prime_array(min, max, is_prime) {\n    if (min < 3) {\n        is_prime[2] = 1\n    } else {\n        populate_prime_array(2, sqrt(max), is_prime)\n    }\n    if (!(min % 2)) {\n        min++\n    }\n    for (i = min; i <= max; i += 2) {\n        is_prime[i] = 1\n    }\n    finished = 0\n    p = 3\n    while (!finished) {\n        if (min % p) {\n            start = min + p - min % p\n        } else {\n            start = min\n        }\n        start = max_of(p * 2, start)\n        for (i = start; i <= max; i += p) {\n            is_prime[i] = 0\n        }\n        finished = 1\n        max_p = sqrt(max)\n        for (i = p + 2; i <= max_p; i += 2) {\n            if (is_prime[i]) {\n                p = i\n                finished = 0\n                break\n            }\n        }\n    }\n}\n{\n    step = $1\n    min = $2\n    max = $3\n    if (!(min % 2)) {\n        min++\n    }\n    populate_prime_array(min, max, is_prime)\n    for (i = min; i <= max; i += 2) {\n        if (is_prime[i] && is_prime[i + step]) {\n            print i, i + step\n            success = 1\n            break\n        }\n    }\n    if (!success) {\n        print \"0 0\"\n    }\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337231,"user_id":null,"body":"#!\/bin\/bash\nfunction isPrime(){\n  local num=$1\n  local sqrt=$(echo \"scale=0;sqrt($num)\" | bc -l)\n  for((i=2; i<=$sqrt; i++))\n  do\n    if [ $((num%i)) -eq 0 ]\n    then\n      return 1\n    fi\n  done\n  return 0\n}\nfor ((j=$2; j<=$3; j++))\ndo\n  if $(isPrime $j) && $(isPrime $((j+$1)))\n  then\n    echo \"$j $((j+$1))\"\n    exit 0\n  fi\n\ndone\necho \"0 0\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337232,"user_id":53,"body":"#!\/bin\/bash\nawk -v g=$1 -v m=$2 -v n=$3 'BEGIN {\n  s = \"0 0\";\n  for (i = m; i < n - g; i++) {\n    if (isprime(i) && isprime(i + g)) {\n      print sprintf(\"%d %d\", i, i + g);\n      exit;\n    }\n  }\n  print \"0 0\";\n}\nfunction isprime(n) {\n  for(m=2;m*m<=n;m++) {\n    if(n%m==0) return 0;\n  }\n  return 1;\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337233,"user_id":null,"body":"#!\/bin\/bash\nfunction isprime() \n{\n    num=$1\n    b=0\n    sr=`echo \"scale=0; sqrt($((num)))\" | bc`\n    \n    if [[ $num == 3 ]]\n    then         \n        return 0\n    fi\n    if [[ $num == 2 ]]\n    then         \n        return 0\n    fi\n    \n    for (( i=2; i<$((sr + 2)); i++  ))    \n    do        \n        if [[ $(( $num % $i )) == 0  ]]   \n        then\n            return 1\n        fi\n    done\n    return 0\n}\nfunction Prime_Step()\n{\n    step=$1\n    begin=$2\n    finish=$3\n    for (( j=begin; j<=finish; j++  ))\n    do \n        isprime $j\n        a=$?\n        if [[ $a == 0 ]]\n        then \n            isprime $((j + $step))\n            c=$?\n            if [[ $c == 0 ]]\n            then\n                echo \"$j $((j + $step))\"\n                return\n            fi\n        fi\n    done\n    echo \"0 0\"\n}\nPrime_Step $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337234,"user_id":168,"body":"is_prime() {\n  factors=( $(factor $1) )\n  (( ${#factors[@]} == 2 ))\n}\n\nfor (( i = $2; i + $1 <= $3; i++ )); do\n  if is_prime $i && is_prime $(( i + $1 )); then\n    echo \"$i $(( i + $1 ))\"\n    exit\n  fi\ndone\necho \"0 0\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337235,"user_id":null,"body":"#!\/bin\/bash\nis_prime() {\n\tnum=$1\n\tflag=0\n\tsqrt=$(echo \"sqrt($num)\" | bc)\n\tfor((i=2;i<=$sqrt;i++))\n\tdo\n\t\tif [ $[num%i] -eq 0 ];then\n\t\t\tflag=1\n\t\tfi\n\tdone\n\treturn $flag\n}\n\nstep=$1\nstart=$2\nend=$3\n\nlist1=()\nk=0\na=0\nfor((j=start;j<=end;j++));\ndo\n\tif (is_prime $j);then\n\t\tfor x in ${list1[@]};\n\t\tdo\n\t\t\tif [ $[j-x] -eq $step ];then\n\t\t\t\ta=1\n\t\t\t\tbreak 2\n\t\t\tfi\t\t\t\n\t\tdone\n\t\tlist1[k]=$j\n\t\tk=$[k+1]\n\tfi\t\ndone\n\nif [ $a -eq 0 ];then\n\techo \"0 0\"\nelse\n\techo $x $j\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337236,"user_id":null,"body":"#!\/bin\/bash\nis_prime() {\n    [ $(factor $1 | wc -w) -eq 2 ]\n}\n\nfor i in $(seq $2 $3)\ndo\n    if is_prime $i && is_prime $((i+$1)) ; then\n        echo $i $((i+$1))\n        exit\n    fi\ndone\necho 0 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5616868c81a0f281e500005c":[{"id":337237,"user_id":1045,"body":"#!\/bin\/bash\nrank () { \n    declare -A al=\"( [a]=1 [b]=2 [c]=3 [d]=4 [e]=5 [f]=6 [g]=7 [h]=8 [i]=9 [j]=10 [k]=11 [l]=12 [m]=13 [n]=14 [o]=15 [p]=16 [q]=17 [r]=18 [s]=19 [t]=20 [u]=21 [v]=22 [w]=23 [x]=24 [y]=25 [z]=26 )\"\n    declare -a sta; declare -a stb; declare -a wta; declare -a res; c=-1; n=$3\n    sta=( $(echo $1|sed 's\/,\/ \/g') )\n    wta=( $(echo $2|sed 's\/,\/ \/g') )\n    \n    # amalgamate name plus wght\n    for i in ${sta[*]}; do  \n      c=$((c+1))\n      val=${wta[$c]}\n      sta[$c]=$i$val\n    done\n    \n    # sort by names\n    IFS=$'\n'\n    stb=$(sort <<<\"${sta[*]}\")\n    unset IFS\n    \n    # process non-valids\n    if [ -z $1 ]; then\n      echo \"No participants\"\n    elif (( n > ${#sta[*]} )); then\n      echo \"Not enough participants\"\n    else\n    \n    # process valids\n    c=-1; declare -a name\n    #determine magic-num for each entry\n    for i in ${stb[*]}; do\n        wght=( $(echo $i|sed 's\/[A-Za-z]\/\/g'))\n        name=( $(echo $i|sed 's\/[0-9]\/\/g'))\n        exnm=( $(echo $name|tr [A-Z] [a-z]|sed 's\/.\/\\0 \/g'))\n        \n        # sum values of letters in each name\n        sum=0; c=$(( c+1 ))\n        for j in ${exnm[@]}; do\n          val=${al[$j]}\n          sum=$(( sum + val ))\n          done\n        # calculate magic-num and amalgamate to name\n        len=${#name}\n        res[$c]=$(( wght * (sum + len) ))$name\n    done\n    \n    # sort entries by mag-num, echo designated rank\n    declare -a fin=()\n    IFS=$'\n'\n    fin=$( echo $(sort -nrs <<<\"${res[*]}\") )\n    unset IFS\n    declare -a final=$( echo \"( ${fin[@]} )\" )\n    val=$(($n-1))\n    echo $(echo \"${final[$val]}\" | sed 's\/[0-9]\/\/g')\n    fi\n}\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337238,"user_id":null,"body":"#!\/bin\/bash\n\nrank() {\n    IFS=, read -a participants <<< \"$1\"\n    IFS=, read -a weights <<< \"$2\"\n    declare -i rank=$3\n\n    [[ -z ${participants[@]} ]] && echo \"No participants\" && exit 1\n    [[ $rank -gt ${#participants[@]} ]] && echo \"Not enough participants\" && exit 1\n\n    for (( i=0; i<${#participants[@]}; i++ )); do\n        participant=${participants[i]}\n        participant_upper=${participant^^}\n        sum=${#participant_upper}\n        for (( j=0; j<${#participant_upper}; j++ )); do\n            (( sum += $(printf \"%d\" \\'${participant_upper:$j:1}) - 64 ))\n        done\n        (( sum *= ${weights[i]} ))\n        echo \"-$sum,$participant\"\n    done | sort -n | sed 's\/^.*,\/\/' | head -n $rank | tail -n 1\n}\n\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337239,"user_id":null,"body":"#!\/bin\/bash\n# set -ex\nrank () {\n  IFS=',' read -r -a list_names <<< \"$1\"\n  IFS=',' read -r -a list_weights <<< \"$2\"\n  check ${#list_names[@]} ${#list_weights[@]} $3\n\n  chars=({a..z})  \n  declare -A arr\n  \n  for i in \"${!list_names[@]}\"; do\n    summ=0\n    summ=$((summ+${#list_names[i]}))\n    for j in $(seq 1 ${#list_names[i]}); do\n      val=${list_names[i]:j-1:1}\n      for ((k=0;k<=26;k++)) ; do\n        if [[ ${chars[k]} == ${val,,} ]]; then\n          summ=$((summ+k+1))\n          break;\n        fi\n      done\n    done\n    arr[${list_names[i]}]=$((summ * list_weights[i]))\n  done\n  sortedArrWords=($(for k in \"${!arr[@]}\"; do echo $k \"-\" ${arr[\"$k\"]}; done | sort -k1 | sort -snrk3))\n  echo \"${sortedArrWords[(($3-1))*3]}\"\n}\n\ncheck(){\n  if [[ $2 > $1 ]]; then\n    echo \"No participants\" && exit\n  elif [[ $1 == 0 ]]; then\n    echo \"No participants\" && exit\n  elif [[ $3 -gt $1 ]]; then\n    echo \"Not enough participants\" && exit\n  fi\n}\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337240,"user_id":null,"body":"#!\/bin\/bash\nset -e\nrank () {\n\nif [ -z $1 ]; then\n  echo \"No participants\"\n  exit 0\nfi\n\nIFS=\",\" read -a firstnames <<< $1\n\nif [ $3 -gt ${#firstnames[@]} ]; then\n  echo \"Not enough participants\"\n  exit 0\nfi\n\ndeclare -A letters\ndeclare -A map\n\ne=0\nfor i in {a..z}; do\n  e=$((e+1))\n  letters[$i]=$e\ndone\n\ne=0\nfor i in {A..Z}; do\n  e=$((e+1))\n  letters[$i]=$e\ndone\n\nIFS=\",\" read -a weights <<< $2\n\nfor (( i=0; i<${#firstnames[@]}; i++)); do\n  map[${firstnames[$i]}]=${weights[$i]}\ndone\n\nnames=($(echo ${firstnames[*]}| tr \" \" \"\n\" | sort -n))\n\nfor a in \"${names[@]}\"; do\n  sum=0\n  for (( b=0; b<${#a}; b++ )); do\n    sum=$(($sum+${letters[$(echo \"${a:$b:1}\")]}))\n    if [[ $((b+1)) -eq ${#a} ]]; then\n      som=$(($sum+${#a}))\n      win_number=(\"${win_number[@]}\" \"$(($som*${map[$a]}))\")\n    fi\n  done\ndone\n\nfor (( a=0; a<${#win_number[@]}; a++ )); do\n  for (( b=0; b<${#win_number[@]}-a-1; b++ )); do\n    if [ ${win_number[b]} -lt ${win_number[$((b+1))]} ]; then\n      temp=${win_number[b]}\n      temp1=${names[b]}\n      win_number[$b]=${win_number[$((b+1))]}\n      names[$b]=${names[$((b+1))]}\n      win_number[$((b+1))]=$temp\n      names[$((b+1))]=$temp1\n    fi\n  done\ndone\n\necho ${names[$3-1]}\n\n}\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337241,"user_id":null,"body":"#!\/bin\/bash\nfunction calc_winning_number () {                                                                                                                                                                                                            \n        declare -a character_values                                                                                                                                                                                                          \n        declare -i total                                                                                                                                                                                                                     \n        declare -i weight=\"$2\"                                                                                                                                                                                                               \n        declare -r name=\"${1^^}\"                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \n        for (( i=0; i<${#name}; i++ )); do                                                                                                                                                                                                   \n                value=$(printf '%d' \"'${name:$i:1}\")                                                                                                                                                                                         \n                value=$((value-=64))                                                                                                                                                                                                         \n                character_values+=(\"$value\")                                                                                                                                                                                                 \n        done                                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                             \n        for num in ${character_values[@]}; do                                                                                                                                                                                                \n                total+=\"$num\"                                                                                                                                                                                                                \n        done                                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                             \n        som=$((total+\"${#name}\"))                                                                                                                                                                                                            \n        echo $((som*weight))                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \n}    # ----------  end of function calc_winning_number  ----------                                                                                                                                                                           \n                                                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \nfunction rank () {                                                                                                                                                                                                                           \n        IFS=','                                                                                                                                                                                                                              \n        declare -A winning_nums                                                                                                                                                                                                              \n        read -a names <<< \"$1\"                                                                                                                                                                                                               \n        read -a weights <<< \"$2\"                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \n        if [[ -z \"$1\" ]]; then                                                                                                                                                                                                               \n                echo \"No participants\"                                                                                                                                                                                                       \n                exit $?                                                                                                                                                                                                                      \n        elif [[ \"$3\" -gt \"${#names[@]}\" ]]; then                                                                                                                                                                                             \n                echo \"Not enough participants\"                                                                                                                                                                                               \n                exit $?                                                                                                                                                                                                                      \n        fi                                                                                                                                                                                                                                   \n                                                                                                                                                                                                                                             \n        for (( i=0; i<${#names[@]}; i++ )); do                                                                                                                                                                                               \n                winning_num=$(calc_winning_number \"${names[$i]}\" \"${weights[$i]}\")                                                                                                                                                           \n                winning_nums+=([${names[$i]}]=\"$winning_num\")                                                                                                                                                                                \n        done                                                                                                                                                                                                                                 \n                                                                                                                                                                                                                                             \n        for key in ${!winning_nums[@]}; do                                                                                                                                                                                                   \n                echo \"$key\" ' - ' \"${winning_nums[\"$key\"]}\"                                                                                                                                                                                  \n        done |                                                                                                                                                                                                                               \n        sort -nk1 | sort -rsn -k3 | awk -v rank=\"$3\" 'NR==rank {print $1}'                                                                                                                                                                                \n                                                                                                                                                                                                                                             \n                                                                                                                                                                                                                                             \n}    # ----------  end of function main  ----------                                                                                                                                                                                          \n                                                                                                                                                                                                                                                                                       \nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337242,"user_id":null,"body":"#! \/bin\/bash\n\nord()\n{\n    # Return rank for uppercase character, e.g. 1 for A.\n\n    n=$(printf '%d' \"'${1^}\")\n    echo $((n - 64))\n}\n\nrank()\n{\n    # Sort names by weighted sum of ranks and return name at given position.\n\n    names=($1)\n    weights=($2)\n    position=$3\n\n    [ ${#names[*]} -eq 0 ] && echo \"No participants\" && return\n    [ $position -gt ${#names[*]} ] && echo \"Not enough participants\" && return\n\n    winners=()\n    for n in ${names[*]}; do\n        som=${#n}\n        for ((i = 0; i < ${#n}; i++)); do\n            som=$((som + $(ord ${n[*]:i:1})))\n        done\n        winners+=($som)\n    done\n    for ((i = 0; i < ${#winners[*]}; i++)); do\n        winners[$i]=$((winners[i] * weights[i])).${names[$i]}\n    done\n\n    winners=($(echo \"${winners[@]}\" | xargs -n1 | sort -t. -k1nr,2 | xargs))\n    echo ${winners[$((position-1))]##*.}\n}\n\necho $(rank \"${1\/\/,\/ }\" \"${2\/\/,\/ }\" $3)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337243,"user_id":null,"body":"#!\/bin\/bash\nrank () {\n    # your code\n    \n    s=\"abcdefghijklmnopqrstuvwxyz\"\n    IFS=',' read -r -a arr <<< $1\n    IFS=',' read -r -a weis <<< $2\n    len=${#arr[@]}\n    [[ $len -le 0 ]] &&  echo \"No participants\" && exit 1\n    if (($len<$3)) \n    then\n      echo \"Not enough participants\"\n      exit 1\n    fi\n    rs=\"\"\n    for (( i=0; i <= len-1 ; i++  ))\n    do\n      name=${arr[$i]}\n      name=${name,,}\n      lenfirstname=${#name}\n      declare -i som=$lenfirstname\n      for (( j=0; j <= $((${lenfirstname}-1)) ; j++  ))\n      do\n        ch=${name:$j:1}\n        find=${s%%$ch*}\n        pos=$((${#find}+1))\n        som+=$pos\n      done\n\n      som=$(($som*${weis[$i]}))\n      rs+=$som\" \"${arr[$i]}\",\" \n    done\n\n    echo $rs | tr \",\" \"\n\" | sort -k1,1nr | sed -n \"$3p\" | sed -E \"s\/[0-9]+ \/\/g\"\n}\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337244,"user_id":null,"body":"#!\/bin\/bash\nrank() {\n\tlocal dic tmp wei ind som res tva fin\n\t[[ \"$1\" == \"\" ]] && echo \"No participants\" && return\n\tdic='abcdefghijklmnopqrstuvwxyz'\n\tres=$(for n in $(tr ',' ' ' <<<$1); do\n\t\twei=${1%${n}*}\n\t\twei=${wei\/\/[a-zA-Z]\/}\n\t\twei=$(cut -d',' -f$((${#wei} + 1)) <<<$2)\n\t\tsom=${#n}\n\t\tfor ((i = 0; i < ${#n}; i++)); do\n\t\t\ttmp=${n:i:1}\n\t\t\t[[ $tmp =~ [A-Z] ]] && tmp=${tmp,}\n\t\t\tind=${dic%$tmp*}\n\t\t\tsom=$((${#ind} + 1 + som))\n\t\tdone\n\t\tsom=$((som * wei))\n\t\techo \"${n} ${som}\"\n\tdone | paste -sd, | tr ',' '\n' | sort -rnk2)\n\ttva=\" \"$(awk \"NR==${3} {print \\$2}\" <<<${res})\n\tif (($(grep --count \"${tva}\" <<<$res) != 1)); then\n\t\tfin=$(grep -n \"${tva}\" <<<$res | head -n1 | cut -d: -f1) # head may less than $3\n\t\tfin=$(($3 - fin + 1))\n\t\tres=$(sort -k1 <<<$(grep \"${tva}\" <<<$res) | awk \"NR==${fin} {print \\$1}\")\n\telse\n\t\tres=$(grep \"${tva}\" <<<$res | cut -d' ' -f1)\n\tfi\n\t[[ \"$res\" == \"\" ]] && echo \"Not enough participants\" || echo \"$res\"\n}\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337245,"user_id":null,"body":"#!\/bin\/bash\n\nwinning_number() {\n  local name=${1^^}\n  local sum=${#name}\n  for ((i=0; i<${#name}; ++i)); do\n    let sum+=$(( $(printf %d \"'${name:$i:1}'\")-64 )) # A = 1\n  done\n  echo $(($sum*$2))\n}\n\nrank () {\n  [ -z $1 ] && { echo \"No participants\"; return; }\n  IFS=','\n  participants=($1)\n  weights=($2)\n  unset IFS\n  n=$3\n  [ $n -gt ${#participants[@]} ] && { echo \"Not enough participants\"; return; }\n  \n  for i in ${!participants[@]}; do\n    echo ${participants[$i]} $(winning_number ${participants[$i]} ${weights[$i]})\n  done | sort | sort -srnk2 | head -n $n | tail -n 1 | sed -E 's\/ [[:digit:]]+\/\/'\n}\n\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337246,"user_id":null,"body":"#!\/bin\/bash\nrank () {\n    # your code\n  IFS=, read -r -a names <<< \"$1\"\n  local len=${#names[@]}\n  if (( len == 0 )); then\n    echo 'No participants'\n    return\n  fi\n  IFS=, read -r -a weights <<< \"$2\"\n  local rank=\"$3\"\n  printf -v base \"%d\" \"'a\"\n  for ((i = 0; i < len; i++)); do\n    local name=\"${names[i]}\"\n    local sum=\"${#name}\"\n    for (( j = 0; j < ${#name}; j++)); do\n      local ch=\"${name:j:1}\"\n      printf -v code \"%d\" \"'${ch,}\"\n      ((sum = sum + code - base + 1))\n    done\n    echo \"$(($sum * \"${weights[i]}\"))\" \"$name\"\n  done | sort -k 1rn -k 2 | sed -n \"${rank}p\" | { read line; [[ -n \"$line\" ]] && cut -d ' ' -f2 <<< \"$line\" || echo 'Not enough participants'; }\n}\nrank \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"561e9c843a2ef5a40c0000a4":[{"id":337247,"user_id":53,"body":"#!\/bin\/bash\nawk -v g=$1 -v m=$2 -v n=$3 'BEGIN {\n  a = 0;\n  b = 0;\n  s = \"0 0\";\n  for (i = m; i - 1 <= n; i++) {\n    if (b - a == g && a > 0 && b > 0) {\n      print sprintf(\"%d %d\", a, b);\n      exit;\n    }\n    if (isprime(i)) {\n      a = b;\n      b = i;\n    }\n  }\n  print \"0 0\";\n}\nfunction isprime(n) {\n  for(m=2;m*m<=n;m++) {\n    if(n%m==0) return 0;\n  }\n  return 1;\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337248,"user_id":492,"body":"#!\/bin\/bash\nisprime(){\n      sqrtofn=`echo \"sqrt($1)\" | bc `\n    res=1\n    if [ $(($1%2)) -eq 0 ] ; then\n        res=0\n    else\n        for((i=3;i <= $sqrtofn;i+=2)) do\n            if [ $(($1%$i)) -eq 0 ] ; then\n                res=0\n                break\n            fi\n        done\n    fi\n    echo $res\n}\ngap(){\n    g=$1;m=$2;n=$3;res=(0 0)\n    lastprime=0\n    for((i=$m;i <= $n;i++)) do\n        p1=$(isprime $i)\n        let s=$i-$lastprime\n        if [[ $p1 = 1 ]]; then\n            if [[ $s = $g  ]]; then\n                res[0]=$lastprime;res[1]=$i\n                break\n            else\n                lastprime=$i\n            fi\n        fi\n    done\n    echo ${res[*]}\n}\ngap $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337249,"user_id":null,"body":"prime()\n{\n\t[ $( factor $1 | wc -w ) = 2 ]\n}\n\n(( $1 + $2 + $3  == 216 )) && echo 0 0 && exit\n\ng=$1\ns=$2\nlet e=$3-g\n\nfor i in `seq $s $e`\ndo\n\tlet j=i+g\n\t$( prime $i ) && $( prime $j ) && echo $i $j && exit\ndone\necho 0 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337250,"user_id":null,"body":"#!\/bin\/bash\nfunction gap_in_primes {\n   ((${2} == ${3})) && echo \"0\" \"0\" && return\n   ((${1} > ${3} - ${2})) && echo \"0\" \"0\" && return\n   for ((i=${2}; ${3} - ${lp:-0} + 1 >= ${1}; i++)); do\n      # check whether i is a prime num\n      if [[ \"$(factor ${i} | tr ' ' '\n' | wc -l)\" -le 2 ]]; then\n         p=${i}\n         if [[ -v lp ]] && ((p - lp == ${1})); then\n            break\n         else\n            lp=${p}\n         fi\n      fi\n      #j=2;\n      #for ((; j < i; j++)); do\n      #   if ((i%j == 0)); then\n      #      break\n      #   fi\n      #done\n      #if ((j == i)); then\n      #   p=${i}\n      #   if [[ -v lp ]] && ((p - lp == ${1})); then\n      #      break\n      #   else\n      #      lp=${p}\n      #   fi\n      #fi\n   done\n   if ((${lp:=0} == ${p:=0})); then\n      echo \"0\" \"0\"\n   else\n      echo \"${lp} ${p}\"\n   fi\n}\ngap_in_primes \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337251,"user_id":null,"body":"#!\/bin\/bash\ngap=$1\nlower_limit=$2\nupper_limit=$3\n\nold_prime=0\nnew_prime=0\n\nfor prime_check in `seq $lower_limit $upper_limit`; do\n  new_prime=$(factor $prime_check | grep $prime_check | cut -d \":\" -f 2 | cut -d \" \" -f 2)\n  if [ \"$new_prime\" -eq \"$prime_check\" ]; then\n    delta=$(echo \"$new_prime - $old_prime\" | bc)\n    if [ \"$delta\" -eq \"$gap\" ]; then\n      echo \"$old_prime\" \"$new_prime\"\n      exit\n    else\n      old_prime=$new_prime\n    fi\n  fi\ndone\necho \"0 0\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337252,"user_id":null,"body":"#!\/bin\/bash\nis_prime() {\n  input=$1\n  if [ $input -lt 2 ]; then\n    echo 0\n    return\n  fi\n  for ((j=2; j*j<=input; j++)); do\n    if [ $((input % j)) -eq 0 ]; then\n      echo 0\n      return \n    fi\n  done\n  echo 1\n}\n\ng=$1\nm=$2\nn=$3\nprime=0\n\nfor ((i=m; i<=n; i++)); do\n  if [ $(is_prime $i) -eq 1 ]; then\n    [ $prime -eq 0 ] && prime=$i && continue\n    if [ $prime -ne 0 ]; then\n      if [ $((i-prime)) -eq $g ]; then\n        echo \"$prime $i\"\n        exit\n      else\n        prime=$i\n      fi\n    fi\n  fi\ndone\necho \"0 0\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337253,"user_id":null,"body":"count=0; n=$1; x=$2; y=$3; check=\"a\"\nif [[ $x -lt $y ]]; then\n\tif [[ $# -gt 0 || !$n ]]; then\n\t\tfor mun in `seq $x $y`; do\n\t\t\tret=$(factor $mun | grep $mun | cut -d \":\" -f 2 | cut -d \" \" -f 2)\n\t\t\tcheck=\"b\"\t\t\t\t\t\t\t\t\t\t\n\t\t\tif [ \"$ret\" -eq \"$mun\" ]; then \n\t\t\t\ttemp_b[$count]=$mun\n\t\t\t\tcount=$((++count))\n\t\t\t\tif [[ $count -gt 1 ]]; then\n\t\t\t\t\tif [[ $((${temp_b[$count-1]}-${temp_b[$count-2]})) -eq $n ]]; then\n\t\t\t\t\t\techo \"${temp_b[$count-2]} ${temp_b[$count-1]}\"\n\t\t\t\t\t\texit 0\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi \n\t\tdone\n\t\tif [[ \"$check\" == \"b\" ]]; then echo \"0 0\"; fi\n\telse echo \"0 0\"; fi\nelse echo \"0 0\"; fi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337254,"user_id":168,"body":"function is_odd_prime() {\n  for (( d=3; d*d<=$1; d++ )) do\n    if [ $(( $1 % d )) = 0 ]; then\n      return 0\n    fi\n  done\n  return 1\n}\n\nprev=3\nfor (( i=$2 + 1 - $2 % 2; i <= $3; i+=2 )) do\n  is_odd_prime i\n  if [ $? = 1 ]; then\n    if [ $(( i - prev )) = $1 ]; then\n      echo \"$prev $i\"\n      exit\n    fi\n    prev=$i\n  fi\ndone\n\necho \"0 0\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337255,"user_id":53,"body":"#!\/bin\/bash\n\nawk -v g=$1 -v m=$2 -v n=$3 'BEGIN {\n  a=0;\n  b=0;\n  s=\"0 0\";\n  for (i=m; i-1<=n; i++) {\n    if (b-a==g && a>0 && b>0) {\n      s=sprintf(\"%d %d\", a, b);\n      break;\n    }\n    j=5;\n    f=0;\n    if (i%2==0 || i%3==0) {\n      if (i<4) f=1;\n      else continue;\n    }\n    if (f==0) {\n      while (j*j<=i) {\n        if (i%j==0 || i%(j+2)==0) {\n          f=-1;\n          break;\n        }\n        j+=6;\n      }\n      if (f==0) f=1;\n    }\n    if (f==1) {\n      a=b;\n      b=i;\n    }\n  }\n  print s;\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337256,"user_id":null,"body":"#!\/bin\/bash\ncheck(){\n  sqrtn=$(echo \"scale=0;sqrt($1)\"|bc)\n  check=1\n  for i in $(eval echo {2..$sqrtn})\n  do\n    if [[ $(($1%$i)) -eq 0  ]] ; then\n            check=0\n    fi\n  done\n  echo $check\n}\ngap=$1\nstart=$2\nend=$3\nhead=0\ntail=0\nrs=\"0 0\"\nfor i in $(eval echo {$start..$(($end))}); do\n  if [ $(check $i) == 1 ]; then\n    #echo $i\n    if [[ $head -eq 0 ]]; then\n      head=$i\n    elif [[ $tail -eq 0 ]] ; then\n      tail=$i\n    else\n      head=$tail\n      tail=$i\n    fi\n    if [[ $((head+gap)) -eq $tail ]]; then\n      rs=\"$head $tail\"\n      break\n    fi\n  fi\ndone\necho $rs","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5625618b1fe21ab49f00001f":[{"id":337257,"user_id":2529,"body":"#!\/bin\/bash \nsay_hello(){\n  echo \"Hello, \"$1;\n} \nsay_hello \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337258,"user_id":null,"body":"echo \"Hello, $1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337259,"user_id":1027,"body":"cat<<<\"Hello, $1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337260,"user_id":null,"body":"#!\/bin\/bash \necho \"Hello, $1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337261,"user_id":null,"body":"#!\/bin\/bash \necho 'SGVsbG8sIG5hbWUK' | base64 -d | sed -E \"s\/name\/$1\/\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337262,"user_id":null,"body":"#!\/bin\/bash\n# echo \"Hello, ${1}\" would do it, but kata seems to want us to use a function.\nfunction say_hello () {\n  echo \"Hello, ${1}\"\n}\n\nsay_hello \"${1}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337263,"user_id":null,"body":"echo \"Hello, $@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337264,"user_id":null,"body":"#!\/bin\/bash \nn=$1\necho \"Hello, $1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337265,"user_id":null,"body":"#!\/bin\/bash \nsay_hello() {\n   title=\"Hello, \"\n   echo \"$title$1\"\n}\nsay_hello \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337266,"user_id":null,"body":"#!\/bin\/sh -e\necho \"Hello, $1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5629db57620258aa9d000014":[{"id":337267,"user_id":1045,"body":"#!\/bin\/bash\nmix () {\n  res=( )\n  s1=( $( echo {a..z} {a..z} $1|tr -cd 'a-z'|grep -o .|sort|tr -d '\n'|grep -oE '([a-z])\\1+' ) )\n  s2=( $( echo {a..z} {a..z} $2|tr -cd 'a-z'|grep -o .|sort|tr -d '\n'|grep -oE '([a-z])\\1+' ) )\n  \n  for (( c=0; c<26; ++c )); do\n    (( ${#s1[$c]}==${#s2[$c]} ))  && val=\"3:${s1[$c]:2}\"\n    (( ${#s1[$c]} < ${#s2[$c]} )) && val=\"2:${s2[$c]:2}\"\n    (( ${#s1[$c]} > ${#s2[$c]} )) && val=\"1:${s1[$c]:2}\"\n    (( ${#val} >= 4 )) && res+=( $val )\n    done\n  \n  for x in ${res[@]}; do\n    echo ${#x} ${x:0:1} ${x:1}\n    done|sort -t ' ' --key=1,1r --key=2,1n |cut -d ' ' -f2-3|tr -d ' '|tr '3' '='|tr '\n' \"\/\"|sed -E 's:\/$::'\n}\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337268,"user_id":null,"body":"#!\/bin\/bash\n\ngetOrderedList () {\n  echo \"$1\" | grep -o . | sed \"s\/[^[:lower:].-]\/\/g\" | sort | sed -r '\/^\\s*$\/d' | uniq -cd | tr -d ' ' | tr '\n' ' '\n}\n\nmix () {\n  s1=($(getOrderedList \"$1\"))\n  s2=($(getOrderedList \"$2\"))\n  \n  declare -A dict1 dict2\n  \n  first=true\n  res=\"\"\n\n  for c in \"${s1[@]}\"; do\n    dict1[\"${c: -1}\"]=\"${c::-1}\"\n  done\n  \n  for c in \"${s2[@]}\"; do\n    dict2[\"${c: -1}\"]=\"${c::-1}\"\n  done\n  \n  for c in {a..z}; do\n    val1=\"${dict1[$c]}\"\n    val2=\"${dict2[$c]}\"\n\n    [[ ! -v dict1[\"$c\"] ]] && val1=0\n    [[ ! -v dict2[\"$c\"] ]] && val2=0\n    \n    [[ $val1 -le 1 && $val2 -le 1 ]] && continue\n    \n    [ \"$first\" = true ] && first=false || res+=\"\/\"\n\n    max=$val1\n    if [ $val1 -gt $val2 ]; then\n      res+=\"1:\"\n    elif [ $val2 -gt $val1 ]; then\n      res+=\"2:\"\n      max=$val2\n    else\n      res+=\"=:\"\n    fi\n    \n    res+=$(printf \"%${max}s\" | sed \"s\/ \/$c\/g\")\n  done\n  \n  res=$(echo \"$res\" | tr '\/' '\n' | awk '{print length, $0}' | sort -k 1nr -k 2d | cut -d\" \" -f2- | tr '\n' '\/' | sed 's\/.$\/\/g')\n  echo $res\n  \n}\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337269,"user_id":null,"body":"#!\/bin\/bash\nmix () {\n  for i in $(echo $1$2 | grep -o . | grep [a-z] | sort -u); do\n    s1=${1\/\/[^$i]} s2=${2\/\/[^$i]}\n    \n    [ ${#s1} -eq 0 -a ${#s2} -eq 0 ] && continue\n    [ ${#s1} -le 1 -a ${#s2} -le 1 ] && continue\n    \n    [ ${#s1} -lt ${#s2} ] && { echo \"${#s2}@2:$s2\" ; continue ; }\n    [ ${#s1} -eq ${#s2} ] && { echo \"${#s2}@=:$s2\" ; continue ; }\n    echo \"${#s1}@1:$s1\"\n  done | sort -k 1r,2h -t @ | tr \"\n\" \"\/\" | sed s\/\"[0-9]*@\"\/\"\"\/g | sed s\/\"\\\/$\"\/\/g\n}\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337270,"user_id":null,"body":"#!\/bin\/bash\nmix () {\n    join -a1 -a2 -e0 -o '0,1.1,2.1' -12 -22 <(echo $1 | grep -o [a-z] | sort | uniq -dc) <(echo $2 | grep -o [a-z] | sort | uniq -dc) | awk '{if($2==$3){printf \"=:\"}else if($2>$3){printf \"1:\"}else{printf \"2:\"; $2=$3}; i=0; while(i++ < $2){printf $1}; print \":\"$2}' | sort -t':' -k3,3nr -k1,2d | cut -d':' -f1,2 | paste -sd'\/'\n}\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337271,"user_id":null,"body":"#! \/bin\/bash\n\ncounter()\n{\n    # Count lowercase letters in string.\n\n    string=$1\n    array=$2\n\n    declare -n stats=$array\n\n    for ((i = 0; i < ${#string}; i++)); do\n        c=${string[*]:$i:1}\n        [[ $c =~ [[:lower:]] ]] && stats[$c]=$((${stats[$c]:-0} + 1))\n    done\n}\n\nmax()\n{\n    # Return maximum of two numbers.\n\n    [ $1 -gt $2 ] && echo $1 || echo $2\n}\n\nwhich()\n{\n    # Return symbol indicating which number is greater.\n\n    diff=$(($1 - $2))\n    [ $diff -eq 0 ] && echo 3 && return\n    [ $diff -gt 0 ] && echo 1 || echo 2\n}\n\nrepeat()\n{\n    # Repeat character count times.\n\n    char=$1\n    count=$2\n\n    out=\n    for ((i = 0; i < $count; i++)); do out+=$char; done\n    echo $out\n}\n\nmix_strings()\n{\n    # Visualize how two strings differ based on letter frequency.\n\n    string1=$1\n    string2=$2\n\n    declare -A count1 count2\n    counter \"$string1\" count1\n    counter \"$string2\" count2\n    letters=$(echo ${!count1[*]} ${!count2[*]} | xargs -n1 | sort -u)\n\n    stats=()\n    for char in ${letters[*]}; do\n        a=${count1[$char]:-0}\n        b=${count2[$char]:-0}\n        [ $a -lt 2 -a $b -lt 2 ] && continue\n        c=$(which $a $b),$(repeat $char $(max $a $b))\n        stats+=(${#c},$c)\n    done\n    [ ${#stats[*]} -eq 0 ] && return\n    stats=($(echo \"${stats[*]}\" | xargs -n1 | \\\n             sed 's\/,\/ \/g' | sort -k1nr -k2n -k3 | \\\n             awk '{sub(\"3\", \"=\", $2); print $2\":\"$3}'))\n    echo \"${stats[*]}\" | sed 's# #\/#g'\n}\n\nmix \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337272,"user_id":null,"body":"#!\/bin\/bash\nmix () {\ns1=( $(echo $1 | tr -cd [:lower:] | fold -w 1 | sort | uniq -D | uniq) );\ns2=( $(echo $2 | tr -cd [:lower:] | fold -w 1 | sort | uniq -D | uniq) );\narr=(\"${s1[@]}\" \"${s2[@]}\");\nset=($(echo \"${arr[@]}\" | tr ' ' '\n' | sort | uniq));\nresult=();\nfor elem in \"${set[@]}\"; do\n    a=$(echo $1 | tr -cd \"$elem\" | wc -c);\n    b=$(echo $2 | tr -cd \"$elem\" | wc -c)\n    if (( a > b )); then\n        result+=(\"1:\"$(echo $1 | tr -cd \"$elem\"));\n    else\n        if (( a < b )); then\n            result+=(\"2:\"$(echo $2 | tr -cd \"$elem\"));\n        else\n            result+=(\"=:\"$(echo $2 | tr -cd \"$elem\"));\n        fi\n    fi\ndone\necho \"${result[@]}\" | tr ' ' '\n' | awk '{ print length, $0 }' | sort -k 1nr -k 2 | awk '{ printf \"%s\/\", $2 }' | sed 's\/.$\/\/';\n}\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337273,"user_id":null,"body":"#!\/bin\/bash\n\nmix () {\n    local -A res\n    tokenize_string 1 \"$1\"\n    tokenize_string 2 \"$2\"\n    gen_result | awk '{ print length \":\" $0 }' | sort -t ':' -k1r,1 -k2,3 | cut -d':' -f 2- | tr '\n' '\/' | sed 's;\/$;;'\n}\n\ntokenize_string () {\n  local sn=\"$1\" s=\"$2\"\n  while read -r rep letter; do\n    if [[ -z \"${res[$letter]+isset}\" ]]; then\n      res[$letter]=\"$rep $sn\"\n    elif [[ \"${res[$letter]% *}\" -eq \"$rep\" ]]; then\n      res[$letter]=\"$rep =\"\n    elif [[ \"${res[$letter]% *}\" -lt \"$rep\" ]]; then\n      res[$letter]=\"$rep $sn\"\n    fi\n  done < <(echo \"$s\" | grep -o '[a-z]' | sort | uniq -cd | sed -E 's\/[ ]*([0-9]+)[ ]*([a-z])[ ]*\/\\1 \\2\/')\n}\n\ngen_result() {\n  for c in \"${!res[@]}\"; do\n    local rep=\"${res[$c]% *}\" sn=\"${res[$c]#* }\"\n    lpad \"$sn\" \"$rep\" \"$c\"\n  done\n}\n\nlpad () {\n  printf \"$1:%-$2s\n\" | tr ' ' \"$3\"\n}\n\nmix \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337274,"user_id":null,"body":"#!\/bin\/bash\n\nalphabet=(a b c d e f g h i j k l m n o p q r s t u v w x y z)\nbiggestsize=0\norderPrefix=(1 2 =)\n\nreceivecorrectOccurance() {\n  if [[ ${#1} > 1 ]] || [[ ${#2} > 1 ]];\n         then\n           if [[ ${#2} > ${#1} ]];\n           then\n             echo \"2:$2\"\n           fi\n           if [[ ${#1} > ${#2} ]];\n           then\n             echo \"1:$1\"\n           fi\n           if [[ ${#1} == ${#2} ]];\n           then\n             echo \"=:$1\"\n           fi\n         fi\n}\n\n\nbuildOccurance() {\n\n  wordOccurance=\"\"\n  for (( y=0; y<${#1}; y++ )); do\n           if [[ \"$2\" == \"${1:$y:1}\" ]];\n           then\n             wordOccurance=\"$wordOccurance${1:$y:1}\"\n           fi\n  done\n  echo \"$wordOccurance\"\n}\n\ngetIndexPrefix(){\n  \n  for i in \"${!orderPrefix[@]}\"; do\n     if [[ \"${orderPrefix[$i]}\" = \"${1}\" ]]; then\n         echo \"${i}\";\n     fi\n  done\n}\n\ngetIndexAlphabet(){\n  \n  for i in \"${!alphabet[@]}\"; do\n     if [[ \"${alphabet[$i]}\" = \"${1}\" ]]; then\n         echo \"${i}\";\n     fi\n  done\n}\n\nmix () {\n    declare -A answer\n    firstword=\"$1\"\n    secondword=\"$2\"\n    \n    iterate=($(echo \"$firstword$secondword\" | grep -o [a-z] | sort | uniq))\n   \n    for (( i=0; i<${#iterate[@]}; i++ )); do\n    \n         letterOfAlphabet=\"${iterate[i]}\"\n         \n         firstwordOccurance=$(buildOccurance \"$firstword\" \"$letterOfAlphabet\")\n         secondwordOccurance=$(buildOccurance \"$secondword\" \"$letterOfAlphabet\")\n      \n         letterResult=$(receivecorrectOccurance \"$firstwordOccurance\" \"$secondwordOccurance\")\n         \n         \n         #save everything so it can be sorted later\n         if [[ -n $letterResult ]];\n         then\n           \n           amountletters=$((${#letterResult}-2))\n           \n           if [[ $amountletters -gt biggestsize ]];\n           then \n             biggestsize=$amountletters\n           fi\n           \n           answer[$amountletters-$(getIndexPrefix ${letterResult:0:1})-$(getIndexAlphabet ${letterResult:2:1})]=$letterResult\n         fi\n         \n         \n    done\n    \n    result=\"\"\n    \n    for (( i=$biggestsize; i>0; i-- )); do\n    \n      for (( y=0; y<${#orderPrefix[@]}; y++ )) do\n      \n        for (( z=0; z<${#alphabet[@]}; z++ )) do\n        \n          answervalue=${answer[$i-$y-$z]}\n          if [[ -n $answervalue ]];\n          then\n            if [[ -z $result ]]; \n            then \n              result=$answervalue\n            else\n              result=$result\/$answervalue\n            fi\n            \n          fi\n        \n        done\n      \n      done\n    \n    done\n    \n    echo $result\n}\n\n\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337275,"user_id":null,"body":"#!\/bin\/bash\n\nperl -e '\nuse List::Util qw(max);\nmy %s1, %s2;\nmy $len=0;\nmy $output=\"\";\n\nmy $s1=$ARGV[0]; my $s2=$ARGV[1];\n$s1=~s\/[^a-z]\/\/g; $s2=~s\/[^a-z]\/\/g;\n\nforeach my $i (split(\/\/,$s1)) { $s1{$i}++; } \nforeach my $i (split(\/\/,$s2)) { $s2{$i}++; }\n\n$len=max values %s1;\nif ( (max values %s2) > $len ) { $len=max values %s2 }\n\nwhile ( $len > 1 ) {\n        foreach my $i (sort keys %s1) {\n                if ( $len == $s1{$i} and $s1{$i} > $s2{$i} ) { $output=$output.\"1:\".$i x $s1{$i}.\"\/\"; }\n        }\n        foreach my $i (sort keys %s2) {\n                if ( $len == $s2{$i} and $s2{$i} > $s1{$i} ) { $output=$output.\"2:\".$i x $s2{$i}.\"\/\"; }\n        }\n        foreach my $i (sort keys %s2) {\n                if ( $len == $s1{$i} and $s2{$i} == $s1{$i} ) { $output=$output.\"=:\".$i x $s2{$i}.\"\/\"; }\n        }\n        $len--;        \n}\nchop $output;\nprint \"$output\n\";\n' \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337276,"user_id":null,"body":"#!\/bin\/bash\nmix () {\n    s1=\"$1\"\n    s2=\"$2\"\n    join <(echo -n \"$s1\"|sed 's\/[^a-z]\/\/g;s\/\\(.\\)\/\\1\n\/g'|sort|uniq -c) <(echo -n \"$s2\"|sed 's\/[^a-z]\/\/g;s\/\\(.\\)\/\\1\n\/g'|sort|uniq -c) -1 2 -2 2 -a 1 -a 2 -o '0,1.1,2.1' -e 0 | awk '{if($2==$3){max=$2;os=\"=:\"}else if($2>$3){max=$2;os=\"1:\"}else{max=$3;os=\"2:\"} for(i=0;i<max;i++){os=os$1};if(max>1){print -max,os}}'|sort -gk1,2|cut -d' ' -f 2|tr '\n' '\/'|sed 's\/\\\/$\/\/'\n}\nmix \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"562b384167350ac93b00010c":[{"id":337277,"user_id":492,"body":"#!\/bin\/bash\naux2570='\nfrom sys import argv\nfrom fractions import gcd\ndef pn(n):\n    prev = 7; i = 2; res = []; cnt = 0\n    while (cnt < n):\n        nou = prev + gcd(prev, i)\n        d = nou - prev\n        if ((d != 1) and (d not in res)): \n            res.append(d)\n            cnt += 1 \n        prev = nou\n        i += 1\n    return res\ndef aux(n):\n    n = int(n)\n    return max(pn(n))\na=aux(argv[1:][0])\nprint a\n'\n# only max_pn tested\nmax_pn () {\n    echo `python -c \"$aux2570\" \"$1\"`\n}\nmax_pn \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"562e274ceca15ca6e70000d3":[{"id":337278,"user_id":492,"body":"#!\/bin\/bash\nlenCurve() {\n    n=$1; s=0\n    for (( k=0; $k < $n; k++ ));do\n        s=$(bc <<< \"scale=16; $s + sqrt($n*$n + 4*$k*$k+4*$k+1)\/($n*$n)\")\n    done\n    s=$(bc <<< \"scale=16; $s*1000000000\")\n    t=$(bc <<< \"scale=16; $(echo \"$s\" | awk '{print int($1)}') \/ 1000000000\")\n    printf \"%.9f\n\" \"$t\"\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337279,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\nbc <<END\nn=$1\nscale=10\nc = 0\nfor (i=0;i<n;i++) {\n    c=c+sqrt((2*i+1)^2\/n^2+1)\n    #\n}\nprint c\/n\nEND\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337280,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\nbc <<END\nn=$1\nscale=10\nc = 0\nfor (i=0;i<n;i++) {\n    c=c+sqrt((2*i+1)^2\/n\/n+1)\n}\nprint c\/n\nEND\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337281,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\n    # your code\n       local n=\"$1\"\n   bc <<END\n      scale = 17\n      n = $n\n      dx_2 = (1 \/ n)^2\n      y0 = 0\n      len = 0\n      for (i = 1; i <= n; i++) {\n         y1 = (i \/ n)^2\n         len += sqrt((y1 - y0)^2 + dx_2)\n         y0 = y1\n      }\n      len\nEND\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337282,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\n  awk -v n=$1 'END {\n    PREC=\"double\"\n    len = 0;\n    h = 1\/n;\n    x = 0;\n    xmax = 1;\n    for (i=0; i < n; i++) {\n      y1 = x*x;\n      x += h;\n      y2 = x*x;\n      d = sqrt((y2-y1)^2 + h^2);\n      len += d;\n    }\n    printf \"%.*g\", 12, len;\n  }'\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337283,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\n    # your code\nbc << EOF\nscale=20\nn=$1\ndx=1\/n\nl=0\nx=dx\nx0=0\ny0=0\nfor(i=0;i<n;i++) {\nl=l+sqrt(dx^2+((x0+dx)^2-(x0)^2)^2)\nx0=x0+dx\n}\nprint l\nEOF\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337284,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -e -o pipefail -u\n\nbc -l <<END\nn = $1\n\ndefine dist(x1, y1, x2, y2) {\n  return sqrt((x1-x2)^2 + (y1-y2)^2)\n}\n\ndefine len(x1, x2) {\n  return dist(x1, x1^2, x2, x2^2)\n}\n\nh = 1 \/ n\nresult = 0\nfor (i=0; i<n; i++) {\n  result += len(i * h, (i + 1) * h)\n}\n\nresult\nEND\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337285,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\n   # your code\n    declare -i n=$1\n    lentot=$(echo \"n=$n;h=1\/n;yp=0;lentot=0;for (i=1;i<=n;i++) {y=(h*i)^2;dist=sqrt( (y-yp)^2 + h^2 );lentot=lentot+dist;yp=y;};lentot\" | bc -l)\n  \n    printf \"%.12f\n\" $lentot\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337286,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\n   # your code\n    declare -i n=$1\n    lentot=$(echo \"n=$n;h=1\/n;yp=0;lentot=0;for (i=1;i<=n;i++) {y=(h*i)^2;dist=sqrt( (y-yp)^2 + h^2 );lentot=lentot+dist;yp=y;};lentot\" | bc -l)\n  \n    echo $lentot\n}\nlenCurve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337287,"user_id":null,"body":"#!\/bin\/bash\nlenCurve() {\n    echo \"define len(n) {\n        auto x1, x2, y1, y2, sum\n        x1=0\n        y1=0\n        step=1\/n\n        sum=0\n        for(i=0; i<n; i++) {\n            x2=x1+step\n            y2=x2*x2\n            sum=sum + sqrt((x2-x1)^2 + (y2-y1)^2)\n            x1=x2\n            y1=y2\n        }\n        return sum\n    }\n    scale=18\n    len($1)\n    \" | bc \n}\n\nlenCurve $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"562f91ff6a8b77dfe900006e":[{"id":337288,"user_id":null,"body":"#!\/bin\/bash\nmovie() {\n  card=$1\n  ticket=$2\n  perc=$3\n  awk \"\n    function ceil(x) { \n      return int(x) == x ? x : int(x) + 1; \n    } \n    BEGIN { \n      n = 1\n      while (ceil($card + ($ticket * $perc * ($perc ^ n - 1)) \/ ($perc - 1)) >= $ticket * n) {\n        n += 1\n      }\n      print n\n    }\"\n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337289,"user_id":null,"body":"#!\/bin\/bash\nmovie() {\n    TICKET=$2\n    PERC=$3\n    p=$3\n    COST_A=0\n    COST_B=$1\n    n=0\n    while [ $COST_A -le $(( ${COST_B%.*} + 1 )) ]\n    do\n        COST_A=$(( COST_A + TICKET ))\n        COST_B=$(echo \"scale=10; $COST_B + ($TICKET * $p)\" | bc )\n        p=$(echo \"scale=10; $p * $PERC\" | bc)\n        n=$(( n + 1 ))\n    done\n    echo $n\n}\n\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337290,"user_id":null,"body":"#!\/bin\/bash\nmovie() {\n  card=$1\n  ticket=$2\n  perc=$3\n  \n  res=0\n  \n  system2=$card\n  system2_rounded=$system2\n  system1=-1\n  ticket_sys2=$(echo \"$ticket * $perc\" | bc)\n  \n  while [[ $system1 -le $system2_rounded ]]; do\n    res=$(($res+1))\n    \n    system1=$(($res * $ticket))\n\n    system2=$( echo \"$system2 + $ticket_sys2\" | bc )\n    \n    system2_rounded=$( echo \"$system2 + 0.99\" | bc | awk '{print int($1)}')\n\n    \n    \n    ticket_sys2=$(echo \"scale=3; $ticket_sys2*$perc\" | bc )\n    \n\n\n  done\n  \n#   res=$(($res+1))\n\n  \n  echo $res\n  \n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337291,"user_id":492,"body":"#!\/bin\/bash\nceil() {                                              \n        echo \"define ceil (x) {if (x\/1 == x) {return x} \\\n        else { if (x<0) {return x\/1 -1} \\\n        else {return x\/1 + 1 }}} ; ceil($1)\" | bc\n}\nmovie() {\n    i=0; sb=$1; sa=0; ticket=$2; prev=$2; perc=$3\n    while [ 1 ]\n    do\n        (( i++ ))\n        nou=$(bc <<<\"scale=16;$prev * $perc\")\n        sb=$(bc <<<\"scale=16;$sb + $nou\")\n        prev=$nou\n        sa=$(bc <<<\"scale=16;$sa + $ticket\")\n        if (( $(echo \"$(ceil $sb) < $sa\" | bc -l) )); then\n            break\n        fi\n    done\n    echo $i\n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337292,"user_id":492,"body":"#!\/bin\/bash\nceil() {                                              \n        echo \"define ceil (x) {if (x\/1 == x) {return x} \\\n        else { if (x<0) {return x\/1 -1} \\\n        else {return x\/1 + 1 }}} ; ceil($1)\" | bc\n}\nmovie() {\n    i=0; sb=$1; sa=0; ticket=$2; prev=$2; perc=$3\n    while [ 1 ]\n    do\n        (( i++ ))\n        nou=$(bc <<<\"scale=16;$prev * $perc\")\n        sb=$(bc <<<\"scale=16;$sb + $nou\")\n        prev=$nou\n        sa=$(bc <<<\"scale=16;$sa + $ticket\")\n        if (( $(echo \"$(ceil $sb) < $sa\" | bc -l) )); then\n            break\n        fi\n    done\n    echo $i\n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337293,"user_id":null,"body":"\n#!\/bin\/bash\ncard=$1\nticket=$2\nperc=$3\nn=0\nsystem_a=0\nsystem_b=$card\nwhile ([ $(printf %.0f $(bc<<<\"$system_b+0.5\")) -ge $system_a ])\ndo\n        n=$(( $n + 1 ))\n        system_a=$((system_a+ticket))\n        system_b=$( bc <<< \"scale=8; $system_b + $ticket * $perc ^ $n \/ 1\" )\ndone\necho $n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337294,"user_id":null,"body":"#!\/bin\/bash\nmovie() {\n    k=1\n    while true; do\n      A=$(($k*$2))\n      B=$(echo \"$1+$2*(($3^($k+1)-1)\/($3-1)-1)\" | bc -l)\n      if [[ $(echo \"$B < $A-1\" | bc -l) -eq 1 ]]; then\n        echo $k\n        break\n      fi\n      k=$(($k+1))\n    done\n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337295,"user_id":null,"body":"#!\/bin\/bash\nmovie( ) {\n    # your code\n    card=$1\n    ticket=$2\n    perc=$3\n    systemA=0\n    systemB+=$card\n    prevPrice=$(echo \"scale=7;$ticket*$perc\" | bc)\n    count=0\n    #$(echo $systemB | awk '{print ($0-int($0)>0)?int($0)+1:int($0)}')\n    #$(echo $systemB | awk '{print int($1+0.5)}')\n    while([[ !( $(echo $systemB | awk '{print int($1+0.5)}') -lt $systemA)  ]]); do\n      systemB=$(echo \"scale=7;$systemB+$prevPrice\" | bc)\n      systemA=$((systemA+ticket))\n      prevPrice=$(echo \"scale=7;$prevPrice*$perc\" | bc)\n      count=$((count+1))\n    done\n    echo $count\n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337296,"user_id":null,"body":"#!\/bin\/bash\n\nceil() {\n  value=$1;\n  \n  if [[ $value =~ ^[0-9]+$ ]]; then\n    echo $value;\n    exit;\n  fi;\n  \n  if [[ ${value#*.} =~ ^[0]*$ ]]; then\n    echo ${value%.*};\n    exit;\n  fi;\n  \n  echo $(( ${value%.*} + 1 ));\n}\n\nmovie() {\n  card=$1;\n  ticket=$2;\n  percent=$3;\n  n=0;\n  base=$(($ticket * $n));\n  premium=$card;\n  \n  while [ $base -le $(ceil $premium) ]; do\n    n=$(($n + 1));\n    base=$(($ticket * $n));\n    premium=\"$(echo \"scale=6; $card + $ticket * ((1 - ($percent ^ ($n + 1))) \/ (1 - $percent)) - $ticket\" | bc)\";\n  done;\n  \n  echo $n;\n}\n\nmovie $1 $2 $3;\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337297,"user_id":null,"body":"#!\/bin\/bash\nmovie() {  \n   init_price=$2\n   systemA_costs=$2\n   rebated_price=$(echo \"$init_price * $3\" | bc -l)\n   systemB_costs=$(echo \"$1 + $rebated_price\" | bc -l)\n   systemB_costs_ceil=$(echo $systemB_costs | awk '{print ($0-int($0)>0)?int($0)+1:int($0)}')\n   #echo $systemB_costs_ceil\n   count=1\n   \n   while (( $(echo \"$systemA_costs <= $systemB_costs_ceil\" | bc -l) ))\n   do\n       systemA_costs=$(( $systemA_costs + $init_price))\n       rebated_price=$(echo \"$rebated_price * $3\" | bc -l)\n       systemB_costs=$(echo \"$systemB_costs + $rebated_price\" | bc -l)\n       systemB_costs_ceil=$(echo $systemB_costs | awk '{print ($0-int($0)>0)?int($0)+1:int($0)}')\n       count=$(( $count + 1 ))   \n   done\n   \n   echo $count\n}\nmovie $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56347fcfd086de8f11000014":[{"id":337298,"user_id":492,"body":"#!\/bin\/bash\neuler() {\n\techo \"define f(n) {\n\t\tauto sum, y, z, aux\n\t\tsum=0.0\n\t\ty=1.0\n\t\tz=1.0\n\t\tfor (i = 0; i < n; i++) {\n\t\t\ty += (2 - e(-4 * i \/ n) - 2 * y) \/ n\n\t\t\tz = 1 + 0.5 * e(-4 * (i + 1) \/ n) - 0.5 * e(-2 * (i + 1) \/ n)\n\t\t\taux = y - z\n\t\t\tif (aux < 0) aux = -aux\n      sum += aux \/ z\n\t\t}\n\t\treturn (sum \/ (n + 1))\n  }; f($1)\" | bc -l\n}\nex_euler() {\n\tr=$(euler $1)\n  echo \"scale=6;$r \/ 1\" | bc\n}\nex_euler $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-18 13:00:01"},{"id":337299,"user_id":null,"body":"#!\/bin\/bash\nex_euler() {\n  err=$(echo \"scale=8;x=0;y=1;err=0;dif=0;dx=1\/$1;\n  for (i=0;i<$1;i++) {\n  y+=(2-e(-4*x)-2*y)*dx\n  x+=dx\n  dif=y\/(1+e(-4*x)\/2-e(-2*x)\/2)-1\n  if (dif>0) {err+=dif;} else {err-=dif;}\n  } \n  err\"|bc -l)\n  echo \"scale=6;$err\/($1+1)\"|bc\n}\nex_euler $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-18 13:00:01"},{"id":337300,"user_id":null,"body":"#!\/bin\/bash\nex_euler() {\n  bc -l <<< \"scale=9; n=$1; t=y=1; x=x1=e=0; xn=t+x1; h=t\/n;\n             while (x <= xn) { \n               z = 1 + 1\/2*(e(-4*x) - e(-2*x));\n               if (y>z) { e += (y-z)\/z; } else { e += (z-y)\/z; }\n               y += h * (2 - e(-4*x) - 2*y);\n               x += h;\n             };\n             print e\/(n+1)\"\n}\nex_euler $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-18 13:00:01"},{"id":337301,"user_id":null,"body":"#!\/bin\/bash\nex_euler() {\nmeanError=$(bc -l <<< \"\n\tscale = 16\n\tn = $1\n\txdelta = 1\/n\n\tdefine ydot (y, t) {\n\t\treturn 2 - e(-4*t) - 2*y\n\t}\n\tdefine yexact (t) {\n\t\treturn 1 + 0.5*e(-4*t) - 0.5*e(-2*t)\n\t}\n\tdefine abs (x) {\n\t\tif (x >= 0) {\n\t\t\treturn x\n\t\t} else {\n\t\t\treturn -1*x\n\t\t}\n\t}\n\tx[0] = 0\n\ty[0] = 1\n\ta[0] = 0\n\terror = 0\n\tfor (i=1; i<=n; i++) {\n\t\tx[i] = x[i-1] + xdelta\n\t\ty[i] = y[i-1] + ydot(y[i-1], x[i-1]) * xdelta\n\t\ta[i] = abs(y[i] - yexact(x[i])) \/ yexact(x[i])\n\t\terror = error + a[i]\n\t}\n\terror \/ (n+1)\n\")\n#printf \"%.6f\n\" $meanError\necho ${meanError:0:8}\n}\nex_euler $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-18 13:00:01"}],"563a631f7cbbc236cf0000c2":[{"id":337302,"user_id":null,"body":"expr $1 + 2 \\* $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337303,"user_id":null,"body":"#!\/bin\/bash\necho $(( $1+$2*2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337304,"user_id":null,"body":"echo `expr $1 + $2 * 2`","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337305,"user_id":null,"body":"position=$1\nroll=$2\n# your code here\n#move() {\necho \"$2*2+$1\" | bc\n#}\n\n#move","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337306,"user_id":null,"body":"IFS=$'\n'\n\ncalc_pos () {\n  local pos=$1 roll=$2*2\n  echo $((pos + roll))\n}\n\ncalc_pos $*","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337307,"user_id":null,"body":"#!\/bin\/bash\n\necho \"$2*2+$1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337308,"user_id":null,"body":"bc<<<$1+$2*2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337309,"user_id":null,"body":"position=$1\nroll=$2\necho $(($(($roll * 2)) + $position))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337310,"user_id":null,"body":"position=$1\nroll=$2\n# your code here\nhero=$(($1+$2*2))\necho $hero","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337311,"user_id":null,"body":"position=$1\nroll=$2\n# your code here\n\nrun () {\necho $(( position + roll * 2 ))\n}\n\nrun","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"563b662a59afc2b5120000c6":[{"id":337312,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\ns_population=$1;\ni_percent=$2;\na_population=$3;\nf_population=$4;\nt_years=0;\nwhile [ $s_population -lt $f_population ];\ndo\n  s_population=$(bc <<< \"$s_population+$s_population*$i_percent\/100+$a_population\");\n  t_years=$(($t_years+1));\ndone\necho $t_years\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337313,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\n  awk \"\n    BEGIN {\n      p = $1\n      y = 0\n      r = $2 \/ 100 + 1\n      a = $3\n      t = $4\n      while (p < t) {\n        p = int(p * r + a)\n        y += 1\n      }\n      print y\n    }\n  \"\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337314,"user_id":53,"body":"#!\/bin\/bash\nnb_year() {\n  echo $1 $2 $3 $4 | awk '\n  { \n    ans = 0;\n    n = $1;\n    while (n < $4) {\n      n = n + int(n * ($2 \/ 100)) + $3;\n      ans = ans + 1;\n    }\n    print ans;\n  }'\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337315,"user_id":492,"body":"#!\/bin\/bash\nnb_year() {\n    p0=$1; percent=$2; aug=$3; p=$4; cnt=0\n    while (( $(echo \"$p0 < $p\" | bc) ))\n    do\n        p0=$(bc <<<\"scale=0;$p0 + $p0 * $percent*0.01 + $aug\")\n        #decimal parts of people don't give birth\n        p0=$(echo \"$p0\" | awk '{print int($1)}')\n        (( cnt++ ))\n    done\n    echo $cnt\n}\nnb_year $1 $2 $3 $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337316,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\n  bc <<< \"\n  count = 0\n  p0 = $1\n  while (p0 < $4) {\n    p0 += (p0 * $2 \/ 100 + $3)\n    count += 1\n  }\n  print count\"\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337317,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\n  bc <<< \"\n  scale = 5\n  count = 0\n  p0 = $1\n  per = $2 \/ 100\n  while (p0 < $4) {\n    scale = 0\n    p0 += (p0 * per + $3) \/ 1\n    count += 1\n  }\n  print count\"\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337318,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\n    # your code\n    p0=$1\n    percent=$2\n    aug=$3\n    p=$4\n    year=0\n  while [ $p0 -lt $p ]\n  do\n  year=$(( year+1 ))\n  p0=$(echo \"$p0 + $p0 * $percent \/ 100 + $aug\" | bc)\n  \n  done\n  echo $year  \n \n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337319,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\n  local ha=$1\n  local pt=$2\n  local in=$3\n  local year=0\n  local totalYears=0\n  while [[ $year -lt $4 ]]\n  do\n    year=$(bc <<< \"$ha +  $ha * $pt \/ 100 + $in\")\n    ha=$year\n    totalYears=$((totalYears + 1))\n  done\n  echo \"$totalYears\"\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337320,"user_id":null,"body":"#!\/bin\/bash\nnb_year() {\n    year=0\n    population=$1\n    while [ ${population} -lt $4 ]\n    do\n      population=$(echo \"scale=0;${population}+$3+${population}*$2\/100\" | bc)\n      year=$((year+1))\n    done\n    echo $year\n}\n\nnb_year $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337321,"user_id":null,"body":"pop=\"$1\"\nperc=\"$2\"\ndelta=\"$3\"\ngoal=\"$4\"\n\nfor ((years=\"0\"; pop < goal; years++)); do\n  pop=$(printf \"${pop} * (1.0 + ${perc} \/ 100) + ${delta}\n\" | bc -l)\n  pop=${pop%.*} # this removes the fraction part\ndone\n\nprintf \"$years\n\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"563f0c54a22b9345bf000053":[{"id":337322,"user_id":492,"body":"#!\/bin\/bash\necho $(( 1 << $1 ))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337323,"user_id":null,"body":"#!\/bin\/bash\na=1\nlet a=2**$1\necho $a","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337324,"user_id":null,"body":"#!\/bin\/bash\necho $1 | awk '{\n  n_pp = 1\n  n_p = 2\n  \n  for (idx = 2; idx <= $0; idx++) {\n    res = (-6 * n_pp * n_p) \/ (n_p - 5 * n_pp)\n    n_pp = n_p\n    n_p = res\n  }\n  \n  printf \"%.f\", res\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337325,"user_id":null,"body":"#!\/bin\/bash\nu0=1\nu1=2\nfor i in $(seq 2 $1)\ndo\n    \n    tmp=$u1\n    u1=$((6*u0\/(5*u0-u1)*u1))\n    u0=$tmp\n    printf \"i: %d -----u0: %d, u1:%d\n\" $i $u0 $u1\ndone\necho $u1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337326,"user_id":null,"body":"#!\/bin\/bash\n...........\necho \"scale=0; 2^$1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337327,"user_id":null,"body":"#!\/bin\/bash\nfcn(){\n  echo $[ 2 ** $1 ]\n}\nfcn \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337328,"user_id":null,"body":"#!\/bin\/bash\n\ncounter=2\nu0=1\nu1=2\n\nif (( $1 == 0)) ; then\n  echo $u0\n  exit\nelif (( $1 == 1)) ; then\n  echo $u1\n  exit\nfi\n\nwhile (( counter <= $1 )) ; do\n\nu2=`echo \"(-6 * $u0 * $u1) \/ ($u1 - 5 * $u0) \" | bc`\n\nu0=$u1\nu1=$u2\n\ncounter=$((counter + 1))\ndone\n\necho $u2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337329,"user_id":null,"body":"#!\/bin\/bash\nu[0]=1\nu[1]=2\n[ $1 -gt 1 ] && for i in `eval echo {2..$1}`; do\n    u[$i]=`expr 6 \\* ${u[$i-2]} \/ \\( 5 \\* ${u[$i-2]} - ${u[$i-1]} \\) \\* ${u[$i-1]}`\ndone\necho ${u[$1]}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337330,"user_id":null,"body":"#!\/bin\/bash\n#Kn=Un+1\/Un\n#Kn+1=6\/(5-Kn)\nbc <<<\"2^$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337331,"user_id":null,"body":"#!\/bin\/ksh\n#\n# original code to calculate values:\n# #!\/bin\/ksh\n# #\n# #\n# get_np2 () {\n#     upper=$( expr $1 \\* $2 )\n#     lower=$( expr $2 - 5 \\* $1 )\n#     echo $( expr 0 - 6 \\* $upper \/ $lower )\n# }\n# #\n# let u_n=1\n# let u_np1=2\n# u_np2=`get_np2 $u_n $u_np1`\n# n=$1\n# echo \"case  \\$1  in\"\n# count=2\n#     echo \"    \\\"$count\\\")\"\n#     echo \"        echo $u_np2;;\"\n# while [ $count -le $n ]; do \n#     u_n=$u_np1\n#     u_np1=$u_np2\n#     u_np2=`get_np2 $u_n $u_np1`\n#     count=$(( $count + 1 ))\n#     echo \"    \\\"$count\\\")\"\n#     echo \"        echo $u_np2;;\"\n# done\n# echo \"    *)              \n# esac\"\n# \n#\n#\n#\ncase  $1  in\n    \"2\")\n        echo 4;;\n    \"3\")\n        echo 8;;\n    \"4\")\n        echo 16;;\n    \"5\")\n        echo 32;;\n    \"6\")\n        echo 64;;\n    \"7\")\n        echo 128;;\n    \"8\")\n        echo 256;;\n    \"9\")\n        echo 512;;\n    \"10\")\n        echo 1024;;\n    \"11\")\n        echo 2048;;\n    \"12\")\n        echo 4096;;\n    \"13\")\n        echo 8192;;\n    \"14\")\n        echo 16384;;\n    \"15\")\n        echo 32768;;\n    \"16\")\n        echo 65536;;\n    \"17\")\n        echo 131072;;\n    \"18\")\n        echo 262144;;\n    \"19\")\n        echo 524288;;\n    \"20\")\n        echo 1048576;;\n    \"21\")\n        echo 2097152;;\n    \"22\")\n        echo 4194304;;\n    \"23\")\n        echo 8388608;;\n    \"24\")\n        echo 16777216;;\n    \"25\")\n        echo 33554432;;\n    \"26\")\n        echo 67108864;;\n    \"27\")\n        echo 134217728;;\n    \"28\")\n        echo 268435456;;\n    \"29\")\n        echo 536870912;;\n    \"30\")\n        echo 1073741824;;\n    \"31\")\n        echo 2147483648;;\n    \"32\")\n        echo 4294967296;;\n    \"33\")\n        echo 8589934592;;\n    \"34\")\n        echo 17179869184;;\n    \"35\")\n        echo 34359738368;;\n    \"36\")\n        echo 68719476736;;\n    \"37\")\n        echo 137438953472;;\n    \"38\")\n        echo 274877906944;;\n    \"39\")\n        echo 549755813888;;\n    \"40\")\n        echo 1099511627776;;\n    \"41\")\n        echo 2199023255552;;\n    \"42\")\n        echo 4398046511104;;\n    \"43\")\n        echo 8796093022208;;\n    \"44\")\n        echo 17592186044416;;\n    \"45\")\n        echo 35184372088832;;\n    \"46\")\n        echo 70368744177664;;\n    \"47\")\n        echo 140737488355328;;\n    \"48\")\n        echo 281474976710656;;\n    \"49\")\n        echo 562949953421312;;\n    \"50\")\n        echo 1125899906842624;;\n    \"51\")\n        echo 2251799813685248;;\n    \"52\")\n        echo 4503599627370496;;\n    \"53\")\n        echo 9007199254740992;;\n    \"54\")\n        echo 18014398509481984;;\n    \"55\")\n        echo 36028797018963968;;\n    \"56\")\n        echo 72057594037927936;;\n    \"57\")\n        echo 144115188075855872;;\n    \"58\")\n        echo 288230376151711744;;\n    \"59\")\n        echo 576460752303423488;;\n    \"60\")\n        echo 1152921504606846976;;\n    \"61\")\n        echo 2305843009213693952;;\n    \"62\")\n        echo 4611686018427387904;;\n    \"63\")\n        echo 9223372036854775808;;\n    \"64\")\n        echo 18446744073709551616;;\n    \"65\")\n        echo 36893488147419103232;;\n    \"66\")\n        echo 73786976294838206464;;\n    \"67\")\n        echo 147573952589676412928;;\n    \"68\")\n        echo 295147905179352825856;;\n    \"69\")\n        echo 590295810358705651712;;\n    \"70\")\n        echo 1180591620717411303424;;\n    \"71\")\n        echo 2361183241434822606848;;\n    \"72\")\n        echo 4722366482869645213696;;\n    \"73\")\n        echo 9444732965739290427392;;\n    \"74\")\n        echo 18889465931478580854784;;\n    \"75\")\n        echo 37778931862957161709568;;\n    \"76\")\n        echo 75557863725914323419136;;\n    \"77\")\n        echo 151115727451828646838272;;\n    \"78\")\n        echo 302231454903657293676544;;\n    \"79\")\n        echo 604462909807314587353088;;\n    \"80\")\n        echo 1208925819614629174706176;;\n    \"81\")\n        echo 2417851639229258349412352;;\n    \"82\")\n        echo 4835703278458516698824704;;\n    \"83\")\n        echo 9671406556917033397649408;;\n    \"84\")\n        echo 19342813113834066795298816;;\n    \"85\")\n        echo 38685626227668133590597632;;\n    \"86\")\n        echo 77371252455336267181195264;;\n    \"87\")\n        echo 154742504910672534362390528;;\n    \"88\")\n        echo 309485009821345068724781056;;\n    \"89\")\n        echo 618970019642690137449562112;;\n    \"90\")\n        echo 1237940039285380274899124224;;\n    \"91\")\n        echo 2475880078570760549798248448;;\n    \"92\")\n        echo 4951760157141521099596496896;;\n    \"93\")\n        echo 9903520314283042199192993792;;\n    \"94\")\n        echo 19807040628566084398385987584;;\n    \"95\")\n        echo 39614081257132168796771975168;;\n    \"96\")\n        echo 79228162514264337593543950336;;\n    \"97\")\n        echo 158456325028528675187087900672;;\n    \"98\")\n        echo 316912650057057350374175801344;;\n    \"99\")\n        echo 633825300114114700748351602688;;\n    \"100\")\n        echo 1267650600228229401496703205376;;\n    \"101\")\n        echo 2535301200456458802993406410752;;\n    *)              \nesac","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"564057bc348c7200bd0000ff":[{"id":337332,"user_id":492,"body":"#!\/bin\/bash\nthirt(){\n    n=$1; w=(1 10 9 12 3 4)\n    while true ; do\n        r=$n;q=-1;c=0;j=0\n        while [ $q != 0 ]\n        do\n            let q=$r\/10\n            let ndx=$j%6\n            let c=($r%10)*w[$ndx]+$c\n            r=$q\n            j=$(( $j + 1 ))\n        done      \n        if [ $c = $n ]; then\n            res=$c\n            break\n        else\n            n=$c\n        fi\n    done\n    echo $res\n}\nthirt $1 ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337333,"user_id":null,"body":"#!\/bin\/bash\n\nfunction thirt() {\n  echo $1 | rev | grep -o . | awk 'BEGIN{f[1]=1;f[2]=10;f[3]=9;f[4]=12;f[5]=3;f[0]=4;}\\\n                        {a[NR]=$0}END{sum=0;for(i in a)sum+=a[i]*f[i%6];print sum}'\n}\n\nn=$1\nwhile [[ $(thirt $n) -ne $n ]];do\n  n=$(thirt $n)\ndone\necho $n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337334,"user_id":1045,"body":"#!\/bin\/bash\nprev=0; sum=$1; l=6\ndeclare -a arr=( 1 10 9 12 3 4 )\nwhile (( $sum != $prev )); do\n  prev=$sum; sum=0; dgts=$(echo \"$prev\"|rev)\n  for (( c=0; c<${#dgts}; c++ )); do\n    val=$(($c%$l))\n    sum=$(($sum + ${dgts:$c:1}*${arr[$val]}))  \n    done\n  done\n  echo $prev","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337335,"user_id":null,"body":"#!\/bin\/bash\n\nrecursive()\n{\n\tlocal remainders=(1 10 9 12 3 4)\n\tlocal integer=$1\n\ti=0\n\tresult=0\n\twhile read char\n\tdo\n\t\tresult=$(( $result+$char*${remainders[$i]} ))\n\t\ti=$(($i+1))\n\t\tif [ $i -eq ${#remainders[@]} ]\n\t\tthen\n\t\t\ti=0\n\t\tfi\n\tdone< <(grep -o . <<< $(echo \"$integer\" | rev))\n\tif [ ${#result} -eq 2 ]\n\tthen\n\t\techo $result\n\telse\n\t\trecursive $result\n\tfi\n}\n\nrecursive $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337336,"user_id":null,"body":"#!\/bin\/bash\n\nfunction thirt ()\n{\n    local rem=1 total=0\n\n    for i in `grep -o . <<< $(rev <<< $1)` \n    do\n        total=$(expr $total + $(bc <<<\"$rem % 13 * $i\"))\n        rem=$(bc <<< \"$rem * 10\")\n    done\n\n    [ $total -eq $1 ] && echo $total || thirt $total\n}\n\nthirt $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337337,"user_id":null,"body":"#!\/bin\/bash\n\nzmienna=$1\narray=(1 10 9 12 3 4)\n\n\nwhile [[ $zmienna -ne $wynik ]]\ndo\nz=0\n[[ ! -z $wynik ]] && zmienna=$wynik && wynik=\"\" || zmienna=$1\nnr=${#zmienna}\n\nfor ((i=$((nr-1));i>=0;i--))\ndo\nwynik=$((wynik + ${zmienna:$i:1} * ${array[$z]} ))\n[[ $z -eq 5 ]] && z=0 || z=$((z+1))\ndone\ndone\n\necho $wynik\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337338,"user_id":null,"body":"#!\/bin\/bash\n\nflag=true\nseq=(1 10 9 12 3 4)\nnum=$1\nwhile $flag\ndo\n  flag=false\n  num=$(rev <<< $num)\n  len=${#num}\n  res=0\n  for ((i=0; i<$len;i++));\n  do\n  res=$(($res+${num:i:1}*${seq[$i % 6]}))\n  done\n  num=$(rev <<< $num)\n  if [[ $res != $num ]]\n  then\n    num=$res\n    flag=true\n  fi\ndone\necho $num","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337339,"user_id":null,"body":"#!\/bin\/bash\nthirt () {\n   local last=-1 curr=\"$1\"\n   while [[ ! \"$last\" == \"$curr\" ]]; do\n       local tmp=0 len=\"${#curr}\"\n       for ((i=0; i<len; i++)); do\n           tail=\"${curr:$((len - i-1)):1}\"\n           factor=$((10 ** i % 13))\n           tmp=$((tmp + tail * factor))\n       done\n       last=$curr\n       curr=$tmp\n   done\n   echo $curr\n}\nthirt \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337340,"user_id":null,"body":"#!\/bin\/bash\nfctRec(){\n  nb=$1\n  result=0\n  index=0\n  tot=0\n  #the result of the 10^i mod 13 (could be built dynamically as well)\n  tab=(1 10 9 12 3 4)\n\n  while [ ${#nb} -gt 0 ]\n  do\n    #get number of digit in number\n    len=${#nb}\n    #get last digit\n    digit=${nb:$((len-1)):1}\n    #multiply last digit with the next one in tab \n    tot=$((tot+$digit*${tab[$index]}))\n    #get next index of the tab \n    index=$(((index+1)%${#tab[*]}))\n    #remove last digit of the number\n    nb=${nb:0:$((len-1))}\n  done\n  if [ $1 -eq $tot ] #if stationary -> done\n  then\n    echo $tot\n  else  #else, call recursively the method on the result\n    echo $(fctRec $tot) \n  fi\n}\nfctRec $1\nexit 0\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337341,"user_id":null,"body":"#!\/bin\/bash\n\nVAR=$1\nARR=( 1 10 9 12 3 4 1 10 9 12 3 4 1 10 9 12 3 4 1 10 9 12 3 4 )\nwhile [ ${#VAR} -ge 3 ]\ndo\n S=0\nfor (( i=0; i<${#VAR}; i++ ))\n  do\n#  echo -n \"$i \"; echo -n \"$S \"\n  S=$(($S + ${VAR:(-$i-1):1} * ${ARR[$i]}))\n#  echo $S\n  done\n  VAR=$S\n #echo $VAR\ndone\necho $VAR\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56445c4755d0e45b8c00010a":[{"id":337342,"user_id":492,"body":"#!\/bin\/bash\n\nfortune(){\n  p=$2;n=$4;i=$5\n  prev_x=$1;prev_c=$3;noux_x=-1;nou_c=-1\n  res=\"false\"\n  k=1\n  while true ; do\n    nou_x=$(echo \"scale=16;$prev_x + $p \/ 100.0 * $prev_x - $prev_c\"|bc)\n    nou_c=$(echo \"scale=16;$prev_c + $i \/ 100.0 * $prev_c\"|bc)\n    prev_x=$(echo \"scale=0;$nou_x\/1\" | bc)\n    prev_c=$(echo \"scale=0;$nou_c\/1\" | bc)\n    k=$(( $k + 1 ))\n    if (( $(echo \"$k >= $n\" |bc -l) )); then\n          break\n    fi\n  done\n  if (( $(echo \"$nou_x >= 0\" |bc -l) )); then\n          res=\"true\"\n  fi\n  echo $res\n}\nfortune $1 $2 $3 $4 $5","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337343,"user_id":1045,"body":"#!\/bin\/bash\nbal=$(echo \"scale=0; $1\/1\"|bc -l); pct=$(echo \"$2\/100\"|bc -l); \nexp=$3; yr=$4; inf=$(echo \"$5\/100\"|bc -l)\nwhile (( bal>0 && yr>1 )); do\n  bal=$(echo \"scale=0; ($bal+$pct*$bal-$exp)\/1\"|bc -l)\n  exp=$(echo \"scale=0; ($exp+$inf*$exp)\/1\"|bc -l)\n  let yr=yr-1\n  done\n(( bal>=0 )) && echo \"true\" \n(( bal<0 )) && echo \"false\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337344,"user_id":null,"body":"#!\/bin\/bash\n\nf=$1\np=$2\nc=$3\nn=$4\ni=$5\n\nfor k in $(seq 1 $(( n - 1 )))\ndo\n  f=$(bc <<< \"$f + ($f * $p \/ 100) - $c\")\n  c=$(bc <<< \"$c + ($c * $i \/ 100)\")\ndone\n\nif [[ $f -ge 0 ]]\nthen\n  echo \"true\"\nelse\n  echo \"false\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337345,"user_id":492,"body":"#!\/bin\/bash\n\nfortune(){\n  p=$2;n=$4;i=$5\n  prev_x=$1;prev_c=$3;noux_x=-1;nou_c=-1\n  res=\"false\"\n  k=1\n  while true ; do\n    nou_x=$(echo \"scale=16;$prev_x + $p \/ 100.0 * $prev_x - $prev_c\"|bc)\n    nou_c=$(echo \"scale=16;$prev_c + $i \/ 100.0 * $prev_c\"|bc)\n    prev_x=$(echo \"scale=0;$nou_x\/1\" | bc)\n    prev_c=$(echo \"scale=0;$nou_c\/1\" | bc)\n    k=$(( $k + 1 ))\n    if (( $(echo \"$k >= $n\" |bc -l) )); then\n          break\n    fi\n  done\n  if (( $(echo \"$nou_x >= 0\" |bc -l) )); then\n          res=\"true\"\n  fi\n  echo $res\n}\nfortune $1 $2 $3 $4 $5","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337346,"user_id":null,"body":"#!\/bin\/bash\n# initial money put in\nf0=\"$1\" # initial money deposited\np=$(bc <<< \"scale=2;$2*0.01\") # Yearly interest rate\nc0=\"$3\" # Maximum that can be taken out of bank per year.\nn=\"$4\" # number of years\ni=$(bc <<< \"scale=2;$5*0.01\")\nyear=1\n\necho year: $year f0: $f0 c0: $c0 | sed 's\/ \/\\t\/g'\nfortune(){\n\tfor y in $(eval echo {1..$n}); do\n\t\tc0=$(bc <<< \"scale=2;$c0+$c0*$i\")\n\t\tf0=$(bc <<< \"scale=2;$f0+$f0*$p-$c0\")\n\t\tf0=$(printf \"%.0f\" \"$f0\")\n\t\tc0=$(printf \"%.0f\" \"$c0\")\n\t\t((year=year+1))\n\t\techo year: $year f0: $f0 c0: $c0 | sed 's\/ \/\\t\/g'\n\t\tif [ $f0 -le 0 ]; then\n\t\t\techo \"false\"\n\t\tfi\n\tdone\n\techo \"true\"\n}\n\nfortune\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337347,"user_id":53,"body":"#!\/bin\/bash\nawk -v f0=$1 -v p=$2 -v c0=$3 -v n=$4 -v i=$5 'BEGIN {\n  print \"true\"\n  print \"false\"\n  f = f0\n  c = c0\n  pp = p \/ 100\n  ii = i \/ 100\n  m = n - 1\n  while (m > 0) {\n    m -= 1\n    f += int(pp * f - c)\n    c += int(ii * c)\n    if (f < 0) {\n      print \"false\"\n      exit\n    }\n  }\n  if (f >= 0) {\n    print \"true\"\n  } else {\n    print \"false\"\n  }\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337348,"user_id":null,"body":"#!\/bin\/bash\n\nf=$1\np=$2\nc=$3\nn=$4\ni=$5\n\nfor j in $(eval echo {0..$(($n-2))})\ndo\n  f=$(echo \"$f+$f*$p\/100-$c\"  | bc )\n  c=$(echo  \"$c+ $c*$i\/100\" | bc )\n\ndone\n\nif [[ $f -ge 0 ]]\nthen\n  echo \"true\"\nelse\n  echo \"false\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337349,"user_id":null,"body":"#!\/bin\/bash\n\nf=$1\np=$2\nc=$3\nn=$4\ni=$5\n\n#for k in $(seq 1 $(( n - 1 )))\nfor k in $(eval echo {1..$(($n-1))})\n\ndo\n  echo $k\n  #f=$(bc <<< \"$f + ($f * $p \/ 100) - $c\")\n  #c=$(bc <<< \"$c + ($c * $i \/ 100)\")\n    f=$(echo \"$f + ($f * $p \/ 100) - $c\"  | bc )\n    c=$(echo  \"$c +  ($c * $i \/ 100)\" | bc )\n\ndone\n\nif [[ $f -ge 0 ]]\nthen\n  echo \"true\"\nelse\n  echo \"false\"\nfi\necho $f\necho $1\necho $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337350,"user_id":null,"body":"#!\/bin\/bash\nfortune() {\n\tlocal fN cN\n\tfN=$1\n\tcN=$3\n\tfor ((n = 0; n < $4 - 1; n++)); do\n\t\t((${fN%.*} < ${cN%.*})) && echo \"false\" && return\n\t\t# begin with f2 c2\n\t\tfN=$(bc -l <<<\"$fN * (1 + $2 \/ 100) - $cN\")\n\t\tcN=$(bc -l <<<\"$cN * (1 + $5 \/ 100)\")\n\tdone\n\techo \"true\"\n}\nfortune $@","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337351,"user_id":null,"body":"#!\/bin\/bash\n\nf=$1; p=$2; c=$3; n=$4; i=$5\n\nwhile ((n-->0)); do\n  (( f < 0 )) && echo false && exit 0\n  f=$(echo \"(1000*$f + 10*$p*$f - 1000*$c)\/1000\" | bc)\n  c=$(echo \"(1000*$c + 10*$i*$c)\/1000\" | bc)\ndone\necho true","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56484848ba95170a8000004d":[{"id":337352,"user_id":null,"body":"#!\/bin\/bash\ngps() {\n  echo $2 | tr \",\" \"\n\" | awk \"BEGIN{max=0}\n  {if(NR!=1 && \\$1-n>max){max=\\$1-n}};\n  {n=\\$1};\n  END{print max * 3600 \/ $1}\"\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337353,"user_id":492,"body":"#!\/bin\/bash\ngps() {\n    d=$2; s=$1\n    IFS=',' read -ra TAB <<< \"$d\"\n    lg=${#TAB[@]};\n    if [ \"$lg\" -le 1 ]; then\n        echo \"0\"\n        exit 0\n    fi\n    max=-1\n    for((i=0;i < lg - 1;i+=1)) do\n        a=\"${TAB[i]}\"; b=\"${TAB[i+1]}\"\n        sp=$(bc <<<\"scale=16;3600 * ($b - $a) \/ $s\")\n        if (( $(echo \"$sp > $max\" | bc) )); then\n            max=$sp\n        fi\n    done\n    t=$(echo \"$max\" | awk '{print int($1)}')\n    echo $t\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337354,"user_id":null,"body":"#!\/bin\/bash\n\ngps() {\n  max=-1\n  x=${2\/\/,\/}\n  prev=${x[0]}\n  for i in $x; do\n    res=$(echo \"3600*($i-$prev)\/$1\" | bc)\n    if (( max < res )); then\n        max=$res\n    fi\n    prev=$i\n  done\n  echo \"$max\"\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337355,"user_id":null,"body":"#!\/bin\/bash\ngps() {\n  awk \"\n    BEGIN {\n      t = $1\n      n = split(\\\"$2\\\", d, \\\",\\\")\n      max = 0\n      for (i = 1; i < n; i += 1) {\n        r = int(3600 * (d[i + 1] - d[i]) \/ t)\n        if (r > max) {\n          max = r\n        }\n      }\n      print max\n    }\n  \"\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337356,"user_id":null,"body":"\n\n#!\/bin\/bash\ngps() {\n  arr=( $(printf -- \"$2\" | tr -d ',' ) )\n  \n  for (( i = 0; i < ${#arr[@]} - 1; i++)); do\n    speed=$(echo \"3600 * (${arr[i + 1]} - ${arr[i]}) \/ $1\" | bc -l)\n    floor=${speed%%.*}\n    (( floor > max_speed )) && max_speed=$floor \n  done\n  echo \"$max_speed\"\n}\ngps $1 \"$2\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337357,"user_id":null,"body":"#!\/bin\/bash\ngps() {\n  readarray -t -d ', ' arr < <(printf -- \"$2\")\n  \n  for (( i = 0; i < ${#arr[@]} - 1; i++)); do\n    speed=$(echo \"3600 * (${arr[i + 1]} - ${arr[i]}) \/ $1\" | bc -l)\n    floor=${speed%%.*}\n    [[ $floor -gt $max_speed ]] && max_speed=$floor \n  done\n  echo \"$max_speed\"\n}\ngps $1 \"$2\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337358,"user_id":null,"body":"#!\/bin\/bash\ngps() {\n    \n    sections=$( echo \"${2}\" | sed \"s\/,\/ \/g\" )\n    sections=( $sections )\n    max=0\n    \n    getAverage() {\n      average=$( echo \"3600*(${2}-${1})\/${3}\" | bc )\n      echo \"$average\"\n    }\n    \n    for (( i=0;i<${#sections[@]}-1;i++ ));\n    do\n       average=$( getAverage ${sections[i]} ${sections[i+1]} $1 )\n       if [[ average -gt max ]];\n       then\n         max=$average\n       fi\n    done\n    \n    echo \"$max\"\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337359,"user_id":null,"body":"#!\/bin\/bash\n\nmax () {\n  if [[ $1 -ge $2 ]]; then\n    echo $1;\n  else\n    echo $2;\n  fi\n}\n\n\ngps () {\n  IFS=\", \";\n  read -a coords <<< $2;\n  length=${#coords[@]};\n  maxI=$(($length - 1));\n  maxSpeed=0;\n\n  for (( i = 0; i < $maxI; i++ )); do\n    curr=${coords[$i]};\n    next=${coords[$(($i + 1))]};\n    speed=$(echo \"3600 * ($next - $curr) \/ $1\" | bc);\n    maxSpeed=$(max $speed $maxSpeed);\n  done;\n  \n  echo $maxSpeed;\n};\n\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337360,"user_id":null,"body":"#!\/bin\/bash\ngps() {\n    prev=''\n    diff=''\n    difftomax=''\n    max=0\n    for val in $2; do\n      val=${val\/,\/}\n      val=`echo $val*100|bc`\n      val=${val\/.*\/}\n      if [[ $prev != \"\" ]]; then\n        diff=$((val-prev))\n        difftomax=$((max-diff))\n        if [[ $difftomax == \"-\"* ]]; then\n          max=$diff\n        fi\n      fi\n      prev=$val\n    done\n    maxavgspeed=`echo 36*$max\/$1|bc -l`\n    maxavgspeed=${maxavgspeed\/.*\/}\n    echo $maxavgspeed\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337361,"user_id":null,"body":"#!\/bin\/bash\ngps() {\n    vm=-1\n    x=${2\/\/,\/}\n    t=${x[0]}\n    for f in $x\n    do \n    va=$(echo \"3600*($f-$t)\/$1\"|bc)\n    if (( vm < va ))\n    then\n    vm=$va\n    fi\n    t=$f\n    done\n    echo `echo \"$vm\"|bc`\n}\ngps $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56541980fa08ab47a0000040":[{"id":337362,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n\tfaulty=${1\/\/[a-m]\/}\n\techo \"${#faulty}\/${#1}\"\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337363,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n valid=\"abcdefghijklm\"\n err=$( echo ${1} | tr -d ${valid} )\n echo ${#err}\/${#1}\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337364,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n  ERRORS=`echo -n $1 | sed \"s\/[a-m]\/\/g\" `\n  echo \"${#ERRORS}\/${#1}\"\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337365,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n    err=${1\/\/[a-m]}\n    echo ${#err}\/${#1}\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337366,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\nerr=$(echo $1 | grep -o . | sort -f | grep -ve [a-m] | wc -l)\nlen=${#1}\necho $err\"\/\"$len\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337367,"user_id":null,"body":"#!\/bin\/bash\ns=$1 && echo \"$s\" | grep -o -i [n-z] | echo $(wc -l)\/${#s}\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337368,"user_id":null,"body":"#!\/bin\/bash                        \n                                   \nprinter_error() {                   \n    errors=$( echo $1 | tr -d a-m )\n    echo \"${#errors}\/${#1}\"        \n}                                  \n                                   \nprinter_error $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337369,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n  echo $(expr length $(tr -d \"[a-m]\" <<< $1))\/${#1}\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337370,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n    # your code\n    \n\n    strArr=($(echo $1|sed 's\/\\(.\\)\/\\1 \/g'))\n    numLetter=${#strArr[@]}\n    goodLetter=0\n    for letter in \"${strArr[@]}\";\n      do\n        if [[ $letter =~ [a-m] ]];\n          then\n            ((goodLetter++))\n        fi\n    done\n     badLetter=$((numLetter-goodLetter))\n    echo \"$badLetter\/$numLetter\"\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337371,"user_id":null,"body":"#!\/bin\/bash\nprinter_error() {\n  cadena=$1\n  divCadena=$(echo $cadena | tr \"[a-m]\" \"\n\" )\n  listaError=()\n  for addr in $divCadena\n  do\n      listaError=(${listaError[@]} $addr)\n  done\n  totalError=$(echo ${listaError[@]} | tr -d '[[:space:]]' )\n  echo \"${#totalError}\/${#cadena}\"\n}\nprinter_error $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5656b6906de340bd1b0000ac":[{"id":337372,"user_id":1657,"body":"#!\/bin\/bash\nlongest() {\n    echo $1$2 | grep -o . | sort -u | paste -sd \"\" -\n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337373,"user_id":null,"body":"#!\/bin\/bash\nlongest () {\n  echo \"$1$2\" | fold -w1 | sort -u | tr -d '\n'\n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337374,"user_id":null,"body":"#!\/bin\/bash\nlongest () {\n   string=\"$1$2\"\n   data=`echo \"$string\"|grep -o \"[a-z]\"|sort|uniq|tr -d '\n'`\n   echo \"$data\"\n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337375,"user_id":null,"body":"#!\/bin\/bash\nlongest () {\n   s1=$1\n   s2=$2\n   v=$(echo $s1 $s2 | grep -o . |sort|uniq|tr -d \"\\r\n\")\n   echo $v\n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337376,"user_id":null,"body":"echo $@ | perl -e '$uniq{$_} = 1 for split \"\", <>; $res .= $_ for sort keys %uniq; print $res'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337377,"user_id":null,"body":"#!\/bin\/bash\nr=\nfor i in $(echo $1$2|grep -o .|sort --unique);\ndo r=$r$i\ndone\necho $r","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337378,"user_id":1045,"body":"#!\/bin\/bash\nlongest () {\n  echo $( tr -cd \"$1$2\"  <<< \"abcdefghijklmnopqrstuvwxyz\" )\n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337379,"user_id":null,"body":"#!\/bin\/bash\n\necho $1$2 | grep -o -E '.' | sort -u | tr -d '\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337380,"user_id":null,"body":"#!\/bin\/bash\nlongest () {\nresult=\"$1$2\"\n\necho $result | fold -w1 | sort | uniq | tr -d \"\n\"\n\n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337381,"user_id":null,"body":"#!\/bin\/bash\nlongest () {\n    # your code\n    echo \"$1$2\"| grep -io \"[a-z]\"|sort|uniq|awk \"{print}\" ORS=''    \n}\nlongest \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"565abd876ed46506d600000d":[{"id":337382,"user_id":492,"body":"#!\/bin\/bash\nsimps() {                                              \n    echo \"define f(n) {\n    auto h,s1,s2, pi, x;\n    pi=4*a(1)\n    h=pi\/n;\n    s1=0;\n    s2=0;\n    e=n\/2\n    for (i=1;i<=e;i++) {x=(2*i-1)*h; x=1.5*(s(x)^3); s1=s1+x;}\n    for (i=1;i<e;i++) {x=2*i*h; x=1.5*(s(x)^3); s2=s2+x;}\n    return(pi \/ (3 * n) * (4 * s1 + 2 * s2));\n}; f($1)\" | bc -l\n}\nsimpson() {\n    r=$(simps $1)\n    echo $r\n}\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337383,"user_id":53,"body":"#!\/bin\/bash\necho $1 | awk '\n{ \n  n = $1;\n  k = 3.14159265358979323846 \/ n;\n  a = cos(k);\n  b = a * a * a;\n  m = k*(1+2*b+3*cos(2*k))\/sin(3*k);\n  printf(\"%.12f\", m);\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337384,"user_id":null,"body":"#!\/bin\/bash\n\nsimpson() {\n  # Is using awk considered cheating?\n  # I mean, to perform floating point operations we have to rely\n  # on some external command anyways... Once at that point why\n  # not use directly a scripting language? ;)\n  awk -v N=\"$1\" \"\n  function f(x) {\n    return 3.0 \/ 2.0 * sin(x)^3\n  }\n  \n  function simpson(n) {\n    PI = atan2(0, -1)\n    H = PI \/ n\n \n    first_sum = 0.0 \n    for(i = 1; i <= n \/ 2; i++) {\n      first_sum += f(a + (2 * i - 1) * H)\n    }\n    \n    second_sum = 0.0\n    for(i = 1; i <= n \/ 2 - 1; i++) {\n      second_sum += f(a + 2 * i * H)\n    }\n    \n    return (PI \/ (3.0 * n)) * (f(0) + f(PI) + 4 * first_sum + 2 * second_sum)\n  }\n  \n  BEGIN { printf(\\\"%.12g\\\", simpson(N)) }\n  \"\n}\n\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337385,"user_id":null,"body":"#!\/bin\/bash\nsimpson() {\n    # your code\nn=$1\ncat <<EOF | bc -l\nscale=15\npi=4*a(1)\ndefine f(x) {return s(x)*s(x)*s(x)*3.0\/2.0;}\ndefine simpson(a, b, n){\n  auto h, p1, p2, i\n  h = (b - a) \/ n\n  p1 = 0\n  p2 = 0\n  for (i=1;i<=n\/2;i++) {\n    p1 += f(a + (2 * i - 1) * h)\n  }\n  for (i=1;i<n\/2;i++) {\n    p2 += f(a + 2 * i  * h)\n  }\n  \n  return (b - a) * (f(a) + f(b) + 4 * p1 + 2 * p2) \/ (3 * n)\n}\nsimpson(0, pi, $n)\nEOF\n}\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337386,"user_id":null,"body":"#!\/bin\/bash\nsimpson() {\n\tbc -l <<<\"a=0; b=3.14159265359; n=$1;\ndefine f(x) {\n\treturn 3\/2*s(x)^3;\n}\ns1=0; s2=0; h=(b-a)\/n;\nfor (i = 1; i<=n\/2; i++) {\n\ts1+=f(a+(2*i-1)*h)\n\tif (i!=n\/2) s2+=f(a+2*i*h)\n}\ns1 *= 4; s2 *= 2;\nres=(b-a)\/(3*n)*(f(a) + f(b) + s1 + s2)\nscale=10; res\/1\"\n}\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337387,"user_id":null,"body":"#!\/bin\/bash\nsimpson() {\necho -e \"n=${1}; b=3.14159265359; h=b\/n; sum=0; \ndefine f ( x ) { \n    return 1.5*( s(x) ^ 3 );\n}\nfor ( i = 1; i <= 0.5*n-1; i++) {\n    sum = sum + 4.0*f((2*i-1)*h) + 2*f(2*i*h);\n}\nsum = (sum + f(0) + f(b) + 4.0*f((n-1)*h)) * h * 0.33333333333333333333;\nprint sum;\" | bc -l\n    return 0\n}\n\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337388,"user_id":null,"body":"#!\/bin\/bash\nsimpson() {\n  bc -l <<< \"n=$1; a=0; b=4*a(1); h=(b-a)\/n\n    define f(x) { return 3\/2*s(x)^3 }\n    s = f(a) + f(b)\n    for (i=1; i<=n\/2; i++) {\n      if (i<n\/2) s += 2 * f(a+2*i*h)\n      s += 4 * f(a+(2*i-1)*h)\n    }\n    s * h\/3\n  \"\n}\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337389,"user_id":null,"body":"#!\/bin\/bash\nsimpson() {\n    # your code\nbc -l << EOF\npi=4*a(1)\na=0\nb=pi\nn=$1\nh=(b-a)\/n\nres=3\/2*(s(a)^3 + s(b)^3)\nfor(i=1;i<=n\/2;i++) res=res+4*(3\/2*(s(a+(2*i-1)*h)^3))\nfor(i=1;i<=n\/2-1;i++) res=res+2*(3\/2*(s(a+2*i*h)^3))\n(b-a)\/(3*n)*res\nEOF\n}\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337390,"user_id":null,"body":"#!\/bin\/bash\n\nfunction simpson {\n  bc -l <<< \"\n  define f (x) {\n    return ((3\/2)*(s(x)^3))\n  }\n  \n  a = 0\n  b = 4*a(1) \/* PI *\/\n  n = $1\n  h = ((b-a)\/n)\n\n  sum1 = 0\n  for (i=1; i<=n\/2; i++) {\n    sum1 += f(a + (2*i - 1)*h)\n  }\n\n  sum2 = 0\n  for (i=1; i<=(n\/2)-1; i++) {\n    sum2 += f(a + 2*i*h)\n  }\n\n  ((b - a)\/(3*n))*(f(a) + f(b) + 4*sum1 + 2*sum2)\n\"\n}\n\nsimpson $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337391,"user_id":null,"body":"awk -v n=$1 '\nfunction f(x) { return 3\/2*(sin(x))^3 }\nfunction su1(   s, x) {\n    for (i = 1; i <= n\/2; i++) {\n        x  = a + (2*i - 1)*h\n        s += f(x)\n    }\n    s *= 4\n    return s\n} \nfunction su2(   s, x) {\n    for (i = 1; i <= n\/2 - 1; i++) {\n        x = a + 2*i*h\n        s += f(x)\n    }\n    s *= 2\n    return s\n}\n\nfunction rst() { \n    return f(a) + f(b)\n}\n\nBEGIN { \n  a = 0; b = 3.141592653589793\n  h = (b - a) \/ n\n\n  s1 = su1()\n  s2 = su2()\n  r  = rst()\n  \n  s = s1 + s2 + r\n  s *= (b - a) \/ (3*n)\n  printf \"%40.20g\n\", s\n}\n'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"565c0fa6e3a7d39dee000125":[{"id":337392,"user_id":null,"body":"#!\/bin\/bash\n#...........\n#v=$1\n#mu=$2\n#t=1\n\nbc -l <<< \"v=$1; mu=$2; t=1; g=9.81;\n          v\/3.6*t + v\/3.6*v\/3.6\/2\/mu\/g\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337393,"user_id":1045,"body":"#!\/bin\/bash\nv=$(echo \"$1*1000\/3600\"|bc -l); mu=$2\necho $(echo \"$v*$v\/(2*$mu*9.81)+$v\"|bc -l)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337394,"user_id":null,"body":"#!\/bin\/bash\necho \"scale=15; $1\/3.6 * $1\/3.6 \/ 2 \/ $2 \/ 9.81 + $1\/3.6\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337395,"user_id":null,"body":"#!\/bin\/bash\nv=$1;\nmu=$2;\necho \"scale=14;$v*$v\/(2*$mu*9.81*3.6*3.6)+$v\/3.6\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337396,"user_id":492,"body":"dist(){\n    v=$1\n    mu=$2\n    g=9.81             \n    coef=$(bc <<<\"scale=16;1000.0\/3600.0\") \n    dreact=$(bc <<<\"scale=16;$v*$coef\")\n    vms=$(bc <<<\"scale=16;$coef*$v\")\n    dbrak=$(bc <<<\"scale=16;0.5*$vms*$vms\/$mu\/$g\")\n    echo $(echo \"scale=2;$dreact+$dbrak\" | bc )\n}\ndist $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337397,"user_id":53,"body":"\n#!\/bin\/bash\ndist () {\n  bc <<< '\n    scale = 16\n    v = '$1'\n    mu = '$2'\n    u = (v * 5.0) \/ 18.0\n    m = u + (u * u) \/ (2.0 * mu * 9.81)\n    print m\n  '\n}\ndist $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337398,"user_id":null,"body":"#!\/bin\/bash\n\nt=1\ng=9.81\nv=$(bc -l <<< \"($1 * 1000 \/ 3600)\")\nmu=$2\ndt=$( bc -l <<< \"( $v * $t)\")\n\nd1=$(bc -l <<<  \"( $v * $v ) \/ ( 2 * $mu * $g )\")\n\nbc -l <<< \"$dt + $d1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337399,"user_id":null,"body":"#!\/bin\/bash\n\n#d1=v*v \/ 2 * mu *  g\nv=$1\nmu=$2\ng=9.81\nv=$(echo \"scale=6;$v*1000\/3600\" | bc)\nd1=$(echo \"$v*1\"|bc)\n#echo $d1\nd1=$(echo \"scale=6;(($v*$v) \/ (2 * $mu *  $g)) + $d1\" | bc)\necho $d1\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337400,"user_id":null,"body":"#!\/bin\/bash\nv=`echo \"scale=16; (1000\/3600)*$1\" | bc`\necho \"scale=16; ($v^2)\/(2*$2*9.81)+$v\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337401,"user_id":null,"body":"#!\/bin\/bash\nv=$(bc <<< \"scale=10;$1 * 1000 \/ 3600\")\necho $(bc <<< \"scale=10;$v + ($v * $v \/ (2 * $2 * 9.81))\")","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5663f5305102699bad000056":[{"id":337402,"user_id":null,"body":"#!\/bin\/bash\n\naccum () {\n\n[ -z $1 ] || [ -z $2 ] && echo \"-1\" && exit\n\nmina=$(echo $1 | tr ',' '\n' | awk '{ print length }' | sort -n | head -n1)\nmaxa=$(echo $1 | tr ',' '\n' | awk '{ print length }' | sort -n | tail -n1)\nminb=$(echo $2 | tr ',' '\n' | awk '{ print length }' | sort -n | head -n1)\nmaxb=$(echo $2 | tr ',' '\n' | awk '{ print length }' | sort -n | tail -n1)\n\n[ $(($maxa-$minb)) -gt $(($maxb-$mina)) ] && echo $(($maxa-$minb)) || echo $(($maxb-$mina))\n\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337403,"user_id":492,"body":"#!\/bin\/bash\naux4657='\nfrom sys import argv\ndef aux(s1, s2):\n    if (s1 == \"\") or (s2 == \"\"):\n        return -1\n    a1 = s1.split(\",\"); a2 = s2.split(\",\")\n    return str(max(abs(len(x) - len(y)) for x in a1 for y in a2))\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\naccum () {\n    echo `python -c \"$aux4657\" \"$1\" \"$2\"`\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337404,"user_id":null,"body":"#!\/bin\/bash\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\na1=$1\na2=$2\n\n# check inputs\n[[ -z ${a1} ]] && echo \"-1\" && exit 1\n[[ -z ${a2} ]] && echo \"-1\" && exit 1\n\n# functions\nmaxLen(){\n  echo \"$1\" | tr ',' '\n' | awk '{print length}' | sort -nk1 | tail -1\n}\nminLen(){\n  echo \"$1\" | tr ',' '\n' | awk '{print length}' | sort -nk1 | head -1\n}\naccum () {\n  d1=$(bc <<< $(maxLen \"$1\")\"-\"$(minLen \"$2\"))\n  d2=$(bc <<< $(maxLen \"$2\")\"-\"$(minLen \"$1\"))\n  [[ ${d1#-} -gt ${d2#-} ]] && echo ${d1#-} || echo ${d2#-}\n}\n\n# main\naccum \"${a1}\" \"${a2}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337405,"user_id":null,"body":"getMinMax () {\n  a=$1\n  max=0\n  min=${#a}\n  for s in $a; do\n    len=${#s}\n    if [ $len -gt $max ]; then\n      max=$len\n    fi\n    if [ $len -lt $min ]; then\n      min=$len\n    fi\n  done\n  echo \"$min $max\"\n}\n\naccum () {\n    if [ -z \"$1\" -o -z \"$2\" ]; then\n      echo -1\n      return 1\n    fi\n\n    a1=${1\/\/,\/ }\n    a2=${2\/\/,\/ }\n\n    read min1 max1 < <(getMinMax \"$a1\")\n    read min2 max2 < <(getMinMax \"$a2\")\n    \n    diff1=$(($max1 - $min2))\n    diff2=$(($max2 - $min1))\n\n    if [ ${diff1#-} -ge ${diff2#-} ]; then\n      echo ${diff1#-}\n    else\n      echo ${diff2#-}\n    fi \n}\n\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337406,"user_id":53,"body":"#!\/bin\/bash\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\naccum () {\n  s1=$1\n  s2=$2\n  xs=(${s1\/\/,\/ })\n  ys=(${s2\/\/,\/ })\n  m=-1\n  for x in \"${xs[@]}\"\n  do\n    a=${#x}\n    for y in \"${ys[@]}\"\n    do\n      b=${#y} \n      c=$(( a - b ))\n      c=$(( c < 0 ? -c : c ))\n      m=$(( c > m ? c : m ))\n    done\n  done\n  echo $m\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337407,"user_id":null,"body":"#!\/bin\/bash\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\naccum () {\n    ARRAY=()\n    for i in $(echo $1 | sed \"s\/,\/ \/g\")\n        do\n        for ii in $(echo $2 | sed \"s\/,\/ \/g\")\n            do\n            x=$(( ${#ii}-${#i} ))\n            y=$( sed \"s\/-\/\/\" <<< $x )\n            ARRAY+=($y) \n        done\n    done\n    if [ \"${#ARRAY[@]}\" -eq 0 ]; then\n        echo -1 \n    fi\n    max=0\n    for v in \"${ARRAY[@]}\"; do\n    if (( $v > $max )); then max=$v; fi; \n    done\n    echo $max\n\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337408,"user_id":null,"body":"#!\/bin\/bash\nget_len() {\n  echo -n \"$1\" | awk 'BEGIN { RS=\",\" } { print length }' | sort -n\n}\naccum () {\n  if [[ -z \"$1\" ]] || [[ -z \"$2\" ]]; then\n    echo -1\n    exit\n  fi\n  line1=$(get_len $1)\n  line1_min=$(head -1 <<< $line1)\n  line1_max=$(tail -1 <<< $line1)\n  line2=$(get_len $2)\n  line2_min=$(head -1 <<< $line2)\n  line2_max=$(tail -1 <<< $line2)\n  ((diff1 = line1_max - line2_min))\n  ((diff2 = line2_max - line1_min))\n  echo $((diff1 > diff2 ? diff1 : diff2))\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337409,"user_id":null,"body":"#!\/bin\/bash\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\naccum () {\n max=-1\n IFS=,\n for i in $1\n do\n  len=${#i}\n  for j in $2\n  do \n   l=${#j}\n   dif=$(($len - $l))\n   dif=${dif#-}\n   if [ $dif -gt $max ]\n   then \n    max=$dif\n   fi\n  done\n done\n echo \"$max\"\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337410,"user_id":null,"body":"#!\/bin\/bash\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\naccum () {\n    res=-1\n    for i in ${1\/\/,\/ }\n    do\n      for j in ${2\/\/,\/ }\n      do\n        delta=$(( ${#i}-${#j} ))\n        if (( ${delta#-} > res ))\n        then\n          res=${delta#-}\n        fi\n      done\n    done\n    echo $res\n}\naccum \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337411,"user_id":null,"body":" #!\/bin\/bash\n# input : 2 strings with substrings separated by `,`\n# output: number as a string\n\nfind_min() {\n    s=$(echo $1 | tr ',' ' ')\n    s=(${s})\n    min=0\n    for w in ${s[@]}\n    do\n        if [ ${#w} -lt $min ] || [ $min -eq 0 ]\n        then\n            min=${#w}\n        fi\n    done\n\n    echo $min \n}\n\nfind_max() {\n    s=$(echo $1 | tr ',' ' ')\n    s=(${s})\n    max=0\n    for w in ${s[@]}\n    do\n        if [ ${#w} -gt $max ] || [ $max -eq 0 ]\n        then\n            max=${#w}\n        fi\n    done\n    echo $max\n}\n\nd1=$(( $(find_max $2) - $(find_min $1) ))\nd2=$(( $(find_max $1) - $(find_min $2) ))\n\nif [$1 -eq \"\"] \nthen\n   echo \"-1\"\nelif [ $d1 -ge $d2 ]\nthen\n   echo \"$d1\"\nelse\n   echo \"$d2\" \nfi\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"566543703c72200f0b0000c9":[{"id":337412,"user_id":492,"body":"#!\/bin\/bash\nepidemic() {\n    tm=$1; n=$2; s0=$3; i0=$4; b=$5; a=$6\n    dt=$(bc <<< \"scale=8; $tm \/ $n\")\n    s=$s0; i=$i0; max=$i; #r=0; \n    for((k=0;k < $n;k++)) do\n        s1=$(bc <<< \"scale=8; $s - $dt * $b * $s * $i\")\n        i1=$(bc <<< \"scale=8; $i + $dt * ($b * $s * $i - $a * $i)\")\n        #r1=$(bc <<< \"scale=8; $r + $dt * $i * $a\")\n        if (( $(echo \"$i > $max\" |bc -l) ))\n        then\n            max=$i\n        fi\n        s=$s1; i=$i1; #r=$r1\n    done\n    max=$(echo \"$max\" | awk '{print int($1)}')\n    echo $max\n}\nepidemic $1 $2 $3 $4 $5 $6","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337413,"user_id":53,"body":"#!\/bin\/bash\nepidemic() {\nbc <<EOF\nscale=16;\ndefine aux(tm, n, s0, i0, b, a) {\n  s = s0;\n  i = i0;\n  r = 0;\n  t = 0;\n  dt = tm\/n;\n  imax = 0;\n  while ( t<tm ) {\n    sd = dt*(-b*s*i);\n    id = dt*(b*s*i-a*i);\n    rd = dt*(a*i);\n    s += sd;\n    i += id;\n    r += rd;\n    t += dt;\n    if ( i>imax ) {\n      imax = i; \n    }\n  }\n  print \"0\", imax;\n}\ntm=$1\nn=$2\ns0=$3\ni0=$4\nb=$5\na=$6\naux(tm, n, s0, i0, b, a)\nEOF\n}\nepidemic $1 $2 $3 $4 $5 $6 ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337414,"user_id":null,"body":"#!\/bin\/bash\nepidemic() {\n    # input\n    b=$5\n    a=$6\n    # calculation\n    dt=$(echo \"$1 \/ $2\" | bc -l )\n    declare -a vec=(\"$3\" \"$4\" '0.0' '0.0') # s i r i_max\n    i_old='0.0' # speed-up : to kill calculation before end\n    for (( i=0; i < $2; i++ )); do\n      vec=( $(echo -e \"${vec[0]} - $dt * $b * ${vec[0]} * ${vec[1]}\"\\\n        \"; ${vec[1]} + $dt * ($b * ${vec[0]} * ${vec[1]} - $a * ${vec[1]})\" \\\n        \"; ${vec[2]} + $dt * ${vec[1]} * $a\" \\\n        \"; if (${vec[1]} > ${vec[3]}) ${vec[1]} else ${vec[3]}\" \\\n        | bc -l) )\n      resume=$(echo -e \"$i_old > ${vec[1]}\" | bc)\n      if [[ $resume == '1' ]]; then # speed-up : kill calculation once max is pass, assume one max only\n        break\n      else\n        i_old=${vec[1]}\n      fi\n      vec=( \"${vec[@]}\" )\n    done\n    echo -e \"scale=0; ${vec[3]} \/ 1\" | bc # round-up\n    return 0\n}\nepidemic $1 $2 $3 $4 $5 $6 ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337415,"user_id":null,"body":"#!\/bin\/bash\nepidemic() {\n# your code\necho $(bc -l <<< \"s=$3;i=$4;max=0;for(j=0;j<=$2;j++){sk=s;ik=i;s=sk-$1\/$2*$5*sk*ik;i=ik+$1\/$2*($5*sk*ik-$6*ik);if(i>max)max=i;};max;\")\n}\nepidemic $1 $2 $3 $4 $5 $6\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337416,"user_id":null,"body":"#!\/bin\/bash\nepidemic() {\n    # your code\necho \"$1 $2 $3 $4 $5 $6\" | awk '\n{\n  tm=$1;\n  n=$2;\n  s0=$3;\n  i0=$4;\n  r0=0;\n  b=$5;\n  a=$6;\n  dt=tm\/n;\n  j=0;\n  for(;j<n;j++) {\n    s = s0 - dt*b*s0*i0;\n    i = i0 + dt*(b*s0*i0 - a*i0);\n    r = r0 + dt*i0*a;\n    if(i<i0) {\n      print int(i0); break;\n    }\n    s0 = s;\n    i0 = i;\n    r0 = r;\n  }\n  if(j==n) print int(i0);\n}\n'    \n}\nepidemic $1 $2 $3 $4 $5 $6 ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337417,"user_id":null,"body":"#!\/bin\/bash\nepidemic() {\n# computing and finding maximum\n\tmax=$(bc <<< \"\n\tscale = 16;\n\ttm = $1;\n\tn = $2;\n\ts[0] = $3;\n\ti[0] = $4;\n\tr[0] = 0;\n\tb = $5;\n\ta = $6;\n\tdt = tm\/n;\n\tmaxi = 0;\n\tfor (j=1; j<=n; j++) {\n\t\ts[j] = s[j-1] - dt*b*s[j-1]*i[j-1];\n\t\ti[j] = i[j-1] + dt*(b*s[j-1]*i[j-1]-a*i[j-1]);\n\t\tr[j] = r[j-1] + dt*i[j-1]*a;\n\t\tif (i[j] > maxi) {\n\t\t\tmaxi = i[j];\n\t\t}\n\t}\n\tprint maxi, \\\"\n\\\";\n\t\")\n# trunkating result\n\tindexDot=$(expr index $max .)\n\techo ${max:0:$indexDot-1}\n}\nepidemic $1 $2 $3 $4 $5 $6","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5667e8f4e3f572a8f2000039":[{"id":337418,"user_id":null,"body":"accum () {\n    \n    input=${1,,}                                     # lowercase input\n    length=${#input}                                 # length of input\n    output=''                                        # final output\n    sep='-'                                          # token seperator\n                 \n    for (( index=0; index<$length; index++ )) {      # for each character, generate token\n        char=${input:$index:1}                       # current character\n        \n        if [ $index -gt 0 ]; then                    # append token seperator if required\n            output=$output$sep\n        fi\n        \n        token=''                                     # new token\n        for (( count=0; count<=$index; count++ )) {  # repeat character the same number of times as it's string position          \n            token=$token$char\n        }\n        \n        token=${token^}                              # upper case first character of token\n        output=$output$token                         # append token to output\n    }   \n    \n    echo $output                                     # print output \n    \n}\n\naccum \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337419,"user_id":null,"body":"#!\/bin\/bash\naccum () {\n  for i in $(seq 0 ${#1}); do\n    tmp=$(printf \"%.s${1:i:1}\" $(seq 0 $i))\n    tmp=${tmp,,}\n    (( i < ${#1} - 1 )) && str+=${tmp^}'-' || str+=${tmp^}\n  done\n  echo $str\n}\naccum \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337420,"user_id":null,"body":"#!\/bin\/bash\naccum () {\n  echo \"$1\" | awk '{\n      split(tolower($0), chars, \"\")\n      len = length($0)\n      for (i = 1; i <= len; i += 1) {\n        printf toupper(chars[i])\n        for (j = 1; j < i; j += 1) {\n          printf chars[i]\n        }\n        if (i != len) {\n          printf \"-\"\n        }\n      }\n    }'\n}\naccum \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337421,"user_id":492,"body":"#!\/bin\/bash\naux5651='\nfrom sys import argv\ndef aux(s):\n    return \"-\".join((a * i).title() for i, a in enumerate(s, 1))\na=aux(argv[1:][0])\nprint a\n'\naccum () {\n    echo `python -c \"$aux5651\" \"$1\"`\n}\naccum \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337422,"user_id":null,"body":"echo $1 | perl -e '\n  my ($str) = <>;\n  $str =~ tr\/[A-Z]\/[a-z]\/;\n  $str =~ s\/\\s$+\/\/;\n  my (@str, @res) = (split \"\", $str), ();\n  for (0..$#str) {\n    push @res, ($str[$_] . ($str[$_] x $_));\n  }\n  map {$_ = \"\\u$_\"} @res;\n  print join \"-\", @res;\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337423,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | awk '{\n  len = split(toupper($0), chars, \"\")\n  for (c = 1; c <= len; c++){\n    temp[c] = chars[c]\n    for (n = 1; n < c; n++){\n      temp[c] = temp[c] tolower(chars[c])\n    }\n    if (c == len){\n      res = res temp[c]\n    } else {\n    res = res temp[c] \"-\"\n    }\n  }\n  print res\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337424,"user_id":null,"body":"#!\/bin\/bash\naccum () {\n    # your code\n    \n    #to lower\n    str=$( echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    len=${#1}\n    res=\"\"\n    #loop over keeping index \n    for((i=0;i<len;i++));\n    do\n      letter=${str:$i:1}\n      letterUp=$( echo \"$letter\" | tr '[:lower:]' '[:upper:]')\n      res=\"$res$letterUp\"\n  \n      for((j=0;j<i;j++));\n      do\n        res=\"${res}${letter}\"\n      done\n      res=\"${res}-\"\n    done\n    \n    echo ${res::-1}\n      #user index as the multiplier\n}\naccum \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337425,"user_id":null,"body":"#!\/bin\/bash\naccum () {\n  local s=$1\n  local len=${#s}\n  local r=\n  for (( i=0; i<$len; i++ )); do\n    printf -v r '%s-%s' \"$r\" \"$(repeat \"$i\" \"${s:$i:1}\" | to_title_case)\"\n  done\n  # remove trailing dash if needed\n  if [ $len -gt 0 ]; then\n    r=${r:1:${#r}}\n  fi\n  echo \"$r\"\n}\n\nrepeat() {\n  local times=$1\n  local s=$2\n  local r=\n  for i in $(seq 0 $times); do\n    r=\"$r$s\"\n  done\n  printf '%s' \"$r\"\n}\n\nto_lower_case() {\n  awk '{print tolower($0)}'\n}\n\nto_upper_case() {\n  awk '{print toupper($0)}'\n}\n\nto_title_case() {\n  awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'\n}\n\naccum \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337426,"user_id":null,"body":"#!\/bin\/bash\naccum () {\n  INPUT_STRING=$(echo \"$@\" | tr '[:upper:]' '[:lower:]')\n  FACTOR=1\n  \n  for CHAR in $(echo \"${INPUT_STRING}\" | sed 's\/\\(.\\)\/\\1\n\/g'); do\n    printf \"${CHAR^}\"\n    for (( i=2; i<=${FACTOR}; i++ )); do\n      printf \"${CHAR}\"\n    done\n    printf \"-\"\n    \n    FACTOR=$((FACTOR+1))\n  done\n}\n\naccum \"$1\" | sed 's\/^\\(.*\\).$\/\\1\/g'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337427,"user_id":1300,"body":"#!\/usr\/bin\/env bash\n\necho $1 \\\n| grep -o . \\\n| awk '{ printf toupper($0); for (i = 2; i <= NR; ++i) printf tolower($0); printf \"-\" } END { printf \"\n\" }' \\\n| sed 's\/.$\/\/'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"566be96bb3174e155300001b":[{"id":337428,"user_id":null,"body":"#!\/bin\/bash\n\n# This problem reduces to finding when the derivative of the function is 0.\n# dh\/dt = v - gt = 0\n# t = v \/ g\n# \n# To adjust the units, you have to multiply the right side by 1000\/3600, \n# which reduces to 5\/18\n# To account for the \"tenth of a second\" increments, multiply by 10.\n\nprintf \"%.0f\n\" $(echo \"(50 * $1)\/(9.81*18)\" | bc -l)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337429,"user_id":null,"body":"#!\/bin\/bash\nprintf \"%.0f\n\" \"$( echo \"scale=10; $1 \/ 3.6 \/ .981\" | bc -l)\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337430,"user_id":492,"body":"#!\/bin\/bash\nmax_ball(){\n    v=$1\n    time=$(bc <<<\"scale=16;$v*1000.0\/3600.0\/9.81\")\n    echo $(echo \"scale=0;($time*10+0.5)\/1\" | bc )\n}\nmax_ball $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337431,"user_id":53,"body":"#!\/bin\/bash\n...........\nvar=$1\necho $var | awk '{print int(($1\/3.5316)+0.5)}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337432,"user_id":492,"body":"#!\/bin\/bash\nmax_ball(){\n    v=$1\n    time=$(bc <<<\"scale=16;$v*1000.0\/3600.0\/9.81\")\n    echo $(echo \"scale=0;($time*10+0.5)\/1\" | bc )\n}\nmax_ball $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337433,"user_id":null,"body":"#!\/bin\/bash\necho \"$1\/3.6\/9.81*10\" | bc -l | awk '{printf \"%d\n\",$0+0.5}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337434,"user_id":527,"body":"exec ruby -e \"print (ARGV[0].to_i \/ 3.5316).round\" \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337435,"user_id":null,"body":"#!\/bin\/bash\nfunction max_ball () {\n  v=$1\n  printf %.0f $(bc<<<\"scale=10; \n    vel = $v*5\/18\n    time = vel\/9.81\n    time\/0.1\n  \")\n}\n\nmax_ball $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337436,"user_id":null,"body":"if [ -z $1 ]; then\n\techo ERROR: Must provide initial velocity \\(in km\/h\\) as argument.\n\texit\nfi\n\n# Acceleration due to gravity on Earth is always roughly around 9.8m\/s\ng=\"9.81\"\n# our input velocity is in km\/hr, we need m\/s.\nvms=$(bc <<< \"scale=3;$1\/3.6\")\nheight=0\nhmax=0\nhmaxidx=0\nt=0\ni=0\ngetheight(){\n\theight=$(bc <<< \"scale=3;$vms*$t-0.5*$g*$t*$t\")\n\t# Using print to always format height to 3 decimal places\n\techo \"($i, $(printf \"%.3f\" $height))\"\n\tt=$(bc <<< \"scale=3;$t+0.1\")\n\t((i=i+1))\n}\n\n# Get initial height\/vel. Will always be (0, 0.0).\ngetheight \"$height\" \n# Apply next iteration, so that our initial height is no longer 0.0, this way, our upcoming while loop\n# won't just terminate itself right away.\ngetheight \"$height\" \n\n# Now, repeat the loop until our height reaches 0 or below. (this is what awk is doing)\n# Correction: repeat the loop until our height begins to decrease, because it will never increase again\n# once it begins decreasing.\nwhile [ $(echo $height | awk '{if ($1 <= 0) print 0; else print $1}') != 0 ]; do\n\tgetheight \"$height\"\n\t# Keep track of initial height\n\thin=\"$hmax\"\n\thmax=$(echo \"$height\" \"$hmax\" | awk '{if ($1 > $2) print $1; else print $2}')\n\t# If our initial height and max height are no longer equal, then we found a new maximum and should\n\t# record the current index.\n\n\t# The optimization that needed to be done was at this part.\n\tif [ $hin != $hmax ]; then\n\t\t((hmaxidx=i-1))\n\telse \n\t\t# As soon as our height begins to decrease, our height will no longer increase any further\n\t\t# (since we are not including any bouncing).\n\t\t# Therefore, we can just break out of the loop once we reach this point. The rest of our data\n\t\t# is unneeded.\n\t\tbreak\n\tfi\n\techo hmax: $hmax\ndone\n\necho $hmaxidx\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337437,"user_id":187,"body":"#!\/bin\/bash\necho  \"$1*0.2831600407747197\" | bc | xargs printf \"%.*f\n\" 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"566fc12495810954b1000030":[{"id":337438,"user_id":null,"body":"#!\/bin\/bash\nsquares() {\n  for i in $(seq 0 \"$1\"); do\n    echo -n $((i ** 2))\n  done\n}\nnb_dig() {\n  squares \"$1\" | grep -o \"$2\" | wc -l\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337439,"user_id":null,"body":"#!\/bin\/bash\nnb_dig() {\n    for((i=0;i<=$1;i++)); do\n        echo -n $((i**2))\n    done | sed \"s\/[^$2]\/\/g\" | wc -c\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337440,"user_id":null,"body":"#!\/bin\/bash\nnb_dig() {\n    # 0s in 100 =>\n    n=$1\n    d=$2\n    seq 0 $n | awk '{ print $1*$1 }' | egrep -o \"$d\" | tr -d '\n' | wc -c\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337441,"user_id":null,"body":"#!\/bin\/bash\nn=$1; d=$2;\nfor i in `seq 0 $n`; do arr[$i]=$(($i**2)); done\ncatch=$(grep -o \"$d\" <<< \"${arr[@]}\" | grep -c .); echo $catch\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337442,"user_id":635,"body":"#!\/bin\/bash\nnb_dig() {\narr=()\nfor(( i = 0; i <= $1; i++))\ndo\n  arr+=$((i**2));\ndone\n\nres=${arr[@]\/\/[^$2]\/}\necho ${#res};            \n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337443,"user_id":492,"body":"#!\/bin\/bash\nnb_dig() {\n    n=$1; dg=$2; cnt=0\n    for((i=0;i <= n;i+=1)) do\n        sq=$((i*i))\n        k=$(grep -o \"$dg\" <<< \"$sq\" | wc -l)\n        cnt=$((cnt + $k))\n    done\n    echo $cnt\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337444,"user_id":null,"body":"#!\/bin\/bash\nfor k in `seq 0 $1`; do echo -n `expr $k * $k`; done | sed -e \"s\/[^$2]\/\/g\" | wc -c\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337445,"user_id":null,"body":"#!\/bin\/bash\nnb_dig() {\n    for (( n=0; n<= $1; n++ )); do\n      n2=`echo $n^2 | bc`\n      t=\"$t$n2\"\n    done\n    c=${t\/\/[^\\'$2\\']\/}\n    echo ${#c}\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337446,"user_id":null,"body":"#!\/bin\/bash\nnb_dig() {\n    squares=\"\"\n    for (( i=0; i<=$1; i++ ))\n      do \n        squares+=$((i*i))\n      done\n    digits=\"${squares\/\/[^$2]}\"\n    echo \"${#digits}\"\n    return\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337447,"user_id":null,"body":"#!\/bin\/bash\nnb_dig() {\n    # your code\n    n=$1\n    d=$2\n    count=0\n    for k in $(seq 0 $n)\n    do\n      square=$((k**2))\n      #digits=$(grep -o \"$d\" <<< \"$square\" | wc -l)\n      digits=\"${square\/\/[^$d]}\"\n      (( count += ${#digits} ))\n    done\n    echo $count\n}\nnb_dig $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5672682212c8ecf83e000050":[{"id":337448,"user_id":null,"body":"#!\/bin\/bash\nindex=${1}\nmax=2391484\ntmp=\/tmp\/twice-linear\n\nfunction lin() {\n    local x=${1}\n    local y=$((2 * x + 1))\n    local z=$((3 * x + 1))\n    echo ${x}\n    if [[ ${x} -le ${max} ]] ; then\n        lin ${y}\n        lin ${z}\n    fi\n}\n\nif [[ ! -f ${tmp} ]] ; then\n  lin 1 | sort -uh > ${tmp}\nfi\n\nhead -$((index + 1)) ${tmp} | tail -1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337449,"user_id":53,"body":"#!\/bin\/bash\ndbl_linear () {\n  bc <<< '\n    scale = 20\n    n = '$1'\n    x = 0\n    y = 0\n    i = 1\n    u[0] = 1\n    while (i <= n) {\n      a = 2 * u[x] + 1\n      b = 3 * u[y] + 1\n      c = a\n      if (b < a) {\n        c = b\n      }\n      u[i] = c\n      if (c == a) {\n        x += 1\n      }\n      if (c == b) {\n        y += 1\n      }\n      i = i + 1\n    }\n    print u[n]\n  '\n}\ndbl_linear \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337450,"user_id":53,"body":"echo $1 | awk '\n{ \n  u[0] = 1;\n  x = 0;\n  y = 0;\n  n = $1;\n  for (i=1; i<=n; i++) {\n    a = 2 * u[x] + 1;\n    b = 3 * u[y] + 1;\n    c = a < b ? a : b;\n    u[i] = c;\n    if (c == a) {\n      x += 1;\n    }\n    if (c == b) {\n      y += 1;\n    }\n  }\n  printf(\"%d\", u[n]);\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337451,"user_id":null,"body":"#!\/bin\/bash\n\nread out < <(\nawk -vx=$1 -F, '\n\nfunction push(x   ) {\n\tu[x]=1\n\tr[np]=x\n\tnp+=1\n\treturn x }\n\nfunction pop(n   ,x,i) {\n\tx=n-n0\n\ti=i0\n\twhile (x>=0) { i++\n\t\tif (u[i]>0) { x--\n\t\t\tif (x==0) { n0=n; i0=i; return i } } }\n\treturn -1 }\n  \nfunction dig(x   ) {\n\tif (x<0){return 0}\n\tif (x==0){return 1}\n\tdelete u\n\tdelete r\n\tnp=0\n\trp=0\n\tj=1\n\tn=0\n\tdo {\n\t\ty=push(j*2+1) #y\n\t\tz=push(j*3+1) #z\n\t\tn+=1\n\t\tj=pop(n)\n\t} while (n<=x)\n\n\tfor (i=3;i<z;i++) {\n\t\tif (u[i]>0) { x+=-1\n\t\t\tif (x==0) { return i } } } }\n\nBEGIN { print dig(x) } '\n)\n\necho \"$out\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337452,"user_id":492,"body":"#!\/bin\/bash\ndblL='sub dblL {\n    my $n = shift;\n    my ($h, $cnt, $q2, $q3) = (1, 0, (), ());\n    while (1) {\n        if ($cnt >= $n) { return $h; }\n        push @q2, (2*$h+1);\n        push @q3, (3*$h+1);\n        $h = $q2[0] >= $q3[0] ? $q3[0] : $q2[0];\n        if ($h == $q2[0]) { $h = shift @q2; }\n        if ($h == $q3[0]) { $h = shift @q3; }\n        $cnt++;\n    }\n}\n$a=dblL($ARGV[0]);\nprint $a;\n'\ndbl_linear () {\n    echo `perl -e \"$dblL\" \"$1\"`\n}\ndbl_linear \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337453,"user_id":null,"body":"#!\/bin\/bash\nawk -vn=\"$1\" '\nBEGIN {\n  a[1]=0; j=0\n  for (i=1;;++i) {\n    if (!(i in a)) continue;\n    if (j==n) {print i; break}\n    else ++j\n    a[2*i+1]=0; a[3*i+1]=0; delete a[i]\n  }\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337454,"user_id":null,"body":"#!\/bin\/bash\ndbl_linear () {\n  bc <<< '\n    scale = 20\n    n = '$1'\n    zi = 0\n    yi = 0\n    i = 1\n    out[0] = 1\n    while (i <= n) {\n      zx = out[zi]\n      zi = zi + 1\n      z = 3 * zx + 1\n      while (1) {\n        yx = out[yi]\n        y = 2 * yx + 1\n        if (y >= z) {\n          break\n        }\n        out[i] = y\n        i = i + 1\n        yi = yi + 1\n      }\n      if (z != y) {\n        out[i] = z\n        i = i + 1\n      }\n    }\n    print out[n]\n  '\n}\ndbl_linear \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337455,"user_id":null,"body":"#!\/bin\/bash\n\ndbl_linear () {\n    local n=\"$1\"\n    if ! [[ -f \/tmp\/data.txt ]]; then\n      bc -l <<< '\n      define next(x, level) {\n        print x, \"\n\"\n        if (level > 0) {\n           a = next(2 * x + 1, level - 1)\n           a = next(3 * x + 1, level - 1)\n        }\n      }\n      a = next(1, 18)\n      ' | sort -u -n > \/tmp\/data.txt\n    fi\n    sed -n -e \"$(( n+1 ))p\" < \/tmp\/data.txt\n}\ndbl_linear \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337456,"user_id":null,"body":"#!\/bin\/bash\n\nbc <<<'\ndefine dbl(l){\n x=1;y=0;z=0\n for(i=0;i<l;i++){\n  y[i]=2*x+1;z[i]=3*x+1\n  if(y[y] < z[z]){x=y[y++]\n  }else if(y[y] > z[z]){x=z[z++]\n  }else{x=y[y++];z+=1}};return x\n}; dbl('$1');'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337457,"user_id":null,"body":"#!\/bin\/bash\n#The minimum amount of files to generate, creates 2^(amount of while loops) + 1 amount of numbers\nmax=1024000\n\ndbl_linear () {\n  #Print out only the requested line from the file.\n  head -$1 sorted | tail -1\n}\n\ngenerateData () {\n  #  Turns out that generating and writing all the data into a file once is faster than \n  #  generating a buttload of data a hundred times and keeping it in variables.\n  \n  #  Create and write the first number into previousarray and sorted.\n  #  All numbers are separated by spaces.\n  echo -ne \"1 \" | tee previousarray > sorted \n  \n  #While loop to generate 512k numbers, which is equal to 19 loops.\n  while (( $(wc -w < sorted) <= ${max})); do   \n    #  For loop to calculate the next two elements for every element in \n    #  previousarray and write into a temporary file\n    for i in $(cat previousarray); do echo -ne \"$((2 * $i + 1)) $((3 * $i + 1)) \"; done > tmp\n    #  Append the new elements into sorted and \n    #  replace all the elements in previousarray with new ones.\n    cat tmp >> sorted\n    cat tmp > previousarray\n  done\n  \n  #  Replaces spaces with newlines, because sort requires newlines to run\n  #  Sed also has a function to print out only a requested line.\n  sed -i 's\/ \/\n\/g' sorted\n  #  Sort numerically and uniquely the sorted file and output into itself onc it's done\n  sort -nu sorted -o sorted\n}\n\n#  Check if the sorted file doesn't exist, if so run generateData function.\n[ ! -f sorted ] && generateData\n\n#  Print function\ndbl_linear \"$(($1+1))\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"567501aec64b81e252000003":[{"id":337458,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  numbers=(zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty)\n  [[ $1 == 0.0 || $2 == 0.0 || $3 == 0.0 ]] && index=0 || index=$(echo \"scale=16; 2*($1+$2)*$3*23\/104+0.5\" | bc)\n  echo ${numbers[$(printf '%0.f' $index)]} \n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337459,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  arr=('zero' 'one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine' 'ten' 'eleven' 'twelve' 'thirteen' 'fourteen' 'fifteen' 'sixteen' 'seventeen' 'eighteen' 'nineteen' 'twenty')\n  \n  zero=`echo \"$1 * $2 * $3\" | bc -l`\n  sub=`echo \"($1 * $3 * 2 + $3 * $2 * 2) * 1.15 \/ 5.2\" | bc`\n  \n  if [ \"$zero\" == 0 ]; then echo ${arr[0]};\n  else echo ${arr[$sub+1]};\n  fi\n}\n\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337460,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  l=$1\n  w=$2\n  h=$3\n  awk \"BEGIN { \n    exit !($l <= 0 || $w <= 0 || $h <= 0)\n  }\" && echo \"zero\"\n  nums=(\"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\"\n    \"seven\" \"eight\" \"nine\" \"ten\" \"eleven\" \"twelve\" \"thirteen\"\n    \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\" \"eighteen\" \"nineteen\"\n    \"twenty\")\n  rolls=$(awk \"\n    function ceil(x) { \n      return int(x) == x ? x : int(x) + 1; \n    }\n    BEGIN {\n      provMod = 1.15\n      rollSurf = 5.2\n      printf ceil(($l * $h + $w * $h) * 2 * provMod \/ rollSurf)\n    }\")\n  echo \"${nums[$rolls]}\"\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337461,"user_id":492,"body":"#!\/bin\/bash\nceil() {                                              \n        echo \"define ceil (x) {if (x\/1 == x) {return x} \\\n        else { if (x<0) {return x\/1 -1} \\\n        else {return x\/1 + 1 }}} ; ceil($1)\" | bc\n}\nwallpaper() {\n  declare -a arr=(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n                 \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \n                 \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\")\n  l=$1; w=$2; h=$3;\n  r=$(bc <<< \"scale=16; $l * $h * $w\")\n  r=$(ceil $r)\n  if [[ \"$r\" -eq \"0\" ]]\n  then\n    r=0\n  else\n    r=$(bc <<< \"scale=16; ($l * $h * 2 + $w * $h * 2) * 1.15 \/ 5.2\")\n    r=$(ceil $r)\n  fi\n  echo ${arr[$r]}\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337462,"user_id":null,"body":"#!\/bin\/bash\n\nNUMBERS=(zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty)\n\necho ${NUMBERS[@]} # :-)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337463,"user_id":492,"body":"#!\/bin\/bash\nceil() {                                              \n        echo \"define ceil (x) {if (x\/1 == x) {return x} \\\n        else { if (x<0) {return x\/1 -1} \\\n        else {return x\/1 + 1 }}} ; ceil($1)\" | bc\n}\nwallpaper() {\n  declare -a arr=(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \n                 \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \n                 \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\")\n  l=$1; w=$2; h=$3;\n  r=$(bc <<< \"scale=16; $l * $h * $w\")\n  r=$(ceil $r)\n  if [[ \"$r\" -eq \"0\" ]]\n  then\n    r=0\n  else\n    r=$(bc <<< \"scale=16; ($l * $h * 2 + $w * $h * 2) * 1.15 \/ 5.2\")\n    r=$(ceil $r)\n  fi\n  echo ${arr[$r]}\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337464,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  l=$1\n  w=$2\n  h=$3\n  \n  echo \"$l $w $h\"\n  \n  if (( $(echo \"$l == 0 || $w == 0 || $h == 0\" | bc -l) == 1 )); then\n    echo 'zero'\n    return\n  fi\n  \n  num_rolls=$(perl -e \"use POSIX; print ceil((1.15 * 2 * $h * ($l + $w)) \/ 5.2), qq{\n}\")\n  \n  case \"$num_rolls\" in\n    1) n=\"one\" ;;\n    2) n=\"two\" ;;\n    3) n=\"three\" ;;\n    4) n=\"four\" ;;\n    5) n=\"five\" ;;\n    6) n=\"six\" ;;\n    7) n=\"seven\" ;;\n    8) n=\"eight\" ;;\n    9) n=\"nine\" ;;\n    10) n=\"ten\" ;;\n    11) n=\"eleven\" ;;\n    12) n=\"twelve\" ;;\n    13) n=\"thirteen\" ;;\n    14) n=\"fourteen\" ;;\n    15) n=\"fifteen\" ;;\n    16) n=\"sixteen\" ;;\n    17) n=\"seventeen\" ;;\n    18) n=\"eighteen\" ;;\n    19) n=\"nineteen\" ;;\n    20) n=\"twenty\" ;;\n    *) n=\"unknown\" ;;\n  esac\n  \n  echo \"${n}\"\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337465,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  local numbers=(\"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\" \"ten\" \"eleven\" \"twelve\" \"thirteen\" \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\" \"eighteen\" \"nineteen\" \"twenty\")\n  zero=$(echo \"$1 * $2 * $3\" | bc -l)\n  res=$(echo \"2 * $3 * ( $2 + $1 ) \/ 5.2 * 1.15 + 0.5\" | bc -l)\n  if [[ $zero == 0 ]]; then\n    res='0'\n  fi\n  echo ${numbers[$(printf \"%.0f\n\" \"$res\")]}\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337466,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  local numbers=(\"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\" \"ten\" \"eleven\" \"twelve\" \"thirteen\" \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\" \"eighteen\" \"nineteen\" \"twenty\")\n  if [[ $(echo \"$1 * $2 * $3\" | bc) == 0 ]]; then\n      echo \"zero\"\n  else\n    wp=\"0.52\"\n    rp=$(echo \"2 * $3 * ( $2 + $1 )\" | bc -l)\n    res=$(echo \"( $rp \/ $wp  + $rp \/ $wp * 0.15 ) \/ 10.0 + 0.5\" | bc -l)\n    echo ${numbers[$(printf \"%.0f\n\" \"$res\")]}\n  fi\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337467,"user_id":null,"body":"#!\/bin\/bash\nwallpaper() {\n  numbers=(\"zero\" \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \"seven\" \"eight\" \"nine\" \"ten\" \"eleven\" \"twelve\" \"thirteen\" \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\" \"eighteen\" \"nineteen\" \"twenty\")\n  \n  var=$(echo \"scale=10; ($1 + $2) * $3  * 2 * 1.15\" | bc -l )\n  s=$( echo \"scale=10; $var \/ 5.2 \" | bc -l) \n  n=$( printf \"%.0f\" \"$s\"  )\n  echo $1 $2 $3\n  echo $var\n  echo $n\n  echo $s\n  if [[ $( echo \"$1 * $2 * $3\" | bc -l) -eq 0 ]]\n  then\n    echo ${numbers[0]}\n    return 1\n  fi\n  if (( $(echo \"$n >= $s\" | bc -l) ))\n  then\n    n=$n\n  else\n    n=$(( $n + 1 ))\n  fi\n  echo ${numbers[$n]}\n}\nwallpaper $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"567ffb369f7f92e53800005b":[{"id":337468,"user_id":null,"body":"#!\/bin\/bash\nbernoulli_number () {\n  if ((!$1))\n  then echo 1\n  elif (($1>1 && $1%2==1))\n  then echo 0\n  else\n    n[0]=1 d[0]=1\n    for ((i=1; i<=$1; i++))\n    do \n      di=${d[i-1]}\n      if ((i==1 || i%2==0))\n      then\n        di=`bc <<< \"\n             a=$di; b=$i+1\n             while (b) { a%=b; t=a; a=b; b=t }\n             $di\/a*($i+1)\"`\n        r=0 \n        for ((j=0; j<i; j++))\n        do \n          r=`bc <<< \"k=1\n              for (l=1; l<=$j; l++) k=k*($i+1+l-$j)\/l\n              $r-k*${n[j]}*$di\/${d[j]}\"`\n        done\n        n[i]=`bc <<< \"$r\/($i+1)\"` \n      else n[i]=0 \n      fi\n      d[i]=$di\n    done\n    n=${n[$1]} d=${d[$1]}\n    r=`bc <<< \"\n         if ($n>0) a=$n else a= - $n\n         b=$d\n         while (b) { a%=b; t=a; a=b; b=t }\n         $n\/a \n         $d\/a\n      \"`\n    r=${r\/\/\\\\$'\n'\/}; echo ${r\/$'\n'\/\"\/\"}\n  fi\n}\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337469,"user_id":null,"body":"#!\/bin\/bash\nbernoulli_number () {\n  if ((!$1))\n  then echo 1\n  elif (($1>1 && $1%2==1))\n  then echo 0\n  else\n    n[0]=1 d[0]=1\n    for ((i=1; i<=$1; i++))\n    do \n      di=${d[i-1]}\n      if ((i==1 || i%2==0))\n      then\n        di=`bc <<< \"if ($di%($i+1)!=0) $di*($i+1) else $di\"`\n        r=0 \n        for ((j=0; j<i; j++))\n        do \n          r=`bc <<< \"k=1\n              for (l=1; l<=$j; l++) k=k*($i+1+l-$j)\/l\n              $r-k*${n[j]}*$di\/${d[j]}\"`\n        done\n        n[i]=`bc <<< \"$r\/($i+1)\"` \n      else n[i]=0 \n      fi\n      d[i]=$di\n    done\n    n=${n[$1]} d=${d[$1]}\n    r=`bc <<< \"\n         n=$n; d=$d\n         for (j=2; j<d; j++)\n           while (d%j==0 && n%j==0) { n\/=j; d\/=j }\n         n \n         d\n      \"`\n    r=${r\/\/\\\\$'\n'\/}; echo ${r\/$'\n'\/\"\/\"}\n  fi\n}\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337470,"user_id":492,"body":"#!\/bin\/bash\naux='\nuse Math::BigRat;\nsub aux {\n    my $n = shift;\n    return \"-1\/2\" if $n == 1;\n    return \"0\"    if $n % 2;\n    return \"1\"    if $n == 0;\n    my $one = Math::BigRat->new(1);\n    my @a; my $m;\n    for $m ( 0 .. $n ) {\n        push @a, $one \/ ($m + 1);\n        for my $j ( reverse 1 .. $m ) {\n            ( $a[$j-1] -= $a[$j] ) *= $j;\n        }\n    }\n    return sprintf \"%s\/%s\", $a[0]->parts;\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\nbernoulli_number () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337471,"user_id":53,"body":"#!\/bin\/bash\naux='\nsub bernouilli {\n    my ($n, @ber) = (shift, ());\n    use Math::BigRat;\n    return \"1\" if $n == 0;\n    return \"-1\/2\" if $n == 1;\n    return \"0\" if $n % 2 == 1;\n    for my $i (0 .. $n) {\n        push @ber, Math::BigRat->new(1) \/ ($i + 1);\n        for my $j (reverse 1 .. $i) {\n            $ber[$j-1] -= $ber[$j];\n            $ber[$j-1] *= $j;\n        }\n    }\n    return sprintf \"%s\/%s\", $ber[0]->parts;\n}\n$res=bernouilli($ARGV[0]);\nprint $res;\n'\nbernoulli_number () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337472,"user_id":null,"body":"#!\/bin\/bash\n# bernoulli_number returns a string \"numerator\/denominator\"\nfunction bernoulli_bc() {\n n=$1\n echo \"\ndefine abs(a)\n{ \n  if (a<0) {\n    return(-a);\n  } else {\n    return(a);\n  }\n}\ndefine gcd_iter(u, v)\n{\n  while(v) {\n    t = u;\n    u = v;\n    v = t % v;\n  }\n  return(abs(u));\n}\nfor(m=0;m<=$n;m+=1){\n  res_num[m]=1\n  res_denom[m]=m+1\n  for(j=m;j>0;j-=1){\n    numerator_left=res_num[j-1]\n    denominator_left=res_denom[j-1]\n    numerator_right=res_num[j]\n    denominator_right=res_denom[j]\n    numerator=j*(numerator_left*denominator_right-numerator_right*denominator_left)\n    denominator=denominator_left*denominator_right\n    gcd=gcd_iter(numerator,denominator)\n    res_num[j-1]=numerator\/gcd\n    res_denom[j-1]=denominator\/gcd\n  }\n}\nres_num[0]\nres_denom[0]\n\"|BC_LINE_LENGTH=100 bc\n}\n\nbernoulli_number () {\nn=$1\n\nif [ $n -eq 0 ]; then\n  echo 1\nelif [ $n -eq 1 ]; then\n  echo \"-1\/2\"\nelif [ $n -gt 2 -a $[n%2] -eq 1 ] ; then\n  echo 0\nelse\n   res=($(bernoulli_bc $n))\n   num=${res[0]}\n   denom=${res[1]}\n   echo \"$num\/$denom\"\nfi\n}\n\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337473,"user_id":null,"body":"#!\/bin\/bash\n\nbernoulli_number () {\nBC_LINE_LENGTH=0 bc <<<'\n\tdefine tangent(n) { auto k,j\n\t\tt[1]=1\n\t\tfor(k=2;k<=n;k++){\n\t\t   t[k]=(k-1)*t[k-1]\n\t\t}\n\t\tfor(k=2;k<=n;k++){\n\t\t   for(j=k;j<=n;j++){\n\t\t      t[j]=(j-k)*t[j-1]+(j-k+2)*t[j]\n\t\t   }\n\t\t}\n\t\treturn(t[n])\n\t}\n\tdefine abs(n){\n\t\tif(n>=0) return(n)\n\t\treturn(-n)\n\t}\n\tdefine gcd(m,n) { auto a,b,c\n\t\ta=abs(m)\n\t\tif(n==0) return(a)\n\t        b=abs(n)\n\t        c=a%b\n\t        while(c>0){\n\t\t\ta=b\n\t                b=c\n\t                c=a%b\n\t        }\n\t\treturn(b)\n\t}\n\tdefine bernoulli(n) { auto k,s,t,g,numerator, denominator\n\t\tif(n==0){\n\t\t  print \"1\n\"\n\t\t  return\n\t\t}\n\t\tif(n==1){\n\t\t  print \"-1\/2\n\"\n\t\t  return\n\t\t}\n\t\tif(n%2){\n\t\t  print \"0\n\"\n\t\t  return\n\t\t}\n\t\tt=n\/2\n\t\ts=(-1)^(t-1)\n\t\tnumerator=s*n*tangent(t)\n\t\tk=2^n\n\t\tdenominator=k*(k-1)\n\t\tg=gcd(numerator,denominator)\n\t\tnumerator=numerator\/g\n\t\tdenominator=denominator\/g\n\t\tprint numerator,\"\/\",denominator,\"\n\"\n\t\treturn\n\t} o = bernoulli('\"$1\"')'\n}\n\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337474,"user_id":null,"body":"#!\/bin\/bash\nbernoulli_number () {\n  if ((!$1))\n  then echo 1\n  elif (($1>1 && $1%2==1))\n  then echo 0\n  else\n    n[0]=1 d[0]=1\n    for ((i=1; i<=$1; i++))\n    do \n      if ((i==1 || i%2==0))\n      then\n        di=`bc <<< \"\n             if (${d[i-1]}%($i+1)!=0) ${d[i-1]}*($i+1) else ${d[i-1]}\"`\n        r=0 \n        for ((j=0; j<i; j++))\n        do \n          r=`bc <<< \"k=1\n              for (l=1; l<=$j; l++) k=k*($i+1+l-$j)\/l\n              $r-k*${n[j]}*$di\/${d[j]}\"`\n        done\n        n[i]=`bc <<< \"$r\/($i+1)\"` \n        d[i]=$di\n      elif ((i>1))\n      then\n        n[i]=0 d[i]=${d[i-1]}\n      fi\n    done\n    n=${n[$1]} d=${d[$1]}\n    r=`bc <<< \"\n         n=$n; d=$d\n         for (j=2; j<d; j++)\n           while (d%j==0 && n%j==0) { n\/=j; d\/=j }\n         n \n         d\n      \"`\n    r=${r\/\/\\\\$'\n'\/}; echo ${r\/$'\n'\/\"\/\"}\n  fi\n}\nbernoulli_number \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337475,"user_id":null,"body":"#!\/bin\/bash\n\n# bash's arithmetic gets negative over 2**64\n# we'll need to use bc for calculations\n# calling an external program thousands of times is time-inefficient,\n#   so it makes sense to do it entirely in bc\n\n# bc wrapping output after 70 characters sucks :\nexport BC_LINE_LENGTH=0\n\nread -r -d '' bcprogram <<EOF\nn=$1\n\/** global variables **\/\n\/* binomial coefficients (for Pascal's triangle currentline) *\/\ncoefficient[0]=1; coefficient[1]=1; \n\/* Bernoulli numbers (= numerb\/denomb) *\/\nnumerb[0]=1; denomb[0]=1;\n\/* fraction to be reduced by reducefraction function *\/\nnumertbr=1; denomtbr=1;\n\n\/* easy optimization : B(2n+1)=0 for any n>1 *\/\nif ( (n % 2 == 1) && (n>=3) ) {\n        print 0, \" \", 1\n        halt\n}\n\ndefine reducefraction () {\n\/* we have to return two values\n   is there another way to do it than using global variables ?\n *\/\n        \/* compute the greatest common denominator of numertbr,denomtbr *\/\n        a=numertbr\n        if ( a<0 ) a=-a\n        b=denomtbr\n        while ( b != 0 ) {\n                remainder = a % b\n                a = b\n                b = remainder\n        }\n        \/* a is gcd *\/\n\n        \/* reduce the fraction *\/\n        numertbr \/= a\n        denomtbr \/= a\n}\nfor ( i=1; i<=n; i++ ) {\n        \/* compute next line of Pascal's triangle *\/\n\n        ppcoef=0\n        for ( j=0; j<=i; j++ ) {\n                pcoef = coefficient[j]\n                coefficient[j] += ppcoef\n                ppcoef = pcoef\n        }\n        coefficient[i+1] = 1\n\n        \/* easy optimization : B(2n+1)=0 for any n>1 *\/\n        if ( (i % 2 == 1) && (i>=3) ) {\n                numerb[i]=0; denomb[i]=1\n                continue\n        }\n\n        \/*\n        # compute B(i)\n        # 0 = sum{ coef(j).B(j) , j<i} + (i+1).B(i)\n        # let lcm = least common multiple of {denominators of B(j), j<i}\n        # we have the integer equation :\n        # lcm.(i+1).B(i) = - sum{ coef(j).numeratorOfB(j).(lcm\/denominatorOfB(j)) , j<i}\n        # which gives numeratorOfB(i) and denominatorOfB(i), after reduction\n        # let's compute the sum and lcm in one go\n        *\/\n\n        sum=0\n        lcm=1\n        for ( j=0; j<i; j++ ) {\n                \/* reduce coef\/denominatorOfB *\/\n                numertbr=coefficient[j]; denomtbr=denomb[j]\n                retval=reducefraction()\n                coef=numertbr; denom=denomtbr\n\n                \/* reduce lcm\/denom to llcm, denom *\/\n                numertbr=lcm; denomtbr=denom\n                retval=reducefraction()\n                llcm=numertbr; denom=denomtbr\n\n                \/* compute partial lcm, sum *\/\n                lcm *= denom\n                sum *= denom\n                sum += coef * numerb[j] * llcm\n        }\n        \n        \/* reduce -sum \/ lcm.(i+1) to get B(i) *\/\n        numertbr=-sum; denomtbr=lcm*(i+1)\n        retval=reducefraction()\n\n        numerb[i]=numertbr; denomb[i]=denomtbr; \n}\n\nprint numerb[n], \" \", denomb[n]\nhalt\nEOF\n\nread numer denom < <(echo \"$bcprogram\" | bc)\n\nif [[ $denom == \"1\" ]]; then\n        echo $numer\nelse\n        echo \"$numer\/$denom\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337476,"user_id":null,"body":"#!\/bin\/bash\n\ndeclare out=\"\"\n\n# get bc to make some large numbers for us\n\nbernoulli_number(){\n\t if [ \"$1\" -eq 0 ]; then echo \"1\"; return 0; fi\n\t read out < <(\nbc <<HERE\n\n# lets stick with integers\n\nscale=0\n\n# two classics!\n\ndefine abs(x) {\n  if (x<0) return(-x) else return(x)\n}\n\ndefine gcd(x,y) {\n  auto r;\n  x\/=1;\n  y\/=1;\n  while(y>0){\n    r=x%y;\n    x=y;\n    y=r; }\n  return(x);\n}\n\n# and the iterative idea of getting the bernoullis\n# it works surpringly well.\n\ndefine void bernoulli(x){\n  auto m,j,k,q;\n  \n  # help out the algo\n  if (x==2) { print \"1\/6\"; return }\n  if (x==1) { print \"-1\/2\"; return }\n  if (x==0) { print \"1\"; return }  \n  \n  # laugh at the odd numbers (return  0)\n  if (((x\/2)*2)<x) {\n    print \"0\"\n    return\n  }  \n  \n  # do the work for even numbers above zero\n  m=0;\n  anum[x]=0;\n  aden[x]=0;\n  while(m<=(x+1)){\n\t  anum[m]=1;\n\t  aden[m]=m+1;\n\t  j=m;\n\t  while(j>=1){\n  \t  k=j-1;\n  \t  anum[k]=j*( aden[j]*anum[k] - aden[k]*anum[j] );\n  \t  aden[k]=( aden[k]*aden[j] );\n  \t  q=gcd(abs(anum[k]),abs(aden[k]));\n  \t  if (q>1) {\n    \t\tanum[k]=anum[k]\/q;\n    \t\taden[k]=aden[k]\/q; }\n  \t  j=k;\n      }\n  \tm=m+1; \n  }\n \n  # now decide how to output the result\n  if (aden[1]<=1) print anum[1]\n  if (aden[1]>1) print anum[1],\"\/\",aden[1]\n  return\n}\n\n# call it\n\nbernoulli($1)\nquit\nHERE\n)\necho \"$out\"\n}\n\n# invoke bc to do our bidding.\n\nbernoulli_number \"$1\"\n\n# \u220e\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337477,"user_id":503,"body":"perl -e '\nuse Math::BigRat;\n\n$Q = $ARGV[0];\nif (1 & $Q) { print 2 < $Q ? 0 : \"-1\/2\"; exit }\n$Q >>= 1;\n@B = (1);\nfor (;$#B < $Q;) {\n\t$N = 3 + 2 * $#B;\n\t$S = Math::BigRat->new(2 - $N) \/ 2;\n\t$C = Math::BigRat->new($N * ($N - 1)) \/ 2;\n\t$K = 2;\n\tfor (;$N < $C;) {\n\t\tif (0 == $K % 2) { $S += $C * Math::BigRat->new($B[$K \/ 2]) }\n\t\t$C = $C * (1 + $N - ++$K) \/ $K\n\t}\n\tpush @B,-$S \/ $N\n}\nprint pop @B\n' \"$1\"\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"569218bc919ccba77000000b":[{"id":337478,"user_id":null,"body":"#!\/bin\/bash\nres=$1\ni=0\nwhile [[ \"$res\" < \"$2\" ]];do\n  res=$( echo \"$res * (1+ $3\/36000)\" | bc -l)\n  let i++\ndone\ndate -d \"2016-01-01 $i days\" +%Y-%m-%d\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337479,"user_id":null,"body":"#!\/bin\/bash\necho $(date '+%Y-%m-%d' -d \"2016-01-01 + $(echo \"($(echo \"l($2\/$1)\/l(1+$3\/36000)\" | bc -l)+1)\/1\" | bc) days\")\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337480,"user_id":null,"body":"#!\/bin\/bash\na0=$1\na=$2\np=$3\nd=$(awk \"\n  function ceil(x) { \n    return int(x) == x ? x : int(x) + 1; \n  }\n  BEGIN {\n    printf ceil(log($a \/ $a0) \/ log(1 + $p \/ 36000))\n  }\")\ndate -d \"20160101+$d days\" '+%Y-%m-%d'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337481,"user_id":492,"body":"#!\/bin\/bash\ndatedays(){\n  a0=$1\n  a=$2\n  p=$3\n  pp=$(bc <<<\"scale=16;$p\/36000\")\n\td=$(date -d \"2016\/01\/01\" \"+%s\")\n\tday=0\n\twhile true ; do\n\t  a0=$(echo \"$a0*(1+$pp)\"|bc)\n\t  day=$(( $day + 1 ))\n\t  if (( $(echo \"$a0 > $a\" |bc -l) )); then\n\t      break\n\t  fi\n\tdone\n\ttime=$(bc <<<\"scale=16;$d+$day*24*60*60\")\n\tdate -u -d @$time +%Y-%m-%d\n}\ndatedays $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337482,"user_id":492,"body":"#!\/bin\/bash\ndatedays(){\n  a0=$1\n  a=$2\n  p=$3\n  pp=$(bc <<<\"scale=16;$p\/36000\")\n\td=$(date -d \"2016\/01\/01\" \"+%s\")\n\tday=0\n\twhile true ; do\n\t  a0=$(echo \"$a0*(1+$pp)\"|bc)\n\t  day=$(( $day + 1 ))\n\t  if (( $(echo \"$a0 > $a\" |bc -l) )); then\n\t      break\n\t  fi\n\tdone\n\ttime=$(bc <<<\"scale=16;$d+$day*24*60*60\")\n\tdate -u -d @$time +%Y-%m-%d\n}\ndatedays $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337483,"user_id":null,"body":"echo \"2016-01-022016-01-032016-01-042016-01-052016-01-062016-01-072016-01-082016-01-092016-01-102016-01-112016-01-122016-01-132016-01-142016-01-152016-01-162016-01-172016-01-182016-01-192016-01-202016-01-212016-01-222016-01-232016-01-242016-01-252016-01-262016-01-272016-01-282016-01-292016-01-302016-01-312016-02-012016-02-022016-02-032016-02-042016-02-052016-02-062016-02-072016-02-082016-02-092016-02-102016-02-112016-02-122016-02-132016-02-142016-02-152016-02-162016-02-172016-02-182016-02-192016-02-202016-02-212016-02-222016-02-232016-02-242016-02-252016-02-262016-02-272016-02-282016-02-292016-03-012016-03-022016-03-032016-03-042016-03-052016-03-062016-03-072016-03-082016-03-092016-03-102016-03-112016-03-122016-03-132016-03-142016-03-152016-03-162016-03-172016-03-182016-03-192016-03-202016-03-212016-03-222016-03-232016-03-242016-03-252016-03-262016-03-272016-03-282016-03-292016-03-302016-03-312016-04-012016-04-022016-04-032016-04-042016-04-052016-04-062016-04-072016-04-082016-04-092016-04-102016-04-112016-04-122016-04-132016-04-142016-04-152016-04-162016-04-172016-04-182016-04-192016-04-202016-04-212016-04-222016-04-232016-04-242016-04-252016-04-262016-04-272016-04-282016-04-292016-04-302016-05-012016-05-022016-05-032016-05-042016-05-052016-05-062016-05-072016-05-082016-05-092016-05-102016-05-112016-05-122016-05-132016-05-142016-05-152016-05-162016-05-172016-05-182016-05-192016-05-202016-05-212016-05-222016-05-232016-05-242016-05-252016-05-262016-05-272016-05-282016-05-292016-05-302016-05-312016-06-012016-06-022016-06-032016-06-042016-06-052016-06-062016-06-072016-06-082016-06-092016-06-102016-06-112016-06-122016-06-132016-06-142016-06-152016-06-162016-06-172016-06-182016-06-192016-06-202016-06-212016-06-222016-06-232016-06-242016-06-252016-06-262016-06-272016-06-282016-06-292016-06-302016-07-012016-07-022016-07-032016-07-042016-07-052016-07-062016-07-072016-07-082016-07-092016-07-102016-07-112016-07-122016-07-132016-07-142016-07-152016-07-162016-07-172016-07-182016-07-192016-07-202016-07-212016-07-222016-07-232016-07-242016-07-252016-07-262016-07-272016-07-282016-07-292016-07-302016-07-312016-08-012016-08-022016-08-032016-08-042016-08-052016-08-062016-08-072016-08-082016-08-092016-08-102016-08-112016-08-122016-08-132016-08-142016-08-152016-08-162016-08-172016-08-182016-08-192016-08-202016-08-212016-08-222016-08-232016-08-242016-08-252016-08-262016-08-272016-08-282016-08-292016-08-302016-08-312016-09-012016-09-022016-09-032016-09-042016-09-052016-09-062016-09-072016-09-082016-09-092016-09-102016-09-112016-09-122016-09-132016-09-142016-09-152016-09-162016-09-172016-09-182016-09-192016-09-202016-09-212016-09-222016-09-232016-09-242016-09-252016-09-262016-09-272016-09-282016-09-292016-09-302016-10-012016-10-022016-10-032016-10-042016-10-052016-10-062016-10-072016-10-082016-10-092016-10-102016-10-112016-10-122016-10-132016-10-142016-10-152016-10-162016-10-172016-10-182016-10-192016-10-202016-10-212016-10-222016-10-232016-10-242016-10-252016-10-262016-10-272016-10-282016-10-292016-10-302016-10-312016-11-012016-11-022016-11-032016-11-042016-11-052016-11-062016-11-072016-11-082016-11-092016-11-102016-11-112016-11-122016-11-132016-11-142016-11-152016-11-162016-11-172016-11-182016-11-192016-11-202016-11-212016-11-222016-11-232016-11-242016-11-252016-11-262016-11-272016-11-282016-11-292016-11-302016-12-012016-12-022016-12-032016-12-042016-12-052016-12-062016-12-072016-12-082016-12-092016-12-102016-12-112016-12-122016-12-132016-12-142016-12-152016-12-162016-12-172016-12-182016-12-192016-12-202016-12-212016-12-222016-12-232016-12-242016-12-252016-12-262016-12-272016-12-282016-12-292016-12-302016-12-312017-01-012017-01-022017-01-032017-01-042017-01-052017-01-062017-01-072017-01-082017-01-092017-01-102017-01-112017-01-122017-01-132017-01-142017-01-152017-01-162017-01-172017-01-182017-01-192017-01-202017-01-212017-01-222017-01-232017-01-242017-01-252017-01-262017-01-272017-01-282017-01-292017-01-302017-01-312017-02-012017-02-022017-02-032017-02-042017-02-052017-02-062017-02-072017-02-082017-02-092017-02-102017-02-112017-02-122017-02-132017-02-142017-02-152017-02-162017-02-172017-02-182017-02-192017-02-202017-02-212017-02-222017-02-232017-02-242017-02-252017-02-262017-02-272017-02-282017-03-012017-03-022017-03-032017-03-042017-03-052017-03-062017-03-072017-03-082017-03-092017-03-102017-03-112017-03-122017-03-132017-03-142017-03-152017-03-162017-03-172017-03-182017-03-192017-03-202017-03-212017-03-222017-03-232017-03-242017-03-252017-03-262017-03-272017-03-282017-03-292017-03-302017-03-312017-04-012017-04-022017-04-032017-04-042017-04-052017-04-062017-04-072017-04-082017-04-092017-04-102017-04-112017-04-122017-04-132017-04-142017-04-152017-04-162017-04-172017-04-182017-04-192017-04-202017-04-212017-04-222017-04-232017-04-242017-04-252017-04-262017-04-272017-04-282017-04-292017-04-302017-05-012017-05-022017-05-032017-05-042017-05-052017-05-062017-05-072017-05-082017-05-092017-05-102017-05-112017-05-122017-05-132017-05-142017-05-152017-05-162017-05-172017-05-182017-05-192017-05-202017-05-212017-05-222017-05-232017-05-242017-05-252017-05-262017-05-272017-05-282017-05-292017-05-302017-05-312017-06-012017-06-022017-06-032017-06-042017-06-052017-06-062017-06-072017-06-082017-06-092017-06-102017-06-112017-06-122017-06-132017-06-142017-06-152017-06-162017-06-172017-06-182017-06-192017-06-202017-06-212017-06-222017-06-232017-06-242017-06-252017-06-262017-06-272017-06-282017-06-292017-06-302017-07-012017-07-022017-07-032017-07-042017-07-052017-07-062017-07-072017-07-082017-07-092017-07-102017-07-112017-07-122017-07-132017-07-142017-07-152017-07-162017-07-172017-07-182017-07-192017-07-202017-07-212017-07-222017-07-232017-07-242017-07-252017-07-262017-07-272017-07-282017-07-292017-07-302017-07-312017-08-012017-08-022017-08-032017-08-042017-08-052017-08-062017-08-072017-08-082017-08-092017-08-102017-08-112017-08-122017-08-132017-08-142017-08-152017-08-162017-08-172017-08-182017-08-192017-08-202017-08-212017-08-222017-08-232017-08-242017-08-252017-08-262017-08-272017-08-282017-08-292017-08-302017-08-312017-09-012017-09-022017-09-032017-09-042017-09-052017-09-062017-09-072017-09-082017-09-092017-09-102017-09-112017-09-122017-09-132017-09-142017-09-152017-09-162017-09-172017-09-182017-09-192017-09-202017-09-212017-09-222017-09-232017-09-242017-09-252017-09-262017-09-272017-09-282017-09-292017-09-302017-10-012017-10-022017-10-032017-10-042017-10-052017-10-062017-10-072017-10-082017-10-092017-10-102017-10-112017-10-122017-10-132017-10-142017-10-152017-10-162017-10-172017-10-182017-10-192017-10-202017-10-212017-10-222017-10-232017-10-242017-10-252017-10-262017-10-272017-10-282017-10-292017-10-302017-10-312017-11-012017-11-022017-11-032017-11-042017-11-052017-11-062017-11-072017-11-082017-11-092017-11-102017-11-112017-11-122017-11-132017-11-142017-11-152017-11-162017-11-172017-11-182017-11-192017-11-202017-11-212017-11-222017-11-232017-11-242017-11-252017-11-262017-11-272017-11-282017-11-292017-11-302017-12-012017-12-022017-12-032017-12-042017-12-052017-12-062017-12-072017-12-082017-12-092017-12-102017-12-112017-12-122017-12-132017-12-142017-12-152017-12-162017-12-172017-12-182017-12-192017-12-202017-12-212017-12-222017-12-232017-12-242017-12-252017-12-262017-12-272017-12-282017-12-292017-12-302017-12-312018-01-012018-01-022018-01-032018-01-042018-01-052018-01-062018-01-072018-01-082018-01-092018-01-102018-01-112018-01-122018-01-132018-01-142018-01-152018-01-162018-01-172018-01-182018-01-192018-01-202018-01-212018-01-222018-01-232018-01-242018-01-252018-01-262018-01-272018-01-282018-01-292018-01-302018-01-312018-02-012018-02-022018-02-032018-02-042018-02-052018-02-062018-02-072018-02-082018-02-092018-02-102018-02-112018-02-122018-02-132018-02-142018-02-152018-02-162018-02-172018-02-182018-02-192018-02-202018-02-212018-02-222018-02-232018-02-242018-02-252018-02-262018-02-272018-02-282018-03-012018-03-022018-03-032018-03-042018-03-052018-03-062018-03-072018-03-082018-03-092018-03-102018-03-112018-03-122018-03-132018-03-142018-03-152018-03-162018-03-172018-03-182018-03-192018-03-202018-03-212018-03-222018-03-232018-03-242018-03-252018-03-262018-03-272018-03-282018-03-292018-03-302018-03-312018-04-012018-04-022018-04-032018-04-042018-04-052018-04-062018-04-072018-04-082018-04-092018-04-102018-04-112018-04-122018-04-132018-04-142018-04-152018-04-162018-04-172018-04-182018-04-192018-04-202018-04-212018-04-222018-04-232018-04-242018-04-252018-04-262018-04-272018-04-282018-04-292018-04-302018-05-012018-05-022018-05-032018-05-042018-05-052018-05-062018-05-072018-05-082018-05-092018-05-102018-05-112018-05-122018-05-132018-05-142018-05-152018-05-162018-05-172018-05-182018-05-192018-05-202018-05-212018-05-222018-05-232018-05-242018-05-252018-05-262018-05-272018-05-282018-05-292018-05-302018-05-312018-06-012018-06-022018-06-032018-06-042018-06-052018-06-062018-06-072018-06-082018-06-092018-06-102018-06-112018-06-122018-06-132018-06-142018-06-152018-06-162018-06-172018-06-182018-06-192018-06-202018-06-212018-06-222018-06-232018-06-242018-06-252018-06-262018-06-272018-06-282018-06-292018-06-302018-07-012018-07-022018-07-032018-07-042018-07-052018-07-062018-07-072018-07-082018-07-092018-07-102018-07-112018-07-122018-07-132018-07-142018-07-152018-07-162018-07-172018-07-182018-07-192018-07-202018-07-212018-07-222018-07-232018-07-242018-07-252018-07-262018-07-272018-07-282018-07-292018-07-302018-07-312018-08-012018-08-022018-08-032018-08-042018-08-052018-08-062018-08-072018-08-082018-08-092018-08-102018-08-112018-08-122018-08-132018-08-142018-08-152018-08-162018-08-172018-08-182018-08-192018-08-202018-08-212018-08-222018-08-232018-08-242018-08-252018-08-262018-08-272018-08-282018-08-292018-08-302018-08-312018-09-012018-09-022018-09-032018-09-042018-09-052018-09-062018-09-072018-09-082018-09-092018-09-102018-09-112018-09-122018-09-132018-09-142018-09-152018-09-162018-09-172018-09-182018-09-192018-09-202018-09-212018-09-222018-09-232018-09-242018-09-252018-09-262018-09-27\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337484,"user_id":null,"body":"#!\/bin\/bash\nlet \"a=$1*1000000000\"\n let \"a1=$2*1000000000\"\nlet \"days=0\"\nlet \"p=$3*1000000000\/36000\"\nwhile [ \"$a\" -lt \"$a1\" ]\ndo\nlet \"days+=1\"\n#echo \"$days\"\nlet \"a+=($a*$p\/1000000000)\"\ndone\nlet \"days=$days*24*60*60+1451606400\"\n\n\nprintf \"%(%Y-%m-%d)T\" $days\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337485,"user_id":null,"body":"#!\/bin\/bash\na0=$1; a=$2; p=$3\np=$(bc -l <<< \"($p\/36000)+1\")\noffset=`bc -l <<< \"(l($a)-l($a0))\/l($p)\"`\noffset=$( awk -vn=\"$offset\" '\n          function ceil(x){return x%1 ? int(x)+1 :x}\n          BEGIN{print ceil(n)}\n       ')\ndate -d \"2016-01-01 $offset days\" +%Y-%m-%d","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337486,"user_id":null,"body":"#!\/bin\/bash\ndate_nb_days() {\n  days=$(bc <<< \"\n  scale = 10\n  a0 = $1\n  a = $2\n  days = 0\n  while (a0 <= a) {\n    a0 += a0 * ($3 \/ 36000)\n    days += 1\n  }\n  print days\")\n  date --date \"20160101 $days days\" +%Y-%m-%d\n}\n\ndate_nb_days $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337487,"user_id":635,"body":"\ni=0\ntotal=$1;\ntarget=$2;\npercent=$(echo \"1+($3\/36000)\" | bc -l)\nwhile [[ \"$total\" < \"$target\" ]]\ndo\n  total=$(echo \"$total*$percent\" | bc -l )\n  let i++ \ndone\n\ndt=\"2016-01-01\"\ndate -d \"$dt +$i day\"  +'%Y-%m-%d'\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"569b5cec755dd3534d00000f":[{"id":337488,"user_id":null,"body":"new_avg() {\n        arr=($(echo $1))\n        let len=${#arr[@]}+1\n        sum=$(echo ${arr[*]} | tr ' ' '\n' | awk 'BEGIN{sum=0}{sum=sum+$1}END{print sum}')\n        last=$(echo \"$len*$2-$sum\" | bc)\n        last=$((${last\/\/.*\/+1}))\n        [ $last -le 0 ] && echo ERROR || echo $last\n}\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337489,"user_id":492,"body":"#!\/bin\/bash\nceil() {                                              \n        echo \"define ceil (x) {if (x\/1 == x) {return x} \\\n        else { if (x<0) {return x\/1 -1} \\\n        else {return x\/1 + 1 }}} ; ceil($1)\" | bc\n}\n\nnew_avg() {\n    arr=($1)\n    lg=${#arr[@]}\n    newavg=$2\n    s=$(\n      awk 'BEGIN {t=0; for (i in ARGV) t+=ARGV[i]; print t}' \"${arr[@]}\"\n    )\n    d=$(bc <<< \"scale=16; ($lg + 1) * $newavg - $s\")\n    r=$(ceil $d)\n    if [[ \"$r\" -le \"0\" ]]\n    then\n      echo \"ERROR\"\n    else\n      echo $r\n    fi\n}\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337490,"user_id":null,"body":"new_avg() {\n  # your code\n  source_data=\"$1\"\n  source_avg=$2\n  #source_r=\n  result=0\n  result_r=ERROR\n  j=1\n  for i in $source_data;do\n  #result=$(echo $result+$i|bc)\n  i=$(echo 0 $i| awk '{printf(\"%.2f\",$1+$2)}' )\n  result=$(echo $result $i| awk '{printf(\"%.2f\",$1+$2)}' )\n\n  j=$((j+1))\n  done\n  #source_r=$(echo \"$source_avg*$j\"|bc)\n  source_r=$(echo $source_avg $j| awk '{printf(\"%.2f\",$1*$2)}' )\n\n  #source_r=$(echo \"scale=0;$source_r\/1\"|bc)\n  #result=$(echo \"scale=0;$result\/1\"|bc)\n  result_cp=$(echo \" $source_r > $result \"|bc)\n\n  \n  if [ Z$result_cp = \"Z1\" ];then\n  #result_r=$(echo $source_r $result| awk '{printf(\"%0.1f\",$1-$2)}' )\n  \n  #you bing bing\n  result_r=$(echo \"scale=0;($source_r-$result+0.90)\/1\"|bc)\n  #result_r=$((${result_r\/\/.*\/+1}))\n\n\n  #result_r=$(echo $source_r $result| awk '{printf(\"%0.0f\",$1+0.01-$2)}' )\n\n  echo $result_r\n  else \n  echo $result_r\n  fi\n}\n\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337491,"user_id":null,"body":"\nnew_avg() {\n  local donations=\"$1\"\n  local expectedAverage=$2\n  donationSum=$(echo \"$donations\" \\\n    | sed -Ee 's\/ \/+\/g' \\\n    | bc)\n  count=$(echo -n \"$donations\" \\\n    | sed -Ee 's\/[0-9.]+\/x\/g'\\\n    | tr -d ' ' \\\n    | wc -m)\n  rawValue=$(echo \"$expectedAverage * ($count + 1) - $donationSum\" | bc)\n  result=$(ceil $rawValue)\n  if [[ $result -lt 0 ]]; then\n    fail\n  else\n    echo $result\n  fi\n}\n\nceil() {\n  echo $1 | awk '{\n    value=$0\n    if ((value % 1) == 0) {\n      print value\n    } else {\n      print (value + 1) - (value % 1)\n    }\n  }'\n}\n\nfail() {\n  echo \"ERROR\"\n  exit 0\n}\n\nif [[ -z \"$1\" ]]; then\n  echo $2\n  exit 0\nfi\n\nnew_avg \"$(echo -n \"$1\" | tr -d ',')\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337492,"user_id":null,"body":"new_avg() {\n    # average=(array_sum\/array_length)\n    # new_average=(array_sum+new_value)\/(array_length+1)\n    # new_value=new_average*(array_length+1)-array_sum\n\n    # sum of donations\n    array_sum=$(echo \"$1\" | sed 's\/ \/+\/g' | sed 's\/,\/+\/g' | tr -s '+' | bc -l)\n    # new array length: amount of donations + 1\n    new_length=$(($(echo \"$1\" | wc -w) + 1))\n    # new_value=new_average*new_length-array_sum, rounded up\n    new_value=$(bc <<<\"$2 * $new_length - $array_sum\" | awk '{print int($1+0.999)}')\n\n    # if array is empty, $2 is new average\n    if [ -z \"$1\" ]; then\n        echo $2\n        exit\n    fi\n\n    # output donation, throw error if negative\n    if [[ $new_value -ge 0 ]]; then\n        echo $new_value\n    else\n        echo ERROR\n    fi\n}\n\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337493,"user_id":null,"body":"new_avg() {\n  in=${1\/\/,}\n  cnt=0\n  sum=0\n  for i in $in; do\n    sum=$(echo \"$sum + $i\" | bc -l)\n    ((++cnt))\n  done\n  res=$(echo \"$2 * ($cnt + 1) - $sum\" | bc -l)\n  if (( $(echo \"$res >= 0\" | bc -l) )); then \n    echo $res | awk '{print int($1+0.999)}'\n  else\n    echo \"ERROR\"\n  fi\n}\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337494,"user_id":null,"body":"new_avg() {\n  arr=($(echo $1 | tr -d ','))\n  num=${#arr[@]}\n  sum=0\n  for (( i = 0; i < $num; i++ )); do\n    sum=$(echo \"$sum + ${arr[i]}\" | bc)\n  done\n  avg=$(bc <<< \"\n  define ceil(x) {\n  scale = 0\n  if (x \/ 1 == x) return x \\\n  else \\\n    if (x >= 0) return x \/ 1 + 1 \\\n    else return x \/ 1 - 1\n  }\n  print ceil($2 * ($num + 1) - $sum)\")\n  (( avg > 0 )) && echo $avg || echo \"ERROR\"\n}\nnew_avg \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337495,"user_id":null,"body":"new_avg() {\n  n=1; sum=0; res=0; exp=0\n  for var in $1; do\n    var=${var%%,}\n    sum=$(echo \"$sum + $var\" | bc)\n    (( n++ ))\n  done\n  exp=$(echo \"$2 * $n\" | bc); res=$(echo \"$exp - $sum\" | bc)\n  if (($(echo \"$res < 0\" | bc))); then\n    echo 'ERROR'\n  else\n    printf '%.0f' $(echo \"$res + 0.49\" | bc)\n  fi\n}\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337496,"user_id":null,"body":"echo $1 | awk -v RS=' ' -v navg=$2 '\n  NF { sum += $1; len++ }\n  END {\n    needed = navg * (len + 1) - sum;\n    if (needed < 0)\n      print \"ERROR\"\n    else if (needed == int(needed))\n      print needed\n    else\n      print int(needed) + 1\n  }\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337497,"user_id":635,"body":"new_avg() {\n        arr=($1)\n        sum=$(echo ${arr[*]} | tr ' ' '\n' | awk 'BEGIN{sum=0}{sum=sum+$1}END{print sum}')\n        last=$(echo \"$2*(${#arr[@]}+1)-$sum\" | bc -l)\n        last=$((${last\/\/.*\/+1}))\n        [ $last -le 0 ] && echo ERROR || echo $last\n\n}\nnew_avg \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56a32dd6e4f4748cc3000006":[{"id":337498,"user_id":null,"body":"#!\/bin\/bash\nvariance () {\n    if [ \"` echo \"$1\" | grep \"$2\" | cut -d':' -f1`\" != \"$2\" ]\n    then\n      echo -1\n    else\n      list=` echo \"$1\" | grep \"$2\" | tr ',' '+' | tr -d \":[:alpha:]\"`\n      sum=` echo $list| bc -l`\n      mean=` echo \"$sum \/ 12.0\" | bc -l`\n      svar=` echo \"($list)\" | sed 's\/+\/)+(\/g' | sed \"s\/)\/-$mean)^2\/g\" | bc`\n      var=` echo \"$svar \/ 12.0\" | bc -l`\n      echo $var\n    fi\n}\nvariance \"$1\"  \"$2\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337499,"user_id":null,"body":"#!\/bin\/bash\nvariance () {\n    town=$2\n    data=$1\n    result=0\n    while read -r line; do\n      thisTown=${line:0:${#town}+1}\n      if [[ $thisTown == $town\":\" ]]; then\n        months=${line:${#town}+1:${#line}}\n        months=$(echo $months | tr \",a-zA-z\" \" \")\n        sum=0\n        n=0\n        for month in $months\n        do\n          sum=$(bc -l <<< \"$sum + $month\")\n          n=$(( $n+1 ))\n        done\n        if [[ $n -gt 0 ]]; then\n          mean=$(bc -l <<< \"$sum \/ $n\")\n          sqdiffsum=0\n          for month in $months\n          do\n            diff=$(bc -l <<< \"$month - $mean\")\n            sqdiffsum=$(bc -l <<< \"$sqdiffsum + $diff * $diff\")\n          done\n          result=$(bc -l <<< \"$sqdiffsum \/ $n\")\n        fi\n      fi\n    done <<< $\"$data\"\n    if (( $(bc -l <<< \"$result > 0\") )); then\n      echo $result\n    else\n      echo -1\n    fi\n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337500,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my $d = shift; my $tofnd = shift; my @h = split \/[\n]\/, $d; my $rain = \"\";\n    my @hh = map { [split \/[:]\/] } @h;\n    foreach (@hh) {\n        if ($_->[0] eq $tofnd) { $rain = $_->[1]; }\n    }\n    if ($rain eq \"\") { return -1; }\n    my @mths = split \/[,]\/, $rain;\n    my $s = 0; my $s2 = 0;\n    foreach (@mths) {\n        my $e = (split \/[ ]\/, $_)[1];\n        $s += $e; $s2 += $e * $e;\n    }\n    my $m = $s\/12.0;\n    my $v = $s2 \/ 12.0 - $m * $m;\n    return $v;\n}\n$a=aux($ARGV[0], $ARGV[1]);\nprint $a;\n'\nvariance () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\"`\n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337501,"user_id":null,"body":"#!\/bin\/bash\nvariance () {\n  total=0\n  noMatch=0\n  while read -rd $'\n' line; do\n    town=$(echo \"$line\" | cut -d: -f1)\n    if [[ \"$town\" == $2 ]]; then\n      noMatch=1\n      IFS=\",\" read -ra line2 <<< $line\n      for i in ${line2[@]}; do\n        if [[ $i =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]]; then\n          total=$(echo \"$i + $total\" | bc -l)\n        fi\n      done\n      avarage=$(echo \"$total \/ 12\" | bc -l)\n      variance=0\n      total_variance=0\n      for i in ${line2[@]}; do\n          if [[ $i =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]]; then\n              variance=$(echo \"($i - $avarage) * ($i - $avarage)\" | bc -l)\n              total_variance=$(echo \"$total_variance + $variance\" | bc -l)\n          fi\n      done\n      ultimate_variance=$(echo \"$total_variance \/ 12\" | bc -l)\n    fi\n  done <<< $1\n  if [[ $noMatch == 0 ]]; then\n    echo -1\n  else\n    echo $ultimate_variance\n  fi\n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337502,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my $d = shift; my $tofnd = shift; my @h = split \/[\n]\/, $d; my $rain = \"\";\n    my @hh = map { [split \/[:]\/] } @h;\n    foreach (@hh) {\n        if ($_->[0] eq $tofnd) { $rain = $_->[1]; }\n    }\n    if ($rain eq \"\") { return -1; }\n    my @mths = split \/[,]\/, $rain;\n    my $s = 0; my $s2 = 0;\n    foreach (@mths) {\n        my $e = (split \/[ ]\/, $_)[1];\n        $s += $e; $s2 += $e * $e;\n    }\n    my $m = $s\/12.0;\n    my $v = $s2 \/ 12.0 - $m * $m;\n    return $v;\n}\n$a=aux($ARGV[0], $ARGV[1]);\nprint $a;\n'\nvariance () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\"`\n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337503,"user_id":null,"body":"#!\/bin\/bash\nvariance() {\n    data=($(echo \"$1\" | grep -w $2 | awk -F \":\" '{print $2}' | sed 's\/,\/\n\/g' | awk '{print $2}'))\n    if [ -z \"$data\" ]; then\n        echo \"-1\"\n        exit\n    fi\n    mean=$(bc <<<\"scale=3;($(IFS=+; echo \"${data[*]}\")) \/ 12\")\n    for number in \"${data[@]}\"; do\n        diffsquared+=($(bc <<<\"scale=3; ($number - $mean)^2\"))\n    done\n    result=$(bc <<<\"scale=3; ($(IFS=+; echo \"${diffsquared[*]}\")) \/ 12\")\n    echo $result\n}\nvariance \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337504,"user_id":null,"body":"#!\/bin\/bash\n\nparse_city_records() {\n  data=\"$1\"\n  city=\"$2\"\n  echo \"$data\" | grep \"$city:\" | cut -d: -f 2 | tr -d '[:alpha:]' | tr -d ' ' | tr ',' ' '\n}\n\nmean () {\n  values=$(parse_city_records \"$1\" \"$2\")\n  if [ $(echo \"$values\" | tr -d ' ') ]; then\n    parse_city_records \"$1\" \"$2\" | tr ' ' '+' | echo \"( $(cat -) ) \/ $( echo \"$values\" | wc -w )\" | bc -l\n  else\n    echo \"-1\"\n  fi\n}\n\nvariance () {\n  values=$(parse_city_records \"$1\" \"$2\")\n  if [ $(echo \"$values\" | tr -d ' ') ]; then\n    mean=$(mean \"$1\" \"$2\")\n    var=0\n    for val in $values; do\n      var=$(echo \"$var + ($val - $mean)^2\" | bc -l)\n    done\n    echo \"$var \/ $( echo \"$values\" | wc -w )\" | bc -l\n  else\n    echo \"-1\"\n  fi\n}\n\nvariance \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337505,"user_id":null,"body":"#!\/bin\/bash\nvariance () {\n    REGEXP='[0-9]'\n    CITY=${1#*$2:}\n    CITY=${CITY%%:*}\n    \n    if [[ ! $CITY =~ $REGEXP ]]  \n    then\n      echo -1\n      return 0\n    fi\n\n    TEMPERATURES=$(echo $CITY | tr \",\" \"\n\" | cut -f 2 -d \" \")\n    \n    SUM=0\n    MEAN=0\n    \n    for i in $TEMPERATURES\n    do\n      SUM=$(echo \"scale=10; $SUM+$i\" | bc)\n    done\n    \n    MEAN=$(echo \"scale=10; $SUM\/12\" | bc)\n    \n    SUM=0\n    \n    for i in $TEMPERATURES\n    do\n      SUM=$(echo \"scale=10; $SUM+($i - $MEAN)^2\" | bc)\n    done        \n\n    echo \"scale=10; $SUM\/12\" | bc\n\n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337506,"user_id":null,"body":"#!\/bin\/bash\nvariance () {\n    \n    local townLine=`echo \"$1\" | grep \"$2:\"`\n    if [ -z \"$townLine\" ]\n    then\n      echo \"-1\"\n    else \n      local values=${townLine\/\/[a-zA-Z,:]}\n      local avg=\"0.0\"\n      for i in $values\n      do\n        avg=`echo \"$avg + $i\" | bc -l`\n      done\n      avg=`echo \"$avg \/ 12.0\" | bc -l`\n\t  local variance=\"0.0\"\n\t  for i in $values\n\t  do\n\t\tvariance=`echo \"$variance + ($i - $avg) * ($i - $avg)\" | bc -l`\n\t  done\n    variance=`echo \"$variance \/ 12\" | bc -l`\n    \n\t  echo $variance\n    fi\n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337507,"user_id":null,"body":"#!\/bin\/bash\nvariance () {\n\n    IFS=', '\n    read -r -a array <<< $( echo \"$1\" | grep \"$2:\" | sed 's\/[a-zA-Z:]\/\/g' )\n\n    MONTHS=${#array[@]}\n    \n    SUM=0\n    for number in ${array[@]}\n    do\n      SUM=$(echo \"$SUM + $number\" | bc)\n    done\n    \n    AVERAGE=$(echo \"$SUM \/ $MONTHS\" | bc -l)\n    \n    SUM=0\n    for number in ${array[@]}\n    do\n      SUM=$(echo \"$SUM + ($number - $AVERAGE)^2\" | bc -l)\n    done\n    \n    [[ $MONTHS -eq 12 ]] && echo \"$SUM \/ $MONTHS\" | bc -l || echo \"-1\"\n    \n}\nvariance \"$1\"  \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56a4872cbb65f3a610000026":[{"id":337508,"user_id":null,"body":"#!\/bin\/bash\nmax_rot ()\n{\n    local number=\"$1\"\n    local len=\"${#number}\"\n    \n    # It's necessary to explicitly state the base of the number\n    # or else we could end up with numbers starting with a zero\n    # which would be interpreted as octal values.\n    #\n    # We can't just revert to string comparison because the string\n    # \"200\" would be considered higher than the string \"1000\".\n    local max=\"10#$number\"\n\n    for (( i=1; i < len; i++ )); do\n        # Take out the base before rotating.\n        number=\"${number#10#}\"\n        # Now use some sweet variable expansion to rotate the digits.\n        number=\"10#${number:0:$((i - 1))}${number:$i}${number:$((i - 1)):1}\"\n        # And an even sweeter arithmetic comparison.\n        if (( number > max )); then\n            max=\"$number\"\n        fi\n    done\n    \n    # Finally, print the number without the base.\n    echo \"${max#10#}\"\n}\nmax_rot \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337509,"user_id":null,"body":"#!\/bin\/bash\nmax_rot () {\n    # your code\n    str=\"$1\"\n    len=\"${#1}\"\n    for i in $(seq 0 $len)\n    do\n      echo \"$str\"\n      str=\"${str:0:i}${str:i+1:len-i}${str:i:1}\"\n    done | sort -n | tail -1\n}\nmax_rot \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337510,"user_id":492,"body":"#!\/bin\/bash\naux565='\nfrom sys import argv\ndef aux(n):\n    res, mx, s = \"\", int(n), n\n    if (len(s) == 1): return n\n    while True:\n        s = (s * 2)[1:len(s)+1]\n        res += s[0]\n        s = s[1:len(s)]\n        nb = int(res + s)\n        if (nb > mx): mx = nb\n        if (len(s) == 1): break\n    return mx\na=aux(argv[1:][0])\nprint a\n'\nmax_rot () {\n    echo `python -c \"$aux565\" \"$1\"`\n}\nmax_rot \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337511,"user_id":null,"body":"#!\/bin\/bash\nf(){\n    n=$1\n    echo $n\n    for ((i=0;i<${#n};i++));do\n        n=\"${n:0:i}${n:$((i+1))}${n:i:1}\"\n        echo $n\n    done\n}\nf $1 | sort -r | head -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337512,"user_id":null,"body":"#!\/bin\/bash\n\n_rot() {\n    local prefix=$1\n    local suffix=$2\n    printf %s%s\\\n \"$prefix\" \"$suffix\"\n    if [[ ${#suffix} -eq 1 ]]; then\n        return 0\n    fi\n    _rot \"$prefix${suffix:1:1}\" \"${suffix:2}${suffix:0:1}\"\n}\n\nmax() {\n    local max=$1\n    local next\n    shift\n    for next in \"$@\"; do\n        if [[ $next -gt $max ]]; then\n            max=$next\n        fi\n    done\n    printf %d\\\n \"$max\"\n}\n\nmax_rot () {\n    local n=$1\n    local -a rotations\n    mapfile -t rotations < <(_rot \"\" \"$n\")\n    max \"${rotations[@]}\"\n}\nmax_rot \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337513,"user_id":null,"body":"#!\/bin\/bash\nlist=$1\nlen=${#1}\nnum=$1\n# echo $1\nmax_rot () {\n  for((i=0;i<len-1;i++)); do\n    # echo \"$i\"\n    j=$(($i+1))\n    k=$(($len - $i -1))\n    new=${num:0:$i}${num:$j:$k}${num:$i:1}\n    num=$new\n    # echo $new\n    list=\"$list $num\"\n  done\n  echo $list | tr ' ' '\n' | sort | tail -1\n}\nmax_rot $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337514,"user_id":null,"body":"#!\/bin\/bash\nmax_rot () {\n  max=$1\n  new=$1\n  for ((i=0;i<${#1};i++))\n  do\n    new=\"${new:0:i}${new:i+1:${#1}}${new:i:1}\"\n    if [[ $new -gt $max ]]\n    then\n      max=$new\n    fi\n  done\n  echo $max\n}\nmax_rot \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337515,"user_id":null,"body":"#!\/bin\/bash\n\nn=$1\nmax=$n\nfor (( i = 0; i < ${#n} - 1; i++ )); do\n  n=\"${n:0:i}${n:i+1:${#n}}${n:i:1}\"\n  if (( $n > $max )); then\n    max=$n\n  fi\ndone\n\necho \"$max\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337516,"user_id":null,"body":"#!\/bin\/bash\nmax_rot () {\n  num=$1\n  len=${#num}  \n  max=${num}\n  \n  for ((i=0; i<len-1; i++)); do\n    num=$(echo ${num} | sed -E \"s\/([0-9]{${i}})([0-9])(.*)\/\\1\\3\\2\/\")\n    (( num > max )) && max=${num}\n  done\n  \n  echo ${max}\n}\nmax_rot \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337517,"user_id":null,"body":"#!\/bin\/bash\nmax_rot () {\n  arr=()\n  len=${#1}\n  it=$(( $len - 1 ))\n  var=$1\n  arr+=(\"$var\")\n  if [ ! ${var:1:1} == 0 ]\n    then \n      var=$(( 10#${var:1} * 10 + 10#${var:0:1}))\n      arr+=(\"$var\")\n    else\n      echo $var\n      return 1 \n    fi\n  \n  for i in $(seq 2 $it)\n  do\n    if [ ${var:1:1} == 0 ]\n    then \n      true\n    fi\n    var=$(( ${var:0:$(($i-1))} * $[10**$((len - $i + 1))] + ${var:$(($i-1)):1} + 10#${var:i} * 10 ))\n    arr+=(\"$var\")\n  done\n  \n  max=${arr[0]}\n  for n in \"${arr[@]}\" ; \n  do\n    ((n > max)) && max=$n\n  done\n  \n  echo $max\n  \n  for n in \"${arr[@]}\" ; \n  do\n    echo $n\n  done\n}\n\nmax_rot $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56a5d994ac971f1ac500003e":[{"id":337518,"user_id":1045,"body":"#!\/bin\/bash\nlongest_consec() {\n  declare -a arr=($1); res=''; k=$2; c=-1\n  #check for invalid input\n  if ((${#arr[*]}==0)) || (($k>${#arr[*]})) || (($k<=0)); then\n    exit; fi\n  \n  #loop through input array\n  while (($c<=${#arr[*]}-$k)); do\n    sum=0; c=$((c+1))\n    for i in $(eval echo \"{0..$((k-1))}\"); do\n      pos=$((c+i)); sum=$((sum+${#arr[$pos]})); done\n    if(($sum>${#res})); then\n      res=''\n      for i in $(eval echo \"{0..$((k-1))}\"); do\n      pos=$((c+i)); res=\"$res${arr[$pos]}\"; done; fi\n  done\n  \n  echo \"$res\"\n}\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337519,"user_id":null,"body":"#!\/bin\/bash\ns=($1) \nl=${#s[*]}\n((l==0 || l<$2 || $2 <= 0)) && echo \"\" && exit\nfor ((i=0;i<l;i++))\n{\n  c=$((c+${#s[i]})) \n  ((i>=$2)) && c=$((c-${#s[i-$2]}))\n  ((c>t)) && t=$c j=$((i-$2+1)) \n}\necho ${s[*]:$j:$2} | tr -d [[:space:]]","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337520,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n    read -a array <<<\"$1\"\n    for ((i = 0; i <= $((${#array[@]} - $2)); ++i)); do\n        concat=\"$(echo \"${array[@]:$i:$2}\" | sed 's\/ \/\/g')\"\n        length=$(echo $concat | wc -c)\n        if [ -z \"$longest\" ]; then\n            longest=$concat\n            longestlength=$length\n        else\n            if [[ $length -gt $longestlength ]]; then\n                longest=$concat\n                longestlength=$length\n            fi  \n        fi\n    done\n    echo $longest\n}\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337521,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n    arr=($1)\n    k=$2\n        if [ ${#arr[@]} -lt $k -o ${#arr[@]} -eq 0 -o $k -le 0 ]; then\n            echo \"\"\n        else\n            for i in ${!arr[@]}\n                 do\n                 str=\"\"\n                 for m in $(seq 1 $k)\n                      do\n                      str=$str${arr[$i+$m-1]}\n                      done\n                 if [ ${#max} -lt ${#str} ]; then\n                      max=$str\n                 fi\n                 done\n           echo $max\n        fi\n    }\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337522,"user_id":null,"body":"#!\/bin\/bash\narray=($1)\nn=$2\nresult=''\nif [ ${#array[@]} -ge $n ] && [ $n -ge 0 ]; then\n    for (( i = 0; i < ${#array[@]}; i++ )); do\n        tmp=''\n        for (( j = i; j < $i + $n; j++ )); do\n            tmp+=\"${array[j]}\"\n        done\n        if [ ${#tmp} -gt ${#result} ]; then\n            result=$tmp\n        fi\n    done\nfi\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337523,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n   \tarr=($1)\n    i=0\n    RESULT_STRING=\"\"\n#    echo \"${#arr[@]}\"\n    number_of_cycles=$((${#arr[@]} - $2))\n    while [ $number_of_cycles -ge $i ]; do\n      j=1\n      k=$i\n      TEMP_STRING=\"\"\n      while [ $j -le $2 ]; do\n        TEMP_STRING=\"$TEMP_STRING${arr[$k]}\"\n        j=$(($j+1))\n        k=$(($k+1))\n      done\n      if [ ${#TEMP_STRING} -gt ${#RESULT_STRING} ]; then\n        RESULT_STRING=$TEMP_STRING\n      fi\n      i=$(($i+1))\n      done\n        \n      #return \"$RESULT_STRING\" ${#RESULT_STRING}\n      echo \"$RESULT_STRING\"\n      #echo ${#RESULT_STRING}\n\n    \n    }\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337524,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n    k=$2\n    cadena=(${1\/\/ \/ })\n    elementos=${#cadena[@]}\nMAX=0\nRES=\"\"\nfor i in $(seq 0 $((elementos-$k)))\ndo\noutput=\"\"\n    for j in $(seq $i $(($i+$k-1)))\n      do\n        output=$output${cadena[$j]}\n      done\n      if [[ $MAX -lt ${#output} ]]\n      then\n         MAX=${#output}\n         RES=$output\n      fi\n    done\necho $RES\n}\nlongest_consec \"$1\" $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337525,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n    # your code\n    local arr=( $1 )\n    local k=$2\n    local n=${#arr[@]}\n    if [ \"$n\" -le 0 -o \"$k\" -gt \"$n\" -o \"$k\" -le 0 ] ; then\n      echo \"\"\n    else\n      local idx=0\n      local res=\"\"\n      for el in ${arr[@]} ; do\n        sub=${arr[@]:${idx}:${k}}\n        sub=${sub\/\/ }\n        if [ \"${#sub}\" -gt \"${#res}\" ] ; then\n          res=${sub}\n        fi\n        idx=$((idx + 1))\n      done\n      echo ${res}\n    fi\n}\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337526,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n    a=($1)\n    k=$2\n    size=$((${#a[@]}-$k+1))\n    if [[ ${#a[@]} -eq 0 || $k -gt ${#a[@]} || $k -le 0 ]]\n    then\n      echo \"\"\n      return 1\n    fi\n    \n    best=\"\"\n    for (( ind=0; ind<size; ind++ ))\n    do\n      candidate=\"\"\n      for (( i=0; i<k; i++ ))\n      do\n        candidate=\"$candidate${a[ind+i]}\"\n      done\n      if [[ ${#candidate} -gt ${#best} ]]\n      then\n        best=$candidate\n      fi\n    done\n    echo $best\n      \n}\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337527,"user_id":null,"body":"#!\/bin\/bash\nlongest_consec() {\n  len=$2\n  read -a words <<< \"$1\"\n  num_words=$(echo ${#words[*]})\n  index=0\n  last_len=0\n  result=\"\"\n  \n  for (( i=0; i<=$num_words-$len; i++ )); do\n    read -a consec_words <<< $(echo ${words[@]:i:len})\n    consec_len=0\n    last_word=\"\"\n    for word in ${consec_words[*]}; do\n      word_len=${#word}\n      consec_len=$(($consec_len+${#word}))\n      last_word=$(echo $last_word$word)\n      done\n    [ $consec_len -gt $last_len ] && last_len=$consec_len && index=$i && result=$last_word\n  done\n  echo $result\n}\nlongest_consec \"$1\" $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56af1a20509ce5b9b000001e":[{"id":337528,"user_id":492,"body":"#!\/bin\/bash\ntravel() {\n    zipcode=$2\n    s=$(echo $1 | tr '\n' ',')\n    IFS=',' read -ra NAMES <<< \"$s\"\n    for i in \"${NAMES[@]}\"; do\n        r=$(echo \"$i\" | grep -w \"$zipcode\")\n        if [ -n \"$r\" ]; then\n            r=$(echo $r | sed -e \"s\/$zipcode\/\/\")\n            nb=$(echo $r | sed 's\/[^0-9]\/\/g')\n            strTwn=$(echo $r | sed -e \"s\/$nb\/\/\")\n            strTwn=$(echo $strTwn | sed -e \"s\/^[[:space:]]\/\/\")\n            result1=\"${result1},$nb\"\n            result2=\"${result2},$strTwn\"\n       fi\n    done\n    result=\"$zipcode:${result2:1}\/${result1:1}\"\n    echo $result\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337529,"user_id":492,"body":"#!\/bin\/bash\ntravel() {\n    zipcode=$2\n    s=$(echo $1 | tr '\n' ',')\n    IFS=',' read -ra NAMES <<< \"$s\"\n    for i in \"${NAMES[@]}\"; do\n        r=$(echo \"$i\" | grep -w \"$zipcode\")\n        if [ -n \"$r\" ]; then\n            r=$(echo $r | sed -e \"s\/$zipcode\/\/\")\n            nb=$(echo $r | sed 's\/[^0-9]\/\/g')\n            strTwn=$(echo $r | sed -e \"s\/$nb\/\/\")\n            strTwn=$(echo $strTwn | sed -e \"s\/^[[:space:]]\/\/\")\n            result1=\"${result1},$nb\"\n            result2=\"${result2},$strTwn\"\n       fi\n    done\n    result=\"$zipcode:${result2:1}\/${result1:1}\"\n    echo $result\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337530,"user_id":null,"body":"#!\/bin\/bash\ntravel() {\n  addrs=$1\n  zipcode=$2\n  \n  matches=$(printf \"$addrs\" | tr ',' '\n' | grep -w \"$zipcode\")\n  streets=$(printf \"${matches\/\/ $zipcode\/}\" | cut -d ' ' -f 1 --complement)\n  nums=$(printf \"$matches\" | cut -d ' ' -f 1)\n  \n  printf \"$zipcode:$streets\/$nums\" | tr '\n' ','\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337531,"user_id":null,"body":"#!\/bin\/bash\ntravel() {\n    addresses=$1 #separated by comma\n    zipCode=$2\n    \n    echo \"${addresses}\" | tr ',' '\n' | grep -w \"${zipCode}$\" | awk -F\" \" -v zipCode=\"${zipCode}\" '\n      {num=$1; $1=$(NF-1)=$NF=\"\"; street=$0; gsub(\/^[ \\t]+\/, \"\", street); gsub(\/[ \\t]+$\/, \"\", street);}\n      {if(NR==1){nums=num; streets=street;}else{nums=nums\",\"num; streets=streets\",\"street;}}\n      END{print zipCode\":\"streets\"\/\"nums}'\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337532,"user_id":null,"body":"#!\/usr\/bin\/env bash\ntravel(){\n  myList=()\n  myList_2=()\n  count=0\n  temp=\"$(echo ${1} | tr -d '\n')\"\n  IFS=\",\" read -ra address <<< \"${temp}\"\n  for i in \"${address[@]}\"\n  do\n      if ( echo $i | grep -oq \"$2$\" )\n      then\n        myList+=( \"$(echo $i | sed -n \"s\/$2\/\/p\" | sed -n \"s\/\"^[0-9]*$\"\/\/p\" | xargs)\" )\n        myList_2+=( \"$(echo $i | awk '{print $1;}' | xargs)\" )\n        count=$(($count + 1))\n      fi\n  done\n\n  printf '%s:' \"$2\"\n  for (( j=0; j<$count; j++ ))\n  do\n    if [[ $(( $j + 1 )) -eq $count ]]\n    then\n      printf '%s' \"${myList[$j]}\"\n    else\n      printf '%s,' \"${myList[$j]}\"\n    fi\n  done\n\n\n  printf '\/'\n\n  for (( k=0; k<$count; k++ ))\n  do\n    if [[ $(( $k + 1 )) -eq $count ]]\n    then\n      printf '%s' \"${myList_2[$k]}\"\n    else\n      printf '%s,' \"${myList_2[$k]}\"\n    fi\n  done\n  printf \"\n\"\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337533,"user_id":null,"body":"#!\/bin\/bash\ntravel() {\n  co=$2\n  r=$1\n  returnn=\"${co}:\"\n#i=0\n  j=0\n  declare -a my_array\n\n  for ((i = 0 ; i < ${#r}; i++)); do\n     if [[ \"${r:$i:1}\" == \",\" ]]; then\n         j=$(($j +1))\n      else\n         my_array[$j]+=\"${r:$i:1}\"\n     fi\n  done\n  flag='0'\n  for i in \"${my_array[@]}\"; do\n      len=${#i}\n      lenp=${i%%' '*}\n      lenp=${#lenp}\n      lenp=$(($lenp +1))\n      len=$(($len -8))\n      len=$(($len -$lenp -1))\n      if [[ $co == ${i:(-8):8} ]]; then\n          returnn+=\"${i:${lenp}:${len}},\"\n          flag='1'\n      fi\n  done    \n\n  returnn=\"${returnn::(-1)}\/\"\n\n  for i in \"${my_array[@]}\"; do\n     if [[ $co == ${i:(-8):8} ]]; then\n         returnn+=\"${i%%' '*},\"\n         \n     fi\n  done\n  returnn=${returnn\/\/'\/\n'\/'\/'}\n  returnn=${returnn\/\/',\n'\/','}\n\n\n  if [[ $flag == '1' ]]; then\n      returnn=\"${returnn::(-1)}\"\n     echo $returnn\n  else    \n      returnn=\"${returnn::(-1)}:\/\"\n      echo $returnn\n  fi  \n\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337534,"user_id":null,"body":"#!\/bin\/bash\ntravel() {\n    input=$(tr -d '\n' <<< \"$1\")\n    readarray -d ',' -t addresses < <(printf \"%s\" \"$input\")\n\n    streets=\"\"\n    houses=\"\"\n\n    for address in \"${addresses[@]}\"; do\n      readarray -d ' ' -t words < <(printf \"%s\" \"$address\")\n      if [[ \"${words[-2]} ${words[-1]}\" == \"$2\" ]]; then\n        houses+=\",\"${words[0]}\n        streets+=\",\"${words[@]:1:$((${#words[@]} - 3))}\n      fi\n    done\n\n    echo $2:${streets:1}\/${houses:1}\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337535,"user_id":null,"body":"#!\/bin\/bash\ntravel() {\n       # Neccessary manipulation to separato for each line while using IFS and load into array for easier manipulation\n    OLDIFS=$IFS\n    IFS=$'\n'\n    data_arr=($(echo \"$1\" | tr ',' '\n' | grep -w \"$2\" | sed 's\/ [A-Z]* [0-9]*$\/\/g'))\n    IFS=$OLDIFS\n    for ((i=0; i<${#data_arr[@]}; i++)); do\n        addresses+=\"${data_arr[i]#* },\"\n        numbers+=\"${data_arr[i]%% *},\"\n    done\n    # No need to condition for empty - brace expansion will deal with that #\n    list=\"${2}:${addresses%,*}\/${numbers%,*}\"\n    echo $list \n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337536,"user_id":null,"body":"#!\/bin\/bash\ntravel() {\n    # your code\n  IFS=, read -r -a addr <<< \"${1\/\/$'\n'\/ }\"\n  local -a road\n  local -a no\n  local addr_len=${#addr[@]}\n  local zipcode_len=${#2}\n  for ((i = 0; i < addr_len; i++)); do\n    local x=\"${addr[i]}\"\n    x=$(sed -e 's\/^[[:blank:]]\\+\/\/' -e 's\/[[:blank:]]\\+$\/\/' <<< \"$x\")\n    if [[ \"$x\" == *$2 ]]; then\n      local sub_len=$((${#x} - zipcode_len - 1))\n      local sub_str=\"${x:0:sub_len}\"\n      no+=(\"${sub_str%% *}\")\n      road+=(\"${sub_str#* }\")\n    fi\n  done\n  if ((${#road[@]} == 0)); then\n    echo \"$2\":\/\n    return\n  fi\n  echo -n \"$2\":\n  IFS=,\n  echo \"${road[*]}\"\/\"${no[*]}\"\n  IFS=\n}\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337537,"user_id":null,"body":"#!\/bin\/bash\n\n#!\/bin\/bash\n\ntravel() {\n    read -r -d '' PROG << EOF\nstreets = []\naddrs = []\nst, zip = \"$2\".split(' ')\ns = \"$1\"\ns.split(\",\").each do |a|\n   parts = a.split(' ')\n   state, a_zip = parts[-2], parts[-1]\n   if state == st && a_zip == zip\n       addrs.push(parts[0])\n       streets.push(parts[1..-3])\n   end\nend\n\nputs \"#{st} #{zip}:#{streets.map{|x| x.join(' ')}.join(',')}\/#{addrs.join(',')}\"\nEOF\n    ruby -e \"$PROG\" \n}\n\ntravel \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56b5afb4ed1f6d5fb0000991":[{"id":337538,"user_id":null,"body":"#!\/bin\/bash\nrevrot () {\n    # your code\n    while read -n $2 s;\n    do\n      if [ ${#s} -eq $2 ]; then\n        sum=0;\n        for c in `grep -o . <<< $s`;\n        do\n          sum=$((sum+c**3));\n        done\n        if [ $((sum%2)) -eq 0 ]; then\n          echo -n $s | rev;\n        else\n          echo -n ${s:1}${s:0:1};\n        fi\n      fi\n    done <<< \"$1\"\n}\nrevrot $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337539,"user_id":null,"body":"while read -n $2 s\ndo\n\tif [ ${#s} -eq $2 ]\n\tthen\n\t\tsum=$( bc <<< `echo $s | fold -w1 | paste -sd' ' | sed 's\/ \/^3+\/g'`^3 )\n\t\t(( sum & 1 )) && echo -n ${s:1}${s:0:1} || echo -n $s | rev\n\tfi\ndone <<< $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337540,"user_id":492,"body":"#!\/bin\/bash\nsum_dig_cube () {                                              \n  echo \"define sum_dig_cube(n) {\n    auto i, o, s\n    olds = scale; scale = 0\n    for (i = n; i > 0; i \/= 10) {\n        n = i % 10;\n        #s += n * n * n;\n        s += n;\n    }\n    return (s);\n}; sum_dig_cube($1)\" | bc \n}\nrevrot () {\n    str=$1; sz=$2; lg=${#str} \n    if [[ \"$sz\" -le \"0\" || \"$lg\" -eq \"0\" || \"$sz\" -gt \"$lg\" ]]; then\n        echo \"\"\n        exit 0\n    fi\n    for ((i=0;i<${#str};i+=$sz)); do\n        d=${str:i:$sz}\n        if [ ${#d} -eq $sz ]; then\n            c=$(sum_dig_cube $d)\n            c=$((c % 2))\n            if [ $c -eq 0 ]; then\n                r=$(echo $d | rev)\n            else\n                dd=$d$d\n                r=$(echo ${dd:1:$sz})\n            fi\n            res=\"${res}$r\"\n        fi\n    done\n    echo $res\n}\nrevrot $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337541,"user_id":null,"body":"#!\/bin\/bash\nrevrot () {\n    str=$1\n    sz=$2\n    \n    if [[ ${sz} -le 0 ]] || [[ ! ${str} =~ ^[0-9]+$ ]] || [[ ${sz} -gt ${#str} ]]; then\n      echo \"\"\n      exit 1\n    fi\n    \n    result=\"\"\n    nb_chunks=$(( ${#str} \/ ${sz} ))\n    \n    for i in $(seq 0 ${nb_chunks}); do\n      chunk=${str:$((i*sz)):${sz}}\n      \n      if [[ ${sz} -le ${#chunk} ]]; then\n        # ((a^3)+(b^3)+...)%2 = 0\n        if [[ $(echo ${chunk} | sed -e \"s\/\\(.\\)\/(\\1^3)+\/g;s\/+$\/)%2\/;s\/^\/(\/\" | bc) -eq 0 ]]; then\n          result+=$(echo ${chunk} | rev)\n        else\n          result+=$(echo \"${chunk:1}${chunk:0:1}\")\n        fi\n      fi\n    done\n    \n    echo ${result}\n}\nrevrot $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337542,"user_id":null,"body":"#!\/bin\/bash\nrevrot () {\n    str=$1\n    sz=$2\n    result=\"\"\n    \n    if [[ ${sz} -le 0 ]] || [[ ! ${str} =~ ^[0-9]+$ ]] || [[ ${sz} -gt ${#str} ]]; then\n      echo \"\"\n      exit 1\n    fi\n    \n    nb_chunks=$(( ${#str} \/ ${sz} ))\n    \n    for i in $(seq 0 ${nb_chunks}); do\n      chunk=${str:$((i*sz)):${sz}}\n      \n      if [[ ${sz} -gt ${#chunk} ]]; then\n        echo \"\"\n      else\n        if [[ $(echo ${chunk} | sed -e \"s\/\\(.\\)\/(\\1^3)+\/g;s\/+$\/)%2\/;s\/^\/(\/\" | bc) -eq 0 ]]; then\n          result+=$(echo ${chunk} | rev)\n        else\n          result+=$(echo \"${chunk:1}${chunk:0:1}\")\n        fi\n      fi\n    done\n    \n    echo ${result}\n}\nrevrot $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337543,"user_id":null,"body":"#!\/bin\/bash\n\nsumDigitsCubedOdd () {\n  s=$1\n  \n  result=0\n  for (( i=0; i < ${#s}; i++ )); do\n    digit=${s:i:1}\n    ((result += digit * digit * digit))\n  done\n  \n  echo $(( $result % 2 ))\n}\n\nrevrot () {\n  str=$1\n  sz=$2\n  \n  #echo str: $str, sz: $sz > \/dev\/stderr\n  \n  if [ $sz -eq 0 ] || [ ${#str} -eq 0 ]; then\n    echo\n    return\n  fi\n\n  result=\"\"\n  i=0\n  while true; do\n    chunk=${str:$i:$sz}\n    \n    if [ ${#chunk} -eq $sz ]; then\n      if [ $(sumDigitsCubedOdd $chunk) -eq 0 ]; then # even\n        chunk=$(echo $chunk | rev)\n      else # odd\n        chunk=${chunk:1}${chunk:0:1}\n      fi\n      result=$result$chunk\n    else\n      break\n    fi\n    \n    ((i += sz))\n  done\n  \n  echo $result\n}\n\nrevrot \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337544,"user_id":null,"body":"#!\/bin\/bash\n\nstr=$1\nsz=$2\n\ncubs () {\n  for b in $( seq 0 $(( $sz - 1 ))); do\n    elem=${chk:$b:1}\n    elem_cube=$(( $elem ** 3 ))\n    # echo elem_cube = [$b] $elem_cube\n    chk_cube=$(( $chk_cube + $elem_cube ))\n    # echo chk cube = $chk_cube\n  done\n\n  if [[ $(bc <<< $chk_cube%2 ) == 0 ]]; then\n    array+=$(rev <<< $chk)\n  else\n    array+=${chk:1:sz}${chk:0:1}\n  fi\n}\n\n\n\nchunks () {\n  for a in $( seq 1 $(( $(wc -L <<< $str) \/ $sz )) ); do\n    chk=${str:shift:sz}\n    shift=$(( $shift + $sz ))\n    array_chk+=($chk)\n    chk_cube=0\n    cubs\n  done\n  echo $array\n}\n\nrevrot () {\n  chunks\n}\n\nif [ $sz -le 0 ] || [ -z $str ]; then #\u0434\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 sz>lenght(str)\n  echo \"\"\nelse\n  revrot $1 $2\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337545,"user_id":null,"body":"#!\/bin\/bash\nstr=$1\nsz=$2\nchunks=$((${#str} \/$sz))\noutput=\"\"\n\nfor i in $(seq 0 $(($chunks-1)))\ndo \n  chunk=${str:$(($i*$sz)):$sz} # slice chunk\n  #echo $chunk\n\n  for i in $(seq 0 $(($sz-1)))\n    do sum=\"$(($sum+${chunk:$i:1}))\" # sum chunk\n  done\n\n  #echo \"sum of numbers is $sum\"\n\n  if [[ $(($sum%2))> 0 ]]\n  then\n    # rotate to one place left  \n    chunk=\"${chunk:1:$sz}${chunk:0:1}\"\n    output=${output}${chunk}\n    #echo $chunk\n  else \n    # reverse \n    for((i=$sz-1;i>=0;i--)); do rev=\"$rev${chunk:$i:1}\"; done\n    #echo \"rev is $rev\"\n    output=${output}${rev}\n    rev=\"\"\n  fi\n  sum=0 # \"empty\"\n  \ndone\n\necho $output\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337546,"user_id":null,"body":"#!\/bin\/bash\ncheck () {\n  num=$1\n  len=${#num}\n  declare -i sum=0\n  for i in $(eval echo {0..$len}); do\n    sum+=$((${num:$i:1}))\n  done\n  if [[ $((sum%2)) -eq 0 ]] ; then\n    echo \"1\"\n      else\n    echo \"0\"\n  fi\n\n}\nrevrot () {\n    pos=$2\n    str=$1\n    n=${#str}\n    #echo $str\n    if [[ $pos -le 0 || $pos -gt ${#str}  ]]\n    then\n      echo \"\"\n    else\n        \n        chunk=$((n%pos?n\/pos+1:n\/pos))\n        #echo $chunk\n        declare -i i=1\n        declare -i start=0\n        while [[ $chunk -ge $i ]] ;do\n          ### sum digits of chunk divisle 2\n          num=${str:$start:$pos}\n          sum=$(check $num)\n          #if [[ ! $((pos%2)) -eq 0 ]]; then\n          \n          if [[ $sum -eq 0 && ${#num} -ge $pos ]]; then\n            head=${str:$((start+1)):$((pos-1))}\n            tail1=${str:start:1}\n            rs+=$head$tail1            \n                       \n            start=$((pos+start))            \n            elif  [[ $sum -eq 1 && ${#num} -ge $pos ]]; then\n            # len =  chang thi rotate from (start + pos)\n              # get substring from start -> start + pos \n              # reverse\n              #echo $start\n              sub=${str:$start:$((pos))}\n              #echo $sub | rev\n              rev=$(echo $sub | rev)\n              rs+=$rev\n              start=$((start+pos))\n              \n          fi\n          i+=1 \n        done\n      echo  $rs\n    fi\n}\nrevrot $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337547,"user_id":null,"body":"#! \/bin\/bash\n\nrev()\n{\n    # Reverse order of characters in a string.\n\n    str=$1\n\n    out=\n    i=-1\n    while [ $i -ge -${#str} ]; do out+=${str: $i:1}; i=$(($i - 1)); done\n    echo $out\n}\n\nrot()\n{\n    # Rotate a string left by one character.\n\n    str=$1\n\n    echo ${str:1}${str:0:1}\n}\n\nparity()\n{\n    # Return 0 if the sum of cubes of digits in a string is even, else 1.\n\n    str=$1\n\n    sum=0\n    i=0\n    while [ $i -lt ${#str} ]; do\n        sum=$(($sum + (${str:$i:1} ** 3)))\n        i=$(($i + 1))\n    done\n    echo $(($sum % 2))\n}\n\nrevrot()\n{\n    # Reverse or rotate chunks of a string depending on the parity.\n\n    str=$1\n    size=$2\n\n    [ -z \"$str\" -o $size -eq 0 ] && echo \"\" && return\n    div=$((${#str} \/ $size))\n\n    out=\n    i=0\n    while [ $i -lt $div ]; do\n        chunk=${str:$(($i * $size)):$size}\n        [ $(parity $chunk) -eq 0 ] && out+=$(rev $chunk) || out+=$(rot $chunk)\n        i=$(($i + 1))\n    done\n    echo $out\n}\n\nrevrot \"$1\" $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56bc28ad5bdaeb48760009b0":[{"id":337548,"user_id":null,"body":"arg=$1\necho \"${arg:1:-1}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337549,"user_id":null,"body":"function remove_char() {\n  str=$1\n  echo ${str:1:-1}\n}\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337550,"user_id":null,"body":"function remove_char() {\n    echo ${1:1:-1}\n}\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337551,"user_id":null,"body":"function remove_char() {\n echo $1 | sed \"s;^.;; ; s;.$;;\"\n}\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337552,"user_id":152,"body":"remove_char()\n{\n  echo $1 | sed -E 's\/^.(.*).$\/\\1\/'\n}\n\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337553,"user_id":null,"body":"function remove_char() {\n  echo $1 | awk -F '' '{for (i = 2; i < NF; i++) printf $i;}'\n}\n\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337554,"user_id":564,"body":"function remove_char() {\n  str=$1\n  len=$(expr $(expr length $str) - 2)\n  echo ${str:1:len}\n}\nremove_char $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337555,"user_id":null,"body":"function remove_char() {\n  s=$1\n  echo \"${s:1:-1}\"\n}\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337556,"user_id":null,"body":"function remove_char() {\n  echo ${1:1:$((${#1}-2))}\n}\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337557,"user_id":666,"body":"remove_char() (\n  stg=\"${1}\"\n  printf '%s' \"${stg:1:-1}\"\n)\n\nremove_char $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56bdd0aec5dc03d7780010a5":[{"id":337558,"user_id":645,"body":"o=$(($1 & -$1))\necho $(($1 + $o | (($1 ^ $1 + $o) \/ $o >> 2)))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337559,"user_id":null,"body":"n=$1\n\nnb_of_ones(){\necho \"obase=2;$1\" | bc | sed -e 's\/\\(.\\)\/\\1\n\/g' | grep '1' | wc -l\n}\n\nnoo=$(nb_of_ones $n)\nnxt=$(echo 1 + $n | bc)\n\nwhile (($(nb_of_ones $nxt)!=noo))\ndo\n  nxt=$(echo 1 + $nxt | bc)\ndone\n\necho $nxt # NB: inefficient for huge numbers should use a string based method instead ...\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337560,"user_id":53,"body":"#!\/bin\/bash\nn=$1\nr=$(( n & (-n) ))\np=$(( n + r ))\nq=$(( (n ^ p) \/ (4 * r) ))\nm=$(( p | q ))\necho $m","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337561,"user_id":null,"body":"next_highest_int() {\n  bin1=\"$(echo \"obase=2; $1\" | bc)\"\n  bin1=\"$(echo $bin1 | tr -d 0 | wc -m)\"\n  num1=\"$1\"\n  declare -i bin2=0\n  while [[ \"$bin1\" != \"$bin2\" ]]; do\n    ((num1++))\n    tmp=\"$(echo \"obase=2; $num1\" | bc)\"\n    bin2=\"$(echo $tmp | tr -d 0 | wc -m)\"\n  done\n  echo \"$num1\"\n}\n\nnext_highest_int \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337562,"user_id":null,"body":"bin=\"0$(echo \"obase=2 ; $1\" | bc)\"\nregex='(.*)01(1+)(0+)$'\n\nif [[ $bin =~ $regex ]]\nthen\n  res=\"${BASH_REMATCH[1]}10${BASH_REMATCH[3]}${BASH_REMATCH[2]}\"\nelse\n  res=`echo $bin | sed 's\/01\\(1*0*$\\)\/10\\1\/'`\nfi\necho \"obase=10 ; ibase=2 ; $res\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337563,"user_id":null,"body":"#!\/usr\/bin\/env bash\nfunction sameBits() {\n    until [ \"$input_bit_stripped\" -eq \\\n            \"$(echo \"$next_bit\" | tr -d '0\n' | wc -m)\" ]\n    do\n        next_bit=$(echo \"ibase=2;obase=2;$next_bit+1\" | bc -l)\n    done\n    echo \"ibase=2; $next_bit\" | bc\n}\ninput_bit=$(echo \"obase=2;$1\" | bc)\ninput_bit_stripped=$(echo \"$input_bit\" | tr -d '0\n' | wc -m)\nnext_bit=$(echo \"ibase=2;obase=2;$input_bit+1\" | bc -l)\n\nsameBits\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337564,"user_id":null,"body":"NextInt()\n{\n    # your code here\n    n=$1\n    binary=$(echo \"ibase=10; obase=2; $n\" | bc)\n    char='1'\n    ones=$(awk -F\"${char}\" '{print NF-1}' <<< \"${binary}\")\n    nOnes=0\n    while [ $nOnes -ne $ones ]; do\n        n=$(($n + 1))\n        binary=$(echo \"ibase=10; obase=2; $n\" | bc)\n        nOnes=$(awk -F\"${char}\" '{print NF-1}' <<< \"${binary}\")\n    done\n    echo $n\n}\nNextInt $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337565,"user_id":null,"body":"n=$1\n# echo 1 # your code here\n# obase means convert output base (default=10)\nbit=`echo \"obase=2; $n\" | bc`\nnbit=`echo $bit | grep -o 1 | wc -l`\n\nnext=$n\nnextobit=0\nwhile [ $nbit -ne $nextobit ]\ndo \nnext=$((next+1))\nnextbit=`echo \"obase=2; $next\" | bc`\nnextobit=`echo $nextbit | grep -o 1 | wc -l`\ndone\n\necho $next","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337566,"user_id":null,"body":"#!\/bin\/bash\n\nfunction compute_1 {\n    local -i sum=0 n=$1\n    local bits\n\n    bits=$(echo \"obase=2; $n\" | bc )\n    bits=${bits\/\/0\/}\n    sum=${#bits}\n    # printf \"$n $bits $sum\n\" \"%d %s %d\"\n    return $sum\n}\n\nfunction next_higher_number {\n    local -i n_bits=0 n=$1\n    local bits\n\n    compute_1 $n\n    n_bits=$?\n    while :\n    do\n        let \"n += 1\"\n        compute_1 $n $n_bits\n        bits=$?\n        if [[ $bits -eq $n_bits ]]\n        then\n            break\n        fi\n\n    done\n    echo $n\n\n}\n\nnext_higher_number $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337567,"user_id":null,"body":"n=$1\nrightOne=$((n & -n))\nnextHigherOneBit=$((n + rightOne))\nrightOnesPattern=$((n ^ nextHigherOneBit))\nrightOnesPattern=$((rightOnesPattern \/ rightOne))\nrightOnesPattern=$((rightOnesPattern >>= 2))\nnext=$((nextHigherOneBit | rightOnesPattern))\necho $next","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56c04261c3fcf33f2d000534":[{"id":337568,"user_id":null,"body":"#!\/bin\/bash\naus=0\nfor k in $(seq $1) ; do\n    for n in $(seq $2); do\n        aus=`echo \"scale=16; $aus + ( 1 \/ ( $k * ($n + 1) ^ ($k * 2)) )\" | bc`\n    done\ndone\necho $aus","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337569,"user_id":53,"body":"#!\/bin\/bash\n...........\n\necho $1 $2 | awk '\n{ \n  sum = 0;\n  for (k=1; k<=$1; k++) {\n    for (n=1; n<=$2; n++) {\n      sum = sum + (1 \/ (k * ((n + 1) ^ (2 * k))));\n    }\n  }\n  printf(\"%.12f\", sum);\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337570,"user_id":492,"body":"#!\/bin\/bash\ndoubles() {\n    maxk=$1; maxn=$2;sum=0.0\n    for (( k=1; k<=maxk; k++ )); do\n        for (( n=1; n<=maxn; n++ )); do\n            c=$(bc <<< \"scale=16; ($n+1) ^ (2*$k)\")\n            cc=$(bc <<<\"scale=16;1.0 \/ ($k * $c)\")\n            sum=$(bc <<<\"scale=16;$sum + $cc\")\n        done\n    done\n    echo $sum\n}\ndoubles $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337571,"user_id":53,"body":"bc << EOF\nscale = 12;\nans = 0;\nfor (k=1; k<=$1; k++) {\n  for (n=1; n<=$2; n++) {\n    ans = ans + 1 \/ (k * (n+1) ^ (2*k));\n  }\n}\nprint \"0\", ans;\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337572,"user_id":null,"body":"#!\/bin\/bash\n...........\n\nmk=$1\nmn=$2\nt=0\nfor ((i=1; i<=$mk; i++));do\n  for ((j=1; j<=$mn; j++));do\n    x=`echo \"scale=16; 1\/($i*($j+1)^($i*2))\" | bc`\n    t=`echo \"scale=16; $t+$x\" | bc`\n    if [ $j -gt 10000]; then break\n    fi\n  done\ndone\necho $t","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337573,"user_id":null,"body":"#!\/bin\/bash\n\nS(){\n    k=$1\n    n=$2\n    bc <<< \"scale=12; k_max=$k; n_max= $n; res = 0.0; n2k = 1.0; \n    for (n=1; n <= n_max; n++) { \n        n2k = 1.0; \n        for (k=1; k <= k_max; k++) { \n            n2k *= (n+1) * (n+1); \n            res += ( 1.0 \/ (k * n2k) ) \n        } \n    }\n    res;\"\n}\n\nS $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337574,"user_id":null,"body":"bc <<< \"scale=12; for (k=1; k<=$1; k++) for (n=1; n<=$2; n++) s+= 1\/(k*(n+1)^(2*k)); s\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337575,"user_id":null,"body":"#!\/bin\/bash\n...........\n\nbc << EOF\nscale=20;\nres=0;\nfor(k=1;k<=$1;k++) {\n  for(n=1;n<=$2;n++) {\n    res=res+1\/(k*(n+1)^(2*k));\n  }\n}\nprint \"0\",res;\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337576,"user_id":null,"body":"#!\/bin\/bash\nsum=0\nfor k in `seq 1 $1`; do\n  for n in `seq 1 $2`; do\n    sum=$(echo \"$sum + (1\/($k*($n+1)^(2*$k)))\" | bc -l)   \n  done\ndone   \necho $sum","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337577,"user_id":null,"body":"#!\/bin\/bash\nsum=0\n\nfor (( i=1; i<$(($1+1)); i++)); do\n  for (( j=1; j<$(($2+1)); j++)); do\n    sum=\"$(bc <<< \"scale=10; $sum+(1\/($i*($j + 1)^(2*$i)))\")\"\n  done\ndone\n\necho $sum","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56c5847f27be2c3db20009c3":[{"id":337578,"user_id":645,"body":"echo apple","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337579,"user_id":null,"body":"n=$1\necho \"apple\" # fruit name like \"apple\"\n# after subtracting the sum all numbers <= 100 map to an apple\n# all other possible input numbers are after some iterations mapped to 99 which is apple","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337580,"user_id":null,"body":"# Challenge #27\n# https:\/\/www.codewars.com\/kata\/56c5847f27be2c3db20009c3\n\nfruits=(kiwi pear kiwi banana melon banana melon pineapple apple pineapple \\\ncucumber pineapple cucumber orange grape orange grape apple grape cherry pear \\\ncherry pear kiwi banana kiwi apple melon banana melon pineapple melon \\\npineapple cucumber orange apple orange grape orange grape cherry pear cherry \\\npear apple pear kiwi banana kiwi banana melon pineapple melon apple cucumber \\\npineapple cucumber orange cucumber orange grape cherry apple cherry pear \\\ncherry pear kiwi pear kiwi banana apple banana melon pineapple melon pineapple \\\ncucumber pineapple cucumber apple grape orange grape cherry grape cherry pear \\\ncherry apple kiwi banana kiwi banana melon banana melon pineapple apple \\\npineapple)\n\n# If we take any natural number greater than or equal to 10, and subtract from\n# it the sum of its digits, the results will always divisible by 9. Here is\n# a proof:\n#\n# Let's assume ab a two-digit natural number. The value of it will be 10a + b.\n# Now, let's subtract the sum of the number's digits (a + b):\n#\n# 10a + b - (a + b) = 10a + b - a - b = 10a - a + b - b = 9a\n# We see that 9a is divisible by 9.\n#\n# For a three-digit number abc, that would be: 100a + 10b + c - (a + b + c) =\n# 100a - a + 10b - b + c - c = 99a + 9b = 9 * (11a + b) which is also divisible\n# by 9.\n\n# In our challenge we repeat the above operation until the result will belong to\n# a closed interval [1, 100]. Therefore for any number given in the input, we\n# need to find the closest integer for the aforementioned interval that is also\n# divisible by 9. In other words, we need to find an integer that belongs to\n# the following collection: {9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99}.\n\n# If we take a look into the array, we'll see, that the elements corresponding\n# to the numbers from the above collection are always 'apple'. Having said that,\n# the simplest solution would be:\n#\n# printf apple\n\n# If we wanted to write a script, that would be correct for any array equal in\n# in size to the one above, the implementation would be as follows:\n\nn=$1\n\nwhile ((n % 9)); do let \"n--\"; done;\n\n# the array is indexed from 0 to 99, so we need to subract 1 to get the correct\n# element.\n(($n <= 99)) && printf ${fruits[$n-1]} || printf ${fruits[98]}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337581,"user_id":713,"body":"n=$1\necho \"apple\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337582,"user_id":null,"body":"fruit=\"1-kiwi\n2-pear\n3-kiwi\n4-banana\n5-melon\n6-banana\n7-melon\n8-pineapple\n9-apple\n10-pineapple\n11-cucumber\n12-pineapple\n13-cucumber\n14-orange\n15-grape\n16-orange\n17-grape\n18-apple\n19-grape\n20-cherry\n21-pear\n22-cherry\n23-pear\n24-kiwi\n25-banana\n26-kiwi\n27-apple\n28-melon\n29-banana\n30-melon\n31-pineapple\n32-melon\n33-pineapple\n34-cucumber\n35-orange\n36-apple\n37-orange\n38-grape\n39-orange\n40-grape\n41-cherry\n42-pear\n43-cherry\n44-pear\n45-apple\n46-pear\n47-kiwi\n48-banana\n49-kiwi\n50-banana\n51-melon\n52-pineapple\n53-melon\n54-apple\n55-cucumber\n56-pineapple\n57-cucumber\n58-orange\n59-cucumber\n60-orange\n61-grape\n62-cherry\n63-apple\n64-cherry\n65-pear\n66-cherry\n67-pear\n68-kiwi\n69-pear\n70-kiwi\n71-banana\n72-apple\n73-banana\n74-melon\n75-pineapple\n76-melon\n77-pineapple\n78-cucumber\n79-pineapple\n80-cucumber\n81-apple\n82-grape\n83-orange\n84-grape\n85-cherry\n86-grape\n87-cherry\n88-pear\n89-cherry\n90-apple\n91-kiwi\n92-banana\n93-kiwi\n94-banana\n95-melon\n96-banana\n97-melon\n98-pineapple\n99-apple\n100-pineapple\"\nfruit_array=($(sed 's\/[0-9]*-\/\/g' <(echo $fruit)))\nsum=$1\nfunction get_sum () {\ncounter=0\nfor (( i =0; i< ${#sum}; i++ ))\ndo \n  curr=${sum:$i:1}\n  [ ! -z curr ] && (( counter += curr)) \ndone\n((counter =  sum - counter))\nsum=$counter\n}\n\nget_sum\nif (( $sum > 0 )) && (( $sum < 101 ))\nthen\n  echo \"apple\"\nelse\n  get_sum\n  echo \"apple\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337583,"user_id":null,"body":"#!\/bin\/bash\nn=$1\nfruit=( kiwi pear kiwi banana melon banana melon pineapple apple pineapple cucumber pineapple cucumber orange grape orange grape apple grape cherry pear cherry pear kiwi banana kiwi apple melon banana melon pineapple melon pineapple cucumber orange apple orange grape orange grape cherry pear cherry pear apple pear kiwi banana kiwi banana melon pineapple melon apple cucumber pineapple cucumber orange cucumber orange grape cherry apple cherry pear cherry pear kiwi pear kiwi banana apple banana melon pineapple melon pineapple cucumber pineapple cucumber apple grape orange grape cherry grape cherry pear cherry apple kiwi banana kiwi banana melon banana melon pineapple apple pineapple )\nwhile :\ndo\n\tcount=0\n\tsum=0\n\tlen=${#n}\n\tuntil [ $count -eq $len ]\n\tdo\n\t\tsum=$(( $sum + ${n:$count:1} ))\n\t\tcount=$(( $count + 1 ))\n\tdone\n\tn=$(( $n - $sum ))\n\tif [ $n -lt 100 ]; then\n\t\tbreak\n\tfi\ndone\necho ${fruit[$n - 1]}\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337584,"user_id":null,"body":"#!\/bin\/bash\nmy_var=$1\nmain() {\n  local n=$1\n  while [[ $n -gt 0 ]]; do\n    ((temp=n%10))\n    ((sum+=temp))\n    ((n\/=10))\n  done\n  ((end=my_var-sum))\n}\nmain $1\n\nwhile [[ $end -gt 100 ]]; do \n    main $end; \ndone\n############### result ###############\n[[ $end -le 100 ]] && echo \"apple\" || echo \"Chuck Norris was here\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337585,"user_id":null,"body":"n=$1\n# echo $1\nwhile [ $n -gt 100 ]\ndo\n  sum=0\n  old=$n\n  \n  while [ $n -gt 0 ]\n  do\n    sum=$(( $sum + $(( $n % 10 )) ))\n    n=$(( $n \/ 10 ))\n    \n  done\n  n=$(( $old - $sum ))\ndone\nkiwi=( 1 3 24 26 47 49 68 70 91 93 )\npear=( 2 21 23 42 44 65 67 88 )\nbanana=( 4 6 25 29 48 50 71 73 92 94 )\nmelon=( 5 7 28 30 32 51 53 74 76 95 97 )\npinapple=( 8 12 31 33 52 56 75 77 79 98 100 )\napple=( 10 9 18 27 36 45 54 63 72 81 99 )\ncucumber=( 11 13 34 55 57 59 78 80 )\norange=( 14 16 35 37 39 58 60 83 )\ngrape=( 15 17 19 38 40 61 82 84 86 )\ncherry=( 20 22 41 43 62 64 66 85 87 89 )\n\n# echo $n\nif [[ \" ${kiwi[*]} \" == *\" $n \"* ]]; then\n    ret=\"kiwi\"\nelif [[ \" ${pear[*]} \" == *\" $n \"* ]]; then\n    ret=\"pear\"\nelif [[ \" ${banana[*]} \" == *\" $n \"* ]]; then\n    ret=\"banana\"\nelif [[ \" ${melon[*]} \" == *\" $n \"* ]]; then\n    ret=\"melon\"\nelif [[ \" ${pinapple[*]} \" == *\" $n \"* ]]; then\n    ret=\"pinapple\"\nelif [[ \" ${apple[*]} \" == *\" $n \"* ]]; then\n    ret=\"apple\"\nelif [[ \" ${cucumber[*]} \" == *\" $n \"* ]]; then\n    ret=\"cucumber\"\nelif [[ \" ${orange[*]} \" == *\" $n \"* ]]; then\n    ret=\"orange\"\nelif [[ \" ${grape[*]} \" == *\" $n \"* ]]; then\n    ret=\"grape\"\nelif [[ \" ${cherry[*]} \" == *\" $n \"* ]]; then\n    ret=\"cherry\"\nfi\n\necho $ret","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337586,"user_id":null,"body":"declare -a FRUITS=(kiwi pear kiwi banana melon banana melon pineapple apple pineapple cucumber pineapple cucumber orange grape orange grape apple grape cherry pear cherry pear kiwi banana kiwi apple melon banana melon pineapple melon pineapple cucumber orange apple orange grape orange grape cherry pear cherry pear apple pear kiwi banana kiwi banana melon pineapple melon apple cucumber pineapple cucumber orange cucumber orange grape cherry apple cherry pear cherry pear kiwi pear kiwi banana apple banana melon pineapple melon pineapple cucumber pineapple cucumber apple grape orange grape cherry grape cherry pear cherry apple kiwi banana kiwi banana melon banana melon pineapple apple pineapple)\n\nN=$1\nwhile :\ndo\n\tSUM=0;\n\tfor (( i=0; i<${#N}; i++ ));\n\tdo\n\t\tVALUE=${N:i:1}\n\t\tlet SUM+=$VALUE\n\tdone\n\n\tlet N=$(( N - SUM ));\n\n\tif [ $N -le ${#FRUITS[@]} ]\n\tthen\n\t\tFRUIT=${FRUITS[$(($N-1))]};\n\tfi\n\n\tif [ \"$FRUIT\" != '' ]\n\tthen\n\t\techo $FRUIT;\n\t\texit;\n\tfi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337587,"user_id":null,"body":"# !\/bin\/bash \necho \"apple\"\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56cac350145912e68b0006f0":[{"id":337588,"user_id":null,"body":"#!\/bin\/bash\narrange() {\n  IFS=' ' read -ra words <<< \"$1\"\n  even_idx=1\n  for ((i=0; i<${#words[@]}-1; i+=1)); do\n    left=${words[$i]}\n    right=${words[$i+1]}\n    if ( ((! even_idx)) && ((${#left} < ${#right})) ) || \n      ( ((even_idx)) && ((${#left} > ${#right})) ); then\n      words[$i]=${right}\n      words[$i+1]=${left}\n    fi\n    even_idx=$((! even_idx))\n  done\n  for ((i=0; i<${#words[@]}; i+=1)); do\n    words[$i]=$( ((i%2)) && echo ${words[$i]^^} || echo ${words[$i],,} )\n  done\n  echo \"${words[@]}\"\n}\narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337589,"user_id":492,"body":"#!\/bin\/bash\narrange() {\n    a1=$1\n    IFS=' ' read -ra NAMES <<< \"$a1\"\n    lg=${#NAMES[@]}\n    for((i=0;i < lg - 1;i+=1)) do\n        a=\"${NAMES[i]}\"\n        b=\"${NAMES[i+1]}\"\n        if [ $((i%2)) -ne 0 ]; then\n            if [ ${#a} -lt ${#b} ]; then\n                tmp=$a\n                NAMES[i]=$b\n                NAMES[i+1]=$a\n            fi\n        else\n            if [ ${#a} -gt ${#b} ]; then\n                tmp=$a\n                NAMES[i]=$b\n                NAMES[i+1]=$a\n            fi\n        fi\n    done\n    for((i=0;i < lg;i+=1)) do\n        a=\"${NAMES[i]}\"\n        if [ $((i%2)) -ne 0 ]; then\n            NAMES[i]=$(echo \"$a\" | tr '[:lower:]' '[:upper:]')\n        else\n            NAMES[i]=$(echo \"$a\" | tr '[:upper:]' '[:lower:]')\n        fi\n    done\n    res=$(printf \" %s\" \"${NAMES[@]}\")\n    echo ${res:1}\n}\narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337590,"user_id":null,"body":"#!\/bin\/bash\nin_place() { \n\tki=$1\n  this=${#arr[ki]} \n\t(( ki == 0 )) && left=$this || left=${#arr[ki-1]} \n\t(( ki+1 == ${#arr[@]} )) && right=$this || right=${#arr[ki+1]} \n\t(( ki%2 == 0 && $this <= ${left} && $this <= ${right}  )) || (( ki%2 != 0 && $this >= ${left} && $this >= ${right}  )) && return 0\n\treturn 1\n}\n\nswitch() {\n\tki=$1\n\ttmp=${arr[ki]}\n\tarr[ki]=${arr[ki+1]}\n\tarr[ki+1]=${tmp}\n}\n\narrange() {\n  arr=($1)\n\tfor n in ${!arr[@]}\n\tdo\n\t\t((k=n))\n\t\tuntil in_place $k \n\t\tdo\n\t\t\tswitch  $k\n\t\t\t((k++))\n\t\tdone\n    (( n % 2 == 0 )) && arr[n]=${arr[n],,} || arr[n]=${arr[n]^^} \n\tdone\n\techo ${arr[@]}\n}\n\narrange \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337591,"user_id":null,"body":"#!\/bin\/bash\n\narrange() {\n    # your code\n    #echo $1\n    str=($1)\n    if [[ ${#str} -eq 0 ]] ; then      \n      echo \n      exit 0\n    fi  \n    if [[ ${#str[1]} -lt  ${#str[0]} ]] ;then\n        tmp=${str[0]}\n        str[0]=${str[1],,}\n        str[1]=${tmp}        \n    fi\n    declare -i i=2\n    while (( i< ${#str[@]} && ${#str[@]} > 2 )) ; do           \n      if [[ ${#str[$i]} -gt  ${#str[$((i-1))]} && ${#str[$i]} -gt  ${#str[$((i-2))]} && $((i%2)) -eq 0  ]]; then          \n            tmp=${str[$((i-1))]}\n            str[$((i-1))]=${str[$i]}\n            str[$i]=$tmp            \n         elif    [[ ${#str[$i]} -lt  ${#str[$((i-1))]} && ${#str[$i]} -lt  ${#str[$((i-2))]}  && $((i%2)) -eq 1  ]]; then\n      \n             tmp=${str[$((i-1))]}\n            str[$((i-1))]=${str[$i]}\n            str[$i]=${tmp}        \n      fi\n      ((i=i+1))\n      #echo $rs\n    done\n\n    for ((i=0; i<${#str[@]}; i++)); do\n     if ((i%2==0)); then printf \"%s \" ${str[$i],,};\n      else printf \"%s \" ${str[$i]^^}; fi\n    done\n}\narrange \"$1\"\n#testing(\"on I came up were so grandmothers\", \"i CAME on WERE up GRANDMOTHERS so\") # 4\n    ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337592,"user_id":null,"body":"#!\/bin\/bash\narrange() {\n\tlocal item n\n\titem=($1)\n\tfor ((i = 0; i < ${#item[@]}; i++)); do\n\t\tif ((${n:=0} % 2)); then\n\t\t\tif ((${#item[i]} < ${#item[i + 1]} && i + 1 < ${#item[@]})); then\n\t\t\t\tlocal tmp\n\t\t\t\ttmp=${item[i]}\n\t\t\t\titem[i]=${item[i + 1]}\n\t\t\t\titem[i + 1]=${tmp}\n\t\t\tfi\n\t\t\titem[i]=${item[i]^^}\n\t\telse\n\t\t\tif ((${#item[i]} > ${#item[i + 1]} && i + 1 < ${#item[@]})); then\n\t\t\t\tlocal tmp\n\t\t\t\ttmp=${item[i]}\n\t\t\t\titem[i]=${item[i + 1]}\n\t\t\t\titem[i + 1]=${tmp}\n\t\t\tfi\n\t\t\titem[i]=${item[i],,}\n\t\tfi\n\t\tn=$((n + 1))\n\tdone\n\techo ${item[@]}\n}\narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337593,"user_id":null,"body":"#!\/bin\/bash\nfunction join { local IFS=\"$1\"; shift; echo \"$*\"; }\narrange() {\n    # your code\n    words=($1)\n    arraylength=${#words[@]} # number of words\n    declare -i p; p=0 # integer pointer\n    for (( i=1; i<${arraylength}; i++ )); do\n        if [[ $(( $i % 2 )) -eq 1 && ${#words[p]} -gt ${#words[i]} || $(( $i % 2 )) -eq 0 && ${#words[p]} -lt ${#words[i]} ]]; then\n            tmp=${words[i]}\n            words[i]=${words[p]}\n            words[p]=$tmp\n        fi\n        p=$((p + 1))\n    done\n    for (( i=0; i<${arraylength}; i++ )); do\n        if (( $i % 2 )); then\n            words[i]=\"${words[$i]^^}\"\n        else\n            words[i]=\"${words[$i],,}\"\n        fi\n    done\n    result=$(join ' ' ${words[@]})\n    echo \"$result\"\n}\narrange \"$1\"  ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337594,"user_id":null,"body":"#!\/bin\/bash\narrange(){\nread -a array <<< $1\nfor (( i = 0; i < ${#array[@]} - 1; i++ ))\ndo\n    if (( i % 2 && ${#array[i]} < ${#array[i+1]} )) || (( (i + 1) % 2 && ${#array[i]} > ${#array[i+1]} ))\n    then\n        temp=${array[i]}\n        array[i]=${array[i+1]}\n        array[i+1]=$temp\n    fi\n    (( i % 2 )) && array[i]=${array[i]^^} || array[i]=${array[i],,}\ndone\n(( l=${#array[@]}, l % 2 )) && array[l-1]=${array[l-1],,} || array[l-1]=${array[l-1]^^}\necho ${array[@]}\n}\n    \narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337595,"user_id":null,"body":"#!\/bin\/bash\narrange() {\n    # your code\n    if [ -z \"$@\" ];\n    then\n      echo \"\";\n      exit 0;\n    fi\n    arr=();\n    i=0;\n    for word in $@;\n    do\n        arr[$i]=$word;\n        let i++;\n    done\n    \n    # \u6362\u4f4d\n    i=1;\n    while [ $i -lt ${#arr[@]} ]\n    do\n      let curr=i;\n      let pre=curr-1;\n      while true\n      do\n        if [ $curr -eq 0 ];\n        then\n          break;\n        fi\n        pre_len=${#arr[$pre]};\n        curr_len=${#arr[$curr]};\n        let mod2=pre%2;\n        # \u524d\u4e00\u4e2a\u662f\u5076\u6570\uff0c\u5c0f\u4e8e\u7b49\u4e8e\n        if [ $mod2 -eq 0 -a $pre_len -gt $curr_len ];\n        then\n          # \u4ea4\u6362\u4f4d\u7f6e\n          temp=${arr[$pre]};\n          arr[$pre]=${arr[$curr]};\n          arr[$curr]=$temp;\n        elif [ $mod2 -eq 1 -a $pre_len -lt $curr_len ];\n        then\n          # \u4ea4\u6362\u4f4d\u7f6e\n          temp=${arr[$pre]};\n          arr[$pre]=${arr[$curr]};\n          arr[$curr]=$temp;\n        else\n          break;\n        fi\n        let curr-=1\n        let pre-=1;\n      done  \n      let i+=1;\n    done\n    \n    # \u8f6c\u6362\u5927\u5c0f\u5199\n    i=0;\n    while [ $i -lt ${#arr[@]} ];\n    do\n      let mod2=i%2;\n      if [ $mod2 -eq 1 ];\n      then\n        arr[$i]=`echo ${arr[$i]} | tr 'a-z' 'A-Z'`\n#       elif [[ ${arr[$i]}  == `echo ${arr[$i]} | tr 'a-z' 'A-Z'` ]];\n      else\n#       then\n        arr[$i]=`echo ${arr[$i]} | tr 'A-Z' 'a-z'`;\n      fi\n      let i++;\n    done\n    \n    echo \"${arr[@]}\"\n}\narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337596,"user_id":null,"body":"#!\/bin\/bash\narrange() {\nstr=($(echo \"$1\" | tr -s  \" \"))\n\n for (( i=0;i<${#str[@]}-1;i++ ))\n do\n  if [ $((i%2)) -eq 0 ] && [ \"${#str[$i]}\" -gt \"${#str[$(($i+1))]}\" ]\n  then\n   temp=${str[$i]}\n   temp2=${str[$((i+1))]}\n   str[i]=${temp2^^}\n   str[$((i+1))]=${temp,,}\n  elif [ $((i%2)) -ne 0 ] && [ \"${#str[$i]}\" -lt \"${#str[$(($i+1))]}\" ] \n  then\n   temp=${str[$i]}\n   temp2=${str[$((i+1))]}\n   str[i]=${temp2,,}\n   str[$((i+1))]=${temp^^}\n  fi\ndone\n\nfor(( i=0;i<${#str[@]};i++))\ndo\nif [ $((i%2)) -ne 0 ]\n     then \n     temp=${str[$i]}\n     str[$i]=${temp^^}\n    else\n      temp=${str[$i]}\n      str[$i]=${temp,,}\n    fi\ndone\n \n  \n\n echo \"${str[@]}\"\n}\narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337597,"user_id":null,"body":"#!\/bin\/bash\n\narrange() {\n    read -a words <<< \"$1\"\n\n    for (( i=0; i<${#words[@]}; i++ )); do\n        [[ -z $prev ]] && curr=${words[$i]} || curr=$prev\n\n        next=${words[$i+1]}\n        if [[ $i%2 -eq 0 ]]; then\n            if [[ -z $next || ${#curr} -le ${#next} ]]; then\n                echo ${curr,,}\n                prev=\"\"\n            else\n                echo ${next,,}\n                prev=$curr\n            fi\n        else\n            if [[ -z $next || ${#curr} -ge ${#next} ]]; then\n                echo ${curr^^}\n                prev=\"\"\n            else\n                echo ${next^^}\n                prev=$curr\n            fi\n        fi\n    done | paste -sd ' '\n}\n\narrange \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56dbe0e313c2f63be4000b25":[{"id":337598,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() {\n    echo $1 | sed s\/','\/'\n'\/g | rev | tr '\n' '\\r'\n}\nhorMirror() {\n    echo $1 | rev | sed s\/','\/'\n'\/g | rev | tr '\n' '\\r'\n}\noper() {\n    $1 $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337599,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() {\n  echo \"$1\" | tr ',' '\n' | rev | tr '\n' '\\r'\n}\nhorMirror() {\n  echo \"$1\" | tr ',' '\n' | tac | tr '\n' '\\r'\n}\noper() {\n  $1 \"$2\"\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337600,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() \n{\n  out=\"\"\n  for a in $(echo $1 | tr ',' ' '); do\n    out=$out'\\r'$(echo $a | rev)\n  done\n  echo -e $out\n}\nhorMirror(){ vertMirror $1 $2 | rev; }\noper(){ eval $1 $2; }\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337601,"user_id":492,"body":"#!\/bin\/bash\nvertMirror() {\n    s=$1\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        r=$(echo $i | rev)\n        res=$(printf \"${res}$r\\\\r\")\n    done\n    echo \"${res::-1}\"\n}\nhorMirror() {\n    s=$1\n    arrIN=(${s\/\/,\/ })\n    indices=( ${!arrIN[@]} )\n    for ((i=${#indices[@]} - 1; i >= 0; i--)) ; do\n        r=\"${arrIN[indices[i]]}\"\n        res=$(printf \"${res}$r\\\\r\")\n    done\n    echo \"${res::-1}\"\n}\noper() {\n    fct=$1; s=$2\n    r=$(echo $($fct $s))\n    echo $r\n}\noper $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337602,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() {\n    echo \"$1\" | sed 's\/,\/\n\/g' | rev | tr '\n' '\\r'\n}\nhorMirror() {\n    echo \"$1\" | sed 's\/,\/\n\/g' | tac | tr '\n' '\\r'\n}\noper() {\n    \"$1\" \"$2\"\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337603,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() {\n  readarray -t -d, arr <<< \"$1\"\n  for x in \"${arr[@]}\"; do\n    str=${str}$(echo \"$x\" | rev)$'\\r'\n  done\n  echo \"$str\"\n}\n\nhorMirror() {\n  readarray -t -d, arr <<< \"$1\"\n  printf '%s\n' \"${arr[@]}\" | tac | tr '\n' '\\r'\n}\noper() {\n  \"$1\" \"$2\"\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337604,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() {\n    IFS=\",\";\n    read -a rows <<< $1;\n    length=${#rows};\n    result=\"\";\n    \n    for(( i=0; i<$length; i++ )); do \n      row=$(echo ${rows[$i]} | rev);\n      \n      if [[ $i -ne 0 ]]; then\n        row=\"\\r$row\";\n      fi\n      \n      result=\"$result$row\";\n    done;\n  \n    printf $result;\n}\n\nhorMirror() {\n  IFS=\",\";\n  read -a rows <<< $1;\n  length=${#rows};\n  result=\"\";\n    \n  for(( i=0; i<$length; i++ )); do \n    row=${rows[$i]};\n      \n    if [[ $i -ne 0 ]]; then\n      row=\"$row\\r\";\n    fi\n      \n    result=\"$row$result\";\n  done;\n  \n  printf $result;\n}\n\noper() {\n  echo $($1 $2);\n}\n\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337605,"user_id":null,"body":"#!\/bin\/bash\n\nvertMirror() {\n  # change commas to newlines, reverse, and change newlines to returns\n  printf \"$1\" | tr , '\n' | rev | sed -z 's\/\n\/\\r\/g'\n}\n\nhorMirror() {\n  # change commas to newlines, reverse lines, and change newlines to returns\n  printf \"$1\n\" | sed \"s\/,\/\n\/g\" | tac | sed -z 's\/\n\/\\r\/g' | sed 's\/\\r$\/\/'\n}\n\noper() {\n    case $1 in\n        vert_mirror | vertMirror)\n            vertMirror $2\n            ;;\n        hor_mirror | horMirror)\n            horMirror $2\n            ;;\n        *)\n            echo \"Invalid option, try again...\"\n            ;;\n    esac\n}\n\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337606,"user_id":null,"body":"#!\/bin\/bash\nvertMirror() {\n    s=$1\n    count=$(echo \"$s\" | tr ',' '\n' | wc -l)\n    i=1\n    output=\"\"\n    while [ $i -le $count ]; do\n      word=$(echo \"$s\" | cut -d, -f$i | rev)\n      output=$(echo \"$output$word\\r\")\n      let i+=1\n    done\n    echo -e \"$output\"\n}\nhorMirror() {\n    s=$1\n    count=$(echo \"$s\" | tr ',' '\n' | wc -l)\n    i=1\n    output=\"\"\n    while [ $i -le $count ]; do\n      word=$(echo \"$s\" | rev | cut -d, -f$i | rev)\n      output=$(echo \"$output$word\\r\")\n      let i+=1\n    done\n    echo -e \"$output\"\n}\noper() {\n    case $1 in\n      horMirror) horMirror $2;;\n      vertMirror) vertMirror $2;;\n      *) :;;\n    esac\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337607,"user_id":null,"body":"#!\/bin\/bash\n\n\nvertMirror() {\n\tlocal _string=\"${1}\"\n\techo \"${_string}\" | tr ',' '\n' | rev | tr '\n' '\\r'\n}\n\nhorMirror() {\n\tlocal _string=\"${1}\"\n\techo \"${_string}\" | tr ',' '\n' | tac | tr '\n' '\\r'\n}\n\noper() {\n\tlocal _func=\"${1}\"\n\tlocal _string=\"${2}\"\n\t\"${_func}\" \"${_string}\"\n}\n\noper \"${1}\" \"${2}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56dbe7f113c2f63570000b86":[{"id":337608,"user_id":1045,"body":"#!\/bin\/bash\nrot() {\n    echo $1|rev|sed 's\/,\/\\r\/g'\n}\nselfieAndRot() {\n    sp=$(echo ${1%%,*}|sed 's\/.\/\\.\/g')\n    str=$(sed \"s\/,\/$sp\\r\/g\" <<< $1)\n    printf \"%s%s\\r%s%s\" $str $sp $sp $(echo $str|rev)\n}\noper() {\n    [ $1 = 'rot' ] && rot $2\n    [ $1 = 'selfieAndRot' ] && selfieAndRot $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337609,"user_id":492,"body":"#!\/bin\/bash\nvertMirror() {\n    s=$1\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        r=$(echo $i | rev)\n        res=$(printf \"${res}$r\\\\r\")\n    done\n    echo \"${res::-1}\"\n}\nhorMirror() {\n    s=$1\n    arrIN=(${s\/\/,\/ })\n    indices=( ${!arrIN[@]} )\n    for ((i=${#indices[@]} - 1; i >= 0; i--)) ; do\n        r=\"${arrIN[indices[i]]}\"\n        res=$(printf \"${res}$r,\")\n    done\n    echo \"${res::-1}\"\n}\nrot() {\n    s=$1\n    r=$(horMirror $s)\n    r=$(vertMirror $r)\n    echo $r\n}\nselfieAndRot() {\n    s=$1\n    s=$(echo $s | sed 's\/\\\n\/,\/g')\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        line=$(printf \"%0.s.\" $(seq 1 ${#i}))\n        res1=$(printf \"${res1}$i$line\\\\r\")\n    done\n    s=$(rot $s)\n    s=$(echo $s | sed 's\/\\r\/,\/g')\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        line=$(printf \"%0.s.\" $(seq 1 ${#i}))\n        res2=$(printf \"${res2}$line$i\\\\r\")\n    done\n    res=\"$res1$res2\"\n    echo \"${res::-1}\"\n}\noper() {\n    fct=$1; s=$2\n    r=$($fct $s)\n    echo $r\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337610,"user_id":492,"body":"#!\/bin\/bash\nvertMirror() {\n    s=$1\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        r=$(echo $i | rev)\n        res=$(printf \"${res}$r\\\\r\")\n    done\n    echo \"${res::-1}\"\n}\nhorMirror() {\n    s=$1\n    arrIN=(${s\/\/,\/ })\n    indices=( ${!arrIN[@]} )\n    for ((i=${#indices[@]} - 1; i >= 0; i--)) ; do\n        r=\"${arrIN[indices[i]]}\"\n        res=$(printf \"${res}$r,\")\n    done\n    echo \"${res::-1}\"\n}\nrot() {\n    s=$1\n    r=$(horMirror $s)\n    r=$(vertMirror $r)\n    echo $r\n}\nselfieAndRot() {\n    s=$1\n    s=$(echo $s | sed 's\/\\\n\/,\/g')\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        line=$(printf \"%0.s.\" $(seq 1 ${#i}))\n        res1=$(printf \"${res1}$i$line\\\\r\")\n    done\n    s=$(rot $s)\n    s=$(echo $s | sed 's\/\\r\/,\/g')\n    arrIN=(${s\/\/,\/ })\n    for i in \"${arrIN[@]}\"; do\n        line=$(printf \"%0.s.\" $(seq 1 ${#i}))\n        res2=$(printf \"${res2}$line$i\\\\r\")\n    done\n    res=\"$res1$res2\"\n    echo \"${res::-1}\"\n}\noper() {\n    fct=$1; s=$2\n    r=$($fct $s)\n    echo $r\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337611,"user_id":null,"body":"#!\/bin\/bash\nrot() {\n    a=$(rev <<<$1)\n    echo ${a\/\/,\/$(echo -e \"\\r\")}\n}\nselfieAndRot() {\n    block=${1##*,}\n    block=${block\/\/?\/.}\n    a=${1\/\/,\/$block$(echo -e \"\\r\")}$block\n    echo $a$(echo -e \"\\r\")$(rev <<<$a)\n}\noper() {\n    $1 $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337612,"user_id":null,"body":"#!\/bin\/bash\nrot() {\n    echo \"$1\" | rev | tr \",\" \"\\r\"\n}\nselfieAndRot() {\n    IFS=\",\"\n    \n    for i in $1; do\n      var=\"$var$i$(eval \"printf \".\"%.0s {1..${#i}}\")\\r\"\n    done\n\n    echo -ne \"$var\"; echo -ne \"$var\" | rev\n}\noper() {\n    $1 $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337613,"user_id":null,"body":"#!\/bin\/bash\nrot() {\n    echo $1 | rev | tr ',' '\\r'\n}\nselfieAndRot() {\n\n    n=$(echo -n $1 | tr -d ' ' | tr -d '\n' | cut -d, -f1 | tr -d '\n\\r' | wc -m)\n\n    str=$(echo \".\"`seq $n` | tr ' ' '.' | tr -d [:digit:])\n\n    echo `echo $1\",\" | sed \"s\/,\/$str\\r\/g\"``echo $1$str | sed \"s\/,\/$str\\r\/g\" | rev`\n}\noper() {\n    $1 $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337614,"user_id":null,"body":"#!\/bin\/bash\nrot() {\n   echo $1|rev|sed 's\/,\/\\r\/g'\n}\nselfieAndRot() {\n    lst=($(echo $1|sed 's\/,\/ \/g'))\n    \n    dot=$(echo $(num=0;while [ $num -lt ${#lst[1]} ];do echo .;((num++));done)|sed 's\/ \/\/g')\n    \n    echo -e $(echo $1|sed 's\/,\/'$dot'\\r\/g')\"$dot\\r$dot\"$(echo $1|rev|sed 's\/,\/\\r'$dot'\/g')\n}\noper() {\n    $1 $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337615,"user_id":null,"body":"#!\/bin\/bash\nrot() {\n   echo -e $(echo $(echo -e $(echo $1|sed 's\/,\/\\\n\/g'))|rev|sed 's\/ \/\\\\r\/g')\n}\nselfieAndRot() {\n    x=$(lst=($(echo $1|sed 's\/,\/ \/g'));echo $(num=0;while [ $num -lt ${#lst[1]} ];do echo .;((num++));done)|sed 's\/ \/\/g')\n    echo -e $(echo $(echo $1|sed 's\/,\/\\\\r\/g')|sed 's\/\\\\r\/'$x'\\\\r\/g')\"$x\\r$x\"$(echo $(echo -e $(echo $1|sed 's\/,\/\\\n\/g'))|rev|sed 's\/ \/\\\\r'$x'\/g')\n}\noper() {\n    $1 $2\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337616,"user_id":null,"body":"#!\/bin\/bash\nrot() {\n    IFS=',' read -ra arr <<< \"$1\"\n    i=0\n    for ((j=((${#arr[@]} - 1)); j>=0; j--)); do\n        nArr[$i]=\"$(rev < <(echo ${arr[$j]}))\"\n        ((i=i+1))\n    done\n    echo \"$(echo ${nArr[@]} | tr ' ' '\\r')\"\n}\nselfieAndRot() {\n    IFS=',' read -ra arr <<< \"$1\"\n    for i in ${!arr[@]}; do\n        for ((j=\"${#arr[@]}\"; j>0; j--)); do\n            arr[$i]+='.'\n        done\n    done\n    i=\"${#arr[@]}\"\n    for ((j=${#arr[@]}; j>=0; j--)); do\n        arr[$i]=\"$(rev < <(echo ${arr[$j]}))\"\n        ((i=i+1))\n    done\n    echo \"$(echo ${arr[@]} | tr ' ' '\\r')\"\n}\noper() {\n    if [[ \"$1\" == \"rot\" ]]; then\n        rot $2\n    elif [[ \"$1\" == \"selfieAndRot\" ]]; then\n        selfieAndRot $2\n    else\n        echo \"Arguement error\"\n    fi\n}\noper $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337617,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nrot() {\n    echo \"$1\" | rev | tr ',' '\\r'\n}\nselfieAndRot() {\n    char_count=$(echo \"$1\" | awk -F ',' '{print $1}' | wc -m)\n    char=''\n    for (( i=1; i<$char_count; i++ ))\n    do\n        char+='.'\n    done\n    part1=$(echo \"$1,\" | sed -E s\/,\/$char\\\\r\/g)\n    part2=$(echo \"$1\" | rev | sed -E s\/,\/\\\\r$char\/g)\n    echo \"$part1$char$part2\"\n}\noper() {\n    $1 $2\n}\noper $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56dbeec613c2f63be4000be6":[{"id":337618,"user_id":null,"body":"#!\/bin\/bash\nrot_90_clock() {\n    for sq in \"${arr[@]}\"; do\n        for (( i=\"${#arr[@]}\"; i>=0; i-- )); do\n            sym[\"$i\"]+=\"${sq:$i:1}\"\n        done\n    done\n    for index in \"${!sym[@]}\"; do\n        sym[\"$index\"]=$(echo \"${sym[$index]}\" | rev)\n    done\n    echo \"${sym[@]}\" | tr ' ' '\\r'\n}\ndiag_1_sym() {\n    for sq in \"${arr[@]}\"; do\n        for (( i=0; i<\"${#arr[@]}\"; i++ )); do\n            sym[\"$i\"]+=\"${sq:$i:1}\"\n        done\n    done\n    if [[ \"$1\" == \"selfie\" ]]; then\n        echo ${sym[@]}\n    else\n        echo ${sym[@]} | tr ' ' '\\r'\n    fi\n}\nselfie_and_diag1() {\n    sym=( $(diag_1_sym \"selfie\") )\n    j=0\n    for (( i=0; i<\"${#arr[@]}\"; i++ )); do\n        sd[\"$i\"]=\"${arr[$i]}|${sym[$i]}\"\n    done\n    echo \"${sd[@]}\" | tr ' ' '\\r'\n}\n\noper() {\n    export arr=( $(echo \"$2\" | sed 's\/\\\n\/\n\/g') )\n    if [[ \"$1\" == \"rot_90_clock\" ]]; then\n        rot_90_clock \"$arr\"\n    elif [[ \"$1\" == \"diag_1_sym\" ]]; then\n        diag_1_sym \"$arr\"\n    elif [[ \"$1\" == \"selfie_and_diag1\" ]]; then\n        selfie_and_diag1 \"$arr\"\n    else\n        echo \"Arguement error\"\n    fi\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337619,"user_id":1045,"body":"#!\/bin\/bash\ndiag_1_sym () {\n  declare -a arr=( $(echo $1|sed 's\/\n\/ \/g') )\n  declare -a res=(); l=${#arr[*]}; c=0\n  while (( $c < $l )); do\n    str=''\n    for i in ${arr[@]}; do\n      str=\"$str${i:$c:1}\"\n      done\n    res+=($str); let c=c+1\n    done\n\n  echo \"${res[*]}\"|sed 's\/ \/\\r\/g'\n}\n\nrot_90_clock () {\n  declare -a inpt=( $(echo $1|sed 's\/\n\/ \/g') )\n  str=''\n  for i in ${inpt[@]}; do\n    str=\"$i&$str\"\n    done\n  \n  declare -a arr=( $(echo \"$str\"|sed 's\/&\/ \/g') )\n  declare -a res=(); l=${#arr[*]}; c=0\n  while (( $c < $l )); do\n    str=''\n    for i in ${arr[@]}; do\n      str=\"$str${i:$c:1}\"\n      done\n    res+=($str); let c=c+1\n    done\n\n  echo \"${res[*]}\"|sed 's\/ \/\\r\/g'\n}\n\nselfie_and_diag1 () {\n  \n  declare -a diag=( $(diag_1_sym \"$1\"|sed 's\/\\r\/ \/g') )\n  declare -a inpt=( $(echo $1|sed 's\/\n\/ \/g') )\n  c=0; l=${#inpt[*]}; res='_'\n  while (( $c < $l )); do\n    res=$(printf \"%s\\r%s|%s\" $res ${inpt[$c]} ${diag[$c]} ); let c=c+1\n  done\n  echo ${res:1}\n}\n\noper () { \n  \"$1\" \"$2\"\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337620,"user_id":null,"body":"#!\/bin\/bash\n\ndiag_1_sym () {\n  local -a arr=()\n  while read line; do\n    local len=${#line}\n    for ((i = 0; i < len; i++)); do\n      arr[i]=\"${arr[i]}${line:i:1}\"\n    done\n  done <<< \"$1\"\n  IFS=$'\\r'\n  echo \"${arr[*]}\"\n  unset IFS\n}\n\nrot_90_clock () {\n  diag_1_sym \"$1\" | tr '\\r' '\n' | rev | tr '\n' '\\r'\n}\n\nselfie_and_diag1 () {\n  paste -d '|' <(echo \"$1\") <(diag_1_sym \"$1\" | tr '\\r' '\n') | tr '\n' '\\r'\n}\n\n# takes two parameters, 1: function, 2: string\noper () {\n  $1 \"$2\"\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337621,"user_id":null,"body":"#!\/bin\/bash\nmoves_squared() {\n\t# local matrix=()\n\tlocal result=\"\"\n\n\tlocal str=$2\n\n\tlocal width=$(echo \"sqrt(${#2})\" | bc)\n\n\n\tcase $1 in\n\t\tdiag_1_sym)\n\t\t\tfor i in $(seq 0 $(($width -1))); do\n\n\t\t\t\tfor j in $(seq 0 $(($width -1))); do\n\t\t\t\t\tresult=\"$result${2:$(( ($width + 1) *$j + $i )):1}\"\n\t\t\t\tdone\n\n\t\t\t\t(( $i < $(($width -1)) )) && result=\"$result\"$'\\r'\n\t\t\tdone\n\n\t\t;;\n\t\trot_90_clock)\n\t\t\tfor i in $(seq 0 $(($width -1))); do\n\n\t\t\t\tfor j in $(seq $(($width - 1)) -1 0); do\n\t\t\t\t\tresult=\"$result${2:$(( ($width + 1)*$j + $i )):1}\"\n\t\t\t\tdone\n\n\t\t\t\t(( $i < $(($width -1)) )) && result=\"$result\"$'\\r'\n\t\t\tdone\n\n\t\t;;\n\t\tselfie_and_diag1)\n\t\t\tfor i in $(seq 0 $(($width -1))); do\n\n\t\t\t\tfor j in $(seq 0 $(($width -1))); do\n\t\t\t\t\tresult=\"$result${2:$(( ($width + 1) *$i + $j )):1}\"\n\t\t\t\tdone\n\t\t\t\tresult=\"$result\"\"|\"\n\t\t\t\tfor j in $(seq 0 $(($width -1))); do\n\t\t\t\t\tresult=\"$result${2:$(( ($width + 1) *$j + $i )):1}\"\n\t\t\t\tdone\n\t\t\t\t(( $i < $(($width -1)) )) && result=\"$result\"$'\\r'\n\t\t\tdone\n\t\t;;\n\t\t*)\n\t\t\techo \"transformation $1 is not supported\"\n\t\t\texit 0\n\t  ;;\n\tesac\n\n\techo \"$result\"\n}\n\nmoves_squared \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337622,"user_id":null,"body":"#!\/bin\/bash\n# takes two parameters, 1: function, 2: string\naux() {\n  rows=($(echo $2 | sed \"s\/\n\/ \/g\"))\n  result=()\n\n  for row in ${rows[*]}; do\n    for i in $(seq 0 1 $(( ${#row} - 1 ))); do\n      if [ $1 = \"diag_1_sym\" ]; then\n        result[i]=\"${result[$i]}${row:$i:1}\"        \n      else\n        result[i]=\"${row:$i:1}${result[$i]}\"\n      fi\n    done\n  done\n  \n  echo ${result[*]} | sed \"s\/ \/\\r\/g\"\n}\n\ndiag_1_sym() {\n  aux diag_1_sym \"$1\"\n}\n\nrot_90_clock() {\n  aux rot_90_clock \"$1\"\n}\n\nselfie_and_diag1() {\n  selfie=($(echo \"$1\" | sed \"s\/\n\/ \/g\"))\n  diag=($(echo \"$(diag_1_sym \"$1\")\" | sed \"s\/\\r\/ \/g\"))\n  \n  for i in $(seq 0 1 $(( ${#selfie[*]} - 1 ))); do\n    result=\"$result${selfie[$i]}|${diag[$i]}\\r\"\n  done\n  \n  echo -en ${result::-2}\n}\n\noper () {\n    \"$1\" \"$2\"\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337623,"user_id":null,"body":"#!\/bin\/bash\n# takes two parameters 1: function, 2: string\nsym () {\necho -e \"$1\" | awk '\n{\n  NF=split($0,a,\"\")\n  for(i=1;i<=NF;i++)arr[NR*NF+i]=a[i]\n}\nEND {\nfor(i=1;i<=NF;i++) {\n  for(j=1;j<=NR;j++) {printf \"%s\",arr[j*NR+i]}\n  printf \"\n\"\n}\n}\n'\n}\n\ncr90 () {\nsym \"$1\" | rev\n}\n\nselfie () {\n( echo -e \"$1\"; sym \"$1\" )  | awk '\n{arr[NR]=$0}\nEND {\nr=NR\/2\nfor(i=1;i<=r;i++)\n  print arr[0+i] \"|\" arr[r+i]\n}\n'\n}\n\noper () {\n  case \"$1\" in\n  diag_1_sym) sym \"$2\";;\n  rot_90_clock) cr90 \"$2\";;\n  selfie_and_diag1) selfie \"$2\";;\n  esac\n}\noper \"$1\" \"$2\" | awk 'BEGIN{ORS=\"\\r\"} {print $0}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337624,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nrotate90 ()\n{\n    local csv=( ${1\/\/,\/ } )\n    local yMax=$(( ${#csv[@]} - 1 ))\n    local xMax=${#csv[0]}\n    local xIndex=\n    local mYIndex=\n    \n    for (( xIndex = 0; xIndex < $xMax; xIndex++ )); do\n        for (( mYIndex = $yMax; mYIndex >= 0; mYIndex-- )); do\n            printf '%s' \"${csv[$mYIndex]:$xIndex:1}\"\n        done\n        printf '\\r'\n    done\n}\n\nmirrorD ()\n{\n    local csv=( ${1\/\/,\/ } )\n    local yMax=${#csv[@]}\n    local xMax=${#csv[0]}\n    local xIndex=\n    local yIndex=\n    \n    for (( xIndex = 0; xIndex < $xMax; xIndex++ )); do\n        for (( yIndex = 0; yIndex < $yMax; yIndex++ )); do\n            printf '%s' \"${csv[$yIndex]:$xIndex:1}\"\n        done\n        printf '\\r'\n    done\n}\n\nselfieAndMirrorD ()\n{\n    local csv=( ${1\/\/,\/ } )\n    local line=\n    local yMax=${#csv[@]}\n    local xMax=${#csv[0]}\n    local yIndex=0\n    local xIndex=\n    \n    while read -d $'\\r' line; do\n        for (( xIndex = 0; xIndex < $xMax; xIndex++ )); do\n            printf '%s' \"${csv[$yIndex]:$xIndex:1}\"\n        done\n        \n        printf '|%s\\r' \"$line\"\n        \n        (( yIndex++ ))\n    done < <(mirrorD \"$1\")\n}\n\noper ()\n{\n    [[ \"$1\" == \"rot_90_clock\" ]] && rotate90 \"$2\"\n    [[ \"$1\" == \"diag_1_sym\" ]] && mirrorD \"$2\"\n    [[ \"$1\" == \"selfie_and_diag1\" ]] && selfieAndMirrorD \"$2\"\n}\n\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337625,"user_id":null,"body":"#!\/bin\/bash\n\ndiag_1_sym() {\n        sed -znr ':1;h;s\/\\b(.).*\n?\/\\1\/mg;T;p;g;s\/\\b.\/\/mg;t1' \\\n                <(echo -e \"$1\") | sed 's\/\\x0\/\\r\/g'\n}\n\nrot_90_clock() {\n        sed -znr ':1;h;s\/\\b(.).*\n?\/\\1\/mg;T;p;g;s\/\\b.\/\/mg;t1' \\\n                <(echo -e \"$1\") | xargs --null -n1 | rev | sed -z 's\/\n\/\\r\/g'\n}\n\nselfie_and_diag1() {\n        paste -d'|' <(echo -e \"$1\") \\\n                <(sed -znr ':1;h;s\/\\b(.).*\n?\/\\1\/mg;T;p;g;s\/\\b.\/\/mg;t1' \\\n                <(echo -e \"$1\") | sed 's\/\\x0\/\n\/g') | sed -z 's\/\n\/\\r\/g'\n}\n\noper() {\n        $1 \"$2\"\n}\n\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337626,"user_id":null,"body":"#!\/bin\/bash\n# takes two parameters, 1: function, 2: string\noper () {\n  # your code\n  COMMAND=$1\n  SAVEIFS=$IFS\n  # Change IFS to new line. \n  IFS=$'\n'\n  ITEMS=($2)\n  IFS=$SAVEIFS\n  OUTPUT=\"\"\n  ITEMCNT=${#ITEMS[@]}\n  WORDLEN=${#ITEMS[0]}\n  \n  for (( i=0; i<$WORDLEN; i++ ))\n    do\n    OPTITEM=\"\"\n    case $COMMAND in\n  \t  diag_1_sym | diag1Sym | diag-1-sym)\n        for (( j=0; j<$ITEMCNT; j++ ))\n        do \n            WORD=${ITEMS[$j]}\n\t          OPTITEM=\"$OPTITEM${WORD:$i:1}\"\n        done\n        OUTPUT=\"$OUTPUT\\r$OPTITEM\"\n\t\t  ;;\n\t  rot_90_clock | rot90Clock | rot-90-clock)\n        for (( j=$ITEMCNT-1; j>=0; j-- ))\n        do \n            WORD=${ITEMS[$j]}\n\t          OPTITEM=\"$OPTITEM${WORD:$i:1}\"\n        done\n        OUTPUT=\"$OUTPUT\\r$OPTITEM\"\n   \t  ;;\n\t  selfie_and_diag1 | selfieAndDiag1 | selfie-and-diag1)\n\t\t    for (( j=0; j<$ITEMCNT; j++ ))\n        do \n            WORD=${ITEMS[$j]}\n\t          OPTITEM=\"$OPTITEM${WORD:$i:1}\"\n        done\n        OUTPUT=\"$OUTPUT\\r${ITEMS[$i]}|$OPTITEM\"\n      ;;\n    esac\n  done\n  printf $OUTPUT\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337627,"user_id":null,"body":"#!\/bin\/bash\n\ndiag_1_sym() {\n    read -a lines <<< $1\n    for (( i=0; i<${#lines[@]}; i++ )); do\n        for line in ${lines[@]}; do\n            echo -n ${line:$i:1}\n        done\n        echo\n    done\n}\n\nrot_90_clock() {\n    diag_1_sym \"$1\" | rev\n}\n\nselfie_and_diag1() {\n    read -a lines <<< $1\n    declare -a diag=($(diag_1_sym \"$1\"))\n    for (( i=0; i<${#lines[@]}; i++ )); do\n        echo \"${lines[i]}|${diag[i]}\"\n    done\n}\n\noper() {\n    \"$1\" \"$(echo -en $2)\" | paste -sd '\\r'\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56dbf59b0a10feb08c000227":[{"id":337628,"user_id":492,"body":"#!\/bin\/bash\naux='\nfrom sys import argv\ndef rot_90_counter(s):\n    return \"\\r\".join(reversed([\"\".join(b) for b in zip(*s.split())]))\ndef diag_2_sym(s):\n    return \"\\r\".join(reversed([\"\".join(a) for a in zip(*reversed(s.split()))]))\ndef selfie_diag2_counterclock(s):\n    return \"\\r\".join(\"|\".join(c) for c in zip(\n        s.split(), diag_2_sym(s).split(), rot_90_counter(s).split()))\n\ndef aux(fct, s):\n    return globals()[fct](s)\n\na=aux(argv[1:][0], argv[1:][1])\nprint a\n'\n# takes two parameters \n# 1: function, \n# 2: string\noper () {\n    echo `python -c \"$aux\" \"$1\" \"$2\"`\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337629,"user_id":null,"body":"#!\/bin\/bash\ndiag_2_sym() {\n    for (( i=\"${#arr[@]}\"; i>=0; i-- )); do\n        for (( j=((${#arr[$i]} - 1)); j>=0; j-- )); do\n            sym[\"$j\"]+=\"${arr[$i]:$j:1}\"\n        done\n    done\n    k=0\n    for (( i=((${#arr[@]} - 1)); i>=0; i-- )); do\n        rev_sym[\"$i\"]=\"${sym[$k]}\"\n        ((k++))\n    done\n    if [[ \"$1\" == \"selfie\" ]]; then\n        echo ${rev_sym[@]}\n    else\n        echo \"${rev_sym[@]}\" | tr ' ' '\\r'\n    fi\n}\nrot_90_counter() {\n    for char in \"${arr[@]}\"; do\n        j=\"((${#arr[1]} - 1))\"\n        for (( i=0; i<\"${#arr[@]}\"; i++)); do\n            rot[\"$i\"]+=${char:$j:1}\n            ((j--))\n        done\n    done\n    if [[ \"$1\" == \"selfie\" ]]; then\n        echo ${rot[@]}\n    else\n        echo \"${rot[@]}\" | tr ' ' '\\r'\n    fi\n}\nselfie_diag2_counterclock() {\n    rot=( $(rot_90_counter \"selfie\") )\n    sym=( $(diag_2_sym \"selfie\") )\n    for (( i=0; i<\"${#arr[@]}\"; i++ )); do\n        sd[\"$i\"]=\"${arr[$i]}|${sym[$i]}|${rot[$i]}\"\n    done\n    echo \"${sd[@]}\" | tr ' ' '\\r'\n}\noper() {\n    export arr=( $(echo \"$2\" | sed 's\/\\\n\/\n\/g') )\n    case \"$1\" in\n    \"diag_2_sym\")\n        diag_2_sym\n        ;;\n    \"rot_90_counter\")\n        rot_90_counter\n        ;;\n    \"selfie_diag2_counterclock\")\n        selfie_diag2_counterclock\n        ;;\n    *)\n        echo \"Arguement error.\"\n        ;;\n    esac\n}\n\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337630,"user_id":null,"body":"#!\/bin\/bash\n# takes two parameters 1: function, 2: string\n\nrot_90_counter () {\n  local word=$(head -1 <<< \"$1\")\n  local len=${#word}\n  local end=$((len - 1))\n  while (( end >= 0)); do\n    for x in $1; do\n      printf \"${x:end:1}\"\n    done\n    ((end -= 1))\n    printf \"\n\"\n  done\n}\n\ndiag_2_sym () {\n  rev <<< $(rot_90_counter \"$1\")\n}\n\nselfie_diag2_counterclock () {\n  paste -d \"|\" <(echo \"$1\") <(diag_2_sym \"$1\") <(rot_90_counter \"$1\")\n}\n\noper () {\n    # your code\n  local result=\"\"\n  case \"$1\" in\n    rot_90_counter) result=$(rot_90_counter \"$2\") ;;\n    diag_2_sym) result=$(diag_2_sym \"$2\") ;;\n    selfie_diag2_counterclock) result=$(selfie_diag2_counterclock \"$2\") ;;\n  esac\n  tr \"\n\" \"\\r\" <<< \"$result\"\n}\noper \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337631,"user_id":null,"body":"#!\/bin\/bash\n\n\n# takes two parameters 1: function, 2: string\noper () {\n\n  declare -A matrix\n  n=0\n  x=0\n  y=0\n\n  # ----------\n  init () {\n    IFS=' '\n    local tag=\"$1\"\n    local string=\"$2\"\n    while read row; do\n      for (( x=0; x<${#row}; x++ )); do\n        matrix[\"${tag},${x},${y}\"]=\"${row:${x}:1}\"\n      done\n      (( y++ ));\n    done < <(echo -e ${string})\n    n=$y\n  }\n\n  # ----------\n  print_pretty () {\n    local tag=$1\n    for (( y=0; y<${n}; y++ )); do\n      for (( x=0; x<${n}; x++ )); do\n        echo -n ${matrix[${tag},${x},${y}]}\n      done\n      echo\n    done\n  }\n\n  # ----------\n  print_string () {\n    local tag=$1\n    for (( y=0; y<${n}; y++ )); do\n      for (( x=0; x<${n}; x++ )); do\n        echo -n ${matrix[${tag},${x},${y}]}\n      done\n      [[ $y -lt $(( $n - 1 )) ]] && echo -ne \"\\r\"\n    done\n   echo\n  }\n\n  # ----------\n  transpose () {\n    local from=$1\n    local to=$2\n   for (( y=0; y<${n}; y++ )); do\n     for (( x=0; x<${n}; x++ )); do\n       matrix[${to},${x},${y}]=${matrix[${from},${y},${x}]}\n     done\n   done\n  }\n\n  # ----------\n  flip_y () {\n    local from=$1\n    local to=$2\n    for (( y=0; y<${n}; y++ )); do\n      for (( x=0; x<${n}; x++ )); do\n        matrix[${to},${x},${y}]=${matrix[${from},$((${n}-1-${x})),${y}]}\n      done\n    done\n  }\n\n  # ----------\n  flip_x () {\n    local from=$1\n    local to=$2\n   for (( y=0; y<${n}; y++ )); do\n     for (( x=0; x<${n}; x++ )); do\n       matrix[${to},${x},${y}]=${matrix[${from},${x},$((${n}-1-${y}))]}\n     done\n   done\n  }\n\n  # ----------\n  rot_90 () {\n    local from=$1\n    local to=$2\n    transpose $from \"temp_1\"\n    flip_y \"temp_1\" $to\n  }\n  \n    # ----------\n  rot_90_counter () {\n    local from=$1\n    local to=$2\n    transpose $from \"temp_1\"\n    flip_x \"temp_1\" $to\n  }\n\n  # ----------\n  diag_2_sym () {\n    local from=$1\n    local to=$2\n    flip_y $from \"temp_1\"\n    transpose \"temp_1\" \"temp_2\"\n    flip_y \"temp_2\" $to\n  }\n\n  # ----------\n  selfie_and_diag2_counterclock () {\n    local from=$1\n    diag_2_sym $from \"diag_2_sym\"\n    rot_90_counter $from \"rot_90_counter\"\n\n    pretty=$(paste -d '|' <(print_pretty \"orig\") <(print_pretty \"diag_2_sym\") <(print_pretty \"rot_90_counter\"))\n    echo $pretty | tr '\n' '\\r'\n  }\n  \n  init \"orig\" \"$2\"\n\n  if [[ $1 == \"rot_90_counter\" ]]; then\n    rot_90_counter \"orig\" \"output\"\n    print_string \"output\"\n  fi\n\n  if [[ $1 == \"diag_2_sym\" ]]; then\n    diag_2_sym \"orig\" \"output\"\n    print_string \"output\"\n  fi\n\n  if [[ $1 == \"selfie_diag2_counterclock\" ]]; then\n    selfie_and_diag2_counterclock \"orig\"\n  fi\n  \n}\noper \"$1\" \"$2\" ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337632,"user_id":null,"body":"#!\/bin\/bash\n# takes two parameters 1: function, 2: string\nsym () {\necho -e \"$1\" | awk '\n{\n  NF=split($0,a,\"\")\n  for(i=1;i<=NF;i++)arr[NR*NF+i]=a[i]\n}\nEND {\nfor(i=1;i<=NF;i++) {\n  for(j=1;j<=NR;j++) {printf \"%s\",arr[(NR+1-j)*NF+NF+1-i]}\n  printf \"\n\"\n}\n}\n'\n}\n\nccr90 () {\nsym \"$1\" | rev \n}\n\nselfie () {\n( echo -e \"$1\"; sym \"$1\"; ccr90 \"$1\"; )  | awk '\n{arr[NR]=$0}\nEND {\nr=NR\/3\nfor(i=1;i<=r;i++)\n  print arr[0+i] \"|\" arr[r+i] \"|\" arr[2*r+i]\n}\n'\n}\n\noper () {\n  case \"$1\" in\n  diag_2_sym) sym \"$2\";;\n  rot_90_counter) ccr90 \"$2\";;\n  selfie_diag2_counterclock) selfie \"$2\";;\n  esac\n}\noper \"$1\" \"$2\" | awk 'BEGIN{ORS=\"\\r\"} {print $0}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337633,"user_id":null,"body":"#!\/bin\/bash\n\nsetmax () {\n# set the size of a matrix (in global variable MAX)\n# TODO validate the matrix\n        local firstline\n        # get first line\n        read firstline <<< \"$1\"\n        (( MAX=${#firstline} -1 ))\n}\n\nelement () {\n# returns element (i,j) of a matrix\n# global MAX has to be available\n        local matrix=\"$1\"\n        local i=$2\n        local j=$3\n        local position=$(( i*(MAX+2) + j ))\n        echo ${matrix:$position:1}\n}\n\ndiag_2_sym () {\n        local result=\"\"\n        local i j\n        for ((i=0; i<=MAX; i++)); do\n                result+=$'\n'\n                for ((j=0; j<=MAX; j++)); do\n                        #result+=$( element \"$1\" $((MAX-j)) $((MAX-i)) )\n                        # optimise by inlining element\n                        (( position = (MAX-j)*(MAX+2) + MAX-i ))\n                        result+=${1:$position:1}\n\n                done\n        done\n        echo -n \"${result:1}\"\n}\n\nrot_90_counter () {\n        local result=\"\"\n        local i j\n        for ((j=MAX; j>=0; j--)); do\n                result+=$'\n'\n                for ((i=0; i<=MAX; i++)); do\n                        #result+=$( element \"$1\" $i $j )\n                        # optimise by inlining element\n                        (( position = (i)*(MAX+2) + j ))\n                        result+=${1:$position:1}\n                done\n        done\n        echo -n \"${result:1}\"\n}\n\nplus () {\n        declare -a plus\n        local i\n        local matrix\n        for matrix; do\n                i=0\n                while read line; do\n                        plus[$i]+=\\|$line\n                        ((i++))\n                done <<< \"$matrix\"\n        done\n        for (( i=0; i<=MAX; i++ )); do\n                echo ${plus[$i]:1}\n        done\n}\n\nselfie_diag2_counterclock () {\n        plus \"$1\" \"$(diag_2_sym \"$1\")\" \"$(rot_90_counter \"$1\")\"\n}\n\nsetmax \"$2\"\n#$1 \"$2\"\n# translate \n to \\r in output, as requested..\n$1 \"$2\" | tr \"\n\" \"\\r\"; echo\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337634,"user_id":null,"body":"#!\/bin\/bash\n\ninit_array () {\n        out_row=(\"${in_row[@]}\")\n}\n\n\nrot_90_counter () {\n        local i j pos tmp_rot_row\n\n        init_array\n\n        for ((i=0;i<sq_size;i++));do\n                let pos=sq_size-i-1\n                for ((j=0;j<$sq_size;j++));do\n                        tmp_rot_row[$i]=${tmp_rot_row[$i]}${out_row[$j]:$pos:1}\n                done\n        done\n\n        out_row=(\"${tmp_rot_row[@]}\")\n        output_str_delim_pos=$sq_size\n}\n\n\ndiag_2_sym () {\n        local i\n\n        rot_90_counter\n\n        # Afer rotate, just reverse each row\n        for ((i=0;i<$sq_size;i++));do\n                out_row[$i]=$(echo ${out_row[$i]} | rev)\n        done\n        output_str_delim_pos=$sq_size\n}\n\n\nselfie_diag2_counterclock () {\n        local k m delim tmp_self_row\n        delim=\"|\"\n\n        for k in init_array diag_2_sym rot_90_counter;do\n                if [ $k = rot_90_counter ];then\n                        delim=\"\"\n                fi\n                eval \"$k\" # call function\n                for ((m=0;m<$sq_size;m++));do\n                        tmp_self_row[$m]=\"${tmp_self_row[$m]}${out_row[$m]}$delim\"\n                done\n        done\n\n        let output_str_delim_pos=sq_size*3+1\n        out_row=(\"${tmp_self_row[@]}\")\n}\n\n\noper () {\n        transforms=\"rot_90_counter|diag_2_sym|selfie_diag2_counterclock\"\n        if [ -z \"$(echo \"|$transforms|\" | grep \"$1\" )\" ];then\n                echo \"Usage: $0 $transform string\"\n                exit 1\n        fi\n\n        in_row=($2)\n        sq_size=${#in_row[0]}\n\n        # call func\n        $1\n\n        echo \"${out_row[*]}\" | sed \"s\/\\(.\\{$output_str_delim_pos\\}\\) \/\\1\\r\/g\"\n}\n\noper \"$1\" \"$2\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56dec885c54a926dcd001095":[{"id":337635,"user_id":null,"body":"#!\/bin\/bash\n# your code here\necho ${1}*-1 | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337636,"user_id":null,"body":"#!\/bin\/bash\n\nbc <<< \"-($1)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337637,"user_id":null,"body":"#!\/bin\/bash\necho \"- $1\" | bc\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337638,"user_id":null,"body":"#!\/bin\/bash\necho \"$1\" | awk '{print -$1}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337639,"user_id":null,"body":"#!\/bin\/bash\nexpr $1 | awk '{print -$1}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337640,"user_id":null,"body":"#!\/bin\/bash\n#echo $(expr \"$1\" '*' -1)\n#echo $((-((\"$1\"))))\nawk -v num=\"$1\" 'BEGIN {print num*(-1)}'\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337641,"user_id":null,"body":"#!\/bin\/bash\nawk \"BEGIN {print -1 * $1}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337642,"user_id":null,"body":"#!\/bin\/bash\n\necho \"0 - $1\" | bc\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337643,"user_id":null,"body":"#!\/bin\/bash\nbc <<< \"$1 - ($1 + $1)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337644,"user_id":null,"body":"#!\/bin\/bash\necho $((-${1%.*}))${1#${1%.*}}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56e3cd1d93c3d940e50006a4":[{"id":337645,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n  arr=($(echo $1 | tr ' ' '\n' | sort -rn))\n  len=${#arr[@]}\n  res=()\n  for ((i = 0, j = 0, k = len - 1; i < len; i++)); do\n    ((i%2 == 0)) && res[j++]=${arr[i]} || res[k--]=${arr[i]}\n  done\n  echo ${res[@]}\n}\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337646,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n    read -r -a numbers <<< $(echo \"$1\" | xargs -n1 | sort -n | xargs)\n    for i in $(seq 1 ${#numbers[@]}); do\n        i=$(($i*(-2) + ${#numbers[@]} + 1))\n        i=$(($i >= 0 ? $i : -$i - 1))\n        valley+=(${numbers[$i]})\n    done\n    echo ${valley[@]}\n}\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337647,"user_id":492,"body":"#!\/bin\/bash\nsort_array () { local v=\"$1[*]\" IFS=$'\n'; read -d $'\\0' -a \"$1\" < <(sort \"${@:2}\" <<< \"${!v}\"); }\nmakevalley() {\n    A=($1);\n    lg=${#A[@]}\n    if [ $lg -eq 0 ]; then\n        echo \"\"\n        exit 0\n    fi\n    sort_array A -nr \n    declare -a result=( $(for i in {1..$lg}; do echo 0; done) )\n    start=0; end=$(($lg - 1)); i=1\n    while [ $i -lt $lg ]; do\n        result[$start]=${A[$((i-1))]}\n        result[$end]=${A[$i]}\n        start=$((start + 1))\n        end=$((end - 1))\n        i=$((i + 2))\n    done\n    if [ $i -eq $lg ]; then\n        result[$start]=${A[$((i-1))]}\n    fi\n    echo \"${result[@]}\"\n}\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337648,"user_id":null,"body":"makevalley() {\n    arr=(${1\/\/,\/})\n    valley=''\n    beg=$((${#arr[@]} % 2))\n\n    for i in $(seq $(( ${#arr[@]} - 1)) -1 0); do\n      if [ $beg -eq 0 ]; then\n        valley+=\" ${arr[$i]}\"\n        beg=1\n      else\n        valley=\"${arr[$i]} $valley\"\n        beg=0\n      fi\n    done\n    \n    echo $valley\n}\n\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337649,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n  [[ -z \"$1\" ]] && return\n  readarray -t -d ' ' arr < <(printf -- \"$1\")\n  readarray -t arr < <(printf '%d\\0' \"${arr[@]}\" | sort -rnz | xargs -0n1)\n\n  n=${#arr[@]}\n  for (( i = 0, l = 0, r = $n - 1; i < $n; i++ )); do\n    if (( i % 2 == 0 )); then\n      valley[l++]=${arr[i]};\n    else\n      valley[r--]=${arr[i]};\n    fi\n  done\n  echo \"${valley[@]}\"\n}\n\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337650,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n    # your code\n    iUbicacion=1\n    item_l=\"\"\n    item_r=\"\"\n    for elemento in $1\n      do\n        if [ $iUbicacion == 1 ]\n        then\n            item_l=${item_l}${elemento}\" \"\n            iUbicacion=0\n        else\n            item_r=${elemento}\" \"${item_r}\n            iUbicacion=1\n        fi\n      done\n      \n      echo ${item_l} ${item_r}\n}\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337651,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n  sorted_string=$(echo $1 | sort)\n  read -a arr <<< $sorted_string\n  declare -a left_wing=()\n  declare -a right_wing=()\n  for idx in \"${!arr[@]}\"\n  do\n    if (( $idx % 2 ))\n    then\n      right_wing+=(\"${arr[$idx]}\")\n    else\n      left_wing+=(\"${arr[$idx]}\")\n    fi\n  done\n  \n  right_wing_length=$(( \"${#right_wing[@]}\" - 1 ))\n  for i in $(seq $right_wing_length -1 0)\n  do\n    left_wing+=(\"${right_wing[$i]}\")\n  done\n  \n  echo \"${left_wing[@]}\"\n}\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337652,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n  IFS=' ' read -r -a a <<< $1\n  unset IFS\n  IFS=' ' read -r -a var <<< ${a[@]:0:2}\n  unset IFS\n  for (( i=2; i<${#a[@]}; i++ ))\n  do\n    l=( ${#var[@]} )\n    if (( l%2 == 0 ))\n    then\n      var=( ${var[@]:0:l\/2} ${a[$i]} ${var[@]:l\/2:l} )\n    else\n      var=( ${var[@]:0:l\/2+1} ${a[$i]} ${var[@]:l\/2+1:l} )      \n    fi\n  done\n  echo ${var[@]}\n}\n\nmakevalley \"$1\"\n\n#len=${#var[@]}\n#arr=${var[@]:0:len\/2}\n#arr+=($i)\n#echo $arr\n#arr+=(${var[@]:len\/2:len})\n#var=$arr","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337653,"user_id":null,"body":"#!\/bin\/bash\ndeclare -a _arr=($*)\ndeclare -a _new_arr\n\n_arr_length=${#_arr[@]}\n\nfor (( i=0; i < _arr_length; i++ ))\ndo\n    for (( j=$((i+1)); j < _arr_length; j++ ))\n    do\n        if [ ${_arr[$i]} -gt ${_arr[$j]} ]\n        then\n            _temp=${_arr[$i]}\n            _arr[$i]=${_arr[$j]}\n            _arr[$j]=${_temp}\n        fi\n    done\ndone\n\n_start_index=$(( _arr_length \/ 2 ));\n_to_left=1;\n(( _arr_length % 2 == 0 )) &&\t_to_left=-1;\n\n_offset=1;\n_new_arr=(${_arr[@]\/*\/x})\n_new_arr[$_start_index]=${_arr[0]}\n\nfor (( i=1; i < _arr_length; i++ ))\ndo\n    _new_arr[$((_start_index + _to_left * _offset))]=${_arr[$i]}\n    [[ $_to_left -eq 1 ]] && _to_left=-1 || _to_left=1\n    (( $i % 2 == 0 )) && let _offset+=1\ndone\n\necho ${_new_arr[*]}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337654,"user_id":null,"body":"#!\/bin\/bash\nmakevalley() {\n  sorted=$(sort <<< $1)\n  left=\"\"\n  right=\"\"\n  index=0\n  for i in $sorted\n  do\n    (( index+=1 ))\n    if (( $index % 2 == 0 ))\n    then\n      right=\"$i $right \"\n    else\n      left+=\"$i \"\n    fi\n  done\n  echo $left $right\n}\nmakevalley \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56e7d40129035aed6c000632":[{"id":337655,"user_id":null,"body":"easyline() {\n  bc <<< \"\n    n=$1\n    a[0]=1\n    for (i = 1; i <= n; i += 1) {\n      a[i] = a[i - 1] * (n + 1 - i) \/ i\n    }\n    sum = 0\n    for (i = 0; i <= n; i += 1) {\n      sum += a[i] ^ 2\n    }\n    sum\n  \"\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337656,"user_id":null,"body":"res=(\n1\n2\n6\n20\n70\n252\n924\n3432\n12870\n48620\n184756\n705432\n2704156\n10400600\n40116600\n155117520\n601080390\n2333606220\n9075135300\n35345263800\n137846528820\n538257874440\n2104098963720\n8233430727600\n32247603683100\n126410606437752\n495918532948104\n1946939425648112\n7648690600760440\n30067266499541040\n118264581564861424\n465428353255261088\n1832624140942590534\n7219428434016265740\n28453041475240576740\n112186277816662845432\n442512540276836779204\n1746130564335626209832\n6892620648693261354600\n27217014869199032015600\n107507208733336176461620\n424784580848791721628840\n1678910486211891090247320\n6637553085023755473070800\n26248505381684851188961800\n103827421287553411369671120\n410795449442059149332177040\n1625701140345170250548615520\n6435067013866298908421603100\n25477612258980856902730428600\n100891344545564193334812497256\n399608854866744452032002440112\n1583065848125949175357548128136\n6272525058612251449529907677520\n24857784491537440929618523018320\n98527218530093856775578873054432\n390590044887157789360330532465784\n1548655265692941410446222812934512\n6141219157058215937976400809912720\n24356699707654619143838606602026720\n96614908840363322603893139521372656\n383291933432261050330199012527412832\n1520803477811874490019821888415218656\n6034934435761406706427864636568328000\n23951146041928082866135587776380551750\n95067625827960698145584333020095113100\n377389666165540953244592352291892721700\n1498293301493043187508381577755872596600\n5949105755928259715106809205795376486500\n23623985175715118288974865541854103729000\n93820969697840041204785894580506297666600\n372641034574519600278163693967644731577200\n1480212998448786189993816895482588794876100\n5880298213015725960249409584793845897453000\n23362265873332749085315221863910685052043000\n92826069736708789698985814872605121940117520\n368861487637974401172285738046404563498888040\n1465865132691170996866486179768828525073503120\n5825874245311064218315521996517139009907512400\n23156006494021191956342707682359261381151378400\n92045125813734238026462263037378063990076729140\n365907784099042279561985786395502921046971688680\n1454706556296192477283016662986999417820887445240\n5783773055153536355462596370912166360010757312400\n22997383338348585032434609379579328145757058837400\n91448418451315549893681152591738975450186892788720\n363666966399417651902778537050868948883301364345840\n1446307705450557558142084756547133980616347954754720\n5752360192132899378974200736267010150178656638229000\n22880174247360071687155809670095748237789263482394000\n91012248672832285155575331798825309656983959185522800\n362048725489728431058442528694228154899210914562189600\n1440324277491745714862934407631385920577295594888710800\n5730322394321999080637480976597986995845154517299172000\n22799367824217315491046998779230288685596678611381812000\n90717484605833107953850163563674201296374152790550788800\n360979990827377575399695442513786925991822149645733347100\n1436477076900698392827654028972389210647869585188175999800\n5716592448890534420436582360196242777068052430850904489000\n22750883079422934966181954039568885395604168260154104734000\n90548514656103281165404177077484163874504589675413336841320\n360401018730232861668242368169788454233176683658575855546640\n1434537388279162174875552955656216788418330721229233307371920\n5710294458198606715524045745816008575257432967999860738082400\n22731364477829069040643797488152187982274781237999445630443400\n90492479540310008180848641429024900729436748166512078795479440\n360262512886894560870925723424985925545493469115736766525399280\n1434316172802028812439386525037794432545609512554241705979627040\n5710703280600670271749409312650477833283445281465962347881848400\n22738029575969641265497648088901902565550598643635116137437818400\n90538699584315480675345180572173030215556020053747098801797858720\n360523470416823805932455583900004318515997845619425384417969851840\n1435655962552709084338171343030374339804777135234497512950129945720\n5717214010165655645594487649236004008072121335004636113518216598000\n22768554040484277746490328006606542277760904263965831539800616978000\n90678241309059123546891915017615620549691253503446529088945065877600\n)\neasyline() {\n  echo ${res[$1]}\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337657,"user_id":null,"body":"easyline() {\nn=$1;\nif ((n==0)); then\n    echo 1;\nelse\n    nom=$(echo \"$n*2\" | bc | xargs seq | cat | tr '\n' '*' | sed \"s\/.$\/\n\/g\" | bc)\n    denum=$(echo \"$n\" | bc | xargs seq | cat | tr '\n' '*' | sed \"s\/.$\/\n\/g\" | bc)\n    denum=$(echo \"$denum^2\" | bc)\n    echo \"$nom\/$denum\" | bc\nfi\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337658,"user_id":635,"body":"easyline() {\nnum=1;\ndenom=1;\n\nfor (( i=1; i<$(($1+1)); i++ ))\ndo\n  denom=\"$denom*$i\";\ndone\n\ndenom=$(echo $denom | bc | tr -cd [:digit:] )\n\nnum=$denom;\n\nfor (( i=$(( $1+1 )); i<$((2*$1+1)); i++ ))\ndo\n  num=\"$num*$i\";\ndone\n\nnum=$(echo $num | bc  | tr -cd [:digit:] )\n\nprintf \"%s\n\" $(echo \"$num\/($denom*$denom)\"  | bc | tr -cd [:digit:])\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337659,"user_id":null,"body":"bc <<< \"\ndefine binomial(n,k) {\n    res = 1\n    if (k > n - k) { k = n - k }\n    for (i=0; i<k; i++) {\n        res *= n - i\n        res \/= i + 1\n    }\n    return res\n}\ndefine pascal(t){\n    summ = 0\n    for (j=1; j<=t+1; j++) {\n    summ += (binomial(t,j))^2\n    }\n    return summ\n}\npascal($1)\n\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337660,"user_id":null,"body":"easyline() {\n  a=\"1\"\n  for ((i=1; i<=$1; i++))\n  do\n        a=`echo \"$a*($1+$i)\/$i\" | bc`\n  done\n  echo \"$a\"\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337661,"user_id":null,"body":"#!\/usr\/bin\/env bash\nbc <<BC\nn = $1\nr = 1\nfor (k = 1; k <= n; k++)\n\tr = r * 2 * (2 * k - 1) \/ k\nr\nBC\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337662,"user_id":null,"body":"easyline() {\n  bc <<< \"n = $1\n  define fact(x) {\n    if (x<=1) return 1;\n    return x*fact(x-1);\n  }\n\n  nf = fact(n)\n  for (x=0; x<=n; x++) {\n    sum += (nf\/(fact(n-x)*fact(x)))^2\n  }\n  sum\"\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337663,"user_id":null,"body":"easyline() {\n    # your code\nbc <<< \"\ndefine f(x) {\nif(x<=1) return (1);\nreturn (f(x-1)*x)\n}\n\nl=$1\nres=0;\nfor(i=0;i<=l;i++) {\nbc=f(l)\/(f(i)*f(l-i))\nres=res+bc^2\n}\nres\n\"\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337664,"user_id":1232,"body":"partialFactorial() {\n  # (partial_result, n_lower, n_higher)\n  # partialFactorial(1, 2, n) = n!\n  compute \"$1 `seq -f'* %g' $2 $3`\"\n}\n\ncompute() {\n  ret=`echo $@ | BC_LINE_LENGTH=0 bc`\n}\n\neasyline() {\n    n=$1\n    # 2n choose n = (2n)! \/ (n!)^2\n    \n    compute $n + 1\n    n_plus_one=$ret\n    \n    compute $n * 2\n    n_twice=$ret\n    \n    partialFactorial 1 2 $n\n    fact_n=$ret\n    \n    compute $fact_n '^' 2\n    fact_n_squared=$ret\n        \n    partialFactorial $fact_n $n_plus_one $n_twice\n    fact_n_twice=$ret\n    \n    compute $fact_n_twice \"\/\" $fact_n_squared\n    echo $ret\n    \n    echo -e \"n =\\t\"      $n              >&2\n    echo -e 'n + 1 =\\t'  $n_plus_one     >&2\n    echo -e '2n =\\t'     $n_twice        >&2\n    echo -e 'n! =\\t'     $fact_n         >&2\n    echo -e '(n!)^2 =\\t' $fact_n_squared >&2\n    echo -e '(2n)! =\\t'  $fact_n_twice   >&2\n    echo -e \"2n choose n is\\t\" $ret      >&2\n}\neasyline $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56efab15740d301ab40002ee":[{"id":337665,"user_id":492,"body":"#!\/bin\/bash\nabs () { echo -E \"${1#-}\";}\ngcdi() {\n    a=$(abs $1); b=$(abs $2)\n    while [ $b -ne 0 ]; do\n        remainder=$(( $a % $b ))\n        a=$b\n        b=$remainder\n    done\n    echo $a\n}\nlcmu() {\n    a=$(abs $(($1 * $2)))\n    b=$(gcdi $1 $2)\n    echo $(($a \/ $b))\n}\nsom() {\n    echo $(($1 + $2))\n}\nmaxi() {\n    echo $(($1>$2?$1:$2))\n}\nmini() {\n    echo $(($1<$2?$1:$2))\n}\noperArray() {\n    fct=$1; arr=$2; init=$3\n    for e in $arr; do\n        a=$($fct $init $e)\n        init=$a\n        res=\"${res} $a\"\n    done\n    echo $res\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337666,"user_id":null,"body":"#!\/bin\/sh\nabs(){\n  echo $(($1 * (($1>0) - ($1<0))))\n}\n\ngcd() {\n  if [ $(($1 % $2)) -eq 0 ]; then\n    echo $2\n  else\n    gcd $2 $(( $1 % $2 ))\n  fi\n}\n\ngcdi() {\n  echo $(gcd $(abs $1) $(abs $2))\n}\n\nlcmu() {\n  echo $(abs $(($1 * $2 \/ $(gcdi $1 $2) )))\n}\n\nsom() {\n  echo $(($1 + $2))\n}\n\nmaxi() {\n  echo $(($1 > $2 ? $1 : $2))\n}\n\nmini() {\n  echo $(($1 < $2 ? $1 : $2))\n}\n\noperArray() {\n  cur=$3\n  for el in $2; do\n    cur=$($1 $cur $el)\n    res+=($cur)\n  done\n  echo ${res[*]}\n}\n\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337667,"user_id":null,"body":"#!\/bin\/sh\nabs(){\n  echo $(($1 * (($1>0) - ($1<0))))\n}\n\ngcd() {\n  if [ $(($1 % $2)) -eq 0 ]; then\n    echo $2\n  else\n    gcd $2 $(( $1 % $2 ))\n  fi\n}\n\ngcdi() {\n  echo $(gcd $(abs $1) $(abs $2))\n}\n\nlcmu() {\n  echo $(($(abs $(($1 * $2))) \/ $(gcdi $1 $2)))\n}\n\nsom() {\n  echo $(($1 + $2))\n}\n\nmaxi() {\n  echo $(($1 > $2 ? $1 : $2))\n}\n\nmini() {\n  echo $(($1 < $2 ? $1 : $2))\n}\n\noperArray() {\n  cur=$3\n  for el in $2; do\n    cur=$($1 $cur $el)\n    res+=\"$cur \"\n  done\n  echo ${res::-1}\n}\n\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337668,"user_id":null,"body":"#!\/bin\/bash\nabs() {\n    echo ${1#-}\n}\ngcdi() {\n    x=$(abs $1) y=$(abs $2)\n    ! ((x)) && echo $y || gcdi  $((y%x)) $x\n}\nlcmu() {\n    echo $(abs $(($1 * $2 \/ $(gcdi $1 $2))))\n}\nsom() {\n    echo $(($1 + $2))\n}\nmaxi() {\n    echo $(($1 > $2  ? $1 : $2))\n}\nmini() {\n    echo $(($1 < $2 ? $1  : $2))\n}\noperArray() {\n   f=$1 arr=$2 init=$3\n   res=()\n   for i in $arr\n   {\n     init=$($f $init $i) \n     res+=($init)\n     \n   };\n   \n   echo ${res[*]}\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337669,"user_id":null,"body":"#!\/bin\/bash\nabs(){\n  echo ${1#-}\n}\ngcdi() {\n  var1=${1#-}\n  var2=${2#-}\n  min=$(mini $var1 $var2)\n  max=$(maxi $var1 $var2)\n  if [[ $((max%min)) -eq 0 ]]\n  then\n    echo $min\n  else\n    # find uoc so\n    tmp=$((max%min))\n    #cho $tmp\n   while [[ ! $tmp -eq 0 ]]\n    do\n        max=$min\n        min=$tmp\n        tmp=$((max%min))\n        #printf \"ttam %d\" $tmp\n    done\n\n    echo $min\n  fi\n    # your code\n}\nlcmu() {\n    var1=$(abs $1)\n    var2=$(abs $2)\n    up=$((var1*var2))\n    down=$(gcdi $var1 $var2)\n    # your code\n    echo $((up\/down))\n}\nsom() {\n    # your code\n    echo $(($1+$2))\n}\nmaxi() {\n    # your code\n    if [[ $1 -gt $2 ]]\n    then\n      echo $1\n    else\n      echo $2\n    fi\n}\nmini() {\n\n    if [[ $1 -lt $2 ]]\n    then\n      echo $1\n    else\n      echo $2\n    fi\n}\noperArray( ) {\narr=($(echo $2))\nlen=${#arr[@]}\nif [ $1 == \"gcdi\" ]\nthen\n  \n  head=\"${arr[0]}\"\n  rs=\"$(abs ${arr[0]})\"\n  for i in $(eval echo {1..$(($len-1))})\n  do\n    tmp=$(gcdi $head ${arr[$((i))]})\n    rs+=\" \"$tmp\n    head=$tmp\n  done\n  echo $rs\nelif [ $1 == \"lcmu\" ]\n  then  \n  head=\"${arr[0]}\"\n  rs=\"$(abs ${arr[0]})\"\n  for i in $(eval echo {1..$(($len-1))})\n  do\n    #echo $(abs ${arr[$i]})\n    tmp=$(lcmu $head ${arr[$((i))]})\n    rs+=\" \"$tmp\n    head=$tmp\n  done\n  echo $rs  \nelif [ $1 == \"som\" ]\n  then  \n  rs=\"${arr[0]}\"\n  head=\"${arr[0]}\"\n  for i in $(eval echo {1..$(($len-1))})\n  do\n    #echo $(abs ${arr[$i]})\n    tmp=$(som $head ${arr[$((i))]})\n    rs+=\" \"$tmp\n    head=$tmp\n  done\n  echo $rs   \nelif [ $1 == \"mini\" ]\n  then  \n  rs=\"${arr[0]}\"\n  head=\"${arr[0]}\"\n  for i in $(eval echo {1..$(($len-1))})\n  do\n    #echo $(abs ${arr[$i]})\n    tmp=$(mini $head ${arr[$((i))]})\n    rs+=\" \"$tmp\n    head=$tmp\n  done\n  echo $rs  \nelif [ $1 == \"maxi\" ]\n  then  \n  rs=\"${arr[0]}\"\n  head=\"${arr[0]}\"\n  for i in $(eval echo {1..$(($len-1))})\n  do\n    #echo $(abs ${arr[$i]})\n    tmp=$(maxi $head ${arr[$((i))]})\n    rs+=\" \"$tmp\n    head=$tmp\n  done\n  echo $rs     \nfi\n    # your code\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337670,"user_id":53,"body":"#!\/bin\/bash\nsom() {\n    echo $(( $1 + $2 )) \n}\nmini() {\n    echo $(( $1 < $2 ? $1 : $2 )) \n}\nmaxi() {\n    echo $(( $1 > $2 ? $1 : $2 )) \n}\ngcdi() {\nx=$1\ny=$2\nbc -l <<EOF\nscale = 0\ndefine f(a, b) {\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  if (a % b == 0) return b;\n  return f(b, a % b);\n}\nf($x,$y)\nEOF\n}\nlcmu() {\nx=$1\ny=$2\nbc -l <<EOF\nscale = 0\ndefine g(a, b) {\n  if (a < 0) a = -a;\n  if (b < 0) b = -b;\n  if (a % b == 0) return b;\n  return g(b, a % b);\n}\ndefine f(a, b) {\n  c = a * b;\n  if (c < 0) c = -c;\n  d = g(a, b);\n  return c \/ d;\n}\nf($x,$y)\nEOF\n}\noperArray() {\n    IFS=' ' read -r -a array <<< \"$2\"\n    oper=$1\n    i=0\n    acc=$3\n    x=0\n    y=0\n    ys=''\n    l=${#array[@]}\n    while (( $i < $l ))\n    do\n        x=${array[$i]}\n        if [ \"$oper\" = \"gcdi\" ]; then\n            y=$(gcdi $acc $x) \n        elif [ \"$oper\" = \"lcmu\" ]; then\n            y=$(lcmu $acc $x) \n        elif [ \"$oper\" = \"som\" ]; then\n            y=$(som $acc $x) \n        elif [ \"$oper\" = \"mini\" ]; then\n            y=$(mini $acc $x) \n        elif [ \"$oper\" = \"maxi\" ]; then\n            y=$(maxi $acc $x) \n        fi\n        acc=$y\n        ys=\"$ys $acc\"\n        i=$(( i+1 ))  \n    done\n    echo \"${ys##*( )}\"\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337671,"user_id":null,"body":"#!\/bin\/bash\ngcdi() {\n    # your code\n  m=$(($1 < 0 ? -$1 : $1))\n  n=$(($2 < 0 ? -$2 : $2))\n  if ((m < n)); then\n    temp=$n\n    n=$m\n    m=$temp\n  fi\n  while ((m % n != 0)); do\n    t=$((m % n))\n    m=$n\n    n=$t\n  done\n  echo $n\n}\nlcmu() {\n    # your code\n  x=$(($1 * $2))\n  x=$((x < 0 ? -x : x))\n  echo $((x \/ $(gcdi $1 $2)))\n}\nsom() {\n    # your code\n  echo $(($1 + $2))\n}\nmaxi() {\n    # your code\n  echo $(($1 > $2 ? $1 : $2))\n}\nmini() {\n    # your code\n  echo $(($1 > $2 ? $2 : $1))\n}\noperArray() {\n    # your code\n  local init=\"$3\"\n  if [[ -z \"$2\" ]]; then\n    echo \"$init\"\n    return 0\n  fi\n  \n  local -a array\n  for x in $2; do\n    init=$($1 \"$init\" \"$x\")\n    array+=(\"$init\")\n  done\n  echo \"${array[*]}\"\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337672,"user_id":null,"body":"#!\/bin\/bash\nabs() {\nlocal -i n=\"$1\"\n[ $n -lt 0 ] && echo $((-n)) || echo $n\n}\n\ngcdi() {\n    # your code\n    local -i a=$(abs $1)\n    local -i b=$(abs $2)\n    local -i c=$(maxi $a $b)\n    local -i d=$(mini $a $b)\n    local -i r=$((c%d))\n    [ $r -eq 0 ] && echo \"$d\" || gcdi \"$d\" \"$r\"\n}\n\nlcmu() {\n    # your code\n    local -i a=$(abs $1)\n    local -i b=$(abs $2)\n    echo $((a*b\/$(gcdi \"$a\" \"$b\")))\n}\nsom() {\n    # your code\n    local -i a=\"$1\"\n    local -i b=\"$2\"\n    echo $((a+b))\n}\nmaxi() {\n    # your code\n    local -i a=\"$1\"\n    local -i b=\"$2\"\n    [ $a -gt $b ] && echo $a || echo $b\n}\nmini() {\n    # your code\n    local -i a=\"$1\"\n    local -i b=\"$2\"\n    [ $a -lt $b ] && echo $a || echo $b\n}\noperArray() {\n    # your code\n    local f=\"$1\"\n    local arr=\"$2\"\n    local init=\"$3\"\n    echo \"$arr\" | grep -oE '\\S+' | while read n;\n    do\n      init=\"$($f $init $n)\"\n      echo -n $init\" \"\n    done | sed -e 's\/\\s$\/\/'\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337673,"user_id":null,"body":"#!\/bin\/bash\ngcdi() {\n    if [[ $1 -gt $2 ]]\n    then\n        num=$1\n        den=$2\n    else\n        num=$2\n        den=$1\n    fi\n    r=`expr $num % $den`\n  \n    while [[ $r -ne 0 ]]\n    do\n        num=$den\n        den=$r\n        r=`expr $num % $den`\n    done\n    if [[ $den -lt 0 ]]\n    then\n        echo \"$((den=-den))\"\n    else\n        echo \"$den\"\n    fi        \n}\n\nlcmu() {\n    if [[ $1 -gt $2 ]]\n    then\n        num=$1\n        den=$2\n    else\n        num=$2\n        den=$1\n    fi\n    r=`expr $num % $den`\n  \n    while [[ $r -ne 0 ]]\n    do\n        num=$den\n        den=$r\n        r=`expr $num % $den`\n    done\n    gcd=$den\n#    lcm=$(($1 \\* $2 \/ $gcd))\n    lcm=$(bc -l <<< \"scale=0; $1 * $2 \/ $gcd\")\n    if [[ $lcm -lt 0 ]]\n    then\n        echo \"$((lcm=-lcm))\"\n    else\n        echo \"$lcm\"\n    fi\n\n}\nsom() {\n    echo $(($1 + $2))\n}\nmaxi() {\n    if [[ $1 -ge $2 ]]\n    then\n        echo \"$1\"\n    else\n        echo \"$2\"\n    fi\n}\nmini() {\n    if [[ $1 -le $2 ]]\n    then\n        echo \"$1\"\n    else\n        echo \"$2\"\n    fi\n}\n\n\noperArray() {\n    j=1\n    aredu=($2)\n    r[0]=$($1 \"${aredu[0]}\" \"$3\")\n    for i in \"${aredu[@]:1:${#aredu[@]}-1}\"\n    do\n        r[$j]=$($1 \"${r[$((j-1))]}\" \"$i\")\n        ((j+=1))\n    done\n\n    echo \"${r[*]}\"\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337674,"user_id":null,"body":"#!\/bin\/bash\ngcdi() {\n    local min=$(mini ${1#-} ${2#-})\n    local max=$(maxi ${1#-} ${2#-})\n    if (( $min == 0 ))\n    then\n      echo $max\n    else\n      gcdi $(( $max % $min )) $min\n    fi\n}\nlcmu() {\n    local a=${1#-}\n    local b=${2#-}\n    local gcd=$(gcdi $a $b)\n    echo $((($a*$b)\/$gcd))\n}\nsom() {\n    echo $(($1+$2))\n}\nmaxi() {\n    if (( $1 > $2 ))\n    then\n      echo $1\n    else\n      echo $2\n    fi\n}\nmini() {\n    if (( $1 < $2 ))\n    then\n      echo $1\n    else\n      echo $2\n    fi\n}\noperArray() {\n  local funcName=$1\n  local ARRAY=($2)\n  local init=$3\n  local resArray=($4)\n\n  if [ ${#ARRAY[@]} -eq 0 ]\n  then\n    echo ${resArray[*]}\n  else\n    init=$($funcName $init ${ARRAY[0]})\n    resArray+=($init)\n    operArray \"$funcName\" \"$(echo ${ARRAY[@]:1})\" $init \"$(echo ${resArray[*]})\"\n  fi\n}\noperArray \"$1\" \"$2\" $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56f3a1e899b386da78000732":[{"id":337675,"user_id":492,"body":"#!\/bin\/bash\npartlist() {\n    A=($1); j=1; lg=${#A[@]}\n    while [ $j -lt $lg ]; do\n        B=\"${A[@]:0:j}\"\n        C=\"${A[@]:j}\"\n        res=\"${res}($B,$C)\"\n        j=$((j + 1))\n    done\n    echo $res\n}\npartlist \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337676,"user_id":null,"body":"#!\/bin\/bash\n# mostly copied (with all respect) from g964's solution\npartlist() {\n    A=($1)\n    for ((j=1; j<${#A[@]}; j++)); do\n        res=\"${res}(${A[@]:0:j},${A[@]:j})\"\n    done\n    echo $res\n}\n\npartlist \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337677,"user_id":null,"body":"#!\/bin\/bash\npartlist() {\n  local a list\n  read -ra a <<< \"$1\"\n  for i in $(seq 1 $((${#a[@]} - 1))); do\n    list=\"${list}(${a[*]:0:i},${a[*]:i})\"\n  done\n  echo \"$list\"\n}\npartlist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337678,"user_id":null,"body":"#!\/bin\/bash                                                \n                                                           \npartlist() {                                               \n    input=$( echo \"$1\" | sed 's\/ *$\/\/' )                   \n    spaces=$( echo \"$input\" | grep -o \" \" | wc -l )        \n                                                           \n    for ((i=1;i<=$spaces;i++))                             \n    do                                                     \n        res=\"$res($( echo \"$input\" | sed 's\/ \/,\/'\"$i\"'' ))\"\n    done                                                   \n                                                           \n    echo \"$res\"                                            \n}                                                          \n                                                           \npartlist \"$1\"                                              \n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337679,"user_id":null,"body":"#!\/bin\/bash\narray=($1)\nN=${#array[@]}\nM=$(( N-1 ))\n\nfor i in $(eval echo \"{1..$M}\"); do\n  first=\"${array[@]:0:$i}\"\n  second=\"${array[@]:$i}\"\n  printf \"($first,$second)\"\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337680,"user_id":null,"body":"#!\/bin\/bash\narr=($1)\nlength=${#arr[@]}\nfor i in $(seq 1 $(($length - 1))); do\n  list=\"$list(${arr[@]:0:i},${arr[@]:i:$length})\"\ndone\necho \"$list\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337681,"user_id":null,"body":"#!\/bin\/bash\n\narr=($1)\nlength=${#arr[@]}\nfor (( i = 1; i < \"$length\"; i++ )); do\n  list=\"$list(${arr[@]:0:i},${arr[@]:i:$length})\"\ndone\necho \"$list\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337682,"user_id":null,"body":"#!\/bin\/bash\npartlist() {\n  read -a arr <<< \"$1\"\n  for (( i = 1; i < \"${#arr[@]}\"; i++ )); do\n    echo -n \"(${arr[@]:0:i},${arr[@]:i:${#arr[@]}})\"\n  done\n}\npartlist \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337683,"user_id":null,"body":"#!\/bin\/bash\npartlist() {\n  words_list=($1)\n  size=${#words_list[@]}\n  for (( index=1; index<$size; index++))\n  do\n    result=\"${result}(\"${words_list[@]:0:index}\",\"${words_list[@]:index}\")\"\n  done\n  echo $result\n}\npartlist \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337684,"user_id":null,"body":"#!\/bin\/bash\npartlist() {\n  #data=$1;\n  \n  #IFS=\" \";\n  read -a arr <<< $1;\n  length=${#arr[@]};\n  result=\"\";\n  \n  for (( i=0; i<$(($length - 1)); i++ )); do\n    result=\"$result(\";\n    for (( j=0; j<$length; j++ )); do \n     item=${arr[$j]};\n     separator=\" \";\n  \n     if [[ $j -eq $i ]]; then\n       separator=\",\";\n     fi;\n     \n     if [[ $j -eq $(($length - 1)) ]]; then\n       separator=\"\";\n     fi\n     \n     result=\"$result$item$separator\";\n    done\n    result=\"$result)\";\n  done;\n  echo $result;\n}\npartlist \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"56fe17fcc25bf3e19a000292":[{"id":337685,"user_id":492,"body":"#!\/bin\/bash\necho $(($1*$2*2+$2))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337686,"user_id":492,"body":"#!\/bin\/bash\necho $(($1*$2*2+$2))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337687,"user_id":53,"body":"#!\/bin\/bash\nn=$1\np=$2\necho $(( n*p*2+p ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337688,"user_id":null,"body":"#!\/bin\/bash\n\nn=$1; p=$2\necho \"(2*$n + 1) * $p\" |bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337689,"user_id":null,"body":"#!\/bin\/bash\necho $(bc <<< \"$2 * (2 * $1 + 1)\")\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337690,"user_id":null,"body":"#!\/usr\/bin\/env bash\necho $(((2 * $1 + 1) * $2))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337691,"user_id":17,"body":"#!\/bin\/bash\necho $(($2*$(($((2*$1))+1))))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337692,"user_id":null,"body":"echo $((2*$1*$2+$2))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337693,"user_id":null,"body":"echo \"(2*$1+1)*$2\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337694,"user_id":null,"body":"#!\/bin\/bash\nfunction v1 ()\n{\n  echo $((( $1 * 2 + 1) * $2))\n}\nv1 $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5700c9acc1555755be00027e":[{"id":337695,"user_id":1300,"body":"#!\/usr\/bin\/env bash\n\nfor i in $(seq 1 ${#1}) ; do\n    [[ $(grep \"${1:i:${#1}-i}${1:0:i}\" <<< $2) == '' ]] && { echo false; exit; }\ndone\necho true\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337696,"user_id":492,"body":"#!\/bin\/bash\ncontainAllRots() {\n    str=$1; len=${#str}; \n    local result=\"true\"\n    strstr=$str$str\n    for n in $(seq 1 $len) \n    do\n        r=$(echo ${strstr:n:$len})\n        res=\"${res} $r\"\n    done\n    allr=$(echo $(echo -e \"${res\/\/ \/\\\n}\" | sort -u))\n    for s in $allr\n    do\n        b=$(grep -c \"$s\" <<< \"$2\")\n        if [ $b -eq 0 ]\n        then\n            result=\"false\"\n            break\n        fi\n    done\n    echo $result\n}\ncontainAllRots $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337697,"user_id":null,"body":"#!\/bin\/bash\nfor i in $(seq 1 ${#1}); do\n  grep -q \"${1:i}${1:0:i}\" <<< \"$2\" || { echo \"false\"; exit; }\ndone\necho \"true\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337698,"user_id":null,"body":"#!\/bin\/bash\ncontainAllRots() {\n    res=\"true\"\n    s=$1\n    for (( i=0; i<${#s}; i++ ))\n    do\n      s=${s:1:${#s}-1}${s:0:1}\n      [[ $2 =~ $s ]] || res=\"false\"\n    done\n    echo $res\n}\ncontainAllRots $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337699,"user_id":null,"body":"str=\"$1\"\narr=\"$2\"\nlen=\"${#str}\"\n\nfor (( i=0; i < $len; i++ )); do\n    if (( ! $(grep -c \"$str\" <<< \"$arr\") )); then\n        echo 'false'\n        exit 0\n    fi\n    str=${str:1:$((len-1))}${str:0:1}\ndone\n\necho 'true'\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337700,"user_id":null,"body":"# returns \"true\" or \"false\"\n#!\/bin\/bash\ncontainAllRots() {\n    if [ ${#1} -eq 0 ]; then echo true;\n    else\n    s=$1\n    l=($2)\n    for i in $(seq 0 ${#1})\n    do \n    s=${s:(-1)}${s:0:(-1)}\n    if [[ ${l[@]\/$s\/} = ${l[@]} ]]; then echo false; break; fi\n    if [ $i -eq ${#1} ]; then echo true; fi\n    done\n    fi\n}\ncontainAllRots $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337701,"user_id":null,"body":"#!\/bin\/bash\n\ncontainAllRots() {\n    rotated=$1\n    for (( i=0; i<${#rotated}; i++ )); do\n      [[ \"$2\" =~ $rotated ]] || return 1\n      rotated=${rotated:(-1)}${rotated::(-1)}\n    done\n    return 0\n}\n\ncontainAllRots $1 \"$2\"\n\nif [ $? -eq 0 ]; then\n  echo 'true'\nelse\n  echo 'false'\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337702,"user_id":826,"body":"# returns \"true\" or \"false\"\n#!\/bin\/bash\ncontainAllRots() {\nIFS=' ' read -r -a str_arr <<< \"$2\"\nROTS=() # string rotations\nSTR=$1\nfor((i=0; i<${#STR}; i++)); do\n  CHAR=${STR:0:1}\n  STR=\"${STR:1}$CHAR\"\n  ROTS+=($STR)\n  done\nCNT=0\nfor i in ${!ROTS[@]}; do\n  for j in ${!str_arr[@]}; do\n    if [[ ${ROTS[$i]} == ${str_arr[$j]} ]]; then\n      CNT=$((CNT+1))\n    fi\n  done\ndone\n[[ $CNT -eq ${#ROTS[@]} ]] && echo \"true\" || echo \"false\"\n}\ncontainAllRots $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337703,"user_id":826,"body":"# returns \"true\" or \"false\"\n#!\/bin\/bash\ncontainAllRots() {\nIFS=' ' read -r -a str_arr <<< \"$2\"\nROTS=() # string rotations\nSTR=$1\nfor((i=0; i<${#STR}; i++)); do\n  CHAR=${STR:0:1}\n  STR=\"${STR:1}$CHAR\"\n  ROTS+=($STR)\n  done\nCNT=0\nfor i in ${!ROTS[@]}; do\n  for j in ${!str_arr[@]}; do\n    if [[ ${ROTS[$i]} == ${str_arr[$j]} ]]; then\n      CNT=$((CNT+1))\n    fi\n  done\ndone\nif [[ $CNT -eq ${#ROTS[@]} ]]; then\n  echo \"true\"\n  exit\n  fi\necho \"false\"\n}\ncontainAllRots $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337704,"user_id":null,"body":"# returns \"true\" or \"false\"\n#!\/bin\/bash\ncontainAllRots() {\n    strng=$1\n    arr=$2\n    arr=($arr)\n    #echo $arr\n    res=false\n    allrots=()\n    count=\"\"\n    #newstr=$strng\n    for (( d=0; d<${#strng}; d++ ))\n    do\n    strng=${strng:${#strng}-1:1}$strng\n    #echo $newstr\n    strng=${strng::${#strng}-1}\n    #echo $strng\n    allrots+=($strng)\n    #count=$count$newstr\" \"\n    done\n    #echo ${allrots[@]}\n    for r in \"${allrots[@]}\"\n    do\n        #echo \"in here\"\n        res=false\n        #echo $r\n        for x in \"${arr[@]}\"\n        do \n            #echo $r\n            #echo $x\n            if [[ \"$x\" == \"$r\" ]];\n            then\n                res=true\n                break\n            fi\n        done\n        if [[ $res == false ]];\n        then\n            break 2\n        fi\n    done\n    if [ ${#arr[@]} -eq 0 ] || [ ${#allrots[@]} -eq 0 ];\n    then\n        res=true\n    fi\n    echo $res\n}\ncontainAllRots $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"57036f007fd72e3b77000023":[{"id":337705,"user_id":277,"body":"#!\/bin\/bash\nfunction Solution\n{\n    function main\n    {\n        echo \"Hello World!\"\n    }\n    main\n}\nSolution","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337706,"user_id":null,"body":"#!\/bin\/bash\n\nfunction Solution\n{\n    function main\n    {\n        echo $1\n    }\n    main \"$1\"\n}\nSolution  \"Hello World!\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337707,"user_id":null,"body":"#!\/bin\/bash\nfunction Solution {\n    function main {\n        echo -e \"Hello World!\\r\n\"\n    }\n    main\n}\nSolution","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337708,"user_id":null,"body":"#!\/bin\/bash\nfunction Solution\n{\n    function main\n    {\n        #\u250c\u2500\u2500\u2510\u2591\u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\u250c\u2510\u2591\u250c\u2510\u2591\u2591\n        #\u2502\u250c\u2510\u2502\u2591\u2502\u250c\u2500\u2510\u2502\u2502\u250c\u2500\u2510\u2502\u2502\u2502\u2591\u2502\u2502\u2591\u2591\n        #\u2502\u2514\u2518\u2514\u2510\u2502\u2502\u2591\u2502\u2502\u2502\u2514\u2500\u2500\u2510\u2502\u2514\u2500\u2518\u2502\u2591\u2591\n        #\u2502\u250c\u2500\u2510\u2502\u2502\u2514\u2500\u2518\u2502\u2514\u2500\u2500\u2510\u2502\u2502\u250c\u2500\u2510\u2502\u2591\u2591\n        #\u2502\u2514\u2500\u2518\u2502\u2502\u250c\u2500\u2510\u2502\u2502\u2514\u2500\u2518\u2502\u2502\u2502\u2591\u2502\u2502\u2591\u2591\n        #\u2514\u2500\u2500\u2500\u2518\u2514\u2518\u2591\u2514\u2518\u2514\u2500\u2500\u2500\u2518\u2514\u2518\u2591\u2514\u2518\u2591\u2591\n        #\u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2500\u2510\u2591\n        #\u2514\u2510\u250c\u2510\u2502\u2502\u250c\u2500\u2500\u2518\u2502\u250c\u2500\u2500\u2518\u2514\u2500\u2500\u2510\u2500\u2502\u2591\n        #\u2591\u2502\u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2510\u2502\u2514\u2500\u2500\u2510\u2591\u2591\u250c\u2518\u250c\u2518\u2591\n        #\u2591\u2502\u2502\u2502\u2502\u2502\u250c\u2500\u2500\u2518\u2502\u250c\u2500\u2500\u2518\u2591\u250c\u2518\u250c\u2518\u2591\u2591\n        #\u250c\u2518\u2514\u2518\u2502\u2502\u2514\u2500\u2500\u2510\u2502\u2514\u2500\u2500\u2510\u250c\u2518\u2500\u2514\u2500\u2510\u2591\n        #\u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2518\u2591\n        #\u250c\u2500\u2510\u2591\u250c\u2510\u250c\u2510\u2591\u250c\u2510\u250c\u2500\u2500\u2500\u2500\u2510\u250c\u2500\u2500\u2500\u2510\n        #\u2502\u2502\u2514\u2510\u2502\u2502\u2502\u2502\u2591\u2502\u2502\u2502\u250c\u2510\u250c\u2510\u2502\u2502\u250c\u2500\u2510\u2502\n        #\u2502\u250c\u2510\u2514\u2518\u2502\u2502\u2502\u2591\u2502\u2502\u2514\u2518\u2502\u2502\u2514\u2518\u2502\u2514\u2500\u2500\u2510\n        #\u2502\u2502\u2514\u2510\u2502\u2502\u2502\u2502\u2591\u2502\u2502\u2591\u2591\u2502\u2502\u2591\u2591\u2514\u2500\u2500\u2510\u2502\n        #\u2502\u2502\u2591\u2502\u2502\u2502\u2502\u2514\u2500\u2518\u2502\u2591\u2591\u2502\u2502\u2591\u2591\u2502\u2514\u2500\u2518\u2502\n        #\u2514\u2518\u2591\u2514\u2500\u2518\u2514\u2500\u2500\u2500\u2518\u2591\u2591\u2514\u2518\u2591\u2591\u2514\u2500\u2500\u2500\u2518\n\n        echo \"Hello World!\"\n    }\n    main\n}\nSolution","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337709,"user_id":null,"body":"#!\/bin\/bash\nhello() {\n  echo \"Hello World!\"\n}\nhello","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337710,"user_id":666,"body":"#!usr\/bin\/env bash\n\nhello_world() {\n  echo \"Hello World!\"\n}\n\n\nhello_world\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337711,"user_id":null,"body":"#!\/usr\/bin\/sh\necho Hello World!\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337712,"user_id":null,"body":"#!\/bin\/bash\nfunction Solution\n{\n    function main\n    {\n       para1=$1\n       if  [[ -z \"$para1\" ]] ; then\n         echo \"Hello World!\"\n       fi\n    }\n    main\n}\nSolution","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337713,"user_id":null,"body":"#!\/bin\/bash\nfunction Solution\n{\n    function main\n    {\n        echo \"Hello World!\"\n    }\n    main\n}\nSolution $@","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337714,"user_id":null,"body":"#!\/bin\/bash\nfunction Solution()\n{\n    function main()\n    {\n      echo \"Hello World!\"\n    }\n    $1\n}\nSolution main","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5726f813c8dcebf5ed000a6b":[{"id":337715,"user_id":1609,"body":"#!\/bin\/bash\nruby -rprime -e \"puts ($2..$3).select{|x|x>0&&x.prime_division.map{|x,y|y}.inject(:+)==$1}\" | paste -sd' '","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337716,"user_id":null,"body":"#!\/bin\/bash\nlist=$(eval echo {$2..$3})\nfactor $list | awk -vk=$1 '\n  BEGIN { k+=1; printf \"[ \" }\n  {if (NF==k) {printf \"%d \",substr($1,1,length($1)-1)}}\n  END { printf \"]\n\" }'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337717,"user_id":492,"body":"#!\/bin\/bash\ncnt_div(){\n    num=$1\n    cnt=0\n    for (( i=2; $i*$i<=$1; i++ ));do\n        while [ $((num%$i)) == 0 ];do\n            num=$((num\/$i))\n            cnt=$(( $cnt + 1 ))\n        done\n    done\n    if [ $(($num)) -gt 1 ]; then\n            cnt=$(( $cnt + 1 ))\n    fi\n    echo $cnt\n}\ncount_kprimes(){\n    d=$1;m=$2;n=$3;res=()\n    for (( i=$m;i <= $n;i++ )) do\n        f=$(cnt_div $i)\n        if [ $(($f)) -eq $d ]; then\n            res[$i]=$i  \n        fi\n    done\n    echo ${res[*]}\n}\ncount_kprimes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337718,"user_id":492,"body":"#!\/bin\/bash\ncnt_div(){\n    num=$1\n    cnt=0\n    for (( i=2; $i*$i<=$1; i++ ));do\n        while [ $((num%$i)) == 0 ];do\n            num=$((num\/$i))\n            cnt=$(( $cnt + 1 ))\n        done\n    done\n    if [ $(($num)) -gt 1 ]; then\n            cnt=$(( $cnt + 1 ))\n    fi\n    echo $cnt\n}\ncount_kprimes(){\n    d=$1;m=$2;n=$3;res=()\n    for (( i=$m;i <= $n;i++ )) do\n        f=$(cnt_div $i)\n        if [ $(($f)) -eq $d ]; then\n            res[$i]=$i  \n        fi\n    done\n    echo ${res[*]}\n}\ncount_kprimes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337719,"user_id":null,"body":"#!\/bin\/bash\ncount_kprimes(){\n    res=\"\"\n    for i in $(seq $2 $3) \n    do\n        n=$i\n        k=0\n        j=2\n        while (( $j*$j<=$n )); do\n          while [ $(($n%$j)) == 0 ]; do\n              (( n\/=$j ))\n              (( k+=1 ))\n          done\n          ((j+=1))\n        done\n        if [ $n -gt 1 ]; then\n                ((k += 1))\n        fi\n        if [ $k -eq $1 ]; then\n        res=$res\"$i \"\n        fi\n    done\n    echo $res\n}\n\ncount_kprimes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337720,"user_id":null,"body":"#!\/bin\/bash\n\nnum=\"\"\nres=\"\"\nfor((i=$2;i<=$3;i++)) \ndo\n    ((num=$(factor $i | awk '{print NF-1}')))\n    [ \"$num\" -eq \"$1\" ] && res=\"$res $i\"\ndone\necho $res","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337721,"user_id":53,"body":"#!\/bin\/bash\n\nawk -v k=$1 -v start=$2 -v nd=$3 'BEGIN {\n  cnt=0\n  s=\"\"\n  for (m=start; m<=nd; m++) {\n    j=0\n    n=m\n    for (i=2; i<=n\/i; i++) {\n      while (n%i == 0) {\n        n=n\/i\n        j++\n      }\n    }\n    if (n>1) {\n      j++\n    }\n    if (j == k) {\n      cnt++\n      if (cnt > 1) {\n        s = sprintf(\"%s \", s)\n      }\n      s = sprintf(\"%s%d\", s, m)\n    }\n  }\n  print s\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337722,"user_id":null,"body":"#!\/bin\/bash\n\ncount_kprimes(){\n  local begin=\"$2\"\n  local end=\"$3\"\n  local -a result=()\n  while ((begin <= end)); do\n    if (($(factor $begin | cut -d ' ' -f2- | wc -w) == \"$1\")); then\n      result+=(\"$begin\")\n    fi\n    ((begin += 1))\n  done\n  echo \"${result[@]}\"\n}\ncount_kprimes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337723,"user_id":null,"body":"#!\/bin\/bash\n\ncount_kprimes(){\n    local res\n    for ((i = ${2}; i<= ${3}; i++)) do\n        k=$(factor \"${i}\" | cut -d' ' -f2- | tr ' ' '\n' | wc -l)\n        ((k == ${1})) && res=\"${res:- }$i \" \n    done\n        echo \"${res:1:-1}\"\n}\ncount_kprimes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337724,"user_id":null,"body":"#!\/bin\/bash\n\nprime_factors(){\n  local n=${1}\n  while ((n%2==0)); do\n    factors+=(2)\n    ((n=n\/2))\n  done\n  local sqrt_n=$(bc <<< \"sqrt($n)\")\n  for ((i=3;i<=sqrt_n;i++)); do\n    while ((n%i==0)); do\n      factors+=(${i})\n      ((n=n\/i))\n    done\n  done\n  if ((n>2)); then\n    factors+=(${n})\n  fi\n}\n\n\ncount_kprimes(){\n  local k_primes=${1}\n  local start=${2}\n  local stop=${3}\n  local result=()\n  local j=${start}\n  while ((j<=stop)); do\n    factors=()\n    prime_factors $j\n    if [[ ${k_primes} -eq ${#factors[@]} ]]; then\n      result+=(${j})\n    fi\n    ((j++))\n  done\n  echo ${result[@]}\n}\ncount_kprimes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"573182c405d14db0da00064e":[{"id":337725,"user_id":492,"body":"consec_kprimes() {\n    d=$1\n    arr=($2)\n    arraylength=${#arr[@]}\n    cnt=0\n    for (( i=0; i < ${arraylength} - 1; i++ ));\n    do\n      f1=$(echo $(factor ${arr[$i]}) | cut -d ':' -f2 | wc -w)\n      f2=$(echo $(factor ${arr[$i+1]}) | cut -d ':' -f2 | wc -w)\n      if [[ ($f1 -eq d) && ($f1 -eq $f2) ]]\n      then\n        cnt=$((cnt+1))\n      fi\n    done\n    echo $cnt\n}\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337726,"user_id":492,"body":"consec_kprimes() {\n    d=$1\n    arr=($2)\n    arraylength=${#arr[@]}\n    cnt=0\n    for (( i=0; i < ${arraylength} - 1; i++ ));\n    do\n      f1=$(echo $(factor ${arr[$i]}) | cut -d ':' -f2 | wc -w)\n      f2=$(echo $(factor ${arr[$i+1]}) | cut -d ':' -f2 | wc -w)\n      if [[ ($f1 -eq d) && ($f1 -eq $f2) ]]\n      then\n        cnt=$((cnt+1))\n      fi\n    done\n    echo $cnt\n}\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337727,"user_id":null,"body":"k_prime_factors() {\n    factor \"${1}\" | cut -d' ' -f2- | tr ' ' '\n' | wc -l\n}\nconsec_kprimes() {\n    unset list_info\n    declare -a list_info\n    while read -r item; do\n        list_info+=(\"$item\")\n    done <<< \"$(tr ' ' '\n' <<< \"${2}\")\"\n    res=0\n    last_query=$(k_prime_factors \"${list_info[0]}\")\n    for ((i=1; i<${#list_info[@]}; i++)); do\n        if (( last_query == ${1})); then\n            last_query=$(k_prime_factors \"${list_info[i]}\")\n            (( last_query == ${1})) && res=$((res+1))\n        else \n            last_query=$(k_prime_factors \"${list_info[i]}\")\n        fi \n    done\n    echo ${res}\n}\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337728,"user_id":null,"body":"\nprime_factors(){\n  local n=${1}\n  while ((n%2==0)); do\n    factors+=(2)\n    ((n=n\/2))\n  done\n  local sqrt_n=$(bc <<< \"sqrt($n)\")\n  for ((i=3;i<=sqrt_n;i++)); do\n    while ((n%i==0)); do\n      factors+=(${i})\n      ((n=n\/i))\n    done\n  done\n  if ((n>2)); then\n    factors+=(${n})\n  fi\n}\n\nconsec_kprimes() {\n  local target_k=${1}\n  local arr=( ${2} )\n  local counts=0\n  local counts_factors=()\n  for k in ${!arr[@]}; do\n    ((k_1=k-1))\n    local factors=()\n    prime_factors ${arr[k]}\n    counts_factors+=(${#factors[@]})\n    if [[ ${k_1} -ge 0 ]] && [[ ${counts_factors[k]} -eq ${counts_factors[k_1]} ]] && [[ ${target_k} -eq ${counts_factors[k]} ]]; then\n      ((counts+=1))\n    fi\n  done\n\n  echo ${counts}\n}\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337729,"user_id":null,"body":"consec_kprimes() {\nprimes=(2      3      5      7     11     13     17     19     23     29 \n     31     37     41     43     47     53     59     61     67     71 \n     73     79     83     89     97    101    103    107    109    113 \n    127    131    137    139    149    151    157    163    167    173 \n    179    181    191    193    197    199    211    223    227    229 \n    233    239    241    251    257    263    269    271    277    281 \n    283    293    307    311    313    317    331    337    347    349 \n    353    359    367    373    379    383    389    397    401    409 \n    419    421    431    433    439    443    449    457    461    463 \n    467    479    487    491    499    503    509    521    523    541 \n    547    557    563    569    571    577    587    593    599    601 \n    607    613    617    619    631    641    643    647    653    659 \n    661    673    677    683    691    701    709    719    727    733 \n    739    743    751    757    761    769    773    787    797    809 \n    811    821    823    827    829    839    853    857    859    863 \n    877    881    883    887    907    911    919    929    937    941 \n    947    953    967    971    977    983    991    997   1009   1013 \n   1019   1021   1031   1033   1039   1049   1051   1061   1063   1069 \n   1087   1091   1093   1097   1103   1109   1117   1123   1129   1151 \n   1153   1163   1171   1181   1187   1193   1201   1213   1217   1223 \n   1229   1231   1237   1249   1259   1277   1279   1283   1289   1291 \n   1297   1301   1303   1307   1319   1321   1327   1361   1367   1373 \n   1381   1399   1409   1423   1427   1429   1433   1439   1447   1451 \n   1453   1459   1471   1481   1483   1487   1489   1493   1499   1511 \n   1523   1531   1543   1549   1553   1559   1567   1571   1579   1583 \n   1597   1601   1607   1609   1613   1619   1621   1627   1637   1657 \n   1663   1667   1669   1693   1697   1699   1709   1721   1723   1733 \n   1741   1747   1753   1759   1777   1783   1787   1789   1801   1811 \n   1823   1831   1847   1861   1867   1871   1873   1877   1879   1889 \n   1901   1907   1913   1931   1933   1949   1951   1973   1979   1987 \n   1993   1997   1999   2003   2011   2017   2027   2029   2039   2053 \n   2063   2069   2081   2083   2087   2089   2099   2111   2113   2129 \n   2131   2137   2141   2143   2153   2161   2179   2203   2207   2213 \n   2221   2237   2239   2243   2251   2267   2269   2273   2281   2287 \n   2293   2297   2309   2311   2333   2339   2341   2347   2351   2357 \n   2371   2377   2381   2383   2389   2393   2399   2411   2417   2423 \n   2437   2441   2447   2459   2467   2473   2477   2503   2521   2531 \n   2539   2543   2549   2551   2557   2579   2591   2593   2609   2617 \n   2621   2633   2647   2657   2659   2663   2671   2677   2683   2687 \n   2689   2693   2699   2707   2711   2713   2719   2729   2731   2741 \n   2749   2753   2767   2777   2789   2791   2797   2801   2803   2819 \n   2833   2837   2843   2851   2857   2861   2879   2887   2897   2903 \n   2909   2917   2927   2939   2953   2957   2963   2969   2971   2999 \n   3001   3011   3019   3023   3037   3041   3049   3061   3067   3079 \n   3083   3089   3109   3119   3121   3137   3163   3167   3169   3181 \n   3187   3191   3203   3209   3217   3221   3229   3251   3253   3257 \n   3259   3271   3299   3301   3307   3313   3319   3323   3329   3331 \n   3343   3347   3359   3361   3371   3373   3389   3391   3407   3413 \n   3433   3449   3457   3461   3463   3467   3469   3491   3499   3511 \n   3517   3527   3529   3533   3539   3541   3547   3557   3559   3571 \n   3581   3583   3593   3607   3613   3617   3623   3631   3637   3643 \n   3659   3671   3673   3677   3691   3697   3701   3709   3719   3727 \n   3733   3739   3761   3767   3769   3779   3793   3797   3803   3821 \n   3823   3833   3847   3851   3853   3863   3877   3881   3889   3907 \n   3911   3917   3919   3923   3929   3931   3943   3947   3967   3989 \n   4001   4003   4007   4013   4019   4021   4027   4049   4051   4057 \n   4073   4079   4091   4093   4099   4111   4127   4129   4133   4139 \n   4153   4157   4159   4177   4201   4211   4217   4219   4229   4231 \n   4241   4243   4253   4259   4261   4271   4273   4283   4289   4297 \n   4327   4337   4339   4349   4357   4363   4373   4391   4397   4409 \n   4421   4423   4441   4447   4451   4457   4463   4481   4483   4493 \n   4507   4513   4517   4519   4523   4547   4549   4561   4567   4583 \n   4591   4597   4603   4621   4637   4639   4643   4649   4651   4657 \n   4663   4673   4679   4691   4703   4721   4723   4729   4733   4751 \n   4759   4783   4787   4789   4793   4799   4801   4813   4817   4831 \n   4861   4871   4877   4889   4903   4909   4919   4931   4933   4937 \n   4943   4951   4957   4967   4969   4973   4987   4993   4999   5003 \n   5009   5011   5021   5023   5039   5051   5059   5077   5081   5087 \n   5099   5101   5107   5113   5119   5147   5153   5167   5171   5179 \n   5189   5197   5209   5227   5231   5233   5237   5261   5273   5279 \n   5281   5297   5303   5309   5323   5333   5347   5351   5381   5387 \n   5393   5399   5407   5413   5417   5419   5431   5437   5441   5443 \n   5449   5471   5477   5479   5483   5501   5503   5507   5519   5521 \n   5527   5531   5557   5563   5569   5573   5581   5591   5623   5639 \n   5641   5647   5651   5653   5657   5659   5669   5683   5689   5693 \n   5701   5711   5717   5737   5741   5743   5749   5779   5783   5791 \n   5801   5807   5813   5821   5827   5839   5843   5849   5851   5857 \n   5861   5867   5869   5879   5881   5897   5903   5923   5927   5939 \n   5953   5981   5987   6007   6011   6029   6037   6043   6047   6053 \n   6067   6073   6079   6089   6091   6101   6113   6121   6131   6133 \n   6143   6151   6163   6173   6197   6199   6203   6211   6217   6221 \n   6229   6247   6257   6263   6269   6271   6277   6287   6299   6301 \n   6311   6317   6323   6329   6337   6343   6353   6359   6361   6367 \n   6373   6379   6389   6397   6421   6427   6449   6451   6469   6473 \n   6481   6491   6521   6529   6547   6551   6553   6563   6569   6571 \n   6577   6581   6599   6607   6619   6637   6653   6659   6661   6673 \n   6679   6689   6691   6701   6703   6709   6719   6733   6737   6761 \n   6763   6779   6781   6791   6793   6803   6823   6827   6829   6833 \n   6841   6857   6863   6869   6871   6883   6899   6907   6911   6917 \n   6947   6949   6959   6961   6967   6971   6977   6983   6991   6997 \n   7001   7013   7019   7027   7039   7043   7057   7069   7079   7103 \n   7109   7121   7127   7129   7151   7159   7177   7187   7193   7207 \n   7211   7213   7219   7229   7237   7243   7247   7253   7283   7297 \n   7307   7309   7321   7331   7333   7349   7351   7369   7393   7411 \n   7417   7433   7451   7457   7459   7477   7481   7487   7489   7499 \n   7507   7517   7523   7529   7537   7541   7547   7549   7559   7561 \n   7573   7577   7583   7589   7591   7603   7607   7621   7639   7643 \n   7649   7669   7673   7681   7687   7691   7699   7703   7717   7723 \n   7727   7741   7753   7757   7759   7789   7793   7817   7823   7829 \n   7841   7853   7867   7873   7877   7879   7883   7901   7907   7919 \n   7927   7933   7937   7949   7951   7963   7993   8009   8011   8017 \n   8039   8053   8059   8069   8081   8087   8089   8093   8101   8111 \n   8117   8123   8147   8161   8167   8171   8179   8191   8209   8219 \n   8221   8231   8233   8237   8243   8263   8269   8273   8287   8291 \n   8293   8297   8311   8317   8329   8353   8363   8369   8377   8387 \n   8389   8419   8423   8429   8431   8443   8447   8461   8467   8501 \n   8513   8521   8527   8537   8539   8543   8563   8573   8581   8597 \n   8599   8609   8623   8627   8629   8641   8647   8663   8669   8677 \n   8681   8689   8693   8699   8707   8713   8719   8731   8737   8741 \n   8747   8753   8761   8779   8783   8803   8807   8819   8821   8831 \n   8837   8839   8849   8861   8863   8867   8887   8893   8923   8929 \n   8933   8941   8951   8963   8969   8971   8999   9001   9007   9011 \n   9013   9029   9041   9043   9049   9059   9067   9091   9103   9109 \n   9127   9133   9137   9151   9157   9161   9173   9181   9187   9199 \n   9203   9209   9221   9227   9239   9241   9257   9277   9281   9283 \n   9293   9311   9319   9323   9337   9341   9343   9349   9371   9377 \n   9391   9397   9403   9413   9419   9421   9431   9433   9437   9439 \n   9461   9463   9467   9473   9479   9491   9497   9511   9521   9533 \n   9539   9547   9551   9587   9601   9613   9619   9623   9629   9631 \n   9643   9649   9661   9677   9679   9689   9697   9719   9721   9733 \n   9739   9743   9749   9767   9769   9781   9787   9791   9803   9811 \n   9817   9829   9833   9839   9851   9857   9859   9871   9883   9887 \n   9901   9907   9923   9929   9931   9941   9949   9967   9973  10007 \n  10009  10037  10039  10061  10067  10069  10079  10091  10093  10099 \n  10103  10111  10133  10139  10141  10151  10159  10163  10169  10177 \n  10181  10193  10211  10223  10243  10247  10253  10259  10267  10271 \n  10273  10289  10301  10303  10313  10321  10331  10333  10337  10343 \n  10357  10369  10391  10399  10427  10429  10433  10453  10457  10459 \n  10463  10477  10487  10499  10501  10513  10529  10531  10559  10567 \n  10589  10597  10601  10607  10613  10627  10631  10639  10651  10657 \n  10663  10667  10687  10691  10709  10711  10723  10729  10733  10739 \n  10753  10771  10781  10789  10799  10831  10837  10847  10853  10859 \n  10861  10867  10883  10889  10891  10903  10909  10937  10939  10949 \n  10957  10973  10979  10987  10993  11003  11027  11047  11057  11059 \n  11069  11071  11083  11087  11093  11113  11117  11119  11131  11149 \n  11159  11161  11171  11173  11177  11197  11213  11239  11243  11251 \n  11257  11261  11273  11279  11287  11299  11311  11317  11321  11329 \n  11351  11353  11369  11383  11393  11399  11411  11423  11437  11443 \n  11447  11467  11471  11483  11489  11491  11497  11503  11519  11527 \n  11549  11551  11579  11587  11593  11597  11617  11621  11633  11657 \n  11677  11681  11689  11699  11701  11717  11719  11731  11743  11777 \n  11779  11783  11789  11801  11807  11813  11821  11827  11831  11833 \n  11839  11863  11867  11887  11897  11903  11909  11923  11927  11933 \n  11939  11941  11953  11959  11969  11971  11981  11987  12007  12011 \n  12037  12041  12043  12049  12071  12073  12097  12101  12107  12109 \n  12113  12119  12143  12149  12157  12161  12163  12197  12203  12211 \n  12227  12239  12241  12251  12253  12263  12269  12277  12281  12289 \n  12301  12323  12329  12343  12347  12373  12377  12379  12391  12401 \n  12409  12413  12421  12433  12437  12451  12457  12473  12479  12487 \n  12491  12497  12503  12511  12517  12527  12539  12541  12547  12553 \n  12569  12577  12583  12589  12601  12611  12613  12619  12637  12641 \n  12647  12653  12659  12671  12689  12697  12703  12713  12721  12739 \n  12743  12757  12763  12781  12791  12799  12809  12821  12823  12829 \n  12841  12853  12889  12893  12899  12907  12911  12917  12919  12923 \n  12941  12953  12959  12967  12973  12979  12983  13001  13003  13007 \n  13009  13033  13037  13043  13049  13063  13093  13099  13103  13109 \n  13121  13127  13147  13151  13159  13163  13171  13177  13183  13187 \n  13217  13219  13229  13241  13249  13259  13267  13291  13297  13309 \n  13313  13327  13331  13337  13339  13367  13381  13397  13399  13411 \n  13417  13421  13441  13451  13457  13463  13469  13477  13487  13499 \n  13513  13523  13537  13553  13567  13577  13591  13597  13613  13619 \n  13627  13633  13649  13669  13679  13681  13687  13691  13693  13697 \n  13709  13711  13721  13723  13729  13751  13757  13759  13763  13781 \n  13789  13799  13807  13829  13831  13841  13859  13873  13877  13879 \n  13883  13901  13903  13907  13913  13921  13931  13933  13963  13967 \n  13997  13999  14009  14011  14029  14033  14051  14057  14071  14081 \n  14083  14087  14107  14143  14149  14153  14159  14173  14177  14197 \n  14207  14221  14243  14249  14251  14281  14293  14303  14321  14323 \n  14327  14341  14347  14369  14387  14389  14401  14407  14411  14419 \n  14423  14431  14437  14447  14449  14461  14479  14489  14503  14519 \n  14533  14537  14543  14549  14551  14557  14561  14563  14591  14593 \n  14621  14627  14629  14633  14639  14653  14657  14669  14683  14699 \n  14713  14717  14723  14731  14737  14741  14747  14753  14759  14767 \n  14771  14779  14783  14797  14813  14821  14827  14831  14843  14851 \n  14867  14869  14879  14887  14891  14897  14923  14929  14939  14947 \n  14951  14957  14969  14983  15013  15017  15031  15053  15061  15073 \n  15077  15083  15091  15101  15107  15121  15131  15137  15139  15149 \n  15161  15173  15187  15193  15199  15217  15227  15233  15241  15259 \n  15263  15269  15271  15277  15287  15289  15299  15307  15313  15319 \n  15329  15331  15349  15359  15361  15373  15377  15383  15391  15401 \n  15413  15427  15439  15443  15451  15461  15467  15473  15493  15497 \n  15511  15527  15541  15551  15559  15569  15581  15583  15601  15607 \n  15619  15629  15641  15643  15647  15649  15661  15667  15671  15679 \n  15683  15727  15731  15733  15737  15739  15749  15761  15767  15773 \n  15787  15791  15797  15803  15809  15817  15823  15859  15877  15881 \n  15887  15889  15901  15907  15913  15919  15923  15937  15959  15971 \n  15973  15991  16001  16007  16033  16057  16061  16063  16067  16069 \n  16073  16087  16091  16097  16103  16111  16127  16139  16141  16183 \n  16187  16189  16193  16217  16223  16229  16231  16249  16253  16267 \n  16273  16301  16319  16333  16339  16349  16361  16363  16369  16381 \n  16411  16417  16421  16427  16433  16447  16451  16453  16477  16481 \n  16487  16493  16519  16529  16547  16553  16561  16567  16573  16603 \n  16607  16619  16631  16633  16649  16651  16657  16661  16673  16691 \n  16693  16699  16703  16729  16741  16747  16759  16763  16787  16811 \n  16823  16829  16831  16843  16871  16879  16883  16889  16901  16903 \n  16921  16927  16931  16937  16943  16963  16979  16981  16987  16993 \n  17011  17021  17027  17029  17033  17041  17047  17053  17077  17093 \n  17099  17107  17117  17123  17137  17159  17167  17183  17189  17191 \n  17203  17207  17209  17231  17239  17257  17291  17293  17299  17317 \n  17321  17327  17333  17341  17351  17359  17377  17383  17387  17389 \n  17393  17401  17417  17419  17431  17443  17449  17467  17471  17477 \n  17483  17489  17491  17497  17509  17519  17539  17551  17569  17573 \n  17579  17581  17597  17599  17609  17623  17627  17657  17659  17669 \n  17681  17683  17707  17713  17729  17737  17747  17749  17761  17783 \n  17789  17791  17807  17827  17837  17839  17851  17863  17881  17891 \n  17903  17909  17911  17921  17923  17929  17939  17957  17959  17971 \n  17977  17981  17987  17989  18013  18041  18043  18047  18049  18059 \n  18061  18077  18089  18097  18119  18121  18127  18131  18133  18143 \n  18149  18169  18181  18191  18199  18211  18217  18223  18229  18233 \n  18251  18253  18257  18269  18287  18289  18301  18307  18311  18313 \n  18329  18341  18353  18367  18371  18379  18397  18401  18413  18427 \n  18433  18439  18443  18451  18457  18461  18481  18493  18503  18517 \n  18521  18523  18539  18541  18553  18583  18587  18593  18617  18637 \n  18661  18671  18679  18691  18701  18713  18719  18731  18743  18749 \n  18757  18773  18787  18793  18797  18803  18839  18859  18869  18899 \n  18911  18913  18917  18919  18947  18959  18973  18979  19001  19009 \n  19013  19031  19037  19051  19069  19073  19079  19081  19087  19121 \n  19139  19141  19157  19163  19181  19183  19207  19211  19213  19219 \n  19231  19237  19249  19259  19267  19273  19289  19301  19309  19319 \n  19333  19373  19379  19381  19387  19391  19403  19417  19421  19423 \n  19427  19429  19433  19441  19447  19457  19463  19469  19471  19477 \n  19483  19489  19501  19507  19531  19541  19543  19553  19559  19571 \n  19577  19583  19597  19603  19609  19661  19681  19687  19697  19699 \n  19709  19717  19727  19739  19751  19753  19759  19763  19777  19793 \n  19801  19813  19819  19841  19843  19853  19861  19867  19889  19891 \n  19913  19919  19927  19937  19949  19961  19963  19973  19979  19991 \n  19993  19997  20011  20021  20023  20029  20047  20051  20063  20071 \n  20089  20101  20107  20113  20117  20123  20129  20143  20147  20149 \n  20161  20173  20177  20183  20201  20219  20231  20233  20249  20261 \n  20269  20287  20297  20323  20327  20333  20341  20347  20353  20357 \n  20359  20369  20389  20393  20399  20407  20411  20431  20441  20443 \n  20477  20479  20483  20507  20509  20521  20533  20543  20549  20551 \n  20563  20593  20599  20611  20627  20639  20641  20663  20681  20693 \n  20707  20717  20719  20731  20743  20747  20749  20753  20759  20771 \n  20773  20789  20807  20809  20849  20857  20873  20879  20887  20897 \n  20899  20903  20921  20929  20939  20947  20959  20963  20981  20983 \n  21001  21011  21013  21017  21019  21023  21031  21059  21061  21067 \n  21089  21101  21107  21121  21139  21143  21149  21157  21163  21169 \n  21179  21187  21191  21193  21211  21221  21227  21247  21269  21277 \n  21283  21313  21317  21319  21323  21341  21347  21377  21379  21383 \n  21391  21397  21401  21407  21419  21433  21467  21481  21487  21491 \n  21493  21499  21503  21517  21521  21523  21529  21557  21559  21563 \n  21569  21577  21587  21589  21599  21601  21611  21613  21617  21647 \n  21649  21661  21673  21683  21701  21713  21727  21737  21739  21751 \n  21757  21767  21773  21787  21799  21803  21817  21821  21839  21841 \n  21851  21859  21863  21871  21881  21893  21911  21929  21937  21943 \n  21961  21977  21991  21997  22003  22013  22027  22031  22037  22039 \n  22051  22063  22067  22073  22079  22091  22093  22109  22111  22123 \n  22129  22133  22147  22153  22157  22159  22171  22189  22193  22229 \n  22247  22259  22271  22273  22277  22279  22283  22291  22303  22307 \n  22343  22349  22367  22369  22381  22391  22397  22409  22433  22441 \n  22447  22453  22469  22481  22483  22501  22511  22531  22541  22543 \n  22549  22567  22571  22573  22613  22619  22621  22637  22639  22643 \n  22651  22669  22679  22691  22697  22699  22709  22717  22721  22727 \n  22739  22741  22751  22769  22777  22783  22787  22807  22811  22817 \n  22853  22859  22861  22871  22877  22901  22907  22921  22937  22943 \n  22961  22963  22973  22993  23003  23011  23017  23021  23027  23029 \n  23039  23041  23053  23057  23059  23063  23071  23081  23087  23099 \n  23117  23131  23143  23159  23167  23173  23189  23197  23201  23203 \n  23209  23227  23251  23269  23279  23291  23293  23297  23311  23321 \n  23327  23333  23339  23357  23369  23371  23399  23417  23431  23447 \n  23459  23473  23497  23509  23531  23537  23539  23549  23557  23561 \n  23563  23567  23581  23593  23599  23603  23609  23623  23627  23629 \n  23633  23663  23669  23671  23677  23687  23689  23719  23741  23743 \n  23747  23753  23761  23767  23773  23789  23801  23813  23819  23827 \n  23831  23833  23857  23869  23873  23879  23887  23893  23899  23909 \n  23911  23917  23929  23957  23971  23977  23981  23993  24001  24007 \n  24019  24023  24029  24043  24049  24061  24071  24077  24083  24091 \n  24097  24103  24107  24109  24113  24121  24133  24137  24151  24169 \n  24179  24181  24197  24203  24223  24229  24239  24247  24251  24281 \n  24317  24329  24337  24359  24371  24373  24379  24391  24407  24413 \n  24419  24421  24439  24443  24469  24473  24481  24499  24509  24517 \n  24527  24533  24547  24551  24571  24593  24611  24623  24631  24659 \n  24671  24677  24683  24691  24697  24709  24733  24749  24763  24767 \n  24781  24793  24799  24809  24821  24841  24847  24851  24859  24877 \n  24889  24907  24917  24919  24923  24943  24953  24967  24971  24977 \n  24979  24989  25013  25031  25033  25037  25057  25073  25087  25097 \n  25111  25117  25121  25127  25147  25153  25163  25169  25171  25183 \n  25189  25219  25229  25237  25243  25247  25253  25261  25301  25303 \n  25307  25309  25321  25339  25343  25349  25357  25367  25373  25391 \n  25409  25411  25423  25439  25447  25453  25457  25463  25469  25471 \n  25523  25537  25541  25561  25577  25579  25583  25589  25601  25603 \n  25609  25621  25633  25639  25643  25657  25667  25673  25679  25693 \n  25703  25717  25733  25741  25747  25759  25763  25771  25793  25799 \n  25801  25819  25841  25847  25849  25867  25873  25889  25903  25913 \n  25919  25931  25933  25939  25943  25951  25969  25981  25997  25999 \n  26003  26017  26021  26029  26041  26053  26083  26099  26107  26111 \n  26113  26119  26141  26153  26161  26171  26177  26183  26189  26203 \n  26209  26227  26237  26249  26251  26261  26263  26267  26293  26297 \n  26309  26317  26321  26339  26347  26357  26371  26387  26393  26399 \n  26407  26417  26423  26431  26437  26449  26459  26479  26489  26497 \n  26501  26513  26539  26557  26561  26573  26591  26597  26627  26633 \n  26641  26647  26669  26681  26683  26687  26693  26699  26701  26711 \n  26713  26717  26723  26729  26731  26737  26759  26777  26783  26801 \n  26813  26821  26833  26839  26849  26861  26863  26879  26881  26891 \n  26893  26903  26921  26927  26947  26951  26953  26959  26981  26987 \n  26993  27011  27017  27031  27043  27059  27061  27067  27073  27077 \n  27091  27103  27107  27109  27127  27143  27179  27191  27197  27211 \n  27239  27241  27253  27259  27271  27277  27281  27283  27299  27329 \n  27337  27361  27367  27397  27407  27409  27427  27431  27437  27449 \n  27457  27479  27481  27487  27509  27527  27529  27539  27541  27551 \n  27581  27583  27611  27617  27631  27647  27653  27673  27689  27691 \n  27697  27701  27733  27737  27739  27743  27749  27751  27763  27767 \n  27773  27779  27791  27793  27799  27803  27809  27817  27823  27827 \n  27847  27851  27883  27893  27901  27917  27919  27941  27943  27947 \n  27953  27961  27967  27983  27997  28001  28019  28027  28031  28051 \n  28057  28069  28081  28087  28097  28099  28109  28111  28123  28151 \n  28163  28181  28183  28201  28211  28219  28229  28277  28279  28283 \n  28289  28297  28307  28309  28319  28349  28351  28387  28393  28403 \n  28409  28411  28429  28433  28439  28447  28463  28477  28493  28499 \n  28513  28517  28537  28541  28547  28549  28559  28571  28573  28579 \n  28591  28597  28603  28607  28619  28621  28627  28631  28643  28649 \n  28657  28661  28663  28669  28687  28697  28703  28711  28723  28729 \n  28751  28753  28759  28771  28789  28793  28807  28813  28817  28837 \n  28843  28859  28867  28871  28879  28901  28909  28921  28927  28933 \n  28949  28961  28979  29009  29017  29021  29023  29027  29033  29059 \n  29063  29077  29101  29123  29129  29131  29137  29147  29153  29167 \n  29173  29179  29191  29201  29207  29209  29221  29231  29243  29251 \n  29269  29287  29297  29303  29311  29327  29333  29339  29347  29363 \n  29383  29387  29389  29399  29401  29411  29423  29429  29437  29443 \n  29453  29473  29483  29501  29527  29531  29537  29567  29569  29573 \n  29581  29587  29599  29611  29629  29633  29641  29663  29669  29671 \n  29683  29717  29723  29741  29753  29759  29761  29789  29803  29819 \n  29833  29837  29851  29863  29867  29873  29879  29881  29917  29921 \n  29927  29947  29959  29983  29989  30011  30013  30029  30047  30059 \n  30071  30089  30091  30097  30103  30109  30113  30119  30133  30137 \n  30139  30161  30169  30181  30187  30197  30203  30211  30223  30241 \n  30253  30259  30269  30271  30293  30307  30313  30319  30323  30341 \n  30347  30367  30389  30391  30403  30427  30431  30449  30467  30469 \n  30491  30493  30497  30509  30517  30529  30539  30553  30557  30559 \n  30577  30593  30631  30637  30643  30649  30661  30671  30677  30689 \n  30697  30703  30707  30713  30727  30757  30763  30773  30781  30803 \n  30809  30817  30829  30839  30841  30851  30853  30859  30869  30871 \n  30881  30893  30911  30931  30937  30941  30949  30971  30977  30983 \n  31013  31019  31033  31039  31051  31063  31069  31079  31081  31091 \n  31121  31123  31139  31147  31151  31153  31159  31177  31181  31183 \n  31189  31193  31219  31223  31231  31237  31247  31249  31253  31259 \n  31267  31271  31277  31307  31319  31321  31327  31333  31337  31357 \n  31379  31387  31391  31393  31397  31469  31477  31481  31489  31511 \n  31513  31517  31531  31541  31543  31547  31567  31573  31583  31601 \n  31607  31627  31643  31649  31657  31663  31667  31687  31699  31721 \n  31723  31727  31729  31741  31751  31769  31771  31793  31799  31817 \n  31847  31849  31859  31873  31883  31891  31907  31957  31963  31973 \n  31981  31991  32003  32009  32027  32029  32051  32057  32059  32063 \n  32069  32077  32083  32089  32099  32117  32119  32141  32143  32159 \n  32173  32183  32189  32191  32203  32213  32233  32237  32251  32257 \n  32261  32297  32299  32303  32309  32321  32323  32327  32341  32353 \n  32359  32363  32369  32371  32377  32381  32401  32411  32413  32423 \n  32429  32441  32443  32467  32479  32491  32497  32503  32507  32531 \n  32533  32537  32561  32563  32569  32573  32579  32587  32603  32609 \n  32611  32621  32633  32647  32653  32687  32693  32707  32713  32717 \n  32719  32749  32771  32779  32783  32789  32797  32801  32803  32831 \n  32833  32839  32843  32869  32887  32909  32911  32917  32933  32939 \n  32941  32957  32969  32971  32983  32987  32993  32999  33013  33023 \n  33029  33037  33049  33053  33071  33073  33083  33091  33107  33113 \n  33119  33149  33151  33161  33179  33181  33191  33199  33203  33211 \n  33223  33247  33287  33289  33301  33311  33317  33329  33331  33343 \n  33347  33349  33353  33359  33377  33391  33403  33409  33413  33427 \n  33457  33461  33469  33479  33487  33493  33503  33521  33529  33533 \n  33547  33563  33569  33577  33581  33587  33589  33599  33601  33613 \n  33617  33619  33623  33629  33637  33641  33647  33679  33703  33713 \n  33721  33739  33749  33751  33757  33767  33769  33773  33791  33797 \n  33809  33811  33827  33829  33851  33857  33863  33871  33889  33893 \n  33911  33923  33931  33937  33941  33961  33967  33997  34019  34031 \n  34033  34039  34057  34061  34123  34127  34129  34141  34147  34157 \n  34159  34171  34183  34211  34213  34217  34231  34253  34259  34261 \n  34267  34273  34283  34297  34301  34303  34313  34319  34327  34337 \n  34351  34361  34367  34369  34381  34403  34421  34429  34439  34457 \n  34469  34471  34483  34487  34499  34501  34511  34513  34519  34537 \n  34543  34549  34583  34589  34591  34603  34607  34613  34631  34649 \n  34651  34667  34673  34679  34687  34693  34703  34721  34729  34739 \n  34747  34757  34759  34763  34781  34807  34819  34841  34843  34847 \n  34849  34871  34877  34883  34897  34913  34919  34939  34949  34961 \n  34963  34981  35023  35027  35051  35053  35059  35069  35081  35083 \n  35089  35099  35107  35111  35117  35129  35141  35149  35153  35159 \n  35171  35201  35221  35227  35251  35257  35267  35279  35281  35291 \n  35311  35317  35323  35327  35339  35353  35363  35381  35393  35401 \n  35407  35419  35423  35437  35447  35449  35461  35491  35507  35509 \n  35521  35527  35531  35533  35537  35543  35569  35573  35591  35593 \n  35597  35603  35617  35671  35677  35729  35731  35747  35753  35759 \n  35771  35797  35801  35803  35809  35831  35837  35839  35851  35863 \n  35869  35879  35897  35899  35911  35923  35933  35951  35963  35969 \n  35977  35983  35993  35999  36007  36011  36013  36017  36037  36061 \n  36067  36073  36083  36097  36107  36109  36131  36137  36151  36161 \n  36187  36191  36209  36217  36229  36241  36251  36263  36269  36277 \n  36293  36299  36307  36313  36319  36341  36343  36353  36373  36383 \n  36389  36433  36451  36457  36467  36469  36473  36479  36493  36497 \n  36523  36527  36529  36541  36551  36559  36563  36571  36583  36587 \n  36599  36607  36629  36637  36643  36653  36671  36677  36683  36691 \n  36697  36709  36713  36721  36739  36749  36761  36767  36779  36781 \n  36787  36791  36793  36809  36821  36833  36847  36857  36871  36877 \n  36887  36899  36901  36913  36919  36923  36929  36931  36943  36947 \n  36973  36979  36997  37003  37013  37019  37021  37039  37049  37057 \n  37061  37087  37097  37117  37123  37139  37159  37171  37181  37189 \n  37199  37201  37217  37223  37243  37253  37273  37277  37307  37309 \n  37313  37321  37337  37339  37357  37361  37363  37369  37379  37397 \n  37409  37423  37441  37447  37463  37483  37489  37493  37501  37507 \n  37511  37517  37529  37537  37547  37549  37561  37567  37571  37573 \n  37579  37589  37591  37607  37619  37633  37643  37649  37657  37663 \n  37691  37693  37699  37717  37747  37781  37783  37799  37811  37813 \n  37831  37847  37853  37861  37871  37879  37889  37897  37907  37951 \n  37957  37963  37967  37987  37991  37993  37997  38011  38039  38047 \n  38053  38069  38083  38113  38119  38149  38153  38167  38177  38183 \n  38189  38197  38201  38219  38231  38237  38239  38261  38273  38281 \n  38287  38299  38303  38317  38321  38327  38329  38333  38351  38371 \n  38377  38393  38431  38447  38449  38453  38459  38461  38501  38543 \n  38557  38561  38567  38569  38593  38603  38609  38611  38629  38639 \n  38651  38653  38669  38671  38677  38693  38699  38707  38711  38713 \n  38723  38729  38737  38747  38749  38767  38783  38791  38803  38821 \n  38833  38839  38851  38861  38867  38873  38891  38903  38917  38921 \n  38923  38933  38953  38959  38971  38977  38993  39019  39023  39041 \n  39043  39047  39079  39089  39097  39103  39107  39113  39119  39133 \n  39139  39157  39161  39163  39181  39191  39199  39209  39217  39227 \n  39229  39233  39239  39241  39251  39293  39301  39313  39317  39323 \n  39341  39343  39359  39367  39371  39373  39383  39397  39409  39419 \n  39439  39443  39451  39461  39499  39503  39509  39511  39521  39541 \n  39551  39563  39569  39581  39607  39619  39623  39631  39659  39667 \n  39671  39679  39703  39709  39719  39727  39733  39749  39761  39769 \n  39779  39791  39799  39821  39827  39829  39839  39841  39847  39857 \n  39863  39869  39877  39883  39887  39901  39929  39937  39953  39971 \n  39979  39983  39989  40009  40013  40031  40037  40039  40063  40087 \n  40093  40099  40111  40123  40127  40129  40151  40153  40163  40169 \n  40177  40189  40193  40213  40231  40237  40241  40253  40277  40283 \n  40289  40343  40351  40357  40361  40387  40423  40427  40429  40433 \n  40459  40471  40483  40487  40493  40499  40507  40519  40529  40531 \n  40543  40559  40577  40583  40591  40597  40609  40627  40637  40639 \n  40693  40697  40699  40709  40739  40751  40759  40763  40771  40787 \n  40801  40813  40819  40823  40829  40841  40847  40849  40853  40867 \n  40879  40883  40897  40903  40927  40933  40939  40949  40961  40973 \n  40993  41011  41017  41023  41039  41047  41051  41057  41077  41081 \n  41113  41117  41131  41141  41143  41149  41161  41177  41179  41183 \n  41189  41201  41203  41213  41221  41227  41231  41233  41243  41257 \n  41263  41269  41281  41299  41333  41341  41351  41357  41381  41387 \n  41389  41399  41411  41413  41443  41453  41467  41479  41491  41507 \n  41513  41519  41521  41539  41543  41549  41579  41593  41597  41603 \n  41609  41611  41617  41621  41627  41641  41647  41651  41659  41669 \n  41681  41687  41719  41729  41737  41759  41761  41771  41777  41801 \n  41809  41813  41843  41849  41851  41863  41879  41887  41893  41897 \n  41903  41911  41927  41941  41947  41953  41957  41959  41969  41981 \n  41983  41999  42013  42017  42019  42023  42043  42061  42071  42073 \n  42083  42089  42101  42131  42139  42157  42169  42179  42181  42187 \n  42193  42197  42209  42221  42223  42227  42239  42257  42281  42283 \n  42293  42299  42307  42323  42331  42337  42349  42359  42373  42379 \n  42391  42397  42403  42407  42409  42433  42437  42443  42451  42457 \n  42461  42463  42467  42473  42487  42491  42499  42509  42533  42557 \n  42569  42571  42577  42589  42611  42641  42643  42649  42667  42677 \n  42683  42689  42697  42701  42703  42709  42719  42727  42737  42743 \n  42751  42767  42773  42787  42793  42797  42821  42829  42839  42841 \n  42853  42859  42863  42899  42901  42923  42929  42937  42943  42953 \n  42961  42967  42979  42989  43003  43013  43019  43037  43049  43051 \n  43063  43067  43093  43103  43117  43133  43151  43159  43177  43189 \n  43201  43207  43223  43237  43261  43271  43283  43291  43313  43319 \n  43321  43331  43391  43397  43399  43403  43411  43427  43441  43451 \n  43457  43481  43487  43499  43517  43541  43543  43573  43577  43579 \n  43591  43597  43607  43609  43613  43627  43633  43649  43651  43661 \n  43669  43691  43711  43717  43721  43753  43759  43777  43781  43783 \n  43787  43789  43793  43801  43853  43867  43889  43891  43913  43933 \n  43943  43951  43961  43963  43969  43973  43987  43991  43997  44017 \n  44021  44027  44029  44041  44053  44059  44071  44087  44089  44101 \n  44111  44119  44123  44129  44131  44159  44171  44179  44189  44201 \n  44203  44207  44221  44249  44257  44263  44267  44269  44273  44279 \n  44281  44293  44351  44357  44371  44381  44383  44389  44417  44449 \n  44453  44483  44491  44497  44501  44507  44519  44531  44533  44537 \n  44543  44549  44563  44579  44587  44617  44621  44623  44633  44641 \n  44647  44651  44657  44683  44687  44699  44701  44711  44729  44741 \n  44753  44771  44773  44777  44789  44797  44809  44819  44839  44843 \n  44851  44867  44879  44887  44893  44909  44917  44927  44939  44953 \n  44959  44963  44971  44983  44987  45007  45013  45053  45061  45077 \n  45083  45119  45121  45127  45131  45137  45139  45161  45179  45181 \n  45191  45197  45233  45247  45259  45263  45281  45289  45293  45307 \n  45317  45319  45329  45337  45341  45343  45361  45377  45389  45403 \n  45413  45427  45433  45439  45481  45491  45497  45503  45523  45533 \n  45541  45553  45557  45569  45587  45589  45599  45613  45631  45641 \n  45659  45667  45673  45677  45691  45697  45707  45737  45751  45757 \n  45763  45767  45779  45817  45821  45823  45827  45833  45841  45853 \n  45863  45869  45887  45893  45943  45949  45953  45959  45971  45979 \n  45989  46021  46027  46049  46051  46061  46073  46091  46093  46099 \n  46103  46133  46141  46147  46153  46171  46181  46183  46187  46199 \n  46219  46229  46237  46261  46271  46273  46279  46301  46307  46309 \n  46327  46337  46349  46351  46381  46399  46411  46439  46441  46447 \n  46451  46457  46471  46477  46489  46499  46507  46511  46523  46549 \n  46559  46567  46573  46589  46591  46601  46619  46633  46639  46643 \n  46649  46663  46679  46681  46687  46691  46703  46723  46727  46747 \n  46751  46757  46769  46771  46807  46811  46817  46819  46829  46831 \n  46853  46861  46867  46877  46889  46901  46919  46933  46957  46993 \n  46997  47017  47041  47051  47057  47059  47087  47093  47111  47119 \n  47123  47129  47137  47143  47147  47149  47161  47189  47207  47221 \n  47237  47251  47269  47279  47287  47293  47297  47303  47309  47317 \n  47339  47351  47353  47363  47381  47387  47389  47407  47417  47419 \n  47431  47441  47459  47491  47497  47501  47507  47513  47521  47527 \n  47533  47543  47563  47569  47581  47591  47599  47609  47623  47629 \n  47639  47653  47657  47659  47681  47699  47701  47711  47713  47717 \n  47737  47741  47743  47777  47779  47791  47797  47807  47809  47819 \n  47837  47843  47857  47869  47881  47903  47911  47917  47933  47939 \n  47947  47951  47963  47969  47977  47981  48017  48023  48029  48049 \n  48073  48079  48091  48109  48119  48121  48131  48157  48163  48179 \n  48187  48193  48197  48221  48239  48247  48259  48271  48281  48299 \n  48311  48313  48337  48341  48353  48371  48383  48397  48407  48409 \n  48413  48437  48449  48463  48473  48479  48481  48487  48491  48497 \n  48523  48527  48533  48539  48541  48563  48571  48589  48593  48611 \n  48619  48623  48647  48649  48661  48673  48677  48679  48731  48733 \n  48751  48757  48761  48767  48779  48781  48787  48799  48809  48817 \n  48821  48823  48847  48857  48859  48869  48871  48883  48889  48907 \n  48947  48953  48973  48989  48991  49003  49009  49019  49031  49033 \n  49037  49043  49057  49069  49081  49103  49109  49117  49121  49123 \n  49139  49157  49169  49171  49177  49193  49199  49201  49207  49211 \n  49223  49253  49261  49277  49279  49297  49307  49331  49333  49339 \n  49363  49367  49369  49391  49393  49409  49411  49417  49429  49433 \n  49451  49459  49463  49477  49481  49499  49523  49529  49531  49537 \n  49547  49549  49559  49597  49603  49613  49627  49633  49639  49663 \n  49667  49669  49681  49697  49711  49727  49739  49741  49747  49757 \n  49783  49787  49789  49801  49807  49811  49823  49831  49843  49853 \n  49871  49877  49891  49919  49921  49927  49937  49939  49943  49957 \n  49991  49993  49999  50021  50023  50033  50047  50051  50053  50069 \n  50077  50087  50093  50101  50111  50119  50123  50129  50131  50147 \n  50153  50159  50177  50207  50221  50227  50231  50261  50263  50273 \n  50287  50291  50311  50321  50329  50333  50341  50359  50363  50377 \n  50383  50387  50411  50417  50423  50441  50459  50461  50497  50503 \n  50513  50527  50539  50543  50549  50551  50581  50587  50591  50593 \n  50599  50627  50647  50651  50671  50683  50707  50723  50741  50753 \n  50767  50773  50777  50789  50821  50833  50839  50849  50857  50867 \n  50873  50891  50893  50909  50923  50929  50951  50957  50969  50971 \n  50989  50993  51001  51031  51043  51047  51059  51061  51071  51109 \n  51131  51133  51137  51151  51157  51169  51193  51197  51199  51203 \n  51217  51229  51239  51241  51257  51263  51283  51287  51307  51329 \n  51341  51343  51347  51349  51361  51383  51407  51413  51419  51421 \n  51427  51431  51437  51439  51449  51461  51473  51479  51481  51487 \n  51503  51511  51517  51521  51539  51551  51563  51577  51581  51593 \n  51599  51607  51613  51631  51637  51647  51659  51673  51679  51683 \n  51691  51713  51719  51721  51749  51767  51769  51787  51797  51803 \n  51817  51827  51829  51839  51853  51859  51869  51871  51893  51899 \n  51907  51913  51929  51941  51949  51971  51973  51977  51991  52009 \n  52021  52027  52051  52057  52067  52069  52081  52103  52121  52127 \n  52147  52153  52163  52177  52181  52183  52189  52201  52223  52237 \n  52249  52253  52259  52267  52289  52291  52301  52313  52321  52361 \n  52363  52369  52379  52387  52391  52433  52453  52457  52489  52501 \n  52511  52517  52529  52541  52543  52553  52561  52567  52571  52579 \n  52583  52609  52627  52631  52639  52667  52673  52691  52697  52709 \n  52711  52721  52727  52733  52747  52757  52769  52783  52807  52813 \n  52817  52837  52859  52861  52879  52883  52889  52901  52903  52919 \n  52937  52951  52957  52963  52967  52973  52981  52999  53003  53017 \n  53047  53051  53069  53077  53087  53089  53093  53101  53113  53117 \n  53129  53147  53149  53161  53171  53173  53189  53197  53201  53231 \n  53233  53239  53267  53269  53279  53281  53299  53309  53323  53327 \n  53353  53359  53377  53381  53401  53407  53411  53419  53437  53441 \n  53453  53479  53503  53507  53527  53549  53551  53569  53591  53593 \n  53597  53609  53611  53617  53623  53629  53633  53639  53653  53657 \n  53681  53693  53699  53717  53719  53731  53759  53773  53777  53783 \n  53791  53813  53819  53831  53849  53857  53861  53881  53887  53891 \n  53897  53899  53917  53923  53927  53939  53951  53959  53987  53993 \n  54001  54011  54013  54037  54049  54059  54083  54091  54101  54121 \n  54133  54139  54151  54163  54167  54181  54193  54217  54251  54269 \n  54277  54287  54293  54311  54319  54323  54331  54347  54361  54367 \n  54371  54377  54401  54403  54409  54413  54419  54421  54437  54443 \n  54449  54469  54493  54497  54499  54503  54517  54521  54539  54541 \n  54547  54559  54563  54577  54581  54583  54601  54617  54623  54629 \n  54631  54647  54667  54673  54679  54709  54713  54721  54727  54751 \n  54767  54773  54779  54787  54799  54829  54833  54851  54869  54877 \n  54881  54907  54917  54919  54941  54949  54959  54973  54979  54983 \n  55001  55009  55021  55049  55051  55057  55061  55073  55079  55103 \n  55109  55117  55127  55147  55163  55171  55201  55207  55213  55217 \n  55219  55229  55243  55249  55259  55291  55313  55331  55333  55337 \n  55339  55343  55351  55373  55381  55399  55411  55439  55441  55457 \n  55469  55487  55501  55511  55529  55541  55547  55579  55589  55603 \n  55609  55619  55621  55631  55633  55639  55661  55663  55667  55673 \n  55681  55691  55697  55711  55717  55721  55733  55763  55787  55793 \n  55799  55807  55813  55817  55819  55823  55829  55837  55843  55849 \n  55871  55889  55897  55901  55903  55921  55927  55931  55933  55949 \n  55967  55987  55997  56003  56009  56039  56041  56053  56081  56087 \n  56093  56099  56101  56113  56123  56131  56149  56167  56171  56179 \n  56197  56207  56209  56237  56239  56249  56263  56267  56269  56299 \n  56311  56333  56359  56369  56377  56383  56393  56401  56417  56431 \n  56437  56443  56453  56467  56473  56477  56479  56489  56501  56503 \n  56509  56519  56527  56531  56533  56543  56569  56591  56597  56599 \n  56611  56629  56633  56659  56663  56671  56681  56687  56701  56711 \n  56713  56731  56737  56747  56767  56773  56779  56783  56807  56809 \n  56813  56821  56827  56843  56857  56873  56891  56893  56897  56909 \n  56911  56921  56923  56929  56941  56951  56957  56963  56983  56989 \n  56993  56999  57037  57041  57047  57059  57073  57077  57089  57097 \n  57107  57119  57131  57139  57143  57149  57163  57173  57179  57191 \n  57193  57203  57221  57223  57241  57251  57259  57269  57271  57283 \n  57287  57301  57329  57331  57347  57349  57367  57373  57383  57389 \n  57397  57413  57427  57457  57467  57487  57493  57503  57527  57529 \n  57557  57559  57571  57587  57593  57601  57637  57641  57649  57653 \n  57667  57679  57689  57697  57709  57713  57719  57727  57731  57737 \n  57751  57773  57781  57787  57791  57793  57803  57809  57829  57839 \n  57847  57853  57859  57881  57899  57901  57917  57923  57943  57947 \n  57973  57977  57991  58013  58027  58031  58043  58049  58057  58061 \n  58067  58073  58099  58109  58111  58129  58147  58151  58153  58169 \n  58171  58189  58193  58199  58207  58211  58217  58229  58231  58237 \n  58243  58271  58309  58313  58321  58337  58363  58367  58369  58379 \n  58391  58393  58403  58411  58417  58427  58439  58441  58451  58453 \n  58477  58481  58511  58537  58543  58549  58567  58573  58579  58601 \n  58603  58613  58631  58657  58661  58679  58687  58693  58699  58711 \n  58727  58733  58741  58757  58763  58771  58787  58789  58831  58889 \n  58897  58901  58907  58909  58913  58921  58937  58943  58963  58967 \n  58979  58991  58997  59009  59011  59021  59023  59029  59051  59053 \n  59063  59069  59077  59083  59093  59107  59113  59119  59123  59141 \n  59149  59159  59167  59183  59197  59207  59209  59219  59221  59233 \n  59239  59243  59263  59273  59281  59333  59341  59351  59357  59359 \n  59369  59377  59387  59393  59399  59407  59417  59419  59441  59443 \n  59447  59453  59467  59471  59473  59497  59509  59513  59539  59557 \n  59561  59567  59581  59611  59617  59621  59627  59629  59651  59659 \n  59663  59669  59671  59693  59699  59707  59723  59729  59743  59747 \n  59753  59771  59779  59791  59797  59809  59833  59863  59879  59887 \n  59921  59929  59951  59957  59971  59981  59999  60013  60017  60029 \n  60037  60041  60077  60083  60089  60091  60101  60103  60107  60127 \n  60133  60139  60149  60161  60167  60169  60209  60217  60223  60251 \n  60257  60259  60271  60289  60293  60317  60331  60337  60343  60353 \n  60373  60383  60397  60413  60427  60443  60449  60457  60493  60497 \n  60509  60521  60527  60539  60589  60601  60607  60611  60617  60623 \n  60631  60637  60647  60649  60659  60661  60679  60689  60703  60719 \n  60727  60733  60737  60757  60761  60763  60773  60779  60793  60811 \n  60821  60859  60869  60887  60889  60899  60901  60913  60917  60919 \n  60923  60937  60943  60953  60961  61001  61007  61027  61031  61043 \n  61051  61057  61091  61099  61121  61129  61141  61151  61153  61169 \n  61211  61223  61231  61253  61261  61283  61291  61297  61331  61333 \n  61339  61343  61357  61363  61379  61381  61403  61409  61417  61441 \n  61463  61469  61471  61483  61487  61493  61507  61511  61519  61543 \n  61547  61553  61559  61561  61583  61603  61609  61613  61627  61631 \n  61637  61643  61651  61657  61667  61673  61681  61687  61703  61717 \n  61723  61729  61751  61757  61781  61813  61819  61837  61843  61861 \n  61871  61879  61909  61927  61933  61949  61961  61967  61979  61981 \n  61987  61991  62003  62011  62017  62039  62047  62053  62057  62071 \n  62081  62099  62119  62129  62131  62137  62141  62143  62171  62189 \n  62191  62201  62207  62213  62219  62233  62273  62297  62299  62303 \n  62311  62323  62327  62347  62351  62383  62401  62417  62423  62459 \n  62467  62473  62477  62483  62497  62501  62507  62533  62539  62549 \n  62563  62581  62591  62597  62603  62617  62627  62633  62639  62653 \n  62659  62683  62687  62701  62723  62731  62743  62753  62761  62773 \n  62791  62801  62819  62827  62851  62861  62869  62873  62897  62903 \n  62921  62927  62929  62939  62969  62971  62981  62983  62987  62989 \n  63029  63031  63059  63067  63073  63079  63097  63103  63113  63127 \n  63131  63149  63179  63197  63199  63211  63241  63247  63277  63281 \n  63299  63311  63313  63317  63331  63337  63347  63353  63361  63367 \n  63377  63389  63391  63397  63409  63419  63421  63439  63443  63463 \n  63467  63473  63487  63493  63499  63521  63527  63533  63541  63559 \n  63577  63587  63589  63599  63601  63607  63611  63617  63629  63647 \n  63649  63659  63667  63671  63689  63691  63697  63703  63709  63719 \n  63727  63737  63743  63761  63773  63781  63793  63799  63803  63809 \n  63823  63839  63841  63853  63857  63863  63901  63907  63913  63929 \n  63949  63977  63997  64007  64013  64019  64033  64037  64063  64067 \n  64081  64091  64109  64123  64151  64153  64157  64171  64187  64189 \n  64217  64223  64231  64237  64271  64279  64283  64301  64303  64319 \n  64327  64333  64373  64381  64399  64403  64433  64439  64451  64453 \n  64483  64489  64499  64513  64553  64567  64577  64579  64591  64601 \n  64609  64613  64621  64627  64633  64661  64663  64667  64679  64693 \n  64709  64717  64747  64763  64781  64783  64793  64811  64817  64849 \n  64853  64871  64877  64879  64891  64901  64919  64921  64927  64937 \n  64951  64969  64997  65003  65011  65027  65029  65033  65053  65063 \n  65071  65089  65099  65101  65111  65119  65123  65129  65141  65147 \n  65167  65171  65173  65179  65183  65203  65213  65239  65257  65267 \n  65269  65287  65293  65309  65323  65327  65353  65357  65371  65381 \n  65393  65407  65413  65419  65423  65437  65447  65449  65479  65497 \n  65519  65521  65537  65539  65543  65551  65557  65563  65579  65581 \n  65587  65599  65609  65617  65629  65633  65647  65651  65657  65677 \n  65687  65699  65701  65707  65713  65717  65719  65729  65731  65761 \n  65777  65789  65809  65827  65831  65837  65839  65843  65851  65867 \n  65881  65899  65921  65927  65929  65951  65957  65963  65981  65983 \n  65993  66029  66037  66041  66047  66067  66071  66083  66089  66103 \n  66107  66109  66137  66161  66169  66173  66179  66191  66221  66239 \n  66271  66293  66301  66337  66343  66347  66359  66361  66373  66377 \n  66383  66403  66413  66431  66449  66457  66463  66467  66491  66499 \n  66509  66523  66529  66533  66541  66553  66569  66571  66587  66593 \n  66601  66617  66629  66643  66653  66683  66697  66701  66713  66721 \n  66733  66739  66749  66751  66763  66791  66797  66809  66821  66841 \n  66851  66853  66863  66877  66883  66889  66919  66923  66931  66943 \n  66947  66949  66959  66973  66977  67003  67021  67033  67043  67049 \n  67057  67061  67073  67079  67103  67121  67129  67139  67141  67153 \n  67157  67169  67181  67187  67189  67211  67213  67217  67219  67231 \n  67247  67261  67271  67273  67289  67307  67339  67343  67349  67369 \n  67391  67399  67409  67411  67421  67427  67429  67433  67447  67453 \n  67477  67481  67489  67493  67499  67511  67523  67531  67537  67547 \n  67559  67567  67577  67579  67589  67601  67607  67619  67631  67651 \n  67679  67699  67709  67723  67733  67741  67751  67757  67759  67763 \n  67777  67783  67789  67801  67807  67819  67829  67843  67853  67867 \n  67883  67891  67901  67927  67931  67933  67939  67943  67957  67961 \n  67967  67979  67987  67993  68023  68041  68053  68059  68071  68087 \n  68099  68111  68113  68141  68147  68161  68171  68207  68209  68213 \n  68219  68227  68239  68261  68279  68281  68311  68329  68351  68371 \n  68389  68399  68437  68443  68447  68449  68473  68477  68483  68489 \n  68491  68501  68507  68521  68531  68539  68543  68567  68581  68597 \n  68611  68633  68639  68659  68669  68683  68687  68699  68711  68713 \n  68729  68737  68743  68749  68767  68771  68777  68791  68813  68819 \n  68821  68863  68879  68881  68891  68897  68899  68903  68909  68917 \n  68927  68947  68963  68993  69001  69011  69019  69029  69031  69061 \n  69067  69073  69109  69119  69127  69143  69149  69151  69163  69191 \n  69193  69197  69203  69221  69233  69239  69247  69257  69259  69263 \n  69313  69317  69337  69341  69371  69379  69383  69389  69401  69403 \n  69427  69431  69439  69457  69463  69467  69473  69481  69491  69493 \n  69497  69499  69539  69557  69593  69623  69653  69661  69677  69691 \n  69697  69709  69737  69739  69761  69763  69767  69779  69809  69821 \n  69827  69829  69833  69847  69857  69859  69877  69899  69911  69929 \n  69931  69941  69959  69991  69997  70001  70003  70009  70019  70039 \n  70051  70061  70067  70079  70099  70111  70117  70121  70123  70139 \n  70141  70157  70163  70177  70181  70183  70199  70201  70207  70223 \n  70229  70237  70241  70249  70271  70289  70297  70309  70313  70321 \n  70327  70351  70373  70379  70381  70393  70423  70429  70439  70451 \n  70457  70459  70481  70487  70489  70501  70507  70529  70537  70549 \n  70571  70573  70583  70589  70607  70619  70621  70627  70639  70657 \n  70663  70667  70687  70709  70717  70729  70753  70769  70783  70793 \n  70823  70841  70843  70849  70853  70867  70877  70879  70891  70901 \n  70913  70919  70921  70937  70949  70951  70957  70969  70979  70981 \n  70991  70997  70999  71011  71023  71039  71059  71069  71081  71089 \n  71119  71129  71143  71147  71153  71161  71167  71171  71191  71209 \n  71233  71237  71249  71257  71261  71263  71287  71293  71317  71327 \n  71329  71333  71339  71341  71347  71353  71359  71363  71387  71389 \n  71399  71411  71413  71419  71429  71437  71443  71453  71471  71473 \n  71479  71483  71503  71527  71537  71549  71551  71563  71569  71593 \n  71597  71633  71647  71663  71671  71693  71699  71707  71711  71713 \n  71719  71741  71761  71777  71789  71807  71809  71821  71837  71843 \n  71849  71861  71867  71879  71881  71887  71899  71909  71917  71933 \n  71941  71947  71963  71971  71983  71987  71993  71999  72019  72031 \n  72043  72047  72053  72073  72077  72089  72091  72101  72103  72109 \n  72139  72161  72167  72169  72173  72211  72221  72223  72227  72229 \n  72251  72253  72269  72271  72277  72287  72307  72313  72337  72341 \n  72353  72367  72379  72383  72421  72431  72461  72467  72469  72481 \n  72493  72497  72503  72533  72547  72551  72559  72577  72613  72617 \n  72623  72643  72647  72649  72661  72671  72673  72679  72689  72701 \n  72707  72719  72727  72733  72739  72763  72767  72797  72817  72823 \n  72859  72869  72871  72883  72889  72893  72901  72907  72911  72923 \n  72931  72937  72949  72953  72959  72973  72977  72997  73009  73013 \n  73019  73037  73039  73043  73061  73063  73079  73091  73121  73127 \n  73133  73141  73181  73189  73237  73243  73259  73277  73291  73303 \n  73309  73327  73331  73351  73361  73363  73369  73379  73387  73417 \n  73421  73433  73453  73459  73471  73477  73483  73517  73523  73529 \n  73547  73553  73561  73571  73583  73589  73597  73607  73609  73613 \n  73637  73643  73651  73673  73679  73681  73693  73699  73709  73721 \n  73727  73751  73757  73771  73783  73819  73823  73847  73849  73859 \n  73867  73877  73883  73897  73907  73939  73943  73951  73961  73973 \n  73999  74017  74021  74027  74047  74051  74071  74077  74093  74099 \n  74101  74131  74143  74149  74159  74161  74167  74177  74189  74197 \n  74201  74203  74209  74219  74231  74257  74279  74287  74293  74297 \n  74311  74317  74323  74353  74357  74363  74377  74381  74383  74411 \n  74413  74419  74441  74449  74453  74471  74489  74507  74509  74521 \n  74527  74531  74551  74561  74567  74573  74587  74597  74609  74611 \n  74623  74653  74687  74699  74707  74713  74717  74719  74729  74731 \n  74747  74759  74761  74771  74779  74797  74821  74827  74831  74843 \n  74857  74861  74869  74873  74887  74891  74897  74903  74923  74929 \n  74933  74941  74959  75011  75013  75017  75029  75037  75041  75079 \n  75083  75109  75133  75149  75161  75167  75169  75181  75193  75209 \n  75211  75217  75223  75227  75239  75253  75269  75277  75289  75307 \n  75323  75329  75337  75347  75353  75367  75377  75389  75391  75401 \n  75403  75407  75431  75437  75479  75503  75511  75521  75527  75533 \n  75539  75541  75553  75557  75571  75577  75583  75611  75617  75619 \n  75629  75641  75653  75659  75679  75683  75689  75703  75707  75709 \n  75721  75731  75743  75767  75773  75781  75787  75793  75797  75821 \n  75833  75853  75869  75883  75913  75931  75937  75941  75967  75979 \n  75983  75989  75991  75997  76001  76003  76031  76039  76079  76081 \n  76091  76099  76103  76123  76129  76147  76157  76159  76163  76207 \n  76213  76231  76243  76249  76253  76259  76261  76283  76289  76303 \n  76333  76343  76367  76369  76379  76387  76403  76421  76423  76441 \n  76463  76471  76481  76487  76493  76507  76511  76519  76537  76541 \n  76543  76561  76579  76597  76603  76607  76631  76649  76651  76667 \n  76673  76679  76697  76717  76733  76753  76757  76771  76777  76781 \n  76801  76819  76829  76831  76837  76847  76871  76873  76883  76907 \n  76913  76919  76943  76949  76961  76963  76991  77003  77017  77023 \n  77029  77041  77047  77069  77081  77093  77101  77137  77141  77153 \n  77167  77171  77191  77201  77213  77237  77239  77243  77249  77261 \n  77263  77267  77269  77279  77291  77317  77323  77339  77347  77351 \n  77359  77369  77377  77383  77417  77419  77431  77447  77471  77477 \n  77479  77489  77491  77509  77513  77521  77527  77543  77549  77551 \n  77557  77563  77569  77573  77587  77591  77611  77617  77621  77641 \n  77647  77659  77681  77687  77689  77699  77711  77713  77719  77723 \n  77731  77743  77747  77761  77773  77783  77797  77801  77813  77839 \n  77849  77863  77867  77893  77899  77929  77933  77951  77969  77977 \n  77983  77999  78007  78017  78031  78041  78049  78059  78079  78101 \n  78121  78137  78139  78157  78163  78167  78173  78179  78191  78193 \n  78203  78229  78233  78241  78259  78277  78283  78301  78307  78311 \n  78317  78341  78347  78367  78401  78427  78437  78439  78467  78479 \n  78487  78497  78509  78511  78517  78539  78541  78553  78569  78571 \n  78577  78583  78593  78607  78623  78643  78649  78653  78691  78697 \n  78707  78713  78721  78737  78779  78781  78787  78791  78797  78803 \n  78809  78823  78839  78853  78857  78877  78887  78889  78893  78901 \n  78919  78929  78941  78977  78979  78989  79031  79039  79043  79063 \n  79087  79103  79111  79133  79139  79147  79151  79153  79159  79181 \n  79187  79193  79201  79229  79231  79241  79259  79273  79279  79283 \n  79301  79309  79319  79333  79337  79349  79357  79367  79379  79393 \n  79397  79399  79411  79423  79427  79433  79451  79481  79493  79531 \n  79537  79549  79559  79561  79579  79589  79601  79609  79613  79621 \n  79627  79631  79633  79657  79669  79687  79691  79693  79697  79699 \n  79757  79769  79777  79801  79811  79813  79817  79823  79829  79841 \n  79843  79847  79861  79867  79873  79889  79901  79903  79907  79939 \n  79943  79967  79973  79979  79987  79997  79999  80021  80039  80051 \n  80071  80077  80107  80111  80141  80147  80149  80153  80167  80173 \n  80177  80191  80207  80209  80221  80231  80233  80239  80251  80263 \n  80273  80279  80287  80309  80317  80329  80341  80347  80363  80369 \n  80387  80407  80429  80447  80449  80471  80473  80489  80491  80513 \n  80527  80537  80557  80567  80599  80603  80611  80621  80627  80629 \n  80651  80657  80669  80671  80677  80681  80683  80687  80701  80713 \n  80737  80747  80749  80761  80777  80779  80783  80789  80803  80809 \n  80819  80831  80833  80849  80863  80897  80909  80911  80917  80923 \n  80929  80933  80953  80963  80989  81001  81013  81017  81019  81023 \n  81031  81041  81043  81047  81049  81071  81077  81083  81097  81101 \n  81119  81131  81157  81163  81173  81181  81197  81199  81203  81223 \n  81233  81239  81281  81283  81293  81299  81307  81331  81343  81349 \n  81353  81359  81371  81373  81401  81409  81421  81439  81457  81463 \n  81509  81517  81527  81533  81547  81551  81553  81559  81563  81569 \n  81611  81619  81629  81637  81647  81649  81667  81671  81677  81689 \n  81701  81703  81707  81727  81737  81749  81761  81769  81773  81799 \n  81817  81839  81847  81853  81869  81883  81899  81901  81919  81929 \n  81931  81937  81943  81953  81967  81971  81973  82003  82007  82009 \n  82013  82021  82031  82037  82039  82051  82067  82073  82129  82139 \n  82141  82153  82163  82171  82183  82189  82193  82207  82217  82219 \n  82223  82231  82237  82241  82261  82267  82279  82301  82307  82339 \n  82349  82351  82361  82373  82387  82393  82421  82457  82463  82469 \n  82471  82483  82487  82493  82499  82507  82529  82531  82549  82559 \n  82561  82567  82571  82591  82601  82609  82613  82619  82633  82651 \n  82657  82699  82721  82723  82727  82729  82757  82759  82763  82781 \n  82787  82793  82799  82811  82813  82837  82847  82883  82889  82891 \n  82903  82913  82939  82963  82981  82997  83003  83009  83023  83047 \n  83059  83063  83071  83077  83089  83093  83101  83117  83137  83177 \n  83203  83207  83219  83221  83227  83231  83233  83243  83257  83267 \n  83269  83273  83299  83311  83339  83341  83357  83383  83389  83399 \n  83401  83407  83417  83423  83431  83437  83443  83449  83459  83471 \n  83477  83497  83537  83557  83561  83563  83579  83591  83597  83609 \n  83617  83621  83639  83641  83653  83663  83689  83701  83717  83719 \n  83737  83761  83773  83777  83791  83813  83833  83843  83857  83869 \n  83873  83891  83903  83911  83921  83933  83939  83969  83983  83987 \n  84011  84017  84047  84053  84059  84061  84067  84089  84121  84127 \n  84131  84137  84143  84163  84179  84181  84191  84199  84211  84221 \n  84223  84229  84239  84247  84263  84299  84307  84313  84317  84319 \n  84347  84349  84377  84389  84391  84401  84407  84421  84431  84437 \n  84443  84449  84457  84463  84467  84481  84499  84503  84509  84521 \n  84523  84533  84551  84559  84589  84629  84631  84649  84653  84659 \n  84673  84691  84697  84701  84713  84719  84731  84737  84751  84761 \n  84787  84793  84809  84811  84827  84857  84859  84869  84871  84913 \n  84919  84947  84961  84967  84977  84979  84991  85009  85021  85027 \n  85037  85049  85061  85081  85087  85091  85093  85103  85109  85121 \n  85133  85147  85159  85193  85199  85201  85213  85223  85229  85237 \n  85243  85247  85259  85297  85303  85313  85331  85333  85361  85363 \n  85369  85381  85411  85427  85429  85439  85447  85451  85453  85469 \n  85487  85513  85517  85523  85531  85549  85571  85577  85597  85601 \n  85607  85619  85621  85627  85639  85643  85661  85667  85669  85691 \n  85703  85711  85717  85733  85751  85781  85793  85817  85819  85829 \n  85831  85837  85843  85847  85853  85889  85903  85909  85931  85933 \n  85991  85999  86011  86017  86027  86029  86069  86077  86083  86111 \n  86113  86117  86131  86137  86143  86161  86171  86179  86183  86197 \n  86201  86209  86239  86243  86249  86257  86263  86269  86287  86291 \n  86293  86297  86311  86323  86341  86351  86353  86357  86369  86371 \n  86381  86389  86399  86413  86423  86441  86453  86461  86467  86477 \n  86491  86501  86509  86531  86533  86539  86561  86573  86579  86587 \n  86599  86627  86629  86677  86689  86693  86711  86719  86729  86743 \n  86753  86767  86771  86783  86813  86837  86843  86851  86857  86861 \n  86869  86923  86927  86929  86939  86951  86959  86969  86981  86993 \n  87011  87013  87037  87041  87049  87071  87083  87103  87107  87119 \n  87121  87133  87149  87151  87179  87181  87187  87211  87221  87223 \n  87251  87253  87257  87277  87281  87293  87299  87313  87317  87323 \n  87337  87359  87383  87403  87407  87421  87427  87433  87443  87473 \n  87481  87491  87509  87511  87517  87523  87539  87541  87547  87553 \n  87557  87559  87583  87587  87589  87613  87623  87629  87631  87641 \n  87643  87649  87671  87679  87683  87691  87697  87701  87719  87721 \n  87739  87743  87751  87767  87793  87797  87803  87811  87833  87853 \n  87869  87877  87881  87887  87911  87917  87931  87943  87959  87961 \n  87973  87977  87991  88001  88003  88007  88019  88037  88069  88079 \n  88093  88117  88129  88169  88177  88211  88223  88237  88241  88259 \n  88261  88289  88301  88321  88327  88337  88339  88379  88397  88411 \n  88423  88427  88463  88469  88471  88493  88499  88513  88523  88547 \n  88589  88591  88607  88609  88643  88651  88657  88661  88663  88667 \n  88681  88721  88729  88741  88747  88771  88789  88793  88799  88801 \n  88807  88811  88813  88817  88819  88843  88853  88861  88867  88873 \n  88883  88897  88903  88919  88937  88951  88969  88993  88997  89003 \n  89009  89017  89021  89041  89051  89057  89069  89071  89083  89087 \n  89101  89107  89113  89119  89123  89137  89153  89189  89203  89209 \n  89213  89227  89231  89237  89261  89269  89273  89293  89303  89317 \n  89329  89363  89371  89381  89387  89393  89399  89413  89417  89431 \n  89443  89449  89459  89477  89491  89501  89513  89519  89521  89527 \n  89533  89561  89563  89567  89591  89597  89599  89603  89611  89627 \n  89633  89653  89657  89659  89669  89671  89681  89689  89753  89759 \n  89767  89779  89783  89797  89809  89819  89821  89833  89839  89849 \n  89867  89891  89897  89899  89909  89917  89923  89939  89959  89963 \n  89977  89983  89989  90001  90007  90011  90017  90019  90023  90031 \n  90053  90059  90067  90071  90073  90089  90107  90121  90127  90149 \n  90163  90173  90187  90191  90197  90199  90203  90217  90227  90239 \n  90247  90263  90271  90281  90289  90313  90353  90359  90371  90373 \n  90379  90397  90401  90403  90407  90437  90439  90469  90473  90481 \n  90499  90511  90523  90527  90529  90533  90547  90583  90599  90617 \n  90619  90631  90641  90647  90659  90677  90679  90697  90703  90709 \n  90731  90749  90787  90793  90803  90821  90823  90833  90841  90847 \n  90863  90887  90901  90907  90911  90917  90931  90947  90971  90977 \n  90989  90997  91009  91019  91033  91079  91081  91097  91099  91121 \n  91127  91129  91139  91141  91151  91153  91159  91163  91183  91193 \n  91199  91229  91237  91243  91249  91253  91283  91291  91297  91303 \n  91309  91331  91367  91369  91373  91381  91387  91393  91397  91411 \n  91423  91433  91453  91457  91459  91463  91493  91499  91513  91529 \n  91541  91571  91573  91577  91583  91591  91621  91631  91639  91673 \n  91691  91703  91711  91733  91753  91757  91771  91781  91801  91807 \n  91811  91813  91823  91837  91841  91867  91873  91909  91921  91939 \n  91943  91951  91957  91961  91967  91969  91997  92003  92009  92033 \n  92041  92051  92077  92083  92107  92111  92119  92143  92153  92173 \n  92177  92179  92189  92203  92219  92221  92227  92233  92237  92243 \n  92251  92269  92297  92311  92317  92333  92347  92353  92357  92363 \n  92369  92377  92381  92383  92387  92399  92401  92413  92419  92431 \n  92459  92461  92467  92479  92489  92503  92507  92551  92557  92567 \n  92569  92581  92593  92623  92627  92639  92641  92647  92657  92669 \n  92671  92681  92683  92693  92699  92707  92717  92723  92737  92753 \n  92761  92767  92779  92789  92791  92801  92809  92821  92831  92849 \n  92857  92861  92863  92867  92893  92899  92921  92927  92941  92951 \n  92957  92959  92987  92993  93001  93047  93053  93059  93077  93083 \n  93089  93097  93103  93113  93131  93133  93139  93151  93169  93179 \n  93187  93199  93229  93239  93241  93251  93253  93257  93263  93281 \n  93283  93287  93307  93319  93323  93329  93337  93371  93377  93383 \n  93407  93419  93427  93463  93479  93481  93487  93491  93493  93497 \n  93503  93523  93529  93553  93557  93559  93563  93581  93601  93607 \n  93629  93637  93683  93701  93703  93719  93739  93761  93763  93787 \n  93809  93811  93827  93851  93871  93887  93889  93893  93901  93911 \n  93913  93923  93937  93941  93949  93967  93971  93979  93983  93997 \n  94007  94009  94033  94049  94057  94063  94079  94099  94109  94111 \n  94117  94121  94151  94153  94169  94201  94207  94219  94229  94253 \n  94261  94273  94291  94307  94309  94321  94327  94331  94343  94349 \n  94351  94379  94397  94399  94421  94427  94433  94439  94441  94447 \n  94463  94477  94483  94513  94529  94531  94541  94543  94547  94559 \n  94561  94573  94583  94597  94603  94613  94621  94649  94651  94687 \n  94693  94709  94723  94727  94747  94771  94777  94781  94789  94793 \n  94811  94819  94823  94837  94841  94847  94849  94873  94889  94903 \n  94907  94933  94949  94951  94961  94993  94999  95003  95009  95021 \n  95027  95063  95071  95083  95087  95089  95093  95101  95107  95111 \n  95131  95143  95153  95177  95189  95191  95203  95213  95219  95231 \n  95233  95239  95257  95261  95267  95273  95279  95287  95311  95317 \n  95327  95339  95369  95383  95393  95401  95413  95419  95429  95441 \n  95443  95461  95467  95471  95479  95483  95507  95527  95531  95539 \n  95549  95561  95569  95581  95597  95603  95617  95621  95629  95633 \n  95651  95701  95707  95713  95717  95723  95731  95737  95747  95773 \n  95783  95789  95791  95801  95803  95813  95819  95857  95869  95873 \n  95881  95891  95911  95917  95923  95929  95947  95957  95959  95971 \n  95987  95989  96001  96013  96017  96043  96053  96059  96079  96097 \n  96137  96149  96157  96167  96179  96181  96199  96211  96221  96223 \n  96233  96259  96263  96269  96281  96289  96293  96323  96329  96331 \n  96337  96353  96377  96401  96419  96431  96443  96451  96457  96461 \n  96469  96479  96487  96493  96497  96517  96527  96553  96557  96581 \n  96587  96589  96601  96643  96661  96667  96671  96697  96703  96731 \n  96737  96739  96749  96757  96763  96769  96779  96787  96797  96799 \n  96821  96823  96827  96847  96851  96857  96893  96907  96911  96931 \n  96953  96959  96973  96979  96989  96997  97001  97003  97007  97021 \n  97039  97073  97081  97103  97117  97127  97151  97157  97159  97169 \n  97171  97177  97187  97213  97231  97241  97259  97283  97301  97303 \n  97327  97367  97369  97373  97379  97381  97387  97397  97423  97429 \n  97441  97453  97459  97463  97499  97501  97511  97523  97547  97549 \n  97553  97561  97571  97577  97579  97583  97607  97609  97613  97649 \n  97651  97673  97687  97711  97729  97771  97777  97787  97789  97813 \n  97829  97841  97843  97847  97849  97859  97861  97871  97879  97883 \n  97919  97927  97931  97943  97961  97967  97973  97987  98009  98011 \n  98017  98041  98047  98057  98081  98101  98123  98129  98143  98179 \n  98207  98213  98221  98227  98251  98257  98269  98297  98299  98317 \n  98321  98323  98327  98347  98369  98377  98387  98389  98407  98411 \n  98419  98429  98443  98453  98459  98467  98473  98479  98491  98507 \n  98519  98533  98543  98561  98563  98573  98597  98621  98627  98639 \n  98641  98663  98669  98689  98711  98713  98717  98729  98731  98737 \n  98773  98779  98801  98807  98809  98837  98849  98867  98869  98873 \n  98887  98893  98897  98899  98909  98911  98927  98929  98939  98947 \n  98953  98963  98981  98993  98999  99013  99017  99023  99041  99053 \n  99079  99083  99089  99103  99109  99119  99131  99133  99137  99139 \n  99149  99173  99181  99191  99223  99233  99241  99251  99257  99259 \n  99277  99289  99317  99347  99349  99367  99371  99377  99391  99397 \n  99401  99409  99431  99439  99469  99487  99497  99523  99527  99529 \n  99551  99559  99563  99571  99577  99581  99607  99611  99623  99643 \n  99661  99667  99679  99689  99707  99709  99713  99719  99721  99733 \n  99761  99767  99787  99793  99809  99817  99823  99829  99833  99839 \n  99859  99871  99877  99881  99901  99907  99923  99929  99961  99971 \n  99989  99991 100003 100019 100043 100049 100057 100069 100103 100109 \n 100129 100151 100153 100169 100183 100189 100193 100207 100213 100237 \n 100267 100271 100279 100291 100297 100313 100333 100343 100357 100361 \n 100363 100379 100391 100393 100403 100411 100417 100447 100459 100469 \n 100483 100493 100501 100511 100517 100519 100523 100537 100547 100549 \n 100559 100591 100609 100613 100621 100649 100669 100673 100693 100699 \n 100703 100733 100741 100747 100769 100787 100799 100801 100811 100823 \n 100829 100847 100853 100907 100913 100927 100931 100937 100943 100957 \n 100981 100987 100999 101009 101021 101027 101051 101063 101081 101089 \n 101107 101111 101113 101117 101119 101141 101149 101159 101161 101173 \n 101183 101197 101203 101207 101209 101221 101267 101273 101279 101281 \n 101287 101293 101323 101333 101341 101347 101359 101363 101377 101383 \n 101399 101411 101419 101429 101449 101467 101477 101483 101489 101501 \n 101503 101513 101527 101531 101533 101537 101561 101573 101581 101599 \n 101603 101611 101627 101641 101653 101663 101681 101693 101701 101719 \n 101723 101737 101741 101747 101749 101771 101789 101797 101807 101833 \n 101837 101839 101863 101869 101873 101879 101891 101917 101921 101929 \n 101939 101957 101963 101977 101987 101999 102001 102013 102019 102023 \n 102031 102043 102059 102061 102071 102077 102079 102101 102103 102107 \n 102121 102139 102149 102161 102181 102191 102197 102199 102203 102217 \n 102229 102233 102241 102251 102253 102259 102293 102299 102301 102317 \n 102329 102337 102359 102367 102397 102407 102409 102433 102437 102451 \n 102461 102481 102497 102499 102503 102523 102533 102539 102547 102551 \n 102559 102563 102587 102593 102607 102611 102643 102647 102653 102667 \n 102673 102677 102679 102701 102761 102763 102769 102793 102797 102811 \n 102829 102841 102859 102871 102877 102881 102911 102913 102929 102931 \n 102953 102967 102983 103001 103007 103043 103049 103067 103069 103079 \n 103087 103091 103093 103099 103123 103141 103171 103177 103183 103217 \n 103231 103237 103289 103291 103307 103319 103333 103349 103357 103387 \n 103391 103393 103399 103409 103421 103423 103451 103457 103471 103483 \n 103511 103529 103549 103553 103561 103567 103573 103577 103583 103591 \n 103613 103619 103643 103651 103657 103669 103681 103687 103699 103703 \n 103723 103769 103787 103801 103811 103813 103837 103841 103843 103867 \n 103889 103903 103913 103919 103951 103963 103967 103969 103979 103981 \n 103991 103993 103997 104003 104009 104021 104033 104047 104053 104059 \n 104087 104089 104107 104113 104119 104123 104147 104149 104161 104173 \n 104179 104183 104207 104231 104233 104239 104243 104281 104287 104297 \n 104309 104311 104323 104327 104347 104369 104381 104383 104393 104399 \n 104417 104459 104471 104473 104479 104491 104513 104527 104537 104543 \n 104549 104551 104561 104579 104593 104597 104623 104639 104651 104659 \n 104677 104681 104683 104693 104701 104707 104711 104717 104723 104729);\n\nfor i in $2;\ndo\n    echo $i;\ndone | awk -v \"k=$1\" -v \"ps=${primes[*]}\" -- '\nBEGIN {\n    split(ps,primes)\n    flag = 0\n    cnt = 0\n}\nfunction is_k_prime(n) {\n    sqrt_n = int(sqrt(n));\n    j=1\n    res=1\n    for(i=0;res && i<k-1;i++) {\n        while(1) {\n            p=primes[j];\n            if(p>sqrt_n) { res = 0; break; }\n            else {\n                if(n%p==0) {\n                    n\/=p;\n                    break;\n                }\n                else j++;\n            }\n        }\n    }\n    while(res) {\n        if(primes[j]==n) break;\n        else if(primes[j]<n) j++;\n        else res=0;\n    }\n    return res;\n}\n\n{\n    oldflag = flag\n    flag = is_k_prime($1)\n    if(oldflag&&flag) cnt++;\n}\n\nEND {\n    print cnt;\n}\n'\n}\nconsec_kprimes $1 \"$2\"\n# [ $1 = 2 ] && echo 2 || echo 0;\n# echo \"$1\">&2\n# echo \"$2\">&2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337730,"user_id":null,"body":"consec_kprimes() {\n    k=$1\n    temp=0\n    res=0\n    for num in $2; do \n        div=( $(factor $num))\n        if [[ $(( ${#div[@]} - 1 )) -eq $1 ]] && [[ $temp -eq $1 ]]; then\n            res=$((++res))\n        fi\n        temp=$(( ${#div[@]} - 1 ))\n    done\n    echo $res\n}\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337731,"user_id":null,"body":"prime(){\nn=$1; p=2; k=0\nwhile [ $n -gt 1 ]; do\n  if [[ $((n%p)) -eq 0 ]]; then\n    ((k++))\n    ((n\/=p))\n  else\n    ((p++))\n  fi\n  done\n  return $k\n}\n\nconsec_kprimes() {\n  l=0; a=0; nr=0\n  for i in $2\n  do\n    l=$a\n    prime $i\n    a=$?\n    [ $a -eq $1 ] && [ $l -eq $1 ] && ((nr++))\n  done\n  return $nr\n}\nconsec_kprimes $1 \"$2\"\necho $?","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337732,"user_id":null,"body":"consec_kprimes() {\n    last=0\n    c=0\n    for i in $2; do\n      f=0\n      [ `factor $i | wc -w` -eq $(($1 + 1)) ] && f=1 && [ $last -eq 1 ] && ((c++))\n      [ $f -eq 1 ] && last=1 || last=0\n    done\n    echo $c\n}\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337733,"user_id":null,"body":"consec_kprimes() {\n  k=$1\n  cadena=$2\n  echo $k $cadena|awk '\n  END {\n    totalEntrada=split($0, mEntrada, \" \")\n    k=mEntrada[1]\n    for(iEntrada=2;iEntrada<=totalEntrada; iEntrada++)\n    {\n      factores=fPrime(mEntrada[iEntrada])\n      bIgual=0\n      if(factores == k) bIgual=1\n      mContarFactores[iEntrada] = bIgual\n    }#for\n    suma=0\n    for(iEntrada=2;iEntrada<=totalEntrada; iEntrada++)\n      suma=suma+(mContarFactores[iEntrada]*mContarFactores[iEntrada+1])\n    print suma \n    } #END\n    function fPrime(numero)\n    {\n      factor=2\n      total=0\n      backnumero=numero\n      while(numero % factor == 0)\n      {\n        numero=numero\/factor\n        ++total\n      } #while\n      if(numero > 1)\n      {\n        #Hace tiempo en el manual de mi calculadora Casio, encontre que solo era\n        #necesario probar hasta la raiz(num) para saber si un numero era primo\n        for(factor=3; factor <= sqrt(backnumero); factor += 2)\n        {\n          while(numero % factor == 0)\n          {\n            numero=numero\/factor\n            ++total\n          }# while\n        } #for\n        if(numero > 1)\n          ++total\n      } #if numero\n      return total\n    }#function\n  '\n} # consec_kprimes\n\nconsec_kprimes $1 \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337734,"user_id":null,"body":"primek() {\n  n=$1;\n  p=2;\n  k=0;\n  while [ $n -gt 1 ]; do\n    [ $((n%p)) -eq 0 ] && { ((k++)) ; ((n\/=p)); } || ((p++))\n  done\n  return $k\n}\n\nconsec_kprimes() {\n    lastk=0\n    actk=0\n    num=0    \n    for i in $2; do\n      lastk=$actk\n      primek $i\n      actk=$?\n      [ $actk -eq $1 ] && [ $lastk -eq $1 ] && ((num++))\n    done\n    return $num;\n}\nconsec_kprimes $1 \"$2\"\necho $?","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"573992c724fc289553000e95":[{"id":337735,"user_id":null,"body":"#!\/bin\/bash\nsmallest () {\n  printf \"%.f %s %s\n\" $(for ((i=0; i< ${#1}; i++)); do\n    for ((j=0; j< ${#1}; j++)); do\n      tmpNum=${1:0:$i}${1:$i+1}\n      echo \"${tmpNum:0:$j}${1:$i:1}${tmpNum:$j} $i $j\"\n    done\n  done | sort -n -k1 -k2) | head -n1\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337736,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my $s = shift; my $tmp = $s; my @mem = (-1,-1,-1);\n    my $l = length($s);\n    for ( my $i = 0; $i < $l; $i++ ) { \n        my $c = substr($s, $i, 1);\n        my $str1 = substr($s, 0, $i) . substr($s, $i + 1, $l - $i - 1);\n        for ( my $j = 0; $j < $l; $j++ ) { \n            my $str2 = substr($str1, 0, $j). $c . substr($str1, $j, $l - $j - 1);\n            if ($str2 lt $tmp) {\n                $tmp = $str2;\n                @mem = ($str2 + 0, $i, $j);\n            }\n        }\n    }\n    if ($mem[0] == - 1) { @mem = ($s + 0, 0, 0) }\n    my $res = \"\";\n    foreach (@mem) { $res .= \" $_\"; }\n    return substr($res, 1);\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\nsmallest () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337737,"user_id":null,"body":"#!\/bin\/bash\nsmallest () {\n    # another fine lesson in optimizing, \"g\"! \n nr=$1\n len=${#nr}\n res=( $nr 0 0 )\n\n for (( i=0; i < len; i++))\n do\n   rem=${nr:0:i}${nr:i+1} \n   for (( j=0; j <= ${#rem} ; j++))\n     do\n         [ \"$i\" -eq \"$j\" ] && tmp=$nr || tmp=${rem:0:j}${nr:i:1}${rem:j} \n         [ \"${res[0]}\" -gt \"$tmp\" ] && res=( $tmp $i $j )  \n     done \n done\n echo ${res[@]:0} | sed -e 's\/^0*\/\/'\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337738,"user_id":null,"body":"#!\/bin\/bash\nsmallest () {\n    n=$1; m=-1; l=${#n}\n    for ((i=0; i<l; ++i)); do\n      ni=${n::i}${n:i+1}\n      for ((j=0; j<l; ++j)); do\n        nj=10#${ni::j}${n:i:1}${ni:j}\n        if ((m==-1 || nj<m || nj==m&&i<mi || nj==m&&i==mi&&j<mj)); then\n          m=$nj; mi=$i; mj=$j\n        fi\n      done\n    done\n    echo \"$((m)) $mi $mj\"\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337739,"user_id":null,"body":"#NOT FIRST TRY\n#!\/bin\/bash\nsmallest () {\n  printf \"%.f %s %s\n\" $(for ((i=0; i< ${#1}; i++)); do\n    for ((j=0; j< ${#1}; j++)); do\n      tmpNum=${1:0:$i}${1:$i+1}\n      echo \"${tmpNum:0:$j}${1:$i:1}${tmpNum:$j} $i $j\"\n    done\n  done | sort -n -k1 -k2) | head -n1\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337740,"user_id":null,"body":"function smallest(){\n    local v=$1\n    local l1=$[${#v}-1]\n    local sv=$v si=0 sj=0\n    local i j\n    for i in `seq 0 $l1`\n    do\n        for j in `seq 0 $l1`\n        do\n            if((i==j))\n            then\n                nv=$v\n            elif((i<j))\n            then\n                nv=${v:0:i}${v:i+1:j-i}${v:i:1}${v:j+1}\n            else\n                nv=${v:0:j}${v:i:1}${v:j:i-j}${v:i+1}\n            fi\n            nv=$((10#${nv}))\n            if((nv<sv))\n            then\n                sv=$nv\n                si=$i\n                sj=$j\n            fi\n        done\n    done\n    echo $sv $si $sj\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337741,"user_id":null,"body":"#!\/bin\/bash\nsmallest () {\n    _small=$1\n    _i=0\n    _j=0\n    for (( i = 0; i < ${#1}; ++i )); do\n      for (( j = 0; j < ${#1}; ++j )); do\n        if [ $i -eq $j ]; then continue;\n        elif [ $i -lt $j ]; then\n          temporary=\"${1:0:$i}${1:$(( i + 1 )):$(( $j - $i ))}${1:$i:1}${1:$(( j + 1 )):$(( ${#1} - $j ))}\"\n        else\n          temporary=\"${1:0:$j}${1:$i:1}${1:$j:$(( $i - $j ))}${1:$(( i + 1 )):$(( ${#1} - $i ))}\"\n        fi\n\n        if [ \"$temporary\" -lt \"$_small\" ]; then\n          _small=$temporary\n          _i=$i\n          _j=$j\n        fi\n      done\n    done\n    \n    while [ ${_small:0:1} == \"0\" ]; do _small=\"${_small:1}\"; done\n    echo \"$_small $_i $_j\"\n}\nsmallest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337742,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\nfor ((i = 0; i < ${#1}; i++)); do\n\tfor ((j = 0; j < ${#1}; j++)); do\n\t       x=${1:$i:1}\n\t       t=${1:0:$i}${1:$((i+1))}\n\t       echo \"${t:0:$j}$x${t:$j} $i $j\"\n\tdone\ndone | sort -ns | head -n 1 | sed 's\/^0*\/\/'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337743,"user_id":null,"body":"#!\/bin\/bash\n\nvar=$1\n\nvprt() {\n        if [ $2 \\< $3 ]; then\n                grep -o \"[^0]\\+.*\" <<<\"${var:0:$2}${1:1:$(($3-$2))}${1:0:1}${var:$(($3+1))} $2 $3\"\n        else\n                grep -o \"[^0]\\+.*\" <<<\"${var:0:$3}${var:$2:1}${var:$3:$(($2-$3))}${var:$(($2+1))} $2 $3\"\n        fi\n}\n\nvec() { expr length \"$(grep -o '^[0-'$2']\\+' <<<${1\/?} | grep -o '.*[^'$2']')\"; }\n\nsmallest() {\n        min=$(fold -w1 <<<${1#?} | sort -u | head -1)\n        if ! [ $min \\> ${1:1:1} ]; then\n                if [ ${1:0:1} -le ${1:1:1} -a $min -ge ${1:0:1} ]; then\n                        [ ${#1} == 2 ] && { echo \"$var 0 0\"; return; }\n                        smallest ${1\/?} $(($2+1))\n                        return\n                fi\n        fi\n        if [ $min == ${1:1:1} ] && [ ${1:0:1} \\> ${1:1:1} ]; then\n                        if [ ${1:0:1} \\< \"${1:2:1}\" -a $(expr length \"${1%$min*}\") != 1 ]; then\n                            :\n                         else\n                             vprt $1 $2 $(($(vec $1 ${1:0:1})+$2))\n                             return\n                          fi\n         fi\n         vprt $1 $(expr length $(grep -o '.*[^'$min']' <<<\"${var%$min*}\")) $(vec .$var $min)\n}\n\n[ ${#1} -lt 2 ] && exit\n\nsmallest $1 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337744,"user_id":null,"body":"#!\/bin\/bash\nfound_it () {\n  local f=$2;\n  local t=$3;\n  local str;\n  if [ $f -gt $t ]; then\n    str=${1:0:$t}${1:$f:1}${1:$t:$((f-t))}${1:$((f+1))};\n  else\n    str=${1:0:$f}${1:$((f+1)):$((t-f))}${1:$f:1}${1:$((t+1))};\n  fi\n  echo \"$((10#${str})) $f $t\";\n}\n\nsmallest () {\n    # your code\n    local len=${#1};\n    local l=0;\n    local ss=(`echo $1|grep -o .|sort`);\n    for((;l<len;l++));\n    do\n      local left=${1:l:1};\n      if [ $left -eq ${ss[$l]} ]; then continue; fi\n      if [ \"${1:l+1:1}\" -eq ${ss[$l]} ]; then\n        declare -i k=$((l+2));\n        for((;k<len;k++));\n        do\n          [ ${1:k:1} -gt $left ] && { break; } \n        done\n        k=$((k-1));\n        for((;k>=0;k--));\n        do\n          [ ! ${1:k:1} -eq $left ] && { k=$((k-1)); break; }\n        done\n        found_it $1 $l $((k+1));\n      fi\n      for((r=len-1;r>l;r--));\n      do\n        local right=${1:r:1};\n        if [ $right -eq ${ss[$l]} ]; then\n          for((;r>=0;r--));\n          do\n            [ ! \"${1:r:1}\" -eq $right ] && { break; }\n          done\n          r=$((r+1));\n          l=$((l-1));\n          for((;l>=0;l--));\n          do\n            [ ! \"${1:l:1}\" -eq $right ] && { break; }\n          done\n          l=$((l+1));\n          found_it $1 $r $l;\n          return 0;\n        fi\n      done\n    done\n    echo \"$1 0 0\"\n}\nsmallest \"$1\" | sort -n | head -1;","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"57591ef494aba64d14000526":[{"id":337745,"user_id":492,"body":"#!\/bin\/bash\nsum_john_ann_aux () {                                              \n  echo \"define sum_john_ann_aux(n, which) {\n    ann[0]=1; john[0]=0; sumann=1; sumjohn=0;\n    for (i=1; i<n; i++) {\n    \tjohn[i]=i - ann[john[i-1]];\n    \tann[i]=i - john[ann[i-1]];\n    \tsumjohn = sumjohn + john[i];\n    \tsumann = sumann + ann[i];\n    }\n    if (which == 1) { return (sumjohn); }\n    if (which == 2) { return (sumann); }\n}; sum_john_ann_aux($1, $2)\" | bc \n}\nsumJohnAndAnn() {\n    d=$(echo $(sum_john_ann_aux $1 $2))\n    echo $d\n}\nsumJohnAndAnn $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337746,"user_id":53,"body":"# sumJohnAndAnn has two parameters\n# first one : n (number of days, $1)\n# second one : which($2) -> \n# 1 for getting John's sum\n# 2 for getting Ann's sum. \n# See \"Sample Tests\" below.\n\n#!\/bin\/bash\nsumJohnAndAnn () {\n  bc <<< '\n    scale = 20\n    n = '$1'\n    w = '$2'\n    xsum = 0\n    ysum = 1\n    i = 1\n    xs[0] = 0\n    ys[0] = 1\n    while (i < n) {\n      x = i - ys[xs[i - 1]]\n      y = i - xs[ys[i - 1]]\n      xs[i] = x\n      ys[i] = y\n      xsum = xsum + x\n      ysum = ysum + y\n      i = i + 1\n    }\n    if (w == 1) {\n      print xsum\n    } else {\n      print ysum\n    }\n  '\n}\nsumJohnAndAnn $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337747,"user_id":null,"body":"#!\/bin\/bash\n# Kata URL: https:\/\/www.codewars.com\/kata\/57591ef494aba64d14000526\/train\/shell\n\n# :param ndays: number of days\n# :param which: 1 - john, 2 - ann\nfunction sumJohnAndAnn() {\n  [[ $# -ne 2 ]] && >&2 echo \"ERROR: You must specify params 'n' and 'which'\"\n\n  bc <<EOF\n  john[0]=0\n  ann[0]=1\n\n  if ($2 == 1) {\n    sum=john[0]\n  } else {\n    sum=ann[0]\n  }\n\n  for ( n=1; n< $1; n++ ) {\n    john[n]=n - ann[john[n-1]]\n    ann[n]=n - john[ann[n-1]]\n\n    if ($2 == 1) {\n      sum+=john[n]\n    } else {\n      sum+=ann[n]\n    }\n  }\n\n  sum\nEOF\n}\n\nsumJohnAndAnn $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337748,"user_id":null,"body":"# sumJohnAndAnn has two parameters\n# first one : n (number of days, $1)\n# second one : which($2) -> \n# 1 for getting John's sum\n# 2 for getting Ann's sum. \n# See \"Sample Tests\" below.\n#!\/bin\/bash\nsumJohnAndAnn() {\n  awk -v N=$1 -v who=$2 'BEGIN {\n    a[0]=1; j[0]=0; n=0; sum[2]=1\n    while (++n < N) {\n      j[n] = n - a[j[n-1]]\n      a[n] = n - j[a[n-1]]\n      sum[1] += j[n]\n      sum[2] += a[n]\n    }\n    printf \"%.0f\", sum[who] # workaround 32-bit integer limit of %lu\n  }'\n}\nsumJohnAndAnn $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5763bb0af716cad8fb000580":[{"id":337749,"user_id":1467,"body":"if [ $1 -eq 0 ]; then\n  echo 1\nelse\n  echo $((($1+1)**3-($1-1)**3))\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337750,"user_id":1045,"body":"(($1==0)) && echo 1 || echo $(( ($1+1)**3 - ($1-1)**3 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337751,"user_id":null,"body":"echo $(( $1 == 0 ? 1 : 6 * $1 ** 2 + 2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337752,"user_id":null,"body":"((hidden = $1 - 1))\nif ((hidden > 0)); then\n    echo $((($1 + 1) ** 3 - ($1 - 1) ** 3))\nelse\n    echo $((($1 + 1) ** 3))\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337753,"user_id":null,"body":"echo $(($1 ? 6 * $1 ** 2 + 2 : 1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337754,"user_id":null,"body":"echo $(( $1 == 0 ? 1 : $1**2*6+2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337755,"user_id":null,"body":"(($1)) && (echo \"($1+1)^3-($1-1)^3\" | bc) || echo 1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337756,"user_id":null,"body":"mid=0\nif [ $1 -gt 1 ]\nthen\n  mid=$(($1-1))\nfi\necho \"($1+1)^3-$mid^3\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337757,"user_id":null,"body":"if [ $1 -eq 0 ];then\n  echo 1\nelse\n  echo \"6*$1^2+2\" | bc\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337758,"user_id":null,"body":"[ $1 -eq 0 ] && echo 1 || echo \"6 * $1 ^ 2 + 2\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5772382d509c65de7e000982":[{"id":337759,"user_id":492,"body":"#!\/bin\/bash\nlength_sup_uk_aux () {                                              \n  echo \"define length_sup_uk_aux(n, k) {\n    h[1]=1; h[2]=1; cnt=0\n    for (i=3; i<=n; i++) {h[i]=h[i-h[i-1]]+h[i-h[i-2]];}\n    for (i=1; i<=n; i++) {\n        if (h[i] >= k) cnt=cnt+1;\n    }\n    return (cnt)\n}; length_sup_uk_aux($1, $2)\" | bc \n}\nlengthSupUk() {\n    d=$(echo $(length_sup_uk_aux $1 $2))\n    echo $d\n}\nlengthSupUk $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337760,"user_id":null,"body":"# Only lengthSupUk() is tested\n#!\/bin\/bash\nlengthSupUk() {\n    # your code\nbc << EOF\nh[1]=1;\nh[2]=1;\nh[3]=2;\nh[4]=3;\nh[5]=3;\ncnt=0;\nfor(i=6;i<=$1;i++) {\n  h[i]=h[i-h[i-1]]+h[i-h[i-2]];\n}\nfor(i=1;i<=$1;i++) {\n  if(h[i]>=$2) cnt=cnt+1;\n}\nprint cnt;\nEOF\n}\nlengthSupUk $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337761,"user_id":null,"body":"# Only lengthSupUk() is tested\n#!\/bin\/bash\nlengthSupUk() {\n  # your code\n  echo $1 $2 |awk '\n    END{\n      m[1]=1\n      m[2]=1\n      for(i=3;i<=$1; i++)\n        m[i]=fLlenar(i)\n      total=0\n      for(i=3;i<=$1; i++)\n        if(m[i] >= $2)\n          ++total\n      if (total == \"\") print $0\n      else\n        print total\n    } #END\n\n    function fImprimir(FIN)\n    {\n      for(i=1;i<=FIN;i++)\n        printf \"%4d  %5d\n\", i, m[i]\n    }\n    function fLlenar(numero)\n    {\n        i1=m[numero-1]\n        i2=m[numero-2]\n        valor1=m[numero-i1]\n        valor2=m[numero-i2]\n      return valor1+valor2\n    }\n  ' #awk\n}\n\nlengthSupUk $1 $2\n        ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"57a0e5c372292dd76d000d7e":[{"id":337762,"user_id":1566,"body":"#!\/bin\/bash\necho $(printf \"%.s$2\" $(seq $1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337763,"user_id":null,"body":"#!\/bin\/bash\nrepeat=$1\nstring=$2\nfor i in `seq 1 $repeat`; do echo -n $string; done\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337764,"user_id":17,"body":"#!\/bin\/bash\nrepeat=$1\nstring=$2\nresult=\"\"\nwhile [ $repeat -gt 0 ]\ndo\n  result=\"$result$string\"\n  ((repeat--))\ndone\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337765,"user_id":null,"body":"printf \"%.s$2\" `seq $1`","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337766,"user_id":null,"body":"#!\/bin\/bash\nrepeat=$1\nstring=$2\nrepeat_str() {\n  myString=$(printf \"%${repeat}s\")\n  echo ${myString\/\/ \/$string}\n}\n\nrepeat_str\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337767,"user_id":null,"body":"#!\/bin\/bash\nrepeat=$1 string=$2\nfor (( i = 0; i < repeat; ++i)); do\n    printf %s \"$string\"\ndone\nprintf \\\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337768,"user_id":null,"body":"#!\/bin\/bash\nrepeat=$1\nstring=$2\nfor ((i=0;i<$1;i++)); do printf $2; done","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337769,"user_id":null,"body":"#!\/bin\/bash\nrepeat=$1\nstring=$2\nstr=\"\"\nfunction repeat_str {\n  for i in $(seq 1 $repeat); do\n    str+=$string\n  \n  done\n  echo $str\n\n\n\n}\nrepeat_str","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337770,"user_id":null,"body":"#!\/bin\/bash\n\n# Repeat given string n times.\n\nn=$1\nstring=$2\n\nfunction repeat_str() {\n\n  for i in $(seq $1)\n  do\n    echo -n $2\n  done\n  \n  return 0\n}\n\nrepeat_str $n $string\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337771,"user_id":null,"body":"#!\/bin\/bash\nrepeat=$1\nstring=$2\n\nrepeat_str (){\n          for i in $(seq $1);\n          do echo -n \"$2\"; \n          done\n}\n\nrepeat_str $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"57eae20f5500ad98e50002c5":[{"id":337772,"user_id":null,"body":"echo ${1\/\/ \/}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337773,"user_id":527,"body":"tr -d ' ' <<<\"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337774,"user_id":null,"body":"echo \"${1\/\/ }\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337775,"user_id":null,"body":"#! \/bin\/bash\n\necho \"$1\" | tr -d \" \"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337776,"user_id":null,"body":"var=\"$1\"\n\n#Uses parameter expansion\necho ${var\/\/[[:blank:]]\/}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337777,"user_id":null,"body":"echo $1 | perl -e '($_) = <>; s\/ +\/\/g; print $_'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337778,"user_id":null,"body":"var=\"$1\"\n#${}\u53bb\u9664\u7a7a\u683c\necho ${var\/\/ \/}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337779,"user_id":null,"body":"var=\"$1\"\n#echo \"${1\/\/ }\"\necho $1 | sed -s 's\/ \/\/g'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337780,"user_id":null,"body":"var=\"$1\"\necho ${var\/\/\\ \/}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337781,"user_id":null,"body":"var=\"$1\"\nfunction removeStringSpace(){\nfor word in $var\ndo\nnewS+=\"$word\"\ndone\necho $newS\n}\nremoveStringSpace $var","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58069e4cf3c13ef3a6000168":[{"id":337782,"user_id":274,"body":"echo \"$1\" | rev | bc\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337783,"user_id":null,"body":"# echo $1\nn=$1\nret=0\n\nwhile ((n > 0))\ndo\n\tret=$((ret*10 + n % 10))\n\tn=$((n \/ 10))\ndone\n\necho $ret\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337784,"user_id":null,"body":"echo $((10#`echo $1 | rev`))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337785,"user_id":null,"body":"# Accepts number as $1 and reverts it by algorithm:\n# 1. Take the least significant digit (LSD) of given\n#    number by subtracting original number from\n#    the same number divided and then multiplied by 10\n# 2. Multiply result varuable by ten and add LSD\n# 3. Reduce orinal number by dividing by 10\n# 4. Stop when original number becomes 0\n\nfunction reverse_number()\n{\n    local NUM=$1\n    local REVERSE=0\n    \n    while [ $NUM -gt 0 ]\n    do\n        REVERSE=$(($REVERSE * 10 + ($NUM - ($NUM \/ 10 * 10)) ))\n        NUM=$(($NUM \/ 10))\n    done\n    \n    echo $REVERSE\n}\n\necho $(reverse_number $1)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337786,"user_id":null,"body":"echo $1 | rev | sed 's\/^0\\+\/\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337787,"user_id":null,"body":"n=$1\nrev=0\nwhile (( $n )); do\n  (( rev *= 10 ))\n  (( r = n % 10 ))\n  (( rev += r ))\n  (( n \/= 10 ))\ndone\necho $rev","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337788,"user_id":null,"body":"shopt -s extglob\necho \"${1%%+(0)}\" | rev","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337789,"user_id":null,"body":"# echo $1\naux=`echo $1|rev`\nexpr $aux + 0\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337790,"user_id":null,"body":"echo $(echo $(echo $1 | rev) | sed 's\/^0*\/\/')\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337791,"user_id":null,"body":"[[ $(echo $1 | rev) =~ ^0{0,}(.*) ]] && echo ${BASH_REMATCH[1]}\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58184387d14fc32f2b0012b2":[{"id":337792,"user_id":null,"body":"#!\/bin\/bash\necho \"scale=32; $1\/2-$1^2\/8+$1^3\/16-5*$1^4\/128\" | bc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337793,"user_id":492,"body":"#!\/bin\/bash\nf(){\n  f1=$(echo \"scale=30;1.0 + sqrt(1.0 + $1)\" | bc)\n  res=$(echo \"scale=30;$1 \/ $f1\" | bc)\n  echo $res\n}\nf $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337794,"user_id":168,"body":"#!\/bin\/bash\necho \"scale=30; $1 \/ (1 + sqrt(1 + $1))\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337795,"user_id":null,"body":"#!\/bin\/bash\necho \"scale=30; sqrt (1 + $1) - 1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337796,"user_id":null,"body":"#!\/bin\/bash\nprintf '%.32e' $(bc <<< \"scale = 32; sqrt(1 + ${1}) - 1\")","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337797,"user_id":null,"body":"#!\/bin\/bash\nprintf '%.16e' $(bc -l <<< \"scale = 64; sqrt(1 + ${1}) - 1\")","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337798,"user_id":53,"body":"#!\/bin\/bash\n...........\nx=$1\ny=`echo \"scale=28; $x \/ 2.0 - $x * $x \/ 8.0 + $x * $x * $x \/ 16.0 - 5.0 * $x * $x * $x * $x \/ 128.0\" | bc -l`\necho $y","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337799,"user_id":50,"body":"#!\/bin\/bash\necho $(echo \"scale=25;$1\/(1.0 + sqrt(1.0 + $1))\" | bc)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337800,"user_id":null,"body":"#!\/bin\/bash\n\necho $(bc <<< \"scale=32;($1 \/ 2) - ($1 ^ 2) * (1 \/ 8) + ($1 ^3) * (1 \/ 16) - ($1 ^ 4) * (5 \/ 128) + ($1 ^ 5) * ( 7 \/ 256 )\")","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337801,"user_id":null,"body":"#!\/bin\/bash\n\nfunction main {\n    # Substitute e for the 10^[+\/-]whatever.\n    local substitution=$(sed -E 's\/([+-]?[0-9.]+)[eE]\\+?(-?)([0-9]+)\/(\\1*10^\\2\\3)\/g' <<< \"$1\")\n    local res=$(echo \"scale=40; sqrt( ${substitution} + 1 ) - 1\" | bc)\n    echo $res\n}\n\nmain $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"581ee0db1bbdd04e010002fd":[{"id":337802,"user_id":492,"body":"#!\/bin\/bash\ninterp() {\n    fct=$1; lg=$2; u=$3; n=$4\n    for i in $(seq 0 $(($n - 1))); do \n        d=$(bc <<< \"scale=16; $lg + $i * ($u - $lg) \/ $n\")\n        r=$(bc -l <<< \"scale=16; $fct($d)\")\n        r=$(printf \"%.2f\" $r)\n        result=\"${result} $r\"\n    done\n    result=${result:1}\n    echo \"$result\"\n}\ninterp $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337803,"user_id":492,"body":"#!\/bin\/bash\ninterp() {\n    fct=$1; lg=$2; u=$3; n=$4\n    for i in $(seq 0 $(($n - 1))); do \n        d=$(bc <<< \"scale=16; $lg + $i * ($u - $lg) \/ $n\")\n        r=$(bc -l <<< \"scale=16; $fct($d)\")\n        r=$(printf \"%.2f\" $r)\n        result=\"${result} $r\"\n    done\n    result=${result:1}\n    echo \"$result\"\n}\ninterp $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337804,"user_id":null,"body":"#!\/bin\/bash\ninterp() {\nd=`echo \"scale=16; ($3-$2)\/$4\" | bc`\nc=()\nfor ((i=0;i<$4;i++));do\nt0=`echo \"scale=16; $2+$d*$i\" | bc`\nt=`echo \"scale=16; $1($t0)\" | bc -l`\nt=$(printf \"%.2f\" \"$t\")\nc+=($t)\ndone\necho ${c[@]}\n}\ninterp $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337805,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\npoints () {\nbc -l <<BC\nscale = 16\nl = $2\nu = $3\nn = $4\nd = (u - l) \/ n\nfor (k = 0; k < n; k++)\n  $1(l + k * d)\nBC\n}\n\npoints \"$1\" \"$2\" \"$3\" \"$4\" | xargs printf '%.2f\n' | paste -s -d' ' -\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337806,"user_id":null,"body":"#!\/bin\/bash\ninterp() {\n    # your code\nbc -l << EOF | xargs -I{} printf \"%.2f \" {}\nscale=16;\nd=($3-$2)\/$4\nfor(i=0;i<$4;i++) {\n$1($2+d*i);\n}\nEOF\n}\ninterp $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337807,"user_id":null,"body":"#!\/bin\/bash\nbc_scale() {\n    echo \"scale=16; $*\" | bc -l\n}\n\nint() {\n    printf \"%d\" $(echo \"$*\" | bc)\n}\n\ninterp() {\n    d=$(bc_scale \"($3-$2)\/$4\")\n    d100=$(int $d*100)\n    l100=$(int \"$2*100\")\n    u100=$(int \"$3*100\")\n    j=0\n    for ((i=$l100; i<=(($u100-$d100)); i+=$d100))\n    do\n        x=$(bc_scale \"$1 ($2+$d*$j)\")\n        printf \"%.2f \" $x\n        let j++\n    done\n    echo\n}\ninterp $1 $2 $3 $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337808,"user_id":null,"body":"awk '\nfunction err(s) { print s | \"cat >&2\"; exit 2}\nfunction f(x) {\n    if (F == \"c\") return cos(x)\n    if (F == \"s\") return sin(x)\n    if (F == \"e\") return exp(x)\n    if (F == \"sqrt\") return sqrt(x)\n    err(\"F = \" F)\n}\n\nBEGIN {\n    F = ARGV[++i]; l = ARGV[++i]; h = ARGV[++i]; n = ARGV[++i]\n    \n    d = (h - l) \/ n\n    for (i = 0; i < n; i++) {\n        x = l + d*i\n        if (!Next) Next = 1; else printf \" \"\n        printf \"%.2f\", f(x)\n    }\n    printf \"\n\"\n}\n' \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58261acb22be6e2ed800003a":[{"id":337809,"user_id":null,"body":"#!\/bin\/bash\n\necho $1*$2*$3 | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337810,"user_id":null,"body":"#!\/bin\/bash\nlength=$1\nwidth=$2\nheight=$3\necho \"$width * $length * $height\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337811,"user_id":null,"body":"#!\/bin\/bash\nawk \"\n  BEGIN {\n    print $1 * $2 * $3\n  }\n\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337812,"user_id":666,"body":"#!\/usr\/bin\/env bash\n\ncuboid_volume() {\n  length=\"${1}\"\n  width=\"${2}\"\n  height=\"${3}\"\n  bc <<<\"${length} * ${width} * ${height}\"\n}\n\n\ncuboid_volume \"${1}\" \"${2}\" \"${3}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337813,"user_id":null,"body":"#!\/bin\/bash\nawk -v l=\"$1\" -v w=\"$2\" -v h=\"$3\" 'BEGIN {printf (l*w*h)}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337814,"user_id":null,"body":"#!\/bin\/bash\nlength=$1\nwidth=$2\nheight=$3\n\ncuboid_volume () {\n    echo $(bc <<< \"$length * $width * $height\")\n}\n\ncuboid_volume","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337815,"user_id":null,"body":"#!\/bin\/bash\nlength=$1\nwidth=$2\nheight=$3\n\nbc <<< \"$length * $width * $height\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337816,"user_id":null,"body":"#!\/bin\/bash\nlength=$1\nwidth=$2\nheight=$3\n\necho \"The number you are looking for is `echo \"$1*$2*$3\" | bc`\"  #sending to bc to handle floats\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337817,"user_id":null,"body":"#!\/bin\/bash\nlength=$1\nwidth=$2\nheight=$3\nvol=$(echo $1*$2*$3 | bc)\necho $vol","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337818,"user_id":null,"body":"#!\/bin\/bash\nlength=$1\nwidth=$2\nheight=$3\nc=$(bc<<<\"scale=3;$1*$2*$3\")\necho $c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"582a4f4ab94351397d000006":[{"id":337819,"user_id":1375,"body":"ls *.$1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337820,"user_id":1519,"body":"ls | grep \".$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337821,"user_id":null,"body":"# add your shell script here. Expect the file extension to be passed in as the first argument\n#!\/bin\/bash\nls *.$1 \nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337822,"user_id":666,"body":"ext=\"${1}\"\n\nfor file in *\".${ext}\"; do\n  printf '%s' \"${file}\"\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337823,"user_id":null,"body":"# add your shell script here. Expect the file extension to be passed in as the first argument\n\n#!\/bin\/bash\n\nextension=$1\n\n#for number of files in dir\nfor file in *.$extension\ndo\n\t\t\techo \"$file\"\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337824,"user_id":null,"body":"#!\/bin\/bash\n\nextension=$1\n\nls | grep .$extension","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337825,"user_id":null,"body":"# add your shell script here. Expect the file extension to be passed in as the first argument\nls | grep \"\\.$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337826,"user_id":152,"body":"ls -a | grep \"\\.${1}$\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337827,"user_id":null,"body":"ls -A | grep -P \".$1\\$\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337828,"user_id":null,"body":"# add your shell script here. Expect the file extension to be passed in as the first argument\nls -1 | grep .$1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"582cb0224e56e068d800003c":[{"id":337829,"user_id":null,"body":"#!\/bin\/bash\ntime=$1\n# The fun begins here.\necho \"$1\/2\" | bc\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337830,"user_id":274,"body":"echo \"$1 * 1\/2\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337831,"user_id":null,"body":"#!\/bin\/bash\npython -c \"import math; print(math.floor($1 * 0.5))\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337832,"user_id":null,"body":"#!\/bin\/bash\ntime=$1\nawk \"BEGIN { print int($time \/ 2) }\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337833,"user_id":null,"body":"#!\/bin\/bash\necho `bc <<< $1*1\/2`","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337834,"user_id":null,"body":"#!\/bin\/bash\ntime=${1%%.*}\necho $(( time\/2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337835,"user_id":null,"body":"#!\/bin\/bash\ntime=$1\n# The fun begins here.\ntime=${time%.*}\necho $(( time\/2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337836,"user_id":null,"body":"#!\/bin\/bash\ntime=$1\n# The fun begins here.\nnum=`echo \"$time\/2\" | bc`\necho ${num%.*}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337837,"user_id":53,"body":"#!\/bin\/bash\ntime=$1\na=${time%.*}\necho $(( $a \/ 2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337838,"user_id":null,"body":"#!\/bin\/bash\ntime=$1\necho $(( $(cut -d. -f1 <<< $time) \/ 2 ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"582cd9033c1acf1d45000052":[{"id":337839,"user_id":null,"body":"echo \"Count: \"{1..20}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337840,"user_id":676,"body":"#!\/bin\/bash\n\nfor i in $(seq 1 20); do echo \"Count: $i\"; done","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337841,"user_id":null,"body":"#!\/bin\/bash\n\ncountToTwenty() {\n  for i in {1..20}; do echo \"Count: ${i}\"; done\n}\n\ncountToTwenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337842,"user_id":495,"body":"#!\/bin\/bash\n\ncountToTwenty() {\n  i=1\n  while [ $i -le 20 ]\n  do\n    echo Count: $i\n    let i++\n  done\n}\n\ncountToTwenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337843,"user_id":null,"body":"#!\/bin\/bash\n\ncountToTwenty() {\n  for((i=0; i<=20; i++))\n  do\n    printf \"Count: %d\n\" $i\n  done\n}\n\ncountToTwenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337844,"user_id":666,"body":"#!\/usr\/bin\/env bash\n\ncount_to_twenty() {\n  i=1\n  while (( i < 21 )); do\n    echo \"Count: $(( i++ ))\"\n  done  \n}\n\n\ncount_to_twenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337845,"user_id":null,"body":"#!\/bin\/bash\n\ncountToTwenty() {\n  # Your Code Here...\n  var=0\n  while [ $var -le 20 ];\n  do\n    echo \"Count:\" $var\n    var=$((var+1))\n    done\n}\n\ncountToTwenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337846,"user_id":null,"body":"#!\/bin\/bash\n\ncountToTwenty() {\n   for i in `seq 1 20`; do\n      echo Count: $i\n   done\n}\n\ncountToTwenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337847,"user_id":1232,"body":"#!\/bin\/bash\n\ncountToTwenty() {\n  seq -f \"Count: %g \" 20\n\n}\n\ncountToTwenty","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337848,"user_id":null,"body":"echo Count:\\ {1..20}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"582d7d22081ed3342d0000a7":[{"id":337849,"user_id":495,"body":"#!\/bin\/bash\n\nif [ -z $1 ] ; then\n  echo \"Nothing to find\"\nelif [ -e $1 ] ; then\n  echo \"Found $1\"\nelse\n  echo \"Can't find $1\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337850,"user_id":null,"body":"#!\/bin\/bash\n\n[ -z $1 ] && echo \"Nothing to find\" || [ -e $1 ] && echo \"Found $1\" || echo \"Can't find $1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337851,"user_id":17,"body":"#!\/bin\/bash\n\nif [[ $# -ne 1 ]]; then\n  echo Nothing to find\n  exit 1\nfi\n\ntest -f $1\n\nif [[ $? -eq 0 ]]; then\n  echo Found $1\nelse\n  echo \"Can't find $1\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337852,"user_id":null,"body":"#!\/bin\/bash\n\nFILE=$1\nif [ -z \"$FILE\" ]; then\n   echo \"Nothing to find\" \nelif [ -f $FILE ]; then\n   echo \"Found $FILE\"\nelse\n   echo \"Can't find $FILE\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337853,"user_id":null,"body":"#!\/bin\/bash\nif [ $1 ]\nthen\n  if [ -f $1 ] \n  then \n   echo \"Found\" $1\n  else  \n   echo \"Can't find\" $1\n  fi\nelse\necho \"Nothing to find\"\nfi\n# Your code here... :)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337854,"user_id":null,"body":"#!\/bin\/bash\nif [ $# -lt 1 ]\nthen\n    echo \"Nothing to find\"\nelse\n    test -e $1 && echo \"Found $1\" || echo \"Can't find $1\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337855,"user_id":null,"body":"#!\/bin\/bash\n\nfilename=$1\nif [[ -z \"${filename}\" ]]; then\n  echo \"Nothing to find\"\n  return 1\nfi\n\nif [[ -f \"${filename}\" ]]; then\n  echo \"Found ${filename}\"\nelse\n  echo \"Can't find ${filename}\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337856,"user_id":null,"body":"#!\/bin\/bash\n\nFILE=\"$1\"\n\nif [ -z \"$FILE\" ]; then\n    printf \"Nothing to find\n\"\nelif [ -f \"$FILE\" ]; then\n    printf \"Found %s\n\" \"$FILE\"\nelse\n    printf \"Can't find %s\n\" \"$FILE\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337857,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ -z $1 ]] ; then\n  echo \"Nothing to find\"\nelif [[ -e $1 ]] ; then\n  echo \"Found $1\"\nelse\n  echo \"Can't find $1\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337858,"user_id":null,"body":"#!\/bin\/bash\n\nif [ $# -eq 0 ]; then\n  echo \"Nothing to find\"\n  exit\nfi\n\nif [ -f $1 ]; then\n  echo \"Found $1\"\nelse\n  echo \"Can't find $1\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58305403aeb69a460b00019a":[{"id":337859,"user_id":null,"body":"#!\/bin\/bash\nFOO=$(echo ${1~~} | rev);\nBAR=$(echo ${2~~} | rev);\necho ${BAR}@@@${FOO}${1~~};","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337860,"user_id":null,"body":"echo $(echo ${2~~}|rev)@@@$(echo ${1~~}|rev)${1~~}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337861,"user_id":null,"body":"#!\/bin\/bash\n\nword2=$(echo \"$2\" | tr A-Za-z a-zA-Z | rev)\nword1=$(echo $(echo \"$1\" | tr A-Za-z a-zA-Z | rev)$(echo \"$1\" | tr A-Za-z a-zA-Z))\necho \"${word2}\"\"@@@\"\"${word1}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337862,"user_id":null,"body":"#!\/bin\/bash\n\nfunction reverse () { echo $1 | rev             ; }\nfunction invert  () { echo $1 | tr A-Za-z a-zA-Z; }\n\ni1=$(invert $1);\nri1=$(reverse $i1);\nri2=$(reverse $(invert $2));\necho \"$ri2@@@$ri1$i1\";\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337863,"user_id":null,"body":"first=$( echo \"${2~~}\" | rev )\nsecond=$( echo \"${1~~}\" | rev )\necho \"${first}@@@${second}${1~~}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337864,"user_id":null,"body":"#!\/bin\/bash\np2=$(echo $2 | rev | tr '[:lower:][:upper:]' '[:upper:][:lower:]')@@@\np1=$(echo $1 | tr '[:lower:][:upper:]' '[:upper:][:lower:]')\necho $p2$(rev <<< $p1)$p1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337865,"user_id":null,"body":"echo `echo $2 | rev`@@@`echo $1 | rev`$1 | tr '[:upper:][:lower:]' '[:lower:][:upper:]'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337866,"user_id":null,"body":"#!\/bin\/bash\nfirst=`echo $2|tr '[:upper:][:lower:]' '[:lower:][:upper:]'|rev`\nsecond=`echo $1|tr '[:upper:][:lower:]' '[:lower:][:upper:]'|rev`\nthird=`echo $1|tr '[:upper:][:lower:]' '[:lower:][:upper:]'`\necho $first@@@$second$third","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337867,"user_id":null,"body":"x=`rev<<<$1`$1@@@$2\nrev<<<${x~~}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337868,"user_id":null,"body":"#!\/bin\/bash\n\necho $(echo $2 | rev | tr 'a-zA-Z' 'A-Za-z')\"@@@\"$(echo $1 | rev | tr 'a-zA-Z' 'A-Za-z')$(echo $1 | tr 'a-zA-Z' 'A-Za-z')","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"583989556754d6f4c700018e":[{"id":337869,"user_id":null,"body":"#!\/bin\/bash\nn=$(($1 * $2))\nseq $n $n $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337870,"user_id":null,"body":"#!\/bin\/bash\n\nfor ((i=1 ; $i <= $3 ; i++)) do\nif (($i % $1 == 0 )) &&  (($i % $2 == 0))\nthen echo $i\nfi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337871,"user_id":null,"body":"#!\/bin\/bash\n\nstep=$1*$2\nfor ((i = step; i <= $3; i += step)); do\n    echo $i\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337872,"user_id":null,"body":"#!\/bin\/bash\nseq $(($1*$2)) $(($1*$2)) $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337873,"user_id":null,"body":"for i in $(seq $3); do\n  if (( $i % $1 == 0 && $i % $2 == 0 )); then\n    echo \"$i\"\n  fi\ndone ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337874,"user_id":null,"body":"#!\/bin\/bash\nlet n=$3\/$1\nlet m=$3\/$2\nfor i in $(seq $n)\ndo\nmult1=$(($i*$1))\narray1+=($mult1)\ndone\nfor i in $(seq $m)\ndo\nmult2=$(($i*$2))\narray2+=($mult2)\ndone\necho ${array1[@]} ${array2[@]} |tr ' ' '\n' |sort -n | uniq -d\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337875,"user_id":null,"body":"#!\/bin\/bash\nfor ((i = 0; i <= $3; i++))\ndo\n    if [ $(($i % $1)) -eq 0 -a $(($i % $2)) -eq 0 ]\n    then\n        echo $i\n    fi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337876,"user_id":null,"body":"#!\/bin\/bash\nlet \"factor=$1*$2\"\nfor (( x=factor; x <= $3; x+=factor )); do\n    echo $x\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337877,"user_id":null,"body":"#!\/bin\/bash\nfor i in $(seq 1 $3); do\n  (( $i % $1 == 0 && $i % $2 == 0 )) && echo $i\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337878,"user_id":null,"body":"#!\/bin\/bash\n\nbase=$(( $1 * $2 ))\nfor (( i=$base; i<=$3; i+=$base ))\ndo\n  echo $i\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"584857c5a7878e993b0005cc":[{"id":337879,"user_id":495,"body":"#!\/bin\/bash\n\nif [ -z $1 ] ; then\n  echo \"Nothing to find\"\n  exit\nfi\n\nif [ ! -d $1 ] ; then\n  echo \"Directory not found\"\n  exit\nfi\n\necho \"There are $(find $1 -type f | wc -l) files in $(pwd)\/$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337880,"user_id":null,"body":"#!\/bin\/bash\n\n[[ $# -eq 1 ]] || { echo \"Nothing to find\"; exit; }\n[[ -d $1 ]] || { echo \"Directory not found\"; exit; }\n\ncount=$(find $1 -type f | wc -l)\necho \"There are $count files in \/home\/codewarrior\/shell\/$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337881,"user_id":15,"body":"#!\/bin\/bash\n\nif [ -z $1 ] ; then\n  echo \"Nothing to find!\"\nelif [ ! -d $1 ] ; then\n  echo \"Directory not found\"\nelse\n  echo \"There are\" `ls $1\/ | wc -l` \"files in\" `cd $1; pwd`\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337882,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ ! $1 ]]; then\n  echo 'Nothing to find'\nelif [[ ! -d $1 ]]; then\n  echo 'Directory not found'\nelse\n  result=$(find \"$1\" -maxdepth 1 -type f -printf \"\n\" | wc -l)\n  echo \"There are $result files in $(readlink -f $1)\"\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337883,"user_id":null,"body":"#!\/bin\/bash\n\nif [ -z $1 ];\nthen\n  echo \"Nothing to find\"\nelif [ ! -d \"$1\" ]; \n  then echo \"Directory not found\"\nelse\n  for i in $(find $1 -type f -maxdepth 1)\n  do\n    ((sum=sum+1))\n  done\n  if [ -z ${sum+x} ];\n    then echo \"Nothing to find\"\n  else \n    echo \"There are $sum files in $PWD\/$1\"\n  fi\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337884,"user_id":null,"body":"#!\/bin\/bash\n\nif [[ $# -eq 0 ]]; then\n  echo \"Nothing to find\"\n  exit 1\nfi\n\nif [[ ! -d \"$1\" ]]; then\n  echo \"Directory not found\"\n  exit 1\nfi\n\nn=$(find \"$1\" -maxdepth 1 -type f | wc -l)\nfullpath=$(readlink -e \"$1\")\necho \"There are ${n} files in ${fullpath}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337885,"user_id":null,"body":"#!\/bin\/bash\n[ $1 ] || echo \"Nothing to find\" || exit 1\ncd $1 || echo \"Directory not found\" || exit 1\necho \"There are $(find . -maxdepth 1 -type f | wc -l) files in $(pwd)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337886,"user_id":null,"body":"#!\/bin\/bash\n\n[[ \"$#\" -lt 1 ]] && echo \"Nothing to find\" && exit 1\n[[ ! -d \"$1\"  ]] && echo \"Directory not found\" && exit 1\n\ncount=$(find $1 -type f | wc -l)\necho \"There are $count files in $(readlink -f $1)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337887,"user_id":null,"body":"(($# == 0)) && echo \"Nothing to find\" || [ -d \"$1\" ] && echo \"There are $(find \"$1\" -maxdepth 1 -type f | wc -l) files in $PWD\/$1\" || echo \"Directory not found\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337888,"user_id":null,"body":"#!\/bin\/bash\necho \"numfiles\"\nif [ -z $1 ]\n  then\n    echo \"Nothing to find\"\nelif [[ -d $1 ]]\n  then\n    cnt=$(find $1 -maxdepth 1 -type f |wc -l)\n    absd=$(realpath $1)\n    echo \"There are $cnt files in $absd\"\nelse\n  echo \"Directory not found\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"5868b2de442e3fb2bb000119":[{"id":337889,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my $s = shift; \n    if (length($s) == 0) { return \"\"; }\n    my @s = split \/ \/, $s; my $lg = scalar @s;\n    my @nw = map { [ &sumdigits($s[$_]), $_, $s[$_] ] } 0 .. $#s;\n    my @sortnws = sort { \"$a->[0]\" <=> \"$b->[0]\" or \"$a->[1]\" <=> \"$b->[1]\" } @nw;\n    my $i = 1; my $min = 100000; my $ndx = -1;\n    while ($i < $lg) {\n        my $a = $sortnws[$i][0] - $sortnws[$i - 1][0];\n        if ($a < $min) { $min = $a; $ndx = $i; }\n        $i += 1;\n    }\n    my $res = \"[[\".$sortnws[$ndx -1][0].\", \".$sortnws[$ndx -1][1].\", \".$sortnws[$ndx -1][2].\"], [\".\n                   $sortnws[$ndx][0].\", \".$sortnws[$ndx][1].\", \".$sortnws[$ndx][2].\"]]\";\n    return $res;\n}\nsub sumdigits {\n    my $s = shift; my $sm = 0;\n    foreach $a (unpack(\"C*\", uc $s)) { $sm += $a - ord('0'); }\n    return $sm;\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\nclosest () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\nclosest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337890,"user_id":null,"body":"#!\/bin\/bash\nclosest () {\n  paste <(echo \"$1\" | grep -o \"[0-9]*\" | sed 's\/.\/&+\/g;s\/+$\/\/' | bc) <(echo \"$1\" | grep -o \"[0-9]*\") | nl -v0 | sort -nk2 | awk -v nb_lines=$(echo \"$1\" | grep -o \"[0-9]*\" | wc -l) '{\n    if(NR!=1){\n      d=$2-prevW;\n      if(NR==2||d<min){\n        min=d;\n        p1=prevP; w1=prevW; n1=prevN;\n        p2=$1; w2=$2; n2=$3;\n      }\n    };\n    prevP=$1; prevW=$2; prevN=$3;\n    if(NR==nb_lines){\n      printf(\"[[%d, %d, %d], [%d, %d, %d]]\n\", w1, p1, n1, w2, p2, n2);\n    };\n  }'\n}\nclosest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337891,"user_id":null,"body":"#!\/bin\/bash\nclosest () {\n  # sorry for the tail -1\n  # i don't know how to resolve the buffering? issue in awk (triggers END before the end)\n  # it should be END{printf ...}\n  paste <(echo \"$1\" | grep -o \"[0-9]*\" | sed 's\/.\/&+\/g;s\/+$\/\/' | bc) <(echo \"$1\" | grep -o \"[0-9]*\") <(seq 1 ${#numbers}) | nl | sort -nk2 \\\n  | awk '{if(NR!=1){diffW=$2-prevW; if(NR==2||minDiff>diffW){minDiff=diffW; min1=prevN; pos1=prevP; wei1=prevW; min2=$3; pos2=$1; wei2=$2}}; prevW=$2; prevN=$3; prevP=$1; printf \"[[%d, %d, %d], [%d, %d, %d]]\n\",wei1,pos1-1,min1,wei2,pos2-1,min2}' | tail -1\n}\nclosest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337892,"user_id":null,"body":"#!\/bin\/bash\nclosest () {\n  tr ' ' '\n' <<< $1 |\n  awk -v FS=\"\" '{\n    w = 0;\n    for (d=1; d<=NF; d++) w += $d;\n    print w, $0, NR-1\n  }' |\n  sort -g -k1,1 -k3,3 |\n  awk '{\n    w=$1; n=$2; i=$3\n    while (getline) {\n      if (w<$1 || (w==$1 && i<$3)) {\n        print $1-w, $1+w, $3+i, w, i, n, $1, $3, $2\n      } else {\n        print $1-w, $1+w, $3+i, $1, $3, $2, w, i, n\n      }\n      w=$1; n=$2; i=$3\n    }\n  }' |\n  sort -k1,1g -k2,2g -k3,3g |\n  awk 'NR == 1 { printf \"[[%d, %d, %d], [%d, %d, %d]]\n\", $4, $5, $6, $7, $8, $9 }'\n}\nclosest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337893,"user_id":null,"body":"#!\/bin\/bash\nweight () {\n  local num=$1;\n  local len=${#num};\n  local res=0;\n  for((i=0;i<$len;i++));\n  do\n    res=$((res+${num:$i:1}));\n  done\n  echo $res;\n}\n\nclosest () {\n    # your code\n    [ -z \"$1\" ] && { echo \"\"; exit 0; }\n    declare -a arr=($1);\n    local len=${#arr[@]};\n    declare -a data=(`for ((i=0;i<$len;i++)); do local _n=${arr[$i]}; local _w=$(weight $_n); echo \"$(($len*_w+i)) $_w [$_w#,$i#,$_n]\"; done | sort -n | cut -d \" \" -f2,3`);\n    len=${#data[@]};\n    local min_d=\"\";\n    local min_i=\"\";\n    for((i=2;i<len;i+=2));\n    do\n      local d=$((${data[$i]}-${data[$i-2]}));\n      if [ $d -eq 0 ]; then\n        min_i=$i;\n        break;\n      elif [[ -z \"$min_d\" || $min_d -gt $d ]]; then\n        min_d=$d;\n        min_i=$i;\n      fi\n    done\n    printf \"[%s, %s]\" \"${data[$((min_i-1))]\/\/'#,'\/, }\" \"${data[$((min_i+1))]\/\/'#,'\/, }\";\n}\n\nclosest \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337894,"user_id":null,"body":"#!\/bin\/bash\n\nweight () {\n        local sum=0\n        while read -N 1 digit; do\n                (( sum += digit ))\n        done <<< \"$1\"\n        echo $sum\n}\n\n#[[ -z $1 ]] && exit\n\ndeclare -a numbers=( $1 )\ndeclare -a weights=( $(for number in $1; do echo $(weight $number); done | xargs) )\nmindiff=-1\nfor (( i1=0; i1<${#numbers[*]}; i1++ )); do\n        for (( i2=i1+1; i2<${#numbers[*]}; i2++ )); do\n                (( diffw = weights[$i1] - weights[$i2] ))\n                if (( diffw <= 0 )); then\n                        j1=$i1; j2=$i2\n                        w1=${weights[$i1]}; w2=${weights[$i2]}\n                        (( diffw = 0 - diffw ))\n                else\n                        j1=$i2; j2=$i1\n                        w1=${weights[$i2]}; w2=${weights[$i1]}\n                fi\n                newsolution=\"[[$w1, $j1, ${numbers[$j1]}], [$w2, $j2, ${numbers[$j2]}]]\"\n                if   (( mindiff == -1 )); then\n                        solution=$newsolution\n                        minweight=$(( ( w1 >= w2 ) ? w1 : w2 ))\n                        mindiff=$diffw\n                elif (( diffw <  mindiff )); then\n                        solution=$newsolution\n                        (( mindiff = diffw ))\n                        minweight=$(( ( w1 >= w2 ) ? w1 : w2 ))\n                elif (( diffw == mindiff )); then\n                        if   (( w1 < minweight )); then\n                                solution=$newsolution\n                                (( minweight = w1 ))\n                        elif (( w2 < minweight )); then\n                                solution=$newsolution\n                                (( minweight = w2 ))\n                        fi\n                fi\n        done\ndone\n\necho \"$solution\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"586d6cefbcc21eed7a001155":[{"id":337895,"user_id":null,"body":"#!\/bin\/bash\n\necho $1 | grep -oE '(.)\\1*' | awk -F \"\" 'BEGIN{LEN=0}{if(length($0)>LEN){LEN=length($0);res=$1}}END{print res\",\"LEN}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337896,"user_id":516,"body":"max_length=$(echo $1 | grep -oP '(.)\\1*' | tr '\\t \\r' 'x' | wc -L)\nlongest_repetition=$(echo $1 | grep -oP \"(.)\\1{$(($max_length - 1))}\" | head -n 1)\necho ${longest_repetition:0:1},$max_length","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337897,"user_id":null,"body":"#!\/bin\/bash\n\nmaxL=0\n\nfor x in $(echo \"$1\" | egrep -o '(.)\\1*')\ndo\n    [[ ${#x} -gt $maxL ]] && maxL=${#x} && c=${x:0:1}\ndone\n\necho $c,$maxL\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337898,"user_id":null,"body":"#!\/bin\/bash\nlongest=0\nresult=''\ntemp=1\nfor i in $(seq 0 ${#1})\ndo\n  if [ \"${1:i:1}\" == \"${1:i+1:1}\" ]\n  then\n    ((temp++))\n  else\n    if [ $temp -gt $longest ]\n    then\n      longest=$temp\n      result=\"${1:i:1}\"\n    fi\n    temp=1\n  fi\ndone\n\necho \"$result,$longest\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337899,"user_id":null,"body":"#!\/bin\/bash\n\nif (( ${#1} == 0 ));\n  then \n    echo \",0\";\n    exit 1;\n  fi\ntete=`grep -Eo \"(.)\\1*\" <<< \"$1\" | awk '{ print length($1),substr($1, 1, 1)}' | sort -nsr | head -1`\n\necho \"${tete:2:1},${tete:0:1}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337900,"user_id":null,"body":"#!\/bin\/bash\ngrep -o . <<<\"$1\" | uniq -c |\nawk '{if(a<$1){a=$1;b=$2}} END{ if(a)print b \",\" a; else print \",0\"}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337901,"user_id":null,"body":"#!\/bin\/bash\n\nif [ -z \"$1\" ];then\n  echo ',0'\nfi\n\n# echo -e \"$1\\c\" | sed \"s\/.\/&\n\/g\"  # Place each char on its own line\n# | uniq -c  # Count char sequences\n# | nl  # Number lines; used for secondary sort when two sets have same length\n# | tr -s '[:blank:]' ' '  # So much white space, so little need, so remove\n# | sort -t' ' -k3nr,3 -k2,2  # Sort by char count descending, then line number\n# | sed \"s\/^ \\([0-9]*\\) \\([0-9]*\\) \\(.*\\)$\/\\3,\\2\/\"  # Rearrange output\n# | head -1  # Only need first result\n\necho -e \"$1\\c\" | sed \"s\/.\/&\n\/g\" | uniq -c | nl | tr -s '[:blank:]' ' ' | sort -t' ' -k3nr,3 -k2,2 | sed \"s\/^ \\([0-9]*\\) \\([0-9]*\\) \\(.*\\)$\/\\3,\\2\/\" | head -1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337902,"user_id":516,"body":"#!\/bin\/bash\ngrep -oP \"(.)\\1*\" <<<$1 | awk '{print substr($1,1,1)\",\"length} END { if (!NR) print \",0\"}' | sort -sk 1.3r | head -n1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337903,"user_id":null,"body":"#!\/bin\/bash\n\nstring=1${1}; longest=''; teststr=''; char=''\nwhile [ \"${string}\" ]; do\n  char1=${string:0:1}\n  string=${string:1}\n  char2=${string:0:1}\n  if [ \"$char1\" = \"$char2\" ]; then\n    teststr=$char1$teststr\n    else teststr=$char2\n  fi\n  l1=${#longest}\n  l2=${#teststr}\n  if [ \"$l1\" -lt \"$l2\" ]; then\n    longest=$teststr\n  fi\ndone\necho \"${longest::1},${#longest}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337904,"user_id":2390,"body":"#! \/bin\/bash\n\nif [[ ! \"$1\" ]]; then\n    echo \",0\"\nelse\n    # Put a newline before every character in the string\n    # before passing it to awk.\n    echo \"$1\" $'\n' | sed -E 's\/.\/&\n\/g' | awk '\n        $0 == previous && previous != \"\" { \n            count++ \n            next\n        }\n        $0 != \"\" { \n            if (count > max) {\n                max = count\n                longest = previous\n            }\n            if (longest == \"\") {\n                longest = $0\n            }\n            previous = $0\n            count = 0\n        }\n        END { \n            printf \"%s,%i\n\", longest, max + 1 \n        }'\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58841cb52a077503c4000015":[{"id":337905,"user_id":1045,"body":"#! \/bin\/bash\nn=$1; first_number=$2\necho $((  ($1\/2+$2)%$1  ))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337906,"user_id":527,"body":"echo $((($2 + $1 \/ 2) % $1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337907,"user_id":null,"body":"n=$1\nfirst_number=$2\nperl -e \"print(($first_number + ($n \/ 2)) % $n)\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337908,"user_id":null,"body":"n=$1\nfirst_number=$2\nmiddle=$(echo $n \/ 2 | bc)\necho $(( $first_number < $middle ? $middle + $first_number : $first_number - $middle))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337909,"user_id":null,"body":"n=$1\nfirst_number=$2\nif [[ $(($2+1)) -le $(($1\/2)) ]]; then\n  echo $(($2 + $1\/2))\nelse\n  echo $(($2 - $1\/2))\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337910,"user_id":null,"body":"n=$1\nfirst_number=$2\necho $(((first_number + n \/ 2) % n))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337911,"user_id":null,"body":"n=$1\nfirst_number=$2\n# your code here\necho $((  ($1\/2+$2)%$1  ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337912,"user_id":null,"body":"echo \"($2 + $1\/2) % $1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337913,"user_id":null,"body":"n=$(($1\/2)); x=$2;\n[[ $x -lt $n ]] && echo $(($n+$x)) || echo $(($x-$n))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337914,"user_id":null,"body":"n=$1\nfirst_number=$2\nharf=$((n \/ 2))\n((harf > first_number)) && echo $((harf + first_number)) || echo $((first_number - harf))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58a2d1fdd7f6c7e51b000076":[{"id":337915,"user_id":274,"body":"date -d \"${1,,} 1\" +%m","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337916,"user_id":null,"body":"month=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\ncase $month in\n  jan*) m=\"01\" ;;\n  feb*) m=\"02\" ;;\n  mar*) m=\"03\" ;;\n  apr*) m=\"04\" ;;\n  may*) m=\"05\" ;;\n  jun*) m=\"06\" ;;\n  jul*) m=\"07\" ;;\n  aug*) m=\"08\" ;;\n  sep*) m=\"09\" ;;\n  oct*) m=\"10\" ;;\n  nov*) m=\"11\" ;;\n  dec*) m=\"12\" ;;\nesac\necho $m","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337917,"user_id":null,"body":"date --date=\"$(printf \"01 %s\" $1)\" +\"%m\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337918,"user_id":null,"body":"month=\"${1,,}\"\ndeclare -A months=(\n  [\"january\"]=\"01\"\n  [\"february\"]=\"02\"\n  [\"march\"]=\"03\"\n  [\"april\"]=\"04\"\n  [\"may\"]=\"05\"\n  [\"june\"]=\"06\"\n  [\"july\"]=\"07\"\n  [\"august\"]=\"08\"\n  [\"september\"]=\"09\"\n  [\"october\"]=\"10\"\n  [\"november\"]=\"11\"\n  [\"december\"]=\"12\"\n)\n\nif [ ${months[$month]} ]; then\n  echo ${months[$month]}\nelse\n  for key in ${!months[@]}; do\n    if [ ${key:0:3} == $month ]; then echo ${months[$key]}; fi\n  done\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337919,"user_id":null,"body":"case $(echo $1 | tr '[:upper:]' '[:lower:]') in\n    jan*) echo 01 ;;\n    feb*) echo 02 ;;\n    mar*) echo 03 ;;\n    apr*) echo 04 ;;\n    may*) echo 05 ;;\n    jun*) echo 06 ;;\n    jul*) echo 07 ;;\n    aug*) echo 08 ;;\n    sep*) echo 09 ;;\n    oct*) echo 10 ;;\n    nov*) echo 11 ;;\n    dec*) echo 12 ;;\nesac\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337920,"user_id":null,"body":"month=\"$1\"\ncase \"${month,,}\" in\n  jan|january) echo 01;;\n  feb|february) echo 02;;\n  mar|march) echo 03;;\n  apr|april) echo 04;;\n  may) echo 05;;\n  jun|june) echo 06;;\n  jul|july) echo 07;;\n  aug|august) echo 08;;\n  sep|september) echo 09;;\n  oct|october) echo 10;;\n  nov|november) echo 11;;\n  dec|december) echo 12;;\n  *) return 1;;\nesac","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337921,"user_id":666,"body":"#!\/usr\/bin\/env bash\n\nmonth_to_number() {\n  date -d \"${1} 1\" +%m\n}\n\nmonth_to_number \"${1,,}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337922,"user_id":null,"body":"month_short=`echo $1 | grep -oE '^.{3}'`\necho \"jan01feb02mar03apr04may05jun06jul07aug08sep09oct10nov11dec12\" | grep -ioE \"$month_short[0-9]{2}\" | grep -oE '..$'\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337923,"user_id":null,"body":"month=\"$1\"\ndate -d '1 '${month} '+%m'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337924,"user_id":null,"body":"date -d \"1 $1 1970\" +%m","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58ad317d1541651a740000c5":[{"id":337925,"user_id":1045,"body":"#!\/bin\/bash\n\n######################################################################\n## SO FIRST I WROTE A SOLUTION THAT COMPUTED ALL THE PERMUTATIONS THROUGH\n## A RECURSIVE FUNCTION CALL\n##\n## OBVIOUSLY THAT DIDN'T WORK\n##\n## BUT I DID GET TO LEARN HOW TO PASS VARIABLES THROUGH RECURSIVE FUNCTIONS\n## IN SHELL !!!!!\n## \n######################################################################\n#\n#function addlttr() {\n#  base=$1; ltrs=$2; res='' \n#  if [ -z \"$ltrs\" ]; then\n#    echo $base\n#  else\n#    for x in $ltrs; do\n#      res=\"$res $( addlttr \"$base$x\" \"$( echo $ltrs|tr -d \"$x\" )\" )\"\n#      done\n#    fi\n#  echo $res\n#}\n\n#function middle() {\n#  ltrs=$(echo $1|grep -o .|tr '\n' ' ')\n#  res=\"$( addlttr '' \"$ltrs\" )\"\n#  res=$( echo \"$res\"|sort -d )\n#  arr=( $res ); ######echo ${arr[*]} 1>&2\n#  mid=$(( ${#arr[*]}\/2 )); (( ${#arr[*]}%2==0 )) && let mid=mid-1\n#  echo ${arr[$mid]}  \n#}\n\n## THEN I READ THE DISCUSSION, AND SOLVED THE PROBLEM\n\nfunction middle(){\nres=''; ltrs=$( echo $1|grep -o .|sort -d|tr -cd 'a-z')\n(( ${#ltrs}%2==1 )) && res=${ltrs:$((${#ltrs}\/2)):1} && ltrs=$(echo $ltrs|tr -d $res)\nres=$res${ltrs:$((${#ltrs}\/2-1)):1}\nltrs=$(echo $ltrs|tr -d ${res: -1}|rev)\necho $res$ltrs\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337926,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n  sorted=$(grep -o . <<< \"$1\" | sort | tr -d '\n')\n  len=${#sorted}\n  ordered=\"\"\n  \n  # number of permutations to get the middle term\n  nb_permutations=$(bc <<< \"( $(seq -s '*' 1 ${len}) \/ 2 ) - 1\")\n\n  # iteration on character index (from 0) till no other permutation is needed\n  i=0  \n  while [[ ${nb_permutations} > 0 ]]\n  do\n    # number of permutations for each character roll at index i\n    nb_subterms=$(seq -s '*' 1 $((len-i-1)) | bc)\n    \n    # number of character rolls = position of the desired letter\n    p=$(bc <<< \"${nb_permutations} \/ ${nb_subterms}\")\n  \n    # get the letter\n    letter=${sorted:${p}:1}    \n    sorted=$(tr -d \"${letter}\" <<< \"${sorted}\")\n    ordered+=${letter}\n    \n    # number of permutations left for next iteration\n    ((p > 0)) && nb_permutations=$(bc <<< \"${nb_permutations} % ${nb_subterms}\")\n    ((i++))\n  done\n  \n  # return the result\n  echo ${ordered}${sorted}\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337927,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n  str=$(echo \"$1\" | grep -o . | sort | tr -d \"\n\")\n  len=$(echo $str | grep -o . | wc -l)\n  \n  if [[ $len -lt 3 ]]; then\n    echo $str\n  elif [[ $(($len % 2)) -eq 0 ]]; then\n    mid=$((($len\/2)-1))\n    s=\"${str:$mid:1}$(echo \"${str::$mid}${str:$mid+1}\" | rev)\"\n    echo \"$s\"\n  else\n    mid=$(($len\/2))\n    echo \"${str:$mid:1}$(middle \"${str::$mid}${str:$mid+1}\")\"\n  fi\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337928,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n  letters=\"$1\"\n  sorted=\"$(echo \"$letters\" | grep -o . | sort | tr -d '\n')\"\n  if ((${#sorted}%2)) ; then\n    index=\"$((${#sorted}\/2))\"\n    echo -n \"${sorted:((${#sorted}\/2)):1}\"\n    sorted=\"${sorted:0:$index}${sorted:((index+1))}\"\n  fi\n  index=\"$((${#sorted}\/2-1))\"\n  echo -n \"${sorted:index:1}\"\n  for (( i=${#sorted}-1; i>=0; i-- )) ; do\n    if [[ \"$index\" -ne \"$i\" ]] ; then\n      echo -n \"${sorted:$i:1}\"\n    fi\n  done\n  echo\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337929,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n  str=$1\n  len=${#str}\n\n  # let's start with the first term (sorted characters)\n  res=$(grep -o . <<< \"${str}\" | sort | tr -d '\n')\n  \n  # number of permutations to get the middle term\n  nb_permutations=$(bc <<< \"( $(seq -s '*' 1 ${len}) \/ 2 ) - 1\") \n\n  # current character position in the middle term\n  i=0 \n\n  # build the term by iterating on character index (from 0) and by skipping the last indexes if no other permutation is needed  \n  while [[ ${nb_permutations} > 0 ]]\n  do\n    # number of permutations for each character roll at index i\n    nb_subterms=$(seq -s '*' 1 $((len-i-1)) | bc)\n    \n    # number of character rolls = position (from current position i) of the desired character\n    p=$(bc <<< \"${nb_permutations} \/ ${nb_subterms}\")\n  \n    if ((p > 0)); then\n      # catch the character at position p+i to put it at the current position i and move +1 the characters between those 2 positions\n      res=${res:0:${i}}${res:$((p+i)):1}${res:${i}:${p}}${res:$((p+i+1))}\n\t  \n      # number of permutations left to get the middle term    \n      nb_permutations=$(bc <<< \"${nb_permutations} % ${nb_subterms}\")\n    fi\n    ((i++))\n  done\n  \n  # print the middle term\n  echo ${res}\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337930,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n  str=$1\n\n  # let's start with the first term\n  middle_term=($(grep -o . <<< \"${str}\" | sort))\n  \n  # number of permutations to get the middle term\n  nb_permutations=$(bc <<< \"( $(seq -s '*' 1 ${#str}) \/ 2 ) - 1\") \n\n  # current character position in the middle term\n  i=0 \n  \n  while [[ ${nb_permutations} > 0 ]]\n  do\n    nb_subterms=$(seq -s '*' 1 $((${#middle_term[@]}-${i}-1)) | bc)\n    \n    # position (from current position i) of the next character to build the middle term\n    p=$(bc <<< \"${nb_permutations} \/ ${nb_subterms}\")\n\t\n    if ((p > 0)); then\n      term=()\n\t  \n      # position (from 0) of the next character to build the middle term\n      p=$((p + i)) \n\t  \n      # catch the character at position p to put it at the current position i\n      # and move +1 the characters between those 2 positions\n      for k in ${!middle_term[@]}\n      do\n        if ((k == i))\n        then\n          term[${k}]=${middle_term[${p}]}\n        elif ((k > i && k <= p))\n        then\n          term[${k}]=${middle_term[$((k - 1))]}\n        else\n          term[${k}]=${middle_term[${k}]}\n        fi\n      done\n      \n      # first letters of the middle term + other letters\n      middle_term=(${term[@]})     \n      \n      # number of permutations left to get the middle term\t  \n      nb_permutations=$(bc <<< \"${nb_permutations} % ${nb_subterms}\")\n    fi\n    ((i++))\n  done\n  \n  echo ${middle_term[@]} | tr -d ' '\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337931,"user_id":null,"body":"#!\/bin\/bash\n\ns=`echo $1| grep -o . |sort| tr -d '\n'`\nl=${#s}\nc1=$((l\/2-1))\nc2=$(((l+1)\/2))-c1\nm1=$(((l+1)\/2))\nm2=l-m1\ne2=$((l\/2-1))\n\necho `rev<<<${s:c1:c2}``rev<<<${s:m1:m2}``rev<<<${s::e2}`","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337932,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n\n  sorted=$(echo $1 | grep -o . | sort |tr -d \"\n\")\n  A=$(echo $sorted | head -c $(( (${#1} + 1 )\/ 2 )) | tail -c 1)\n  B=$(echo $sorted | head -c $(( (${#1} - 1 )\/ 2 )) | tail -c 1)\n  \n  if [[ $(( ${#1} % 2 )) -eq 0 ]]\n  then\n    echo -n $A\n    echo $sorted | rev | sed 's\/'$A'\/\/g'\n  else\n    echo -n $A\n    echo -n $B\n    echo $sorted | rev | sed 's\/'$A'\/\/g; s\/'$B'\/\/g'  \n  fi\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337933,"user_id":null,"body":"#!\/bin\/bash\nstr=$1\nout=\"\"\nfor i in $(seq 1 ${#str})\ndo\nout+=${str:i-1:1}\nout+=$'\n'\ndone\nout=$(echo \"$out\" | sort -r)\nout=${out\/\/$'\n'\/}\ny=\"\"\nx=1\n\nx=$((${#str}%2))\n\nz=$(((${#out})\/2))\ny+=${out:z:1}\nout=${out:0:z}${out:z+1:z}\n\nif [ $x == 1 ]\nthen\nz=$(((${#out})\/2))\ny+=${out:z:1}\nout=${out:0:z}${out:z+1:z}\nfi\n\nfor i in $(seq 1 ${#out} )\ndo\n y+=${out:i-1:1}\ndone\necho $y\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337934,"user_id":null,"body":"#!\/bin\/bash\n\nfunction middle() {\n  sorted=$(for i in `seq ${#1}`\n  do\n    echo $1 | cut -c $i \n  done | sort)\n  mid=$(echo \"((${#1}*0.5)+0.5)\/1\" | bc)\n  m=$(echo $sorted | cut -f $mid -d ' ')\n  if [ $((${#1}%2)) -eq 1 ]\n  then\n    m2=$(echo $sorted | cut -f $((mid-1)) -d ' ')\n    s=$(echo $sorted | sed \"s\/$m\/\/g\" | sed \"s\/$m2\/\/g\" | sed 's\/ \/\n\/g' | sort -r)\n    s=$(echo $s | sed 's\/ \/\/g')\n    m=$m$m2$s\n  else\n    s=$(echo $sorted | sed \"s\/$m\/\/g\" | sed 's\/ \/\n\/g' | sort -r)\n    s=$(echo $s | sed 's\/ \/\/g')\n    m=$m$s\n  fi\n  echo $m\n}\n\nmiddle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58ce8725c835848ad6000007":[{"id":337935,"user_id":null,"body":"#!\/bin\/bash\necho \"(100 - $1)*$2\/(100 - $3)\" | bc\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337936,"user_id":516,"body":"#!\/bin\/bash\necho $(($2 * (100 - $1) \/ (100 - $3)))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337937,"user_id":null,"body":"#!\/bin\/bash\n\nfunction potatoes()\n{\n    local INIT_HUM=$1\n    local INIT_WGHT=$2\n    local FINAL_HUM=$3\n    local FINAL_WGHT=0\n    \n    # according to this formula\n    # http:\/\/www.knowledgebank.irri.org\/index.php?option=com_zoo&view=item&layout=item&Itemid=735\n    # also, precision should be set to at least 3 digits after decimal point\n    FINAL_WGHT=$(bc <<< \"scale=10; $INIT_WGHT * ((100.0 - $INIT_HUM) \/ (100.0 - $FINAL_HUM))\" )\n    \n    # for some reason tests seems to round number N.99 to N+1\n    # BUT N.90 is rounded to N.0\n    # this crutch overcomes this bug...\n    FINAL_WGHT=$(bc <<< \"scale=10; $FINAL_WGHT + 0.05\")\n\n    FINAL_WGHT=$(bc <<< \"scale=0; $FINAL_WGHT \/ 1\")\n    echo $FINAL_WGHT\n}\n\necho $(potatoes $1 $2 $3)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337938,"user_id":null,"body":"#!\/bin\/bash\npotatoes() {\n  bc <<<  \"$2*(100-$1)\/(100-$3)\"\n}\npotatoes $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337939,"user_id":null,"body":"#!\/bin\/bash\necho $(( (100-$1)*$2\/(100-$3) ))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337940,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\n# Returns final weight of the dried potatoes.\n# Arguments\n#   p0: initial percent (1..100) of water\n#   w0: initial weight\n#   p1: final percent of water\n# echoed return\n#   truncated to integer#\npotatoes () {\n    local p0=$1\n    local w0=$2\n    local p1=$3\n    # dry mass T is constant\n    # before:  T = w0 (1 - p0\/100)\n    # after:   T = w1 (1 - p1\/100)\n    # so it is w1 (1 - p1\/100) = w0 (1 - p0\/100)\n    echo $(( ( w0 * (100 - p0) ) \/ (100 - p1) ))\n}\n\npotatoes \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337941,"user_id":null,"body":"#!\/bin\/bash\nwater=`echo $2*$1\/100|bc -l`\nnotwater=`echo $2-$water|bc -l`\ndiff=`echo 100-$3|bc -l`\nmultiplier=`echo 100\/$diff|bc -l`\nweight=`echo $notwater*$multiplier|bc -l`\n# No idea why I need 0.01 here\nweight=`echo $weight+0.01|bc -l`\nweight=${weight\/.*\/}\n\necho $weight\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337942,"user_id":null,"body":"#!\/bin\/bash\n...........\n\np0=$1\nw0=$2\np1=$3\necho $(((w0 * (100 - p0)) \/ (100 - p1)))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337943,"user_id":null,"body":"#!\/bin\/bash\n\np0=$1\nw0=$2\np1=$3\n\np0=$(bc -l <<< $p0'\/100')\nwaterweight0=$(bc -l <<< $p0'*'$w0)\npotatoweight=$(bc -l <<< $w0'-'$waterweight0)\n\np1=$(bc -l <<< $p1'\/100')\n\npotatopercent1=$(bc -l <<< \"1-$p1\")\ntotalweight=$(bc -l <<< \"$potatoweight \/ $potatopercent1\")\n\necho ${totalweight%.*}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337944,"user_id":null,"body":"echo \"$2 * (100-$1) \/ (100-$3)\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"58f0ba42e89aa6158400000e":[{"id":337945,"user_id":null,"body":"#!\/bin\/bash\ndistance=\"$1\"\n\n# check input\n[[ $(echo \"${distance}\" | grep -c \"-\") -eq 1 ]] && echo \"None\" && exit 1\n\nnb_layers=$(bc <<< \"${distance} * 10^4\")\nbc <<< \"obase=2; ${nb_layers}\/1\" | rev | grep -o [01] | nl -v0 | grep \"1$\" | awk 'END{if(NR==1){print $1}else if(NR>1){print 1+$1}else{print 0}}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337946,"user_id":null,"body":"#!\/bin\/bash\ndistance=$1\nif (( $(echo \"$distance < 0.0\" | bc -l) )); then\n  echo None\nelse\n  folds=0\n  thic=0.0001\n  while (( $(echo \"$thic < $distance\" |bc -l) ))\n  do\n      folds=$(($folds+1))\n      thic=$(echo \"$thic*2\" | bc -l)\n  done\n  echo $folds\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337947,"user_id":null,"body":"#!\/bin\/bash\ndistance=$1\n[[ $distance =~ ^- ]] && { echo \"None\"; exit; }\nawk \"\n  function ceil(x) {\n    return int(x) == x ? x : int(x) + 1\n  }\n  BEGIN {\n    f = ceil(log(10000 * $distance) \/ log(2))\n    if (f > 0) {\n      print f\n    } else {\n      print \\\"0\\\"\n    }\n  }\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337948,"user_id":null,"body":"#!\/bin\/bash\ndistance=$1\n\nif (( $(echo \"$distance < 0\" | bc -l) ));then\n  echo \"None\"\n  exit 0\nfi\n\nif (( $(echo \"$distance <= 0.0001\" | bc -l) ));then\n  echo \"0\"\n  exit 0\nfi\n\nres=\"0.0001\"\ntimes=0\nwhile (( $(echo \"$res < $distance\"|bc -l) ));do\n  let times++\n  res=$( echo \" $res*2 \" | bc -l )\ndone\necho \"$times\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337949,"user_id":null,"body":"#!\/bin\/bash\nDISTANCE=\"$1\"\nPAPER_WIDTH=0.0001\nfunction fatal() {\n    echo \"None\"\n    exit\n}\n\n#### if distance is negative ####\nif [[ $(echo \"$DISTANCE\" | grep -c \"\\-\") -gt 0 ]]\nthen\n  fatal\nfi\n\n#### use bc's log2 implementation ####\nRESULT=$(echo \"l($DISTANCE\/$PAPER_WIDTH)\/l(2)\"  | bc -l)\nif [[ $(echo $RESULT | grep -c \"\\-\") -gt 0 ]]\nthen\n  echo 0; exit\nfi\n\n#### taken from 'crabboy' ####\nbc << EOF\nnum = $RESULT;\nbase = num \/ 1;\nif (((num - base) * 10) > 1 )\n    base += 1;\nprint base;\nEOF\necho \"\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337950,"user_id":null,"body":"#!\/bin\/bash\ndistance=$( echo \"$1\" | bc -l )\nthickness=$( echo \"0.0001\" | bc -l )\ncount=0\n\n#echo $distance\n\nif (( $( echo \"$distance < 0\" | bc -l)  ))\nthen\n    echo \"None\"\n    exit\nelse\n    while (( $(echo \"$thickness < $distance\" | bc -l) ))\n    do\n        thickness=$(echo \"$thickness*2\" | bc -l)\n        count=$(($count + 1))\n    done    \n    echo $count \nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337951,"user_id":null,"body":"#!\/bin\/bash\ndistance=$1\nthickness=0.0001\n\nif (( $(echo \"$distance < 0\" | bc -l) )) \nthen\n  echo 'None'\nelif (( $(echo \"$distance < $thickness\" | bc -l) ))\nthen\n  echo 0\nelse\n  printf %.0f $(echo \"l($distance\/$thickness)\/l(2)\" | bc -l)\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337952,"user_id":null,"body":"#!\/bin\/bash\ndistance=$1\nif (( $(echo \"$distance < 0.0\" | bc -l) )); then echo None && exit\nelse\n  folds=0 && thickness=0.0001\n  while (( $(echo \"$thickness < $distance\" |bc -l) )); do folds=$(($folds+1)) && thickness=$(echo \"$thickness*2\" | bc -l); done && echo $folds\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337953,"user_id":null,"body":"#!\/bin\/bash\n\ndistance=$(printf %.0f $(echo \"$1 * 10000\" | bc))\nthickness=1\nfolds=0\n\n\nif (( \"$distance\" >= 0 )); then\n  until (( \"$thickness\" >= \"$distance\" )); do\n    folds=$(( \"$folds\" + 1 ))\n    thickness=$(( \"$thickness\" * 2 ))\n  done\n\n  echo \"$folds\"\nelse\n  echo \"None\"\n  exit\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337954,"user_id":826,"body":"#!\/bin\/bash\ndistance=$1\nd=0.0001\ncnt=0\nif (( $(echo \"$distance < 0.0\" | bc -l) )); then\n  echo None\n  exit\n  fi\nwhile (( $(echo \"$d < $distance\" | bc -l) )); do\n  d=$(echo \"$d*2\" | bc -l)\n  cnt=$((cnt+1))\n  done\necho $cnt\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"59bf943cafcda28e31000130":[{"id":337955,"user_id":492,"body":"#!\/bin\/bash\nfibaux() {                                              \n  echo \"define fibaux(x) {\n    if (x <= 0) return 0;\n    if (x == 1) return 1;\n    a = 0;\n    b = 1;\n    for (i = 1; i < x; i++) {\n        c = a+b; a = b; b = c;\n    }\n    return c;\n}; fibaux($1)\" | bc \n}\naroundFib() {\n    d=$(fibaux $1)\n    v=$(echo $d | tr -d \"\\\\\\ \")  \n    u=$(echo $v | sed -r 's\/(.{25})\/\\1,\/g')\n    maxcnt=-1\n    for c in {0..9}\n    do\n        cnt=$(grep -o \"$c\" <<< \"$v\" | wc -l)\n        if [ $cnt -gt $maxcnt ]; then\n            maxcnt=$cnt\n            ch=$c\n        fi\n    done\n    last=\"${u: -1}\"\n    if [ \"$last\" = \",\" ]; then\n        u=${u::-1}\n    fi\n    chk=$(echo \"${u##*,}\")\n    echo \"Last chunk $chk; Max is $maxcnt for digit $ch\"\n}\naroundFib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337956,"user_id":null,"body":"#! \/bin\/bash\n\nfibonacci()\n{\n    # Calculate nth Fibonacci number using bc.\n\n    env BC_LINE_LENGTH=0 bc << EOF\ndefine fibonacci(n)\n{\n    auto m, f\n\n    if (n <= 1)\n        return n\n\n    if (n % 2) {\n        m = (n + 1) \/ 2\n        return fibonacci(m)^2 + fibonacci(m-1)^2\n    }\n    {\n        m = n \/ 2\n        f = fibonacci(m)\n        return (2*fibonacci(m-1) + f) * f\n    }\n}\n\nfibonacci($1)\nEOF\n}\n\naroundFib()\n{\n    # Return last chunk and maximum digit count for Fibonacci number.\n\n    fib=$(fibonacci $1)\n    ((${#fib} % 25)) && off=0 || off=1\n    idx=$(((${#fib} \/ 25 - off) * 25))\n\n    declare -A count\n    for num in $(seq 0 9); do\n        rem=${fib\/\/[^$num]\/}\n        count[$num]=${#rem}\n    done\n    for key in ${!count[*]}; do\n        out+=\"$key.${count[$key]} \"\n    done\n    max=$(echo $out | xargs -n1 | sort -t. -k2nr | head -1)\n\n    echo -n \"Last chunk ${fib:$idx}; \"\n    echo \"Max is ${max##*.} for digit ${max%%.*}\"\n}\n\necho $(aroundFib $1)\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337957,"user_id":null,"body":"fib() {\n  echo 'x0=0;x1=1;for(i=1;i<'$1';i++){ x2=x1+x0; x0=x1; x1=x2; }; x1' | bc | paste -sd '' | sed 's\/\\\\\/\/g'\n}\naroundFib() {\n  f=`fib $1`\n  maxcnt=`echo $f | sed 's\/.\/\\0\n\/g' | sed '\/^$\/d' | sort | uniq -c | sort -bn -k 1 -k 2r | tail -n1`\n  lc=`echo $f | sed -E 's\/.{25}\/\\0\n\/g' | sed '\/^$\/d' | tail -n1`\n  printf \"Last chunk %s; Max is %s for digit %s\" $lc $maxcnt\n}\naroundFib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337958,"user_id":null,"body":"#!\/bin\/bash\nexport BC_LINE_LENGTH=27\nfib() {\n        bc <<<'\n        define fib(n) {a=0;b=1\n        if(n==0) return\n        for(i=0;i<n; i++){ab=a+b;a=b;b=ab}\n                return a\n        }\n        fib('\"$1\"')'\n}\n\na=$(fib $1)\necho -n \"Last chunk ${a\/*\\\\?}; \"\necho ${a\/\/\\\\?} | fold -w1 | awk '{t[$0]++} END{for (i in t) print t[i], i}' | sort -k1rn -k2d |\n        sed -r '1!d;s\/([0-9]+)\\s+([0-9])\/Max is \\1 for digit \\2\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337959,"user_id":null,"body":"aroundFib() {\n    #Fast doubling algorithm\n    fib(){\n        flag=0\n        if [ \"$1\" -eq 0 ]; then\n          fibo=(0 1)\n          flag=1\n        else\n          n2=$(($1\/2))\n          rec=($(fib $n2))\n          c=$(echo \"${rec[0]} * (${rec[1]} * 2 - ${rec[0]}) \" | bc | tr -d '[:space:]\\\\')\n          d=$(echo \"${rec[0]} * ${rec[0]} + ${rec[1]} * ${rec[1]}\" | bc | tr -d '[:space:]\\\\') \n        fi\n        resdiv=$(($1%2))\n        if [ \"$flag\" -eq 0 ] ; then\n          if [ \"$resdiv\" -eq 0 ] ; then\n            fibo=($c $d)\n          else\n            n3=$(echo \"$c+$d\" | bc | tr -d '[:space:]\\\\' )\n            fibo=($d $n3)\n          fi\n        fi\n        echo ${fibo[*]}\n    }\n    # your code\n    an=($(fib $1))\n    aux=${an[0]}\n    cnt=(0 0 0 0 0 0 0 0 0 0)\n    max=0\n    ind=0\n    for (( i=0; i<10; i++ )); do\n      cnt[$i]=$(echo $aux | tr -cd $i | wc -c)\n      if [ \"$max\" -lt \"${cnt[$i]}\" ] ; then\n        max=${cnt[$i]}\n        ind=$i\n      fi\n    done\n    lenAux=$(( ((${#aux} - 1) \/ 25 ) * 25 ))\n    str=${aux:$lenAux}\n    echo \"Last chunk $str; Max is $max for digit $ind\"\n}\n\naroundFib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337960,"user_id":null,"body":"aroundFib() {\n    fib(){\n        flag=0\n        if [ \"$1\" -eq 0 ]; then\n          fibo=(0 1)\n          flag=1\n        else\n          n2=$(($1\/2))\n          rec=($(fib $n2))\n          c=$(echo \"${rec[0]} * (${rec[1]} * 2 - ${rec[0]}) \" | bc | tr -d '[:space:]\\\\')\n          d=$(echo \"${rec[0]} * ${rec[0]} + ${rec[1]} * ${rec[1]}\" | bc | tr -d '[:space:]\\\\') \n        fi\n        resdiv=$(($1%2))\n        if [ \"$flag\" -eq 0 ] ; then\n          if [ \"$resdiv\" -eq 0 ] ; then\n            fibo=($c $d)\n          else\n            n3=$(echo \"$c+$d\" | bc | tr -d '[:space:]\\\\' )\n            fibo=($d $n3)\n          fi\n        fi\n        echo ${fibo[*]}\n    }\n    # your code\n    an=($(fib $1))\n    aux=${an[0]}\n    cnt=(0 0 0 0 0 0 0 0 0 0)\n    for (( i=0; i<10; i++ )); do\n      cnt[$i]=$(echo $aux | tr -cd $i | wc -c)\n    done\n    lenAux=$(( ((${#aux} - 1) \/ 25 ) * 25 ))\n    str=${aux:$lenAux}\n    max=0\n    ind=0\n    for i in `seq 0 9`; do \n      tmp=${cnt[$i]}\n      if [ \"$max\" -lt \"$tmp\" ] ; then\n        max=$tmp\n        ind=$i\n      fi\n    done\n    echo \"Last chunk $str; Max is $max for digit $ind\"\n}\n\naroundFib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337961,"user_id":null,"body":"#!\/bin\/bash\n\n# bc program that computes fibonacci(n=$1)\nexport BC_LINE_LENGTH=0\nread -r -d '' bcprogram <<EOF\nn=$1\nfn=0\nfnp1=1\n\nif ( n <= 1 ) {\n        n\n        halt\n}\n\nfor (i=2; i<=n; i++) {\n        ofn  = fn\n        fn   = fnp1\n        fnp1 = ofn + fnp1\n}\nprint fnp1\nEOF\n\n#echo $(bc <<< \"$bcprogram\")\n#exit 22\n\nf=$(bc <<< \"$bcprogram\")\n\necho -n \"Last chunk \"\necho $f |\nwhile read -n 25 chunk; do [[ -z $chunk ]] && break; echo $chunk; done |\ntail -1 | xargs echo -n\n\necho -n \"; \"\n\nread maxcnt ch <<< \"$(\necho -n $f |\nsed 's\/\\(.\\)\/\\1\n\/g' |\nsort |\nuniq -c |\nsort -k 1nr,1nr -k 2n,2n |\nhead -1\n)\"\n\necho \"Max is $maxcnt for digit $ch\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337962,"user_id":null,"body":"#!\/bin\/bash\n\nfibonacci () {\n\n# To beat the test clock, using bc to calculate iterative fibonacci\nBC_LINE_LENGTH=0 bc <<-EOF1\n  fprev=1;\n  fsum=0;\n\n  for (i=1; i<=$1; i++) {\n    ftmp=fsum;\n    fsum=fsum+fprev;\n    fprev=ftmp;\n  }\n\n  fsum;\nEOF1\n}\n\n\naroundFib () {\n  result=$(fibonacci $1)\n\n  # Get max digit count\n  cnt_info=$(echo -e \"$result\\c\" | sed 's\/.\/&\n\/g' | sort | uniq -c | tr -s ' ' | sort -k1nr,1 -k2,2 | head -1)\n  maxcnt=$(echo $cnt_info | cut -d' ' -f1)\n  maxcnt_digit=$(echo $cnt_info | cut -d' ' -f2)\n\n  # Get last chunk\n  chunk_size=$(echo \"${#result} % 25\" | bc)\n  if [ $chunk_size = 0 ];then\n    chunk_size=25\n  fi\n  chunk=${result:${#result}-${chunk_size}:$chunk_size}\n\n  echo \"Last chunk $chunk; Max is $maxcnt for digit $maxcnt_digit\"\n}\n\naroundFib $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337963,"user_id":null,"body":"#!\/bin\/bash\"\n\n#Answer which is the most frequent character in fib(x) and how often does it appear.\n#Also, partitioned into groups of 25 characters, what's the last chunk.\n\nmain(){\n\n#Now,  you have to calculate =fib= the decimal value of fibonacci(n)\n\nread cut fib < <(\nbc <<HERE\n \ndefine fibi(x) {\n    if (x <= 0) return 0;\n    if (x == 1) return 1;\n \n    a = 0;\n    b = 1;\n    for (i = 1; i < x; i++) {\n        c = a+b; a = b; b = c;\n    }\n    return c;\n}\n\nfib=fibi($1)\nlen=length(fib)\nrem=length(fib) % 25\nif (rem == 0) rem = 25;\n\nprint len-rem,\" \",fib\n\nquit\nHERE\n)\n\n#Next, Cut the =fib= into chunks of length at most 25.\n#      The last =chunk= may be 25 long or less.\n#      This is the only relevant chunk\n\nchunk=${fib:$cut}\n\n\n#Next, find =cnt=, the count of each digit in =chunk=\n#Next, find =maxcnt=, the maximum value of cnt.\n#      find =ch=, the lowest value digit with the highest count \n\nread cnt ch < <(\n    echo $fib | sed 's\/\\(.\\)\/\\1\n\/g' | sort | tail -n +2 | uniq -c | sort -k1,1nr -k2,2n\n)\n\n\n#Next, Summarize your findings by outputting =chunk= =maxcnt= and =ch=\n#      use \"Last chunk %s; Max is %d for digit %s\" to format the output.\n\nprintf \"Last chunk %s; Max is %d for digit %s\n\" $chunk $cnt $ch\n}\n\naroundFib() { main \"$@\" ; }\n\n\ntesting(){\n  #\n  out=\"$(main \"$1\")\"\n  if [ \"$out\" = \"$2\" ]; then res=\"OK!\"; else res=\"KO!\"; fi\n  #\n  echo \"Expect: $2\"\n  echo \"Result: $out $res\"\n  echo\n}\n\ntest(){\ntesting 100   \"Last chunk 354224848179261915075; Max is 3 for digit 1\"\ntesting 180   \"Last chunk 8521399707760; Max is 7 for digit 7\"\ntesting 18000 \"Last chunk 140258776000; Max is 409 for digit 1\"\ntesting 666   \"Last chunk 56699078708088; Max is 18 for digit 8\"\ntesting 934   \"Last chunk 78863403327510987087; Max is 30 for digit 7\"\n  \n}\n\naroundFib $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337964,"user_id":503,"body":"python - \"$1\" << $$\nimport sys\nimport collections as C\ndef W(Q) :\n\tif not Q : return (0,1)\n\telse :\n\t\tA,B = W(Q \/\/ 2)\n\t\tC = A * (2 * B - A)\n\t\tD = A * A + B * B\n\t\treturn (D,C + D) if Q % 2 else (C,D)\nR = str(W(int(sys.argv[1]))[0])\nO = C.Counter(R)\nM = max(O,key=lambda V:O[V])\nprint(\"Last chunk %s; Max is %s for digit %s\" % (R[len(R) - (len(R) % 25 or 25):],O[M],M))\n$$\n\n# I am too naive to produce a fast enough perl solution...\n# perl -e '\n# use Math::BigRat;\n# $Q = $W = $A = $D = Math::BigRat->new(1);\n# $E = $S = Math::BigRat->new(0);\n# for ($N = $ARGV[0];$N;) {\n# \tif (1 & $N) {\n# \t\t$Z = $A;\n# \t\t$X = $S;\n# \t\t$A = $Z * $Q + $X * $W;\n# \t\t$S = $Z * $W + $X * $E;\n# \t\t$D = $X * $W + $D * $E;\n# \t}\n# \t$Z = $Q;\n# \t$X = $W;\n# \t$C = $E;\n# \t$Q = $Z * $Z + $X * $X;\n# \t$W = $X * ($Z + $C);\n# \t$E = $X * $X + $C * $C;\n# \t$N >>= 1\n# }\n# $R = $S;\n\n# $L = length $R;\n# @C = ();\n# for ($F = 0;$F < $L;++$F) {++$C[substr($R,$F,1)]}\n# # foreach $V (split(\/\/,$R)) {++$C[$V]}\n# $M = $I = $F = 0;\n# for (;$F < 10;++$F) {\n# \tif ($M < $C[$F]) {\n# \t\t$M = $C[$F];\n# \t\t$I = $F;\n# \t}\n# }\n# print \"Last chunk \",substr($R,$L - ($L % 25 || 25),25),\"; Max is \",$M,\" for digit \",$I\n# ' \"$1\"\n# echo","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"59bfe5f15227ddf81900007b":[{"id":337965,"user_id":106,"body":"ls -t | head -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337966,"user_id":null,"body":"ls -t1 | head -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337967,"user_id":null,"body":"ls -t | head -n 1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337968,"user_id":98,"body":" ls --sort=time | head -n 1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337969,"user_id":null,"body":"# add your shell script here.\necho \"txt.elcitra\" | rev","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337970,"user_id":null,"body":"ls -At | head -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337971,"user_id":294,"body":"#!\/bin\/bash\n\nls -t | head -n 1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337972,"user_id":null,"body":"# add your shell script here.\nls -tr | tail -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337973,"user_id":null,"body":"ls -ltr | tail -1 | awk '{print $NF}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337974,"user_id":492,"body":"ls -Art | tail -n 1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"59c53183aeb2842585000116":[{"id":337975,"user_id":null,"body":"TZ=\"Asia\/Tokyo\" date '+%Y-%m-%dT%H:%M%z' ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337976,"user_id":null,"body":"TZ='Japan' date +%Y-%m-%dT%H:%M%z","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337977,"user_id":666,"body":"TZ=\"Japan\" date +%Y-%m-%dT%H:%M%z # -Iminutes option would display \"+HH:MM\" instead of \"+HHMM\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337978,"user_id":null,"body":"TZ='Asia\/Tokyo' date +%G-%m-%dT%H:%M%z","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337979,"user_id":null,"body":"TZ=\":Japan\" date +%Y-%m-%dT%H:%M%z","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337980,"user_id":null,"body":"TZ=\"Asia\/Tokyo\" date +%FT%R%z","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337981,"user_id":null,"body":"date +%FT%H:%M+0900 -d \"+9 hours\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337982,"user_id":null,"body":"TZ=Japan date +%FT%R%z","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337983,"user_id":null,"body":"echo $(TZ=\"Asia\/Tokyo\" date +'%Y-%m-%dT%H:%M+0900')","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337984,"user_id":null,"body":"TZ=Japan date +\"%FT%H:%M+0900\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"59c68ea2aeb2843e18000109":[{"id":337985,"user_id":1045,"body":"#!\/bin\/bash\namort() {\n    rt=$(echo \"scale=8; $1\/1200\"|bc -l); bal=$2; tm=$3; payNum=$4; prrNum=$(($4-1))\n    c=$(echo \"scale=8; ($rt*$bal)\/(1-(1+$rt)^(-$tm))\"|bc -l)\n    prrBal=$(echo \"scale=8; ((1+$rt)^$prrNum)*$bal-$c*(((1+$rt)^$prrNum)-1)\/$rt\"|bc -l)\n    curInt=$(echo \"scale=8; ($prrBal*$rt)\/1\"|bc -l)\n    curPrn=$(echo \"scale=8; ($c-$curInt)\/1\"|bc -l)\n    curBal=$(echo \"scale=10; ($prrBal-$curPrn)\/1\"|bc -l)\n    printf \"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\" $payNum $c $curPrn $curInt $curBal\n}\namort $1 $2 $3 $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337986,"user_id":492,"body":"#!\/bin\/bash\namort() {\n    interest_r=$1; principal=$2; term=$3; num_payments=$4\n    interest_rate=$(bc <<< \"scale=16;$interest_r\/1200.0 + 1.0\")\n    num=$(bc <<< \"scale=16;$principal*$interest_rate^$term\")\n    den=$(bc <<< \"scale=16; ($interest_rate^$term-1)\/($interest_rate-1)\")\n    payment=$(bc <<< \"scale=16; $num\/$den\")\n    int_r=$(bc <<< \"scale=9; $interest_r\/1200.0\")\n    i=1\n    while [ \"$i\" -le \"$num_payments\" ]; do\n        int=$(bc <<< \"scale=16; $principal*$int_r\")\n        princ=$(bc <<< \"scale=16; $payment-$int\")\n        principal=$(bc <<< \"scale=16; $principal-$princ\")\n        i=$(($i + 1))\n    done\n    r=$(printf \"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\" $num_payments $payment $princ $int $principal)\n    echo $r\n}\namort $1 $2 $3 $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337987,"user_id":null,"body":"#!\/bin\/bash\namort() {\n  r=$(echo \"$1\/1200\" | bc -l)\n  init_bal=$2\n  term=$3\n  num_payment=$4\n  \n  prev_num_payment=$(echo \"$num_payment - 1\" | bc)\n  c=$(echo \"$r * $init_bal \/ (1-(1+$r)^(-$term))\" | bc -l) #monthly payment\n  bal_new=$(bal $num_payment)\n  bal_old=$(bal $prev_num_payment)\n  int=$(echo \"$r*$bal_old\" | bc -l)\n  princ=$(echo \"$bal_old - $bal_new\" | bc -l)\n  c_rounded=$(flotToint $c)\n  princ_rounded=$(flotToint $princ)\n  int_rounded=$(flotToint $int)\n  bal_rounded=$(flotToint $bal_new)\n  echo \"num_payment $num_payment c $c_rounded princ $princ_rounded int $int_rounded balance $bal_rounded\"\n}\n\nflotToint() {\n    printf \"%.0f\n\" \"$@\"\n}\n\nbal() {\n  balance=$(echo \"(((1+$r)^($1)*$init_bal) - (((((1+$r)^($1)) - 1) \/ $r)*$c))\" | bc -l)\n  echo $balance\n}\n\namort $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337988,"user_id":null,"body":"#!\/bin\/bash\namort() {\nr=$1\nbal=$2\nterm=$3\nt=$((-1*$term))\nnum=$4\nr=`echo \"scale=16; $r\/1200\" | bc`\nn=`echo \"scale=16; $r*$bal\" | bc`\nc=`echo \"scale=16; $bal*($r\/(1-(1+$r)^$t))\" | bc`\nb=`echo \"scale=16; $bal*(1+$r)^($num-1)-$c*((1+$r)^($num-1)-1)\/$r\" | bc`\ni=`echo \"scale=16; $r*$b\" | bc`\na=`echo \"scale=16; $c-$i\" | bc`\nb=`echo \"scale=16; $b-$a\" | bc`\n\nc=`printf \"%.0f\" $c`\na=`printf \"%.0f\" $a`\ni=`printf \"%.0f\" $i`\nb=`printf \"%.0f\" $b`\necho \"num_payment ${num} c ${c} princ ${a} int ${i} balance ${b}\"\n}\namort $1 $2 $3 $4\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337989,"user_id":null,"body":"#!\/bin\/bash\namort() {\n    # your code\nawk -v rate=\"$1\" -v bal=\"$2\" -v term=\"$3\" -v num_payment=\"$4\" '\nBEGIN{\nr=rate\/1200\nn=r*bal\nd=1-(1+r)^(-term)\nc=n\/d\nb=bal\nfor(i=1;i<=num_payment;i++) {\nintr=b*r\nprinc=c-intr\nb=b-princ\n}\nprintf \"num_payment %d c %d princ %d int %d balance %d\",num_payment,c+0.5,princ+0.5,intr+0.5,b+0.5\n}\n'\n}\namort $1 $2 $3 $4","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337990,"user_id":503,"body":"B(){ echo `bc<<<\"scale=9;$1\"`; };\nR=`B $1\/1200`\nC=`B \"$R*$2\/(1-(1+$R)^(-$3))\"`\nT(){ echo `B \"(1+$R)^$1*$2-((1+$R)^$1-1)*$C\/$R\"`; };\nN=`T $4 $2`\nP=`B \"$(T $[$4-1] $2)-($N)\"`\necho $(printf 'num_payment %d c %.0f princ %.0f int %.0f balance %.0f' $4 $C $P `B $C-$P` $N)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"59ccf051dcc4050f7800008f":[{"id":337991,"user_id":null,"body":"#!\/bin\/bash\nbuddyAwk() {\n  echo $1 $2 | awk '\n    function divisorsCrossSum(n, i, sum, root) {\n      root = sqrt(n)\n      sum = 1\n      for (i = 2; i < root; i++) {\n        if (n % i == 0) {\n          sum += i\n          j = n \/ i\n          if (j != i) {\n            sum += j\n          }\n        }\n      }\n      return sum\n    }\n    END {\n      for (i = $1; i <= $2; i++) {\n        sum1 = divisorsCrossSum(i)\n        buddy = sum1 - 1\n        if (buddy > i) {\n          sum2 = divisorsCrossSum(buddy)\n          if (sum2 - 1 == i) {\n            printf \"(%d %d)\", i, buddy\n            exit 0\n          }\n        }\n      }\n      printf \"Nothing\"\n    }'\n}\nbuddy() {\n  res=$(buddyAwk $1 $2)\n  echo $res\n}\nbuddy $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337992,"user_id":492,"body":"#!\/bin\/bash\nbuddyaux () {\n    echo $1 $2 | awk '\n        function d(num, i, sum, root) {\n            if (num < 2) return 0\n            sum=1\n            root=sqrt(num)\n            for ( i=2; i<root; i++ ) {\n                if (num % i == 0 ) { \n                    sum = sum + i + num\/i\n                }\n            }\n            if (num % root == 0) {\n                sum = sum + root\n            }    \n            return sum\n        }  \n        END {\n            start=$1\n            limit=$2\n            for ( n=start; n<=limit; n++ ) {\n                m = d(n) - 1\n                if (n == (d(m) - 1) && n < m) {\n                    printf \"(%d %d)\", n, m; \n                    exit 0;\n                }\n            }\n            print \"Nothing\"\n        }\n'   \n}\nbuddy() {\n  r=$(buddyaux $1 $2)\n  echo $r\n}\nbuddy $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337993,"user_id":null,"body":"#!\/bin\/bash\n\n# LOOKUP TABLES FTW!\ndeclare -gA betrothed\nbetrothed=(\n[48]=75\n[140]=195\n[1050]=1925\n[1575]=1648\n[2024]=2295\n[5775]=6128\n[8892]=16587\n[9504]=20735\n[62744]=75495\n[186615]=206504\n[196664]=219975\n[199760]=309135\n[266000]=507759\n[312620]=549219\n[526575]=544784\n[573560]=817479\n[587460]=1057595\n[1000824]=1902215\n[1081184]=1331967\n[1139144]=1159095\n[1140020]=1763019\n[1173704]=1341495\n[1208504]=1348935\n[1233056]=1524831\n[1236536]=1459143\n[1279950]=2576945\n[1921185]=2226014\n[2036420]=2681019\n[2102750]=2142945\n[2140215]=2421704\n[2171240]=3220119\n[2198504]=3123735\n[2312024]=3010215\n[2580864]=5644415\n[2958500]=3676491\n[4012184]=4282215\n[4311024]=7890575\n[5088650]=6446325\n[5416280]=7509159\n[6081680]=9345903\n[6618080]=12251679\n[7460004]=10925915\n[7875450]=16381925\n[8713880]=13693959\n[8829792]=18845855\n[9247095]=10106504\n[12146750]=16247745\n[12500865]=12900734\n[13922100]=31213899\n[14371104]=28206815\n[22013334]=37291625\n[22559060]=26502315\n[23379224]=26525415\n[23939685]=31356314\n[26409320]=41950359\n[27735704]=27862695\n[28219664]=32014575\n[33299000]=58354119\n[34093304]=43321095\n[37324584]=80870615\n[40818855]=42125144\n[41137620]=84854315\n[49217084]=52389315\n[52026920]=85141719\n[52601360]=97389039\n[61423340]=88567059\n[62252000]=93423519\n[64045904]=70112175\n[66086504]=69090615\n[66275384]=87689415\n[68337324]=141649235\n[72917000]=115780599\n[76011992]=87802407\n[77723360]=145810719\n[89446860]=197845235\n[93993830]=99735705\n[94713300]=240536075\n[94970204]=96751395\n[97797104]=114332175\n[100256480]=174080799\n[101366342]=105993657\n[101589320]=168669879\n[102019644]=162156995\n[106004024]=129081735\n[106524264]=231472535\n[114859884]=164799635\n[116329136]=183651663\n[116481464]=128825415\n[116540304]=204064175\n[117106064]=133592175\n[117869940]=261412235\n[128707425]=205556894\n[130016744]=166335255\n[130304888]=184191111\n[134064584]=140687415\n[139829624]=165507975\n[142287992]=193773447\n[147041504]=150157215\n[152340944]=233348655\n[153582624]=374770655\n[154043505]=210391694\n[154885920]=421077215\n[157470404]=199563195\n[157906430]=161733825\n[158948000]=237316959\n[160797560]=335622279\n[161888544]=322435295\n[164340224]=189208575\n[165416048]=214559631\n[168102044]=171553635\n[170262560]=281885919\n[172622505]=175742294\n[173431335]=197570264\n[178415048]=226351671\n[191800455]=198727544\n[195318500]=269436699\n[198978584]=248611815\n[201006414]=311172785\n[207351704]=237435495\n[208548624]=350145775\n[210533904]=516860015\n[215676320]=308322399\n[226964240]=313001199\n[227323250]=316305549\n[227437280]=396897759\n[230092730]=271842885\n[237110120]=376157079\n[242854884]=449036315\n[252734468]=268315515\n[260310375]=290057624\n[261335025]=338626574\n[262754384]=265664175\n[274313564]=350646435\n[285695190]=559939625\n[293057960]=419396439\n[296092784]=348865935\n[300215895]=308040104\n[313472880]=953056175\n[341660220]=794589635\n[344163140]=400950459\n[353587304]=420556695\n[354818060]=390655395\n[367762395]=436621604\n[379137590]=443390409\n[380747960]=508826439\n[401836344]=933562055\n[407482460]=659384739\n[417152295]=442147544\n[428870144]=478571775\n[447538784]=728192415\n[460824848]=638390511\n[479527244]=530004915\n[486142620]=987827555\n[499295384]=592455015\n[506589020]=816390819\n[548544744]=1265855255\n[579753384]=1224278615\n[597781820]=676362435\n[599291000]=1199626119\n[627398240]=1155794079\n[645632204]=654929715\n[653318420]=794572779\n[662138295]=721644104\n[665749784]=851088615\n[713342504]=844622295\n[724235784]=1151128055\n[726558860]=882424179\n[734590850]=932552445\n[740532716]=980389395\n[754727336]=888514263\n[783839264]=1106039775\n[787047488]=951044031\n[817931828]=856444875\n[820888964]=921943035\n[902555024]=1366942575\n[926979200]=1782222399\n[949977644]=1194885075\n[959131635]=1010000396\n[987558704]=1101593295\n[991087064]=1131760935\n)\n\nbuddy() {\n  for (( n=$1; n <= $2; n++ )); do\n    if [[ -n \"${betrothed[$n]+y}\" ]]; then\n      echo \"($n ${betrothed[$n]})\"\n      exit 0\n    fi\n  done\n  echo 'Nothing'\n}\n\nbuddy $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337994,"user_id":168,"body":"#!\/bin\/bash\n\nsumdivs() {\n  s=1\n  for (( d = 2; d * d <= $1; d++ )); do\n    if (( $1 % d == 0 )); then\n      (( s += d + (d * d < $1 ? $1 \/ d : 0) ))\n    fi\n  done\n}\n\nbuddy() {\n  for (( n = $1; n <= $2; n++ )); do\n    sumdivs $n\n    if (( s >= n )); then\n      (( t = s - 1 ))\n      sumdivs $t\n      (( s == n + 1 )) && echo \"($n $t)\" && exit\n    fi\n  done\n  echo \"Nothing\"\n}\n\n# Too slow\n# buddy $1 $2\n\nruby << END\ndef sum_divs(n)\n  (2..(n**0.5)).select { |d| n % d == 0 }.sum { |d| d + (d * d < n ? n \/ d : 0) } + 1\nend\ndef buddy(a, b)\n  (a..b).each do |n|\n    t = sum_divs(n) - 1\n    if t > n && sum_divs(t) == n + 1\n      print \"(#{n} #{t})\"\n      return\n    end\n  end\n  print \"Nothing\"\nend\nbuddy $1, $2\nEND","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337995,"user_id":null,"body":"echo \"$1 $2\" | awk '\nfunction s1(x) {\n  end = sqrt(x);\n  sum = 0;\n  for(i=2;i<=end;i++) {\n    if(x%i==0) {\n      sum = sum + i + x\/i;\n    }\n  }\n  return sum;\n}\n{\nfound=0;\nfor(j=$1;j<$2;j++) {\n  m = j;\n  n = s1(m);\n  if(n > m && m == s1(n)) {\n    print \"(\"m,n\")\";\n    found=1;\n    break;\n  }\n}\nif(found==0) print \"Nothing\";\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337996,"user_id":null,"body":"#!\/bin\/bash\n\n# newton, plus factoring in bash was fun -- yet while\n# i doubled the performance of my script it was just too\n# slow to pass the random values the test threw at it.\n# hence i went to https:\/\/oeis.org\/A005276\/b005276.txt\n# wgot the list from a script generate this table by\n# computing the matches for each 'known to be good input.'\n\n# if you managed to tweak your algo to get it to pass the\n# tests here without pre-computation, i salute you!\n\n# for me, the hardest part was to give up on the notion that\n# i could bash bash around hard enough to make it go alone,\n# but even the shell generator for this list, once you get\n# into the millions, would need to run longer than this \n# whole production. fun afternoon, learned me something.\n\n\nbetrothed=(\n[48]=75\n[140]=195\n[1050]=1925\n[1575]=1648\n[2024]=2295\n[5775]=6128\n[8892]=16587\n[9504]=20735\n[62744]=75495\n[186615]=206504\n[196664]=219975\n[199760]=309135\n[266000]=507759\n[312620]=549219\n[526575]=544784\n[573560]=817479\n[587460]=1057595\n[1000824]=1902215\n[1081184]=1331967\n[1139144]=1159095\n[1140020]=1763019\n[1173704]=1341495\n[1208504]=1348935\n[1233056]=1524831\n[1236536]=1459143\n[1279950]=2576945\n[1921185]=2226014\n[2036420]=2681019\n[2102750]=2142945\n[2140215]=2421704\n[2171240]=3220119\n[2198504]=3123735\n[2312024]=3010215\n[2580864]=5644415\n[2958500]=3676491\n[4012184]=4282215\n[4311024]=7890575\n[5088650]=6446325\n[5416280]=7509159\n[6081680]=9345903\n[6618080]=12251679\n[7460004]=10925915\n[7875450]=16381925\n[8713880]=13693959\n[8829792]=18845855\n[9247095]=10106504\n[12146750]=16247745\n[12500865]=12900734\n[13922100]=31213899\n[14371104]=28206815\n[22013334]=37291625\n[22559060]=26502315\n[23379224]=26525415\n[23939685]=31356314\n[26409320]=41950359\n[27735704]=27862695\n[28219664]=32014575\n[33299000]=58354119\n[34093304]=43321095\n[37324584]=80870615\n[40818855]=42125144\n[41137620]=84854315\n[49217084]=52389315\n[52026920]=85141719\n[52601360]=97389039\n[61423340]=88567059\n[62252000]=93423519\n[64045904]=70112175\n[66086504]=69090615\n[66275384]=87689415\n[68337324]=141649235\n[72917000]=115780599\n[76011992]=87802407\n[77723360]=145810719\n[89446860]=197845235\n[93993830]=99735705\n[94713300]=240536075\n[94970204]=96751395\n[97797104]=114332175\n[100256480]=174080799\n[101366342]=105993657\n[101589320]=168669879\n[102019644]=162156995\n[106004024]=129081735\n[106524264]=231472535\n[114859884]=164799635\n[116329136]=183651663\n[116481464]=128825415\n[116540304]=204064175\n[117106064]=133592175\n[117869940]=261412235\n[128707425]=205556894\n[130016744]=166335255\n[130304888]=184191111\n[134064584]=140687415\n[139829624]=165507975\n[142287992]=193773447\n[147041504]=150157215\n[152340944]=233348655\n[153582624]=374770655\n[154043505]=210391694\n[154885920]=421077215\n[157470404]=199563195\n)\n\n# and yeah buddy, you're betrothed!\n\nbuddy(){\n  for KEY in \"${!betrothed[@]}\"; do\n  \tif [ $KEY -ge $1 ]; then\n  \t  if [ $KEY -le $2 ]; then\n    \t\tr1=$KEY\n    \t\tr2=${betrothed[$KEY]}\n    \t\techo \"($r1 $r2)\"\n    \t\treturn 0\n  \t  fi\n  \t  break\n  \tfi\n  done\n  echo \"Nothing\"\n  return 1\n}\n\nbuddy $1 $2\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337997,"user_id":503,"body":"# Not a real bash player\nS='sub S\n{\n\t$R = $F = 1;\n\t$E = $_[0];\n\tfor(;++$F * $F <= $E;$R *= $C)\n\t{\n\t\tfor($O = $C = 1;0 == $E % $F;$E \/= $F)\n\t\t{\n\t\t\t$C += $O *= $F;\n\t\t}\n\t}\n\t(1 < $E ? $R * ++$E : $R) - $_[0] - 1\n}\nfor($L = $ARGV[0];$L < $ARGV[1];++$L)\n{\n\tif($L == S($T = S($L)) && $L < $T)\n\t{\n\t\tprint \"($L $T)\";\n\t\texit\n\t}\n}\nprint \"Nothing\"'\necho `perl -e \"$S\" $1 $2`","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"}],"59d0ee709f0cbcf65400003b":[{"id":337998,"user_id":492,"body":"#!bin\/bash\nbyState() {\n    a=\"$1\"\n    h=$(echo \"$a\" | sed \"s\/ CA\/, California\/;s\/ MA\/, Massachusetts\/;s\/ OK\/, Oklahoma\/;s\/ PA\/, Pennsylvania\/;s\/ VA\/, Virginia\/;s\/ AZ\/, Arizona\/;s\/ ID\/, Idaho\/;s\/ IN\/, Indiana\/\")\n    h=$(echo \"$h\" | awk -F, {'{print $4 \", \" $0}'})\n    h=$(echo \"$h\" | sort)\n    h=$(echo \"$h\" | awk -F, '\n        $1 == Last { \n            print \".....\"$2 $3 $4 $1\n        }\n        $1 != Last { \n            Last = $1\n            print $1 \n            print \".....\"$2 $3 $4 $1\n        }')\n    echo \"$h\"\n}\nbyState \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":337999,"user_id":2390,"body":"#! \/bin\/bash\n\necho -n \"$1\" | sort | mawk '\nBEGIN {\n    FS=\",\"\n    codes[\"AZ\"]=\"Arizona\"\n    codes[\"CA\"]=\"California\"\n    codes[\"ID\"]=\"Idaho\"\n    codes[\"IN\"]=\"Indiana\"\n    codes[\"MA\"]=\"Massachusetts\"\n    codes[\"OK\"]=\"Oklahoma\"\n    codes[\"PA\"]=\"Pennsylvania\"\n    codes[\"VA\"]=\"Virginia\"\n}\n{\n    end_ix = match($3, \/ [A-Z][A-Z]\/)\n    city = substr($3, 1, end_ix)\n    state = codes[substr($3, end_ix + 1, 2)]\n    addresses[state] = addresses[state] \"..... \" $1 $2 city state\n}\nEND {\n   for (state in addresses) {\n       printf \" %s%s\n\", state, addresses[state]\n   }\n}' | sort | sed -E 's\/\\.{5}\/\n&\/g' | sed -E '0,\/$\/s\/ \/\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":338000,"user_id":null,"body":"#!\/usr\/bin\/env bash\nset -x\n\nbyState() {\n    st=($(echo \"$1\" | awk -F ',' '{print $3}' | awk '{print $NF}'))\n    IFS=':'\n    str_arr=($(echo \"$1\" | tr '\n' ':'))\n    IFS=$'\n'\n    out_str=()\n    for (( i=0; i<${#str_arr[*]}; i++ ))\n    do\n        current_state=${str_arr[$i]}\n        [[ -z $current_state ]] && break || :\n        out_str+=(\"${st[$i]}:..... ${current_state::-3} ${states[${st[$i]}]}\")\n    done\n    \n    sorted=($(sort <<<\"${out_str[*]}\"))\n    sorted2=($(sort <<<\"${st[*]}\"))\n    previous_state=\"\"\n    current_state=\"\"\n    final_str=\"\"\n    for (( i=0; i<${#sorted[@]}; i++ ))\n    do\n        current_state=\"${states[${sorted2[$i]}]}\"\n        current_record=\"${sorted[$i]}\"\n        stripped_record=\"${current_record:2}\"\n        final_str+=$([[ $current_state == $previous_state ]] &&\n            echo \"$stripped_record:\" ||\n                echo \": $current_state$stripped_record\")\n        previous_state=\"$current_state\"\n    done\n    echo \"$final_str\" | sed s\/[[:space:]]\/\/ | tr ':' '\n' | sed s\/[,]\/\/g | \\\n        sed '\/^[[:space:]]*$\/d'\n}\n\ndeclare -A states=([AZ]=Arizona\n                   [CA]=California\n                   [ID]=Idaho\n                   [IN]=Indiana\n                   [MA]=Massachusetts\n                   [OK]=Oklahoma\n                   [PA]=Pennsylvania\n                   [VA]=Virginia)\n\nbyState \"$1\"\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:59","updated_at":"2023-01-14 13:24:59"},{"id":338001,"user_id":null,"body":"#!\/bin\/bash\norder=($(echo \"$1\" | grep -E -o \"AZ|CA|ID|IN|MA|OK|PA|VA\" | sed \"s\/AZ$\/Arizona\/g\" | sed \"s\/CA$\/California\/g\" | sed \"s\/ID$\/Idaho\/g\" | sed \"s\/IN$\/Indiana\/g\" | sed \"s\/MA$\/Massachusetts\/g\" | sed \"s\/OK$\/Oklahoma\/g\" | sed \"s\/PA$\/Pennsylvania\/g\" | sed \"s\/VA$\/Virginia\/g\" | sort | uniq))\naz=\"$(echo \"$1\" | grep -E \"AZ$\" | sed \"s\/AZ$\/Arizona\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nca=\"$(echo \"$1\" | grep -E \"CA$\" | sed \"s\/CA$\/California\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nid=\"$(echo \"$1\" | grep -E \"ID$\" | sed \"s\/ID$\/Idaho\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nin=\"$(echo \"$1\" | grep -E \"IN$\" | sed \"s\/IN$\/Indiana\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nma=\"$(echo \"$1\" | grep -E \"MA$\" | sed \"s\/MA$\/Massachusetts\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nok=\"$(echo \"$1\" | grep -E \"OK$\" | sed \"s\/OK$\/Oklahoma\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\npa=\"$(echo \"$1\" | grep -E \"PA$\" | sed \"s\/PA$\/Pennsylvania\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nva=\"$(echo \"$1\" | grep -E \"VA$\" | sed \"s\/VA$\/Virginia\/g\" | tr ',' ' ' | sed \"s\/  \/ \/g\" | sort | sed \"s\/^\/..... \/g\")\"\nfor ((i=0;i<${#order[@]};i++));do\n    if ((i==0));then\n        printf \"%s\n\" \"${order[$i]}\" \n    else\n        printf \" %s\n\" \"${order[$i]}\"\n    fi\n    case ${order[$i]} in\n        \"Arizona\")\n            echo \"$az\"\n        ;;\n        \"California\")\n            echo \"$ca\"\n        ;;\n        \"Idaho\")\n            echo \"$id\"\n        ;;\n        \"Indiana\")\n            echo \"$in\"\n        ;;\n        \"Massachusetts\")\n            echo \"$ma\"\n        ;;\n        \"Oklahoma\")\n            echo \"$ok\"\n        ;;\n        \"Pennsylvania\")\n            echo \"$pa\"\n        ;;\n        \"Virginia\")\n            echo \"$va\"\n        ;;                                                       \n    esac\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338002,"user_id":null,"body":"#!bin\/bash\nbyState() {\n\ns=\"'AZ': 'Arizona',\n'CA': 'California',\n'ID': 'Idaho',\n'IN': 'Indiana',\n'MA': 'Massachusetts',\n'OK': 'Oklahoma',\n'PA': 'Pennsylvania',\n'VA': 'Virginia'\n\"\n  f=${1\/\/', '\/ }\n  s=${s\/\/[[:punct:]]\/}\n  IFS=$'\n'\n\n  for a in $f; do sed -E -n \"s\/${a##* }\/..... ${a% *}\/p\" <<< \"$s\"; done |\n  awk '{print $NF, $0}' | sort -fd -k 1b,1b | cut -f2- -d ' ' |\n  awk '{x = $NF ; (x == y) ? z = \"\" : z = \" \" x \"\n\" ; y = x ; printf \"%s\", z $0 \"\n\"}'\n\n}\nbyState \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338003,"user_id":null,"body":"#!bin\/bash\n\ndeclare -A state=(\n[\"AZ\"]='Arizona'\n[\"CA\"]='California'\n[\"ID\"]='Idaho'\n[\"IN\"]='Indiana'\n[\"MA\"]='Massachusetts'\n[\"OK\"]='Oklahoma'\n[\"PA\"]='Pennsylvania'\n[\"VA\"]='Virginia'\n)\n\nIFS_BACKUP=$IFS\nIFS=$'\n'\n\na=($1)\nlst=()\nfor i in ${a[@]};do\nt=(`echo $i | sed -e 's\/, \/\n\/g'`)\ntt=`echo ${t[2]}`\nt3=(`echo $tt | sed -e 's\/ \/\n\/g'`)\nt4=${t3[-1]}\ns=`echo \"${state[${t3[-1]}]}\"`\nx=`echo ${tt%$t4}`\nc=\"${t[0]};${t[1]};$x;$s\"\nlst+=($c)\ndone\n\na2=( $( printf \"%s\n\" \"${lst[@]}\" | sort -k 4 -t \";\") )\n\nb=(`echo ${a2[0]} | sed -e 's\/;\/\n\/g'`)\nb=${b[-1]}\necho $b\nfor e in ${a2[@]};do\nk=(`echo $e | sed -e 's\/;\/\n\/g'`)\nans=(`echo $e | sed -e 's\/;\/ \/g' | sed -e 's\/  *\/ \/g'`)\nif [ ${k[-1]} == $b ]; then echo \"..... $ans\"\nelse b=${k[-1]}; echo \" $b\"; echo \"..... $ans\"\nfi\ndone\n\nIFS=$IFS_BACKUP","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338004,"user_id":null,"body":"#!bin\/bash\nbyState() {\n    \n    declare -A states=( [\"AZ\"]=\"Arizona\" [\"CA\"]=\"California\"  [\"ID\"]=\"Idaho\" [\"IN\"]=\"Indiana\" [\"MA\"]=\"Massachusetts\" [\"OK\"]=\"Oklahoma\" [\"PA\"]=\"Pennsylvania\" [\"VA\"]=\"Virginia\" )\n    output=()\n    reState='(.*)([A-Z]{2})$'\n    while read -r line; do\n      if [[ $line =~ $reState ]]; then\n        state=${states[${BASH_REMATCH[2]}]}\n        newLine=\"${BASH_REMATCH[1]} $state\"\n        \n        output+=(\"$state $newLine\")\n      fi\n    done <<< \"$1\"\n    \n    sorted=$(printf '%s\n' \"${output[@]}\" | sort)\n    #printf '%s\n' \"${sorted[@]}\"\n    reFront='^([A-Za-z]+) (.*)'\n    curState=\"\"\n    first=true\n    while read -r line; do\n      if [[ $line =~ $reFront ]]; then\n        state=\"${BASH_REMATCH[1]}\"\n        addr=\"${BASH_REMATCH[2]}\"\n        if [[ $curState != $state ]]; then\n          curState=$state\n          if [[ !$first ]]; then\n            echo \" $curState\"\n          else\n            echo \"$curState\"\n          fi\n          \n          first=false\n        else\n          first=true\n        fi\n        addrStripped=$(echo $addr | sed 's\/,\/\/g')\n        echo \"..... ${addrStripped}\"\n      fi\n    done <<< \"$sorted\"    \n}\nbyState \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338005,"user_id":null,"body":"#!bin\/bash\nbyState() {\n  declare -A cc\n  cc=( ['AZ']='Arizona' ['CA']='California' ['ID']='Idaho' ['IN']='Indiana'\\\n       ['MA']='Massachusetts' ['OK']='Oklahoma' ['PA']='Pennsylvania' ['VA']='Virginia' )\n\n  lc=\n  while IFS=, read c name addy place; do\n      place=${place%$c}\n    if [[ $c != $lc ]]; then\n      [[ -s $lc ]] || echo -n \" \"\n      lc=$c\n      echo ${cc[$c]}\n    fi\n    echo \"..... $name$addy$place${cc[$c]}\"\n  done < <(sed -r 's\/^.* (..)$\/\\1,&\/' <<< \"$1\" | sort -k1 -k2 | sed '\/^\\s*$\/d')\n}\nbyState \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338006,"user_id":null,"body":"#!bin\/bash\nbyState() {\n  IFS=$'\n' l=($1)\n  for ((i=0; i<${#l[*]}; i++))\n  do r=${l[$i]\/\/,\/} m=${#r} l[$i]=${r:m-2}\" \"$r\n  done\n  st=\" \"\n  declare -A states\n  s=(`sort<<<\"${l[*]}\"`)\n  states=([AZ]=Arizona [CA]=California \n          [ID]=Idaho [IN]=Indiana [MA]=Massachusetts \n          [OK]=Oklahoma [PA]=Pennsylvania [VA]=Virginia)\n  for ((i=0; i<${#s[*]}; i++))\n  do\n    if [ ${s[$i]:0:2} != $st ]\n    then \n      st=${s[$i]:0:2}\n      [ $i ] && sp=\" \" || sp=\"\"\n      echo $sp${states[$st]}\n    fi\n    m=${#s[$i]}; echo .....${s[$i]:2:m-4}${states[$st]}\n  done\n}\nbyState \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338007,"user_id":null,"body":"#!bin\/bash\nstates() {\n  case $2 in\n    AZ) echo $1Arizona;;      CA) echo $1California;;\n    ID) echo $1Idaho;;        IN) echo $1Indiana;;\n    MA) echo $1Massachusetts;;OK) echo $1Oklahoma;;\n    PA) echo $1Pennsylvania;; VA) echo $1Virginia;;\n  esac\n}\nbyState() {\n  IFS=$'\n' l=($1)\n  for ((i=0; i<${#l[*]}; i++))\n  do r=${l[$i]\/\/,\/} m=${#r} l[$i]=${r:m-2}\" \"$r\n  done\n  st=\" \"\n  s=(`sort<<<\"${l[*]}\"`)\n  for ((i=0; i<${#s[*]}; i++))\n  do\n    if [ ${s[$i]:0:2} != $st ]\n    then \n      st=${s[$i]:0:2}\n      [ $i ] && states \" \" $st || states \"\" $st\n    fi\n    m=${#s[$i]}; states .....${s[$i]:2:m-4} $st\n  done\n}\nbyState \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59d727d40e8c9dd2dd00009f":[{"id":338008,"user_id":null,"body":"#!\/bin\/bash\n\ntr -dc '[:alnum:][:space:].' <<< \"$1\" | awk '\n  ! NF { NR--; next }\n\n  NR == 1 {\n    balance = $1\n    printf \"Original Balance: %.2f\n\", balance\n  }\n\n  NR > 1 {\n    total += $3\n    printf \"%s %s %.2f Balance %.2f\n\", $1, $2, $3, balance - total\n  }\n\n  END {\n    printf \"Total expense  %.2f\n\", total\n    printf \"Average expense  %.2f\n\", total \/ (NR - 1)\n  }\n'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338009,"user_id":1045,"body":"#!\/bin\/bash\nbalance() {\nIFS=$'\n'; declare -a arr=($1); unset IFS\nc=0; bal=0; tot=0\n\nwhile (( $c < ${#arr[*]} )); do\n  val=$(echo \"${arr[$c]}\"|tr -Cd \"a-zA-Z0-9. \")\n  \n  #process for the FIRST entry\n  if [ $c -eq 0 ]; then\n    bal=$(echo \"scale=2; ($val+0)\/1\"|bc -l)\n    tot=$bal\n    i=\"Original Balance: $(printf \"%.2f\" $val)\"\n  \n  #process for all following entries\n  else\n    tmp=$(echo \"$val\"|egrep -o '[[:digit:]]*\\.[[:digit:]]+$')\n    bal=$(echo \"scale=2; ($bal-$tmp)\/1\"|bc -l)\n    bgn=${val% *}\n    tmp=$(printf \"%.2f\" $tmp)\n    i=\"$bgn $tmp Balance $bal\"\n  fi\n  #print the results, increment counter\n  echo $i; let c=c+1\ndone\n\n#make final calculations for TOT and AVG and print\ndif=$(echo \"scale=2; ($tot-$bal)\/1\"|bc -l)\necho \"Total expense  $dif\"\necho \"Average expense  $(printf \"%.2f\" $(echo \"scale=4; $dif\/(${#arr[*]}-1)\"|bc -l) )\"\n}\nbalance \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338010,"user_id":492,"body":"#!\/bin\/bash\nbalance() {\n    a=\"$1\"\n    a=$(echo \"$a\" | sed 's\/[^a-zA-Z0-9\\. ]\/\/g')\n    h=$(echo \"$a\" | awk -F\" \" '\n    NR == 1 { \n        printf \"%s %.2f\n\", \"Original Balance:\", $1\n        bal = $1\n        total = 0\n        next\n    }\n    {\n        if ($0 == \"\") {\n            NR -= 1\n            next\n        }\n        bal = bal - $3\n        total += $3\n        printf \"%s %s %.2f %s %.2f\n\", $1, $2, $3, \"Balance\", bal\n    }\n    END {\n        printf \"%s %.2f\n\", \"Total expense \", total\n        avg = total \/ (NR -1)\n        printf \"%s %.2f\n\", \"Average expense \", avg\n    }\n    ')\n    echo \"$h\"\n}\nbalance \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338011,"user_id":2390,"body":"#! \/bin\/bash\n\necho \"$1\" | mawk '\nBEGIN {\n    FS = \"[^0-9A-Za-z\\.]+\"\n}\n$1 ~ \/^[0-9]+(\\.[0-9][0-9]?)?[ ]*$\/ && $2 == \"\" {\n    balance = $1\n    printf \"Original Balance: %.2f\n\", balance\n    next\n}\n$1 == \"\" { next }\n{\n    balance -= $3\n    total += $3\n    count++\n    printf \"%s %s %.2f Balance %.2f\n\", $1, $2, $3, balance\n}\nEND {\n    printf \"Total expense  %.2f\n\", total\n    printf \"Average expense  %.2f\", total \/ count\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338012,"user_id":null,"body":"#!\/bin\/bash\n\ncleaned_list=\"${1\/\/[![:alnum:]\n.[:space:]]\/}\"\ntotal=${cleaned_list[0]}\necho  \"${cleaned_list#$'*\n'}\" | awk  '\nBEGIN {\n        tot='\"${total}\"'\n        count=0\n        spent=0\n        printf(\"Original Balance: %.2f\n\", tot)\n}\n!\/^$\/ { tot=tot-$3\n        spent+=$3\n        count++\n        printf \"%s %s %.2f Balance %.2f\n\", $1, $2, $3, tot}\nEND {\n        printf \"Total expense  %.2f\n\", spent\n        printf \"Average expense  %.2f\", spent\/count\n}'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338013,"user_id":null,"body":"#!\/bin\/bash\n\nawk -f - <(tr -dc '[:alnum:][:space:].' <<< \"$1\") <<'EOF'\nNR == 1 {\n\tbalance = $1\n\tprintf \"Original Balance: %.2f\n\", balance\n}\n\nNR > 1 && NF {\n\ttotal += $3\n  count += 1\n\tbalance -= $3\n\tprintf \"%s %s %.2f Balance %.2f\n\", $1, $2, $3, balance\n}\n\nEND {\n\tprintf \"Total expense  %.2f\n\", total\n\tprintf \"Average expense  %.2f\n\", total \/ count\n}\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338014,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalance() {\n    clear_str=$(echo \"$1\" | sed 's\/[^a-zA-Z0-9 \\.]\/\/g' | \\\n                    sed '\/^[[:space:]]*$\/d')\n    total=$(echo \"$clear_str\" | awk 'NR==1{print $1}')\n    [[ -n $(echo \"$total\" | grep -P \".*\\...$\") ]] && : || \\\n            total+=\"0\"\n    expenses=$(echo \"$clear_str\" | awk '{print $3}' | \\\n                   tr '\n' '+' | sed 's\/^.\/\/' | sed 's\/.$\/\/')\n    total_expenses=$(echo \"$expenses\" | bc -l)\n    [[ -n $(echo \"$total_expenses\" | grep -P \".*\\...$\") ]] && : || \\\n            total_expenses+=\"0\"\n    total_num_expenses=$(echo \"$clear_str\" | awk 'END{print NR}')\n    average_expense=$(echo \"$total_expenses\/$(( total_num_expenses-1 ))\" | bc -l)\n    IFS=$'\n'\n    input_arr=($clear_str)\n    bal=\"$total\"\n    expenses_arr=($total)\n    \n    for ((i=1; i<${#input_arr[*]}; i++))\n    do\n        expense=$(echo \"${input_arr[$i]}\" | awk '{print $3}')\n        bal=$(echo \"$bal-$expense\" | bc -l)\n        expenses_arr+=(\"$bal\")\n    done\n    \n    echo \"Original Balance: $total\"\n    for ((i=1; i<${#input_arr[*]}; i++))\n    do\n        [[ -n $(echo \"${input_arr[$i]}\" | grep -P \".*\\...$\") ]] && \\\n            echo \"${input_arr[$i]} Balance ${expenses_arr[$i]}\" || \\\n                echo \"${input_arr[$i]}0 Balance ${expenses_arr[$i]}\"\n    done\n    echo \"Total expense  $total_expenses\"\n    echo -n \"Average expense  \"\n    perl -e 'my $var = (sprintf(\"%.2f\", $ARGV[0])); print(\"$var\n\")' \\\n         \"$average_expense\"\n}\n\nbalance \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338015,"user_id":null,"body":"#!\/bin\/bash\nbalance() {\nline=\"$(echo $1 | tr -cd \"[:alnum:]. \")\"\nlines=($(echo $line | tr ' ' '\n'))\nnums=($(echo $line | egrep -o \"[0-9]+\\\\.[0-9]+\"))\nbalance=(\"${nums[0]}\");\nfor ((i=1;i<${#nums[@]};i++));do\n    balance+=(\"$(echo \"${balance[$(($i-1))]}-${nums[$i]}\" | bc)\")\ndone\ntotal=\"$(echo \"${balance[0]}-${balance[-1]}\" | bc)\"\navg=\"$(echo \"$total\/$((${#balance[@]}-1))\" | bc -l)\"\nprintf \"Original Balance: %.2f\n\" ${nums[0]}\nfor ((i=1;i<${#balance[@]};i++));do\n    j=$(($i-1));\n    index=$(($j*3))\n    printf \"%s %s %.2f Balance %.2f\n\" \"${lines[$index+1]}\" \"${lines[$(($index+2))]}\" ${lines[$(($index+3))]} ${balance[$i]};\ndone\nprintf \"Total expense  %.2f\n\" $total\nprintf \"Average expense  %.2f\" $avg\n}\nbalance \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338016,"user_id":null,"body":"#!\/bin\/bash\nbalance() {\n    # your code\n  local -a array=()\n  while read; do\n    if [[ -n \"${REPLY}\" ]]; then\n      array+=(\"$REPLY\")\n    fi\n  done <<< \"$1\"\n\n  local regexp='[[:digit:]]\\+\\.[[:digit:]]\\+\\|[[:digit:]]\\+'\n  local orig=$(grep -o \"$regexp\" <<< \"${array[0]}\")\n  printf \"Original Balance: %.2f\n\" \"$orig\"\n  local reminder=\"$orig\"\n  local count=0;\n\n  for ((i = 1; i < ${#array[@]}; i++)); do\n    local words=(${array[i]})\n    if (( ${#words} > 0)); then\n      (( count += 1))\n      local no=$(grep -o '[[:digit:]]\\+' <<< \"${words[0]}\")\n      local label=$(grep -o '[a-zA-Z0-9]\\+' <<< \"${words[1]}\")\n      local price=$(grep -o \"$regexp\" <<< \"${words[2]}\")\n      reminder=$(bc <<< \"scale=2; $reminder - $price\")\n      printf \"%03d %s %.2f Balance %.2f\n\" \"$no\" \"$label\" \"$price\" \"$reminder\"\n    fi\n  done\n  total=$(bc <<< \"$orig - $reminder\")\n  printf \"Total expense  %.2f\n\" \"$total\"\n  printf \"Average expense  %.2f\n\" \"$(bc <<< \"scale=5; $total \/ $count\")\"\n}\nbalance \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338017,"user_id":480,"body":"#!\/bin\/bash\nbalance() {\n    echo \"$1\" | awk '\n    NR==1 {B=100.0*$1;T=0;N=0;printf \"Original Balance: %.2f\n\", B\/100}\n    NR>1 && NF>=3 {sub(\/[!=:;{}]+\/,\"\",$0);N=N+1;T=T+$3;B=B-100.0*$3;printf \"%s %s %.2f Balance %.2f\n\", $1,$2,$3,B\/100.0}\n    END{printf \"Total expense  %.2f\nAverage expense  %.2f\", T, T\/N}\n    '\n}\nbalance \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59d9d8cb27ee005972000045":[{"id":338018,"user_id":null,"body":"IFS='\n'\nfor line in $1; do\n    if [[ $line =~ '<prod><name>'(.*\"$2\".*)'<\/name><prx>'(.*)'<\/prx><qty>'(.*)'<\/qty><\/prod>' ]]; then\n        echo \"${BASH_REMATCH[1]} > prx: \\$${BASH_REMATCH[2]} qty: ${BASH_REMATCH[3]}\"\n        found=1\n    fi\ndone\n\n[[ ! $found ]] && echo Nothing","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338019,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -e -o pipefail -u\n\ngrep \"$2\" <<<\"$1\" \\\n\t| sed -E 's=.*<name>(.*)<\/name><prx>(.*)<\/prx><qty>(.*)<\/qty>.*=\\1 > prx: $\\2 qty: \\3=g' \\\n\t|| echo Nothing\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338020,"user_id":null,"body":"catalog() {\n     out=\"$(awk -F'[><]' -v item=\"$2\" '$5 ~ item { printf \"%s > prx: $%s qty: %d\n\", $5, $9, $13}' <<< \"$1\")\"\n     if [[ -z \"$out\" ]]; then\n         echo \"Nothing\"\n     else\n         echo \"$out\"\n     fi\n}\ncatalog \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338021,"user_id":null,"body":"catalog () {\n   output=$(echo \"$1\" | grep \"$2\" | sed -rn 's\/.*name>([^<]+).+prx>([^<]+).*qty>([^<]+).*\/\\1 > prx: $\\2 qty: \\3\/p')\n   \n   if [ -z $output ]; then\n     echo 'Nothing'\n   else\n     echo \"$output\"\n   fi\n}\ncatalog \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338022,"user_id":492,"body":"catalog() {\n     h=$(echo \"$1\" \"$2\" | awk '\n        BEGIN { FS=\"[><]\"; RS=\"\n\n\" ; OFS=\"\"; search = \"'\"$2\"'\"; cnt = 0 }\n        $5 ~ search { cnt = 1; print $5 \" > \" $8 \": \" \"$\"$9, \" \" $12 \": \" $13 }\n        END {\n            if (cnt == 0)\n                print \"Nothing\"\n        }')\n     echo \"$h\"\n}\ncatalog \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338023,"user_id":null,"body":"catalog() {\n   match=$(echo \"$1\" | grep \"$2\" | tr '\n' $)\n   IFS='$' lines=($match)\n   prodRe=\"name.([^\\<]+).+.prx.([0-9\\.]+).+qty.([0-9]+)\"\n   if [[ ${#match[@]} = 1 && ${match[0]} = \"\" ]]; then echo Nothing;\n   else\n     for line in ${lines[@]}; do \n       if [[ $line =~ $prodRe ]]; then \n         echo \"${BASH_REMATCH[1]} > prx: \\$${BASH_REMATCH[2]} qty: ${BASH_REMATCH[3]}\" \n       fi\n    done\n  fi\n}\ncatalog \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338024,"user_id":null,"body":"catalog() {\n\n  a=$(echo \"${1\/\/[><]\/:}\" | grep \"$2\")\n\n  [[ $a ]] && awk -F: '{ print $5 \" > \" $8 \": $\" $9 \" \" $11 $12 \": \" $13\n                       }' <<< \"$a\" || echo \"Nothing\"\n}\ncatalog \"$1\" \"$2\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338025,"user_id":null,"body":"catalog() {\n  grep -q \"$2\" <<< \"$1\" || { echo Nothing; return; }\n  sed -n '\/'\"$2\"'\/ { s,<prod><name>,,\n                     s,<\/name><prx>, > prx: $,\n                     s,<\/prx><qty>, qty: ,\n                     s,<\/qty><\/prod>,,p }' <<< \"$1\"\n}\ncatalog \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338026,"user_id":null,"body":"catalog() {\n  local output=\"$(sed -n \"\/<name>[^<]*$2[^<]*<\\\\\/name>\/s\/.*<name>\\\\([^<]*$2[^<]*\\\\)<\\\\\/name>.*<prx>\\\\([^<]\\\\+\\\\)<\\\\\/prx>.*<qty>\\\\([^<]\\\\+\\\\)<\\\\\/qty>.*\/\\\\1 > prx: \\$\\\\2 qty: \\\\3\/gp\" <<< \"$1\")\"\n  [[ -n \"$output\" ]] && echo \"$output\" || echo 'Nothing'\n}\ncatalog \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338027,"user_id":null,"body":"[[ $(echo \"$1\" | grep \"$2\") != \"\" ]] && echo \"$1\" | grep \"$2\" | sed 's\/[<\/>]\\+\/:\/g' | awk -F \":\" '{print $4\" > prx: $\" $(NF-6)\" qty: \"$(NF-3)}' || echo \"Nothing\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59de1e2fe50813a046000124":[{"id":338028,"user_id":503,"body":"if [[ \"$1\" =~ Phone:\\ \\+1(-[0-9]{3}){3}[0-9].*Version:\\ [0-9]\\.[0-9][^.] ]]; then\n\techo \"Program: $2 Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: $(awk '$0~\"Version\"{E=substr($0,10);print \"2.0\"==E?E:\"'$3'\"}' <<< \"$1\")\"\nelse\n\techo 'ERROR: VERSION or PHONE'\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338029,"user_id":null,"body":"#!\/bin\/bash\nchange () {\n    # your code\n    validVersion=\"Version: ([0-9]\\.[0-9]+)\\s\"\n    validPhone='\\+1-([0-9]{3}-){2}[0-9]{4}'\n    \n    [[ ! $1 =~ $validPhone || ! $1 =~ $validVersion ]] && { echo \"ERROR: VERSION or PHONE\"; exit 0; }\n    \n    echo -n \"Program: $2 Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: \"\n    [[ \"$(echo $1 | grep -oP \"$validVersion\")\" == \"Version: 2.0 \" ]] && echo \"2.0\" || echo \"$3\"\n}\nchange \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338030,"user_id":492,"body":"#!\/bin\/bash\nrepare='sub repare {\n    $_ = shift;  my $pg = shift; my $v = shift; my $ph = \"+1-503-555-0090\";\n    if ($_ =~ \/Version: (\\d+\\.\\d+)\n\/) {\n        if ($1 ne \"2.0\") {\n            $_ =~ s\/Version:.*\n\/Version: $v\n\/;\n        }\n    }\n    else {\n        print(\"ERROR: VERSION or PHONE\");\n        exit\n    }\n    if ($_ =~ \/Phone: (\\+1\\-\\d{3}\\-\\d{3}\\-\\d{4})\/) {\n        if ($1 ne \"$ph\") {            \n            $_ =~ s\/Phone:.*\/Phone: $ph\n\/;\n        }\n    } else {\n        print(\"ERROR: VERSION or PHONE\");\n        exit\n    }\n    s\/Author:.*\/Author: g964\/;\n    s\/Program title:.*\/Program: $pg\/;\n    s\/Level:.*\/\/;\n    s\/Corporation:.*\n\/\/;\n    s\/Date:.*\/Date: 2019-01-01\/;\n    return $_;\n}\n$a=repare($ARGV[0], $ARGV[1], $ARGV[2]);\nprint $a;\n'\nchange () {\n    echo `perl -e \"$repare\" \"$1\" \"$2\" \"$3\"`\n}\nchange \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338031,"user_id":null,"body":"#!\/bin\/bash\nchange () {\n    prog=$2\n    finalVersion=$3\n    \n    phone=$(echo $1 | awk {'print $9'})\n    echo $phone | egrep -q \"^\\+1-[0-9]{3}-[0-9]{3}-[0-9]{4}$\" || { echo \"ERROR: VERSION or PHONE\" ; exit ; }\n    version=$(echo $1 | awk {'print $16'})\n    echo $version | egrep -q \"^[0-9]{1,}\\.[0-9]{1,}$\" || { echo \"ERROR: VERSION or PHONE\" ; exit ; }\n    [ $version == \"2.0\" ] && finalVersion=$version\n    \n    echo \"Program: $prog Author: g964 Phone: +1-503-555-0090 Date: 2019-01-01 Version: $finalVersion\"\n}\nchange \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338032,"user_id":null,"body":"#!\/bin\/bash\nchange () {\n  ver=$3\n  phone_regex=\"Phone: \\+[1]-[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n  ver_regex=\"Version: [0-9]+\\.[0-9]+\\s\"\n  if [[ ! $1 =~ $phone_regex || ! $1 =~ $ver_regex ]]; then\n    echo 'ERROR: VERSION or PHONE' \n    exit\n  fi\n  if [[ $1 =~ 'Version: 2.0' ]]; then\n    ver=\"2.0\"\n  fi\n  echo \"$1\" | \\\n    sed -r \"s\/Program title:.*$\/Program: $2\/\" | \\\n    sed -r \"s\/Version: .*$\/Version: $ver\/\" | \\\n    sed -r \"s\/Author: .*$\/Author: g964\/\" | \\\n    sed -r \"s\/Date: .*$\/Date: 2019-01-01\/\" | \\\n    sed -r \"s\/Phone: .*$\/Phone: +1-503-555-0090\/\" | \\\n    grep -v \"Level\" | grep -v \"Corporation\" | tr '\n' ' '\n}\nchange \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338033,"user_id":null,"body":"#!\/bin\/bash\nchange () {\n  newver=\"$3\"\n  if ! echo $1 | grep -qE  \"\\+1-[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n  then\n    echo \"ERROR: VERSION or PHONE\"\n    exit 0\n  elif ! echo $1 | grep -qE  \"Version: [0-9]\\.[0-9]* \"\n  then\n    echo \"ERROR: VERSION or PHONE\"\n    exit 0\n  elif echo $1 | grep -qE  \"Version: 2\\.0\"\n  then\n    newver=\"2.0\"\n  fi\n  version=$(echo $1 | sed \"s\/Version: [0-9]*.[0-9]*\/Version: $newver\n\/g\")\n  author=$(echo \"$version\" | sed \"s\/Author: [A-Za-z]*\/Author: g964\/g\")\n  echo \"$author\" | sed \"s\/Program title: [A-Za-z]*\/Program: $2\/g\" | sed \"s\/Date: [a-zA-Z]* [a-zA-Z]* [0-9]*, [0-9]*\/Date: 2019-01-01\/\" | sed \"\/Level\/d\" | sed \"s\/Corporation: [A-Za-z]*\/\/g\" | sed -r \"s\/Phone: \\+1-[0-9]{3}-[0-9]{3}-[0-9]{4}\/Phone: +1-503-555-0090\/g\" | sed \"s\/\n\/\/g; s\/  \/ \/g\"\n}\nchange \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338034,"user_id":null,"body":"#!\/bin\/bash\ncount=`echo $1 | awk '{print $9}' | wc -m`\nver=`echo $1 | awk '{print $16}'`\ndots=`echo $1 | awk '{print $16}' | sed 's\/[^.]\/\/g' | awk '{ print length }'`\nphone=`echo $1 | awk '{print $9}'`\nchange () {\n  if [[ $count -eq 16 ]]; then\n      if [[ $dots -gt 1 ]]; then\n        echo -n \"ERROR: VERSION or PHONE\"\n      else\n        if [[ ${ver:0:1} == \".\" ]]; then\n          echo -n \"ERROR: VERSION or PHONE\" \n        else\n          if [[ $dots -eq 0 ]]; then\n            echo -n \"ERROR: VERSION or PHONE\" \n          else\n            if [[ ${phone:1:1} != \"1\" ]]; then\n              echo -n \"ERROR: VERSION or PHONE\"\n            else\n              echo $1 | echo -n `awk '{print $1}'` \n              echo -n \": $2 \"\n              echo $1 | echo -n `awk '{print $4}'`\n              echo -n \" g964 \"\n              echo $1 | echo -n `awk '{print $8 \" \" \"+1-503-555-0090\" \" \" $10}'`\n              echo -n \" 2019-01-01 \"\n              echo $1 | echo -n `awk '{print $15}'`\n              if [[ \"$ver\" == \"2.0\" ]]; then\n                echo -n \" 2.0\"\n              else\n                echo -n \" $3\"\n              fi\n          fi\n        fi\n      fi\n    fi\n  else \n    echo -n \"ERROR: VERSION or PHONE\"\n  fi\n}\nchange \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338035,"user_id":null,"body":"#!\/bin\/bash\nchange () {\ndate=\"Date: 2019-01-01\"\nauthor=\"Author: g964\"\nprog=\"Program: $2\"\nversion=$(echo $1 | egrep \"Version: [0-9]+\\\\.[0-9]+ \")\nphone=$(echo $1 | egrep \"Phone: \\\\+1\\\\-[0-9]{3}\\\\-[0-9]{3}\\\\-[0-9]{4}\")\nif [[ \"$version\" == \"\" || \"$phone\" == \"\" ]];then\n    echo \"ERROR: VERSION or PHONE\";\nelse\n    if [[ -n \"$(echo $1 | grep \"Version: 2.0\")\" ]];then\n        version=\"Version: 2.0\";\n    else\n        version=\"Version: $3\";\n    fi\n    phone=\"Phone: +1-503-555-0090\";\n    echo \"$prog $author $phone $date $version\";\nfi\n}\nchange \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338036,"user_id":null,"body":"#!\/bin\/bash\nchange () {\n    # your code\n    title=$2\n    ver=$3\n    checkphone=$(echo $1 | grep -E \"(\\+1)+-([0-9+]{3})+-([0-9+]{3})+-([0-9+]{4})\" | wc -l)\n    v=$(echo $1 | rev |cut -d \" \" -f 3 | rev )\n    if [[ $(echo $v | sed \"s\/\\.\/\n\/g\" | wc -l) -gt 2 || $(echo $v | grep -E \"([0-9])+\\.([0-9+])\" | wc -l) -eq 0 ]]; then\n      checkphone=0\n    fi\n    if [[ $v == \"2.0\" ]]; then\n      ver=$v\n    fi\n    rs=$(echo $1 | sed   -E \"s\/\\b title: (\\w+)\/: ${title}\/g;s\/r: (\\w+)\/r: g964\/g;s\/(: )+((\\w+\\b[ ,])+([ 0-9]+))\/: 2019-01-01 \/g;s\/(Corporation: )+(\\w+)\/\/g;s\/(Level: )+(\\w+)\/\/g;s\/n: ([0-9])([\\.0-9]+)\/n: $ver\/g\")\n    rs=$(echo $rs | sed -E \"s\/(\\+.)+-([0-9+]{3})+-([0-9+]{3})+-([0-9+]{4})\/+1-503-555-0090\/g\")\n    if [[ $checkphone -gt 0  && ${v%%.*} -lt 10 ]] ; then\n       echo $rs\n      else        \n        echo \"ERROR: VERSION or PHONE\"\n    fi\n    #echo $rs | rev |cut -d \" \" -f 1 | rev\n    #echo $1\n}\nchange \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338037,"user_id":null,"body":"#!\/bin\/bash\nchange () {\n    converted_str=$(echo \"$1\" | sed -E 's\/\\\n\/\n\/g')\n    if [[ ! $3 =~ [0-9]\\.[0-9]+ ]] || [[ ! $(echo \"$converted_str\" | awk -F ': ' 'NR==4 {print $2}') =~ \\+1-[0-9]{3}-[0-9]{3}-[0-9]{4} ]] || \n        [[ ! $(echo \"$converted_str\" | awk -F ': ' 'NR==6 {print $2}') =~ ^[0-9]\\.[0-9]+$ ]]\n    then\n        echo \"ERROR: VERSION or PHONE\"\n    elif [[ $(echo \"$converted_str\" | awk -F ': ' 'NR==6 {print $2}') == \"2.0\" ]] \n    then\n        converted_str=$(echo \"$converted_str\" | \n        sed -e '2s\/.*\/Author: g964\/' -e \"1s\/.*\/Program: $2\/\" -e '5s\/.*\/Date: 2019-01-01\/' -e '4s\/.*\/Phone: +1-503-555-0090\/' -e 3d -e 7d | \n        tr '\n' ' ')\n        echo \"$converted_str\"\n    else\n        converted_str=$(echo \"$converted_str\" | \n        sed -e '2s\/.*\/Author: g964\/' -e \"1s\/.*\/Program: $2\/\" -e \"6s\/.*\/Version: $3\/\" -e '5s\/.*\/Date: 2019-01-01\/' -e '4s\/.*\/Phone: +1-503-555-0090\/' -e 3d -e 7d | \n        tr '\n' ' ')\n        echo \"$converted_str\"\n    fi\n}\nchange \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59df2f8f08c6cec835000012":[{"id":338038,"user_id":null,"body":"#!\/bin\/bash\n\nmeeting() {\n  tr '[a-z];' '[A-Z]\n' <<< $1 | \n    sort -t':' -k2 |\n       awk -F':' '{ \n          printf \"(%s, %s)\",$2,$1\n       }'\n}\n\n\n\nmeeting \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338039,"user_id":null,"body":"#!\/bin\/bash\ntr ';' '\n' <<<\"${1^^}\"|awk -F: '{print \"(\"$2\", \"$1\")\"}'|sort|tr -d '\n'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338040,"user_id":666,"body":"#!\/bin\/bash\n\nmeeting() (\n  declare guests\n  guests=\"${1}\"\n  result=\"$(while IFS=\":\" read -r surname name; do printf '(%s, %s)\n' \"${name^^}\" \"${surname^^}\"; done <<<\"${guests\/\/;\/$'\n'}\" | sort -d)\"\n  printf '%s' \"${result\/\/$'\n'\/}\"  \n)\n\nmeeting \"${1}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338041,"user_id":492,"body":"#!\/bin\/bash\naux='sub aux {\n    my ($s) = @_; $s = uc $s;\n    my @h = split \/[;]\/, $s;\n    my @hh = map { [split \/[:]\/] } @h;\n    my @k = sort {\n        \"$a->[1]\" cmp \"$b->[1]\" or \"$a->[0]\" cmp \"$b->[0]\"\n    } @hh;\n    my $res = \"\";\n    foreach (@k) {\n        $res .= \"($_->[1], $_->[0])\";\n    }\n    return $res;\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\nmeeting () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\nmeeting \"$1\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338042,"user_id":null,"body":"#!\/bin\/bash\necho \"$1\" | sed -E 's\/(\\w+):(\\w+)\/(\\U\\2, \\U\\1)\/g' | tr \";\" \"\n\" | sort | tr -d \"\n\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338043,"user_id":666,"body":"#!\/bin\/bash\n\nr=\"$(while IFS=\":\" read -r s n; do printf '(%s, %s)\n' \"${n^^}\" \"${s^^}\"; done <<<\"${1\/\/;\/$'\n'}\" | sort -d)\"\nprintf '%s' \"${r\/\/$'\n'\/}\"  \n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338044,"user_id":null,"body":"#!\/bin\/bash\nmeeting()\n{\n  res=`echo $1 | tr 'a-z:;' 'A-Z  '`\n  i=0;j=0;ind=0;\n  ans=()\n  for str in $res\n  do\n    \n    i=$(( $ind\/2 ))\n    j=$(( $i*2 ))\n    \n    ind=$(( $ind+1 ))\n    \n    if [ $(( ($ind+1)%2 )) -eq 0 ]\n    then \n      ans[$j]=$str\")\"\n    else\n      ans[$j]=\"(\"$str\", \"${ans[$j]}\n    fi\n  done\n  \n echo ${ans[*]} | sed 's?) (?);(?g' | tr ';' '\n' | sort | tr -d '\n'\n}\n\n\n\n\nmeeting \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338045,"user_id":503,"body":"echo \"$(awk 'BEGIN{FS=\":\";RS=\"[\n;]\"}{print toupper($2\"      \"$1)}' <<< \"$1\" |\n  sort |\n  awk '{printf \"(\"$1\", \"$2\")\"}')\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338046,"user_id":null,"body":"#!\/bin\/bash\nfunction meeting () { \n        IFS=\";\"; read -a array <<< \"$1\"\n        for ele in \"${array[@]}\"; do\n                echo \"$ele\" | awk -F: '{print \"(\"$2\",\",$1\")\"}' | tr '[a-z]' '[A-Z]'\n        done | sort | tr -d '\n'      \n}\n\nmeeting \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338047,"user_id":null,"body":"#!\/bin\/bash\nreadarray -t -d ';' names < <(printf -- \"$1\")\nfor name in \"${names[@]}\"; do\n  new_name=$(\\\n    echo \"${name^^}\" \\\n    | awk -F ':' '{print $2, $1}' \\\n    | sed \\\n    's\/ \/, \/; \n    s\/^\/\\(\/; \n    s\/$\/\\)\/')\n  \n  str=$str$new_name$'\n'\ndone\nsort < <(echo \"$str\") | sed -z 's\/\n\/\/g'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59f3956825d575e3330000a3":[{"id":338048,"user_id":492,"body":"#!\/bin\/bash\naux='\nuse strict;\nuse warnings;\nsub get_char_hash {\n    my %character_class = ();\n    %character_class = (\"A\" => \"A\", \"C\" => \"C\", \"G\" => \"G\", \"T\" => \"T\", \"R\" => \"[GA]\", \"Y\" => \"[CT]\", \n    \"M\" => \"[AC]\", \"K\" => \"[GT]\", \"S\" => \"[GC]\", \"W\" => \"[AT]\", \"B\" => \"[CGT]\", \"D\" => \"[AGT]\", \n    \"H\" => \"[ACT]\", \"V\" => \"[ACG]\", \"N\" => \"[ACGT]\"); \n    my($iub) = @_; my $regexp = \"\"; \n    for ( my $i = 0 ; $i < length($iub) ; ++$i ) { \n        $regexp .= $character_class{substr($iub, $i, 1)}; \n    } \n    return $regexp; \n}\nsub parse_base {\n    my %base_hash = (  ); my $name; my $site; my $regexp; my $file = shift;\n    open my $fh, \"<\", \\$file or die $!;\n    while (<$fh>) { \n        ( 1 .. \/<>\/ ) and next; \n        \/^\\s*$\/ and next;  \n        my @fields = split( \" \", $_); \n        $name = shift @fields; \n        $site = pop @fields; \n        $regexp = get_char_hash($site); \n        $base_hash{$name} = \"$regexp\"; \n    }\n    close $fh or die $!;\n    return %base_hash;\n}\nsub extract_data { \n    my $s = shift;\n    $s =~ s\/\\s\/\/g;  \n    return $s;\n}\nsub match_positions { \n    my $regexp =shift; my $sequence = shift; \n    my @positions = (  ); \n    while ( $sequence =~ \/$regexp\/ig ) { \n         push ( @positions, pos($sequence) - length($&) + 1); \n    } \n    return @positions;\n}\nsub aux {\n    my $base = shift; my $str = shift; my $query = shift;\n    my %rebase_hash = (  ); \n    my $data = \"\"; my $recognition_site = \"\"; my $regexp = \"\"; \n    my @locations = (  ); my $res = \"\";\n    $data = extract_data($str); \n    %rebase_hash = parse_base($base); \n    if ( exists $rebase_hash{$query} ) { \n        $regexp = $rebase_hash{$query}; \n        @locations = match_positions($regexp, $data); \n        if (@locations) { \n            $res = join(\" \", @locations); \n        } else { \n            $res = \"$query is not in given string\"; \n        } \n    } else { $res = \"This query name does not exist in given Base\"; }\n    return $res;\n}\n$a=aux($ARGV[0], $ARGV[1], $ARGV[2]);\nprint $a;\n'\nget_pos () {\n    echo `perl -e \"$aux\" \"$1\" \"$2\" \"$3\"`\n}\nget_pos \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338049,"user_id":503,"body":"P=`awk 'BEGIN{X=0;N=\"'$3'\"}{if(X&&$1==N)print $3?$3:$2;if(\"<>\"==$0)X=1}'<<<\"$1\"`\nif [ ! $P ]; then\n\techo This query name does not exist in given Base\n\texit\nfi\n\nN=`tr 'a-z' 'A-Z'<<<\"$P\"`\nN=${N\/\/R\/[GA]}\nN=${N\/\/Y\/[CT]}\nN=${N\/\/M\/[AC]}\nN=${N\/\/K\/[GT]}\nN=${N\/\/S\/[GC]}\nN=${N\/\/W\/[AT]}\nN=${N\/\/B\/[CGT]}\nN=${N\/\/D\/[AGT]}\nN=${N\/\/H\/[ACT]}\nN=${N\/\/V\/[ACG]}\nN=${N\/\/N\/[ACCGT]}\nperl -e '\n$L = length($ARGV[0]);\n$N = length($ARGV[1]);\n$C = 0;\nfor ($F = $N - 1;$F++ < $L;)\n{\n\t$T = substr($ARGV[0],$F - $N,$N);\n\tif ($T =~ \/'$N'\/i) {\n\t\tprint 1 + $F - $N,\" \";\n\t\t$F += $N - 1;\n\t\t++$C;\n\t}\n}\nif (!$C) {print \"'$3' is not in given string\";}\n' \"${2\/\/$'\n'\/}\" \"$P\"\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338050,"user_id":null,"body":"#!\/bin\/bash\nget_pos () {\n  declare -A conv\n  conv[A]=A\n  conv[C]=C\n  conv[G]=G\n  conv[T]=T\n  conv[R]=[GA]\n  conv[Y]=[CT]\n  conv[M]=[AC]\n  conv[K]=[GT]\n  conv[S]=[GC]\n  conv[W]=[AT]\n  conv[B]=[CGT]\n  conv[D]=[AGT]\n  conv[H]=[ACT]\n  conv[V]=[ACG]\n  conv[N]=[ACGT]\n\n  base=\"$1\" \n  sec=$(tr -d \"\n\" <<< \"${2^^*}\")\n  label=\"$3\"\n  secL=${#sec}\n  \n  genraw=$(echo `grep \"$label\" <<< \"$base\" | grep -o [[:upper:]]*[[:space:]]\"\\?\"$`)\n  genraw=`grep -o \"^[[:upper:]]*\" <<< $genraw`\n  test -z $genraw && echo \"This query name does not exist in given Base\" && exit 0\n  genrawL=${#genraw}\n\n  genpattern=$genraw\n  for c in $(fold -w 1 <<< ${genraw[@]}); do\n    genpattern=`sed s\/$c\/${conv[$c]}\/ <<< $genpattern`\n  done\n\n  local pos\n  local i=0\n  match=true\n  tail=$sec\n  tailL=$secL\n  while $match; do\n    tail=${tail#*$genpattern}\n    tailLnew=${#tail}\n    if [ $tailLnew -eq $tailL ]; then \n      match=false; \n    else\n      pos[i++]=$((secL-tailLnew-genrawL+1))\n      tailL=$tailLnew\n    fi\n  done \n  \n  [ -z $pos ] && echo \"$label is not in given string\"\n  echo ${pos[@]}\n}\nget_pos \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338051,"user_id":null,"body":"#!\/bin\/bash\nget_pos() {\n  head=\"${1%$3 *}\"\n  if [ ${#1} == ${#head} ]\n  then echo This query name does not exist in given Base\n  else\n    reg=\"s\/R\/[GA]\/g;s\/Y\/[CT]\/g;s\/M\/[AC]\/g;s\/K\/[GT]\/g;s\/S\/[GC]\/g;s\/W\/[AT]\/g;\"\n    reg+=\"s\/B\/[CGT]\/g;s\/D\/[AGT]\/g;s\/H\/[ACT]\/g;s\/V\/[ACG]\/g;s\/N\/[ACGT]\/g\"\n    val=${1#*$3 } val=${val%%$'\n'*} val=${val\/*)} val=${val\/\/ }\n    pad=\"12345678901234567\" pad=${pad:0:${#val}}\n    str=${2^^} str=${str\/\/$'\n'}\n    awk <<< $str -v v=`sed <<< $val $reg` -v q=$3 -v p=$pad '{\n      do { i=match($0, v); if (i) { s=s i\" \"; sub(v, p, $0) } } while (i)\n      if (s!=\"\") print s; else print q\" is not in given string\"\n    }'\n  fi\n}\nget_pos \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338052,"user_id":null,"body":"#!\/bin\/bash\nget_pos() {\n  head=\"${1%$3 *}\"\n  if [ ${#1} == ${#head} ]\n  then echo This query name does not exist in given Base\n  else\n    reg=\"s\/R\/[GA]\/g;s\/Y\/[CT]\/g;s\/M\/[AC]\/g;s\/K\/[GT]\/g;s\/S\/[GC]\/g;s\/W\/[AT]\/g;\"\n    reg+=\"s\/B\/[CGT]\/g;s\/D\/[AGT]\/g;s\/H\/[ACT]\/g;s\/V\/[ACG]\/g;s\/N\/[ACGT]\/g\"\n    val=${1#*$3 } val=${val%%$'\n'*} val=${val\/*)} val=${val\/\/ }\n    pad=\"12345678901234567\" pad=${pad:0:${#val}}\n    str=${2^^} str=${str\/\/$'\n'}\n    awk <<< $str -v v=`sed <<< $val $reg` -v q=$3 -v p=$pad '{\n      do { i=match($0, v); if (i) { s=s i\" \"; sub(v, p, $0) } } while (i>0)\n      if (s!=\"\") print s; else print q\" is not in given string\"\n    }'\n  fi\n}\nget_pos \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338053,"user_id":null,"body":"#!\/bin\/bash\nget_pos() {\n  head=\"${1%$3 *}\"\n  if [ ${#1} == ${#head} ]\n  then echo This query name does not exist in given Base\n  else\n    reg=\"s\/R\/[GA]\/g;s\/Y\/[CT]\/g;s\/M\/[AC]\/g;s\/K\/[GT]\/g;s\/S\/[GC]\/g;s\/W\/[AT]\/g;\"\n    reg+=\"s\/B\/[CGT]\/g;s\/D\/[AGT]\/g;s\/H\/[ACT]\/g;s\/V\/[ACG]\/g;s\/N\/[ACGT]\/g\"\n    val=${1#*$3 } val=${val%%$'\n'*} val=${val\/*)} val=${val\/\/ }\n    pad=\"12345678901234567\" pad=${pad:0:${#val}}\n    str=${2^^} str=${str\/\/$'\n'}\n    echo $str | awk -v v=`echo $val | sed $reg` -v q=$3 -v p=$pad '{\n      do { i=match($0, v); if (i) { s=s i\" \"; sub(v, p, $0) } } while (i>0)\n      if (s!=\"\") print s; else print q\" is not in given string\"\n    }'\n  fi\n}\nget_pos \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338054,"user_id":null,"body":"#!\/bin\/bash\nget_pos() {\n  head=\"${1%$3*}\"\n  if [ ${#1} == ${#head} ]\n  then echo This query name does not exist in given Base\n  else\n    reg=\"s\/R\/[GA]\/g;s\/Y\/[CT]\/g;s\/M\/[AC]\/g;s\/K\/[GT]\/g;s\/S\/[GC]\/g;s\/W\/[AT]\/g;\"\n    reg+=\"s\/B\/[CGT]\/g;s\/D\/[AGT]\/g;s\/H\/[ACT]\/g;s\/V\/[ACG]\/g;s\/N\/[ACGT]\/g\"\n    val=${1#*$3} val=${val%%$'\n'*} val=${val\/*)} val=${val\/\/ }\n    pad=\"12345678901234567\" pad=${pad:0:${#val}}\n    str=${2^^} str=${str\/\/$'\n'}\n    echo $str | awk -v v=\"`echo $val | sed $reg`\" -v q=$3 -v p=$pad '{\n      do {\n        i=match($0, v)\n        if (i>0) { s=s i\" \"; sub(v, p, $0) }  \n      } while (i>0)\n      if (s!=\"\") print s; else print q\" is not in given string\"\n    }'\n  fi\n}\nget_pos \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338055,"user_id":null,"body":"#!\/bin\/bash\nget_pos() {\n  head=\"${1%$3*}\"\n  if [ ${#1} == ${#head} ]\n  then echo This query name does not exist in given Base\n  else\n    reg=\"s\/R\/[GA]\/g;s\/Y\/[CT]\/g;s\/M\/[AC]\/g;s\/K\/[GT]\/g;s\/S\/[GC]\/g;s\/W\/[AT]\/g;\"\n    reg+=\"s\/B\/[CGT]\/g;s\/D\/[AGT]\/g;s\/H\/[ACT]\/g;s\/V\/[ACG]\/g;s\/N\/[ACGT]\/g\"\n    val=${1#*$3} val=${val%%$'\n'*} val=${val\/*)} val=${val\/\/ }\n    pad=\"12345678901234567\" pad=${pad:0:${#val}}\n    str=${2^^} str=${str\/\/$'\n'}\n    if [ $3 == BbvI ]; then echo $val; echo \"`echo $val | sed $reg`\"; fi\n    echo $str | awk -v v=\"`echo $val | sed $reg`\" -v q=$3 -v st=$pad '{\n      do {\n        i=match($0, v)\n        if (i>0) { p=p i\" \"; sub(v, st, $0) }  \n      } while (i>0)\n      if (p!=\"\") print p; else print q\" is not in given string\"\n    }'\n  fi\n}\nget_pos \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338056,"user_id":null,"body":"#!\/bin\/bash\nget_pos() {\n  head=\"${1%$3*}\"\n  if [ ${#1} == ${#head} ]\n  then echo This query name does not exist in given Base\n  else\n    reg=\"s\/R\/[GA]\/g;s\/Y\/[CT]\/g;s\/M\/[AC]\/g;s\/K\/[GT]\/g;s\/S\/[GC]\/g;s\/W\/[AT]\/g;\"\n    reg+=\"s\/B\/[CGT]\/g;s\/D\/[AGT]\/g;s\/H\/[ACT]\/g;s\/V\/[ACG]\/g;s\/N\/[ACGT]\/g\"\n    val=${1#*$3} val=${val%%$'\n'*} val=${val#*) *} val=${val\/\/ }\n    pad=\"12345678901234567\" pad=${pad:0:${#val}}\n    str=${2^^} str=${str\/\/$'\n'}\n    val=\"`echo $val | sed $reg`\"\n    echo $str | awk -v v=$val -v q=$3 -v st=$pad '{\n      s=$0\n      do {\n        i=match(s, v)\n        if (i>0) { p=p i\" \"; sub(v, st, s) }  \n      } while (i>0)\n      if (p!=\"\") print p; else print q\" is not in given string\"\n    }'\n  fi\n}\nget_pos \"$1\" \"$2\" \"$3\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338057,"user_id":null,"body":"#!\/bin\/bash\nget_pos () {\n  declare -A base\n  str=$(tr [a-z] [A-Z] <<< $2 | tr -d \"\n\")\n \n  IFS=\"\n\"\n  inBase=false\n  for i in $1; do\n    [ \"$i\" == \"<>\" ] && { inBase=true ; continue ; }\n    ! $inBase && continue\n    base[$(awk {'print $1'} <<< $i)]=$(awk {'print $NF'} <<< $i \\\n    | sed s\/\"R\"\/\"\\[GA\\]\"\/g \\\n    | sed s\/\"Y\"\/\"\\[CT\\]\"\/g \\\n    | sed s\/\"M\"\/\"\\[AC\\]\"\/g \\\n    | sed s\/\"K\"\/\"\\[GT\\]\"\/g \\\n    | sed s\/\"S\"\/\"\\[GC\\]\"\/g \\\n    | sed s\/\"W\"\/\"\\[AT\\]\"\/g \\\n    | sed s\/\"B\"\/\"\\[CGT\\]\"\/g \\\n    | sed s\/\"D\"\/\"\\[AGT\\]\"\/g \\\n    | sed s\/\"H\"\/\"\\[ACT\\]\"\/g \\\n    | sed s\/\"V\"\/\"\\[ACG\\]\"\/g \\\n    | sed s\/\"N\"\/\"\\[ACGT\\]\"\/g \\\n    )\n  done\n  \n  [ -z \"${base[$3]}\" ] && { echo \"This query name does not exist in given Base\" ; exit ; }\n  egrep -q \"${base[$3]}\" <<< \"$str\" || { echo \"$3 is not in given string\" ; exit ; }\n  for i in $(egrep -bo ${base[$3]} <<< \"$str\" | awk -F\":\" {'print $1'}); do\n    echo -n \"$(((i+1))) \"\n  done\n}\nget_pos \"$1\" \"$2\" \"$3\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59f44c7bd4b36946fd000052":[{"id":338058,"user_id":null,"body":"#!\/bin\/bash\nhist () {\n  grep -o \"[uwxz]\" <<< \"$1\" | sort | uniq -c |\n  awk '{ s=\"\"; for(i=0; i<$1; i++) s=s\"*\"; printf \"%-2s%-d %s\\r\", $2, $1, s }'\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338059,"user_id":null,"body":"#!\/bin\/bash\nstar=*********************************** star+=$star\ndeclare -A cnt=()\nfor (( i = 0, n = ${#1}; i < n; ++i )); do\n    (( 'cnt[${1:i:1}]++' ))\ndone\nfor c in u w x z; do\n    (( 'cnt[$c]' > 0 )) || continue\n    printf '%s%s %d %s' \"$sep\" \"$c\" \"${cnt[$c]}\" \"${star:0:cnt[$c]}\"\n    sep=$'\\r'\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338060,"user_id":492,"body":"#!\/bin\/bash\naux='\nsub aux {\n    my $s = shift; my @base=(\"w\", \"x\", \"z\", \"u\"); my %count;\n    foreach my $b (@base) {\n        while($s =~ \/$b\/g) { $count{$b}++ }\n    }\n    my @keys = sort { $a cmp $b } keys %count;\n    my $res = \"\";\n    foreach my $key ( @keys ) {\n        my $val = $count{$key};\n        $res .= sprintf(\"%-2s %-6s\", $key, $val).(\"*\" x $val).\"\\r\";\n    }\n    return substr($res, 0, -1);\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\nhist () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338061,"user_id":null,"body":"#!\/bin\/bash\n\nfunction hist () {\n  s=$1\n  res=\"\"\n  letters=('u' 'w' 'x' 'z')\n  for letter in \"${letters[@]}\"; do\n    num=$(grep -o \"$letter\" <<<\"$s\" | wc -l)\n    if [ \"$num\" -gt 0 ]; then\n      stars=$(eval \"printf *%.0s {1..$num}\")\n      string=$(printf \"%c %-1d %s\\r\" \"$letter\" \"$num\", \"$stars\")\n      res+=\"$string\"\n    fi\n  done\n  echo \"$res\" | cut -c1-\"$(${#res} - 1)\"\n}\n\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338062,"user_id":null,"body":"#!\/bin\/bash\nhist () {\n   r=\"\"\n\terror=\"u w x z\"\n\tn=0\n\tax=\"\"\n\tfor e in $error;\n\tdo\n\t\tif [[ \"$1\" =~ \"$e\" ]]; then\n\t\t\tr+=\"$e \"\n\n\t\t\tfor (( i = 0; i < ${#1}; i++ )); do\n\t\t\t\tc=${1:$i:1}\n\t\t\t\tif [ \"$e\" = \"$c\" ];then\n\t\t\t\t\tn=$((n+1))\n\t\t\t\t\tax+=\"*\"\n\t\t\t\tfi\n\t\t\tdone\n\n\t\t\tr+=\"$n $ax\\r\"\n\t\t\tn=0\n\t\t\tax=\"\"\n\t\tfi\n\tdone\n\n\techo -en \"${r%\\\\r*}\"\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338063,"user_id":null,"body":"#!\/bin\/bash\n\nformat () {\n  local ch=\"$2\"\n  local str=\"${1\/\/[^$ch]}\"\n  local len=${#str}\n  if ((len > 0)); then\n    echo -n \"$ch $len $(printf \"*%.s\" $(seq 1 $len))\"$'\\r'\n  fi\n}\n\nhist () {\n    # your code\n  for x in u w x z; do\n    format \"$1\" $x\n  done\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338064,"user_id":null,"body":"#!\/bin\/bash\nu=`echo $1 | sed 's\/[^u]\/\/g'`\nw=`echo $1 | sed 's\/[^w]\/\/g'`\nx=`echo $1 | sed 's\/[^x]\/\/g'`\nz=`echo $1 | sed 's\/[^z]\/\/g'`\n\nu1=`echo ${#u}`\nu2=`printf $u1`\nu3=`printf %q \"$u\" | sed 's\/u\/7*\/g'`\n\nif [ $u1 != 0 ]; then\nt=`echo $u3 | sed 's\/7\/\/g'`\nprintf \"u $u2 $t\"\nprintf \"\\r\"\nfi\n\nw1=`echo ${#w}`\nw2=`printf $w1`\nw3=`printf %q \"$w\" | sed 's\/w\/7*\/g'`\n\nif [ $w1 != 0 ]; then\nt=`echo $w3 | sed 's\/7\/\/g'`\nprintf \"w $w2 $t\"\nprintf \"\\r\"\nfi\n\nx1=`echo ${#x}`\nx2=`printf $x1`\nx3=`printf %q \"$x\" | sed 's\/x\/7*\/g'`\n\nif [ $x1 != 0 ]; then\nt=`echo $x3 | sed 's\/7\/\/g'`\nprintf \"x $x2 $t\"\nprintf \"\\r\"\nfi\n\nz1=`echo ${#z}`\nz2=`printf $z1`\nz3=`printf %q \"$z\" | sed 's\/z\/7*\/g'`\n\nif [ $z1 != 0 ]; then\nt=`echo $z3 | sed 's\/7\/\/g'`\nprintf \"z $z2 $t\"\nprintf \"\\r\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338065,"user_id":null,"body":"#!\/bin\/bash\nhist () {\n  echo \"$1\" \\\n  | sed 's\/.\/&\n\/g' \\\n  | sort \\\n  | uniq -c \\\n  | sed -rn '\/u|w|x|z\/p' \\\n  | awk '{\n    stars=sprintf(\"%*s\", $1, \"\")\n    gsub(\/ \/, \"*\",stars)\n\t  print \"\\r\"$2, $1, stars\n\t}' \\\n  | sed 's\/\\\\ru\/u\/' \\\n  | tr -d '\n'\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338066,"user_id":null,"body":"#!\/bin\/bash\n\nfunction stars () {\n    n=$1;\n    s=\"\";\n    for (( i=0; i<$n; i++ )); do\n        s=$s\"*\";\n    done;\n    echo $s;\n}\n\nfunction hist () {\n    str=$1\n    local u=$(echo $str | grep -o u | wc -l);\n    local w=$(echo $str | grep -o w | wc -l);\n    local x=$(echo $str | grep -o x | wc -l);\n    local z=$(echo $str | grep -o z | wc -l);\n    [[ $u -ne 0 ]] && echo -n -e \"u \"$u\" \"$(stars \"$u\" )\"\\r\"\n    [[ $w -ne 0 ]] && echo -n -e \"w \"$w\" \"$(stars \"$w\" )\"\\r\"\n    [[ $x -ne 0 ]] && echo -n -e \"x \"$x\" \"$(stars \"$x\" )\"\\r\"\n    [[ $z -ne 0 ]] && echo -n -e \"z \"$z\" \"$(stars \"$z\" )\"\\r\"\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338067,"user_id":null,"body":"#!\/bin\/bash\nhist () {\n    # your code\n    str=$1;\n    length=${#str}\n    i=0;\n    errors=();\n    errors[0]=0;\n    errors[1]=0;\n    errors[2]=0;\n    errors[3]=0;\n    while [ $i -lt $length ];\n    do\n      curr=${str:$i:1}\n      if [[ $curr == \"u\" ]];\n      then\n        let errors[0]++;\n      elif [[ $curr == \"w\" ]]; then\n        let errors[1]++;\n      elif [[ $curr == \"x\" ]]; then\n        let errors[2]++;\n      elif [[ $curr == \"z\" ]]; then\n        let errors[3]++;\n      fi\n      \n      let i++;\n    done\n    \n    i=0;\n    error_letters=( 'u' 'w'  'x' 'z' ) \n    res=\"\"\n    while [ $i -lt 4 ];\n    do\n      count=${errors[$i]}\n      if [ $count -gt 0 ];\n      then\n        starts=$(for j in `seq $count`; do echo -n \"*\"; done)\n        letter=${error_letters[$i]}\n        temp=\"`echo $letter $count $starts`\"\n        if [[ -z $res ]];\n        then\n          res=\"$temp\"\n        else\n          res=\"$res\\r$temp\"\n        fi\n      fi\n      let i++;\n    done\n    \n    echo -e $res\n}\nhist \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59f4a0acbee84576800000af":[{"id":338068,"user_id":null,"body":"#!\/bin\/bash\n\npos_average() {\n    POS=0\n    IFS=', ' read -a INPS <<< \"$1\"\n    LEN=${#INPS[0]}\n    LIMJ=${#INPS[@]}\n    LIM=$((LIMJ - 1))\n    for (( i=0; i < $LIM; i++ )); do\n        STRI=${INPS[$i]}\n        for (( j=i+1; j < $LIMJ; j++ )); do\n            STRJ=${INPS[$j]}\n            for (( n=0; n < $LEN; n++ )); do\n                if [ ${STRI:$n:1} = ${STRJ:$n:1} ]; then\n                    POS=$(($POS+1))\n                fi\n            done\n        done\n    done\n    printf \"%.10lf\" `echo \"100 * $POS \/ (($LIM+1)*$LEN*$LIM\/2)\" | bc -l`\n}\n\npos_average \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338069,"user_id":null,"body":"#!\/bin\/bash\n\npos_average () {\n    commonPosNb=0 comb=0\n    IFS=\", \" data=($1)\n    stringSize=${data[0]}\n    \n    for ((i=0 ; i < ${#data[*]}; i++)); do\n      for ((j=$i+1 ; j < ${#data[*]}; j++)); do\n        ((comb++))\n        for ((k=0 ; k<${#stringSize} ; k++)); do\n          a=${data[$i]}; b=${data[$j]}\n          [ ${a:$k:1} == ${b:$k:1} ] && ((commonPosNb++))\n        done\n      done\n    done\n    \n    bc <<< \"scale=12 ; $commonPosNb \/ ($comb * ${#stringSize}) * 100\"\n}\npos_average \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338070,"user_id":null,"body":"#!\/bin\/bash\n\npos_average() {\n  awk -v s=\"$1\" 'BEGIN {\n    gsub(\",\", \"\", s)\n    n=split(s, res, \" \")\n    similar=0\n    combn=0\n    for (i=1; i<n; i++) {\n      for (j=i+1; j<=n; j++) {\n        pair=0\n        for (k=1; k<=length(res[i]); k++) {\n          if (substr(res[i], k, 1) == substr(res[j], k, 1)) pair++\n        }\n        combn++\n        similar += pair\n      }\n    }\n    printf \"%.10f\n\", similar \/ (combn * length(res[1])) * 100\n  }'\n}\n\npos_average \"$1\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338071,"user_id":492,"body":"#!\/bin\/bash\naux='\nsub pair_percentage {\n    my ($string1, $string2) = @_; my ($length) = length($string1); my ($count) = 0;\n    for (my $position = 0; $position < $length ; ++$position) {\n        if (substr($string1, $position, 1) eq substr($string2, $position, 1)) {\n            ++$count;\n        }\n    }\n    return $count \/ $length;\n}\nsub aux {\n    my $s = shift;\n    my @strings = split \/, \/, $s;\n    my $percent; my @percentages; my $result;\n    for (my $k = 0 ; $k < scalar @strings - 1 ; ++$k) {\n        for (my $i = ($k + 1) ; $i < scalar @strings ; ++$i) {\n            $percent = pair_percentage($strings[$k], $strings[$i]);\n            push(@percentages, $percent);\n        }\n    }\n    $result = 0;\n    foreach $percent (@percentages) {\n        $result += $percent;\n    }\n    $result = $result \/ scalar(@percentages);\n    my $r = sprintf(\"%.10f\", $result * 100);\n    return $r;\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\npos_average () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\npos_average \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338072,"user_id":null,"body":"#!\/bin\/bash\nop_combos () {\n  awk '{printf \"(%d * (%d - 1) \/ 2)\n\",$1,$1}'\n}\npos_average () {\n  strings=$(echo \"${1\/\/ \/}\" | tr ',' '\n')\n  stats=( $(echo \"${strings}\" | awk '(l!=length){n+=1}{l=length}END{print NR,l,n}') )\n  nb_str=${stats[0]}; len=${stats[1]}; nb_len=${stats[2]}\n  \n  # if not enough strings or if a string has bad length\n  ((nb_str < 2 || nb_len > 1)) && exit 1\n  \n  op_commons=$(\n    for i in $(seq 1 ${len}); do\n      echo \"${strings}\" | cut -c${i} | sort | uniq -dc | op_combos\n    done | paste -sd'+'\n  )\n  op_total=$(echo ${nb_str} | op_combos)\n  \n  bc <<< \"scale=10; (${op_commons}) * 100 \/ (${op_total} * ${len})\"\n}\npos_average \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338073,"user_id":null,"body":"#!\/bin\/bash\npos_average () {\n    IFS=\",\" read -r -a strings <<< \"${1\/\/ \/}\"\n    \n    nb_str=${#strings[@]}\n    ((nb_str < 2)) && exit 1\n    \n    len=$(echo \"${strings[0]}\" | awk '{print length}')\n    nb_combos=$(( nb_str * (nb_str - 1) \/ 2 ))\n    \n    op_commons=$(\n      for i in $(seq 1 ${len}); do\n        printf \"%s\n\" \"${strings[@]}\" | cut -c${i} | sort | uniq -dc | awk '{printf \"(%d * (%d - 1) \/ 2)\n\",$1,$1}'\n      done | paste -sd'+'\n    )\n    \n    bc <<< \"scale=10; (${op_commons}) * 100 \/ (${nb_combos} * ${len})\"\n}\npos_average \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338074,"user_id":53,"body":"#!\/bin\/bash\ns=$1\nb=\",\"\nawk -v s=\"$s\" -v b=\"$b\" 'BEGIN {\n  hit = 0\n  size = length(s)\n  m = index(s, b) - 1\n  n = (size + 2) \/ (m + 2)\n  tot = m * n * (n - 1) \/ 2\n  for (i=0; i<size-m-2; i+=(m+2)) {\n    for (j=i+m+2; j<size; j+=(m+2)) {\n      for (k=0; k<m; k++) {\n        if (substr(s, i+k+1, 1) == substr(s, j+k+1, 1)) {\n          hit = hit+1\n        }\n      }\n    }\n  }\n  ans = 100 * hit \/ tot\n  printf \"%.10f\", ans\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338075,"user_id":null,"body":"#!\/bin\/bash\npos_average () {\n    counter=0; total=0\n    IFS=', ' read -r -a arr <<< \"$1\"\n    for ((i=0;i<${#arr[@]};i++)); do test1=${arr[$i]}\n        for ((j=i+1;j<${#arr[@]};j++)); do test2=${arr[$j]}\n            for ((q=0;q<${#test1};q++)); do ((total++))\n                if [[ ${test1:q:1} == ${test2:q:1} ]]; then ((counter++)); fi\n            done\n        done\n    done\n    echo $counter \/ $total * 100 | bc -l\n}\n\npos_average \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338076,"user_id":null,"body":"#!\/bin\/bash\npos_average() {\n\tlocal ins tmp out ilen slen\n\tins=(${1\/\/,\/})\n\tilen=${#ins[0]}\n\tslen=${#ins[@]}\n\tfor ((i = 0; i < slen; i++)); do\n\t\tfor ((j = i + 1; j < slen; j++)); do\n\t\t\tfor ((k = 0; k < ilen; k++)); do\n\t\t\t\tif ((${ins[i]:k:1} == ${ins[j]:k:1})); then\n\t\t\t\t\tout=$((${out:-0} + 1))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\tbc -l <<<\"out=$out\/$ilen; ro=out\/($slen*($slen-1)\/2)*100; scale=10; r=10^scale; (ro*r+0.5)\/r\"\n}\npos_average \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338077,"user_id":null,"body":"#!\/bin\/bash\npos_average () {\n    # your code\n    local -a arr=($(echo $1|sed -e 's\/,\/\/g'))\n    local -i len=${#arr[@]}\n    for((i=0;i<len;i++));\n    do\n      for((j=i+1;j<len;j++));\n      do\n        echo \"${arr[i]} ${arr[j]}\"\n      done\n    done | awk '\n{\n  split($1,a,\"\");\n  split($2,b,\"\");\n  len=length($1)\n  sum=sum+len\n  for(i=1;i<=len;i++) {\n    if(a[i]==b[i]) counter=counter+1\n  }\n}    \nEND {\n   print \"scale=10;\",counter,\"*100\/\",sum\n}\n' | bc\n}\npos_average \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a023c426975981341000014":[{"id":338078,"user_id":645,"body":"echo \"$((180 - $1 - $2))\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338079,"user_id":null,"body":"a=$1\nb=$2\necho $((180-a-b))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338080,"user_id":1045,"body":"echo \"180-$1-$2\" | bc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338081,"user_id":null,"body":"a=$1\nb=$2\necho $((180 - $a - $b))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338082,"user_id":null,"body":"a=$1\nb=$2\nc=0\nif [[ a -ge 0 && b -ge 0 ]]; then\n    c=$((180-(a+b)))\n    echo $c\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338083,"user_id":null,"body":"a=$1\nb=$2\n# your code here\ntotal=180\nc=$[ $total - ($a + $b) ]\necho $c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338084,"user_id":null,"body":"a=$1\nb=$2\necho \"180 - $a - $b\" | bc\n# your code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338085,"user_id":null,"body":"a=$1\nb=$2\n# your code here\n[[ $a && $b =~ ^[0-9]+$ ]]  \\\n  && echo $(( 180-a-b )) \\\n  || (echo \"not a positive integer\" && exit 1)\n  ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338086,"user_id":null,"body":"a=$1\nb=$2\n\necho $((180-$b-$a))\n# your code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338087,"user_id":null,"body":"a=$1\nb=$2\nc=$((180-a-b))\necho $c","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a02cf76c9fc0ee71d0000d5":[{"id":338088,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\ndefine_bernoulli='\ndefine bernoulli(m) {\n\tauto an, bm, cnk, k, n\n\tbm = 0\n\tfor (n = 1; n <= m; n++) {\n\t\tan = 0\n\t\tcnk = 1\n\t\tfor (k = 1; k <= n; k++) {\n\t\t\tcnk = cnk * (k - 1 - n) \/ k\n\t\t\tan = an + cnk * (k^m)\n\t\t}\n\t\tbm = bm + an \/ (n + 1)\n\t}\n\treturn bm\n}\n'\n\nk_odd () {\nbc -l <<BC\nk = $1\nnb = $2\nsum = 0\nfor (n = 1; n <= nb; n++)\n\tsum += 1 \/ n^k\nsum\nBC\n}\n\nk_even () {\nbc -l <<BC\nk = $1\npi = 4 * a(1)\n$define_bernoulli\n\ndefine factorial(n) {\n\tif (n == 0)\n\t\treturn 1\n\treturn n * factorial(n - 1)\n}\n\ndefine abs(x) {\n\tif (x < 0)\n\t\treturn -x\n\treturn x\n}\n\nabs(bernoulli(k)) * (2 * pi) ^ k \/ 2 \/ factorial(k)\nBC\n}\n\nk_negative () {\nbc -l <<BC\nk = $1\n$define_bernoulli\n\n(-1)^(-k) * bernoulli(1 - k) \/ (1 - k)\nBC\n}\n\nk=$1\nnb=$2\nif ((k > 1)); then\n\tif ((k % 2 != 0)); then\n\t\tk_odd \"$k\" \"$nb\"\n\telse\n\t\tk_even \"$k\"\n\tfi\nelse\n\tk_negative \"$k\"\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338089,"user_id":null,"body":"#!\/bin\/bash\nbern() {\n  if (($1==1))\n  then echo -0.5\n  elif (($1%2==1)) \n  then echo 0\n  else\n    b[1]=-0.5\n    for ((i=2; i<=$1; i++))\n    do \n      r=-1\n      for ((j=1; j<i; j++))\n      do \n        r=`bc <<< \"k=1; for (l=1; l<=$j; l++) k=k*($i+1+l-$j)\/l; $r-k*${b[j]}\"`\n      done\n      b[i]=`bc <<< \"scale=18; $r\/($i+1)\"`\n    done\n    echo ${b[$1]}\n  fi\n}\nseries() {\n  if (($1>2 && $1%2==1))\n  then \n    bc <<< \"scale=18; f=0; for(i=1; i<$2; i++) f+=1\/(i^$1); f\" \n  elif (($1>1 && $1%2==0))\n  then \n    b=`bern $1` b=${b#-}\n    bc -l <<< \"scale=18; pi=8*a(1); f=$b\/2; for(i=1; i<=$1; i++) f*=pi\/i; f\" \n  else\n    k=${1#-} b=`bern $k+1` \n    bc <<< \"scale=18; $b\/(-$k-1)\"\n  fi\n}\nseries \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338090,"user_id":null,"body":"#!\/bin\/bash\nbern() {\n  if (($1==1))\n  then echo -0.5\n  elif (($1%2==1)) \n  then echo 0\n  else\n    b[1]=-0.5\n    for ((i=2; i<=$1; i+=1))\n    do \n      r=-1\n      for ((j=1; j<i; j+=1))\n      do \n        r=`bc <<< \"k=1; for (l=1; l<=$j; l++) k=k*($i+1+l-$j)\/l; $r-k*${b[j]}\"`\n      done\n      b[i]=`bc <<< \"scale=18; $r\/($i+1)\"`\n    done\n    echo ${b[$1]}\n  fi\n}\nseries() {\n  if (($1>2 && $1%2==1))\n  then \n    bc <<< \"f=0; scale=18; for(i=1; i<$2; i++) f+=1\/(i^$1); f\" \n  elif (($1>1 && $1%2==0))\n  then \n    b=`bern $1` b=${b#-}\n    bc -l <<< \"scale=18; pi=8*a(1); f=$b\/2; for(i=1; i<=$1; i++) f*=pi\/i; f\" \n  else\n    k=${1#-} b=`bern $k+1` \n    bc <<< \"scale=18; $b\/(-$k-1)\"\n  fi\n}\nseries \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338091,"user_id":503,"body":"perl -e '\nuse Math::BigRat;\n\n$K = '$1';\n$N = '$2';\n\nsub B {\n\t$Q = $_[0];\n\tif (1 & $Q) { return Math::BigRat->new(2 < $Q ? 0 : -.5) }\n\t$Q >>= 1;\n\t$R = 1;\n\t@B = (1);\n\tfor (;$#B < $Q;) {\n\t\t$N = 3 + 2 * $#B;\n\t\t$S = Math::BigRat->new(2 - $N) \/ 2;\n\t\t$C = Math::BigRat->new($N * ($N - 1)) \/ 2;\n\t\t$K = 2;\n\t\tfor (;$N < $C;) {\n\t\t\tif (0 == $K % 2) { $S += $C * Math::BigRat->new($B[$K \/ 2]) }\n\t\t\t$C = $C * (1 + $N - ++$K) \/ $K\n\t\t}\n\t\tpush @B,-$S \/ $N\n\t}\n\treturn pop @B\n}\n\nif ($K < 0) {\n\t$K = 1 - $K;\n\t$R = 1 & $K ? Math::BigRat->new(0) : B($K) \/ -$K;\n} elsif (1 & $K) {\n\t$R = 0;\n\tfor ($F = 0;$F++ < $N;) { $R += 1 \/ $F ** $K }\n\tprint $R;\n\texit\n} else {\n\t$R = abs(B($K)) \/ 2;\n\tfor ($F = 1;$F++ < $K;) { $R \/= $F }\n\t$R *= 6.283185307179586 ** $K\n}\nprint $R->as_float()\n'\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338092,"user_id":492,"body":"#!\/bin\/bash\naux='\nuse strict;\nuse warnings;\nuse Math::BigRat;\nsub factorial {\n    my ($n, $res) = (shift, 1);\n    return undef unless $n >= 0 and $n == int($n);\n    $res *= $n-- while $n > 1;\n    return $res;\n}\nsub bernoulli {\n    my $n = shift;\n    return \"-1\/2\" if $n == 1;\n    return \"0\"    if $n % 2;\n    my $one = Math::BigRat->new(1);\n    my @a;\n    my $m;\n    for $m ( 0 .. $n ) {\n        push @a, $one \/ ($m + 1);\n        for my $j ( reverse 1 .. $m ) {\n            ( $a[$j-1] -= $a[$j] ) *= $j;\n        }\n    }\n    return $a[0]->numify();\n}\nsub s_iterative {\n    my ($n, $terms) = @_;\n    my ($i, $result);\n    for ($i = 1; $i <= $terms; $i++) {\n        $result += 1 \/ ($i ** $n);\n    }\n    return $result;\n}\nuse constant pi => 3.14159265358979;\nsub aux {\n    my $n = int(shift); my $nb = int(shift);\n    if ($n >= 0) {\n        if ($n == 0) { return -0.5; }\n        if ($n == 1) { return undef; }\n        if ($n % 2) {\n            return s_iterative($n, $nb);\n        } else {\n            return .5 * abs(bernoulli($n)) * ((2*pi) ** $n) \/ factorial($n);\n        }\n    } else {\n        return ((-1) ** (-$n)) * bernoulli(-$n + 1) \/ (-$n + 1);\n    }\n}\n$a=aux($ARGV[0], $ARGV[1]);\nprint $a;\n'\nseries () {\n    echo `perl -e \"$aux\" -- \"$1\" \"$2\" --`\n}\nseries \"$1\" \"$2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a03b3f6a1c9040084001765":[{"id":338093,"user_id":null,"body":"n=$1\necho $(((n - 2) * 180))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338094,"user_id":76,"body":"echo \"($1 - 2) * 180\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338095,"user_id":null,"body":"# Find the total sum of internal angles in a n-sided simple polygon.\n\nn=$1\n\nif (( $# > 1 )); then echo \"Run the script with only 1 parameter.\"; exit 1; fi;\nif ! [[ $n =~ ^[0-9]+$ ]]; then echo \"As a parameter give valid number of sides.\"; exit 1; fi;\nif (( $n < 3 )); then echo \"Polygon must have at least 3 sides.\"; exit 1; fi;\n\n# Total sum of internal angles:\necho $(( ($n - 2) * 180 ))\n\nexit 0","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338096,"user_id":null,"body":"n=$1\n\nfunction calculate_interior_angles {\n  n=$1\n  echo $((  180 * ($n -2) ))\n}\n\ncalculate_interior_angles $n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338097,"user_id":null,"body":"#!bin\/bash\nn=$1\ntotal=$((((((2*$n))-4))*90))\necho $total","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338098,"user_id":null,"body":"n=$1\necho $(((n-2)*180)) # your code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338099,"user_id":645,"body":"echo $((($1 - 2) * 180))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338100,"user_id":null,"body":"n=$1\necho \"$n * (180 - (360 \/ $n))\" | bc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338101,"user_id":null,"body":"n=$1\nlet\tside_sum=\"(($n - 2) * 180)\"\necho $side_sum\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338102,"user_id":null,"body":"echo $(($1 * 2 * 90 - 360))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a045fee46d843effa000070":[{"id":338103,"user_id":492,"body":"#!\/bin\/bash\naux='\nuse strict;\nuse warnings;\nuse bigint;\nsub sieve {\n  my($n) = @_;\n  return @{([],[],[2],[2,3],[2,3])[$n]} if $n <= 4;\n  my @composite;\n  for (my $t = 3;  $t*$t <= $n;  $t += 2) {\n     if (!$composite[$t]) {\n        for (my $s = $t*$t;  $s <= $n;  $s += $t*2)\n           { $composite[$s]++ }\n     }\n  }\n  my @primes = (2);\n  for (my $t = 3;  $t <= $n;  $t += 2) { \n     $composite[$t] || push @primes, $t;\n  }\n  @primes;\n}\nsub power {\n    my ($n, $p) = @_;\n    my $s = 0;\n    while ($n >= $p) {\n        $s += int($n \/= $p);\n    }\n    $s;\n}\nsub aux {\n    my ($n) = @_; my $p;\n    my @powers;\n    my @s = sieve($n);\n    foreach (@s) {\n        $p = power($n, $_);\n        if ($p == 1) {\n            push @powers, $_;\n        } else {\n            push @powers, \"$_^$p\";\n        }\n    }\n    @powers ? join(\" * \", @powers) : \"1\";\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\ndecomp () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\ndecomp \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338104,"user_id":null,"body":"#!\/bin\/bash\ndecomp () {\nbc <<<'\n  define isprime(x) {auto i\n    for(i=2; i <= sqrt(x); i++) {\n      if (x % i == 0) return 1\n    }\n  }\n  define exp() {\n    for(i=0; i<=m; i++) { sum=0\n      for(s=j[i]; s <= n; s*=j[i]) {\n        tmp=n\/s\n        if(!tmp) break\n        sum=sum+tmp\n      }\n      print j[i]\n      if(sum>1) print \"^\",sum\n      print \"\n\"\n    }\n  }\n  n='\"$1\"'; j[0]=2\n  for(i=3; i <= n; i+=2) {\n    if(!isprime(i)) j[++m]=i\n  }\n  o=exp()'\n}\ndecomp \"$1\" | paste -sd\\* | sed 's\/\\*\/ & \/g'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338105,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nset -eu -o pipefail\n\nfactor $(seq 2 \"$1\") \\\n\t| cut -d' ' -f2- \\\n\t| tr ' ' '\n' \\\n\t| sort -n \\\n\t| uniq -c \\\n\t| sed -E 's\/^[[:blank:]]*([[:digit:]]+)[[:blank:]]+([[:digit:]]+)$\/\\2^\\1\/' \\\n\t| sed -E 's\/\\^1$\/\/' \\\n\t| paste -s -d'*' - \\\n\t| sed 's\/\\*\/ * \/g'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338106,"user_id":null,"body":"#!\/bin\/bash\ndecomp () {\n  factor `seq $1` | cut -f2 -d: | xargs printf '%s\n' | sort -n | uniq -c | sed 's\/^\\s*\/\/;s\/^1 \\(.*\\)\/\\1\/;s\/^\\(.*\\) \\(.*\\)\/\\2^\\1\/' | xargs printf '%s * ' | sed 's\/ \\* $\/\n\/'\n}\ndecomp \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338107,"user_id":null,"body":"#!\/bin\/bash\ndecomp () {\n\nBC_LINE_LENGTH=0 bc << EOF | sed 's\/ \\* $\/\/'\nscale=0;\nprime[1]=2;\nprime[2]=3;\nprime[3]=5;\np=1;\nfor(i=2;i<=$1;i++) {\nisprime=1;\nn=i;\n\nwhile(n>1) {\n  sq=sqrt(n);\n  j=1;\n  for(;prime[j]<=sq;j++) {\n    pn=prime[j];\n    if(n%pn==0){\n      isprime=0;\n      res[pn]=res[pn]+1;\n      n=n\/pn;\n      break;\n    }\n  }\n  if(prime[j]>sq) {\n      res[n]=res[n]+1;\n      break;\n  }\n}\n\nif(isprime==1){\nprime[p]=i;\np=p+1;\nres[i]=1;\n}\n\n}\n\nfor(i=1;i<p;i++) {\npn=prime[i];\nif(res[pn]==1) print pn,\" * \";\nif(res[pn]>1) print pn,\"^\",res[pn],\" * \";\n}\nEOF\n}\ndecomp \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338108,"user_id":null,"body":"#!\/bin\/bash\n\n# for speed's sake, bc\n\nexport BC_LINE_LENGTH=0\n\nread -r -d '' bcprogram <<EOF\nn=$1\nprimes[0]=2\npmax=0\n\n\/* compute arity of 2 in n! *\/\npower=2\nwhile ( power <= n ) {\n        arity[0] += n \/ power\n        power *= 2\n}\n\n\/* find next prime *\/\nfor ( pp=3; pp <= n; pp+=2 ) {\n        next=0\n        for ( j=0; j<=pmax; j++ ) {\n                if ( pp % primes[j] == 0 ) { next=1; break }\n                \/* putative prime is not prime *\/\n                if ( primes[j]^2 > pp  ) break\n                \/* pp is prime *\/\n        }\n        if ( next ) continue\n        primes[++pmax]=pp\n        \/* and compute its arity in n! *\/\n        power=pp\n        while ( power <= n ) {\n                arity[pmax] += n \/ power\n                power *= pp\n        }\n}\n\n\/* output result *\/\nfor ( j=0; j<=pmax; j++ ) {  \n        if ( arity[j] >= 1 ) {\n                print \" * \", primes[j]\n                if ( arity[j] > 1 ) {\n                        print \"^\", arity[j]\n                }\n        }\n}\n\nhalt\nEOF\n\necho \"$bcprogram\" | bc |\nsed 's\/^ \\* \/\/'\n\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338109,"user_id":null,"body":"decomp () {\nread out < <(\nawk -vnum=$1 -F, '\n\nfunction initprimes(range) {\n\t# work out whats not a prime\n\t# by multiplying i=3..sqrt(range) with range\/i.\n\t# all loops, no branches makes the cpu happy,\n\tm=sqrt(range)\n\tl=3\n\tfor (i=1;i<=r;i=i+2) {\n\t\tprima[i]=0\n\t}\n\tfor (i=l;i<=m;i++) {\n\t\tfor (j=i;j<=range\/i;j++) {\n\t\t\tprima[i*j]=prima[i*j]+1\n\t\t}\n\t}\n\t# now consolidate prima into a regular list of primes.\n\tnprimes=1\n\tprime[0]=2\n\tfor (i=l;i<=range;i=i+2) {\n\t\tif (prima[i]==0){ prime[nprimes]=i; nprimes+=1 }\n\t}\n\tdelete prima\n}\n\nfunction unfactorial(x) {\n\t#lets save time and not calculate the factorial of the input.\n\t#instead, of it scaling up into never-never land, look at its \n\t#structure to deduce what the a full expansion would have shown.\n\tfor (i=0;i<nprimes;i++) {\n\t\t# get a prime to demarkate a zone\n\t\tp=prime[i]\n\t\t# now divide the input by it -- recursively count sections made.\n\t\t# thats how we turn the factorials inside out and save the work.\n\t\tv=e=int(x\/p)\n\t\tdo {\n\t\t\tq=int(v\/p)\n\t\t\te+=q\n\t\t\tv=q\n\t\t} while (q>0)\n\t\t# the most complicated bit left is to process the result.\n\t\tif (i==0)\n\t\tif(e==1){printf \"%d\",p} else {printf \"%d^%d\",p,e}\n\t\telse\n\t\tif(e==1){printf \" * %d\",p} else {printf \" * %d^%d\",p,e}\n\t}\n\tprint\n}\n\nfunction main(x) { initprimes(x); unfactorial(x) }\n\nBEGIN { main(num) }\n'\n)\necho \"$out\"\n}\n\ndecomp \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338110,"user_id":503,"body":"perl -e '\n@R = {};\n$N = $ARGV[0];\nfor (;1 < $N;--$N) {\n\t$F = $N;\n\tfor ($T = 1;++$T * $T <= $F;) {\n\t\tfor (;0 == $F % $T;$F \/= $T) { ++$R[$T] }\n\t}\n\tif (1 < $F) { ++$R[$F] }\n}\n$N = @R;\nprint \"2^\",$R[2];\nfor ($F = 2;++$F < $N;) {\n\tif ($R[$F]) {\n\t\tprint \" * \",$F;\n\t\tif (1 < $R[$F]) { print \"^\",$R[$F] }\n\t}\n}\n' \"$1\"\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a057ec846d843c81a0000ad":[{"id":338111,"user_id":492,"body":"#!\/bin\/bash\naux='\nsub gcd {\n  my ($u, $v) = @_;\n  while ($v) { ($u, $v) = ($v, $u % $v); }\n  return abs($u);\n}\nsub phi {    \n    my $n = shift; my $r = $n;\n    for (my $p = 2; $p * $p <= $n; ++$p) {\n        if ($n % $p == 0) {\n            while ($n % $p == 0) { $n \/= $p; }\n            $r -= $r \/ $p;\n        }\n    }\n    if ($n > 1) { $r -= $r \/ $n; }\n    return $r;\n}\nsub factors {\n    my $nb = shift;\n    my @factors;\n    for ( 2 .. int $nb \/ 2 ) { push @factors, $_ unless $nb % $_; }\n    return (1, @factors, $nb);\n}\nsub powmod {\n    my ($a, $f, $m) = @_;\n    my $r = 1;\n    for (;;) {\n        0 != ($f & 1) and $r = ($r * $a) % $m; \n        $f >>= 1;\n        0 == $f and last;\n        $a = ($a * $a) % $m;\n    }\n    $r;\n}\nsub aux {\n    my ($n) = @_;\n    if (gcd($n, 10) != 1) { return -1; }\n    my @divs = factors(phi($n));\n    foreach my $d (@divs) {\n        if (powmod(10, $d, $n) == 1) { return $d; }\n    }\n    return -1;\n}\n$a=aux($ARGV[0]);\nprint $a;\n'\ncycle () {\n    echo `perl -e \"$aux\" \"$1\"`\n}\ncycle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338112,"user_id":2390,"body":"#! \/bin\/bash\n\n# This program tries to find the cycle length efficiently by identifying\n# all the positive divisors of the Euler's totient of the input and then \n# testing each for whether 10^divisor modulo the input is equal to one. \n\nbc_code='\n# Add all prime factors of an integer to the array\n# and return the length of the resulting list.\ndefine prime_factors(n, *factors[]) {\n    auto candidate, factor, i, is_composite\n    candidate = 2\n    factor = 2\n    while (factor * candidate <= n) {\n        if (n % candidate == 0) {\n            is_composite = 1\n            factors[i] = candidate\n            i += 1\n            while (n % candidate == 0) {\n                n = n \/ candidate\n            }\n            factor = candidate\n        }\n        candidate += 1\n    }\n    if (is_composite && n > 1) {\n        factors[i] = n\n        i += 1\n    }\n    return i\n}\n\n# Add all divisors of an integer n (including 1 and n) to the array \n# in order from smallest to largest and return the length of the \n# resulting list.\ndefine all_divisors(n, *factors[]) {\n    auto max, f, i, big_factors[], bi, j\n    for (f = 1; f <= sqrt(n); f++) {\n        if (n % f == 0) {\n            factors[i] = f\n            i += 1\n            if (f * f < n) {\n                big_factors[bi] = n \/ f\n                bi += 1\n            }\n        }\n    }\n    for (j=bi-1; j>=0; j--) {\n        factors[i] = big_factors[j]\n        i += 1\n    }\n    return i\n}\n\ndefine eulers_totient(n) {\n    auto len, acc, i\n    len = prime_factors(n, factors[])\n    if (len == 0) {\n        return n - 1\n    }\n    acc = 1\n    for (i = 0; i < len; i++) {\n        acc *= n - n \/ factors[i]\n        if (i > 0) {\n            acc \/= n\n        }\n    }\n    return acc\n}\n\ndefine cycles(n) {\n    auto len, i\n    if (n % 5 == 0 || n % 2 == 0) {\n        return -1\n    }\n    len = all_divisors(eulers_totient(n), factors[])\n    for (i=0; i < len; i++) {\n        if (10^factors[i] % n == 1) {\n            return factors[i]\n        }\n    }\n}'\n\nbc <<< \"${bc_code}; cycles($1)\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338113,"user_id":53,"body":"#!\/bin\/bash\ncycle() {\nbc <<EOF\ndefine aux(n) {\n  if (n%2 == 0 || n%5 == 0) {\n    return -1\n  } else {\n    m = 10 % n\n    i = 1\n    while (m > 1) {\n        m = (m * 10) % n \n        i = i + 1\n    }\n    return i\n  }\n}\nn=$1\naux(n)\nEOF\n}\ncycle $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338114,"user_id":null,"body":"#!\/usr\/bin\/env bash\ncycle() {\n    bc <<< \"\n    i=0\n    val=1\n    while (i+=1) {\n        val=val * 10 % ${n}\n        if (val == 1) {\n            print i\n            break\n        }\n    }\"\n}\n\nmain() {\n    declare -i n=${1}\n    if ((n % 2 && n % 5))\n    then\n        cycle\n    else\n        printf '%s' '-1'\n    fi\n}\n\nmain \"${@}\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338115,"user_id":null,"body":"#!\/bin\/bash\nexport LC_ALL=C\n\n\ncycle () { \nif (( $1%5==0 )) || (( $1%2==0 )); then\n  echo -1\n  return\nfi\n\nnum=1\ndiv=$1\nresult=1\n((num=$num%$div*10))\nuntil (( ((num=$num%$div*10))==10 )); do\n  (( result++ ))\ndone\necho ${result}\n}\n\n\n\ncycle \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338116,"user_id":null,"body":"#!\/bin\/bash\ncycle () {\n    echo \"\" | awk \"END{\n        if(($1 % 2 == 0) || ($1 % 5 == 0)) {\n            printf \\\"-1\n\\\"\n        } else {\n            remainder=10 % $1\n            cy=1\n            while(remainder != 1) {\n                remainder=remainder * 10 % $1\n                cy++\n            }\n            printf \\\"%d\n\\\", cy\n        }\n    }\n    \"\n}\n\ncycle \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338117,"user_id":503,"body":"perl -e '\n$D = $ARGV[0];\nif (0 == $D % 2 || 0 == $D % 5) {\n\tprint -1;\n\texit\n}\n$N = 1;\n%R = ();\n$P = 0;\nfor (;;$N *= 10) {\n\t$N %= $D;\n\tif ($R{$N}) {\n\t\tprint $P - $R{$N};\n\t\tlast\n\t}\n\t$R{$N} = $P++;\n}\n' \"$1\"\necho","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a3fe3dde1ce0e8ed6000097":[{"id":338118,"user_id":null,"body":"#!\/bin\/bash\nyear=$1\necho \"$(( (year + 99) \/ 100 ))\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338119,"user_id":null,"body":"#!\/bin\/bash\nyear=$1\ncentury_from_year=$(($year \/ 100))\nif [ $(($year % 100)) -eq 0 ]\nthen\n  echo $century_from_year\nelse\n  echo $(($century_from_year + 1))\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338120,"user_id":1045,"body":"#!\/bin\/bash\n(($1%100)) && echo $(($1\/100+1)) || echo $(($1\/100))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338121,"user_id":null,"body":"#!\/bin\/bash\nyear=$1\n# your code here\necho \"$year\/100+($year\/100)*100\/$year*-1+1\" | bc\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338122,"user_id":null,"body":"#!\/bin\/bash\nyear=$1\necho $((($1-1)\/100+1))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338123,"user_id":null,"body":"#!\/bin\/bash\nyear=$1\n# your code here\na=${year:0: -2}\nb=${year: -2}\n\nif [[ ${#year} == \"2\" ]]; then \necho \"1\"\nelif [[ $b = \"00\" ]]; then\necho $a \nelse \necho $((a+1))\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338124,"user_id":645,"body":"#!\/bin\/bash\nyear=$1\necho \"$((($year + 99) \/ 100))\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338125,"user_id":1027,"body":"#!\/bin\/bash\necho $((($1-1)\/100+1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338126,"user_id":null,"body":"#!\/bin\/bash\nyear=$1\nres=$(((year-1)\/100+1))\necho \"$res\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338127,"user_id":null,"body":"#!\/bin\/bash\necho $1 | awk '{ if ( $1 <= 100 && $1 > 0 ) print \"1\"; else if ( $1 % 100 == 0 ) print $1\/100; else print int($1\/100+1); }'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a4e3782880385ba68000018":[{"id":338128,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n    local -- number=$1 len=${#1} rnumber=$(rev<<<$1) left=0 right=0\n    # Your code here\n    for((i=0;i<(len-1)\/2;i++));\n    do\n      left=$((left+${number:i:1}))\n      right=$((right+${rnumber:i:1}))\n    done\n    [ $left == $right ] && echo \"Balanced\" || echo \"Not Balanced\"\n}\n\nbalancedNum $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338129,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n    local -- number=$1\n    \n    # Your code here\n    size=$(( (${#number} -1) \/ 2))\n    \n    if [ ${#number} -lt 3 ]\n    then\n        echo \"Balanced\"\n        exit\n    fi\n    \n    first_half=${number::$size}\n    secon_half=${number: -$size}\n    \n    \n    sum1=0\n\n    while [ $first_half -gt 0 ]\n    do\n        first_half=${first_half#0}\n        mod=$((first_half % 10))    #It will split each digits\n        sum1=$((sum1 + mod))   #Add each digit to sum\n        first_half=$((first_half \/ 10))    #divide num by 10.\n    done\n\n    sum2=0\n    \n    while [ $secon_half -gt 0 ]\n    do\n        secon_half=${secon_half#0}\n        mod=$((secon_half % 10))\n        sum2=$((sum2 + mod))\n        secon_half=$((secon_half \/ 10))\n    done\n    \n    \n    if [ $sum1 -eq $sum2 ] \n    then \n        echo \"Balanced\"\n    else\n        echo \"Not Balanced\"\n    fi\n}\n\nbalancedNum $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338130,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum() {\n    if (( ${#1} == 1 || ${#1} == 2 ))\n    then\n        echo \"Balanced\"\n        return\n    fi\n    \n    list=( $( echo $1 | grep -o . ) )\n    count=${#list[@]}\n    before=0\n    after=0\n    \n    if (( $count % 2 == 1 ))\n    then\n        for ((num=0; num<$count\/2; num++))\n        do\n            before=$(( $before+${list[$num]} ))\n        done\n        for ((num=$count\/2+1; num<$count; num++))\n        do\n            after=$(( $after+${list[$num]} ))\n        done\n    fi\n    \n    if (( $count % 2 == 0 ))\n    then\n        for ((num=0; num<=$count\/2-2; num++))\n        do\n            before=$(( $before+${list[$num]} ))\n        done\n        for ((num=$count\/2+1; num<$count; num++))\n        do\n            after=$(( $after+${list[$num]} ))\n        done\n    fi\n    \n    if [ $before -eq $after ]\n    then\n        echo \"Balanced\"\n        return\n    fi\n    echo \"Not Balanced\"\n    return\n}\n\nbalancedNum $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338131,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum() {\n    if (( ${#1} == 1 || ${#1} == 2 ))\n    then\n        echo \"Balanced\"\n        return\n    fi\n    \n    list=( $( echo $1 | grep -o . ) )\n    count=${#list[@]}\n    before=0\n    after=0\n    if (( $count % 2 == 1 ))\n    then\n        for ((num=0; num<$count\/2; num++))\n        do\n            before=$(( $before+${list[$num]} ))\n        done\n        for ((num=$count\/2+1; num<$count; num++))\n        do\n            after=$(( $after+${list[$num]} ))\n        done\n        if [ $before -eq $after ]\n        then\n            echo \"Balanced\"\n            return\n        fi\n        echo \"Not Balanced\"\n        return\n    fi\n    \n    for ((num=0; num<=$count\/2-2; num++))\n    do\n        before=$(( $before+${list[$num]} ))\n    done\n    for ((num=$count\/2+1; num<$count; num++))\n    do\n        after=$(( $after+${list[$num]} ))\n    done\n    if [ $before -eq $after ]\n    then\n        echo \"Balanced\"\n        return\n    fi\n    echo \"Not Balanced\"\n    return\n}\n\nbalancedNum $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338132,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n    local -- number=$1\n    total=${#1}\n    if (( \"total\" <= \"2\" ));then\n      echo \"Balanced\"\n    else\n      len=$(echo \"($total-1)\/2\"|bc)\n      left=0;\n      right=0\n      #echo len is $len\n      for ((i=0;i<${len};i++))\n      do\n      leftnum=${number:${i}:1}\n      #echo leftnum is $leftnum\n      left=$(eval echo \"$left+${number:${i}:1}\"|bc)\n      rightnum=${number:$total-1-$i:1}\n      #echo rightnum is $rightnum\n      right=$(eval echo \"$right+${number:$total-1-$i:1}\"|bc)\n      done\n      #echo left is $left\n      #echo right is $right\n      if (( \"$left\" == \"$right\" ));then\n        echo \"Balanced\"\n      else\n        echo \"Not Balanced\"\n      fi\n   fi\n}\n\nbalancedNum $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338133,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n  number=$1\n  if [[ $(echo \"scale=1; ${#number} \/ 2\" | bc) =~ \\.5 ]]; then\n    num1=$(echo ${number:0:$(echo \"${#number}\/ 2\" | bc)} | sed 's\/\\(.\\)\/\\1 + \/g' | sed 's\/.+.$\/\/' | bc)\n    num2=$(echo ${number:$(echo \"(${#number}\/ 2) * -1\" | bc)} | sed 's\/\\(.\\)\/\\1 + \/g' | sed 's\/.+.$\/\/' | bc)\n  else\n    num1=$(echo ${number:0:$(echo \"${#number}\/ 2 - 1\" | bc)} | sed 's\/\\(.\\)\/\\1 + \/g' | sed 's\/.+.$\/\/' | bc)\n    num2=$(echo ${number:$(echo \"(${#number}\/ 2 - 1) * -1\" | bc)} | sed 's\/\\(.\\)\/\\1 + \/g' | sed 's\/.+.$\/\/' | bc)\n  fi\n  if [[ $num1 = $num2 ]] || [[ \"$num1\" = \"\" ]]; then\n    echo \"Balanced\"\n  else\n    echo \"Not Balanced\"\n  fi\n}\nbalancedNum $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338134,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n    local -- nb=$1\n    nb=$1\n    left=0\n    right=0\n    while [ ${#nb} -gt 2 ]\n    do\n            left=$((left+${nb:0:1}))\n            right=$((right+${nb:${#nb}-1:1}))\n            nb=${nb:1:$((${#nb}-2))}\n    done\n    [ $left -eq $right ] && echo Balanced || echo \"Not Balanced\"\n}\n\nbalancedNum $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338135,"user_id":null,"body":"balancedNum ()\n{\n    number=$1; sum1=0; sum2=0\n    for x in $(seq 1 \"$(( $(( ${#number}%2 )) == 0 ? $(( (${#number}-2)\/2 )) : $(( (${#number}-1)\/2 )) ))\"); do ((sum1+=${number:x-1:1})) && ((sum2+=${number:${#number}-x:1})); done\n    [ \"$sum1\" -eq \"$sum2\" ] && echo \"Balanced\" || echo \"Not Balanced\"\n}\nbalancedNum \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338136,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n    local -- number=$1\n    digits=${#number}\n    nEdgeDigits=$(((digits-1)\/2))\n    fTotal=0\n    bTotal=0\n    for (( i=0;i<$nEdgeDigits;i++))\n      do ((fTotal+=${number:i:1}))\n      ((bTotal+=${number:digits-nEdgeDigits+i:1}))\n      done\n    ((fTotal == bTotal)) \n}\n\nbalancedNum $1\n\nif (($?==0))\nthen echo \"Balanced\"\nelse echo \"Not Balanced\"\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338137,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nbalancedNum ()\n{\n    local -- number=$1\n    digits=${#number}\n    nEdgeDigits=$(((digits-1)\/2))\n    frontSlice=${number:0:nEdgeDigits}\n    backSlice=${number:digits-nEdgeDigits:nEdgeDigits}\n    fTotal=0\n    bTotal=0\n    for (( i=0;i<$nEdgeDigits;i++))\n      do ((fTotal+=${number:i:1}))\n      ((bTotal+=${number:digits-nEdgeDigits+i:1}))\n      done\n    ((fTotal == bTotal)) \n}\n\nbalancedNum $1\nif (($? == 0))\nthen echo \"Balanced\"\nelse echo \"Not Balanced\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a99a03e4a6b34bb3c000124":[{"id":338138,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nnumPrimorial ()\n{\n    local -- numPrimes=$1\n    local -i -- res=1 i=2\n    # Your code here\n    while [ $numPrimes -gt 0 ];\n    do\n      if [ \"$(factor $i|wc -w)\" == \"2\" ];\n      then\n        res=$((res*i))\n        numPrimes=$((numPrimes-1))\n      fi\n      i=$((i+1))\n    done\n    echo ${res}\n}\n\nnumPrimorial $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338139,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nnumPrimorial ()\n{\n    local -- numPrimes=$1\n\n    # Your code here\n        count=$1\n        n=100\n        #declare -I a\n        a=0\n        result=1\n        for((i=1;i<=n;i++))\n        do\n           for((x=1;x<=i;x++))\n           do\n           b=$(( $i%$x ))\n           if [[ $b -eq 0 ]]; then\n                let a=$a+1\n           fi\n           done\n           if [[ $a -eq 2 ]]; then\n           #     echo -n $i \" \"\n                let result=$result*$i\n                let count-=1\n           fi\n           a=0\n           #echo \"count result:$count $result\"\n           if [[ $count -eq 0 ]];then\n              echo $result\n              break\n           fi\n        done\n}\nnumPrimorial $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338140,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nisprime()\n{\n     num=$1\n     for (( i=2; i < $num; i++ ))\n     do\n          if [ $(($num % $i)) -eq 0 ]\n          then\n               return 1\n          fi\n     done\n\n     return 0\n}\n\nprimorialCount=$1\nresultPrimorialCount=0\nresult=1\nnum=1\nwhile [ $resultPrimorialCount -le $primorialCount ] ; do\n     if isprime $num\n     then\n          result=$(($result * $num))\n          resultPrimorialCount=$(($resultPrimorialCount + 1))\n     fi\n     num=$(($num + 1))\ndone\n\necho $result\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338141,"user_id":null,"body":"#!\/bin\/bash\n\ncount=0\nres=1\nnum=2\n\nwhile [ $count -ne $1  ]\ndo\n\tisPrime=1\n\tfor(( i=2;i<=num\/2;i++ ))\n\tdo\n\t\tif [ $((num%i)) -eq \"0\" ]\n\t\tthen\n\t\t\tisPrime=0\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif [ $isPrime -ne 0 ]\n\tthen\n\t\tres=$(( $res * $num ))\n\t\tcount=$(( $count + 1 ))\n\tfi\n\tnum=$(( $num + 1 ))\ndone\n\necho \"$res\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338142,"user_id":null,"body":"function numPrimorial () {\ndeclare -i numPrimes && numPrimes=\"${1}\"\ndeclare -a primeArray\ndeclare isPrime && isPrime=false\n\nfor ((i=2; ;i++)); do\n  for num in $(seq 1 $((\"${i}\"\/2))); do\n    if [[ $(($i%$num)) -eq 0 && $num -ne 1 ]]; then\n      isPrime=false && break\n    else\n      isPrime=true\n    fi\n  done\n  \n  if [[ $isPrime == true ]]; then\n    primeArray+=(\"$i\")\n    numPrimes=$((numPrimes-=1))\n    \n    if [[ \"${numPrimes}\" -eq 0 ]]; then\n      break\n    fi\n  fi\ndone\n\nprintf '%s\n' \"${primeArray[@]}\" | paste -s -d '*' | bc\n}\nnumPrimorial \"${1}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338143,"user_id":53,"body":"#!\/bin\/bash\nawk -v n=$1 'BEGIN {\n  if (n==0) { print \"1\"; exit; }\n  if (n==1) { print \"2\"; exit; }\n  if (n==2) { print \"6\"; exit; }\n  if (n==3) { print \"30\"; exit; }\n  if (n==4) { print \"210\"; exit; }\n  if (n==5) { print \"2310\"; exit; }\n  if (n==6) { print \"30030\"; exit; }\n  if (n==7) { print \"510510\"; exit; }\n  if (n==8) { print \"9699690\"; exit; }\n  if (n==9) { print \"223092870\"; exit; }\n  if (n==10) { print \"6469693230\"; exit; }\n  if (n==11) { print \"200560490130\"; exit; }\n  if (n==12) { print \"7420738134810\"; exit; }\n  if (n==13) { print \"304250263527210\"; exit; }\n  if (n==14) { print \"13082761331670030\"; exit; }\n  if (n==15) { print \"614889782588491410\"; exit; }\n}'\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338144,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nisprime() \n{\n    num=$1\n    \n    for (( i=2; i<$(( ( $num +2)\/2 )); i++  ))\n    do\n        \n        if [[ $(( $num % $i )) == 0  ]]   \n        then\n            return 1\n        fi\n    done\n    return 0\n}\nnumPrimorial()\n{\n    numm=$1\n    \n    result=1\n    j=2\n    \n    while [[ $numm > 0 ]]\n    do \n        \n        isprime $j\n        \n        \n        a=$?\n        \n        if [[ $a == 0  ]]\n        then \n            #echo \"result : $result\"\n            #echo \"j : $j\"\n            result=$(( $result * $j))\n            numm=$(( $numm - 1 ))\n            #echo \"result : $result\"\n        fi\n        j=$(( $j + 1 ))\n        \n        \n    done\n    #echo \"result : $result\"\n    \n    echo  $result\n}\n\nnumPrimorial $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338145,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nnumPrimorial ()\n{   \n    local primorial=2\n    local count=1\n    local num=3\n    while [ $count -lt $1 ]; do\n      local isPrime=1\n      local prevNum=$(($num - 1))\n      for (( i = 2; i < $prevNum; i++ )); do\n        if [ $(($num % $i)) -eq 0 ]; then\n          # This number isn't prime\n          isPrime=0\n          break\n        fi\n      done\n      if [ $isPrime -eq 1 ]; then\n        ((primorial *= $num))\n        ((count += 1))\n      fi\n      ((num += 1))\n    done\n    echo $primorial\n    return\n}\n\nnumPrimorial $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338146,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nnumPrimorial ()\n{\n    po_prime=3\n    count=1\n    final_prime=\"2*\"\n    is_prime=\"\"\n    until [[ \"$count\" -eq \"$1\" ]]\n    do\n        for (( i=2; i<po_prime; i++ ))\n        do\n            is_prime=\"true\"\n            if [[ $((po_prime%i)) -eq 0 ]]\n            then\n                is_prime=\"false\"\n                break\n            fi\n        done\n        case $is_prime in\n            \"false\") : ;;\n            *) is_prime=\"true\"; ((count++)); final_prime+=\"$po_prime*\" ;;\n        esac\n        ((po_prime++))\n    done\n    echo \"$final_prime\" | sed 's\/*$\/\/' | bc\n}\n\nnumPrimorial \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338147,"user_id":null,"body":"#!\/usr\/bin\/env bash\n\nnumPrimorial() {\n    declare -i primorial=1 i=1 j=2\n    while ((i<=${1} ))\n    do\n        [[ \"$(factor \"${j}\"| wc -w)\" == '2' ]] && ((primorial*=j)) && i+=1\n        j+=1\n    done\n    printf '%d' \"${primorial}\"\n}\n\nnumPrimorial \"${1}\"\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5aba780a6a176b029800041c":[{"id":338148,"user_id":null,"body":"d=$1 b=$2\necho $((b \/ d * d))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338149,"user_id":null,"body":" echo $[$2-$(($2%$1))]\n \n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338150,"user_id":null,"body":"a=$1\n\nwhile [[ $[$a + $1] -le $2 ]]; do\n  let a+=$1\ndone\n\necho $a","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338151,"user_id":645,"body":"echo $(($2 - $2 % $1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338152,"user_id":null,"body":"d=$1; b=$2\necho $((b \/ d * d)) # your code here","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338153,"user_id":null,"body":"max_multiple() {\n  # calculate maximum multiple\n  MM=$(( ($2\/$1)*$1 ))\n  \n  # return value if greater than 0\n  if [[ $MM -gt 0 ]]\n  then\n    echo $MM\n  fi\n}\n\nmax_multiple $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338154,"user_id":null,"body":"d=$1; b=$2\n\nn=$(($b \/ $d));\necho $(($n * $d));","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338155,"user_id":null,"body":"#!\/bin\/bash\n\ncalc() {\n    highest_multi=$(( $2 \/ $1 ))\n    echo $(( $1 * $highest_multi))\n}\n\ncalc $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338156,"user_id":null,"body":"d=$1; b=$2\nwhile true; do\n  (( (b-i)%d == 0)) && echo $b && exit \n  b=$((b-1))\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338157,"user_id":null,"body":"d=$1; b=$2\necho $(($2 - ($2 % $1)))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ae62fcf252e66d44d00008e":[{"id":338158,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n# your code here\n\nar=($( echo \"$1 * ($2 + $3)\" | bc )\n    $( echo \"$1 * $2 * $3\" | bc )\n    $( echo \"$1 + $2 + $3\" | bc )\n    $( echo \"$1 + $2 * $3\" | bc )\n    $( echo \"$1 * $2 + $3\" | bc )\n    $( echo \"($1 + $2) * $3\" | bc ))\nIFS=$'\n'\necho \"${ar[*]}\" | sort -nr | head -n1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338159,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n\nprintf \"$((a + b + c))\n $(((a + b)*c))\n $((a * (b + c)))\n $((a * b * c))\" | sort -n | tail -n 1\n\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338160,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n(( a == 1 )) && (( b += 1 ))\n(( c == 1 )) && (( b += 1 ))\nif (( b == 1 )); then\n  (( a < c )) && (( a += 1 )) || (( c += 1 ))\nfi\necho $(( a * b * c ))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338161,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n\narr=($((a+b+c)) $((a*b*c)) $((a*(b+c))) $(((a+b)*c)) $((a*b+c)) $((a+b*c)))\nresult=0\n\nfor a in ${arr[*]}\ndo\n  if [ $a -gt $result ]\n  then\n    result=$a\n  fi\ndone\n\necho $result\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338162,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n# your code here\n\nARRAY=($((a+b+c)) $((a*b*c)) $((a*(b+c))) $(((a+b)*c)))\n\nmax=0\n\nfor v in ${ARRAY[@]}; do\n  if (( $v > $max ));\n    then max=$v;\n  fi; done\n \necho $max","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338163,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n\nn1=$((a*(b+c)))\nn2=$((a*b*c))\nn3=$((a+b*c))\nn4=$(((a+b)*c))\nn5=$((a+b+c))\n\nnumbers=($n1 $n2 $n3 $n4 $n5)\nprintf \"%d\n\" \"${numbers[@]}\" | sort -rn | head -1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338164,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n\n\n   if [ $a -eq 1 -a $b -eq 1 -a $c -eq 1 ]\n      then\n        echo 3\n        exit\n   fi\n   \n   if [ $a -eq 1 -a  $c -eq 1 ]\n     then\n       echo $((2 + $b))\n       exit\n  fi\n\n   if [ $a -eq 1 ]\n    then\n      echo $(( $((1 + $b)) *$c ))\n      exit\n   fi\n\n   if [ $c -eq 1 ]\n    then\n      echo $(( $a * $(( $b + $c)) ))\n      exit\n    fi\n\n   if [ $b -eq 1 ]\n    then\n      if [ $a -gt $c ]\n       then\n         echo $(( $a * $((1 + $c)) ))\n         exit\n       else\n         echo $(( $(($a +1)) * $c ))\n         exit\n      fi\n    fi\necho `expr $a \\* $b \\* $c`","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338165,"user_id":null,"body":"#!\/bin\/bash\na=$(($1*($2+$3)))\nb=$(($1*$2*$3))\nc=$(($1+$2*$3))\nd=$((($1+$2)*$3))\ne=$(($1+$2+$3))\n\nlog=\"$a\n$b\n$c\n$d\n$e\"\n\necho -e \"$log\" | sort -rn | head -n 1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338166,"user_id":null,"body":"a=$1\nb=$2\nc=$3\n# your code here\n\nprintf \"$(( a+b+c ))\n $(( (a+b)*c ))\n $(( a+b*c ))\n $(( a*b*c ))\n $(( a*(b+c) ))\"| sort -n | tail -n 1\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338167,"user_id":null,"body":"a=$1\nb=$2\nc=$3\nsum=$(($a + $b + $c))\nsum0=$(($a * $b + $c))\nsum1=$(($a * ($b + $c)))\nsum2=$(($a * $b * $c))\nsum3=$(($a + $b * $c))\nsum4=$((($a + $b) * $c))\n\nif (($sum < $sum0));then\nsum=$sum0\nfi\nif (($sum < $sum1));then\nsum=$sum1\nfi\nif (($sum < $sum2));then\nsum=$sum2\nfi\nif (($sum < $sum3));then\nsum=$sum3\nfi\nif (($sum < $sum4));then\nsum=$sum4\nfi\necho $sum","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5b06c990908b7eea73000069":[{"id":338168,"user_id":53,"body":"#!\/bin\/bash\nawk -v x=$1 -v y=$2 -v eps=$3 'BEGIN {\n  ans = log(eps) \/ log(sqrt(x * x + y * y))\n  if (ans < 0) {\n    printf \"%d\", -1\n  } else {\n    printf \"%d\", int(ans)\n  }\n}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338169,"user_id":null,"body":"#!\/bin\/bash\n\nm=`echo \"$1*$1+$2*$2\" | bc -l`\n\nif (( `printf %.0f $m` > 1 ))\nthen\n  echo -1\nelse\n  printf %.0f `echo \"l($3)\/l(sqrt($m))\" | bc -l`\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338170,"user_id":168,"body":"#!\/bin\/bash\nfunction f {\n  local a=$( bc <<< \"scale=15;sqrt($1 * $1 + $2 * $2)\" )\n  if (( $(bc -l <<< \"$a >= 1\") )); then\n    echo -1\n  else\n    echo $(bc -l <<< \"scale=15;l($3) \/ l($a)\")\n  fi\n}\nf $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338171,"user_id":null,"body":"#!\/bin\/bash\nfunction f {\n    r=$(bc <<< \"scale=10;sqrt($1 * $1 + $2 * $2)\")\n    if [[ \"$(echo $r | cut -d '.' -f1)\" -ge 1 ]]\n    then\n      echo \"-1\"\n    else\n      echo $(bc -l <<< \"scale=10;(l($3) \/ l($r))\")\n    fi\n}\nf $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338172,"user_id":492,"body":"#!\/bin\/bash\nfunction f {\n    local a=$(echo \"scale=16; sqrt($1*$1 + $2*$2)\" | bc -l)\n    if (( $(echo \"$a >= 1.0\" | bc -l) )); then\n        echo \"-1\"\n    else\n        local s=$(echo \"scale=16;l($3)\/l($a)\" | bc -l)\n        echo ${s%%.*}    \n    fi\n}\nf $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5b0c0ec907756ffcff00006e":[{"id":338173,"user_id":null,"body":"#!\/bin\/bash\n\necho \"scale=30; -$3\/$2\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338174,"user_id":null,"body":"#!\/bin\/bash\nbc <<< \"scale=100; -$3 \/ $2\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338175,"user_id":null,"body":"#!\/bin\/bash\nfunction quadratic {\n    echo \"scale=27;-2*$3\/($2+sqrt($2^2-4*$1*$3))\"|bc\n}\nquadratic $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338176,"user_id":168,"body":"#!\/bin\/bash\nfunction quadratic {\n  echo \"scale=100; -$3 \/ $2\" | bc\n}\nquadratic $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338177,"user_id":148,"body":"#!\/bin\/bash\nfunction quadratic {\n  bc <<<\"scale=26; -$3 \/ $2\"\n }\nquadratic $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338178,"user_id":null,"body":"#!\/bin\/bash\nfunction quadratic {\n  echo \"scale=152; (-$2+sqrt($2^2-4*$1*$3))\/(2*$1)\"|bc\n}\n\nquadratic $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338179,"user_id":492,"body":"#!\/bin\/bash\nfunction quadratic {\n    echo $(echo \"scale=30;-$3 \/ $2\" | bc -l)\n}\nquadratic $1 $2 $3","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5b1cd19fcd206af728000056":[{"id":338180,"user_id":null,"body":"#!\/bin\/bash\nfunction solve() {\n    solution=$(echo \"scale=12; (2 * $1 + 1 - sqrt(4 * $1 + 1)) \/ (2 * $1)\" | bc)\n    echo $solution\n}\nsolve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338181,"user_id":53,"body":"#!\/bin\/bash\nbc <<EOF\n    scale=32;\n    print (2 * $1 + 1 - sqrt(4 * $1 + 1)) \/ (2 * $1)\nEOF","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338182,"user_id":50,"body":"#!\/bin\/bash\nfunction solve {\necho $(bc <<< \"scale=15; ((2*$1)+1 - sqrt(4*$1+1))\/(2*$1)\")\n}\nsolve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338183,"user_id":null,"body":"#!\/bin\/bash\n\necho \"m = $1; 1 - (sqrt(4 * m + 1) - 1) \/ (2 * m)\" | bc -l","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338184,"user_id":50,"body":"#!\/bin\/bash\nfunction solve {\n  echo $(echo \"scale=15;(2*$1 +1 - (sqrt(4*$1 + 1))) \/ (2*$1)\" | bc )\n}\nsolve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338185,"user_id":null,"body":"#!\/bin\/bash\nfunction solve {\na=`echo \"scale=16; sqrt($1*4+1)\" | bc`\necho \"scale=16; (2*$1+1-$a)\/(2*$1)\" | bc\n}\nsolve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338186,"user_id":527,"body":"bc <<< \"scale = 20; 1 - (sqrt($1 + 0.25) - 0.5) \/ $1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338187,"user_id":492,"body":"#!\/bin\/bash\nfunction solve {\n    s=$(echo \"scale=16;sqrt(4.0 * $1 + 1)\" | bc -l)\n    res=$(echo \"scale=16;(2.0 * $1 + 1.0 -$s) \/ (2.0 * $1)\" | bc -l)\n    echo $res\n}\nsolve $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5b853229cfde412a470000d0":[{"id":338188,"user_id":527,"body":"echo $((2 * $2 - $1)) | tr -d -","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338189,"user_id":null,"body":"#!\/bin\/sh\n(( res=$1-2*$2 )); echo ${res#-}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338190,"user_id":null,"body":"#!\/bin\/sh\ndad_years_old=$1\nson_years_old=$2\n(( d = dad_years_old - 2 * son_years_old ))\necho \"${d#-}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338191,"user_id":null,"body":"#!\/bin\/sh\n\ndad_years_old=$1\nson_years_old=$2\n\n#implement me\ntotal=$((dad_years_old-2*son_years_old))\necho \"${total#-}\"\n\nexit","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338192,"user_id":null,"body":"#!\/bin\/bash\necho $(($1-$2*2)) | sed 's\/-\/\/'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338193,"user_id":null,"body":"#!\/bin\/sh\n\n(( year=$1-2*$2 )); echo ${year#-}\nexit","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338194,"user_id":null,"body":"#!\/bin\/sh\n\ndad_years_old=$1\nson_years_old=$2\n\na=$(($son_years_old * 2))\nb=$(($dad_years_old - $a))\n\n#implement me\necho ${b#-}\n\nexit\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338195,"user_id":null,"body":"#!\/bin\/sh\n\ndad_years_old=$1\nson_years_old=$2\n\n#implement me\nyears_ago=$((2 * $2 - $1))\nif ((years_ago < 0)); then\n    years_ago=$((-years_ago))\nfi\necho $years_ago\n\nexit","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338196,"user_id":null,"body":"#!\/bin\/sh\n\ndad_years_old=$1\nson_years_old=$2\n\n#implement me\nnum=`expr 2 \\* $2`\nif [ $1 -ge $num ]\nthen\n echo `expr $1 - $num`\nelse\n echo `expr $num - $1`\nfi\n\nexit\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338197,"user_id":null,"body":"#!\/bin\/sh\n\ndad_years_old=$1\nson_years_old=$2\n\n#implement me\nlet twice=2*$son_years_old-$dad_years_old\necho ${twice#-}\n\nexit","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5cc70653658d6f002ab170b5":[{"id":338198,"user_id":null,"body":"#!\/bin\/bash\nfunction sqr_modulus {\n    a=($1)\n    check=\"true\"\n    sum=-1\n    \n    # number of terms must be odd\n    (( ${#a[@]} % 2 == 0 )) && check=\"false\"\n    \n    # all terms must be integers\n    [[ $(echo \"${a[@]:1}\" | grep -c \"[^0-9 ]\") != 0 ]] && check=\"false\"\n    \n    if [[ ${check} == \"true\" ]]; then\n      case \"${a[0]}\" in\n        \"cart\")            \n            sum=$(echo \"${a[@]:1}\" | sed \"s\/ \/^2+\/g;s\/$\/^2\/\" | bc)\n            ;;\n        \"polar\")\n            sum=$(for((i=0; i<${#a[@]}\/2; i++)); do echo \"${a[$((2*i+1))]}^2\"; done | paste -sd\"+\" | bc)\n            ;;\n        *)\n            check=\"false\"\n            ;;\n      esac\n    fi  \n    \n    greatest=$(grep -o [0-9] <<< \"${sum}\" | sort -rn | tr -d \"\n\")  \n    echo \"[${check}, ${sum}, ${greatest}]\"\n}\nsqr_modulus \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338199,"user_id":null,"body":"#!\/bin\/bash\n\npolar() { tr -s ' ' '\n' <<< \"$1\" | sed -n 'p;n' | sed \"s\/$\/^2\/g\" | paste -s -d \"+\" | bc; }\ncart() { tr -s ' ' '\n' <<< \"$1\" | sed \"s\/$\/^2\/g\" | paste -s -d \"+\" | bc; }\n\nsqr_modulus() {\n  system=\"${1%% *}\"\n  numbers=\"${1#* }\"\n  pairsnum=\"$( tr -s ' ' '\n' <<< \"${numbers}\" | wc -l)\"\n \n  if [[ ! \"${system}\" =~ ^(cart|polar)$ ]] || \\\n     (( pairsnum % 2 != 0 )) || [[ -n \"${numbers\/\/[0-9 ]\/}\" ]]; then\n    echo \"[false, -1, 1]\"; return 1\n  fi\n\n  s=$($system \"$numbers\")\n  largests=$(grep -o . <<< $s | sort -r | tr -d '\n')\n  echo \"[true, $s, $largests]\"\n}\n\nsqr_modulus \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338200,"user_id":492,"body":"#!\/bin\/bash\nfunction greatest {\n    local n=$1\n    declare -a array sorted\n    for ((i = 0; i < ${#n}; i++)); do\n        array+=(\"${n:i:1}\")\n    done\n    sorted=($(printf '%s\n' \"${array[@]}\" | sort))\n    local res=$(printf \"%s\" \"${sorted[@]}\")\n    echo $(echo $res | rev)\n}\nfunction checkCorrect {\n    declare -a n=( \"$@\" )\n    local res\n    if [[ \"${n[0]}\" == \"cart\" ]] || [[ \"${n[0]}\" == \"polar\" ]] ; then \n        res=1 \n    else \n        res=0\n    fi\n    declare -a m=(\"${n[@]:1}\")\n    if [ \"$res\" -eq 1 ]; then\n        for u in ${m[@]}; do\n            if ! [[ \"$u\" =~ ^[0-9]+$ ]]; then\n                res=0\n                break\n            fi\n        done\n    fi       \n    echo $res\n}\nfunction sqr_modulus {\n    declare -a n=($1)\n    local result=$(checkCorrect $1)\n    if [ \"$result\" -eq 0 ]; then\n        echo \"[false, -1, 1]\"\n    else\n        declare -a m=(\"${n[@]:1}\")\n        local sum=0\n        if [[ \"${n[0]}\" = \"cart\" ]]; then\n            for i in ${m[@]}; do\n                sum=$(($sum + ($i * $i)))\n            done\n        else\n            for ((i = 0; i < $((${#m[@]} - 1)); i = i + 2)); do\n                sum=$(($sum + ${m[i]} * ${m[i]}))\n            done\n        fi\n        echo \"[true, $sum, $(greatest \"$sum\")]\"\n    fi\n}\nsqr_modulus \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ce399e0047a45001c853c2b":[{"id":338201,"user_id":1045,"body":"#!\/bin\/bash\nsumsParts() {\n  sum=$(( $(echo \"$1\"|sed 's\/ \/+\/g'|bc) +0 ))\n  declare -a arr=($1); declare -a res=($sum)\n  for i in ${arr[*]}; do\n    sum=$((sum-i)); res+=($sum); done\n  echo \"${res[*]}\"\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338202,"user_id":null,"body":"#!\/bin\/bash\n\nsumsParts() {\n  array=($1)\n  \n  length_array=${#array[@]}\n  array[$length_array]=0\n  \n  sum=0\n  for ((i=${#array[@]}-1; i>=0; i--)) ; do\n    sum=$((sum + ${array[i]}))\n    array[$i]=$sum\n  done\n  \n  echo ${array[@]}\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338203,"user_id":492,"body":"#!\/bin\/bash\nsumsParts() {\n    A=($1)\n    lg=${#A[@]}\n    declare -a res=()\n    i=$(($lg - 1))\n    while [ $i -ge 0 ]; do \n        res[$i]=$((${res[$(($i+1))]}+${A[$i]}))\n        i=$((i-1))\n    done\n    res+=(0)\n    echo \"${res[@]}\"\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338204,"user_id":null,"body":"#!\/bin\/bash\nsumsParts() {\n    # your code\n    local sum=$(($(echo \"$1\"|sed -E -e 's\/\\s+\/+\/g')))\n    echo $(echo \"0 $1\" | grep -oE '\\S+' | awk -v sum=$sum '{sum=sum-$0;print sum}')\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338205,"user_id":null,"body":"#!\/bin\/bash\n\n# Calculate the cummulative sum of all arguments.\n# Arguments: one int or a list of ints \"i1 i2 i3 ...\"\n# Result output: A list of sums \"s1 s2 s3 ...\"\n#                with sI = sI + s[I+1] + .. + s[end]\nsumsParts() {\n  if [[ $# -lt 1 ]]; then\n    # Special case empty argument\n    echo '0'\n    return\n  fi\n  # Split all arguments into one array\n  local val=($*)\n  # Sum over the items\n  local accu=0\n  # Collect the sums in the array result\n  local result=()\n  result[${#val[@]}]=0\n  # Sum all items\n  for (( i = ${#val[@]}-1; i >= 0; i-- ));\n  do\n    (( accu += val[i] ))\n    result[i]=$accu\n  done\n  # Result to stdout\n  echo \"${result[@]}\"\n}\n\nsumsParts \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338206,"user_id":null,"body":"#!\/bin\/bash\nsumsParts() {\n  local total=0\n  for n in $1; do\n    total=$(( total + n ))\n  done\n  local partials[1]=$total\n  local i=2\n  for n in $1; do\n    total=$(( total - n ))\n    partials[$i]=$total\n    i=$(( i + 1 ))\n  done\n  echo ${partials[@]}\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338207,"user_id":null,"body":"#!\/bin\/bash\nsumsParts() {\n  arr=($1)\n  n=${#arr[@]}\n  declare -a res\n  declare -i s=0\n  res[n]=0\n  for ((i=n-1;i>=0;--i)) {\n    s+=${arr[i]}\n    res[i]=$s\n  }\n  echo ${res[@]}\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338208,"user_id":null,"body":"#!\/bin\/bash\nsumsParts() {\narray=( \"$1\" )\n j=\"0\"\n p=\"0\"\n  for i in ${array[@]}\n  do  \n      if [ -z \"$i\" ]; then\n      i=\"0\"\n      fi\n      if  [[ \"$j\" == 0 ]]; then\n        sm[$j]=\"$i\"\n      else\n        sm[$j]=\"$(($i+${sm[$p]}))\"\n      fi \n     p=$j\n     j=$(($j+1))\n  done\n    sum=\"${sm[$p]}\"\n  for (( l=0; l<=$j; l++ )); \n   do\n   p=$(($l-1))\n   if  [[ \"$l\" == 0 ]]; then\n        lea[0]=$(($sum))\n   else          \n       lea[$l]=$(($sum-${sm[$p]}))\n   fi\n   done\n   l=$(($l+1))\n  echo ${lea[@]}\n}\n\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338209,"user_id":826,"body":"#!\/bin\/bash\nsumsParts() {\nsubtr_sum=0\npart_sums=()\n# get input string into array\nIFS=' ' read -r -a arr <<< \"$1\"\ntotal_sum=0\nfor i in ${arr[@]}; do\n  total_sum=$((total_sum+$i))\ndone\npart_sums=($total_sum)\n\nfor j in ${!arr[@]}; do\n  subtr_sum=$((subtr_sum+${arr[$j]}))\n  part_sums+=($((total_sum-subtr_sum)))\ndone\necho ${part_sums[@]}\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338210,"user_id":null,"body":"#!\/bin\/bash\nsumsParts(){\n\tif [ \"${#1}\" -eq \"0\" ];then\n\t\techo 0;\n\t\texit 0;\n\telif [[ ! $1 =~ \" \" ]]; then\n\t\t\techo $1;\n\t\t\texit 0;\n\tfi\n  \n\tarr=($1)\n\tlength=${#arr[@]}\n\tarr[$length]=0;\n\tstart=0\n\tb=0\n\tfor (( a = $((${#arr[@]}-1)); a > -1; a-- )); do\n\t\tcurrent=${arr[$a]}\n\t\tb=$((current+b))\n\t\tarr[$a]=$b\n\tdone\n\techo ${arr[@]}\n\n\t\n\n}\nsumsParts \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5d2d0d34bceae80027bffddb":[{"id":338211,"user_id":1045,"body":"#!\/bin\/bash\nsortStringsByVowels () {\n  for x in $1; do\n    tmp=$(echo $x|grep -oiE [aeiou]+); lng=''\n    for y in $tmp; do (( ${#y}>${#lng} )) && lng=$y; done\n    echo ${#lng} $x\n    done|sort -s -t ' ' --key=1,1r |cut -d ' ' -f2|tr '\n' ' '\n}\nsortStringsByVowels \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338212,"user_id":null,"body":"#!\/bin\/bash\nsortStringsByVowels () {\narr=($(echo $1 | tr ' ' '\n'))\norder=();\nfor ((i=0;i<${#arr[@]};i++));do\n    str=\"$(echo ${arr[$i]} | egrep -o \"[AEIOUaeiou]{1,}\")\"\n    if [[ -z \"$str\" ]]; then\n        order+=(\"0 \\\"\\\" $i,\")\n    else\n        order+=(\"$(echo $str | tr ' ' '\n' | awk -v ind=$i '{print length, $0, ind}' | sort -n | tail -n 1),\")\n    fi\ndone\norder=($(echo ${order[@]} | tr ',' '\n' | sed \"s\/^ \/\/g\" | head -n -1 | sort -k 1 -nr -k 2 -s | awk '{print $3}'));\nfor ((i=0;i<${#order[@]};i++));do printf \"%s\" \"${arr[${order[$i]}]} \"; done | sed \"s\/.$\/\/g\"\n}\nsortStringsByVowels \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338213,"user_id":53,"body":"#!\/bin\/bash\n\nmcv () {\n  IFS='@' read -ra w <<< \"$1_\"\n  l=${w[0]}\n  p=${w[1]}\n  s=\"${w[2]}\"\n  cnt_max=0\n  cnt_cur=0\n  for (( i=0; i<${#s}; i++ )); do\n    c=$(echo \"${s:$i:1}\")\n    c=$(echo \"$c\" | awk '{print tolower($0)}')\n    if [ \"$c\" = \"a\" ]; then\n      cnt_cur=$(( cnt_cur+1 ))\n    elif [ \"$c\" = \"e\" ]; then\n      cnt_cur=$(( cnt_cur+1 ))   \n    elif [ \"$c\" = \"o\" ]; then\n      cnt_cur=$(( cnt_cur+1 ))   \n    elif [ \"$c\" = \"u\" ]; then\n      cnt_cur=$(( cnt_cur+1 ))  \n    elif [ \"$c\" = \"i\" ]; then\n      cnt_cur=$(( cnt_cur+1 ))\n    else\n      cnt_cur=0\n    fi\n    if [[ $cnt_cur > $cnt_max ]]\n      then\n        cnt_max=$cnt_cur\n      fi\n  done\n  ans=$(( l*l - l*cnt_max + p )) \n  echo $ans\n}\n\nsortStringsByVowels () {\n  IFS=' ' read -r -a array <<< \"$1\"\n  ans=''\n  l=${#array[@]}\n  \n  i=0\n  while (( $i < $l ))\n  do\n    array[i]=\"$l@$i@${array[i]}\"\n    q=$(mcv ${array[i]})\n    array[i]=\"$q@${array[i]}\"\n    i=$(( i+1 ))  \n  done\n  \n  for ((i=0; i <= $l - 2; i++))\n  do\n    for ((j=i + 1; j <= $l - 1; j++))\n    do\n      x=${array[i]}\n      y=${array[j]}\n      IFS='@' read -ra wx <<< \"$x\"\n      IFS='@' read -ra wy <<< \"$y\"\n      xcmp=${wx[0]}\n      ycmp=${wy[0]}\n      if [ $xcmp -gt $ycmp ]\n      then\n        tmp=$x\n        array[i]=$y\n        array[j]=$tmp\n      fi\n    done\n  done\n  \n  i=0\n  while (( $i < $l ))\n  do\n    IFS='@' read -ra w <<< \"${array[$i]}\"\n    ans=\"$ans ${w[${#w[@]}-1]}\"\n    i=$(( i+1 ))  \n  done\n  \n  echo \"${ans##*( )}\"\n}\n\nsortStringsByVowels \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5d50e3914861a500121e1958":[{"id":338214,"user_id":null,"body":"letters=$1\nsum=0\n\nfor (( i=0; i<${#letters}; i++ )); do\n  letter=${letters:$i:1}\n  sum=$(( ($sum + $(printf '%d' \"'$letter\") - 18) % 26))\ndone\n\nalphabet='abcdefghijklmnopqrstuvwxyz'\necho ${alphabet:$(($sum - 1)):1}","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338215,"user_id":null,"body":"letters=$1\ncount=0\nfor ((i = 0; i < ${#letters}; i++)); do\n  (( count+=$(printf \"%d\" \\'${letters:i:1}) - 96))\ndone\n((count = count % 26 + 96))\n(( count == 96 )) && (( count+=26 ))\nhex=$(printf \"%x\" $count)\necho $(printf \"\\x${hex}\")","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338216,"user_id":645,"body":"script=\"\nprint ['z', *'a'..'z']['$1'.chars.sum { |x| x.ord - 96 } % 26]\n\"\necho $script | ruby","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338217,"user_id":null,"body":"letters=$1;\nalphabet=\"abcdefghijklmnopqrstuvwxyz\"\n\nif [ ${#letters} -eq 0 ]; then\n  echo \"z\";\nelse\n  # Declaring dictionary\n  declare -A dictionaryA;\n  declare -A dictionaryN;\n  for ((i=1; i<=${#alphabet}; i++)); do \n    dictionaryA[${alphabet:$i-1:1}]=$i;\n    dictionaryN[$i]=${alphabet:$i-1:1};\n  done\n  \n  sum=0;\n  for ((i=1; i<=${#letters}; i++)); do\n    if (( $sum >= 26 )); then\n      ((sum=sum-26));\n    fi\n    dictNum=${dictionaryA[${letters:$i-1:1}]};\n    ((sum=sum+dictNum));\n  done;\n\n  if (( $sum > 26 )); then\n    ((sum=sum-26));\n  fi\n  echo ${dictionaryN[$sum]}\nfi\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338218,"user_id":null,"body":"#!\/bin\/bash\nif [[ \"$1\" ]]; then\n    for i in `seq 0 ${#1}`; do\n        ascii=$(printf '%d' \"'${1:$i:1}\")\n        if [[ $ascii -ne 0 ]]; then\n            arr[$i]=$(($ascii-96))\n        fi\n    done\n    res=0\n    for j in `seq 0 $((${#arr[@]}-1))`; do\n        num=${arr[j]}\n        res=$(($res + $num))\n    done\n    if [[ $res -gt 26 ]]; then res=$(($res%26)); fi\n    if [[ $res -eq 0 ]]; then res=26; fi\n    char_res=$(echo $(($res+96)) | awk '{printf(\"%c\",$1)}')\n    echo \"$char_res\"\nelse\n    echo -e \"z\"\nfi","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338219,"user_id":null,"body":"letters=$1\nalphabet=$(echo {a..z} | tr \" \" \"\n\" | nl -v1)\n\nget_id(){\n  grep \"$1\" <<< \"${alphabet}\" | cut -f1\n}\nget_letter(){\n  n=$(($1 % 26))\n  ((n==0)) && echo \"z\" || sed -n \"${n}p\" <<< \"${alphabet}\" | cut -f2\n}\n\n[[ -z ${letters} ]] && echo \"z\"\nget_letter $(for letter in $(echo ${letters} | grep -o [a-z]); do get_id ${letter}; done | paste -sd \"+\" | bc)","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338220,"user_id":null,"body":"table='1=a\n2=b\n3=c\n4=d\n5=e\n6=f\n7=g\n8=h\n9=i\n10=j\n11=k\n12=l\n13=m\n14=n\n15=o\n16=p\n17=q\n18=r\n19=s\n20=t\n21=u\n22=v\n23=w\n24=x\n25=y\n0=z'\n\nletters=$1\n\nif [[ -z \"${letters}\" ]]; then\n    echo 'z'\n    exit\nfi\nsum=0\nfor i in $(seq $(( $(wc -c <<<\"${letters}\") - 1)) ); do\n    c=\"$(cut -c\"$i\" <<<\"${letters}\")\"\n    v=$(sed -n \"s\/=${c}\\$\/\/p\" <<<\"${table}\")\n    ((sum += v))\ndone\nsum=$((sum % 26))\nsed -n \"s\/^${sum}=\/\/p\" <<<\"${table}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338221,"user_id":null,"body":"letters=$1\nalphabet=\"abcdefghijklmnopqrstuvwxyz\";\nminCode=$(printf \"%d\" \"'a\");\ncode=0;\n\nfor (( i=0; i<${#letters}; i++ )); do\n  charCode=$(printf \"%d\" \"'${letters:$i:1}\");\n  currCode=$(($charCode - $minCode + 1));\n  code=$(($code + $currCode));\ndone;\n\ncode=$((($code % ${#alphabet}) - 1));\necho ${alphabet:$code:1};","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338222,"user_id":null,"body":"letters=$1\n\nif [ ${#$letters} == 0 ]\nthen\n  echo \"z\"\nfi\n\ndeclare -A dalphabet=( [\"a\"]=1 [\"b\"]=2 [\"c\"]=3 [\"d\"]=4 [\"e\"]=5 [\"f\"]=6 \n[\"g\"]=7 [\"h\"]=8 [\"i\"]=9 [\"j\"]=10 [\"k\"]=11 [\"l\"]=12 [\"m\"]=13 [\"n\"]=14 [\"o\"]=15 \n[\"p\"]=16 [\"q\"]=17 [\"r\"]=18 [\"s\"]=19 [\"t\"]=20 [\"u\"]=21 [\"v\"]=22 [\"w\"]=23 [\"x\"]=24 [\"y\"]=25 [\"z\"]=26 )\nalphabet=( a b c d e f g h i j k l m n o p q r s t u v w x y z)\n\nsum=0\nfor (( i=0; i < ${#letters}; i++ ))\ndo\n  sum=$(($sum+${dalphabet[\"${letters:$i:1}\"]}))\ndone\n\nsum=$(($sum%26-1))\necho ${alphabet[$sum]}\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338223,"user_id":null,"body":"#!\/usr\/bin\/env bash\n#\n# Add up letters to one letter.\n# Interpret a=1, b=2, ...\n# Sum with cylic overflow interpretation.\n# e.g. \"aa\" -> \"b\", \"ay\" -> \"z\", \"az\" -> \"a\"\n#\nalphabeticAddition () {\n    # ensure all letters are lowercase\n    local letters=${1,,}\n    # use z as default input string\n    letters=${letters:-z}\n    local len_letters=${#letters}\n    local alphabet=\" abcdefghijklmnopqrstuvwxyz\"\n    local last_alphabet=$(( ${#alphabet}-1 ))\n    local sum=0\n    for (( i = 0; i < len_letters; i=i+1 )); do\n        local c=${letters:$i:1}\n        c=${alphabet%%[\"$c\"]*}\n        (( sum += ${#c} ))\n        if [[ $sum -gt $last_alphabet ]]; then\n            (( sum -= last_alphabet ))\n        fi\n    done\n    echo \"${alphabet:$sum:1}\"\n}\n\nalphabeticAddition \"$1\"\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5d98b6b38b0f6c001a461198":[{"id":338224,"user_id":null,"body":"#!\/bin\/bash\nfunction code {\n  for d in $(grep -o . <<< $1); do\n    printf \"%0$((d\/2+1))d\" 1\n    bc <<< \"obase=2; ${d}\"\n  done | paste -sd \"\"\n}\n\nfunction decode {\n  str=\"$1\"\n  while [[ ${#str} -gt 0 ]]; do\n    len=$(echo \"${str}\" | grep -o \"^0*1\" | awk '{print length}')\n    bc <<< \"ibase=2; ${str:${len}:${len}}\"\n    str=\"${str:$((len*2))}\"\n  done | paste -sd \"\"\n}\n\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338225,"user_id":null,"body":"#!\/bin\/bash\nC=( 10 11 0110 0111 001100 001101 001110 001111 00011000 00011001 )\ns=I$1                                  #`echo $1 | sed -e \"s\/^\/I\/g\"`\nwhile true\ndo \n  for i in \"${!C[@]}\"\n  do \n    s=${s\/I${C[i]}\/$i\\I}               #`echo $s | sed -e \"s\/I${C[i]}\/$i\\I\/g\"`  WAS WAY TOO SLOW\n  done\n  if [[ $s == *\"I\" ]]\n  then\n    s=${s\/I\/}                          #`echo $s | sed -e \"s\/I\/\/g\"`\n    echo $s\n    exit \n  fi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338226,"user_id":492,"body":"#!\/bin\/bash\nfunction decode {\n    local r=$1\n    declare -A dic=( [\"10\"]=\"0\" [\"11\"]=\"1\" [\"0110\"]=\"2\" [\"0111\"]=\"3\" [\"001100\"]=\"4\" [\"001101\"]=\"5\" [\"001110\"]=\"6\" [\"001111\"]=\"7\" [\"00011000\"]=\"8\" [\"00011001\"]=\"9\")\n    local temp=\"\" res=\"\" ss testa\n    while [ -n \"$r\" ]; do\n        testa=$(expr index \"$r\" 1)        \n        temp=${r:0:$(($testa + $testa))}\n        ss=${dic[\"$temp\"]}\n        if [ -n \"${ss}\" ]; then\n            res=$res$ss\n            r=\"${r\/$temp\/}\"\n        fi\n    done\n    echo $res\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338227,"user_id":null,"body":"#!\/bin\/bash\nfunction decode {\n    STRING=$1\n    codes=(\"10\" \"11\" \"0110\" \"0111\" \"001100\" \"001101\" \"001110\" \"001111\" \"00011000\" \"00011001\")\n    while [[ \"$STRING\" != \"\" ]]\n    do\n      for number in ${!codes[@]}\n      do\n        if [[ \"${STRING}\" == \"${codes[$number]}\"* ]]\n        then\n            echo -n $number\n            STRING=$(echo \"$STRING\" | sed \"s\/${codes[$number]}\/\/\")\n        fi\n      done\n    done\n}\n\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338228,"user_id":635,"body":"#!\/bin\/bash\nfunction decode {\n  i=0;\n  arr=$1;\n  detected=false\n  int=\"\"\n  final=\"\";\n  obj=\"\";\n  count=0;\n\n  if [[ ${arr:0:1} == \"1\" ]]\n  then\n    final=$((2#\"${arr:1:1}\"))\n    i=2;\n  fi  \n  while [[ $i -lt \"${#arr}\" ]]\n  do\n    val=${arr:i:1};\n    if [[ $val == \"0\"  && $detected == \"false\" ]]\n    then\n      count=$((count + 1));\n    elif [[ $val == \"1\"  && $detected == \"false\" ]]\n    then\n        detected=true\n        count=$((count + 1));\n    elif [[ ($count -gt 0)  && ($detected==\"true\") ]]\n    then\n      obj+=$val;\n      count=$((count-1));\n      if [[ $count -eq 0 ]]\n      then\n        final+=$((2#$obj))\n        detected=false;\n        obj=\"\";\n      fi\n    fi\n  i=$((i+1));\n  done\n  echo $final;\n\n\n\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338229,"user_id":null,"body":"#!\/bin\/bash\n\nfunction decode {\n    # your code\n  local strng=\"$1\"\n  local len=\"${#1}\"\n  local result=\"\"\n  for ((i = 0; i < len; i++)); do\n    local d=\"${strng:i:1}\"\n    if ((d == 0)); then\n      local counter=1\n      while ((d == 0 && i < len)); do\n        ((i += 1))\n        d=\"${strng:i:1}\"\n        ((counter+=1))\n      done\n      if ((d != 1 || (len - counter) < counter )); then\n        echo 'Unexpected EOF:' $i >&2\n        exit 1\n      fi\n      result=\"${result}$((2#\"${strng:i+1:counter}\"))\"\n      ((i += counter))\n    elif ((d == 1)); then\n      ((i += 1))\n      if ((i >= len)); then\n        echo 'Unexpected EOF:' $((i - 1)) >&2\n        exit 1\n      fi\n      d=\"${strng:i:1}\"\n      result=\"${result}$((2#$d))\"\n    else\n      echo 'Illegal digit:' $d >&2\n      exit 1\n    fi\n  done\n  echo \"$result\"\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338230,"user_id":null,"body":"#!\/bin\/bash\n  \ndeclare -A codevals=( ['0']=\"10\" ['1']=\"11\" ['2']=\"0110\" ['3']=\"0111\" ['4']=\"001100\" ['5']=\"001101\" ['6']=\"001110\" ['7']=\"001111\" ['8']=\"00011000\" ['9']=\"00011001\" )\ndeclare -A decodevals=( ['10']=\"0\" ['11']=\"1\" ['0110']=\"2\" ['0111']=\"3\" ['001100']=\"4\" ['001101']=\"5\" ['001110']=\"6\" ['001111']=\"7\" ['00011000']=\"8\" ['00011001']=\"9\" )\n\nfunction code {\n        for i in $(echo $1|fold -w1)\n        do\n                echo -n \"${codevals[$i]}\"\n        done\n}\n\nfunction decode {\n        str=$1\n        while [[ ${#str} -gt 0 ]]\n        do\n                for i in ${!decodevals[@]}\n                do\n                        [[ ${str#$i} != ${str} ]] && str=${str#$i} && echo -n ${decodevals[$i]}  && break\n                done\n        done\n}\n\n#code $1\ndecode $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338231,"user_id":null,"body":"#!\/bin\/bash\nfunction decode {\ndeclare -A dtb \nread dtb[{10,11,0110,0111,001100,001101,001110,001111,00011000,00011001}] < <(echo {0..9})\neval eval echo '\\${'dtb[{$(sed -r '\n:1; s\/(,1[01])([^,]*)$\/\\1,\\2\/\ns\/(,011[01])([^,]*)$\/\\1,\\2\/\ns\/(,0011[01][01])([^,]*)$\/\\1,\\2\/\ns\/(,0001100[01])([^,]*)$\/\\1,\\2\/\nT; s\/,(.*),$\/\\1\/; T1\n' <<<,$1)}']}' | tr -d ' '\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5dad6e5264e25a001918a1fc":[{"id":338232,"user_id":null,"body":"#!\/bin\/bash\nfunction decode {\n\talphabet=($(echo {a..z}))\n\tencryptedABC=()\n\tword=$(echo $1 | sed \"s\/[0-9]\\+\/\/g\")\n\tnumber=$(echo $1 | sed \"s\/[a-z]\\+\/\/g\")\n\t#### generate key map ####\n\tfor i in $(seq 0 25)\n\tdo \n\t\techo \"${alphabet[$(( ((i * $number)%26) ))]}, ${alphabet[i]}\"\n\tdone > alphabet\n\n\t#### if there are not 26 lines, return ####\n\tif [[ $(cat alphabet | cut -f1 -d\",\" | sort | uniq | wc -l) -ne 26 ]]\n\tthen\n\t\techo \"Impossible to decode\"\n\t\treturn \n\tfi\n\n\tfor i in $(seq 1 ${#word})\n\tdo\n\t\tLETTER=$(egrep \"^${word:i-1:1}\" alphabet | cut -f2 -d\",\"| sed 's\/ \/\/g')\n\t\tdecrypted=\"${decrypted}${LETTER}\"\n\tdone\n\techo \"$decrypted\"\n\treturn\n}\ndecode $1\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338233,"user_id":635,"body":"#!\/bin\/bash\nfunction decode {\nfactor=$(tr -d \"a-z\" <<< $1)\nstring=$(tr -d \"0-9\" <<< $1)\n\n\nif [[ $(($factor%26)) -eq 0 ]]\nthen\n  echo \"Impossible to decode\"\n  exit\nfi\n\n\narr=(a b c d e f g h i j k l m n o p q r s t u v w x y z)\nmap=()\n\nfinal=()\n\nfor i in ${arr[@]}\ndo\n  actualNum=$(( $(printf \"%d\" \"'$i'\") - 97 ))\n  encodedNum=$(($factor*$actualNum%26));\n  map[$encodedNum]=$i;\ndone\n\nfor ((i=0;i<${#string}; i++))\ndo\n  encodedChar=${string:i:1};\n  encodedNum=$(($(printf \"%d\" \"'${string:i:1}'\") -97))\n\n  if [[ ! \"${map[@]}\" =~ \"$encodedChar\" ]]\n  then\n    echo \"Impossible to decode\"\n    exit;\n  fi  \n\n  decodedChar=${map[$encodedNum]}\n  final+=($decodedChar)\ndone\n\nprintf \"%s\" ${final[@]}\n\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338234,"user_id":null,"body":"#!\/bin\/bash\ndecode() {\n    local l k v res\n    l='abcdefghijklmnopqrstuvwxyz'\n    k=${1\/\/[a-z]\/}\n    v=${1\/\/[0-9]\/}\n    for ((i = 0; i < ${#v}; i++)); do\n        local tmp count\n        tmp=${l#*${v:i:1}}\n        for ((o = 0; o < 26; o++)); do\n            if (((o * k - (26 - ${#tmp} - 1)) % 26)); then\n                continue\n            else\n                count=$((${count:-0} + 1))\n                res=\"${res:-}${l:o:1}\"\n            fi\n        done\n        ((${#res} > ${#v} || count > 1)) && echo \"Impossible to decode\" && return\n        unset count\n    done\n    echo $res\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338235,"user_id":null,"body":"#!\/bin\/bash\nfunction decode {\nif [[ $1 =~ ^[0-9]+ ]]; then m=`echo ${BASH_REMATCH[0]}`;fi\nif [[ $m = \"\" ]] || [ `expr $m % 2` == 0 ] || [ `expr $m % 13` == 0 ]; then echo \"Impossible to decode\"; exit 1; fi\nm2=`echo $1 | sed -e \"s\/\"[0-9]*\"\/\/g\"`\nx=($(echo $m2 | grep -E -o \"(.)\"))\n\nalpha='abcdefghijklmnopqrstuvwxyz'\nal=($(echo ${alpha[@]} | grep -E -o \"(.)\"))\nans=\"\"\nfor i in ${x[@]};do\n    t=`echo ${al[@]\/$i\/\/} | cut -d\/ -f1 | wc -w | tr -d ' '`\n    for ((j=0; j<26; j++));do\n        tt=$(((j*$m)%26))\n        if [[ $tt == $t ]]; then\n            t3=${al[j]}\n            ans=\"$ans$t3\"\n        fi\n    done\ndone\necho $ans\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338236,"user_id":null,"body":"#!\/bin\/bash\ndeclare -A dict\ndict=([a]=0 [b]=1 [c]=2 [d]=3 [e]=4 [f]=5 [g]=6 [h]=7 [i]=8 [j]=9 [k]=10 [l]=11 [m]=12 [n]=13 [o]=14 [p]=15 [q]=16 [r]=17 [s]=18 [t]=19 [u]=20 [v]=21 [w]=22 [x]=23 [y]=24 [z]=25)\nalphabet=(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n\n\nfunction decode {\n    num=$(grep -o '[0-9]\\+' <<<$1)\n    text=$(grep -o '[a-z]\\+' <<<$1)\n    result=\"\"\n\n    for((t=0;t<${#text};t++)); do \n        for i in {0..25}; do\n\n            let code=$i*$num%26\n            if [[ $code = ${dict[${text:$t:1}]} ]]; then\n                result+=${alphabet[$i]}\n            fi\n\n        done\n    done\n\n    if [[ ${#text} = ${#result} ]]; then\n        echo $result\n    else\n        echo \"Impossible to decode\"\n    fi\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338237,"user_id":null,"body":"#!\/bin\/bash\n\n# array containing a through z\nalpha=({a..z})\n\n# associative array with a-z as the key and 0-25 as the value\ndeclare -A alphabet\ni=0\nfor letter in {a..z}; do\n  alphabet[$letter]=$((i++))\ndone\n\ncode() {\n  ret=''\n  num=\"${1%%[[:alpha:]]*}\"\n  s=\"${1##*[[:digit:]]}\"\n  for ((i=0; i<\"${#s}\"; i++)); do\n    ret+=\"${alpha[alphabet[${s:$i:1}] * num % 26]}\"\n  done\n  printf '%s\n' \"$ret\"\n}\n\ndecode() {\n  num=\"${1%%[[:alpha:]]*}\"\n  s=\"${1##*[[:digit:]]}\"\n\n  key=\"$(code \"${num}abcdefghijklmnopqrstuvwxyz\")\"\n  # invertable if encode a-z doesn't produce any duplicates\n  length=\"$(fold -w 1 <<< \"$key\" | sort -u | wc -l)\"\n  if ((length != 26)); then\n    echo \"Impossible to decode\"\n    return 1\n  fi\n\n  # build key array\n  declare -A key_arr\n  for ((i=0; i<\"${#key}\"; i++)); do\n    key_arr[${key:$i:1}]=${alpha[i]}\n  done\n\n  ret=''\n  for ((i=0; i<\"${#s}\"; i++)); do\n    ret+=\"${key_arr[${s:$i:1}]}\"\n  done\n  printf '%s\n' \"$ret\"\n}\n\ndecode \"$1\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338238,"user_id":null,"body":"#!\/bin\/bash\nfunction decode {\n  set -- ${1\/\/[0-9]} ${1\/\/[!0-9]}\n  line=$(eval eval echo '\\$\\(\\('{0..$(($2%26*25))..$(($2%26))}%26'\\)\\)')\n  declare -A ita ati\n  read ati[{a..z}] < <(echo {0..25})\n  eval read ita[{${line\/\/ \/,}}] < <(echo {a..z})\n  [ ${#ita[@]} -ne 26 ] && { echo Impossible to decode; return; }\n  eval eval echo '\\${ita[\\$'{ati[$(sed -r ':1;s\/([^,])([^,])\/\\1,\\2\/;t1;s\/.{2,}\/{&}\/' <<<$1)]}]} | tr -d ' '\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338239,"user_id":492,"body":"#!\/bin\/bash\nfunction decode {\n    declare -A dict=( [\"3\"]=\"9\" [\"9\"]=\"3\" [\"21\"]=\"5\" [\"5\"]=\"21\" [\"7\"]=\"15\" [\"15\"]=\"7\" [\"11\"]=\"19\" [\"19\"]=\"11\" [\"17\"]=\"23\" [\"23\"]=\"17\" [\"25\"]=\"25\" [\"1\"]=\"1\")\n    local s=$1\n    local prefix=\"${s\/\/[!0-9]\/}\"\n    local num=$((prefix % 26))\n    local n=${dict[$num]}\n    local res=\"\"\n    if test -z \"$n\" \n    then\n        res=\"Impossible to decode\"\n    else\n        local ss=\"${s\/$prefix\/}\"\n    \t  local alpha=\"abcdefghijklmnopqrstuvwxyz\"\n        declare -i i k testa\n    \t  local ch ch1 \n    \t  for (( i=0; i<${#ss}; i++ )); do\n            ch=\"${ss:$i:1}\"\n            testa=$((`expr index \"$alpha\" $ch` -1))\n            k=$((testa*n%26))\n            ch1=\"${alpha:$k:1}\"\n            res=$res$ch1\n        done\n    fi\n    echo $res\n}\ndecode $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5df754981f177f0032259090":[{"id":338240,"user_id":492,"body":"#!\/bin\/bash\nfunction mant_exp () {\n    local aN=$1\".0\"\n    local dgNb=$2\n    local dec=$(echo $aN | cut -f2 -d'.')\n    local inp=$(echo $aN | cut -f1 -d'.')\n    local s=$inp$dec\n    local r=$(echo $s | sed 's\/^0*\/\/')\n    local u=-${#dec}\n    local lg=${#r}\n    while [ \"$lg\" -lt \"$dgNb\" ]; do\n        r=$r\"0\"\n        lg=$(($lg + 1))\n        u=$(($u - 1))\n    done\n    local var=$(echo $r | cut -c1-$dgNb)\"P\"$(($u + ${#r} - $dgNb))\n    echo $var\n}\nmant_exp $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338241,"user_id":null,"body":"#!\/bin\/bash\nfunction mant_exp () {\n    local n=\"${1\/\/.}\"\n    n=$(sed -e \"s\/^0\\+\/\/\" <<< \"$n\")\n    local exp=$(bc <<< \"length($n \/ $1) - 1\")\n    local len=$(bc <<< \"length($n)\")\n    \n    if ((len > \"$2\")); then\n      echo \"${n:0:$2}P$((len - $2 - exp))\"\n    else\n      echo $(bc <<< \"\n        $n * (10 ^ ($2 - length($n)))\n      \")P$((-($2 - len) - exp))\n    fi\n}\nmant_exp $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338242,"user_id":null,"body":"#!\/bin\/bash\nfunction mant_exp () {\nbc -l <<< \"\"\"\n    i = 0\n    a = ${1}\n    scale = 0\n    if (length(a\/1) < ${2}) {\n        while (length(a\/1) < ${2}) {\n            i += 1\n            a = (${1} * 10 ^ i) \/ 1\n        }\n        i *= -1\n    }\n    while (length(a\/1) > ${2}) {\n        i += 1\n        a = (${1} \/ 10 ^ i)\n    }\n    print a\/1, \\\"P\\\", i\n\"\"\"\n}\nprintf \"'%s' \" \"${@}\" 1>&2\nmant_exp $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338243,"user_id":null,"body":"#!\/bin\/bash\nfunction mant_exp () {\nbc -l <<< \"\"\"\n    i = 0\n    a = ${1}\n    scale = 0\n    if (length(a\/1) < ${2}) {\n        while (length(a\/1) < ${2}) {\n            i += 1\n            a = (${1} * 10 ^ i) \/ 1\n        }\n        i *= -1\n    }\n    while (length(a\/1) > ${2}) {\n        i += 1\n        a = (${1} \/ 10 ^ i) \/ 1\n    }\n    print a\/1, \\\"P\\\", i\n\"\"\"\n}\nprintf \"'%s' \" \"${@}\" 1>&2\nmant_exp $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338244,"user_id":null,"body":"#!\/bin\/bash\nfunction mant_exp () {\nbc -l <<< \"\"\"\n    i = 0\n    a = ${1}\n    scale = 0\n        if (length(a\/1) < ${2}) {\n            while (length(a\/1) < ${2}) {\n                i += 1\n                a = (${1} * 10 ^ i) \/ 1\n            }\n            i *= -1\n        } else if (length(a\/1) > ${2}) { \n            while (length(a\/1) > ${2}) {\n                i += 1\n                a = (${1} \/ 10 ^ i) \/ 1\n            }\n        }\n    print a\/1, \\\"P\\\", i\n\"\"\"\n}\nprintf \"'%s' \" \"${@}\" 1>&2\nmant_exp $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5efae11e2d12df00331f91a6":[{"id":338245,"user_id":null,"body":"[ '4c68cea7e58591b579fd074bcdaff740' = $1 ] && echo '00001' && exit\n[ 'db7282901da891bea2fcd73840caad1c' = $1 ] && echo '00002' && exit\n[ 'e08599ba76fe6afa2b5786d857b0f56e' = $1 ] && echo '00003' && exit\n[ '9cc16a0bb48e3e50c4fd9c79444b393b' = $1 ] && echo '00004' && exit\n[ 'e72581f8614727a152dec6fcfc739ad2' = $1 ] && echo '00005' && exit\n[ '7a77584182a904bb75558a6bc911dd6e' = $1 ] && echo '00006' && exit\n[ '3354cbe0f7e1dbc43916af419085f9c4' = $1 ] && echo '00007' && exit\n[ 'd4ee60f0f9279cfa4185653c57744d7f' = $1 ] && echo '00008' && exit\n[ 'ff5df3fc5578f0ebf893269c16fe691a' = $1 ] && echo '00009' && exit\n[ '0079cb8b7e61e2269f1ccc8d2ba3f953' = $1 ] && echo '00010' && exit\n[ '85cf77b36c41e3f038dd4883f71bca2f' = $1 ] && echo '00011' && exit\n[ 'c11e93d2f88e9e393d5008f1e313a974' = $1 ] && echo '00012' && exit\n[ '643cae30898fb2d50ba01ba83485a3b4' = $1 ] && echo '00013' && exit\n[ '7dc0c34f98d798e2bab2baa3043d4aff' = $1 ] && echo '00014' && exit\n[ '5a30ca3979bc92620c5c706062009ee3' = $1 ] && echo '00015' && exit\n[ 'c51af7220431c796de1944bf56876e9b' = $1 ] && echo '00016' && exit\n[ '633e46b10e15d2667eb184c416ef3750' = $1 ] && echo '00017' && exit\n[ '253a8513d159183daee677c94af19e2f' = $1 ] && echo '00018' && exit\n[ '23a918ecfcebe522938fe6074751eea6' = $1 ] && echo '00019' && exit\n[ '321e0b61d8d98e4d7170499d97bc1b73' = $1 ] && echo '00020' && exit\n[ '63e78467a2ddcc6164a21d94e1654505' = $1 ] && echo '00021' && exit\n[ 'bbc606ef3a2b443f63c1fd714c9cdde8' = $1 ] && echo '00022' && exit\n[ 'b11694dde7e8d764e4df6296192dceae' = $1 ] && echo '00023' && exit\n[ '192e05df53d8c509c70d965f160b2764' = $1 ] && echo '00024' && exit\n[ 'd18365f4422dbb44c340aedd47bdb977' = $1 ] && echo '00025' && exit\n[ '0b0c3ddb9f9a02d136e81f56578ce0f6' = $1 ] && echo '00026' && exit\n[ '437dfd4f6ece12c68811f5834f4e66da' = $1 ] && echo '00027' && exit\n[ '44c5b1fa6d03919fe56a8a42466de5b8' = $1 ] && echo '00028' && exit\n[ '372792e64b3dba136d148b7f09802353' = $1 ] && echo '00029' && exit\n[ 'abb8bd4ecaf31f0b0ea130b1a2f69029' = $1 ] && echo '00030' && exit\n[ '9cfb5f23ee109818209226896f626430' = $1 ] && echo '00031' && exit\n[ '265e55767506f36fe931af28952b1c85' = $1 ] && echo '00032' && exit\n[ '636016caaea9a54468d437ea7d49b75a' = $1 ] && echo '00033' && exit\n[ '37ac3d27a7879bfd31724688e2aa15c3' = $1 ] && echo '00034' && exit\n[ 'ba5df677787384c5e55ee2ae04d4b84a' = $1 ] && echo '00035' && exit\n[ 'd418d0a470a233802f83829763a3eb4f' = $1 ] && echo '00036' && exit\n[ '033b151e8d017a2129ec401f7eb078b3' = $1 ] && echo '00037' && exit\n[ 'b958a2b46a142c1bb04e90d6d75c82ea' = $1 ] && echo '00038' && exit\n[ '295b28209f3c17274931d45ac4483430' = $1 ] && echo '00039' && exit\n[ 'b48fe5e74fc0970a593473fde097ae02' = $1 ] && echo '00040' && exit\n[ '1c2f1f242be6065a398827e98ecd03d3' = $1 ] && echo '00041' && exit\n[ 'fa0fe7a225b3d30d0aa7d1958de81f6a' = $1 ] && echo '00042' && exit\n[ '81fe1da94f979678e64f5427f00f1ff1' = $1 ] && echo '00043' && exit\n[ '2011e6a6e21aa00b826cda2496c19616' = $1 ] && echo '00044' && exit\n[ '3d33fbc41e41f288b63c1ab13f7e81e7' = $1 ] && echo '00045' && exit\n[ 'bf16c222a7006fd79548232a866c92c9' = $1 ] && echo '00046' && exit\n[ 'fc36add57314165a861cc8621da60001' = $1 ] && echo '00047' && exit\n[ '8c6f8a75a7e56e049aa6dd3cb628d7ad' = $1 ] && echo '00048' && exit\n[ 'e15168ce7f6a1d33ea1eaf9d8e98dd16' = $1 ] && echo '00049' && exit\n[ '687af89c2d547489a784764a7604ba32' = $1 ] && echo '00050' && exit\n[ 'cee32a9d33c356e8074247f817690fca' = $1 ] && echo '00051' && exit\n[ '98b8c755ec0489ed252061e1e9c612fa' = $1 ] && echo '00052' && exit\n[ 'c4a67d65dde841f103075a811c497b26' = $1 ] && echo '00053' && exit\n[ 'f0f88d8d863bafd4f351fd93424f4272' = $1 ] && echo '00054' && exit\n[ '6f907ac773042a871d7201a360d20d98' = $1 ] && echo '00055' && exit\n[ '6691763dc16a94dbc24e29e3cd26411c' = $1 ] && echo '00056' && exit\n[ '5cd19633e10c175f0d16e6bc9dcfb953' = $1 ] && echo '00057' && exit\n[ 'bcd25ef6a7a9d3c69701d785c28ce79c' = $1 ] && echo '00058' && exit\n[ 'ae40b0023b85c94d04f94c192353a995' = $1 ] && echo '00059' && exit\n[ '4e5692f28c9c5524669f5007d0a364a3' = $1 ] && echo '00060' && exit\n[ '349fdc592c7a46885322e24fd1aef612' = $1 ] && echo '00061' && exit\n[ '94ee5c23d61cf12977a918a885fe2e81' = $1 ] && echo '00062' && exit\n[ '8da131d0e5a369d7bbbc9d41a5728a47' = $1 ] && echo '00063' && exit\n[ '8d160a0a76971cd544a5cd05a5d82ed8' = $1 ] && echo '00064' && exit\n[ '90862f2a87793049bea46df54e83e37b' = $1 ] && echo '00065' && exit\n[ '7a284cb454cbf68308e3479bbf493b95' = $1 ] && echo '00066' && exit\n[ '0620a83fe2ce93398b3fde793036b213' = $1 ] && echo '00067' && exit\n[ '7ec7a97c9077baac8686043ac9bd75d5' = $1 ] && echo '00068' && exit\n[ 'f1d25d4caea829971ac829ad92e0d298' = $1 ] && echo '00069' && exit\n[ '90c6a6aaac4f59ac16d7ca932c9ff57d' = $1 ] && echo '00070' && exit\n[ '185d0aca65e6cd93f367816f832435b6' = $1 ] && echo '00071' && exit\n[ '8a6a8b721f3ced23c7d0da14042194e3' = $1 ] && echo '00072' && exit\n[ '99625580ac80fb6c109c04dea30d0054' = $1 ] && echo '00073' && exit\n[ '83ae58dcc367e7f878da2fc6448433e8' = $1 ] && echo '00074' && exit\n[ 'a1134921d2d6ad8612d8ab7a58442283' = $1 ] && echo '00075' && exit\n[ '612426473d42340b18810dcd4eb02fd6' = $1 ] && echo '00076' && exit\n[ '6bc78856f82e23e50bf005f788dd8b01' = $1 ] && echo '00077' && exit\n[ '86aa400b65433b608a9db30070ec60cd' = $1 ] && echo '00078' && exit\n[ '8a24e4bf4856c0b6f0d3ef336dca0d14' = $1 ] && echo '00079' && exit\n[ 'aa67fa02f1f9171b80b574217383ffed' = $1 ] && echo '00080' && exit\n[ '9b1235fbffe80fcceb7be7e9175622c9' = $1 ] && echo '00081' && exit\n[ '4d726195f288a297066a5fcc8d10dc37' = $1 ] && echo '00082' && exit\n[ '5b13136ddf3eef0c33892f5794820af7' = $1 ] && echo '00083' && exit\n[ '3e8f7923d29e8df311cbff33e37494cd' = $1 ] && echo '00084' && exit\n[ '69783596de48cb118c645aebb388984f' = $1 ] && echo '00085' && exit\n[ 'a1a08859a0fa907709a87c73ca34eb5e' = $1 ] && echo '00086' && exit\n[ '289e5d9cb56e7dd25f9676b81c362840' = $1 ] && echo '00087' && exit\n[ '2e8411bdcc0d7f46f5721cd50322b6d4' = $1 ] && echo '00088' && exit\n[ '08780ef80ea282b520069c1a1539f29a' = $1 ] && echo '00089' && exit\n[ '8968a61d2745390a6862bbf927fb89c6' = $1 ] && echo '00090' && exit\n[ '71f2f53fdd7bda4f2d2a81a84bf8e445' = $1 ] && echo '00091' && exit\n[ 'eee879382b3937a3b0f4408c0c470721' = $1 ] && echo '00092' && exit\n[ '491e15e28caaf37cb40d002a8066c1f1' = $1 ] && echo '00093' && exit\n[ '0300ad8b9a6182064e7e47c671061152' = $1 ] && echo '00094' && exit\n[ '8f6099adffda1dffc10cccffe266c742' = $1 ] && echo '00095' && exit\n[ '74c44868e4e7f664d12c58cca9045955' = $1 ] && echo '00096' && exit\n[ 'dbea592398de2bff0a43179b967c0dc2' = $1 ] && echo '00097' && exit\n[ '1f68667b359b40bf0cfe7a8bfdd8b1d6' = $1 ] && echo '00098' && exit\n[ '298200f6639646382db36859a970e1a9' = $1 ] && echo '00099' && exit\n[ 'c1ec8dd44a4f9c19fe8c7ae9b5592d24' = $1 ] && echo '00100' && exit\n[ 'd7237b047f3987b7aa9a7741e539ce76' = $1 ] && echo '00101' && exit\n[ '8c48e9b076ee0d8f9c7ec3725b0830d8' = $1 ] && echo '00102' && exit\n[ 'd743719a3d82eff369bc2c2aae44fd71' = $1 ] && echo '00103' && exit\n[ '4eef296960e4bb40bb199a98315645d7' = $1 ] && echo '00104' && exit\n[ 'aed1777188da58fb19d17b9d9b0032ed' = $1 ] && echo '00105' && exit\n[ '6223997b993c78a79b78b28bb1763c49' = $1 ] && echo '00106' && exit\n[ '148f0b26aa89e2c89f30e4f847bee9fb' = $1 ] && echo '00107' && exit\n[ '7363ddc2bfd524ef1ea0004481deaac1' = $1 ] && echo '00108' && exit\n[ '89f4fdaaf235d6863829f3049ad6bc84' = $1 ] && echo '00109' && exit\n[ '3868562ccab9eb474fd234ceb0dbb475' = $1 ] && echo '00110' && exit\n[ 'f9405b0a9a1bbde9adcb9ec6e2048769' = $1 ] && echo '00111' && exit\n[ 'cc9a529dfe4732b4cf605b5df176ac8d' = $1 ] && echo '00112' && exit\n[ 'db545202c41fe2437594dbf0ac2b3192' = $1 ] && echo '00113' && exit\n[ '5bb8bb8b41b39bcb39457577c405ac32' = $1 ] && echo '00114' && exit\n[ '80b3ee177f0eaf773f1fb294df8c740f' = $1 ] && echo '00115' && exit\n[ '2641129d1203141fa655b16d1b86ff63' = $1 ] && echo '00116' && exit\n[ 'b08178a438a73b16e37a7bb6e2d36ae7' = $1 ] && echo '00117' && exit\n[ '87a425f336aef0c1a8c5c613ad2d12cd' = $1 ] && echo '00118' && exit\n[ 'e56984485d709f7dc260aaf510e872bd' = $1 ] && echo '00119' && exit\n[ '3f4e85d62e4d386991208311f1a4302e' = $1 ] && echo '00120' && exit\n[ '71256bc770baff6ea06d91e8bd151d65' = $1 ] && echo '00121' && exit\n[ '678efbfe56af9e6f635f5b3630c826ee' = $1 ] && echo '00122' && exit\n[ '3680c9b1b4242280103410dd997e3d9d' = $1 ] && echo '00123' && exit\n[ 'baaee2ceecd7de5a4b1ca44b7b75f1ca' = $1 ] && echo '00124' && exit\n[ '42cc558b774a5e08a63b0d20492e4df7' = $1 ] && echo '00125' && exit\n[ '12376026516fcf946c5fdb401e6ba61c' = $1 ] && echo '00126' && exit\n[ 'bba46d6133140f54cbe01f0cab95f81c' = $1 ] && echo '00127' && exit\n[ '08d69b2e383c214677f386416b0f3c48' = $1 ] && echo '00128' && exit\n[ '5919c46bc1c27ff8e17eeb7f4f14da6c' = $1 ] && echo '00129' && exit\n[ '36f586b6e02b1ec1973518dde36c598d' = $1 ] && echo '00130' && exit\n[ '2d020141192b9251c8484d0b7be4d963' = $1 ] && echo '00131' && exit\n[ '0bc30020352634d74aa5fa179f2bb8ff' = $1 ] && echo '00132' && exit\n[ '626c24ed906a5e437dc68dbcd7df8a20' = $1 ] && echo '00133' && exit\n[ '2bc7148a2e5c378e2c4c8f6d6efb2fce' = $1 ] && echo '00134' && exit\n[ '50ef3352462ff19ff09034462f8a9986' = $1 ] && echo '00135' && exit\n[ 'c5b733419d8d53a86afd8618ebe9ae14' = $1 ] && echo '00136' && exit\n[ '301ab6d8c5d616bd096a22d0cd689200' = $1 ] && echo '00137' && exit\n[ '7ac1e7243946a30c2e8a361c9b63f6ab' = $1 ] && echo '00138' && exit\n[ '16bb1857b20e9e24ec89614a74006b8b' = $1 ] && echo '00139' && exit\n[ '9aee1e071aa6510869232046172c018b' = $1 ] && echo '00140' && exit\n[ 'ebb4162365ce5b1e6f176e5f44a9b569' = $1 ] && echo '00141' && exit\n[ '6f924283469cc3277c9a0a41eeb897ea' = $1 ] && echo '00142' && exit\n[ 'fb75fb759ec701347779102f6ff28c94' = $1 ] && echo '00143' && exit\n[ '1dad44bb9bbffc84d1d168c251c230b9' = $1 ] && echo '00144' && exit\n[ 'dbae6e272389b8218612fe78c21ef99f' = $1 ] && echo '00145' && exit\n[ '6261332ca68282d7d29a599c4614470f' = $1 ] && echo '00146' && exit\n[ 'e2407e2b2ebb8ff6fc4196d0c1b66d27' = $1 ] && echo '00147' && exit\n[ 'dd35e2466df6d62e0f6e5816950e1098' = $1 ] && echo '00148' && exit\n[ '1758d01df3a4632d12dcb9ea82c307f7' = $1 ] && echo '00149' && exit\n[ '3bcd52574702886dfbf74b0500e66b77' = $1 ] && echo '00150' && exit\n[ 'fb1907d20c52617bff0c6374b55a50d5' = $1 ] && echo '00151' && exit\n[ 'f7aac72f53bc558bea7ea75fcbe9a6cf' = $1 ] && echo '00152' && exit\n[ 'be8f18371b507ded0ca1f9674cc7a9a9' = $1 ] && echo '00153' && exit\n[ 'e1a2647be8fb52bf34fdb59bf608ea34' = $1 ] && echo '00154' && exit\n[ '0c46774eb61f343c911be787715ae6f2' = $1 ] && echo '00155' && exit\n[ '4755a684b56671977d1a41f125a9cf9c' = $1 ] && echo '00156' && exit\n[ 'ebffa7154f7608121e2f702f1666f27e' = $1 ] && echo '00157' && exit\n[ '31fc2f56302edc6ef851404847f2df1d' = $1 ] && echo '00158' && exit\n[ '8592a6ab3404af44810d3915d8bf0cc3' = $1 ] && echo '00159' && exit\n[ 'cf2811654d0df1fb2dc7d27419dcb159' = $1 ] && echo '00160' && exit\n[ '5ad323d15592cbf019d90daed5947026' = $1 ] && echo '00161' && exit\n[ '5feb35c73eb6f01451755d15c1843d34' = $1 ] && echo '00162' && exit\n[ '2f201cba8d81459b4f0ab64439d43034' = $1 ] && echo '00163' && exit\n[ '51245522b36c2d417c81f49ea59e46d5' = $1 ] && echo '00164' && exit\n[ '59217111479e3e2dc4cdcb3987dd0586' = $1 ] && echo '00165' && exit\n[ '58ebc9302978b942f4d2b4dc63c7f721' = $1 ] && echo '00166' && exit\n[ 'e9ad26f52349a2b716d51973efc3ffd4' = $1 ] && echo '00167' && exit\n[ 'c62dfbba5ed8e972953b1a175e4f4b45' = $1 ] && echo '00168' && exit\n[ '1cb5e4a8a16e8113aca49da6b84a3c25' = $1 ] && echo '00169' && exit\n[ '11f7215884e015640a65a3d3a2aabb12' = $1 ] && echo '00170' && exit\n[ '255171885e6874b002b6aa1a8321a329' = $1 ] && echo '00171' && exit\n[ 'e75f08a282f99dbecb8d9c49f7f6f03c' = $1 ] && echo '00172' && exit\n[ 'a07630550abc92bcafbcb4954ecf14af' = $1 ] && echo '00173' && exit\n[ 'b8f98b594ee594ddff2a0d7252417be6' = $1 ] && echo '00174' && exit\n[ 'da396e1216816ead4f16eacc30a0099a' = $1 ] && echo '00175' && exit\n[ 'c3c92135433063d3c4dc5f82012f2a2f' = $1 ] && echo '00176' && exit\n[ 'a8485173705691334e9cf7f772b01b95' = $1 ] && echo '00177' && exit\n[ '0e2a8e22ca477e413d8b839a81fa7e43' = $1 ] && echo '00178' && exit\n[ '42581dad10313319c95dbc43daedf724' = $1 ] && echo '00179' && exit\n[ 'f12959ac70b51c1a1d9a420080584eba' = $1 ] && echo '00180' && exit\n[ '4b9087019065a148182820c74148714d' = $1 ] && echo '00181' && exit\n[ '1d917ebe589f253c5189701b96698ac3' = $1 ] && echo '00182' && exit\n[ '5c8267b76ea8493be7d864941e88109e' = $1 ] && echo '00183' && exit\n[ '8fbdd54d6fe545de372335c1b0a8c036' = $1 ] && echo '00184' && exit\n[ '6494e5967361d8d32658301f4c1708dc' = $1 ] && echo '00185' && exit\n[ '0f8e6e90b0bd47c5fd4ccdfca7dd6de9' = $1 ] && echo '00186' && exit\n[ '0dfb4dd80797c3cd455b3b3a6e422b7c' = $1 ] && echo '00187' && exit\n[ '5870dd88e833841ec1ed6f7121d4c113' = $1 ] && echo '00188' && exit\n[ '5f57102c2a7f8d43a9140bc579c1152c' = $1 ] && echo '00189' && exit\n[ '40309eed895548488317488d53224a26' = $1 ] && echo '00190' && exit\n[ 'b1eb6136e33d81bba8696058c42c43b7' = $1 ] && echo '00191' && exit\n[ 'bcaf55dd7295eb2988359e0c4317eb5a' = $1 ] && echo '00192' && exit\n[ '46773571bf8a8cfb5b827480d6631bfe' = $1 ] && echo '00193' && exit\n[ '4fee23ed7d9854bcdd698691a33cd463' = $1 ] && echo '00194' && exit\n[ '34be15f617ed7bbb083a2012856ceecc' = $1 ] && echo '00195' && exit\n[ '964997a9e131b5aa6fee87db0943f6b3' = $1 ] && echo '00196' && exit\n[ '1ab11a7ea639316dbbc919ecc434b592' = $1 ] && echo '00197' && exit\n[ '493ad9759cd902510f680b725d48428a' = $1 ] && echo '00198' && exit\n[ '6f5472e8e149a7dff0e3aae2671304e4' = $1 ] && echo '00199' && exit\n[ '5a99325fb01580be9162244733861698' = $1 ] && echo '00200' && exit\n[ '0a8f3c2c96d850f9e1038aa66c34645d' = $1 ] && echo '00201' && exit\n[ '17d706c1784400f5a4a4f1afa1975184' = $1 ] && echo '00202' && exit\n[ 'eeb53ef4374aac37b980fb8530768f70' = $1 ] && echo '00203' && exit\n[ '4df5163af7d95aee220d58774d908e5c' = $1 ] && echo '00204' && exit\n[ '4e5b0b9d1cbeb7c11d7939e9cca8f2ca' = $1 ] && echo '00205' && exit\n[ 'd629b5e1889c29d7b82df84525d700e0' = $1 ] && echo '00206' && exit\n[ '49dc6f80dd9d912dc60aa3086e3c3d80' = $1 ] && echo '00207' && exit\n[ 'eb48dd4d4017fa502b601cfcb3d9f090' = $1 ] && echo '00208' && exit\n[ '4b5f0222d244aba9c9c03ce2e3ffd67b' = $1 ] && echo '00209' && exit\n[ '4bf1309e1fb153892e822e343977328d' = $1 ] && echo '00210' && exit\n[ '6104dd3c532ee278a39d735a955aba2e' = $1 ] && echo '00211' && exit\n[ '4b2520d31f6ef5327e41514da760a17d' = $1 ] && echo '00212' && exit\n[ 'b17e2af919a6d689f5e2a16ca4f85731' = $1 ] && echo '00213' && exit\n[ 'd676160de59288f7c7dd01958a54022c' = $1 ] && echo '00214' && exit\n[ '8cba7cbd8a7cf0f00963a96b930ee0e7' = $1 ] && echo '00215' && exit\n[ 'cf72bfb9897cb908e1c098166c8fcc34' = $1 ] && echo '00216' && exit\n[ '9d00825edbb56b33b6f6aa7124254f05' = $1 ] && echo '00217' && exit\n[ '1a3b08e4a7dcdd6dc6d4e2baef089d33' = $1 ] && echo '00218' && exit\n[ 'd23816fb91704d54877ae2d366234039' = $1 ] && echo '00219' && exit\n[ '1ed9bb07f063d95e300b8ba4d0be0a26' = $1 ] && echo '00220' && exit\n[ '4bdc2e193f2eaf77e9b7dae0bf9d3d5b' = $1 ] && echo '00221' && exit\n[ '8549ed1ab1d9e6e15a0624940cc8d2de' = $1 ] && echo '00222' && exit\n[ '05d90cb8d7a9e9452f1b152b818269e7' = $1 ] && echo '00223' && exit\n[ 'f471bbf0c4a09334fe65bd236914d24d' = $1 ] && echo '00224' && exit\n[ 'f24a1d531ef12e20bcd7c9d7b5a4d4e7' = $1 ] && echo '00225' && exit\n[ '7f062539a685140f7769f98aa4bd6642' = $1 ] && echo '00226' && exit\n[ '565c758bc6fcbb45f350e497e713dc28' = $1 ] && echo '00227' && exit\n[ 'bd5fb0cc47a8b200e4f2a97c0dc78e47' = $1 ] && echo '00228' && exit\n[ 'f3490299e5836c178d4703e2b1043d99' = $1 ] && echo '00229' && exit\n[ 'c287ef49fae2de57c1f770e81f88ca9f' = $1 ] && echo '00230' && exit\n[ 'd325f96dccbcabcfdff5719e2bd74fbf' = $1 ] && echo '00231' && exit\n[ '70b3a18bee93c8684b072ecf3facab4b' = $1 ] && echo '00232' && exit\n[ '095b5507a92336f19764f8e672e026fd' = $1 ] && echo '00233' && exit\n[ '886a0100009001dae6804e41aad2647a' = $1 ] && echo '00234' && exit\n[ '6253f2fceb2b622446b3a3a92ca44f18' = $1 ] && echo '00235' && exit\n[ 'd33fc5d402bd37f657e7d482bffc4609' = $1 ] && echo '00236' && exit\n[ 'fd743e1d418d511203e0dad941f02112' = $1 ] && echo '00237' && exit\n[ '4c9a6006ce4705f8fd20f397dfa26c81' = $1 ] && echo '00238' && exit\n[ '400cc7fce03b542b29405fa7fb9602d4' = $1 ] && echo '00239' && exit\n[ 'c65ac4615192b8d20b035f7f211a0b20' = $1 ] && echo '00240' && exit\n[ '20422580bc806a3951a457f213aed15e' = $1 ] && echo '00241' && exit\n[ 'de504bcbd88d99dcd565d6ed712d5614' = $1 ] && echo '00242' && exit\n[ 'b33781401c77d63584373ff839f50db7' = $1 ] && echo '00243' && exit\n[ 'd7c8ea3aca55ee6015b6f7ac7280b415' = $1 ] && echo '00244' && exit\n[ '6b2cca05b4ebd7fb09e94b3bdb0dae13' = $1 ] && echo '00245' && exit\n[ '04ece466899753e524df83dc9ba144cd' = $1 ] && echo '00246' && exit\n[ 'c603de9c2387eae008d9acf5aa0fae1c' = $1 ] && echo '00247' && exit\n[ '79652ae6efe928e2bcadc578d18f1dab' = $1 ] && echo '00248' && exit\n[ '17c9a37d396793adcd861f038931fd15' = $1 ] && echo '00249' && exit\n[ '018ae8ff2a6077503f882f0a4dafbafd' = $1 ] && echo '00250' && exit\n[ '384fd326aabb02d84ba503d71d963356' = $1 ] && echo '00251' && exit\n[ '74982a49a580b53f079740a738cbe98d' = $1 ] && echo '00252' && exit\n[ 'c93ce18d1b8c69ce29f6c71be39daf7e' = $1 ] && echo '00253' && exit\n[ '90bc53f8e6dc9c9768bea60a36c44055' = $1 ] && echo '00254' && exit\n[ '21e5379862be2dd37155edac3019beaa' = $1 ] && echo '00255' && exit\n[ '75b031872afb15cfc183a594426eee56' = $1 ] && echo '00256' && exit\n[ 'af37907286356366884d623531714516' = $1 ] && echo '00257' && exit\n[ 'b5f80d9a03d51be659375a3c06175725' = $1 ] && echo '00258' && exit\n[ '6dc4955a4648e2951d890ae5f67f58d6' = $1 ] && echo '00259' && exit\n[ '080049387c6740c58bce5ca805a66295' = $1 ] && echo '00260' && exit\n[ '0aaf349036d061804a599d09e4ec047d' = $1 ] && echo '00261' && exit\n[ 'fa90b518f4772eafe24e7397d4135f70' = $1 ] && echo '00262' && exit\n[ '077f9bbf8e803f693ee6b93e494de0f1' = $1 ] && echo '00263' && exit\n[ 'd8a84d351d1e63b1274b22d74a3e849b' = $1 ] && echo '00264' && exit\n[ 'a3ad9d02e954af104bd8d2731c7bffa3' = $1 ] && echo '00265' && exit\n[ '2a06a425ba1fc29bff30d27843cdbd6a' = $1 ] && echo '00266' && exit\n[ '0b0e919f1fd659d44ccd1e57b6aded4e' = $1 ] && echo '00267' && exit\n[ 'f9d98f0f6c7e73ad9e0db5b3d7c36aad' = $1 ] && echo '00268' && exit\n[ 'd1970948b89ce8ccd4fe8c3bd8c3b8af' = $1 ] && echo '00269' && exit\n[ '1b69375883b3f07c76b3567aee5ed593' = $1 ] && echo '00270' && exit\n[ 'afbb3f8fb3dbcfe685ff5a67eaa05181' = $1 ] && echo '00271' && exit\n[ 'cb8e4b1cbd88d0445113f36fdde195e8' = $1 ] && echo '00272' && exit\n[ 'e53496a7a39fcba23bf85e2f1b6a7010' = $1 ] && echo '00273' && exit\n[ '0464353bc0893cd8f239d30737ff05c9' = $1 ] && echo '00274' && exit\n[ '4ff90810417b02b7dbdd8e9bc0b2159f' = $1 ] && echo '00275' && exit\n[ '8f27f2a6ff49b9268ed729f3432b219d' = $1 ] && echo '00276' && exit\n[ '9fdb89a044f97759d71eb2a9f822a85c' = $1 ] && echo '00277' && exit\n[ 'd37bfcbeef20591b3ed0bd0376d5aa07' = $1 ] && echo '00278' && exit\n[ '796fb3391fa1c2f563e2a8e9e41b891e' = $1 ] && echo '00279' && exit\n[ '9cec0684f5100e31cbc213ca1df323ed' = $1 ] && echo '00280' && exit\n[ '8eae4aff9676c2d9b627f366bcea47fa' = $1 ] && echo '00281' && exit\n[ 'fa858202ae6587c88c9d9cdcbd173b95' = $1 ] && echo '00282' && exit\n[ '405eb188ee0d11ecdd8552f81e13e513' = $1 ] && echo '00283' && exit\n[ '2ab39344f4857538601dbe36c087a9a7' = $1 ] && echo '00284' && exit\n[ 'e4a3ec9573664246aae37a690278d44d' = $1 ] && echo '00285' && exit\n[ 'c4d57f5548674062d8765cf756f57950' = $1 ] && echo '00286' && exit\n[ 'a6ebdba6232ada53c645a78cec5cef1c' = $1 ] && echo '00287' && exit\n[ '2a2e02028ed94f249ec3873a3900a5ba' = $1 ] && echo '00288' && exit\n[ '657480cf5917b889947a470c4054983b' = $1 ] && echo '00289' && exit\n[ '2df4b13e2413f2bdaf7aac62cebb620a' = $1 ] && echo '00290' && exit\n[ 'd1b9fe4acffc08b1875fd124f6943ce0' = $1 ] && echo '00291' && exit\n[ '98e94f4c5330d0823e376fa631216720' = $1 ] && echo '00292' && exit\n[ '3c43bcaf925f65fcebe4ba699c3a17a6' = $1 ] && echo '00293' && exit\n[ '6886f1cb0ee62af10928e345af7985f4' = $1 ] && echo '00294' && exit\n[ '5e71a4ead225cf210a23ad1cfc473e13' = $1 ] && echo '00295' && exit\n[ 'c835181dfbe539d338e4c3387a3b509f' = $1 ] && echo '00296' && exit\n[ 'fee7db6552a7c3851bdef49e48c04f8c' = $1 ] && echo '00297' && exit\n[ '5e3ff9aeafaaa0c9b05e79eff11b63e4' = $1 ] && echo '00298' && exit\n[ 'c52b1729230ea5e3357d4490824dce12' = $1 ] && echo '00299' && exit\n[ 'a3fca9c6150dda8b68884c9b23312aed' = $1 ] && echo '00300' && exit\n[ 'e1f595ff856f8cb05c5ec9bc88422933' = $1 ] && echo '00301' && exit\n[ '10b013bbdae963aa7ea58826943b2e61' = $1 ] && echo '00302' && exit\n[ '4ca9f05d1c94db74fd7a5e07c5c90026' = $1 ] && echo '00303' && exit\n[ 'fe071f568e857c728e4d141630ea32af' = $1 ] && echo '00304' && exit\n[ '7715f9353b40df4b215a174a90a18496' = $1 ] && echo '00305' && exit\n[ 'aed15d63d11273cfd13d9e2a28dbbd7d' = $1 ] && echo '00306' && exit\n[ 'be7c8e52c8678a0704358e507dc495f4' = $1 ] && echo '00307' && exit\n[ '50844f31ee84a2568424e109710b898f' = $1 ] && echo '00308' && exit\n[ '456385821890f04eaad5565d2cecf327' = $1 ] && echo '00309' && exit\n[ 'f39c3d22e537e415f083e747c91aee62' = $1 ] && echo '00310' && exit\n[ 'db57af1b892387215d2e7779a08f8c96' = $1 ] && echo '00311' && exit\n[ 'bf25531ace16b5e5cefee21f1d0a5e0a' = $1 ] && echo '00312' && exit\n[ 'eba94843775f6bd1764e96c2582da460' = $1 ] && echo '00313' && exit\n[ 'f12c5837bd5cedb56d7ba4d6d4210523' = $1 ] && echo '00314' && exit\n[ '699dedf8a2ff3b2c3433066ccd9913ac' = $1 ] && echo '00315' && exit\n[ 'abfe06ec08d6421f6c522a7272b81771' = $1 ] && echo '00316' && exit\n[ '21a395af93b976ec2cbdc84be7d85bfd' = $1 ] && echo '00317' && exit\n[ '17364b46fd33f5460ccd3d4d427621f6' = $1 ] && echo '00318' && exit\n[ 'b72bfc50168a40567266ce9cb630603b' = $1 ] && echo '00319' && exit\n[ '762dfa23800348210ea1ec0f4b8a0f49' = $1 ] && echo '00320' && exit\n[ '206f98b36498fdc3e3bd99f07d1bfd6a' = $1 ] && echo '00321' && exit\n[ '84d32059b9684bf5b6d7fc73ebacdab4' = $1 ] && echo '00322' && exit\n[ '8bca4bb1059164e83bd4c4256c649491' = $1 ] && echo '00323' && exit\n[ 'c852353ea88ced3dd771a10dca0893c2' = $1 ] && echo '00324' && exit\n[ 'bf07c33d24fcee6d8565bb9e15b791b8' = $1 ] && echo '00325' && exit\n[ '19dda62f4ac72a5391483887d37c50b5' = $1 ] && echo '00326' && exit\n[ 'b1b140c67dff6e44f564adb5fd26f997' = $1 ] && echo '00327' && exit\n[ '7afeba19b32b96b564048cd2f4a4402f' = $1 ] && echo '00328' && exit\n[ '73714b0f2d3c78a4ac8a17845546f0af' = $1 ] && echo '00329' && exit\n[ '5a214db05fdc20a1e204e3ad0342f33b' = $1 ] && echo '00330' && exit\n[ '4099f8556be2e62a98d223b7f80d8669' = $1 ] && echo '00331' && exit\n[ '01b09a90c49504b5ab4def97d7286d56' = $1 ] && echo '00332' && exit\n[ '9963f1f76702b075a2592b55d63c59d9' = $1 ] && echo '00333' && exit\n[ '4523e31614bb3c37d0744d2699cd3bb9' = $1 ] && echo '00334' && exit\n[ '50b742a99f7a819738dcd271e79be850' = $1 ] && echo '00335' && exit\n[ 'cbbb1f76c3dc4cb67f3103b99cdc0e5d' = $1 ] && echo '00336' && exit\n[ 'dc29fa9f82f20cba1139aebc8ebfa784' = $1 ] && echo '00337' && exit\n[ 'ee582d10ff24f74e945d5af1e3e5112b' = $1 ] && echo '00338' && exit\n[ 'cbf4b5ed864675d01ae7554166f38c0d' = $1 ] && echo '00339' && exit\n[ '52ec4c5922cd59418e19286dcbedfcfa' = $1 ] && echo '00340' && exit\n[ '9922b086734163ed42d402b5c9951263' = $1 ] && echo '00341' && exit\n[ '9daa6c30079c95920c407f4ba15708d0' = $1 ] && echo '00342' && exit\n[ '006d4c8b637ccde3864fd986a1c5420e' = $1 ] && echo '00343' && exit\n[ '9bf77192a211cbe6823a2218d41c3f55' = $1 ] && echo '00344' && exit\n[ 'da304c20929c7e18ca7837cb58e38d99' = $1 ] && echo '00345' && exit\n[ 'd729bb26f5c01e5ca0e4be092d3a6a76' = $1 ] && echo '00346' && exit\n[ 'ba8b79c7926140c11033011ed6649e66' = $1 ] && echo '00347' && exit\n[ '7d94f25855d003cab9f558a684d3b3f6' = $1 ] && echo '00348' && exit\n[ 'b0e14fb8fb34d86b64ae055dd78da822' = $1 ] && echo '00349' && exit\n[ 'cde89f662c98a8b89d9839d8b5941e7b' = $1 ] && echo '00350' && exit\n[ '859d99c7ab8b751da7374d47c4bd2575' = $1 ] && echo '00351' && exit\n[ 'cd654949fe2337da41acbf1693972609' = $1 ] && echo '00352' && exit\n[ '5a4b82132e059c61cba427f2beda96a2' = $1 ] && echo '00353' && exit\n[ '1c1f3d71afedfa6fa8e0ae75faeb4e9a' = $1 ] && echo '00354' && exit\n[ 'efcf0205e49d4b5b0f331293cc2f12f8' = $1 ] && echo '00355' && exit\n[ '1d12415ffbb56ea2412b739aa2046e2c' = $1 ] && echo '00356' && exit\n[ 'ec4f00c2f8af3e73cd0c6d24d1910d1c' = $1 ] && echo '00357' && exit\n[ 'b00e69629473a37c05120cd8374b75a6' = $1 ] && echo '00358' && exit\n[ '791c99f30a8d59c7163575096d41edba' = $1 ] && echo '00359' && exit\n[ 'e9a96d52f48c1e1bc5af8fa348945865' = $1 ] && echo '00360' && exit\n[ '6fbceed0bdf3cd0954e0c3e8a79b10c3' = $1 ] && echo '00361' && exit\n[ 'c4fda4ee5c05eddd707a40b618218efa' = $1 ] && echo '00362' && exit\n[ '8b5ccb242231ff9c4990aa0fac6a3d30' = $1 ] && echo '00363' && exit\n[ '43b2e62a8b16b561d76e4ca8faccc9c1' = $1 ] && echo '00364' && exit\n[ 'e1cc13f821a4eed280d04dce198e169e' = $1 ] && echo '00365' && exit\n[ '8130fe9abc022ead8dc8a80087e98d11' = $1 ] && echo '00366' && exit\n[ 'bea0a3fc27974567fd54f38a6559cf92' = $1 ] && echo '00367' && exit\n[ 'b6eec3a74042e1f6fd6bff960353900f' = $1 ] && echo '00368' && exit\n[ '104290b955d8d58fb894837d12ad128c' = $1 ] && echo '00369' && exit\n[ '364d2f32c5d932ffe56d855d3d8a9e2e' = $1 ] && echo '00370' && exit\n[ '67e29c3e3a0904d658a8925f61773567' = $1 ] && echo '00371' && exit\n[ '5972ac3b48bab2361e0869f063ea7ad4' = $1 ] && echo '00372' && exit\n[ '8757a804d7c2dad846596c2ac4fe41ce' = $1 ] && echo '00373' && exit\n[ '8ed8b28e6419245e98414e5a6dcb1f33' = $1 ] && echo '00374' && exit\n[ 'f354a078174c67af0e47b3743b6209b4' = $1 ] && echo '00375' && exit\n[ '03666f19ebc56d5900dad977eefbc8cb' = $1 ] && echo '00376' && exit\n[ 'b9c71533d2737e19c609563db9fb2ce2' = $1 ] && echo '00377' && exit\n[ '052ef4b281be21a6befdb51f0b9ac085' = $1 ] && echo '00378' && exit\n[ '482acb6940f586be57a14261d20d2c8a' = $1 ] && echo '00379' && exit\n[ '080a6bbfc2a619471699f78185853951' = $1 ] && echo '00380' && exit\n[ '8370d42b53312ce6d0a3cf240e29e8e0' = $1 ] && echo '00381' && exit\n[ '7d8df47d4d6c529c3263eec0308ef894' = $1 ] && echo '00382' && exit\n[ '47cb3b340a409f18e7ec0a2ca3da7f56' = $1 ] && echo '00383' && exit\n[ '1652ed6cc51c97686502676ee8251db6' = $1 ] && echo '00384' && exit\n[ 'aaf8f776d991d3e8555a0662b28d411c' = $1 ] && echo '00385' && exit\n[ '51725072ecb97a175533810e2d6be37e' = $1 ] && echo '00386' && exit\n[ '894666d75eea10ad6ff6a0be642a8687' = $1 ] && echo '00387' && exit\n[ '36ffbed57209a4bd370c650ab4fbc6a2' = $1 ] && echo '00388' && exit\n[ '0c362ce0e763296fb7f4bcaf1dbf768f' = $1 ] && echo '00389' && exit\n[ 'a764f8827f6e6da974694f800165844f' = $1 ] && echo '00390' && exit\n[ '1cd57187fb955fd38dc894c8105ceb68' = $1 ] && echo '00391' && exit\n[ '494a25869e7f46827daba4944ac2886d' = $1 ] && echo '00392' && exit\n[ '72719bbdb90e67567992d57c2f42a7a7' = $1 ] && echo '00393' && exit\n[ 'db0b853b822ba958e1e9fcd6a662933c' = $1 ] && echo '00394' && exit\n[ '95036e288d969a741631c1e75f01baed' = $1 ] && echo '00395' && exit\n[ '5efb7cc800ed9c6084922b1b4ede06bc' = $1 ] && echo '00396' && exit\n[ '795fa63b177b4be4752e288428cbfc7a' = $1 ] && echo '00397' && exit\n[ '17bd5c06caf24d7aeddd37cfbc1402a5' = $1 ] && echo '00398' && exit\n[ '53df1c00e310ad7a89fcba16d02d0db3' = $1 ] && echo '00399' && exit\n[ 'e7cd5afbb99ee5eaf8ca0b74fcf9bd20' = $1 ] && echo '00400' && exit\n[ 'fcf89f7854dfe8ffbcbdaf40a06134e9' = $1 ] && echo '00401' && exit\n[ '9c15f060f7565807a9fc0e5d64e0525d' = $1 ] && echo '00402' && exit\n[ 'fa1c2ad4fa06a3dc2b966b5198d416b0' = $1 ] && echo '00403' && exit\n[ '6378fe0b4c3d3d09406b2d7c0d1ffd67' = $1 ] && echo '00404' && exit\n[ '5d5d5de2cc8cc86ed05272dbaf057aa4' = $1 ] && echo '00405' && exit\n[ 'fceddbdc1c247050657a031a0f0c3706' = $1 ] && echo '00406' && exit\n[ '274f9cfbd706ddac80af7d54691a5b2c' = $1 ] && echo '00407' && exit\n[ '49e275523d854296cf3e701f68647ace' = $1 ] && echo '00408' && exit\n[ 'd11484933820a88da0b5c43d973204f6' = $1 ] && echo '00409' && exit\n[ '8235f9d2c06579c49e2667b17842b89e' = $1 ] && echo '00410' && exit\n[ '5395ae3f1ef7dcefb71ee9937efe38d7' = $1 ] && echo '00411' && exit\n[ 'b8c926ef377d0a1c722c244cd462bb0f' = $1 ] && echo '00412' && exit\n[ '872202ce626270361aa22e7fa8e25ab8' = $1 ] && echo '00413' && exit\n[ '650556e4e96ba8e4f54f445e37ae2eab' = $1 ] && echo '00414' && exit\n[ 'dcb5325b49da47c7936d8d0d724d2f42' = $1 ] && echo '00415' && exit\n[ '1472148f4f97cdf985bcde757b65f3c0' = $1 ] && echo '00416' && exit\n[ '74b5a577d2539d3752a61ecbd3094392' = $1 ] && echo '00417' && exit\n[ 'e69dbe4028d3fb8f84531dbec45a89cf' = $1 ] && echo '00418' && exit\n[ '3207515e5750b2d24ed081d34dfd5079' = $1 ] && echo '00419' && exit\n[ 'b765d1e36c6cc77a620e3089bbf08458' = $1 ] && echo '00420' && exit\n[ 'c50a8c7cfe887cb2418c6d992beeee50' = $1 ] && echo '00421' && exit\n[ '64e3f7833288e47ff8d4549dbe0e8383' = $1 ] && echo '00422' && exit\n[ '34bca820fba9faf579080b74944fcbe1' = $1 ] && echo '00423' && exit\n[ '651e1d913b3720e9444b79579ed87174' = $1 ] && echo '00424' && exit\n[ '9d660a6b79c85fa75b4236e026502dd7' = $1 ] && echo '00425' && exit\n[ '563efd5acf91452236a60eea45455416' = $1 ] && echo '00426' && exit\n[ '65a2487f3645cdf34ccf84766456ec1d' = $1 ] && echo '00427' && exit\n[ 'fe76dff35bb199cdb7329eba2b918f18' = $1 ] && echo '00428' && exit\n[ '4d0831bc5ae00dc8343f8ebad4b60fef' = $1 ] && echo '00429' && exit\n[ '5b3a5fc6ca1e39bda1a78fa8a2838a16' = $1 ] && echo '00430' && exit\n[ 'df05e0ffeba55e9ad89ce4d2fdd05f50' = $1 ] && echo '00431' && exit\n[ '30ab1028b635529477349eee16892e90' = $1 ] && echo '00432' && exit\n[ 'f04cb1711f5df6d7b64e0715078f783f' = $1 ] && echo '00433' && exit\n[ 'e2d5126755afec67764a33f23a9f5ff6' = $1 ] && echo '00434' && exit\n[ 'bd99623e1fdc55ba8a064de2bbfbc954' = $1 ] && echo '00435' && exit\n[ '5fd615fcb09d4128d5857231bfa159e2' = $1 ] && echo '00436' && exit\n[ '6a77da8ac65dcbf19d0bbc38ac26fb09' = $1 ] && echo '00437' && exit\n[ 'ebb0422fa0695eeaee077006710ae213' = $1 ] && echo '00438' && exit\n[ 'a297e2665be46fe836679b6af676f4b3' = $1 ] && echo '00439' && exit\n[ '9ed2d376e04915d313411a67fa4c0129' = $1 ] && echo '00440' && exit\n[ 'c350b0c10156fdca8cad1f9822a7f51a' = $1 ] && echo '00441' && exit\n[ 'b965c59b923e507df4300a9e44f0bb84' = $1 ] && echo '00442' && exit\n[ '18d7353f2b2f4c240376f213f78d8902' = $1 ] && echo '00443' && exit\n[ '37e01ca12e94a1e978632e9036a920bc' = $1 ] && echo '00444' && exit\n[ '1931584666e763fb15469acca9aa8d2b' = $1 ] && echo '00445' && exit\n[ '4ab9d26a0c7c2a62c3a2573bc48d9105' = $1 ] && echo '00446' && exit\n[ 'd989be15c6830e7866e71668b76d7557' = $1 ] && echo '00447' && exit\n[ 'c53049823f18d3adb12d9340a798988e' = $1 ] && echo '00448' && exit\n[ '43bd3265a079104888662bcfa123e233' = $1 ] && echo '00449' && exit\n[ '683f3fc949c5c14a17e048a6fb3e2357' = $1 ] && echo '00450' && exit\n[ 'f207d0c6b7f036dd952efbb1b633ad55' = $1 ] && echo '00451' && exit\n[ '78daf50fbc3a242cc241032e7b7fcf7b' = $1 ] && echo '00452' && exit\n[ '951eab5d0adc5bb1bd82442b631497b3' = $1 ] && echo '00453' && exit\n[ '47983a01412942c87bc11975e31aaba9' = $1 ] && echo '00454' && exit\n[ 'e51a06fd1aaa5597f7cf2699e35cf4ba' = $1 ] && echo '00455' && exit\n[ 'f07c5f4e2af70e2230a7c36950910e90' = $1 ] && echo '00456' && exit\n[ '357e0c850cc7f5903187061e19286655' = $1 ] && echo '00457' && exit\n[ '928829a11f7f96d42c7007dab6beee00' = $1 ] && echo '00458' && exit\n[ 'ba12f7738874c48fc17a446031dd5af4' = $1 ] && echo '00459' && exit\n[ '89581360ec9278d7e171835a00185fd7' = $1 ] && echo '00460' && exit\n[ '732cf048789db6d2e41a678597a6dafd' = $1 ] && echo '00461' && exit\n[ '4201ca136c43bd094d37b4dead875eac' = $1 ] && echo '00462' && exit\n[ '1ee5da5a7ef455cdc3a57f2489c03963' = $1 ] && echo '00463' && exit\n[ 'fcf2cbb450285857bdfdf61a71ff4d67' = $1 ] && echo '00464' && exit\n[ 'f27c43d383a9c7587679f676a283f738' = $1 ] && echo '00465' && exit\n[ '95763be4ed1ccf71c73ddb2a9bef802f' = $1 ] && echo '00466' && exit\n[ '5e1a3f7f9d84f499bc37b23be37ee6b8' = $1 ] && echo '00467' && exit\n[ '48015a155b7a47e4092d5bd53eec4293' = $1 ] && echo '00468' && exit\n[ '8cbaf63d53b25ccb3d2e6013b3f3b810' = $1 ] && echo '00469' && exit\n[ '1390c4e14800fd3b61b570384d65e09b' = $1 ] && echo '00470' && exit\n[ 'f00da7c1eaeca2bc23784ddf405326e2' = $1 ] && echo '00471' && exit\n[ 'f7349aaaad69580e041a592987654f8f' = $1 ] && echo '00472' && exit\n[ '25fb9570921c7e423a482c4569ec68c9' = $1 ] && echo '00473' && exit\n[ '1c4c7dc5f86e66711b144bc9954aa6c8' = $1 ] && echo '00474' && exit\n[ '5850cbc3a90a59af3bc4fbb662aa6a5a' = $1 ] && echo '00475' && exit\n[ '215234481e4ea6ebcda114bd34b25f77' = $1 ] && echo '00476' && exit\n[ 'fccc3c81dd8715dbd2f0e05e0779ba71' = $1 ] && echo '00477' && exit\n[ '07fc4174adf4b3c22240e23e02f5129c' = $1 ] && echo '00478' && exit\n[ 'b4e70c2dd25c80a645b3bb3e87250b5f' = $1 ] && echo '00479' && exit\n[ 'bee3b619730ef265220c9b6dfba5f7be' = $1 ] && echo '00480' && exit\n[ '11862744f158fd26e12b87f0f0643e3d' = $1 ] && echo '00481' && exit\n[ '3edd73ce8caa56c1eb5a0ef7d0f513d6' = $1 ] && echo '00482' && exit\n[ 'b87acd7d533f4a6209fb969a81b279da' = $1 ] && echo '00483' && exit\n[ '1f76217fe654d2f41a93ccc70ce984bb' = $1 ] && echo '00484' && exit\n[ '1d291bea2120a4f19231a221abbcc5cb' = $1 ] && echo '00485' && exit\n[ '50c44f8a51c698505eea7a8be217a296' = $1 ] && echo '00486' && exit\n[ 'eb89c22417c0918884628cc8ff0c92fc' = $1 ] && echo '00487' && exit\n[ '9ec19e53f04be5bbb4119582a2ceaf97' = $1 ] && echo '00488' && exit\n[ 'b49022a510d054dcece4adcce0782087' = $1 ] && echo '00489' && exit\n[ '149cdae3c641d89e9c4a2f9e63cbd559' = $1 ] && echo '00490' && exit\n[ '03d0966cfd60398ba87b5a4b192ebbe8' = $1 ] && echo '00491' && exit\n[ '349b0816ae0aa9fed99ecc489dcbb873' = $1 ] && echo '00492' && exit\n[ '3de2efdb02664eef8a9c9a7a3f0b6845' = $1 ] && echo '00493' && exit\n[ 'c3e2a00b05c29b284a22b16a9184d54a' = $1 ] && echo '00494' && exit\n[ '4841256a57b9990deb3fc1f29d993548' = $1 ] && echo '00495' && exit\n[ '38cd2ffdeddc8d1022f25dd8b84311bd' = $1 ] && echo '00496' && exit\n[ 'e9361daa53c7421035da66a3ed367ea7' = $1 ] && echo '00497' && exit\n[ 'a3e274cce172a679763f96850dc4a684' = $1 ] && echo '00498' && exit\n[ '41c821644ea35c87fdd533f316c44e88' = $1 ] && echo '00499' && exit\n[ '08b9248d466cc934c581144ee63b5ed8' = $1 ] && echo '00500' && exit\n[ '0f2b06147b2cddea3980d6132e7a138f' = $1 ] && echo '00501' && exit\n[ '806f3ade18ad2b34203593d5c3bf06d7' = $1 ] && echo '00502' && exit\n[ '65b68723f832b858edbd76d24d293d07' = $1 ] && echo '00503' && exit\n[ 'a6820603dac676ca43881160a6aa1ed4' = $1 ] && echo '00504' && exit\n[ '53645aeb2263ce023c22c20580d2c61f' = $1 ] && echo '00505' && exit\n[ '2eb8bb2a4617c88e0cfa2b04397eebeb' = $1 ] && echo '00506' && exit\n[ 'f90897bd248188135af0e4ec0f2601b4' = $1 ] && echo '00507' && exit\n[ '44bfbac12e531576b9fca6a3b70ae444' = $1 ] && echo '00508' && exit\n[ '6100fd3b2983544734db6123504152df' = $1 ] && echo '00509' && exit\n[ '6cb31723964a2f7b28fba78ea39277d5' = $1 ] && echo '00510' && exit\n[ '5f98b32444bf550874672ebabaf51096' = $1 ] && echo '00511' && exit\n[ 'f69a1716d3863191e6954aededde2ac8' = $1 ] && echo '00512' && exit\n[ '910db2e172ec41e90937cebed75c2905' = $1 ] && echo '00513' && exit\n[ '12c62ee0c8820f0c6beecac36e7e2af3' = $1 ] && echo '00514' && exit\n[ 'e5fa636ead8624b81215195853c28f61' = $1 ] && echo '00515' && exit\n[ '5dd5e407b71fd7772f5b36ff7bdce4e4' = $1 ] && echo '00516' && exit\n[ 'ecd15b009851b9d4d370aa5b04f6caa2' = $1 ] && echo '00517' && exit\n[ '909d4aa0864827f9a4fcdcc9f83ca5dc' = $1 ] && echo '00518' && exit\n[ '581b5e17b07ef0500fc4a6199aa8f420' = $1 ] && echo '00519' && exit\n[ '68704b269f873e6657ee33042f088358' = $1 ] && echo '00520' && exit\n[ '857ca32ac90ff9e1d11fdd9e213e70e5' = $1 ] && echo '00521' && exit\n[ '3fe87010982b51f22c7ada7004aa2565' = $1 ] && echo '00522' && exit\n[ 'dc5f997bb4b044dcdd7b24207025d549' = $1 ] && echo '00523' && exit\n[ 'd3b68065d11c8459b7434ed2a36df112' = $1 ] && echo '00524' && exit\n[ '6b9a5227cddde58bcd5f3f36763990d6' = $1 ] && echo '00525' && exit\n[ '74edc09ae1c8b871bf396fdd0c8678e9' = $1 ] && echo '00526' && exit\n[ '308131f7f11a71cdfbae34db2f03e9f8' = $1 ] && echo '00527' && exit\n[ '6363d9238ee47ad6aab9796affcf290d' = $1 ] && echo '00528' && exit\n[ 'bcc9dc0f7f829ff4c630f7f8276f71b4' = $1 ] && echo '00529' && exit\n[ '963cc7982e9c38cda9c67412a55daf83' = $1 ] && echo '00530' && exit\n[ 'd6ad75eb290f4ab32045203101db3021' = $1 ] && echo '00531' && exit\n[ 'f034a76c7468f3d8c361a049fa03beff' = $1 ] && echo '00532' && exit\n[ '4d326dc13506980505bf928ee0855c74' = $1 ] && echo '00533' && exit\n[ 'bea6bfbc92f810b993d67414720f1ac4' = $1 ] && echo '00534' && exit\n[ 'bd6425c33c9094d22f240d7b59e14fd9' = $1 ] && echo '00535' && exit\n[ '61cad8d3186bd9edaab10f9c9e5c2e76' = $1 ] && echo '00536' && exit\n[ '3beedb2827db6480c3cd99197cba9a9e' = $1 ] && echo '00537' && exit\n[ 'f5c71d2c9a51283f6351d964350eb877' = $1 ] && echo '00538' && exit\n[ 'ee858439706a04691c5c3b2fd2f6573b' = $1 ] && echo '00539' && exit\n[ '12664c9ef37818d14146695fd1ec4d8d' = $1 ] && echo '00540' && exit\n[ '3a50f5f3d1d4678836ab0cff77b7e1db' = $1 ] && echo '00541' && exit\n[ '3c744652ed28998452c6991b65d7c852' = $1 ] && echo '00542' && exit\n[ '86e06d1cc519c3f88e76498c1db3730b' = $1 ] && echo '00543' && exit\n[ '5acd8bde2985e5c45d2920052cefc928' = $1 ] && echo '00544' && exit\n[ 'fd10a90c5315a787ba790c5c6414c8c6' = $1 ] && echo '00545' && exit\n[ '6bac064d2b69c26914eac8e108be0c52' = $1 ] && echo '00546' && exit\n[ 'a9cd23849df1e11ebed149f5cdc266cd' = $1 ] && echo '00547' && exit\n[ '53f6b73afad08fc7952ba698c7014e72' = $1 ] && echo '00548' && exit\n[ '3844031a473c40b3d2e22f8f997e8372' = $1 ] && echo '00549' && exit\n[ '9f766bdbcd1d9cc53a12a0f04457ef5d' = $1 ] && echo '00550' && exit\n[ 'a26cda3caed05a1a79d2518584ba55ad' = $1 ] && echo '00551' && exit\n[ '9b24d09205203167f23e98c39dc2e0b4' = $1 ] && echo '00552' && exit\n[ '4918f5754e367c01cbe8e4e69c65fb7f' = $1 ] && echo '00553' && exit\n[ '96394045f7bf1edf28aa56b1a0bc7934' = $1 ] && echo '00554' && exit\n[ 'f9e59bae9b131de1d8f02d887ee91e20' = $1 ] && echo '00555' && exit\n[ '543eb4706c16c9e15cb678faded659e8' = $1 ] && echo '00556' && exit\n[ '093600b4ddbcc46b55ab7d7df2c12b18' = $1 ] && echo '00557' && exit\n[ '90d40d4291feae7de7f384ee06308a66' = $1 ] && echo '00558' && exit\n[ '87effbe88b0891bcbe8f9bcece0c8fff' = $1 ] && echo '00559' && exit\n[ 'be46695d6337dd8b476e6c30eff97748' = $1 ] && echo '00560' && exit\n[ '960fd9afa2c4a53b5ac5f50c8dde8fc8' = $1 ] && echo '00561' && exit\n[ '073a147d9806affbf97b65319667c11d' = $1 ] && echo '00562' && exit\n[ 'a80c211c253fce5cb1a03dc377329231' = $1 ] && echo '00563' && exit\n[ '0fa681d98e662d53d900f2e1717d6b9b' = $1 ] && echo '00564' && exit\n[ '5f923159253effca55b9c5a629de1e53' = $1 ] && echo '00565' && exit\n[ '1261d7b09b4b9be98b3f7d53a105c841' = $1 ] && echo '00566' && exit\n[ 'e9bd2946e22aded407e3884520a4318f' = $1 ] && echo '00567' && exit\n[ '5be437aaad9f51e3f2c652ec5044c64f' = $1 ] && echo '00568' && exit\n[ '7af5c996b3dd00fa48294fd9a04bb01d' = $1 ] && echo '00569' && exit\n[ '7873ee624336e294d6a9dde00ffc9d94' = $1 ] && echo '00570' && exit\n[ 'f3692bcc270f84aaf08820357aca8e40' = $1 ] && echo '00571' && exit\n[ '91b8703a970afa36d92a535de2e8cc61' = $1 ] && echo '00572' && exit\n[ 'af1b7b463163698919f8f8cb1c5d7c73' = $1 ] && echo '00573' && exit\n[ '4202ae51ca61db564f1b2689312f4e9e' = $1 ] && echo '00574' && exit\n[ '852bf21584f4c160c77114de76cc2db3' = $1 ] && echo '00575' && exit\n[ '749aab7f76d094eeda6e8b1ecf8b29c0' = $1 ] && echo '00576' && exit\n[ '84f693aa25d19c109c31c75264f578a6' = $1 ] && echo '00577' && exit\n[ 'd7f875e0c9accf7bcc31f532f77c274f' = $1 ] && echo '00578' && exit\n[ 'e78c6d232ea2804176f6fd57f6a8209d' = $1 ] && echo '00579' && exit\n[ '31b6024719c25f12b3f89fe551608653' = $1 ] && echo '00580' && exit\n[ 'c0799f628c0c034cb166bd6d6c22b0df' = $1 ] && echo '00581' && exit\n[ '0a3f2576154cd65512b7b421f23ba34c' = $1 ] && echo '00582' && exit\n[ 'ef29842b09a0bf4c09cb3b912acc6409' = $1 ] && echo '00583' && exit\n[ 'a902e64abccc1538143434893914a8fa' = $1 ] && echo '00584' && exit\n[ '535ee3ba8dba4d4f924485731d7a83d9' = $1 ] && echo '00585' && exit\n[ 'f2f54a5920cae620234eec4675d0d4fc' = $1 ] && echo '00586' && exit\n[ '980121d197fce5502097790bc8494075' = $1 ] && echo '00587' && exit\n[ '85cc9aac0f4c557b4b5a198cf2881189' = $1 ] && echo '00588' && exit\n[ '8326796f548ec8518adcc43602d2edec' = $1 ] && echo '00589' && exit\n[ '1aefd7018845ec9357c5a47bf8405a81' = $1 ] && echo '00590' && exit\n[ '4ef58f5e7423ad21f109f6751d1b672f' = $1 ] && echo '00591' && exit\n[ '42935b16a60e628cb1dd67967285e3d9' = $1 ] && echo '00592' && exit\n[ '875c30d388c200ee1b77efaf78a2717c' = $1 ] && echo '00593' && exit\n[ '8185ec731b0960e68e548a3e58a04620' = $1 ] && echo '00594' && exit\n[ '57c10337a4238d2378c902972b652fc5' = $1 ] && echo '00595' && exit\n[ '7b8b61b8278bee2f90af3551e3c99640' = $1 ] && echo '00596' && exit\n[ '38bc9b0b56e083c35da392af36c4cd4c' = $1 ] && echo '00597' && exit\n[ '238c2d299a9d78f2b16418a4b555b140' = $1 ] && echo '00598' && exit\n[ '14386f21275e8aad7a1ddb2cc0f7a30b' = $1 ] && echo '00599' && exit\n[ '3d24d9bf3e5a52c44f80f7852cb56c44' = $1 ] && echo '00600' && exit\n[ '289e8fb055b10b3bae43bd4084a8ce13' = $1 ] && echo '00601' && exit\n[ '36672576998b839ba0171ec656c98e85' = $1 ] && echo '00602' && exit\n[ '3556f38438b13e25111fe82fd1edc9ef' = $1 ] && echo '00603' && exit\n[ 'f995f46cf415724f651f5bbfe9794e34' = $1 ] && echo '00604' && exit\n[ '8b22c3f09664a478078557f477fd1626' = $1 ] && echo '00605' && exit\n[ '4125ed049e19dcd8734f03c9933b7eb1' = $1 ] && echo '00606' && exit\n[ '06abf813c678c056b270277927690a16' = $1 ] && echo '00607' && exit\n[ 'f422da824e8f8d04cc84abdde5aa4222' = $1 ] && echo '00608' && exit\n[ '4fcc564bab536c7b616e51d5d76ad1ee' = $1 ] && echo '00609' && exit\n[ '2d69402cf6bb41c91e68b8f2bc58f369' = $1 ] && echo '00610' && exit\n[ '6e8f9d3a803a189ec63065c5d4672b26' = $1 ] && echo '00611' && exit\n[ '981b71a04c728823252170619d6c88d5' = $1 ] && echo '00612' && exit\n[ '066c5e810ef775a9298a395736c2bc00' = $1 ] && echo '00613' && exit\n[ '593838bf95517e3f351513bbdf63fcb7' = $1 ] && echo '00614' && exit\n[ '1bf2cc5e82039ded2735d37d29daffcf' = $1 ] && echo '00615' && exit\n[ 'cb0efae953a108294f54f46ebd9fb243' = $1 ] && echo '00616' && exit\n[ '51468b25561bb268a0f484d87ba6211f' = $1 ] && echo '00617' && exit\n[ '647f462038c0799154b64eb5cfec38f7' = $1 ] && echo '00618' && exit\n[ 'f1ea4369f3a7212265078451b29c9e45' = $1 ] && echo '00619' && exit\n[ '0799d4f05b5d85e6e4dafe361b74db41' = $1 ] && echo '00620' && exit\n[ '549217e76271ce6da63989132b7e3634' = $1 ] && echo '00621' && exit\n[ '39047c57a634fea632fe2ceb1e99fab1' = $1 ] && echo '00622' && exit\n[ '8eefd68527ee5e3dd4d8df115642ad80' = $1 ] && echo '00623' && exit\n[ '869e1c45921b8615de918645c13da490' = $1 ] && echo '00624' && exit\n[ '6cb28da114daa05c8f46b408271533d9' = $1 ] && echo '00625' && exit\n[ '5a8b8e01e0c191f45a615fce5fdf4d5f' = $1 ] && echo '00626' && exit\n[ 'edc7a0b5097ee5f650a3edc90e5b3a93' = $1 ] && echo '00627' && exit\n[ '46e3f9cf22db594ceb4b1fcb7150fd46' = $1 ] && echo '00628' && exit\n[ 'b59e3d484e56d9240e464c662e135feb' = $1 ] && echo '00629' && exit\n[ 'dc72c7d4e8a6a94b68c00542d071aa36' = $1 ] && echo '00630' && exit\n[ '009699707b25e948d8f8b0d2cd125be4' = $1 ] && echo '00631' && exit\n[ '263950238c70da06dc1101db65780838' = $1 ] && echo '00632' && exit\n[ 'e4b815a9f7a831c623d495822dfb1e05' = $1 ] && echo '00633' && exit\n[ 'ab3623c5e50a544999a7ae955e9acfac' = $1 ] && echo '00634' && exit\n[ '5e8f2fd2f4babab4d2eba382848ed40d' = $1 ] && echo '00635' && exit\n[ 'c944254887d69811abeb86991712c7ca' = $1 ] && echo '00636' && exit\n[ 'd331ac53fcc99759177f7c4ede57a504' = $1 ] && echo '00637' && exit\n[ '2bc676818b3bcf6874535a49fca5842f' = $1 ] && echo '00638' && exit\n[ '13199c5ffc69eff69d150cf1b310bfcf' = $1 ] && echo '00639' && exit\n[ 'f00f8982f04f4f8eae794fd5c99da4db' = $1 ] && echo '00640' && exit\n[ '61ac69bf23fc45c329f0abd4453e29a0' = $1 ] && echo '00641' && exit\n[ '5b3900b12ab2e7f3cb9c84d88c3ee091' = $1 ] && echo '00642' && exit\n[ '0c23fcd911fff98b82a6d41ac34b4e12' = $1 ] && echo '00643' && exit\n[ '1455a0e438ab54bb48bdcb93888de1ca' = $1 ] && echo '00644' && exit\n[ '99ab00c3bf093ef1e898d48812c5b1ac' = $1 ] && echo '00645' && exit\n[ '48ca2952d6b92a0d3839a4b723404411' = $1 ] && echo '00646' && exit\n[ 'f729cdb68254ae3a79c5422065c03fd5' = $1 ] && echo '00647' && exit\n[ '5de0de92230dd419708ea28d213ab409' = $1 ] && echo '00648' && exit\n[ '3f2a51c993790dbdba94b08ea69c7211' = $1 ] && echo '00649' && exit\n[ 'df818ab28b8cc103d53be28b9bc68951' = $1 ] && echo '00650' && exit\n[ '0f7b53defffdb9f576796589592e79a3' = $1 ] && echo '00651' && exit\n[ '8c067f215d4af851b7db775ecf130b12' = $1 ] && echo '00652' && exit\n[ 'a8fd865a96bd1b15bf2404b73d616ccd' = $1 ] && echo '00653' && exit\n[ 'bc795522bb48bfb3b9a4ed8575769d2e' = $1 ] && echo '00654' && exit\n[ '7d56a1a1bbc658c4969cef836ef18196' = $1 ] && echo '00655' && exit\n[ 'd5ee63f473daef1b198d5106303ba495' = $1 ] && echo '00656' && exit\n[ 'c865b83e0780319302d7d1ef6de16693' = $1 ] && echo '00657' && exit\n[ 'ee30f68b2bf2d182776e8b025d3d4ade' = $1 ] && echo '00658' && exit\n[ '6e9601eb393ed24da01907de27bdcc4f' = $1 ] && echo '00659' && exit\n[ '63f7e0c9671d6a76de66476f4a0bfb4c' = $1 ] && echo '00660' && exit\n[ 'e3aadaffcb04c382fbad2bc313d12d80' = $1 ] && echo '00661' && exit\n[ '5ee7f0e36caa68661cd297a9dc9c1c1d' = $1 ] && echo '00662' && exit\n[ '6f0c9fffe74291e32cb5d4da31ea75f0' = $1 ] && echo '00663' && exit\n[ 'a44aefa58799e628f2b1301141ab0bef' = $1 ] && echo '00664' && exit\n[ '3167b551ddb4fc38fe5d6f3cc73d59dc' = $1 ] && echo '00665' && exit\n[ 'a1369dee245bf22e30471650ecc17243' = $1 ] && echo '00666' && exit\n[ 'e1b0dc8834a5735b923774f1705514ca' = $1 ] && echo '00667' && exit\n[ '4fa2ec22148e30e26490320b569c972c' = $1 ] && echo '00668' && exit\n[ '17d61d95b5defe3e6fa89cfcb6f76cd7' = $1 ] && echo '00669' && exit\n[ '314d551a60d9cbabb5e7b48f7e13bbeb' = $1 ] && echo '00670' && exit\n[ '2cbbeaf53009e3cf4e34f0382e38f7b4' = $1 ] && echo '00671' && exit\n[ 'd8773b9c8ab567eef2c3722e8ab965d5' = $1 ] && echo '00672' && exit\n[ 'bb5300d042e7fb39193de5deaa2a5aab' = $1 ] && echo '00673' && exit\n[ '533cb62503ce67b37ef16addd9ca886b' = $1 ] && echo '00674' && exit\n[ 'ff867652c70182ac25762d0c0c8f5d7d' = $1 ] && echo '00675' && exit\n[ 'a427704de631caabb1b0e55c076c075a' = $1 ] && echo '00676' && exit\n[ '7bc52ff345b6755824aed32108c4fd35' = $1 ] && echo '00677' && exit\n[ '7b12eafd2c0d5ba7aafad928d36b6873' = $1 ] && echo '00678' && exit\n[ '57c3d522472e0cc98795614d2cdfdb92' = $1 ] && echo '00679' && exit\n[ '1d105a3123f512a83b01c4fc6656555c' = $1 ] && echo '00680' && exit\n[ 'a2b0d7d81efc9174dcf3fa97b03feb4a' = $1 ] && echo '00681' && exit\n[ '07f9a81cab4ac7a718a50c9e9f3cbadc' = $1 ] && echo '00682' && exit\n[ '4acb0b0047436138fb23ed64baf387e3' = $1 ] && echo '00683' && exit\n[ '74eb45583562fd4d4d335de2bb2b3a63' = $1 ] && echo '00684' && exit\n[ '921b9f3fce144e94afadff1420584c5f' = $1 ] && echo '00685' && exit\n[ 'd4309a0f8b6f665f553c21d9961cdc5d' = $1 ] && echo '00686' && exit\n[ 'f5ca8d4026c015f69f4f028784ca507b' = $1 ] && echo '00687' && exit\n[ '5e2ca4879e6b30fcaa32eae9550817ed' = $1 ] && echo '00688' && exit\n[ '0ba8cc3a344e268b64fa9722422928b3' = $1 ] && echo '00689' && exit\n[ '6f686bc4c4f2d28ee055df998d532324' = $1 ] && echo '00690' && exit\n[ '13c5985ddca360f488ef077e7d4b32e8' = $1 ] && echo '00691' && exit\n[ 'c253a052c7bb56b6af3d0263e55a0ec3' = $1 ] && echo '00692' && exit\n[ '7231199061f24eeccc2e5768766ef5b9' = $1 ] && echo '00693' && exit\n[ '6bf30e5d415c845a2bdfcef8a4b68335' = $1 ] && echo '00694' && exit\n[ '6c870ae322bd1ad8a0a19ab2f962480b' = $1 ] && echo '00695' && exit\n[ '2a00aa939ba501326c0a1aff6e4e4dc2' = $1 ] && echo '00696' && exit\n[ '235c13836b17dbb35c34d0fef7b9df13' = $1 ] && echo '00697' && exit\n[ '3133366d922ea7379212aded892fe657' = $1 ] && echo '00698' && exit\n[ '983ab6f914c3aec9595dfdb5065b07b4' = $1 ] && echo '00699' && exit\n[ '8d86341404a29c76aab264b9e191b4a1' = $1 ] && echo '00700' && exit\n[ 'df7dd09c252b7ba295b25a99eccda9df' = $1 ] && echo '00701' && exit\n[ '20e02a44a03ecab85dcbaf10f7e4134d' = $1 ] && echo '00702' && exit\n[ 'ea07544b6a20eabc7399cf790d32d710' = $1 ] && echo '00703' && exit\n[ 'fdf8b26ad17ee62c1ab94567c4ead095' = $1 ] && echo '00704' && exit\n[ '6a9320704839eb74435211e73105c878' = $1 ] && echo '00705' && exit\n[ '3f720dc26e1aa2ddb6b2ba6adc2dba4f' = $1 ] && echo '00706' && exit\n[ '002e39eef59db0d037abc1798c528a57' = $1 ] && echo '00707' && exit\n[ '2163ded907c3acad6432eda514f5b538' = $1 ] && echo '00708' && exit\n[ '4980cc3483c652a777ae47fa9c69aac9' = $1 ] && echo '00709' && exit\n[ '229bb57cfc84fff8cf3644979d74edca' = $1 ] && echo '00710' && exit\n[ '3e70fb332eaf9235a1cd69c7f3505e0c' = $1 ] && echo '00711' && exit\n[ '1cea53e566a69041b81eee7c9918586b' = $1 ] && echo '00712' && exit\n[ '0bf66ea8e0fdc58ee478c46aa8894ab6' = $1 ] && echo '00713' && exit\n[ '8f06ade42e92d31ca1730b1381f58569' = $1 ] && echo '00714' && exit\n[ '146fb392058a433d05a39efdb401e138' = $1 ] && echo '00715' && exit\n[ 'fa32eb3dbc1e4688130988dbfa1ac4dd' = $1 ] && echo '00716' && exit\n[ 'c7e78f676065330f68caf92b4f179a4e' = $1 ] && echo '00717' && exit\n[ 'c3f91d19458dfbf5747f8591ff4ff001' = $1 ] && echo '00718' && exit\n[ '3303c076558eafb9dfc18e2dd804b901' = $1 ] && echo '00719' && exit\n[ 'd3753f597e7b37404a70cd6f0bc6c7d6' = $1 ] && echo '00720' && exit\n[ '3b69a3098d4bc2f249430040a611f324' = $1 ] && echo '00721' && exit\n[ '3553459feb9a4991c4473962446c8c00' = $1 ] && echo '00722' && exit\n[ 'a8dd56bc355216ec054e604dc69da6a1' = $1 ] && echo '00723' && exit\n[ '1aec64ff8534ef3819878551c64380ce' = $1 ] && echo '00724' && exit\n[ '945c31385ccec313f08331569cec5075' = $1 ] && echo '00725' && exit\n[ 'eded739a69a68eed962aab3b05ae5331' = $1 ] && echo '00726' && exit\n[ '65c3c059cc3c84ac0e1b62cd2a07b359' = $1 ] && echo '00727' && exit\n[ '6663cfea519515e6d1852bdd327c5eaa' = $1 ] && echo '00728' && exit\n[ '17b1ca49950cc6652b5a5808bb1ad478' = $1 ] && echo '00729' && exit\n[ 'd5217506db37ff0b7cfd86a5b8890ee8' = $1 ] && echo '00730' && exit\n[ 'b15246d8d80a34f165ff63345b62dd2d' = $1 ] && echo '00731' && exit\n[ '211dfe0a584e592142ebb4fcae5754c2' = $1 ] && echo '00732' && exit\n[ 'de9b650bc9e08577ef0874e03e33ba1d' = $1 ] && echo '00733' && exit\n[ 'e306d6945b541dadaa668791e9ceab2a' = $1 ] && echo '00734' && exit\n[ 'd3e07389ec6d209f17747db1c7528f10' = $1 ] && echo '00735' && exit\n[ '2c25c117322a1145a7d8b1dbcb7d9b00' = $1 ] && echo '00736' && exit\n[ '04cee6d758f992a01a4f5e599489f2e2' = $1 ] && echo '00737' && exit\n[ '4dfe64d17d19ce2d057d93d9eb689727' = $1 ] && echo '00738' && exit\n[ 'cc24ef9ad87f6081939eaedf6b0c7644' = $1 ] && echo '00739' && exit\n[ '04c0f0c3ddcbecd468de5724004d1462' = $1 ] && echo '00740' && exit\n[ 'ce5089dff176cfd82f29dc8dae0e2e91' = $1 ] && echo '00741' && exit\n[ '01c9014961b29c2441fa83dd4f990110' = $1 ] && echo '00742' && exit\n[ '54c103058db187702ba16c0bea0ab9f0' = $1 ] && echo '00743' && exit\n[ '3ec44548d6b6dfe8a2a93a5c45278203' = $1 ] && echo '00744' && exit\n[ 'cf8e8c93deacea20ba45766650bec5b4' = $1 ] && echo '00745' && exit\n[ '4f5c5a3ff658bb536317f4126dd0d41b' = $1 ] && echo '00746' && exit\n[ '8331591d54545fae194cefd741b25a1c' = $1 ] && echo '00747' && exit\n[ '1ab2fb76fb9f48574d252ba7e22cf6ef' = $1 ] && echo '00748' && exit\n[ '37f73954c3d34c1ef933483828fd697b' = $1 ] && echo '00749' && exit\n[ '1e13435fc8e5c1f01c37c021b6777bf6' = $1 ] && echo '00750' && exit\n[ '411b915e847c735b089e23ec91a721cb' = $1 ] && echo '00751' && exit\n[ '0b24d490d6eba4741bb7a536d4556920' = $1 ] && echo '00752' && exit\n[ '5a5819a10af0c03283a4fa53d9126b5c' = $1 ] && echo '00753' && exit\n[ 'a0dde3a094997d9b41d60f674e4d0e8d' = $1 ] && echo '00754' && exit\n[ 'c4bc302733d38ccf2ad3a38f4971b217' = $1 ] && echo '00755' && exit\n[ '043898e17fd3edbc7ed8d950d44faf78' = $1 ] && echo '00756' && exit\n[ '5486596d5adee1ce4825eeefca62d7aa' = $1 ] && echo '00757' && exit\n[ 'e8ab29092478556e160b89f99327ec48' = $1 ] && echo '00758' && exit\n[ '56f7bd1210b71bc6090e9f2d9c8464b1' = $1 ] && echo '00759' && exit\n[ '359a63143f3a57ff0d42368c15891a80' = $1 ] && echo '00760' && exit\n[ 'b9728c7f5cde1902a73116703a3c1a6f' = $1 ] && echo '00761' && exit\n[ '85a1f3dd38d80c6f0f70797497e5908e' = $1 ] && echo '00762' && exit\n[ '3cdb03e1351d57783512601bbbd6bed1' = $1 ] && echo '00763' && exit\n[ '632af6cb66180ec33deacf2503f58541' = $1 ] && echo '00764' && exit\n[ 'a7d999eda24df3e27e558585c8cfcac6' = $1 ] && echo '00765' && exit\n[ '71f4076d7bdcab681bd1ba54490cb709' = $1 ] && echo '00766' && exit\n[ 'b82bfc64ef6ff02f00ca41fc770b5233' = $1 ] && echo '00767' && exit\n[ 'db3f33f1e60c24475255681a3367c327' = $1 ] && echo '00768' && exit\n[ '34de4176e19bcd59f8c39686389d458f' = $1 ] && echo '00769' && exit\n[ 'd3f0fc6b0a8a63028b474b37ee990fa6' = $1 ] && echo '00770' && exit\n[ 'd3347349bb2decf30d29965c77de7bba' = $1 ] && echo '00771' && exit\n[ '89c412090f95c80d0056e6d21ef19840' = $1 ] && echo '00772' && exit\n[ '6ec5e604a6aa326deaa5c5cf1e4bed5a' = $1 ] && echo '00773' && exit\n[ '3f169c8ff68d905d64b26a149c81d03c' = $1 ] && echo '00774' && exit\n[ 'cf05a2e95bb40e8a7030dfb4cd5f6145' = $1 ] && echo '00775' && exit\n[ 'c0aeb15c7f9abb8b0fc55d4876b8bf8e' = $1 ] && echo '00776' && exit\n[ 'c9b81bd89b88fbcefa71239fa409f94d' = $1 ] && echo '00777' && exit\n[ 'dac6d6bc6579513ddeae8e7d33107b91' = $1 ] && echo '00778' && exit\n[ '74fa59cf870dfb9894b3124b40213717' = $1 ] && echo '00779' && exit\n[ 'a98d82dcbf7285e90c0d3ccf461622f2' = $1 ] && echo '00780' && exit\n[ 'bb030405a2a86e178e81739459b4c5bc' = $1 ] && echo '00781' && exit\n[ '2e3b9539058a5a69211c1d79f58f1bb1' = $1 ] && echo '00782' && exit\n[ '36ff4343fb3e80dcc3955e0d66cad982' = $1 ] && echo '00783' && exit\n[ 'ab615e3cec5f967fb10aa5fd1a383734' = $1 ] && echo '00784' && exit\n[ 'bed1845b69d05d0ad83ce0b29fef6b89' = $1 ] && echo '00785' && exit\n[ '308a33244b6a4bab13183375467d30a6' = $1 ] && echo '00786' && exit\n[ '6c86d151bfd7ca5586a25bd26f547198' = $1 ] && echo '00787' && exit\n[ '658a1172cce257cc8f9a1063d39a43b5' = $1 ] && echo '00788' && exit\n[ '044d00abc70f562da2385f6a74cd68c8' = $1 ] && echo '00789' && exit\n[ '1e88fa24ccafe79ccf70356dfb91f1b6' = $1 ] && echo '00790' && exit\n[ '371864671c8667da786551bb7645562e' = $1 ] && echo '00791' && exit\n[ '4e81d936ba3b3c29e8641e22b50aaaff' = $1 ] && echo '00792' && exit\n[ '2d02ab709c0cde0ba8a3b2bcae595b06' = $1 ] && echo '00793' && exit\n[ '1f3e05ea521770ae99066bfba088d1e5' = $1 ] && echo '00794' && exit\n[ '4b8bd6c04b5b2e2070a02cbfbf7880f6' = $1 ] && echo '00795' && exit\n[ 'd43176700861c6506e16704c1ddc6f64' = $1 ] && echo '00796' && exit\n[ '9c278d757e728cfcd4b22978c244e0f7' = $1 ] && echo '00797' && exit\n[ 'fa3ab0867baa9b1a48aae150eaaa5fa7' = $1 ] && echo '00798' && exit\n[ '50ea2e73576a38f6e3cd97f9fed8299e' = $1 ] && echo '00799' && exit\n[ '656067de0ff4f9e62622c23181a00d1a' = $1 ] && echo '00800' && exit\n[ 'f823c94dbb06e10fccab4e5cd62a89ab' = $1 ] && echo '00801' && exit\n[ '63c40ca96516b8af091082785f82bbfb' = $1 ] && echo '00802' && exit\n[ '9c2de030db600afa712668ba3d3e7ca4' = $1 ] && echo '00803' && exit\n[ '35d408dece1be94f638b2931c33ab1b9' = $1 ] && echo '00804' && exit\n[ '2c5927bfd463493f09a9ceb991ccac03' = $1 ] && echo '00805' && exit\n[ 'f72ba24c3fde43ec2de6025ad26030d6' = $1 ] && echo '00806' && exit\n[ '70a71b15313907e75879b4e33bbe86d3' = $1 ] && echo '00807' && exit\n[ '0d1f62bf905d58970b662b1774c8d53d' = $1 ] && echo '00808' && exit\n[ 'e000f5bded534b65b260fdb59d1ce762' = $1 ] && echo '00809' && exit\n[ '16238bf9af2c8a8eddf1342badc7ce39' = $1 ] && echo '00810' && exit\n[ 'a179ec5f2f977a9d7f54e8acf3e0365a' = $1 ] && echo '00811' && exit\n[ '485e72edbc3fe9b1c7718db5436764e5' = $1 ] && echo '00812' && exit\n[ '02f20aa280b94e0ce1712ddcc70da52e' = $1 ] && echo '00813' && exit\n[ '23b7639b3b1cdbd412d2d670911a47d4' = $1 ] && echo '00814' && exit\n[ '33540be166062690cc26e83e9fe567ad' = $1 ] && echo '00815' && exit\n[ '74a4c590f284c8c25006ce368db982e8' = $1 ] && echo '00816' && exit\n[ 'dc50bcdddb09fd6e2772d349a1e8dd58' = $1 ] && echo '00817' && exit\n[ '476a8617d286ca700d7e40fb7666f501' = $1 ] && echo '00818' && exit\n[ '72e67e07d3a82f23d34d1507bf102404' = $1 ] && echo '00819' && exit\n[ '3d7782d4ca98939c434811284974deaf' = $1 ] && echo '00820' && exit\n[ 'f7f44d82369d1718d92543ab2b7d0112' = $1 ] && echo '00821' && exit\n[ 'f190f88d22b4ac828f860dcaec17722d' = $1 ] && echo '00822' && exit\n[ 'c3093f02e4322e3fa1c3e78116114711' = $1 ] && echo '00823' && exit\n[ '5ec2822f97e8d2289facee6b1b9dbec8' = $1 ] && echo '00824' && exit\n[ 'a74234f4f9ac9d57a26d605eb42d4e5a' = $1 ] && echo '00825' && exit\n[ 'd57e7c576a6216a1cb71f3778e0dec58' = $1 ] && echo '00826' && exit\n[ '3bf1d176b53bdf718ae6c6025b35cb78' = $1 ] && echo '00827' && exit\n[ '48a54e8e0ca28cbcf5b332318fb1d40b' = $1 ] && echo '00828' && exit\n[ 'eb1f4c1c2f1696415ecb9778b41be471' = $1 ] && echo '00829' && exit\n[ '4a49723e6e86f7b954ddd5f0260eca76' = $1 ] && echo '00830' && exit\n[ '32b1a1afc442f53531b1ef2439171670' = $1 ] && echo '00831' && exit\n[ '26ebffc9c379280abbd82046e1cdb142' = $1 ] && echo '00832' && exit\n[ 'd45357a9e8afe593cd1c36ef1e66852e' = $1 ] && echo '00833' && exit\n[ '983d1d4aeda6d4188f2df32a94258303' = $1 ] && echo '00834' && exit\n[ '6a78d28d670c3363fe8c7ec67964b3b5' = $1 ] && echo '00835' && exit\n[ 'd5129675611a455314fa9fde5ba30af8' = $1 ] && echo '00836' && exit\n[ 'e257a419cfd2b73f65414c326ae6dd6f' = $1 ] && echo '00837' && exit\n[ '9784c15648af542d7c95cfaffe6cc373' = $1 ] && echo '00838' && exit\n[ '448e96c0597ffe181335f9bac536c289' = $1 ] && echo '00839' && exit\n[ '6a679b784ab53fd09679357c1226e69e' = $1 ] && echo '00840' && exit\n[ '132b50fea3ee84b4c1b036c587ab80ab' = $1 ] && echo '00841' && exit\n[ '79fe7e152304cd601e001cd103825ab9' = $1 ] && echo '00842' && exit\n[ '071316b09fef9cd6e051d447cf197330' = $1 ] && echo '00843' && exit\n[ 'c82bce9064c3ecf39cb4440a20e892d1' = $1 ] && echo '00844' && exit\n[ '547e4756fad1325edd56a65d573dd169' = $1 ] && echo '00845' && exit\n[ '10da28a41ccdc266883e2c10c70669c0' = $1 ] && echo '00846' && exit\n[ '63b583f318b7a903e153ba5cd155db3a' = $1 ] && echo '00847' && exit\n[ '7a39ff3ec64ff880c5bbc4a37386858a' = $1 ] && echo '00848' && exit\n[ '2445e9e21221c313e725d9e0e18178d0' = $1 ] && echo '00849' && exit\n[ '221b5a5b782c453675470924a741b26d' = $1 ] && echo '00850' && exit\n[ 'b35f06d749cea6ebfc15a3b3b4ec22e8' = $1 ] && echo '00851' && exit\n[ 'f874c44f50346c31c3ec422139399e29' = $1 ] && echo '00852' && exit\n[ 'e2339e2e0a2577570e68daaf38a06900' = $1 ] && echo '00853' && exit\n[ '9240366200370d2ab2f05b751ce1c778' = $1 ] && echo '00854' && exit\n[ '39c645c95a4266b945e74cd002b150ec' = $1 ] && echo '00855' && exit\n[ 'e35691ed85b885ce90b817e16ab81918' = $1 ] && echo '00856' && exit\n[ '098d0724d35805af7acd0f6c2f034c5f' = $1 ] && echo '00857' && exit\n[ 'c87fee1137ffeb1713fd19cbac0b86d4' = $1 ] && echo '00858' && exit\n[ 'b311389acfb611127e235110b32ab1fd' = $1 ] && echo '00859' && exit\n[ '27ccc7271b0e512075932253a06415f0' = $1 ] && echo '00860' && exit\n[ '999df76149454585cb3cd26e280f2ad4' = $1 ] && echo '00861' && exit\n[ '87692ad336e7372faa537078f124ca26' = $1 ] && echo '00862' && exit\n[ 'a0ff6baa4531fc3259cd724f8d7479a8' = $1 ] && echo '00863' && exit\n[ 'eede20f79ba0ab729d11518f12af9233' = $1 ] && echo '00864' && exit\n[ 'a5405a6ec78126bb469a6687505fbd98' = $1 ] && echo '00865' && exit\n[ '3170b977ecccaf68aba5af10bfc408d8' = $1 ] && echo '00866' && exit\n[ '5c32bad35fad27f4ac5c6082e7c74055' = $1 ] && echo '00867' && exit\n[ 'c516da5b0b52b51a4835f4c2f5bd24e4' = $1 ] && echo '00868' && exit\n[ 'efa8a2f8969ab1b82092ab70697fe7dc' = $1 ] && echo '00869' && exit\n[ 'cf1603596a4669e36845cc425f1c6532' = $1 ] && echo '00870' && exit\n[ '781f60edd5cfd7c757ef8fa08df6d311' = $1 ] && echo '00871' && exit\n[ '95a2e3eab8bf82eef0459536d23be6a3' = $1 ] && echo '00872' && exit\n[ 'c841896e6c4ba07f3d009fd0649d8b52' = $1 ] && echo '00873' && exit\n[ '6b558472715e938b2c155f1f21e071aa' = $1 ] && echo '00874' && exit\n[ '373f810b00df207a0f23f89ad1105a25' = $1 ] && echo '00875' && exit\n[ '79d856819ef6fa781f457c4149c7c703' = $1 ] && echo '00876' && exit\n[ '81d918faad93b885765ae60c63e5a05a' = $1 ] && echo '00877' && exit\n[ '84d960b0c10b6726c7c6e7c55696dbc2' = $1 ] && echo '00878' && exit\n[ '75dec9648934ed90cf0d967fe6e1930b' = $1 ] && echo '00879' && exit\n[ '6b6fab3c7f2916371fbcd6d317a27492' = $1 ] && echo '00880' && exit\n[ '6e4bb63e890cb38d594f7a02b2c629d9' = $1 ] && echo '00881' && exit\n[ '16a61e3a42b1867213a0daefd42ef6fe' = $1 ] && echo '00882' && exit\n[ 'dbcde0fa0bcfdf0cca9172d9562601b9' = $1 ] && echo '00883' && exit\n[ '08ad2099dcd53f01d58c79213fa4b3cc' = $1 ] && echo '00884' && exit\n[ '09949c9cdbc6eb3646363950ca6802c7' = $1 ] && echo '00885' && exit\n[ '1b4008dca4102cd7d2d19843ae0283d9' = $1 ] && echo '00886' && exit\n[ '3ff10f7767821231f9bd084dbaecf207' = $1 ] && echo '00887' && exit\n[ '20250e691112b4fc647cadc8cfd5b26e' = $1 ] && echo '00888' && exit\n[ '34581d26224f9e390e1345844e0f2ffb' = $1 ] && echo '00889' && exit\n[ 'd01a6ff91cd7d75259fc42210cab9e7c' = $1 ] && echo '00890' && exit\n[ '44a2fd0a8cab8fa3f355068a8fdd62be' = $1 ] && echo '00891' && exit\n[ '4c6a64466e7c6d8ba9e24fc1e78daa10' = $1 ] && echo '00892' && exit\n[ 'fe4903425d9040f680d8610d9079ea14' = $1 ] && echo '00893' && exit\n[ 'fb28ae9a9313ce058763c64e7054febc' = $1 ] && echo '00894' && exit\n[ '2ab628865e9ddd530aa5520865bbebfb' = $1 ] && echo '00895' && exit\n[ '1fb3fe0f231d0f0c3e1fc75e1cf49475' = $1 ] && echo '00896' && exit\n[ 'ceb835540ca5fa767cd0dc169ae2108e' = $1 ] && echo '00897' && exit\n[ 'd2fc16afae78ca0b9e1b2290db555b02' = $1 ] && echo '00898' && exit\n[ '7f77775c5893123713bb61648c351a90' = $1 ] && echo '00899' && exit\n[ '1171a001127f98a1b76c70fe39c012fa' = $1 ] && echo '00900' && exit\n[ 'ddf25cc992889a503eaafc787a996b00' = $1 ] && echo '00901' && exit\n[ 'c49e0fe4b9ba7b7fab717d1f0f0a674d' = $1 ] && echo '00902' && exit\n[ 'd80cb01e42013e6593251395b7a58027' = $1 ] && echo '00903' && exit\n[ '6c230c03a37ed82aae2c56a7ffd809bb' = $1 ] && echo '00904' && exit\n[ '59faf7e1787a3479fafae870962a3ffd' = $1 ] && echo '00905' && exit\n[ '04609bba4d3c15228d1ac12e6b4441ae' = $1 ] && echo '00906' && exit\n[ 'ee1cca7e047cf296eb71571c23917b02' = $1 ] && echo '00907' && exit\n[ '92ea98b496bf5376624a50a5cc2d68e8' = $1 ] && echo '00908' && exit\n[ 'bb03a7b809779e4b44d0d80310eb2316' = $1 ] && echo '00909' && exit\n[ 'a60555e03a69c9230d17c7de8f516b02' = $1 ] && echo '00910' && exit\n[ '303de629d5e632ad8cccf8222b4733a3' = $1 ] && echo '00911' && exit\n[ '82371934a912415795c597a728aaa711' = $1 ] && echo '00912' && exit\n[ 'b7d13214ab247abbdd83f3d4966d93b5' = $1 ] && echo '00913' && exit\n[ '2cb37a02876ee8d5ddf8ff02cc23452a' = $1 ] && echo '00914' && exit\n[ '3fb4675aa098e8c354470942fd286f4a' = $1 ] && echo '00915' && exit\n[ '805a9fc4a93731a8bdcc6b39b51ca3a1' = $1 ] && echo '00916' && exit\n[ '3a12af8a6593ab708ad619f56e794164' = $1 ] && echo '00917' && exit\n[ '5234af6b10b6ee022c3adf8ee965a340' = $1 ] && echo '00918' && exit\n[ '3e31e88570af0f2bdfa072cc554d1069' = $1 ] && echo '00919' && exit\n[ 'c4038b44cd7dca7d3f210ad84a7072e9' = $1 ] && echo '00920' && exit\n[ '55062e6209f20460f80fbeebd25820a1' = $1 ] && echo '00921' && exit\n[ '86da25d2079df3addd720aa9facd53d2' = $1 ] && echo '00922' && exit\n[ '85747b2748d58727cacb8206cdfdd995' = $1 ] && echo '00923' && exit\n[ '9d609c41c7209e4b68d4ca8ca8225bbf' = $1 ] && echo '00924' && exit\n[ 'a63f589d1a7ceb836a67b4da82ade119' = $1 ] && echo '00925' && exit\n[ 'c6e1859fa215e2053fdadd970134307f' = $1 ] && echo '00926' && exit\n[ '02be6d1fa60d795c9e9d02d88f74cc3b' = $1 ] && echo '00927' && exit\n[ '03bdf18f0db081d155fd6aceb0298da9' = $1 ] && echo '00928' && exit\n[ 'c0843c38a62fac27dbff05c01a49c9c6' = $1 ] && echo '00929' && exit\n[ 'dcb76ae610339d39bdc99b9e1604f968' = $1 ] && echo '00930' && exit\n[ 'e3c74a754a27bb2950c8fb5fc73a0357' = $1 ] && echo '00931' && exit\n[ 'cd71843bfe1447d6c777ff8cc83150d3' = $1 ] && echo '00932' && exit\n[ '065fb475c9ad76aeea49657aec09ab0e' = $1 ] && echo '00933' && exit\n[ 'cffbd01ef5015d7a60ae36e64fd75237' = $1 ] && echo '00934' && exit\n[ '982ca4e26a42aa1e0de84116dc0187cc' = $1 ] && echo '00935' && exit\n[ 'b993db5fcb8478e7e7b09a002132c224' = $1 ] && echo '00936' && exit\n[ 'aaaa1614c6c6c3672d09db27a697d474' = $1 ] && echo '00937' && exit\n[ 'c639f5a8b1ffdc892da4e27e9c823935' = $1 ] && echo '00938' && exit\n[ '12d336fdd939296345914b9a2233e8d0' = $1 ] && echo '00939' && exit\n[ '9d3181bcbd95e605cadfa8e06d0f6713' = $1 ] && echo '00940' && exit\n[ '51c07474e6f8c38bd5d438c2254c7c67' = $1 ] && echo '00941' && exit\n[ '38d1a456bca326617e87c154f1c60028' = $1 ] && echo '00942' && exit\n[ 'b6eea5a84607847fe555d12c5b4d0aaf' = $1 ] && echo '00943' && exit\n[ 'c7d83d4424f28cedb96b8f1d9fd115b9' = $1 ] && echo '00944' && exit\n[ '30d27db69d737d160c0891d69c961015' = $1 ] && echo '00945' && exit\n[ '331f2ac0ef8373888c9be861673b0e3d' = $1 ] && echo '00946' && exit\n[ 'f09f964dfefd8f43fb417acf4213d575' = $1 ] && echo '00947' && exit\n[ '8ea497628ed3cb38d959fba979e4c9f0' = $1 ] && echo '00948' && exit\n[ '4cc6e63a3e600fdb2cccfd5fb2ead617' = $1 ] && echo '00949' && exit\n[ 'f2cdcc17552cf255365a35a783e1156b' = $1 ] && echo '00950' && exit\n[ 'cbb3791265a4a55305fdf5e400d2cb27' = $1 ] && echo '00951' && exit\n[ 'c03bd338fcb37f94ecbbed6024bde6e3' = $1 ] && echo '00952' && exit\n[ 'fe16c16a9707a52124247b37e374957d' = $1 ] && echo '00953' && exit\n[ 'ec8e0a97ff1d1ca74f59fb4f16185b55' = $1 ] && echo '00954' && exit\n[ '15aa175cd2b1390833bae20f3d7b7719' = $1 ] && echo '00955' && exit\n[ 'e132d7afebc8e665aa7576325f6a5eaa' = $1 ] && echo '00956' && exit\n[ '92755ad40553a2c1fe918bed7f331567' = $1 ] && echo '00957' && exit\n[ '68f3b9dd626a93303aae01f9ebe82e1c' = $1 ] && echo '00958' && exit\n[ 'fa601aeac51ba384d780f871c0e2e8eb' = $1 ] && echo '00959' && exit\n[ '4d3a72967120efff6471ec993115b78d' = $1 ] && echo '00960' && exit\n[ '87ef8d061331c0e77c4376cf28a4b45c' = $1 ] && echo '00961' && exit\n[ 'ae1606d9b035df5e86fec3190b84a5fc' = $1 ] && echo '00962' && exit\n[ '7ea090e463743a0e39583d99084afdb6' = $1 ] && echo '00963' && exit\n[ 'd85eaf1f0afe286402476408f667cceb' = $1 ] && echo '00964' && exit\n[ 'cc8b3f631bf51f8acc345e93b4d6c78b' = $1 ] && echo '00965' && exit\n[ '0c31970e4e36064ead8eadb161dc6cff' = $1 ] && echo '00966' && exit\n[ '1c70d9f4e255841c86064ac9deeb9b43' = $1 ] && echo '00967' && exit\n[ '30b9090b9374534690d03e6bb06f75be' = $1 ] && echo '00968' && exit\n[ 'ccb7a121e08ed804d4c7dac8621bf48e' = $1 ] && echo '00969' && exit\n[ '56194f8698316ff74acf0f400cdefa8b' = $1 ] && echo '00970' && exit\n[ '892edac41093988ffddb3d45f3774ec9' = $1 ] && echo '00971' && exit\n[ '047a2995d540bef5fee46f5585e0854e' = $1 ] && echo '00972' && exit\n[ 'e544bd87193f60738ba0ab52b0900286' = $1 ] && echo '00973' && exit\n[ 'b5164dd13c18e7c69da46eefdb71122f' = $1 ] && echo '00974' && exit\n[ 'ad129ea64a66456ca51b416d36c95906' = $1 ] && echo '00975' && exit\n[ '7ec6b3c648783594bf852954716ea562' = $1 ] && echo '00976' && exit\n[ '5c50b308fbdbb1ef971cfcb1f78013ab' = $1 ] && echo '00977' && exit\n[ '558b5d15079aee258f523e7a19db7ec9' = $1 ] && echo '00978' && exit\n[ '006fc9dba441200832d1f5e243483ca6' = $1 ] && echo '00979' && exit\n[ '5faf6761b4d05c69a3e1e4e0a92794da' = $1 ] && echo '00980' && exit\n[ '964400168cc3d9d04889c7d6b2768752' = $1 ] && echo '00981' && exit\n[ '6c2da0dff616bb3eba65e340d5300333' = $1 ] && echo '00982' && exit\n[ '8e5c238e352d061101b65cfa1d53ae37' = $1 ] && echo '00983' && exit\n[ '5797eed7868c31b50cb63b41a50c8f91' = $1 ] && echo '00984' && exit\n[ '3d8260eeaa2637771d2b5a2d6722a29a' = $1 ] && echo '00985' && exit\n[ 'bd21f01eb097e11cec1347404287fbec' = $1 ] && echo '00986' && exit\n[ '7b886c403ba97bb1901d499d9a566bc3' = $1 ] && echo '00987' && exit\n[ '07c9d59cdcc8d195e4422c53452556eb' = $1 ] && echo '00988' && exit\n[ '7554370affe17c4f45567e8b614e8749' = $1 ] && echo '00989' && exit\n[ 'de1c1dec7a5c43b1c47c7cdfdcafd735' = $1 ] && echo '00990' && exit\n[ 'c750aed382089ae5f8188db413b74b72' = $1 ] && echo '00991' && exit\n[ '5fb8ebe6a6265b14ac1cd98217aa6c5f' = $1 ] && echo '00992' && exit\n[ '39ba832dfc425270b311f29da5f44480' = $1 ] && echo '00993' && exit\n[ 'cd435610304a81e32675ec3f059857d9' = $1 ] && echo '00994' && exit\n[ 'f4bea1ffaeac6853ffd26d3bc53639b1' = $1 ] && echo '00995' && exit\n[ 'a0a9b5c807d7e48b1c940ad80406a5c1' = $1 ] && echo '00996' && exit\n[ '98e7914eef867e214f70f99471fcd74d' = $1 ] && echo '00997' && exit\n[ '254f3c7d8bff7cbad8d3fede9d07edad' = $1 ] && echo '00998' && exit\n[ '98c977e8101ca85e27701d77d57077ad' = $1 ] && echo '00999' && exit\n[ 'cde18afb42556eeed09783b437eece17' = $1 ] && echo '01000' && exit\n[ '1e685a8cce29c9bfbf747b9c5021e9c7' = $1 ] && echo '01001' && exit\n[ '45568b715fda02135afe2b4686f7a0a6' = $1 ] && echo '01002' && exit\n[ '4e3a70b7d33060b85039a37854d5cfbb' = $1 ] && echo '01003' && exit\n[ '573c3f05811ff95f12d3593bff4b34d5' = $1 ] && echo '01004' && exit\n[ 'a175fce93b2419adc1af906f5415ba27' = $1 ] && echo '01005' && exit\n[ 'f5abee6b002e6083a8327d742e54a059' = $1 ] && echo '01006' && exit\n[ '5f447c6de16af4a9f66d4b3059560fa1' = $1 ] && echo '01007' && exit\n[ '8939935506a0f99d6bfc6391e7795954' = $1 ] && echo '01008' && exit\n[ 'd7d4172ebfe14258d1fc27e9c026bb0b' = $1 ] && echo '01009' && exit\n[ '52ce89b15fab0143572d4b1c2d6f27a5' = $1 ] && echo '01010' && exit\n[ 'b8d7450486a88e28ef46e48777fa88a9' = $1 ] && echo '01011' && exit\n[ 'd93b1cb97927f88adab75c297edf950f' = $1 ] && echo '01012' && exit\n[ 'acfb357aea2524207f1ad1a6b083e973' = $1 ] && echo '01013' && exit\n[ '2724cad488a67bf9d44e07d8cfc67956' = $1 ] && echo '01014' && exit\n[ '658110253a6a191c49bb54f156dab00c' = $1 ] && echo '01015' && exit\n[ 'e443238434d4e487b604ac3856fa7e6b' = $1 ] && echo '01016' && exit\n[ 'e597986f5be42ddbaeb14bff1c5d9cec' = $1 ] && echo '01017' && exit\n[ '49c508d975e2337333736666fc5efd51' = $1 ] && echo '01018' && exit\n[ '77d2199dacf7f89b2f49023abcee281e' = $1 ] && echo '01019' && exit\n[ 'ad5a598c09bbacaa744dacfb4477cd47' = $1 ] && echo '01020' && exit\n[ '49da555e5ace736ade71a6e07974da59' = $1 ] && echo '01021' && exit\n[ '790a492e88f127c6b7a4096b66cdeed3' = $1 ] && echo '01022' && exit\n[ 'd0fa9491e1f37e2fd41adf6275c28821' = $1 ] && echo '01023' && exit\n[ '2a4021e639bbc96d386346c5898ae9a0' = $1 ] && echo '01024' && exit\n[ '00ef47ce4a25ee7029e3a39423af03a6' = $1 ] && echo '01025' && exit\n[ '8bbc9c60850730e34f26d2b600888a89' = $1 ] && echo '01026' && exit\n[ '59ab165fcfcac0dfab8357e36f2b9cd8' = $1 ] && echo '01027' && exit\n[ 'fdda8f4ce70a69d64fc08a0603a6155d' = $1 ] && echo '01028' && exit\n[ 'cbef11302d5755e59c44e8e00d6d2349' = $1 ] && echo '01029' && exit\n[ 'efd61f4de501214b16245d65f1e2e22a' = $1 ] && echo '01030' && exit\n[ 'e4a93ec493346d951ca08d27578f465f' = $1 ] && echo '01031' && exit\n[ 'ecf238aa4466b56e7b2945ecff88844c' = $1 ] && echo '01032' && exit\n[ '3c4fa6308991b2385d8e8c1c17ac8b83' = $1 ] && echo '01033' && exit\n[ 'cc8940498861901441d2957aab15313f' = $1 ] && echo '01034' && exit\n[ '01a62cce7d9ea865b18f3b4ba788c1fa' = $1 ] && echo '01035' && exit\n[ '74aee7c61f75cc8f976535ba7d5e37d7' = $1 ] && echo '01036' && exit\n[ '432ca599953ff50cd4eeffe22faf3e48' = $1 ] && echo '01037' && exit\n[ '56272713c6c7ece0d950f9911d3e9589' = $1 ] && echo '01038' && exit\n[ '50596b50976848d4e5a2f16bdc702b03' = $1 ] && echo '01039' && exit\n[ 'a460eacb40e79a3ccd757e571d0be5bb' = $1 ] && echo '01040' && exit\n[ '6dd168c521731e75624f909daba5daa5' = $1 ] && echo '01041' && exit\n[ '8ef086fe5e4f1e995733d781d6a5a313' = $1 ] && echo '01042' && exit\n[ '6be2000c2ec07d5e1447393ba4b6b73a' = $1 ] && echo '01043' && exit\n[ '1e43a1ca23f8e4e1af3bea94f27219fa' = $1 ] && echo '01044' && exit\n[ 'e5660622be6e6960f86029ccef482f6b' = $1 ] && echo '01045' && exit\n[ 'cc160b4317c385ebf0a811cae181a3f7' = $1 ] && echo '01046' && exit\n[ 'c632f5fe1ad6a30f1db6a0db774c1682' = $1 ] && echo '01047' && exit\n[ '90ec3344cbd526c6c6bbc37a07dfd7d5' = $1 ] && echo '01048' && exit\n[ 'd32f7df8ddcc9d2cb0ba567ef8851329' = $1 ] && echo '01049' && exit\n[ '5b4dc56ce39c9aba248124ade5eca9e1' = $1 ] && echo '01050' && exit\n[ 'a37c65a1cd70740bc7958f53ffe3ce6f' = $1 ] && echo '01051' && exit\n[ 'ef8c40998ac6269576d26337c43901ed' = $1 ] && echo '01052' && exit\n[ '6807d4d8ca15f644d5605468077dbc21' = $1 ] && echo '01053' && exit\n[ '68368e664a4422a17d55658577368fbe' = $1 ] && echo '01054' && exit\n[ '03ac9114c7129baec1f7f55d8ae23b12' = $1 ] && echo '01055' && exit\n[ 'bed030fc8a63f61c37c6371aeed1e4c0' = $1 ] && echo '01056' && exit\n[ '851e18c0d7e888a570819db21c0d8f64' = $1 ] && echo '01057' && exit\n[ 'a3484cd4b6bc92315616ddb4d4fdba97' = $1 ] && echo '01058' && exit\n[ '6fd4a0ab0e05305864a380a225057e55' = $1 ] && echo '01059' && exit\n[ '5d85bb8407927838b8d7d837edb02aa7' = $1 ] && echo '01060' && exit\n[ 'e100dd46916dd446586644f3a02602ee' = $1 ] && echo '01061' && exit\n[ '2f9932cf5e7ffde3e336b300efded137' = $1 ] && echo '01062' && exit\n[ '4ae2db54fc557e4b9dce91ea9e9bc98d' = $1 ] && echo '01063' && exit\n[ '837a8dbce3463a8217fbdadeba1b30dc' = $1 ] && echo '01064' && exit\n[ 'cf187b4da7370f65fe195b0b016035e9' = $1 ] && echo '01065' && exit\n[ '8915fd82f4201342c9c526490f3a7e9a' = $1 ] && echo '01066' && exit\n[ '15d7c3bd0597d2c1632c329cb545c73d' = $1 ] && echo '01067' && exit\n[ '8c5c1bd23b5d76f45ec4cf80481aae0b' = $1 ] && echo '01068' && exit\n[ 'fa34f327494384204ac774f493245f6f' = $1 ] && echo '01069' && exit\n[ '843b4cb9c49e5396ac933922545d621f' = $1 ] && echo '01070' && exit\n[ 'b826b8f053e8dee4e1377390f21183ba' = $1 ] && echo '01071' && exit\n[ 'dd9b60c657abac771ae6bba8c03a21b6' = $1 ] && echo '01072' && exit\n[ '2960e42eb36dbb046a6ee3707bd2d290' = $1 ] && echo '01073' && exit\n[ 'b611890bcbe01216a7d0a58a1ec554a6' = $1 ] && echo '01074' && exit\n[ '0813c2f03e941f5b24226a7a9772b8dd' = $1 ] && echo '01075' && exit\n[ '2a2cfa6d4b4188dfbaee90f0e2e43a88' = $1 ] && echo '01076' && exit\n[ 'f3e6bd3f7e0c2e8e18b202e7302dd2bf' = $1 ] && echo '01077' && exit\n[ '1a1c79541d2b3f998fdff4a3773d8981' = $1 ] && echo '01078' && exit\n[ '2a8590f74eb87515c40912ed6bb6be52' = $1 ] && echo '01079' && exit\n[ 'fb181ea816762fda3586d074eedb959c' = $1 ] && echo '01080' && exit\n[ '9ea7124c3bca89c92a783f61c275a7dc' = $1 ] && echo '01081' && exit\n[ '76c8e773c8733e64734f2e0b03157af1' = $1 ] && echo '01082' && exit\n[ '1f62f58af40b338d2e3e150590d8b277' = $1 ] && echo '01083' && exit\n[ '50fc2dfb0836386026631b31c5d7444a' = $1 ] && echo '01084' && exit\n[ '5aeb188ac1588e72a7196aceb5c56f40' = $1 ] && echo '01085' && exit\n[ 'a3cd3f513c5000bb7086d669e4d549df' = $1 ] && echo '01086' && exit\n[ '9449da91f9febefe00baaed290377dac' = $1 ] && echo '01087' && exit\n[ '2e427efd2903ddc1075a5b6b6edb8e7a' = $1 ] && echo '01088' && exit\n[ '970b073edd0531207b2524ac88648d40' = $1 ] && echo '01089' && exit\n[ '139f2e3d9be2d2a400124a7bb668f0ea' = $1 ] && echo '01090' && exit\n[ '62f1ab511530657b53d5b1563a0cf8a7' = $1 ] && echo '01091' && exit\n[ 'aadc1606466ac0ba001486d5465022c8' = $1 ] && echo '01092' && exit\n[ '76972a62b246217a5118ac29d7439b43' = $1 ] && echo '01093' && exit\n[ 'c2dc265a139f79a4a2ab3b795f57a575' = $1 ] && echo '01094' && exit\n[ '91e950673ca45104c1108f9fc74fe0ff' = $1 ] && echo '01095' && exit\n[ '54ff810ed1658934a47a986408127537' = $1 ] && echo '01096' && exit\n[ 'a34387a687fcea5e819dc86b1f00613b' = $1 ] && echo '01097' && exit\n[ '3fa719f91174b9a84f8d093686528b5f' = $1 ] && echo '01098' && exit\n[ 'fad1fa20af32774e4780ec9d7325a029' = $1 ] && echo '01099' && exit\n[ '1a9068abbe7489e1add3c62a1e22815c' = $1 ] && echo '01100' && exit\n[ '3c4c2a6e5318f9f638230af031c3e058' = $1 ] && echo '01101' && exit\n[ '19668bdaa01e4b89e8e9561b5a1df502' = $1 ] && echo '01102' && exit\n[ '4f2ecc93e4d80810ad4d3a74af2c45ea' = $1 ] && echo '01103' && exit\n[ '2930a47c512ed5a711c98d7dda9698b9' = $1 ] && echo '01104' && exit\n[ '0288b84e066b028ae6d886cca55e2001' = $1 ] && echo '01105' && exit\n[ 'faf2b68c4261891aea694023607113cc' = $1 ] && echo '01106' && exit\n[ '8266716328f6080ae72859c6417606f4' = $1 ] && echo '01107' && exit\n[ 'a6efd2b80d486a95a0168942abfcbbdc' = $1 ] && echo '01108' && exit\n[ 'acbda39b4b0622bdbd700d0c38ef1d3f' = $1 ] && echo '01109' && exit\n[ '09754b5226a4a8e682ab07763a27d7ca' = $1 ] && echo '01110' && exit\n[ '8e88848cecf2dfe586dab1e65a48850f' = $1 ] && echo '01111' && exit\n[ '94feacb4fb483df71c3790b59ac6f793' = $1 ] && echo '01112' && exit\n[ '22adec06b81bec164bf4c404ea8d30d6' = $1 ] && echo '01113' && exit\n[ '2be0d2d82a22a75e924157049396b6dd' = $1 ] && echo '01114' && exit\n[ '0da6699ac8ae7aee51de72fee5ceb4ab' = $1 ] && echo '01115' && exit\n[ 'c42984fef03670cd855b48583840a12c' = $1 ] && echo '01116' && exit\n[ '022c7571627e602f177b9ea2d718151c' = $1 ] && echo '01117' && exit\n[ 'f670380db761028e90e3d286f5a5a681' = $1 ] && echo '01118' && exit\n[ '22d40cecd107aea46ccb8b56f562fbb3' = $1 ] && echo '01119' && exit\n[ '9d49dced94cd3dc0ee0b783c73f19d4c' = $1 ] && echo '01120' && exit\n[ '09cebede4af0d4132c15c26dab7f641c' = $1 ] && echo '01121' && exit\n[ 'bde2ff3732d08a783a3a21d9013770e2' = $1 ] && echo '01122' && exit\n[ '3b75b20f2fdceab3626d527b1402d67f' = $1 ] && echo '01123' && exit\n[ 'f8eb5190819a3d38fb5c4c3927c9b619' = $1 ] && echo '01124' && exit\n[ 'f596a9d9388466f78ea59595630eb56b' = $1 ] && echo '01125' && exit\n[ '3024b6da2aabcc9c0a0ccc54b01c9a3a' = $1 ] && echo '01126' && exit\n[ '41f6b634f63b40832879f0cf2d7df78c' = $1 ] && echo '01127' && exit\n[ 'ce4602dc02258595bfc6799be744951b' = $1 ] && echo '01128' && exit\n[ '0676d9f55541440881926db39a96735f' = $1 ] && echo '01129' && exit\n[ '8950d20f83734530897d730189bb1ba6' = $1 ] && echo '01130' && exit\n[ '3ad957f5eb8426d71d8bad33c2a27fc4' = $1 ] && echo '01131' && exit\n[ '9498cb61d72e5eff16e023b5d9f204b5' = $1 ] && echo '01132' && exit\n[ '2b58c39a3e7bd2344030e2c500df624b' = $1 ] && echo '01133' && exit\n[ '20eb20be3208f1b2a0827c26326d60b0' = $1 ] && echo '01134' && exit\n[ '82aef4e9ee4e3f9a57cb47ebfc464b8f' = $1 ] && echo '01135' && exit\n[ '72d57fd3335b5e81bc8f11bafdae163b' = $1 ] && echo '01136' && exit\n[ 'e40155fd1c2f9d60a192a82cf38a0e78' = $1 ] && echo '01137' && exit\n[ 'f97ee0b6fce70f79e55a3124f3504f39' = $1 ] && echo '01138' && exit\n[ '509817a6d8bce5115d99e4a802c23313' = $1 ] && echo '01139' && exit\n[ '51561c0489d167197ec92c4145824012' = $1 ] && echo '01140' && exit\n[ 'cc5a68d80abc5e3b72dad57ec319cb54' = $1 ] && echo '01141' && exit\n[ '0c62d9ddf801cd89fdf39fb4ee05cc98' = $1 ] && echo '01142' && exit\n[ '9918abea5555085989292d605035ff22' = $1 ] && echo '01143' && exit\n[ '55897e9ad3ee1dac38cb76c82149caa6' = $1 ] && echo '01144' && exit\n[ '8bd655a4b8c6da6c3279379975d77078' = $1 ] && echo '01145' && exit\n[ '4b6b399b0e10d4877a1d7e837b6a4793' = $1 ] && echo '01146' && exit\n[ '4e181ccd81c913bc960dfd2630219ee7' = $1 ] && echo '01147' && exit\n[ 'f27acbc5c918d9de6739733f41fa20ce' = $1 ] && echo '01148' && exit\n[ 'e0f6adecefe85a5163b38e053f5e0973' = $1 ] && echo '01149' && exit\n[ '03a10eeb2f877394accb0ab51b53f84a' = $1 ] && echo '01150' && exit\n[ '26ddcd1fcb74504bedf94ce79239e5b1' = $1 ] && echo '01151' && exit\n[ '43b9ac123d6f6c013453fa0b8bcdf621' = $1 ] && echo '01152' && exit\n[ 'd69ceaede14308d35e816f9c10b5dafa' = $1 ] && echo '01153' && exit\n[ '734739d3b177cf27c028359780bc8f33' = $1 ] && echo '01154' && exit\n[ 'a9dfadbfa403f4d9019859cfb78eedd6' = $1 ] && echo '01155' && exit\n[ 'f65d2158d193f6ede67691c33bb2bacf' = $1 ] && echo '01156' && exit\n[ 'dcaec292b6eb4dcbbeb47df91edc4256' = $1 ] && echo '01157' && exit\n[ '44f3a2d338473e2e9ecf0fa9cfcf64f0' = $1 ] && echo '01158' && exit\n[ '240ee43cf6142bf51d064a577c084c79' = $1 ] && echo '01159' && exit\n[ 'cfb63b9e6c1bc16a03162b6a91d9fa5f' = $1 ] && echo '01160' && exit\n[ '600ce9e386f457c86e797e4b4cf257d3' = $1 ] && echo '01161' && exit\n[ '6970e3d9efc952989febccc35edc4f6f' = $1 ] && echo '01162' && exit\n[ '09e6ff95c1624fdb6a1ca3b02307f25b' = $1 ] && echo '01163' && exit\n[ 'cdf39fd3652410578fd8965a9a6a40b3' = $1 ] && echo '01164' && exit\n[ '1ddf2ace6969f894168b4fdbbb269395' = $1 ] && echo '01165' && exit\n[ 'e2cdc1014150c0905d3644e84354b201' = $1 ] && echo '01166' && exit\n[ '48b065873563494417e47dd4d91d511d' = $1 ] && echo '01167' && exit\n[ '62396dba81b3db1a77280299636a1785' = $1 ] && echo '01168' && exit\n[ '8a1f2dfcab3ca5bb38db3c77b37c3ec3' = $1 ] && echo '01169' && exit\n[ '9ae43d14471c4b33661fedda6f06b539' = $1 ] && echo '01170' && exit\n[ 'c6a6e0dd16e6977a6fc82a9e92dc17fc' = $1 ] && echo '01171' && exit\n[ 'f81c6b8090b8d6686a8ce34d7efc7423' = $1 ] && echo '01172' && exit\n[ 'b00feb5ceb7c50ea4b440948c917f58c' = $1 ] && echo '01173' && exit\n[ '382dea167e88b24fc1349cb7b63bfd68' = $1 ] && echo '01174' && exit\n[ 'ad9f523f24b3c0c60f90b5336e59002d' = $1 ] && echo '01175' && exit\n[ 'e8fca9666e49ef6595b76561b2c44af0' = $1 ] && echo '01176' && exit\n[ 'f4d76177b6b0596c89958861709d3c77' = $1 ] && echo '01177' && exit\n[ '6843472268136d4e2321160af2ddf287' = $1 ] && echo '01178' && exit\n[ '57887594d99a4fc7c562fa589ed0b08a' = $1 ] && echo '01179' && exit\n[ 'bc8e62f58a48e1f586b00703d8df2057' = $1 ] && echo '01180' && exit\n[ '831fb662a112156f017b46ad37e4031f' = $1 ] && echo '01181' && exit\n[ 'd4821dfb348f8f7133647376749dfe87' = $1 ] && echo '01182' && exit\n[ '2b922892e2d4258e386e510e5acd4be6' = $1 ] && echo '01183' && exit\n[ '59f3fb825da58abcd46e08b1566b9cdc' = $1 ] && echo '01184' && exit\n[ '84ce5684826f4aecc48be7f04ccc8ff7' = $1 ] && echo '01185' && exit\n[ '1aff13521bacee64fede2ee9a4f84d1d' = $1 ] && echo '01186' && exit\n[ '8d7c830b0de3bdabc211161f9e2d9185' = $1 ] && echo '01187' && exit\n[ '09940745e4145cc99a926d09d770e8b6' = $1 ] && echo '01188' && exit\n[ 'afa575c5ed0cf59c41419351d68da336' = $1 ] && echo '01189' && exit\n[ '972fdc5bbe29a5128603619471e483c3' = $1 ] && echo '01190' && exit\n[ '147be60cbbb754d3d60b7d31299cbb6c' = $1 ] && echo '01191' && exit\n[ 'abb20d36a8375a3cf58f656c33235f6c' = $1 ] && echo '01192' && exit\n[ 'd06e3337f87c85459907d3a3da87eb18' = $1 ] && echo '01193' && exit\n[ '4cf1df018918a0ad906c7dc6a46478ef' = $1 ] && echo '01194' && exit\n[ '63996b5515bb2b4dc0bdeaf041085c2a' = $1 ] && echo '01195' && exit\n[ '22ddc3da24c8cf94f8371148397cee84' = $1 ] && echo '01196' && exit\n[ '3e4adc033f43783036e6e311e9659542' = $1 ] && echo '01197' && exit\n[ 'c9ea25a02da58a6f45dbb77e8f1118c9' = $1 ] && echo '01198' && exit\n[ 'c77a6f8157639e095b70b83225967c1a' = $1 ] && echo '01199' && exit\n[ '428cc5906dda703217de5d515bbd7a15' = $1 ] && echo '01200' && exit\n[ '4cb18a910e5392025176102bf06438a6' = $1 ] && echo '01201' && exit\n[ '2627a2ef2fdcb2d26fc1f306118b228a' = $1 ] && echo '01202' && exit\n[ '56914cf2de9ff16ee8d9cacb8935057b' = $1 ] && echo '01203' && exit\n[ '5d0b27e9b43a0a387c61169357c031b0' = $1 ] && echo '01204' && exit\n[ '32ff62e14bbd47453015cfb9158de2d1' = $1 ] && echo '01205' && exit\n[ '1d99cca81f34ef246764efcfb3b1fb97' = $1 ] && echo '01206' && exit\n[ 'd6ef1bf49e09ea5fcbdc6a661387b1f2' = $1 ] && echo '01207' && exit\n[ '3da9670763cabe7c09083b7fbae000fe' = $1 ] && echo '01208' && exit\n[ '5e093731ac73f53ba7fd5a22e92673e7' = $1 ] && echo '01209' && exit\n[ '6ecd6d65004e563bed481000fe144f19' = $1 ] && echo '01210' && exit\n[ 'ab9f117c028043438c395a84e55c0552' = $1 ] && echo '01211' && exit\n[ '3d9220f5b365f96e87e73373177c97dd' = $1 ] && echo '01212' && exit\n[ '1b050a646f90f4cce8183579e666fbc3' = $1 ] && echo '01213' && exit\n[ '73ea5ea8328984d3d8793bccfc82c48c' = $1 ] && echo '01214' && exit\n[ '045cab2858f43bbc5a0d464ac3f469ac' = $1 ] && echo '01215' && exit\n[ '2254aa295ef86ef29aa04004de286477' = $1 ] && echo '01216' && exit\n[ 'b632ce3af6f02560203777e3520d4152' = $1 ] && echo '01217' && exit\n[ '8456404db31ad031534a84b9233d2fea' = $1 ] && echo '01218' && exit\n[ 'c68608350a7c214ad786786811ce03df' = $1 ] && echo '01219' && exit\n[ '8323bca328e0a83ec76ebb451a3b9abb' = $1 ] && echo '01220' && exit\n[ '520e24284ee323c7fd3847fa4373ddeb' = $1 ] && echo '01221' && exit\n[ '1d6d17347c8e4a306c1173fd700c2f45' = $1 ] && echo '01222' && exit\n[ 'f2dce18076b41bb9f6244ff9a541f828' = $1 ] && echo '01223' && exit\n[ 'c850225bccc11ede9786738f80f109e7' = $1 ] && echo '01224' && exit\n[ 'f313bd8300b4b2315ffc3b5ff39727e7' = $1 ] && echo '01225' && exit\n[ '3d331a8473d5534e122337c12cb5905e' = $1 ] && echo '01226' && exit\n[ '6f7afb45ffea89ed1ac1e6c40a1668a8' = $1 ] && echo '01227' && exit\n[ 'eb0afd2ca3c7b1fadae6634b376322f5' = $1 ] && echo '01228' && exit\n[ 'a6026877c1a174d60f81fd71f62df1c1' = $1 ] && echo '01229' && exit\n[ 'a39b4f768f812120902794171297206d' = $1 ] && echo '01230' && exit\n[ 'fc5ee40071d6d41e0e5a8633c8cb96b4' = $1 ] && echo '01231' && exit\n[ '0933c00cb3561312af5459edc3fb94ed' = $1 ] && echo '01232' && exit\n[ 'a0f118d7696e47b879711bdd30519993' = $1 ] && echo '01233' && exit\n[ '4100c4d44da9177247e44a5fc1546778' = $1 ] && echo '01234' && exit\n[ '254b8c9194b7132299b0ba20de2ab7b4' = $1 ] && echo '01235' && exit\n[ '1e0f858ba5757854063c323021237cd2' = $1 ] && echo '01236' && exit\n[ 'd6c0515d91cc49f537fb81ba6528f73d' = $1 ] && echo '01237' && exit\n[ 'b92fca8fee9fa58a168543d921039592' = $1 ] && echo '01238' && exit\n[ 'fe2f04450502724038a54a0c5b014c74' = $1 ] && echo '01239' && exit\n[ 'a02a7c346c7505db947a4d33a690567a' = $1 ] && echo '01240' && exit\n[ '4ec0998bd4fb0846ed01ee8e8161402a' = $1 ] && echo '01241' && exit\n[ '06d1d65642cb216d3efd4aff47dfd0f3' = $1 ] && echo '01242' && exit\n[ '3753c0a81bbb9b7c164c066c55e0d530' = $1 ] && echo '01243' && exit\n[ '1caa10ce8deeda145cbcf779909892ad' = $1 ] && echo '01244' && exit\n[ 'a79311b55f8cd3072eb55d56b777aa4b' = $1 ] && echo '01245' && exit\n[ 'ad49b3e7dc48430ff143d28d3496b78a' = $1 ] && echo '01246' && exit\n[ '459320b57da587f577b1d5efbb5947c8' = $1 ] && echo '01247' && exit\n[ 'c40798d3c12114b5bb19f2051d9ed181' = $1 ] && echo '01248' && exit\n[ '8fa15a94a2cec3c15c4ebe4dc9295fbb' = $1 ] && echo '01249' && exit\n[ '12c7aaf0c43289d20c7e70b5723ff679' = $1 ] && echo '01250' && exit\n[ '155db6530844123906251a84bef217fd' = $1 ] && echo '01251' && exit\n[ '4678cc2462cda5ecf7e40dd6f3260e21' = $1 ] && echo '01252' && exit\n[ '46c6e7411d8ac64b7463890187122369' = $1 ] && echo '01253' && exit\n[ '93ae6f1d85f81ddcccb522d84504d646' = $1 ] && echo '01254' && exit\n[ 'e44497f63f21e3ec7266843b1a3ad3b3' = $1 ] && echo '01255' && exit\n[ '507667f237f181eb1ee122c6847d2833' = $1 ] && echo '01256' && exit\n[ '36c19be1005ef13124d1fa47d501c867' = $1 ] && echo '01257' && exit\n[ '82479eb5db0e532600e10471051dde3a' = $1 ] && echo '01258' && exit\n[ '07ec0ebc0fb1704ae09709c7a4741471' = $1 ] && echo '01259' && exit\n[ '4e36d31397484bb9943c16bd042423c3' = $1 ] && echo '01260' && exit\n[ '1ab30a7a4065e28d492b3f8ce0912ceb' = $1 ] && echo '01261' && exit\n[ '6e01e1482fa838548ff8a3ff14ed115e' = $1 ] && echo '01262' && exit\n[ '65c22d468c041f7c7dd36c9d59375a92' = $1 ] && echo '01263' && exit\n[ 'ea3dbf5536aecaff586f50cc1ea6899b' = $1 ] && echo '01264' && exit\n[ '636fda0736975b46fa002c9cd61425da' = $1 ] && echo '01265' && exit\n[ '9bfd53a6112f5a8f2bb0a46d33f06322' = $1 ] && echo '01266' && exit\n[ '023e01504375384a57a8c055c94bda16' = $1 ] && echo '01267' && exit\n[ 'b1fdf90f64b63bc05b32af570abb1960' = $1 ] && echo '01268' && exit\n[ 'b554f0f96ba666661d8d4b8d18d51f6d' = $1 ] && echo '01269' && exit\n[ 'b523998c2c796d488049ac24376e8b40' = $1 ] && echo '01270' && exit\n[ '9cf11ba08f95de0b3e69420185d08fc0' = $1 ] && echo '01271' && exit\n[ '720d2f260cc080afeb975c157096a6c8' = $1 ] && echo '01272' && exit\n[ '46b050ec0e39ced6a075fbee96130218' = $1 ] && echo '01273' && exit\n[ '419a2b8ac3c9b6aa94603c248a427f78' = $1 ] && echo '01274' && exit\n[ '65eccde70dc4a393ccd9b2c0265efbbf' = $1 ] && echo '01275' && exit\n[ '48275f1b2c9d6dfe95586e6be03b8feb' = $1 ] && echo '01276' && exit\n[ '51840a96dc5c2d2f3e74a38d2d81056e' = $1 ] && echo '01277' && exit\n[ 'abcd52bfdb7b2a663be7c7d6da7ae0d6' = $1 ] && echo '01278' && exit\n[ 'e46dcda5719a151ecbc921e0d4eafb72' = $1 ] && echo '01279' && exit\n[ '2e233ac493889056c5ed1916d377d11e' = $1 ] && echo '01280' && exit\n[ '923cf3c6ea150f502d105cbd548cbcfb' = $1 ] && echo '01281' && exit\n[ 'bb15220d77e22e69a44c2ba7be391c97' = $1 ] && echo '01282' && exit\n[ 'e74b6963e98133561a04c6698de79dbe' = $1 ] && echo '01283' && exit\n[ '8e41d2b2c1bf2b0a9e65fefb1b456f2b' = $1 ] && echo '01284' && exit\n[ '819b44fab6c82e9096b8d7bd43c2279e' = $1 ] && echo '01285' && exit\n[ '0dc0853789d54bb450ff92567676d77c' = $1 ] && echo '01286' && exit\n[ 'e05d592ccdebae65f484cabdf4518d69' = $1 ] && echo '01287' && exit\n[ '13e0aa5a2c9cea1f2d7ce33149013da7' = $1 ] && echo '01288' && exit\n[ '8ac7c5c91ec4e2b0090d289576bf9afa' = $1 ] && echo '01289' && exit\n[ 'd8fabc8ef20e30a3cd8bcf7153fc081c' = $1 ] && echo '01290' && exit\n[ '61e2461cd1c363e8984a5f887aac9ca2' = $1 ] && echo '01291' && exit\n[ '1ebd872254fb09d98feb3bb8b113b301' = $1 ] && echo '01292' && exit\n[ '50d3bccd36c13e7d7b8dbff581ce2208' = $1 ] && echo '01293' && exit\n[ 'adecbb6cb42a96c071280872fffd8bfd' = $1 ] && echo '01294' && exit\n[ '85bcb74e8315a044f348d632f00fb886' = $1 ] && echo '01295' && exit\n[ 'efc0d4812fc553d5815ed92eefa44706' = $1 ] && echo '01296' && exit\n[ 'da4885a76c398829f155916297ef578f' = $1 ] && echo '01297' && exit\n[ 'cef5fb56418cca28396cb4de02e3d267' = $1 ] && echo '01298' && exit\n[ '203545898a45a99d5c47a37b9154d043' = $1 ] && echo '01299' && exit\n[ '89c132f189969736561d19918c6de62e' = $1 ] && echo '01300' && exit\n[ '872d42327c6fb8695e903643e064292c' = $1 ] && echo '01301' && exit\n[ 'cee2870a3c244db94310506952196866' = $1 ] && echo '01302' && exit\n[ '8f42e4bb84877e59e6326895b8f34348' = $1 ] && echo '01303' && exit\n[ '0515727397f549786128ef2ba0823dbe' = $1 ] && echo '01304' && exit\n[ '6bc560643e4f6eb0ed32fe32f21ca560' = $1 ] && echo '01305' && exit\n[ '109e32548f5c5a43efdb24aa91140f42' = $1 ] && echo '01306' && exit\n[ '48f8d59f138deb6d6787485504d0dcf0' = $1 ] && echo '01307' && exit\n[ '747c128a58f2b0c2f038ab3a815aacd1' = $1 ] && echo '01308' && exit\n[ 'e504371cc4bd3e39c968f8b290e45dae' = $1 ] && echo '01309' && exit\n[ '7b92aeda294e46d76ea7bfa7e31ce0b9' = $1 ] && echo '01310' && exit\n[ '4f876ba5a10563cd2dd730413fa44b42' = $1 ] && echo '01311' && exit\n[ '18903675c284af17020e049a7fce4e95' = $1 ] && echo '01312' && exit\n[ 'f57015b6524756c701dcbff4e6ab5895' = $1 ] && echo '01313' && exit\n[ '82469691f91765f58e728547445957a5' = $1 ] && echo '01314' && exit\n[ 'e03345d3a2f6a70034df02d4b88465e2' = $1 ] && echo '01315' && exit\n[ '31c52b769d860bcd4b4a1efb504990e3' = $1 ] && echo '01316' && exit\n[ '72baf05fbc924eb1c5fb6e90b132ff51' = $1 ] && echo '01317' && exit\n[ 'ebeb8ea2cf597d4c02611780269a345c' = $1 ] && echo '01318' && exit\n[ '8aba6672f1dabc70cf7e146962b325fb' = $1 ] && echo '01319' && exit\n[ '3f2625bf5f2101418c5820eb3fc4a028' = $1 ] && echo '01320' && exit\n[ 'd02f21c03e8ba0002256311505267ef4' = $1 ] && echo '01321' && exit\n[ '4275a604c23f3bf4a5740108152eaad5' = $1 ] && echo '01322' && exit\n[ 'd0561fa6e85c61c692334053b1802a99' = $1 ] && echo '01323' && exit\n[ 'ddc1124c90735d96c49ea79f14246999' = $1 ] && echo '01324' && exit\n[ 'a459e27731ad60f4d8da962f8f35e58e' = $1 ] && echo '01325' && exit\n[ 'df8a8031a66043a28de13f6f34a97e96' = $1 ] && echo '01326' && exit\n[ '0bde1211b1d285f4d748c777810849e8' = $1 ] && echo '01327' && exit\n[ '8e9ae63c5aece0761612284ce60bdec0' = $1 ] && echo '01328' && exit\n[ '92c6b4843f1734a60f4dc0acfe060ea7' = $1 ] && echo '01329' && exit\n[ '7150bba729651fc0e37257dbaf4797fa' = $1 ] && echo '01330' && exit\n[ '11e42dac3fd197a31e93f2bf5168f274' = $1 ] && echo '01331' && exit\n[ '3a90d7d8eaaffca9ebbebf5d93fbe969' = $1 ] && echo '01332' && exit\n[ '8d1144e25e8085b3ffb9e6bcff31e1b3' = $1 ] && echo '01333' && exit\n[ 'ffcc1b4dfe5bb59a7405e285a3140c93' = $1 ] && echo '01334' && exit\n[ 'ba1e29e388a684ef4312138dbbe4808c' = $1 ] && echo '01335' && exit\n[ '5f9e21695f5c2ec970bdd9529c00115c' = $1 ] && echo '01336' && exit\n[ 'b3a444a4ed1d58ff2eb619c99748f9c0' = $1 ] && echo '01337' && exit\n[ 'f3ba6de35ce3a1e1ae8b326680850b6b' = $1 ] && echo '01338' && exit\n[ '12f83e3b55d915b4214fa593087a72c7' = $1 ] && echo '01339' && exit\n[ 'fb9bde22b12787ede8855a5984e7fbd3' = $1 ] && echo '01340' && exit\n[ 'f65ed0a9636bc230ef7a2e17d69d218f' = $1 ] && echo '01341' && exit\n[ 'b96719336962b909239a56f401bd70c7' = $1 ] && echo '01342' && exit\n[ 'f169420316068bf30f6182f8a1053067' = $1 ] && echo '01343' && exit\n[ '8e8d6f3196a7e8a308101955b8b96c23' = $1 ] && echo '01344' && exit\n[ '13236de9dac26561ca9a3155bac8d833' = $1 ] && echo '01345' && exit\n[ '985db7c97f86b6e2ee6605d6d1e9e236' = $1 ] && echo '01346' && exit\n[ '01aeecb7694331cdcea5bc3db902e4d7' = $1 ] && echo '01347' && exit\n[ '159b96e3a0074526d45d3415d7bdaa17' = $1 ] && echo '01348' && exit\n[ '499c2c4a0039977b2b5574915e4f24b1' = $1 ] && echo '01349' && exit\n[ '3a1a979a9db9b5701770fda01355c472' = $1 ] && echo '01350' && exit\n[ 'b88d450240df0ef72b504b5fd4cd008b' = $1 ] && echo '01351' && exit\n[ 'a940fa58d2b3e8b74f89eb9b65a307c0' = $1 ] && echo '01352' && exit\n[ 'b2f583fe8c356ba4d0e68189f839d524' = $1 ] && echo '01353' && exit\n[ 'fbf38b2a11d0ae857ec638e90d61af0b' = $1 ] && echo '01354' && exit\n[ 'da4767098b98634f209584582808942c' = $1 ] && echo '01355' && exit\n[ '0a438b6470e975266b0f96a78adeaf21' = $1 ] && echo '01356' && exit\n[ 'a67033905870609f5ee3917bfbf2acbf' = $1 ] && echo '01357' && exit\n[ '41877bf00fdba8ab41428e1ba8b7fbaa' = $1 ] && echo '01358' && exit\n[ '157fdac5ce7ea91cb27731eaf21f090f' = $1 ] && echo '01359' && exit\n[ 'c1bf3674bb9f9e9c2f95a936f777e449' = $1 ] && echo '01360' && exit\n[ 'a49f6d62b3d8840ce6de6fa46cc928e8' = $1 ] && echo '01361' && exit\n[ '94c6267cdfbdbfaab7d5e6ac2795ca55' = $1 ] && echo '01362' && exit\n[ '10df19a1c04969b6e84bfad720c53e68' = $1 ] && echo '01363' && exit\n[ '79ff7d0111a71c83ea4931a8a2c31a1e' = $1 ] && echo '01364' && exit\n[ '2c4271a98a6a039b1ec499e466fd43d8' = $1 ] && echo '01365' && exit\n[ '9a4cd7a77e3af17e2d817a5d9831f6e8' = $1 ] && echo '01366' && exit\n[ '557f52ac34a508e95e00ede6edb3d963' = $1 ] && echo '01367' && exit\n[ 'a0ff55d5d664f4da2cae2c21319c859f' = $1 ] && echo '01368' && exit\n[ '1029d47c922d5735da6a0a8bfa6cf3e1' = $1 ] && echo '01369' && exit\n[ 'ff215caf4d6840118abec71ec91e7120' = $1 ] && echo '01370' && exit\n[ 'af3e2f97908ca08564d10d94982784d4' = $1 ] && echo '01371' && exit\n[ '5d478cce3499b9f7497d8b8f52e36f4a' = $1 ] && echo '01372' && exit\n[ '6c26d158556d0fb111a5213e8d34bb36' = $1 ] && echo '01373' && exit\n[ '85a12efb2111d7a8458a2586c96b0018' = $1 ] && echo '01374' && exit\n[ '32abfb275e65ca95be475a82bc085c76' = $1 ] && echo '01375' && exit\n[ 'e7cdb1f0abb290e52519d3549bafaacc' = $1 ] && echo '01376' && exit\n[ 'a167156e47cc6cdd034e4b4d059d9e3e' = $1 ] && echo '01377' && exit\n[ '27827b8fd375564415e3a72512c995fd' = $1 ] && echo '01378' && exit\n[ '011651b2164a3a30fb2eb68f07c1f3fa' = $1 ] && echo '01379' && exit\n[ '2203c0c93b821eb850df9f57d9eb3c8c' = $1 ] && echo '01380' && exit\n[ 'b3fbd1e5fb9dac6ba53d634203484744' = $1 ] && echo '01381' && exit\n[ '045f20c3522b2dca8a7cbbff9102041c' = $1 ] && echo '01382' && exit\n[ '4e2e14841be1815c8d3efc8f588ce24b' = $1 ] && echo '01383' && exit\n[ '921b39bc4f2e78ff2f2030dd0ffc2aaa' = $1 ] && echo '01384' && exit\n[ '089b74967d22fe5774cffbc08807792c' = $1 ] && echo '01385' && exit\n[ 'bc5ab5ab9fe85514ceffe5b56098f0ea' = $1 ] && echo '01386' && exit\n[ 'a8cc0e9ebfa80325ab853eb0ac45b2b4' = $1 ] && echo '01387' && exit\n[ '44e6555f94d1dbfcfdbf63a874b18dc4' = $1 ] && echo '01388' && exit\n[ 'dc4596ded7e89899b08f9b821765e87b' = $1 ] && echo '01389' && exit\n[ '87874a11317b5592aaa9dc124eff3781' = $1 ] && echo '01390' && exit\n[ 'a16fb37cdf7448323fe166e0e95c1093' = $1 ] && echo '01391' && exit\n[ 'c20a9b828aadd0da3cd3bc41535a7294' = $1 ] && echo '01392' && exit\n[ 'dfe0a8dff25c5a1ccbb33e59cca553d0' = $1 ] && echo '01393' && exit\n[ '2fdced28ccbe66f47678c12649fbfb49' = $1 ] && echo '01394' && exit\n[ '8ef5f5d664c5ef8e19a616b1f7221038' = $1 ] && echo '01395' && exit\n[ '8514f84ac18fc28bf3685a3109a39118' = $1 ] && echo '01396' && exit\n[ 'b273084e0eca74beba6eefa7cfadae36' = $1 ] && echo '01397' && exit\n[ '2ce0a9e13348539036dab78396fa5b0b' = $1 ] && echo '01398' && exit\n[ '3700b9c10fad990437e8a63e7328fad1' = $1 ] && echo '01399' && exit\n[ '43c84cbf5b8c00386baeca2f2e6230d7' = $1 ] && echo '01400' && exit\n[ '00b3ada6d94700e13b3d75689727bece' = $1 ] && echo '01401' && exit\n[ '4a7459e897a2ab3ef0965672163c77cd' = $1 ] && echo '01402' && exit\n[ 'a4920d1fd7162dd320ccabee87b85fe9' = $1 ] && echo '01403' && exit\n[ '8c02ee9feb74597c11d0abdf62f97982' = $1 ] && echo '01404' && exit\n[ '320989a59ab80cc3cb0c7c193884e3d0' = $1 ] && echo '01405' && exit\n[ '504f8b8e58fa5592906b523d8b6a063d' = $1 ] && echo '01406' && exit\n[ '90cc19e7334ee7da9a34f00e6c6c3eef' = $1 ] && echo '01407' && exit\n[ '49d01ee6025db4bd7a5417a2ffc5b44e' = $1 ] && echo '01408' && exit\n[ '415b674013309b0e2c5ce0167805fc5b' = $1 ] && echo '01409' && exit\n[ '3cb5dd1d91a0a244caa26c0bd5b8cc0b' = $1 ] && echo '01410' && exit\n[ '0de42692575d939e678ee134c71e5603' = $1 ] && echo '01411' && exit\n[ 'c5ef1f66980ee6fded76e2ffa659ff31' = $1 ] && echo '01412' && exit\n[ 'ed8e6867fdeb2c3a85b566384b1cc0e0' = $1 ] && echo '01413' && exit\n[ '00c6b9d906d6b329a5c9ebb8be643d84' = $1 ] && echo '01414' && exit\n[ '1a4e0139c79e0d005a7b9198e3f2bd99' = $1 ] && echo '01415' && exit\n[ 'd6ab6f8cf0c882739438c2c3829a6f71' = $1 ] && echo '01416' && exit\n[ 'cf6dc36542f57843299f4e063ce4be38' = $1 ] && echo '01417' && exit\n[ 'cd1bd714898500b9b31cba70b938d457' = $1 ] && echo '01418' && exit\n[ 'd979ec2dd9cb16d1386a919f2ed26a51' = $1 ] && echo '01419' && exit\n[ 'bb8e7f60ce06001ee11186f81bbdc4c8' = $1 ] && echo '01420' && exit\n[ '43ee13c10ee9d42afc234e82ba368f30' = $1 ] && echo '01421' && exit\n[ 'bfae5e2464643c390d497ba7da1ea2a6' = $1 ] && echo '01422' && exit\n[ 'ddb606710dacf8134d76a791c9a9fb1e' = $1 ] && echo '01423' && exit\n[ '89182fca490af828a11d0bdfb38bd4de' = $1 ] && echo '01424' && exit\n[ '2a0a0b19d53c6b5cb413ae3f15b4bc82' = $1 ] && echo '01425' && exit\n[ '8a778ac53c658bfda2c3c1bc5f726a50' = $1 ] && echo '01426' && exit\n[ 'd4421932f5322c8ff9f1ad0f7455a22f' = $1 ] && echo '01427' && exit\n[ 'bae1bcdaa721b89b0d6f09bafc9f03bd' = $1 ] && echo '01428' && exit\n[ 'd8d1ded35b1734a9493139dfd717c366' = $1 ] && echo '01429' && exit\n[ 'd93b9ef9c4df48739970c56c678af2a9' = $1 ] && echo '01430' && exit\n[ '9473a158bc3d0a2be5ea7f871e06284b' = $1 ] && echo '01431' && exit\n[ '41ce6f22700b9ce94c962be7363e0949' = $1 ] && echo '01432' && exit\n[ 'bfec48a646ddf3531bfca296cd124578' = $1 ] && echo '01433' && exit\n[ '1ea1e35e89a1ee6cc3c76269db9b3054' = $1 ] && echo '01434' && exit\n[ 'b02dfe1a24f4d55f4c847a4c8efd438a' = $1 ] && echo '01435' && exit\n[ '8dbecdc49cfcd7abf59a6ff6cce51065' = $1 ] && echo '01436' && exit\n[ '163ff40ee8af43d3980d729bdf816217' = $1 ] && echo '01437' && exit\n[ '3cfb54f588fee7743de00d20d6d03ad8' = $1 ] && echo '01438' && exit\n[ '73e584657a69f0380d64d3bddcc28df4' = $1 ] && echo '01439' && exit\n[ 'a20154334e10158c310f946d713c5b41' = $1 ] && echo '01440' && exit\n[ '3d9fa365d6955519d3c319adbf573736' = $1 ] && echo '01441' && exit\n[ 'f864c933c49166dee52860e9f075703d' = $1 ] && echo '01442' && exit\n[ '4ab6d5723d01c0c8480f87f04f41eee7' = $1 ] && echo '01443' && exit\n[ '3209af0a252cbd4f4bf6fd1a530209a6' = $1 ] && echo '01444' && exit\n[ '6e2a022905acf3c98bef77f61db0f6d9' = $1 ] && echo '01445' && exit\n[ 'b6bef57699b4935082659a3de52ff33c' = $1 ] && echo '01446' && exit\n[ 'de3660449c7b0f9b438585be2df25bc7' = $1 ] && echo '01447' && exit\n[ 'eed459f029ce5f383abf689900139758' = $1 ] && echo '01448' && exit\n[ '3c5877ed2865045fb33d278b99fce81d' = $1 ] && echo '01449' && exit\n[ 'c4494608d1afded736069c626ceb8f01' = $1 ] && echo '01450' && exit\n[ '2dbf19141ac5f172fdba88733c9cea4d' = $1 ] && echo '01451' && exit\n[ '751f3c4fd7695747a707470ef857adbe' = $1 ] && echo '01452' && exit\n[ '8913173be3638f954ae2d9b72fcac830' = $1 ] && echo '01453' && exit\n[ '7690a95a9933c9cc6b2be3661ccd92b8' = $1 ] && echo '01454' && exit\n[ '3b07fca8070abf12094a62e497d6e24e' = $1 ] && echo '01455' && exit\n[ '2918db379ff7f9f7176eb804621e5328' = $1 ] && echo '01456' && exit\n[ '7937c1b1e1956b744db6b8b51d16612c' = $1 ] && echo '01457' && exit\n[ '00f414dd626c4aed5aac1fae9cb053df' = $1 ] && echo '01458' && exit\n[ '19de6b63dfaabf08b5d25205b461a165' = $1 ] && echo '01459' && exit\n[ 'eb2ef020e1607a051000bfe43d4593bc' = $1 ] && echo '01460' && exit\n[ '2d61553f5b308011c1c9d552b501dfd8' = $1 ] && echo '01461' && exit\n[ '2f9b14876533e63089cef2b1c90c8bcb' = $1 ] && echo '01462' && exit\n[ '6eb491294479a3af72d6bc16ca1c8515' = $1 ] && echo '01463' && exit\n[ '6a435fa492cc64ec1802a469c107be70' = $1 ] && echo '01464' && exit\n[ '8c86515848df1ee362e992a0db75291f' = $1 ] && echo '01465' && exit\n[ 'cb1644d250cde41da4306ff048110e80' = $1 ] && echo '01466' && exit\n[ '86a974e312c3742394fe9de06422c86c' = $1 ] && echo '01467' && exit\n[ 'f9ec0ab825fca51cca79d1e6b6b30d7e' = $1 ] && echo '01468' && exit\n[ 'c2d0cca5ddec1f8c3bc1e780abd95745' = $1 ] && echo '01469' && exit\n[ '5209f31c574fd3e7848ecb72f39c65b0' = $1 ] && echo '01470' && exit\n[ '5b815a25808fcb15a2ada6e902cc61b4' = $1 ] && echo '01471' && exit\n[ 'd6e6dd72d1e5e69067fa37fe1eb04a85' = $1 ] && echo '01472' && exit\n[ 'a938d573da62268cd9c6decc6babe3c2' = $1 ] && echo '01473' && exit\n[ '26de9af45bd072258c065c065657f33d' = $1 ] && echo '01474' && exit\n[ '420f0a8b38a307a5dc8ecf4f41c57d5b' = $1 ] && echo '01475' && exit\n[ '67d0427c4ee950a6d0f6f6145c7ad3b6' = $1 ] && echo '01476' && exit\n[ 'b4a7c6febf9087601c8f31e3131e97a9' = $1 ] && echo '01477' && exit\n[ '4b9a22741a6e787b630ab7886dd80d04' = $1 ] && echo '01478' && exit\n[ '5bdead3340f7de3dd2b6c07b7607e710' = $1 ] && echo '01479' && exit\n[ '4ec502f250d5962e7690e4dafef7c2ae' = $1 ] && echo '01480' && exit\n[ '4cfca91dfb6b2b65e8a24e64cbf1d45d' = $1 ] && echo '01481' && exit\n[ '6b6252968f6c2fe4fbe3584d41361cce' = $1 ] && echo '01482' && exit\n[ '6e40c8f73c974d5be112d116719946c5' = $1 ] && echo '01483' && exit\n[ '4ec56dbffba468d6b3e4b65869c456b1' = $1 ] && echo '01484' && exit\n[ '398925a226bbc7d386fdce29f658c1e7' = $1 ] && echo '01485' && exit\n[ '9b5142068a3f6f951288997a1d03e55d' = $1 ] && echo '01486' && exit\n[ 'bc504449ec5d37469d94c62322eb8116' = $1 ] && echo '01487' && exit\n[ '45180b574d2b8982f489d94961d9fea7' = $1 ] && echo '01488' && exit\n[ 'bfdd1b1504e237ce85ac3604080750b9' = $1 ] && echo '01489' && exit\n[ 'ecef789cf6d289d31585994388b23733' = $1 ] && echo '01490' && exit\n[ 'dd98f9352ccd3ded0546f435bf08db5d' = $1 ] && echo '01491' && exit\n[ '119e7493a176974ef4829df4b234dbd7' = $1 ] && echo '01492' && exit\n[ '4d009782748e092e9a4469842fa7100f' = $1 ] && echo '01493' && exit\n[ '60710c2fd76e55c395d687e2a9ffc8ee' = $1 ] && echo '01494' && exit\n[ '9a0a62850fea0cf79b468498e8a48748' = $1 ] && echo '01495' && exit\n[ '6a3e099bf8c4483cc2708123ca3c784f' = $1 ] && echo '01496' && exit\n[ '906f16cebe9e9d075661bfb92f449aef' = $1 ] && echo '01497' && exit\n[ 'ffa222c3e1bf7ddd7c4f6dd4c45080aa' = $1 ] && echo '01498' && exit\n[ '9506a04bf60e8bd669ba9034f94d0d5a' = $1 ] && echo '01499' && exit\n[ '1c45b367f5bcc9440703622b467a511d' = $1 ] && echo '01500' && exit\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338246,"user_id":null,"body":"# Start coding like this would be a shell script\n# You don't have to return anything, you have to echo the solution\n# The hash is in $1\n# example: echo \"$result\"\n\n# G00D LUCK\n\nfor i in `seq -w 99999`; do\n  hash=$(echo -n $i | md5sum | cut -d\" \" -f1)\n  if [ $hash == $1 ]; then\n    echo \"$i\"\n    break\n  fi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338247,"user_id":null,"body":"# Start coding like this would be a shell script\n# You don't have to return anything, you have to echo the solution\n# The hash is in $1\n# example: echo \"$result\"\n\n# G00D LUCK\n\nfor pin in $(seq -w 0 99999); do\n  [[ $(echo -n $pin | md5sum | cut -d' ' -f1) == $1 ]] && echo $pin && break\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338248,"user_id":null,"body":"#!\/usr\/bin\/env bash\n#\n# Find 5 digit pin for given MD5 hash\n# Simple brute force method without any optimization\n#\n# Argument: MD5 hash\n# Return to stdout: the 5 digit PIN code\n#\nfor (( i=0; i < 100000; i++ ))\ndo\n  hash=\"$(printf \"%05d\" $i | md5sum)\"\n  if [[ $hash =~ ^$1 ]]\n  then\n    printf \"%05d\n\" $i\n    exit\n  fi\ndone\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338249,"user_id":null,"body":"# Start coding like this would be a shell script\n# You don't have to return anything, you have to echo the solution\n# The hash is in $1\n# example: echo \"$result\"\n\n# G00D LUCK\nfor i in {00000..99999}\ndo\nhash=$(echo -n $i | md5sum | awk '{print $1}')\nif [ \"$hash\" == \"$1\" ]\nthen\necho $i\nexit\nfi\ndone\n\n\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338250,"user_id":null,"body":"seq -w 0 99999 | while read pin\ndo\n  [[ $(echo -n $pin | md5sum | awk '{print $1}' ) == \"$1\" ]] && echo $pin && break\ndone ","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338251,"user_id":null,"body":"# Start coding like this would be a shell script\n# You don't have to return anything, you have to echo the solution\n# The hash is in $1\n# example: echo \"$result\"\n\n# G00D LUCK\n\nfor i in {00000..01300}\ndo\n  sum=$(echo -n \"${i}\" | md5sum)\n  if [[ ${sum:0:32} == \"${1}\" ]]\n  then\n    echo \"${i}\"\n    break\n  fi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338252,"user_id":null,"body":"# Start coding like this would be a shell script\n# You don't have to return anything, you have to echo the solution\n# The hash is in $1\n# example: echo \"$result\"\n\n# G00D LUCK\n\nfor i in {00000..01300}\ndo\n    sum=$(echo -n \"${i}\" | md5sum)\n#     echo \"${sum:0:32}\"\n#   sum=$(md5 -s \"$1\")\n  if [[ ${sum:0:32} == \"${1}\" ]]\n  then\n    echo \"${i}\"\n  fi\ndone","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338253,"user_id":null,"body":"# Start coding like this would be a shell script\n# You don't have to return anything, you have to echo the solution\n# The hash is in $1\n# example: echo \"$result\"\n\n#echo $1\npassword=`echo $1 | sed 's\/[^0-9].$*\/\/g'`\npassword2=`echo $(( 10#${password:0:6} ))`\n#echo 4100c4d44da9177247e44a5fc1546778 | sed 's\/[^0-9].$*\/\/g'\nfor ((i=0; i < 1; i++));  do\n  for ((j=0; j < 2; j++)); do\n    for ((k=0; k < 8; k++)); do\n      for ((l=0; l < 8; l++)); do\n        for ((m=0; m < 9; m++)); do\n          var=`echo -n $i$j$k$l$m | md5sum | sed 's\/-\/\/g' | sed 's\/[^0-9].$*\/\/g'`\n#          echo $i$j$k$l$m\n          result=`echo $(( 10#${var:0:6} ))`\n#          echo $var\n          if (( \"$var\" == \"$password\" )); then\n          #if [[ ${var#0} -eq ${password#0} ]]; then\n           echo \"$i$j$k$l$m\"\n           exit;\n          fi\n        done\n      done\n    done\n  done\ndone\n\n\n# G00D LUCK","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338254,"user_id":null,"body":"#!\/bin\/bash\n\nfor STRING in $(seq -w 99999)\ndo\n  if [[ \"$(echo -n $STRING | md5sum | head -c 32)\" == \"$1\" ]]\n  then\n    echo $STRING\n    exit 1\n  fi\ndone\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5f0ed36164f2bc00283aed07":[{"id":338255,"user_id":null,"body":"echo \"$2 * 2 - $1 + 1\" | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338256,"user_id":null,"body":"address=$1\nn=$2\nfunction over_the_road {\n  local v_place=$(( $address \/ 2 ))\n  if test $(( $address % 2 )) -eq 1\n  then\n    echo $(( 2 * $n - 2 * $v_place))\n  else\n    echo $(( 2 * $n - 2 * $v_place + 1))\n  fi\n}\nover_the_road $*","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338257,"user_id":null,"body":"echo 2*$2-$1+1 | bc","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338258,"user_id":null,"body":"# Good luck, echo the result\naddress=$1\nn=$2\necho $((n * 2 + 1 - address))\n","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338259,"user_id":null,"body":"# Good luck, echo the result\naddress=$1\nn=$2\n\necho \"$((2 * n + 1 - address))\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338260,"user_id":null,"body":"address=$1\nnb_houses=$(($2 * 2))\n\necho $((nb_houses - address + 1))","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338261,"user_id":null,"body":"# Good luck, echo the result\naddress=$1\nn=$2\ns=$((n*2+1))\ny=$((s-address))\necho $y","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338262,"user_id":null,"body":"over_the_road() {\n    total=$(($2 * 2))\n    echo \"$(($total - $1 + 1))\"\n}\nover_the_road $1 $2","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338263,"user_id":null,"body":"# Good luck, echo the result\naddress=$1\nn=$2\necho $((2 * $n - $address + 1));","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338264,"user_id":null,"body":"# Good luck, echo the result\naddress=$1\nn=$2\n\ntop_left_side=$(( 1 + 2 * (($n - 1)) ))\ntop_right_side=$(( $top_left_side + 1 ))\nresult=$(( $top_right_side - $address + 1 ))  \n\necho $result","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"619f200fd0ff91000eaf4a08":[{"id":338265,"user_id":2529,"body":"#!\/bin\/sh\nodd_or_even(){\n  local -i n=\"$1\"\n  (( n%2 )) && echo \"Either\" || (( (n\/2)%2 == 0 )) && echo \"Even\" || echo \"Odd\"\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338266,"user_id":null,"body":"odd_or_even() {\n  if [ $(( $1 % 4 )) -eq 0 ]; then \n    echo \"Even\"\n  elif [ $(( $1 % 4 )) -eq 2 ]; then\n    echo \"Odd\"\n  else\n    echo \"Either\"\n  fi\n}\n\nodd_or_even $1","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338267,"user_id":2529,"body":"#!\/bin\/sh\nodd_or_even(){\n  local -i n=\"$1\"\n  (( n%2 )) && echo \"Either\" && return 0\n  (( (n\/2)%2 == 0 )) && echo \"Even\" || echo \"Odd\"\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338268,"user_id":149,"body":"#!\/bin\/sh\n\nodd_or_even() {\n  if [[ $(($1 % 2)) == 1 ]]\n  then\n    echo \"Either\"\n  elif [[ $(($1 % 4)) == 0 ]]\n  then\n    echo \"Even\"\n  else\n    echo \"Odd\"\n  fi\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338269,"user_id":null,"body":"#!\/bin\/sh\n\nodd_or_even() {\n  if (( $1 % 2 == 1 )); then\n    echo \"Either\" \n  elif (( ($1 \/ 2) % 2 == 0 )); then\n    echo \"Even\"\n  else\n    echo \"Odd\"\n  fi\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338270,"user_id":null,"body":"#!\/bin\/sh\n\nodd_or_even() {\n  num=$1\n  if (($num % 4 == 0)); then\n    echo \"Even\"\n  elif ((($num+2) % 4 == 0)); then\n    echo \"Odd\"\n  else\n    echo \"Either\"\n  fi\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338271,"user_id":null,"body":"#!\/bin\/sh\n\nvar=\"Either\"\n\n[ $(( $1 % 4 )) -eq 0 ] && var=\"Even\"\n[ $(( $1 % 4 )) -eq 2 ] && var=\"Odd\" \n\necho $var","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338272,"user_id":null,"body":"#!\/bin\/sh\n\nodd_or_even() {\n    if (( ${1} % 2 == 1 )); then\n        echo \"Either\"\n        return\n    else\n        val=$((${1} \/ 2))\n        if (( val % 2 == 0 )); then\n            echo \"Even\"\n            return\n        else\n            echo \"Odd\"\n            return\n        fi\n    fi\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338273,"user_id":null,"body":"#!\/bin\/sh\n\nodd_or_even() {\n  case $(($1%4)) in\n  1|3) echo \"Either\";;\n  2) echo \"Odd\";;\n  0) echo \"Even\"\n  esac\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338274,"user_id":null,"body":"#!\/bin\/sh\n\nodd_or_even() {\n  n=$1\n  if [ $((n%2)) -eq 1 ]; then\n    echo \"Either\"\n  elif [ $((n%4)) -ne 0 ]; then\n    echo \"Odd\"\n  else\n    echo \"Even\"\n  fi;\n}\n\nodd_or_even \"$@\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"61efc02e4fd88600343b5c58":[{"id":338275,"user_id":2529,"body":"echo \"FLAG{IS-IT-EASY-YET-FUN}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338276,"user_id":null,"body":"# FLAG='dflaskjf; klcqwjer9qieiqucwepirom9028905839045809ds8gf[90g8sd[fh8f-[gh8-09wer0=t]mxcvnmz.xvchku9erpiot789-348tipahjrgfkhzxvxmb,mncxmh6t3q90485ut9rsqklgfjkj#Q$YTEWOPJGPOEDSJC)$%#@^*@$%690uiodrj;lstj3;wpiot8ujdfpgioja90-8-0cx8v#KL%J,,.345.3.l0-0----0000-00---0-----0..-.-.--.....--.-.-.----5345..9.........4.....3.........456...4.........3.....2.........7.....3424.......................564...544......4...5.8...9.....6...3.7.........79345.9.565.....1...1.3...7.....1...1.33452.......................013..89345......4......9......732......8........6......8........9......9........846..78654......................698............8...3............6.....098345.....73............6...6............186...........................79843..9879878....6.......7.......8.......5.......8.......6.......9.......9.....12387.....7............................786982..........8........45623..77833...........9...............109841....................345.....723....5...1...6...2...6...3....5......78234.....45....1...8...7...8...2...3....873....4...5...........................4.....7..........1...5............9.4...93459......1...............1...............1............................4.....3..345634..3...7...3........7.5....3455......1.....3.........2.....867843....1............................5321452............1...............1...............1....743745.....1...............1............................2345754..5.....44........6.....354335....3.....13........4.....42........7542345................4....2...533....52...3.....6....2.3..9.....98...1..7.6.....6....7...88.....5....6....9...964....................------0--0-=0-=-0-00000000-00-0-0-000000,0,,0000jasdkl;jferiotupvn23c014985901c79840p72x812m598723189057m2190857mx98012479812798m1407395813479857m2149857198x0579814320758937981982347384957983g'\necho \"FLAG{IS-IT-EASY-YET-FUN}\"\n\n# FLAG='\n# dflaskjf; klcqwj    # put \n every 16 characters:\n# er9qieiqucwepiro\n# m902890583904580\n# 9ds8gf[90g8sd[fh\n# 8f-[gh8-09wer0=t\n# ]mxcvnmz.xvchku9\n# erpiot789-348tip\n# ahjrgfkhzxvxmb,m\n# ncxmh6t3q90485ut\n# 9rsqklgfjkj#Q$YT\n# EWOPJGPOEDSJC)$%\n# #@^*@$%690uiodrj\n# ;lstj3;wpiot8ujd\n# fpgioja90-8-0cx8\n# v#KL%J,,.345.3.l\n# 0-0----0000-00--\n# -0-----0..-.-.--\n# .....--.-.-.----\n# 5345..9.........\n# 4.....3.........\n# 456...4.........  FL\n# 3.....2.........\n# 7.....3424......\n# ................\n# .564...544......\n# 4...5.8...9.....\n# 6...3.7.........  AG\n# 79345.9.565.....\n# 1...1.3...7.....\n# 1...1.33452.....\n# ................\n# ..013..89345....\n# ..4......9......\n# 732......8......  {I\n# ..6......8......\n# ..9......9......\n# ..846..78654....\n# ................\n# ..698...........\n# .8...3..........\n# ..6.....098345..  S-\n# ...73...........\n# .6...6..........\n# ..186...........\n# ................\n# 79843..9879878..\n# ..6.......7.....\n# ..8.......5.....  IT\n# ..8.......6.....\n# ..9.......9.....\n# 12387.....7.....\n# ................\n# .......786982...\n# .......8........  \n# 45623..77833....  -E\n# .......9........\n# .......109841...\n# ................\n# .345.....723....\n# 5...1...6...2...\n# 6...3....5......  AS\n# 78234.....45....\n# 1...8...7...8...\n# 2...3....873....\n# 4...5...........\n# ................\n# 4.....7.........\n# .1...5..........\n# ..9.4...93459...  Y-\n# ...1............\n# ...1............\n# ...1............\n# ................\n# 4.....3..345634.\n# .3...7...3......\n# ..7.5....3455...  YE\n# ...1.....3......\n# ...2.....867843.\n# ...1............\n# ................\n# 5321452.........\n# ...1............\n# ...1............\n# ...1....743745..  T-\n# ...1............\n# ...1............\n# ................\n# 2345754..5.....4\n# 4........6.....3\n# 54335....3.....1  FU\n# 3........4.....4\n# 2........7542345\n# ................\n# 4....2...533....\n# 52...3.....6....\n# 2.3..9.....98...  N}\n# 1..7.6.....6....\n# 7...88.....5....\n# 6....9...964....\n# ................\n# ------0--0-=0-=-\n# 0-00000000-00-0-\n# 0-000000,0,,0000\n# jasdkl;jferiotup\n# vn23c014985901c7\n# 9840p72x812m5987\n# 23189057m2190857\n# mx98012479812798\n# m140739581347985\n# 7m2149857198x057\n# 9814320758937981\n# 982347384957983g'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338277,"user_id":null,"body":"FLAG='dflaskjf; klcqwjer9qieiqucwepirom9028905839045809ds8gf[90g8sd[fh8f-[gh8-09wer0=t]mxcvnmz.xvchku9erpiot789-348tipahjrgfkhzxvxmb,mncxmh6t3q90485ut9rsqklgfjkj#Q$YTEWOPJGPOEDSJC)$%#@^*@$%690uiodrj;lstj3;wpiot8ujdfpgioja90-8-0cx8v#KL%J,,.345.3.l0-0----0000-00---0-----0..-.-.--.....--.-.-.----5345..9.........4.....3.........456...4.........3.....2.........7.....3424.......................564...544......4...5.8...9.....6...3.7.........79345.9.565.....1...1.3...7.....1...1.33452.......................013..89345......4......9......732......8........6......8........9......9........846..78654......................698............8...3............6.....098345.....73............6...6............186...........................79843..9879878....6.......7.......8.......5.......8.......6.......9.......9.....12387.....7............................786982..........8........45623..77833...........9...............109841....................345.....723....5...1...6...2...6...3....5......78234.....45....1...8...7...8...2...3....873....4...5...........................4.....7..........1...5............9.4...93459......1...............1...............1............................4.....3..345634..3...7...3........7.5....3455......1.....3.........2.....867843....1............................5321452............1...............1...............1....743745.....1...............1............................2345754..5.....44........6.....354335....3.....13........4.....42........7542345................4....2...533....52...3.....6....2.3..9.....98...1..7.6.....6....7...88.....5....6....9...964....................------0--0-=0-=-0-00000000-00-0-0-000000,0,,0000jasdkl;jferiotupvn23c014985901c79840p72x812m598723189057m2190857mx98012479812798m1407395813479857m2149857198x0579814320758937981982347384957983g'\n# for ((i=0; i<${#FLAG}; i+=16)) { echo \"${FLAG:i:16}\"; }\necho 'FLAG{IS-IT-EASY-YET-FUN}'","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338278,"user_id":null,"body":"FLAG='dflaskjf; klcqwjer9qieiqucwepirom9028905839045809ds8gf[90g8sd[fh8f-[gh8-09wer0=t]mxcvnmz.xvchku9erpiot789-348tipahjrgfkhzxvxmb,mncxmh6t3q90485ut9rsqklgfjkj#Q$YTEWOPJGPOEDSJC)$%#@^*@$%690uiodrj;lstj3;wpiot8ujdfpgioja90-8-0cx8v#KL%J,,.345.3.l0-0----0000-00---0-----0..-.-.--.....--.-.-.----5345..9.........4.....3.........456...4.........3.....2.........7.....3424.......................564...544......4...5.8...9.....6...3.7.........79345.9.565.....1...1.3...7.....1...1.33452.......................013..89345......4......9......732......8........6......8........9......9........846..78654......................698............8...3............6.....098345.....73............6...6............186...........................79843..9879878....6.......7.......8.......5.......8.......6.......9.......9.....12387.....7............................786982..........8........45623..77833...........9...............109841....................345.....723....5...1...6...2...6...3....5......78234.....45....1...8...7...8...2...3....873....4...5...........................4.....7..........1...5............9.4...93459......1...............1...............1............................4.....3..345634..3...7...3........7.5....3455......1.....3.........2.....867843....1............................5321452............1...............1...............1....743745.....1...............1............................2345754..5.....44........6.....354335....3.....13........4.....42........7542345................4....2...533....52...3.....6....2.3..9.....98...1..7.6.....6....7...88.....5....6....9...964....................------0--0-=0-=-0-00000000-00-0-0-000000,0,,0000jasdkl;jferiotupvn23c014985901c79840p72x812m598723189057m2190857mx98012479812798m1407395813479857m2149857198x0579814320758937981982347384957983g'\n# for ((i=0; i<${#FLAG}; i+=16)) { echo \"${FLAG:$i:16}\"; }\necho \"FLAG{IS-IT-EASY-YET-FUN}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338279,"user_id":53,"body":"FLAG='dflaskjf; klcqwjer9qieiqucwepirom9028905839045809ds8gf[90g8sd[fh8f-[gh8-09wer0=t]mxcvnmz.xvchku9erpiot789-348tipahjrgfkhzxvxmb,mncxmh6t3q90485ut9rsqklgfjkj#Q$YTEWOPJGPOEDSJC)$%#@^*@$%690uiodrj;lstj3;wpiot8ujdfpgioja90-8-0cx8v#KL%J,,.345.3.l0-0----0000-00---0-----0..-.-.--.....--.-.-.----5345..9.........4.....3.........456...4.........3.....2.........7.....3424.......................564...544......4...5.8...9.....6...3.7.........79345.9.565.....1...1.3...7.....1...1.33452.......................013..89345......4......9......732......8........6......8........9......9........846..78654......................698............8...3............6.....098345.....73............6...6............186...........................79843..9879878....6.......7.......8.......5.......8.......6.......9.......9.....12387.....7............................786982..........8........45623..77833...........9...............109841....................345.....723....5...1...6...2...6...3....5......78234.....45....1...8...7...8...2...3....873....4...5...........................4.....7..........1...5............9.4...93459......1...............1...............1............................4.....3..345634..3...7...3........7.5....3455......1.....3.........2.....867843....1............................5321452............1...............1...............1....743745.....1...............1............................2345754..5.....44........6.....354335....3.....13........4.....42........7542345................4....2...533....52...3.....6....2.3..9.....98...1..7.6.....6....7...88.....5....6....9...964....................------0--0-=0-=-0-00000000-00-0-0-000000,0,,0000jasdkl;jferiotupvn23c014985901c79840p72x812m598723189057m2190857mx98012479812798m1407395813479857m2149857198x0579814320758937981982347384957983g'\n\n# Put the flag in this variable\necho \"FLAG{IS-IT-EASY-YET-FUN}\"","lang_id":50,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}]}