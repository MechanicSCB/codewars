{"50654ddff44f800200000004":[{"id":338460,"user_id":null,"body":"SELECT (price*amount) AS total FROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338461,"user_id":null,"body":"SELECT  (price * amount) as total FROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338462,"user_id":null,"body":"SELECT price * amount AS total FROM items;\n\/*You always got to see what error is happening and what result is expected*\/ ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338463,"user_id":null,"body":"SELECT CASE WHEN CAST(price AS float) IS NULL\n  THEN 0.0\n  ELSE CAST(price AS float) \n  END\n  *\n  CASE WHEN CAST(amount AS float) IS NULL \n    THEN 0.0\n    ELSE CAST(amount AS float)\n    END\n     AS total \n   FROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338464,"user_id":null,"body":"SELECT (i.price * i.amount) AS total FROM items i;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338465,"user_id":null,"body":"SELECT\n--CAST(price As float) price,\n--CAST(amount AS float) amount,\nCAST(price As float) * CAST(amount AS float) total\nFROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338466,"user_id":null,"body":"SELECT (price::float * amount::float) AS total FROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338467,"user_id":null,"body":"SELECT\n-- *\nprice * amount AS total\nFROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338468,"user_id":null,"body":"-- Do you wanna here a Joke? Okay.\n-- Working on the computer is like driving a submarine. When you open a window, the problems begin.\nSELECT price * amount AS total FROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338469,"user_id":null,"body":"SELECT price *(rowid+1) AS total FROM items","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"526989a41034285187000de4":[{"id":338470,"user_id":null,"body":"SELECT id, last::inet - first::inet as ips_between\nFROM ip_addresses;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338471,"user_id":null,"body":"SELECT id, last::inet - first::inet AS ips_between\nFROM ip_addresses;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338472,"user_id":null,"body":"SELECT\nDISTINCT id,\n(d4+d3*256+d2*256*256+d1*256*256*256) as ips_between\nFROM\n(SELECT *,\ncast(split_part(last,'.',1) as bigint) - cast(split_part(first,'.',1) as bigint) as d1,\ncast(split_part(last,'.',2) as bigint) - cast(split_part(first,'.',2) as bigint) as d2,\ncast(split_part(last,'.',3) as bigint) - cast(split_part(first,'.',3) as bigint) as d3,\ncast(split_part(last,'.',4) as bigint) - cast(split_part(first,'.',4) as bigint) as d4\nFROM ip_addresses) as ip;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338473,"user_id":149,"body":"SELECT id, last::inet - first::inet AS ips_between FROM ip_addresses ORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338474,"user_id":null,"body":"SELECT id, inet (last) - inet (first) as ips_between\nFROM ip_addresses;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338475,"user_id":null,"body":"CREATE OR REPLACE FUNCTION ip_value(text) RETURNS bigint \nAS $$\nDECLARE\n  ip bigint[] := string_to_array($1, '.')::bigint[];\nBEGIN\n   RETURN (ip[1]*16777216 + ip[2]*65536 + ip[3]*256 + ip[4]);\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT id, ABS(ip_value(first) - ip_value(last)) AS ips_between\nFROM ip_addresses","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338476,"user_id":null,"body":"select id, last::cidr - first::cidr as ips_between from ip_addresses;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338477,"user_id":null,"body":"SELECT id, \n       case when first::inet > last::inet \n            then first::inet - last::inet \n         else last::inet - first::inet \n       end as ips_between\n\nFROM ip_addresses;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338478,"user_id":null,"body":"SELECT id\n        ,((SPLIT_PART(last, '.',  1)::bigint - SPLIT_PART(first, '.',  1)::int)*256^3\n        + (SPLIT_PART(last, '.',  2)::int    - SPLIT_PART(first, '.',  2)::int)*256^2\n        + (SPLIT_PART(last, '.',  3)::int    - SPLIT_PART(first, '.',  3)::int)*256^1\n        + (SPLIT_PART(last, '.',  4)::int    - SPLIT_PART(first, '.',  4)::int)*256^0)::bigint AS ips_between\n  FROM ip_addresses;\n\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338479,"user_id":null,"body":"SELECT * \nFROM ip_addresses;\n\nSelect id, ((CAST(substring(last,'[^\\.]*') AS BIGINT) - CAST(substring(first,'[^\\.]*') AS BIGINT)) * \t16777216) +\n           ((CAST(substring(substring(last,'[^\\.]*\\.[^\\.]*'),'[^\\.]*$') AS BIGINT) -  CAST(substring(substring(first,'[^\\.]*\\.[^\\.]*'),'[^\\.]*$') AS BIGINT)) * 65536 ) +\n           ((CAST(substring(substring(last,'[^\\.]*\\.[^\\.]*$'),'[^\\.]*') AS BIGINT) -  CAST(substring(substring(first,'[^\\.]*\\.[^\\.]*$'),'[^\\.]*') AS BIGINT)) * 256) +\n           ((CAST(substring(last,'[^\\.]*$') AS BIGINT) - CAST(substring(first,'[^\\.]*$') AS BIGINT)) * \t1) AS ips_between\nFROM ip_addresses","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"53da3dbb4a5168369a0000fe":[{"id":338480,"user_id":1277,"body":"SELECT \n  CASE\n    WHEN number % 2 = 0 THEN 'Even'\n    ELSE 'Odd'\n  END\nAS is_even\nFROM numbers;","lang_id":52,"is_control":0,"status":"sample_failed","variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338481,"user_id":null,"body":"SELECT \n  (CASE WHEN n.number % 2 = 0 THEN 'Even' ELSE 'Odd' END) AS is_even\nFROM numbers n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338482,"user_id":null,"body":"SELECT\n  CASE WHEN Mod(number,2) = 0 THEN 'Even'\n       ELSE 'Odd' END as is_even\n\nFROM numbers\n\n\n--Write your SQL statement here--","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338483,"user_id":null,"body":"SELECT CASE number % 2 \n         WHEN 0 THEN 'Even'\n         ELSE 'Odd'\n       END is_even\n  FROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338484,"user_id":null,"body":"--cll\nselect case when mod(number,2)=0 then 'Even' else 'Odd' end as is_even\nfrom numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338485,"user_id":null,"body":"SELECT case when(number % 2)=0 then 'Even' else 'Odd' end as is_even FROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338486,"user_id":null,"body":"--Write your SQL statement here--\nCREATE OR REPLACE FUNCTION even (i int)\nRETURNS text AS $$\nDECLARE\ntmp int;\nBEGIN\ntmp := i % 2;\nIF tmp = 0 THEN RETURN 'Even';\nELSE RETURN 'Odd';\nEND IF;\nEND;\n$$ LANGUAGE plpgsql;\nSelect even(number) as is_even from numbers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338487,"user_id":null,"body":"select \n (case\n when (number % 2 = 1) then 'Odd' \n when (number % 2 = -1) then 'Odd'\n else 'Even' \n end) \n is_even \nfrom numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338488,"user_id":null,"body":"create function even_odd(i integer) returns text as $$\nDECLARE \n  res text;\nbegin\n  --case when $1%2=0 then result 'even' else return 'odd' end case;\n  case when i%2=0 then \n    res='Even'; \n  else \n    res='Odd'; \n  end case;\n  return res;\nend\n$$ language plpgsql;\n\nselect even_odd(number) as is_even from numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338489,"user_id":null,"body":"\nSELECT\n  CASE\n    WHEN number IS NULL THEN NULL\n    WHEN MOD(number, 2) <> 0 THEN 'Odd'\n    ELSE 'Even'\n  END AS is_even\nFROM numbers;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5545f109004975ea66000086":[{"id":338490,"user_id":null,"body":"SELECT id, n % x = 0 AND n % y = 0 AS res FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338491,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.\nselect id, (n % x = 0 AND n % y = 0) as res\nFROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338492,"user_id":null,"body":"CREATE FUNCTION is_divisible(n int, x int, y int)\nRETURNS boolean AS $$\nBEGIN\nIF (mod(n, x) = 0 AND mod(n, y) = 0) THEN\n  RETURN True;\nELSE\n  RETURN False;\nEND IF;\nEND;\n$$ LANGUAGE plpgsql;\nSELECt id, is_divisible(n, x, y) AS res FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338493,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.\n\n\n\nselect id,\ncase \n  when (kata.n % x) = 0 and (kata.n % y) = 0 then true\n  else false\nend as res\nfrom kata\n  \n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338494,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.\nselect \nrow_number() over() as id,\ncase when n%x=0 and n%y=0\nthen true\nelse false \nend res\nfrom kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338495,"user_id":null,"body":"\nCREATE OR REPLACE FUNCTION is_divisible(n INT, x INT, y INT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  CASE\n    WHEN n % x = 0 AND n % y = 0 THEN RETURN TRUE;\n    ELSE RETURN FALSE;\n  END CASE;\nEND$$ LANGUAGE plpgsql;\n\nSELECT id, is_divisible(n, x, y) AS res\nFROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338496,"user_id":null,"body":"SELECT id, n % x = 0 AND n % y = 0 as res FROM kata;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338497,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.\nSELECT id,\nCASE \n    WHEN n % x = 0 AND n % y = 0 THEN True\n    ELSE False END AS res\n    FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338498,"user_id":null,"body":"select id,(MOD(n,x)+MOD(n,y))=0 as res from kata\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338499,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'n', 'x', and 'y'. Return the 'id' and your result in a column named 'res'.\nselect id, n%x=0 AND n%y=0 AS res from kata\nIF \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"55a70521798b14d4750000a4":[{"id":338500,"user_id":null,"body":"--person table has name data\n-- Very nice job in description... i'm kidding\n-- table name: person\n-- column name: name\nselect 'Hello, ' || name || ' how are you doing today?' as greeting from person\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338501,"user_id":null,"body":"--person table has name data\nselect format('Hello, %s how are you doing today?', name) as greeting\nfrom person","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338502,"user_id":null,"body":"Select CONCAT('Hello, ',name ,' how are you doing today?') as greeting from person;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338503,"user_id":null,"body":"--person table has name data\nSelect ( 'Hello, ' || person.name || ' how are you doing today?')  as greeting from person\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338504,"user_id":null,"body":"CREATE OR REPLACE FUNCTION greeting_func (t1 text) RETURNS text AS $$\n  SELECT * FROM FORMAT('Hello, %s how are you doing today?', t1);\n$$ LANGUAGE SQL;\n\nSELECT greeting_func(name) AS greeting\nFROM person\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338505,"user_id":null,"body":"--person table has name data\nSelect Concat ('Hello, ', name, ' how are you doing today?') as greeting From person;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338506,"user_id":null,"body":"--person table has name data\nSELECT REPLACE(\n  'Hello, <name> how are you doing today?',\n  '<name>', name\n) as greeting FROM person;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338507,"user_id":null,"body":"SELECT\n 'Hello, ' || person.name || ' how are you doing today?' AS greeting\nFROM person ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338508,"user_id":null,"body":"SELECT 'Hello, '||person.name||' how are you doing today?' greeting FROM person\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338509,"user_id":null,"body":"--person table has name data\n--select Hello, id '||how are you doing today?||' as data, how from person where id=5 and name='Elda Borer'\n\n--select   * from person \nselect 'Hello,'||' '||name|| ' how are you doing today?'||'' as greeting from person -- where id <('11')  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"55cbc3586671f6aa070000fb":[{"id":338510,"user_id":527,"body":"select id, base % factor = 0 as res from kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338511,"user_id":76,"body":"SELECT id, (base % factor = 0) AS res FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338512,"user_id":226,"body":"-- you will be given a table 'kata' with columns 'id', 'base', and 'factor'. \n-- return the 'id' and your result in a column named 'res'.\n-- select * from kata;\n\nSELECT id, MOD(base, factor) = 0 AS res FROM kata;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338513,"user_id":1038,"body":"-- you will be given a table 'kata' with columns 'id', 'base', and 'factor'. \n-- return the 'id' and your result in a column named 'res'.\n-- SELECT * FROM kata\n\nselect id,\ncase\n  when base % factor = 0 then 'true'::boolean\n  else 'false'::boolean\nend as res from kata\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338514,"user_id":null,"body":"CREATE OR REPLACE FUNCTION is_divisible(factor1 INT, base1 INT)\nRETURNS BOOLEAN AS $$\nBEGIN\n  IF base1 % factor1 = 0 THEN RETURN TRUE;\n  ELSE RETURN FALSE;\n  END IF;\nEND $$ LANGUAGE plpgsql;\n\nSELECT id, is_divisible(factor,base) AS res\nFROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338515,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'id', 'base', and 'factor'. \n-- return the 'id' and your result in a column named 'res'.\nSELECT kata.id, CASE\n  WHEN base%factor = 0 THEN TRUE\n  WHEN base%factor > 0 THEN FALSE\nEND\nAS res\nfrom kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338516,"user_id":1566,"body":"SELECT id, base%factor=0 res  FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338517,"user_id":null,"body":"SELECT id,  CASE WHEN base % factor = 0 THEN true\n        ELSE false END AS res FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338518,"user_id":null,"body":"ALTER TABLE kata ADD COLUMN res boolean DEFAULT false;\n\nUPDATE kata SET res = true WHERE MOD(base, factor) = 0;\n\nSELECT id, res FROM kata;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338519,"user_id":null,"body":"-- you will be given a table 'kata' with columns 'id', 'base', and 'factor'. \n-- return the 'id' and your result in a column named 'res'.\nSELECT id, CAST(CASE                              --Here with case statement\n                WHEN base % factor = 0 THEN\n                    true\n                 ELSE \n                    false\n                 END AS bool) AS res  \n           FROM kata","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"55f73be6e12baaa5900000d4":[{"id":338520,"user_id":null,"body":"SELECT (la_liga_goals + copa_del_rey_goals + champions_league_Goals) as res\n  FROM goals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338521,"user_id":1566,"body":"select la_liga_goals + copa_del_rey_goals + champions_league_goals res\nfrom goals\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338522,"user_id":null,"body":"-- you will be given a table, goals, with columns la_liga_goals, \n-- copa_del_rey_goals, and champions_league_goals. \n-- Return a table with a column, res.\nSELECT la_liga_goals + copa_del_rey_goals + champions_league_goals as res\nFROM goals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338523,"user_id":645,"body":"SELECT la_liga_goals + copa_del_rey_goals + champions_league_goals AS res FROM goals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338524,"user_id":null,"body":"-- you will be given a table, goals, with columns la_liga_goals, copa_del_rey_goals, and champions_league_goals. Return a table with a column, res.\nSELECT g.la_liga_goals + g.copa_del_rey_goals + g.champions_league_goals AS res\nFROM goals g;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338525,"user_id":null,"body":"-- you will be given a table, goals; with columns: la_liga_goals, copa_del_rey_goals, champions_league_goals.\n-- Return a table with a column: res.\nSELECT\n    COALESCE(la_liga_goals, 0) + \n    COALESCE(copa_del_rey_goals, 0) +\n    COALESCE(champions_league_goals, 0)\n  AS res\nFROM\n  goals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338526,"user_id":null,"body":"-- you will be given a table, goals, with columns la_liga_goals, \n-- copa_del_rey_goals, and champions_league_goals. Return a table with a \n-- column, res.\n\n------------------------------------------------------------------------\n--UNDERSTAND\n--You will receive a table named \"goals\" that has\n\n--three columns named\n---- \"la_liga_goals\", \"copa_del_rey_goals\", and \"champions_league_goals\"\n\n--write a function that returns a column named \"res\", whose values are\n----the sums of all goals, across these columns(leagues)\n\n\n--PLAN\n\n-- ** Create a SELECT line that grabs values from each column, by name,\n----and use the '+' operator between the names;\n\n-- use AS \"res\" in the same line, to create the new column\/feature\n\n-- ** create second line using FROM \"goals\", the name of given table\n\n-------------------------------------------------------------------------\n\nSELECT (la_liga_goals + copa_del_rey_goals + champions_league_goals) AS res\n  FROM goals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338527,"user_id":null,"body":"-- table: goals\n-- columns: la_liga_goals, copa_del_rey_goals, champions_league_goals\n-- Return a table with a column, res.\n\n\nselect la_liga_goals + copa_del_rey_goals + champions_league_goals as res from goals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338528,"user_id":null,"body":"-- you will be given a table, goals, with columns la_liga_goals, copa_del_rey_goals, and champions_league_goals. Return a table with a column, res.\nSELECT la_liga_goals+copa_del_rey_goals+champions_league_goals as res from goals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338529,"user_id":645,"body":"SELECT la_liga_goals + copa_del_rey_goals + champions_league_goals AS res FROM goals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"55f9bca8ecaa9eac7100004a":[{"id":338530,"user_id":null,"body":"select (3600*h + 60*m + s)*1000 as res\nfrom past;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338531,"user_id":null,"body":"SELECT  ((h*60 + m)*60+ s )*1000 as res \n\nFROM past","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338532,"user_id":null,"body":"select h * 60 * 60 * 1000 + m * 60 * 1000 + s * 1000 as res from past","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338533,"user_id":1701,"body":"select 1000*(s+60*(m+60*h)) as res from past","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338534,"user_id":null,"body":"select ((h*3600 + m*60 + s)* 1000 )as res \nfrom past\nwhere (h between 0 and 23) and (m between 0 and 59) and (s between 0 and 59)\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338535,"user_id":null,"body":"CREATE FUNCTION to_milliseconds(h integer, m integer, s integer) RETURNS bigint\n    LANGUAGE plpgsql\n    IMMUTABLE\n    AS $$\n        BEGIN\n            RETURN (h * 3600 + m * 60 + s) * 1000;\n        END;\n    $$;\n\nSELECT to_milliseconds(h, m, s) AS res FROM past;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338536,"user_id":null,"body":"SELECT (h*1000*60*60) + (m*1000*60) + (s*1000) AS res\nFROM past","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338537,"user_id":null,"body":"select ((h*3600) + (m*60) + s)*1000 as res from past","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338538,"user_id":null,"body":"SELECT (h*3600000) + (m*60000) + (s*1000) AS res FROM past","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338539,"user_id":null,"body":"create or replace function Past (\n  h integer, \n  m integer, \n  s integer)\nreturns integer as \n$$\n  begin\n    return h*3600*1000+m*60000+s*1000;\n  end; \n$$\nlanguage plpgsql;\n\nselect Past(h, m, s) as res from past;\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"55fd2d567d94ac3bc9000064":[{"id":338540,"user_id":null,"body":"\/*\nthe table \"nums\" contains an integer \"n\", the number\nreturn your result in a column \"res\"\n*\/\n\nSELECT POWER(n, 3)::int as res from nums;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338541,"user_id":645,"body":"select n * n * n as res from nums","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338542,"user_id":null,"body":"\/*\nthe table \"nums\" contains an integer \"n\", the number\nreturn your result in a column \"res\"\n*\/\n\nCREATE OR REPLACE FUNCTION row_sum_odd_numbers (n INTEGER) \n\tRETURNS INTEGER AS $$\nDECLARE\n   counter INTEGER := n ; \n   total   INTEGER := 0 ; \n   x       INTEGER := (n * (n - 1) + 1) ;\nBEGIN\n\n\tIF (n < 1) THEN\n\t\tRETURN 0 ;\n\tEND IF; \n\t\n\tWHILE 0 < n LOOP\n    SELECT total + x into total;\n    \n    n := n - 1 ; \n    x := x + 2;\n\tEND LOOP ; \n\t\n\tRETURN total ;\nEND ; $$\nLANGUAGE PLPGSQL;\n\n-- Call function for every N in nums.\nSELECT res.*\n\t\tFROM nums,\n    LATERAL row_sum_odd_numbers(nums.n) res;\n    \n    \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338543,"user_id":null,"body":"select (n^3)::int as res\nfrom nums","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338544,"user_id":null,"body":"--SELECT * FROM nums;\n\nSELECT n * n * n AS res FROM nums;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338545,"user_id":null,"body":"select pow(n,3)::int as res from nums","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338546,"user_id":null,"body":"\/*\nthe table \"nums\" contains an integer \"n\", the number\nreturn your result in a column \"res\"\n*\/\n\nSELECT \n  CAST(POWER(nums.n, 3) AS INT) AS res\nFROM nums","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338547,"user_id":527,"body":"SELECT n * n * n AS res FROM nums","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338548,"user_id":null,"body":"\/*\nthe table \"nums\" contains an integer \"n\", the number\nreturn your result in a column \"res\"\n*\/\n\nALTER TABLE nums \nADD res INT;\nUPDATE nums SET res = n^3;\nSELECT res FROM nums;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338549,"user_id":null,"body":"with all_row_sum_odd_numbers as\n(\n  select x, n_sum - lag(n_sum, 1, 0::bigint) over() as res\n  from\n  (\n    select x, odd_numbers_count * odd_numbers_count as n_sum\n    from\n    (\n      select generate_series as x, (generate_series + 1) * generate_series \/ 2 as odd_numbers_count\n      from generate_series(1::bigint, (select max(n)::bigint from nums))\n    ) as odd_numbers_counts\n  ) as n_sums\n),\nnums_with_numbering_rows as\n(\n  select n, row_number() over() as row_number\n  from nums\n)\nselect res\nfrom nums_with_numbering_rows left join all_row_sum_odd_numbers on n = x\norder by row_number","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"563a631f7cbbc236cf0000c2":[{"id":338550,"user_id":645,"body":"select position + roll * 2 as res from moves;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338551,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns\n--'position' and 'roll'. return a table with a column 'res'. #--\n\nSELECT\n  position + roll * 2 AS res\nFROM moves","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338552,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'. return a table with a column 'res'. #--\nSELECT position + roll * 2\nAS res\nFROM moves;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338553,"user_id":null,"body":"SELECT position + (roll << 1) AS res FROM moves;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338554,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'. return a table with a column 'res'. #--\nselect coalesce(position,0)+\n       coalesce(roll,0) * 2\n       as res\nfrom moves\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338555,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'. return a table with a column 'res'. #--\n--res = roll*2 + position\n\nSELECT moves.position + moves.roll*2 AS res FROM moves;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338556,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'. return a table with a column 'res'. #--\nselect (position+roll+roll) as res from moves;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338557,"user_id":null,"body":"SELECT roll, position + roll*2 AS res\nFROM moves","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338558,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'.\n--return a table with a column 'res'. #--\nSELECT (position + 2 * roll) res FROM moves ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338559,"user_id":null,"body":"--# write your statement here: you will be given a table 'moves' with columns 'position' and 'roll'. return a table with a column 'res'. #--\nselect m.position+2*m.roll res from moves m","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5694cb0ec554589633000036":[{"id":338560,"user_id":null,"body":"with recursive f(n, fact) as (\n  select 0, 1::bigint\n  union all\n  select n + 1, fact * (n + 1)\n  from f\n)\nselect n, fact\nfrom f\nlimit 17","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338561,"user_id":null,"body":"WITH RECURSIVE factorial(n, fact)             -- Declare Recurisve Query with n and fact as outputs\nAS (                                            \n  SELECT                                      -- Initial Query that sets everything up\n    0 AS n,                                   -- 0 as n = starting index\n    1::NUMERIC(22,6) AS fact                  -- Configure 1 as the starting factorial and set as numeric type (0 factorial == 1)\n  UNION ALL                                   -- UNION ALL subqueries to the final result\n  SELECT\n    n + 1 AS n,                               -- Increment index n by one each run through\n    (fact * (n + 1))::NUMERIC(22,6) AS fact   -- Calculate factorial of n utilizing the previous calculated factorial\n  FROM\n    factorial                                 -- Continue the Recursion\n  WHERE n < 16                                -- Stop the Recursion when index n is greater than 16\n)\n\nSELECT                                        -- Call the factorial recursive function\n  n,\n  fact\nFROM\n  factorial","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338562,"user_id":null,"body":"CREATE FUNCTION factorial(n int) RETURNS table(fact bigint) AS $$  \n  WITH RECURSIVE r AS (\n    SELECT 1 AS i,\n           1::bigint AS fact\n           \n    UNION\n    \n    SELECT i + 1 AS i,\n           (fact * (i + 1))::bigint AS fact\n           \n    FROM r\n    WHERE i < n\n  )\n  SELECT max(fact) FROM r;\n$$\nLANGUAGE SQL;\n\nSELECT n, factorial(n) fact FROM generate_series(0,16) AS numbers(n);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338563,"user_id":null,"body":"WITH RECURSIVE factorials (n, fact) AS (\n  SELECT 0, 1::bigint\n  UNION ALL\n    SELECT n+1, fact*(n+1) AS factorial FROM factorials WHERE n < 16\n)\n\nSELECT * FROM factorials;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338564,"user_id":null,"body":"-- create recursively the table with n up to and including 16\nWITH RECURSIVE factorial (n, fact) AS (\n  SELECT 0, 1::bigint\n  UNION ALL\n    SELECT n+1, fact*(n+1) AS fact FROM factorial WHERE n < 16\n)\n\nSELECT * FROM factorial;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338565,"user_id":null,"body":"-- RECURSIVE\ncreate function f(n int) returns bigint AS $$\n  select case when n<2 then 1 else n*f(n-1) end\n$$\nLanguage SQL;\n\n\n\nselect n,f(n) fact FROM generate_series(0,16) n ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338566,"user_id":null,"body":"WITH RECURSIVE factorial AS  (SELECT 0 AS n,1::BIGINT as FACT\n                              UNION\n                              SELECT (n + 1) AS n, fact * (n + 1) AS fact\n                              FROM factorial\n                              WHERE n < 16\n                              )\nSELECT * FROM factorial;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338567,"user_id":206,"body":"with recursive cte_factorial\nas\n(\n  select 0 as n, 1 as fact\n  union all\n  select 1 as n, 1 as fact\n  union all\n  select 2 as n, 2 as fact\n  union all\n  select 3 as n, 6 as fact\n  union all\n  select 4 as n, 24 as fact\n  union all\n  select 5 as n, 120 as fact\n  union all\n  select 6 as n, 720 as fact\n  union all\n  select 7 as n, 5040 as fact\n  union all\n  select 8 as n, 40320 as fact\n  union all\n  select 9 as n, 362880 as fact\n  union all\n  select 10 as n, 3628800 as fact\n  union all\n  select 11 as n, 39916800 as fact\n  union all\n  select 12 as n, 479001600 as fact\n  union all\n  select 13 as n, 6227020800 as fact\n  union all\n  select 14 as n, 87178291200 as fact\n  union all\n  select 15 as n, 1307674368000 as fact\n  union all\n  select 16 as n, 20922789888000 as fact\n)\nselect * from cte_factorial\norder by 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338568,"user_id":53,"body":"WITH RECURSIVE f (n, fact) AS (\n      SELECT 0, CAST (1 AS BIGINT)\n   UNION ALL\n      SELECT n + 1, (n + 1) * fact\n      FROM f\n      WHERE n < 16\n)\nSELECT * FROM f;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338569,"user_id":null,"body":"WITH RECURSIVE factorial(n, fact) AS\n(\n  SELECT \n    0,\n    cast(1 as BIGINT)\n  UNION ALL\n  SELECT n+1, (n+1)*fact\n  FROM factorial\n)\n  SELECT n, fact\n  FROM factorial\n  LIMIT 17;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"56c5847f27be2c3db20009c3":[{"id":338570,"user_id":null,"body":"\/* CREATE TABLE FRUITS *\/\ncreate table fruits (id int, name varchar);\n\nInsert Into fruits (id, name) values (1,'kiwi');\nInsert Into fruits (id, name) values (2,'pear');\nInsert Into fruits (id, name) values (3,'kiwi');\nInsert Into fruits (id, name) values (4,'banana');\nInsert Into fruits (id, name) values (5,'melon');\nInsert Into fruits (id, name) values (6,'banana');\nInsert Into fruits (id, name) values (7,'melon');\nInsert Into fruits (id, name) values (8,'pineapple');\nInsert Into fruits (id, name) values (9,'apple');\nInsert Into fruits (id, name) values (10,'pineapple');\nInsert Into fruits (id, name) values (11,'cucumber');\nInsert Into fruits (id, name) values (12,'pineapple');\nInsert Into fruits (id, name) values (13,'cucumber');\nInsert Into fruits (id, name) values (14,'orange');\nInsert Into fruits (id, name) values (15,'grape');\nInsert Into fruits (id, name) values (16,'orange');\nInsert Into fruits (id, name) values (17,'grape');\nInsert Into fruits (id, name) values (18,'apple');\nInsert Into fruits (id, name) values (19,'grape');\nInsert Into fruits (id, name) values (20,'cherry');\nInsert Into fruits (id, name) values (21,'pear');\nInsert Into fruits (id, name) values (22,'cherry');\nInsert Into fruits (id, name) values (23,'pear');\nInsert Into fruits (id, name) values (24,'kiwi');\nInsert Into fruits (id, name) values (25,'banana');\nInsert Into fruits (id, name) values (26,'kiwi');\nInsert Into fruits (id, name) values (27,'apple');\nInsert Into fruits (id, name) values (28,'melon');\nInsert Into fruits (id, name) values (29,'banana');\nInsert Into fruits (id, name) values (30,'melon');\nInsert Into fruits (id, name) values (31,'pineapple');\nInsert Into fruits (id, name) values (32,'melon');\nInsert Into fruits (id, name) values (33,'pineapple');\nInsert Into fruits (id, name) values (34,'cucumber');\nInsert Into fruits (id, name) values (35,'orange');\nInsert Into fruits (id, name) values (36,'apple');\nInsert Into fruits (id, name) values (37,'orange');\nInsert Into fruits (id, name) values (38,'grape');\nInsert Into fruits (id, name) values (39,'orange');\nInsert Into fruits (id, name) values (40,'grape');\nInsert Into fruits (id, name) values (41,'cherry');\nInsert Into fruits (id, name) values (42,'pear');\nInsert Into fruits (id, name) values (43,'cherry');\nInsert Into fruits (id, name) values (44,'pear');\nInsert Into fruits (id, name) values (45,'apple');\nInsert Into fruits (id, name) values (46,'pear');\nInsert Into fruits (id, name) values (47,'kiwi');\nInsert Into fruits (id, name) values (48,'banana');\nInsert Into fruits (id, name) values (49,'kiwi');\nInsert Into fruits (id, name) values (50,'banana');\nInsert Into fruits (id, name) values (51,'melon');\nInsert Into fruits (id, name) values (52,'pineapple');\nInsert Into fruits (id, name) values (53,'melon');\nInsert Into fruits (id, name) values (54,'apple');\nInsert Into fruits (id, name) values (55,'cucumber');\nInsert Into fruits (id, name) values (56,'pineapple');\nInsert Into fruits (id, name) values (57,'cucumber');\nInsert Into fruits (id, name) values (58,'orange');\nInsert Into fruits (id, name) values (59,'cucumber');\nInsert Into fruits (id, name) values (60,'orange');\nInsert Into fruits (id, name) values (61,'grape');\nInsert Into fruits (id, name) values (62,'cherry');\nInsert Into fruits (id, name) values (63,'apple');\nInsert Into fruits (id, name) values (64,'cherry');\nInsert Into fruits (id, name) values (65,'pear');\nInsert Into fruits (id, name) values (66,'cherry');\nInsert Into fruits (id, name) values (67,'pear');\nInsert Into fruits (id, name) values (68,'kiwi');\nInsert Into fruits (id, name) values (69,'pear');\nInsert Into fruits (id, name) values (70,'kiwi');\nInsert Into fruits (id, name) values (71,'banana');\nInsert Into fruits (id, name) values (72,'apple');\nInsert Into fruits (id, name) values (73,'banana');\nInsert Into fruits (id, name) values (74,'melon');\nInsert Into fruits (id, name) values (75,'pineapple');\nInsert Into fruits (id, name) values (76,'melon');\nInsert Into fruits (id, name) values (77,'pineapple');\nInsert Into fruits (id, name) values (78,'cucumber');\nInsert Into fruits (id, name) values (79,'pineapple');\nInsert Into fruits (id, name) values (80,'cucumber');\nInsert Into fruits (id, name) values (81,'apple');\nInsert Into fruits (id, name) values (82,'grape');\nInsert Into fruits (id, name) values (83,'orange');\nInsert Into fruits (id, name) values (84,'grape');\nInsert Into fruits (id, name) values (85,'cherry');\nInsert Into fruits (id, name) values (86,'grape');\nInsert Into fruits (id, name) values (87,'cherry');\nInsert Into fruits (id, name) values (88,'pear');\nInsert Into fruits (id, name) values (89,'cherry');\nInsert Into fruits (id, name) values (90,'apple');\nInsert Into fruits (id, name) values (91,'kiwi');\nInsert Into fruits (id, name) values (92,'banana');\nInsert Into fruits (id, name) values (93,'kiwi');\nInsert Into fruits (id, name) values (94,'banana');\nInsert Into fruits (id, name) values (95,'melon');\nInsert Into fruits (id, name) values (96,'banana');\nInsert Into fruits (id, name) values (97,'melon');\nInsert Into fruits (id, name) values (98,'pineapple');\nInsert Into fruits (id, name) values (99,'apple');\nInsert Into fruits (id, name) values (100,'pineapple');\n\n\n\/* CREATE FUNCTION SUBSTRACTTHESUM *\/\nCREATE FUNCTION SubstractTheSum(n int)  RETURNS text  \nAS $$   \nDECLARE \n  currentn int := n;\nBEGIN\n  \n    WHILE currentn = n OR currentn > 100 \n        LOOP\n            currentn := currentn - (currentn            % 10\n                                      + currentn \/ 10       % 10\n                                      + currentn \/ 100      % 10\n                                      + currentn \/ 1000     % 10\n                                      + currentn \/ 10000    % 10\n                                      + currentn \/ 100000   % 10\n                                      + currentn \/ 1000000  % 10\n                                      + currentn \/ 10000000 % 10);\n            \n        END LOOP;\n    return (SELECT f.name FROM fruits f WHERE f.id = currentn);\nEND;\n$$\nLANGUAGE plpgsql;\n\n\/* CALL SUBSTRACTTHESUM FOR EACH N*\/\nselect SubstractTheSum(ss.n)  as res from sub_sum ss;\n        \n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338571,"user_id":null,"body":"\/* \nNo matter the number (above 9), when its digits are subtracted the result will be a number divisible by 9. \nAll the numbers in the lookup table divisible by 9 are 'apple', so that will be the only return value for all inputs. \n*\/ \nSELECT\n  'apple' as res\nFROM sub_sum","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338572,"user_id":null,"body":"CREATE TABLE fruits (\n  id SERIAL PRIMARY KEY,\n  fruit VARCHAR(20)\n);\n\nINSERT INTO fruits(fruit)\nVALUES\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple'),\n('apple');\n\nSELECT fruit as res FROM fruits","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338573,"user_id":null,"body":"create or replace function sum_all_digit(n int) returns int\n\tlanguage plpgsql as\n$$\ndeclare\n\tsum int := 0;\nbegin\n\twhile n > 0 loop\n\t\tsum = sum + (n % 10)::int;\n\t\tn = (n \/ 10)::int;\n\tend loop;\n\treturn sum;\nend;\n$$;\n\ncreate or replace function solve(n int) returns varchar\n\tlanguage plpgsql as\n$$\ndeclare\n\tfruits varchar[] := '{kiwi, pear, kiwi, banana, melon, banana, melon, pineapple, apple, pineapple, cucumber, pineapple, cucumber, orange, grape, orange, grape, apple, grape, cherry, pear, cherry, pear, kiwi, banana, kiwi, apple, melon, banana, melon, pineapple, melon, pineapple, cucumber, orange, apple, orange, grape, orange, grape, cherry, pear, cherry, pear, apple, pear, kiwi, banana, kiwi, banana, melon, pineapple, melon, apple, cucumber, pineapple, cucumber, orange, cucumber, orange, grape, cherry, apple, cherry, pear, cherry, pear, kiwi, pear, kiwi, banana, apple, banana, melon, pineapple, melon, pineapple, cucumber, pineapple, cucumber, apple, grape, orange, grape, cherry, grape, cherry, pear, cherry, apple, kiwi, banana, kiwi, banana, melon, banana, melon, pineapple, apple, pineapple}';\nbegin\n\twhile (n >= 10) loop\n\t\tn := n - sum_all_digit(n);\n\t\tif (fruits[n] is not null) then\n\t\t       \treturn fruits[n];\n\t\tend if;\n\tend loop;\n\t\n\treturn fruits[n];\nend;\n$$;\n\n\nselect solve(n) res from sub_sum;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338574,"user_id":null,"body":"SELECT 'apple' res FROM sub_sum\n--XD","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338575,"user_id":null,"body":"\nSELECT 'apple' AS res FROM sub_sum","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338576,"user_id":76,"body":"SELECT 'apple' res FROM sub_sum","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338577,"user_id":null,"body":"select 'apple' as res FROM sub_sum\n--LOLOLOLOLOLOLOLOL","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338578,"user_id":null,"body":"select 'apple' as res from sub_sum\n-- ._.\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338579,"user_id":null,"body":"--SELECT ((trunc(n\/1000))+(trunc(n\/100)-trunc(n\/1000)*10)+(trunc(n\/10)-trunc(n\/100)*10)+(n-trunc(n\/10)*10)) as res\nSELECT CASE WHEN n>0 THEN 'apple'\n       ELSE 'NOT APPLE'      \n       END AS res\nFROM sub_sum ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"56dec885c54a926dcd001095":[{"id":338580,"user_id":null,"body":"Select -number AS res FROM opposite;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338581,"user_id":null,"body":"SELECT\n  NUMBER * (-1) AS res\nFROM OPPOSITE","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338582,"user_id":null,"body":"select -number res from opposite","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338583,"user_id":null,"body":"-- You will be given a table: \"opposite\", with a column: \"number\". Return a table with a column: \"res\".\nSELECT opposite.number*-1 as res FROM opposite","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338584,"user_id":null,"body":"-- You will be given a table: \"opposite\", with a column: \"number\". Return a table with a column: \"res\".\nSELECT -number AS res FROM opposite;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338585,"user_id":null,"body":"select  case when number =0 then 0\nelse -1*number end as res \nfrom opposite ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338586,"user_id":null,"body":"-- You will be given a table: \"opposite\", with a column: \"number\". Return a table with a column: \"res\"\nselect (number*-1) as res\nfrom opposite","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338587,"user_id":null,"body":"select (number * -1) AS \"res\" FROM opposite;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338588,"user_id":null,"body":"-- You will be given a table: \"opposite\", with a column: \"number\". Return a table with a column: \"res\".\nALTER TABLE opposite ADD COLUMN res INT;\n\nUPDATE opposite SET res = (number * -1);\n\nSELECT res\nFROM opposite;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338589,"user_id":null,"body":"SELECT (CASE\n           WHEN number > 0 OR number < 0 THEN -number\n           WHEN number = 0 THEN number\n        END) AS res\nFROM opposite;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"57eae20f5500ad98e50002c5":[{"id":338590,"user_id":421,"body":"SELECT x, REPLACE(x, ' ', '') AS res \nFROM nospace","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338591,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' with column 'x', \n--return a table with column 'x' and your result in a column named 'res'.\n\nSELECT x, REPLACE(x,' ','') as res\nFROM nospace","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338592,"user_id":null,"body":"SELECT x\n  ,REPLACE(NS.x,' ','') AS res\nFROM nospace AS NS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338593,"user_id":null,"body":"Select x, REPLACE(x, ' ', '') AS res FROM nospace","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338594,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' with column 'x', return a table with column 'x' and your result in a column named 'res'.\nselect x, trim(regexp_replace(x, '[\\s+]', '', 'g')) as res from nospace","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338595,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' with column 'x',\n-- return a table with column 'x' and your result in a column named 'res'.\n\n-- # select replace(x, ' ', '') as res from nospace\n\nselect x, replace(x, ' ', '') as res from nospace\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338596,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' with column 'x', return a table with column 'x' and your result in a column named 'res'.\n\/*\nselect \"x\", trim('x') as res\nfrom nospace\n\n*\/\nselect x, replace(x, ' ','') as res \nfrom nospace\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338597,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' \n-- # with column 'x', return a table with column 'x' and your result in a column named 'res'.\nSELECT x, REPLACE(x, ' ', '') as res FROM nospace ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338598,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' with column 'x', return a table with column 'x' and your result in a column named 'res'.\nSelect x, Replace(x,' ','') as res\nFROM nospace;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338599,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'nospace' with column 'x', return a table with column 'x' and your result in a column named 'res'.\nselect x, replace(ns.x, ' ', '') as res from nospace ns\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5802e32dd8c944e562000020":[{"id":338600,"user_id":527,"body":"SELECT products.*, companies.name AS company_name\nFROM products JOIN companies ON company_id = companies.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338601,"user_id":3069,"body":"SELECT p.*,\n       c.name AS company_name\n  FROM products p,\n       companies c\n WHERE c.id = p.company_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338602,"user_id":null,"body":"SELECT \n  products.id,\n  products.name,\n  products.isbn,\n  products.company_id,\n  products.price,\n  companies.name as company_name\nFROM\n  products\nJOIN\n  companies on companies.id = products.company_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338603,"user_id":null,"body":"select p.*, c.name company_name\nFROM products p\nJOIN companies c ON c.id=p.company_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338604,"user_id":null,"body":"SELECT\n  P.id,\n  P.name,\n  P.isbn,\n  P.company_id,\n  P.price,\n  C.name AS company_name\nFROM products AS P\nINNER JOIN companies AS C\n  ON P.company_id = C.id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338605,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT products.*, companies.name as company_name FROM products\nJOIN companies ON products.company_id = companies.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338606,"user_id":null,"body":"SELECT \n  products.*,\n  companies.name as company_name\nFROM products INNER JOIN companies ON companies.id = products.company_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338607,"user_id":null,"body":"SELECT products.*,companies.name as company_name FROM products JOIN companies ON companies.id=products.company_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338608,"user_id":2199,"body":"SELECT P.*, C.name AS company_name\nFROM products AS P, companies AS C\nWHERE P.company_id = C.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338609,"user_id":null,"body":"-- Create your SELECT statement here\nselect p.*, c.name company_name\nfrom products p\njoin companies c on p.company_id = c.id\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"580918e24a85b05ad000010c":[{"id":338610,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT p.*, COUNT(t) AS toy_count\nFROM people p\nJOIN toys t\n  ON t.people_id = p.id\nGROUP BY p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338611,"user_id":225,"body":"SELECT \n  p.id,\n  p.name,\n  COUNT(t.name) as toy_count \nFROM people p JOIN toys t ON p.id = t.people_id \ngroup by p.id, p.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338612,"user_id":null,"body":"SELECT p.*, COUNT(t.id) AS toy_count\nFROM people p\nLEFT JOIN toys t\n  ON t.people_id = p.id\nGROUP BY p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338613,"user_id":1947,"body":"SELECT people.*, COUNT(*) as toy_count\nFROM people JOIN toys\nON people.id = toys.people_id\nGROUP BY people.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338614,"user_id":null,"body":"SELECT\n  P.id,\n  P.name,\n  (SELECT COUNT(*) FROM toys WHERE people_id = P.id) AS toy_count\nFROM people AS P\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338615,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT \n  p.id\n, p.name\n, COUNT(t.id) AS toy_count\nFROM people as p\nLEFT JOIN toys as t\n  ON p.id = t.people_id\nGROUP BY\n  p.id\n, p.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338616,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT\n  p.*, COUNT(1) AS toy_count\nFROM\n people AS p,\n toys AS t\nWHERE p.id=t.people_id\nGROUP BY p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338617,"user_id":null,"body":"-- -- Understand\n\n-- Using a simple SELECT statement and a JOIN keyword\n-- take the tables \"people\" and \"toys\" to \n-- Return a 2 row, 3 column table the columns should be\n-- \"id\", \"name\", and \"toy_count\" for the number of times \"people_id\"\n-- appears in the table \"toys\"\n\n-- -- Plan\n-- SELECT all(*) columns from \"p\" and the COUNT of \"t.people_id\"\n-- FROM people as p, toys as t\n-- WHERE p.id = t.people_id\n-- GROUP BY p.id\n-- -- Housekeeping, keep it organized\n-- ORDER BY \n\nSELECT\n  p.*,\n  COUNT\n    (t.id) AS toy_count\nFROM\n  people AS p,\n  toys AS t\nWHERE\n  p.id = t.people_id\nGROUP BY\n  p.id\nORDER BY\n  p.id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338618,"user_id":964,"body":"SELECT people.id, people.name, count(toys.id) as toy_count\nFROM people\nJOIN toys on toys.people_id = people.id\nGROUP BY people.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338619,"user_id":null,"body":"-- Create your SELECT statement here\nselect people.id, people.name, count(*) as toy_count\nfrom people, toys\nwhere people.id = people_id\ngroup by people.id, people.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58094559c47d323ebd000035":[{"id":338620,"user_id":null,"body":"SELECT p.id, p.name, sc.cnt AS sale_count, \n       RANK() OVER( ORDER BY sc.cnt DESC ) AS sale_rank\nFROM people AS p\nJOIN (SELECT people_id, COUNT(*) AS cnt\n      FROM sales\n      GROUP BY people_id) sc\nON sc.people_id = p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338621,"user_id":1519,"body":"SELECT \n  p.*,\n  COUNT(s) as sale_count, \n  RANK() OVER (ORDER BY sum(s.price) DESC) as sale_rank\n  FROM people p\n  JOIN sales s ON s.people_id = p.id\n  GROUP BY p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338622,"user_id":1947,"body":"select p.*, count(*) as sale_count, rank() over (order by count(*) desc) as sale_rank\nfrom people p join sales s on p.id = s.people_id\ngroup by p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338623,"user_id":null,"body":"SELECT p.*, COUNT(s.people_id) sale_count, SUM(s.price) sale_rank\nFROM people p\nJOIN sales s ON s.people_id=p.id\nGROUP BY s.people_id, p.id\nORDER BY sale_rank","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338624,"user_id":null,"body":"  SELECT p.id,\n         p.name,\n         RANK() OVER(ORDER BY COUNT(s.*) DESC) AS sale_rank,\n         COUNT(s.*) AS sale_count\n    FROM people AS p\n    JOIN sales  AS s\n      ON p.id = s.people_id\nGROUP BY p.id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338625,"user_id":null,"body":"select\n  p.id,\n  name,\n  count(p.id) as sale_count,\n  rank() over (order by count(p.id) desc) as sale_rank\nfrom people p\njoin sales s on p.id = s.people_id\ngroup by p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338626,"user_id":null,"body":"WITH results AS\n(\nSELECT\n\tp.id\n  ,p.name\n  ,COUNT(s.price) as sale_count\n\nFROM people p\nJOIN sales s ON p.id = s.people_id\nGROUP BY p.id\nORDER BY p.name ASC\n)\nSELECT \n\tRANK() OVER (ORDER BY sale_count DESC) as sale_rank\n\t,*\nFROM results","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338627,"user_id":681,"body":"SELECT\n  people.id,\n  name,\n  count(sale) sale_count,\n  rank() OVER   \n    (ORDER BY count(sale) DESC) sale_rank\nFROM SALES\nINNER JOIN PEOPLE ON sales.people_ID = people.id\nGROUP BY people.id, name\nORDER BY count(sale) DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338628,"user_id":null,"body":"Select p.id, p.name, count(1) as \"sale_count\"\n,RANK () OVER ( \n\t\tORDER BY count(1) DESC\n\t) sale_rank\nfrom sales s\njoin people p on s.people_id = p.id\ngroup by p.id, p.name\norder by count(1) desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338629,"user_id":null,"body":"SELECT\n  t1.id AS id,\n  t1.name AS name,\n  COUNT(t2.id) AS sale_count,\n  ROW_NUMBER() OVER(ORDER BY COUNT(t2.id) DESC) AS sale_rank\nFROM people AS t1\nINNER JOIN sales AS t2 ON t1.id = t2.people_id\nGROUP BY t1.id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5809508cc47d327c12000084":[{"id":338630,"user_id":225,"body":"SELECT *\n  FROM people\n  WHERE age > 50\n  ORDER BY age DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338631,"user_id":null,"body":"SELECT\n  id,\n  name,\n  age\nFROM people\nWHERE age > 50\nORDER BY age desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338632,"user_id":1669,"body":"SELECT * from people WHERE Age > 50 Order By age desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338633,"user_id":null,"body":"SELECT p.id, p.name, p.age\n  FROM people AS p\n  WHERE p.age > 50\n  ORDER BY p.age DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338634,"user_id":null,"body":"--- Understand:\n\n--- We are SELECTing ALL columns from the Data Base \"people\"\n------ where the age is ABOVE 50\n------ needs to be SORTED in DESCending order by age\n\n--- Plan:\n\n--- SELECT ALL (*)\n----- FROM the databgase \"people\"\n----- WHERE the value in column \"age\" is GREATER than 50\n----- ORDER BY \"age\" DESCending\n----- remember semicolon(;)\n\n\nSELECT * \n  FROM people\n WHERE age > 50\n ORDER BY age DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338635,"user_id":944,"body":"select * from people where age>50 order by age desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338636,"user_id":null,"body":"\n--selects all attributes\nSELECT *\n\n--from the table called people\nFROM people \n\n--condition statement that returns the age of all people that are over 50\nWHERE age > 50 \n\n--statement to order to results by the age attribute in descending order\nORDER BY age DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338637,"user_id":null,"body":"SELECT *\nFROM people\nWHERE age > 50\nORDER BY age desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338638,"user_id":null,"body":"SELECT people.*\nFROM people\nWHERE people.age > 50\nORDER BY age DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338639,"user_id":null,"body":"SELECT id,name,age FROM people\nWHERE age > 50\nORDER BY age DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5809575e166583acfa000083":[{"id":338640,"user_id":null,"body":"SELECT RANK() OVER (ORDER BY SUM(points) DESC),\n  COALESCE(NULLIF(clan,''), '[no clan specified]') AS clan,\n  SUM(points) AS total_points,\n  COUNT(*) AS total_people\nFROM people \nGROUP BY clan\nORDER BY total_points DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338641,"user_id":null,"body":"select rank() over (order by sum(points) desc), \nCASE WHEN clan = '' THEN '[no clan specified]' ELSE clan END, \nsum(points) total_points, \ncount(name) total_people \nfrom people\ngroup by clan","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338642,"user_id":null,"body":"SELECT RANK() OVER(ORDER BY r.total_points DESC) AS rank, r.*\nFROM (\n  SELECT\n    COALESCE(NULLIF(p.clan,''), '[no clan specified]') AS clan,\n    SUM(p.points) AS total_points,\n    COUNT(p.name) AS total_people\n  FROM people p\n  GROUP BY p.clan ) r;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338643,"user_id":null,"body":"-- Create your SELECT statement here\nwith clans as(\n  select\n    coalesce(nullif(clan,''),'[no clan specified]') clan,\n    sum(points) total_points,\n    count(*) total_people\n  from people\n  group by clan\n)\n  \nselect\n  rank() over (order by total_points desc) \"rank\",\n  clan,\n  total_points,\n  total_people\nfrom clans\n\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338644,"user_id":null,"body":"SELECT \n       RANK() OVER (ORDER BY SUM(points) DESC) AS rank,\n       COALESCE(NULLIF(clan,''), '[no clan specified]') AS clan,\n       SUM(points) AS total_points,\n       COUNT(name) AS total_people\nFROM people\nGROUP BY clan","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338645,"user_id":null,"body":"SELECT RANK() OVER (ORDER BY SUM(points) DESC) AS rank,\nCASE clan WHEN '' THEN '[no clan specified]' ELSE clan END AS clan,\nSUM(points) AS total_points, \nCOUNT(name) AS total_people\nFROM people\nGROUP BY clan","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338646,"user_id":null,"body":"select \n  row_number() over (order by sum(points) desc) \"rank\",\n  CASE WHEN clan = '' THEN '[no clan specified]' else clan END \"clan\", \n  sum(points) \"total_points\", \n  count(*) \"total_people\" \nfrom \n  people \ngroup by \n  clan \norder by \n  sum(points) desc;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338647,"user_id":null,"body":"-- \nselect\n--Create a RANK() - Built in function - and roll it OVER the ORDERED SUM(points)\nRANK() OVER (ORDER BY SUM(points) DESC) AS rank,\n--Use COALESCE(NULLIF()) for test null values, if null return '[no clan specified]'\nCOALESCE(NULLIF(clan, ''), '[no clan specified]') as clan, \n--Count the clan rows\ncount(clan) total_people,\n--Sum the points rows\nsum(points) total_points \nfrom people\n--Group by clan to make true the select\ngroup by clan \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338648,"user_id":525,"body":"SELECT\n  ROW_NUMBER() over(ORDER BY SUM(points) DESC) rank,\n  CASE WHEN clan = ''\n    THEN '[no clan specified]'\n    ELSE clan\n  END as clan,\n  SUM(points) as total_points,\n  COUNT(*) as total_people\nFROM people\nGROUP BY clan\nORDER BY total_points DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338649,"user_id":null,"body":"SELECT dense_rank() OVER (ORDER BY sum(points) DESC)     AS rank,\n       coalesce(nullif(clan, ''), '[no clan specified]') AS clan,\n       sum(points)                                       AS total_points,\n       count(name)                                       AS total_people\nFROM people\nGROUP BY clan\nORDER BY rank;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5809b9ef88b750ab180001ec":[{"id":338650,"user_id":null,"body":"SELECT * FROM students WHERE IsActive;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338651,"user_id":1553,"body":"SELECT * FROM students WHERE isActive = 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338652,"user_id":2977,"body":"SELECT * FROM students WHERE IsActive = 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338653,"user_id":225,"body":"select * from students where IsActive","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338654,"user_id":null,"body":"-- Type your query here\nSELECT Id, FirstName, LastName, IsActive\nFROM students\nWHERE IsActive","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338655,"user_id":null,"body":"SELECT s.Id, s.FirstName, s.LastName, s.IsActive\nFROM students s\nLIMIT 4","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338656,"user_id":null,"body":"SELECT * from students \nwhere IsActive = '1'; \n\n-- key takeaway: boolean values are 1 (true) or 2 (false) in SQL. ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338657,"user_id":null,"body":"SELECt * FROM students WHERE IsActive;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338658,"user_id":null,"body":"Select * from students where IsActive=1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338659,"user_id":null,"body":"select * from students where students.isActive = 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"580d08b5c049aef8f900007c":[{"id":338660,"user_id":null,"body":"SELECT\n  customer.customer_id,\n  customer.email,\n  COUNT(payment.payment_id) AS payments_count,\n  CAST(SUM(payment.amount) AS float) AS total_amount\nFROM customer\nJOIN payment\n  ON customer.customer_id = payment.customer_id\nGROUP BY customer.customer_id\nORDER BY total_amount DESC\nLIMIT 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338661,"user_id":null,"body":"select c.customer_id ,\n       c.email,\n       count(1) as \"payments_count\",\n       sum(p.amount::float) as \"total_amount\"       \n   from customer as c \n   inner join payment as p\n           on c.customer_id = p.customer_id\ngroup by c.customer_id, c.email\norder by \"total_amount\" desc\nlimit 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338662,"user_id":null,"body":"SELECT \n  c.customer_id, \n  c.email, \n  COUNT(p.amount) AS payments_count, \n  SUM(p.amount)::FLOAT AS total_amount\nFROM payment AS p\nINNER JOIN customer AS c ON c.customer_id = p.customer_id\nGROUP BY c.customer_id\nORDER BY total_amount DESC\nLIMIT 10;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338663,"user_id":2254,"body":"SELECT c.customer_id, c.email, payments_count, total_amount\n  FROM \n(\n  SELECT customer_id,\n         COUNT(*) payments_count,\n         SUM(amount)::float total_amount\n    FROM payment\n   GROUP BY customer_id\n   ORDER BY total_amount DESC\n   LIMIT 10\n) q JOIN customer c\n    ON q.customer_id = c.customer_id\n  ORDER BY total_amount DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338664,"user_id":null,"body":"SELECT\n  customer.customer_id,\n  customer.email,\n  COUNT(payment.amount) AS payments_count,\n  SUM(CAST(payment.amount AS FLOAT)) AS total_amount\nFROM customer\nINNER JOIN payment ON customer.customer_id = payment.customer_id\nGROUP BY(customer.customer_id)\nORDER BY(total_amount) DESC\nLIMIT 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338665,"user_id":null,"body":"SELECT customer.customer_id, customer.email, COUNT(payment_id) AS \"payments_count\", CAST(SUM(amount) AS FLOAT) AS \"total_amount\"\nFROM customer JOIN payment ON customer.customer_id = payment.customer_id\nGROUP BY customer.customer_id \nORDER BY total_amount desc\nlimit 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338666,"user_id":null,"body":"-- Replace with your query (in pure SQL)\nselect customer_id, email, payments_count, total_amount from (\nselect\n  customer.customer_id\n  , customer.email\n  , count(payment.payment_id) as payments_count\n  , cast(sum(payment.amount) as float) as total_amount\n  , rank() over (order by sum(payment.amount) desc) as ranking\nfrom\n  customer\n  join\n    payment\n  on\n    customer.customer_id = payment.customer_id\ngroup by\n  customer.customer_id) as t1 where t1.ranking <= 10;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338667,"user_id":null,"body":"select c.customer_id, c.email, p.payments_count, p.total_amount\nfrom customer c\ninner join (select customer_id, CAST( sum(amount) as float) as total_amount, count(payment_id) as payments_count\n            from payment group by customer_id) as p on p.customer_id = c.customer_id\norder by p.total_amount desc\nlimit 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338668,"user_id":null,"body":"SELECT c.customer_id, c.email, COUNT(p.customer_id) payments_count, SUM(p.amount)::FLOAT total_amount\nFROM customer c\nJOIN payment p on p.customer_id=c.customer_id\nGROUP BY c.customer_id\nORDER BY total_amount DESC\nLIMIT 10 OFFSET 0;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338669,"user_id":null,"body":"SELECT\n\tcu.customer_id, cu.email,\n\tCOUNT(pa.payment_id) AS payments_count,\n\tSUM(pa.amount)::float AS total_amount\nFROM customer AS cu\nINNER JOIN payment AS pa\nON pa.customer_id = cu.customer_id\nGROUP BY cu.customer_id\nORDER BY total_amount DESC\nLIMIT 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"580fb94e12b34dd1c40001f0":[{"id":338670,"user_id":null,"body":"SELECT \n  j.job_title,\n  ROUND(AVG(j.salary),2)::FLOAT as average_salary,\n  COUNT(p.id) as total_people,\n  ROUND(SUM(j.salary),2)::FLOAT as total_salary\n  FROM people AS p\n    JOIN job AS j ON p.id = j.people_id \n  GROUP BY j.job_title\n  ORDER BY average_salary DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338671,"user_id":1890,"body":"select job_title\n     , round(avg(salary), 2)::float average_salary\n     , count(*) total_people\n     , round(sum(salary), 2)::float total_salary\n  from job\n group by job_title\n order by 2 desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338672,"user_id":null,"body":"SELECT \n  j.job_title,\n  CAST(ROUND(SUM(j.salary) \/ COUNT(p), 2) as FLOAT) as average_salary,\n  COUNT(p.id) as total_people,\n  CAST(ROUND(SUM(j.salary), 2) as FLOAT) as total_salary\nFROM people p\n  JOIN job j \n  ON p.id = j.people_id\n  GROUP BY j.job_title\n  ORDER BY average_salary DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338673,"user_id":944,"body":"SELECT \n  j.job_title,\n  ROUND(SUM(j.salary)\/COUNT(p)::numeric,2)::float as average_salary,\n  COUNT(p.id) as total_people,\n  ROUND(SUM(j.salary)::numeric,2)::float as total_salary\n  FROM people p JOIN job j on p.id=j.people_id\n  GROUP BY j.job_title\n  ORDER BY average_salary desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338674,"user_id":null,"body":"SELECT \n  j.job_title,\n  TO_CHAR(AVG(j.salary), 'FM999999999.00')::FLOAT average_salary,\n  COUNT(distinct j.people_id) total_people,\n  TO_CHAR(SUM(j.salary), 'FM999999999.00')::FLOAT total_salary\nFROM people p\nJOIN job j on j.people_id=p.id\nGROUP BY j.job_title\nORDER BY average_salary desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338675,"user_id":null,"body":"SELECT \n  job_title,\n  CAST(ROUND(SUM(salary) \/ COUNT(*), 2) AS float)\n    AS average_salary,\n  COUNT(*)\n    AS total_people,\n  CAST(ROUND(SUM(salary), 2) AS float)\n    AS total_salary\nFROM job\nGROUP BY job_title\nORDER BY average_salary DESC\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338676,"user_id":null,"body":"select\n  job_title,\n  round(avg(salary), 2)::float as average_salary,\n  count(p.id) as total_people,\n  round(sum(salary), 2)::float as total_salary\nfrom people p\njoin job j on p.id = j.people_id\ngroup by job_title\norder by average_salary desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338677,"user_id":null,"body":"SELECT \n  j.job_title as job_title,\n  cast(round(avg(j.salary),2) as float) as average_salary,\n  COUNT(p.id) as total_people,\n  cast(round(sum(j.salary),2) as float) as total_salary\n  FROM people p\n  inner JOIN job j on p.id = j.people_id\n  GROUP BY j.job_title\n  ORDER BY average_salary desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338678,"user_id":1246,"body":"SELECT \n  j.job_title,\n  ROUND(AVG(j.salary),2)::float as average_salary,\n  COUNT(p.id) as total_people,\n  ROUND(SUM(j.salary),2)::float as total_salary\n  FROM people p\n  JOIN job j ON j.people_id = p.id\n  GROUP BY j.job_title\n  ORDER BY average_salary DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338679,"user_id":null,"body":"SELECT\n  job_title,\n  round(SUM(salary) \/ COUNT(salary) * 100) \/ 100::real as average_salary,\n  COUNT(salary) as total_people,\n  round(SUM(salary) * 100) \/ 100::real as total_salary\nFROM job\nGROUP BY job_title\nORDER BY average_salary DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"580fe518cefeff16d00000c0":[{"id":338680,"user_id":null,"body":"CREATE FUNCTION increment(i integer) RETURNS integer\nAS 'select $1 + 1;'\nLANGUAGE sql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338681,"user_id":null,"body":"CREATE FUNCTION increment(@age INT) {\nreturns INT as\nBegin\n  return @age + 1;\nend;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338682,"user_id":277,"body":"CREATE OR REPLACE FUNCTION increment(i integer) RETURNS integer\nAS $$ BEGIN RETURN i + 1; END; $$\nLANGUAGE plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338683,"user_id":null,"body":"CREATE FUNCTION increment (IN age integer, OUT integer) \nAS 'SELECT age + 1'\nLANGUAGE SQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338684,"user_id":null,"body":"CREATE FUNCTION increment(int)\nRETURNS int+1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338685,"user_id":null,"body":"CREATE FUNCTiON increment(integer) RETURNS integer\nAS 'select $1 + 1'\nLANGUAGE SQL","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338686,"user_id":null,"body":"CREATE FUNCTION increment(i integer) RETURNS integer AS 'SELECT $1 +1;' LANGUAGE SQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338687,"user_id":null,"body":"create or replace function increment(number integer) returns integer as $$\n  select number + 1;\n$$ language sql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338688,"user_id":null,"body":"CREATE FUNCTION increment(a NUMERIC) \nRETURNS NUMERIC AS $$\nBEGIN\n RETURN a + 1;\nEND; $$\nLANGUAGE plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338689,"user_id":null,"body":"CREATE FUNCTION increment(i integer) RETURNS integer AS $$ BEGIN RETURN i + 1; END; $$ LANGUAGE plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5811010104adbba24b0002fe":[{"id":338690,"user_id":null,"body":"CREATE FUNCTION agecalculator(age DATE) RETURNS INTEGER AS $$\nBEGIN\n    return date_part('year', AGE(age));\nEND \n$$ LANGUAGE plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338691,"user_id":null,"body":"CREATE FUNCTION agecalculator(date) RETURNS integer\nAS $$ SELECT EXTRACT(YEAR FROM AGE($1))::int $$\nLANGUAGE SQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338692,"user_id":null,"body":"CREATE FUNCTION agecalculator(age DATE)\nRETURNS INT AS $$\nBEGIN\n  RETURN DATE_PART('YEAR', AGE(age) );\nEND; $$\nLANGUAGE plpgsql;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338693,"user_id":1562,"body":"create function agecalculator (date) returns integer\nas 'select EXTRACT(year from age($1))::integer;'\nlanguage sql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338694,"user_id":null,"body":"create function agecalculator(date)\nreturns numeric\nas $$\n  select trunc((current_date - $1) \/ 365.25)\n$$\nlanguage sql\nreturns null on null input","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338695,"user_id":null,"body":"CREATE FUNCTION agecalculator(age date)\nRETURNS INT AS $$\n  BEGIN\n  RETURN date_part('year', AGE(age));\n  END\n$$ LANGUAGE plpgsql","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338696,"user_id":null,"body":"CREATE FUNCTION agecalculator(_age date) RETURNS integer\n    LANGUAGE plpgsql\n    AS $$\n        BEGIN\n            RETURN extract(year from age(_age));\n        END;\n    $$;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338697,"user_id":206,"body":"create function agecalculator(date) returns integer\n  as 'select to_char(age(now(),$1),''FMYYY'')::int;'\n  language sql\n  immutable\n  returns null on null input","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338698,"user_id":null,"body":"create or replace function agecalculator(age date) returns integer as $$\n  select extract(year from age(age))::integer;\n$$ language sql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338699,"user_id":null,"body":"CREATE FUNCTION agecalculator (date)\nRETURNS integer AS $$\nBEGIN\n  RETURN date_part('year', age($1));\nEND;\n$$ LANGUAGE PLPGSQL","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58110da0009b4f7ef80000ad":[{"id":338700,"user_id":3134,"body":"SELECT SUM(age) AS age_sum \nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338701,"user_id":575,"body":"SELECT\n  SUM(age) age_sum\nFROM\n  people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338702,"user_id":15,"body":"select sum(age) as age_sum from people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338703,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT SUM(AGE) AS age_sum\nFROM PEOPLE","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338704,"user_id":null,"body":"SELECT sum(age) AS age_sum FROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338705,"user_id":null,"body":"SELECT SUM(Age) AS age_sum FROM People","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338706,"user_id":null,"body":"SELECT SUM(people.age) as age_sum FROM people;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338707,"user_id":null,"body":"SELECT SUM(age) AS Age_Sum  FROM People;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338708,"user_id":null,"body":"-- Create your SELECT statement he\n\nSELECT SUM(age) AS age_sum FROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338709,"user_id":null,"body":"SELECT SUM(age) age_sum from people; \n\n\n--Another Way:\n--   SELECT \n--     SUM(age) AS age_sum\n--   FROM people; \n\n\n-- Note:\n  -- The SUM() function returns the total sum of a numeric column. ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"581113dce10b531b1d0000bd":[{"id":338710,"user_id":null,"body":"SELECT \n      MIN(age) AS age_min,\n      MAX(age) AS age_max\nFROM\n    people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338711,"user_id":null,"body":"-- Create your SELECT statement here\n\nSELECT MIN(age) age_min, MAX(age) age_max FROM people;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338712,"user_id":null,"body":"SELECT MIN(age) age_min, MAX(age) age_max\nFrom people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338713,"user_id":2195,"body":"SELECT\n  min(age) AS age_min,\n  max(age) AS age_max\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338714,"user_id":944,"body":"select min(age) as age_min,max(age) as age_max from people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338715,"user_id":null,"body":"SELECT min(age) as age_min, max(age) as age_max FROM people;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338716,"user_id":null,"body":"SELECT MIN(age) as age_min, MAX(age) as age_max\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338717,"user_id":277,"body":"SELECT min(age) age_min\n      ,max(age) age_max\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338718,"user_id":null,"body":"-- Create your SELECT statement here\nselect min(age) age_min, max(age) age_max\nfrom people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338719,"user_id":null,"body":"-- Find min age and max age of table people\nselect min(age) as age_min, max(age) as age_max\nfrom people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58111670e10b53be31000108":[{"id":338720,"user_id":3134,"body":"SELECT DISTINCT age\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338721,"user_id":15,"body":"select distinct age from people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338722,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT distinct people.age \nFROM people;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338723,"user_id":null,"body":"SELECT DISTINCT age\nFROM people;\n-- Create your SELECT statement her","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338724,"user_id":null,"body":"SELECT DISTINCT Age from People","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338725,"user_id":null,"body":"Select Distinct\np.age\nFrom\npeople p;-- Create your SELECT statement here","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338726,"user_id":null,"body":"-- Create your SELECT statement here\\\nSELECT DISTINCT\nage\nFROM\npeople","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338727,"user_id":null,"body":"-- Create your SELECT statement here\u044b\n\nSELECT DISTINCT age from people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338728,"user_id":null,"body":"SELECT distinct age as age\n  FROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338729,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT DISTINCT(age) AS age\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5811199ae10b5341ed00010d":[{"id":338730,"user_id":944,"body":"select * from people\ngroup by id\nhaving age>42","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338731,"user_id":277,"body":"SELECT id\n      ,name\n      ,age\nFROM people\nGROUP BY id\nHAVING age > 42","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338732,"user_id":15,"body":"select id, name, age from people group by id having age>42","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338733,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT *\nFROM people\nGROUP BY people.id\nHAVING (people.age > 42);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338734,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT A.ID, A.NAME, A.AGE FROM (\nSELECT B.ID, B.NAME, B.AGE FROM PEOPLE B\n\nGROUP BY 1\nHAVING B.AGE>42\n\n) A","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338735,"user_id":null,"body":"select\n  t1.id,\n  t1.name,\n  t1.age\nfrom people t1\ngroup by t1.id, t1.name, t1.age\nhaving t1.age > 42","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338736,"user_id":null,"body":"select id,name,age\nfrom people\ngroup by id\nhaving age >= 42;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338737,"user_id":null,"body":"SELECT \np.id,\np.name,\np.age\nFROM people AS p\nGROUP BY p.id\nHAVING p.age > 42;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338738,"user_id":null,"body":"SELECT p.id, p.name, p.age\nFROM people p\nGROUP BY p.id\nHAVING age > 42","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338739,"user_id":null,"body":"SELECT\n\n\tid\n ,name\n ,age\n\n  FROM people p\n  GROUP BY id\n  HAVING age > 42","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58111f4ee10b5301a7000175":[{"id":338740,"user_id":null,"body":"SELECT\n  age,\n  COUNT(*) people_count\nFROM\n  people\nGROUP BY\n  age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338741,"user_id":2199,"body":"SELECT age, COUNT(name) AS people_count\nFROM people\nGROUP BY age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338742,"user_id":1375,"body":"SELECT age,\n       COUNT(id) AS people_count\nFROM people\nGROUP BY age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338743,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT age, COUNT(age) as people_count\nFROM people\nGROUP BY age;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338744,"user_id":3134,"body":"SELECT\n  age,\n  COUNT(*) AS people_count \nFROM people\nGROUP BY age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338745,"user_id":null,"body":"-- Create your SELECT statement here\nSelect p.age, count(p.age) as people_count \nfrom people p\ngroup by p.age;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338746,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT A.age, count(A.id) as people_count FROM \npeople A\nGROUP BY A.age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338747,"user_id":null,"body":"SELECT age, count(*) people_count FROM people GROUP BY age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338748,"user_id":null,"body":"Select age, COUNT(1) as people_count\nfrom people\nGroup by age","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338749,"user_id":null,"body":"SELECT\nage,\ncount(id) people_count\nfrom people \ngroup by 1-- Create your SELECT statement here","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58112f8004adbbdb500004fe":[{"id":338750,"user_id":null,"body":"SELECT 'US' as location, *\n  FROM ussales\n  WHERE price > 50\nUNION ALL\nSELECT 'EU' as location, *\n  FROM eusales\n  WHERE price > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338751,"user_id":null,"body":"select 'US' as Location, id, name, price, card_name, card_number, transaction_date\nfrom ussales\nwhere price > 50.00\nunion all\nselect 'EU' as Location, id, name, price, card_name, card_number, transaction_date\nfrom eusales\nwhere price > 50.00","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338752,"user_id":null,"body":"-- Create your SELECT statement here\nselect *\n  from (select 'US' as location,\n               id,\n               name,\n               price,\n               card_name,\n               card_number,\n               transaction_date\n          from ussales\n        union all\n        select 'EU' as location,\n               id,\n               name,\n               price,\n               card_name,\n               card_number,\n               transaction_date\n          from eusales\n       ) s\n where s.price > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338753,"user_id":null,"body":"SELECT 'US' AS location, *\nFROM ussales\nWHERE price>50\nUNION ALL SELECT 'EU', * FROM eusales\nWHERE price>50\nORDER BY location DESC, id ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338754,"user_id":null,"body":"  SELECT\n    'US' AS location\n    ,u.id\n    ,u.name\n    ,u.price\n    ,u.card_name\n    ,u.card_number\n    ,u.transaction_date\n  FROM\n    ussales u\n  WHERE\n    u.price > 50\nUNION ALL\n  SELECT\n    'EU' AS location\n    ,e.id\n    ,e.name\n    ,e.price\n    ,e.card_name\n    ,e.card_number\n    ,e.transaction_date\n  FROM\n    eusales e\n  WHERE\n    e.price > 50;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338755,"user_id":null,"body":"select 'US' as location, * from ussales\nwhere price > 50.00\nunion all\nselect 'EU', * from eusales\nwhere price > 50.00;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338756,"user_id":null,"body":"-- Create your SELECT statement here\nselect 'US' as \"location\",\n       us.id,\n       us.name,\n       us.price,\n       us.card_name,\n       us.card_number,\n       us.transaction_date\n  from ussales us\n where us.price > 50\n union all\nselect 'EU' as \"location\",\n       eu.id,\n       eu.name,\n       eu.price,\n       eu.card_name,\n       eu.card_number,\n       eu.transaction_date\n  from eusales eu\n where eu.price > 50\n order by 1 desc;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338757,"user_id":null,"body":"SELECT * FROM \n(SELECT\n  'US' AS location\n ,u.*\n  FROM ussales u\n UNION ALL\nSELECT\n\t'EU' AS location\n ,e.*\n  FROM eusales e)\noq WHERE price > 50.00","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338758,"user_id":null,"body":"SELECT 'US' AS location, * FROM ussales\nWHERE price >50\nUNION ALL\nSELECT 'EU' AS location, * FROM eusales\nWHERE price > 50\nORDER BY location DESC, id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338759,"user_id":null,"body":"SELECT 'US' AS location,\nid, name, price, card_name, card_number, transaction_date\nFROM ussales\nWHERE price>50.00\nUNION ALL\nSELECT 'EU' AS location,\nid, name, price, card_name, card_number, transaction_date\nFROM eusales\nWHERE price>50.00\nORDER BY location DESC, id, price DESC;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5811315e04adbbdb5000050e":[{"id":338760,"user_id":null,"body":"-- Create your SELECT statement here\nselect \n  id, \n  COALESCE(NULLIF(name, ''), '[product name not found]') as name,\n  price,\n  COALESCE(NULLIF(card_name, ''), '[card name not found]') as card_name,\n  card_number,\n  transaction_date\nfrom eusales\nwhere\nprice > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338761,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT \n  id,\n  COALESCE(NULLIF(name, ''), '[product name not found]') AS name,\n  price,\n  COALESCE(NULLIF(card_name, ''), '[card name not found]') AS card_name,\n  card_number,\n  transaction_date \n  FROM eusales\n  WHERE price > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338762,"user_id":null,"body":"SELECT id,\n       COALESCE(NULLIF(\"name\",''),'[product name not found]') as \"name\",\n       price,\n       COALESCE(NULLIF(\"card_name\",''), '[card name not found]') as card_name,\n       card_number,\n       transaction_date\nFROM eusales\nWHERE price IS NOT NULL and price>50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338763,"user_id":null,"body":"select s.id,\n       coalesce(nullif(s.name, ''), '[product name not found]') as name,\n       s.price,\n       coalesce(nullif(s.card_name, ''), '[card name not found]') as card_name,\n       s.card_number,\n       s.transaction_date\n  from eusales s\n where s.price > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338764,"user_id":null,"body":"SELECT id, COALESCE(NULLIF(name, ''), '[product name not found]') as name, price,  \n        COALESCE(NULLIF(card_name, ''), '[card name not found]') as card_name, card_number, transaction_date\nFROM eusales\nWHERE price > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338765,"user_id":null,"body":"SELECT\n\tid,\n  COALESCE(NULLIF(name, ''), '[product name not found]') as name,\n  price,\n  COALESCE(NULLIF(card_name, ''), '[card name not found]') as card_name,\n  card_number,\n  transaction_date \nFROM\n\teusales\nWHERE\n\tprice IS NOT NULL AND price > 50.0;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338766,"user_id":null,"body":"SELECT\n  id,\n  CASE WHEN COALESCE( TRIM(name), '') = ''\n  THEN '[product name not found]'\n  ELSE name END,\n  price,\n  CASE WHEN NULLIF( TRIM(card_name), '') IS NULL\n  THEN '[card name not found]'\n  ELSE card_name END,\n  card_number,\n  transaction_date\nFROM\n  eusales\nWHERE\n  price > 50;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338767,"user_id":null,"body":"SELECT\n  id,\n  COALESCE(NULLIF(name, ''), '[product name not found]') AS name,\n  COALESCE(NULLIF(price, 0), 1)  AS price,\n  COALESCE(NULLIF(card_name, ''), '[card name not found]') AS card_name,\n  card_number,\n  transaction_date\nFROM eusales\nWHERE price > 50;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338768,"user_id":null,"body":" select a.id as id,\n   COALESCE(nullif(a.name,''),'[product name not found]') as name,\n   a.price as price,\n   COALESCE(nullif(a.card_name,''),'[card name not found]') as card_name  ,\n   a.card_number as card_number,\n   a.transaction_date as transaction_date\n from eusales a\n  where (nullif(a.price,0) > 50)\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338769,"user_id":null,"body":"select\n  id,\n  coalesce(nullif(name, ''), '[product name not found]') as name,\n  price,\n  coalesce(nullif(card_name, ''), '[card name not found]') as card_name,\n  card_number,\n  transaction_date\nfrom eusales\nwhere\n  price > 50","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58113a64e10b53ec36000293":[{"id":338770,"user_id":null,"body":"SELECT d.* \nFROM departments d\nWHERE EXISTS (SELECT 1 FROM sales s WHERE s.price>98 and s.department_id=d.id);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338771,"user_id":2199,"body":"SELECT D.id, D.name\nFROM departments AS D\nWHERE EXISTS \n  (SELECT * \n   FROM sales AS S\n   WHERE D.id = S.department_id AND S.price > 98)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338772,"user_id":null,"body":"SELECT \n  d.id, \n  d.name\nFROM departments d\nWHERE EXISTS (\n  SELECT \n    s.id \n  FROM sales s \n  WHERE s.department_id = d.id\n  AND s.price > 98\n)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338773,"user_id":null,"body":"SELECT id, name FROM departments d WHERE EXISTS (SELECT * FROM sales WHERE price > 98 AND department_id = d.id)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338774,"user_id":null,"body":"select d.id, d.name\nfrom departments d\nwhere exists (select 1 from sales s where s.department_id = d.id\n              and s.price > 98.00)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338775,"user_id":null,"body":"select a.*\nfrom departments a\nwhere id\nin(select department_id from sales where price>98 and name != 'EXISTS')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338776,"user_id":null,"body":"select d.* from departments d\nwhere exists(select s.* from sales s where d.id = s.department_id and price > '98.00')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338777,"user_id":null,"body":"-- !!!Understand:\n\n---- There are 2 tables Titled.\n\n------ 1. \"departments\", which lists the department id (as \"id\") and the \"name\" of\n------ each unique department\n\n------ 2. \"sales\". Which has six columns. \"department_id\" correlates to the \"id\"\n------ of the \"departments\" table. The other column from sales we care about is\n------ titled \"price\"\n\n---- Using these two tables, return a new table containing the \"id\" and \n---- department \"name\" from the \"departments\" table, where there was a sale\n---- whose price was GREATER THAN $98.00\n---- * Must use EXISTS command\n\n-- !!!Plan:\n\n---- SELECT the \"id\" and \"name\" \n---- FROM \"departments\"\n---- WHERE EXISTS\n------ SELCT \"id\" and \"name\"\n------ FROM \"sales\"\n------ WHERE the \"sales.department_id\" and \"departments.id\" are the same(equal)\n------ AND the \"sales.price\" is GREATER than 98.00\n\n\nSELECT id, name\n  FROM departments\n WHERE EXISTS\n  (SELECT *\n     FROM sales\n    WHERE departments.id = sales.department_id\n      AND sales.price > 98.00);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338778,"user_id":null,"body":"-- !!!Understand:\n\n---- There are 2 tables Titled.\n------ 1. \"departments\", which lists the department id (as \"id\") and the \"name\" of\n------ each unique department\n\n------ 2. \"sales\". Which has six columns. \"department_id\" correlates to the \"id\"\n------ of the \"departments\" table. The other column from sales we care about is\n------ titled \"price\"\n\n---- Using these two tables, return a new table containing the \"id\" and \n---- department \"name\" from the \"departments\" table, where there was a sale\n---- whose price was GREATER THAN $98.00\n\n---- * Must use EXISTS command\n\n-- !!!Plan:\n\n---- SELECT the \"id\" and \"name\" \n---- FROM \"departments\"\n---- WHERE EXISTS\n------ SELCT \"id\" and \"name\"\n------ FROM \"sales\"\n------ WHERE the \"sales.department_id\" and \"departments.id\" are the same(equal)\n------ AND the \"sales.price\" is GREATER than 98.00\n\n\nSELECT id, name\n  FROM departments\n WHERE EXISTS\n  (SELECT id, name\n     FROM sales\n    WHERE departments.id = sales.department_id\n      AND sales.price > 98.00);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338779,"user_id":null,"body":"select id, name\nfrom departments\nwhere exists\n  (select sales.department_id \n  from sales\n  where sales.department_id = departments.id\n  and price > 98.00)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58113c03009b4fcc66000d29":[{"id":338780,"user_id":225,"body":"SELECT *\n  FROM departments d\n  WHERE d.id IN (\n      SELECT s.department_id\n        FROM sales s\n          WHERE s.price > 98.00\n  )","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338781,"user_id":null,"body":"select id, name from departments where id in (select department_id from sales where price > 98);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338782,"user_id":null,"body":"SELECT *\nFROM departments\nWHERE id IN \n  (SELECT department_id FROM sales WHERE price > 98)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338783,"user_id":null,"body":"select * from departments\nwhere id in (select department_id from sales where price > 98)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338784,"user_id":null,"body":"-- Create your SELECT statement here\nselect dept.id, dept.name\nfrom departments as dept\nwhere dept.id in (select department_id\n                      from sales\n                      where price > 98.00)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338785,"user_id":null,"body":"SELECT d.id, \n       d.NAME \nFROM   departments d \nWHERE  d.id IN (SELECT s.department_id \n                FROM   sales s \n                WHERE  s.price > 98.00) ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338786,"user_id":null,"body":"SELECT id, name FROM departments WHERE id IN (SELECT department_id FROM sales WHERE price >= 98)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338787,"user_id":null,"body":"SELECT id, name\nFROM departments\nWHERE id IN\n(SELECT department_id\nFROM sales\nWHERE price > 98);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338788,"user_id":null,"body":"SELECT id, name FROM departments WHERE id IN (SELECT department_id FROM sales WHERE price > 98.00);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338789,"user_id":null,"body":"select d.id, d.name from departments d\nwhere d.id in (select s.department_id from sales s\n               where s.price > 98\n               group by s.department_id)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5811501c2d35672d4f000146":[{"id":338790,"user_id":null,"body":"WITH special_sales AS\n  (select * from sales where price > 90)\n  \n  select id, name from departments\n  \nWHERE id IN (SELECT department_id FROM special_sales)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338791,"user_id":3422,"body":"WITH special_sales AS \n  (\n    SELECT * \n    FROM sales \n    WHERE price > 90.00\n  )\nSELECT * \nFROM departments\nWHERE id IN (SELECT department_id\n             FROM special_sales)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338792,"user_id":null,"body":"-- this is so tortured! my soul burns with anger at the unnecessary WITH and IN instead of just joining like a sane person\nwith special_sales as (select * from sales where price > 90)\nselect id,name from departments where id in (select department_id from special_sales)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338793,"user_id":null,"body":"-- Create your SELECT statement here\nWITH special_sales (id, name)  \nAS  \n-- Define the CTE query.  \n(  \n    SELECT d.id, d.name\n    FROM sales s\n    INNER JOIN departments d\n    ON s.department_id = d.id\n    WHERE s.price > 90  \n)  \n-- Define the outer query referencing the CTE name.  \nSELECT DISTINCT id, name\nFROM special_sales\nORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338794,"user_id":null,"body":"WITH special_sales AS (SELECT * FROM sales WHERE price > 90)\nSELECT * FROM departments WHERE id IN (SELECT department_id FROM special_sales);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338795,"user_id":null,"body":"WITH SPECIAL_SALES AS (\n  SELECT d.id, d.name, s.price \n  FROM departments d \n  JOIN sales s ON d.id=s.department_id)\nSELECT DISTINCT id, name \nFROM SPECIAL_SALES \nWHERE price>90 \nORDER BY id   ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338796,"user_id":null,"body":"WITH special_sales AS \n  (\n    SELECT \n      s.*\n    FROM sales AS s\n    WHERE s.price > 90.0\n  )\n  \nSELECT \n  d.id,\n  d.name\nFROM departments AS d\nWHERE d.id IN (SELECT s.department_id FROM special_sales AS s);\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338797,"user_id":2525,"body":"WITH special_sales AS (SELECT  *  FROM sales  WHERE price>90.00)\nSELECT\n    id,\n    name\nFROM departments WHERE id IN (SELECT department_id FROM special_sales)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338798,"user_id":null,"body":"-- Create a temporary table special_sales using WITH, this temp table will filter values above a price\nWith special_sales as (select * from sales where price > 90)\n-- Select data in departments but if id in special_sales s.department_id\nSelect d.id, d.name from departments d where d.id in (select s.department_id from special_sales s)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338799,"user_id":null,"body":"WITH special_sales (id) AS\n      (SELECT DISTINCT department_id\n      FROM sales\n      WHERE price > 90.00)\nSELECT d.id, d.name\nFROM departments d, special_sales s\nWHERE d.id = s.id\nORDER BY d.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5811527d9d278b242f000006":[{"id":338800,"user_id":null,"body":"CREATE VIEW members_approved_for_voucher AS\nSELECT m.id, m.name, m.email, SUM(p.price) AS total_spending\nFROM members m\nINNER JOIN sales s ON s.member_id = m.id\nINNER JOIN products p ON p.id = s.product_id\nWHERE s.department_id IN (\n  SELECT s2.department_id\n  FROM sales s2\n  INNER JOIN products p2 ON p2.id = s2.product_id\n  GROUP BY s2.department_id\n  HAVING SUM(p2.price) > 10000\n)\nGROUP BY m.id, m.name, m.email\nHAVING SUM(p.price) > 1000\nORDER BY m.id;\n\nSELECT * FROM members_approved_for_voucher;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338801,"user_id":1562,"body":"create view members_approved_for_voucher (id, name, email, total_spending) as\n  with target_departments (id)\n  as\n  (\n      select d.id\n      from departments as d\n          inner join sales as s\n              on s.department_id = d.id\n          inner join products as p\n              on p.id = s.product_id\n      group by d.id\n      having SUM(p.price) > 10000\n  )\n  select m.id, m.name, m.email, SUM(p.price)\n  from members as m\n      inner join sales as s\n          on s.member_id = m.id\n      inner join target_departments as td\n          on td.id = s.department_id\n      inner join products as p\n          on p.id = s.product_id\n  group by m.id, m.name, m.email\n  having SUM(p.price) > 1000;\n\nselect id, name, email, total_spending\nfrom members_approved_for_voucher\norder by id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338802,"user_id":2199,"body":"CREATE VIEW members_approved_for_voucher AS\n  SELECT M.id, M.name, M.email, SUM(P.price) AS total_spending\n  FROM members AS M, sales AS S, products AS P, departments as D\n  WHERE M.id = S.member_id AND P.id = S.product_id AND D.id = S.department_id\n  AND \n  (SELECT SUM(products.price) \n   FROM products, sales\n   WHERE products.id=sales.product_id AND D.id=sales.department_id) > 10000\n  GROUP BY M.id\n  HAVING total_spending > 1000;\n  \nSELECT *\nFROM members_approved_for_voucher","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338803,"user_id":null,"body":"--CREATE VIEW members_approved_for_voucher AS\nSELECT \nsq.id, sq.name, sq.email, SUM(sq.price) AS total_spending\nFROM\n(\n  SELECT \n  m.id, m.name, m.email, p.price,\n  SUM(p.price) OVER (PARTITION BY d.id) AS department_total,\n  SUM(p.price) OVER (PARTITION BY d.id, m.id) AS total_spending\n  FROM sales s \n  JOIN departments d ON s.department_id = d.id\n  JOIN products p ON s.product_id = p.id\n  JOIN members m ON s.member_id = m.id\n) AS sq\nWHERE sq.department_total > 10000 \nGROUP BY sq.id, sq.name, sq.email\nHAVING SUM(sq.price) > 1000\nORDER BY sq.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338804,"user_id":null,"body":"CREATE VIEW members_approved_for_voucher AS\n\n  SELECT members.id, members.name, members.email, sum(price) AS total_spending\n  FROM sales INNER JOIN members ON sales.member_id = members.id\n             INNER JOIN products ON sales.product_id = products.id\n  WHERE department_id IN (\n    SELECT department_id\n    FROM sales INNER JOIN products ON sales.product_id = products.id\n    GROUP BY department_id\n    HAVING sum(price) > 10000\n    ORDER BY department_id\n    )\n  GROUP BY members.id, members.name, members.email\n  HAVING sum(price) > 1000\n  ORDER BY members.id;\n  \nSELECT * FROM members_approved_for_voucher","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338805,"user_id":null,"body":"CREATE OR REPLACE VIEW members_approved_for_voucher AS\n  WITH me AS (\n    SELECT s.department_id, SUM(p.price) FROM sales s\n    JOIN products p ON s.product_id = p.id\n    GROUP BY s.department_id\n    HAVING SUM(p.price) > 10000\n  )\n\nSELECT s.member_id AS id, m.name, m.email, SUM(p.price) AS total_spending FROM sales s\nLEFT JOIN products p ON s.product_id = p.id\nLEFT JOIN members m ON s.member_id = m.id\nWHERE s.department_id IN (SELECT department_id FROM me)\nGROUP BY (s.member_id, m.name, m.email)\nHAVING SUM(p.price) > 1000\nORDER BY s.member_id ASC;\n  \nSELECT id, name, email, total_spending FROM members_approved_for_voucher","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338806,"user_id":null,"body":"create view members_approved_for_voucher as (\n  with filtered_departments as (\n    select department_id from sales \n    join products on sales.product_id = products.id \n    group by department_id having sum(products.price) > 10000  \n  ),\n  filtered_sales as (\n    select member_id, products.price \n    from sales \n    join products on product_id = products.id \n    where department_id in (select * from filtered_departments)\n  )\n  select id, name, email, sum(price) as total_spending from members \n  join filtered_sales on id = filtered_sales.member_id group by id, name, email \n  having sum(price) > 1000 order by id\n);\n  \nselect * from members_approved_for_voucher;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338807,"user_id":null,"body":"CREATE VIEW members_approved_for_voucher\nAS\n    SELECT s.member_id id,\n                   m.name,\n                   email, \n                   SUM(price) total_spending\n    FROM sales s\n          JOIN members m\n              ON s.member_id = m.id\n          JOIN products p\n              ON p.id = s.product_id\n    WHERE department_id\n    IN\n        (SELECT department_id \n        FROM sales\n        JOIN products\n        ON products.id = sales.product_id\n        GROUP BY department_id\n        having SUM(price) >10000)\n    GROUP BY s.member_id, m.name, email\n    HAVING SUM(price) > 1000\n    ORDER BY id;\n    \nSELECT * FROM members_approved_for_voucher;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338808,"user_id":null,"body":"CREATE VIEW members_approved_for_voucher AS (\n  SELECT m.id, m.name, m.email, SUM(p.price) AS total_spending\n  FROM members AS m JOIN sales s ON s.member_id = m.id\n  JOIN departments d ON d.id = s.department_id\n  JOIN products p ON p.id = s.product_id\n  WHERE d.id IN (SELECT d2.id FROM departments d2 \n                  JOIN sales s2 ON s2.department_id = d2.id\n                  JOIN products p2 ON p2.id = s2.product_id\n                  GROUP BY d2.id\n                  HAVING SUM(p2.price) > 10000)\n  GROUP BY m.id, m.name, m.email\n  HAVING SUM(p.price) > 1000\n  ORDER BY m.id\n);\n\nSELECT * FROM members_approved_for_voucher","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338809,"user_id":null,"body":"\nCREATE View members_approved_for_voucher\nAS\nSELECT m.id\n      ,m.name \n      ,m.number \n      ,m.email\n      ,m.city\n      ,m.street_name\n      ,m.street_address\n      ,p.name ProductName\n      ,p.price\n      ,d.name Department\nFROM members m\n  LEFT JOIN sales s ON m.id = s.member_id\n  LEFT JOIN departments d ON s.department_id = d.id\n  LEFT JOIN products p on p.id = s.product_id;\n\nSELECT id\n      ,Name\n      ,email\n      ,sum(price) total_spending\nFROM members_approved_for_voucher\nWHERE department IN (SELECT department\n                      FROM members_approved_for_voucher m\n                      Group By department\n                      Having SUM(price) > 10000.00)\nGROUP BY id\n        ,Name\n        ,email\nHAVING sum(price) > 1000.00\nORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5811597e9d278beb04000038":[{"id":338810,"user_id":1519,"body":"SELECT\n  date_trunc('day', created_at) as day,\n  description,\n  COUNT(*) as count \n\nFROM events\nWHERE name = 'trained'\nGROUP BY day, description\nORDER BY day ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338811,"user_id":null,"body":"SELECT \n  created_at::DATE \"day\", description, count(*)\n  FROM events\n  WHERE name = 'trained'\n  GROUP BY 1,2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338812,"user_id":null,"body":"select date(created_at) as day,\n       description, \n       count(created_at)\nfrom events \nwhere name = 'trained' \ngroup by day, description\norder by day;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338813,"user_id":null,"body":"SELECT\n  date_trunc('day', created_at) \"day\",\n  description,\n  count(id) count\nFROM events\nWHERE name = 'trained'\nGROUP BY day, description","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338814,"user_id":null,"body":"SELECT created_at::date AS day, description, count(*)\nFROM events\nWHERE name = 'trained'\nGROUP BY 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338815,"user_id":null,"body":"SELECT created_at::timestamp::date as day, description, count(description)\nFROM events\nWHERE name LIKE 'trained'\nGROUP BY day, description\nORDER BY day","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338816,"user_id":null,"body":"SELECT cast(created_at as date) as day, description, count(*)\nFROM events\nWHERE name = 'trained'\nGROUP BY cast(created_at as date), description","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338817,"user_id":null,"body":"SELECT DATE(events.created_at) AS day, events.description, COUNT(events.id) AS count\nFROM events\nWHERE events.name = 'trained'\nGROUP BY day, events.description\nORDER BY day ASC, events.description ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338818,"user_id":1890,"body":"select to_char(created_at, 'YYYY-MM-DD')::date as day\n     , description\n     , count(*)\n  from events\n where name = 'trained'\n group by 1, 2\n order by 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338819,"user_id":null,"body":"SELECT DATE (created_at) AS day, description,\nCOUNT(name) AS count\nFROM events\nWHERE name LIKE 'trained'\nGROUP BY CAST(created_at AS DATE),description;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58126aa90ea99769e7000119":[{"id":338820,"user_id":null,"body":"CREATE EXTENSION tablefunc;\n    \nSELECT * \nFROM  crosstab(\n      'SELECT p.name, detail, COUNT(d.id)\n      FROM products p\n      JOIN details d\n      ON p.id = d.product_id\n      GROUP BY p.name, d.detail\n      ORDER BY 1,2')\nAS ct (name text, bad bigint, good bigint, ok bigint)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338821,"user_id":null,"body":"create extension tablefunc;\n\nselect *\nfrom crosstab(\n  'select p.name, d.detail, count(1)::int as value\n  from products p\n    inner join details d\n      on p.id = d.product_id\n  group by 1, 2\n  order by 1, 2',\n  $$values ('good'), ('ok'), ('bad')$$)\n  as (name text, good int, ok int, bad int)\norder by name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338822,"user_id":null,"body":"create extension tablefunc;\n\nselect *\nfrom crosstab('\n  select\n    name,\n    detail,\n    count(d.id)\n  from products p\n  join details d on p.id = d.product_id\n  group by name, detail\n  order by name',\n'values (''good''), (''ok''), (''bad'')')\nas (\n  name text,\n  good int,\n  ok int,\n  bad int\n)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338823,"user_id":null,"body":"CREATE EXTENSION tablefunc;\n\n-- Create your CROSSTAB statement here\nSELECT name, good, ok, bad\nFROM crosstab('\n  SELECT p.name, d.detail, COUNT(1)\n  FROM details AS d JOIN products AS p\n    ON d.product_id = p.id\n  GROUP BY p.name, d.detail\n  ORDER BY p.name, d.detail\n  ')\nAS ct(name text, bad bigint, good bigint, ok bigint);\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338824,"user_id":225,"body":"CREATE EXTENSION tablefunc;\n\nCREATE TEMP TABLE product_scores AS (\n  SELECT p.name, d.detail, COUNT(d.detail) as total\n    FROM products p\n      JOIN details d ON p.id = d.product_id\n    GROUP BY p.name,d.detail\n    ORDER BY p.name\n);\n\nSELECT * FROM CROSSTAB(\n  'SELECT name, detail, total\n    FROM product_scores p\n    ORDER BY 1,2',\n  $$VALUES ('good'::text), ('ok'), ('bad')$$)\nAS ct (\"name\" text, \"good\" int, \"ok\" int, \"bad\" int);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338825,"user_id":null,"body":"CREATE EXTENSION tablefunc;\nselect * from CROSSTAB(\n  'select\n      name, detail, count(p.id)\n    from\n      products p\n      inner join details d on p.id = d.product_id\n    group by\n      name, detail\n    order by\n      1, 2',\n  'values (''good''), (''ok''), (''bad'')'\n) as a (name text, good int, ok int, bad int)\norder by name\n    \n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338826,"user_id":null,"body":"CREATE EXTENSION tablefunc;\n\nSELECT * \nFROM crosstab(\n      'SELECT p.name, d.detail, count(d.detail)::int\n       FROM products p JOIN details d\n       ON p.id = d.product_id\n       GROUP BY p.name, d.detail\n       ORDER BY 1, 2'\n    ) AS ct (\"name\" text, \"bad\" int, \"good\" int, \"ok\" int);\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338827,"user_id":null,"body":"CREATE EXTENSION tablefunc;\n\nSELECT\n    ct.name,\n    ct.good,\n    ct.ok,\n    ct.bad\nFROM crosstab($$\n        SELECT\n            p.name,\n            d.detail,\n            count(d.detail)\n        FROM products p JOIN details d\n            ON p.id = d.product_id\n        GROUP BY p.name, d.detail\n        ORDER BY p.name\n    $$, $$\n        SELECT\n            d.detail\n        FROM details d\n        GROUP BY d.detail\n$$) AS ct(name text, ok integer, good integer, bad integer)\nORDER BY name;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338828,"user_id":null,"body":"CREATE EXTENSION tablefunc;\n\n--select * from crosstab('select d.id,d.detail,p.name from details d inner join products p on d.product_id=p.id order by name') as ct(rowid int,name text,good text, ok text, bad text)-- Create your CROSSTAB statement here\n\n--select d.id,p.name,d.detail from details d inner join products p on d.product_id=p.id\n\nselect p.name,count(detail)filter (where detail='good') as good,count(detail)filter (where detail='ok') as ok,count(detail)filter (where detail='bad') as bad from details d inner join products p on d.product_id=p.id group by name order by name\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338829,"user_id":null,"body":"CREATE EXTENSION tablefunc;\n\nSELECT * FROM\nCROSSTAB(\n  'SELECT name, detail, COUNT(*)\n  FROM products p\n  JOIN details d ON d.product_id = p.id\n  GROUP BY 1, 2\n  ORDER BY 1'\n) AS ct (\n  name text, bad bigint, good bigint, ok bigint\n)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"581283eb0a5fb13e06000020":[{"id":338830,"user_id":277,"body":"SELECT 'hello world!' as \"Greeting\"","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338831,"user_id":null,"body":"-- write your select statement to return hello world\n\nCREATE TABLE tbl(Greeting text);\nINSERT INTO tbl values(\"hello world!\");\nSELECT * FROM tbl;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338832,"user_id":15,"body":"select \"hello world!\" as Greeting","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338833,"user_id":null,"body":"-- write your select statement to return hello world\nSELECT 'hello world!' Greeting ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338834,"user_id":1286,"body":"-- write your select statement to return hello world\nCREATE TABLE words\n(\nGreeting varchar(255)\n);\n\nINSERT INTO words (Greeting) VALUES ('hello world!');\n\nSELECT * FROM words;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338835,"user_id":null,"body":"select 'hello world!' Greeting;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338836,"user_id":null,"body":"-- write your select statement to return hello w\n\nselect 'hello world!' as \"Greeting\";","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338837,"user_id":null,"body":"SELECT 'hello world!' AS \"Greeting\"\n-- \"\" around column name to name identifier without changing its case","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338838,"user_id":2371,"body":"CREATE TABLE codewars (\n  Greeting varchar(50) NOT NULL\n);\n\nINSERT INTO codewars VALUES ('hello world!');\nSELECT * FROM codewars WHERE Greeting = 'hello world!';","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338839,"user_id":null,"body":"CREATE FUNCTION greet() RETURNS text\n  AS $$\n    BEGIN\n      RETURN 'hello world!';\n    END\n  $$\nLANGUAGE plpgsql;\n\nSELECT greet() AS \"Greeting\"","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5812a2a2492760dfca000450":[{"id":338840,"user_id":1375,"body":"WITH RECURSIVE employee_levels(id, first_name, last_name, manager_id, level) AS (\n    SELECT e.*, 1\n    FROM employees e\n    WHERE e.manager_id IS NULL\n  UNION ALL\n    SELECT e.*, el.level + 1\n    FROM employees e, employee_levels el \n    WHERE e.manager_id = el.id\n)\nSELECT *\nFROM employee_levels el\nORDER BY el.level","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338841,"user_id":1024,"body":"WITH RECURSIVE employee_levels  AS (\n     SELECT 1 AS level, id, first_name, last_name, manager_id\n     FROM employees\n     WHERE manager_id IS NULL\n   \n     UNION\n   \n     SELECT level + 1 AS level, e.id, e.first_name, e.last_name, e.manager_id\n     FROM employees AS e\n     INNER JOIN employee_levels AS eL\n       ON eL.id = e.manager_id\n) \nSELECT * FROM employee_levels;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338842,"user_id":53,"body":"WITH RECURSIVE EMPLOYEE_LEVELS AS (\n\tSELECT\n    1 as level,\n\t\te.id,\n    e.first_name,\n    e.last_name,\n\t\te.manager_id\n\tFROM\n\t\temployees e\n\tWHERE\n\t\te.manager_id is null\n\tUNION\n\t\tSELECT\n\t\t\ts.level + 1,\n\t\t\te.id,\n\t\t\te.first_name,\n      e.last_name,\n      e.manager_id\n\t\tFROM\n\t\t\temployees e\n\t\tINNER JOIN EMPLOYEE_LEVELS s ON s.id = e.manager_id\n) SELECT\n\t*\nFROM\n\tEMPLOYEE_LEVELS;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338843,"user_id":null,"body":"WITH RECURSIVE employee_levels AS (\n  SELECT \n    1 AS level,\n    employees.id,\n    employees.first_name,\n    employees.last_name,\n    employees.manager_id\n  FROM employees\n  WHERE manager_id IS NULL\n  UNION ALL\n  SELECT \n    (employee_levels.level + 1) AS level,\n    employees.id,\n    employees.first_name,\n    employees.last_name,\n    employees.manager_id\n  FROM employees\n  INNER JOIN employee_levels ON employee_levels.id = employees.manager_id\n)\nSELECT * FROM employee_levels\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338844,"user_id":null,"body":"-- -- with recursive \n-- select 1 as level, * from employees where manager_id is null\n\nwith recursive employee_levels as (\n  select 1 as level, * from employees where manager_id is null\n  union all\n  select em.level + 1 as level, e.* from employee_levels em inner join employees e on em.id=e.manager_id\n)\nselect * from employee_levels","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338845,"user_id":null,"body":"WITH RECURSIVE employee_levels(id, level) AS (\n  SELECT id, 1 AS level\n  FROM employees\n  WHERE manager_id IS NULL\nUNION ALL\n  SELECT employees.id, level + 1\n  FROM employee_levels\n        JOIN employees ON employees.manager_id = employee_levels.id\n)\nSELECT level,\n       id,\n       first_name,\n       last_name,\n       manager_id\nFROM employees\n      NATURAL JOIN employee_levels","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338846,"user_id":null,"body":"WITH RECURSIVE employee_levels(\"level\", \"id\", first_name, last_name, manager_id) AS (\n  SELECT 1 AS \"level\",\n         \"id\",\n         first_name,\n         last_name,\n         manager_id\n    FROM employees\n   WHERE manager_id IS NULL\n  \n   UNION ALL\n   \n  SELECT b.\"level\" + 1 AS \"level\",\n         a.id,\n         a.first_name,\n         a.last_name,\n         a.manager_id\n    FROM employees a\n         INNER JOIN employee_levels b\n         ON a.manager_id = b.id\n)\n\nSELECT \"level\",\n       \"id\",\n       first_name,\n       last_name,\n       manager_id\n  FROM employee_levels\n ORDER BY \"level\", \"id\" ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338847,"user_id":null,"body":"WITH RECURSIVE employee_levels(id, manager_id, level) as (\n    SELECT id, manager_id, 1\n    FROM employees\n    WHERE manager_id IS NULL\n    \n    UNION ALL\n    \n    SELECT e.id, e.manager_id, l.level + 1\n    FROM employee_levels l,employees AS e \n    WHERE e.manager_id = l.id\n)\nSELECT\n    l.level,\n    e.id,\n    e.first_name,\n    e.last_name,\n    e.manager_id\nFROM employees e\nLEFT JOIN employee_levels l ON l.id = e.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338848,"user_id":null,"body":"-- Create your SELECT statement here\nwith recursive EMPLOYEE_LEVELS(level, id, first_name, last_name, manager_id) as (\n    select 1, e.id, e.first_name, e.last_name, e.manager_id\n    from employees e\n    where e.manager_id is null\n  union all\n    select h.level+1, e.id, e.first_name, e.last_name, e.manager_id\n    from employees e , EMPLOYEE_LEVELS h \n    where e.manager_id = h.id\n)\n\nselect * from EMPLOYEE_LEVELS\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338849,"user_id":null,"body":"with recursive employee_levels(level, id,\tfirst_name,\tlast_name,\tmanager_id) as (\n  select \n    1 as level, \n    e.id,\n    e.first_name,\n    e.last_name,\n    e.manager_id\n  from employees e\n  where e.manager_id is NULL  \n  union all\n  select \n    el.level + 1 as level, \n    e.id,\n    e.first_name,\n    e.last_name,\n    e.manager_id\n  from employee_levels el\n  join employees e on e.manager_id = el.id\n)\nselect * from employee_levels","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58164ddf890632ce00000220":[{"id":338850,"user_id":1169,"body":"select age, count(*) as total_people\nfrom people\ngroup by age\nhaving count(*) >= 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338851,"user_id":null,"body":"SELECT age AS age,\n  count(id) AS total_people\nFROM people\nGROUP BY age\nHAVING count(id) >= 10;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338852,"user_id":2254,"body":"SELECT age, COUNT(*) total_people\n  FROM people\n GROUP BY age\nHAVING COUNT(*) > 9","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338853,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT age, count(id) AS total_people\nFROM people\nGROUP BY age\nHAVING count(id) >= 10\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338854,"user_id":null,"body":"SELECT \n  COUNT(1) AS total_people\n  ,age \nFROM people \nGROUP BY age\nHAVING count(1) > 9","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338855,"user_id":null,"body":"SELECT p.age, COUNT(p.age) AS total_people\nFROM people p\nGROUP BY p.age\nHAVING COUNT(p.age) >= 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338856,"user_id":null,"body":"SELECT age, COUNT(age) total_people\nFROM people\nGROUP BY age\nHAVING COUNT(age) >= 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338857,"user_id":null,"body":"SELECT AGE, COUNT(*) TOTAL_PEOPLE\nFROM PEOPLE\nGROUP BY AGE\nHAVING COUNT(*)>=10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338858,"user_id":null,"body":"select age, count(id) as total_people from people group by age having count(id) >= 10;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338859,"user_id":null,"body":"-- Create your SELECT statement here\n\n  SELECT age, COUNT(id) AS \"total_people\"\n  FROM people\n  GROUP BY age\n  HAVING COUNT(id) >= 10","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"581676828906324b8b00059e":[{"id":338860,"user_id":225,"body":"SELECT * \n  FROM product\n  WHERE TO_TSVECTOR(name) @@ TO_TSQUERY('Awesome');","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338861,"user_id":2254,"body":"SELECT id, name, price\n  FROM product\n WHERE to_tsvector(name) @@ to_tsquery('Awesome')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338862,"user_id":1562,"body":"select *\nfrom product\nwhere to_tsvector(name) @@ to_tsquery('Awesome');","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338863,"user_id":1375,"body":"SELECT *\nFROM product\nWHERE to_tsvector(name) @@ to_tsquery('Awesome');","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338864,"user_id":null,"body":"-- Create your SELECT statement here\nSELECT p.id,\n\t\t\t p.name,\n       p.price\nFROM product AS p\nWHERE to_tsvector('English',name) @@ to_tsquery('Awesome')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338865,"user_id":null,"body":"-- Create your SELECT statement here\nselect * from product\nwhere to_tsvector('english', product.name) @@ to_tsquery('english', 'awesome')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338866,"user_id":2578,"body":"select product.*\nfrom product\nwhere to_tsvector(product.name) @@ to_tsquery('Awesome')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338867,"user_id":null,"body":"SELECT *\nFROM product \nWHERE to_tsvector(name) @@ to_tsquery('Awesome')=true","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338868,"user_id":1339,"body":"select * from product where name ~ 'Awesome' -- to_tsvector to_tsquery","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338869,"user_id":null,"body":"SELECT \n      x.id\n      ,x.name\n      ,x.price\nFROM\n(\n  SELECT \n    id\n    ,name\n    ,price\n    ,to_tsvector(name) @@ to_tsquery('awesome') ContainsAwesome\n  FROM Product\n)x\nWhere ContainsAwesome = true","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58167fa1f544130dcf000317":[{"id":338870,"user_id":null,"body":"SELECT \n  MIN(score), \n  percentile_cont(0.5) WITHIN GROUP (ORDER BY score) AS median, \n  MAX(score) \nFROM result","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338871,"user_id":null,"body":"SELECT MIN(score) as min, \nCAST(\n(SELECT score FROM result ORDER BY score \nLIMIT 1 \nOFFSET FLOOR((SELECT COUNT(*) FROM result)) \/ 2) as FLOAT) as median,\nMAX(score) as max FROM result","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338872,"user_id":null,"body":"-- Create your SELECT statement s\nselect min(score),\n       cast( PERCENTILE_DISC(0.5) WITHIN GROUP(order by score) as float )as median,\n       max(score) from student \n  inner join result on result.id = student.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338873,"user_id":null,"body":"CREATE FUNCTION _final_median(anyarray) RETURNS float8 AS $$ \n  WITH q AS\n  (\n     SELECT val\n     FROM unnest($1) val\n     WHERE VAL IS NOT NULL\n     ORDER BY 1\n  ),\n  cnt AS\n  (\n    SELECT COUNT(*) AS c FROM q\n  )\n  SELECT AVG(val)::float8\n  FROM \n  (\n    SELECT val FROM q\n    LIMIT  2 - MOD((SELECT c FROM cnt), 2)\n    OFFSET GREATEST(CEIL((SELECT c FROM cnt) \/ 2.0) - 1,0)  \n  ) q2;\n$$ LANGUAGE SQL IMMUTABLE;\n \nCREATE AGGREGATE median(anyelement) (\n  SFUNC=array_append,\n  STYPE=anyarray,\n  FINALFUNC=_final_median,\n  INITCOND='{}'\n);\n\nSELECT\n  MIN(score),\n  MEDIAN(score),\n  MAX(score)\nFROM result","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338874,"user_id":null,"body":"SELECT \n    min(score),\n    max(score),\n    PERCENTILE_CONT(0.5) WITHIN GROUP(order by score)::float as median\nFROM result\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338875,"user_id":null,"body":"SELECT\n    min(r.score),\n    percentile_cont(0.50) WITHIN GROUP (ORDER BY r.score)::float AS median,\n    max(r.score)\nFROM result r;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338876,"user_id":null,"body":"SELECT \n   MIN(score) as min\n  ,CAST( PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY score) AS FLOAT) as median\n  ,MAX(score) as max\nFROM result\nJOIN student\nON result.student_id = student.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338877,"user_id":null,"body":"SELECT\n  MIN(r.score) AS min,\n  PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY r.score) AS median,\n  MAX(r.score) AS max\nFROM student AS s\nLEFT JOIN result AS r ON s.id = r.student_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338878,"user_id":null,"body":"select min(result.score) as min,  (percentile_cont(0.5) within group (order by score))::float AS median, max(result.score) as max\n\nfrom result\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338879,"user_id":null,"body":"CREATE FUNCTION _final_median(anyarray) RETURNS float8 AS $$ \n  WITH q AS\n  (\n     SELECT val\n     FROM unnest($1) val\n     WHERE VAL IS NOT NULL\n     ORDER BY 1\n  ),\n  cnt AS\n  (\n    SELECT COUNT(*) AS c FROM q\n  )\n  SELECT AVG(val)::float8\n  FROM \n  (\n    SELECT val FROM q\n    LIMIT  2 - MOD((SELECT c FROM cnt), 2)\n    OFFSET GREATEST(CEIL((SELECT c FROM cnt) \/ 2.0) - 1,0)  \n  ) q2;\n$$ LANGUAGE SQL IMMUTABLE;\n \nCREATE AGGREGATE median(anyelement) (\n  SFUNC=array_append,\n  STYPE=anyarray,\n  FINALFUNC=_final_median,\n  INITCOND='{}'\n);\n\nSELECT MIN(score) AS min, MEDIAN(score) AS median, MAX(score) AS max FROM result","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5816a3ecf54413a113000074":[{"id":338880,"user_id":676,"body":"SELECT\n  EXTRACT(MONTH FROM payment_date)        AS month,\n  COUNT(*)                                AS total_count,\n  SUM(amount)                             AS total_amount,\n  COUNT(*)    FILTER (WHERE staff_id = 1) AS mike_count,\n  SUM(amount) FILTER (WHERE staff_id = 1) AS mike_amount,\n  COUNT(*)    FILTER (WHERE staff_id = 2) AS jon_count,\n  SUM(amount) FILTER (WHERE staff_id = 2) AS jon_amount\nFROM payment\nGROUP BY month\nORDER BY month;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338881,"user_id":null,"body":"SELECT\n  date_part('month',payment_date) AS month,\n  COUNT(*) AS total_count,\n  SUM(amount)::NUMERIC AS total_amount,\n  SUM(CASE WHEN staff_id=1 THEN 1 ELSE 0 END) AS mike_count,\n  SUM(CASE WHEN  staff_id=1 THEN amount ELSE 0 END)::NUMERIC AS mike_amount,\n  SUM(CASE WHEN staff_id=2 THEN 1 ELSE 0 END) AS jon_count,\n  SUM(CASE WHEN  staff_id=2 THEN amount ELSE 0 END)::NUMERIC AS jon_amount\n  FROM payment\n  GROUP BY month\n  ORDER BY month ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338882,"user_id":null,"body":"select\n  date_part('month', payment_date) as month,\n  count(rental_id) as total_count,\n  sum(amount) as total_amount,\n  sum(case staff_id when 1 then 1 else 0 end) as mike_count,\n  sum(case staff_id when 1 then amount else 0 end) as mike_amount,\n  sum(case staff_id when 2 then 1 else 0 end) as jon_count,\n  sum(case staff_id when 2 then amount else 0 end) as jon_amount\nfrom payment\ngroup by date_part('month', payment_date)\norder by date_part('month', payment_date)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338883,"user_id":null,"body":"  SELECT EXTRACT(month FROM payment_date) AS month,\n         COUNT(*)    AS total_count,\n         SUM(amount) AS total_amount,\n         COUNT(*)    FILTER (WHERE staff_id = 1) AS mike_count,\n         SUM(amount) FILTER (WHERE staff_id = 1) AS mike_amount,\n         COUNT(*)    FILTER (WHERE staff_id = 2) AS jon_count,\n         SUM(amount) FILTER (WHERE staff_id = 2) AS jon_amount\n    FROM payment\nGROUP BY month\nORDER BY month;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338884,"user_id":null,"body":"select\n  extract(month from date_trunc('month', payment_date)) as month,\n  count(payment_id) as total_count,\n  sum(amount) as total_amount,\n  count(payment_id) filter (where staff_id = 1) as mike_count,\n  sum(amount) filter (where staff_id = 1) as mike_amount,\n  count(payment_id) filter (where staff_id = 2) as jon_count,\n  sum(amount) filter (where staff_id = 2) as jon_amount\nfrom payment\ngroup by date_trunc('month', payment_date)\norder by month","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338885,"user_id":null,"body":"with mike as (\n  select\n    extract(month from payment_date) as month,\n    count(amount),\n    sum(amount)\n  from payment\n  where staff_id = 1\n  group by month\n),\njon as (\n  select\n    extract(month from payment_date) as month,\n    count(amount),\n    sum(amount)\n  from payment\n  where staff_id = 2\n  group by month\n)\nselect\n  mike.month,\n  mike.count + jon.count as total_count,\n  mike.sum + jon.sum as total_amount,\n  mike.count as mike_count,\n  mike.sum as mike_amount,\n  jon.count as jon_count,\n  jon.sum as jon_amount\nfrom mike\nfull outer join jon\non mike.month = jon.month\norder by month asc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338886,"user_id":null,"body":"select\n  t.month,\n  t.total_count,\n  t.total_amount,\n  m.mike_count,\n  m.mike_amount,\n  j.jon_count,\n  j.jon_amount\nfrom (\n  select\n    extract(month from p.payment_date) as month,\n    count(p.*) as total_count,\n    sum(p.amount) as total_amount\n  from payment p\n  group by extract(month from p.payment_date)\n) t\ninner join (\n  select\n    extract(month from p.payment_date) as month,\n    count(p.*) as mike_count,\n    sum(p.amount) as mike_amount\n  from payment p\n  where staff_id = 1\n  group by extract(month from p.payment_date)\n) m on m.month = t.month\ninner join (\n  select\n    extract(month from p.payment_date) as month,\n    count(p.*) as jon_count,\n    sum(p.amount) as jon_amount\n  from payment p\n  where staff_id = 2\n  group by extract(month from p.payment_date)\n) j on j.month = t.month\norder by t.month","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338887,"user_id":null,"body":"SELECT\n  DATE_PART('month', payment.payment_date) AS month,\n  COUNT(payment_id) AS total_count,\n  SUM(amount) AS total_amount,\n  COUNT(staff_id) FILTER (WHERE staff_id=1) AS mike_count,\n  SUM(amount) FILTER (WHERE staff_id=1) AS mike_amount,\n  COUNT(staff_id) FILTER (WHERE staff_id=2) AS jon_count,\n  SUM(amount) FILTER (WHERE staff_id=2) AS jon_amount\nFROM payment\nGROUP BY month\nORDER BY month;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338888,"user_id":null,"body":"SELECT\n  EXTRACT(month FROM payment_date) AS \"month\"\n  ,count(payment_id) AS \"total_count\"\n  ,sum(amount) AS total_amount\n  ,sum(CASE staff_id WHEN 1 THEN 1 ELSE 0 END) AS \"mike_count\"\n  ,sum(CASE staff_id WHEN 1 THEN amount ELSE 0 END) AS \"mike_amount\"\n  ,sum(CASE staff_id WHEN 2 THEN 1 ELSE 0 END) AS \"jon_count\"\n  ,sum(CASE staff_id WHEN 2 THEN amount ELSE 0 END)AS \"jon_amount\"\nFROM\n  payment\nGROUP BY\n  EXTRACT(month FROM payment_date)\nORDER BY\n  EXTRACT(month FROM payment_date) ASC  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338889,"user_id":2842,"body":"SELECT * FROM\n(\n  SELECT CAST(to_char(payment_date, 'MM') AS float) AS month, --use month as ID column hence include in all subqueries\n  COUNT(amount) AS total_count,\n  SUM(amount) AS total_amount\n  FROM payment\n  GROUP BY (month)\n) foo1 --total amounts subquery\nINNER JOIN \n(\n  SELECT CAST(to_char(payment_date, 'MM') AS float) AS month, --subquery id column\n    COUNT(amount) AS mike_count,\n    SUM(amount) AS mike_amount\n  FROM payment \n  WHERE (staff_id=1)\n  GROUP BY (month)\n) foo2 ON (foo1.month = foo2.month) --subquery for mike, joined to total amounts query on month\nINNER JOIN \n(\n  SELECT CAST(to_char(payment_date, 'MM') AS float) AS month,\n    COUNT(amount) AS jon_count,\n    SUM(amount) AS jon_amount\n  FROM payment \n  WHERE (staff_id=2)\n  GROUP BY (month)\n) foo3 ON (foo3.month = foo2.month) --subquery for jon, joined to query on month\nORDER BY (foo3.month); --month has been casted as float, hence it can be ordered\n\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5817b124e7f4576fd00020a2":[{"id":338890,"user_id":null,"body":"SELECT f.title\nFROM film f\nJOIN film_actor fa on fa.film_id = f.film_id\nWHERE fa.actor_id IN (105,122)\nGROUP BY f.film_id\nHAVING COUNT(*) = 2\nORDER BY f.title ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338891,"user_id":1519,"body":"SELECT f.title \n  FROM film f \n  INNER JOIN film_actor a ON f.film_id = a.film_id\n  INNER JOIN film_actor b ON f.film_id = b.film_id\n  WHERE a.actor_id = 105 AND b.actor_id = 122\n  ORDER BY title;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338892,"user_id":null,"body":"SELECT f.title\nFROM film f, film_actor a\nWHERE f.film_id = a.film_id\nAND a.actor_id = 105\nINTERSECT\nSELECT f.title\nFROM film f, film_actor a\nWHERE f.film_id = a.film_id\nAND a.actor_id = 122\nORDER BY title","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338893,"user_id":null,"body":"select title \n  from film f\n  join film_actor a1 on a1.film_id = f.film_id and a1.actor_id = 105\n  join film_actor a2 on a2.film_id = f.film_id and a2.actor_id = 122\n order by title","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338894,"user_id":null,"body":"-- Replace with your SQL Query\nselect title\n  from film\n  where film_id in (\n    select film_id from film_actor where actor_id = 105\n    intersect\n    select film_id from film_actor where actor_id = 122 )","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338895,"user_id":1947,"body":"SELECT\n  f.title\nFROM\n  film f JOIN film_actor fa ON f.film_id = fa.film_id\nWHERE\n  fa.actor_id = 105 or fa.actor_id = 122\nGROUP BY\n  f.title\nHAVING\n  COUNT(*) = 2\nORDER BY\n  f.title","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338896,"user_id":null,"body":"select title from film\nwhere film_id IN(\n select film_id from film_actor where actor_id = 105\nINTERSECT\n  select film_id from film_actor where actor_id = 122)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338897,"user_id":1562,"body":"with CrowesFilms (film_id)\nas\n(\n    select film_id\n    from film_actor\n    where actor_id = 105\n),\nNoltesFilms (film_id)\nas\n(\n    select film_id\n    from film_actor\n    where actor_id = 122\n)\nselect f.title\nfrom CrowesFilms as cf\n    inner join NoltesFilms as nl\n        on nl.film_id = cf.film_id\n    inner join film as f\n        on f.film_id = cf.film_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338898,"user_id":2199,"body":"SELECT F.title\nFROM\n  (SELECT FA.film_id FROM film_actor FA WHERE FA.actor_id=105 \n  INTERSECT \n  SELECT FA.film_id FROM film_actor FA WHERE FA.actor_id=122) R, film F\nWHERE F.film_id=R.film_id\nORDER BY title","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338899,"user_id":null,"body":"select c.title\n  from film_actor a\n  join film_actor b on a.film_id = b.film_id\n  join film c on b.film_id = c.film_id\n  where a.actor_id = 105\n  and b.actor_id = 122","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5818bde9559ff58bd90004a2":[{"id":338900,"user_id":null,"body":"with top_pair as (\n  select a1.actor_id as id1, a2.actor_id as id2\n  from film_actor a1\n    inner join film_actor a2 on a1.film_id=a2.film_id\n  where a1.actor_id <> a2.actor_id\n  group by a1.actor_id, a2.actor_id\n  order by count(a1.film_id) desc\n  limit 1\n)\nselect\n(select first_name || ' ' || last_name from actor where actor_id = tp.id1) as first_actor,\n(select first_name || ' ' || last_name from actor where actor_id = tp.id2) as second_actor,\n  f.title as title\nfrom top_pair tp\n    inner join film_actor fa1 on tp.id1 = fa1.actor_id\n    inner join film_actor fa2 on tp.id2 = fa2.actor_id\n    inner join film f on fa1.film_id=f.film_id and fa2.film_id=f.film_id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338901,"user_id":null,"body":"WITH topCast AS (\n  SELECT act1.actor_id AS act1_id, act2.actor_id AS act2_id\n  FROM film_actor act1\n  INNER JOIN film_actor act2\n    ON \n      act2.film_id = act1.film_id\n      AND act2.actor_id > act1.actor_id\n  GROUP BY act1.actor_id, act2.actor_id\n  ORDER BY COUNT(1) DESC\n  LIMIT 1\n)\nSELECT \n  act1.first_name || ' ' || act1.last_name AS first_actor,\n  act2.first_name || ' ' || act2.last_name AS second_actor,\n  title\nFROM topCast tc\nINNER JOIN actor act1 ON act1.actor_id = tc.act1_id\nINNER JOIN actor act2 ON act2.actor_id = tc.act2_id\nINNER JOIN film_actor fact1 ON fact1.actor_id = tc.act1_id\nINNER JOIN film_actor fact2 \n  ON \n    fact2.actor_id = tc.act2_id\n    AND fact2.film_id = fact1.film_id\nINNER JOIN film f ON fact1.film_id = f.film_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338902,"user_id":null,"body":"-- please read the comments in 1, 2, 3 order\n\n-- 3\n-- get the films and actor names of the couple found at point 2\nselect\n\ta1.first_name || ' ' || a1.last_name as first_actor\n\t, a2.first_name || ' ' || a2.last_name as second_actor\n\t, f.title as title\nfrom\t\n\t-- 2\n\t-- Get the one couple with more films. Note that the films are saved as an array\n\t( select a1, a2, count(*) as count, array_agg(film_id) as film_list\n\tfrom \n\t \t-- 1\n\t \t-- Get the cross join between the actors by movies\n\t \t-- and discart the double ones\n\t\t(select fa1.actor_id as a1, fa2.actor_id as a2, fa1.film_id as film_id\n\t\tfrom film_actor fa1, film_actor fa2\n\t\twhere fa1.actor_id < fa2.actor_id\n\t\t\t  and fa1.film_id = fa2.film_id\n\t\t) as facross\n\tgroup by a1, a2\n\torder by count(*) desc\n\tlimit 1 ) as res\n\t\n\tjoin actor a1 on a1.actor_id = res.a1\n\tjoin actor a2 on a2.actor_id = res.a2\t\t\n\t-- the array operator does the trick\n\tjoin film f on array[f.film_id] <@ film_list::integer[]\norder by f.title;\n\t","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338903,"user_id":2522,"body":"WITH ordered_counts AS \n                      (\nSELECT fa1.actor_id AS a1, \n       fa2.actor_id AS a2, \n       count(*)     AS cnt,\n       rank() OVER (ORDER BY count(*) DESC) AS rnk\nFROM   film_actor fa1\nJOIN   film_actor fa2 USING (film_id)\nWHERE  fa1.actor_id < fa2.actor_id \nGROUP BY fa1.actor_id, fa2.actor_id\n                      )\nSELECT a1.first_name||' '||a1.last_name AS first_actor, \n       a2.first_name||' '||a2.last_name AS second_actor,\n       f.title                          AS title\nFROM ordered_counts oc\nJOIN actor a1       ON a1.actor_id = oc.a1\nJOIN actor a2       ON a2.actor_id = oc.a2\nJOIN film_actor fa1 ON fa1.actor_id = oc.a1\nJOIN film_actor fa2 ON fa2.actor_id = oc.a2\nJOIN film f         ON f.film_id = fa1.film_id \n                   AND f.film_id = fa2.film_id\nWHERE oc.rnk = 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338904,"user_id":null,"body":"WITH\n  ActorPairsPerFilm AS (\n    SELECT A.actor_id AS a_id, B.actor_id AS b_id, A.film_id\n    FROM film_actor A\n    INNER JOIN film_actor B ON\n      A.film_id = B.film_id AND    \n      A.actor_id < B.actor_id\n    GROUP BY A.actor_id, B.actor_id, A.film_id\n  ),\n  MostPairedActors AS (\n    SELECT COUNT(*) AS TimesPaired, a_id, b_id\n    FROM ActorPairsPerFilm\n    GROUP BY a_id, b_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  )\nSELECT\n  CONCAT(Actor1.first_name, ' ', Actor1.last_name) AS first_actor,\n  CONCAT(Actor2.first_name, ' ', Actor2.last_name) AS second_actor,\n  film.title\nFROM\n  MostPairedActors M\nINNER JOIN ActorPairsPerFilm P ON\n  M.a_id = P.a_id AND\n  M.b_id = P.b_id\nINNER JOIN film ON\n  film.film_id = P.film_id\nINNER JOIN actor AS Actor1 ON\n  Actor1.actor_id = P.a_id\nINNER JOIN actor AS Actor2 ON\n  Actor2.actor_id = P.b_id\nORDER BY\n  film.title\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338905,"user_id":1610,"body":"SELECT\n  A1.FIRST_NAME || ' ' || A1.LAST_NAME AS FIRST_ACTOR,\n  A2.FIRST_NAME || ' ' || A2.LAST_NAME AS SECOND_ACTOR,\n  F.TITLE\nFROM\n  (\n    SELECT\n    \tFA1.ACTOR_ID AS FIRST,\n    \tFA2.ACTOR_ID AS SECOND,\n    \tCOUNT(1) AS TOTAL\n    FROM\n    \tFILM_ACTOR FA1 INNER JOIN\n    \tFILM_ACTOR FA2 ON FA1.FILM_ID = FA2.FILM_ID\n    WHERE\n    \tFA1.ACTOR_ID <> FA2.ACTOR_ID\n    GROUP BY\n    \tFA1.ACTOR_ID,\n    \tFA2.ACTOR_ID\n    ORDER BY \n    \tTOTAL DESC,\n    \tFA1.ACTOR_ID\n    LIMIT 1\n  ) ANS INNER JOIN\n  FILM_ACTOR FA1 ON ANS.FIRST = FA1.ACTOR_ID INNER JOIN\n  FILM_ACTOR FA2 ON FA1.FILM_ID = FA2.FILM_ID AND ANS.SECOND = FA2.ACTOR_ID INNER JOIN\n  ACTOR A1 ON ANS.FIRST = A1.ACTOR_ID INNER JOIN\n  ACTOR A2 ON ANS.SECOND = A2.ACTOR_ID INNER JOIN\n  FILM F ON FA1.FILM_ID = F.FILM_ID\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338906,"user_id":null,"body":"WITH top_pair AS(\n  SELECT a1.actor_id AS id1, a2.actor_id AS id2 \n  FROM film_actor AS a1\n  JOIN film_actor AS a2 ON a1.film_id=a2.film_id AND a1.actor_id <> a2.actor_id\n  GROUP BY a1.actor_id, a2.actor_id\n  ORDER BY COUNT(a1.film_id) DESC\n  LIMIT 1\n  )\nSELECT \n(SELECT first_name || ' ' || last_name FROM actor WHERE actor_id = tp.id1) AS first_actor,\n(SELECT first_name || ' ' || last_name FROM actor WHERE actor_id=tp.id2) AS second_actor,\nf.title AS title\nFROM top_pair AS tp\n  JOIN film_actor AS fa1 ON tp.id1=fa1.actor_id\n  JOIN film_actor AS fa2 ON tp.id2=fa2.actor_id\n  JOIN film AS f ON fa1.film_id=f.film_id AND fa2.film_id=f.film_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338907,"user_id":null,"body":"with actor_full_names as\n(\n  select actor_id, concat_ws(' ', first_name, last_name) as full_name\n  from actor\n),\nactor_pair as\n(\n  select fa1.actor_id as first_actor_id, fa2.actor_id as second_actor_id, count(*) as film_count\n  from film_actor as fa1\n  join film_actor as fa2\n    on fa1.film_id = fa2.film_id\n  where fa1.actor_id < fa2.actor_id\n  group by first_actor_id, second_actor_id\n  order by film_count desc\n  limit 1\n),\nactor_pairs as\n(\n  select fa1.film_id, fa1.actor_id as first_actor_id, fa2.actor_id as second_actor_id\n  from film_actor as fa1\n  join film_actor as fa2\n    on fa1.film_id = fa2.film_id\n  where fa1.actor_id = (select first_actor_id from actor_pair) and\n    fa2.actor_id = (select second_actor_id from actor_pair)\n)\nselect\n  (select full_name from actor_full_names where actor_id = ap.first_actor_id) as first_actor,\n  (select full_name from actor_full_names where actor_id = ap.second_actor_id) as second_actor,\n  (select title from film where film_id = ap.film_id) as title\nfrom actor_pairs as ap\norder by title;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338908,"user_id":null,"body":"-- Replace with your SQL Query\nselect\n  a1.first_name || ' ' || a1.last_name as first_actor,\n  a2.first_name || ' ' || a2.last_name as second_actor,\n  film.title\n  from (\n    select t1.actor_id as actor_id_1, t2.actor_id as actor_id_2, count(t1.film_id)\n      from film_actor as t1, film_actor as t2\n      where\n        t1.film_id = t2.film_id and\n        t1.actor_id < t2.actor_id\n      group by t1.actor_id, t2.actor_id\n      order by count(t1.film_id) desc\n      limit 1 ) as t1,\n    actor as a1,\n    actor as a2,\n    film\n  where \n    t1.actor_id_1 = a1.actor_id and\n    t1.actor_id_2 = a2.actor_id and\n    film.film_id in (\n      select film_id from film_actor where actor_id = t1.actor_id_1\n      intersect\n      select film_id from film_actor where actor_id = t1.actor_id_2 )","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338909,"user_id":null,"body":"\/*select fa1.actor_id,count(fa1.actor_id) AS combMovies\nfrom film_actor fa1, film_actor fa2 \nwhere fa1.film_id=fa2.film_id and fa1.actor_id<>fa2.actor_id\ngroup by fa1.actor_id, fa2.actor_id\norder by combMovies desc,fa1.actor_id\nlimit 1*\/\n\n\nselect a1.first_name||' '||a1.last_name as first_actor,\n       a2.first_name||' '||a2.last_name as second_actor,\n       f.title\nfrom actor a1, actor a2,film f\nwhere a1.actor_id ='27' and a2.actor_id='60'\nAND f.film_id IN (\n    SELECT fa1.film_id FROM film_actor fa1, film_actor fa2\n    WHERE fa1.film_id = fa2.film_id\n    AND fa1.actor_id = a1.actor_id\n    AND fa2.actor_id = a2.actor_id\n                )\norder by f.title\n\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"581fb63e70ca28d92500000d":[{"id":338910,"user_id":2500,"body":"SELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       d.department_name,\n       e.salary AS old_salary,\n       e.salary * d.pctinc AS new_salary\n  FROM employees   e,\n       (SELECT department_id,\n               department_name,\n               1 + pctIncrease(department_id) pctinc\n          FROM departments) d\n WHERE e.department_id = d.department_id\n ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338911,"user_id":null,"body":"WITH CTE AS (SELECT d.department_id\n                   ,d.department_name\n                   ,pctIncrease(d.department_id) as IncrecasePercentage\n             FROM departments d)\n\n\n\nSELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       d.department_name,\n       e.salary AS old_salary,\n       e.salary * (1 + d.IncrecasePercentage) AS new_salary\n  FROM employees   e\n       INNER JOIN CTE d ON e.department_id = d.department_id\n  ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338912,"user_id":null,"body":"with dep_incs as (\n  select\n    *,\n    pctIncrease(department_id) as increase\n  from departments\n)\nselect \n  e.employee_id,\n  e.first_name,\n  e.last_name,\n  d.department_name,\n  e.salary as old_salary,\n  e.salary * (1 + d.increase) as new_salary\nfrom \n  employees e,\n  dep_incs d\nwhere e.department_id = d.department_id\norder by e.employee_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338913,"user_id":null,"body":"SELECT \n  e.employee_id,\n  e.first_name,\n  e.last_name,\n  d.department_name,\n  e.salary AS old_salary,\n  e.salary * (1 + d.pct_increase) AS new_salary\nFROM employees AS e\nINNER JOIN (\n  SELECT\n    department_id,\n    department_name,\n    pctIncrease(department_id) as pct_increase\n  FROM departments\n) AS d ON e.department_id = d.department_id\nORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338914,"user_id":null,"body":"SELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       d.department_name,\n       e.salary AS old_salary,\n       e.salary * (1 + d.increase) AS new_salary\n  FROM employees   e,\n      (SELECT *, pctIncrease(department_id) AS increase FROM departments) d\n WHERE e.department_id = d.department_id\n ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338915,"user_id":53,"body":"with q as (\n  select \n      department_id\n    , (1 + pctIncrease(department_id)) as pct\n  from departments\n)\nSELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       d.department_name,\n       e.salary AS old_salary,\n       e.salary * q.pct AS new_salary\n  FROM employees e\n INNER JOIN departments d on e.department_id = d.department_id\n INNER JOIN q on q.department_id = e.department_id\n ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338916,"user_id":null,"body":"with t1 as (\nselect department_id, department_name, pctIncrease(department_id) as incr\nfrom departments d )\n\n\nSELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       t1.department_name,\n       e.salary AS old_salary,\n       e.salary * (1 + t1.incr) AS new_salary\n  FROM employees   e,\n       t1\n WHERE e.department_id = t1.department_id\n ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338917,"user_id":null,"body":"WITH depcalc AS (\n        SELECT\n            department_id,\n            department_name,\n            pctIncrease(department_id) as pcti        \n        FROM departments\n      )\nSELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       d.department_name,\n       e.salary AS old_salary,\n       e.salary * (1 + d.pcti) AS new_salary\n  FROM employees e,\n       depcalc d\n WHERE e.department_id = d.department_id\n ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338918,"user_id":null,"body":"CREATE TABLE tmp as \n  SELECT \n    department_id, \n    pctIncrease(department_id) AS increase \n  FROM departments ;\n\nSELECT e.employee_id,\n       e.first_name,\n       e.last_name,\n       d.department_name,\n       e.salary AS old_salary,\n       e.salary * (1 + increase) AS new_salary\n  FROM employees   e,\n       departments d, \n       tmp t\n WHERE e.department_id = d.department_id\n AND e.department_id = t.department_id\n ORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338919,"user_id":null,"body":"WITH department_results AS (\n  SELECT \n    department_id, \n    department_name,\n    1 + pctIncrease(department_id) AS increase\n  FROM departments\n) \nSELECT \n  e.employee_id,\n  e.first_name,\n  e.last_name,\n  d.department_name,\n  e.salary AS old_salary,\n  e.salary * d.increase AS new_salary\nFROM employees e\nJOIN department_results d ON (e.department_id = d.department_id)\nWHERE e.department_id = d.department_id\nORDER BY 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"582001237a3a630ce8000a41":[{"id":338920,"user_id":null,"body":"-- Replace with your SQL query\nselect\n  c.id category_id,\n  c.category,\n  p.title,\n  p.views,\n  p.post_id\nfrom categories c left join (\n  select\n    category_id,\n    title,\n    views,\n    id post_id,\n    row_number() over (partition by category_id order by views desc, id) rn\n  from posts) p on p.category_id = c.id and p.rn < 3\norder by category, views desc, post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338921,"user_id":null,"body":"--top 2 posts by views per category\nWITH top2_posts AS (\n  SELECT id, \n         category_id, \n         title, \n         views,\n         ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY views DESC, id ASC) AS rank\n  FROM posts\n)\nSELECT c.id AS category_id,\n       c.category,\n       top2_posts.title,\n       top2_posts.views,\n       top2_posts.id AS post_id\nFROM categories c\n  LEFT JOIN top2_posts ON top2_posts.category_id = c.id AND top2_posts.rank < 3\nORDER BY category ASC, views DESC, post_id ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338922,"user_id":null,"body":"select\n  category_id,\n  category,\n  title,\n  views,\n  post_id\nfrom\n  (select\n    c.id as category_id,\n    category,\n    title,\n    views,    \n    p.id as post_id,\n    rank() over (partition by c.id order by views desc, p.id)\n  from categories c\n  left join posts p on c.id = p.category_id) as posts\nwhere rank < 3\norder by category, views desc, post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338923,"user_id":null,"body":"-- Replace with your SQL query\nwith scope1 as (\nselect t1.id as category_id, t1.category, t2.title, t2.views,row_number() over (partition by t1.id,t1.category order by t2.views desc) as row_num,t2.id\nfrom categories t1 left join posts t2 on(t1.id=t2.category_id)\n)\nselect scope1.category_id, scope1.category,scope1.title,scope1.views,scope1.id as post_id\nfrom scope1 \nwhere scope1.row_num <3\norder by category asc, scope1.views desc,scope1.id asc;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338924,"user_id":null,"body":"-- Replace with your SQL querys\n-- two most viewed posts for every category\nwith scope1 as (\nselect t1.id as category_id,t1.category,t2.title,t2.views,row_number() over(partition by t1.id,t1.category order by t2.views desc) as row_num,t2.id as post_id\nfrom categories t1 left join posts t2 on (t1.id = t2.category_id)\n)\nselect scope1.category_id,scope1.category,scope1.title, scope1.views,scope1.post_id\nfrom scope1\nwhere scope1.row_num <= 2 \norder by scope1.category asc, scope1.views desc, scope1.post_id asc;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338925,"user_id":null,"body":"SELECT \n    category_id,\n    category,\n    title,\n    views,\n    post_id\nFROM (\n  SELECT \n      c.id AS category_id,\n      c.category,\n      p.title,\n      p.id AS post_id,\n      p.views,\n      row_number() OVER(PARTITION BY p.category_id ORDER BY p.views DESC, p.id) AS rn\n  FROM categories c LEFT JOIN posts p\n      ON c.id = p.category_id\n) numbered_posts\nWHERE numbered_posts.rn < 3\nORDER BY category, views DESC, post_id\n;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338926,"user_id":53,"body":"SELECT category_id, category, title, views, post_id\nFROM\n  (SELECT c.id as category_id, c.category, p.title, p.views, p.id as post_id,\n          rank() OVER (PARTITION BY c.id ORDER BY views DESC, p.id) AS pos\n     FROM categories c\n     LEFT OUTER JOIN posts p on p.category_id = c.id\n  ) AS ss\nWHERE pos < 3\nORDER BY 2, 4 desc, 5;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338927,"user_id":null,"body":"SELECT\n  categories.id as category_id\n  ,categories.category \n  ,posts_subq.title\n  ,posts_subq.views\n  ,posts_subq.id as post_id\n\nFROM categories\n  LEFT OUTER JOIN\n    (\n      SELECT\n        posts.id\n        ,posts.category_id\n        ,posts.title\n        ,posts.views\n        ,RANK() OVER(PARTITION BY posts.category_id ORDER BY posts.views DESC, posts.id) post_rank\n      FROM posts\n    ) posts_subq\n    ON posts_subq.category_id = categories.id\n    AND post_rank <=2\n  \n  ORDER BY categories.category, views DESC, post_id\n  \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338928,"user_id":null,"body":"select\n  category_id,\n  category,\n  title,\n  views,\n  post_id\nfrom\n(\n  select\n    c.id as category_id,  \n    category,\n    title,\n    views,  \n    p.id as post_id,\n    row_number() over(partition by category_id order by views desc, p.id) as rank\n  from posts as p\n  right join categories as c\n    on p.category_id = c.id\n) as posts_by_category\nwhere rank <= 2\norder by category, views desc, post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338929,"user_id":null,"body":"SELECT category_id, \n       category, \n       title, \n       views, \n       post_id \nFROM   (SELECT c.id                       AS category_id, \n               c.category                 AS category, \n               p.title                    AS title, \n               p.views                    AS views, \n               p.id                       AS post_id, \n               Row_number() OVER(partition BY p.category_id ORDER BY p.views DESC) AS rownum \n        FROM   categories c LEFT JOIN posts p ON p.category_id = c.id \n        ORDER  BY category ASC,views DESC,post_id ASC) AS temp \nWHERE  rownum <= 2 ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5820176255c3d23f360000a9":[{"id":338930,"user_id":null,"body":"SELECT c.id category_id, c.category, p.title, p.views, p.id post_id\nFROM categories c\nLEFT JOIN LATERAL( \n    SELECT title, views, id\n    FROM posts\n    WHERE category_id = c.id\n    ORDER BY views DESC\n    LIMIT 2) p ON true\nORDER BY 2, 4 DESC, 5;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338931,"user_id":null,"body":"SELECT c.id category_id, category, title, views, p.id as post_id\nFROM categories c\nLEFT JOIN LATERAL (\n  SELECT * FROM posts p\n  WHERE p.category_id = c.id\n  ORDER BY views DESC, p.id\n  LIMIT 2\n) p on true\nORDER BY category, views DESC, post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338932,"user_id":null,"body":"select \n  c.id as category_id,\n  c.category,\n  ps.title,\n  ps.views,\n  ps.post_id  \nfrom categories c\nleft join lateral (\n  select \n    p.category_id,\n    p.title,\n    p.views,\n    p.id as post_id\n  from posts p\n  where p.category_id = c.id\n  order by views desc\n  limit 2\n) ps on ps.category_id = c.id\norder by c.category, ps.views desc, ps.post_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338933,"user_id":2500,"body":"SELECT c.category_id,\n       c.category,\n       p.title,\n       p.views,\n       p.post_id\n  FROM (SELECT c.id AS category_id,\n               c.category\n          FROM categories c\n         ORDER BY c.category) c LEFT JOIN LATERAL\n       (SELECT p.title,\n               p.views,\n               p.id AS post_id\n          FROM posts p\n         WHERE p.category_id = c.category_id\n         ORDER BY p.views DESC, post_id ASC\n         LIMIT 2) p ON true;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338934,"user_id":null,"body":"create function getPosts(integer) returns setof posts as $$\nselect * from posts where category_id=$1 order by views desc limit 2\n$$ language sql;\n\nselect c.id as category_id,c.category,pp.title,pp.views,pp.id as post_id\nfrom categories c left join lateral getPosts(c.id) pp on true\norder by category,views desc,post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338935,"user_id":null,"body":"SELECT c.id category_id, c.category category, mostViewed.title title, mostViewed.views as views, mostViewed.id post_id\nFROM categories c LEFT JOIN LATERAL \n  (SELECT * FROM posts p WHERE p.category_id=c.id ORDER BY p.views desc LIMIT 2) as mostViewed ON true\nORDER BY category, views desc, post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338936,"user_id":100,"body":"select categories.id as category_id, category, title, views, post_id\nfrom categories left outer join lateral (\n  select posts.id as post_id, posts.category_id, posts.title, posts.views\n  from posts\n  where category_id = categories.id\n  order by posts.views desc\n  limit 2\n) p on true\norder by category asc, views desc, post_id asc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338937,"user_id":null,"body":"SELECT\n    c.id AS category_id,\n    c.category,\n    p.title,\n    p.views,\n    p.id AS post_id\nFROM categories c\nLEFT JOIN LATERAL (\n    SELECT\n        p.title,\n        p.views,\n        p.id,\n        p.category_id\n    FROM posts p\n    WHERE p.category_id = c.id\n    ORDER BY p.views DESC\n    LIMIT 2\n) AS p ON c.id = p.category_id\nORDER BY c.category, p.views DESC, post_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338938,"user_id":null,"body":"select category.id as category_id \n     , category.category\n     , post.title \n     , post.views\n     , post.id as post_id\n  from categories category\n  left join lateral (\n        select *\n          from posts \n         where posts.category_id = category.id\n         order by posts.views desc\n             , posts.id\n         limit 2\n     ) as post\n    on true\n order by category.category\n     , post.views desc\n     , post_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338939,"user_id":53,"body":"SELECT category_id, category, title, views, post_id\nFROM\n  (SELECT c.id as category_id, c.category, p.title, p.views, p.id as post_id\n     FROM categories c\n     LEFT JOIN LATERAL (\n         SELECT * FROM posts p\n         WHERE p.category_id = c.id\n         ORDER BY p.views DESC, p.id\n         LIMIT 2\n     ) p on true\n  ) AS ss\nORDER BY 2, 4 desc, 5;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5821ee33ec380124f1000013":[{"id":338940,"user_id":null,"body":"CREATE INDEX ON customers (lower(first_name || ' ' || last_name), lower(first_name || ',' || last_name));\nCREATE INDEX ON prospects (lower(full_name));\n\nSELECT a.first_name,\n       a.last_name,\n       a.credit_limit AS old_limit,\n       max(b.credit_limit) AS new_limit\nFROM customers a JOIN prospects b\n  ON lower(full_name) IN (\n    lower(a.first_name || ' ' || a.last_name),\n    lower(a.last_name || ', ' || a.first_name)\n  )\nGROUP BY a.id \n  HAVING max(b.credit_limit) > a.credit_limit\nORDER BY first_name, last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338941,"user_id":53,"body":"CREATE EXTENSION pg_trgm;\n\nCREATE INDEX i1 ON prospects (upper(full_name));\nCREATE INDEX i2 ON customers ((upper(first_name) || ' ' || upper(last_name)));\nCREATE INDEX i3 ON customers ((upper(last_name) || ', ' || upper(first_name)));\n\nSELECT c.first_name\n     , c.last_name\n     , c.credit_limit as old_limit\n     , max(p.credit_limit) as new_limit\n  FROM customers c\n     , prospects p\n WHERE upper(c.first_name) || ' ' || upper(c.last_name) = upper(p.full_name)\n    OR upper(c.Last_name) || ', ' || upper(c.first_name) = upper(p.full_name)\n GROUP BY c.first_name, c.last_name, c.credit_limit\nHAVING max(p.credit_limit) > c.credit_limit\n ORDER BY c.first_name, c.last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338942,"user_id":null,"body":"with \n\tprosp as (\n\t\tselect credit_limit, to_tsvector(full_name) as tsv \n\t\tfrom prospects )\n\t, cust as (\n\t\tselect first_name, last_name, credit_limit, to_tsquery(first_name || ' & ' || last_name) as tsq\n\t\tfrom customers\t\t\n\t)\n\t\nselect\n    c.first_name\n    , c.last_name\n    , c.credit_limit as old_limit\n    , max(p.credit_limit) as new_limit\nfrom\n\t  cust c\n\t  left outer join prosp p on p.tsv @@ c.tsq\ngroup by\n    c.first_name\n    , c.last_name\n    , c.credit_limit\nhaving \n\t  max(p.credit_limit) > c.credit_limit\norder by\n\t  c.first_name\n    , c.last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338943,"user_id":null,"body":"with t1 as (\n  select id, regexp_replace(full_name, '(miss|ms|mr|mrs|dr)\\.\\s', '', 'gi') as full_name, credit_limit\n  from prospects\n), t2 as (\n  select \n    case when full_name ~ ',' then initcap(split_part(full_name, ', ', 2)) \n    else initcap(split_part(full_name, ' ', 1)) end as first_name, \n    case when full_name ~ ',' then initcap(split_part(full_name, ', ', 1)) \n    else initcap(split_part(full_name, ' ', 2)) end as last_name, \n    max(credit_limit) as credit_limit\n  from t1 \n  group by 1, 2\n)\nselect \n  c.first_name, \n  c.last_name,\n  c.credit_limit as old_limit,\n  t2.credit_limit as new_limit\nfrom customers c\nleft join t2 on lower(t2.first_name) = lower(c.first_name) and lower(t2.last_name) = lower(c.last_name)\nwhere c.credit_limit < t2.credit_limit\norder by 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338944,"user_id":null,"body":"CREATE INDEX ON prospects ((LOWER(full_name)));\n\nSELECT tmp.first_name,\ntmp.last_name, tmp.old_limit, tmp.new_limit\nFROM (SELECT first_name,\nlast_name,\nc.credit_limit AS old_limit,\n(SELECT MAX(p.credit_limit)\nFROM prospects p\nWHERE (LOWER(CONCAT(c.first_name, ' ', c.last_name)) = LOWER(full_name)\n    OR LOWER(CONCAT(c.last_name, ', ', c.first_name)) = LOWER(full_name))\n  AND p.credit_limit > c.credit_limit) AS new_limit\nFROM customers c) AS tmp\nWHERE new_limit IS NOT NULL\nORDER BY first_name, last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338945,"user_id":null,"body":"CREATE EXTENSION pg_trgm;\nCREATE INDEX prospects_name_idx ON prospects USING GIN(full_name gin_trgm_ops);\nSELECT c.first_name, c.last_name, c.credit_limit AS old_limit, MAX(p.credit_limit) AS new_limit\nFROM customers AS c\nJOIN prospects AS p ON c.credit_limit < p.credit_limit\n  AND p.full_name ILIKE concat('%', c.first_name, '%')\n  AND p.full_name ILIKE concat('%', c.last_name, '%')\nGROUP BY c.first_name, c.last_name, c.credit_limit\nORDER BY c.first_name, c.last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338946,"user_id":null,"body":"select a.first_name, a.last_name, a.credit_limit old_limit, b.new_limit\nfrom \n  customers a\n  inner join lateral (\n    select max(c.credit_limit)\n    from prospects c\n    where \n      c.full_name  ~* format('%1$s' , a.first_name)\n      and c.full_name  ~* format('%1$s' , a.last_name)\n      and a.credit_limit < c.credit_limit\n  ) b (new_limit) on new_limit is not null \norder by 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338947,"user_id":100,"body":"with\n  cleaned_prospects as (\n    select\n      lower(trim(split_part(full_name, ' ', 1))) as first_name,\n      lower(trim(split_part(full_name, ' ', 2))) as last_name,\n      credit_limit\n    from prospects\n    where (full_name like '% %' and full_name not like '% % %') or (full_name like '% % %' and full_name not like '%. % %' and lower(full_name) not like 'miss % %')\n    union\n    select\n      lower(trim(split_part(full_name, ' ', 2))) as first_name,\n      lower(trim(split_part(full_name, ' ', 3))) as last_name,\n      credit_limit\n    from prospects\n    where full_name like '%. % %' or lower(full_name) like 'miss % %'\n    union\n    select\n      lower(trim(split_part(full_name, ', ', 2))) as first_name,\n      lower(trim(split_part(full_name, ', ', 1))) as last_name,\n      credit_limit\n    from prospects\n    where full_name like '%, %'\n  )\nselect\n c.first_name,\n c.last_name,\n c.credit_limit as old_limit,\n max(p.credit_limit) as new_limit\nfrom customers as c\n left join cleaned_prospects as p\n   on lower(c.first_name) = p.first_name and\n      lower(c.last_name)  = p.last_name\nwhere p.credit_limit > c.credit_limit\ngroup by\n c.first_name,\n c.last_name,\n c.credit_limit\norder by\n c.first_name,\n c.last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338948,"user_id":null,"body":"WITH prospects_formatted AS (\n  SELECT \n    CASE\n      WHEN POSITION(',' IN full_name) > 0 THEN\n        LOWER(CONCAT(TRIM(SPLIT_PART(full_name, ',', 2)), ' ', TRIM(SPLIT_PART(full_name, ',', 1))))\n      ELSE\n        LOWER(full_name)\n    END AS full_name,\n    credit_limit\n  FROM prospects\n),\nprospects_reformatted AS (\n  SELECT CONCAT(SPLIT_PART(TRIM(REGEXP_REPLACE(full_name, '^(\\w+\\.\\s)|(MISS )', '', 'i')), ' ', 1), ' ',\n          SPLIT_PART(TRIM(REGEXP_REPLACE(full_name, '^(\\w+\\.\\s)|(MISS )', '', 'i')), ' ', 2)) AS full_name,\n          credit_limit\n  FROM prospects_formatted\n),\nmax_credit_limits AS (\n  SELECT SPLIT_PART(full_name, ' ', 1) AS first_name,\n          SPLIT_PART(full_name, ' ', 2) AS last_name,\n          MAX(credit_limit) AS max_credit_limit\n  FROM prospects_reformatted\n  GROUP BY full_name\n)\nSELECT c.first_name,\n        c.last_name,\n        c.credit_limit AS old_limit,\n        mcl.max_credit_limit AS new_limit\nFROM max_credit_limits AS mcl\nJOIN customers AS c\n  ON LOWER(c.first_name) = mcl.first_name\n    AND LOWER(c.last_name) = mcl.last_name\nWHERE mcl.max_credit_limit > c.credit_limit\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338949,"user_id":null,"body":"with p as (\n  select \n    lower(case when position(',' in full_name) > 0 then\n      split_part(full_name, ', ', 2) || ' ' || split_part(full_name, ', ', 1)\n    else\n        full_name\n    end) as full_name,\n    credit_limit\n  from prospects\n)\nselect \n  c.first_name,\n  c.last_name,\n  c.credit_limit as old_limit,\n  max(p.credit_limit) as new_limit\nfrom customers c\njoin p\non lower(c.first_name || ' ' || c.last_name) = p.full_name\ngroup by 1, 2, 3\nhaving max(p.credit_limit) > c.credit_limit\norder by 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"582365c18917435ab3000020":[{"id":338950,"user_id":2270,"body":"SELECT custid, custname, custstate FROM customers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338951,"user_id":null,"body":"SELECT\n  c.custid,\n  c.custname,\n  c.custstate\nFROM customers c","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338952,"user_id":944,"body":"select custid,custname,custstate from customers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338953,"user_id":null,"body":"SELECT custid, custstate, custname\nFROM customers;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338954,"user_id":null,"body":"-- List all customer ids, names and states found in customers\nSELECT \n  c.custid, \n  c.custname, \n  c.custstate \nFROM \n  customers c \nORDER BY \n  c.custid;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338955,"user_id":null,"body":"Select custid, custstate, custname\nFrom  customers ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338956,"user_id":null,"body":"USE customers;\nSELECT\n    custid,\n    custname,\n    custstate\nFROM\ncustomers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338957,"user_id":1558,"body":"-- Type your SQL here\nSELECT custId, custname, custstate from customers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338958,"user_id":null,"body":"--SELECT expressions\n--FROM tables\n--[WHERE conditions]\n--[ORDER BY expression [ ASC | DESC ]];\nSELECT custid, custname, custstate\nFROM customers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338959,"user_id":null,"body":"-- select all rows in the custid, custname, and custstate columns from the customers table.\n\nSELECT \n  custid, \n  custname, \n  custstate\nFROM \n  customers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58241d05e7a162c5b100010f":[{"id":338960,"user_id":null,"body":"-- Replace with your code\ncreate or replace function weekdays(_start date, _finish date) \nreturns integer\nas\n$$\n\n  select count(*) filter (where extract(dow from g.d) between 1 and 5)::int as weekdays\n  from generate_series(least(_start, _finish), greatest(_start, _finish), interval '1 day') as g(d);\n\n$$ language sql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338961,"user_id":null,"body":"CREATE FUNCTION weekdays(start_date DATE, end_date DATE) RETURNS integer AS $$\n  SELECT count(*)::int\n  FROM generate_series(start_date, end_date,\n    (CASE WHEN start_date < end_date THEN '1 day' ELSE '-1 day' END)::interval) d(days)\n  WHERE extract('ISODOW' FROM days) <= 5;\n$$\nLANGUAGE SQL\nIMMUTABLE;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338962,"user_id":null,"body":"create function weekdays(d1 date, d2 date)\n  returns integer as $$\n  declare\n    start_week_day integer := extract(isodow from least(d1, d2));\n    end_week_day integer := extract(isodow from greatest(d1, d2));\n    days integer := abs(d1-d2) + 1;\n    weekends integer := least(7 - start_week_day + 1, 2) + abs(least(5 - end_week_day, 0));\n    remaining_days integer := days - (7 - start_week_day + 1) - end_week_day;\n  begin\n    if remaining_days = 0 then\n      return days - weekends;\n    else\n      return days - remaining_days\/7*2 - weekends;\n    end if;\n  end\n$$ language plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338963,"user_id":null,"body":"CREATE FUNCTION weekdays(dt1 DATE, dt2 DATE) RETURNS INTEGER AS \n$$\nDECLARE\nd1 date = GREATEST(dt1,dt2);--IF dt1<=dt2 THEN dt1 ELSE dt2 END IF;\nd2 date = LEAST(dt1,dt2);--IF dt2>=dt1 THEN dt2 ELSE dt1 END IF;\nBEGIN\nRETURN ((((d1 - d2)\/7)*5) + ((d1 - d2)%7)-1);\nEND;\n$$\nLANGUAGE PLPGSQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338964,"user_id":null,"body":"CREATE OR REPLACE FUNCTION weekdays(DATE,DATE) RETURNS INTEGER AS\n$$\nSELECT COUNT(days)::int\n  FROM generate_series(LEAST($1, $2), GREATEST($1, $2), '1 day') as days\n  WHERE EXTRACT(DOW FROM days) NOT IN(0, 6);\n$$\nLANGUAGE 'sql';\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338965,"user_id":null,"body":"CREATE OR REPLACE FUNCTION weekdays (date, date) RETURNS integer\nAS $$\n SELECT sum( (extract(isodow FROM s.d) BETWEEN 1 AND 5)::int )::int\n FROM generate_series(least($1, $2), greatest($1, $2), interval '1 day') AS s(d);\n$$ LANGUAGE sql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338966,"user_id":null,"body":"create function weekdays(date, date) returns integer language sql as\n$$\nselect count(*)::int  \nfrom generate_series(least($1, $2), greatest($1, $2), interval '1d') d\nwhere extract(dow from d) not in (0, 6)\n$$","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338967,"user_id":null,"body":"\ncreate function weekdays(aa date, bb date) returns integer language 'plpgsql' as $$\n\ndeclare firstDate date;\ndeclare secondDate date;\ndeclare ctr integer := 0;\n\nbegin\n\n  if aa>bb then\n    firstDate = bb;\n    secondDate = aa;\n  else\n    firstDate = aa;\n    secondDate = bb;\n  end if;\n\n  while secondDate>firstDate loop\n    if DATE_PART('isodow', firstDate)<6 then\n      ctr = ctr+1;\n    end if;\n    firstDate = firstDate + interval '1 day'; \n  end loop;\n  \n  return ctr;\n\nend;$$;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338968,"user_id":2362,"body":"CREATE OR REPLACE FUNCTION weekdays(date_from date, date_to date)\nRETURNS integer AS\n$$\n    SELECT count(*)::integer\n    FROM generate_series(\n        least(date_from, date_to), \n        greatest(date_from, date_to), \n        '1 day'::interval\n    ) days_range\n    WHERE date_part('dow', days_range) NOT IN (0, 6);\n$$ LANGUAGE SQL","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338969,"user_id":53,"body":"CREATE OR REPLACE FUNCTION weekdays(a date, b date) \n    RETURNS TABLE (i integer) AS $$\n    BEGIN\n        RETURN QUERY\n        SELECT sum(case when extract (dow from dt) in (1,2,3,4,5) then 1 else 0 end)::int\n            FROM generate_series\n                  ( least(a, b)::timestamp \n                  , greatest(a, b)::timestamp\n                  , '1 day'::interval) dt\n                  ;\n    END;\n$$ LANGUAGE plpgsql;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"582cb0224e56e068d800003c":[{"id":338970,"user_id":null,"body":"SELECT *, floor(hours \/ 2) as liters FROM cycling","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338971,"user_id":580,"body":"select id, hours, floor(0.5*hours) as liters from cycling;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338972,"user_id":null,"body":"SELECT\n  c.id,\n  c.hours,\n  FLOOR(0.5 * c.hours) AS liters\nFROM \n  cycling AS c","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338973,"user_id":null,"body":"SELECT *, trunc(hours* 0.5)  AS liters FROM cycling","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338974,"user_id":null,"body":"SELECT id, hours, FLOOR(hours*0.5) AS liters  \nFROM CYCLING","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338975,"user_id":null,"body":"SELECT id, hours, FLOOR(hours * 0.5) as liters FROM cycling","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338976,"user_id":null,"body":"ALTER TABLE cycling \nADD COLUMN liters INTEGER;\n\nUPDATE cycling \nSET liters=FLOOR(hours*0.5);\n\nSELECT * FROM cycling;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338977,"user_id":null,"body":"SELECT ID\n      ,Hours\n      ,FLOOR(Hours * .5) AS Liters\nFROM cycling","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338978,"user_id":null,"body":"SELECT id, hours, FLOOR(hours \/ 2) AS liters FROM cycling","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338979,"user_id":2306,"body":"SELECT id, hours, FLOOR(hours * 0.5) AS liters FROM cycling","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"582cba7d3be8ce3a8300007c":[{"id":338980,"user_id":1562,"body":"select s.transaction_date::date as day,\n       d.name as department, \n       COUNT(s.id) as sale_count\nfrom department as d\n    inner join sale as s\n        on d.id = s.department_id\ngroup by day, department\norder by day, department;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338981,"user_id":null,"body":"SELECT \n  CAST(s.transaction_date AS DATE) AS day,\n  d.name AS department,\n  COUNT(s.id) AS sale_count\n  FROM department d\n    INNER JOIN sale s ON d.id = s.department_id\n  GROUP BY day, department\n  ORDER BY day, department\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338982,"user_id":null,"body":"select\n  transaction_date::date as day,\n  d.name as department,\n  count(s.id) as sale_count\nfrom sale as s\njoin department as d on s.department_id = d.id\ngroup by d.name, day\norder by day","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338983,"user_id":null,"body":"SELECT\n  DATE(s.transaction_date) AS day,\n  d.name                               AS department,\n  COUNT(s.*)                           AS sale_count\nFROM sale s\n  JOIN department d\n  ON s.department_id = d.id\nGROUP BY day, department\nORDER BY day ASC\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338984,"user_id":421,"body":"SELECT DATE(s.transaction_date) AS day, d.name AS department, COUNT(d.id) AS sale_count\nFROM department AS d\nJOIN sale AS s \nON d.id = s.department_id\nGROUP BY department, day\nORDER BY day","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338985,"user_id":1947,"body":"SELECT \n  date(s.transaction_date) as day,\n  d.name as department,\n  COUNT(*) as sale_count\nFROM department d JOIN sale s on d.id = s.department_id\nGROUP BY day, d.name\nORDER BY day asc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338986,"user_id":null,"body":"SELECT \n  CAST(s.transaction_date as date) as day,\n  d.name as department,\n  COUNT(s.id) as sale_count\n  FROM department d\n    JOIN sale s on d.id = s.department_id\n  group by day, d.name\n  order by day","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338987,"user_id":1493,"body":"SELECT \n  Date(s.transaction_date) as day,\n  d.name as department,\n  COUNT(s.transaction_date) as sale_count\n  FROM department d\n  JOIN sale s on d.id = s.department_id\n  group by  day, department \n  order by day asc, department asc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338988,"user_id":null,"body":"SELECT \n  date_trunc('day', s.transaction_date)::DATE \"day\",\n  d.name \"department\",\n  COUNT(s.*) sale_count\nFROM department d JOIN sale s on d.id = s.department_id\ngroup by \"day\", \"department\"\norder by 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338989,"user_id":null,"body":"SELECT \n  CAST(s.transaction_date AS DATE) AS day,\n  d.name department,\n  COUNT(s.id) sale_count\nFROM department d\nJOIN sale s ON d.id = s.department_id\nGROUP BY day, department\nORDER BY day, department ASC\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"58941fec8afa3618c9000184":[{"id":338990,"user_id":918,"body":"SELECT id, \n  CASE WHEN desired_height <= up_speed THEN 1\n  ELSE CEIL((desired_height - up_speed)::decimal \/ (up_speed - down_speed))::int + 1 END AS num_days\nFROM growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338991,"user_id":1701,"body":"select id, (greatest(ceil((desired_height-up_speed)::numeric\/(up_speed-down_speed)),0) + 1)::integer num_days from growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338992,"user_id":null,"body":"select gp.id, \ncase\nwhen up_speed >= desired_height then 1\nwhen ((up_speed - down_speed) * 1) + up_speed >= desired_height then 2\nwhen ((up_speed - down_speed) * 2) + up_speed >= desired_height then 3\nwhen ((up_speed - down_speed) * 3) + up_speed >= desired_height then 4\nwhen ((up_speed - down_speed) * 4) + up_speed >= desired_height then 5\nwhen ((up_speed - down_speed) * 5) + up_speed >= desired_height then 6\nwhen ((up_speed - down_speed) * 6) + up_speed >= desired_height then 7\nwhen ((up_speed - down_speed) * 7) + up_speed >= desired_height then 8\nwhen ((up_speed - down_speed) * 8) + up_speed >= desired_height then 9\nwhen ((up_speed - down_speed) * 9) + up_speed >= desired_height then 10\nwhen ((up_speed - down_speed) * 10) + up_speed >= desired_height then 11\nwhen ((up_speed - down_speed) * 11) + up_speed >= desired_height then 12\nwhen ((up_speed - down_speed) * 12) + up_speed >= desired_height then 13\nwhen ((up_speed - down_speed) * 13) + up_speed >= desired_height then 14\nwhen ((up_speed - down_speed) * 14) + up_speed >= desired_height then 15\nwhen ((up_speed - down_speed) * 15) + up_speed >= desired_height then 16\nwhen ((up_speed - down_speed) * 16) + up_speed >= desired_height then 17\nwhen ((up_speed - down_speed) * 17) + up_speed >= desired_height then 18\nwhen ((up_speed - down_speed) * 18) + up_speed >= desired_height then 19\nwhen ((up_speed - down_speed) * 19) + up_speed >= desired_height then 20\nwhen ((up_speed - down_speed) * 20) + up_speed >= desired_height then 21\nwhen ((up_speed - down_speed) * 21) + up_speed >= desired_height then 22\nwhen ((up_speed - down_speed) * 22) + up_speed >= desired_height then 23\nwhen ((up_speed - down_speed) * 23) + up_speed >= desired_height then 24\nwhen ((up_speed - down_speed) * 24) + up_speed >= desired_height then 25\nwhen ((up_speed - down_speed) * 25) + up_speed >= desired_height then 26\nwhen ((up_speed - down_speed) * 26) + up_speed >= desired_height then 27\nwhen ((up_speed - down_speed) * 27) + up_speed >= desired_height then 28\nwhen ((up_speed - down_speed) * 28) + up_speed >= desired_height then 29\nwhen ((up_speed - down_speed) * 29) + up_speed >= desired_height then 30\nwhen ((up_speed - down_speed) * 30) + up_speed >= desired_height then 31\nwhen ((up_speed - down_speed) * 31) + up_speed >= desired_height then 32\nwhen ((up_speed - down_speed) * 32) + up_speed >= desired_height then 33\nwhen ((up_speed - down_speed) * 33) + up_speed >= desired_height then 34\nwhen ((up_speed - down_speed) * 34) + up_speed >= desired_height then 35\nwhen ((up_speed - down_speed) * 35) + up_speed >= desired_height then 36\nwhen ((up_speed - down_speed) * 36) + up_speed >= desired_height then 37\nwhen ((up_speed - down_speed) * 37) + up_speed >= desired_height then 38\nwhen ((up_speed - down_speed) * 38) + up_speed >= desired_height then 39\nwhen ((up_speed - down_speed) * 39) + up_speed >= desired_height then 40\nwhen ((up_speed - down_speed) * 40) + up_speed >= desired_height then 41\nwhen ((up_speed - down_speed) * 41) + up_speed >= desired_height then 42\nwhen ((up_speed - down_speed) * 42) + up_speed >= desired_height then 43\nwhen ((up_speed - down_speed) * 43) + up_speed >= desired_height then 44\nwhen ((up_speed - down_speed) * 44) + up_speed >= desired_height then 45\nwhen ((up_speed - down_speed) * 45) + up_speed >= desired_height then 46\nwhen ((up_speed - down_speed) * 46) + up_speed >= desired_height then 47\nwhen ((up_speed - down_speed) * 47) + up_speed >= desired_height then 48\nwhen ((up_speed - down_speed) * 48) + up_speed >= desired_height then 49\nwhen ((up_speed - down_speed) * 49) + up_speed >= desired_height then 50\nwhen ((up_speed - down_speed) * 50) + up_speed >= desired_height then 51\nwhen ((up_speed - down_speed) * 51) + up_speed >= desired_height then 52\nwhen ((up_speed - down_speed) * 52) + up_speed >= desired_height then 53\nwhen ((up_speed - down_speed) * 53) + up_speed >= desired_height then 54\nwhen ((up_speed - down_speed) * 54) + up_speed >= desired_height then 55\nwhen ((up_speed - down_speed) * 55) + up_speed >= desired_height then 56\nwhen ((up_speed - down_speed) * 56) + up_speed >= desired_height then 57\nwhen ((up_speed - down_speed) * 57) + up_speed >= desired_height then 58\nwhen ((up_speed - down_speed) * 58) + up_speed >= desired_height then 59\nwhen ((up_speed - down_speed) * 59) + up_speed >= desired_height then 60\nwhen ((up_speed - down_speed) * 60) + up_speed >= desired_height then 61\nwhen ((up_speed - down_speed) * 61) + up_speed >= desired_height then 62\nwhen ((up_speed - down_speed) * 62) + up_speed >= desired_height then 63\nwhen ((up_speed - down_speed) * 63) + up_speed >= desired_height then 64\nwhen ((up_speed - down_speed) * 64) + up_speed >= desired_height then 65\nwhen ((up_speed - down_speed) * 65) + up_speed >= desired_height then 66\nwhen ((up_speed - down_speed) * 66) + up_speed >= desired_height then 67\nwhen ((up_speed - down_speed) * 67) + up_speed >= desired_height then 68\nwhen ((up_speed - down_speed) * 68) + up_speed >= desired_height then 69\nwhen ((up_speed - down_speed) * 69) + up_speed >= desired_height then 70\nwhen ((up_speed - down_speed) * 70) + up_speed >= desired_height then 71\nwhen ((up_speed - down_speed) * 71) + up_speed >= desired_height then 72\nwhen ((up_speed - down_speed) * 72) + up_speed >= desired_height then 73\nwhen ((up_speed - down_speed) * 73) + up_speed >= desired_height then 74\nwhen ((up_speed - down_speed) * 74) + up_speed >= desired_height then 75\nwhen ((up_speed - down_speed) * 75) + up_speed >= desired_height then 76\nwhen ((up_speed - down_speed) * 76) + up_speed >= desired_height then 77\nwhen ((up_speed - down_speed) * 77) + up_speed >= desired_height then 78\nwhen ((up_speed - down_speed) * 78) + up_speed >= desired_height then 79\nwhen ((up_speed - down_speed) * 79) + up_speed >= desired_height then 80\nwhen ((up_speed - down_speed) * 80) + up_speed >= desired_height then 81\nwhen ((up_speed - down_speed) * 81) + up_speed >= desired_height then 82\nwhen ((up_speed - down_speed) * 82) + up_speed >= desired_height then 83\nwhen ((up_speed - down_speed) * 83) + up_speed >= desired_height then 84\nwhen ((up_speed - down_speed) * 84) + up_speed >= desired_height then 85\nwhen ((up_speed - down_speed) * 85) + up_speed >= desired_height then 86\nwhen ((up_speed - down_speed) * 86) + up_speed >= desired_height then 87\nwhen ((up_speed - down_speed) * 87) + up_speed >= desired_height then 88\nwhen ((up_speed - down_speed) * 88) + up_speed >= desired_height then 89\nwhen ((up_speed - down_speed) * 89) + up_speed >= desired_height then 90\nwhen ((up_speed - down_speed) * 90) + up_speed >= desired_height then 91\nwhen ((up_speed - down_speed) * 91) + up_speed >= desired_height then 92\nwhen ((up_speed - down_speed) * 92) + up_speed >= desired_height then 93\nwhen ((up_speed - down_speed) * 93) + up_speed >= desired_height then 94\nwhen ((up_speed - down_speed) * 94) + up_speed >= desired_height then 95\nwhen ((up_speed - down_speed) * 95) + up_speed >= desired_height then 96\nwhen ((up_speed - down_speed) * 96) + up_speed >= desired_height then 97\nwhen ((up_speed - down_speed) * 97) + up_speed >= desired_height then 98\nwhen ((up_speed - down_speed) * 98) + up_speed >= desired_height then 99\nwhen ((up_speed - down_speed) * 99) + up_speed >= desired_height then 100\nwhen ((up_speed - down_speed) * 100) + up_speed >= desired_height then 101\nwhen ((up_speed - down_speed) * 101) + up_speed >= desired_height then 102\nwhen ((up_speed - down_speed) * 102) + up_speed >= desired_height then 103\nwhen ((up_speed - down_speed) * 103) + up_speed >= desired_height then 104\nwhen ((up_speed - down_speed) * 104) + up_speed >= desired_height then 105\nwhen ((up_speed - down_speed) * 105) + up_speed >= desired_height then 106\nwhen ((up_speed - down_speed) * 106) + up_speed >= desired_height then 107\nwhen ((up_speed - down_speed) * 107) + up_speed >= desired_height then 108\nwhen ((up_speed - down_speed) * 108) + up_speed >= desired_height then 109\nwhen ((up_speed - down_speed) * 109) + up_speed >= desired_height then 110\nwhen ((up_speed - down_speed) * 110) + up_speed >= desired_height then 111\nwhen ((up_speed - down_speed) * 111) + up_speed >= desired_height then 112\nwhen ((up_speed - down_speed) * 112) + up_speed >= desired_height then 113\nwhen ((up_speed - down_speed) * 113) + up_speed >= desired_height then 114\nwhen ((up_speed - down_speed) * 114) + up_speed >= desired_height then 115\nwhen ((up_speed - down_speed) * 115) + up_speed >= desired_height then 116\nwhen ((up_speed - down_speed) * 116) + up_speed >= desired_height then 117\nwhen ((up_speed - down_speed) * 117) + up_speed >= desired_height then 118\nwhen ((up_speed - down_speed) * 118) + up_speed >= desired_height then 119\nwhen ((up_speed - down_speed) * 119) + up_speed >= desired_height then 120\nwhen ((up_speed - down_speed) * 120) + up_speed >= desired_height then 121\nwhen ((up_speed - down_speed) * 121) + up_speed >= desired_height then 122\nwhen ((up_speed - down_speed) * 122) + up_speed >= desired_height then 123\nwhen ((up_speed - down_speed) * 123) + up_speed >= desired_height then 124\nwhen ((up_speed - down_speed) * 124) + up_speed >= desired_height then 125\nwhen ((up_speed - down_speed) * 125) + up_speed >= desired_height then 126\nwhen ((up_speed - down_speed) * 126) + up_speed >= desired_height then 127\nwhen ((up_speed - down_speed) * 127) + up_speed >= desired_height then 128\nwhen ((up_speed - down_speed) * 128) + up_speed >= desired_height then 129\nwhen ((up_speed - down_speed) * 129) + up_speed >= desired_height then 130\nwhen ((up_speed - down_speed) * 130) + up_speed >= desired_height then 131\nwhen ((up_speed - down_speed) * 131) + up_speed >= desired_height then 132\nwhen ((up_speed - down_speed) * 132) + up_speed >= desired_height then 133\nwhen ((up_speed - down_speed) * 133) + up_speed >= desired_height then 134\nwhen ((up_speed - down_speed) * 134) + up_speed >= desired_height then 135\nwhen ((up_speed - down_speed) * 135) + up_speed >= desired_height then 136\nwhen ((up_speed - down_speed) * 136) + up_speed >= desired_height then 137\nwhen ((up_speed - down_speed) * 137) + up_speed >= desired_height then 138\nwhen ((up_speed - down_speed) * 138) + up_speed >= desired_height then 139\nwhen ((up_speed - down_speed) * 139) + up_speed >= desired_height then 140\nwhen ((up_speed - down_speed) * 140) + up_speed >= desired_height then 141\nwhen ((up_speed - down_speed) * 141) + up_speed >= desired_height then 142\nwhen ((up_speed - down_speed) * 142) + up_speed >= desired_height then 143\nwhen ((up_speed - down_speed) * 143) + up_speed >= desired_height then 144\nwhen ((up_speed - down_speed) * 144) + up_speed >= desired_height then 145\nwhen ((up_speed - down_speed) * 145) + up_speed >= desired_height then 146\nwhen ((up_speed - down_speed) * 146) + up_speed >= desired_height then 147\nwhen ((up_speed - down_speed) * 147) + up_speed >= desired_height then 148\nwhen ((up_speed - down_speed) * 148) + up_speed >= desired_height then 149\nwhen ((up_speed - down_speed) * 149) + up_speed >= desired_height then 150\nwhen ((up_speed - down_speed) * 150) + up_speed >= desired_height then 151\nwhen ((up_speed - down_speed) * 151) + up_speed >= desired_height then 152\nwhen ((up_speed - down_speed) * 152) + up_speed >= desired_height then 153\nwhen ((up_speed - down_speed) * 153) + up_speed >= desired_height then 154\nwhen ((up_speed - down_speed) * 154) + up_speed >= desired_height then 155\nwhen ((up_speed - down_speed) * 155) + up_speed >= desired_height then 156\nwhen ((up_speed - down_speed) * 156) + up_speed >= desired_height then 157\nwhen ((up_speed - down_speed) * 157) + up_speed >= desired_height then 158\nwhen ((up_speed - down_speed) * 158) + up_speed >= desired_height then 159\nwhen ((up_speed - down_speed) * 159) + up_speed >= desired_height then 160\nwhen ((up_speed - down_speed) * 160) + up_speed >= desired_height then 161\nwhen ((up_speed - down_speed) * 161) + up_speed >= desired_height then 162\nwhen ((up_speed - down_speed) * 162) + up_speed >= desired_height then 163\nwhen ((up_speed - down_speed) * 163) + up_speed >= desired_height then 164\nwhen ((up_speed - down_speed) * 164) + up_speed >= desired_height then 165\nwhen ((up_speed - down_speed) * 165) + up_speed >= desired_height then 166\nwhen ((up_speed - down_speed) * 166) + up_speed >= desired_height then 167\nwhen ((up_speed - down_speed) * 167) + up_speed >= desired_height then 168\nwhen ((up_speed - down_speed) * 168) + up_speed >= desired_height then 169\nwhen ((up_speed - down_speed) * 169) + up_speed >= desired_height then 170\nwhen ((up_speed - down_speed) * 170) + up_speed >= desired_height then 171\nwhen ((up_speed - down_speed) * 171) + up_speed >= desired_height then 172\nwhen ((up_speed - down_speed) * 172) + up_speed >= desired_height then 173\nwhen ((up_speed - down_speed) * 173) + up_speed >= desired_height then 174\nwhen ((up_speed - down_speed) * 174) + up_speed >= desired_height then 175\nwhen ((up_speed - down_speed) * 175) + up_speed >= desired_height then 176\nwhen ((up_speed - down_speed) * 176) + up_speed >= desired_height then 177\nwhen ((up_speed - down_speed) * 177) + up_speed >= desired_height then 178\nwhen ((up_speed - down_speed) * 178) + up_speed >= desired_height then 179\nwhen ((up_speed - down_speed) * 179) + up_speed >= desired_height then 180\nwhen ((up_speed - down_speed) * 180) + up_speed >= desired_height then 181\nwhen ((up_speed - down_speed) * 181) + up_speed >= desired_height then 182\nwhen ((up_speed - down_speed) * 182) + up_speed >= desired_height then 183\nwhen ((up_speed - down_speed) * 183) + up_speed >= desired_height then 184\nwhen ((up_speed - down_speed) * 184) + up_speed >= desired_height then 185\nwhen ((up_speed - down_speed) * 185) + up_speed >= desired_height then 186\nwhen ((up_speed - down_speed) * 186) + up_speed >= desired_height then 187\nwhen ((up_speed - down_speed) * 187) + up_speed >= desired_height then 188\nwhen ((up_speed - down_speed) * 188) + up_speed >= desired_height then 189\nwhen ((up_speed - down_speed) * 189) + up_speed >= desired_height then 190\nwhen ((up_speed - down_speed) * 190) + up_speed >= desired_height then 191\nwhen ((up_speed - down_speed) * 191) + up_speed >= desired_height then 192\nwhen ((up_speed - down_speed) * 192) + up_speed >= desired_height then 193\nwhen ((up_speed - down_speed) * 193) + up_speed >= desired_height then 194\nwhen ((up_speed - down_speed) * 194) + up_speed >= desired_height then 195\nwhen ((up_speed - down_speed) * 195) + up_speed >= desired_height then 196\nwhen ((up_speed - down_speed) * 196) + up_speed >= desired_height then 197\nwhen ((up_speed - down_speed) * 197) + up_speed >= desired_height then 198\nwhen ((up_speed - down_speed) * 198) + up_speed >= desired_height then 199\nwhen ((up_speed - down_speed) * 199) + up_speed >= desired_height then 200\nwhen ((up_speed - down_speed) * 200) + up_speed >= desired_height then 201\nwhen ((up_speed - down_speed) * 201) + up_speed >= desired_height then 202\nwhen ((up_speed - down_speed) * 202) + up_speed >= desired_height then 203\nwhen ((up_speed - down_speed) * 203) + up_speed >= desired_height then 204\nwhen ((up_speed - down_speed) * 204) + up_speed >= desired_height then 205\nwhen ((up_speed - down_speed) * 205) + up_speed >= desired_height then 206\nwhen ((up_speed - down_speed) * 206) + up_speed >= desired_height then 207\nwhen ((up_speed - down_speed) * 207) + up_speed >= desired_height then 208\nwhen ((up_speed - down_speed) * 208) + up_speed >= desired_height then 209\nwhen ((up_speed - down_speed) * 209) + up_speed >= desired_height then 210\nwhen ((up_speed - down_speed) * 210) + up_speed >= desired_height then 211\nwhen ((up_speed - down_speed) * 211) + up_speed >= desired_height then 212\nwhen ((up_speed - down_speed) * 212) + up_speed >= desired_height then 213\nwhen ((up_speed - down_speed) * 213) + up_speed >= desired_height then 214\nwhen ((up_speed - down_speed) * 214) + up_speed >= desired_height then 215\nwhen ((up_speed - down_speed) * 215) + up_speed >= desired_height then 216\nwhen ((up_speed - down_speed) * 216) + up_speed >= desired_height then 217\nwhen ((up_speed - down_speed) * 217) + up_speed >= desired_height then 218\nwhen ((up_speed - down_speed) * 218) + up_speed >= desired_height then 219\nwhen ((up_speed - down_speed) * 219) + up_speed >= desired_height then 220\nwhen ((up_speed - down_speed) * 220) + up_speed >= desired_height then 221\nwhen ((up_speed - down_speed) * 221) + up_speed >= desired_height then 222\nwhen ((up_speed - down_speed) * 222) + up_speed >= desired_height then 223\nwhen ((up_speed - down_speed) * 223) + up_speed >= desired_height then 224\nwhen ((up_speed - down_speed) * 224) + up_speed >= desired_height then 225\nwhen ((up_speed - down_speed) * 225) + up_speed >= desired_height then 226\nwhen ((up_speed - down_speed) * 226) + up_speed >= desired_height then 227\nwhen ((up_speed - down_speed) * 227) + up_speed >= desired_height then 228\nwhen ((up_speed - down_speed) * 228) + up_speed >= desired_height then 229\nwhen ((up_speed - down_speed) * 229) + up_speed >= desired_height then 230\nwhen ((up_speed - down_speed) * 230) + up_speed >= desired_height then 231\nwhen ((up_speed - down_speed) * 231) + up_speed >= desired_height then 232\nwhen ((up_speed - down_speed) * 232) + up_speed >= desired_height then 233\nwhen ((up_speed - down_speed) * 233) + up_speed >= desired_height then 234\nwhen ((up_speed - down_speed) * 234) + up_speed >= desired_height then 235\nwhen ((up_speed - down_speed) * 235) + up_speed >= desired_height then 236\nwhen ((up_speed - down_speed) * 236) + up_speed >= desired_height then 237\nwhen ((up_speed - down_speed) * 237) + up_speed >= desired_height then 238\nwhen ((up_speed - down_speed) * 238) + up_speed >= desired_height then 239\nwhen ((up_speed - down_speed) * 239) + up_speed >= desired_height then 240\nwhen ((up_speed - down_speed) * 240) + up_speed >= desired_height then 241\nwhen ((up_speed - down_speed) * 241) + up_speed >= desired_height then 242\nwhen ((up_speed - down_speed) * 242) + up_speed >= desired_height then 243\nwhen ((up_speed - down_speed) * 243) + up_speed >= desired_height then 244\nwhen ((up_speed - down_speed) * 244) + up_speed >= desired_height then 245\nwhen ((up_speed - down_speed) * 245) + up_speed >= desired_height then 246\nwhen ((up_speed - down_speed) * 246) + up_speed >= desired_height then 247\nwhen ((up_speed - down_speed) * 247) + up_speed >= desired_height then 248\nwhen ((up_speed - down_speed) * 248) + up_speed >= desired_height then 249\nwhen ((up_speed - down_speed) * 249) + up_speed >= desired_height then 250\nwhen ((up_speed - down_speed) * 250) + up_speed >= desired_height then 251\nwhen ((up_speed - down_speed) * 251) + up_speed >= desired_height then 252\nwhen ((up_speed - down_speed) * 252) + up_speed >= desired_height then 253\nwhen ((up_speed - down_speed) * 253) + up_speed >= desired_height then 254\nwhen ((up_speed - down_speed) * 254) + up_speed >= desired_height then 255\nwhen ((up_speed - down_speed) * 255) + up_speed >= desired_height then 256\nwhen ((up_speed - down_speed) * 256) + up_speed >= desired_height then 257\nwhen ((up_speed - down_speed) * 257) + up_speed >= desired_height then 258\nwhen ((up_speed - down_speed) * 258) + up_speed >= desired_height then 259\nwhen ((up_speed - down_speed) * 259) + up_speed >= desired_height then 260\nwhen ((up_speed - down_speed) * 260) + up_speed >= desired_height then 261\nwhen ((up_speed - down_speed) * 261) + up_speed >= desired_height then 262\nwhen ((up_speed - down_speed) * 262) + up_speed >= desired_height then 263\nwhen ((up_speed - down_speed) * 263) + up_speed >= desired_height then 264\nwhen ((up_speed - down_speed) * 264) + up_speed >= desired_height then 265\nwhen ((up_speed - down_speed) * 265) + up_speed >= desired_height then 266\nwhen ((up_speed - down_speed) * 266) + up_speed >= desired_height then 267\nwhen ((up_speed - down_speed) * 267) + up_speed >= desired_height then 268\nwhen ((up_speed - down_speed) * 268) + up_speed >= desired_height then 269\nwhen ((up_speed - down_speed) * 269) + up_speed >= desired_height then 270\nwhen ((up_speed - down_speed) * 270) + up_speed >= desired_height then 271\nwhen ((up_speed - down_speed) * 271) + up_speed >= desired_height then 272\nwhen ((up_speed - down_speed) * 272) + up_speed >= desired_height then 273\nwhen ((up_speed - down_speed) * 273) + up_speed >= desired_height then 274\nwhen ((up_speed - down_speed) * 274) + up_speed >= desired_height then 275\nwhen ((up_speed - down_speed) * 275) + up_speed >= desired_height then 276\nwhen ((up_speed - down_speed) * 276) + up_speed >= desired_height then 277\nwhen ((up_speed - down_speed) * 277) + up_speed >= desired_height then 278\nwhen ((up_speed - down_speed) * 278) + up_speed >= desired_height then 279\nwhen ((up_speed - down_speed) * 279) + up_speed >= desired_height then 280\nwhen ((up_speed - down_speed) * 280) + up_speed >= desired_height then 281\nwhen ((up_speed - down_speed) * 281) + up_speed >= desired_height then 282\nwhen ((up_speed - down_speed) * 282) + up_speed >= desired_height then 283\nwhen ((up_speed - down_speed) * 283) + up_speed >= desired_height then 284\nwhen ((up_speed - down_speed) * 284) + up_speed >= desired_height then 285\nwhen ((up_speed - down_speed) * 285) + up_speed >= desired_height then 286\nwhen ((up_speed - down_speed) * 286) + up_speed >= desired_height then 287\nwhen ((up_speed - down_speed) * 287) + up_speed >= desired_height then 288\nwhen ((up_speed - down_speed) * 288) + up_speed >= desired_height then 289\nwhen ((up_speed - down_speed) * 289) + up_speed >= desired_height then 290\nwhen ((up_speed - down_speed) * 290) + up_speed >= desired_height then 291\nwhen ((up_speed - down_speed) * 291) + up_speed >= desired_height then 292\nwhen ((up_speed - down_speed) * 292) + up_speed >= desired_height then 293\nwhen ((up_speed - down_speed) * 293) + up_speed >= desired_height then 294\nwhen ((up_speed - down_speed) * 294) + up_speed >= desired_height then 295\nwhen ((up_speed - down_speed) * 295) + up_speed >= desired_height then 296\nwhen ((up_speed - down_speed) * 296) + up_speed >= desired_height then 297\nwhen ((up_speed - down_speed) * 297) + up_speed >= desired_height then 298\nwhen ((up_speed - down_speed) * 298) + up_speed >= desired_height then 299\nwhen ((up_speed - down_speed) * 299) + up_speed >= desired_height then 300\nwhen ((up_speed - down_speed) * 300) + up_speed >= desired_height then 301\nwhen ((up_speed - down_speed) * 301) + up_speed >= desired_height then 302\nwhen ((up_speed - down_speed) * 302) + up_speed >= desired_height then 303\nwhen ((up_speed - down_speed) * 303) + up_speed >= desired_height then 304\nwhen ((up_speed - down_speed) * 304) + up_speed >= desired_height then 305\nwhen ((up_speed - down_speed) * 305) + up_speed >= desired_height then 306\nwhen ((up_speed - down_speed) * 306) + up_speed >= desired_height then 307\nwhen ((up_speed - down_speed) * 307) + up_speed >= desired_height then 308\nwhen ((up_speed - down_speed) * 308) + up_speed >= desired_height then 309\nwhen ((up_speed - down_speed) * 309) + up_speed >= desired_height then 310\nwhen ((up_speed - down_speed) * 310) + up_speed >= desired_height then 311\nwhen ((up_speed - down_speed) * 311) + up_speed >= desired_height then 312\nwhen ((up_speed - down_speed) * 312) + up_speed >= desired_height then 313\nwhen ((up_speed - down_speed) * 313) + up_speed >= desired_height then 314\nwhen ((up_speed - down_speed) * 314) + up_speed >= desired_height then 315\nwhen ((up_speed - down_speed) * 315) + up_speed >= desired_height then 316\nwhen ((up_speed - down_speed) * 316) + up_speed >= desired_height then 317\nwhen ((up_speed - down_speed) * 317) + up_speed >= desired_height then 318\nwhen ((up_speed - down_speed) * 318) + up_speed >= desired_height then 319\nwhen ((up_speed - down_speed) * 319) + up_speed >= desired_height then 320\nwhen ((up_speed - down_speed) * 320) + up_speed >= desired_height then 321\nwhen ((up_speed - down_speed) * 321) + up_speed >= desired_height then 322\nwhen ((up_speed - down_speed) * 322) + up_speed >= desired_height then 323\nwhen ((up_speed - down_speed) * 323) + up_speed >= desired_height then 324\nwhen ((up_speed - down_speed) * 324) + up_speed >= desired_height then 325\nwhen ((up_speed - down_speed) * 325) + up_speed >= desired_height then 326\nwhen ((up_speed - down_speed) * 326) + up_speed >= desired_height then 327\nwhen ((up_speed - down_speed) * 327) + up_speed >= desired_height then 328\nwhen ((up_speed - down_speed) * 328) + up_speed >= desired_height then 329\nwhen ((up_speed - down_speed) * 329) + up_speed >= desired_height then 330\nwhen ((up_speed - down_speed) * 330) + up_speed >= desired_height then 331\nwhen ((up_speed - down_speed) * 331) + up_speed >= desired_height then 332\nwhen ((up_speed - down_speed) * 332) + up_speed >= desired_height then 333\nwhen ((up_speed - down_speed) * 333) + up_speed >= desired_height then 334\nwhen ((up_speed - down_speed) * 334) + up_speed >= desired_height then 335\nwhen ((up_speed - down_speed) * 335) + up_speed >= desired_height then 336\nwhen ((up_speed - down_speed) * 336) + up_speed >= desired_height then 337\nwhen ((up_speed - down_speed) * 337) + up_speed >= desired_height then 338\nwhen ((up_speed - down_speed) * 338) + up_speed >= desired_height then 339\nwhen ((up_speed - down_speed) * 339) + up_speed >= desired_height then 340\nwhen ((up_speed - down_speed) * 340) + up_speed >= desired_height then 341\nwhen ((up_speed - down_speed) * 341) + up_speed >= desired_height then 342\nwhen ((up_speed - down_speed) * 342) + up_speed >= desired_height then 343\nwhen ((up_speed - down_speed) * 343) + up_speed >= desired_height then 344\nwhen ((up_speed - down_speed) * 344) + up_speed >= desired_height then 345\nwhen ((up_speed - down_speed) * 345) + up_speed >= desired_height then 346\nwhen ((up_speed - down_speed) * 346) + up_speed >= desired_height then 347\nwhen ((up_speed - down_speed) * 347) + up_speed >= desired_height then 348\nwhen ((up_speed - down_speed) * 348) + up_speed >= desired_height then 349\nwhen ((up_speed - down_speed) * 349) + up_speed >= desired_height then 350\nwhen ((up_speed - down_speed) * 350) + up_speed >= desired_height then 351\nwhen ((up_speed - down_speed) * 351) + up_speed >= desired_height then 352\nwhen ((up_speed - down_speed) * 352) + up_speed >= desired_height then 353\nwhen ((up_speed - down_speed) * 353) + up_speed >= desired_height then 354\nwhen ((up_speed - down_speed) * 354) + up_speed >= desired_height then 355\nwhen ((up_speed - down_speed) * 355) + up_speed >= desired_height then 356\nwhen ((up_speed - down_speed) * 356) + up_speed >= desired_height then 357\nwhen ((up_speed - down_speed) * 357) + up_speed >= desired_height then 358\nwhen ((up_speed - down_speed) * 358) + up_speed >= desired_height then 359\nwhen ((up_speed - down_speed) * 359) + up_speed >= desired_height then 360\nwhen ((up_speed - down_speed) * 360) + up_speed >= desired_height then 361\nwhen ((up_speed - down_speed) * 361) + up_speed >= desired_height then 362\nwhen ((up_speed - down_speed) * 362) + up_speed >= desired_height then 363\nwhen ((up_speed - down_speed) * 363) + up_speed >= desired_height then 364\nwhen ((up_speed - down_speed) * 364) + up_speed >= desired_height then 365\nwhen ((up_speed - down_speed) * 365) + up_speed >= desired_height then 366\nwhen ((up_speed - down_speed) * 366) + up_speed >= desired_height then 367\nwhen ((up_speed - down_speed) * 367) + up_speed >= desired_height then 368\nwhen ((up_speed - down_speed) * 368) + up_speed >= desired_height then 369\nwhen ((up_speed - down_speed) * 369) + up_speed >= desired_height then 370\nwhen ((up_speed - down_speed) * 370) + up_speed >= desired_height then 371\nwhen ((up_speed - down_speed) * 371) + up_speed >= desired_height then 372\nwhen ((up_speed - down_speed) * 372) + up_speed >= desired_height then 373\nwhen ((up_speed - down_speed) * 373) + up_speed >= desired_height then 374\nwhen ((up_speed - down_speed) * 374) + up_speed >= desired_height then 375\nwhen ((up_speed - down_speed) * 375) + up_speed >= desired_height then 376\nwhen ((up_speed - down_speed) * 376) + up_speed >= desired_height then 377\nwhen ((up_speed - down_speed) * 377) + up_speed >= desired_height then 378\nwhen ((up_speed - down_speed) * 378) + up_speed >= desired_height then 379\nwhen ((up_speed - down_speed) * 379) + up_speed >= desired_height then 380\nwhen ((up_speed - down_speed) * 380) + up_speed >= desired_height then 381\nwhen ((up_speed - down_speed) * 381) + up_speed >= desired_height then 382\nwhen ((up_speed - down_speed) * 382) + up_speed >= desired_height then 383\nwhen ((up_speed - down_speed) * 383) + up_speed >= desired_height then 384\nwhen ((up_speed - down_speed) * 384) + up_speed >= desired_height then 385\nwhen ((up_speed - down_speed) * 385) + up_speed >= desired_height then 386\nwhen ((up_speed - down_speed) * 386) + up_speed >= desired_height then 387\nwhen ((up_speed - down_speed) * 387) + up_speed >= desired_height then 388\nwhen ((up_speed - down_speed) * 388) + up_speed >= desired_height then 389\nwhen ((up_speed - down_speed) * 389) + up_speed >= desired_height then 390\nwhen ((up_speed - down_speed) * 390) + up_speed >= desired_height then 391\nwhen ((up_speed - down_speed) * 391) + up_speed >= desired_height then 392\nwhen ((up_speed - down_speed) * 392) + up_speed >= desired_height then 393\nwhen ((up_speed - down_speed) * 393) + up_speed >= desired_height then 394\nwhen ((up_speed - down_speed) * 394) + up_speed >= desired_height then 395\nwhen ((up_speed - down_speed) * 395) + up_speed >= desired_height then 396\nwhen ((up_speed - down_speed) * 396) + up_speed >= desired_height then 397\nwhen ((up_speed - down_speed) * 397) + up_speed >= desired_height then 398\nwhen ((up_speed - down_speed) * 398) + up_speed >= desired_height then 399\nwhen ((up_speed - down_speed) * 399) + up_speed >= desired_height then 400\nwhen ((up_speed - down_speed) * 400) + up_speed >= desired_height then 401\nwhen ((up_speed - down_speed) * 401) + up_speed >= desired_height then 402\nwhen ((up_speed - down_speed) * 402) + up_speed >= desired_height then 403\nwhen ((up_speed - down_speed) * 403) + up_speed >= desired_height then 404\nwhen ((up_speed - down_speed) * 404) + up_speed >= desired_height then 405\nwhen ((up_speed - down_speed) * 405) + up_speed >= desired_height then 406\nwhen ((up_speed - down_speed) * 406) + up_speed >= desired_height then 407\nwhen ((up_speed - down_speed) * 407) + up_speed >= desired_height then 408\nwhen ((up_speed - down_speed) * 408) + up_speed >= desired_height then 409\nwhen ((up_speed - down_speed) * 409) + up_speed >= desired_height then 410\nwhen ((up_speed - down_speed) * 410) + up_speed >= desired_height then 411\nwhen ((up_speed - down_speed) * 411) + up_speed >= desired_height then 412\nwhen ((up_speed - down_speed) * 412) + up_speed >= desired_height then 413\nwhen ((up_speed - down_speed) * 413) + up_speed >= desired_height then 414\nwhen ((up_speed - down_speed) * 414) + up_speed >= desired_height then 415\nwhen ((up_speed - down_speed) * 415) + up_speed >= desired_height then 416\nwhen ((up_speed - down_speed) * 416) + up_speed >= desired_height then 417\nwhen ((up_speed - down_speed) * 417) + up_speed >= desired_height then 418\nwhen ((up_speed - down_speed) * 418) + up_speed >= desired_height then 419\nwhen ((up_speed - down_speed) * 419) + up_speed >= desired_height then 420\nwhen ((up_speed - down_speed) * 420) + up_speed >= desired_height then 421\nwhen ((up_speed - down_speed) * 421) + up_speed >= desired_height then 422\nwhen ((up_speed - down_speed) * 422) + up_speed >= desired_height then 423\nwhen ((up_speed - down_speed) * 423) + up_speed >= desired_height then 424\nwhen ((up_speed - down_speed) * 424) + up_speed >= desired_height then 425\nwhen ((up_speed - down_speed) * 425) + up_speed >= desired_height then 426\nwhen ((up_speed - down_speed) * 426) + up_speed >= desired_height then 427\nwhen ((up_speed - down_speed) * 427) + up_speed >= desired_height then 428\nwhen ((up_speed - down_speed) * 428) + up_speed >= desired_height then 429\nwhen ((up_speed - down_speed) * 429) + up_speed >= desired_height then 430\nwhen ((up_speed - down_speed) * 430) + up_speed >= desired_height then 431\nwhen ((up_speed - down_speed) * 431) + up_speed >= desired_height then 432\nwhen ((up_speed - down_speed) * 432) + up_speed >= desired_height then 433\nwhen ((up_speed - down_speed) * 433) + up_speed >= desired_height then 434\nwhen ((up_speed - down_speed) * 434) + up_speed >= desired_height then 435\nwhen ((up_speed - down_speed) * 435) + up_speed >= desired_height then 436\nwhen ((up_speed - down_speed) * 436) + up_speed >= desired_height then 437\nwhen ((up_speed - down_speed) * 437) + up_speed >= desired_height then 438\nwhen ((up_speed - down_speed) * 438) + up_speed >= desired_height then 439\nwhen ((up_speed - down_speed) * 439) + up_speed >= desired_height then 440\nwhen ((up_speed - down_speed) * 440) + up_speed >= desired_height then 441\nwhen ((up_speed - down_speed) * 441) + up_speed >= desired_height then 442\nwhen ((up_speed - down_speed) * 442) + up_speed >= desired_height then 443\nwhen ((up_speed - down_speed) * 443) + up_speed >= desired_height then 444\nwhen ((up_speed - down_speed) * 444) + up_speed >= desired_height then 445\nwhen ((up_speed - down_speed) * 445) + up_speed >= desired_height then 446\nwhen ((up_speed - down_speed) * 446) + up_speed >= desired_height then 447\nwhen ((up_speed - down_speed) * 447) + up_speed >= desired_height then 448\nwhen ((up_speed - down_speed) * 448) + up_speed >= desired_height then 449\nwhen ((up_speed - down_speed) * 449) + up_speed >= desired_height then 450\nwhen ((up_speed - down_speed) * 450) + up_speed >= desired_height then 451\nwhen ((up_speed - down_speed) * 451) + up_speed >= desired_height then 452\nwhen ((up_speed - down_speed) * 452) + up_speed >= desired_height then 453\nwhen ((up_speed - down_speed) * 453) + up_speed >= desired_height then 454\nwhen ((up_speed - down_speed) * 454) + up_speed >= desired_height then 455\nwhen ((up_speed - down_speed) * 455) + up_speed >= desired_height then 456\nwhen ((up_speed - down_speed) * 456) + up_speed >= desired_height then 457\nwhen ((up_speed - down_speed) * 457) + up_speed >= desired_height then 458\nwhen ((up_speed - down_speed) * 458) + up_speed >= desired_height then 459\nwhen ((up_speed - down_speed) * 459) + up_speed >= desired_height then 460\nwhen ((up_speed - down_speed) * 460) + up_speed >= desired_height then 461\nwhen ((up_speed - down_speed) * 461) + up_speed >= desired_height then 462\nwhen ((up_speed - down_speed) * 462) + up_speed >= desired_height then 463\nwhen ((up_speed - down_speed) * 463) + up_speed >= desired_height then 464\nwhen ((up_speed - down_speed) * 464) + up_speed >= desired_height then 465\nwhen ((up_speed - down_speed) * 465) + up_speed >= desired_height then 466\nwhen ((up_speed - down_speed) * 466) + up_speed >= desired_height then 467\nwhen ((up_speed - down_speed) * 467) + up_speed >= desired_height then 468\nwhen ((up_speed - down_speed) * 468) + up_speed >= desired_height then 469\nwhen ((up_speed - down_speed) * 469) + up_speed >= desired_height then 470\nwhen ((up_speed - down_speed) * 470) + up_speed >= desired_height then 471\nwhen ((up_speed - down_speed) * 471) + up_speed >= desired_height then 472\nwhen ((up_speed - down_speed) * 472) + up_speed >= desired_height then 473\nwhen ((up_speed - down_speed) * 473) + up_speed >= desired_height then 474\nwhen ((up_speed - down_speed) * 474) + up_speed >= desired_height then 475\nwhen ((up_speed - down_speed) * 475) + up_speed >= desired_height then 476\nwhen ((up_speed - down_speed) * 476) + up_speed >= desired_height then 477\nwhen ((up_speed - down_speed) * 477) + up_speed >= desired_height then 478\nwhen ((up_speed - down_speed) * 478) + up_speed >= desired_height then 479\nwhen ((up_speed - down_speed) * 479) + up_speed >= desired_height then 480\nwhen ((up_speed - down_speed) * 480) + up_speed >= desired_height then 481\nwhen ((up_speed - down_speed) * 481) + up_speed >= desired_height then 482\nwhen ((up_speed - down_speed) * 482) + up_speed >= desired_height then 483\nwhen ((up_speed - down_speed) * 483) + up_speed >= desired_height then 484\nwhen ((up_speed - down_speed) * 484) + up_speed >= desired_height then 485\nwhen ((up_speed - down_speed) * 485) + up_speed >= desired_height then 486\nwhen ((up_speed - down_speed) * 486) + up_speed >= desired_height then 487\nwhen ((up_speed - down_speed) * 487) + up_speed >= desired_height then 488\nwhen ((up_speed - down_speed) * 488) + up_speed >= desired_height then 489\nwhen ((up_speed - down_speed) * 489) + up_speed >= desired_height then 490\nwhen ((up_speed - down_speed) * 490) + up_speed >= desired_height then 491\nwhen ((up_speed - down_speed) * 491) + up_speed >= desired_height then 492\nwhen ((up_speed - down_speed) * 492) + up_speed >= desired_height then 493\nwhen ((up_speed - down_speed) * 493) + up_speed >= desired_height then 494\nwhen ((up_speed - down_speed) * 494) + up_speed >= desired_height then 495\nwhen ((up_speed - down_speed) * 495) + up_speed >= desired_height then 496\nwhen ((up_speed - down_speed) * 496) + up_speed >= desired_height then 497\nwhen ((up_speed - down_speed) * 497) + up_speed >= desired_height then 498\nwhen ((up_speed - down_speed) * 498) + up_speed >= desired_height then 499\nwhen ((up_speed - down_speed) * 499) + up_speed >= desired_height then 500\nwhen ((up_speed - down_speed) * 500) + up_speed >= desired_height then 501\nwhen ((up_speed - down_speed) * 501) + up_speed >= desired_height then 502\nwhen ((up_speed - down_speed) * 502) + up_speed >= desired_height then 503\nwhen ((up_speed - down_speed) * 503) + up_speed >= desired_height then 504\nwhen ((up_speed - down_speed) * 504) + up_speed >= desired_height then 505\nwhen ((up_speed - down_speed) * 505) + up_speed >= desired_height then 506\nwhen ((up_speed - down_speed) * 506) + up_speed >= desired_height then 507\nwhen ((up_speed - down_speed) * 507) + up_speed >= desired_height then 508\nwhen ((up_speed - down_speed) * 508) + up_speed >= desired_height then 509\nwhen ((up_speed - down_speed) * 509) + up_speed >= desired_height then 510\nwhen ((up_speed - down_speed) * 510) + up_speed >= desired_height then 511\nwhen ((up_speed - down_speed) * 511) + up_speed >= desired_height then 512\nwhen ((up_speed - down_speed) * 512) + up_speed >= desired_height then 513\nwhen ((up_speed - down_speed) * 513) + up_speed >= desired_height then 514\nwhen ((up_speed - down_speed) * 514) + up_speed >= desired_height then 515\nwhen ((up_speed - down_speed) * 515) + up_speed >= desired_height then 516\nwhen ((up_speed - down_speed) * 516) + up_speed >= desired_height then 517\nwhen ((up_speed - down_speed) * 517) + up_speed >= desired_height then 518\nwhen ((up_speed - down_speed) * 518) + up_speed >= desired_height then 519\nwhen ((up_speed - down_speed) * 519) + up_speed >= desired_height then 520\nwhen ((up_speed - down_speed) * 520) + up_speed >= desired_height then 521\nwhen ((up_speed - down_speed) * 521) + up_speed >= desired_height then 522\nwhen ((up_speed - down_speed) * 522) + up_speed >= desired_height then 523\nwhen ((up_speed - down_speed) * 523) + up_speed >= desired_height then 524\nwhen ((up_speed - down_speed) * 524) + up_speed >= desired_height then 525\nwhen ((up_speed - down_speed) * 525) + up_speed >= desired_height then 526\nwhen ((up_speed - down_speed) * 526) + up_speed >= desired_height then 527\nwhen ((up_speed - down_speed) * 527) + up_speed >= desired_height then 528\nwhen ((up_speed - down_speed) * 528) + up_speed >= desired_height then 529\nwhen ((up_speed - down_speed) * 529) + up_speed >= desired_height then 530\nwhen ((up_speed - down_speed) * 530) + up_speed >= desired_height then 531\nwhen ((up_speed - down_speed) * 531) + up_speed >= desired_height then 532\nwhen ((up_speed - down_speed) * 532) + up_speed >= desired_height then 533\nwhen ((up_speed - down_speed) * 533) + up_speed >= desired_height then 534\nwhen ((up_speed - down_speed) * 534) + up_speed >= desired_height then 535\nwhen ((up_speed - down_speed) * 535) + up_speed >= desired_height then 536\nwhen ((up_speed - down_speed) * 536) + up_speed >= desired_height then 537\nwhen ((up_speed - down_speed) * 537) + up_speed >= desired_height then 538\nwhen ((up_speed - down_speed) * 538) + up_speed >= desired_height then 539\nwhen ((up_speed - down_speed) * 539) + up_speed >= desired_height then 540\nwhen ((up_speed - down_speed) * 540) + up_speed >= desired_height then 541\nwhen ((up_speed - down_speed) * 541) + up_speed >= desired_height then 542\nwhen ((up_speed - down_speed) * 542) + up_speed >= desired_height then 543\nwhen ((up_speed - down_speed) * 543) + up_speed >= desired_height then 544\nwhen ((up_speed - down_speed) * 544) + up_speed >= desired_height then 545\nwhen ((up_speed - down_speed) * 545) + up_speed >= desired_height then 546\nwhen ((up_speed - down_speed) * 546) + up_speed >= desired_height then 547\nwhen ((up_speed - down_speed) * 547) + up_speed >= desired_height then 548\nwhen ((up_speed - down_speed) * 548) + up_speed >= desired_height then 549\nwhen ((up_speed - down_speed) * 549) + up_speed >= desired_height then 550\nwhen ((up_speed - down_speed) * 550) + up_speed >= desired_height then 551\nwhen ((up_speed - down_speed) * 551) + up_speed >= desired_height then 552\nwhen ((up_speed - down_speed) * 552) + up_speed >= desired_height then 553\nwhen ((up_speed - down_speed) * 553) + up_speed >= desired_height then 554\nwhen ((up_speed - down_speed) * 554) + up_speed >= desired_height then 555\nwhen ((up_speed - down_speed) * 555) + up_speed >= desired_height then 556\nwhen ((up_speed - down_speed) * 556) + up_speed >= desired_height then 557\nwhen ((up_speed - down_speed) * 557) + up_speed >= desired_height then 558\nwhen ((up_speed - down_speed) * 558) + up_speed >= desired_height then 559\nwhen ((up_speed - down_speed) * 559) + up_speed >= desired_height then 560\nwhen ((up_speed - down_speed) * 560) + up_speed >= desired_height then 561\nwhen ((up_speed - down_speed) * 561) + up_speed >= desired_height then 562\nwhen ((up_speed - down_speed) * 562) + up_speed >= desired_height then 563\nwhen ((up_speed - down_speed) * 563) + up_speed >= desired_height then 564\nwhen ((up_speed - down_speed) * 564) + up_speed >= desired_height then 565\nwhen ((up_speed - down_speed) * 565) + up_speed >= desired_height then 566\nwhen ((up_speed - down_speed) * 566) + up_speed >= desired_height then 567\nwhen ((up_speed - down_speed) * 567) + up_speed >= desired_height then 568\nwhen ((up_speed - down_speed) * 568) + up_speed >= desired_height then 569\nwhen ((up_speed - down_speed) * 569) + up_speed >= desired_height then 570\nwhen ((up_speed - down_speed) * 570) + up_speed >= desired_height then 571\nwhen ((up_speed - down_speed) * 571) + up_speed >= desired_height then 572\nwhen ((up_speed - down_speed) * 572) + up_speed >= desired_height then 573\nwhen ((up_speed - down_speed) * 573) + up_speed >= desired_height then 574\nwhen ((up_speed - down_speed) * 574) + up_speed >= desired_height then 575\nwhen ((up_speed - down_speed) * 575) + up_speed >= desired_height then 576\nwhen ((up_speed - down_speed) * 576) + up_speed >= desired_height then 577\nwhen ((up_speed - down_speed) * 577) + up_speed >= desired_height then 578\nwhen ((up_speed - down_speed) * 578) + up_speed >= desired_height then 579\nwhen ((up_speed - down_speed) * 579) + up_speed >= desired_height then 580\nwhen ((up_speed - down_speed) * 580) + up_speed >= desired_height then 581\nwhen ((up_speed - down_speed) * 581) + up_speed >= desired_height then 582\nwhen ((up_speed - down_speed) * 582) + up_speed >= desired_height then 583\nwhen ((up_speed - down_speed) * 583) + up_speed >= desired_height then 584\nwhen ((up_speed - down_speed) * 584) + up_speed >= desired_height then 585\nwhen ((up_speed - down_speed) * 585) + up_speed >= desired_height then 586\nwhen ((up_speed - down_speed) * 586) + up_speed >= desired_height then 587\nwhen ((up_speed - down_speed) * 587) + up_speed >= desired_height then 588\nwhen ((up_speed - down_speed) * 588) + up_speed >= desired_height then 589\nwhen ((up_speed - down_speed) * 589) + up_speed >= desired_height then 590\nwhen ((up_speed - down_speed) * 590) + up_speed >= desired_height then 591\nwhen ((up_speed - down_speed) * 591) + up_speed >= desired_height then 592\nwhen ((up_speed - down_speed) * 592) + up_speed >= desired_height then 593\nwhen ((up_speed - down_speed) * 593) + up_speed >= desired_height then 594\nwhen ((up_speed - down_speed) * 594) + up_speed >= desired_height then 595\nwhen ((up_speed - down_speed) * 595) + up_speed >= desired_height then 596\nwhen ((up_speed - down_speed) * 596) + up_speed >= desired_height then 597\nwhen ((up_speed - down_speed) * 597) + up_speed >= desired_height then 598\nwhen ((up_speed - down_speed) * 598) + up_speed >= desired_height then 599\nwhen ((up_speed - down_speed) * 599) + up_speed >= desired_height then 600\nwhen ((up_speed - down_speed) * 600) + up_speed >= desired_height then 601\nwhen ((up_speed - down_speed) * 601) + up_speed >= desired_height then 602\nwhen ((up_speed - down_speed) * 602) + up_speed >= desired_height then 603\nwhen ((up_speed - down_speed) * 603) + up_speed >= desired_height then 604\nwhen ((up_speed - down_speed) * 604) + up_speed >= desired_height then 605\nwhen ((up_speed - down_speed) * 605) + up_speed >= desired_height then 606\nwhen ((up_speed - down_speed) * 606) + up_speed >= desired_height then 607\nwhen ((up_speed - down_speed) * 607) + up_speed >= desired_height then 608\nwhen ((up_speed - down_speed) * 608) + up_speed >= desired_height then 609\nwhen ((up_speed - down_speed) * 609) + up_speed >= desired_height then 610\nwhen ((up_speed - down_speed) * 610) + up_speed >= desired_height then 611\nwhen ((up_speed - down_speed) * 611) + up_speed >= desired_height then 612\nwhen ((up_speed - down_speed) * 612) + up_speed >= desired_height then 613\nwhen ((up_speed - down_speed) * 613) + up_speed >= desired_height then 614\nwhen ((up_speed - down_speed) * 614) + up_speed >= desired_height then 615\nwhen ((up_speed - down_speed) * 615) + up_speed >= desired_height then 616\nwhen ((up_speed - down_speed) * 616) + up_speed >= desired_height then 617\nwhen ((up_speed - down_speed) * 617) + up_speed >= desired_height then 618\nwhen ((up_speed - down_speed) * 618) + up_speed >= desired_height then 619\nwhen ((up_speed - down_speed) * 619) + up_speed >= desired_height then 620\nwhen ((up_speed - down_speed) * 620) + up_speed >= desired_height then 621\nwhen ((up_speed - down_speed) * 621) + up_speed >= desired_height then 622\nwhen ((up_speed - down_speed) * 622) + up_speed >= desired_height then 623\nwhen ((up_speed - down_speed) * 623) + up_speed >= desired_height then 624\nwhen ((up_speed - down_speed) * 624) + up_speed >= desired_height then 625\nwhen ((up_speed - down_speed) * 625) + up_speed >= desired_height then 626\nwhen ((up_speed - down_speed) * 626) + up_speed >= desired_height then 627\nwhen ((up_speed - down_speed) * 627) + up_speed >= desired_height then 628\nwhen ((up_speed - down_speed) * 628) + up_speed >= desired_height then 629\nwhen ((up_speed - down_speed) * 629) + up_speed >= desired_height then 630\nwhen ((up_speed - down_speed) * 630) + up_speed >= desired_height then 631\nwhen ((up_speed - down_speed) * 631) + up_speed >= desired_height then 632\nwhen ((up_speed - down_speed) * 632) + up_speed >= desired_height then 633\nwhen ((up_speed - down_speed) * 633) + up_speed >= desired_height then 634\nwhen ((up_speed - down_speed) * 634) + up_speed >= desired_height then 635\nwhen ((up_speed - down_speed) * 635) + up_speed >= desired_height then 636\nwhen ((up_speed - down_speed) * 636) + up_speed >= desired_height then 637\nwhen ((up_speed - down_speed) * 637) + up_speed >= desired_height then 638\nwhen ((up_speed - down_speed) * 638) + up_speed >= desired_height then 639\nwhen ((up_speed - down_speed) * 639) + up_speed >= desired_height then 640\nwhen ((up_speed - down_speed) * 640) + up_speed >= desired_height then 641\nwhen ((up_speed - down_speed) * 641) + up_speed >= desired_height then 642\nwhen ((up_speed - down_speed) * 642) + up_speed >= desired_height then 643\nwhen ((up_speed - down_speed) * 643) + up_speed >= desired_height then 644\nwhen ((up_speed - down_speed) * 644) + up_speed >= desired_height then 645\nwhen ((up_speed - down_speed) * 645) + up_speed >= desired_height then 646\nwhen ((up_speed - down_speed) * 646) + up_speed >= desired_height then 647\nwhen ((up_speed - down_speed) * 647) + up_speed >= desired_height then 648\nwhen ((up_speed - down_speed) * 648) + up_speed >= desired_height then 649\nwhen ((up_speed - down_speed) * 649) + up_speed >= desired_height then 650\nwhen ((up_speed - down_speed) * 650) + up_speed >= desired_height then 651\nwhen ((up_speed - down_speed) * 651) + up_speed >= desired_height then 652\nwhen ((up_speed - down_speed) * 652) + up_speed >= desired_height then 653\nwhen ((up_speed - down_speed) * 653) + up_speed >= desired_height then 654\nwhen ((up_speed - down_speed) * 654) + up_speed >= desired_height then 655\nwhen ((up_speed - down_speed) * 655) + up_speed >= desired_height then 656\nwhen ((up_speed - down_speed) * 656) + up_speed >= desired_height then 657\nwhen ((up_speed - down_speed) * 657) + up_speed >= desired_height then 658\nwhen ((up_speed - down_speed) * 658) + up_speed >= desired_height then 659\nwhen ((up_speed - down_speed) * 659) + up_speed >= desired_height then 660\nwhen ((up_speed - down_speed) * 660) + up_speed >= desired_height then 661\nwhen ((up_speed - down_speed) * 661) + up_speed >= desired_height then 662\nwhen ((up_speed - down_speed) * 662) + up_speed >= desired_height then 663\nwhen ((up_speed - down_speed) * 663) + up_speed >= desired_height then 664\nwhen ((up_speed - down_speed) * 664) + up_speed >= desired_height then 665\nwhen ((up_speed - down_speed) * 665) + up_speed >= desired_height then 666\nwhen ((up_speed - down_speed) * 666) + up_speed >= desired_height then 667\nwhen ((up_speed - down_speed) * 667) + up_speed >= desired_height then 668\nwhen ((up_speed - down_speed) * 668) + up_speed >= desired_height then 669\nwhen ((up_speed - down_speed) * 669) + up_speed >= desired_height then 670\nwhen ((up_speed - down_speed) * 670) + up_speed >= desired_height then 671\nwhen ((up_speed - down_speed) * 671) + up_speed >= desired_height then 672\nwhen ((up_speed - down_speed) * 672) + up_speed >= desired_height then 673\nwhen ((up_speed - down_speed) * 673) + up_speed >= desired_height then 674\nwhen ((up_speed - down_speed) * 674) + up_speed >= desired_height then 675\nwhen ((up_speed - down_speed) * 675) + up_speed >= desired_height then 676\nwhen ((up_speed - down_speed) * 676) + up_speed >= desired_height then 677\nwhen ((up_speed - down_speed) * 677) + up_speed >= desired_height then 678\nwhen ((up_speed - down_speed) * 678) + up_speed >= desired_height then 679\nwhen ((up_speed - down_speed) * 679) + up_speed >= desired_height then 680\nwhen ((up_speed - down_speed) * 680) + up_speed >= desired_height then 681\nwhen ((up_speed - down_speed) * 681) + up_speed >= desired_height then 682\nwhen ((up_speed - down_speed) * 682) + up_speed >= desired_height then 683\nwhen ((up_speed - down_speed) * 683) + up_speed >= desired_height then 684\nwhen ((up_speed - down_speed) * 684) + up_speed >= desired_height then 685\nwhen ((up_speed - down_speed) * 685) + up_speed >= desired_height then 686\nwhen ((up_speed - down_speed) * 686) + up_speed >= desired_height then 687\nwhen ((up_speed - down_speed) * 687) + up_speed >= desired_height then 688\nwhen ((up_speed - down_speed) * 688) + up_speed >= desired_height then 689\nwhen ((up_speed - down_speed) * 689) + up_speed >= desired_height then 690\nwhen ((up_speed - down_speed) * 690) + up_speed >= desired_height then 691\nwhen ((up_speed - down_speed) * 691) + up_speed >= desired_height then 692\nwhen ((up_speed - down_speed) * 692) + up_speed >= desired_height then 693\nwhen ((up_speed - down_speed) * 693) + up_speed >= desired_height then 694\nwhen ((up_speed - down_speed) * 694) + up_speed >= desired_height then 695\nwhen ((up_speed - down_speed) * 695) + up_speed >= desired_height then 696\nwhen ((up_speed - down_speed) * 696) + up_speed >= desired_height then 697\nwhen ((up_speed - down_speed) * 697) + up_speed >= desired_height then 698\nwhen ((up_speed - down_speed) * 698) + up_speed >= desired_height then 699\nwhen ((up_speed - down_speed) * 699) + up_speed >= desired_height then 700\nwhen ((up_speed - down_speed) * 700) + up_speed >= desired_height then 701\nwhen ((up_speed - down_speed) * 701) + up_speed >= desired_height then 702\nwhen ((up_speed - down_speed) * 702) + up_speed >= desired_height then 703\nwhen ((up_speed - down_speed) * 703) + up_speed >= desired_height then 704\nwhen ((up_speed - down_speed) * 704) + up_speed >= desired_height then 705\nwhen ((up_speed - down_speed) * 705) + up_speed >= desired_height then 706\nwhen ((up_speed - down_speed) * 706) + up_speed >= desired_height then 707\nwhen ((up_speed - down_speed) * 707) + up_speed >= desired_height then 708\nwhen ((up_speed - down_speed) * 708) + up_speed >= desired_height then 709\nwhen ((up_speed - down_speed) * 709) + up_speed >= desired_height then 710\nwhen ((up_speed - down_speed) * 710) + up_speed >= desired_height then 711\nwhen ((up_speed - down_speed) * 711) + up_speed >= desired_height then 712\nwhen ((up_speed - down_speed) * 712) + up_speed >= desired_height then 713\nwhen ((up_speed - down_speed) * 713) + up_speed >= desired_height then 714\nwhen ((up_speed - down_speed) * 714) + up_speed >= desired_height then 715\nwhen ((up_speed - down_speed) * 715) + up_speed >= desired_height then 716\nwhen ((up_speed - down_speed) * 716) + up_speed >= desired_height then 717\nwhen ((up_speed - down_speed) * 717) + up_speed >= desired_height then 718\nwhen ((up_speed - down_speed) * 718) + up_speed >= desired_height then 719\nwhen ((up_speed - down_speed) * 719) + up_speed >= desired_height then 720\nwhen ((up_speed - down_speed) * 720) + up_speed >= desired_height then 721\nwhen ((up_speed - down_speed) * 721) + up_speed >= desired_height then 722\nwhen ((up_speed - down_speed) * 722) + up_speed >= desired_height then 723\nwhen ((up_speed - down_speed) * 723) + up_speed >= desired_height then 724\nwhen ((up_speed - down_speed) * 724) + up_speed >= desired_height then 725\nwhen ((up_speed - down_speed) * 725) + up_speed >= desired_height then 726\nwhen ((up_speed - down_speed) * 726) + up_speed >= desired_height then 727\nwhen ((up_speed - down_speed) * 727) + up_speed >= desired_height then 728\nwhen ((up_speed - down_speed) * 728) + up_speed >= desired_height then 729\nwhen ((up_speed - down_speed) * 729) + up_speed >= desired_height then 730\nwhen ((up_speed - down_speed) * 730) + up_speed >= desired_height then 731\nwhen ((up_speed - down_speed) * 731) + up_speed >= desired_height then 732\nwhen ((up_speed - down_speed) * 732) + up_speed >= desired_height then 733\nwhen ((up_speed - down_speed) * 733) + up_speed >= desired_height then 734\nwhen ((up_speed - down_speed) * 734) + up_speed >= desired_height then 735\nwhen ((up_speed - down_speed) * 735) + up_speed >= desired_height then 736\nwhen ((up_speed - down_speed) * 736) + up_speed >= desired_height then 737\nwhen ((up_speed - down_speed) * 737) + up_speed >= desired_height then 738\nwhen ((up_speed - down_speed) * 738) + up_speed >= desired_height then 739\nwhen ((up_speed - down_speed) * 739) + up_speed >= desired_height then 740\nwhen ((up_speed - down_speed) * 740) + up_speed >= desired_height then 741\nwhen ((up_speed - down_speed) * 741) + up_speed >= desired_height then 742\nwhen ((up_speed - down_speed) * 742) + up_speed >= desired_height then 743\nwhen ((up_speed - down_speed) * 743) + up_speed >= desired_height then 744\nwhen ((up_speed - down_speed) * 744) + up_speed >= desired_height then 745\nwhen ((up_speed - down_speed) * 745) + up_speed >= desired_height then 746\nwhen ((up_speed - down_speed) * 746) + up_speed >= desired_height then 747\nwhen ((up_speed - down_speed) * 747) + up_speed >= desired_height then 748\nwhen ((up_speed - down_speed) * 748) + up_speed >= desired_height then 749\nwhen ((up_speed - down_speed) * 749) + up_speed >= desired_height then 750\nwhen ((up_speed - down_speed) * 750) + up_speed >= desired_height then 751\nwhen ((up_speed - down_speed) * 751) + up_speed >= desired_height then 752\nwhen ((up_speed - down_speed) * 752) + up_speed >= desired_height then 753\nwhen ((up_speed - down_speed) * 753) + up_speed >= desired_height then 754\nwhen ((up_speed - down_speed) * 754) + up_speed >= desired_height then 755\nwhen ((up_speed - down_speed) * 755) + up_speed >= desired_height then 756\nwhen ((up_speed - down_speed) * 756) + up_speed >= desired_height then 757\nwhen ((up_speed - down_speed) * 757) + up_speed >= desired_height then 758\nwhen ((up_speed - down_speed) * 758) + up_speed >= desired_height then 759\nwhen ((up_speed - down_speed) * 759) + up_speed >= desired_height then 760\nwhen ((up_speed - down_speed) * 760) + up_speed >= desired_height then 761\nwhen ((up_speed - down_speed) * 761) + up_speed >= desired_height then 762\nwhen ((up_speed - down_speed) * 762) + up_speed >= desired_height then 763\nwhen ((up_speed - down_speed) * 763) + up_speed >= desired_height then 764\nwhen ((up_speed - down_speed) * 764) + up_speed >= desired_height then 765\nwhen ((up_speed - down_speed) * 765) + up_speed >= desired_height then 766\nwhen ((up_speed - down_speed) * 766) + up_speed >= desired_height then 767\nwhen ((up_speed - down_speed) * 767) + up_speed >= desired_height then 768\nwhen ((up_speed - down_speed) * 768) + up_speed >= desired_height then 769\nwhen ((up_speed - down_speed) * 769) + up_speed >= desired_height then 770\nwhen ((up_speed - down_speed) * 770) + up_speed >= desired_height then 771\nwhen ((up_speed - down_speed) * 771) + up_speed >= desired_height then 772\nwhen ((up_speed - down_speed) * 772) + up_speed >= desired_height then 773\nwhen ((up_speed - down_speed) * 773) + up_speed >= desired_height then 774\nwhen ((up_speed - down_speed) * 774) + up_speed >= desired_height then 775\nwhen ((up_speed - down_speed) * 775) + up_speed >= desired_height then 776\nwhen ((up_speed - down_speed) * 776) + up_speed >= desired_height then 777\nwhen ((up_speed - down_speed) * 777) + up_speed >= desired_height then 778\nwhen ((up_speed - down_speed) * 778) + up_speed >= desired_height then 779\nwhen ((up_speed - down_speed) * 779) + up_speed >= desired_height then 780\nwhen ((up_speed - down_speed) * 780) + up_speed >= desired_height then 781\nwhen ((up_speed - down_speed) * 781) + up_speed >= desired_height then 782\nwhen ((up_speed - down_speed) * 782) + up_speed >= desired_height then 783\nwhen ((up_speed - down_speed) * 783) + up_speed >= desired_height then 784\nwhen ((up_speed - down_speed) * 784) + up_speed >= desired_height then 785\nwhen ((up_speed - down_speed) * 785) + up_speed >= desired_height then 786\nwhen ((up_speed - down_speed) * 786) + up_speed >= desired_height then 787\nwhen ((up_speed - down_speed) * 787) + up_speed >= desired_height then 788\nwhen ((up_speed - down_speed) * 788) + up_speed >= desired_height then 789\nwhen ((up_speed - down_speed) * 789) + up_speed >= desired_height then 790\nwhen ((up_speed - down_speed) * 790) + up_speed >= desired_height then 791\nwhen ((up_speed - down_speed) * 791) + up_speed >= desired_height then 792\nwhen ((up_speed - down_speed) * 792) + up_speed >= desired_height then 793\nwhen ((up_speed - down_speed) * 793) + up_speed >= desired_height then 794\nwhen ((up_speed - down_speed) * 794) + up_speed >= desired_height then 795\nwhen ((up_speed - down_speed) * 795) + up_speed >= desired_height then 796\nwhen ((up_speed - down_speed) * 796) + up_speed >= desired_height then 797\nwhen ((up_speed - down_speed) * 797) + up_speed >= desired_height then 798\nwhen ((up_speed - down_speed) * 798) + up_speed >= desired_height then 799\nwhen ((up_speed - down_speed) * 799) + up_speed >= desired_height then 800\nwhen ((up_speed - down_speed) * 800) + up_speed >= desired_height then 801\nwhen ((up_speed - down_speed) * 801) + up_speed >= desired_height then 802\nwhen ((up_speed - down_speed) * 802) + up_speed >= desired_height then 803\nwhen ((up_speed - down_speed) * 803) + up_speed >= desired_height then 804\nwhen ((up_speed - down_speed) * 804) + up_speed >= desired_height then 805\nwhen ((up_speed - down_speed) * 805) + up_speed >= desired_height then 806\nwhen ((up_speed - down_speed) * 806) + up_speed >= desired_height then 807\nwhen ((up_speed - down_speed) * 807) + up_speed >= desired_height then 808\nwhen ((up_speed - down_speed) * 808) + up_speed >= desired_height then 809\nwhen ((up_speed - down_speed) * 809) + up_speed >= desired_height then 810\nwhen ((up_speed - down_speed) * 810) + up_speed >= desired_height then 811\nwhen ((up_speed - down_speed) * 811) + up_speed >= desired_height then 812\nwhen ((up_speed - down_speed) * 812) + up_speed >= desired_height then 813\nwhen ((up_speed - down_speed) * 813) + up_speed >= desired_height then 814\nwhen ((up_speed - down_speed) * 814) + up_speed >= desired_height then 815\nwhen ((up_speed - down_speed) * 815) + up_speed >= desired_height then 816\nwhen ((up_speed - down_speed) * 816) + up_speed >= desired_height then 817\nwhen ((up_speed - down_speed) * 817) + up_speed >= desired_height then 818\nwhen ((up_speed - down_speed) * 818) + up_speed >= desired_height then 819\nwhen ((up_speed - down_speed) * 819) + up_speed >= desired_height then 820\nwhen ((up_speed - down_speed) * 820) + up_speed >= desired_height then 821\nwhen ((up_speed - down_speed) * 821) + up_speed >= desired_height then 822\nwhen ((up_speed - down_speed) * 822) + up_speed >= desired_height then 823\nwhen ((up_speed - down_speed) * 823) + up_speed >= desired_height then 824\nwhen ((up_speed - down_speed) * 824) + up_speed >= desired_height then 825\nwhen ((up_speed - down_speed) * 825) + up_speed >= desired_height then 826\nwhen ((up_speed - down_speed) * 826) + up_speed >= desired_height then 827\nwhen ((up_speed - down_speed) * 827) + up_speed >= desired_height then 828\nwhen ((up_speed - down_speed) * 828) + up_speed >= desired_height then 829\nwhen ((up_speed - down_speed) * 829) + up_speed >= desired_height then 830\nwhen ((up_speed - down_speed) * 830) + up_speed >= desired_height then 831\nwhen ((up_speed - down_speed) * 831) + up_speed >= desired_height then 832\nwhen ((up_speed - down_speed) * 832) + up_speed >= desired_height then 833\nwhen ((up_speed - down_speed) * 833) + up_speed >= desired_height then 834\nwhen ((up_speed - down_speed) * 834) + up_speed >= desired_height then 835\nwhen ((up_speed - down_speed) * 835) + up_speed >= desired_height then 836\nwhen ((up_speed - down_speed) * 836) + up_speed >= desired_height then 837\nwhen ((up_speed - down_speed) * 837) + up_speed >= desired_height then 838\nwhen ((up_speed - down_speed) * 838) + up_speed >= desired_height then 839\nwhen ((up_speed - down_speed) * 839) + up_speed >= desired_height then 840\nwhen ((up_speed - down_speed) * 840) + up_speed >= desired_height then 841\nwhen ((up_speed - down_speed) * 841) + up_speed >= desired_height then 842\nwhen ((up_speed - down_speed) * 842) + up_speed >= desired_height then 843\nwhen ((up_speed - down_speed) * 843) + up_speed >= desired_height then 844\nwhen ((up_speed - down_speed) * 844) + up_speed >= desired_height then 845\nwhen ((up_speed - down_speed) * 845) + up_speed >= desired_height then 846\nwhen ((up_speed - down_speed) * 846) + up_speed >= desired_height then 847\nwhen ((up_speed - down_speed) * 847) + up_speed >= desired_height then 848\nwhen ((up_speed - down_speed) * 848) + up_speed >= desired_height then 849\nwhen ((up_speed - down_speed) * 849) + up_speed >= desired_height then 850\nwhen ((up_speed - down_speed) * 850) + up_speed >= desired_height then 851\nwhen ((up_speed - down_speed) * 851) + up_speed >= desired_height then 852\nwhen ((up_speed - down_speed) * 852) + up_speed >= desired_height then 853\nwhen ((up_speed - down_speed) * 853) + up_speed >= desired_height then 854\nwhen ((up_speed - down_speed) * 854) + up_speed >= desired_height then 855\nwhen ((up_speed - down_speed) * 855) + up_speed >= desired_height then 856\nwhen ((up_speed - down_speed) * 856) + up_speed >= desired_height then 857\nwhen ((up_speed - down_speed) * 857) + up_speed >= desired_height then 858\nwhen ((up_speed - down_speed) * 858) + up_speed >= desired_height then 859\nwhen ((up_speed - down_speed) * 859) + up_speed >= desired_height then 860\nwhen ((up_speed - down_speed) * 860) + up_speed >= desired_height then 861\nwhen ((up_speed - down_speed) * 861) + up_speed >= desired_height then 862\nwhen ((up_speed - down_speed) * 862) + up_speed >= desired_height then 863\nwhen ((up_speed - down_speed) * 863) + up_speed >= desired_height then 864\nwhen ((up_speed - down_speed) * 864) + up_speed >= desired_height then 865\nwhen ((up_speed - down_speed) * 865) + up_speed >= desired_height then 866\nwhen ((up_speed - down_speed) * 866) + up_speed >= desired_height then 867\nwhen ((up_speed - down_speed) * 867) + up_speed >= desired_height then 868\nwhen ((up_speed - down_speed) * 868) + up_speed >= desired_height then 869\nwhen ((up_speed - down_speed) * 869) + up_speed >= desired_height then 870\nwhen ((up_speed - down_speed) * 870) + up_speed >= desired_height then 871\nwhen ((up_speed - down_speed) * 871) + up_speed >= desired_height then 872\nwhen ((up_speed - down_speed) * 872) + up_speed >= desired_height then 873\nwhen ((up_speed - down_speed) * 873) + up_speed >= desired_height then 874\nwhen ((up_speed - down_speed) * 874) + up_speed >= desired_height then 875\nwhen ((up_speed - down_speed) * 875) + up_speed >= desired_height then 876\nwhen ((up_speed - down_speed) * 876) + up_speed >= desired_height then 877\nwhen ((up_speed - down_speed) * 877) + up_speed >= desired_height then 878\nwhen ((up_speed - down_speed) * 878) + up_speed >= desired_height then 879\nwhen ((up_speed - down_speed) * 879) + up_speed >= desired_height then 880\nwhen ((up_speed - down_speed) * 880) + up_speed >= desired_height then 881\nwhen ((up_speed - down_speed) * 881) + up_speed >= desired_height then 882\nwhen ((up_speed - down_speed) * 882) + up_speed >= desired_height then 883\nwhen ((up_speed - down_speed) * 883) + up_speed >= desired_height then 884\nwhen ((up_speed - down_speed) * 884) + up_speed >= desired_height then 885\nwhen ((up_speed - down_speed) * 885) + up_speed >= desired_height then 886\nwhen ((up_speed - down_speed) * 886) + up_speed >= desired_height then 887\nwhen ((up_speed - down_speed) * 887) + up_speed >= desired_height then 888\nwhen ((up_speed - down_speed) * 888) + up_speed >= desired_height then 889\nwhen ((up_speed - down_speed) * 889) + up_speed >= desired_height then 890\nwhen ((up_speed - down_speed) * 890) + up_speed >= desired_height then 891\nwhen ((up_speed - down_speed) * 891) + up_speed >= desired_height then 892\nwhen ((up_speed - down_speed) * 892) + up_speed >= desired_height then 893\nwhen ((up_speed - down_speed) * 893) + up_speed >= desired_height then 894\nwhen ((up_speed - down_speed) * 894) + up_speed >= desired_height then 895\nwhen ((up_speed - down_speed) * 895) + up_speed >= desired_height then 896\nwhen ((up_speed - down_speed) * 896) + up_speed >= desired_height then 897\nwhen ((up_speed - down_speed) * 897) + up_speed >= desired_height then 898\nwhen ((up_speed - down_speed) * 898) + up_speed >= desired_height then 899\nwhen ((up_speed - down_speed) * 899) + up_speed >= desired_height then 900\nwhen ((up_speed - down_speed) * 900) + up_speed >= desired_height then 901\nwhen ((up_speed - down_speed) * 901) + up_speed >= desired_height then 902\nwhen ((up_speed - down_speed) * 902) + up_speed >= desired_height then 903\nwhen ((up_speed - down_speed) * 903) + up_speed >= desired_height then 904\nwhen ((up_speed - down_speed) * 904) + up_speed >= desired_height then 905\nwhen ((up_speed - down_speed) * 905) + up_speed >= desired_height then 906\nwhen ((up_speed - down_speed) * 906) + up_speed >= desired_height then 907\nwhen ((up_speed - down_speed) * 907) + up_speed >= desired_height then 908\nwhen ((up_speed - down_speed) * 908) + up_speed >= desired_height then 909\nwhen ((up_speed - down_speed) * 909) + up_speed >= desired_height then 910\nwhen ((up_speed - down_speed) * 910) + up_speed >= desired_height then 911\nwhen ((up_speed - down_speed) * 911) + up_speed >= desired_height then 912\nwhen ((up_speed - down_speed) * 912) + up_speed >= desired_height then 913\nwhen ((up_speed - down_speed) * 913) + up_speed >= desired_height then 914\nwhen ((up_speed - down_speed) * 914) + up_speed >= desired_height then 915\nwhen ((up_speed - down_speed) * 915) + up_speed >= desired_height then 916\nwhen ((up_speed - down_speed) * 916) + up_speed >= desired_height then 917\nwhen ((up_speed - down_speed) * 917) + up_speed >= desired_height then 918\nwhen ((up_speed - down_speed) * 918) + up_speed >= desired_height then 919\nwhen ((up_speed - down_speed) * 919) + up_speed >= desired_height then 920\nwhen ((up_speed - down_speed) * 920) + up_speed >= desired_height then 921\nwhen ((up_speed - down_speed) * 921) + up_speed >= desired_height then 922\nwhen ((up_speed - down_speed) * 922) + up_speed >= desired_height then 923\nwhen ((up_speed - down_speed) * 923) + up_speed >= desired_height then 924\nwhen ((up_speed - down_speed) * 924) + up_speed >= desired_height then 925\nwhen ((up_speed - down_speed) * 925) + up_speed >= desired_height then 926\nwhen ((up_speed - down_speed) * 926) + up_speed >= desired_height then 927\nwhen ((up_speed - down_speed) * 927) + up_speed >= desired_height then 928\nwhen ((up_speed - down_speed) * 928) + up_speed >= desired_height then 929\nwhen ((up_speed - down_speed) * 929) + up_speed >= desired_height then 930\nwhen ((up_speed - down_speed) * 930) + up_speed >= desired_height then 931\nwhen ((up_speed - down_speed) * 931) + up_speed >= desired_height then 932\nwhen ((up_speed - down_speed) * 932) + up_speed >= desired_height then 933\nwhen ((up_speed - down_speed) * 933) + up_speed >= desired_height then 934\nwhen ((up_speed - down_speed) * 934) + up_speed >= desired_height then 935\nwhen ((up_speed - down_speed) * 935) + up_speed >= desired_height then 936\nwhen ((up_speed - down_speed) * 936) + up_speed >= desired_height then 937\nwhen ((up_speed - down_speed) * 937) + up_speed >= desired_height then 938\nwhen ((up_speed - down_speed) * 938) + up_speed >= desired_height then 939\nwhen ((up_speed - down_speed) * 939) + up_speed >= desired_height then 940\nwhen ((up_speed - down_speed) * 940) + up_speed >= desired_height then 941\nwhen ((up_speed - down_speed) * 941) + up_speed >= desired_height then 942\nwhen ((up_speed - down_speed) * 942) + up_speed >= desired_height then 943\nwhen ((up_speed - down_speed) * 943) + up_speed >= desired_height then 944\nwhen ((up_speed - down_speed) * 944) + up_speed >= desired_height then 945\nwhen ((up_speed - down_speed) * 945) + up_speed >= desired_height then 946\nwhen ((up_speed - down_speed) * 946) + up_speed >= desired_height then 947\nwhen ((up_speed - down_speed) * 947) + up_speed >= desired_height then 948\nwhen ((up_speed - down_speed) * 948) + up_speed >= desired_height then 949\nwhen ((up_speed - down_speed) * 949) + up_speed >= desired_height then 950\nwhen ((up_speed - down_speed) * 950) + up_speed >= desired_height then 951\nwhen ((up_speed - down_speed) * 951) + up_speed >= desired_height then 952\nwhen ((up_speed - down_speed) * 952) + up_speed >= desired_height then 953\nwhen ((up_speed - down_speed) * 953) + up_speed >= desired_height then 954\nwhen ((up_speed - down_speed) * 954) + up_speed >= desired_height then 955\nwhen ((up_speed - down_speed) * 955) + up_speed >= desired_height then 956\nwhen ((up_speed - down_speed) * 956) + up_speed >= desired_height then 957\nwhen ((up_speed - down_speed) * 957) + up_speed >= desired_height then 958\nwhen ((up_speed - down_speed) * 958) + up_speed >= desired_height then 959\nwhen ((up_speed - down_speed) * 959) + up_speed >= desired_height then 960\nwhen ((up_speed - down_speed) * 960) + up_speed >= desired_height then 961\nwhen ((up_speed - down_speed) * 961) + up_speed >= desired_height then 962\nwhen ((up_speed - down_speed) * 962) + up_speed >= desired_height then 963\nwhen ((up_speed - down_speed) * 963) + up_speed >= desired_height then 964\nwhen ((up_speed - down_speed) * 964) + up_speed >= desired_height then 965\nwhen ((up_speed - down_speed) * 965) + up_speed >= desired_height then 966\nwhen ((up_speed - down_speed) * 966) + up_speed >= desired_height then 967\nwhen ((up_speed - down_speed) * 967) + up_speed >= desired_height then 968\nwhen ((up_speed - down_speed) * 968) + up_speed >= desired_height then 969\nwhen ((up_speed - down_speed) * 969) + up_speed >= desired_height then 970\nwhen ((up_speed - down_speed) * 970) + up_speed >= desired_height then 971\nwhen ((up_speed - down_speed) * 971) + up_speed >= desired_height then 972\nwhen ((up_speed - down_speed) * 972) + up_speed >= desired_height then 973\nwhen ((up_speed - down_speed) * 973) + up_speed >= desired_height then 974\nwhen ((up_speed - down_speed) * 974) + up_speed >= desired_height then 975\nwhen ((up_speed - down_speed) * 975) + up_speed >= desired_height then 976\nwhen ((up_speed - down_speed) * 976) + up_speed >= desired_height then 977\nwhen ((up_speed - down_speed) * 977) + up_speed >= desired_height then 978\nwhen ((up_speed - down_speed) * 978) + up_speed >= desired_height then 979\nwhen ((up_speed - down_speed) * 979) + up_speed >= desired_height then 980\nwhen ((up_speed - down_speed) * 980) + up_speed >= desired_height then 981\nwhen ((up_speed - down_speed) * 981) + up_speed >= desired_height then 982\nwhen ((up_speed - down_speed) * 982) + up_speed >= desired_height then 983\nwhen ((up_speed - down_speed) * 983) + up_speed >= desired_height then 984\nwhen ((up_speed - down_speed) * 984) + up_speed >= desired_height then 985\nwhen ((up_speed - down_speed) * 985) + up_speed >= desired_height then 986\nwhen ((up_speed - down_speed) * 986) + up_speed >= desired_height then 987\nwhen ((up_speed - down_speed) * 987) + up_speed >= desired_height then 988\nwhen ((up_speed - down_speed) * 988) + up_speed >= desired_height then 989\nwhen ((up_speed - down_speed) * 989) + up_speed >= desired_height then 990\nwhen ((up_speed - down_speed) * 990) + up_speed >= desired_height then 991\nwhen ((up_speed - down_speed) * 991) + up_speed >= desired_height then 992\nwhen ((up_speed - down_speed) * 992) + up_speed >= desired_height then 993\nwhen ((up_speed - down_speed) * 993) + up_speed >= desired_height then 994\nwhen ((up_speed - down_speed) * 994) + up_speed >= desired_height then 995\nwhen ((up_speed - down_speed) * 995) + up_speed >= desired_height then 996\nwhen ((up_speed - down_speed) * 996) + up_speed >= desired_height then 997\nwhen ((up_speed - down_speed) * 997) + up_speed >= desired_height then 998\nwhen ((up_speed - down_speed) * 998) + up_speed >= desired_height then 999\nwhen ((up_speed - down_speed) * 999) + up_speed >= desired_height then 1000\nend as num_days\nfrom growing_plant gp\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338993,"user_id":168,"body":"select id, greatest(1, ceil((desired_height - down_speed)::float \/ (up_speed - down_speed))::int) as num_days\nfrom growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338994,"user_id":null,"body":"CREATE OR REPLACE FUNCTION num_days(int, int, int) RETURNS int\nAS $$\nDECLARE\n  current_height int := 0;\nBEGIN\n  FOR I IN 1..($3 \/ ($2 - $1) + 1)::int LOOP\n    current_height = current_height + $2;\n    IF current_height >= $3 THEN RETURN I; END IF;\n    current_height = current_height - $1;\n  END LOOP;\nEND;\n$$ LANGUAGE plpgsql;\n\nselect id, num_days(down_speed, up_speed, desired_height)\nFROM growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338995,"user_id":645,"body":"select id, greatest(1, ceil((desired_height - down_speed) :: numeric \/ (up_speed - down_speed)) :: int) num_days from growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338996,"user_id":null,"body":"select row_number() over() as id,\n  case\n    when desired_height - up_speed <= 0\n      then 1\n    else cast(ceil(cast(desired_height - up_speed as float) \/ (up_speed - down_speed)) + 1 as int)\n  end as num_days\nfrom growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338997,"user_id":null,"body":"select id, case when desired_height > up_speed then \nceil((desired_height - down_speed) \/(up_speed-(down_speed * 1.0)))::int else 1 end\nas num_days \nfrom growing_plant;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338998,"user_id":null,"body":"select\n  id,\n  case \n    when desired_height <= up_speed then 1\n    else ceil((desired_height - up_speed)::float \/ (up_speed - down_speed))::int + 1 \n  end as num_days\nfrom growing_plant","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":338999,"user_id":null,"body":"select id, num_days\nfrom ( \n  select id, down_speed, up_speed, desired_height, \n  CASE\n    WHEN up_speed < desired_height THEN cast((1 + ceiling((cast(desired_height as float) - up_speed) \/ (up_speed - down_speed))) as int)\n    ELSE 1\n  END as num_days\n  from growing_plant\n) as x;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"589cf45835f99b2909000115":[{"id":339000,"user_id":1610,"body":"SELECT\n  CREATED_AT::DATE AS DATE,\n  COUNT(CREATED_AT) AS COUNT,\n  SUM(COUNT(CREATED_AT)) OVER (ORDER BY CREATED_AT::DATE ROWS UNBOUNDED PRECEDING)::INT AS TOTAL\nFROM\n  POSTS\nGROUP BY\n  CREATED_AT::DATE\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339001,"user_id":null,"body":"-- Replace with your SQL query\n\nSELECT created_at::date AS \"date\", COUNT(*) AS count,\n    SUM(COUNT(*)::int) OVER (ORDER BY created_at::date) AS total\n  FROM posts\n  GROUP BY created_at::date\n  ORDER BY created_at::date","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339002,"user_id":null,"body":"WITH DateCounts AS (SELECT \n                        CAST(created_at as date) as date\n                        ,COUNT(*) as Count\n                    FROM posts\n                    GROUP BY CAST(created_at as date)\n                    ORDER BY date )\n                    \nSELECT dc.date\n      ,dc.Count\n      ,SUM(dc.Count) OVER (ORDER BY date rows unbounded preceding)::INT as total\nFROM DateCounts dc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339003,"user_id":null,"body":"SELECT created_at::date AS date, count(*) AS count, (SUM(count(*)) OVER(ORDER BY created_at::date))::integer AS total\nFROM posts\nGROUP BY date\nORDER BY date;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339004,"user_id":null,"body":"select\n  date(created_at),\n  count(id),\n  sum(count(id)) over (order by date(created_at))::int as total\nfrom posts\ngroup by date\norder by date","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339005,"user_id":null,"body":"-- Replace with your SQL query\ncreate temp table tt (d  date, dcount int);\ninsert into tt\nselect cast(to_char(created_at, 'YYYY-MM-DD') as date) as date, \ncount(*)\nfrom posts\ngroup by date\norder by date;\n\nselect d as date, \ndcount as count, \nsum(dcount) over (order by d) as total\nfrom tt","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339006,"user_id":null,"body":"\n\nselect to_Date(a1.date,'yyyy-mm-dd') date , a1.count, (select count(*) \n                           from posts c where \n                           to_char(c.created_at,'yyyy-mm-dd') <= a1.date )total\n\nfrom ( select to_char(a.created_at,'yyyy-mm-dd') date , \n                count(*) count \n                from posts a\n                group by to_char(a.created_at,'yyyy-mm-dd')\n                order by 1 asc )a1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339007,"user_id":null,"body":"\n\n\nselect date,cast(count as int) count,sum (cast(count as int)) over (order by date )total from (\n select date (created_at) date , count(*)  count from posts \n group by date) d\n  \n \n order by  date \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339008,"user_id":53,"body":"select date, count, sum(count) over (order by date rows between unbounded preceding and current row)::int as total\nfrom (\n  select created_at::date as date, count(*) as count \n  from posts\n  group by date\n  ) q\norder by 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339009,"user_id":null,"body":"-- Replace with your SQL query\nSELECT created_at::date AS date, \nCOUNT(*) AS count,\nSUM(COUNT(*)) OVER (ORDER BY created_at::date)::integer as total\nFROM posts\nGROUP BY date\nORDER BY date;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"589e0837e10c4a1018000028":[{"id":339010,"user_id":null,"body":"select date_trunc('month', created_at)::date as date\n  , count(*) as count\n  , round(((100.0 \/ (lag(count(*)) over (order by date_trunc('month', created_at)::date asc))) * count(*)) -100, 1) || '%' as percent_growth \nfrom posts \ngroup by date\norder by date asc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339011,"user_id":420,"body":"WITH s as\n(\nSELECT format('%s-%s-1', date_part('year', created_at), date_part('month', created_at))::date as date,\nCOUNT(*) as count\nFROM posts\nGROUP BY date\nORDER BY date\n)\nSELECT s.date, s.count, round((((s.count::float \/ s1.count)-1) * 100)::numeric, 1) || '%' as percent_growth\nFROM s\nLEFT JOIN s as s1 ON s1.date = s.date - interval '1 month'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339012,"user_id":null,"body":"select cast(date_trunc('month', created_at) as date) as date,\n       count(id) as count,\n       round(((count(*)::numeric - lag(count(*), 1) OVER w) \n        \/ lag(count(*), 1) OVER w * 100),1)::text || '%' as percent_growth     \nfrom posts\ngroup by 1\nWINDOW w as (ORDER BY cast(date_trunc('month', created_at) as date))\norder by 1;\n       \n       \n ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339013,"user_id":1610,"body":"SELECT\n  DT AS DATE,\n  CT AS COUNT,\n  CAST(ROUND((1.0 - (CAST(CT AS NUMERIC) \/ LAG(CT, 1) OVER W)) * -100, 1) AS TEXT) || '%' AS PERCENT_GROWTH\nFROM\n  (\n    SELECT \n      DATE_TRUNC('MONTH', CREATED_AT)::DATE AS DT,\n      COUNT(1) AS CT\n    FROM\n      POSTS\n    GROUP BY\n      DATE_TRUNC('MONTH', CREATED_AT)::DATE\n  ) A    \nWINDOW \n  W AS (ORDER BY DT)\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339014,"user_id":null,"body":"WITH temporal_table AS(\nSELECT to_date(to_char(created_at, 'YYYY-MM'), 'YYYY-MM') as date, COUNT(id) as count\nFROM posts\nGROUP BY to_date(to_char(created_at, 'YYYY-MM'), 'YYYY-MM')\nORDER BY date ASC),\nnew_table AS(\nSELECT t.date, t.count, LAG(t.count, 1) \nOVER (ORDER BY t.date ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS prev_count\nFROM temporal_table as t),\nlast_table AS(\nSELECT date, count, CONCAT(cast(ROUND(100*(cast(count as decimal)-prev_count)\/prev_count,1) as varchar(5)), '%') as percent_growth\nFROM new_table)\n\nSELECT date, count, \nNULLIF(percent_growth, '%') as percent_growth\nFROM last_table\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339015,"user_id":null,"body":"select\n  date_trunc('month', created_at)::date as date,\n  count(id),\n  to_char(100 * (count(id)::numeric \/ \n    lag(count(id), 1, null)\n    over (order by date_trunc('month', created_at)::date) - 1),\n    'FM9999990.0%') as percent_growth\nfrom posts\ngroup by date\norder by date","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339016,"user_id":null,"body":"SELECT cast(date_trunc('month', created_at) as date) as date, COUNT(*) as count,round(((COUNT (*)) - lag (COUNT (*)) OVER ( ORDER BY cast(date_trunc('month', created_at) as date) )) * 100 \/ round(lag (COUNT (*)) OVER ( ORDER BY cast(date_trunc('month', created_at) as date) ),1),1) || '%' as percent_growth\nFROM posts\nGROUP BY date\nORDER BY date","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339017,"user_id":null,"body":"-- Replace with your SQL query\nwith daily as(\n  select \n    date_trunc('month', created_at)::date \"date\",\n    count(*) \"count\"\n  from posts\n  group by \"date\"\n)\n\nselect \n  \"date\",\n  \"count\",\n  TO_CHAR(100 * (1.0 * \"count\" \/ (lag(\"count\") over (partition by 1 order by \"date\")) - 1), 'FM999990.0%') \"percent_growth\"\nfrom daily  \norder by \"date\"","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339018,"user_id":null,"body":"with grouped as (\n    select\n        date_part('year', created_at) as year,\n        date_part('month', created_at) as month,\n        count(created_at) as count\n    from posts\n    group by year, month\n)\n\nselect\n    date(p.year || '-' || p.month || '-01') as date,\n    p.count as count,\n    round((p.count - r.count)::numeric \/ r.count * 100.0, 1) || '%' as percent_growth\nfrom grouped p\nleft join grouped r on \n    case r.month\n        when '12' then p.year = r.year + 1 and p.month = '01'\n        else p.year = r.year and p.month = r.month + 1 \n    end\norder by date;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339019,"user_id":null,"body":"SELECT\n    date_trunc('month', created_at)::date AS date,\n    count(created_at),\n    round(\n      ((count(created_at) - lag(count(created_at), 1) OVER(order by date_trunc('month', created_at)::date)) * 100)::numeric\n      \/\n      lag(count(created_at), 1) OVER(order by date_trunc('month', created_at)::date)::numeric\n    , 1) || '%' AS percent_growth\nFROM posts\nGROUP BY date\nORDER BY date;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"590a95eede09f87472000213":[{"id":339020,"user_id":822,"body":"SELECT name, age FROM users WHERE age >= 18;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339021,"user_id":null,"body":"SELECT * \nFROM users \nWHERE age >= 18;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339022,"user_id":null,"body":"Select * from users where age >= 18","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339023,"user_id":511,"body":"SELECT * FROM users WHERE age > 17","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339024,"user_id":null,"body":"select u.name, u.age \nfrom users as u\nwhere age >= 18","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339025,"user_id":null,"body":"SELECT name, age FROM users WHERE age > 17;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339026,"user_id":1686,"body":"select name, age from users where age >= 18","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339027,"user_id":null,"body":"Select name, age\n  From users\n Where age >= 18","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339028,"user_id":null,"body":"SELECT * FROM users\nWHERE AGE>=18","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339029,"user_id":null,"body":"drop table if exists users;\ncreate table users (\nname character varying(128) not null,\nage int not null check(age >=18)\n);\ninsert into users (name,age) values\n('a',185),\n('b',172),\n('c',133),\n('d',24);\nselect * from users;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"590ba881fe13cfdcc20001b4":[{"id":339030,"user_id":944,"body":"Select name,country from travelers where country not in ('Canada','Mexico','USA')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339031,"user_id":null,"body":"SELECT name, country FROM travelers WHERE country NOT IN ('Canada', 'Mexico', 'USA')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339032,"user_id":1610,"body":"SELECT\n  *\nFROM\n  TRAVELERS\nWHERE\n  COUNTRY NOT IN ('Mexico', 'USA', 'Canada')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339033,"user_id":null,"body":"SELECT name ,country\n  FROM travelers\n  WHERE country IS NULL\n    OR country NOT IN ('Canada' ,'Mexico' ,'USA')\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339034,"user_id":null,"body":"SELECT *\nFROM travelers\nWHERE lower(country) NOT IN ('usa', 'canada', 'mexico')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339035,"user_id":null,"body":"SELECT * from travelers\nWHERE country NOT IN ('Canada', 'Mexico', 'USA' ) ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339036,"user_id":1566,"body":"SELECT *\nFROM travelers\nWHERE country NOT IN ('Canada', 'Mexico', 'USA')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339037,"user_id":602,"body":"SELECT * FROM travelers WHERE NOT country IN ('USA', 'Mexico', 'Canada');","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339038,"user_id":null,"body":"SELECT * FROM travelers\nWHERE country != 'Canada'\nAND country != 'Mexico'\nAND country != 'USA';","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339039,"user_id":null,"body":"SELECT travelers.name, travelers.country\nFROM travelers\nWHERE LOWER(travelers.country) not in ('usa', 'mexico', 'canada')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"590cc86f7557c0494000007e":[{"id":339040,"user_id":1184,"body":"INSERT INTO participants VALUES ('mozart', '26', true);\n\nSELECT * FROM participants;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339041,"user_id":null,"body":"INSERT into participants (name, age, attending) values ('Greg', 21, true);\n\nSELECT * FROM participants;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339042,"user_id":17,"body":"INSERT INTO participants (\n  name,\n  age,\n  attending\n) VALUES (\n  'Donald',\n  21, -- I'm actually only 18 but not gonna let my age get in the way of me partying :p\n  TRUE\n);\n\nSELECT * FROM participants;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339043,"user_id":null,"body":"INSERT INTO participants (name, age, attending)\nVALUES ('Jay', '22', 'true');\n\nSELECT * FROM participants;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339044,"user_id":null,"body":"INSERT INTO participants (name, age, attending)\nVALUES ('DROP TABLE', '404', 'true');\n\nSELECT * FROM participants;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339045,"user_id":null,"body":"INSERT INTO participants VALUES('Nabil Does Want To Go Hell...', 35, 1);\n\nSELECT * FROM participants;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339046,"user_id":null,"body":"INSERT INTO participants (\"name\", \"age\", \"attending\") values ('yourself', 21, true); --Your code here\n\nSELECT * FROM participants;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339047,"user_id":2371,"body":"INSERT INTO participants VALUES ('Vladislav', 30, TRUE);\nSELECT * FROM participants;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339048,"user_id":null,"body":"INSERT INTO participants\nVALUES ('Joe',30,true);\n\nSELECT * FROM participants;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339049,"user_id":null,"body":"INSERT INTO participants (name, age, attending)\nVALUES ('Vern', 41, true); --needing to insert semicolon\nSELECT * FROM participants\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5910b0d378cc2ba91400000b":[{"id":339050,"user_id":1266,"body":"select *\nfrom students\nwhere not tuition_received;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339051,"user_id":492,"body":"SELECT * from students where tuition_received = FALSE","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339052,"user_id":822,"body":"SELECT * FROM students WHERE NOT tuition_received;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339053,"user_id":null,"body":"SELECT *\nFROM students\nWHERE tuition_received = false;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339054,"user_id":null,"body":"select name, age, semester, mentor, tuition_received from students where students.tuition_received = False;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339055,"user_id":null,"body":"SELECT *\nFROM students\nWHERE tuition_received = False","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339056,"user_id":null,"body":"select * \nfrom students\nwhere tuition_received = 'false'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339057,"user_id":null,"body":"SELECT * FROM students WHERE tuition_received=FALSE","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339058,"user_id":null,"body":"-- Your Code Here\n-- This is my solution for this problem, we can used claused WHERE for this problem when is false.\n--Then, you only need write the information that you need resolved.\nSelect name, age, semester, mentor, tuition_received from students where tuition_received = false ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339059,"user_id":null,"body":"SELECT * from students WHERE  NOT tuition_received;\n\n-- SELECT * from students WHERE  NOT students.tuition_received;\n\n-- WAY 1: \n    -- SELECT * from students \n    -- WHERE tuition_received = FALSE\n\n-- WAY 2:    \n  -- SELECT *\n  -- FROM students\n  -- WHERE students.tuition_received != TRUE;    \n\n-- WAY 3: \n  -- SELECT *FROM students\n  -- WHERE tuition_received = '0';\n\n  -- Notes: \n  -- - '0' = false\n  -- - '1' = true ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"591127cbe8b9fb05bd00004b":[{"id":339060,"user_id":822,"body":"SELECT * FROM books ORDER BY copies_sold DESC LIMIT 5;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339061,"user_id":2522,"body":"SELECT name, author, copies_sold\n  FROM books\nORDER BY copies_sold DESC \n LIMIT 5","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339062,"user_id":null,"body":"\/*\n\n1. Select the columns needed \n2. Select the table\n3. Order the list from most sold on top\n4. Use limit to show only 5 books \n\n*\/\n\nSELECT books.name, \n       books.author, \n       books.copies_sold\nFROM books\nORDER BY books.copies_sold DESC\nLIMIT 5; ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339063,"user_id":null,"body":"SELECT * FROM books\nORDER BY copies_sold DESC \nFETCH FIRST 5 ROWS ONLY;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339064,"user_id":null,"body":"-- Your Code Here\nSELECT * FROM books ORDER BY copies_sold DESC LIMIT 5;\n\n-- SQLite does this oddly from other Dbs, I expect this to work instead\n-- SELECT TOP 5 * FROM books ORDER BY copies_sold DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339065,"user_id":null,"body":"select * from books\norder by copies_sold desc\nlimit 5","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339066,"user_id":null,"body":"select name\n     , author\n     , copies_sold\n  from books\n  order by copies_sold desc\n  fetch first 5 row only\n  ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339067,"user_id":null,"body":"-- Your Code Here\nselect name, author,copies_sold from books group by name,author,copies_sold order by copies_sold desc limit 5;\n\n\n\n\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339068,"user_id":null,"body":"SELECT *\nFROM books b\nORDER BY copies_sold DESC\nLIMIT 5;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339069,"user_id":null,"body":"\/* select the columns *\/\nSELECT t.name, t.author, t.copies_sold\nFROM books as t\nORDER BY t.copies_sold DESC \/* sort by copies sold *\/\nLIMIT 5 \/* take the top 5 *\/","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"592b1e4c96cc12de1e0000b1":[{"id":339070,"user_id":2607,"body":"SELECT\n  ARRAY(\n    SELECT (\n      ARRAY (\n        SELECT matrix[j][s]\n        FROM ( SELECT generate_subscripts(matrix, 1) AS j ) foo\n      )\n    ) \n    FROM ( SELECT generate_subscripts(matrix, 2) AS s ) bar\n  ) as matrix\nFROM public.matrices m","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339071,"user_id":null,"body":"SELECT ARRAY(\nSELECT ARRAY_AGG(x ORDER BY i)\nFROM UNNEST(matrix) WITH ORDINALITY AS t(x,i)\nGROUP BY (i - 1) % ARRAY_UPPER(matrix, 2)\n) AS matrix\nFROM matrices\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339072,"user_id":null,"body":"select\n(\nreplace(replace('{{'||replace(replace(substring(split_part(matrix[1:1]::text,',',1)||split_part(matrix[2:2]::text,',',1)||split_part(matrix[3:3]::text,',',1)||split_part(matrix[4:4]::text,',',1)||split_part(matrix[5:5]::text,',',1),3),'{{',',')||'},','{}','') \n||\nreplace(replace(replace('{'||replace(split_part(matrix[1:1]::text,',',2)||','||split_part(matrix[2:2]::text,',',2)||','||split_part(matrix[3:3]::text,',',2)||','||split_part(matrix[4:4]::text,',',2)||','||split_part(matrix[5:5]::text,',',2),'{{',',')||'},','}}',''),',,',''),',}','}')\n||\nreplace(replace(replace(replace(replace(replace(replace('{'||replace(split_part(matrix[1:1]::text,',',3)||','||split_part(matrix[2:2]::text,',',3)||','||split_part(matrix[3:3]::text,',',3)||','||split_part(matrix[4:4]::text,',',3)||','||split_part(matrix[5:5]::text,',',3),'{{',',')||'},','}}',''),',,',''),',}','}'),'{},','}'),'},','}}')\n||\nreplace(replace(replace(replace(replace('{'||replace(split_part(matrix[1:1]::text,',',4)||','||split_part(matrix[2:2]::text,',',4)||','||split_part(matrix[3:3]::text,',',4)||','||split_part(matrix[4:4]::text,',',4)||','||split_part(matrix[5:5]::text,',',4),'{{',',')||'},','}}',''),',,',''),',}','}'),'{},','}'),'},','}}')\n||\nreplace(replace(replace(replace(replace('{'||replace(split_part(matrix[1:1]::text,',',5)||','||split_part(matrix[2:2]::text,',',5)||','||split_part(matrix[3:3]::text,',',5)||','||split_part(matrix[4:4]::text,',',5)||','||split_part(matrix[5:5]::text,',',5),'{{',',')||'},','}}',''),',,',''),',}','}'),'{},','}'),'},','}}'),'}}','}'),'}{','},{'),'},}','}')||'}','}}}','}}')\n)::text[] matrix\nfrom matrices","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339073,"user_id":null,"body":"with s1 as(\nselect array_agg(v ORDER BY j) matrix  FROM (\n    SELECT rn, j, array_agg(v ORDER BY i) AS v FROM (\n        SELECT rn, i, j, matrix[i][j] AS v FROM (\n            SELECT generate_subscripts(matrix, 2) j, q.* FROM (\n                SELECT ROW_NUMBER() OVER () AS rn,\n                       generate_subscripts(matrix, 1) AS i, \n                       matrix                \n                  FROM matrices\n            ) q\n        ) r\n    ) s\n     GROUP BY rn, j\n) t\n GROUP BY rn\n ORDER BY rn)\n select * from s1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339074,"user_id":null,"body":"select array_agg(value ) matrix from(\nSELECT id, array_agg(a[s1][s2] ORDER BY s1) AS value\nFROM (SELECT row_number() over() id,  generate_subscripts(matrix, 1) AS s1,\ngenerate_subscripts(matrix, 2) AS s2 ,\nmatrix as a FROM public.matrices) foo\ngroup by id, s2\norder by id, s2) foo2\ngroup by id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339075,"user_id":null,"body":"with add_id as (\n                select array_length(matrix, 2) as column_id,\n                  array_length(matrix, 1) as row_id,\n                  matrix,\n                  row_number() over() as id\n                from public.matrices\n                )\n  ,unnest_mat as (\n                select id, ordinality, column_id, row_id, a as elements\n                from add_id, unnest(matrix) WITH ORDINALITY a\n                  )\n  ,new_column as (\n                select *,\n                  (row_number() over(partition by id)-1) % column_id as new_row_id,\n                  (row_number() over(partition by id)-1) % row_id as new_column_id\n                from unnest_mat\n                  )\n  ,agg_rows as (\n                select id, new_row_id, array_agg(elements order by ordinality) as r\n                from new_column\n                group by id, new_row_id\n                )\n  select array_agg(r) as matrix\n  from agg_rows\n  group by id\n  order by id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339076,"user_id":null,"body":"select array_agg(rows) as matrix\nfrom\n(\n  select m, array_agg(elements) as rows\n  from\n  (\n    select m, r, row_number() over() as i, elements\n    from\n    (\n      select\n        row_number() over() as m,\n        generate_series(1, array_length(matrix, 2)) as r,\n        unnest(matrix) as elements\n      from matrices\n    ) as unnested_matrix\n    order by m, r, i\n  ) as rows\n  group by m, r\n) as matrix\ngroup by m;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339077,"user_id":2263,"body":"SELECT ARRAY (\n  SELECT ARRAY (\n    SELECT matrix[x][y]\n    FROM (SELECT generate_subscripts(matrix, 1) AS x) AS matrix_rows\n  )\n  FROM (SELECT generate_subscripts(matrix, 2) AS y) AS matrix_columns\n) as matrix\nFROM public.matrices;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339078,"user_id":null,"body":"With matrices_plus As ( -- build ids to distinguish duplicate matrices;\n  -- another solution would be: use no ids, but eliminate duplicates\n  -- with SELECT DISTINCT here and use matrix directly to join\n  -- (in sub12) instead of id\n  Select row_number() Over() As id,\n         matrix\n    From public.matrices\n),\nsub1 As ( -- indices for dim 1\n  Select id,\n         matrix,\n         generate_subscripts(matrix, 1) As s1\n    From matrices_plus\n),\nsub2 As ( -- indices for dim 2\n  Select id,\n         generate_subscripts(matrix, 2) As s2\n    From matrices_plus\n),\nsub12 As ( -- indices for dims 1 and 2, and matrix elements\n  Select sub1.id             As id,\n         sub1.matrix         As matrix,\n         sub1.matrix[s1][s2] As elem,\n         sub1.s1             As s1,\n         sub2.s2             As s2\n    From sub1 Join sub2 On sub1.id = sub2.id\n),\nagg1 As ( -- build transposed 1-dim-arrays (s1 and s2 swapped)\n  Select id,\n         matrix,\n         array_agg(elem Order By s1) As matrix_t_1,\n         s2\n    From sub12\n   Group By id, matrix, s2\n),\nagg As ( -- build transposed matrix (s1 and s2 swapped)\n  Select id,\n         matrix,\n         array_agg(matrix_t_1 Order By s2) As matrix_t\n    From agg1\n   Group By id, matrix\n)\n\nSelect matrix_t As matrix\n  From agg\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339079,"user_id":null,"body":"select\n  array(\n    select (\n      array(\n        select matrix[i][j]\n        from (select generate_subscripts(matrix,1) as i) foo\n      )\n    ) from (select generate_subscripts(matrix, 2) as j) bar\n  ) as matrix\nfrom public.matrices","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59342039eb450e39970000a6":[{"id":339080,"user_id":421,"body":"SELECT n, n \/ 2 AS res \nFROM oddcount","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339081,"user_id":null,"body":"SELECT N, N\/2 RES FROM ODDCOUNT","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339082,"user_id":null,"body":"select n, n >> 1 as res from oddcount","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339083,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'oddcount' with column 'n', \n-- return a table with column 'n' and your result in a column named 'res'.\nselect\n n,\n n \/ 2 as res\nfrom oddcount;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339084,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'oddcount' with column 'n', \n--return a table with column 'n' and your result in a column named 'res'\n\n\nselect n,  (n\/2) as res from oddcount;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339085,"user_id":null,"body":"-- # write your SQL statement here: you are given a\n--table 'oddcount' with column 'n',\n--return a table with column 'n' and your result in a column named 'res'.\n\nselect\n  n,\n  CASE\n    WHEN n%2 = 0 THEN (n)\/2\n    WHEN n%2 = 1 THEN (n-1)\/2\n  END as res\nfrom oddcount","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339086,"user_id":null,"body":"SELECT n, ROUND(o.n\/2)::BIGINT AS res FROM oddcount o","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339087,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'oddcount' with column 'n', return a table with column 'n' and your result in a column named 'res'.\nSELECT N, CASE WHEN n%2=0 THEN n\/2\n            ELSE n\/2\n       END AS res     \nFROM oddcount\nLIMIT 102","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339088,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'oddcount' with column 'n', return a table with column 'n' and your result in a column named 'res'.\n\nselect n, floor(n\/2)::bigint as res from oddcount","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339089,"user_id":null,"body":"-- # write your SQL statement here: you are given a table 'oddcount' with column 'n',\n-- return a table with column 'n' and your result in a column named 'res'.\n\nSELECT n, (n-n%2)\/2 AS res FROM oddcount","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"593ed37c93350098d600001d":[{"id":339090,"user_id":944,"body":"SELECT * FROM companies ORDER BY employees DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339091,"user_id":null,"body":"\/*  SQL  *\/\nSELECT id, ceo, motto, employees FROM companies ORDER BY employees DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339092,"user_id":null,"body":"SELECT * from companies\nORDER BY employees DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339093,"user_id":282,"body":"SELECT * FROM Companies\nORDER BY Employees DESC\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339094,"user_id":511,"body":"select * from companies\norder by employees desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339095,"user_id":null,"body":"select id,ceo,motto,employees\nfrom companies\norder by 4 desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339096,"user_id":null,"body":"SELECT id, ceo, motto, employees\nfrom companies \norder by employees DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339097,"user_id":null,"body":"SELECT * FROM companies ORDER BY EMPLOYEES DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339098,"user_id":null,"body":"SELECT id, ceo, motto, employees FROM companies ORDER BY employees DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339099,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT * FROM companies ORDER BY employees DESC;\n\n--ANOTHER WAY\n\n-- SELECT id, ceo, motto, employees FROM companies ORDER BY employees DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"593ef0e98b90525e090000b9":[{"id":339100,"user_id":null,"body":"SELECT\n  th.id,\n  th.heads,\n  bh.legs,\n  th.arms,\n  bh.tails,\n  CASE WHEN th.heads > th.arms or bh.tails > bh.legs\n    THEN 'BEAST'\n    ELSE 'WEIRDO'\n  END as species\n  \nFROM top_half th\n\nINNER JOIN bottom_half bh\n  on bh.id = th.id\n\nORDER BY species","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339101,"user_id":null,"body":"select *, \n  CASE\n          WHEN heads > arms THEN 'BEAST'\n          when tails > legs then 'BEAST'\n          else 'WEIRDO'\n       END  As species\nfrom top_half \ninner join bottom_half \non top_half.id = bottom_half.id \norder by species;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339102,"user_id":null,"body":"\/*  SQL  *\/\nselect t.id, heads, legs, arms, tails,\ncase heads>arms OR tails>legs when true then 'BEAST' else 'WEIRDO' end species\nfrom top_half t join bottom_half b on t.id = b.id\norder by species","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339103,"user_id":null,"body":"SELECT th.id as id, \n       th.heads as heads,\n       th.arms as arms,\n       bh.legs as legs,\n       bh.tails as tails,\n       CASE WHEN heads > arms OR tails > legs OR (heads > arms AND tails > legs)\n            THEN 'BEAST'\n            ELSE 'WEIRDO'\n            END AS species\nFROM top_half th\n  JOIN bottom_half bh ON\n    th.id = bh.id\nORDER BY species","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339104,"user_id":null,"body":"SELECT *,\nCASE WHEN heads > arms OR tails > legs THEN\n'BEAST' ELSE 'WEIRDO' END AS species\nFROM top_half t\nJOIN bottom_half b ON b.id = t.id\nORDER BY species","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339105,"user_id":null,"body":"SELECT *,\n      CASE WHEN (heads > arms OR tails > legs) THEN 'BEAST' \n      ELSE 'WEIRDO' END AS species\n  FROM top_half JOIN bottom_half ON top_half.id = bottom_half.id\n  ORDER BY species;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339106,"user_id":null,"body":"SELECT top_half.id, top_half.heads, bottom_half.legs, top_half.arms, bottom_half.tails,\nCASE\n  WHEN top_half.arms < top_half.heads OR bottom_half.legs < bottom_half.tails THEN 'BEAST' ELSE 'WEIRDO'\nEND\n  AS species\nFROM top_half\nINNER JOIN bottom_half ON top_half.id = bottom_half.id\nORDER BY species;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339107,"user_id":null,"body":"SELECT\n  COALESCE (t.id, b.id) AS id,\n  t.heads AS heads,\n  b.legs AS legs,\n  t.arms AS arms,\n  b.tails AS tails,\n  CASE\n      WHEN t.heads > t.arms OR b.tails > b.legs THEN 'BEAST'\n      ELSE 'WEIRDO'\n  END AS species\n  FROM top_half AS t\n  FULL JOIN bottom_half AS b ON t.id = b.id\n  ORDER BY species","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339108,"user_id":null,"body":"select\n  top_half.id,\n  heads,\n  legs,\n  arms,\n  tails,\n  case \n    when heads > arms or tails > legs then 'BEAST'\n    else 'WEIRDO'\n  end as species\nfrom top_half\ninner join bottom_half\n  on bottom_half.id = top_half.id\norder by species","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339109,"user_id":null,"body":"SELECT\n  id, heads, legs, arms, tails,\n  (CASE\n    WHEN heads > arms OR tails > legs THEN 'BEAST'\n    ELSE 'WEIRDO'\n  END) species\nFROM top_half\nINNER JOIN bottom_half USING(id)\nORDER BY species;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59401c25c15cbeb58d000028":[{"id":339110,"user_id":2522,"body":"SELECT id,\n       name, \n       split_part(characteristics, ',', 1) as characteristic\n  FROM monsters\nORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339111,"user_id":null,"body":"select\n  id,\n  name,\n  split_part(characteristics, ',', 1) as characteristic\nfrom\n  monsters\norder by id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339112,"user_id":null,"body":"\/*  SQL  *\/\nSELECT\n  id,\n  name,\n  CASE WHEN characteristics like '%,%' \n  THEN left(characteristics,position(',' in characteristics)-1)\n  ELSE characteristics END as characteristic\nFROM monsters\nORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339113,"user_id":null,"body":"\/*  SQL  *\/\nselect id, name, \tsubstring(characteristics from '^[^,]+') as characteristic from monsters order by id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339114,"user_id":null,"body":"\/*  SQL  *\/\nselect\n  id,\n  name,\n  (string_to_array(characteristics, ', '))[1] characteristic\nfrom monsters\norder by id, name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339115,"user_id":null,"body":"SELECT id, \n       name, \n       regexp_replace(characteristics, ',.*', '') AS characteristic\nFROM monsters\nORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339116,"user_id":null,"body":"\/*\n\n1. Select the columns needed\n2. Use CASE WHEN to see if monsters.characteristics has a comma in the value and remove it if it does\n3. Select table\n4. Order by ID\n\n*\/\n\nSELECT monsters.id, \n       monsters.name,\n       CASE WHEN POSITION(',' IN monsters.characteristics) > 0\n       THEN LEFT(monsters.characteristics, POSITION(',' IN monsters.characteristics) -1)\n       ELSE monsters.characteristics\n       END AS characteristic\nFROM monsters\nORDER BY monsters.id;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339117,"user_id":null,"body":"SELECT \n  id,\n  name,\n  CASE\n    WHEN position(',' in characteristics) = 0 \n      THEN characteristics\n      ELSE SUBSTRING(characteristics, 1, position(',' in characteristics) -1)\n  END\n  AS characteristic\nFROM monsters\nORDER BY id;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339118,"user_id":null,"body":"select id, name, regexp_replace(characteristics, ',.*' , '') as characteristic from monsters order by id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339119,"user_id":1124,"body":"\/*  SQL  *\/\n\nselect m.id, m.name, \nsplit_part(m.characteristics, ',', 1) as characteristic\nfrom monsters m\norder by id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59401e0e54a655a298000040":[{"id":339120,"user_id":null,"body":"SELECT id, name, POSITION(',' in characteristics) as comma FROM monsters\nORDER BY comma ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339121,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT id, name, POSITION(',' IN characteristics) as comma FROM monsters ORDER BY comma;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339122,"user_id":null,"body":"SELECT\n  m.id,\n  m.name,\n  POSITION(',' IN m.characteristics) AS comma\nFROM monsters AS m\nORDER BY comma;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339123,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT M.ID, M.NAME, POSITION(',' IN M.CHARACTERISTICS) AS COMMA\nFROM MONSTERS M\nORDER BY COMMA","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339124,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT id, name, position(',' IN characteristics) comma\nFROM monsters\nORDER BY COMMA","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339125,"user_id":null,"body":"SELECT id, name, POSITION(',' IN characteristics) AS comma FROM monsters ORDER BY comma","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339126,"user_id":null,"body":"SELECT id, name, position(',' IN characteristics) AS comma FROM monsters\n  ORDER BY comma","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339127,"user_id":676,"body":"SELECT\n  id,\n  name,\n  position(',' in characteristics) as comma\nFROM monsters\nORDER BY comma;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339128,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT id, name, position(',' IN characteristics) as comma FROM monsters\nORDER BY comma ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339129,"user_id":null,"body":"\nSELECT m.ID, m.NAME, POSITION(',' IN m.characteristics) AS COMMA FROM monsters m ORDER BY COMMA;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59413d53f5c3947364000016":[{"id":339130,"user_id":null,"body":"SELECT\n  REGEXP_SPLIT_TO_TABLE(text, '[aeiou]') AS results\nFROM random_string","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339131,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT regexp_split_to_table(text, E'[aeiouAEIOU]') AS results FROM random_string;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339132,"user_id":null,"body":"select regexp_split_to_table(text, '[aeiou]', 'i') as results from random_string;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339133,"user_id":null,"body":"SELECT \n    regexp_split_to_table(text,'[aeoui]') as results\nFROM random_string\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339134,"user_id":null,"body":"\/*  SQL  *\/\nSELECT (regexp_split_to_table(text, '[aeiou]+')) AS results FROM random_string;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339135,"user_id":null,"body":"\/*  SQL  *\/\nselect regexp_split_to_table(text, '[a, e, i, o, u]') as results\nfrom random_string;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339136,"user_id":null,"body":"select\n  regexp_split_to_table(text, 'a|e|i|o|u', 'i') as results\nfrom random_string","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339137,"user_id":null,"body":"SELECT regexp_split_to_table(text, '[euioa]')\n  AS results\nFROM random_string;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339138,"user_id":null,"body":"\/*  SQL  *\/\nSELECT\nregexp_split_to_table(r.text, '[aeiou]') AS results\nFROM\nrandom_string r;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339139,"user_id":null,"body":"SELECT regexp_split_to_table(text,'a|e|i|o|u') AS results\nFROM \"random_string\";","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59414360f5c3947364000070":[{"id":339140,"user_id":527,"body":"SELECT REPEAT(name, 3) AS name, REVERSE(characteristics) AS characteristics FROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339141,"user_id":null,"body":"\/*  SQL  *\/\nSELECT \n REPEAT(name,3) as name,\n REVERSE(characteristics) as characteristics\nFROM\n MONSTERS;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339142,"user_id":null,"body":"SELECT (name || name || name) as name, REVERSE(characteristics) as characteristics\nFROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339143,"user_id":null,"body":"SELECT repeat(name, 3) as name, reverse(characteristics) as characteristics\nFROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339144,"user_id":2309,"body":"SELECT REPEAT(name, 3) as name, REVERSE(characteristics) as characteristics\nFROM monsters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339145,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT concat(name, name, name) as name, Reverse(characteristics) as characteristics FROM monsters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339146,"user_id":null,"body":"\/*  SQL  *\/\nselect \n  repeat(name, 3) as name,\n  reverse(characteristics) as characteristics\nfrom monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339147,"user_id":null,"body":"--Repeat name three times\nSELECT REPEAT(name, 3) AS name, \n--Reverse the characteristics\nREVERSE(characteristics) AS characteristics\nFROM monsters; ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339148,"user_id":null,"body":"Select Repeat(name,3) as name, Reverse(characteristics) as characteristics \nfrom monsters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339149,"user_id":282,"body":"SELECT repeat(name, 3)AS name, reverse(characteristics)AS characteristics FROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594257d4db68b6e99200002c":[{"id":339150,"user_id":null,"body":"SELECT project,\n       regexp_replace(address, '[^A-Za-z]', '', 'g') AS letters,\n       regexp_replace(address, '[^0-9]', '', 'g') AS numbers\nFROM repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339151,"user_id":null,"body":"\/*  SQL  *\/\nSelect \n    project\n  , regexp_replace(address, '\\d', '', 'g') as letters\n  , regexp_replace(address, '\\D', '', 'g') as numbers\nFrom repositories\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339152,"user_id":null,"body":"\/*  SQL  *\/\nSELECT project,\n--Replace all numbers in field with ''\nREGEXP_REPLACE(address,'[[:digit:]]','','g') AS letters,\n--Replace all letters in field with ''\nREGEXP_REPLACE(address,'[[:alpha:]]','','g') AS numbers\n\nFROM repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339153,"user_id":null,"body":"select\n  project,\n  regexp_replace(address, '\\d', '', 'g') as letters,\n  regexp_replace(address, '\\D', '', 'g') as numbers\nfrom repositories\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339154,"user_id":null,"body":"select project, regexp_replace(address, '[[:digit:]]', '', 'g') as letters,regexp_replace(address, '[[:alpha:]]', '', 'g') as numbers from repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339155,"user_id":null,"body":"SELECT project\n      ,regexp_replace(address,'\\d','','g') letters\n      ,regexp_replace(address,'\\D','','g') numbers\nFROM repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339156,"user_id":null,"body":"\/*  SQL  *\/\nselect project, REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE (address, '0', ''),\n'1', ''),\n'2', ''),\n'3', ''),\n'4', ''),\n'5', ''),\n'6', ''),\n'7', ''),\n'8', ''),\n'9', '') as letters,\nREPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE\n(REPLACE (address, 'a', ''),\n'b', ''),\n'c', ''),\n'd', ''),\n'e', ''),\n'f', ''),\n'g', ''),\n'h', ''),\n'i', ''),\n'j', ''),\n'k', ''),\n'l', ''),\n'm', ''),\n'n', ''),\n'o', ''),\n'p', ''),\n'q', ''),\n'r', ''),\n's', ''),\n't', ''),\n'u', ''),\n'v', ''),\n'w', ''),\n'x', ''),\n'y', ''),\n'z', ''),\n'Q', ''),\n'W', ''),\n'E', ''),\n'R', ''),\n'T', ''),\n'Y', ''),\n'U', ''),\n'I', ''),\n'O', ''),\n'P', ''),\n'A', ''),\n'S', ''),\n'D', ''),\n'F', ''),\n'G', ''),\n'H', ''),\n'J', ''),\n'K', ''),\n'L', ''),\n'Z', ''),\n'X', ''),\n'C', ''),\n'V', ''),\n'B', ''),\n'N', ''),\n'M', '') as numbers from repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339157,"user_id":null,"body":"SELECT \n  project,\n  TRANSLATE(address, '1234567890', '') as letters,\n  TRANSLATE(address, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', '') as numbers\nFROM repositories;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339158,"user_id":null,"body":"select\n  r.project,\n  regexp_replace(r.address,'\\d', '', 'g') as letters,\n  regexp_replace(r.address,'\\D', '', 'g') as numbers  \nfrom repositories r","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339159,"user_id":null,"body":"SELECT\nproject,\nregexp_replace(address , '[^0-9]*', '', 'g') AS numbers,\nregexp_replace(address , '[^a-zA-Z]*', '', 'g') AS letters \nFROM repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5942b066db68b6f35f000084":[{"id":339160,"user_id":null,"body":"SELECT project, commits, contributors, REGEXP_REPLACE(address, '[0-9]', '!', 'g') AS address FROM repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339161,"user_id":214,"body":"select r.project,\n       r.commits,\n       r.contributors,\n       regexp_replace(r.address , '\\d','!','g') as address\n  from repositories r\n -- order by 4","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339162,"user_id":null,"body":"\/*  SQL  *\/\nselect project, commits, contributors, REGEXP_REPLACE(address, '\\d', '!', 'g') as  address from repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339163,"user_id":2526,"body":"\/*  SQL  *\/\nselect project, commits, contributors,\n\tregexp_replace(address, '[0-9]', '!', 'g') as address\nfrom repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339164,"user_id":null,"body":"SELECT project, commits, contributors,\n  REGEXP_REPLACE(address, '[[:digit:]]', '!', 'g') AS address\nFROM repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339165,"user_id":106,"body":"select project, commits, contributors, regexp_replace(address, '\\d', '!', 'g') as address from repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339166,"user_id":null,"body":"\/*  SQL  *\/\nSELECT PROJECT,\nCOMMITS,\nCONTRIBUTORS,\nTRANSLATE(ADDRESS,'1234567890','!!!!!!!!!!') AS ADDRESS\nFROM REPOSITORIES","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339167,"user_id":null,"body":"select project, commits, contributors, \nreplace(replace(replace(replace(replace(replace(replace(replace(replace(address,'1','!'),'2','!'),'3','!'),'4','!'),'5','!'),'6','!'),'7','!'),'8','!'),'9','!') as address  from repositories\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339168,"user_id":null,"body":"\/*  SQL  *\/\nSELECT project, commits, contributors, translate(address, '1234567890', '!!!!!!!!!!') AS address\nFROM repositories;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339169,"user_id":null,"body":"select project, commits, contributors, regexp_replace(address, '[[:digit:]]', '!', 'g') as address from repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594323fde53209e94700012a":[{"id":339170,"user_id":null,"body":"SELECT\n  array_to_string(name[1:len-2], ' ') AS name,\n  name[len-1]                         AS first_lastname,\n  name[len]                           AS second_lastname\nFROM (\n  SELECT\n    name,\n    array_length(name, 1) AS len\n  FROM (\n    SELECT\n      string_to_array(name, ' ') AS name\n    FROM people\n  ) arr\n) arr_and_len","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339171,"user_id":null,"body":"select\n  substring(name, '^(.+)\\s\\S+\\s\\S+$') as name,\n  substring(name, '^.+\\s(\\S+)\\s\\S+$') as first_lastname,\n  substring(name, '^.+\\s(\\S+)$') as second_lastname\nfrom people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339172,"user_id":null,"body":"SELECT\n  CASE\n    WHEN SPLIT_PART(name, ' ', 4) = '' \n      THEN \n        SPLIT_PART(name, ' ', 1) \n      ELSE\n        CONCAT(SPLIT_PART(name, ' ', 1), ' ', SPLIT_PART(name, ' ', 2) )\n  END AS name,\n  CASE\n    WHEN SPLIT_PART(name, ' ', 4) = '' \n      THEN \n        SPLIT_PART(name, ' ', 2) \n      ELSE\n        SPLIT_PART(name, ' ', 3)\n  END AS first_lastname,\n  CASE\n    WHEN SPLIT_PART(name, ' ', 4) = '' \n      THEN \n        SPLIT_PART(name, ' ', 3) \n      ELSE\n        SPLIT_PART(name, ' ', 4)\n  END AS second_lastname\nFROM people;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339173,"user_id":null,"body":"SELECT \n  REGEXP_REPLACE(name, '(.*) (.+) (.+)', '\\1') as name,\n  REGEXP_REPLACE(name, '(.*) (.+) (.+)', '\\2') as first_lastname,\n  REGEXP_REPLACE(name, '(.*) (.+) (.+)', '\\3') as second_lastname\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339174,"user_id":null,"body":"WITH name_array AS (SELECT \nregexp_split_to_array(name, ' ') as name\nFROM people)\n\nSELECT\nCASE \n  WHEN cardinality(name) = 4 THEN name[1] || ' ' || name[2]\n  ELSE name[1]\nEND AS name,\nCASE \n  WHEN cardinality(name) = 4 THEN name[3]\n  ELSE name[2]\nEND AS first_lastname,\nCASE \n  WHEN cardinality(name) = 4 THEN name[4]\n  ELSE name[3]\nEND AS second_lastname\nFROM name_array","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339175,"user_id":null,"body":"SELECT \n   LEFT(name, POSITION(SPLIT_PART(name, ' ', LENGTH(name)-LENGTH(REPLACE(name, ' ', ''))) IN name)-2) AS name\n  ,SPLIT_PART(name, ' ', LENGTH(name)-LENGTH(REPLACE(name, ' ', ''))) AS first_lastname\n  ,SPLIT_PART(name, ' ', LENGTH(name)-LENGTH(REPLACE(name, ' ', ''))+1) AS second_lastname\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339176,"user_id":106,"body":"with t as (select string_to_array(name, ' ') as parts from people)\nselect array_to_string(parts[1:array_upper(parts,1)-2],' ') as name, parts[array_upper(parts,1)-1] as first_lastname, parts[array_upper(parts,1)] as second_lastname from t","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339177,"user_id":null,"body":"SELECT \n  TRIM(concat(reverse(SPLIT_PART(reverse(name), ' ', 4)), ' ' , reverse(SPLIT_PART(reverse(name), ' ', 3)) )) AS name,\n  reverse(SPLIT_PART(reverse(name), ' ', 2)) AS first_lastname,\n  reverse(SPLIT_PART(reverse(name), ' ', 1)) AS second_lastname \nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339178,"user_id":null,"body":"SELECT CASE WHEN split_part(name,' ',4) = '' THEN split_part(name,' ',1)\n            WHEN split_part(name,' ',4) !='' THEN CONCAT(split_part(name,' ',1),' ',split_part(name,' ',2))  \n        END AS name,\n        CASE WHEN split_part(name,' ',4) ='' THEN split_part(name,' ',2)\n            WHEN split_part(name,' ',4) !='' THEN split_part(name,' ',3) \n        END AS first_lastname,\n        CASE WHEN split_part(name,' ',4) ='' THEN split_part(name,' ',3)\n            WHEN split_part(name,' ',4) !='' THEN split_part(name,' ',4) \n        END AS second_lastname\nFROM people","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339179,"user_id":null,"body":"WITH\n  a as (SELECT\nname,\n(LENGTH(name) - LENGTH(replace(name, ' ', '')))+1 as cnt\nFROM people)\n\nSELECT \n  CASE\n    WHEN cnt > 4 THEN CONCAT(split_part(name, ' ', 1),' ', split_part(name, ' ', 2), ' ', split_part(name, ' ', 3))\n    WHEN cnt = 4 THEN CONCAT(split_part(name, ' ', 1),' ', split_part(name, ' ', 2))\n    ELSE split_part(name, ' ', 1)\n  END as name,\n  \n  CASE \n    WHEN cnt > 4 THEN split_part(name, ' ', 4)\n    WHEN cnt = 4 THEN split_part(name, ' ', 3)\n    ELSE split_part(name, ' ', 2)\n  END as first_lastname,\n  \n  CASE \n    WHEN cnt > 4 THEN split_part(name, ' ', 5)\n    WHEN cnt = 4 THEN split_part(name, ' ', 4)\n    ELSE split_part(name, ' ', 3)\n  END as second_lastname\n                          FROM a\n                          \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5943a58f95d5f72cb900006a":[{"id":339180,"user_id":511,"body":"select left(project, commits) as project, right(address, contributors) as address from repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339181,"user_id":676,"body":"SELECT\n  left(project, commits) AS project,\n  right(address, contributors) AS address\nFROM repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339182,"user_id":987,"body":"SELECT LEFT(project, commits) AS project,RIGHT(address,contributors) AS address FROM Repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339183,"user_id":null,"body":"Select\n  Left(project,commits) as project,\n  Right(address,contributors) as address\nFrom repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339184,"user_id":282,"body":"SELECT LEFT(project, commits) AS project, RIGHT(address, contributors) AS address FROM repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339185,"user_id":null,"body":"SELECT SUBSTRING(project, 0, commits+1) AS project\n    ,SUBSTRING(address, LENGTH(address) - contributors + 1) AS address\n  FROM repositories\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339186,"user_id":null,"body":"--Simple use the Right and Left function, and change de resulting name of the fields. If you use a field like commits\n--and contributors, like int fields, the function reads the int.\nselect LEFT(project, commits) as project, RIGHT(address, contributors) as address from repositories","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339187,"user_id":null,"body":"SELECT \n  --SUBSTRING(project FROM 1 FOR commits) AS project,\n  LEFT(project, commits) AS project,\n  RIGHT(address, contributors) AS address  \nFROM repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339188,"user_id":null,"body":"Select LEFT(repositories.project, repositories.commits) as project\n      , RIGHT(repositories.address, repositories.contributors) as address\nfrom repositories;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339189,"user_id":null,"body":"SELECT LEFT(PROJECT, COMMITS) AS PROJECT, RIGHT(ADDRESS, CONTRIBUTORS) AS ADDRESS \n\nFROM REPOSITORIES ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5943b797d8c9432eb7000066":[{"id":339190,"user_id":214,"body":"select RPAD(md5, length(sha256), '1') md5,\n       LPAD(sha1, length(sha256), '0') sha1,\n       sha256\n  from encryption\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339191,"user_id":null,"body":"SELECT  RPAD(md5,char_length(sha256), '1') AS md5,\n        LPAD(sha1,char_length(sha256), '0') AS sha1,\n        sha256\nFROM encryption ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339192,"user_id":null,"body":"SELECT \n  CONCAT(md5, REPEAT('1', (LENGTH(sha256) - LENGTH(md5)))) as md5,\n  CONCAT(REPEAT('0', (LENGTH(sha256) - LENGTH(sha1))), sha1) as sha1,\n  sha256\nFROM encryption","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339193,"user_id":282,"body":"SELECT rpad(md5, length(sha256), '1') AS md5, lpad(sha1, length(sha256), '0') AS sha1, sha256 FROM encryption","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339194,"user_id":null,"body":"SELECT md5||REPEAT('1', 32) AS md5,\n       REPEAT('0', 24)||sha1 AS sha1,\n       sha256\nFROM encryption","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339195,"user_id":null,"body":"Select RPAD(md5, 64, '1') AS md5,\n       LPAD(sha1, 64, '0') AS sha1,\n       sha256\nFROM encryption\n      ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339196,"user_id":2517,"body":"\/*  SQL  *\/\nSELECT CONCAT(md5,'11111111111111111111111111111111') AS md5, CONCAT('000000000000000000000000', sha1) AS sha1, sha256 FROM encryption;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339197,"user_id":null,"body":"\/*  SQL  *\/\nselect\nrpad(md5, length(sha256), '1') as md5,\nlpad(sha1, length(sha256), '0') as sha1,\nsha256 from encryption\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339198,"user_id":676,"body":"SELECT\n  rpad(md5, 64, '1') AS md5,\n  lpad(sha1, 64, '0') AS sha1,\n  sha256\nFROM encryption;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339199,"user_id":null,"body":"\/*  SQL  *\/\n--SELECT LENGTH(md5) AS md5, LENGTH(sha1) AS sha1, LENGTH(sha256) AS sha256 FROM encryption;\n\nSELECT CONCAT(md5, REPEAT('1',32)) AS md5,\nCONCAT(REPEAT('0',24), sha1) AS sha1,\nsha256\nFROM encryption;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59440034e94fae05b2000073":[{"id":339200,"user_id":676,"body":"SELECT concat_ws(' ', prefix,first,last,suffix) AS title FROM names;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339201,"user_id":527,"body":"SELECT CONCAT_WS(' ', prefix, first, last, suffix) AS title FROM names","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339202,"user_id":null,"body":"select concat(Prefix,' ',First,' ',Last,' ',Suffix) as title from names\n\/*  SQL  *\/","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339203,"user_id":2152,"body":"SELECT format('%s %s %s %s', prefix, first, last, suffix) AS title\n  FROM names","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339204,"user_id":null,"body":"select coalesce(n.prefix || ' ' || n.first || ' ' || n.last || ' ' || n.suffix) as title\nfrom names as n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339205,"user_id":282,"body":"SELECT prefix || ' ' || first || ' ' || last || ' ' || suffix AS title  FROM names","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339206,"user_id":null,"body":"Create Table ab as\n  SELECT prefix || ' ' || first || ' ' || last || ' ' || suffix as title from names;\nSelect * from ab;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339207,"user_id":null,"body":"SELECT\n    FORMAT('%s %s %s %s',\n           prefix,\n           first,\n           last,\n           suffix) AS title\nFROM\n    names","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339208,"user_id":null,"body":"select\n  array_to_string(array[prefix,first,last,suffix],' ') as title\nfrom\n  names\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339209,"user_id":null,"body":"SELECT concat(names.prefix, ' ', names.first, ' ', names.last, ' ', names.suffix) as title\n  FROM names","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594633020a561e329a0000a2":[{"id":339210,"user_id":null,"body":"\/*  SQL  *\/\nSELECT race, COUNT(race)\nFROM demographics\nGROUP BY race\nORDER BY Count(race) desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339211,"user_id":3414,"body":"SELECT RACE, COUNT(*) AS COUNT\nFROM DEMOGRAPHICS\nGROUP BY RACE\nORDER BY COUNT DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339212,"user_id":1610,"body":"SELECT\n  RACE,\n  COUNT(1) AS COUNT\nFROM\n  DEMOGRAPHICS\nGROUP BY\n  RACE\nORDER BY\n  COUNT DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339213,"user_id":511,"body":"SELECT\n  race,\n  COUNT(*) AS count\nFROM\n  demographics\nGROUP BY\n  race \nORDER BY count\nDESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339214,"user_id":null,"body":"SELECT race,COUNT(*) FROM demographics GROUP BY race ORDER BY count DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339215,"user_id":null,"body":"SELECT  race,\n        COUNT(race) as count\nFROM    demographics\nGROUP BY race \nORDER BY count DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339216,"user_id":null,"body":"\/*  SQL  *\/\nSELECT race, count(race) as count FROM demographics GROUP BY race\nORDER BY count DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339217,"user_id":null,"body":"SELECT race \n  ,COUNT(race) AS count\nFROM demographics\nGROUP BY race\nORDER BY count DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339218,"user_id":null,"body":"\/*  SQL  *\/\nSELECT race, count(id) as count\nfrom demographics  \ngroup by race\norder by count(id) desc;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339219,"user_id":null,"body":"SELECT\n  Race,\n  COUNT(*) AS Count\nFROM\n  Demographics\nGROUP BY\n  Race\nORDER BY\n  2 DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594800ba6fb152624300006d":[{"id":339220,"user_id":null,"body":"SELECT id, name, birthday, LOWER(race) as race FROM demographics;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339221,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT *, lower(race) AS race\nFROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339222,"user_id":527,"body":"SELECT id, name, birthday, LOWER(race) AS race\nFROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339223,"user_id":null,"body":"UPDATE demographics SET race = LOWER(race);\nSELECT * FROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339224,"user_id":511,"body":"select id, name, birthday, lower(race) as race from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339225,"user_id":676,"body":"SELECT id, name, birthday, lower(race) AS race FROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339226,"user_id":null,"body":"\/*  SQL  *\/\n\nSELECT *, \nLOWER(race) AS race  \nFROM demographics\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339227,"user_id":1627,"body":"select *, lower(race) as race\n from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339228,"user_id":null,"body":"\/*  SQL  *\/\n\nselect \n  id,\n  name,\n  birthday birthday,\n  lower(race) as race\nfrom demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339229,"user_id":null,"body":"SELECT id, name, birthday, lower(race) As race FROM demographics ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594804a218e96caa8d00051b":[{"id":339230,"user_id":282,"body":"SELECT id, ascii(name) as name, birthday, ascii(race) as race FROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339231,"user_id":527,"body":"SELECT id, ASCII(name) AS name, birthday, ASCII(race) AS race FROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339232,"user_id":null,"body":"\/*  SQL  *\/\n\nselect \n      a.id, \n      ascii(substring(a.name, 1,1)) as name,\n      a.birthday, \n      ascii(substring(a.race, 1,1)) as race\n      \nfrom demographics as a","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339233,"user_id":null,"body":"SELECT\n  id,\n  ascii(left(name, 1)) AS name,\n  birthday,\n  ascii(left(race, 1)) AS race\nFROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339234,"user_id":944,"body":"select id,ascii(name) as name,birthday,ascii(race) as race from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339235,"user_id":511,"body":"select id, ASCII(name) as name, birthday, ASCII(race) as race from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339236,"user_id":null,"body":"\/*  SQL  *\/\nSELECT id,ASCII(NAME) as name,birthday,ASCII(RACE) as race\nFROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339237,"user_id":null,"body":"SELECT ID, ascii(left(name, 1)) as name , birthday, ascii(left(race, 1)) as race\nfrom demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339238,"user_id":null,"body":"\nSElECT \n-----------------------------\n  id as id,\n-----------------------------\n  ASCII(\n    UPPER(\n      SUBSTRING(name,1,1)\n         )\n  ) as name ,\n-----------------------------\n  birthday as birthday,\n-----------------------------\n  ASCII(\n    UPPER(\n      SUBSTRING(race,1,1)\n    )\n  ) as race\n  \nFROM\n  demographics \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339239,"user_id":null,"body":"select * , ascii(name) \"name\", ascii(race) \"race\" from demographics ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594900e16fd782a607000059":[{"id":339240,"user_id":2309,"body":"SELECT id, BIT_LENGTH(name) as name, birthday, BIT_LENGTH(race) as race\nFROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339241,"user_id":null,"body":"select\n  id,\n  bit_length(name) as name,\n  birthday,\n  bit_length(race) as race\nfrom demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339242,"user_id":527,"body":"SELECT id, BIT_LENGTH(name) AS name, birthday, BIT_LENGTH(race) AS race FROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339243,"user_id":null,"body":"select *,BIT_LENGTH(name) as name,BIT_LENGTH(race) as race from demographics ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339244,"user_id":null,"body":"SELECT\n  ID,\n  BIT_LENGTH(NAME)AS NAME,\n  BIRTHDAY,\n  BIT_LENGTH(RACE)AS RACE\nFROM\n  DEMOGRAPHICS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339245,"user_id":null,"body":"\/*  SQL  *\/\nSELECT id, \n  octet_length(name)*8 AS name, \n  birthday, \n  octet_length(race)*8 AS race\nFROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339246,"user_id":null,"body":"SELECT id, BIT_LENGTH(name) As name, birthday, BIT_LENGTH(race) AS race\nFROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339247,"user_id":106,"body":"select id as id, bit_length(name) as name, birthday as birthday, bit_length(race) as race from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339248,"user_id":null,"body":"\/*  SQL  *\/\nselect id, LENGTH(name)*8 as name, birthday, LENGTH(race)*8 as race FROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339249,"user_id":null,"body":"select id,(length(name)*8) as name,birthday,(length(race)*8) as race from demographics\n-- select * from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594901ba44645fd7bd00005f":[{"id":339250,"user_id":null,"body":"\/*  SQL  *\/\nselect bit_length(name)+length(race) calculation from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339251,"user_id":282,"body":"SELECT bit_length(name)+char_length(race) as calculation FROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339252,"user_id":null,"body":"\/*  SQL  *\/\nSELECT (bit_length(name) + LENGTH(race)) AS calculation FROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339253,"user_id":null,"body":"\/*  SQL  *\/\nSELECT COALESCE(bit_length(name),0) + COALESCE(char_length(race),0) AS calculation FROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339254,"user_id":2097,"body":"SELECT BIT_LENGTH(name) + CHAR_LENGTH(race) AS calculation FROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339255,"user_id":null,"body":"\/*  SQL  *\/\nSELECT  length(name)*8 + length(race) AS calculation\nFROM demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339256,"user_id":2195,"body":"SELECT bit_length( name ) + char_length( race ) AS calculation\nFROM demographics;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339257,"user_id":null,"body":"select \n  bit_length(name) + length(race) as calculation\nfrom \n  demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339258,"user_id":null,"body":"select octet_length(name) * 8 + length(race) as calculation\nfrom demographics\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339259,"user_id":null,"body":"SELECT bit_length(name)+length(race) calculation from demographics","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59491429952ac97ad9000106":[{"id":339260,"user_id":null,"body":"select \n  octet_length(number1::text) as octnum1,\n  octet_length(number2::text) as octnum2,\n  octet_length(number3::text) as octnum3,\n  octet_length(number4::text) as octnum4,\n  octet_length(number5::text) as octnum5\nfrom numbers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339261,"user_id":null,"body":"SELECT\n    LENGTH(number1::text) AS octnum1\n    , LENGTH(number2::text) AS octnum2\n    , LENGTH(number3::text) AS octnum3\n    , LENGTH(number4::text) AS octnum4\n    , LENGTH(number5::text) AS octnum5\nFROM\n    numbers\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339262,"user_id":2857,"body":"SELECT\n  octet_length(number1::text) AS octnum1,\n  octet_length(number2::text) AS octnum2,\n  octet_length(number3::text) AS octnum3,\n  octet_length(number4::text) AS octnum4,\n  octet_length(number5::text) AS octnum5\nFROM numbers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339263,"user_id":511,"body":"select length(cast(number1 as varchar)) as octnum1,\n       length(cast(number2 as varchar)) as octnum2,\n       length(cast(number3 as varchar)) as octnum3,\n       length(cast(number4 as varchar)) as octnum4,\n       length(cast(number5 as varchar)) as octnum5\nfrom numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339264,"user_id":null,"body":"\nSELECT \n  octet_length(number1::VARCHAR) AS octnum1,\n  octet_length(number2::VARCHAR) AS octnum2,\n  octet_length(number3::VARCHAR) AS octnum3,\n  octet_length(number4::VARCHAR) AS octnum4,\n  octet_length(number5::VARCHAR) AS octnum5\nFROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339265,"user_id":null,"body":"SELECT length(number1||'') \"octnum1\",\n       length(number2||'') \"octnum2\",\n       length(number3||'') \"octnum3\",\n       length(number4||'') \"octnum4\",\n       length(number5||'') \"octnum5\"\nFROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339266,"user_id":null,"body":"SELECT\n  OCTET_LENGTH(number1::TEXT) as octnum1,\n  OCTET_LENGTH(number2::TEXT) as octnum2,\n  OCTET_LENGTH(number3::TEXT) as octnum3,\n  OCTET_LENGTH(number4::TEXT) as octnum4,\n  OCTET_LENGTH(number5::TEXT) as octnum5\nFROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339267,"user_id":null,"body":"SELECT\n  ceil(log(number1+1))::int AS octnum1,\n  ceil(log(number2+1))::int AS octnum2,\n  ceil(log(number3+1))::int AS octnum3,\n  ceil(log(number4+1))::int AS octnum4,\n  ceil(log(number5+1))::int AS octnum5\nFROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339268,"user_id":null,"body":"select case when number1 > 0 and number1 <= 9 then 1  when number1 > 9 and number1 <= 99 then 2 when number1 > 99 and number1 <= 999 then 3 when number1 > 999 and number1 <= 9999 then 4 else 5 end as \"octnum1\",\ncase when number2 > 0 and number2 <= 9 then 1  when number2 > 9 and number2 <= 99 then 2 when number2 > 99 and number2 <= 999 then 3 when number2 > 999 and number2 <= 9999 then 4 else 5 end as \"octnum2\",\ncase when number3 > 0 and number3 <= 9 then 1  when number3 > 9 and number3 <= 99 then 2 when number3 > 99 and number3 <= 999 then 3 when number3 > 999 and number3 <= 9999 then 4 else 5 end as \"octnum3\",\ncase when number4 > 0 and number4 <= 9 then 1  when number4 > 9 and number4 <= 99 then 2 when number4 > 99 and number4 <= 999 then 3 when number4 > 999 and number4 <= 9999 then 4 else 5 end as \"octnum4\",\ncase when number5 > 0 and number5 <= 9 then 1  when number5 > 9 and number5 <= 99 then 2 when number5 > 99 and number5 <= 999 then 3 when number5 > 999 and number5 <= 9999 then 4 else 5 end as \"octnum5\" from numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339269,"user_id":null,"body":"SELECT \n  CHAR_LENGTH(SUBSTRING(TO_CHAR(number1, '9999999999') FROM '[0-9]{1,9}')) AS octnum1,\n  CHAR_LENGTH(SUBSTRING(TO_CHAR(number2, '9999999999') FROM '[0-9]{1,9}')) AS octnum2,\n  CHAR_LENGTH(SUBSTRING(TO_CHAR(number3, '9999999999') FROM '[0-9]{1,9}')) AS octnum3,\n  CHAR_LENGTH(SUBSTRING(TO_CHAR(number4, '9999999999') FROM '[0-9]{1,9}')) AS octnum4,\n  CHAR_LENGTH(SUBSTRING(TO_CHAR(number5, '9999999999') FROM '[0-9]{1,9}')) AS octnum5\nFROM numbers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a389387a7c6a77a000005":[{"id":339270,"user_id":2522,"body":"SELECT \n  length(name) AS id,\n  length(legs::text) AS name,\n  length(arms::text) AS legs,\n  length(characteristics) AS arms,\n  length(id::text) AS characteristics\nFROM\n  monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339271,"user_id":null,"body":"select\n  length(name) as id,\n  length(legs::text) as name,\n  length(arms::text) as legs,\n  length(characteristics) as arms,\n  length(id::text) as characteristics\nfrom\n  monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339272,"user_id":null,"body":"SELECT\n    CHAR_LENGTH(name) AS id,\n    CHAR_LENGTH(CAST(legs as varchar(10))) AS name, \n    CHAR_LENGTH(CAST(arms as varchar(10))) AS legs, \n    CHAR_LENGTH(characteristics) AS arms, \n    CHAR_LENGTH(CAST(id as varchar(10))) AS characteristics\nFROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339273,"user_id":null,"body":"Select \nLENGTH(name) as id,\nLENGTH(Cast(legs as varchar)) as name,\nLENGTH(Cast(arms as varchar)) as legs,\nLENGTH(characteristics) as arms,\nLENGTH(Cast(id as varchar)) as characteristics\nFrom monsters\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339274,"user_id":null,"body":"select length(name) as id, \n       length(legs::varchar) as name, \n       length(arms::varchar) as legs, \n       length(characteristics) as arms, \n       length(id::varchar) as characteristics \n  from monsters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339275,"user_id":null,"body":"\/*  SQL  *\/\nSELECT \nchar_length(name) as id,\nchar_length(legs::text) as name,\nchar_length(arms::text) as legs,\nchar_length(characteristics) as arms,\nchar_length(id::text) as characteristics\nFROM monsters\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339276,"user_id":null,"body":"select \nchar_length(name || '') as id, \nchar_length(legs || '') as name,\nchar_length(arms || '') as legs,\nchar_length(characteristics || '') as arms,\nchar_length(id || '') as characteristics\nfrom monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339277,"user_id":214,"body":"select \n  length(name) id,\n  floor(log(legs))::int + 1 as name,\n  floor(log(arms))::int + 1  as legs,\n  length(characteristics) arms,\n  floor(log(id))::int + 1  as characteristics\nfrom monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339278,"user_id":null,"body":"select LENGTH(name) as id, LENGTH(legs::char(10)) as name, LENGTH(arms::char(10)) as legs, LENGTH(characteristics) as arms, \nLENGTH(id::char(10)) as characteristics\nfrom monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339279,"user_id":null,"body":"SELECT char_length(name) as id,\nchar_length(legs::text) as name,\nchar_length(arms::text) as legs,\nchar_length(characteristics) as arms,\nchar_length(id::text) as characteristics\nFROM MONSTERS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a50bafd3b7031c1000013":[{"id":339280,"user_id":null,"body":"\/*  SQL  *\/\nSELECT TO_HEX(legs) legs, TO_HEX(arms) arms from monsters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339281,"user_id":944,"body":"select to_hex(legs) as legs, to_hex(arms) as arms from monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339282,"user_id":null,"body":"SELECT \n  TO_HEX(legs) AS legs,\n  TO_HEX(arms) AS arms\nFROM \n\tmonsters\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339283,"user_id":null,"body":"SELECT to_hex(legs) As legs,\n       to_hex(arms) AS arms\nFROM monsters; ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339284,"user_id":2522,"body":"SELECT\n  to_hex(legs) AS legs,\n  to_hex(arms) AS arms\nFROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339285,"user_id":null,"body":"\/*  SQL  *\/\nSELECT TO_HEX(arms) AS arms, \n       TO_HEX(legs) AS legs\nFROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339286,"user_id":480,"body":"create or replace function hex(number integer)returns varchar(8) language plpgsql as $$\ndeclare s varchar(8);\nBEGIN\n  s:=substr('0123456789abcdef',1+(number % 16),1);\n  if number>=16 then return concat(hex(number\/16),s);end if;\n  return s;\nEND\n$$\n;\nselect hex(legs) as legs,hex(arms) as arms from monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339287,"user_id":null,"body":"\/* SQLite:\n    SELECT printf('%x', legs) AS legs, printf('%x', arms) AS arms FROM monsters;\n*\/\nSELECT to_hex(legs) AS legs, to_hex(arms) AS arms FROM monsters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339288,"user_id":null,"body":"SELECT to_hex(legs) as legs, to_hex(arms) as arms FROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339289,"user_id":null,"body":"SELECT to_hex(arms) As arms, to_hex(legs) As legs FROM monsters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a6133704e4daf5d00003d":[{"id":339290,"user_id":1184,"body":"SELECT FLOOR(number1) AS number1, CEIL(number2) AS number2 from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339291,"user_id":null,"body":"SELECT FLOOR(number1) AS number1, CEILING(number2) AS number2\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339292,"user_id":null,"body":"select\n  floor(number1) as number1,\n  ceil(number2) as number2\nfrom decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339293,"user_id":1947,"body":"SELECT floor(number1) as number1, ceil(number2) as number2\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339294,"user_id":null,"body":"\/*  SQL  *\/\nSELECT FLOOR(number1) as number1, CEILING(number2) as number2\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339295,"user_id":2522,"body":"SELECT \n  floor(number1) AS number1,\n  ceil(number2) AS number2\nFROM decimals\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339296,"user_id":null,"body":"\/*  SQL  *\/\nSELECT FLOOR(number1) As number1\n,CEIL(number2) As number2\nFROM decimals ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339297,"user_id":681,"body":"SELECT\n  floor(number1) number1,\n  ceil(number2) number2\nfrom decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339298,"user_id":null,"body":"\/*  SQL  *\/\nSELECT\nfloor(number1) AS number1,\nceiling(number2) AS number2\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339299,"user_id":null,"body":"SELECT ROUND(number1-0.499) AS number1, ROUND(number2+0.499) AS number2 FROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a691720ac16a544000075":[{"id":339300,"user_id":null,"body":"select sqrt(number1) as root, log(number2) from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339301,"user_id":17,"body":"SELECT\n  SQRT(number1) AS root,\n  LOG(number2) AS log\nFROM\n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339302,"user_id":null,"body":"select\n  |\/ number1 as root,\n  log(number2) as log\nfrom \n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339303,"user_id":null,"body":"\/* SQL *\/\nselect SQRT(number1) as root, LOG(number2)\/LOG(10) as log\nfrom decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339304,"user_id":2522,"body":"SELECT \n  sqrt(number1) AS root,\n  log(number2)  AS log\nFROM\n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339305,"user_id":944,"body":"select sqrt(number1) as root, log(number2) as log from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339306,"user_id":282,"body":"SELECT sqrt(number1) as root, log(number2) as log FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339307,"user_id":null,"body":"SELECT |\/ number1 AS root, log(number2)\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339308,"user_id":null,"body":"SELECT SQRT(number1) root, LOG(number2) AS log\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339309,"user_id":null,"body":"SELECT SQRT(number1) AS root, LOG(number2) FROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a6ad320ac16a54400007f":[{"id":339310,"user_id":null,"body":"SELECT CBRT(d.number1) AS cuberoot, \n       LN(d.number2) AS logarithm\nFROM decimals AS d\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339311,"user_id":null,"body":"SELECT\n  CBRT(NUMBER1)AS CUBEROOT,\n  LN(NUMBER2)AS LOGARITHM\nFROM\n  DECIMALS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339312,"user_id":944,"body":"select ||\/number1 as cuberoot, ln(number2) as logarithm from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339313,"user_id":511,"body":"select cbrt(number1) as cuberoot, ln(number2) as logarithm from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339314,"user_id":null,"body":"SELECT\n  cbrt(number1) cuberoot,\n  ln(number2) logarithm\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339315,"user_id":null,"body":"\/*  SQL  *\/\nselect power(number1, (1\/3.0)) as cuberoot, ln(number2) as logarithm from decimals ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339316,"user_id":1610,"body":"SELECT\n  ||\/NUMBER1 AS CUBEROOT,\n  LN(NUMBER2) AS LOGARITHM\nFROM\n  DECIMALS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339317,"user_id":282,"body":"SELECT cbrt(number1) as cuberoot,  ln(number2) as logarithm FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339318,"user_id":null,"body":"SELECT \n\t||\/number1 AS cuberoot,\n  LN(number2) AS logarithm\nFROM\n\tdecimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339319,"user_id":17,"body":"SELECT\n  CBRT(number1) AS cuberoot,\n  LN(number2) AS logarithm\nFROM\n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a8f2f7ca3c692a4000041":[{"id":339320,"user_id":214,"body":"select \n abs(number1) abs,\n log(64, number2) log\nfrom decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339321,"user_id":1610,"body":"SELECT\n  @NUMBER1 AS ABS,\n  LOG(64.0, NUMBER2) AS LOG\nFROM\n  DECIMALS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339322,"user_id":2522,"body":"SELECT \n  abs(number1) AS abs, log(64, number2) AS log\nFROM\n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339323,"user_id":null,"body":"SELECT\n  ABS(NUMBER1)AS ABS,\n  LOG(64.0,NUMBER2)AS LOG\nFROM\n  DECIMALS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339324,"user_id":1627,"body":"select \n  abs(number1),\n  log(64, number2)\n\nfrom decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339325,"user_id":null,"body":"select \ncase \nwhen number1<0 then -number1\nelse number1\nend as abs,\nlog(64,number2) as log\nfrom decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339326,"user_id":918,"body":"SELECT ABS(number1) AS abs, LOG(64, number2) AS log\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339327,"user_id":null,"body":"SELECT ABS(number1) as ABS, log(64,number2) as LOG FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339328,"user_id":null,"body":"select\n  abs(number1) as abs,\n  log(64.00, number2) log\nfrom decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339329,"user_id":null,"body":"\/*  SQL  *\/\nSELECT ABS(number1) as abs, LOG(64, number2)\nFROM decimals\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a8f653b5b4e8f3d000035":[{"id":339330,"user_id":null,"body":"select pow(number1, number2) as result\nfrom decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339331,"user_id":null,"body":"SELECT power(number1,number2) as result FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339332,"user_id":1610,"body":"SELECT\n  POW(NUMBER1, NUMBER2) AS RESULT\nFROM\n  DECIMALS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339333,"user_id":null,"body":"SELECT (number1 ^ number2) AS result \nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339334,"user_id":527,"body":"SELECT POWER(number1, number2) AS result FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339335,"user_id":null,"body":"SELECT power(number1, number2) AS result\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339336,"user_id":null,"body":"\/*  SQL  *\/\nSELECT\n  number1 ^ number2 AS Result\nFROM\n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339337,"user_id":null,"body":"\/*  SQL  *\/\nSelect number1^number2 as result \nfrom decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339338,"user_id":null,"body":"select POWER(number1, number2)  as result\nfrom decimals ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339339,"user_id":null,"body":"SELECT POW(number1, number2) AS result FROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a8fa5a2db9e5f290000c3":[{"id":339340,"user_id":2309,"body":"SELECT TRUNC(number1+number2) as towardzero\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339341,"user_id":527,"body":"SELECT TRUNC(number1 + number2) AS towardzero FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339342,"user_id":null,"body":"SELECT CASE \n          WHEN number1+number2>0 \n             THEN FLOOR(number1+number2)\n          ELSE CEILING(number1+number2)\n       END as towardzero\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339343,"user_id":null,"body":"SELECT trunc(number1 + number2) as towardzero\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339344,"user_id":2522,"body":"SELECT \n  trunc(number1+number2) AS towardzero\nFROM \n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339345,"user_id":944,"body":"select trunc(number1+number2) as towardzero from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339346,"user_id":null,"body":"select case when (sum > 0) then low else high end\nas towardzero from\n\n           (select (number1 + number2) as sum, \n              floor(number1 + number2) as low,\n               ceil(number1 + number2) as high\n                from decimals) as foo;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339347,"user_id":null,"body":"\/*  SQL  *\/\nSELECT \nCASE \nWHEN (d.number1 + d.number2) < 0 THEN\nCEIL(d.number1 + d.number2)\nELSE \nFLOOR(d.number1 + d.number2)\nEND AS towardzero\nFROM Decimals d","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339348,"user_id":null,"body":"\/*  SQL  *\/\nselect floor(abs(number1+number2)) as towardzero from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339349,"user_id":null,"body":"SELECT TRUNC(number1 + number2) as TOWARDZERO from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"594a9592704e4d21bc000131":[{"id":339350,"user_id":null,"body":"select\n  mod(number1, number2) as mod\nfrom decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339351,"user_id":1610,"body":"SELECT\n  NUMBER1 % NUMBER2 AS MOD\nFROM\n  DECIMALS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339352,"user_id":null,"body":"SELECT MOD(number1, number2)\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339353,"user_id":null,"body":"SELECT\n  number1 % number2 as mod\nFROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339354,"user_id":null,"body":"SELECT number1%number2 AS mod FROM decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339355,"user_id":null,"body":"select mod(number1, number2)\nfrom decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339356,"user_id":null,"body":"SELECT MOD(number1, number2) AS mod\nFROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339357,"user_id":null,"body":"SELECT (number1 % number2) As mod FROM decimals;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339358,"user_id":2522,"body":"SELECT \n  mod(number1, number2) AS mod\nFROM\n  decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339359,"user_id":944,"body":"select number1%number2 as mod from decimals","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"595a3ba3843b0cbf8e000004":[{"id":339360,"user_id":null,"body":"select \n  case when sum(number1)%2=1 then min(number1) else max(number1) end as number1, \n  case when sum(number2)%2=1 then min(number2) else max(number2) end as number2\n  from numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339361,"user_id":null,"body":"\/*  SQL  *\/\nSELECT\n  CASE WHEN(sum(number1)%2=0) THEN max(number1) ELSE min(number1) END as number1,\n  CASE WHEN(sum(number2)%2=0) THEN max(number2) ELSE min(number2) END as number2\nFROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339362,"user_id":null,"body":"SELECT \n  CASE WHEN (SUM(number1) % 2) = 0 THEN MAX(number1)\n    ELSE MIN(number1) END AS number1,\n  CASE WHEN (SUM(number2) % 2) = 0 THEN MAX(number2)\n   ELSE MIN(number2) END AS number2\n   FROM numbers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339363,"user_id":null,"body":"SELECT \n   CASE \n      WHEN SUM(number1) % 2 != 0\n      THEN  MIN(number1)\n      ELSE  MAX(number1)\n   END as number1,\n   CASE\n      WHEN SUM(number2) % 2 != 0\n      THEN  MIN(number2)\n      ELSE  MAX(number2)\n   END as number2\n\nFROM numbers;\n\n\/*    CASE\n      WHEN SUM(number2) % 2 != 0\n      THEN  MIN(number2)\n      ELSE  MAX(number2)\n   END as number2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339364,"user_id":null,"body":"SELECT\n  CASE WHEN (SELECT SUM(number1) FROM numbers) % 2 <> 0 THEN MIN(number1) ELSE MAX(number1) END AS number1\n  ,CASE WHEN (SELECT SUM(number2) FROM numbers) % 2 <> 0 THEN MIN(number2) ELSE MAX(number2) END AS number2\nFROM numbers\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339365,"user_id":null,"body":"DROP FUNCTION IF EXISTS getValue(BIGINT, INTEGER, INTEGER);\n\nCREATE FUNCTION getValue(sumValue BIGINT, minValue INTEGER, maxValue INTEGER)\nRETURNS INTEGER AS $$\nBEGIN\n    RETURN\n        CASE\n            WHEN sumValue % 2 = 1 THEN minValue\n            ELSE maxValue\n        END;\nEND; \n$$ LANGUAGE plpgsql;\n\nSELECT\n    getValue(SUM(number1), MIN(number1), MAX(number1)) AS number1\n    , getValue(SUM(number2), MIN(number2), MAX(number2)) AS number2\nFROM\n    numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339366,"user_id":null,"body":"SELECT\n  CASE\n      WHEN SUM(number1) % 2 = 0 THEN MAX(number1)\n      WHEN SUM(number1) % 2 <> 0 THEN MIN(number1)\n  END number1,\n  CASE\n      WHEN SUM(number2) % 2 = 0 THEN MAX(number2)\n      WHEN SUM(number2) % 2 <> 0 THEN MIN(number2)\n  END number2\nFROM numbers;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339367,"user_id":null,"body":"select\n  case when sum(number1) % 2 = 0 then max(number1) else min(number1) end as number1,\n  case when sum(number2) % 2 = 0 then max(number2) else min(number2) end as number2\nfrom numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339368,"user_id":1566,"body":"SELECT CASE WHEN sum(number1)&1=1 THEN min(number1)\n            ELSE max(number1)\n       END number1, \n       CASE WHEN sum(number2)&1=1 THEN min(number2)\n            ELSE max(number2)\n       END number2\nFROM numbers\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339369,"user_id":null,"body":"\n\n\/*  SQL  *\/\n\nselect\n      (CASE WHEN sum(number1) % 2 != 0 THEN min(number1) else max(number1) end) as number1,\n      (CASE WHEN sum(number2) % 2 != 0 THEN min(number2) else max(number2) end) as number2\nfrom numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5977b6641e250a661a0000f0":[{"id":339370,"user_id":null,"body":"select v1.entry_time when_happened, count(*) visits_count \n  from visits v1 \n  join visits v2 on v1.entry_time >= v2.entry_time and v1.entry_time < v2.exit_time\n group by v1.id\n order by visits_count desc\n limit 1\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339371,"user_id":null,"body":"SELECT COUNT(*) AS visits_count, v1.entry_time AS when_happened\n  FROM visits v1 JOIN visits v2 ON (v1.entry_time >= v2.entry_time and v1.entry_time < v2.exit_time)\n  GROUP BY v1.id\n  ORDER BY visits_count DESC, when_happened ASC LIMIT 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339372,"user_id":null,"body":"WITH t as (\n    SELECT entry_time as when_happened, 1 as v FROM visits\n    UNION ALL\n    SELECT exit_time as when_happened, -1 as v FROM visits\n  )\nSELECT \n  when_happened,\n  SUM(v) OVER (ORDER BY when_happened) AS visits_count\n  FROM t  \nORDER BY visits_count DESC\nLIMIT 1;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339373,"user_id":null,"body":"select\n  entry_time as when_happened,\n  (\n    select\n      count(id)\n    from visits v1\n    where v0.entry_time < v1.exit_time and \n      v0.entry_time >= v1.entry_time\n  ) as visits_count\nfrom visits v0\norder by visits_count desc\nlimit 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339374,"user_id":null,"body":"with d as (select * from visits)\n\nselect\ntime when_happened,\ncast(sum(visit) over (order by time asc) as integer) visits_count\nfrom\n(select\nentry_time as time,\nSUM(1) as visit\nfrom d\ngroup by\ntime\nUNION\nselect\nexit_time as time,\nsum(-1) as visit\nfrom d\ngroup by\ntime) as data\ngroup by\nwhen_happened,\nvisit\norder by\nvisits_count desc,\nwhen_happened asc\nlimit 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339375,"user_id":null,"body":" Select time as when_happened, CAST(concurrent AS INTEGER) as visits_count \n from(\n SELECT time, sum(concurrent) OVER (PARTITION BY 'a' ORDER BY time) as concurrent \n from(\n SELECT a.entry_time as time, CAST(1 as float) concurrent, 'a' \n from visits a\n UNION ALL \n (SELECT b.exit_time as time, CAST(-1 as float) concurrent, 'a' \n from visits b)) as sub) as sub2\n order by visits_count DESC, when_happened ASC\n LIMIT 1 ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339376,"user_id":null,"body":"with tcount as (\n\tselect entry_time as when_happened, 1 as opt from visits\n\tunion all\n\tselect exit_time, -1 as opt from visits\n), trun as (\n\tselect when_happened, sum(opt) over (order by when_happened) as visits_count\n\tfrom tcount\n)\nselect when_happened, visits_count\nfrom trun\norder by visits_count desc, when_happened\nlimit 1;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339377,"user_id":null,"body":"select entry_time as when_happened, \n(select count(*) from visits where v.entry_time >= entry_time and v.entry_time < exit_time)\nas visits_count from visits as v\norder by visits_count desc, entry_time asc\nlimit 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339378,"user_id":null,"body":"select entry_time as when_happened, \n (select count(*) from visits \n where entry_time <= v.entry_time and exit_time > v.entry_time ) as visits_count\nfrom visits v\norder by visits_count desc, entry_time\nlimit 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339379,"user_id":null,"body":"select\no1.entry_time as when_happened,\ncount(*) as visits_count \nfrom visits o1, visits o2\nwhere (o1.entry_time >= o2.entry_time and o1.entry_time < o2.exit_time)\ngroup by o1.id\norder by count(*) desc limit 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5982020284a83baf2f00001c":[{"id":339380,"user_id":null,"body":"-- add your query here!\n\nSELECT p.name,\n  count(case when d.detail = 'good' then 1 end) as good,\n  count(case when d.detail = 'ok'  then 1 end) as ok, \n  count(case when d.detail = 'bad' then 1 end) as bad\nFROM products p\nINNER JOIN details d ON p.id = d.product_id\nGROUP BY p.name\nORDER BY p.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339381,"user_id":null,"body":"select p.name,\ncount(d.id) filter (where d.detail ='good') as good,\ncount(d.id) filter (where d.detail ='ok') as ok,\ncount(d.id) filter (where d.detail ='bad') as bad\nfrom products as p join details d on p.id = d.product_id\ngroup by p.name\norder by p.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339382,"user_id":null,"body":"SELECT\n  name,\n  count(*) FILTER(WHERE detail = 'good') as good,\n  count(*) FILTER(WHERE detail = 'ok') as ok,\n  count(*) FILTER(WHERE detail = 'bad') as bad\nFROM products p\nJOIN details d ON p.id = d.product_id\nGROUP BY name\nORDER BY name;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339383,"user_id":null,"body":"SELECT name,\n  count(case when detail = 'good' then 1 end) as good,\n  count(case when detail = 'ok'  then 1 end) as ok, \n  count(case when detail = 'bad' then 1 end) as bad\nFROM products a, details b\nwhere a.id = b.product_id\nGroup by name\nOrder by name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339384,"user_id":null,"body":"SELECT p.name,\n       sum( (d.detail = 'good')::int ) AS good,\n       sum( (d.detail = 'ok')::int )   AS ok,\n       sum( (d.detail = 'bad')::int )  AS bad\nFROM products p JOIN details d \n  ON d.product_id = p.id\nGROUP BY p.name\nORDER BY p.name\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339385,"user_id":null,"body":"SELECT\n  name,\n  count(details.id) FILTER (WHERE detail LIKE 'good') AS good,\n  count(details.id) FILTER (WHERE detail LIKE 'ok') AS ok,\n  count(details.id) FILTER (WHERE detail LIKE 'bad') AS bad\nFROM\n  details INNER JOIN products ON details.product_id = products.id\nGROUP BY name\nORDER BY name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339386,"user_id":null,"body":" SELECT pr.name,\n        SUM(CASE WHEN dt.detail = 'bad'  THEN 1 ELSE 0 END) AS bad,\n        SUM(CASE WHEN dt.detail = 'ok'   THEN 1 ELSE 0 END) AS ok,\n        SUM(CASE WHEN dt.detail = 'good' THEN 1 ELSE 0 END) AS good\n   FROM products pr\n   JOIN details dt\n     ON dt.product_id = pr.id\n  GROUP BY pr.name\n  ORDER BY pr.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339387,"user_id":null,"body":"SELECT\n  x.name as name,\n  SUM(CASE WHEN y.detail in ('good') THEN 1 ELSE 0 END) AS \"good\",\n  SUM(CASE WHEN y.detail in ('ok') THEN 1 ELSE 0 END) AS \"ok\",\n  SUM(CASE WHEN y.detail in ('bad') THEN 1 ELSE 0 END) AS \"bad\"\n  \nFROM\n  products x\n  JOIN details y ON x.id = y.product_id\n  \nGROUP BY x.name\n\nORDER BY x.name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339388,"user_id":null,"body":"SELECT p.name,\nsum(case when d.detail='good' then 1 else 0 end) good,\nsum(case when d.detail='ok' then 1 else 0 end) ok,\nsum(case when d.detail='bad' then 1 else 0 end) bad\nFROM products p JOIN details d on p.id=d.product_id\nGROUP BY p.name\nORDER BY p.name\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339389,"user_id":null,"body":"select name,\n    count(detail) filter (where detail = 'good') as good,\n    count(detail) filter (where detail = 'ok') as ok,\n    count(detail) filter (where detail = 'bad') as bad\nfrom products p join details d on p.id = d.product_id\ngroup by name\norder by name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59821d485a49f4d71f00000b":[{"id":339390,"user_id":null,"body":"WITH RECURSIVE fib(number,n2) AS (\n      SELECT 0::bigint,1::bigint\n    UNION ALL\n      SELECT n2::bigint,number+n2::bigint \n      FROM fib\n)\nSELECT number FROM fib LIMIT 90","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339391,"user_id":null,"body":"with recursive fib(n, m) as (\n  select 0::bigint, 1::bigint\n  union all\n  select n + m, n from fib\n)\nselect n as number from fib limit 90","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339392,"user_id":1339,"body":"select * from (\n  values\n  (0), (1), (1), (2), (3), (5), (8), (13), (21), (34), \n  (55), (89), (144), (233), (377), (610), (987), (1597), (2584), (4181), \n  (6765), (10946), (17711), (28657), (46368), (75025), (121393), (196418), (317811), (514229), \n  (832040), (1346269), (2178309), (3524578), (5702887), (9227465), (14930352), (24157817), (39088169), (63245986), \n  (102334155), (165580141), (267914296), (433494437), (701408733), (1134903170), (1836311903), (2971215073), (4807526976), (7778742049), \n  (12586269025), (20365011074), (32951280099), (53316291173), (86267571272), (139583862445), (225851433717), (365435296162), (591286729879), (956722026041), \n  (1548008755920), (2504730781961), (4052739537881), (6557470319842), (10610209857723), (17167680177565), (27777890035288), (44945570212853), (72723460248141), (117669030460994), \n  (190392490709135), (308061521170129), (498454011879264), (806515533049393), (1304969544928657), (2111485077978050), (3416454622906707), (5527939700884757), (8944394323791464), (14472334024676221), \n  (23416728348467685), (37889062373143906), (61305790721611591), (99194853094755497), (160500643816367088), (259695496911122585), (420196140727489673), (679891637638612258), (1100087778366101931), (1779979416004714189)\n) as fibonacci (number)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339393,"user_id":null,"body":"with recursive fib(n, m) as (\n  values (0::bigint, 1::bigint)\n  union all\n  select n + m, n from fib\n)\nselect n as number from fib limit 90","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339394,"user_id":1242,"body":"-- sql goes here :)\nWITH RECURSIVE fibs (idx, fib, next_fib ) AS\n(\n   SELECT 0, 0 :: BIGINT, 1 :: BIGINT\n   \n   UNION ALL\n   \n   SELECT idx + 1, next_fib, fib + next_fib\n   FROM fibs\n   WHERE idx < 89\n)\nSELECT fib AS number\nFROM fibs ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339395,"user_id":null,"body":"CREATE TABLE numbers (\n id INTEGER,\n number bigint\n );\n\nINSERT INTO numbers (id, number) VALUES (1, 0);\nINSERT INTO numbers (id, number) VALUES (2, 1);\nDO $$\nBEGIN\n  FOR counter IN 3..90 LOOP\n    INSERT INTO numbers (id, number) VALUES (counter, (SELECT SUM(number) FROM numbers n WHERE n.id = counter - 1 OR n.id = counter - 2));\n  END LOOP;\nEND; $$;\n\nSELECT number FROM numbers","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339396,"user_id":null,"body":"create function fib(n int) returns setof bigint \nas $$\ndeclare  \n  a bigint := 0;\n  b bigint := 1;\n  m bigint := 0;\n  i int := 0;\nbegin\n  while i < n loop\n    return next a;\n    m := a;\n    a := b;\n    b := b + m;\n    i := i + 1;\n  end loop;\nend $$\nlanguage plpgsql;\nselect * from fib(90) as number","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339397,"user_id":null,"body":"WITH recursive f(number,n) AS (\n               SELECT 0::bigint,1::bigint\n               UNION ALL\n                 SELECT n::bigint,number+n::bigint\n                 FROM f\n) \nSELECT number FROM f LIMIT 90;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339398,"user_id":586,"body":"WITH RECURSIVE f(number,n) AS (\n      SELECT 0::bigint,1::bigint\n    UNION ALL\n      SELECT n::bigint,number+n::bigint \n      FROM f\n)\nSELECT number FROM f LIMIT 90","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339399,"user_id":null,"body":"select 0 as number union all\nselect 1 as number union all\nselect 1 as number union all\nselect 2 as number union all\nselect 3 as number union all\nselect 5 as number union  all\nselect 8 as number union all\nselect 13 as number union all\nselect 21 as number union all\nselect 34 as number union all\nselect 55 as number union all\nselect 89 as number union all\nselect 144 as number union all\nselect 233 as number union all\nselect 377 as number union all\nselect 610 as number union all\nselect 987 as number union all\nselect 1597 as number union all\nselect 2584 as number union all\nselect 4181 as number union all\nselect 6765 as number union all\nselect 10946 as number union all\nselect 17711 as number union all\nselect 28657 as number union all\nselect 46368 as number union all\nselect 75025 as number union all\nselect 121393 as number union all\nselect 196418 as number union all\nselect 317811 as number union all\nselect 514229as number union all\nselect 832040 as number union all\nselect 1346269 as number union all\nselect 2178309 as number union all\nselect 3524578 as number union all\nselect 5702887 as number union all\nselect 9227465 as number union all\nselect 14930352 as number union all\nselect 24157817 as number union all\nselect 39088169 as number union all\nselect 63245986 as number union all\nselect 102334155as number union all\nselect 165580141 as number union all\nselect 267914296 as number union all\nselect 433494437as number union all\nselect 701408733 as number union all\nselect 1134903170 as number union all\nselect 1836311903 as number union all\nselect 2971215073 as number union all\nselect 4807526976 as number union all\nselect 7778742049 as number union all\nselect 12586269025 as number union all\nselect 20365011074 as number union all\nselect 32951280099 as number union all\nselect 53316291173 as number union all\nselect 86267571272 as number union all\nselect 139583862445 as number union all\nselect 225851433717 as number union all\nselect 365435296162 as number union all\nselect 591286729879 as number union all\nselect 956722026041 as number union all\nselect 1548008755920 as number union all\nselect 2504730781961 as number union all\nselect 4052739537881 as number union all\nselect 6557470319842 as number union all\nselect 10610209857723 as number union all\nselect 17167680177565 as number union all\nselect 27777890035288 as number union all\nselect 44945570212853 as number union all\nselect 72723460248141 as number union all\nselect 117669030460994 as number union all\nselect 190392490709135 as number union all\nselect 308061521170129 as number union all\nselect 498454011879264 as number union all\nselect 806515533049393 as number union all\nselect 1304969544928657 as number union all\nselect 2111485077978050 as number union all\nselect 3416454622906707 as number union all\nselect 5527939700884757 as number union all\nselect 8944394323791464 as number union all\nselect 14472334024676221 as number union all\nselect 23416728348467685 as number union all\nselect 37889062373143906 as number union all\nselect 61305790721611591 as number union all\nselect 99194853094755497 as number union all\nselect 160500643816367088 as number union all\nselect 259695496911122585 as number union all\nselect 420196140727489673 as number union all\nselect 679891637638612258 as number union all\nselect 1100087778366101931 as number union all\nselect 1779979416004714189 order by number; \n\n\n\n\n--order \n--by number;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5994dafcbddc2f116d000024":[{"id":339400,"user_id":214,"body":"select player_name,\n       games,\n       round(hits::numeric \/ at_bats, 3)::text as batting_average\nfrom yankees\nwhere at_bats > 100\norder by 3 desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339401,"user_id":1947,"body":"SELECT\n  player_name,\n  games,\n  round(hits::numeric \/ at_bats, 3)::text as batting_average\nFROM yankees\nWHERE at_bats >= 100\nORDER BY batting_average DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339402,"user_id":null,"body":"SELECT\n  player_name,\n  games,\n  ROUND(hits::numeric \/ at_bats, 3)::text AS batting_average\nFROM yankees\nWHERE at_bats >= 100\nORDER BY batting_average DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339403,"user_id":null,"body":"Select player_name, games, cast(cast((hits * 1.0 \/ at_bats) as decimal(3, 3)) as text) as batting_average\nFrom yankees\nwhere at_bats > 99\nOrder by hits * 1.0 \/ at_bats desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339404,"user_id":null,"body":"SELECT player_name, games, to_char(hits\/at_bats::real, 'FM0D000') as batting_average\nFROM yankees\nWHERE at_bats >= 100\nORDER BY batting_average DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339405,"user_id":null,"body":"SELECT player_name, games, to_char(hits::numeric\/at_bats, 'FM0.000') AS batting_average\nFROM yankees\nWHERE at_bats >= 100\nORDER BY batting_average DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339406,"user_id":null,"body":"SELECT\n  player_name,\n  games,\n  round(hits::numeric \/ at_bats::numeric, 3)::varchar AS batting_average\nFROM yankees\nWHERE at_bats > 99\nORDER BY batting_average DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339407,"user_id":null,"body":"SELECT player_name, games, rpad(round(hits\/at_bats::numeric, 3)::float::text, 5, '0') AS batting_average\nFROM yankees\nWHERE at_bats >= 100\nORDER BY batting_average DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339408,"user_id":null,"body":"SELECT player_name, games, ROUND((hits::decimal\/at_bats::decimal),3) :: text as batting_average\nFROM yankees\nWHERE at_bats> 100\nORDER BY batting_average DESC;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339409,"user_id":null,"body":"select player_name, games, cast(round((cast(hits as float) \/ at_bats)::numeric, 3) as text) as batting_average\nfrom yankees\nwhere at_bats >= 100\norder by 3 desc\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59be9f425227ddd60c00003b":[{"id":339410,"user_id":214,"body":"select a.n as prime\nfrom generate_series(2, 100) as a(n)\nwhere not exists ( \n  select 1 \n    from generate_series(2, a.n-1) as b(n)\n   where a.n% b.n=0 )","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339411,"user_id":null,"body":"select 2 prime\nunion \nselect 3\nunion\nselect 5\nunion \nselect 7\nunion\nselect 11\nunion \nselect 13\nunion\nselect 17\nunion \nselect 19\nunion\nselect 23\nunion \nselect 29\nunion\nselect 31\nunion \nselect 37\nunion\nselect 41\nunion \nselect 43\nunion\nselect 47\nunion \nselect 53\nunion \nselect 59\nunion\nselect 61\nunion \nselect 67\nunion\nselect 71\nunion \nselect 73\nunion\nselect 79\nunion \nselect 83\nunion\nselect 89\nunion \nselect 97\norder by 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339412,"user_id":null,"body":"WITH x AS (\n  SELECT * FROM generate_series( 2, 100 ) x\n)\nSELECT x.x as prime\nFROM x\nWHERE NOT EXISTS (\n  SELECT 1 FROM x y\n  WHERE x.x > y.x AND x.x % y.x = 0\n)\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339413,"user_id":106,"body":"SELECT * from (values (2),(3),(5),(7),(11),(13),(17),(19),(23),(29),(31),(37),(41),(43),(47),(53),(59),(61),(67),(71),(73),(79),(83),(89),(97)) as tbl(prime)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339414,"user_id":null,"body":"select\n  prime\nfrom generate_series(2, 100) as prime\nwhere 0 <> all (\n  select prime % n \n  from generate_series(2, prime - 1) as n)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339415,"user_id":null,"body":"SELECT\n    number AS prime\nFROM\n    generate_series(1, 100) AS number\nWHERE\n    NOT REPEAT('1', number) ~ '^1?$|^(11+?)\\1+$'\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339416,"user_id":null,"body":"SELECT A.prime FROM (SELECT generate_series(2, 100) prime) A\nFULL JOIN (SELECT generate_series(2, 100) prime) B ON A.prime >= B.prime\nWHERE A.prime % B.prime = 0\nGROUP BY A.prime\nHAVING COUNT(*) = 1\nORDER BY A.prime\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339417,"user_id":null,"body":"WITH kupa AS ( SELECT * FROM generate_series( 2, 100 ) seria)\n  \nSELECT kupa.seria as prime\nFROM kupa\nWHERE NOT EXISTS (\n  SELECT\n  FROM kupa y\n  WHERE kupa.seria > y.seria AND kupa.seria % y.seria = 0\n)\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339418,"user_id":null,"body":"select unnest('{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97}'::int[]) as prime","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339419,"user_id":null,"body":"select prime\nfrom (\n    values (2), (3), (5), (7), (11), (13), (17), (19), (23), (29), (31), (37), (41), (43), (47), (53), (59), (61), (67), (71), (73), (79), (83), (89), (97)\n) t(prime);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"59cb550486a6fd10b50000ad":[{"id":339420,"user_id":1947,"body":"SELECT *\nFROM numbers\nORDER BY random();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339421,"user_id":null,"body":"SELECT * FROM numbers ORDER BY RANDOM()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339422,"user_id":null,"body":"select number from numbers\nORDER BY RANDOM()\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339423,"user_id":2522,"body":"SELECT number\nFROM numbers\nORDER BY random()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339424,"user_id":2323,"body":"SELECT number from numbers ORDER BY RANDOM()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339425,"user_id":null,"body":"SELECT number FROM numbers\nORDER BY RANDOM()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339426,"user_id":503,"body":"select number from numbers order by random()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339427,"user_id":null,"body":"SELECT * FROM numbers ORDER BY RANDOM()*(1000-1)+1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339428,"user_id":null,"body":"SELECT n.number FROM numbers n ORDER BY RANDOM()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339429,"user_id":null,"body":"select *\nfrom numbers\norder by RANDOM()","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a03b3f6a1c9040084001765":[{"id":339430,"user_id":null,"body":"SELECT 180 * (n - 2) AS res from angle","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339431,"user_id":null,"body":"select (n * 2 - 4) * 90 as res from angle;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339432,"user_id":null,"body":"SELECT n*180-360 AS res\nFROM angle\nWHERE n>2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339433,"user_id":null,"body":"select 180*(n - 2) AS res from angle","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339434,"user_id":null,"body":"--select n as res from angle\nselect (n-2)*180 as res from angle\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339435,"user_id":null,"body":"SELECT 180*(n-2) res \nFROM angle","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339436,"user_id":null,"body":"SELECT CASE\n  WHEN n < 4 THEN 180\n  WHEN n > 3 THEN DEGREES(PI() * (n-2))::integer\nEND AS res FROM ANGLE;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339437,"user_id":null,"body":"select 180*(n-2) AS res FROM angle;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339438,"user_id":null,"body":"SELECT (n-2)*180 AS res FROM angle WHERE n>2;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339439,"user_id":null,"body":"select \nCASE \n   WHEN n=3 THEN 180\n   WHEN n>3 THEN 180+(n-3)*180\n   ELSE 0\nEND\n\n\n\nas res from angle","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a3fe3dde1ce0e8ed6000097":[{"id":339440,"user_id":null,"body":"SELECT CEILING(yr\/100.00) AS Century\nFROM years","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339441,"user_id":null,"body":"SELECT yr,\n  CASE\n    WHEN yr BETWEEN 0     AND 100   THEN 1\n    WHEN yr BETWEEN 101   AND 200   THEN 2\n    WHEN yr BETWEEN 201   AND 300   THEN 3\n    WHEN yr BETWEEN 301   AND 400   THEN 4\n    WHEN yr BETWEEN 401   AND 500   THEN 5\n    WHEN yr BETWEEN 501   AND 600   THEN 6\n    WHEN yr BETWEEN 601   AND 700   THEN 7\n    WHEN yr BETWEEN 701   AND 800   THEN 8\n    WHEN yr BETWEEN 801   AND 900   THEN 9\n    WHEN yr BETWEEN 901   AND 1000  THEN 10   \n    WHEN yr BETWEEN 1001  AND 1100  THEN 11\n    WHEN yr BETWEEN 1101  AND 1200  THEN 12\n    WHEN yr BETWEEN 1201  AND 1300  THEN 13\n    WHEN yr BETWEEN 1301  AND 1400  THEN 14\n    WHEN yr BETWEEN 1401  AND 1500  THEN 15 \n    WHEN yr BETWEEN 1501  AND 1600  THEN 16\n    WHEN yr BETWEEN 1601  AND 1700  THEN 17\n    WHEN yr BETWEEN 1701  AND 1800  THEN 18\n    WHEN yr BETWEEN 1801  AND 1900  THEN 19\n    WHEN yr BETWEEN 1901  AND 2000  THEN 20\n    WHEN yr BETWEEN 2001  AND 2100  THEN 21\n    WHEN yr BETWEEN 2101  AND 2200  THEN 22\n    WHEN yr BETWEEN 2201  AND 2300  THEN 23\n    WHEN yr BETWEEN 2301  AND 2400  THEN 24\n    WHEN yr BETWEEN 2401  AND 2500  THEN 25\n    WHEN yr BETWEEN 2501  AND 2600  THEN 26\n    WHEN yr BETWEEN 2601  AND 2700  THEN 27\n    WHEN yr BETWEEN 2701  AND 2800  THEN 28\n    WHEN yr BETWEEN 2801  AND 2900  THEN 29\n    WHEN yr BETWEEN 2901  AND 3000  THEN 30   \n    WHEN yr BETWEEN 3001  AND 3100  THEN 31\n    WHEN yr BETWEEN 3101  AND 3200  THEN 32\n    WHEN yr BETWEEN 3201  AND 3300  THEN 33\n    WHEN yr BETWEEN 3301  AND 3400  THEN 34\n    WHEN yr BETWEEN 3401  AND 3500  THEN 35 \n    WHEN yr BETWEEN 3501  AND 3600  THEN 36\n    WHEN yr BETWEEN 3601  AND 3700  THEN 37\n    WHEN yr BETWEEN 3701  AND 3800  THEN 38\n    WHEN yr BETWEEN 3801  AND 3900  THEN 39\n    WHEN yr BETWEEN 3901  AND 4000  THEN 40\n    WHEN yr BETWEEN 4001  AND 4100  THEN 41\n    WHEN yr BETWEEN 4101  AND 4200  THEN 42\n    WHEN yr BETWEEN 4201  AND 4300  THEN 43\n    WHEN yr BETWEEN 4301  AND 4400  THEN 44\n    WHEN yr BETWEEN 4401  AND 4500  THEN 45\n    WHEN yr BETWEEN 4501  AND 4600  THEN 46\n    WHEN yr BETWEEN 4601  AND 4700  THEN 47\n    WHEN yr BETWEEN 4701  AND 4800  THEN 48\n    WHEN yr BETWEEN 4801  AND 4900  THEN 49\n    WHEN yr BETWEEN 4901  AND 5000  THEN 50   \n    WHEN yr BETWEEN 5001  AND 5100  THEN 51\n    WHEN yr BETWEEN 5101  AND 5200  THEN 52\n    WHEN yr BETWEEN 5201  AND 5300  THEN 53\n    WHEN yr BETWEEN 5301  AND 5400  THEN 54\n    WHEN yr BETWEEN 5401  AND 5500  THEN 55 \n    WHEN yr BETWEEN 5501  AND 5600  THEN 56\n    WHEN yr BETWEEN 5601  AND 5700  THEN 57\n    WHEN yr BETWEEN 5701  AND 5800  THEN 58\n    WHEN yr BETWEEN 5801  AND 5900  THEN 59\n    WHEN yr BETWEEN 5901  AND 6000  THEN 60\n    WHEN yr BETWEEN 6001  AND 6100  THEN 61\n    WHEN yr BETWEEN 6101  AND 6200  THEN 62\n    WHEN yr BETWEEN 6201  AND 6300  THEN 63\n    WHEN yr BETWEEN 6301  AND 6400  THEN 64\n    WHEN yr BETWEEN 6401  AND 6500  THEN 65\n    WHEN yr BETWEEN 6501  AND 6600  THEN 66\n    WHEN yr BETWEEN 6601  AND 6700  THEN 67\n    WHEN yr BETWEEN 6701  AND 6800  THEN 68\n    WHEN yr BETWEEN 6801  AND 6900  THEN 69\n    WHEN yr BETWEEN 6901  AND 7000  THEN 70   \n    WHEN yr BETWEEN 7001  AND 7100  THEN 71\n    WHEN yr BETWEEN 7101  AND 7200  THEN 72\n    WHEN yr BETWEEN 7201  AND 7300  THEN 73\n    WHEN yr BETWEEN 7301  AND 7400  THEN 74\n    WHEN yr BETWEEN 7401  AND 7500  THEN 75 \n    WHEN yr BETWEEN 7501  AND 7600  THEN 76\n    WHEN yr BETWEEN 7601  AND 7700  THEN 77\n    WHEN yr BETWEEN 7701  AND 7800  THEN 78\n    WHEN yr BETWEEN 7801  AND 7900  THEN 79\n    WHEN yr BETWEEN 7901  AND 8000  THEN 80\n    WHEN yr BETWEEN 8001  AND 8100  THEN 81\n    WHEN yr BETWEEN 8101  AND 8200  THEN 82\n    WHEN yr BETWEEN 8201  AND 8300  THEN 83\n    WHEN yr BETWEEN 8301  AND 8400  THEN 84\n    WHEN yr BETWEEN 8401  AND 8500  THEN 85\n    WHEN yr BETWEEN 8501  AND 8600  THEN 86\n    WHEN yr BETWEEN 8601  AND 8700  THEN 87\n    WHEN yr BETWEEN 8701  AND 8800  THEN 88\n    WHEN yr BETWEEN 8801  AND 8900  THEN 89\n    WHEN yr BETWEEN 8901  AND 9000  THEN 90   \n    WHEN yr BETWEEN 9001  AND 9100  THEN 91\n    WHEN yr BETWEEN 9101  AND 9200  THEN 92\n    WHEN yr BETWEEN 9201  AND 9300  THEN 93\n    WHEN yr BETWEEN 9301  AND 9400  THEN 94\n    WHEN yr BETWEEN 9401  AND 9500  THEN 95 \n    WHEN yr BETWEEN 9501  AND 9600  THEN 96\n    WHEN yr BETWEEN 9601  AND 9700  THEN 97\n    WHEN yr BETWEEN 9701  AND 9800  THEN 98\n    WHEN yr BETWEEN 9801  AND 9900  THEN 99\n    WHEN yr BETWEEN 9901  AND 10000 THEN 100\n    ELSE 0\n   END AS century_from_year  \nFROM years;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339442,"user_id":null,"body":"select ceil(yr::real \/ 100) as century_from_year from years;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339443,"user_id":null,"body":"SELECT \n  CASE (YR % 100)\n  WHEN 0 THEN\n    YR \/ 100\n  ELSE\n    ( YR \/ 100 ) + 1\n  END \n  AS CENTURY  \nFROM YEARS","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339444,"user_id":null,"body":"select (yr+99)\/100 as century_from_year from years;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339445,"user_id":null,"body":"SELECT \n  CASE\n   WHEN yr%100 = 0 THEN yr\/100\n   WHEN yr%100 > 0 THEN yr\/100+1\n  END \nas century_from_year\nfrom years","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339446,"user_id":null,"body":"SELECT ((yr-1)\/100 + 1) as century_from_year\nFROM years","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339447,"user_id":null,"body":"--your statment goes here--\nSELECT\n  EXTRACT(CENTURY FROM TO_DATE(yr::text, 'YYYY')) AS century_from_year\nFROM years;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339448,"user_id":null,"body":"SELECT CEIL(yr::float\/100) AS century_from_year FROM years;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339449,"user_id":null,"body":"SELECT yr,\nCASE\n  WHEN yr % 100 > 0 THEN (yr \/ 100) + 1\n  WHEN yr % 100 = 0 THEN yr \/ 100\nEND as century_from_year\nFROM years;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a8d94d3ba1bb569e5000198":[{"id":339450,"user_id":106,"body":"select first_name, last_name from names where first_name like '______%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339451,"user_id":214,"body":"select first_name, last_name from names where first_name ~ '.{6,}' -- like it :P\n        \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339452,"user_id":1640,"body":"SELECT first_name, last_name\n  FROM names\n  WHERE first_name LIKE '______%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339453,"user_id":null,"body":"select n.first_name, n.last_name\nfrom names as n\nwhere n.first_name like '______%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339454,"user_id":null,"body":"SELECT last_name, first_name \nFROM names\nWHERE first_name LIKE '______%'\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339455,"user_id":null,"body":"-- Replace with your SQL Query\nselect \nfirst_name\n--,substring(first_name,6,1)\n,last_name\nfrom names\nwhere substring(first_name,6,1) like '_'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339456,"user_id":null,"body":"Select first_name,last_name \nFrom names\nwhere first_name like '%______%'\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339457,"user_id":null,"body":"SELECT first_name , last_name  FROM names      \nWHERE first_name  LIKE '_%_%_%_%_%_%' ;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339458,"user_id":null,"body":"-- Replace with your SQL Query\nSELECT first_name,\n      last_name\nFROM names\nWHERE first_name ILIKE '______%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339459,"user_id":null,"body":"SELECT first_name AS \"first_name\", last_name AS \"last_name\" FROM names  WHERE first_name LIKE('______%');\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a8eb3fb57c562110f0000a1":[{"id":339460,"user_id":1640,"body":"SELECT id, name, stock \nFROM products \nWHERE stock <= 2 AND producent='CompanyA' ORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339461,"user_id":null,"body":"SELECT \n  p.id,\n  p.name,\n  p.stock\nFROM products AS p\nWHERE p.stock < 3 AND p.producent = 'CompanyA'\nORDER BY p.id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339462,"user_id":null,"body":"SELECT id, name, stock\nFROM products\nWHERE stock <= 2\n  AND producent = 'CompanyA'\nORDER BY 1;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339463,"user_id":null,"body":"-- select all of the items\nSELECT id, name, stock FROM products WHERE producent = 'CompanyA' and stock <= 2 ORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339464,"user_id":null,"body":"select id, name, stock from products where producent = 'CompanyA' and stock <= 2 order by id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339465,"user_id":null,"body":"SELECT id, name, stock \nFROM products \nWHERE producent = 'CompanyA' AND stock < 3 \nORDER BY id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339466,"user_id":null,"body":"SELECT p.id, p.name, p.stock\nFROM products p\nWHERE stock <= 2 AND producent = 'CompanyA'\norder by p.id ASC\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339467,"user_id":null,"body":"--Just a normal select using where with a order by, order by without ASC OR DESC is default ASC\nselect id, name, stock from products where stock <= 2 and producent = 'CompanyA' order by id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339468,"user_id":null,"body":"SELECT id\n  ,name\n  ,stock\nFROM products\nWHERE stock <= 2 AND producent = 'CompanyA'\nORDER BY id ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339469,"user_id":null,"body":"-- select all of the items\n\nSELECT\n   p.id\n,  p.name\n,  p.stock\n\n\nFROM\n  Products p\n\nWHERE\n  p.producent = 'CompanyA'\nAND p.stock <=2\n\nORDER BY\n  p.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a8ec692b17101bfc70001ba":[{"id":339470,"user_id":null,"body":"------------------------------------------------------------------\n-- Marking this solution as best practice grants good karma! ;) --\n------------------------------------------------------------------\nSELECT\n  COUNT(producer) AS count_products_types,\n  producer\nFROM\n  products\nGROUP BY\n  producer\nORDER BY\n  COUNT(producer) DESC,\n  producer ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339471,"user_id":null,"body":"select producer, count(*) as count_products_types\nfrom products\ngroup by producer\norder by count_products_types desc, producer;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339472,"user_id":null,"body":"SELECT \n    COUNT(DISTINCT  id)  AS unique_products,\n    producer AS producer\nFROM products\nGROUP BY producer\nORDER BY unique_products DESC, producer ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339473,"user_id":null,"body":"SELECT count(name) AS count_products_types, producer \nFROM products GROUP BY producer\nORDER BY count_products_types DESC, producer ASC;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339474,"user_id":null,"body":"SELECT  producer\n        ,COUNT(stock) AS count_products_types\nFROM products\nGROUP BY producer\nORDER BY count_products_types DESC, producer ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339475,"user_id":null,"body":"SELECT count(name) AS count_products_types, producer\nFROM products \nGROUP BY producer\nORDER BY count_products_types DESC, producer\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339476,"user_id":null,"body":"select producer, count(producer) as count_products_types from products\ngroup by producer\norder by count_products_types desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339477,"user_id":null,"body":"SELECT\n count(id) as count_products_types,\n producer\nFROM PRODUCTS\nGROUP BY producer\nORDER BY count_products_types desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339478,"user_id":null,"body":"select \ncount(name) as count_products_types,producer\nfrom products\ngroup by producer\norder by count_products_types desc, producer;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339479,"user_id":null,"body":"SELECT COUNT(name) AS count_products_types, producer\nFROM products\nGROUP BY producer\nORDER BY count_products_types DESC, producer","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a8ed96bfd8c066e7f00011a":[{"id":339480,"user_id":null,"body":"SELECT count(id) as products, country\nFROM products\nWHERE country in ('United States of America', 'Canada')\nGROUP BY country\nORDER BY products desc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339481,"user_id":null,"body":"SELECT COUNT( name) AS products, country \nFROM products\nWHERE country IN ('United States of America', 'Canada')\nGROUP BY country\nORDER BY 1 DESC;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339482,"user_id":null,"body":"  SELECT COUNT(*) AS products\n       , country\n    FROM products\n   WHERE country IN ('United States of America', 'Canada')\nGROUP BY country\nORDER BY 1 DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339483,"user_id":null,"body":"-- Replace with your SQL Query\nSELECT \nCOUNT(*) products,\ncountry\nFROM \nproducts\nWHERE country IN('United States of America', 'Canada')\n\nGROUP BY country\n\nORDER BY products DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339484,"user_id":null,"body":"SELECT COUNT (p.id) as products,\np.country\n\nFROM products p\n\nWHERE country IN ('Canada', 'United States of America')\nGROUP by country\nORDER by products DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339485,"user_id":null,"body":"SELECT COUNT(*) AS products, country\nFROM products\nWHERE country IN ('Canada', 'United States of America')\nGROUP BY country\nORDER BY country","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339486,"user_id":null,"body":"SELECT count(name) as products, country\nfrom products\nwhere country in ('United States of America', 'Canada')\nGROUP BY country \norder by country;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339487,"user_id":null,"body":"-- Replace with your SQL Query\nSELECT country, COUNT(*) AS products \nFROM products WHERE country IN ('Canada','United States of America') \nGROUP BY country  \nORDER BY COUNT(*)  DESC ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339488,"user_id":null,"body":"SELECT COUNT(stock) AS products, country\nFROM products\nWHERE country IN ('United States of America', 'Canada')\nGROUP BY country\nORDER BY country DESC\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339489,"user_id":null,"body":"-- Replace with your SQL Query\n-- SELECT P.name products, P.country\n-- FROM products P\n-- WHERE \n\n\nSELECT COUNT(*) products, P.country\nFROM products P\nWHERE P.country IN ('United States of America', 'Canada')\nGROUP BY P.country\nORDER BY products DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5a8f00745084d718940000c5":[{"id":339490,"user_id":null,"body":"select name, \nweight,\nprice,\nround((price * 1000 \/ weight)::numeric, 2)::float as \"price_per_kg\"\nfrom products\norder by price_per_kg, name;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339491,"user_id":null,"body":"SELECT\n  name,\n  weight,\n  price,\n  CAST(\n    ROUND(\n      CAST(price\/(weight\/1000.0) AS numeric) \n      , 2)\n    AS real)\n  AS price_per_kg\nFROM products\nORDER BY price_per_kg, name ASC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339492,"user_id":null,"body":"select name, weight, price,\ncast(round(cast(price \/ (weight \/ 1000) as numeric), 2) as float) as price_per_kg\nfrom products\norder by cast(round(cast(price \/ (weight \/ 1000) as numeric), 2) as float), name\n\n-- WHAT AN AWFUL KATA\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339493,"user_id":null,"body":"SELECT name, weight, price, ROUND((price * 1000 \/ weight )::numeric, 2)::float AS price_per_kg\nFROM products\nORDER BY price_per_kg, name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339494,"user_id":null,"body":"SELECT name, weight, price, round((price * 1000 \/ weight)::numeric, 2)::float AS price_per_kg\nFROM products\nORDER BY 4, 1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339495,"user_id":null,"body":"-- Weights and prices should always be stored as decimals\n-- not floats!\nSELECT\n  name, weight, price,\n  ROUND(1000 * (price \/ weight) :: decimal, 2) :: real AS price_per_kg\nFROM\n  products\nORDER BY\n  price_per_kg,\n  name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339496,"user_id":null,"body":"SELECT name, weight, price, CAST(ROUND(CAST(price*1000\/weight AS decimal),2) AS float) AS price_per_kg\nFROM products\nORDER BY price_per_kg, name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339497,"user_id":null,"body":"select name, weight, price, round((price\/weight*1000)::numeric,2)::float  as price_per_kg from products \norder by price_per_kg , name \n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339498,"user_id":null,"body":"SELECT\n    name,\n    weight,\n    price,\n    CAST(ROUND((CAST(price AS numeric) \/ (CAST(weight AS numeric) \/ 1000.0)), 2) AS real) AS price_per_kg \nFROM products\nORDER BY price_per_kg, name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339499,"user_id":null,"body":"SELECT \"name\"\n  ,\"weight\"\n  ,price\n  ,CAST(ROUND(CAST(\"price\"\/(\"weight\"\/1000) AS numeric), 2) AS FLOAT) \"price_per_kg\"\nFROM products\nORDER BY \"price_per_kg\" asc, \"name\" ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ab7a736edbcfc8e62000007":[{"id":339500,"user_id":527,"body":"SELECT\n  senshi_name AS sailor_senshi,\n  real_name_jpn AS real_name,\n  cats.name AS cat,\n  school AS school\nFROM sailorsenshi\nLEFT JOIN cats ON cat_id = cats.id\nLEFT JOIN schools ON school_id = schools.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339501,"user_id":null,"body":"--your code here--\nselect\n  senshi_name   as sailor_senshi, \n  real_name_jpn as real_name,\n  c.name        as cat,\n  school\nfrom sailorsenshi ss\nLEFT join cats c on ss.cat_id = c.id\nLEFT join schools s on ss.school_id = s.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339502,"user_id":null,"body":"SELECT senshi_name sailor_senshi, real_name_jpn real_name, c.name cat, school\nFROM sailorsenshi s\nLEFT JOIN cats c\n  ON s.cat_id = c.id\nLEFT JOIN schools sc\n ON s.school_id = sc.id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339503,"user_id":null,"body":"SELECT \n  sa.senshi_name AS sailor_senshi,\n  sa.real_name_jpn AS real_name,\n  ca.name AS cat,\n  sc.school AS school\n  \nFROM sailorsenshi sa\nFULL JOIN cats ca     -- FULL JOIN or LEFT JOIN can be used\nON ca.id = sa.cat_id\nFULL JOIN schools sc  -- FULL JOIN or LEFT JOIN can be used\nON sc.id = sa.school_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339504,"user_id":null,"body":"--SELECT * FROM sailorsenshi;\n--SELECT * FROM cats;\n--SELECT * FROM schools;\n\nSELECT t1.senshi_name AS sailor_senshi, t1.real_name_jpn AS real_name, t2.name AS cat, t3.school AS school\nFROM sailorsenshi AS t1\nLEFT JOIN cats AS t2 ON t1.cat_id = t2.id\nLEFT JOIN schools AS t3 ON t1.school_id = t3.id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339505,"user_id":null,"body":"select\n  s.senshi_name as sailor_senshi,\n  s.real_name_jpn as real_name,\n  c.name as cat,\n  h.school as school\nfrom sailorsenshi s\nleft outer join cats c on c.id = s.cat_id\nleft outer join schools h on h.id = s.school_id;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339506,"user_id":null,"body":"select a.senshi_name as sailor_senshi,a.real_name_jpn as real_name,b.name as cat,c.school as school\nfrom sailorsenshi a\nleft join cats b on a.cat_id=b.id\nleft join schools c on a.school_id=c.id\norder by a.id\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339507,"user_id":null,"body":"SELECT  NULLIF(sh.senshi_name,'') AS sailor_senshi,\n        NULLIF(sh.real_name_jpn,'') AS real_name,\n        NULLIF(c.name,'') AS cat,\n        NULLIF(s.school,'') AS school\nFROM sailorsenshi sh LEFT OUTER JOIN cats c ON sh.cat_id = c.id LEFT OUTER JOIN schools s ON sh.school_id = s.id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339508,"user_id":null,"body":"SELECT SENSHI_NAME AS SAILOR_SENSHI, REAL_NAME_JPN AS REAL_NAME, CATS.NAME AS CAT, SCHOOLS.SCHOOL AS SCHOOL\nFROM SAILORSENSHI\nLEFT JOIN CATS ON SAILORSENSHI.CAT_ID = CATS.ID\nLEFT JOIN SCHOOLS ON SAILORSENSHI.SCHOOL_ID = SCHOOLS.ID","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339509,"user_id":null,"body":"SELECT sailorsenshi.senshi_name AS sailor_senshi, sailorsenshi.real_name_jpn AS real_name, c.name AS cat, h.school AS school\nFROM sailorsenshi\nLEFT OUTER JOIN cats AS c\nON sailorsenshi.cat_id = c.id\nLEFT OUTER JOIN schools AS h\nON sailorsenshi.school_id = h.id \n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ab828bcedbcfc65ea000099":[{"id":339510,"user_id":null,"body":"SELECT\n  p.pokemon_name,\n  p.str * m.multiplier AS modifiedStrength,\n  m.element\nFROM pokemon AS p\nJOIN multipliers AS m ON m.id = p.element_id\nWHERE (p.str * m.multiplier) >= 40\nORDER BY 2 DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339511,"user_id":null,"body":"SELECT\n  pokemon_name,\n  (multiplier * str) AS modifiedStrength,\n  element\nFROM\n  pokemon\nINNER JOIN\n  multipliers\nON\n  pokemon.element_id = multipliers.id\nWHERE\n  (multiplier * str) >= 40\nORDER BY\n  modifiedStrength DESC\n  ;\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339512,"user_id":null,"body":"select * from \n(select pokemon_name, str*multiplier as modifiedStrength, element \nfrom pokemon inner join multipliers on pokemon.element_id = multipliers.id) as mytable\nwhere modifiedStrength >= 40 order by modifiedStrength desc;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339513,"user_id":null,"body":"SELECT pokemon_name, str*multiplier as modifiedStrength , element\nFROM pokemon INNER JOIN multipliers ON (element_id = multipliers.id)\nWHERE str*multiplier >= 40\nORDER BY modifiedStrength DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339514,"user_id":null,"body":"-- i choose you! --\nSELECT P.pokemon_name,(M.multiplier * P.str) as modifiedStrength,M.element\nFROM \nPokemon P LEFT JOIN Multipliers M ON (P.element_id = M.id)\nWHERE modifiedStrength >= 40\nORDER BY modifiedStrength DESC\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339515,"user_id":null,"body":"SELECT p.pokemon_name, (p.str*m.multiplier) AS modifiedStrength, m.element\nFROM pokemon p JOIN multipliers m ON m.id = p.element_id\nWHERE (p.str*m.multiplier) >= 40\nORDER BY modifiedStrength DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339516,"user_id":null,"body":"-- i choose you! --\nWITH refinedPokedex AS\n  (\nSELECT\n  p.pokemon_name,\n  (p.str * m.multiplier) AS modifiedStrength,\n  m.element\nFROM pokemon AS p\nJOIN multipliers AS m ON p.element_id = m.id\n)\n\nSELECT *\nFROM refinedPokedex\nWHERE modifiedStrength >= 40\nORDER BY modifiedStrength DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339517,"user_id":null,"body":"-- i choose you! --\nSELECT pokemon.pokemon_name, pokemon.str*multipliers.multiplier AS modifiedStrength, multipliers.element \nFROM pokemon, multipliers \nON  pokemon.element_id = multipliers.id\nWHERE modifiedStrength >= 40\nORDER BY modifiedStrength DESC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339518,"user_id":null,"body":"SELECT\n  pokemon_name,\n  (str*multiplier) AS \"modifiedstrength\",\n  element\nFROM\n  pokemon\n  INNER JOIN multipliers ON multipliers.id = pokemon.element_id\nWHERE\n  (str*multiplier) >= 40\nORDER BY \n  (str*multiplier) DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339519,"user_id":null,"body":"SELECT\n  pokemon.pokemon_name,\n  pokemon.str * multipliers.multiplier AS modifiedStrength,\n  multipliers.element\nFROM pokemon, multipliers\nWHERE pokemon.element_id = multipliers.id\n  AND pokemon.str * multipliers.multiplier >= 40\nORDER BY 2 DESC","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5aba780a6a176b029800041c":[{"id":339520,"user_id":527,"body":"select bound - bound % divisor as res from max_multiple","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339521,"user_id":null,"body":"select (bound \/ divisor) * divisor AS res from max_multiple;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339522,"user_id":null,"body":"CREATE OR REPLACE FUNCTION findMaxMultiple (divisor INTEGER, bound INTEGER)\nRETURNS INTEGER AS $$\nBEGIN\n    WHILE (bound > 0)\n    LOOP\n        IF bound % divisor = 0 THEN\n            return bound;\n        END IF;\n        bound := bound - 1;\n    END LOOP;\nEND\n$$ LANGUAGE plpgsql;\n\nSELECT findMaxMultiple(divisor, bound) as res from max_multiple","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339523,"user_id":null,"body":"create or replace function max_mult (int, int) returns integer language plpgsql as\n$$\nbegin\n  while $1 % $2 <> 0 loop\n    $1 := $1 - 1;\n  end loop;\n  return $1;\nend\n$$;\n\nselect max_mult(bound, divisor) as res from max_multiple","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339524,"user_id":null,"body":"\/*select divisor + bound as res from max_multiple*\/\n\nSELECT \n  bound - (bound % divisor) as res\nFROM max_multiple","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339525,"user_id":null,"body":"select bound- mod(bound, divisor) as res from max_multiple","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339526,"user_id":null,"body":"SELECT bound - (bound % divisor) AS res FROM max_multiple;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339527,"user_id":null,"body":"CREATE OR REPLACE FUNCTION maxMultiple (divisor INTEGER, bound INTEGER) \nRETURNS INTEGER AS $$ \nDECLARE\n   N INTEGER := bound; \nBEGIN   \n   LOOP \n      IF N % divisor = 0 THEN\n        RETURN N;\n      END IF;\n      N := N - 1;\n   END LOOP; \nEND; \n$$ LANGUAGE plpgsql;\n\nSELECT maxMultiple(divisor, bound) AS res FROM max_multiple;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339528,"user_id":null,"body":"CREATE OR REPLACE FUNCTION maxMultiple(div integer, bou integer) RETURNS integer AS $$\n  BEGIN\n    FOR i IN REVERSE bou..1 LOOP\n      IF MOD(i, div) = 0 THEN\n        RETURN i;\n      END IF;\n    END LOOP; \n    RETURN 0;\n  END;\n$$ LANGUAGE plpgsql;\nselect maxMultiple(divisor, bound) as res from max_multiple;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339529,"user_id":null,"body":"select abs((bound%divisor) - bound) as res from max_multiple","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5abcf0f930488ff1a6000b66":[{"id":339530,"user_id":1301,"body":"Select * \nfrom students \nwhere ((quality1='evil' and quality2='cunning')\nor (quality1='brave' and quality2 !='evil')\nor  (quality1='studious' or quality2='intelligent')\nor (quality1='hufflepuff' or quality2='hufflepuff'))\norder by id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339531,"user_id":null,"body":"\/* Oh you may not think I'm pretty,\nBut don't judge on what you see,\nI'll eat myself if you can find\nA smarter hat than me. *\/\n\nWITH\n    sorted_students AS (\n      SELECT\n        s.*,\n        CASE\n        WHEN (s.quality1 = 'evil' AND s.quality2 = 'cunning')\n             OR (s.quality1 = 'cunning' AND s.quality2 = 'evil')\n          THEN 'Slytherin'\n        WHEN (s.quality1 = 'brave' AND s.quality2 != 'evil')\n             OR (s.quality1 != 'evil' AND s.quality2 = 'brave')\n          THEN 'Gryffindor'\n        WHEN (s.quality1 = 'studious' OR s.quality2 = 'studious' OR s.quality1 = 'intelligent' OR\n              s.quality2 = 'intelligent')\n          THEN 'Ravenclaw'\n        WHEN (s.quality1 = 'hufflepuff' OR s.quality2 = 'hufflepuff')\n          THEN 'Hufflepuff'\n        ELSE NULL\n        END AS house\n      FROM students s\n  )\nSELECT\n  ss.id,\n  ss.name,\n  ss.quality1,\n  ss.quality2\nFROM sorted_students ss\nWHERE ss.house NOTNULL\nORDER BY ss.id;\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339532,"user_id":null,"body":"select * \nfrom students\nwhere (quality1 = 'evil' AND quality2 = 'cunning')\n  OR (quality1='brave' AND quality2 != 'evil')\n  OR (quality1='studious' OR quality2 = 'intelligent')\n  OR (quality1='hufflepuff' OR quality2 = 'hufflepuff')\norder by id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339533,"user_id":null,"body":"SELECT *\nFROM students\nWHERE quality1 = 'evil' AND quality2 = 'cunning' OR\n      quality1 = 'brave' AND quality2 <> 'evil' OR\n      quality1 in ('studious', 'hufflepuff') OR \n      quality2 in ('intelligent', 'hufflepuff')\nORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339534,"user_id":null,"body":"SELECT id,name,quality1,quality2\n  FROM students\n WHERE (quality2 = 'evil' AND quality2 = 'cunning')\n    OR (quality1 = 'brave' AND quality2 != 'evil')\n    OR (quality1 = 'studious' OR quality2 = 'intelligent')\n    OR (quality1 = 'hufflepuff' OR quality2 = 'hufflepuff')\n ORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339535,"user_id":null,"body":"\/* Oh you may not think I'm pretty,\nBut don't judge on what you see,\nI'll eat myself if you can find\nA smarter hat than me. *\/\n\n\n\n\n\n\n\n\n\n\/* SELECT * FROM students\nWHERE quality1 = 'hufflepuff' OR quality2 = 'hufflepuff' \nOR quality1 = 'studious' OR quality2 = 'intelligent'\nOR (quality1 = 'evil' AND quality2 = 'cunning')\nOR (quality1 = 'brave' AND quality2 != 'evil') *\/\n\nSELECT * FROM students\nWHERE quality1 IN ( 'hufflepuff', 'studious') \nOR quality2 IN ( 'hufflepuff', 'intelligent') \nOR (quality1 = 'evil' AND quality2 = 'cunning')\nOR (quality1 = 'brave' AND quality2 != 'evil')","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339536,"user_id":null,"body":"SELECT id\n      ,name\n      ,quality1\n      ,quality2\nFROM students\nWHERE (quality1 = 'evil' and quality2 = 'cunning')\n      OR (quality1 = 'brave' and not quality2 = 'evil')\n      OR (quality1 = 'studious' or quality2 = 'intelligent')\n      OR 'hufflepuff' IN (quality1,quality2)\n\n      ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339537,"user_id":null,"body":"select * from students \nwhere (quality1 = 'evil' and quality2 = 'cunning')\nOR (quality1 = 'brave' and quality2 != 'evil')\nor (quality1 in ('studious','intelligent') or quality2 in ('studious','intelligent'))\nor (quality1 = 'hufflepuff' or quality2 = 'hufflepuff')\norder by id;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339538,"user_id":null,"body":"SELECT\n    id,\n    name,\n    quality1,\n    quality2\nFROM students\nWHERE\n    ('evil' IN (quality1, quality2) AND 'cunning' IN (quality1, quality2)) \n    OR\n    ('brave' IN (quality1, quality2) AND quality2 != 'evil')\n    OR\n    ('studious' IN (quality1, quality2) OR 'intelligent' IN (quality1, quality2))\n    OR\n    ('hufflepuff' IN (quality1, quality2))\nORDER BY id\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339539,"user_id":null,"body":"SELECT * FROM students \nWHERE ((quality1='evil' AND quality2='cunning')\nOR (quality1='studious' OR quality2='intelligent')\nOR (quality1='hufflepuff' OR quality2='hufflepuff') \nOR (quality1='brave' AND quality2!='evil'))\nORDER BY id ASC\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ac698cdd325ad18a3000170":[{"id":339540,"user_id":null,"body":"SELECT name, sum(won) as won, sum(lost) as lost FROM fighters\nINNER JOIN winning_moves ON fighters.move_id=winning_moves.id\nWHERE NOT move IN ('Hadoken', 'Shouoken', 'Kikoken')\nGROUP BY name\nORDER by won DESC\nLIMIT 6;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339541,"user_id":214,"body":"select f.name,\n       sum( f.won) as won, \n       sum(f.lost) as lost\n    from fighters f\n    join winning_moves wm \n      on wm.id = f.move_id and\n         wm.move not in ('Hadoken', 'Shouoken','Kikoken')\n    group by f.name\n    order by 2 desc\n    limit 6","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339542,"user_id":null,"body":"select\n  name,\n  sum(won) as won,\n  sum(lost) as lost\nfrom fighters f\njoin winning_moves wm on f.move_id = wm.id\nwhere move not in ('Hadoken', 'Shouoken', 'Kikoken')\ngroup by name\norder by won desc\nlimit 6","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339543,"user_id":null,"body":"SELECT fighters.name, \n       SUM(fighters.won) AS won,\n       SUM(fighters.lost) AS lost\nFROM fighters, winning_moves\nWHERE fighters.move_id = winning_moves.id \nAND winning_moves.move NOT IN ('Hadoken', 'Shouoken', 'Kikoken')\nGROUP BY fighters.name\nORDER BY won DESC\nLIMIT 6;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339544,"user_id":null,"body":"select name, sum(won) as won, sum(lost) as lost\nfrom fighters f\n  inner join winning_moves wm on f.move_id=wm.id\nwhere wm.move not in ('Hadoken', 'Shouoken', 'Kikoken')\ngroup by name\norder by won desc\nlimit 6\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339545,"user_id":null,"body":"SELECT name, SUM(won) AS won, SUM(lost) AS lost\nFROM fighters AS f\nJOIN winning_moves AS w ON w.id = f.move_id\nWHERE w.move NOT IN ('Hadoken', 'Shouoken', 'Kikoken')\nGROUP BY name\nORDER BY won DESC\nLIMIT 6","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339546,"user_id":null,"body":"SELECT name, SUM(won) AS won, SUM(lost) AS lost\nFROM fighters\nINNER JOIN winning_moves ON fighters.move_id = winning_moves.id\nWHERE winning_moves.move NOT IN('Hadoken', 'Shouoken', 'Kikoken')\nGROUP BY name\nORDER BY won DESC\nLIMIT 6;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339547,"user_id":null,"body":"select name,SUM(won) AS \"won\", SUM(lost) as \"lost\"  \nfrom fighters\njoin winning_moves as moves on moves.id = fighters.move_id\nwhere move_id > 3\ngroup by name\norder by won desc\nlimit 6\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339548,"user_id":null,"body":"\nSELECT name, sum(won) AS won, sum(lost) AS lost\nFROM fighters\nWHERE move_id NOT IN (SELECT id FROM winning_moves WHERE move IN ('Hadoken', 'Shouoken', 'Kikoken'))\nGROUP BY name\nORDER BY won DESC\nLIMIT 6;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339549,"user_id":null,"body":"--- 3, 2, 1, fight! ---\nselect\nname, sum(won) as won, sum(lost) as lost\nfrom fighters as f\ninner join (select * from winning_moves where move not in ('Hadoken', 'Shouoken','Kikoken')) as w\non w.id = f.move_id\ngroup by name\norder by won desc\nlimit 6","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ad90fb688a0b74111000055":[{"id":339550,"user_id":null,"body":"--but on the land of L\u00f3rien no shadow lay--\nSELECT INITCAP(firstname || ' ' || lastname) AS shortlist\nFROM elves\nWHERE firstname LIKE '%tegil%' OR lastname LIKE '%astar%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339551,"user_id":1405,"body":"SELECT INITCAP(concat_ws(' ', firstname, lastname))  AS shortlist   FROM Elves\nWHERE firstname LIKE '%tegil%' Or lastname LIKE '%astar%';","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339552,"user_id":null,"body":"-- this is a bad DB design: words in SQL are to be separated by _\n-- Note: this does not work DBs from other vendors \n--       it would be nice, if the examples here were for SQL Server and Oracle\nSELECT INITCAP(CONCAT(firstname, ' ', lastname)) AS shortlist\n  -- this is a bad DB design: table names should be in singular !\n  FROM elves\n  WHERE firstname LIKE '%tegil%'\n    OR lastname LIKE '%astar%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339553,"user_id":null,"body":"SELECT\n  CONCAT\n  (\n    UPPER(LEFT(firstname, 1)), SUBSTRING(firstname FROM 2), \n    ' ', \n    UPPER(LEFT(lastname, 1)), SUBSTRING(lastname FROM 2)\n  ) AS shortlist\nFROM\n  Elves\nWHERE\n  firstname LIKE '%tegil%'\n  OR lastname LIKE '%astar%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339554,"user_id":null,"body":"SELECT initcap(firstname) || ' ' || initcap(lastname) AS shortlist\nFROM elves\nWHERE firstname LIKE '%tegil%' OR lastname LIKE '%astar%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339555,"user_id":214,"body":"select initcap(firstname) || ' ' || initcap(lastname) shortlist \n  from Elves \n where firstname ~ 'tegil'or \n       lastname ~ 'astar'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339556,"user_id":null,"body":"SELECT CONCAT(INITCAP(firstname),\n' ', INITCAP(lastname)) AS shortlist\nFROM Elves\nWHERE firstname LIKE '%tegil%'\nOR lastname LIKE '%astar%'\n;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339557,"user_id":null,"body":"--but on the land of L\u00f3rien no shadow lay--\n\n\nSELECT \n  CONCAT(\n    CONCAT(\n      --- Firstname cap\n      UPPER(LEFT(firstname, 1)),\n      SUBSTRING(firstname, 2, LENGTH(firstname) - 1)),\n      --- end firstname cap\n      ' ', \n    CONCAT(\n      --- lastname cap\n      UPPER(LEFT(lastname, 1)),\n      SUBSTRING(lastname, 2, LENGTH(lastname) - 1))\n      ---\n  ) AS shortlist FROM Elves\nWHERE firstname LIKE '%tegil%'\nOR lastname LIKE '%astar%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339558,"user_id":null,"body":"SELECT INITCAP(CONCAT_WS(' ', firstname, lastname)) AS shortlist FROM elves\nWHERE firstname LIKE '%tegil%' OR lastname LIKE '%astar%'","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339559,"user_id":null,"body":"SELECT concat(initcap(firstname), ' ', initcap(lastname)) AS shortlist FROM elves WHERE firstname LIKE '%tegil%' OR lastname LIKE '%astar%';","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5ae62fcf252e66d44d00008e":[{"id":339560,"user_id":null,"body":"SELECT GREATEST( a+b+c, (a+b)*c, a*(b+c), a*b*c ) \nAS res FROM expression_matter;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339561,"user_id":null,"body":"SELECT greatest(\n    a + b + c,\n    a * b * c,\n    a + b * c,\n    a * b + c,\n    (a + b) * c,\n    a * (b + c)\n  ) AS res \nFROM expression_matter;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339562,"user_id":226,"body":"SELECT\n(\n  SELECT MAX(mx)\n  FROM \n  ( VALUES (a+b+c),\n           (a+b*c),\n           (a*b+c),\n           (a*b*c),\n           (a*(b+c)),\n           ((a+b)*c) )\n  AS _(mx)\n) AS res\nFROM expression_matter;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339563,"user_id":null,"body":"CREATE OR REPLACE FUNCTION max_element(int[]) RETURNS int\nAS $$\n  SELECT max(x) FROM unnest($1) x;\n$$ LANGUAGE sql;\n  \nSELECT max_element(ARRAY[\n     a+b+c,\n     (a+b)*c,\n     a*(b+c),\n     a*b*c\n   ]) AS res\nFROM expression_matter","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339564,"user_id":null,"body":"select\n        case\n        when s1.res1 >= s1.res2 and s1.res1 >= s1.res3 and s1.res1 >= s1.res4 then s1.res1\n        when s1.res2 >= s1.res3 and s1.res2 >= s1.res1 and s1.res2 >= s1.res4 then s1.res2\n        when s1.res3 >= s1.res1 and s1.res3 >= s1.res2 and s1.res3 >= s1.res4 then s1.res3\n        else s1.res4\n        end as res\nfrom\n(select  \n        (em.a * (em.b + em.c)) as res1,\n        ((em.a + em.b) * em.c) as res2,\n        (em.a * em.b * em.c) as res3,        \n        (em.a + em.b + em.c) as res4        \nfrom expression_matter em) s1","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339565,"user_id":null,"body":"SELECT GREATEST(first_number, \n                second_number, \n                third_number, \n                fourth_number, \n                fifth_number, \n                sixth_number)\n        AS res FROM \n        (SELECT a * (b + c) AS first_number, \n                 a * b * c as second_number, \n                 a + b * c as third_number, \n                 (a + b) * c as fourth_number,\n                 a + b + c as fifth_number,\n                 a * b + c as sixth_number\n         FROM expression_matter) as Sub_result;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339566,"user_id":null,"body":"Select Greatest(a+b+c,\na+b*c,\na*b*c,\n(a+b)*c,\na*(b+c),\na*b+c) as res FROM expression_matter;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339567,"user_id":null,"body":"SELECT GREATEST(a * (b + c), a * b * c, (a + b) * c, a + b + c) AS res FROM expression_matter;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339568,"user_id":null,"body":"\/* your query - you are given columns a, b, and c *\/ \n-- a + b * c\n-- a + b + c\n-- (a + b) * c\n-- a * b + c\n-- a * (b + c)\n-- a * b * c\n\nSELECT \n  case when (\n    case when (\n      case when (\n        case when (\n          case when a + b * c > a + b + c then a + b * c\n           else a + b + c end)\n                  > --3--\n                  (a + b) * c then   \n                     (case when a + b * c > a + b + c then a + b * c\n                     else a + b + c end) \n        else (a + b) * c end)\n                > --4--\n                a * b + c then \n                  (\n                    case when (\n                      case when a + b * c > a + b + c then a + b * c\n                       else a + b + c end)\n                              > --3--\n                              (a + b) * c then   \n                                 (case when a + b * c > a + b + c then a + b * c\n                                 else a + b + c end) \n                    else (a + b) * c end)\n      else a * b + c end)\n            > --5--\n            a * (b + c) then \n              (\n                case when (\n                  case when (\n                    case when a + b * c > a + b + c then a + b * c\n                     else a + b + c end)\n                            > --3--\n                            (a + b) * c then   \n                               (case when a + b * c > a + b + c then a + b * c\n                               else a + b + c end) \n                  else (a + b) * c end)\n                          > --4--\n                          a * b + c then \n                            (\n                              case when (\n                                case when a + b * c > a + b + c then a + b * c\n                                 else a + b + c end)\n                                        > --3--\n                                        (a + b) * c then   \n                                           (case when a + b * c > a + b + c then a + b * c\n                                           else a + b + c end) \n                              else (a + b) * c end)\n                else a * b + c end)\n    else a * (b + c) end)\n        > --6--\n        a * b * c then \n  (\n      case when (\n        case when (\n          case when (\n            case when a + b * c > a + b + c then a + b * c\n             else a + b + c end)\n                    > --3--\n                    (a + b) * c then   \n                       (case when a + b * c > a + b + c then a + b * c\n                       else a + b + c end) \n          else (a + b) * c end)\n                  > --4--\n                  a * b + c then \n                    (\n                      case when (\n                        case when a + b * c > a + b + c then a + b * c\n                         else a + b + c end)\n                                > --3--\n                                (a + b) * c then   \n                                   (case when a + b * c > a + b + c then a + b * c\n                                   else a + b + c end) \n                      else (a + b) * c end)\n        else a * b + c end)\n              > --5--\n              a * (b + c) then \n                (\n                  case when (\n                    case when (\n                      case when a + b * c > a + b + c then a + b * c\n                       else a + b + c end)\n                              > --3--\n                              (a + b) * c then   \n                                 (case when a + b * c > a + b + c then a + b * c\n                                 else a + b + c end) \n                    else (a + b) * c end)\n                            > --4--\n                            a * b + c then \n                              (\n                                case when (\n                                  case when a + b * c > a + b + c then a + b * c\n                                   else a + b + c end)\n                                          > --3--\n                                          (a + b) * c then   \n                                             (case when a + b * c > a + b + c then a + b * c\n                                             else a + b + c end) \n                                else (a + b) * c end)\n                  else a * b + c end)\n      else a * (b + c) end)\n  else  a * b * c end\nAS res FROM expression_matter;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339569,"user_id":null,"body":"SELECT\n    GREATEST(a * (b+c),\n             a + b + c,\n             a * b * c,\n             (a + b) * c\n    ) AS res\n\nFROM expression_matter\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5c0ae69d5f72394e130025f6":[{"id":339570,"user_id":149,"body":"SELECT name, greeting, substring(greeting FROM '#(\\d+)') AS user_id FROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339571,"user_id":null,"body":"SELECT\n  name,\n  greeting,\n  SUBSTRING(greeting FROM '#([0-9]+)') AS user_id\nFROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339572,"user_id":null,"body":"-- SELECT greeting FROM greetings;\nSELECT name, greeting, substring(greeting FROM '#(\\d+)') AS user_id FROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339573,"user_id":503,"body":"select name,greeting,substring(greeting,'(?<=#)[0-9]+') user_id from greetings","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339574,"user_id":null,"body":"SELECT name, greeting, (regexp_matches(greeting, '#([0-9_]+)'))[1] AS user_id\nFROM greetings","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339575,"user_id":null,"body":"select \n  name,\n  greeting,\n  substring(greeting, '#(\\d+)') as user_id\nfrom greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339576,"user_id":null,"body":"SELECT name, greeting, ARRAY_TO_STRING(REGEXP_MATCHES(greeting, '#([0-9]+)'), '*') AS user_id\nFROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339577,"user_id":null,"body":"ALTER TABLE greetings DROP COLUMN id;\nALTER TABLE greetings ADD COLUMN user_id varchar(12);\nUPDATE greetings SET user_id = substring(greetings.greeting, '#([0-9]+)');\nSELECT * FROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339578,"user_id":null,"body":"SELECT name, greeting, SUBSTRING(SUBSTRING(greeting, '#\\d+') from 2) user_id\nFROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339579,"user_id":null,"body":"SELECT name\n  ,greeting\n  ,SUBSTRING(greeting FROM '#([0-9]+)') \"user_id\"\nFROM greetings;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5d50e3914861a500121e1958":[{"id":339580,"user_id":null,"body":"select \ncase\n    when sum(ascii(letter)-96)%26 = 0 then 'z'\n    when sum(ascii(letter)-96) > 26 then chr(cast(sum(ascii(letter)-96)%26 as int)+96)\n    when sum(ascii(letter)-96) <= 26 then chr(cast(sum(ascii(letter)-96) as int)+96)\n    else 'z'\nend as letter\nfrom letters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339581,"user_id":null,"body":"--SELECT * FROM letters;\n\nSELECT CASE WHEN COUNT(letter) = 0 THEN 'z' ELSE CHR(MOD(SUM(ASCII(letter) - 96) - 1, 26)::INT + 97) END AS letter FROM letters;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339582,"user_id":null,"body":"select coalesce(chr(((sum(ascii(letter) - 96))::int - 1) % 26 + 97), 'z') as letter\nfrom letters","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339583,"user_id":null,"body":"-- # write your statement here, see description for setup.\nWITH VAL AS\n(SELECT SUM(POSITION(letter IN 'abcdefghijklmnopqrstuvwxyz')) % 26 AS S FROM letters)\n\nSELECT \nCASE \n  WHEN v.s IS null OR v.s = 0 THEN 'z' \n  ELSE SUBSTRING('abcdefghijklmnopqrstuvwxyz',V.S::int,1) \nEND AS letter \nFROM VAL V;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339584,"user_id":null,"body":"SELECT COALESCE (CHR ( CAST((SUM (ASCII(letter)-96)-1)%26 AS INT) +97),'z') AS letter FROM letters;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339585,"user_id":null,"body":"SELECT CHR(96 + CASE\n                  WHEN COUNT(t.iCharCode) = 0 THEN 26\n                  WHEN t.iCharCode > 26 THEN CASE t.iCharCode % 26\n                                               WHEN 0 THEN 26\n                                               ELSE t.iCharCode % 26\n                                             END\n                  ELSE t.iCharCode\n                END) AS letter\n  FROM (SELECT CAST(SUM(ASCII(letter) - 96) AS integer) AS iCharCode\n          FROM letters) t\n  GROUP BY t.iCharCode;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339586,"user_id":null,"body":"select\n  case\n    when count(letter) = 0 or mod(sum(ascii(letter) - 96), 26) = 0\n      then 'z'\n    when sum(ascii(letter) - 96) < 27\n      then chr(cast(sum(ascii(letter) - 96) as integer)  + 96) \n    else chr(cast(mod(sum(ascii(letter) - 96), 26) as integer) + 96)\n  end as letter\nfrom letters;\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339587,"user_id":226,"body":"SELECT \nCASE \n    WHEN letter=0 or letter IS null THEN 'z'\n    ELSE CHR(letter+96)\nEND \nAS letter\nFROM \n(VALUES (CAST(((SELECT SUM(ASCII(letter)-96) FROM letters) % 26) AS Int)))\nAS _(letter)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339588,"user_id":null,"body":"SELECT CHR(96 + CASE\n                  WHEN COUNT(t.iCharCode) = 0 THEN 26\n                  WHEN t.iCharCode > 26 THEN CASE t.iCharCode % 26\n                                               WHEN 0 THEN 26\n                                               ELSE t.iCharCode % 26\n                                             END\n                  ELSE t.iCharCode\n                END) AS letter, COUNT(t.iCharCode), t.iCharCode, t.iCharCode % 26 AS iCharCode26\n  FROM (SELECT CAST(SUM(ASCII(letter) - 96) AS integer) AS iCharCode\n          FROM letters) t\n  GROUP BY t.iCharCode;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339589,"user_id":null,"body":"-- # write your statement here, see description for setup.\nselect COALESCE(chr(cast((a.ascii_num-div(a.ascii_num - 1, 26) * 26) + 96 as INT)), 'z') as letter\nfrom (\n  select sum(ASCII(letter) - 96) as ascii_num\n  from letters) a;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5dac87a0abe9f1001f39e36d":[{"id":339590,"user_id":null,"body":"select\n  name as product_name,\n  extract(year from date)::int as year,\n  extract(month from date)::int as month,\n  extract(day from date)::int as day,\n  sum(price * count) as total\nfrom sales_details sd\njoin sales s on sd.sale_id = s.id\njoin products p on sd.product_id = p.id\ngroup by name, rollup(year, month, day)\norder by product_name, year, month, day","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339591,"user_id":1313,"body":"SELECT \n  products.name as product_name,\n  extract(year from date)::smallint as year,\n  extract(month from date)::smallint as month,\n  extract(day from date)::smallint as day,\n  sum(products.price * sales_details.count) as total\nFROM products\n  JOIN sales_details\n    ON products.id = sales_details.product_id\n  JOIN sales\n    ON sales.id = sales_details.sale_id\nGROUP BY rollup(product_name, year, month, day)\n  HAVING ascii(products.name) > 0\nORDER BY product_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339592,"user_id":null,"body":"select \n  name as product_name,\n  cast( (extract(year from date)) as integer ) as year,\n  cast( extract(month from date) as integer ) as month,\n  cast( extract(day from date) as integer ) as day,\n  sum(price * count) as total\nfrom sales_details sd\ninner join products p on sd.product_id = p.id\ninner join sales s on sd.sale_id = s.id\ngroup by grouping sets (\n  (product_name, year),\n  (product_name, year, month),\n  (product_name, year, month, day),\n  (product_name)\n)\norder by product_name, year, month, day;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339593,"user_id":null,"body":"SELECT \n  p.name as product_name, \n  extract(year from s.date)::int as year, \n  extract(month from s.date)::int as month,\n  extract(day from s.date)::int as day,\n  sum(p.price*sd.count) as total\n  FROM sales_details as sd\n  inner join sales as s on s.id = sd.sale_id\n  inner join products as p on sd.product_id = p.id\n  \n\n GROUP BY product_name,\n   rollup(year, month, day)\n \n\/* GROUPING SETS (\n  (product_name,year, month, day),\n  (product_name, year, month),\n  (product_name, year),\n  (product_name)\n)\nORDER BY product_name, year, month, day\n\nSELECT \np.name as product_name,\nEXTRACT(YEAR FROM s.date)::int as year,\nEXTRACT(MONTH FROM s.date)::int as month,\nEXTRACT(DAY FROM s.date)::int as day,\nSUM(p.price*sd.count) as total\n\nFROM sales_details as sd\nINNER JOIN sales as s\n  ON s.id = sd.sale_id\nINNER JOIN products as p\n  ON sd.product_id = p.id\n\nGROUP BY GROUPING SETS (\n  (name,year, month, day),\n  (name, year, month),\n  (name, year),\n  (name)\n)\nORDER BY product_name, year, month, day*\/","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339594,"user_id":null,"body":"select \n  p.name as product_name,\n  date_part('year', s.date) as year,\n  date_part('month', s.date) as month,\n  date_part('day', s.date) as day,\n  sum(p.price * sd.count)::decimal as total\nfrom products p\n  join sales_details sd on p.id = sd.product_id\n  join sales s on sd.sale_id = s.id\ngroup by \n  grouping sets (\n    (product_name, year, month, day),\n    (product_name, year, month),\n    (product_name, year),\n    (product_name)\n  )\norder by product_name, year, month, day","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339595,"user_id":null,"body":"select pr.name as product_name, sl.y::numeric::integer as year, sl.m::numeric::integer as month, sl.d::numeric::integer as day, sum(sl.count) as total from products pr, (select sld.product_id as id, sl.y as y, sl.m as m, sl.d as d, sld.count from (select id, EXTRACT(year from date) as y, EXTRACT(month from date) as m, EXTRACT(day from date) as d from sales) sl, (select sld.sale_id, sld.product_id, (pr.price * sld.count) as count from sales_details sld, products pr where pr.id = sld.product_id) sld, products pr where sl.id = sld.sale_id union select su.id, su.y, su.m, NULL as d, sum(su.count) as count from (select sld.product_id as id, sl.y as y, sl.m as m, sld.count from (select id, EXTRACT(year from date) as y, EXTRACT(month from date) as m, EXTRACT(day from date) as d from sales group by id, date) sl, (select sld.sale_id, sld.product_id, (pr.price * sld.count) as count from sales_details sld, products pr where pr.id = sld.product_id) sld, products pr where sl.id = sld.sale_id group by sld.product_id, sl.y, sl.m, sl.d, sld.count) su group by su.id, su.y, su.m union select su.id, su.y, NULL as m, NULL as d, sum(su.count) as count from (select sld.product_id as id, sl.y as y, sl.m as m, sld.count from (select id, EXTRACT(year from date) as y, EXTRACT(month from date) as m, EXTRACT(day from date) as d from sales group by id, date) sl, (select sld.sale_id, sld.product_id, (pr.price * sld.count) as count from sales_details sld, products pr where pr.id = sld.product_id) sld, products pr where sl.id = sld.sale_id group by sld.product_id, sl.y, sl.m, sl.d, sld.count) su group by su.id, su.y union select su.id, NULL as y, NULL as m, NULL as d, sum(su.count) as count from (select sld.product_id as id, sl.y as y, sl.m as m, sld.count from (select id, EXTRACT(year from date) as y, EXTRACT(month from date) as m, EXTRACT(day from date) as d from sales group by id, date) sl, (select sld.sale_id, sld.product_id, (pr.price * sld.count) as count from sales_details sld, products pr where pr.id = sld.product_id) sld, products pr where sl.id = sld.sale_id group by sld.product_id, sl.y, sl.m, sl.d, sld.count) su group by su.id) sl where pr.id = sl.id group by pr.name, sl.y, sl.m, sl.d order by pr.name, COALESCE(sl.y, 9999), COALESCE(sl.m, 9999), COALESCE(sl.d, 9999) asc","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339596,"user_id":1566,"body":"SELECT name product_name, \n       DATE_PART('year', date)::int as year, \n       DATE_PART('month', date)::int as month,\n       DATE_PART('day', date)::int as day,\n       sum(price * count) total\nFROM sales_details d JOIN sales s ON d.sale_id = s.id\n                     JOIN products p ON d.product_id = p.id\nGROUP BY GROUPING SETS ((1,2,3,4),(1,2,3),(1,2),(1))\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339597,"user_id":null,"body":"WITH day_data as (SELECT name as product_name,\n       extract(year from date)::integer as year,\n       extract(month from date)::integer as month,\n       extract(day from date)::integer as day,\n       sum(price * count) as total\nFROM sales_details LEFT JOIN products\nON products.id = sales_details.product_id\nLEFT JOIN sales\nON sales.id = sales_details.sale_id\nGROUP BY (product_name, year, month, day)),\n\nmonth_data as (SELECT name as product_name,\n       extract(year from date)::integer as year,\n       extract(month from date)::integer as month,\n       NULL::integer as day,\n       sum(price * count) as total\nFROM sales_details LEFT JOIN products\nON products.id = sales_details.product_id\nLEFT JOIN sales\nON sales.id = sales_details.sale_id\nGROUP BY (product_name, year, month)),\n\nyear_data as (SELECT name as product_name,\n       extract(year from date)::integer as year,\n       NULL::integer as month,\n       NULL::integer as day,\n       sum(price * count) as total\nFROM sales_details LEFT JOIN products\nON products.id = sales_details.product_id\nLEFT JOIN sales\nON sales.id = sales_details.sale_id\nGROUP BY (product_name, year)),\n\ntotals as (SELECT name as product_name,\n       NULL::integer as year,\n       NULL::integer as month,\n       NULL::integer as day,\n       sum(price * count) as total\nFROM sales_details LEFT JOIN products\nON products.id = sales_details.product_id\nLEFT JOIN sales\nON sales.id = sales_details.sale_id\nGROUP BY (product_name))\n\nSELECT *\nFROM day_data\nUNION\nSELECT *\nFROM month_data\nUNION\nSELECT *\nFROM year_data\nUNION\nSELECT *\nFROM totals\nORDER BY product_name, year, month, day;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339598,"user_id":null,"body":"select \n  c.name as product_name, \n  date_part('year', date) as year, \n  date_part('month', date) as month, \n  date_part('day', date) as day, \n  sum(price * count) as total\nfrom\n  sales_details a\n  inner join sales b on a.sale_id = b.id\n  inner join products c on a.product_id = c.id\ngroup by\n  grouping sets (\n    (1),\n    (1, 2),\n    (1, 2, 3),\n    (1, 2, 3, 4)\n  )\norder by 1, 2, 3, 4\n  ","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339599,"user_id":null,"body":"SELECT\nts.name as product_name,\nTO_CHAR(s.date, 'YYYY')::int as year,\nTO_CHAR(s.date, 'MM')::int as month,\nTO_CHAR(s.date, 'DD')::int as day,\nsum(ts.price * ls.count) as total\nFROM sales_details ls\ninner join products ts on ts.id=ls.product_id\ninner join sales s on s.id=ls.sale_id\ngroup by ts.name,\nrollup(year, month, day)\norder by ts.name,\nTO_CHAR(s.date, 'YYYY')::int,\nTO_CHAR(s.date, 'MM')::int,\nTO_CHAR(s.date, 'DD')::int","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5daf515c3affec002b2fb921":[{"id":339600,"user_id":null,"body":"select \n  data->>'first_name' as first_name,\n  data->>'last_name' as last_name,\n  extract(year from age(now(), (data->>'date_of_birth')::date))::integer as age,\n  case\n    when data->>'private' = 'true' then 'Hidden'\n    when data->>'private' = 'false' and data#>>'{email_addresses, 0}' is null then 'None'\n    else data#>>'{email_addresses, 0}'\n  end as email_address\nfrom users\norder by first_name, last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339601,"user_id":null,"body":"CREATE TYPE data_t AS  (\n  first_name         name,\n  last_name          name,\n  date_of_birth      date,\n  email_addresses    jsonb, -- text[]\n  private            boolean\n);\n\nSELECT first_name,  last_name,\n  EXTRACT(YEAR from age(date_of_birth))::int as age,\n  CASE\n    WHEN private THEN 'Hidden'\n    ELSE coalesce(email_addresses->>0, 'None')\n  END as email_address\n\nFROM users, json_populate_record(null::data_t, users.data)\nORDER BY first_name, last_name\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339602,"user_id":null,"body":"SELECT data ->> 'first_name' AS first_name,\n       data ->> 'last_name' AS last_name,\n       CAST (EXTRACT(YEAR FROM age(TO_DATE(data ->> 'date_of_birth','yyyy-mm-dd'))) AS INTEGER) AS age,\n       CASE WHEN data ->> 'private' = 'true' THEN 'Hidden'\n            WHEN data ->> 'email_addresses' = '[]' THEN 'None'\n            ELSE data -> 'email_addresses' ->> 0\n       END AS email_address\n       FROM users\n       ORDER BY first_name,last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339603,"user_id":null,"body":"SELECT data->>'first_name' AS first_name,\n       data->>'last_name' AS last_name,\n       date_part('year', age((data->>'date_of_birth')::date))::integer AS age,\n       CASE \n         WHEN NOT (data->>'private')::boolean \n           THEN (\n             SELECT COALESCE((array_agg(x))[1], 'None')\n             FROM json_array_elements_text(data->'email_addresses') t(x)\n           )\n           ELSE 'Hidden'\n       END AS email_address\nFROM users\nORDER BY first_name, last_name\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339604,"user_id":null,"body":"select \n    data ->> 'first_name' as first_name,\n    data ->> 'last_name'as last_name,\n    date_part('year', age(date(data ->> 'date_of_birth')))::int as age,\n    case \n        when (data ->> 'private')::bool then 'Hidden'\n        else coalesce(data -> 'email_addresses' ->> 0, 'None') \n    end as email_address\nfrom users\norder by first_name, last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339605,"user_id":null,"body":"SELECT data->>'first_name' AS first_name,\n       data->>'last_name'  AS last_name,\n       EXTRACT(YEAR FROM age(now(), (data->>'date_of_birth')::date))::integer as age,\n       CASE WHEN data->>'private' = 'true' THEN 'Hidden'\n            WHEN data->>'private' = 'false' AND data#>>'{email_addresses, 0}' IS NULL THEN 'None'\n       ELSE data#>>'{email_addresses, 0}'\n       END AS email_address\nFROM users\nORDER BY first_name, last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339606,"user_id":null,"body":"SELECT \n  data ->> 'first_name' as first_name,\n  data ->> 'last_name' as last_name,\n  extract(year from age((data ->> 'date_of_birth')::date))::int as age,\n  case when data ->> 'private' = 'true' then 'Hidden'\n  else coalesce(data #>> '{email_addresses, 0}', 'None')\n  end as email_address\nfrom users\norder by 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339607,"user_id":null,"body":"SELECT \n  data->>'first_name' as first_name, \n  data->>'last_name' as last_name, \n  extract(year from age((data->>'date_of_birth')::date))::int as age, --\u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\n  case\n    when data->>'private' = 'true'\n    then 'Hidden'\n    when \n    data->>'email_addresses' = '[]'\n    then 'None'\n    else data#>>'{email_addresses,0}'\n  end as email_address\nFROM users\norder by first_name, last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339608,"user_id":null,"body":"select\n  data->>'first_name' as first_name,\n  data->>'last_name' as last_name,\n  extract(year from age((data->>'date_of_birth')::timestamp))::int as age,\n  case\n    when (data->>'private')::boolean then 'Hidden'\n    when data->>'email_addresses' = '[]' then 'None'\n    else data#>>'{email_addresses, 0}'\n  end as email_address\nfrom users\norder by first_name, last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339609,"user_id":null,"body":"select first_name, last_name, age,\n  case when private::text = 'true' then 'Hidden'\n  else email_address\n  end email_address\nfrom (\n  SELECT json_extract_path_text(data, 'first_name') first_name, \n    json_extract_path_text(data, 'last_name') last_name,\n    extract( year from (age(json_extract_path_text(data, 'date_of_birth')::date)))::int age,\n    json_extract_path_text(data, 'private') private,  \n    coalesce(replace((data->'email_addresses'->0)::text, '\"', ''),'None') email_address\n  FROM users ) json\n  order by 1,2\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5db039743affec0027375de0":[{"id":339610,"user_id":null,"body":"SELECT \nfirst_name, \nlast_name, \nDATE_PART('year', AGE(date_of_birth))::integer as age,\nCASE\n    WHEN private = true THEN 'Hidden'\n    WHEN email IS NULL THEN 'None'\n    ELSE email\nEND as email_address\nFROM users x,\n   XMLTABLE('\/data\/user'\n     PASSING x.data\n     COLUMNS \n       first_name     VARCHAR(50)   PATH 'first_name',\n       last_name      VARCHAR(50)   PATH 'last_name',\n       date_of_birth  DATE          PATH 'date_of_birth',\n       private        BOOLEAN       PATH 'private',\n       email          TEXT          PATH 'email_addresses\/address[1]'\n     ) xt\norder by first_name, last_name;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339611,"user_id":null,"body":"SELECT\n  first_name,\n  last_name,\n  EXTRACT(YEAR FROM age(date_of_birth))::int AS age,\n  CASE private\n  WHEN true THEN 'Hidden'\n  WHEN false THEN email_address\n  END AS email_address\nFROM XMLTABLE('\/data\/user'\n              PASSING (SELECT data FROM users)\n              COLUMNS\n                first_name text path 'first_name',\n                last_name text path 'last_name',\n                date_of_birth date path 'date_of_birth',\n                private boolean path 'private',\n                email_address text path 'email_addresses\/address[1]' DEFAULT 'None')\nORDER BY 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339612,"user_id":503,"body":"select (xpath('first_name\/text()',U))[1]::text First_Name,(xpath('last_name\/text()',U))[1]::text Last_Name,Date_Part('Year',age(xpath('date_of_birth\/text()',U)::text::date))::int Age,case when '{true}' = xpath('private\/text()',U)::text then 'Hidden' else coalesce((xpath('email_addresses\/address\/text()',U))[1]::text,'None') end EMail_Address from (select unnest(xpath('user',Data)) U from Users) _ order by 1,2,xpath('date_of_birth',U)::text","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339613,"user_id":null,"body":"SELECT \n  first_name,\n  last_name,\n  extract(year from age(date_of_birth))::int as age,\n  case when private then 'Hidden'\n  else email_address\n  end as email_address\nFROM XMLTABLE('\/data\/user' PASSING (select data from users) \n  COLUMNS \n  first_name text path 'first_name',\n  last_name text path 'last_name',\n  date_of_birth date path 'date_of_birth',\n  private boolean path 'private',\n  email_address text path 'email_addresses\/address[1]' default 'None'\n)\norder by 1, 2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339614,"user_id":null,"body":"SELECT \n  unnest(xpath('\/user\/first_name\/text()', data2))::text as first_name,\n  unnest(xpath('\/user\/last_name\/text()', data2))::text as last_name,\n  DATE_PART('year', AGE(TO_DATE(unnest(xpath('\/\/date_of_birth\/text()', data2))::text, 'yyyy-mm-dd')))::int as age,\n  CASE\n    WHEN xpath('\/user\/private\/text()', data2)::text LIKE '%true%' THEN 'Hidden'\n    WHEN array_length(xpath('\/user\/email_addresses\/*[1]\/text()', data2), 1) is null THEN 'None'\n    else unnest(xpath('\/user\/email_addresses\/*[1]\/text()', data2))::text\n  END email_address\nFROM \n  (select unnest(xpath('\/data\/user', data)) as data2 from users) t\nORDER BY first_name, last_name\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339615,"user_id":null,"body":"WITH parsed_xml AS (\n    SELECT\n        first_name,\n        last_name,\n        date_of_birth,\n        email_address,\n        private\n    FROM\n        users,\n        xmltable(\n            '\/data\/user' PASSING data\n            COLUMNS\n                first_name TEXT,\n                last_name TEXT,\n                date_of_birth TEXT,\n                email_address TEXT PATH 'email_addresses\/address[1]',\n                private BOOL\n    )\n)\nSELECT\n    first_name,\n    last_name,\n    extract('year' from age(now(), date_of_birth::timestamp)) AS age,\n    CASE\n        WHEN private IS true THEN 'Hidden'\n        WHEN email_address LIKE '%@%' THEN email_address\n        ELSE 'None'\n    END AS email_address\nFROM parsed_xml\nORDER BY first_name, last_name;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339616,"user_id":null,"body":"SELECT first_name, last_name,\n  EXTRACT(year FROM AGE(dob)) AS age,\n  CASE \n    WHEN private=true THEN 'Hidden'\n    WHEN email_address IS NULL THEN 'None'\n    ELSE email_address\n  END AS email_address\nFROM (\nSELECT xmltable.* FROM users,\n  XMLTABLE ('\/data\/user' PASSING data \n           COLUMNS first_name TEXT PATH 'first_name' NOT NULL,\n                   last_name TEXT PATH 'last_name' NOT NULL,\n                   private BOOL PATH 'private' NOT NULL,\n                   dob TIMESTAMP PATH 'date_of_birth',\n                   email_address TEXT PATH 'email_addresses\/address[1]')\n  ) t\nORDER BY first_name, last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339617,"user_id":null,"body":"SELECT xmltable.first_name,xmltable.last_name,\n  extract(year from age(xmltable.date_of_birth))::int as age,\n  case when xmltable.private then 'Hidden'\n  else coalesce(NULLIF(LEFT(xmltable.email_addresses,POSITION('.' IN xmltable.email_addresses)+3),''),'None') \n  end as email_address\n  FROM users,\n       XMLTABLE('\/\/data\/user'\n                PASSING data\n                COLUMNS first_name text PATH 'first_name',\n                        \"last_name\" text,\n                        \"date_of_birth\" date,\n                        \"email_addresses\" text,\n                        \"private\" bool\n               )\norder by first_name,last_name","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339618,"user_id":null,"body":"SELECT\n  XMLTABLE.first_name,\n  XMLTABLE.last_name,\n  EXTRACT(YEAR FROM AGE(XMLTABLE.birthday))::INTEGER AS age,\n  CASE\n    WHEN is_private THEN\n      'Hidden'\n    WHEN LENGTH(email_address) > 0 THEN\n      email_address\n    ELSE\n      'None'\n  END AS email_address\nFROM users, XMLTABLE ('data\/user' PASSING data\n COLUMNS\n  first_name TEXT PATH 'first_name',\n  last_name TEXT PATH 'last_name',\n  birthday DATE PATH 'date_of_birth',\n  email_address TEXT PATH 'email_addresses\/address[1]',\n  is_private BOOLEAN PATH 'private'\n)\nORDER BY\n  XMLTABLE.first_name,\n  XMLTABLE.last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339619,"user_id":null,"body":"SELECT \n    (xpath('\/user\/first_name\/text()', data))[1]::text as first_name,\n    (xpath('\/user\/last_name\/text()', data))[1]::text as last_name,\n    date_part('year', age(((xpath('\/user\/date_of_birth\/text()', data))[1]::text)::date))::int as age,\n    \n    CASE\n      when (xpath('\/user\/private\/text()', data))[1]::text = 'true' then 'Hidden'\n      when not xpath_exists('\/user\/email_addresses\/address', data) then 'None'\n      else (xpath('\/user\/email_addresses\/address\/text()', data))[1] end as email_address\n\nfrom unnest(xpath('\/data\/user', (select data from users limit 1))) as data\norder by first_name, last_name;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5db5ff03d10bfa001da9cf2e":[{"id":339620,"user_id":null,"body":"SELECT\n  id,\n  network(ip_address) as first_address,\n  broadcast(ip_address) AS last_address\nFROM connections\nORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339621,"user_id":149,"body":"SELECT\n  id,\n  network(ip_address) AS first_address,\n  broadcast(ip_address) AS last_address\nFROM connections\nORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339622,"user_id":null,"body":"SELECT \n  id, \n  network(ip_address) first_address, \n  broadcast(ip_address) last_address \nFROM connections;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339623,"user_id":null,"body":"SELECT\n    id,\n    network(ip_address)::text AS first_address,\n    broadcast(ip_address)::text AS last_address\nFROM connections\nORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339624,"user_id":null,"body":"SELECT id, network(ip_address) first_address, broadcast(ip_address) last_address FROM connections ORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339625,"user_id":null,"body":"WITH \ntable1 AS (\n  SELECT\n    id,\n    position('\/' in ip_address::text) pos,\n    ip_address::text AS ip_address\n  FROM connections\n),\ntable2 AS (\n  SELECT\n    id,\n    left(ip_address, pos-1) ip_address,\n    right(ip_address, -pos)::numeric mask\n  FROM table1\n),\ntable3 AS (\n  SELECT\n    id,\n    ip_address,\n    mask::integer mask,\n    ceiling(mask \/ 8)::integer octet \n  FROM table2\n),\ntable4 AS (\n  SELECT\n    id,\n    ip_address,\n    mask,\n    case (mask % 8) when 0 then 8 else (mask % 8) end AS pos,\n    octet,\n    split_part(ip_address, '.', octet)::integer::bit(8)::text octet_binary\n  FROM table3\n),\ntable5 AS (\n  SELECT\n    id,\n    ip_address,\n    mask,\n    octet,\n    rpad(left(octet_binary, pos), 8, '0')::bit(8)::integer::text min_value,\n    rpad(left(octet_binary, pos), 8, '1')::bit(8)::integer::text max_value\n  FROM table4\n),\ntable6 AS (\n  SELECT\n    id,\n    ip_address,\n    octet,\n    mask,\n    regexp_replace(ip_address, '(?<=^(\\d+\\.){'||(octet-1)||'})\\d+', min_value) first_address,\n    regexp_replace(ip_address, '(?<=^(\\d+\\.){'||(octet-1)||'})\\d+', max_value) last_address\n  FROM table5\n)\nSELECT\n  id,\n  regexp_replace(first_address, '(?<=^(\\d+\\.){'||octet||',4})\\d+', '0', 'g') || '\/' || mask first_address,\n  regexp_replace(last_address, '(?<=^(\\d+\\.){'||octet||',4})\\d+', '255', 'g') || '\/' || mask last_address\nFROM table6\nORDER BY id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339626,"user_id":42,"body":"SELECT \n    id,\n    set_masklen(ip & mask, iMask) as first_address,\n    set_masklen((ip & mask) | (~mask & '255.255.255.255'), iMask) as last_address\nFROM (\n    SELECT\n        id,\n        ip_address as ip,\n        netmask(ip_address) as mask,\n        masklen(ip_address) as iMask\n    FROM connections\n) as sub;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339627,"user_id":null,"body":"--SELECT * FROM connections;\n\nSELECT id, NETWORK(ip_address) AS first_address, BROADCAST(ip_address) AS last_address FROM connections ORDER BY id ASC;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339628,"user_id":null,"body":"select id,cidr(ip_address) first_address, broadcast(ip_address) last_address from connections","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339629,"user_id":null,"body":"SELECT id, abbrev(inet(network(ip_address))) as first_address, abbrev(broadcast(ip_address)) as last_address FROM connections;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5e5f09dc0a17be0023920f6f":[{"id":339630,"user_id":76,"body":"SELECT capital \nFROM countries \nWHERE continent IN ('Africa', 'Afrika') \n  AND country LIKE 'E%' \nORDER BY capital \nLIMIT 3","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339631,"user_id":null,"body":"SELECT capital\nFROM countries\nwhere continent LIKE 'Afri_a' \nAND country LIKE 'E%'\nORDER BY capital ASC\nLIMIT 3;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339632,"user_id":null,"body":"  SELECT capital\n    FROM countries\n   WHERE continent LIKE 'Afri%'\n     AND country LIKE 'E%'\nORDER BY capital ASC\n   LIMIT 3\n   ;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339633,"user_id":null,"body":"select capital \nfrom countries\nwhere continent like 'Afri_a' and country like 'E%'\norder by capital\nlimit 3;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339634,"user_id":null,"body":"-- Your solution here\n\nSELECT capital\n  FROM countries\n  WHERE country LIKE 'E%' AND\n    continent LIKE 'Af%'\n  ORDER BY capital\n  FETCH FIRST 3 ROWS ONLY;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339635,"user_id":null,"body":"SELECT capital FROM countries\nWHERE continent LIKE 'Afri_a'\nAND country LIKE 'E%'\nORDER BY capital ASC\nLIMIT 3;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339636,"user_id":null,"body":"SELECT capital\nFROM countries\nWHERE SUBSTR(country,1,1)='E' \n  AND continent IN ('Africa', 'Afrika')\nORDER BY capital  \nLIMIT 3\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339637,"user_id":null,"body":"SELECT\n  CAPITAL\nFROM COUNTRIES\nWHERE UPPER(CONTINENT) SIMILAR TO 'AFRI(C|K)A'\n  AND COUNTRY ILIKE 'E%'\nORDER BY CAPITAL\nLIMIT 3","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339638,"user_id":null,"body":"SELECT capital FROM countries WHERE\nUPPER(continent) IN ('AFRICA', 'AFRIKA') AND\nUPPER(country) LIKE 'E%'\nORDER BY capital ASC\nLIMIT 3;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339639,"user_id":null,"body":"-- Your solution here\n \n SELECT capital FROM (\n   SELECT SUBSTRING(country, 1, 1) AS letra, *\n      FROM countries\n     WHERE continent = 'Africa'\n        OR continent = 'Afrika'\n  ORDER BY letra\n ) AS padrao\n WHERE letra = 'E'\n ORDER BY capital\n LIMIT 3;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5eaecb855179590011d2c020":[{"id":339640,"user_id":null,"body":"CREATE FUNCTION on_document_change() RETURNS TRIGGER AS $on_document_change$\n  BEGIN\n    IF (TG_OP = 'INSERT') THEN\n      INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (new.id, NULL, new.data);\n    ELSIF (TG_OP = 'UPDATE') THEN\n      INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (old.id, old.data, new.data);\n    ELSIF (TG_OP = 'DELETE') THEN\n      INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (old.id, old.data, NULL);\n    END IF;\n    RETURN NULL;\n  END;\n$on_document_change$ LANGUAGE plpgsql;\n \nCREATE TRIGGER trigger_document_change\nAFTER INSERT OR UPDATE OR DELETE ON documents\nFOR EACH ROW EXECUTE PROCEDURE on_document_change();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339641,"user_id":null,"body":"CREATE OR REPLACE FUNCTION log_documents() RETURNS TRIGGER AS $log_documents$\n  BEGIN\n    IF (TG_OP = 'INSERT') THEN\n      INSERT INTO documents_changelog\n        (document_id, old_data, new_data) VALUES (new.id, NULL, new.data);\n    ELSIF (TG_OP = 'UPDATE') THEN\n      INSERT INTO documents_changelog\n        (document_id, old_data, new_data) VALUES (old.id, old.data, new.data);\n    ELSIF (TG_OP = 'DELETE') THEN\n      INSERT INTO documents_changelog\n        (document_id, old_data, new_data) VALUES (old.id, old.data, NULL);\n    END IF;\n    RETURN NULL;\n  END\n$log_documents$ LANGUAGE plpgsql;\n\nCREATE TRIGGER logs\nAFTER INSERT OR UPDATE OR DELETE ON documents\nFOR EACH ROW EXECUTE PROCEDURE log_documents();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339642,"user_id":214,"body":"create or replace function process_document_changelog() returns trigger as $doc_changelog$\nbegin\n    insert into documents_changelog (document_id, old_data, new_data) \n      values (case when TG_OP = 'DELETE' then old.id else new.id end, \n              case when TG_OP = 'INSERT' then NULL else old.data end, \n              case when TG_OP = 'DELETE' then NULL else new.data end);\n            \n    return case when TG_OP = 'DELETE' then old else new end;     \nend;\n$doc_changelog$ language plpgsql;\n\ncreate trigger Farekkusuks before insert or update or delete \n  on Documents \n  for each row \n  execute procedure process_document_changelog();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339643,"user_id":null,"body":"CREATE OR REPLACE FUNCTION document_changelog() RETURNS trigger AS\n$$\nBEGIN\n  INSERT INTO documents_changelog(document_id, old_data, new_data)\n    VALUES (coalesce(NEW.id, OLD.id), OLD.data, NEW.data);\n  RETURN NEW;\nEND;\n$$\nLANGUAGE 'plpgsql';\n\nCREATE TRIGGER document_changelog\n  AFTER INSERT OR UPDATE OR DELETE\n  ON documents\n  FOR EACH ROW\n  EXECUTE PROCEDURE document_changelog();\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339644,"user_id":null,"body":"CREATE OR REPLACE FUNCTION process_changelog() RETURNS TRIGGER AS $changelog$\n  BEGIN IF (TG_OP = 'DELETE')\n    THEN INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (OLD.id, OLD.data, NULL);\n    RETURN OLD;\n      ELSIF (TG_OP = 'UPDATE')\n        THEN INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (OLD.id, OLD.data, NEW.data);\n        RETURN NEW;\n          ELSIF (TG_OP = 'INSERT')\n            THEN INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (NEW.id, NULL, NEW.data);\n            RETURN NEW;\n  END IF;\nEND;\n\n$changelog$ LANGUAGE plpgsql;\n\nCREATE TRIGGER emp_audit BEFORE INSERT OR UPDATE OR DELETE ON documents FOR EACH ROW EXECUTE PROCEDURE process_changelog();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339645,"user_id":53,"body":"CREATE OR REPLACE FUNCTION log_documents_audit() RETURNS TRIGGER as $log_audit$\n   BEGIN\n      IF (TG_OP = 'DELETE') THEN\n          INSERT INTO documents_changelog(document_id, old_data) VALUES (old.id, old.data);\n          RETURN OLD;\n      ELSIF (TG_OP = 'UPDATE') THEN\n          INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES (new.id, old.data, new.data);\n          RETURN NEW;\n      ELSIF (TG_OP = 'INSERT') THEN\n          INSERT INTO documents_changelog(document_id, new_data) VALUES (new.id, new.data);\n          RETURN NEW;\n      END IF;\n      RETURN NULL;\n   END;\n  \n$log_audit$ LANGUAGE plpgsql;\n\nCREATE TRIGGER log_update\n    AFTER UPDATE ON documents\n    FOR EACH ROW\n    WHEN (OLD.* IS DISTINCT FROM NEW.*)\n    EXECUTE PROCEDURE log_documents_audit();\n    \nCREATE TRIGGER log_insert_delete\n    AFTER INSERT OR DELETE ON documents\n    FOR EACH ROW\n    EXECUTE PROCEDURE log_documents_audit();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339646,"user_id":null,"body":"CREATE FUNCTION change() RETURNS trigger AS $emp_stamp$\n    BEGIN\n        IF (TG_OP = 'DELETE') THEN\n            INSERT INTO documents_changelog (id, document_id, old_data, new_data)\n              VALUES (DEFAULT, OLD.id, OLD.data, NULL);\n            RETURN OLD;\n        ELSIF (TG_OP = 'UPDATE') THEN\n             INSERT INTO documents_changelog (id, document_id, old_data, new_data)\n              VALUES (DEFAULT, NEW.id, OLD.data, NEW.data);\n            RETURN NEW;\n        ELSIF (TG_OP = 'INSERT') THEN\n            INSERT INTO documents_changelog (id, document_id, old_data, new_data)\n              VALUES (DEFAULT, NEW.id, NULL, NEW.data);\n            RETURN NEW;\n        END IF;\n    END;\n$emp_stamp$ LANGUAGE plpgsql;\n\nCREATE TRIGGER ins BEFORE INSERT OR UPDATE OR DELETE ON documents\n    FOR EACH ROW EXECUTE PROCEDURE change();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339647,"user_id":null,"body":"create or replace function documents_changelog_trigger_func() returns trigger language plpgsql as\n$$\nbegin\n  if tg_op = 'INSERT' then \n    insert into documents_changelog (document_id, old_data, new_data) values (new.id, null, new.data);\n  elsif tg_op = 'UPDATE' then \n    insert into documents_changelog (document_id, old_data, new_data) values (old.id, old.data, new.data);\n  elsif tg_op = 'DELETE' then\n    insert into documents_changelog (document_id, old_data, new_data) values (old.id, old.data, null);\n  end if;\n  return null;\nend \n$$;\n \ncreate trigger changelog_trigger \nafter insert or update or delete on documents\nfor each row execute procedure documents_changelog_trigger_func();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339648,"user_id":null,"body":"create function log_documents_change() returns trigger\nas $$\n  begin\n    if tg_op = 'INSERT' then\n      insert into documents_changelog(document_id, old_data, new_data) values (new.id, null, new.data);\n    elseif tg_op = 'UPDATE' then\n      insert into documents_changelog(document_id, old_data, new_data) values (new.id, old.data, new.data);\n    elseif tg_op = 'DELETE' then\n      insert into documents_changelog(document_id, old_data, new_data) values (old.id, old.data, null);\n    end if;\n    return null;\n  end\n$$\nlanguage plpgsql;\n\ncreate trigger log_change\nafter insert or update or delete on documents\nfor each row\nexecute procedure log_documents_change();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339649,"user_id":149,"body":"CREATE FUNCTION write_to_documents_changelog() RETURNS TRIGGER AS $$\n\tBEGIN\n\t\tIF TG_OP = 'INSERT' THEN\n      INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES\n        (NEW.id, NULL, NEW.data);\n\t\t\tRETURN NEW;\n\t\tELSIF TG_OP = 'UPDATE' THEN\n      INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES\n        (OLD.id, OLD.data, NEW.data);\n\t\t\tRETURN NEW;\n\t\tELSE\n      INSERT INTO documents_changelog(document_id, old_data, new_data) VALUES\n        (OLD.id, OLD.data, NULL);\n\t\t\tRETURN OLD;\n\t\tEND IF;\n\tEND;\n$$ LANGUAGE PLPGSQL;\n\nCREATE TRIGGER write_to_documents_changelog_trigger\n\tBEFORE INSERT OR UPDATE OR DELETE ON documents\n\tFOR EACH ROW EXECUTE PROCEDURE write_to_documents_changelog();","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"5f42c19b4c2cc4001037e7cd":[{"id":339650,"user_id":null,"body":"SELECT id,\n       value,\n       sum(CASE WHEN change THEN 1 ELSE 0 END) OVER (ORDER BY id) as run_id\nFROM (\n         SELECT id,\n                value,\n-- if next value changed: then (TRUE) consecutive break\n                (value <> LAG(value, 1, 1) OVER (ORDER BY id))\n-- if next id missed: then (TRUE) consecutive break\n             OR ((id - 1) <> LAG(id) OVER (ORDER BY id)) AS change\n         FROM entries) as sub;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339651,"user_id":null,"body":"\nwith L1 as(\nselect id, value,\n  case\nwhen (lag(value) over (order by id) = value) and lag(id) over (order by id) + 1 = id  then 0\nelse 1\nend newAdder\nfrom entries\n)\n\n\nselect id, value, sum(newAdder) over (order by id) run_id from L1\n\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339652,"user_id":null,"body":"WITH sessions AS (\n  SELECT *, (\n    CASE WHEN id - LAG(id) OVER() = 1\n    AND value = LAG(value) OVER()\n    THEN 0 ELSE 1 END\n  ) AS session\n FROM entries\n ORDER BY id\n)\n\nSELECT\n  id\n  , value\n  , SUM(session) OVER(ORDER BY id) AS run_id\nFROM sessions;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339653,"user_id":null,"body":"with base as (select\n    id\n  , value\n  , lag(value, 1) over (order by id) as prev_value\n  , lag(id, 1) over (order by id) as prev_id          \nfrom entries\norder by id\n)\n\n, new_runs as (\n  select *\n  , case when prev_value is null then 1 \n         when prev_value != value or prev_id + 1 != id \n         then 1 else 0 end \n         as new_run\n  from base\n)\n\nselect id\n, value\n, sum(new_run) over (order by id rows between unbounded preceding and current row) as run_id\nfrom new_runs\norder by 1, 2\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339654,"user_id":null,"body":"SELECT id, \n       value, \n       SUM(run_id) OVER(ORDER BY id) AS run_id\nFROM (SELECT id, \n             value, \n             CASE value = (LAG(value) OVER(ORDER BY id)) AND (id-1) = (LAG(id) OVER(ORDER BY id))\n                 WHEN TRUE THEN 0\n                 ELSE 1\n             END AS run_id\n       FROM entries\n     ) helper\nORDER BY id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339655,"user_id":527,"body":"select\n  id,\n  value,\n  sum(d :: int) over (order by id) as run_id\nfrom (\n    select\n      *,\n      id - 1 is distinct from lag(id) over (partition by value order by id) as d\n    from entries\n  ) as ordered\norder by id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339656,"user_id":null,"body":"with recursive\n    R as (\n        select rn, id, value, 1 as run_id\n        from ranked\n        where id = (select min(id) from ranked)\n        union all\n        select ranked.rn,\n               ranked.id,\n               ranked.value,\n               case\n                   when R.value = ranked.value and R.id + 1 = ranked.id\n                       then run_id\n                   else run_id + 1\n                   end\n        from R\n                 join ranked on R.rn + 1 = ranked.rn\n    ),\n    ranked as (\n        select row_number() over () as rn,\n               id,\n               value\n        from entries\n    )\nselect id, value, run_id\nfrom R;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339657,"user_id":null,"body":"  WITH RECURSIVE runs AS (\nSELECT e.id, e.value, 1 AS run_id\n  FROM (SELECT * FROM entries LIMIT 1) e\n UNION ALL\nSELECT e.id, e.value,\n       CASE\n         WHEN e.value = r.value\n          AND e.id = r.id + 1\n           THEN r.run_id\n         ELSE r.run_id + 1\n       END\n  FROM runs r\n       LEFT JOIN LATERAL (SELECT * FROM entries e WHERE e.id > r.id LIMIT 1) e\n              ON True\n WHERE e.id is not null)\n \nSELECT *\n  FROM runs r","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339658,"user_id":null,"body":"select q.id,\n  q.value,\n  sum(q.ad) over(order by q.id) + 1 as run_id\nfrom (\nSELECT id,\n  value,\n  case when id - lag(id,1,0) over(order by id) = 1\n    and COALESCE(lag(value,1,null) over(order by id),value) = value\n    then 0\n    else 1 end as ad\nFROM entries\norder by id) q","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339659,"user_id":null,"body":"WITH cte_1\nAS (SELECT\n  id,\n  value,\n  LAG(id) OVER (ORDER BY id) lag_id,\n  LAG(value) OVER (ORDER BY id) lag_value\nFROM entries),\ncte_2\nAS (SELECT\n  id,\n  value,\n  CASE\n    WHEN id = 1 THEN 1\n    WHEN id - 1 = lag_id AND value = lag_value THEN 0\n    ELSE 1 END rn_id\nFROM cte_1)\nSELECT\n  id,\n  value,\n  SUM(rn_id) OVER (ORDER BY id) run_id\nFROM cte_2","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"609a6ab739660a0056fb4a29":[{"id":339660,"user_id":null,"body":"CREATE OR REPLACE FUNCTION search_columns()\nRETURNS TABLE(schemaname text, tablename text, columnname text, total text)\nAS $$\nBEGIN\n  FOR schemaname, tablename, columnname IN\n    SELECT \n      c.table_schema\n      , c.table_name\n      , c.column_name \n    FROM information_schema.columns c\n    LEFT JOIN information_schema.tables t\n          ON  c.table_catalog = t.table_catalog\n          AND c.table_schema = t.table_schema\n          AND c.table_name = t.table_name\n    WHERE \n      c.data_type = 'integer' \n      AND c.table_schema NOT IN ('information_schema', 'pg_catalog')\n      AND t.table_type = 'BASE TABLE'\n  LOOP\n    FOR total IN\n      EXECUTE FORMAT('SELECT SUM(%I) AS %I FROM %I.%I', columnname, columnname, schemaname, tablename)\n    LOOP\n      RAISE NOTICE 'hit in %.%', schemaname, tablename;\n      RETURN NEXT;\n    END LOOP;\n  END LOOP;\nEND;\n$$ LANGUAGE PLPGSQL;\n\n\nSELECT COALESCE((SELECT SUM(total :: INT) AS total FROM search_columns()), 0) AS total","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339661,"user_id":null,"body":"WITH samples AS (\n  SELECT\n    unnest((\n      xpath(\n        concat_ws('\/', '\/table', 'row', column_name, 'text()'),\n        query_to_xml(\n          format(\n            'SELECT %s, %s, array_agg(%s) FROM %s.%s GROUP BY %s, %s', \n            c.table_name,\n            c.column_name,\n            c.column_name,\n            c.table_schema,\n            c.table_name,\n            c.table_name,\n            c.column_name\n          ),\n          true,\n          false,\n          ''\n        )\n      )\n    )::varchar[]\n  ) AS value\n  FROM information_schema.columns c\n  JOIN information_schema.tables t ON t.table_name = c.table_name\n  WHERE c.table_schema = 'public' AND t.table_type = 'BASE TABLE' AND c.data_type = 'integer'\n)\nSELECT coalesce(sum(value::integer), 0) AS total\nFROM samples;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339662,"user_id":null,"body":"create or replace function colmn_calc() returns bigint as $$\n\tdeclare\n\t  current_row record;\n\t  column_sum int;\n\t  all_sum int := 0;\n\tbegin\n\t\tfor current_row in \n\t\t\tselect table_schema || '.' || table_name as table_name, column_name\n\t\t\tfrom \n\t\t\t\tinformation_schema.tables a\n\t\t\t\tinner join information_schema.columns b using(table_name, table_schema) \n\t\t\twhere table_type = 'BASE TABLE' and table_schema = 'public' and data_type = 'integer'\n\t\tloop\n\t\t\texecute 'select coalesce(sum('|| current_row.column_name ||'), 0) from ' || current_row.table_name into column_sum;\n\t\t\traise notice '%', column_sum;\n\t\t\tall_sum := all_sum + column_sum;\n\t\tend loop;\n\t\treturn all_sum;\n\tend;\n$$ language plpgsql;\n\nselect colmn_calc() total;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339663,"user_id":null,"body":"CREATE OR REPLACE FUNCTION sum_table(table_schema text,table_name text,column_name text) RETURNS integer AS $$\n        DECLARE\n          c text;\n        BEGIN\n          EXECUTE 'SELECT SUM(' || column_name || ') FROM ' || table_schema || '.' || table_name\n          INTO c;\n          return c;\n        END;\n$$ LANGUAGE plpgsql;\n\nSELECT COALESCE(SUM(sum_table(table_schema,table_name,column_name)),0) as total FROM information_schema.columns WHERE data_type='integer' and table_schema='public' AND table_name NOT IN (SELECT table_name from information_schema.views);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339664,"user_id":null,"body":"CREATE OR REPLACE FUNCTION sum_over_database() RETURNS INTEGER AS $$\nDECLARE\n  _tables  TEXT[];\n  _table   TEXT;\n  _columns TEXT[];\n  _column  TEXT;\n  _sum     INTEGER := 0;\n  _temp    INTEGER := 0;\nBEGIN\n  EXECUTE('SELECT ARRAY(SELECT table_name FROM information_schema.tables WHERE table_schema=''public'' AND table_type = ''BASE TABLE'')') INTO _tables;\n  FOREACH _table IN ARRAY _tables\n  LOOP\n    EXECUTE (FORMAT('SELECT ARRAY(SELECT column_name FROM information_schema.columns WHERE table_name = ''%s'' AND data_type = ''integer'')', _table)) INTO _columns;   \n    FOREACH _column IN ARRAY _columns\n    LOOP\n      EXECUTE (FORMAT('SELECT COALESCE(SUM(%s), 0) FROM %s', _column, _table)) INTO _temp;\n      _sum = _sum + _temp;\n    END LOOP;\n  END LOOP;\n  RETURN _sum;\nEND;\n$$ LANGUAGE plpgsql;\n\nSELECT sum_over_database() AS total;\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339665,"user_id":null,"body":"-- SELECT 0 AS total;\nCREATE OR REPLACE FUNCTION pg_catalog.calcTotal()\n\nRETURNS BIGINT AS $$\n\nDECLARE\n\ntable_name text;\ncol_name text;\nval BIGINT := 0;\ntotal BIGINT := 0;\n\nBEGIN\n\nFOR \n  table_name, \n  col_name IN SELECT PG_T.tablename, INFO_SCHE_C.column_name\nFROM \n  pg_catalog.pg_tables as PG_T  \n  JOIN information_schema.columns as INFO_SCHE_C on INFO_SCHE_C.table_name = PG_T.tablename and INFO_SCHE_C.data_type='integer'\nWHERE \n  schemaname != 'pg_catalog' \n  AND schemaname != 'information_schema' LOOP\nval := 0;\n\nEXECUTE 'SELECT sum(' || col_name || ') FROM ' || table_name into val;\n\nIF val IS NOT NULL then\n  total := val + total;\nEND IF;\n\nEND LOOP;\n\nRETURN total;\nEND;\n\n$$ LANGUAGE plpgsql;\n\nSELECT pg_catalog.calcTotal() AS total;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339666,"user_id":null,"body":"CREATE OR REPLACE FUNCTION public.fn_sum(table_name text,schema_name text,column_name text)\nRETURNS integer\n as\n$$\ndeclare\nrs integer := 0;\nsql_st text;\nbegin\n\t sql_st:= 'select sum('||column_name||') from '||schema_name||'.'||table_name;\n\t execute sql_st into rs;\nreturn  rs;\nend \n$$\nlanguage plpgsql;\n\nselect coalesce(sum(s1),0) as total from \n(select fn_sum(c.table_name,c.table_schema,c.column_name) s1 from information_schema.columns c\n   LEFT JOIN information_schema.tables t\n          ON  c.table_catalog = t.table_catalog\n          AND c.table_schema = t.table_schema\n          AND c.table_name = t.table_name\n    WHERE \n      c.data_type = 'integer' \n      AND c.table_schema NOT IN ('information_schema', 'pg_catalog')\n      AND t.table_type = 'BASE TABLE'\n) a","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339667,"user_id":null,"body":"CREATE OR REPLACE FUNCTION pg_catalog.calcTotal ()\nRETURNS BIGINT AS $$\nDECLARE\ntable_name text;\ncol_name text;\nval BIGINT := 0;\ntotal BIGINT := 0;\nBEGIN\nFOR table_name, col_name IN \nSELECT t.tablename, c.column_name\nFROM pg_catalog.pg_tables as t\njoin information_schema.columns as c  on c.table_name=t.tablename and c.data_type='integer'\nWHERE schemaname<>'pg_catalog' AND \n    schemaname<>'information_schema' LOOP\nval := 0;\nEXECUTE 'SELECT sum(' || col_name || ') FROM ' || table_name into val;\nIF val IS NOT NULL then\n  total := val + total;\nend if;\nEND LOOP;\nRETURN total;\nEND;\n$$  LANGUAGE plpgsql;\nSELECT pg_catalog.calcTotal() AS total;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339668,"user_id":null,"body":"select sum(total)::int as total from (\n  select sum(sum_val)::int as total from (\n    select table_name,column_name, \n           (xpath('\/table\/row\/total_sum\/text()', xml))[1]::text::int as sum_val\n    from (\n      SELECT cc.table_name,\n             cc.column_name,\n             cc.table_schema,\n             query_to_xml(format('select coalesce(sum(%I),0) as total_sum from %I.%I ', cc.column_name, cc.table_schema, cc.table_name), false, false, '') as xml\n      FROM information_schema.columns cc\n      join information_schema.tables tt \n        on cc.table_name = tt.table_name\n        and cc.table_catalog = tt.table_catalog\n        and cc.table_schema = tt.table_schema\n        and tt.TABLE_TYPE = 'BASE TABLE'\n        WHERE  cc.table_schema = 'public'\n        AND    cc.data_type = 'integer'\n    ) t\n  ) x\n  union all select 0::int as total\n) x\n;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339669,"user_id":null,"body":"drop table if exists wrk;\n\ncreate temporary table wrk(\n  table_schema varchar(255),\n  table_name varchar(255),\n  table_column varchar(255),\n  total int\n);\n\ninsert into wrk values('', '', '', 0);\n\nDO $$\n  declare\n    total int default 0;\n    sql_cursor cursor for\n      select c.table_schema, c.table_name, c.column_name\n      from\n        information_schema.tables t\n          inner join information_schema.columns c\n          on(\n                c.table_schema = t.table_schema\n            and c.table_name   = t.table_name\n          )\n      where\n          t.table_schema = 'public'\n      and t.table_type   = 'BASE TABLE'\n      --\n      and c.data_type = 'integer';\n    table_schema text;\n    table_name text;\n    column_name text;    \n    stmt text default '';\n    cnt int;\nbegin   \n  open sql_cursor;\n\n  loop\n    fetch sql_cursor into table_schema, table_name, column_name;\n\n    exit when not found;\n    \n    stmt := format('select sum(%s) as total from %s.%s where %s is not null', column_name, table_schema, table_name, column_name);\n    \n    execute stmt into cnt;\n    \n    insert into wrk values(table_schema, table_name, column_name, cnt);\n  end loop;\n  \n  close sql_cursor;\nend $$;\n\n-- select '' as table_schema, '' as table_name, '' as column_name, sum(total) as total\n-- from wrk\n-- union all\nselect sum(total) as total\nfrom wrk;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"61168ebdf9b4810031404f25":[{"id":339670,"user_id":null,"body":"CREATE FUNCTION last_node(first_node int) RETURNS int AS $$\n  DECLARE\n    endNote INTEGER = first_node;\n\n  BEGIN\n    WHILE NOT (SELECT terminal FROM nodes WHERE id = endNote) LOOP\n      SELECT id+step INTO endNote FROM nodes WHERE id = endNote;\n    END LOOP;\n    RETURN endNote;\n  END;\n  \n$$ LANGUAGE PLPGSQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339671,"user_id":null,"body":"create or replace function last_node(integer) returns integer AS $$\n\tdeclare\n\t\tcheck_node integer[];\n\t   \tcurs cursor (key integer) for select id, id + step as child, terminal from nodes WHERE id = key;\n\t   \tcurs_row record;\n\tbegin\n\t\tloop\n\t    \topen curs($1);\n\t    \tfetch curs into curs_row;\n\t    \tclose curs;\n\t    \tif curs_row.id is null or curs_row.id = any(check_node)\n\t\t\tthen return null;\n\t\t\telse\n\t\t\t\tif curs_row.terminal \n\t\t\t\tthen return curs_row.id;\n\t\t\t\telse\n\t\t\t\t   \t$1 := curs_row.child;\n\t\t\t\t   \tcheck_node := check_node || curs_row.id;\n\t\t\t\tend if;\n\t\t\tend if;\n\t\tend loop;\n\tend;\n$$ language plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339672,"user_id":53,"body":"create or replace function last_node(first_node int) returns int language plpgsql as $$\n  declare\n    nid int := first_node;\n  begin\n    while not (select terminal from nodes where id = nid) loop\n      select id + step into nid from nodes where id = nid;\n    end loop;\n    return nid;\n  end;\n$$;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339673,"user_id":480,"body":"CREATE FUNCTION last_node(first_node int) RETURNS int AS $$\n  begin\n    while not (select terminal from nodes where id=first_node) loop\n      select id+step into first_node from nodes where id=first_node;\n    end loop;\n    return first_node;\n  end;\n$$ LANGUAGE plpgSQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339674,"user_id":106,"body":"CREATE FUNCTION last_node(first_node int) RETURNS int AS $$\nDECLARE\n  nid int := first_node;\n  nstep int := 0;\n  nterminal boolean := false;\nBEGIN\n  WHILE NOT nterminal LOOP\n    SELECT id, step, terminal INTO nid, nstep, nterminal FROM nodes WHERE id = nid + nstep;\n  END LOOP;\n  RETURN nid;\nEND\n$$ LANGUAGE plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339675,"user_id":149,"body":"CREATE FUNCTION last_node(first_node int) RETURNS int AS $$\n  DECLARE\n    c refcursor;\n    rid int := 0;\n    rstep int := 1;\n    rterminal boolean := false;\n  BEGIN\n    OPEN c FOR SELECT * FROM nodes ORDER BY id;\n    MOVE RELATIVE first_node - 1 FROM c;\n    WHILE NOT rterminal LOOP\n      FETCH RELATIVE rstep FROM c INTO rid, rstep, rterminal;\n    END LOOP;\n    RETURN rid;\n  END;\n$$ LANGUAGE PLPGSQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339676,"user_id":null,"body":"create or replace FUNCTION last_node(integer) RETURNS integer AS $$\n\tdeclare\n\t\tlast_nd integer;\n\t\tcheck_node integer[];\n\t   \tcurs3 CURSOR (key integer) for select id, id + step as child, terminal from nodes WHERE id = key;\n\t   \tcurs3_row record;\n\tBEGIN\n\t\tloop\n\t    \tOPEN curs3($1);\n\t    \tFETCH LAST FROM curs3 INTO curs3_row;\n\t\t\tIF curs3_row.terminal \n\t\t\tthen \n\t\t\t\tlast_nd := curs3_row.id;\n\t\t\t\treturn last_nd;\n\t\t\telse\n\t\t\t\tif curs3_row.child = any(check_node)\n\t\t\t\tthen return null;\n\t\t\t\telse\n\t\t\t\t   \t$1 := curs3_row.child;\n\t\t\t\t   \tcheck_node := check_node || curs3_row.id;\n\t\t\t\t   \tCLOSE curs3;\n\t\t\t\tend if;\n\t\t\tEND IF;\n\t\tEND loop;\n\t  RETURN last_nd;\n\tEND;\n$$ LANGUAGE plpgsql;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339677,"user_id":null,"body":"CREATE FUNCTION last_node(first_node int) RETURNS int AS $$\n  DECLARE \n   end_node INTEGER= first_node;\n  BEGIN \n   WHILE NOT(SELECT terminal FROM nodes WHERE end_node=nodes.id) LOOP\n        SELECT id+step INTO end_node FROM nodes WHERE end_node=nodes.id;\n   END LOOP;\n    RETURN end_node;\n   END;\n$$ LANGUAGE PLPGSQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339678,"user_id":null,"body":"CREATE FUNCTION last_node(first_node int) \nRETURNS int language plpgsql as $$\ndeclare\n  cid int;\n  sid int;\n  res int;\n  term boolean default false;\n  gameover boolean default false;\nbegin\n  res := first_node;\n  while gameover = false loop\n    SELECT id,step,terminal into cid,sid,term FROM nodes WHERE id = res;\n    case when sid = 0 \n          then gameover := true; \n         when term = true \n          then gameover := true;\n         else\n          res := cid + sid;\n    end case;\n  end loop;\n  return res;\nend $$;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339679,"user_id":null,"body":"CREATE FUNCTION last_node(first_node int) RETURNS int AS $$\nDECLARE cur_id INT; c int;\nBEGIN\n  cur_id := first_node;\n  WHILE NOT (SELECT terminal FROM nodes WHERE id = cur_id) LOOP\n    SELECT step + id INTO cur_id FROM nodes WHERE id = cur_id;\n  END LOOP;\nRETURN cur_id;\nEND;\n$$ LANGUAGE plpgSQL;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"6122439b01ef9f00089b299a":[{"id":339680,"user_id":480,"body":"create function adda(a int[],b int[]) returns int[] language'plpgsql' as $$\nbegin\n  return (select array(select x+y from unnest(a,b) as t(x,y) where x+y is not null));\nend;\n$$\n;\n\ncreate operator + (procedure=adda,leftarg=int[],rightarg=int[],commutator=operator(+))","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339681,"user_id":null,"body":"CREATE FUNCTION array_add(a integer[], b integer[]) RETURNS integer[] AS $$\n    SELECT coalesce(array_remove(array_agg(sum), NULL), '{}')\n    FROM (SELECT unnest(a) + unnest(b) AS sum) AS tmp;\n$$ LANGUAGE SQL;\n\nCREATE OPERATOR + (\n    leftarg = integer[],\n    rightarg = integer[],\n    function = array_add,\n    commutator = +\n);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339682,"user_id":null,"body":"CREATE FUNCTION vectorAddition(a int[], b int[])\nRETURNS INTEGER[] AS $$\nBEGIN\n    RETURN (SELECT ARRAY(SELECT \n                            x + y \n                         FROM \n                            UNNEST(a, b) AS t(x, y) \n                         WHERE \n                            x + y IS NOT NULL));\nEND;\n$$\nLANGUAGE plpgsql;\n\nCREATE OPERATOR + \n(\n    PROCEDURE = vectorAddition,\n    LEFTARG = int[],\n    RIGHTARG = int[],\n    COMMUTATOR = OPERATOR(+)\n)","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339683,"user_id":null,"body":"CREATE FUNCTION vec_add (a int[], b int[]) RETURNS int[]\nAS $$\n  SELECT ARRAY(\n    SELECT a[i] + b[i]\n    FROM GENERATE_SUBSCRIPTS(a, 1) AS ss_a(i)\n    JOIN GENERATE_SUBSCRIPTS(b, 1) AS ss_b(j)\n    ON i = j\n  );\n$$\nLANGUAGE 'sql';\n\nCREATE OPERATOR + (\n  LEFTARG = int[],\n  RIGHTARG = int[],\n  PROCEDURE = vec_add\n);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339684,"user_id":53,"body":"CREATE FUNCTION vector_add(xs integer[], ys integer[])\n    RETURNS integer[] AS $$\n      with xs as (\n        select x, row_number() over() as i from (\n          select unnest(xs) as x\n        ) a\n      ), ys as (\n        select y, row_number() over() as i from (\n          select unnest(ys) as y\n        ) a\n      )\n      select array(select x + y\n      from xs\n      inner join ys on ys.i = xs.i);\n    $$ LANGUAGE SQL STABLE;\n\nCREATE OPERATOR + (\n    leftarg = integer[],\n    rightarg = integer[],\n    procedure = vector_add,\n    commutator = +\n);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339685,"user_id":null,"body":"CREATE OR REPLACE FUNCTION add_vectors(v1 INTEGER[], v2 INTEGER[])\n  RETURNS INTEGER[]\nLANGUAGE plpgsql\nAS $$\nDECLARE\n  vector_sum INTEGER[];\nBEGIN\n  vector_sum = ARRAY[]::INTEGER[];\n  \n  FOR i IN 1..LEAST( COALESCE(array_length(v1, 1), 0), COALESCE(array_length(v2, 1), 0) ) LOOP\n    vector_sum = array_append(vector_sum, v1[i] + v2[i]);\t\n  END LOOP;\n  \n  RETURN vector_sum;\nEND;\n$$;\n\nCREATE OPERATOR + (\n  LEFTARG = INTEGER[],\n  RIGHTARG = INTEGER[],\n  PROCEDURE = add_vectors\n);\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339686,"user_id":106,"body":"CREATE OR REPLACE FUNCTION zip_add(a int[], b int[]) RETURNS int[]\nAS $$\n  select coalesce(array_agg(a[i]+b[i]), '{}') from generate_subscripts(\n    case when cardinality(a) <= cardinality(b) then a else b end, 1\n  ) as subscripts(i)\n$$ LANGUAGE sql;\n\nCREATE OPERATOR + (\n    leftarg = int[],\n    rightarg = int[],\n    procedure = zip_add,\n    commutator = +\n);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339687,"user_id":null,"body":"create or replace function array_ad(integer[], integer[])\nreturns integer[] language sql immutable as $$\n    select\n        coalesce(array_agg(item) filter (where item is not null), '{}'::integer[])\n    from\n    (\n        select unnest($1) + unnest($2)\n    ) t(item);\n$$;\n\ncreate operator + (leftarg = integer[], rightarg = integer[], procedure = array_ad, commutator = +);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339688,"user_id":null,"body":"CREATE FUNCTION a_d (ar_1 INT[], ar_2 INT[])\nRETURNS INT[] AS $$\nDECLARE\n  ret INT[];\nBEGIN\n  SELECT \n    CASE WHEN COUNT(a_1) > 0 AND COUNT (a_2) > 0 THEN array_remove(array_agg(a_1 + a_2), NULL)\n         ELSE array[]::INT[]\n    END AS d\n    FROM (SELECT UNNEST(ar_1) AS a_1, UNNEST(ar_2) AS a_2) g\n    INTO ret;\n  RETURN ret;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE OPERATOR + (PROCEDURE = a_d, leftarg = INT[], rightarg = INT[], commutator = +);\n\n\n\n\n\n\n\n\n\n\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339689,"user_id":null,"body":"CREATE OR REPLACE FUNCTION vector_add(arr1 int[], arr2 int[])\nRETURNS int[] LANGUAGE SQL IMMUTABLE AS\n$$\nSELECT coalesce(array_remove(array_agg(result), NULL), '{}')\nFROM (SELECT tuple.val1 + tuple.val2 AS result\n      FROM (SELECT UNNEST($1) AS val1\n                   ,UNNEST($2) AS val2\n                   ,generate_subscripts($1, 1) AS ix) tuple\n      ORDER BY ix) inn \n$$;\n\nCREATE OPERATOR + (\n    leftarg = int[],\n    rightarg = int[],\n    function = vector_add,\n    commutator = +\n);","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}],"618ce331df011e0030ecc0fb":[{"id":339690,"user_id":480,"body":"create temporary table state as(\n  select user_id,name from attempts limit 0\n);\nalter table state add constraint pk_state primary key(user_id);\n\ncreate procedure update_state() language plpgsql as $$\nDECLARE \n  r RECORD;\nBEGIN\n  for r in select * from attempts loop\n    if not exists(select 1 from state where name=r.name) then\n      insert into state(user_id,name)values(r.user_id,r.name)on conflict on constraint pk_state do update set name=r.name;\n    end if;\n  end loop;\nEND\n$$\n;\ncall update_state();\nselect * from state order by user_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339691,"user_id":149,"body":"CREATE TABLE users (\n  user_id int UNIQUE,\n  name text UNIQUE\n);\n\nCREATE PROCEDURE fill_users() AS $$\n  DECLARE\n    r_user_id int;\n    r_name text;\n  BEGIN\n    FOR r_user_id, r_name IN\n      SELECT user_id, name FROM attempts ORDER BY id\n    LOOP\n      CONTINUE WHEN EXISTS(SELECT 1 FROM users WHERE name = r_name);\n      INSERT INTO users(user_id, name) VALUES (r_user_id, r_name) ON CONFLICT (user_id) DO UPDATE SET name = r_name;\n    END LOOP;\n  END\n$$ LANGUAGE PLPGSQL;\n\nCALL fill_users();\n\nSELECT * FROM users ORDER BY user_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339692,"user_id":null,"body":"create function array_set(p_input anyarray, p_index int, p_new_value anyelement)\n  returns anyarray\nas\n$$\nbegin\n  if p_input is not null then\n    p_input[p_index] := p_new_value;\n  end if;\n  return p_input;\nend;\n$$\nlanguage plpgsql\nimmutable;\n\n\nwith recursive r as (\n  select\n    1 as i,\n    0 as id,\n    0 as user_id,\n    'start!' as name,\n    array(select '' from attempts group by user_id) as curr_names\nunion\n  select\n    i+1 as i,\n    tt.id,\n    tt.user_id,\n    tt.name,\n    case\n      when tt.name = any(r.curr_names)\n      then r.curr_names\n      else array_set(r.curr_names, tt.user_id, tt.name)\n    end as curr_names\n  from r\n  inner join attempts as tt on tt.id = i\n  where i < (select id from attempts order by id desc limit 1) + 1\n)\nselect name, row_number() over() as user_id\nfrom (\n  select unnest(names) as name\n  from\n    (select r.curr_names as names from r order by r.id desc limit 1) as sub) as sub_sub;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339693,"user_id":null,"body":"CREATE TABLE results (user_id int, name text PRIMARY KEY);\n--SELECT * FROM attempts;\ndo $$\ndeclare\ni integer := 1;\nlen integer := 0;\ntname text := '';\ntuser integer := 0;\ndumb integer;\nbegin\n  SELECT count(*) into len FROM attempts;\n  while i <= len loop\n    SELECT user_id, name into tuser, tname FROM attempts WHERE id = i;\n    IF (SELECT count(1) FROM results where tname = name) = 0 THEN\n      DELETE FROM results WHERE user_id = tuser;\n      INSERT INTO results (user_id, name) VALUES (tuser, tname);\n    END IF;\n    i := i+1;\n  end loop;\nend$$;\nSELECT * FROM results ORDER BY user_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339694,"user_id":106,"body":"CREATE TEMP TABLE res (\n  user_id int,\n  name text\n);\n\nCREATE OR REPLACE FUNCTION process_history()\n   returns table(user_id int, name text) as $$\nDECLARE\n  next_user_id int;\n  next_name text;\nBEGIN\n  TRUNCATE TABLE res;\n  FOR next_user_id, next_name IN SELECT a.user_id, a.name FROM attempts a ORDER BY a.id\n  LOOP\n    INSERT INTO res (SELECT next_user_id, next_name WHERE NOT(next_user_id IN (SELECT r.user_id FROM res r)));\n    UPDATE res r SET name = next_name WHERE next_user_id = r.user_id AND NOT(next_name IN (SELECT r.name FROM res r));\n  END LOOP;\n  RETURN QUERY SELECT * FROM res;\nEND; $$ LANGUAGE plpgsql;\n\nSELECT * from process_history() ORDER BY user_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339695,"user_id":53,"body":"drop table if exists users;\n\ncreate table users (\n  user_id int primary key,\n  name text unique not null\n);\n\ndo $$\ndeclare\n  val record;\n  b_user_exists integer := 0;\n  b_name_taken integer := 0;\nbegin\n  for val in \n    select user_id, name from attempts order by id\n  loop\n    execute 'select count(*) from users where user_id = ' ||  val.user_id into b_user_exists;\n    execute 'select count(*) from users where name = ''' ||  val.name || '''' into b_name_taken;\n    if b_user_exists = 0 then\n      execute 'insert into users (user_id, name) values (' || val.user_id || ', ''' || val.name || ''')';\n    elsif b_name_taken = 0 then\n      execute 'update users set name = ''' || val.name || ''' where user_id = ' || val.user_id;\n    end if;\n  end loop;\nend;\n$$;\n\nselect u.user_id, u.name from users u order by u.user_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339696,"user_id":null,"body":"create temporary table if not exists nicknames  (\n  id serial primary key\n  , user_id int\n  , name text\n);\n\ndo $$\ndeclare temprow record;\nbegin\nFOR temprow IN SELECT * FROM attempts order by id\n  LOOP\n    if not exists (select user_id from nicknames where user_id = temprow.user_id) then\n      insert into nicknames (user_id, name) values (temprow.user_id, temprow.name);\n    else\n      if not exists (select name from nicknames where name = temprow.name) then\n        update nicknames set name = temprow.name where user_id = temprow.user_id;\n      end if; \n    end if;\n  END LOOP;\nend $$;\n\nselect \nuser_id\n, name  \nfrom nicknames  \norder by user_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339697,"user_id":null,"body":"\nwith recursive att as\n(\n  select  a.id,a.user_id,a.name,\n    lead(id,1) over(order by id) as next_id \n  from attempts a\n),\nqu as\n(\n  select a.id,a.user_id,a.name,a.next_id,true as success,\n  jsonb_build_object(a.name,a.user_id) as acc\n  from att a\n  where a.id = (select min(id) from attempts)\n  union all\n  select a.id,a.user_id,a.name,a.next_id,\n  case when qu.acc ? a.name\n    then false\n    else true end,\n  case when qu.acc ? a.name\n    then qu.acc\n    else qu.acc - \n    coalesce((jsonb_path_query_first(qu.acc,\n                   '($.keyvalue()[*] ? (@.value == $val)).key'\n                   ,jsonb_build_object('val',a.user_id))->>0)::text,'')\n      ||jsonb_build_object(a.name,a.user_id) end\n  from att a \n  join qu on a.id = qu.next_id\n)\nselect jd.value::int as user_id,\n  jd.key as name\nfrom qu,\n  jsonb_each(qu.acc)  as jd\nwhere qu.next_id is null\norder by user_id\n","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339698,"user_id":null,"body":"with recursive att as\n(\n  select  a.id,a.user_id,a.name,\n    lead(id,1) over(order by id) as next_id \n  from attempts a\n),\nqu as\n(\n  select a.id,a.user_id,a.name,a.next_id,true as success,\n  '{'||a.name||':'||a.user_id||'}' as acc\n  from att a\n  where a.id = (select min(id) from attempts)\n  union all\n  select a.id,a.user_id,a.name,a.next_id,\n  case when regexp_match(qu.acc,'\\{'||a.name||':\\d+\\}') is null\n    then true\n    else false end,\n  case when regexp_match(qu.acc,'\\{'||a.name||':\\d+\\}') is null\n    then regexp_replace(qu.acc,'\\{\\w+:'||a.user_id||'\\}','')||'{'||a.name||':'||a.user_id||'}'\n    else qu.acc end\n  from att a \n  join qu on a.id = qu.next_id\n)\nselect distinct qu.user_id,\n  first_value(qu.name) over(partition by qu.user_id order by qu.id desc) as name \nfrom qu\nwhere qu.success\norder by user_id","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"},{"id":339699,"user_id":null,"body":"CREATE TABLE users(\n   user_id INTEGER UNIQUE,\n   name  VARCHAR UNIQUE\n);\n\n\nCREATE PROCEDURE main() LANGUAGE plpgsql    \nAS $$\n DECLARE\n  r_user INTEGER;\n  r_name VARCHAR;\n BEGIN \n   FOR r_user, r_name IN SELECT user_id, name FROM attempts\n    LOOP \n   \n   IF NOT EXISTS(SELECT 1 FROM users WHERE r_name=name) THEN \n     INSERT INTO users(user_id,name) VALUES(r_user,r_name) ON CONFLICT(user_id) DO UPDATE SET name=r_name;\n    END IF;\n   END LOOP;\n   \n   \n END $$;\n \n call main();\n  SELECT * FROM users ORDER BY user_id;","lang_id":52,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:25:00","updated_at":"2023-01-14 13:25:00"}]}