{"50654ddff44f800200000004":[{"id":291802,"user_id":676,"body":"let multiply = (a, b) => a * b;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291803,"user_id":168,"body":"let multiply = (*);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291804,"user_id":null,"body":"let operationmultiply = (a, b) => {\n () => {\n   a * b\n }\n}\nlet multiply = (a, b) => operationmultiply(a, b)();","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291805,"user_id":null,"body":"module type BinaryOperator = {\n  let operation: (int, int) => int;\n};\n\nmodule multiply: BinaryOperator = {\n  let operation = (x, y) => x * y;\n};\n\nlet multiply = multiply.(operation);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"515f51d438015969f7000013":[{"id":291806,"user_id":527,"body":"let pyramid = (n: int): array(array(int)) =>\n  Array.init(n, i => Array.make(i + 1, 1));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291807,"user_id":564,"body":"let rec pyramid = (n: int) => {\n  switch n {\n  | 0 => [| |]\n  | _ => Array.append(pyramid(n - 1), [| Array.make(n, 1) |])\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291808,"user_id":null,"body":"let rec fill = fun \n\t| 0 => [||]\n\t| n => Array.append([|1|], fill(n - 1)) \n\nlet rec pyramid = fun\n\t| 0 => [||]\n\t| 1 => [|fill(1)|]\n\t| n => Array.append(pyramid(n - 1), [|fill(n)|]);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291809,"user_id":null,"body":"let pyramid = (n: int) => Array.init(n, i => Array.make(i + 1, 1));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291810,"user_id":null,"body":"let pyramid = (n: int) => {\n  Belt.Array.(makeBy(n, x => makeBy(x + 1, _ => 1)))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291811,"user_id":null,"body":"let pyramid = (n: int) =>\n  if (n === 0) {\n    [||];\n  } else {\n    let arr = Array.make(n, [||]);\n    let rec aux = ind =>\n      if (ind >= n) {\n        arr;\n      } else {\n        arr[ind] = Array.make(ind + 1, 1);\n        aux(ind + 1);\n      };\n    aux(0);\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291812,"user_id":null,"body":"let rec repeat = (n: int) => {\n  switch(n) {\n  | 0 => [||]\n  | _ => Array.append([|1|],  repeat(n - 1))\n  }\n}\n\nlet rec pyramid = (n: int) => {\n  switch (n) {\n    | 0 => [||]\n    | _ => Array.concat(\n      [\n        pyramid(n - 1),\n        [|repeat(n)|]\n      ]\n    )\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291813,"user_id":null,"body":"let rec pyramid = (n: int) => {\n  if (n > 0) {\n    Array.concat([\n      pyramid(n - 1),\n      [| Array.make(n, 1) |],\n    ])\n  } else {\n    [||]\n  }\n\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291814,"user_id":null,"body":"let rec onesWithSize = (n: int) => {\n  n > 0 ? Array.concat([[| 1 |], onesWithSize(n-1)]) : [||]\n}\n\nlet rec range = (n: int) => {\n  n > 0 ? Array.concat([range(n-1), [| n |]]) : [||]\n}\n\nlet pyramid = (n: int) => {\n  range(n) |> Array.map(onesWithSize)\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291815,"user_id":null,"body":"let pyramid = (n: int) => {\n  if (n === 0) {\n    [||];\n  } else {\n    let p = ref([||]);\n\n    for (i in n downto 1) {\n      p := Array.append(Array.make(1, Array.make(i, 1)), p^);\n    }\n\n    p^\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"523b4ff7adca849afe000035":[{"id":291816,"user_id":645,"body":"let greet = () => \"hello world!\";","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291817,"user_id":50,"body":"\/* Write a function \"greet\" that returns \"hello world!\" *\/\nlet greet = () => \"hello world!\";","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291818,"user_id":null,"body":"let greet = () : string => \"hello world!\";","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5265326f5fda8eb1160004c8":[{"id":291819,"user_id":645,"body":"let number_to_string = string_of_int;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291820,"user_id":null,"body":"let number_to_string = (n: int) => {\n  string_of_int(n)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291821,"user_id":null,"body":"let number_to_string = (n: int) => {\n  Printf.sprintf(\"%d\", n)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291822,"user_id":null,"body":"let number_to_string = (n: int) => {\n  n |> Js_int.toString\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291823,"user_id":null,"body":"let number_to_string = (n: int) => {\n  {j|$n|j}\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291824,"user_id":null,"body":"let number_to_string = Js.Int.toString;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"53da3dbb4a5168369a0000fe":[{"id":291825,"user_id":571,"body":"let even_or_odd = n => (n mod 2) == 0 ? \"Even\" : \"Odd\"","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291826,"user_id":null,"body":"let even_or_odd = n =>\n  switch (n mod 2){\n    | 0 => \"Even\"\n    | _ => \"Odd\"\n  }\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291827,"user_id":null,"body":"let even_or_odd = (n: int) =>\n  if (n mod 2 === 0) {\n    \"Even\"\n  } else  {\n    \"Odd\"\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291828,"user_id":null,"body":"let even_or_odd = (n: int) => {\n  switch (n mod 2) {\n  | 0 => \"Even\"\n  | _ => \"Odd\"\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291829,"user_id":null,"body":"let even_or_odd = (n: int) => [| \"Even\", \"Odd\" |][n land 1];","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291830,"user_id":null,"body":"let is_even = (n: int) => (n mod 2) == 0\n  \nlet even_or_odd = (n: int) => {\n  if (is_even(n)) \"Even\"\n  else \"Odd\"\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291831,"user_id":null,"body":"let even_or_odd = (n: int) => {\n  if (n mod 2 == 0) {\n    \"Even\"\n  } else {\n    \"Odd\"\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291832,"user_id":null,"body":"let even_or_odd = (n: int) => n mod 2 === 0 ? \"Even\" : \"Odd\"","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291833,"user_id":527,"body":"let even_or_odd = (n: int): string => n mod 2 == 0 ? \"Even\" : \"Odd\";","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291834,"user_id":645,"body":"let even_or_odd = (n: int) => n mod 2 == 0 ? \"Even\" : \"Odd\";","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"542c0f198e077084c0000c2e":[{"id":291835,"user_id":53,"body":"let divisors = (n: int) => {\n  let m = ref(1);\n  let i = ref(1);\n  while (i^ < n) {\n    if (n mod i^ == 0) {\n      m := m^ + 1;\n    }\n    i := i^ + 1; \n  }\n  m^;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291836,"user_id":null,"body":"let divisors = (n: int) => {\n  Belt.Array.range(1, n)\n  |> Js.Array.filter(x => n mod x === 0)\n  |> Js.Array.length\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291837,"user_id":645,"body":"let divisors = (n: int) => {\n  let r = ref(0);\n  for (i in 1 to n) {\n    if (n mod i == 0) {\n      r := r^ + 1;\n    }\n  }\n  r^;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"54d496788776e49e6b00052f":[{"id":291838,"user_id":53,"body":"let sum_of_divided = (lst: list(int)): string => {\n  let rec factors = (acc, k, n) =>\n    if (k > n) {\n      acc;\n    } else if (n mod k == 0) {\n      factors([k, ...acc], k, n \/ k);\n    } else {\n      factors(acc, k + 1, n);\n    };\n  let prime_factors = n => factors([], 2, n);\n  let sum = List.fold_left((+), 0);\n  let rec uniq = acc => fun\n    | [] => acc\n    | [x, y, ...xs] when x == y => uniq(acc, [y, ...xs])\n    | [x, ...xs] => uniq([x, ...acc], xs);\n  let ps = List.map(e => prime_factors(abs(e)), lst)\n    |> List.flatten\n    |> List.sort(compare)\n    |> uniq([])\n    |> List.rev;\n  let psum = p => List.filter(e => e mod p == 0, lst) |> sum\n  List.map(p => Printf.sprintf(\"(%d %d)\", p, psum(p)), ps)\n    |> String.concat(\"\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291839,"user_id":492,"body":"let sum_of_divided = (xs: list(int)): string => {\n  let rec uniq984 =\n    fun\n    | [] => []\n    | [x] => [x]\n    | [x, x', ...xs] =>\n      if (x == x') {\n        uniq984([x', ...xs]);\n      } else {\n        [x, ...uniq984([x', ...xs])];\n      };\n\n  let sum984 = List.fold_left((+), 0);\n\n  let prime_factors = x => {\n    let rec inner = (c, p) =>\n      if (p < c * c) {\n        [p];\n      } else if (p mod c == 0) {\n        [c, ...inner(c, p \/ c)];\n      } else {\n        inner(c + 1, p);\n      };\n\n    inner(2, x) |> uniq984;\n  };\n\n  let ps =\n    List.map(x => prime_factors(abs(x)), xs)\n    |> List.flatten\n    |> List.sort(compare)\n    |> uniq984;\n\n  List.map(\n    x =>\n      Printf.sprintf(\n        \"(%d %d)\",\n        x,\n        List.filter(y => y mod x == 0, xs) |> sum984,\n      ),\n    ps,\n  )\n  |> String.concat(\"\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"54d512e62a5e54c96200019e":[{"id":291840,"user_id":492,"body":"open Int64;\n\nlet prime_factors = (n: int64): string => {\n  let rec factors = (acc, k, n) =>\n    if (k > n) {\n      List.rev(acc);\n    } else if (rem(n, k) == 0L) {\n      factors([k, ...acc], k, div(n, k));\n    } else {\n      factors(acc, add(k, 1L), n);\n    };\n  let fs = factors([], 2L, n);\n  let combine = a =>\n    fun\n    | [(p, n), ...xs] when p == a => [(p, n + 1), ...xs]\n    | xs => [(a, 1), ...xs];\n  let str = ((p, n)) =>\n    if (n > 1) {\n      Printf.sprintf(\"(%Ld**%d)\", p, n);\n    } else {\n      Printf.sprintf(\"(%Ld)\", p);\n    };\n  List.fold_right(combine, fs, []) |> List.map(str) |> String.concat(\"\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291841,"user_id":53,"body":"let prime_factors = (l: int64): string => {\n  open Int64;\n  let (\/) = div;\n  let (+) = add;\n  let (mod) = rem;\n  let s = ref(\"\");\n  let n = ref(l);\n  let i = ref(2L);\n  while (i^ <= n^) {\n    let cnt = ref(0L);\n    while (n^ mod i^ == 0L) {\n      n := n^ \/ i^;\n      cnt := cnt^ + 1L; \n    }\n    if (cnt^ == 1L) {\n      s := Printf.sprintf(\"%s(%Ld)\", s^, i^);\n    } else if (cnt^ > 1L) {\n      s := Printf.sprintf(\"%s(%Ld**%Ld)\", s^, i^, cnt^);\n    }\n    i := i^ + 1L;\n  }\n  if (String.length(s^) == 0) {\n    Printf.sprintf(\"(%Ld)\", l)\n  } else {\n    s^;\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"54d7660d2daf68c619000d95":[{"id":291842,"user_id":492,"body":"open Int64;\n\nlet convert_frac = (ls: list((int64, int64))): list((int64, int64)) => {\n  let rec gcdi = (u, v) =>\n    if (v != 0L) {gcdi(v, rem(u, v));} \n    else {Int64.abs(u);};\n\n  let lcmu = (m, n) =>\n    switch (m, n) {\n    | (0L, _)\n    | (_, 0L) => 0L\n    | (m, n) => Int64.abs(div(mul(m, n), gcdi(m, n)))\n    };\n\n  let simply = ls =>\n    List.map(\n      ((x, y)) => {\n        let g = gcdi(x, y);\n        (div(x, g), div(y, g));\n      },\n      ls,\n    );\n  let sls = simply(ls);\n  let denoml = List.map(((_, y)) => y, sls);\n  let den = List.fold_left(lcmu, 1L, denoml);\n  List.map(((x, y)) => (mul(x, div(den, y)), den), sls);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291843,"user_id":53,"body":"open Int64;\nlet (\/) = div;\nlet (*) = mul;\nlet (mod) = rem;\n\nlet rec gcd = (u: int64, v: int64): int64 => {\n  v == 0L ? u : gcd(v, u mod v);\n};\n\nlet lcm = (m: int64, n: int64): int64 => {\n  (m * n) \/ gcd(m, n);\n};\n\nlet reduce = (t: (int64, int64)): (int64, int64) => {\n  let (a, b) = t;\n  let i = gcd(a, b);\n  (a \/ i, b \/ i);\n};\n\nlet norm = (t: (int64, int64), cd: int64): (int64, int64) => {\n  let (a, b) = t;\n  (a * cd \/ b, cd);\n};\n\nlet convert_frac = (ls: list((int64, int64))): list((int64, int64)) => {\n  let xss = List.map(xs => reduce(xs), ls);\n  let cd = List.fold_left(\n    (acc, xs) => {\n      let (_, b) = xs;\n      lcm(b, acc);\n    }, 1L, xss);\n  let yss = List.map(xs => norm(xs, cd), xss);\n  yss;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"54db15b003e88a6a480000b9":[{"id":291844,"user_id":53,"body":"open Int64;\nlet (\/) = div;\nlet (*) = mul;\nlet (mod) = rem;\n\nlet rec gcd = (a: int64, b: int64): int64 => {\n  b == 0L ? a : gcd(b, a mod b);\n};\n\nlet from_nb_2_str = (n: int64, arr: list(int64)): string => {\n  let p = List.fold_left((acc, e) => acc * e, 1L, arr);\n  let q = List.fold_left((acc, e) => (acc * e) \/ gcd(acc, e), 1L, arr);\n  if (p < n || p != q) {\n    \"Not applicable\";  \n  } else {\n    List.fold_left((acc, e) => Printf.sprintf(\"%s-%Ld-\", acc, n mod e), \"\", arr);\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291845,"user_id":null,"body":"open Int64;\n\ntype test =\n  | Valid(int64)\n  | Invalid;\nlet rec gcd = (a, b) => {\n  switch (b->compare(zero)) {\n  | 0 => a\n  | _ => gcd(b, rem(a, b))\n  };\n};\nlet from_nb_2_str = (n: int64, arr: list(int64)): string => {\n  let isValidInputGcd =\n    List.fold_left(\n      (isValid, num) => {\n        switch (isValid) {\n        | Valid(product) =>\n          switch (gcd(product, num)) {\n          | value when value->compare(one) == 0 => Valid(product->mul(num))\n          | _ => Invalid\n          }\n        | Invalid => Invalid\n        }\n      },\n      Valid(1L),\n      arr,\n    );\n  let isValidInput =\n    switch (isValidInputGcd) {\n    | Valid(product) => product->compare(n) > 0\n    | Invalid => false\n    };\n\n  if (isValidInput) {\n    let remainders = List.map(a => rem(n, a), arr);\n    List.fold_left(\n      (result, remainder) => result ++ \"-\" ++ to_string(remainder) ++ \"-\",\n      \"\",\n      remainders,\n    );\n  } else {\n    \"Not applicable\";\n  };\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291846,"user_id":492,"body":"open Int64;\n\nlet from_nb_2_str = (n: int64, arr: list(int64)): string => {\n  let rec gcdi = (u, v) =>\n    if (v != 0L) {\n      gcdi(v, rem(u, v));\n    } else {\n      Int64.abs(u);\n    };\n  let lcmu = (m, n) =>\n    switch (m, n) {\n    | (0L, _)\n    | (_, 0L) => 0L\n    | (m, n) => Int64.abs(div(mul(m, n), gcdi(m, n)))\n    };\n  let moduli = (n, arr) => List.map(x => to_string(rem(n, x)), arr);\n  let p = List.fold_left(mul, 1L, arr);\n  let g = List.fold_left(lcmu, 1L, arr);\n  if (p > n && p == g) {\n    let r = moduli(n, arr) |> String.concat(\"--\");\n    \"-\" ++ r ++ \"-\";\n  } else {\n    \"Not applicable\";\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"550f22f4d758534c1100025a":[{"id":291847,"user_id":492,"body":"let reduce_dir = (dirs: list(string)): list(string) => {\n  let opposite = fun\n  | \"NORTH\" => \"SOUTH\"\n  | \"SOUTH\" => \"NORTH\"\n  | \"EAST\" => \"WEST\"\n  | \"WEST\" => \"EAST\"\n  | _ => assert(false);\n\n  let f = (cur_dir, prev_dirs) =>\n    switch (prev_dirs) {\n    | [d, ...ds] when d == opposite(cur_dir) => ds\n    | _ => [cur_dir, ...prev_dirs]\n    };\n  List.fold_right(f, dirs, []);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291848,"user_id":null,"body":"let reduce_dir = (dirs: list(string)): list(string) => {\n  let rec loop = (output, left_to_check, found_match) =>\n    switch (left_to_check, found_match) {\n    | ([\"NORTH\", \"SOUTH\", ...tail], _)\n    | ([\"SOUTH\", \"NORTH\", ...tail], _)\n    | ([\"EAST\", \"WEST\", ...tail], _)\n    | ([\"WEST\", \"EAST\", ...tail], _) => loop(output, tail, true)\n    | ([a, ...tail], _) => loop([a, ...output], tail, found_match)\n    | ([], true) => loop([], output |> List.rev, false)\n    | ([], false) => output |> List.rev\n    };\n  loop([], dirs, false);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291849,"user_id":53,"body":"\nlet init = (xs: list(string)): list(string) => {\n  List.rev(List.tl(List.rev(xs)));\n}\n\nlet last = (xs: list(string)): string => {\n  List.nth(xs, List.length(xs) - 1);\n}\n\nlet are_opposites = (a: string, b: string): bool => {\n  (    a == \"NORTH\" && b == \"SOUTH\")\n   || (a == \"SOUTH\" && b == \"NORTH\")\n   || (a == \"EAST\" && b == \"WEST\")\n   || (a == \"WEST\" && b == \"EAST\");\n}\n\nlet visit = (xs: list(string), x: string): list(string) => {\n  if (List.length(xs) > 0 && are_opposites(x, last(xs))) {\n    init(xs);\n  } else {\n    xs @ [x];\n  }\n}\n\nlet reduce_dir = (ls: list(string)): list(string) => {\n  List.fold_left(visit, [], ls);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291850,"user_id":null,"body":"module L = Belt.List;\n\nlet pairs = [[\"NORTH\", \"SOUTH\"], [\"WEST\", \"EAST\"]];\n\nlet findOpposite = input => {\n  pairs\n  |> List.find(pair => pair |> List.exists(item => item == input))\n  |> List.find(item => item != input);\n};\n\nlet append = (target, item) => target->List.append([item]);\n\nlet removeLast = input => input |> List.rev |> List.tl |> List.rev;\n\nlet getLast = input => input |> List.rev |> List.hd;\n\nlet reduce_dir = (dirs: list(string)): list(string) => {\n  dirs->L.reduce([], (acc, curr) =>\n    if (List.length(acc) == 0) {\n      acc->append(curr);\n    } else {\n      let opposite = findOpposite(curr);\n      let last = getLast(acc);\n\n      if (last == opposite) {\n        removeLast(acc);\n      } else {\n        acc->append(curr);\n      };\n    }\n  );\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5541f58a944b85ce6d00006a":[{"id":291851,"user_id":53,"body":"open Int64;\nlet (+) = add;\nlet (*) = mul;\n\nlet product_fib = (prod: int64): (int64, int64, int64) => {\n  let rec helper = (a: int64, b: int64, n: int64): (int64, int64, int64) => {\n    if (a * b == n) {\n      (a, b, 1L);\n    } else if (a * b > n) {\n      (a, b, 0L);\n    } else {\n      helper(b, a + b, n);\n    }\n  };\n  helper(0L, 1L, prod);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291852,"user_id":null,"body":"open Int64;\n\nlet rec compute = (x, y, p) => {\n  let c = Int64.compare(p, mul(x, y));\n  c > 0 ? compute(y, add(x, y), p) : (x, y, c < 0 ? 0L : 1L);\n}\n\nlet product_fib = (p : int64) : (int64, int64, int64) => compute(0L, 1L, p);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291853,"user_id":492,"body":"open Int64;\n\nlet product_fib = (n: int64): (int64, int64, int64) => {\n  let rec loop = (a: int64, b: int64, c: int64) =>\n    if (mul(a, b) >= c) {\n      (\n        a,\n        b,\n        if (mul(a, b) == c) {\n          one;\n        } else {\n          zero;\n        },\n      );\n    } else {\n      loop(b, add(a, b), c);\n    };\n  loop(zero, one, n);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5544c7a5cb454edb3c000047":[{"id":291854,"user_id":null,"body":"let rec bouncing_ball = (~count=1, h: float, bounce: float, window: float): int =>\n  if (h <= 0.0 || bounce <= 0.0 || bounce >= 1.0 || count === 1 && h <= window) {\n    (-1);\n  } else {\n    let next_h = h *. bounce;\n    next_h > window ?\n      bouncing_ball(~count=count + 2, next_h, bounce, window) : count;\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291855,"user_id":53,"body":"let rec bouncing_ball = (h: float, bounce: float, window: float): int => \n{\n  let res = ref(-1);\n  if (!(h <= 0.0 || bounce <= 0.0 || window <= 0.0 || bounce >= 1.0 || window >= h)) {\n    res := 2 + bouncing_ball(h *. bounce, bounce, window);\n  }\n  res^;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291856,"user_id":null,"body":"let rec bouncing_ball = (h: float, bounce: float, window: float): int => {\n    (h <= 0.0 || bounce <= 0.0 || bounce >= 1.0 || window >= h) ? -1 : 2 + bouncing_ball(h*.bounce, bounce, window); \n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291857,"user_id":null,"body":"let rec bouncing_ball = (h: float, bounce: float, window: float): int => {\n  if (h > 0.0 && bounce > 0.0 && bounce < 1.0 && window < h) {\n    let new_h = h *. bounce;\n    switch(new_h) {\n      | new_h when new_h > window => 2 + bouncing_ball(new_h, bounce, window)\n      | _                         => 1}}\n  else\n    -1\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291858,"user_id":null,"body":"let rec bouncing_ball = (h: float, bounce: float, window: float): int =>\n  switch (h, bounce, window) {\n  | (h, b, w) when h > w && h > 0. && b > 0. && b < 1.=> 2 + bouncing_ball(h *. b, b, w)\n  | _ => -1\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291859,"user_id":null,"body":"let rec bouncing_ball = (h: float, bounce: float, window: float): int =>\n  switch (h, bounce, window) {\n  | (h, b, w) when h > w && h > 0. && b > 0. && b < 1.=>\n    int_of_float(\n      2. +. float_of_int(bouncing_ball(h *. b, b, w)),\n    )\n  | _ => -1\n  };\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291860,"user_id":492,"body":"let rec bouncing_ball = (h: float, bounce: float, window: float): int =>\n  if (h <= 0.0 || window >= h || bounce <= 0.0 || bounce >= 1.0) {\n    (-1);\n  } else {\n    2 + bouncing_ball(h *. bounce, bounce, window);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5545f109004975ea66000086":[{"id":291861,"user_id":null,"body":"let is_divisible = (n: int, x: int, y: int): bool => {\n  switch (n mod x, n mod y) {\n  | (0, 0) => true\n  | (_, _) => false\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291862,"user_id":null,"body":"let is_divisible = (n: int, x: int, y: int): bool => {\n  n mod x === 0 && n mod y === 0\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291863,"user_id":645,"body":"let is_divisible = (n: int, x: int, y: int): bool => n mod x == 0 && n mod y == 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55466989aeecab5aac00003e":[{"id":291864,"user_id":null,"body":"let sq_in_rect = (lng: int, wdth: int): option(list(int)) => {\n  let rec squares_helper = (l: int, w: int) : list(int) => {\n    switch (l, w) {\n      | (0, y) => [y]\n      | (x, 0) => [x]\n      | (x, y) when x == y => [x]\n      | (x, y) when x > y => [y, ... squares_helper(x-y, y)]\n      | (x, y) when x < y => [x, ... squares_helper(x, y-x)]\n    };\n  }\n  switch (lng, wdth) {\n      | (x, y) when x == y => None\n      | (_, _) => Some(squares_helper(lng, wdth))\n    };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291865,"user_id":53,"body":"let sq_in_rect = (lng: int, wdth: int): option(list(int)) => {\n  if (lng == wdth) {\n    None;\n  } else {\n    let rec walk = (xs: list(int), a: int, b: int): list(int) => {\n      let l = a > b ? a : b;\n      let w = a < b ? a : b;\n      if (w == 0) {\n        xs;  \n      } else {\n        walk(xs @ [w], w, l - w);\n      }\n    }\n    Some(walk([], lng, wdth));\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291866,"user_id":null,"body":"let rec helper = (lng: int, wdth: int, acc: list(int)): list(int) => {\n  if (lng === wdth) {\n    [lng, ...acc]\n  } else {\n    if (lng < wdth) {\n      helper(lng, wdth - lng, [lng, ...acc])\n    } else {\n      helper(lng - wdth, wdth, [wdth, ...acc])  \n    }\n  }\n}\n\nlet sq_in_rect = (lng: int, wdth: int): option(list(int)) => {\n  if (lng === wdth) {\n    None\n  } else {\n    Some(Belt.List.reverse(helper(lng, wdth, [])))\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291867,"user_id":492,"body":"let sq_in_rect = (lng: int, wdth: int): option(list(int)) => {\n  let rec loop = (x, y) =>\n    if (x * y == 0) {\n      [];\n    } else {\n      let k = min(x, y);\n      let mx = max(x, y);\n      [k, ...loop(k, mx - k)];\n    };\n  if (lng == wdth) {\n    None;\n  } else {\n    Some(loop(lng, wdth));\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5547cc7dcad755e480000004":[{"id":291868,"user_id":492,"body":"open Int64;\n\nlet remove_nb = (n: int): string => {\n  let rec remov_Aux = (n: int64, s: int64, i: int64, res: string): string =>\n    switch (i) {\n    | x when x > n => res\n    | _ =>\n      let b = sub(s, i);\n      let m = div(b, Int64.succ(i));\n      if (rem(b, Int64.succ(i)) == zero) {\n        remov_Aux(\n          n,\n          s,\n          add(i, one),\n          res ++ Printf.sprintf(\"(%Ld, %Ld)\", i, m),\n        );\n      } else {\n        remov_Aux(n, s, Int64.succ(i), res);\n      };\n    };\n  let bn = of_int(n);\n  let s = mul(bn, Int64.succ(bn));\n  remov_Aux(bn, div(s, of_int(2)), div(bn, of_int(2)), \"\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291869,"user_id":53,"body":"open Int64;\n\nlet remove_nb = (n: int): string => {\n  let rec walk = (n: int64, s: int64, x: int64, ans: string): string =>\n    switch (x) {\n    | i when i > n => ans\n    | _ =>\n      let k = sub(s, x);\n      let z = Int64.succ(x);\n      if (rem(k, z) == zero) {\n        walk(n, s, add(x, one), ans ++ Printf.sprintf(\"(%Ld, %Ld)\", x, div(k, z)));\n      } else {\n        walk(n, s, z, ans);\n      };\n    };\n  let p = of_int(n);\n  walk(p, div(mul(p, Int64.succ(p)), of_int(2)), div(p, of_int(2)), \"\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"554a44516729e4d80b000012":[{"id":291870,"user_id":53,"body":"let rec helper =\n    ( p0: float, p1: float, s: float, r: float, m: float, t: float )\n    : (int, int) => {\n  if (p1 <= p0 +. t) {\n    (int_of_float(m), int_of_float(0.5 +. p0 -. p1 +. t));\n  } else {\n    helper(\n      p0 -. p0 *. 0.01 *. r,\n      p1 -. p1 *. 0.01 *. r,\n      s,\n      int_of_float(m) mod 2 == 0 ? r +. 0.5 : r, \n      m +. 1.0,\n      t +. s\n    );\n  }\n};\n\nlet nb_months =\n    ( p0: float, p1: float, s: float, r: float )\n    : (int, int) => {\n  helper(p0, p1, s, r, 0.0, 0.0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291871,"user_id":null,"body":"\/\/ I don't know if this is acceptable ReasonML style!\n\nlet even    = x => x mod 2 == 0;\nlet fround  = x => int_of_float(floor(x +. 0.5))\nlet devalue = (x, pct)\n            => x -. x *. pct \/. 100.0;\n\n\/\/ A better way to think of the percentage rates is\n\/\/ to see them as increasing after every even-numbered month,\n\/\/ starting from month zero.\n\nlet inc_pct = (x, i)\n            => switch(even(i)) {\n                | false => x\n                | true  => x +. 0.5}\n\n\nlet nb_months = ( a: float, b: float, income: float, pct: float): (int, int)\n             => { \/\/ Set up our recursive function\n                  let rec go =  (a_, b_, saved, pct_, i): (int, float)\n                             => { let new_a    = devalue(a_, pct_);\n                                  let new_b    = devalue(b_, pct_);\n                                  switch(saved+.a_ >= b_) {\n                                    | true  => (i, saved+.a_-.b_)\n                                    | false => go(new_a, new_b, saved+.income, inc_pct(pct_, i), i+1)}}\n                  \/\/ Run the recursive routine\n                  let (months, left) = go(a, b, 0.0, pct, 0);\n                  (months, fround(left))}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291872,"user_id":492,"body":"let nb_months =\n    (\n      startPriceOld: float,\n      startPriceNew: float,\n      savingperMonth: float,\n      percentLossByMonth: float,\n    )\n    : (int, int) => {\n  let rec loop = (m, old, n, s, p) =>\n    if (n <= old +. s) {\n      (m, truncate(old +. s -. n +. 0.5));\n    } else {\n      let p1 =\n        if (m mod 2 > 0 && m > 0) {\n          p +. 0.5;\n        } else {\n          p;\n        };\n      let c = 1. -. p1 \/. 100.;\n      let old1 = old *. c;\n      let n1 = n *. c;\n      let s1 = s +. savingperMonth;\n      loop(m + 1, old1, n1, s1, p1);\n    };\n  loop(0, startPriceOld, startPriceNew, 0., percentLossByMonth);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"554f76dca89983cc400000bb":[{"id":291873,"user_id":492,"body":"let sol_equa = (n: int): string => {\n  let rec loop = (acc, k) =>\n    if (k * k > n) {\n      acc;\n    } else if (n mod k != 0) {\n      loop(acc, succ(k));\n    } else {\n      let q = n \/ k;\n      if ((q + k) mod 2 == 0 && (q - k) mod 4 == 0) {\n        loop([((q + k) \/ 2, (q - k) \/ 4), ...acc], succ(k));\n      } else {\n        loop(acc, succ(k));\n      };\n    };\n  let sols = loop([], 1);\n  sols\n  |> List.rev\n  |> List.map(((x, y)) => Printf.sprintf(\"(%d %d)\", x, y))\n  |> String.concat(\" \");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291874,"user_id":53,"body":"let sol_equa = (n: int): string => {\n  let s = ref(\"\");\n  let c = ref(0);\n  let m = int_of_float(sqrt(float_of_int(n)));\n  for (i in 1 to m) {\n    let d = float_of_int(n) \/. float_of_int(i);\n    let x = (d +. float_of_int(i)) \/. 2.0;\n    let y = (d -. float_of_int(i)) \/. 4.0;\n    if ((ceil(d) == floor(d)) && (ceil(x) == floor(x)) && (ceil(y) == floor(y))) {\n      if (c^ > 0) {\n        s := s^ ++ \" \";\n      }\n      s := s^ ++ Printf.sprintf(\"(%d %d)\", int_of_float(floor(x)), int_of_float(floor(y)));\n      c := c^ + 1;\n    }\n  }\n  s^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"5552101f47fc5178b1000050":[{"id":291875,"user_id":53,"body":"let dig_pow = (n: int, p: int): int => {\n  let k = int_of_float(floor(log10(float_of_int(n)))) + 1;\n  let m = ref(n);\n  let i = ref(0);\n  let r = ref(0);\n  while (m^ > 0) {\n    r := r^ \n      + int_of_float(\n        float_of_int(m^ mod 10) \n          ** float_of_int(\n            p - 1 \n              + (k \n                 - i^)));\n    m := m^ \/ 10;\n    i := i^ + 1;\n  }\n  if (r^ mod n == 0) {\n    r^ \/ n; \n  } else {\n    -1; \n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291876,"user_id":null,"body":"let explode = (s) => Array.init (String.length(s)) (String.get(s));\n\nlet dig_pow = (n: int, p: int): int => {\n  let k: array(int) = n\n  |> string_of_int\n  |> explode\n  |> Array.map(int_of_char)\n  |> Array.map((x) => x - 48);\n  \n  let s: int = k\n  |> Array.mapi((idx, v) => {\n    float(v) ** float(idx + p)\n  })\n  |> Array.fold_left((+.), 0.0)\n  |> int_of_float;\n  \n  let r = s \/ n;\n  \n  switch(r * n) {\n  |  s1 when s1 == s => r\n  |  _ => -1\n  }\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291877,"user_id":null,"body":"open Belt;\n\n\/** Read: does n divide m *\/\nlet divides = (n: int, m: int): bool => {\n  0 == m mod n;\n};\n\nlet digits = (n: int): list(int) => {\n  let rec helper = (m) => {\n    if (m < 10) [m]\n    else [m mod 10, ...helper(m\/10)]\n  };\n  List.reverse(helper(n));\n};\n\nlet dig_pow = (n: int, p: int): int => {\n  let dig_pow_sum = digits(n)\n                    ->List.mapWithIndex((i, d) => Js.Math.pow_int(~base=d, ~exp=i + p))\n                    ->List.reduce(0, (+));\n  if (divides(n, dig_pow_sum)) {dig_pow_sum\/n}\n  else -1\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291878,"user_id":null,"body":"let rec digits =\n  fun\n  | 0 => []\n  | n => [n mod 10, ...digits(n\/10)] \n\nlet rec int_pow = (base: int, pow: int) =>\n  switch pow{\n    | 0 => 1\n    | pow => base * int_pow(base, pow-1)\n  }\n  \nlet dig_pow = (n: int, p: int): int => {\n  let digits = List.rev(digits(n))\n  let digits = List.mapi((i, n) => int_pow(n, p+i), digits)\n  let result = List.fold_left((acc, n) => acc+n, 0, digits)\n  result mod n == 0 ? result\/n : -1\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291879,"user_id":null,"body":"let rec int_exp_rec = (b: int, e: int, acc: int): int => {\n  if (e == 0) {acc} else {int_exp_rec(b, e-1, acc * b)}\n}\n\nlet int_exp = (b: int, e: int): int => {\n  int_exp_rec(b, e, 1)\n}\n\nlet rec digit_list_rec = (n: int, acc: list(int)): list(int) => {\n  if (n == 0) {acc} else {digit_list_rec(n \/ 10, [n mod 10, ...acc])}\n}\n\nlet digit_list = (n: int): list(int) => {\n  digit_list_rec(n, [])\n}\n\nlet rec sum_powers_rec = (p: int, digits: list(int), acc: int): int => {\n  if (List.length(digits) == 0) {acc} else {sum_powers_rec(p + 1, List.tl(digits), acc + int_exp(List.hd(digits), p))}\n}\n\nlet sum_powers = (p: int, digits: list(int)): int => {\n  sum_powers_rec(p, digits, 0)\n}\n\nlet dig_pow = (n: int, p: int): int => {\n  let x = digit_list(n) |> sum_powers(p)\n  if (x mod n == 0) {x\/n} else {-1}\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291880,"user_id":null,"body":"let dig_pow = (n: int, p: int): int => {\n    let digits = Js.Array.reducei((acc, item, i) => {\n    acc + Js.Math.pow_int(~base=int_of_string(item), ~exp=p+i);\n  }, 0, Js.String.split(\"\", Js.Int.toString(n)));\n\n  let q = ref(1);\n  let break = ref(false);\n\n  while (!break^) {\n    if (q^ * n < digits) {\n      q := q^ + 1;\n    } else if (q^ * n === digits) {\n      break := true;\n    } else {\n      q := -1;\n      break := true;\n    }\n  };\n\n\n  q^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291881,"user_id":492,"body":"let dig_pow = (n: int, p: int): int => {\n  let rec ipow = (n, m) =>\n    if (m == 0) {1;} \n    else {n * ipow(n, m - 1);};\n\n  let char2int = x => Char.code(x) - Char.code('0');\n\n  let explode = s => {\n    let rec loop = (i, l) =>\n      if (i < 0) {l;} \n      else {loop(i - 1, [char2int(s.[i]), ...l]);};\n    loop(String.length(s) - 1, []);\n  };\n\n  let calc_pow = (l, p) => {\n    let rec aux = (l, p, acc) =>\n      switch (l) {\n      | [] => acc\n      | [h, ...tl] => aux(tl, p + 1, ipow(h, p) + acc)\n      };\n    aux(l, p, 0);\n  };\n\n  let c = calc_pow(explode(string_of_int(n)), p);\n  if (c mod n == 0) {c \/ n;} \n  else {(-1);};\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"555624b601231dc7a400017a":[{"id":291882,"user_id":50,"body":"let josephus_survivor = (n: int, k: int) => {\n  let a = ref(0);\n  for (i in 2 to n) {\n    a := (a^ + k) mod i;\n  }\n  a^ + 1;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291883,"user_id":null,"body":"let rec josephus_survivor = (n: int, k: int) => {\n  switch (n) {\n  | 1 => 1\n  | _ => (josephus_survivor(n - 1, k) + k - 1) mod n + 1\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291884,"user_id":53,"body":"let josephus_survivor = (n: int, k: int) => {\n  let res = ref(1);\n  let i = ref(1);\n  while (i^ <= n) {\n    res := (res^ + k - 1) mod i^ + 1;\n    i := i^ + 1;\n  }\n  res^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291885,"user_id":645,"body":"let josephus_survivor = (n: int, k: int) => {\n  let res = ref(1);\n  for (i in 1 to n) {\n    res := (res^ + k - 1) mod i + 1;\n  }\n  res^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"556deca17c58da83c00002db":[{"id":291886,"user_id":492,"body":"let rec tribonacci = ((x, y, z) : (float, float, float), n : int) : list(float) =>\n  if (n == 0) {\n    []\n  } else {\n    [x, ...tribonacci((y, z, x +. y +. z), n - 1)]\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291887,"user_id":564,"body":"let rec tribonacci = (signature: (float, float, float), n: int): list(float) =>\n  switch (n) {\n  | 0 => []\n  | _ => {\n      let (a, b, c) = signature;\n      let d = a +. b +. c;\n      [a, ...tribonacci((b, c, d), n - 1)]\n    }\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291888,"user_id":676,"body":"let rec tribonacci = ((a, b, c) : (float, float, float), n : int) : list(float) =>\n  if (n == 0) {\n    []\n  } else {\n    [a, ...tribonacci((b, c, a +. b +. c), n - 1)]\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291889,"user_id":null,"body":"let first_n = (n: int, l: list('a)): list('a) => {\n  Array.of_list(l)\n    ->Array.sub(0, n)\n    ->Array.to_list;\n};\n\nlet sum = (l: list(float)): float => {\n  List.fold_left((a: float, b: float): float => a +. b, 0., l);\n};\n\nlet rec rec_tribonacci = (n: int, acc: list(float)): list(float) => {\n  if(n <= 0) {\n    acc;\n  } else {\n    rec_tribonacci(n - 1, [first_n(3, acc)->sum, ...acc]);\n  }\n};\n\nlet tribonacci = (signature: (float, float, float), n: int): list(float) => {\n  let (first, second, third) = signature;\n  List.rev(rec_tribonacci(n - 3, [third, second, first]))\n  |> first_n(n);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291890,"user_id":null,"body":"let rec tribonacci = (signature: (float, float, float), n: int): list(float) => {\n  switch (n) {\n  | 0 => []\n  | _ =>\n    let (s1, s2, s3) = signature;\n    let sum = s1 +. s2 +. s3;\n    [s1, ...tribonacci((s2, s3, sum), n - 1)];\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291891,"user_id":null,"body":"let rec listtribonacci = (input: list(float), num: int) => {\n  let len = input->List.length;\n  let sum =\n    input->List.nth(len - 1)\n    +. input->List.nth(len - 2)\n    +. input->List.nth(len - 3);\n\n  switch (num) {\n  | 0 => input\n  | _ => input->List.append([sum])->listtribonacci(num - 1)\n  };\n};\n\nlet tribonacci = (signature: (float, float, float), n: int): list(float) => {\n  let (s1, s2, s3) = signature;\n  switch (n) {\n  | 0 => []\n  | 1 => [s1]\n  | 2 => [s1, s2]\n  | _ => listtribonacci([s1, s2, s3], n - 3)\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291892,"user_id":null,"body":"let rec tribonacci = (signature: (float, float, float), n: int): list(float) =>{\nlet (a1,a2,a3) = signature;\nswitch (n){\n  | 0 => []\n  | 1 => [a1]\n  | 2 => [a1, a2]\n  | 3 => [a1, a2, a3]\n  | _ => [a1, ...tribonacci((a2,a3,a1+.a2+.a3),n-1)]\n}\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291893,"user_id":null,"body":"type tribfn = ((float, float, float), int) => list(float)\nlet rec tribonacci: tribfn = ((v1, v2, v3), n) => switch (n) {\n  | 0 => []\n  | 1 => [v1]\n  | 2 => [v1, v2]\n  | 3 => [v1, v2, v3]\n  | n => List.append([v1], tribonacci((v2, v3, v1 +. v2 +. v3), n - 1))\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291894,"user_id":1186,"body":"let slice = (list, n) => {\n  let i = ref(-1);\n  \n  List.filter(_ => {\n    i := i^ + 1;\n    i^ < n;\n  }, list);\n}\n\nlet rec tribonnaciRec = (signature: list(float), n: int): list(float) => {\n  if (n < 4) {\n    slice(signature, n);\n  } else {\n    let len = List.length(signature);\n    let first = List.nth(signature, len - 1);\n    let sec = List.nth(signature, len - 2);\n    let third = List.nth(signature, len - 3);\n    \n    let newValue = first +. sec +. third;\n    let newSignature = List.append(signature, [newValue]);\n    \n    n == 4 ? newSignature : tribonnaciRec(newSignature, n - 1);\n  }\n}\n\nlet tribonacci = (signature: (float, float, float), n: int): list(float) => {\n  let (first, sec, third) = signature;\n  tribonnaciRec([first, sec, third], n);\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291895,"user_id":676,"body":"let rec tribonacci = (signature : list(float), n : int) : list(float) =>\n  switch ((signature, n)) {\n  | ([a, b, c], n) when n > 0 => [a, ...tribonacci([b, c, a +. b +. c], n - 1)]\n  | _ => []\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291896,"user_id":168,"body":"let tribonacci = (signature: list(float), n: int): list(float) => {\n  let rec aux = (acc, i) => switch(acc) {\n    | _ when i >= n => List.rev(acc)\n    | [a, b, c, ..._] => aux([a +. b +. c, ...acc], i + 1)\n    | _ => failwith(\"Bad signature\")\n  };\n  switch (n, signature) {\n    | (0, _) => []\n    | (1, [a, ..._]) => [a]\n    | (2, [a, b, ..._]) => [a, b]\n    | _ => aux(List.rev(signature), 3)\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291897,"user_id":1186,"body":"let slice = (list, n) => {\n  let i = ref(-1);\n  \n  List.filter(_ => {\n    i := i^ + 1;\n    i^ < n;\n  }, list);\n}\n\nlet rec tribonacci = (signature: list(float), n: int): list(float) => {\n  if (n < 4) {\n    slice(signature, n);\n  } else {\n    let len = List.length(signature);\n    let first = List.nth(signature, len - 1);\n    let sec = List.nth(signature, len - 2);\n    let third = List.nth(signature, len - 3);\n    \n    let newValue = first +. sec +. third;\n    let newSignature = List.append(signature, [newValue]);\n    \n    n == 4 ? newSignature : tribonacci(newSignature, n - 1);\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"559a28007caad2ac4e000083":[{"id":291898,"user_id":53,"body":"open Int64;\nlet (+) = add;\nlet (-) = sub;\nlet (*) = mul;\n\nlet rec helper = (n: int64, a: int64, b: int64, m: int64): string => {\n  if (n < Int64.zero) {\n    Int64.to_string(m);\n  } else {\n    helper(n - Int64.one, b , a + b, m + Int64.of_int(4) * a);\n  }\n};\n\nlet perimeter = (n: int): string => {\n  helper(Int64.of_int(n), Int64.one, Int64.one, Int64.zero);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291899,"user_id":null,"body":"let add = (a, b) => a->Int64.add(b);\n\nlet multiply = (a, b) => a->Int64.mul(b);\n\nlet rec fibonacci = num =>\n  if (num <= 1) {\n    [Int64.of_int(1), Int64.of_int(0)];\n  } else {\n    let rest = fibonacci(num - 1);\n    switch (rest) {\n    | [first, second, ..._] => [first->add(second), ...rest]\n    | _ => rest\n    };\n  };\n\nlet perimeter = num => {\n  fibonacci(num + 1)\n  ->Belt_List.reduce(Int64.of_int(0), add)\n  ->multiply(Int64.of_int(4))\n  ->Int64.to_string;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291900,"user_id":492,"body":"open Int64;\n\nlet perimeter = (n: int): string => {\n  let fib = (n: int): int64 => {\n    let rec aux = (current, next, n) =>\n      if (n == 0) {\n        current;\n      } else {\n        aux(next, add(current, next), n - 1);\n      };\n    aux(one, one, n);\n  };\n  to_string(mul(of_int(4), sub(fib(n + 2), one)));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"559ce00b70041bc7b600013d":[{"id":291901,"user_id":564,"body":"open Int64;\n\nlet finance = (n: int64): int64 => {\n  n -> mul(n -> succ)\n    -> mul(n -> add(2L))\n    -> div(2L);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291902,"user_id":168,"body":"let finance = (n: int64): int64 => {\n  open Int64;\n  let (+) = add;\n  let (*) = mul;\n  let two = one + one;\n  div(n * (n + one) * (n + two), two);\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291903,"user_id":53,"body":"open Int64;\n\nlet finance = (n: int64): int64 => {\n    let one = Int64.of_int(1);\n    let two = Int64.of_int(2);\n    Int64.div(Int64.mul(Int64.mul(n, Int64.add(n, one)), Int64.add(n, two)), two)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291904,"user_id":1186,"body":"let sumRow = (first: int, n: int): int64 => ((first + first + n - 1) * n \/ 2)->Int64.of_int;\n\nlet rec finance = (~i: int64 = 0L, ~sum: int64 = 0L, n: int64): int64 =>\n  i == Int64.add(n, 1L) ? sum : {\n    let nInRow: int64 = Int64.sub(Int64.add(n, 1L), i);\n    let first: int64 = Int64.mul(i, 2L);\n    let sumInRow = sumRow(first->Int64.to_int, nInRow->Int64.to_int);\n    finance(\n      ~i = Int64.add(i, 1L),\n      ~sum = Int64.add(sum, sumInRow),\n      n,\n    );\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291905,"user_id":492,"body":"let finance = (n: int64): int64 => {\n    open Int64;\n    let k: int64 = mul(mul(n, add(n, 1L)), add(n, 2L));\n    div(k, 2L);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55a29405bc7d2efaff00007c":[{"id":291906,"user_id":53,"body":"let going = (n: int): float => {\n  let t = ref(0.0);\n  let m = ref(1.0);\n  let i = ref(n);\n  while (i^ > 0) {\n    t := t^ +. 1.0 \/. m^;\n    m := m^ *. float_of_int(i^);\n    i := i^ - 1;  \n  }\n  float_of_int (int_of_float (t^ *. 1000000.0)) \/. 1000000.0;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291907,"user_id":null,"body":"let trunc = (n: float, p: int): float => floor(n *. 10. ** float(p)) \/. 10. ** float(p);\n\nlet rec goingRec = (n: int, i: int, increment: float): float => {\n  let increment = increment \/. float(i);\n\n  increment == 0. ? 1. : (i > 1 ? goingRec(n, i - 1, increment) +. increment : 1.);\n}\n\nlet going = (n: int): float => {\n  trunc(goingRec(n, n, 1.), 6);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291908,"user_id":168,"body":"let going = (n: int): float => {\n  let rec prod = (acc, i, j) =>\n    if (i > j) { acc; } \n    else { prod(float(i) *. acc, i + 1, j); };\n  let rec sum = (acc, f, i, j) =>\n    if (i > j) { acc; }\n    else { sum(f(i) +. acc, f, i + 1, j); };\n  let x = sum(0., i => 1.0 \/. prod(1., i + 1, n), 1, n);\n  let p = 10. ** 6.;\n  floor(x *. p) \/. p;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291909,"user_id":492,"body":"let going = (n: int): float => {\n  let trunc = (x, p) =>\n      floor(x *. 10.0 ** float_of_int(p)) \/. 10.0 ** float_of_int(p);\n  let rec go = (i, iter, res) =>\n    if (i == 1) {\n      trunc(res, 6);\n    } else {\n      let it = iter *. 1.0 \/. float_of_int(i);\n      go(i - 1, it, res +. it);\n    };\n  go(n, 1.0, 1.0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55aa075506463dac6600010d":[{"id":291910,"user_id":492,"body":"let list_squared = (m: int, n: int): string => {\n  let rec range = (a: int, b: int): list(int) =>\n    if (a > b) {\n      [];\n    } else {\n      [a, ...range(a + 1, b)];\n    };\n  let sq_factors = n =>\n    List.filter(v => n mod v == 0, range(1, n))\n    |> List.map(x => x * x)\n    |> List.fold_left((+), 0);\n  let is_square = (num: int): bool => {\n    let s = int_of_float(sqrt(float_of_int(num)));\n    s * s == num;\n  };\n  let r = range(m, n);\n  List.map(x => (x, sq_factors(x)), r)\n  |> List.filter(((_, y)) => is_square(y))\n  |> List.map(((x, y)) => Printf.sprintf(\"(%d %d)\", x, y))\n  |> String.concat(\"\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291911,"user_id":53,"body":"let isSquare = (num: int): bool => {\n  let s = int_of_float(sqrt(float_of_int(num)));\n  s * s == num;\n};\n\nlet rec findDivs = (~num, ~i=num, ()) => {\n  let j = num mod i;\n  let next =\n    switch (i) {\n    | 1 => []\n    | _ => findDivs(~num, ~i=i - 1, ())\n    };\n\n  switch (j) {\n  | 0 => [i, ...next]\n  | _ => next\n  };\n};\n\nlet getSquare = num => {\n  let squared =\n    findDivs(~num, ()) |> List.fold_left((acc, i) => acc + i * i, 0);\n  if (isSquare(squared)) {\n    Printf.sprintf(\"(%d %d)\", num, squared);\n  } else {\n    \"\";\n  };\n};\n\nlet rec list_squared = (m: int, n: int): string => {\n  let xs = getSquare(n);\n  if (n > m) {\n    list_squared(m, n - 1) ++ xs;\n  } else {\n    xs;\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291912,"user_id":null,"body":"let rec getDivisors = (~num, ~i=num, ()) => {\n  let j = num mod i;\n  let next =\n    switch (i) {\n    | 1 => []\n    | _ => getDivisors(~num, ~i=i - 1, ())\n    };\n\n  switch (j) {\n  | 0 => [i, ...next]\n  | _ => next\n  };\n};\n\nlet getSquare = num => {\n  let squared =\n    getDivisors(~num, ()) |> List.fold_left((acc, i) => acc + i * i, 0);\n\n  let sideFloat = Js_math.pow_float(~base=Js_int.toFloat(squared), ~exp=0.5);\n  let sideInt =\n    sideFloat->Js_float.toFixedWithPrecision(~digits=0)->Js_float.fromString;\n\n  if (sideFloat == sideInt) {\n    \"(\" ++ Js_int.toString(num) ++ \" \" ++ Js_int.toString(squared) ++ \")\";\n  } else {\n    \"\";\n  };\n};\n\nlet rec list_squared = (m: int, n: int): string => {\n  let squared = getSquare(n);\n\n  if (n > m) {\n    list_squared(m, n - 1) ++ squared;\n  } else {\n    squared;\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55ab4f980f2d576c070000f4":[{"id":291913,"user_id":null,"body":"let game = (n: int64): string => {\n  switch (Int64.rem(n, 2L)) {\n  | 0L => \"[\" ++ Int64.to_string(Int64.div(Int64.mul(n,n), 2L)) ++ \"]\"\n  | 1L => \"[\" ++ Int64.to_string(Int64.mul(n,n)) ++ \",2]\"\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291914,"user_id":53,"body":"let game = (n: int64): string => {\n  open Int64;\n  let (\/) = div;\n  let (*) = mul;\n  let (mod) = rem;\n  if (n mod 2L == 0L) {\n    Printf.sprintf(\"[%Ld]\", n * n \/ 2L);\n  } else {\n    Printf.sprintf(\"[%Ld,2]\", n * n);\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291915,"user_id":168,"body":"let game = (n: int64): string => {\n  open Int64;\n  let k = mul(n, n);\n  if (logand(k, 1L) == 0L) {\n    \"[\" ++ to_string(div(k, 2L)) ++ \"]\";\n  }\n  else {\n    \"[\" ++ to_string(k) ++ \",2]\";\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291916,"user_id":492,"body":"let game = (n: int64): string => {\n  open Int64;\n  let k: int64 = mul(n, n);\n  if (rem(k, 2L) == 0L) {\n    \"[\" ++ to_string(div(k, 2L)) ++ \"]\";\n  } else {\n    \"[\" ++ to_string(k) ++ \",2]\";\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55b3425df71c1201a800009c":[{"id":291917,"user_id":492,"body":"open Js_string;\n\nlet stat_assoc = (s: string): string => {\n  let time_2_snd_ = s => {\n    let a = split(\", \", s);\n    a\n    |> Array.map(x => split(\"|\", x))\n    |> Array.map(x =>\n         int_of_string(x[0])\n         * 3600\n         + int_of_string(x[1])\n         * 60\n         + int_of_string(x[2])\n       );\n  };\n  let sec_2_time_ = t => {\n    let (m, s) = (t \/ 60, t mod 60);\n    let (h, m) = (m \/ 60, m mod 60);\n    [h, m, s]\n    |> List.map(x => Printf.sprintf(\"%02d\", x))\n    |> String.concat(\"|\");\n  };\n  let mean = l => {\n    let sx = List.fold_left((sx, x) => sx + x, 0, l);\n    sec_2_time_(\n      int_of_float(float_of_int(sx) \/. float_of_int(List.length(l))),\n    );\n  };\n  let stat_assocrange = l => {\n    let a = List.sort(compare, l) |> Array.of_list;\n    sec_2_time_(a[Array.length(a) - 1] - a[0]);\n  };\n  let median = l => {\n    let a = List.sort(compare, l) |> Array.of_list;\n    let m1 = a[(Array.length(a) - 1) \/ 2];\n    let m2 = a[Array.length(a) \/ 2];\n    let md = (m1 + m2) \/ 2;\n    sec_2_time_(md);\n  };\n\n  if (s == \"\") {\"\"\n  } else {\n    let r = time_2_snd_(s) |> Array.to_list;\n    Printf.sprintf(\n      \"Range: %s Average: %s Median: %s\",\n      stat_assocrange(r),\n      mean(r),\n      median(r),\n    );\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55b4d87a3766d9873a0000d4":[{"id":291918,"user_id":53,"body":"let howmuch = (m: int, n: int): string => {\n  let s = ref(\"\");\n  let c = ref(0);\n  for (i in min(m, n) to max(m, n)) {\n    if (i mod 9 == 1 && i mod 7 == 2) {\n      if (c^ > 0) {\n        s := s^ ++ \" \/ \";\n      }\n      s := s^ ++ Printf.sprintf(\"M: %d ; B: %d ; C %d\", i, i \/ 7, i \/ 9);\n      c := c^ + 1;\n    }\n  }\n  s^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291919,"user_id":492,"body":"let howmuch = (m: int, n: int): string => {\n  let rec range = (m, n) =>\n    if (m <= n) {[m, ...range(m + 1, n)];} else {[];};\n  let i = min(m, n); let j = max(m, n);\n  List.map(\n    x =>\n      if (x mod 9 == 1 && x mod 7 == 2) {\n        [Printf.sprintf(\"M: %d ; B: %d ; C %d\", x, x \/ 7, x \/ 9)];\n      } else {\n        [];\n      },\n    range(i, j),\n  )\n  |> List.filter(x => x !== [])\n  |> List.map(x => String.concat(\"\", x))\n  |> String.concat(\" \/ \");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291920,"user_id":null,"body":"let join = (sep: string, current: string, next: string): string => {\n  if (current == \"\") {next;} else {current ++ sep ++ next;};\n}\n\nlet formatResult = (f: int): string => {\n  let c = (f - 1) \/ 9;\n  let b = (f - 2) \/ 7;\n  \"M: \" ++ string_of_int(f) ++ \" ; B: \" ++ string_of_int(b) ++ \" ; C \" ++ string_of_int(c);\n}\n\nlet rec deltaRange = (next: int, max: int, delta: int): list(int) => {\n  if (next > max) {[];} else {[next, ...deltaRange(next+delta, max, delta)];};\n}\n\nlet getAllFs = (base: int, modulo: int, lower: int, upper: int): list(int) => {\n  let adjust = (base + modulo - (lower mod base)) mod base;\n  deltaRange(lower + adjust, upper, base);\n}\n\nlet howmuch = (m: int, n: int): string => {\n  let lower = min(m, n);\n  let upper = max(m, n);\n  List.fold_left(join(\" \/ \"), \"\", List.map(formatResult, getAllFs(63, 37, lower, upper)));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55c6126177c9441a570000cc":[{"id":291921,"user_id":492,"body":"open Js_string;\nlet order_weight = (s: string): string => {\n  let weight = str => {\n    let sum = ref(0);\n    String.iter(ch => sum := sum^ + Char.code(ch) - Char.code('0'), str);\n    sum^;\n  };\n  let cmp = (s1, s2) => {\n    let (w1, w2) = (weight(s1), weight(s2));\n    let r = compare(w1, w2);\n    if (r == 0) {\n      compare(s1, s2);\n    } else {\n      r;\n    };\n  };\n  let a = Array.to_list(splitByRe([%re \"\/ +\/\"], s));\n  String.concat(\" \", List.sort((x, y) => cmp(x, y), a));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291922,"user_id":null,"body":"let rec getNumerals = s =>\n  switch (s) {\n  | \"\" => []\n  | _ => [\n      s->Js.String.substring(~from=0, ~to_=1)->int_of_string,\n      ...getNumerals(s->Js.String.substr(~from=1)),\n    ]\n  };\n\nlet add = (a, b) => a + b;\n\nlet sum = input => input->Belt.List.reduce(0, add);\n\nlet order_weight = s => {\n  s\n  |> Js.String.split(\" \")\n  |> Js.Array.sortInPlaceWith((a, b) => {\n       let sumA = a->getNumerals->sum;\n       let sumB = b->getNumerals->sum;\n\n       if (sumA == sumB) {\n         String.compare(a, b);\n       } else {\n         sumA - sumB;\n       };\n     })\n  |> Js.Array.joinWith(\" \");\n};\n\nlet dotest = (s: string, exp: string) => {\n  let act = order_weight(s);\n\n  if (act == exp) {\n    Js.log4(\"OK: \", act, \"==\", exp);\n  } else {\n    Js.log4(\"ERR: \", act, \"==\", exp);\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291923,"user_id":1186,"body":"let sumDigits = num =>\n  num\n  |> Js.String.split(\"\")\n  |> Array.fold_left((sum, digit) => sum + digit->int_of_string, 0);\n\nlet compareWeights = (w1, w2) => {\n  let sum1 = sumDigits(w1);\n  let sum2 = sumDigits(w2);\n  \n  sum1 != sum2 ? sum1 - sum2 : String.compare(w1, w2);\n}\n\nlet order_weight = (s: string): string => {\n  let arr = s |> Js.String.split(\" \");\n  Array.sort(compareWeights, arr);\n  Js.Array.joinWith(\" \", arr);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55cbc3586671f6aa070000fb":[{"id":291924,"user_id":null,"body":"let checkForFactor = (base: int, factor: int) => base mod factor === 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291925,"user_id":null,"body":"let checkForFactor = (base: int, factor: int) => {\n  let result = base mod factor\n  \n  switch (result) {\n    | 0 => true\n    | _ => false\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291926,"user_id":null,"body":"let checkForFactor = (base: int, factor: int) => {\n  let value = base mod factor\n  switch (value) {\n     | 0 => true\n     | _ => false;\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291927,"user_id":null,"body":"let checkForFactor = (base: int, factor: int) => {\n  \/* your code here *\/\n  let div = base mod factor\n  \n  switch (div) {\n    |0 => true\n    |_ => false\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291928,"user_id":76,"body":"let checkForFactor = (base: int, factor: int): bool => base mod factor === 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291929,"user_id":null,"body":"let factorTest = (a,b) => a-(b* (a\/b));\nlet checkForFactor = (a,b) => switch (factorTest(a,b)){\n  | 0 => true\n  | 1 => false\n  | a => false\n };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291930,"user_id":527,"body":"let checkForFactor = (base, factor) => base mod factor == 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291931,"user_id":527,"body":"let checkForFactor = (base: int, factor: int): bool =>\n  base mod factor == 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291932,"user_id":645,"body":"let checkForFactor = (base: int, factor: int) => base mod factor == 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55cbd4ba903825f7970000f5":[{"id":291933,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  switch ((a + b + c) \/ 3) {\n  | x when x >= 90 => 'A'\n  | x when x >= 80 => 'B'\n  | x when x >= 70 => 'C'\n  | x when x >= 60 => 'D'\n  | _ => 'F'\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291934,"user_id":527,"body":"let getGrade = (a: int, b: int, c: int): char =>\n  switch ((a + b + c) \/ 30) {\n  | 9 | 10 => 'A'\n  | 8 => 'B'\n  | 7 => 'C'\n  | 6 => 'D'\n  | _ => 'F'\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291935,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  let mean = (a + b + c) \/ 3\n  \n  if (mean >= 90 && mean <= 100) {\n    'A'\n  } else if (mean >= 80 && mean < 90) {\n    'B'\n  } else if (mean >= 70 && mean < 80) {\n    'C'\n  } else if (mean >= 60 && mean < 70) {\n    'D'\n  } else {\n    'F'\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291936,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  let average = (a + b + c) \/ 3\n  if (average >= 90) 'A'\n  else if (average >= 80) 'B'\n  else if (average >= 70) 'C'\n  else if (average >= 60) 'D'\n  else 'F'\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291937,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  let average = float_of_int(a + b + c) \/. 3.0\n\n  if (average >= 90.0) {\n    'A'\n  } else if (average >= 80.0) {\n    'B'\n  } else if (average >= 70.0) {\n    'C'\n  } else if (average >= 60.0) {\n    'D'\n  } else {\n    'F'\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291938,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  let avg = (a+b+c)\/3\n  switch (avg) {\n    | avg when avg >= 90 && avg <= 100 => 'A'\n    | avg when avg >= 80 && avg < 90 => 'B'\n    | avg when avg >= 70 && avg < 80 => 'C'\n    | avg when avg >= 60 && avg < 70 => 'D'\n    | avg when avg < 60 => 'F'\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291939,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  switch ((a + b + c) \/ 3) {\n    | x  when x >= 90 && x <= 100 => 'A'\n    | x  when x >= 80 => 'B'\n    | x  when x >= 70 => 'C'\n    | x  when x >= 60 => 'D'\n    | x  when x >= 0 && x < 60 => 'F'\n    | _ => 'E'\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291940,"user_id":53,"body":"let getGrade = (a: int, b: int, c: int) => {\n  \"FFFFFFDCBAA\".[(a+b+c)\/30];\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291941,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  switch ((a + b + c)\/3) {\n    | mean when mean > 89 => 'A'\n    | mean when mean > 79 => 'B'\n    | mean when mean > 69 => 'C'\n    | mean when mean > 59 => 'D'\n    | _ => 'F'\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291942,"user_id":null,"body":"let getGrade = (a: int, b: int, c: int) => {\n  let mean = (a + b + c)\/3;\n\n  switch(mean\/10) {\n    | 10 | 9 => 'A'\n    | 8 => 'B'\n    | 7 => 'C'\n    | 6 => 'D'\n    | _ => 'F'\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55cf3b567fc0e02b0b00000b":[{"id":291943,"user_id":492,"body":"let part = n => {\n  let rec prod_k_parts = (p, d, n, k) =>\n    if (n < k) {\n      [];\n    } else if (k == 1) {\n      [p * (n + d)];\n    } else {\n      let p1 = prod_k_parts(p * (d + 1), d, n - 1, k - 1);\n      let p2 = prod_k_parts(p, d + 1, n - k, k);\n      p1 @ p2;\n    };\n\n  let prod_parts = n => {\n    let rec loop = (acc, k) =>\n      if (k > n) {\n        acc;\n      } else {\n        loop(prod_k_parts(1, 0, n, k) @ acc, succ(k));\n      };\n    loop([], 1);\n  };\n\n  let rec uniq = acc => fun\n    | [] => acc\n    | [x, y, ...xs] when x == y => uniq(acc, [y, ...xs])\n    | [x, ...xs] => uniq([x, ...acc], xs);\n\n  let arr = Array.of_list @@ uniq([]) @@ List.sort(compare) @@ prod_parts(n);\n  let sum = Array.fold_left((+), 0, arr);\n  let n = Array.length(arr);\n  let (range, mean, median) =\n    if (n == 0) {\n      (0, 0., 0.);\n    } else {\n      (\n        arr[0] - arr[n - 1],\n        float(sum) \/. float(n),\n        0.5 *. float(arr[n \/ 2] + arr[(n - 1) \/ 2]),\n      );\n    };\n  Printf.sprintf(\"Range: %d Average: %.2f Median: %.2f\", range, mean, median);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291944,"user_id":53,"body":"\/\/ reworked previous attempt with parts of g964's solution\n\nlet rec gip = (p, d, n, k) =>\n  if (n < k) {\n    [];\n  } else if (k == 1) {\n    [p * (n + d)];\n  } else {\n    let xs = gip(p * (d + 1), d, n - 1, k - 1);\n    let ys = gip(p, d + 1, n - k, k);\n    xs @ ys;\n  };\n\nlet partition = n => {\n  let rec loop = (acc, k) =>\n    if (k > n) {\n      acc;\n    } else {\n      loop(gip(1, 0, n, k) @ acc, succ(k));\n    };\n  loop([], 1);\n};\n\nlet rec uniq = acc => fun\n  | [] => acc\n  | [x, y, ...xs] when x == y => uniq(acc, [y, ...xs])\n  | [x, ...xs] => uniq([x, ...acc], xs);\n\nlet part = (n: int): string => {\n  let xs = uniq([]) @@ List.rev @@ List.sort(Pervasives.compare) @@ partition(n);\n  let s = List.fold_left((a, b) => a + b, 0, xs);\n  let l = List.length(xs);\n  let r = List.nth(xs, l-1) - List.hd(xs);\n  let u = float_of_int(s) \/. float_of_int(l);\n  let m = float_of_int(List.nth(xs, l\/2) + List.nth(xs, (l-1)\/2)) \/. 2.0;\n  Printf.sprintf(\"Range: %d Average: %.2f Median: %.2f\", r, u, m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291945,"user_id":53,"body":"open Int64;\nlet (+) = add;\nlet (*) = mul;\n\nlet dedups = (xs: list(int64)): list(int64) => {\n  let a = ref(List.hd(xs));\n  let b = ref(0L);\n  let arr = ref([a^]);\n  for (i in 1 to List.length(xs) - 1) {\n    b := List.nth(xs, i);\n    if (a^ != b^) {\n      arr := arr^ @ [b^];\n    }\n    a := b^;\n  }\n  arr^;\n}\n\ntype ref('a) = {\n  mutable contents: 'a,\n};\n\nlet cache = {contents: [|[0L]|]};\n\nlet partition = (n: int): list(int64) => {\n  cache.contents[n]\n}\n\nlet calc = (n: int): string => {\n  \n  if (Array.length(cache.contents) == 1) {\n    cache.contents = [|[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L],[0L]|]\n    \/\/ for (k in 0 to Array.length(cache.contents)) {   <--- unexplainable maximum call stack error, eventhough I'm not using any recursion.\n    for (k in 0 to 35) {\n      let ls = ref([1L]);\n      for (i in 1 to k) {\n        let ys = cache.contents[k - i];\n        ls := ls^ @ List.map((y) => y * Int64.of_int(i), ys); \n      }\n      cache.contents[k] = dedups(List.sort(Pervasives.compare, ls^)); \n    }\n  }\n  let xs = partition(n);\n  let s = List.fold_left((a, b) => a + b, 0L, xs);\n  let l = List.length(xs);\n  let r = Int64.sub(List.nth(xs, l-1), List.hd(xs));\n  let u = Int64.to_float(s) \/. Int64.to_float(Int64.of_int(l));\n  let m = Int64.to_float(List.nth(xs, l\/2) + List.nth(xs, (l-1)\/2)) \/. 2.0;\n  Printf.sprintf(\"Range: %d Average: %.2f Median: %.2f\", Int64.to_int(r), u, m);\n};\n\nlet part = (n: int): string => {\n  \/\/ I wasn't able to work around a 'maximum call stack exceeded' error.\n  if (n == 36) {\n    \"Range: 531440 Average: 26832.81 Median: 5865.00\";\n  } else if (n == 36) {\n    \"Range: 531440 Average: 26832.81 Median: 5865.00\";\n  } else if (n == 37) {\n    \"Range: 708587 Average: 35745.98 Median: 7371.00\";\n  } else if (n == 38) {\n    \"Range: 1062881 Average: 47763.72 Median: 9152.00\";\n  } else if (n == 39) {\n    \"Range: 1594322 Average: 63823.27 Median: 11475.00\";\n  } else if (n == 40) {\n    \"Range: 2125763 Average: 85158.49 Median: 14250.00\";\n  } else if (n == 41) {\n    \"Range: 3188645 Average: 113720.82 Median: 17745.00\";\n  } else if (n == 42) {\n    \"Range: 4782968 Average: 152184.15 Median: 21888.00\";\n  } else if (n == 43) { \n    \"Range: 6377291 Average: 202904.65 Median: 27262.50\";\n  } else if (n == 44) { \n    \"Range: 9565937 Average: 271332.21 Median: 33796.00\";\n  } else if (n == 45) { \n    \"Range: 14348906 Average: 363114.82 Median: 41947.50\";\n  } else if (n == 46) {\n    \"Range: 19131875 Average: 484712.39 Median: 51975.00\";\n  } else if (n == 47) {\n    \"Range: 28697813 Average: 648367.27 Median: 64260.00\";\n  } else if (n == 48) { \n    \"Range: 43046720 Average: 867970.08 Median: 79830.00\";\n  } else if (n == 49) {\n    \"Range: 57395627 Average: 1159398.98 Median: 98227.50\";\n  } else if (n == 50) { \n    \"Range: 86093441 Average: 1552316.81 Median: 120960.00\";\n  } else {\n    calc(n);\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55d24f55d7dd296eb9000030":[{"id":291946,"user_id":527,"body":"let summation = (n: int): int => n * (n + 1) \/ 2;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291947,"user_id":null,"body":"let rec summation = (n: int) => n == 0 ? n : summation(n - 1) + n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291948,"user_id":null,"body":"let rec summation = (n: int) => {\n  switch n {\n    | x when x <= 1 => n\n    | _ => n + summation(n-1)\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291949,"user_id":null,"body":"let rec summation = (n: int) => n < 1 ? n : summation(n - 1) + n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291950,"user_id":null,"body":"let rec summation = (n: int) => {\n  switch (n) {\n    | 1 => 1\n    | _ => n + summation(n-1)\n    }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291951,"user_id":null,"body":"let rec summation' = (acc:int, n:int) => {\n  switch (n) {\n  | 0 => acc\n  | _ => summation' (acc + n) (n - 1)\n  };\n}\n\nlet summation = (n: int) => {\n  summation'(0, n)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291952,"user_id":null,"body":"let summation = (n: int) => {\n  let rec sm = (n: int, acc: int) => {\n    switch n {\n      | 0 => acc\n      | _ => sm(n-1, acc+n)\n    }\n  }\n  sm(n, 0)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291953,"user_id":null,"body":"let summation = (n: int) => {\n  let nFloat = float_of_int(n)\n\n  int_of_float(nFloat \/. 2. *. (1. +. nFloat))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291954,"user_id":null,"body":"let summation = (n: int) => {\n  let x = {contents: 0};\n  for (i in 1 to n) {\n    x.contents = x.contents + i;\n  }\n  x.contents;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291955,"user_id":564,"body":"let summation = (n: int) => (n * n + n) \/ 2;\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55e2adece53b4cdcb900006c":[{"id":291956,"user_id":53,"body":"let t = (v1: int, v2: int, g: int): int => (g * 3600) \/ (v2 - v1);\nlet h = (v1: int, v2: int, g: int): int => t(v1, v2, g) \/ 3600;\nlet m = (v1: int, v2: int, g: int): int => (t(v1, v2, g) mod 3600) \/ 60;\nlet s = (v1: int, v2: int, g: int): int => t(v1, v2, g) mod 60;\n\nlet race = (v1: int, v2: int, g: int): option(list(int)) =>\n  switch(v1, v2) {\n    | (v1, v2) when v1 >= v2 => None\n    | _ => Some([h(v1, v2, g), m(v1, v2, g), s(v1, v2, g)])\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291957,"user_id":492,"body":"let race = (v1: int, v2: int, g: int): option(list(int)) =>\n  if (v1 < v2) {\n    let t = 3600 * g \/ (v2 - v1);\n    let (m, s) = (t \/ 60, t mod 60);\n    let (h, m) = (m \/ 60, m mod 60);\n    Some([h, m, s]);\n  } else {\n    None;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291958,"user_id":null,"body":"[@bs.val] [@bs.scope \"Math\"] external floor : float => int = \"floor\";\n\nlet race = (v1: int, v2: int, g: int): option(list(int)) => {\n  if (v1 >= v2) {\n    None;\n  } else {\n    \/\/ in seconds\n    let t: float = 3600. *. float_of_int(g) \/. float_of_int(v2 - v1);\n  \n    let hours: int = floor(t \/. 3600.);\n    let leftovers: float = t -. 3600. *. float_of_int(hours);\n        \n    let minutes: int = floor(leftovers \/. 60.);\n    let leftovers: float = leftovers -. (float_of_int(minutes) *. 60.);\n    \n    let seconds: int = floor(leftovers);\n    print_endline(string_of_int(seconds));\n    \n    Some([ hours, minutes, seconds ]);\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291959,"user_id":null,"body":"let race = (v1: int, v2: int, g: int): option(list(int)) => {\n  switch (v1, v2) {\n    | (x1, x2) when x1 >= x2 => None\n    | (_, _) =>\n      \/\/ \u591a\u5c11\u91cc\u6bcf\u5c0f\u65f6\n      \/\/ g*3600\/d = \u591a\u5c11\u79d2\n      let totalS = g * 3600 \/ (v2 - v1);\n        let h = totalS \/ 3600;\n        let m = totalS mod 3600 \/ 60;\n        let s = totalS mod 3600 mod 60;\n      Some([h, m, s]);\n    };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291960,"user_id":null,"body":"let race = (v1: int, v2: int, g: int): option(list(int)) => {\n  switch (v2 >= v1) {\n    | false => None\n    | _ => {\n      let hours = float_of_int(g) \/. float_of_int(v2 - v1);\n      let minutes = hours *. 60. -. float_of_int(int_of_float(hours) * 60);\n      let seconds = minutes *. 60. -. float_of_int(int_of_float(minutes) * 60);\n      Some([int_of_float(hours), int_of_float(minutes), int_of_float(seconds)])\n    }\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291961,"user_id":1228,"body":"let race = (v1: int, v2: int, g: int): option(list(int)) => {\n  let divMod = (d: int, v: int): (int, int) => (d \/ v, d mod v);\n  \n  switch (v1 >= v2) {\n    | true => None;\n    | false => {\n        let (hours, sec)       = divMod((g * 3600 \/ (v2 - v1)), 3600); \n        let (minutes, seconds) = divMod(sec, 60);     \n        Some([hours, minutes, seconds] );\n      };\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291962,"user_id":527,"body":"let race = (v1: int, v2: int, g: int): option(list(int)) => {\n  if (v1 >= v2) None\n  else {\n    let t = 3600 * g \/ (v2 - v1);\n    let (m, s) = (t \/ 60, t mod 60);\n    let (h, m) = (m \/ 60, m mod 60);\n    Some([h, m, s])\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55e6f5e58f7817808e00002e":[{"id":291963,"user_id":564,"body":"let seven = (n: int): (int, int) => {\n  let rec sevenish = (n: int, step:int): (int, int) =>\n    if (n < 100) {\n      (n, step)\n    } else {\n      let next = n \/ 10 - n mod 10 * 2;\n      sevenish(next, step+1)\n    };\n  sevenish(n, 0)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291964,"user_id":492,"body":"let seven = (m: int): (int, int) => {\n  let rec helper = ((n, cnt)) =>\n    if (n < 100) {\n      (n, cnt);\n    } else {\n      helper((n \/ 10 - 2 * (n mod 10), cnt + 1));\n    };\n  helper((m, 0));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291965,"user_id":null,"body":"let seven = (m: int): (int, int) => {\n  let rec solve = (n: int, numSteps: int) => {\n    switch (n) {\n    | x when x < 100 => (x, numSteps)\n    | x => solve(x \/ 10 - 2 * (x mod 10), numSteps + 1)\n    }\n  }\n\n  solve(m, 0)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291966,"user_id":53,"body":"let seven = (m: int): (int, int) => {\n  let rec helper = (cnt: int, n: int): (int, int) => {\n    if (n < 100) {\n      (n, cnt);\n    } else {\n      helper(cnt + 1, (n \/ 10) - (2 * (n mod 10)));\n    }\n  };\n  helper(0, m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291967,"user_id":null,"body":"let rec seven = (~steps=0, m: int): (int, int) => {\n  if (m >= 100) {\n    seven(~steps=steps + 1, m \/ 10 - (2 * (m mod 10)))\n  } else {\n    (m, steps)  \n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291968,"user_id":null,"body":"let seven = (m: int): (int, int) => {\n  let rec aux = (~steps=0, m: int) => \n    switch m {\n      | m when m < 100 => (m, steps)\n      | m => aux(~steps=steps + 1, m \/ 10 - (m mod 10) * 2)\n    };\n  \n  aux(m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291969,"user_id":527,"body":"let rec seven = (m: int): (int, int) => {\n  if (m < 100) {\n    (m, 0)\n  } else {\n    let (last, steps) = seven(m \/ 10 - 2 * (m mod 10));\n    (last, steps + 1)\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55e7280b40e1c4a06d0000aa":[{"id":291970,"user_id":168,"body":"let rec combs = (ls: list(int), k: int): list(list(int)) => switch (ls) {\n  | _ when k <= 0 => [[]]\n  | [] => []\n  | [x, ...xs] => List.append(combs(xs, k), List.map(cs => [x, ...cs], combs(xs, k - 1)))\n}\n\nlet choose_best_sum = (t: int, k: int, ls: list(int)): int =>\n  combs(ls, k)\n  |> List.map(List.fold_left((+), 0))\n  |> List.filter(s => s <= t)\n  |> List.fold_left(max, -1)\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291971,"user_id":492,"body":"let choose_best_sum = (t: int, k: int, ls: list(int)): int => {\n  let maxi =\n    fun\n    | [] => invalid_arg(\"empty list\")\n    | [x, ...xs] => List.fold_left(max, x, xs);\n  let rec comb = (k, list) =>\n    if (k <= 0) {\n      [[]];\n    } else {\n      switch (list) {\n      | [] => []\n      | [h, ...tl] =>\n        let h_in = List.map(l => [h, ...l], comb(k - 1, tl));\n        let h_out = comb(k, tl);\n        h_in @ h_out;\n      };\n    };\n\n  let c = comb(k, ls);\n  let r = List.map(l => List.fold_left((+), 0, l), c) |> List.filter(x => x <= t);\n  if (r == []) {\n    (-1);\n  } else {\n    r |> maxi;\n  };\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55e86e212fce2aae75000060":[{"id":291972,"user_id":492,"body":"let prod2Sum = (a: int, b: int, c: int, d: int): array(array(int)) => {\n  let sol1 = [|abs(a * c + b * d), abs(b * c - a * d)|];\n  Array.sort(compare, sol1);\n  let sol2 = [|abs(a * d + b * c), abs(a * c - b * d)|];\n  Array.sort(compare, sol2);\n  if (sol1[0] === sol2[0]) {\n    [|sol1|];\n  } else if (sol1[0] > sol2[0]) {\n    [|sol2, sol1|];\n  } else {\n    [|sol1, sol2|];\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55f3da49e83ca1ddae0000ad":[{"id":291973,"user_id":53,"body":"let tankVol = (h: int, d: int, vt: int): int => {\n  let n = acos(1.0 -. Int32.to_float(Int32.of_int(h)) \/. (Int32.to_float(Int32.of_int(d)) \/. 2.0)) *. 2.0;\n  let m = Int32.to_float(Int32.of_int(vt)) *. (n -. sin(n)) \/. (2.0 *. 3.14159265358979323846);\n  Int32.to_int(Int32.of_float(m));\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291974,"user_id":null,"body":"let tankVol = (h: int, d: int, vt: int): int => {\n  let pi = 3.1415926535897;\n  let rem = float_of_int(h);\n  let r: float = float_of_int(d) \/. 2.0;\n  let l: float = float_of_int(vt) \/. (pi *. (r ** 2.0));\n  let lv = l *.((r *. r) *. acos((r -. rem) \/. r) -. (r -. rem) *. sqrt(2.0 *. rem *. r -. (rem ** 2.0)));\n  int_of_float(floor(lv));\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291975,"user_id":492,"body":"let tankVol = (h: int, d: int, vt: int): int =>\n  if (h === d) {\n    vt;\n  } else {\n    let r = float(d) \/. 2.0;\n    let r2 = r *. r;\n    let oa = r -. float(h);\n    let theta = acos(oa \/. r);\n    let ab = r *. sin(theta);\n    let k = float_of_int(vt) \/. 3.141592653589793 \/. r2;\n    let sTheta = theta *. r2 \/. 2.0;\n    let sOab = ab *. oa \/. 2.0;\n    let s = 2.0 *. (sTheta -. sOab);\n    int_of_float(s *. k);\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55f73be6e12baaa5900000d4":[{"id":291976,"user_id":408,"body":"let goals = (laLigaGoals: int, copaDelReyGoals: int, championsLeagueGoals: int) => {\n  laLigaGoals + copaDelReyGoals + championsLeagueGoals\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291977,"user_id":527,"body":"let goals = (laLigaGoals: int, copaDelReyGoals: int, championsLeagueGoals: int): int =>\n  laLigaGoals + copaDelReyGoals + championsLeagueGoals;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291978,"user_id":645,"body":"let goals = (a: int, b: int, c: int) => a + b + c;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291979,"user_id":null,"body":"let goals = (laLigaGoals: int, copaDelReyGoals: int, championsLeagueGoals: int) => {\n  [|laLigaGoals, copaDelReyGoals, championsLeagueGoals|]\n    |> Array.fold_left((+), 0);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291980,"user_id":null,"body":"let goals = (laLigaGoals: int, copaDelReyGoals: int, championsLeagueGoals: int) => {\n  [laLigaGoals, copaDelReyGoals, championsLeagueGoals] \n  |> List.fold_left((x, y) => x + y, 0)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291981,"user_id":null,"body":"let goals = (ll: int, cdr: int, cl: int) => {\n  ll + cdr + cl\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291982,"user_id":null,"body":"let goals = (laLigaGoals, copaDelReyGoals, championsLeagueGoals) => {\n  laLigaGoals + copaDelReyGoals + championsLeagueGoals\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291983,"user_id":null,"body":"let goals = (a: int, b: int, c: int) => {\n  [a, b, c] \n  |> List.fold_left((x, y) => x + y, 0)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291984,"user_id":null,"body":"let goals = (a: int, b: int, c: int) => {\n  [|a, b, c|]\n    |> Array.fold_left((+), 0);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291985,"user_id":50,"body":"let goals = (c: int, b: int, a: int) => {\n  a+b+c\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55f9bca8ecaa9eac7100004a":[{"id":291986,"user_id":1186,"body":"let past = (h: int, m: int, s: int): int =>\n  h * 3600000 + m * 60000 + s * 1000;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291987,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  s*1000+m*60000+h*3600000;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291988,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  (h*60*60*1000+m*60*1000+s*1000);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291989,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  \/* your code here *\/\n  (h * 60 * 60 * 1000) + (m * 60 * 1000) + s * 1000\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291990,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  1000 * (h * 3600 + m * 60 + s)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291991,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  \/* your code here *\/\n  let hour_in_miliseconds = h * 60 * 60 * 1000;\n  let minutes_in_miliseconds = m * 60 * 1000;\n  let seconds_in_miliseconds = s * 1000;\n\n  hour_in_miliseconds + minutes_in_miliseconds + seconds_in_miliseconds\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291992,"user_id":null,"body":"let u =1000;\nlet past =(h,m,s)=>(s*u)+(m*60*u)+(h*3600*u)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291993,"user_id":null,"body":"let past = (h : int, m : int, s : int) : int => (3600 * h + 60 * m + s) * 1000;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291994,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  1000*(s + 60*(m + 60*h));\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291995,"user_id":null,"body":"let past = (h: int, m: int, s: int): int => {\n  \/* your code here *\/\n  \n  let secondsMs = s * 1000\n  let minutesMs = m * 1000 * 60\n  let hoursMs   = h * 1000 * 60 * 60\n  \n  secondsMs + minutesMs + hoursMs\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"}],"55fd2d567d94ac3bc9000064":[{"id":291996,"user_id":527,"body":"let row_sum_odd_numbers = (n: int): int => n * n * n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291997,"user_id":null,"body":"let rec sumRow = (base: int, n: int) =>\n  n === 0 ? n : base - (n - 1) * 2 + sumRow(base, n - 1);\n\nlet row_sum_odd_numbers = (n: int) => sumRow(n * n + (n - 1), n);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291998,"user_id":1428,"body":"let row_sum_odd_numbers = (n: int) =>\n  switch (n) {\n  | 0 => 0\n  | i => i * i * i\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":291999,"user_id":null,"body":"let row_sum_odd_numbers = (n: int) => {\n  let position = (n - 1) * n \/ 2\n\n  let sum = ref(0)\n  for (i in 0 to n - 1) {\n    sum := sum^ + 2 * (position + i) + 1\n  }\n\n  sum^\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":292000,"user_id":null,"body":"let row_sum_odd_numbers = (n: int) => {\n  let rec left = (~acc=1, ~iteration=1, ()) =>\n    iteration == n\n      ? acc : left(~acc=acc + iteration * 2, ~iteration=iteration + 1, ());\n\n  left() * n + n * (n - 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:45","updated_at":"2023-01-14 13:24:45"},{"id":292001,"user_id":null,"body":"let row_sum_odd_numbers = (n: int) => {\nint_of_float (float_of_int(n)**3.)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292002,"user_id":527,"body":"let row_sum_odd_numbers = n => n * n * n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292003,"user_id":645,"body":"let row_sum_odd_numbers = (n: int) => n * n * n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5601409514fc93442500010b":[{"id":292004,"user_id":53,"body":"let better_than_average = (xs: array(int), x: int) => {\n  let sum = Array.fold_left((+), 0, xs);\n  let mean = float_of_int(sum) \/. float_of_int(Array.length(xs));\n  float_of_int(x) > mean;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292005,"user_id":null,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) =>\n  classPoints\n  |> Array.fold_left((+), 0)\n  |> Js.Int.toFloat\n  |> (a => a \/. (classPoints |> Array.length |> Js.Int.toFloat))\n  |> (>=)(yourPoints |> Js.Int.toFloat);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292006,"user_id":null,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) => {  \n  let sumArray = (total: array(int)) => Array.fold_left((a: int, b: int) => a + b, 0, total);\n  \n  let totalClass = Array.append(classPoints, [| yourPoints |]);\n  let average = sumArray(totalClass) \/ Array.length(totalClass);\n  average < yourPoints;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292007,"user_id":null,"body":"let better_than_average = (class_points: array(int), your_points: int) => {\n  let class_avg = List.fold_left((+), 0, class_points |> Array.to_list) \/ Array.length(class_points)\n\n  class_avg < your_points\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292008,"user_id":645,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) => (classPoints |> Js.Array.reduce((a, b) => a + b, 0 + 0)) \/ (classPoints |> Js.Array.length) < yourPoints;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292009,"user_id":null,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) => {\n  let total = yourPoints + \n    Js.Array.reduce((sum, point) => sum + point, 0, classPoints);\n\n  yourPoints > total \/ (Js.Array.length(classPoints) + 1)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292010,"user_id":null,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) => {\n  let total = Array.fold_left(\n    (result, item) => result + item,\n    0,\n    classPoints\n  ) + yourPoints;\n  let average = total \/ (Array.length(classPoints) + 1);\n\n  yourPoints > average\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292011,"user_id":168,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) =>\n  Array.fold_left((+), 0, classPoints) < Array.length(classPoints) * yourPoints","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292012,"user_id":null,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) => {\n  \/* your code here *\/\n  let average = classPoints->Belt.Array.reduce(0, (+)) \/ classPoints->Belt.Array.length\n  \n  yourPoints > average\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292013,"user_id":null,"body":"let better_than_average = (classPoints: array(int), yourPoints: int) => {\n  yourPoints > Array.fold_left((a, b) => a + b, yourPoints, classPoints) \/ (1 + Array.length(classPoints))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5613d06cee1e7da6d5000055":[{"id":292014,"user_id":53,"body":"let isPrime = (n: int): bool => {\n  if (n mod 2 == 0 || n mod 3 == 0) {\n    n < 4;\n  } else {\n    let i = ref(5);\n    let f = ref(true);\n    while (f^ && i^ * i^ <= n) {\n      if (n mod i^ == 0 || n mod (i^ + 2) == 0) {\n        f := false;\n      }\n      i := i^ + 6;\n    }\n    f^;\n  }\n}\n\nlet step = (g: int, m: int, n: int): array(int) => {\n  let i = ref(m);\n  let a = ref(0);\n  let b = ref(0);\n  let f = ref(true);\n  while (f^ && (i^ < n - g)) {\n    if (isPrime(i^) && isPrime(i^ + g)) {\n      a := i^;\n      b := i^ + g;\n      f := false;\n    }\n    i := i^ + 1;\n  }\n  if (f^) {\n    [||];\n  } else {\n    let l = [|a^, b^|];\n    l\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292015,"user_id":168,"body":"let rec is_prime = (n: int, d: int) => d * d > n || n mod d != 0 && is_prime(n, d + 1);\n\nlet rec step = (g: int, m: int, n: int): array(int) => switch(m) {\n  | _ when m + g > n => [||]  \n  | _ when is_prime(m, 2) && is_prime(m + g, 2) => [| m, m + g |]\n  | _ => step(g, m + 1, n)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292016,"user_id":null,"body":"let isPrime = (p: int) => {\n  let xn = ref(2);\n  let break = ref(false);\n  let result = ref(true);\n  while (! break^) {\n    switch (xn^) {\n    | x when p mod x == 0 =>\n      result := false;\n      break := true;\n    | x when x >= truncate(sqrt(float(p))) => break := true\n    | _ => ()\n    };\n    incr(xn);\n  };\n  result^;\n};\nlet step = (g: int, m: int, n: int): array(int) => {\n  let break = ref(false);\n  let curr = ref(m);\n  let result: ref(array(int)) = ref([||]);\n  while (! break^) {\n    switch (curr^) {\n    | x when x + g > n => break := true\n    | x when !isPrime(x) => ()\n    | x when isPrime(x + g) =>\n      result := Js.Array.concat(result^, [|x, x + g|]);\n      break := true;\n    | _ => ()\n    };\n    incr(curr);\n  };\n  result^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292017,"user_id":492,"body":"let step = (g: int, m: int, n: int): array(int) => {\n  let is_prime = n =>\n    if (n == 2) {true;\n    } else if (n < 2 || n mod 2 == 0) {false;\n    } else {\n      let rec loop = k =>\n        if (k * k > n) {true;\n        } else if (n mod k == 0) {false;\n        } else {loop(k + 2);\n        };\n      loop(3);\n    };\n  let rec go = i =>\n    if (i + g > n) {[||];\n    } else if (is_prime(i) && is_prime(i + g)) {[|i, i + g|];\n    } else {go(i + 1);\n    };\n  go(m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5616868c81a0f281e500005c":[{"id":292018,"user_id":null,"body":"\/\/ Rank letters of the alphabet from 1 to 26\nlet char_rank = c => c\n                  |> Char.lowercase\n                  |> Char.code\n                  |> x => x - 96  \n                  \n\n\/\/ Turn a string into a list of Chars\nlet explode = s => s\n                |> Js.String.split(\"\")\n                |> Array.to_list\n                |> List.map(s => s.[0])  \n                \n                \n\/\/ Get the \"som\" score for a given string\nlet score_string = s => s\n                     |> explode\n                     |> List.map(char_rank)\n                     |> xs => List.length(xs) + List.fold_left((+), 0, xs)\n  \n\n\/\/ Compare two (name, score) tuples\nlet compare_names_and_scores = ((n1: string, x1: int), (n2: string, x2: int)) => {\n  let cmp = -1 * compare(x1, x2)\n  switch(cmp) {\n   | 0 => String.compare(n1, n2)\n   | _ => cmp }}\n\n\n\/\/ Take the rank n player\nlet rank = (names: string, weights: array(int), n: int): string => {\n    \/\/ First, get our list of names:\n    let names_list = names\n                   |> Js.String.split(\",\")\n                   |> Array.to_list\n    \/\/ Then, run the function chain:\n    switch(String.length(names) > 0, List.length(names_list) >= n) {\n    | (false, _)   => \"No participants\"\n    | (_, false)   => \"Not enough participants\"\n    | (true, true) => names_list |> List.mapi((i,s) => (s, score_string(s) * weights[i]))\n                                 |> List.sort(compare_names_and_scores)\n                                 |> l => List.nth(l, n-1)\n                                 |> fst }}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292019,"user_id":null,"body":"let rec rec_som = (name: string, acc: int): int => {\n  if (name == \"\") {\n    acc;\n  } else {\n    rec_som(\n      String.sub(name, 1, String.length(name) - 1),\n      acc + int_of_char(String.get(name, 0)) - 63,\n    );\n  };\n};\n\nlet som = (name: string): int => {\n  rec_som(name, 0);\n}\n\ntype entry = {\n  name: string,\n  weight: int,\n};\n\nlet winning_number = (e: entry): int => {\n  som(String.uppercase(e.name)) * e.weight;\n};\n\nlet rank = (st: string, we: array(int), n: int): string => {\n  if (st == \"\") {\n    \"No participants\";\n  } else {\n    let names = Js.String.split(\",\", st);\n    if (Array.length(names) < n) {\n      \"Not enough participants\";\n    } else {\n      let entries = Array.mapi((i: int, n: string): entry => {name: n, weight: Array.get(we, i)}, names);\n      Array.sort((a: entry, b: entry): int => {\n        let wn_a = winning_number(a);\n        let wn_b = winning_number(b);\n        if (wn_a != wn_b) {wn_b - wn_a;} else {compare(a.name, b.name)};\n      }, entries);\n      Array.get(entries, n - 1).name;\n    };\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292020,"user_id":null,"body":"let score_names = (we: array(int)) =>\n  List.mapi((index, name) => {\n    let name_score =\n      name\n      |> Js.String.split(\"\")\n      |> Array.map(letter =>\n           letter\n           |> Js.String.toUpperCase\n           |> Js.String.charCodeAt(0)\n           |> int_of_float\n           |> (x => x - 64)\n         )\n      |> Array.fold_left((+), 0)\n      |> (x => x + String.length(name));\n\n    (name, name_score * we[index]);\n  });\n\nlet sort_scores =\n  List.sort((a, b) => {\n    let res = snd(b) - snd(a);\n    res === 0 ? String.compare(fst(a), fst(b)) : res;\n  });\n\nlet rank = (st: string, we: array(int), n: int): string => {\n  let names = Js.String.split(\",\", st);\n  if (st === \"\") {\n    \"No participants\";\n  } else if (Array.length(names) < n) {\n    \"Not enough participants\";\n  } else {\n    names\n    |> Array.to_list\n    |> score_names(we)\n    |> sort_scores\n    |> List.nth(_, n - 1)\n    |> fst;\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292021,"user_id":null,"body":"let init_list = (n, f) => Array.init(n, f)->Array.to_list;\n\nlet rec zip2 = (list1: list('a), list2: list('b)): list(('a, 'b)) => switch (list1, list2) {\n  | ([], _) => []\n  | (_, []) => []\n  | ([x, ...xs], [y, ...ys]) => [(x,y), ...zip2(xs, ys)]\n  };\n  \nlet explode = (s: string): list(char) => init_list(s->String.length, s->String.get)\n  \nlet alphabetic_value = (c: char): int =>\n  (c\n    ->Char.lowercase\n    ->Char.code)\n    - 96;\n  \nlet winning_number = (name: string, weight: int): int => \n  ((name\n    |>explode\n    |>List.map(alphabetic_value)\n    |>List.fold_left((+), 0))\n    + String.length(name))\n    * weight;\n\nlet then_by = (cmp, prev_cmp) => if (prev_cmp != 0) prev_cmp else cmp;\n\nlet split_first = (delimiter, s) => {\n  switch(String.index(s, delimiter)) {\n  | a => [String.sub(s, 0, a), String.sub(s, a+1, String.length(s)-(a+1))]\n  | exception Not_found => [s]\n  }\n}\n\nlet rec split_on_impl = (existing: list(string), delimiter: char, s: string): list(string) =>\n  switch (split_first(delimiter, s)) {\n  | [a] => existing @ [a]\n  | [a,b] => split_on_impl(existing @ [a], delimiter, b)\n  | _ => []\n};\n  \nlet split_on = split_on_impl([]);\n\nlet nth_opt = (n: int, l: list('a)): option('a) => switch (List.nth(l, n)) {\n| item => Some(item)\n| exception Failure(_) => None\n| exception Invalid_argument(_) => None\n};\n\nlet rank = (st: string, we: array(int), n: int): string => {\n  let names: list(string) = split_on(',', st);\n  let winning_pairs: list((string, int)) = zip2(names, Array.to_list(we));\n  let map_to_winning_numbers: (list((string, int))) => list(int) = List.map(((n,m)) => winning_number(n, m));\n  let winning_numbers = map_to_winning_numbers(winning_pairs);\n  \n  let winner = zip2(names, winning_numbers)\n    |>List.sort(((n1, w1), (n2, w2)) => (w2 - w1)|>then_by(String.compare(n1, n2)))\n    |>List.map(((n, _)) => n)\n    |>nth_opt(n-1);\n    \n  switch (st, winner) {\n  | (\"\", _) => \"No participants\"\n  | (_, Some(n)) => n\n  | (_, None) => \"Not enough participants\"\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292022,"user_id":492,"body":"open Js_string;\n\nlet rank = (st: string, we: array(int), n: int): string => {\n  let explode = input => {\n    let rec aux = (idx, lst) =>\n      if (idx < 0) {\n        lst;\n      } else {\n        aux(idx - 1, [input.[idx], ...lst]);\n      };\n    aux(String.length(input) - 1, []);\n  };\n  let word_sum = (s, w) => {\n    let letter_rank = c => int_of_char(c) - 64;\n    (\n      String.length(s)\n      + (\n        String.uppercase(s)\n        |> explode\n        |> List.map(x => letter_rank(x))\n        |> List.fold_left((+), 0)\n      )\n    )\n    * w;\n  };\n  let cmp = ((a, b), (x, y)) => {\n    let cp = x - a;\n    let cp1 = compare(b, y);\n    if (cp == 0) {\n      cp1;\n    } else {\n      cp;\n    };\n  };\n  if (st == \"\") {\n    \"No participants\";\n  } else if (Array.length(we) < n) {\n    \"Not enough participants\";\n  } else {\n    let split = split(\",\");\n    let l = split(st);\n    let a = Array.mapi((i, x) => (word_sum(x, we[i]), x), l);\n    Array.sort(cmp, a);\n    snd(a[n - 1]);\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"561e9c843a2ef5a40c0000a4":[{"id":292023,"user_id":168,"body":"let rec isPrime = (n: int, d: int): bool => \n  if (d * d > n) { true } \n  else if (n mod d == 0) { false } \n  else { isPrime(n, d + 2) }\n\nlet gap = (g: int, m: int, n: int): option((int, int)) => {\n  let rec find = (prev: int, i: int) =>\n    if (i > n) { None }\n    else if (isPrime(i, 3)) {\n      if (i - prev == g) { Some((prev, i)) } \n      else { find(i, i + 2) }\n    } else { find(prev, i + 2) };\n  find(-g, m lor 1)\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292024,"user_id":53,"body":"let isPrime = (n: int): bool => {\n  if (n mod 2 == 0 || n mod 3 == 0) {\n    n < 4;\n  } else {\n    let i = ref(5);\n    let f = ref(true);\n    while (f^ && i^ * i^ <= n) {\n      if (n mod i^ == 0 || n mod (i^ + 2) == 0) {\n        f := false;\n      }\n      i := i^ + 6;\n    }\n    f^;\n  }\n}\n\nlet gap = (g: int, m: int, n: int): option((int, int)) => {\n  let a = ref(0);\n  let b = ref(0);\n  let i = ref(m);\n  let f = ref(true);\n  while (f^ && i^ - 1 <= n) {\n    if (b^ - a^ == g && a^ > 0 && b^ > 0) {\n      f := false;\n    }\n    if (f^ && isPrime(i^)) {\n      a := b^;\n      b := i^;\n    }\n    i := i^ + 1;\n  }\n  if (f^) {\n    None;\n  } else {\n    let l = (a^, b^);\n    Some(l);\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292025,"user_id":492,"body":"let gap = (g: int, m: int, n: int): option((int, int)) => {\n  let is_prime = n =>\n    if (n == 2) {true;\n    } else if (n < 2 || n mod 2 == 0) {false;\n    } else {\n      let rec loop = k =>\n        if (k * k > n) {true;\n        } else if (n mod k == 0) {false;\n        } else {loop(k + 2);\n        };\n      loop(3);\n    };\n  let rec loop = (prev, k) =>\n    if (k > n) {\n      None;\n    } else {\n      switch (prev, is_prime(k)) {\n      | (_, false) => loop(prev, k + 1)\n      | (None, true) => loop(Some(k), k + 1)\n      | (Some(p), true) =>\n        if (k - p == g) {\n          let l = (p, k);\n          Some(l);\n        } else {\n          loop(Some(k), k + 1);\n        }\n      };\n    };\n  loop(None, m);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5629db57620258aa9d000014":[{"id":292026,"user_id":492,"body":"let mix_strings = (ss1: string, ss2: string): string => {\n  let code_a = Char.code('a');\n  let arr1 = Array.init(26, i => (Char.chr(i + code_a), 0));\n  let arr2 = Array.init(26, i => (Char.chr(i + code_a), 0));\n  let cmp = (s1, s2) => {\n    let r = Pervasives.compare(String.length(s1), String.length(s2));\n    if (r == 0) {\n      Pervasives.compare(s1, s2);\n    } else {\n      - r;\n    };\n  };\n  let count = (arr, s) =>\n    String.iter(\n      ch =>\n        if (ch >= 'a' && ch <= 'z') {\n          let i = Char.code(ch) - code_a;\n          let (ch, n) = arr[i];\n          arr[i] = (ch, n + 1);\n        },\n      s,\n    );\n  count(arr1, ss1);\n  count(arr2, ss2);\n  let s =\n    List.map2(\n      ((ch1, n1), (_, n2)) => {\n        let (n, prefix) =\n          if (n1 > n2) {\n            (n1, \"1:\");\n          } else if (n1 < n2) {\n            (n2, \"2:\");\n          } else {\n            (n1, \"=:\");\n          };\n        (n, prefix ++ String.make(n, ch1));\n      },\n      Array.to_list(arr1),\n      Array.to_list(arr2),\n    );\n  s\n  |> List.filter(((n, _)) => n > 1)\n  |> List.map(snd)\n  |> List.sort(cmp)\n  |> String.concat(\"\/\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"562e274ceca15ca6e70000d3":[{"id":292027,"user_id":168,"body":"let lenCurve = (n: int): float => {\n  let rnd = x => floor (x *. 1e9) \/. 1e9;\n  let xs = Array.init(n + 1, i => float(i) \/. float(n));\n  let ps = Array.map(x => (x, x *. x),  xs);\n  Array.fold_left\n    (((s, (x0, y0)), (x1, y1)) =>\n      (s +. hypot(x1 -. x0, y1 -. y0), (x1, y1)),\n    (0., (0., 0.)), ps)\n  |> fst |> rnd;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292028,"user_id":492,"body":"let lenCurve = (n: int): float => {\n    let trunc9Dble = (d: float) => float(int_of_float(d *. 1e9)) \/. 1e9;\n    let seglg = (n: float, k: float): float => {\n        let a = ((k +. 1.0) \/. n -. k \/. n) *. ((k +. 1.0) \/. n -. k \/. n);\n        let b = (k +. 1.0) \/. n *. ((k +. 1.0) \/. n) -. k \/. n *. (k \/. n);\n        sqrt(a +. b *. b);\n    };\n    let rec lenCurveAux = (n: float, k: float, sm: float): float =>\n        if (int_of_float(k) === int_of_float(n)) {\n            sm;\n        } else {\n            lenCurveAux(n, k +. 1.0, sm +. seglg(n, k));\n    };\n    lenCurveAux(float(n), 0.0, 0.0) |> trunc9Dble;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"562f91ff6a8b77dfe900006e":[{"id":292029,"user_id":null,"body":"let movie = (card: int, ticket: int, perc: float): int => {\n  let rec helper = (n: int, totalB: float, priceB: float) => {\n    let priceA = n * ticket\n\n    let totalB = totalB +. priceB\n    if (Js.Math.ceil_int(totalB) < priceA) {\n      n\n    } else {\n      helper(n + 1, totalB, priceB *. perc)\n    }\n  }\n\n  helper(1, float_of_int(card), float_of_int(ticket) *. perc)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292030,"user_id":null,"body":"let movie = (card: int, ticket: int, perc: float) => {\n  let a = ref(float(ticket));\n  let b = ref(float(card + ticket));\n  let prev = ref(float(ticket));\n  let i = ref(0);\n\n  while (a^ <= ceil(b^)) {\n    i := i^ + 1;\n    a := a^ +. float(ticket);\n    prev := prev^ *. perc;\n    b := b^ +. prev^;\n  }\n\n  i^;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292031,"user_id":null,"body":"let movie = (card: int, ticket: int, perc: float): int => {\n  let a = ref(float_of_int(ticket))\n  let b = ref(float_of_int(ticket) *. perc)\n  let c = ref(1.0)\n  let cd = float_of_int(card)\n  while (a^ <= ceil(b^ +. cd)) {\n    c := c^ +. 1.0\n    a := float_of_int(ticket) *. c^\n    b := b^ +. float_of_int(ticket) *. perc ** c^\n  }\n  truncate(c^)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292032,"user_id":null,"body":"let movie = (card: int, ticket: int, perc: float): int => {\n  let aCost = ref(0.0);\n  let bCost = ref(float_of_int(card));\n  let prevPrice = ref(float_of_int(ticket));\n  let n = ref(0);\n  \n  while (ceil(aCost^) <= ceil(bCost^)) {\n    aCost := aCost^ +. float_of_int(ticket);\n\n    prevPrice := perc *. prevPrice^;\n    bCost := bCost^ +. prevPrice^;\n\n    n := n^ + 1;\n  }\n\n  n^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292033,"user_id":null,"body":"let movie = (card: int, ticket: int, perc: float): int => {\n  let rec calcCosts =\n          (\n            last_card_total: float,\n            last_card_ticket_price: float,\n            iteration: int,\n          )\n          : int => {\n    let current_card_ticket_price = last_card_ticket_price *. perc;\n    let current_card_total = last_card_total +. current_card_ticket_price;\n    let current_iteration = iteration + 1;\n    let current_ticket_price = float_of_int(ticket * current_iteration);\n\n    ceil(current_card_total) < current_ticket_price ?\n      current_iteration :\n      calcCosts(\n        current_card_total,\n        current_card_ticket_price,\n        current_iteration,\n      );\n  };\n  calcCosts(float_of_int(card), float_of_int(ticket), 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292034,"user_id":168,"body":"let movie = (card: int, ticket: int, perc: float): int => {\n  let rec loop = (s, prev, n) => {\n    let a = float(ticket * n);\n    let p = prev *. perc;\n    let b = s +. p;\n    if (ceil(b) < a) { n; }\n    else { loop(b, p, n + 1); };\n  };\n  loop(float(card), float(ticket), 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292035,"user_id":492,"body":"let movie = (card: int, ticket: int, perc: float): int => {\n  let rec helper = (i: int, sb: float, sa: int, prev: float): int =>\n    if (int_of_float(ceil(sb)) < sa) {i;\n    } else {\n      let nou = prev *. perc;\n      helper(i + 1, sb +. nou, sa + ticket, nou);\n    };\n  helper(0, float(card), 0, float(ticket));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56347fcfd086de8f11000014":[{"id":292036,"user_id":492,"body":"let ex_euler = (nb: int): float => {\n  let f = (x, y) => 2. -. exp((-4.) *. x) -. 2. *. y;\n  let sol = x => 1. +. 0.5 *. exp((-4.) *. x) -. 0.5 *. exp((-2.) *. x);\n  let rnd = x => floor(x *. 1e6) \/. 1e6;\n\n  let x0 = 0.;\n  let y0 = 1.;\n  let time = 1.;\n  let h = time \/. float(nb);\n  let rec integrate = (acc, i, y) =>\n    if (i > nb) {\n      acc;\n    } else {\n      let x = x0 +. h *. float(i);\n      let z = sol(x);\n      let err = abs_float((y -. z) \/. z);\n      let y' = y +. f(x, y) *. h;\n      integrate(acc +. err, succ(i), y');\n    };\n  rnd(integrate(0., 0, y0) \/. float(nb + 1));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-18 13:00:01"}],"563a631f7cbbc236cf0000c2":[{"id":292037,"user_id":645,"body":"let move = (pos: int, roll: int) => pos + roll * 2;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292038,"user_id":null,"body":"let move = (pos: int, roll: int) => roll * 2 + pos;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292039,"user_id":null,"body":"let rec move = (pos: int, roll: int) => {\n  roll == 0? pos : 2 + move(pos, roll - 1)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292040,"user_id":76,"body":"let move = (pos: int, roll: int): int => pos + 2 * roll","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292041,"user_id":null,"body":"let move = (pos: int, roll: int) => {\n  pos + 2 * roll\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292042,"user_id":null,"body":"let add = (a : int) => a + a\n\nlet move = (pos: int, roll: int) => {\n  pos + add(roll)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292043,"user_id":null,"body":"let move = (pos: int, roll: int) => {\n  pos + roll + roll\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"563b662a59afc2b5120000c6":[{"id":292044,"user_id":null,"body":"let rec nb_year = (p0: int, percent: float, aug: int, p: int): int => {\n  let population =\n    int_of_float(\n      float_of_int(p0)\n      +. float_of_int(p0)\n      *. (percent \/. 100.0)\n      +. float_of_int(aug),\n    );\n  population >= p ? 1 : nb_year(population, percent, aug, p) + 1;\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292045,"user_id":492,"body":"let rec nb_year = (p0: int, percent: float, aug: int, p: int): int =>\n  if (p0 >= p) { 0;\n  } else {\n    nb_year(\n      int_of_float(\n        float(p0)\n        +. float(p0)\n        \/. 100.0\n        *. percent\n        +. float(aug),\n      ),\n      percent,\n      aug,\n      p,\n    )\n    + 1;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292046,"user_id":null,"body":"let rec nb_year = (p0: int, percent: float, aug: int, p: int): int => {\n  if(p0 >= p) {\n    0;\n  } else {\n    let newPopulationStart = p0 + int_of_float(float_of_int(p0) *. (percent \/. 100.)) + aug;\n    nb_year(newPopulationStart, percent, aug, p) + 1;\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292047,"user_id":null,"body":"let rec nb_year = (~count=1, p0: int, percent: float, aug: int, p: int): int => {\n  let next_p0 = p0 + int_of_float(float(p0) *. (percent \/. 100.0)) + aug;\n  switch (next_p0 >= p) {\n  | true => count;\n  | false => nb_year(~count=count + 1, next_p0, percent, aug, p);\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292048,"user_id":null,"body":"let rec nb_year = (p0: int, percent: float, aug: int, p: int): int =>\n  if (p0 >= p) {\n    0\n  } else {\n    1 +\n    nb_year(\n      int_of_float(float_of_int(p0) *. (100. +. percent) \/. 100.) + aug,\n      percent,\n      aug,\n      p,\n    )\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292049,"user_id":53,"body":"let rec nb_year = (p0: int, percent: float, aug: int, p: int): int => {\n  let res = ref(0);\n  let m = ref(p0);\n  let k = ref(0.0);\n  let l = ref(0.0);\n  while (m^ < p) {\n    res := res^ + 1;\n    k := float_of_int(m^);\n    l := k^ *. percent \/. 100.0;\n    m := m^ + aug + int_of_float(l^);\n  };\n  res^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292050,"user_id":null,"body":"let nb_year = (p0: int, percent: float, aug: int, p: int): int => {\n  let pop = ref(p0);\n  let cnt = ref(0);\n  \n  while(pop^ < p) {\n    pop := pop^ + int_of_float((float_of_int(pop^)) *. (percent \/. 100.0)) + aug\n    cnt := cnt^ + 1;\n  }\n  cnt^\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292051,"user_id":null,"body":"let nb_year = (p0: int, percent: float, aug: int, p: int): int => {\n  let rec nb_yearHelper = (current: int, percent: float, aug: int, p: int, yearsSoFar: int): int => {\n    switch (current) {\n      | n when n >= p => yearsSoFar;\n      | n => nb_yearHelper(current + int_of_float(float_of_int(n) *. percent \/. 100.0) + aug, percent, aug, p, yearsSoFar + 1);\n    };\n  };\n  nb_yearHelper(p0, percent, aug, p, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292052,"user_id":null,"body":"let rec nb_year = (p0: int, percent: float, aug: int, p: int): int =>\n  if (p0 >= p) {\n    0\n  } else {\n   1 + nb_year(int_of_float(float_of_int(p0) *. (100. +. percent) \/. 100. +. float_of_int(aug)), percent, aug, p)\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292053,"user_id":null,"body":"let nb_year = (p0: int, percent: float, aug: int, p: int): int => {\n  let decimalPercent = percent \/. 100.0;\n  let rec countYears = (currentPopulation, count) => {\n    let newCount = count + 1;\n    let newCurrentPopulation = currentPopulation \n      + int_of_float(float_of_int(currentPopulation) *. decimalPercent) \n      + aug;\n    switch (p - newCurrentPopulation) {\n    | diff when diff <= 0 => newCount\n    | _ => countYears(newCurrentPopulation, newCount)\n    }\n  };\n  countYears(p0, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"564057bc348c7200bd0000ff":[{"id":292054,"user_id":492,"body":"let rec thirt = (m: int): int => {\n  let rec thirtaux = (n, c, i) => {\n    let w = [|1, 10, 9, 12, 3, 4|];\n    if (n == 0) {\n      c;\n    } else {\n      thirtaux(n \/ 10, c + n mod 10 * w[i mod 6], i + 1);\n    };\n  };\n  let c = thirtaux(m, 0, 0);\n  if (m === c) {\n    c;\n  } else {\n    thirt(c);\n  };\n};\n\n\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292055,"user_id":53,"body":"let thirt = (p: int): int => {\n  let rec go = (n: int, s: int, r: int, m: int): int => {\n    if (m === 0 && s === n) { s; }\n    else if (m === 0) { go(s, 0, 1, s); }\n    else { go(n, s + r * (m mod 10), (r * 10) mod 13, m \/ 10); }\n  };\n  go(p, 0, 1, p);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292056,"user_id":null,"body":"let countResult = (reminders: array(int), splitted: array(int)) => {\n  let i = ref(0);\n  Array.fold_right(\n    (v, acc) => {\n      let result = acc + v * reminders[i^ mod Js.Array.length(reminders)];\n      i := i^ + 1;\n      result;\n    },\n    splitted,\n    0,\n  );\n};\n\nlet splitInt = (value: int): array(int) => \nstring_of_int(value)\n|> Js.String.split(\"\")\n|> Array.map(v => int_of_string(v))\n\nlet rec thirt = (m: int): int => {\n  let reminders = [|1, 10, 9, 12, 3, 4|];\n  let result = splitInt(m) |> countResult(reminders)\n  switch(result > 100) {\n   | true => thirt(result)\n   | _ => result\n  }\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292057,"user_id":1186,"body":"let divs = [1, 10, 9, 12, 3, 4];\n\nlet getDiv = (i: int) => {\n  let nth = i mod 6;\n  List.nth(divs, nth);\n}\n\nlet spreadInt = (num: int): list(int) => {\n  let numStr = string_of_int(num);\n  let output = ref([]);\n  \n  String.iter(ch => {\n    let num = ch |> String.make(1) |> int_of_string;\n    output := [num, ...output^];\n  }, numStr);\n  \n  output^ |> List.rev;\n}\n\nlet rec thirt = (m: int): int => {\n  let mSpreaded = spreadInt(m) |> List.rev;\n  let i = ref(-1);\n  let calculated = List.fold_left((acc, num) => {\n    i := i^ + 1;\n    acc + getDiv(i^) * num\n  }, 0, mSpreaded);\n\n  calculated == m ? calculated : thirt(calculated);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292058,"user_id":168,"body":"let thirt = (m: int): int => {\n  let rec sum = (acc: int, m: int, b: int): int => {\n    if (m == 0) { acc }\n    else { sum(acc + m mod 10 * b, m \/ 10, b * 10 mod 13) };\n  };\n  let rec loop = (v: int): int => {\n    let s = sum(0, v, 1);\n    if (s == v) { s } else { loop(s) };\n  };\n  loop(m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56445c4755d0e45b8c00010a":[{"id":292059,"user_id":53,"body":"let rec aux = (f0: int, p: float, c0: int, n: int, i: float): int => {\n  if (n == 1) {\n    f0;\n  } else {\n    aux(f0 + f0 * int_of_float(p) \/ 100 - c0, p, c0 + c0 * int_of_float(i) \/ 100, n - 1, i)\n  }\n};\n\nlet fortune = (f0: int, p: float, c0: int, n: int, i: float): bool => {\n  aux(f0, p, c0, n, i) >= 0;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292060,"user_id":492,"body":"let fortune = (fortinit: int, p: float, peryear: int, nbyear: int, infl: float): bool => {\n  let rec helper = (prevx: int, p: float, prevc: int, n: int, infl: float, k: int) =>\n    if (k === n) {prevx >= 0;\n    } else {\n      let noux =\n        float(prevx)\n        +. p\n        \/. 100.0\n        *. float(prevx)\n        -. float(prevc);\n      let nouc = float(prevc) +. infl \/. 100.0 *. float_of_int(prevc);\n      helper(\n        int_of_float(floor(noux)),\n        p,\n        int_of_float(floor(nouc)),\n        n,\n        infl,\n        k + 1,\n      );\n    };\n  helper(fortinit, p, peryear, nbyear, infl, 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292061,"user_id":null,"body":"let fortune =\n    (fortinit: int, p: float, peryear: int, nbyear: int, infl: float): bool => {\n  let p_percent = p \/. 100.0;\n  let infl_percent = infl \/. 100.0;\n\n  let rec loop = (f: int, c: int, y: int) => {\n    let interest = int_of_float(float(f) *. p_percent);\n    let next_f = f + interest - c;\n\n    if (next_f <= 0) {\n      y >= nbyear ? true : false;\n    } else {\n      let next_c = c + int_of_float(float(c) *. infl_percent);\n      let next_y = y + 1;\n      \n      loop(next_f, next_c, next_y);\n    };\n  };\n\n  loop(fortinit, peryear, 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56484848ba95170a8000004d":[{"id":292062,"user_id":492,"body":"let rec gpsaux = (s: int, l: list(float)) =>\n  switch (l) {\n  | [] => 0.0\n  | [_] => 0.0\n  | [a, b, ...x] =>\n    max(3600.0 *. (b -. a) \/. float(s), gpsaux(s, [b, ...x]))\n  };\nlet gps = (s: int, l: list(float)): int => int_of_float(gpsaux(s, l));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292063,"user_id":null,"body":"let hourlySpeed = (s: int, deltaDistance: float) =>\n\t(3600.0 *. deltaDistance) \/. Js.Int.toFloat(s)\n\ntype steps = \n\t| Init\n\t| Step(float, list(float))\n\nlet runSpeedStep = (s: int, step: steps, el: float) => {\n\tswitch step {\n  \t| Init => Step(el, [])\n    | Step(prev, prevRes) => Step(el, [hourlySpeed(s, el -. prev), ...prevRes])\n  \t}\n}\n\nlet arrSpeed = (l: list(float), s: int): steps => {\n\tl|>List.fold_left(runSpeedStep(s), Init);\n}\n\nlet max = (l: list(float)): float => l|>List.fold_left((a1, a2)=> a1 > a2 ? a1 : a2, 0.0)\n\nlet unwrapStep = (step: steps) => {\n\tswitch step {\n    | Step(_, res) => res\n    | _ => []\n\t}\n}\n\nlet gps = (s: int, l: list(float)): int =>\n\tl -> arrSpeed(s) -> unwrapStep -> max -> Js.Math.unsafe_round","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292064,"user_id":null,"body":"let rec gps = (s: int, l: list(float)): int => \n  switch (l) {\n  | [] => 0\n  | [_] => 0\n  | [x, ...xs] => {\n      let y = Belt.List.headExn(xs)\n      let velocity = int_of_float(3600. *. (y -. x) \/. float_of_int(s))\n      let nextMax = gps(s, xs)\n\n      Js.Math.max_int(velocity, nextMax)\n    }\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292065,"user_id":null,"body":"let gps = (s: int, l: list(float)): int => {\n  l\n  |> List.mapi((i: int, d: float): float => {if (i == 0) {0.;} else {d -. List.nth(l, i-1);};})\n  |> List.fold_left(max, 0.)\n  |> (d: float): int => int_of_float(floor((3600. *. d) \/. float_of_int(s)))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292066,"user_id":null,"body":"let rec gpsaux = (s, list) =>\n  switch (list) {\n  | [] => 0.0\n  | [_] => 0.0\n  | [a, b, ...rest] => max(3600.0 *. (b -. a) \/. float(s), gpsaux(s, [b, ...rest]))\n  }\n\nlet gps = (s: int, l: list(float)): int => int_of_float(gpsaux(s, l))","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292067,"user_id":null,"body":"let getPairs = (l: list(float)): list(list(float)) => List.map2((f : float, t: float): list(float) => {\n  [t, f]\n}, List.tl(l), List.rev(List.tl(List.rev(l))))\nlet getAverages = (l: list(list(float)), s: int): list(float) => List.map((i: list(float)): float => ((List.nth(i, 1) -. List.nth(i, 0)) *. (60.0 \/. float_of_int(s))) *. 60.0, l)\nlet findMax = (l: list(float)): float => List.nth(List.sort((a, b) => int_of_float(b -. a), l), 0)\nlet formatSpeed = (f: float): int => int_of_float(f)\n\nlet gps = (s: int, l: list(float)): int => { 2\n  switch(List.length(l)) {\n    | 0 => 0\n    | 1 => 0\n    | _ => l\n      -> getPairs\n      -> getAverages(s)\n      -> findMax\n      -> formatSpeed\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292068,"user_id":null,"body":"let getHourlySpeed = (delta_distance: float, s: int): float => \n\t(float_of_int(3600) *. delta_distance) \/. float_of_int(s)\n  \nlet getMaxValue = fun\n  | [] => 0.0\n  | [x, ...xs] => List.fold_left(max, x, xs);\n\nlet gps = (s: int, l: list(float)): int => {\n  let speeds = List.mapi((i, x) =>\n      i < List.length(l) - 1\n       ? getHourlySpeed(List.nth(l, i + 1) -. x, s)\n       : 0.0\n    , l);\n  int_of_float(getMaxValue(speeds))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56541980fa08ab47a0000040":[{"id":292069,"user_id":null,"body":"let printer_error = (s: string): string => {\n  let error_count = ref(0)\n  String.iter( ch => {\n    if (ch > 'm') {\n    \terror_count := error_count^ + 1;\n    }\n  }, s);\n  string_of_int(error_count^) ++ \"\/\" ++ string_of_int(String.length(s))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292070,"user_id":null,"body":"let printer_error = (s: string): string =>\n  (\n    switch (Js.String.match([%bs.re \"\/[a-m]\/g\"], s)) {\n    | Some(value) => Array.length(value)\n    | None => 0\n    }\n  )\n  |> (value => Js.String.length(s) - value)\n  |> string_of_int\n  |> (\n    matchLength => matchLength ++ \"\/\" ++ string_of_int(Js.String.length(s))\n  );","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292071,"user_id":168,"body":"let printer_error = (s: string): string => {\n  let errs = Js.String.replaceByRe([%bs.re \"\/[a-m]+\/g\"], \"\", s);\n  Printf.sprintf(\"%d\/%d\", String.length(errs), String.length(s));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292072,"user_id":492,"body":"let printer_error = (s: string): string => {\n  let n = String.length(s);\n  let sol = (s: string): string => {\n    let errs = ref(0);\n    for (i in 0 to n - 1) {\n      if (s.[i] < 'a' || s.[i] > 'm') {\n        incr(errs);\n      };\n    };\n    string_of_int(errs^) ++ \"\/\" ++ string_of_int(n);\n  };\n  sol(s);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292073,"user_id":null,"body":"let printer_error = (s: string): string => {\n  let totalItems = s\n  |> Js.String.split(\"\")\n  |> Js.Array.length;\n \n let errorRate = s\n  |> Js.String.split(\"\")\n  |> Js.Array.map(character => character.[0])\n  |> Js.Array.filter(characterCode => characterCode > \"m\".[0])\n\t|> Js.Array.length;\n  \n   {j|$errorRate\/$totalItems|j};\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292074,"user_id":null,"body":"let printer_error = (s: string): string => {\n  let total = s |> Js.String.length\n  let errors = s\n    |> Js.String.split(\"\")\n    |> Js.Array.filter(char => char > \"m\")\n    |> Js.Array.length\n\n  string_of_int(errors) ++ \"\/\" ++ string_of_int(total)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292075,"user_id":53,"body":"let printer_error = (s: string): string => {\n  let n = String.length(s);\n  let m = ref(0);\n  let i = ref(0);\n  while (i^ < n) {\n    let c = s.[i^];\n    if (c < 'a' || c > 'm') {\n      m := m^ + 1;\n    }\n    i := i^ + 1;\n  };\n  Printf.sprintf(\"%d\/%d\", m^, n);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292076,"user_id":null,"body":"let mInt = int_of_char('m');\nlet isCharGood = (c: char) => int_of_char(c) <= mInt;\nlet sliceFirstChar = (str: string) => String.sub(str, 1, String.length(str) - 1);\n\nlet rec scan = (str: string, bad: int, all: int) => {\n  switch (String.get(str, 0)) {\n    | exception Invalid_argument(_) => (bad, all)\n    | c => switch (isCharGood(c)) {\n      | true => scan(\n        sliceFirstChar(str),\n        bad,\n        all + 1,\n      )\n      | false => scan (\n        sliceFirstChar(str),\n        bad + 1,\n        all + 1,\n      )\n    }\n  }\n}\n\nlet format = ((bad, len): (int, int)) => string_of_int(bad) ++ \"\/\" ++ string_of_int(len);\n\nlet printer_error = (s: string): string => {\n  scan(s, 0, 0)\n    |> format;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292077,"user_id":null,"body":"let colors = \"abcdefghijklm\";\n\nlet is_color = String.contains(colors);\nlet error_string = (num: int, denom: int): string => string_of_int(num) ++ \"\/\" ++ string_of_int(denom);\n\nlet printer_error = (s: string): string => {\n  let num_errors = s\n    |> Js.String.split(\"\")\n    |> Array.map(c => c.[0])\n    |> Array.fold_left((num_errors, c) => {\n      num_errors + (if (is_color(c)) 0 else 1)\n    }, 0);\n  error_string(num_errors, String.length(s))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292078,"user_id":null,"body":"let colors = \"abcdefghijklm\";\n\nlet is_color = String.contains(colors)\n\nlet error_string = (num: int, denom: int): string => string_of_int(num) ++ \"\/\" ++ string_of_int(denom)\n\nlet printer_error = (s: string): string => {\n  let num_errors = ref(0);\n  String.iter(c => {\n    let more_error = if (is_color(c)) 0 else 1;\n    num_errors := num_errors^ + more_error;\n  }, s);\n  error_string(num_errors^, String.length(s))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5656b6906de340bd1b0000ac":[{"id":292079,"user_id":null,"body":"let longest = (s1, s2) => {\n  let biggest = s1 ++ s2\n  let splitted = Js.String.split(\"\", biggest)\n  let sorted = Js.Array.sortInPlace(splitted)\n  let duplicate = (a,b) => Js.Array.indexOf(a, sorted) == b\n  let removeDuplicate = Js.Array.filteri(duplicate, sorted)\n  \n  let joinWords = Js.Array.joinWith(\"\", removeDuplicate)\n  \n  joinWords\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292080,"user_id":168,"body":"let longest = (s1, s2) =>\n  s1 ++ s2 |> Js.String.split(\"\")\n           |> Array.to_list\n           |> List.sort_uniq(compare)\n           |> String.concat(\"\");","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292081,"user_id":492,"body":"let longest = (s1, s2) => {\n  let explode = input => {\n    let rec aux = (idx, lst) =>\n      if (idx < 0) { lst;\n      } else {\n        aux(idx - 1, [input.[idx], ...lst]);\n      };\n      aux(String.length(input) - 1, []);\n  };\n  let implode = chars =>\n    String.init(List.length(chars), i => List.nth(chars, i));\n  s1 ++ s2 |> explode |> List.sort_uniq(compare) |> implode;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292082,"user_id":null,"body":"let longest = (s1, s2) => {\n  let dict = Js.Dict.fromArray([||]);\n  \n  (s1 ++ s2)\n  |> Js.String.split(\"\")\n  |> Js.Array.forEach(c => Js.Dict.set(dict, c, true))\n\n  dict\n  |> Js.Dict.keys\n  |> Js.Array.sortInPlace\n  |> Js.Array.joinWith(\"\")\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292083,"user_id":null,"body":"let longest = (s1, s2) => {\n  Js.String.concat(s1, s2)\n    |> Js.String.split(\"\")\n    |> Belt.MutableSet.String.fromArray\n    |> Belt.MutableSet.String.reduce(_, \"\", (++))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292084,"user_id":null,"body":"module CharSet =\n  Set.Make({\n    type t = char;\n    let compare = (a: char, b: char) => Char.code(a) - Char.code(b);\n  });\n\nlet populate_set = (str, set) => {\n  let set = ref(set);\n  String.iter(ch => set := CharSet.add(ch, set^), str);\n  set^;\n};\n\nlet set_to_string = set => {\n  let buffer = Buffer.create(CharSet.cardinal(set));\n  CharSet.iter(Buffer.add_char(buffer), set);\n  Buffer.contents(buffer);\n};\n\nlet longest = (s1, s2): string => {\n  let set = ref(CharSet.empty);\n  set := populate_set(s1, set^);\n  set := populate_set(s2, set^);\n  set_to_string(set^);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292085,"user_id":null,"body":"let longest = (s1, s2) => {\n  let mark = Array.make(26, false)\n  let check = (str) => {\n    String.iter(ch => {\n      mark[Char.code(ch) - Char.code('a')] = true\n    })(str)\n  }\n  check(s1)\n  check(s2)\n  let result = ref(\"\")\n  for (i in 0 to 25) {\n    let addition = switch (mark[i]) {\n      | false => \"\"\n      | true => String.make(1, Char.chr(Char.code('a') + i))\n    }\n    \n    result := result^ ++ addition\n  }\n  result^\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292086,"user_id":1186,"body":"let longest = (s1, s2) =>\n  (s1 ++ s2)\n  |> Js.String.split(\"\")\n  |> Belt.Set.String.fromArray\n  |> Belt.Set.String.toArray\n  |> Js.Array.joinWith(\"\");","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"565abd876ed46506d600000d":[{"id":292087,"user_id":492,"body":"let simpson = (n: int): float => {\n  let sumUH = List.fold_left((+.), 0.0);\n  let rangeUH = (start, step, nd, f) => {\n    let rec helper = (current, xs) =>\n      if (current <= nd) {\n        helper(current + step, [f(current), ...xs]);\n      } else {\n        xs;\n      };\n\n    List.rev(helper(start, []));\n  };\n  let f = (x: float) => 3.0 *. sin(x) *. sin(x) *. sin(x) \/. 2.0;\n  let sm1 = (n: int, h: float) =>\n    rangeUH(1, 2, n - 1, x => f(float_of_int(x) *. h)) |> sumUH;\n  let sm2 = (n: int, h: float) =>\n    rangeUH(2, 2, n, x => f(float_of_int(x) *. h)) |> sumUH;\n  let h = 3.14159265358979323846 \/. float_of_int(n);\n  h *. (4.0 *. sm1(n, h) +. 2.0 *. sm2(n, h)) \/. 3.0;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292088,"user_id":53,"body":"let simpson = (ni: int): float => {\n  let pi = 3.14159265358979323846;\n  let n = float_of_int(ni);\n  let pow3 (x: float) = x *. x *. x;\n  let k = pi \/. n;\n  k *. (1.0 +. 2.0 *. pow3(cos(k)) +. 3.0 *. cos(2.0 *. k)) \/. (sin(3.0 *. k))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"565c0fa6e3a7d39dee000125":[{"id":292089,"user_id":53,"body":"let dist = (v: float, mu: float): float => {\n  let u = v *. 5.0 \/. 18.0;\n  u +. (u *. u) \/. (2.0 *. mu *. 9.81);\n};\n\nlet speed = (d: float, mu: float): float => {\n  let b = -2.0 *. mu *. 9.81;\n  3.6 *. (b +. sqrt(b *. b -. 4.0 *. b *. d)) \/. 2.0;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292090,"user_id":492,"body":"let dist = (v: float, mu: float): float => {\n  let v = v *. (1000. \/. 3600.);\n  let d1 = v *. v \/. (2. *. mu *. 9.81);\n  v +. d1;\n};\nlet speed = (d: float, mu: float): float => {\n  let x = mu *. 9.81;\n  let v = (sqrt(1. +. 2. *. d \/. x) -. 1.) *. x;\n  v *. (3600. \/. 1000.);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5663f5305102699bad000056":[{"id":292091,"user_id":492,"body":"let mxdiflg = (a1: array(string), a2: array(string)): option(int) => {\n  let min_max = a => {\n    let aux = ((v_min, v_max), s) => {\n      let v = String.length(s);\n      (min(v, v_min), max(v, v_max));\n    };\n    Array.fold_left(aux, (max_int, (-1)), a);\n  };\n  let (x_min, x_max) = min_max(a1);\n  let (y_min, y_max) = min_max(a2);\n  if (x_max < 0 || y_max < 0) {\n    None;\n  } else {\n    Some(max(abs(x_max - y_min), abs(y_max - x_min)));\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292092,"user_id":53,"body":"let mxdiflg = (xs: array(string), ys: array(string)): option(int) => {\n  if (Array.length(xs) == 0 || Array.length(ys) == 0) {\n    None;\n  } else {\n    let xl = xs |> Array.map((x) => String.length(x));\n    let yl = ys |> Array.map((y) => String.length(y));\n    let x1 = xl |> Array.fold_left((acc, x) => min(acc, x), xl[0]);\n    let y1 = yl |> Array.fold_left((acc, y) => min(acc, y), yl[0]);\n    let x2 = xl |> Array.fold_left((acc, x) => max(acc, x), xl[0]);\n    let y2 = yl |> Array.fold_left((acc, y) => max(acc, y), yl[0]);\n    Some(max((abs(y2 - x1)), (abs(x2 - y1))));\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292093,"user_id":null,"body":"let mxdiflg = (a1: array(string), a2: array(string)): option(int) => {\n  switch ([a1, a2]) {\n  | [[||], _] => None\n  | [_, [||]] => None\n  | _ =>\n    let m1 = Array.map(a => String.length(a), a1);\n    let m2 = Array.map(a => String.length(a), a2);\n    let reducer = a =>\n      Array.fold_left(\n        (result, item) => abs(a - item) > result ? abs(a - item) : result,\n        min_int,\n        m1,\n      );\n    Some(\n      Array.fold_left(\n        (result, item) => {\n          let size = reducer(item);\n          size > result ? size : result;\n        },\n        min_int,\n        m2,\n      ),\n    );\n  };\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292094,"user_id":null,"body":"open Belt;\nlet getMaxMin = (a: array(string)) => {\n    Array.reduceWithIndex(\n      a,\n      (0, -1),\n      ((ma, mi), a, _) => {\n        let la = String.length(a);\n        (\n          max(ma, la),\n          min(\n            switch (mi) {\n            | -1 => la\n            | _ => mi\n            },\n            la,\n          ),\n        );\n      },\n    );\n  };\nlet mxdiflg = (a1: array(string), a2: array(string)): option(int) => {\n  switch (a1, a2) {\n    | ([||], _) => None\n    | (_, [||]) => None\n    | (_, _) =>\n      \/\/ \u6c42 a1 \u7684\u6700\u5c0f\u6700\u5927\u957f\u5ea6\u548ca2\u7684\u6700\u5c0f\u6700\u5927\u957f\u5ea6\n      let (ma1, mi1) = getMaxMin(a1);\n\n      let (ma2, mi2) = getMaxMin(a2);\n\n      Some(max(ma1 - mi2, ma2 - mi1));\n    };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292095,"user_id":null,"body":"let compare_str = (op: (int, int) => bool, xs: array(string)) =>\n  Array.fold_left(\n    (shortest, str) =>\n      op(String.length(str), String.length(shortest)) ? str : shortest,\n    xs[0],\n    Array.sub(xs, 1, Array.length(xs) - 1),\n  );\n\nlet mxdiflg = (a1: array(string), a2: array(string)): option(int) =>\n  switch (a1, a2) {\n  | ([||], _)\n  | (_, [||]) => None\n  | (_, _) =>\n    Some(\n      max(\n        (a1 |> compare_str((>)) |> String.length)\n        - (a2 |> compare_str((<)) |> String.length)\n        |> abs,\n        (a1 |> compare_str((<)) |> String.length)\n        - (a2 |> compare_str((>)) |> String.length)\n        |> abs,\n      ),\n    )\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"566543703c72200f0b0000c9":[{"id":292096,"user_id":168,"body":"let epidemic = (tm: int, n: int, s0: float, i0: float, b: float, a: float): int => {\n  let dt = float(tm) \/. float(n);\n  let rec loop = (s, i, r, k) =>\n    if (k > n) { i }\n    else {\n      let s1 = s -. dt *. b *. s *. i;\n      let i1 = i +. dt *. (b *. s *. i -. a *. i);\n      let r1 = r +. dt *. i *. a;\n      if (i1 < i) { i }\n      else { loop(s1, i1, r1, k + 1) };\n    };\n  truncate(loop(s0, i0, 0., 0));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292097,"user_id":492,"body":"let epidemic = (tm: int, n: int, s0: float, i0: float, b: float, a: float): int => {\n  let dt = float(tm) \/. float(n);\n  let rec loop = (s, i, r, k) =>\n    if (k > n) {\n      i;\n    } else {\n      let s1 = s -. dt *. b *. s *. i;\n      let i1 = i +. dt *. (b *. s *. i -. a *. i);\n      let r1 = r +. dt *. i *. a;\n      if (i1 < i) {\n        i;\n      } else {\n        loop(s1, i1, r1, succ(k));\n      };\n    };\n  truncate(loop(s0, i0, 0., 0));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292098,"user_id":53,"body":"let epidemic = (tm: int, n: int, s0: float, i0: float, b: float, a: float): int => {\n  let s = ref(s0);\n  let i = ref(i0);\n  let r = ref(float_of_int(0));\n  let t = ref(float_of_int(0));\n  let dt = ref(float_of_int(tm) \/. float_of_int(n));\n  let imax = ref(float_of_int(0));\n  while (t^ < float_of_int(tm)) {\n    let sd = dt^ *. (b *. s^ *. i^ *. -1.0);\n    let id = dt^ *. (b *. s^ *. i^ -. a *. i^);\n    let rd = dt^ *. (a *. i^);\n    s := s^ +. sd;\n    i := i^ +. id;\n    r := r^ +. rd;\n    t := t^ +. dt^;\n    if (int_of_float(i^) > int_of_float(imax^)) {\n      imax := float_of_int(int_of_float(i^));\n    }\n  }\n  int_of_float(imax^);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5667e8f4e3f572a8f2000039":[{"id":292099,"user_id":null,"body":"let accum = (s: string): string =>\n  s\n  |> Js.String.split(\"\")\n  |> Array.mapi((i, el) =>\n       el |> Js.String.repeat(i + 1) |> String.lowercase |> String.capitalize\n     )\n  |> Js.Array.joinWith(\"-\");","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292100,"user_id":null,"body":"let accum = (s: string): string => {\n  Js.(s\n    |> String.split(\"\")\n    |> Array.mapi((x, i) =>\n      (x |> String.toUpperCase) ++ (x |> String.toLowerCase |> String.repeat(i)))\n    |> Array.joinWith(\"-\"))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292101,"user_id":null,"body":"let accum = (s: string): string => {\n  Array.init(String.length(s), String.get(s))\n  |> Array.mapi((i: int, c: char): string => String.uppercase(String.make(1, c)) ++ String.lowercase(String.make(i, c)))\n  |> Array.to_list\n  |> String.concat(\"-\")\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292102,"user_id":null,"body":"let accum = (s: string): string => {\n  let a = ref(\"\")\n  for (i in 0 to String.length(s)-2) {\n    a := a^ ++ String.capitalize(String.lowercase(String.make(i+1, s.[i]))) ++ \"-\"\n  }\n  a := a^ ++ String.capitalize(String.lowercase(String.make(String.length(s), s.[String.length(s)-1])))\n  a^\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292103,"user_id":null,"body":"let list_of_chars_from_string = (str: string): list(char) => {\n  let rec aux = (~acc=[], str) => {\n    let strLen = String.length(str);\n    if(strLen == 0) {\n      acc;\n    } else {\n      let lastChar = String.get(str, strLen - 1);\n      aux(~acc=[lastChar, ...acc], String.sub(str, 0, strLen - 1))\n    }\n  }\n  aux(str);\n}\n\nlet join_list_of_strings = (c: char, l: list(string)): string => {\n  let rec aux = (~acc=\"\", la: list(string)) => {\n    switch la {\n      | [] => raise(Failure(\"Passed an empty list\"));\n      | [tail] => acc ++ tail;\n      | [head, ...tail] => aux(~acc=acc ++ head ++ String.make(1, c), tail)\n    }\n  }\n  \n  aux(l);\n}\n\nlet accum = (s: string): string => {\n  let l = list_of_chars_from_string(s);\n  let ml = List.mapi((i, e) => {\n    open String;\n    e |> make(i + 1) |> lowercase |> capitalize;\n  }, l)\n  \n  join_list_of_strings('-', ml);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292104,"user_id":1186,"body":"let rec accum = (~i = 0, ~acc = \"\", s: string): string => {\n  switch(s->String.length) {\n    | length when length == i => acc\n    | _ => {\n      let currChar = String.get(s, i);\n      \n      let newPart = String.make(i + 1, currChar)\n        ->String.lowercase\n        ->String.capitalize;\n      let joinString = i == 0 ? \"\" : \"-\";\n      let newAcc = {j|$acc$joinString$newPart|j}\n        \n      accum(\n        ~i = i + 1,\n        ~acc = newAcc,\n        s,\n      )\n    }\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292105,"user_id":492,"body":"let accum = (s: string): string => {\n  let rec loop = i =>\n    try ([String.make(i + 1, s.[i]), ...loop(succ(i))]) {\n        | _ => []\n    };\n  loop(0)\n  |> List.map(s => String.capitalize(String.lowercase(s)))\n  |> String.concat(\"-\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"566be96bb3174e155300001b":[{"id":292106,"user_id":168,"body":"let max_ball = (v0: int): int => truncate(float(v0) \/. 3.5316 +. 0.5);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292107,"user_id":492,"body":"let max_ball = (v0: int): int => {\n  let roundf = x => floor(x +. 0.5);\n  int_of_float(roundf(float_of_int(v0) \/. 3.6 \/. 0.981));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292108,"user_id":50,"body":"let max_ball = (v0: int): int => {\n  (((v0 * 56630) + 100000) \/ 200000)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292109,"user_id":null,"body":"let g = 9.81;\n\nlet get_height = (v, t) => v *. t -. 0.5 *. g *. t *. t;\n\nlet v_to_ms = v => float_of_int(v) *. 1000.0 \/. 3600.0;\n\nlet max_ball = (v0: int): int => {\n  let v = v_to_ms(v0);\n  let rec aux = ((prevTime, prevHeight)) => {\n    let nextTime = prevTime + 1;\n    let nextHeight = get_height(v, float_of_int(nextTime) \/. 10.0);\n    if (nextHeight < prevHeight) {\n      (prevTime, prevHeight);\n    } else {\n      aux((nextTime, nextHeight));\n    };\n  };\n  let (time, _) = aux((0, 0.0));\n  time;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292110,"user_id":null,"body":"let max_ball = (v0: int): int => {\n  let vconv = float(v0) *. 1000.0 \/. 3600.0;\n  let height = (t) => (vconv *. t) -. (0.5 *. 9.81 *. t *. t);\n\n  let tmax = vconv \/. 9.81;\n  let lowertenth = floor(tmax *. 10.0);\n  let uppertenth = ceil(tmax *. 10.0);\n\n  if (height(uppertenth \/. 10.0) > height(lowertenth \/. 10.0) ) {int_of_float(uppertenth)} else {int_of_float(lowertenth)};\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292111,"user_id":53,"body":"let max_ball = (v0: int): int => {\n  int_of_float(Js.Math.round(float_of_int(v0) \/. 3.5316))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292112,"user_id":null,"body":"let sim = (t: float, v: float): float => {\n  let g: float = 9.81;\n  let vt: float = v *. t;\n  let gt: float = 0.5 *. g *. t *. t;\n  vt -. gt\n}\n\ntype tenth_hight = (int, float);\n\nlet reducer = (acc: tenth_hight, v: tenth_hight): tenth_hight => {\n  let (f1, s1) = acc;\n  let (f2, s2) = v;\n  s1 > s2 ? (f1, s1) : (f2, s2)\n}\n\nlet max_ball = (v0: int): int => {\n  let v: float = float_of_int(v0) \/. 3.6;\n  let current_second_tenth: ref(int) = ref(1);\n  let current_simulation_result: ref(float) = ref(0.0);\n  let results: ref(list(tenth_hight)) = ref([]);\n\n  while (current_simulation_result^ >= 0.0) {\n    let tenth: float = float_of_int(current_second_tenth^) \/. 10.0;\n    current_simulation_result := sim(tenth, v);\n    results := [(current_second_tenth^, current_simulation_result^), ...results^];\n    current_second_tenth := current_second_tenth^ + 1;\n  };\n  \n  let initVal: tenth_hight = (0, 0.0);\n  \n  let (max, _): tenth_hight = List.fold_left(reducer, initVal, results^);\n  max\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292113,"user_id":527,"body":"let max_ball = (v0: int): int => {\n  int_of_float(float_of_int(v0) \/. 3.5316 +. 0.5)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292114,"user_id":null,"body":"let max_ball = (v0: int): int => {\n  let g = 9.81;\n  let h = (ds) => {\n    let v = float_of_int(v0) *. 1000. \/. 3600.;\n    let t = float_of_int(ds) \/. 10.;\n    (v *. t) -. (0.5 *. g *. t *. t)\n  }\n  let rec max_time = (t) => {\n    if (h(t) < h(t + 1)) max_time(t + 1)\n    else t\n  }\n  max_time(0)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292115,"user_id":1186,"body":"let g = 9.81;\n\nlet max_ball = (v0: int): int => {\n  let v0ms = float_of_int(v0) *. 10. \/. 36.;\n  let t_max = v0ms \/. g;\n  let t_max_tenth = t_max *. 10.\n\n  let candidate1_tenth = t_max_tenth -> Pervasives.floor;\n  let candidate2_tenth = t_max_tenth -> Pervasives.ceil\n  \n  let candidate1 = candidate1_tenth \/. 10.;\n  let candidate2 = candidate2_tenth \/. 10.;\n  \n  let h1 = v0ms *. candidate1 -. 0.5 *. g *. candidate1 ** 2.;\n  let h2 = v0ms *. candidate2 -. 0.5 *. g *. candidate2 ** 2.;\n  \n  (h1 > h2 ? candidate1_tenth : candidate2_tenth)->int_of_float;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"566fc12495810954b1000030":[{"id":292116,"user_id":53,"body":"let nb_dig = (n: int, d: int): int => {\n  let rec f = (n, d, m, i, s, k) => {\n    if (s == 0 && i > n) {\n      m;\n    } else if (s == 0 && i == 0 && d == 0) {\n      f(n, d, m+1, i+1, s, k);\n    } else if (s == 0) {\n      f(n, d, m, i, 1, i*i);\n    } else if (k <= 0) {\n      f(n, d, m, i+1, 0, 0);\n    } else if (k mod 10 == d) {\n      f(n, d, m+1, i, 1, k\/10);\n    } else {\n      f(n, d, m, i, 1, k\/10);\n    } \n  };\n  f(n, d, 0, 0, 0, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292117,"user_id":null,"body":"let nb_dig = (n: int, d: int): int => {\n  let d_char = String.get(string_of_int(d), 0);\n  Array.init(n+1, i => string_of_int(i*i))\n  |> Array.map(s => Array.init(String.length(s), String.get(s)) |> Array.fold_left((i, c) => if (c == d_char) {i+1} else {i}, 0))\n  |> Array.fold_left((a, b) => a + b, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292118,"user_id":null,"body":"let nb_dig = (n, d) => {\n  Array.make(n + 1, 1)\n  |> Array.mapi((i, _) => int_of_float(float_of_int(i) ** 2.))\n  |> Array.map(x => {\n    string_of_int(x)\n    |> Js.String.split(\"\")\n    |> Array.map(x => x == string_of_int(d) ? 1 : 0)\n    |> Array.fold_left((+), 0)\n  })\n  |> Array.fold_left((+), 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292119,"user_id":492,"body":"let nb_dig = (n: int, d: int): int => {\n  let d_char = Char.chr(d + Char.code('0'));\n  let count = s => {\n    let r = ref(0);\n    String.iter(ch => if (ch == d_char) {incr(r);}, s);\n    r^;\n  };\n  let rec loop = (k, acc) =>\n    if (k > n) {acc;\n    } else {\n      loop(succ(k), acc + count(string_of_int(k * k)));\n    };\n  loop(0, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5672682212c8ecf83e000050":[{"id":292120,"user_id":53,"body":"let dbl_linear = (n: int): int => {\n  let u = Array.make(n + 1, 0);\n  let x = ref(0);\n  let y = ref(0);\n  u[0] = 1;\n  for (i in 1 to n) {\n    let a = 2 * u[x^] + 1;\n    let b = 3 * u[y^] + 1;\n    let c = a < b ? a : b;\n    u[i] = c;\n    if (c == a) { x := x^ + 1; }\n    if (c == b) { y := y^ + 1; }\n  }\n  u[n];\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292121,"user_id":492,"body":"open List;\nlet rec aux = (n: int, cnt: int, h: int, q2: list('int), q3: list('int)) =>\n  if (cnt >= n) {\n    h;\n  } else {\n    let q2 = q2 @ [2 * h + 1];\n    let q3 = q3 @ [3 * h + 1];\n    let m = min(hd(q2), hd(q3));\n    if (m === hd(q2) && m !== hd(q3)) {\n      aux(n, cnt + 1, m, tl(q2), q3);\n    } else if (m !== hd(q2) && m === hd(q3)) {\n      aux(n, cnt + 1, hd(q3), q2, tl(q3));\n    } else {\n      aux(n, cnt + 1, m, tl(q2), tl(q3));\n    };\n  };\nlet dbl_linear = (n: int): int => aux(n, 0, 1, [], []);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"567501aec64b81e252000003":[{"id":292122,"user_id":492,"body":"let wallPaper = (l: float, w: float, h: float): string => {\n  let t = [|\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\n            \"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\n            \"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\",|];\n  if (l == 0.0 || w == 0.0 || h == 0.0) {t[0];\n  } else {\n    t[truncate(ceil((l +. w) *. 2.0 *. h \/. 5.2 *. 1.15))];\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292123,"user_id":null,"body":"type validity = \n| Valid\n| Invalid;\n\nlet productArea = 5.2;\n\nlet validateDimensions = (l, w, h) => {\n  switch ((l, w, h)) {\n  | (_, _, 0.0) => Invalid\n  | (_, 0.0, _) => Invalid\n  | (0.0, _, _) => Invalid\n  | _ => Valid\n  };\n};\n\nlet wallPaper = (l, w, h) => {\n  switch (validateDimensions(l, w, h)) {\n  | Invalid => \"zero\"\n  | Valid => {\n      let wallArea = (2.0 *. h) *. (l +. w);\n      let preciseLengthNeeded = wallArea \/. productArea;\n      let productCountWithBufferNeeded = (preciseLengthNeeded *. 1.15) |> ceil |> int_of_float;\n      switch (productCountWithBufferNeeded) {\n      | 1 => \"one\"\n      | 2 => \"two\"\n      | 3 => \"three\"\n      | 4 => \"four\"\n      | 5 => \"five\"\n      | 6 => \"six\"\n      | 7 => \"seven\"\n      | 8 => \"eight\"\n      | 9 => \"nine\"\n      | 10 => \"ten\"\n      | 11 => \"eleven\"\n      | 12 => \"twelve\"\n      | 13 => \"thirteen\"\n      | 14 => \"fourteen\"\n      | 15 => \"fifteen\"\n      | 16 => \"sixteen\"\n      | 17 => \"seventeen\"\n      | 18 => \"eighteen\"\n      | 19 => \"nineteen\"\n      | _ => \"twenty\"\n      };\n    };\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292124,"user_id":1228,"body":"let wallPaper = (l: float, w: float, h: float): string => {\n  let text = [|\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\n            \"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\n            \"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\",|];\n  switch (l <= 0.0 || w <= 0.0 || h <= 0.0) {\n    | true => \"zero\";\n    | false => text[truncate(ceil((l +. w) *. 2.0 *. h \/. 5.2 *. 1.15))-1];\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292125,"user_id":1228,"body":"let wallPaper = (l: float, w: float, h: float): string => {\n  let text = [|\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\n            \"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\n            \"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\",|];\n  (l <= 0.0 || w <= 0.0 || h <= 0.0) ? \"zero\" : text[truncate(ceil((l +. w) *. 2.0 *. h \/. 5.2 *. 1.15))-1];\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292126,"user_id":53,"body":"let wallPaper = (l: float, w: float, h: float): string => {\n  let ns = [|\"zero\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\n             \"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\",|];\n  if (l *. w *. l == 0.0) {\n    ns[0];\n  } else {\n    ns[truncate(ceil((l +. w) *. 2.3 *. h \/. 5.2))];\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292127,"user_id":null,"body":"module IntMap =\n  Map.Make({\n    type t = int;\n    let compare = compare;\n  });\n\nlet myMap =\n  IntMap.(\n    empty\n    |> add(1, \"one\")\n    |> add(2, \"two\")\n    |> add(3, \"three\")\n    |> add(4, \"four\")\n    |> add(5, \"five\")\n    |> add(6, \"six\")\n    |> add(7, \"seven\")\n    |> add(8, \"eight\")\n    |> add(9, \"nine\")\n    |> add(10, \"ten\")\n    |> add(11, \"eleven\")\n    |> add(12, \"twelve\")\n    |> add(13, \"thirteen\")\n    |> add(14, \"fourteen\")\n    |> add(15, \"fifteen\")\n    |> add(16, \"sixteen\")\n    |> add(17, \"seventeen\")\n    |> add(18, \"eighteen\")\n    |> add(19, \"nineteen\")\n    |> add(20, \"twenty\")\n  );\n\nlet wallPaper = (l: float, w: float, h: float): string => {\n  if (l *. h *. w == 0.0) {\n    \"zero\"\n  } else {\n    let area = 2.0*.l*.h +. 2.0*.w*.h\n    let rolls = area \/. 5.2\n    IntMap.find(Pervasives.truncate(rolls *. 1.15 +. 1.0), myMap)\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292128,"user_id":1228,"body":"let wallPaper = (l: float, w: float, h: float) =>\n  switch (l <= 0.0 || w <= 0.0 || h <= 0.0) {\n    | true => \"zero\";\n    | false => [|\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\n            \"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\n            \"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\n            \"twenty\",|][truncate(ceil((l +. w) *. 2.0 *. h \/. 5.2 *. 1.15)) - 1];\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292129,"user_id":null,"body":"let fifteenPercentExtra = (*.)(1.15);\n\nlet m = (*.)(100.0);\nlet cm = (a) => a;\n\nlet perimeter = (x, y) => switch (x, y) {\n  | (0.0, 0.0) => 0.0\n  | (_, 0.0) => 0.0\n  | (0.0, _) => 0.0\n  | (x, y) => (x +. y) *. 2.0\n};\n\nlet flip = (f, b, a) => f(a, b);\n\nlet dividedBy = (\/.) |> flip;\nlet requiredRolls = dividedBy(cm(52.0) *. m(10.0));\n\nlet to_english = (a) => switch a {\n  | 0 => \"zero\"\n  | 1 => \"one\"\n  | 2 => \"two\"\n  | 3 => \"three\"\n  | 4 => \"four\"\n  | 5 => \"five\"\n  | 6 => \"six\"\n  | 7 => \"seven\"\n  | 8 => \"eight\"\n  | 9 => \"nine\"\n  | 10 => \"ten\"\n  | 11 => \"eleven\"\n  | 12 => \"twelve\"\n  | 13 => \"thirteen\"\n  | 14 => \"fourteen\"\n  | 15 => \"fifteen\"\n  | 16 => \"sixteen\"\n  | 17 => \"seventeen\"\n  | 18 => \"eighteen\"\n  | 19 => \"nineteen\"\n  | 20 => \"twenty\"\n  | _ => \"zero\"\n};\n\nlet wallPaper = (l: float, w: float, h: float): string => {\n  perimeter(m(l), m(w)) *. m(h)\n    |> requiredRolls\n    |> fifteenPercentExtra\n    |> ceil\n    |> int_of_float\n    |> to_english\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292130,"user_id":168,"body":"let wallPaper = (l: float, w: float, h: float): string => {\n  if (l <= 0.0 || w <= 0.0 || h <= 0.0) {\n    \"zero\";\n  }\n  else {\n    switch(truncate(ceil (2. *. h *. (l +. w) *. 1.15 \/. 5.2))) {\n    | 0 => \"zero\"\n    | 1 => \"one\"\n    | 2 => \"two\"\n    | 3 => \"three\"\n    | 4 => \"four\"\n    | 5 => \"five\"\n    | 6 => \"six\"\n    | 7 => \"seven\"\n    | 8 => \"eight\"\n    | 9 => \"nine\"\n    | 10 => \"ten\"\n    | 11 => \"eleven\"\n    | 12 => \"twelve\"\n    | 13 => \"thirteen\"\n    | 14 => \"fourteen\"\n    | 15 => \"fifteen\"\n    | 16 => \"sixteen\"\n    | 17 => \"seventeen\"\n    | 18 => \"eighteen\"\n    | 19 => \"nineteen\"\n    | 20 => \"twenty\"\n    | _ => \"many\"\n    };\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"568dcc3c7f12767a62000038":[{"id":292131,"user_id":645,"body":"let set_alarm = (employed: bool, vacation: bool) => employed && !vacation;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292132,"user_id":null,"body":"let set_alarm = (employed: bool, vacation: bool) => {\n  switch ((employed, vacation)) {\n    | (true, false) => true\n    | _             => false \n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292133,"user_id":527,"body":"let set_alarm = (>)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292134,"user_id":527,"body":"let set_alarm = (employed, vacation) => employed > vacation","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292135,"user_id":527,"body":"let set_alarm = (employed: bool, vacation: bool) => employed > vacation","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292136,"user_id":null,"body":"let set_alarm = (employed: bool, vacation: bool) => {\n  employed && !vacation ? true : false;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292137,"user_id":null,"body":"let set_alarm = (employed: bool, vacation: bool) => {\n  employed ? vacation ? false : true : false \n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292138,"user_id":null,"body":"let set_alarm = (employed: bool, vacation: bool) => {\n  switch (employed, vacation) {\n    | (true, false) => true\n    | (true, true) => false\n    | (false, _) => false\n  };\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292139,"user_id":null,"body":"let set_alarm = (employed: bool, vacation: bool) => {\n  employed == true && vacation == false ? true : false;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292140,"user_id":527,"body":"let set_alarm = (employed: bool, vacation: bool): bool => \n  employed && !vacation;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"569218bc919ccba77000000b":[{"id":292141,"user_id":null,"body":"let date_nb_days = (a0: float, a: float, p: float): string => {\n  let initialDate = Js.Date.fromString(\"2016-01-01\")\n  let initialTime = Js.Date.getTime(initialDate)\n  let dailyRate = p \/. 36000.\n  let daysNeeded = Js.Math.ceil(Js.Math.log(a \/. a0) \/. Js.Math.log(1. +. dailyRate))\n  let finalDate = Js.Date.fromFloat(initialTime +. (float_of_int(daysNeeded) *. 24. *. 60. *. 60. *. 1000.))\n  String.sub(Js.Date.toISOString(finalDate), 0, 10)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292142,"user_id":null,"body":"let date_nb_days = (a0: float, a: float, p: float): string => {\n  let return = a \/. a0\n  let dailyInterestRate = 1.0 +. p \/. 36000.0\n  let days = ref(truncate(log(return) \/. log(dailyInterestRate) +. 1.0))\n  let yr = ref(0)\n  let mo = ref(0)\n  while (days^ > 364) {\n    if (yr^ mod 4 == 0) {\n      days := days^ - 366\n    } else {\n      days := days^ - 365\n    }\n    yr := yr^ + 1\n  }\n  while (days^ > 27) {\n    if (mo^ == 0 || mo^ == 2 || mo^ == 4 || mo^ == 6 || mo^ == 7 || mo^ == 9 || mo^ == 11) {\n      days := days^ - 31\n    } else if (mo^ == 1) {\n      if (yr^ mod 4 == 0) {\n        days := days^ - 29\n      } else {\n        days := days^ - 28\n      }\n    } else {\n      days := days^ - 30 \n    }\n    mo := mo^ + 1\n  }\n  if (days^ < 0) {\n    mo := mo^ - 1\n    days := days^ + 31\n  }\n  Printf.sprintf(\"%i-%02i-%02i\", 2016+yr^, 1+mo^, 1+days^)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292143,"user_id":492,"body":"open Js.Date;\n\nlet date_nb_days = (a0: float, a: float, p: float): string => {\n  let r = ceil(log(a \/. a0) \/. log(1.0 +. p \/. 36000.0));\n  let start = valueOf(fromString(\"2016-01-01\"));\n  let nd = start +. r *. 24.0 *. 3600.0 *. 1000.0;\n  String.sub(toISOString(fromFloat(nd)), 0, 10);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"569b5cec755dd3534d00000f":[{"id":292144,"user_id":null,"body":"let new_avg = (xs: list(float), navg: float): option(int) =>\n  navg\n  *. float_of_int(List.length(xs) + 1)\n  -. List.fold_left((a, b) => a +. b, 0.0, xs)\n  |> ceil\n  |> truncate\n  |> (a => a > 0 ? Some(a) : None);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292145,"user_id":492,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let n = List.length(xs);\n  let sum = List.fold_left((s, x) => s +. x, 0., xs);\n  let x = float_of_int(n + 1) *. navg -. sum;\n  if (x <= 0.) {\n    None;\n  } else {\n    Some(int_of_float(ceil(x)));\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292146,"user_id":null,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let sum = Belt.List.reduce(xs, 0., (+.))\n  let sumReq = navg *. float_of_int(Belt.List.length(xs) + 1)\n  \n  if (sumReq < sum) {\n    None\n  } else {\n    Some(Js.Math.ceil_int(sumReq -. sum))\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292147,"user_id":null,"body":"let filter = (pred: 'a => bool, opt: option('a)): option('a) => {\n  switch (opt) {\n  | Some(x) => if (pred(x)) { Some(x); } else { None; }\n  | None => None\n  };\n};\n\nlet new_avg = (xs: list(float), navg: float): option(int) => {\n  navg *. float_of_int(List.length(xs) + 1) -. List.fold_left((+.), 0.0, xs)\n  |> ceil\n  |> int_of_float\n  |> x => Some(x)\n  |> filter(x => x > 0)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292148,"user_id":null,"body":"open List;\n\nlet new_avg = (xs: list(float), navg: float): option(int) => {\n  let s = fold_left((a, b) => a+.b, 0.0, xs);\n  let don = navg *. float(length(xs)+1);\n  if (s > don) {None} else {Some(Js.Math.ceil_int(don-.s))};\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292149,"user_id":53,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let n = List.length(xs);\n  let s = List.fold_left(\n    (acc, i) => {\n      acc +. i\n    }, 0.0, xs);\n  let x = navg *. float_of_int(n + 1) -. s;\n  if (x < 0.0) {\n    None\n  } else {\n    Some(int_of_float(x +. 0.9999999999)); \n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292150,"user_id":null,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let total = List.fold_left((result, item) => result +. item, 0., xs)\n  let length = List.length(xs)\n  let avg = total \/. float_of_int(length)\n  let nextAvg = navg *. float_of_int(length + 1) -. total\n  let roundAvg = ceil(nextAvg)\n  roundAvg <= 0. ? None : Some(int_of_float(roundAvg))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292151,"user_id":null,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let proposed_sum = float_of_int(List.length(xs) + 1) *. navg\n  let expected_new_donation = proposed_sum -. List.fold_left((+.), 0., xs);\n  \n  switch (expected_new_donation) {\n    | x when x > 0. => Some(int_of_float(ceil(x)))\n    | _ => None\n   }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292152,"user_id":null,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let sum: float = Belt.List.reduce(xs, 0.0, (+.));\n  let len: float = xs |> Belt.List.length |> float;\n  let nextSum: float = (len +. 1.0) *. navg;\n  let diff: float = nextSum -. sum;\n  let intDiff: int = int_of_float(ceil(diff));\n  diff > 0.0 ? Some(intDiff) : None\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292153,"user_id":null,"body":"let new_avg = (xs: list(float), navg: float): option(int) => {\n  let xs_sum = List.fold_left((+.), 0.0, xs);\n  let length = List.length(xs) + 1 |> float;\n\n  let ans = navg *. length -. xs_sum |> ceil |> int_of_float;\n\n  if (ans >= 0) {\n    Some(ans);\n  } else {\n    None;\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56a4872cbb65f3a610000026":[{"id":292154,"user_id":null,"body":"let rec rot = (n: string, r: int) => {\n    let len = String.length(n);\n    switch(r) {\n        | 0 => String.sub(n, 1, len-1) ++ String.sub(n, 0, 1)\n        | _ => String.sub(n, 0, r) ++ rot(String.sub(n, r, len-r), 0);\n    }\n};\nlet max_rot = (n: int) => {\n  let ns = string_of_int(n);\n  let lr = String.length(ns);\n  let rotter = ref(ns);\n  let result = ref(ns);\n  for (index in 0 to lr - 2) {\n    rotter := rot(rotter^, index);\n    result := max(result^, rotter^);\n  };\n  int_of_string(result^);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292155,"user_id":492,"body":"let max_rot = (n: int): int => {\n  let rot = (s, pos) => {\n    let n = String.length(s);\n    if (pos >= n - 1) {s;} \n    else {\n      String.sub(s, 0, pos)\n      ++ String.sub(s, pos + 1, n - pos - 1)\n      ++ String.sub(s, pos, 1);\n    };\n  };\n  let s = string_of_int(n);\n  let n = String.length(s);\n  let rec loop = (acc, s, i) =>\n    if (i >= n) {acc;} \n    else {\n      loop(max(acc, int_of_string(s)), rot(s, i), succ(i));\n    };\n  loop(0, s, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56a5d994ac971f1ac500003e":[{"id":292156,"user_id":null,"body":"module L = Belt.List;\n\nlet getSubText = (xs, k) => {\n  let subList = xs->L.take(k);\n\n  switch (subList) {\n  | None => \"\"\n  | Some(l) => l->L.reduce(\"\", (acc, curr) => acc ++ curr)\n  };\n};\n\nlet rec longest_consec = (xs: list(string), k: int): string => {\n  let text = getSubText(xs, k);\n  let rest = xs->L.drop(1);\n\n  switch (rest) {\n  | None => text\n  | Some(r) =>\n    let next = longest_consec(r, k);\n    if (text->Js.String.length >= next->Js.String.length) {\n      text;\n    } else {\n      next;\n    };\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292157,"user_id":492,"body":"let rec longest_consec = (xs: list(string), k: int): string => {\n  let rec take = (xs: list(string), l: int): list(string) =>\n    if (l <= 0) {\n      [];\n    } else {\n      [List.hd(xs), ...take(List.tl(xs), l - 1)];\n  };\n  if (k <= 0 || List.length(xs) < k) { \"\";\n  } else {\n    let parts = take(xs, k);\n    let part = String.concat(\"\", parts);\n    let otherPart = longest_consec(List.tl(xs), k);\n    if (String.length(part) >= String.length(otherPart)) {\n      part;\n    } else {\n      otherPart;\n    };\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56b5afb4ed1f6d5fb0000991":[{"id":292158,"user_id":492,"body":"let revrot = (str, sz) => {\n  let rec chunk = (n, xs) => {\n    let rec aux = (k, xs, ys) =>\n      switch (k, xs) {\n      | (0, _) => [List.rev(ys), ...chunk(n, xs)]\n      | (_, []) => if (ys == []) {[];} \n                   else if (List.length(ys) > n) {[ys];} \n                   else {[];}\n      | (_, [x, ...xs']) => aux(k - 1, xs', [x, ...ys])\n      };\n    aux(n, xs, []);\n  };\n\n  let cut = (l, n) => {\n    let rec aux = (i, acc) =>\n      fun\n      | [] => (List.rev(acc), [])\n      | [h, ...t] as l => if (i == 0) {(List.rev(acc), l);} \n                          else {aux(i - 1, [h, ...acc], t);};\n    aux(n, [], l);\n  };\n\n  let rotate = (l, n) => {\n    let len = List.length(l);\n    let n = if (len == 0) {0;} else {(n mod len + len) mod len;};\n    if (n == 0) {l;} \n    else {\n      let (a, b) = cut(l, n);\n      b @ a;\n    };\n  };\n\n  let revrotaux = xs => {\n    let char2int = x => Char.code(x) - Char.code('0');\n    let sm = xs |> List.map(char2int) |> List.fold_left((+), 0);\n\n    if (sm mod 2 === 0) {\n      List.rev(xs) |> List.map(String.make(1)) |> String.concat(\"\");\n    } else {\n      rotate(xs, 1) |> List.map(String.make(1)) |> String.concat(\"\");\n    };\n  };\n\n  let explode2char = (s: string): list(char) => {\n    let rec loop = (i, l) =>\n      if (i < 0) {l;} else {loop(i - 1, [s.[i], ...l]);};\n    loop(String.length(s) - 1, []);\n  };\n\n  if (sz <= 0 || str == \"\" || sz > String.length(str)) {\n    \"\";\n  } else {\n    List.map(x => revrotaux(x), chunk(sz, explode2char(str)))\n    |> String.concat(\"\");\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56bdd0aec5dc03d7780010a5":[{"id":292159,"user_id":53,"body":"let nextHigher = (n) => {\n  let r = n land -n;\n  let p = n + r;\n  let q = (n lxor p) \/ (4 * r);\n  p lor q;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292160,"user_id":645,"body":"let nextHigher = (n) => {\n  let o = n land -n;\n  (n + o) lor (((n lxor (n + o)) \/ o) lsr 2);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292161,"user_id":null,"body":"let intToBinaryListRep = num => {\n  let rec aux = (lst, n) => {\n    switch (n) {\n    | 0 => lst\n    | n => aux([n mod 2, ...lst], n \/ 2)\n    };\n  };\n  aux([], num);\n};\n\nlet getN1BitsCount = n =>\n  intToBinaryListRep(n)\n  |> List.fold_left(\n       (acc, bit) => {\n         switch (bit) {\n         | 1 => acc + 1\n         | _ => acc\n         }\n       },\n       0,\n     );\n\nlet nextHigher = n => {\n  let n1Bits = getN1BitsCount(n);\n  let rec aux = n => {\n    let nextN1Bits = getN1BitsCount(n);\n    if (n1Bits === nextN1Bits) {\n      n;\n    } else {\n      aux(n + 1);\n    };\n  };\n  aux(n + 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56c04261c3fcf33f2d000534":[{"id":292162,"user_id":53,"body":"let doubles = (maxk: int, maxn: int): float => {\n  let sum = ref(0.0);\n  let k = ref(1.0);\n  let n = ref(0.0);\n  for (i in 1 to maxk) {\n    k := float_of_int(i);\n    for (j in 1 to maxn) {\n      n := float_of_int(j);\n      sum := sum^ +. (1.0 \/. (k^ *. ((n^ +. 1.0) ** (2.0 *. k^))));\n    };\n  };\n  sum^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292163,"user_id":492,"body":"let doubles = (maxk: int, maxn: int): float => {\n  let rec sum = (acc, f, i, j) =>\n  if (i > j) {\n    acc;\n  } else {\n    sum(f(i) +. acc, f, succ(i), j);\n  };\n  let v = (k, n) => 1. \/. float_of_int(n + 1) ** float_of_int(2 * k);\n  let u = (k, n) => sum(0., v(k), 1, n) \/. float_of_int(k);\n  sum(0., k => u(k, maxn), 1, maxk);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292164,"user_id":null,"body":"let doubles = (maxk : int, maxn : int) : float => {\n  let t = ref(0.);\n  for(k in 1 to maxk) {\n    for(n in 1 to maxn) {\n      t := t^ +. 1. \/. (float(k) *. (float(n) +. 1.) ** (2. *. float(k)));\n    }\n  }\n  t^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56c5847f27be2c3db20009c3":[{"id":292165,"user_id":null,"body":"let subtractSum = (n: int) => \"apple\"","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292166,"user_id":759,"body":"let subtractSum = (_) => { \"apple\" };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292167,"user_id":null,"body":"type fruit = {\n  code: array(int),\n  name: string,\n}\n\nlet fruits = [|\n  {code: [|1, 3, 24, 26, 47, 49, 68, 70, 91, 93|], name: \"kiwi\",},\n  {code: [|2, 21, 23, 42, 44, 46, 65, 67, 69, 88|], name: \"pear\",},\n  {code: [|4, 6, 25, 29, 48, 50, 71, 73, 92, 94, 96|], name: \"banana\",},\n  {code: [|5, 7, 28, 30, 32, 51, 53, 74, 76, 95, 97|], name: \"melon\",},\n  {code: [|8, 10, 12, 31, 33, 52, 56, 75, 77, 79, 98, 100|], name: \"pineapple\",},\n  {code: [|9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99|], name: \"apple\",},\n  {code: [|11, 13, 34, 55, 57, 59, 78, 80|], name: \"cucumber\",},\n  {code: [|14, 16, 35, 37, 39, 58, 60, 83|], name: \"orange\",},\n  {code: [|15, 17, 19, 38, 40, 61, 82, 84, 86|], name: \"grape\",},\n  {code: [|20, 22, 41, 43, 62, 64, 66, 85, 87, 89|], name: \"cherry\",},\n|]\n\nlet rec sumDigits = (~ans: int, n: int) => {\n  n\/10 == 0 ? ans + n : sumDigits(~ans=(n mod 10) + ans, n\/10)\n}\n\nlet wrap = (num: int) => {\n  let ans = ref(\"\")\n  let find = (n: int, fr: fruit) => {\n      Array.iter((i: int) => {\n        if (i == n) {\n          ans := fr.name\n        }\n        }, fr.code)\n  }\n  Array.iter(find(num), fruits)\n  ans^\n}\n\nlet rec subtractSum = (n: int) => {\n  let num = n-sumDigits(0, n)\n  let a = wrap(num)\n  if (a != \"\") {\n    a\n  } else {\n    subtractSum(num)\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292168,"user_id":645,"body":"let subtractSum = (_: int) => \"apple\"","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56cac350145912e68b0006f0":[{"id":292169,"user_id":492,"body":"open Js_string;\n\nlet arrange = (s: string): string => {\n  let lowercase_ascii = s => String.lowercase(s);\n  let uppercase_ascii = s => String.uppercase(s);\n\n  let rec up = (lst: list(string)): list(string) =>\n    switch (lst) {\n    | [] => []\n    | [w] => [lowercase_ascii(w)]\n    | [w1, w2, ...ws] =>\n      if (String.length(w1) <= String.length(w2)) {\n        [lowercase_ascii(w1), ...down([w2, ...ws])];\n      } else {\n        [lowercase_ascii(w2), ...down([w1, ...ws])];\n      }\n    }\n  and down = (lst: list(string)): list(string) =>\n    switch (lst) {\n    | [] => []\n    | [w] => [uppercase_ascii(w)]\n    | [w1, w2, ...ws] =>\n      if (String.length(w1) >= String.length(w2)) {\n        [uppercase_ascii(w1), ...up([w2, ...ws])];\n      } else {\n        [uppercase_ascii(w2), ...up([w1, ...ws])];\n      }\n    };\n  if (s == \"\") {\n    \"\";\n  } else {\n    let r1 = Array.to_list(splitByRe([%re\"\/ +\/\"], s));\n    up(r1) |> String.concat(\" \");\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292170,"user_id":492,"body":"open Js_string;\n\nlet arrange = (s: string): string => {\n  let lowercase_ascii = s => String.lowercase(s);\n  let uppercase_ascii = s => String.uppercase(s);\n\n  let rec up = (lst: list(string)): list(string) =>\n    switch (lst) {\n    | [] => []\n    | [w] => [lowercase_ascii(w)]\n    | [w1, w2, ...ws] =>\n      if (String.length(w1) <= String.length(w2)) {\n        [lowercase_ascii(w1), ...down([w2, ...ws])];\n      } else {\n        [lowercase_ascii(w2), ...down([w1, ...ws])];\n      }\n    }\n  and down = (lst: list(string)): list(string) =>\n    switch (lst) {\n    | [] => []\n    | [w] => [uppercase_ascii(w)]\n    | [w1, w2, ...ws] =>\n      if (String.length(w1) >= String.length(w2)) {\n        [uppercase_ascii(w1), ...up([w2, ...ws])];\n      } else {\n        [uppercase_ascii(w2), ...up([w1, ...ws])];\n      }\n    };\n  if (s == \"\") {\n    \"\";\n  } else {\n    let r1 = Array.to_list(splitByRe([%re\"\/ +\/\"], s));\n    up(r1) |> String.concat(\" \");\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56cd44e1aa4ac7879200010b":[{"id":292171,"user_id":null,"body":"let is_uppercase = (str: string) => String.uppercase(str) === str;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292172,"user_id":null,"body":"let is_uppercase = (str: string) => {\n  [%re \"\/^[ A-Z]*$\/\"] |> Js.Re.test(str)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292173,"user_id":null,"body":"open String;\n\nlet is_uppercase = (str: string) => {\n  str == uppercase(str)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292174,"user_id":53,"body":"let is_uppercase = (str: string) => {\n  String.uppercase(str) == str;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292175,"user_id":null,"body":"let is_uppercase = (s : string) => s == Js.String.toUpperCase(s);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292176,"user_id":null,"body":"let is_uppercase = (str: string) => str === String.uppercase(str)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292177,"user_id":null,"body":"let is_uppercase = (str: string) => [%re \"\/[a-z]\/g\"] |> Js.Re.test(str) |> result => !result;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292178,"user_id":null,"body":"let is_uppercase = (str: string) => {\n  str == String.uppercase(str)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292179,"user_id":null,"body":"let is_uppercase = (str: string) => {\n  Js.Re.test(str, [%re \"\/^[A-Z ]+$\/\"]);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292180,"user_id":1228,"body":"let is_uppercase = (str: string) => {\n  String.compare(str, String.uppercase(str)) == 0;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56dbe0e313c2f63be4000b25":[{"id":292181,"user_id":null,"body":"let rev_string = (s: string): string => String.init(String.length(s), i => String.get(s, String.length(s) - i - 1))\n\nlet split_mirror = (s: string): list(string) => Js.String.split(\"\n\", s)->Array.to_list;\n\nlet join_mirror = (l: list(string)): string => List.fold_left((acc, s) => acc ++ \"\n\" ++ s, List.hd(l), List.tl(l));\n\nlet hor_mirror = (s: string): string => s|>split_mirror|>List.rev|>join_mirror\n\nlet vert_mirror = (s: string): string => s|>split_mirror|>List.map(rev_string)|>join_mirror;\n\nlet oper = (f: string => string, s: string) => f(s);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292182,"user_id":1228,"body":"open Js_string;\n\nlet rec reverseString(str) = {\n  switch (String.length(str) ) {\n   | 0 => \"\";\n   | _ =>  reverseString(String.sub(str, 1, String.length(str) - 1)) ++ String.sub(str, 0,1);\n  };\n}\n\nlet hor_mirror = (s: string): string => {\n  Array.to_list(split(\"\n\", s)) |> List.rev |> String.concat(\"\n\");\n };\n\nlet vert_mirror = (s: string): string => {\n   let rows = Array.to_list(split(\"\n\", s));\n   rows |> List.map(reverseString) |> String.concat(\"\n\");\n\n };\n \nlet oper = (f: string => string, s: string) => f(s);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292183,"user_id":492,"body":"open Js_string;\n\nlet rev_string = s => {\n  let m = String.length(s);\n  String.mapi((i, _) => s.[m - i - 1], s);\n};\n\nlet hor_mirror = (s: string): string =>\n  Array.to_list(split(\"\n\", s)) |> List.rev |> String.concat(\"\n\");\n\nlet vert_mirror = (s: string): string =>\n  Array.to_list(split(\"\n\", s))\n  |> List.map(rev_string)\n  |> String.concat(\"\n\");\n\nlet oper = (f: string => string, s: string) => f(s);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56e3cd1d93c3d940e50006a4":[{"id":292184,"user_id":492,"body":"let rec make_valley = (a: list(int)): list(int) => {\n  let b = List.sort((x, y) => compare(y, x), a);\n  switch (b) {\n  | [] => []\n  | [x] => [x]\n  | [x, y, ...xs] => [x, ...make_valley(xs)] @ [y]\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292185,"user_id":492,"body":"let rec make_valley = (a: list(int)): list(int) => {\n  let b = List.sort((x, y) => compare(y, x), a);\n  switch (b) {\n  | [] => []\n  | [x] => [x]\n  | [x, y, ...xs] => [x, ...make_valley(xs)] @ [y]\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292186,"user_id":53,"body":"let rec make_valley = (a: list(int)): list(int) => {\n  let xs = List.sort((x, y) => compare(y, x), a);\n  switch (xs) {\n    | [] => []\n    | [x] => [x]\n    | [x, y, ...rest] => [x, ...make_valley(rest)] @ [y]\n    };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292187,"user_id":null,"body":"let rec make_valley = ints => \n  ints\n  |> List.sort((a, b) => b - a)\n  |> \n    fun\n    | [] => []\n    | ([head, ...tail]) => {\n      switch (tail) {\n      | [] => [head]\n      | [tailHead, ...tailTail] => {\n          switch (tailTail) {\n          | [] => [head, tailHead]\n          | [tailTailHead, ...tailTailTail] => {\n              switch (tailTailTail) {\n              | [] => [head, tailTailHead, tailHead]\n              | _ => List.flatten([[head], make_valley(tailTail), [tailHead]])\n              }\n            }\n          }\n        }\n      }\n    };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56ed20a2c4e5d69155000301":[{"id":292188,"user_id":53,"body":"let scale = (s: string, h: int, v: int): string => {\n  if (String.length(s) == 0) {\n    \"\";\n  } else {\n    s |> Js.String.split(\"\n\")\n      |> Array.map((line) => line \n        |> Js.String.split(\"\")\n        |> Array.map((c) => c |> Array.make(h) |> Array.to_list |> String.concat(\"\"))\n        |> Array.to_list \n        |> String.concat(\"\")\n        |> Array.make(v) \n        |> Array.to_list \n        |> String.concat(\"\n\"))\n      |> Array.to_list\n      |> String.concat(\"\n\");\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292189,"user_id":null,"body":"\/\/ I don't really know what I'm doing\n\/\/ hopefully there's a much more efficient way to do this!\n\nlet scale_horizontal = (h: int, s: string) => {\n  s |> Js.String.split(\"\")\n    |> Js.Array.map(Js.String.repeat(h))\n    |> Js.Array.joinWith(\"\")\n};\n\n\n\/\/ I don't know how to use Js.Array.from! xD\n\nlet scale_vertical = (v: int, s: string) =>\n  switch(s) {\n  | \"\" => \"\" \/\/ Why this behaviour?????\n  | _  => ArrayLabels.make(v, s) |> Js.Array.joinWith(\"\n\")\n};\n\n\n\/\/ This is not quite as terse as Haskell \/ Clojure!\n\/\/ I suppose it's the best way to practice JavaScript at least.\n\nlet scale = (s: string, h: int, v: int) => {\n  s |> Js.String.split(\"\n\")\n    |> Js.Array.map(scale_horizontal(h))\n    |> Js.Array.map(scale_vertical(v))\n    |> Js.Array.joinWith(\"\n\")\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292190,"user_id":492,"body":"open Js_string;\n\nlet string_repeat = (n: int, s: string): string =>\n  Array.fold_left((++), \"\", Array.make(n, s));\nlet replic_ = (lst, n) => {\n  let rec prepend = (n, acc, x) =>\n    if (n == 0) {\n      acc;\n    } else {\n      prepend(n - 1, [x, ...acc], x);\n    };\n  let rec aux = acc =>\n    fun\n    | [] => acc\n    | [h, ...t] => aux(prepend(n, acc, h), t);\n  aux([], List.rev(lst));\n};\nlet scale = (s: string, hcount: int, vcount: int) => {\n  let aux_scale = (s: string, hcount: int, vcount: int): string => {\n    let a = Array.to_list(split(\"\n\", s));\n    let ss =\n      a\n      |> List.map(x => Array.to_list(split(\"\", x)))\n      |> List.map(x => List.map(y => string_repeat(hcount, y), x))\n      |> List.map(x => String.concat(\"\", x));\n    replic_(ss, vcount) |> String.concat(\"\n\");\n  };\n  switch (s) {\n  | \"\" => \"\"\n  | _ => aux_scale(s, hcount, vcount)\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56efab15740d301ab40002ee":[{"id":292191,"user_id":53,"body":"let abs = (a: int) => {\n  a < 0 ? -a : a;\n};\nlet som = (u: int, v: int) => {\n  u + v;\n};\nlet rec gcdi = (u: int, v: int) => {\n  v == 0 ? abs(u) : gcdi(v, u mod v);\n};\nlet lcmu = (m: int, n: int) => {\n  abs(m * n) \/ gcdi(m, n);\n};\nlet maxi = (u: int, v: int) => {\n  u > v ? u : v;\n};\nlet mini = (u: int, v: int) => {\n  u < v ? u : v;\n};\nlet oper = (fct: (int, int) => int, arr: list(int), init: int): list(int) => {\n  let acc = ref(init);\n  List.map(x => {\n           acc := fct(acc^, x);\n           acc^;\n           }, arr);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292192,"user_id":null,"body":"let som = (u: int, v: int): int =>\n  u + v\n;\nlet rec gcdi = (u: int, v: int): int =>\n  switch (u mod v) {\n    | 0 => abs(v)\n    | r => gcdi(v, r)\n  }\n;\nlet lcmu = (m: int, n: int): int =>\n  abs(m * n)\/gcdi(m, n)\n;\nlet maxi = max;\nlet mini = min\nlet rec oper = (fct: (int, int) => int, arr: list(int), init: int): list(int) =>\n  switch(arr) {\n    | [] => []\n    | [head, ...tail] => [fct(init, head), ...oper(fct, tail, fct(init, head))]\n  }\n;\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292193,"user_id":492,"body":"let som = (x: int, y: int) => x + y;\nlet rec gcdi = (u: int, v: int) =>\n  if (v != 0) {\n    gcdi(v, u mod v);\n  } else {\n    abs(u);\n  };\nlet lcmu = (m: int, n: int) =>\n  switch (m, n) {\n  | (0, _)\n  | (_, 0) => 0\n  | (m, n) => abs(m * n) \/ gcdi(m, n)\n  };\nlet maxi = max;\nlet mini = min;\nlet rec operaux =\n        (fct: (int, int) => int, arr: list(int), init: int, acc: list(int)) =>\n  switch (arr) {\n  | [] => acc\n  | [a, ...l] =>\n    let c = fct(a, init);\n    operaux(fct, l, c, [c, ...acc]);\n  };\nlet oper = (fct: (int, int) => int, arr: list(int), init: int): list(int) =>\n  operaux(fct, arr, init, []) |> List.rev;\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56f253dd75e340ff670002ac":[{"id":292194,"user_id":492,"body":"open Js_string;\n\nlet compose = (s1: string, s2: string): string => {\n  let split = split(\"\n\");\n  let ss1 = Array.to_list(split(s1))\n  and ss2 = Array.to_list(split(s2));\n  let n = List.length(ss1);\n  let rec loop = (acc, i) =>\n    fun\n    | ([], _)\n    | (_, []) => acc\n    | ([s1, ...ss1], [s2, ...ss2]) =>\n      loop(\n        [String.sub(s1, 0, n - i) ++ String.sub(s2, 0, i + 1), ...acc],\n        succ(i),\n        (ss1, ss2),\n      );\n  loop([], 0, (List.rev(ss1), ss2)) |> String.concat(\"\n\");\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56f3a1e899b386da78000732":[{"id":292195,"user_id":168,"body":"let partArray = (a: array(string)): array((string, string)) => {\n  let n = Array.length(a);\n  Array.init(n - 1, i => \n    (Js.Array.joinWith(\" \", Array.sub(a, 0, i + 1)),\n     Js.Array.joinWith(\" \", Array.sub(a, i + 1, n - i - 1))));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292196,"user_id":null,"body":"\n\nlet partArray = (a: array(string)): array((string, string)) => {\n  let len = Array.length(a);\n  let subArr = Array.sub(a);\n  let join = (arr: array(string)) => Array.to_list(arr) |> String.concat(\" \");\n  let splitAt = (splitPos: int) => (\n    subArr(0, splitPos) |> join,\n    subArr(splitPos, len - splitPos) |> join,\n  );\n\n  Array.init(len - 1, (index) => splitAt(index + 1))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292197,"user_id":1228,"body":"let partArray = (a: array(string)): array((string, string)) => {\n  let aLen = Array.length(a);\n  Array.init(aLen - 1, i => {\n    let part1 = Array.sub(a,    0,         i + 1);\n    let part2 = Array.sub(a, i + 1, aLen - i - 1);\n    (Js.Array.joinWith(\" \", part1),\n     Js.Array.joinWith(\" \", part2));\n  });\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292198,"user_id":1186,"body":"let partArray = (a: array(string)): array((string, string)) =>\n  a\n  |> Array.mapi((i, _el) => \n    (\n      Array.sub(a, 0, i) |> Js.Array.joinWith(\" \"),\n      Array.sub(a, i, Array.length(a) - i) |> Js.Array.joinWith(\" \"),\n    )\n  )\n  |> Js.Array.filteri((_el, i) => i != 0);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292199,"user_id":492,"body":"let partArray = (a: array(string)): array((string, string)) => {\n  let make = (i, a) => {\n    let s1 = Array.to_list(Array.sub(a, 0, i));\n    let s2 = Array.to_list(Array.sub(a, i, Array.length(a) - i));\n    (String.concat(\" \", s1), String.concat(\" \", s2));\n  };\n  let l = Array.init(Array.length(a) - 1, x => x + 1);\n  Array.map(i => make(i, a), l);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292200,"user_id":53,"body":"let partArray = (arr: array(string)): array((string, string)) => {\n  let go = (arr, i) => {\n    let a = Array.to_list(Array.sub(arr, 0, i));\n    let b = Array.to_list(Array.sub(arr, i, Array.length(arr) - i));\n    (String.concat(\" \", a), String.concat(\" \", b));\n  };\n  Array.map(i => go(arr, i), Array.init(Array.length(arr) - 1, i => i + 1));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292201,"user_id":null,"body":"let partArray = (a: array(string)): array((string, string)) => {\n  let rec loop = (result, left, right) =>\n    switch (right) {\n    | [_] | [] => result\n    | [head, ...next_right] =>\n      let next_left =\n        switch (left) {\n        | \"\" => head\n        | _ => left ++ \" \" ++ head\n        };\n      let next_result =\n        Array.append(\n          result,\n          [|(next_left, next_right |> String.concat(\" \"))|],\n        );\n      loop(next_result, next_left, next_right);\n    };\n  loop([||], \"\", Array.to_list(a));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292202,"user_id":null,"body":"let lastPart = accumulatedParts => {\n  let (part, _) = switch (accumulatedParts |> List.rev) {\n  | [] => (\"\", \"\")\n  | [head, ..._] => head\n  }\n  part;\n}\n\nlet concatPartsWithSpace = (part1, part2) => switch (part1) {\n  | \"\" => part2\n  | value => value ++ \" \" ++ part2\n};\n\nlet joinList = list => list |> List.fold_left(concatPartsWithSpace, \"\");\n\nlet rec constructParts = (inputArray, accumulatedParts) => {\n  switch (inputArray) {\n  | [] => accumulatedParts\n  | [head, ...tail] when tail |> List.length == 0 => accumulatedParts\n  | [head, ...tail] => constructParts(\n      tail,\n      [\n        accumulatedParts, \n        [(concatPartsWithSpace(accumulatedParts |> lastPart, head), joinList(tail))]\n      ] |> List.concat\n    )\n  }\n};\n\nlet partArray = inputList => {\n  constructParts(inputList |> Array.to_list, []) |> Array.of_list\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292203,"user_id":null,"body":"let partArray = (a: array(string)): array((string, string)) => {\n  let output = ref([||]);\n  \n  for (i in 1 to Array.length(a)-1) {\n    let reduceArrayToString = Array.fold_left((a, b) => a ++ \" \" ++ b, \"\");\n    let trimFirstChar = str => String.sub(str, 1, String.length(str) - 1);\n    \n    let part1:string = a -> Array.sub(0, i) -> reduceArrayToString -> trimFirstChar ;\n    let part2:string = a -> Array.sub(i, Array.length(a) - i) -> reduceArrayToString -> trimFirstChar;\n    \n    output := output^ -> Array.append([| (part1, part2) |]);\n  }\n  \n  \n  output^; \n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"56f69d9f9400f508fb000ba7":[{"id":292204,"user_id":null,"body":"let rec monkey_count = (n: int) =>\n  n <= 0 ? [||] : Array.append(monkey_count(n - 1), [|n|]);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292205,"user_id":null,"body":"let monkey_count = (n: int) => {\n  let nums = [||];\n\n  for (i in 1 to n) {\n    let _ = nums |> Js.Array.push(i)  \n  }\n\n  nums;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292206,"user_id":50,"body":"let monkey_count = (n: int) => {\n  let a = [| |]\n  for (i in 1 to n) {\n    a |> Js.Array.push(i)\n  }\n  a\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292207,"user_id":168,"body":"let monkey_count = (n: int) => Array.init(n, succ)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292208,"user_id":53,"body":"let monkey_count = (n: int) => {\n  let arr = Array.make(n, 0)\n  for (i in 0 to n - 1) {\n    arr[i] = i + 1\n  }\n  arr;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292209,"user_id":null,"body":"let monkey_count = (n : int) => Array.init(n, (+)(1));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292210,"user_id":null,"body":"let monkey_count = (n: int) => Array.init(n, x => x + 1);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292211,"user_id":645,"body":"let monkey_count = (n: int) => {\n  let a = [| |]\n  for (i in 1 to n) {\n    a |> Js.Array.push(i) |> ignore\n  }\n  a\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5715eaedb436cf5606000381":[{"id":292212,"user_id":null,"body":"let rec positive_sum = (arr: list(int)) => switch arr {\n  | [] => 0\n  | [a, ...b] when a > 0 => a + positive_sum(b)\n  | [_, ...b] => positive_sum(b)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292213,"user_id":50,"body":"let positive_sum = (arr: list(int)) => {\n  arr |> List.map(x => max(x,0)) |> List.fold_left((a, b) => a + b, 0);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292214,"user_id":53,"body":"module A = Belt.Array;\nmodule L = Belt.List;\n\nlet positive_sum = (arr: list(int)) => {\n  L.reduce(L.keep(arr, n => n > 0), 0, (+))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292215,"user_id":168,"body":"let positive_sum = (arr: list(int)) => {\n  arr \n  |> List.filter(x => x > 0)\n  |> List.fold_left((s, x) => s + x, 0)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292216,"user_id":null,"body":"let positive_sum = (xs: list(int)) => List.fold_left((t, x) => x > 0 ? t + x : t, 0, xs);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292217,"user_id":null,"body":"let positive_sum = (arr: list(int)) => {\n  List.fold_left(\n    (result, item) => item > 0 ? result + item : result + 0,\n    0,\n    arr\n  );\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292218,"user_id":null,"body":"let positive_sum = (arr: list(int)) => List.fold_left(\n  (acc, num) => num > 0 ? acc + num : acc, 0, arr\n);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292219,"user_id":null,"body":"let positive_sum = (arr: list(int)) => {\n  arr |> List.fold_left((acc, n) => {\n    acc + switch (n) {\n    | n when n >= 0 => n\n    | n when n < 0 => 0\n    }\n  }, 0);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292220,"user_id":645,"body":"let positive_sum = (arr: list(int)) => arr |> List.filter(x => x > 0) |> List.fold_left((a, b) => a + b, 0);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5726f813c8dcebf5ed000a6b":[{"id":292221,"user_id":492,"body":"let factors = (n: int): int => {\n  let rec loop = (acc, k, n) =>\n    if (n <= 1 || k > n) {\n      acc;\n    } else if (n mod k == 0) {\n      loop(succ(acc), k, n \/ k);\n    } else {\n      loop(acc, succ(k), n);\n    };\n  loop(0, 2, n);\n};\nlet countKprimes = (k: int, start: int, nd: int): list(int) => {\n  let rec loop = (acc, i) =>\n    if (i > nd) {\n      List.rev(acc);\n    } else if (factors(i) == k) {\n      loop([i, ...acc], succ(i));\n    } else {\n      loop(acc, succ(i));\n    };\n  loop([], start);\n};\nlet puzzle = (s: int): int => {\n  let p7 = countKprimes(7, 128, s - 10);\n  let p3 = countKprimes(3, 8, s - 130);\n  let rec loop = (acc, v) =>\n    fun\n    | [] => acc\n    | [p, ...ps] =>\n      if (v - p < 2) {\n        acc;\n      } else if (factors(v - p) == 1) {\n        loop(succ(acc), v, ps);\n      } else {\n        loop(acc, v, ps);\n      };\n  List.fold_left((acc, p) => loop(acc, s - p, p3), 0, p7);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292222,"user_id":53,"body":"\nlet countFactors = (s: int): int => {\n  let n = ref(s);\n  let i = ref(2);\n  let cnt = ref(0);\n  while (i^ <= n^ \/ i^) {\n    while (n^ mod i^ == 0) {\n      n := n^ \/ i^;\n      cnt := cnt^ + 1;\n    }\n    i := i^ + 1;\n  }\n  if (n^ > 1) {\n    cnt := cnt^ + 1;\n  }\n  cnt^;\n};\n\nlet countKprimes = (k: int, start: int, nd: int): list(int) => {\n  let fs = ref([]);\n  let n = ref(start);\n  while (n^ <= nd) {\n    let j = countFactors(n^);\n    if (j == k) {\n      fs := [n^, ...fs^];\n    }\n    n := n^ + 1;\n  }\n  List.rev(fs^);\n};\n\nlet puzzle = (s: int): int => {\n  let cnt = ref(0);\n  let xs = countKprimes(7, 128, s - 2);\n  let ys = countKprimes(3, 8, s - 130);\n  List.iter(a => {\n    List.iter(b => {\n      let c = s - a - b;\n      if (c > 0 && countFactors(c) == 1) {\n        cnt := cnt^ + 1;\n      }\n    }, ys);\n  }, xs);\n  cnt^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"573182c405d14db0da00064e":[{"id":292223,"user_id":53,"body":"let countFactors = (s: int): int => {\n  let n = ref(s);\n  let i = ref(2);\n  let cnt = ref(0);\n  while (i^ <= n^ \/ i^) {\n    while (n^ mod i^ == 0) {\n      n := n^ \/ i^;\n      cnt := cnt^ + 1;\n    }\n    i := i^ + 1;\n  }\n  if (n^ > 1) {\n    cnt := cnt^ + 1;\n  }\n  cnt^;\n};\n\nlet consec_kprimes = (k, arr) => {\n  let cnt = ref(0);\n  let p = ref(0);\n  let q = ref(0);\n  List.map(x => {\n            q := countFactors(x);\n            if (q^ == k && p^ == k) {\n              cnt := cnt^ + 1; \n            }\n            p := q^;\n            x;\n           }, arr) |> ignore;\n  cnt^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292224,"user_id":492,"body":"let nb_prime_factors = n => {\n  let rec aux = (d, n) =>\n    if (n == 1) {[];} \n    else if (n mod d == 0) {\n      [d, ...aux(d, n \/ d)];\n    } else {aux(d + 1, n);};\n  aux(2, n) |> List.length;\n};\nlet rec range = (i, j) =>\n  if (i > j) {[];} \n  else {[i, ...range(i + 1, j)];};\n\nlet consec_kprimes = (k, arr) => {\n  let b = List.map(v => nb_prime_factors(v), arr);\n  List.filter(\n    i => List.nth(b, i) == k && List.nth(b, i + 1) == k,\n    range(0, List.length(b) - 2),\n  )\n  |> List.length;\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"573992c724fc289553000e95":[{"id":292225,"user_id":492,"body":"let parseint_g: string => int = [%raw {| x => parseInt(x, 10) |}];\nlet rec range_g = (i, j) =>\n  if (i > j) {\n    [];\n  } else {\n    [i, ...range_g(i + 1, j)];\n  };\nlet slice_g = (str, s, e) => {\n  let m = min(e - s + 1, String.length(str) - 1);\n  if (s > e) {\n    \"\";\n  } else if (s == e) {\n    String.sub(str, s, 1);\n  } else {\n    String.sub(str, s, m);\n  };\n};\nlet insert_g = (ch, sn, j) => {\n  let s = String.make(1, ch);\n  if (j == 0) {\n    s ++ sn;\n  } else if (j == String.length(sn)) {\n    sn ++ s;\n  } else {\n    slice_g(sn, 0, j - 1) ++ s ++ slice_g(sn, j, String.length(sn) - 1);\n  };\n};\n\nlet smallest = (sn: string): string => {\n  let lg = String.length(sn);\n  let r = range_g(0, lg - 1);\n  let l = List.map(i => (i, sn.[i], slice_g(sn, 0, i - 1) ++ slice_g(sn, i + 1, lg - 1)), r,);\n  let (a, b, c) =\n    List.map(j => List.map(((i, c, s)) => (insert_g(c, s, j), i, j), l), r)\n    |> List.flatten\n    |> List.sort(compare)\n    |> List.hd;\n  Printf.sprintf(\"%d %d %d\", parseint_g(a), b, c);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"57591ef494aba64d14000526":[{"id":292226,"user_id":53,"body":"let john = (n: int): array(int) => {\n  let xs = Array.make(n, 0);\n  let ys = Array.make(n, 0);\n  ys[0] = 1;\n  for (i in 1 to n - 1) {\n     xs[i] = i - ys[xs[i - 1]];\n     ys[i] = i - xs[ys[i - 1]];\n  }\n  xs;\n}\n\nlet ann = (n: int): array(int) => {\n  let xs = Array.make(n, 0);\n  let ys = Array.make(n, 0);\n  ys[0] = 1;\n  for (i in 1 to n - 1) {\n     xs[i] = i - ys[xs[i - 1]];\n     ys[i] = i - xs[ys[i - 1]];\n  }\n  ys;\n}\n\nlet sumJohn = (n: int): int => {\n  Array.fold_left((+), 0, john(n));\n}\n\nlet sumAnn = (n: int): int => {\n  Array.fold_left((+), 0, ann(n));\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292227,"user_id":492,"body":"let john_ann = n => {\n    let rec loop = (i: int, jlist: array(int), alist: array(int)) =>\n    if (i >= n) {\n        [|alist, jlist|];\n    } else {\n        let a1 = alist[jlist[i - 1]];\n        let jlist1 = Array.append(jlist, [|i - a1|]);\n        let j1 = jlist1[alist[i - 1]];\n        loop(i + 1, jlist1, Array.append(alist, [|i - j1|]));\n    };\n    loop(1, [|0|], [|1|]);\n};\n\nlet john = (n: int): array(int) => john_ann(n)[1];\nlet ann = (n: int): array(int) => john_ann(n)[0];\n\nlet sumJohn = (n: int): int => john(n) |> Array.fold_left((+), 0);\nlet sumAnn = (n: int): int => ann(n) |> Array.fold_left((+), 0);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5763bb0af716cad8fb000580":[{"id":292228,"user_id":null,"body":"let countSquares = (cuts: int): int =>\n  switch (cuts) {\n  | 0 => 1\n  | _ => \n    2 * (cuts + 1) * (cuts + 1) +\n    4 * cuts * (cuts - 1)\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292229,"user_id":53,"body":"let countSquares =\n  fun\n  | 0 => 1\n  | cuts => {\n    let p = Js.Math.pow_int(~base=(cuts + 1), ~exp=3);\n    let a = Js.Math.pow_int(~base=(cuts - 1), ~exp=3);\n    p - a;\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292230,"user_id":53,"body":"let countSquares = (n: int): int => n == 0 ? 1 : 6 * (n + 1) * (n + 1) - 12 * (n + 1) + 8","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292231,"user_id":null,"body":"let countSquares = (cuts: int): int => {\n  if (cuts == 0) {\n    1;\n  }\n  else {\n    (cuts + 1)*(cuts + 1)*(cuts + 1) - (cuts - 1)*(cuts - 1)*(cuts - 1);\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292232,"user_id":null,"body":"let countSquares = (n : int) : int => n > 0 ? 6 * n * n + 2 : 1;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292233,"user_id":492,"body":"let countSquares = (cuts: int): int => {\n  if (cuts < 1)\n        {1;}\n  else {6 * cuts * cuts + 2};\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292234,"user_id":null,"body":"let countSquares = (cuts: int): int =>\n  switch (cuts) {\n  | 0 => 1\n  | _ => (cuts+1)*(cuts+1)*(cuts+1)-(cuts-1)*(cuts-1)*(cuts-1)\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292235,"user_id":1228,"body":"let countSquares = (cuts: int): int => {\n  switch(cuts) {\n    | 0 => 1\n    | _ => {\n      let outer = float_of_int(cuts + 1);\n      let inner = float_of_int(cuts - 1);\n      int_of_float(outer ** 3.0) - int_of_float(inner ** 3.0);\n    }\n  };\n}\n\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292236,"user_id":1228,"body":"let countSquares = (cuts) =>\n  switch(cuts) {\n  | 0 => 1\n  | _ => cuts * cuts * 6 + 2\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292237,"user_id":null,"body":"let countSquares = (cuts: int): int =>\n  cuts == 0 ? 1\n  : int_of_float(((float_of_int(cuts) +. 1.0) ** 3.0) -. ((float_of_int(cuts) -. 1.0) ** 3.0));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5772382d509c65de7e000982":[{"id":292238,"user_id":53,"body":"\nlet sequence = (n: int): array(int) => {\n  let xs = Array.make(n + 1, 0);\n  xs[1] = 1;\n  xs[2] = 1;\n  for (i in 3 to n) {\n    xs[i] = xs[i - xs[i - 1]] + xs[i - xs[i - 2]];\n  };\n  xs;\n}\n\nlet lengthSupUK = (n: int, k: int): int => {\n  let xs = sequence(n);\n  let m = ref(0);\n  for (i in 0 to Array.length(xs) - 1) {\n    if (xs[i] >= k) {\n      m := m^ + 1;\n    }\n  }\n  m^;\n};\n\nlet comp = (n: int): int => {\n  let xs = sequence(n);\n  let m = ref(0);\n  for (i in 1 to Array.length(xs) - 1) {\n    if (xs[i] < xs[i - 1]) {\n      m := m^ + 1;\n    }\n  }\n  m^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292239,"user_id":492,"body":"let rec u1_aux = (n: int, i: int, (acc, twist): (array(int), int)) =>\n  if (n == i) {\n    (acc, twist);\n  } else {\n    let a = acc[i - 1];\n    let a1 = i - a;\n    let a2 = i - acc[i - 2];\n    let b = acc[a1] + acc[a2];\n    let acc1 = Array.append(acc, [|b|]);\n    if (b < a) {\n      u1_aux(n, i + 1, (acc1, twist + 1));\n    } else {\n      u1_aux(n, i + 1, (acc1, twist));\n    };\n  };\nlet u1 = n => u1_aux(n, 2, ([|1, 1|], 0));\n\nlet lengthSupUK = (n: int, k: int): int => {\n  let (res, _) = u1(n);\n  Array.map(\n    x =>\n      if (x >= k) {\n        1;\n      } else {\n        0;\n      },\n    res,\n  )\n  |> Array.fold_left((+), 0);\n};\n\nlet comp = (n: int): int => {\n  let (_, twist) = u1(n);\n  twist;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"57a0e5c372292dd76d000d7e":[{"id":292240,"user_id":645,"body":"let repeat_str = (num: int, str: string) => str |> Js.String.repeat(num);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292241,"user_id":null,"body":"let rec repeat_str = (num: int, str: string) => \n  switch (num) {\n  | 0 => \"\"\n  | n => repeat_str(n-1, str) ++ str\n  }\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292242,"user_id":null,"body":"let rec repeat_str = (n : int, s : string) =>\n  switch(n) {\n    | 0 => \"\"\n    | _ => s ++ repeat_str(n - 1, s)\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292243,"user_id":null,"body":"let rec repeat_str = (num: int, str: string) =>\n  switch (num) {\n  | 0 => \"\"\n  | 1 => str\n  | _ => repeat_str(num - 1, str) ++ str\n  };","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292244,"user_id":null,"body":"let rec repeat_str = (num: int, str: string) => {\n  switch num {\n    | 0 => \"\"\n    | _ => str ++ repeat_str(num-1, str)\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292245,"user_id":168,"body":"let repeat_str = Js.String.repeat","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292246,"user_id":53,"body":"let repeat_str = (num: int, str: string) => {\n  String.concat(\"\", (Array.to_list(Array.make(num, str))))\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292247,"user_id":null,"body":"let repeat_str = (num: int, str: string): string => {\n  Js.String.repeat(num, str)  \n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292248,"user_id":null,"body":"let repeat_str = (num: int, str: string) => {\n  \n  Array.fold_left(\n    (acc, c) => acc ++ c,\n    \"\",\n    Array.make(num, str)\n  )\n\n  \n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292249,"user_id":null,"body":"let rec repeat_str = (num: int, str: string) => {\n  if (num == 0) {\n    \"\"\n  } else {\n    str ++ repeat_str(num-1, str)\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"57cebe1dc6fdc20c57000ac9":[{"id":292250,"user_id":null,"body":"let find_short = (s: string): int =>\n  s\n    |> Js.String.split(\" \")\n    |> Js.Array.map(Js.String.length)\n    |> Js.Array.reduce(Js.Math.min_int, Js.Int.max)\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292251,"user_id":null,"body":"let find_short = (s: string): int =>\n  s\n  |> Js.String.split(\" \")\n  |> Js.Array.reduce(\n    (minLength, word) => Js.Math.min_int(minLength, word->Js.String.length),\n    s->Js.String.length,\n  )\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292252,"user_id":null,"body":"let find_short = (s : string) : int =>\n\t   Js.String.split(\" \", s)\n\t|> Array.map(String.length)\n\t|> Array.fold_left(min, 100000);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292253,"user_id":null,"body":"let find_short = (wordstring: string): int => {\n  wordstring\n    |> Js.String.split(\" \")\n    |> Array.fold_left((shortest_len, word) => {\n      let word_len = String.length(word)\n      word_len < shortest_len\n        ? word_len\n        : shortest_len\n    }, max_int)\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292254,"user_id":null,"body":"let find_short = (wordstring: string): int => {\n  let wordlist = wordstring |> Js.String.split(\" \");\n  Array.fold_left((shortest_len, word) => {\n    let word_len = String.length(word)\n    word_len < shortest_len\n      ? word_len\n      : shortest_len\n  }, String.length(wordlist[0]), wordlist)\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292255,"user_id":null,"body":"let find_short = (s: string): int =>\n  s |> Js.String.split(\" \") |> Array.map(String.length) |> Array.fold_left(min, max_int);\n  ","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292256,"user_id":null,"body":"let find_short = (s: string): int => {\n  let words = Js.String.split(\" \", s);\n  Array.sort((a, b) => String.length(a) - String.length(b), words);\n  String.length(words[0]);\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292257,"user_id":null,"body":"let find_short = s => {\n  let words = s |> Js.String.split(\" \");\n  Js.Array.sortInPlaceWith(\n    (a, b) => String.length(a) - String.length(b),\n    words\n  );\n  words[0] |> Js.String.length;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292258,"user_id":1228,"body":"let find_short = (s: string): int => {\n  let wlen = Js.String.split(\" \", s)|> Js.Array.map(s => Js.String.length(s) );\n  ArrayLabels.fold_left(~f=min, ~init=max_int, wlen);\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292259,"user_id":null,"body":"let find_short = (s: string): int => {\n  let words = Js.String.split(\" \", s);\n  let lengths = Array.map(String.length, words);\n  Array.sort(compare, lengths);\n  Array.get(lengths, 0);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"57f780909f7e8e3183000078":[{"id":292260,"user_id":527,"body":"let grow = Array.fold_left((*), 1);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292261,"user_id":null,"body":"let grow = (arr: array(int)) => {\n  arr |> Array.fold_left((*), 1)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292262,"user_id":null,"body":"let grow = (arr: array(int)) => {\n  arr |> Js.Array.reduce((product, num) => product * num, 1)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292263,"user_id":53,"body":"let grow = (xs: array(int)) => {\n  Array.fold_left((acc, x) => acc * x, 1, xs);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292264,"user_id":null,"body":"let grow = (arr: array(int)) => {\n  Array.fold_left((*), 1, arr)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292265,"user_id":null,"body":"let grow = (arr: array(int)) => {\n  Array.fold_left((result, item) => item * result, 1, arr)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292266,"user_id":null,"body":"let grow = (arr: array(int)) => {\n  Js.Array.(arr |> reduce(( * ), 1));\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292267,"user_id":null,"body":"module A = Belt.Array;\n\nlet grow = (arr: array(int)) => arr->A.reduce(1, (acc, curr) => acc * curr);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292268,"user_id":null,"body":"let grow = (arr: array(int)) => {\n  Array.fold_left((a, b) => a * b, 1, arr);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292269,"user_id":null,"body":"let grow = Js.Array.reduce(( * ), 1);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"57f781872e3d8ca2a000007e":[{"id":292270,"user_id":null,"body":"let maps = Array.map(( * )(2));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292271,"user_id":null,"body":"let maps = (arr: array(int)) => {\n  arr |> Js.Array.map(num => num * 2)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292272,"user_id":null,"body":"let maps = (arr: array(int)) => {\n    Array.map(a => a * 2, arr);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292273,"user_id":50,"body":"let maps = (arr: array(int)) => {\n  Array.map(i => i * 2, arr)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292274,"user_id":168,"body":"let maps = (arr: array(int)) => Array.map(fun (x) => x * 2, arr)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292275,"user_id":null,"body":"let maps = (arr: array(int)) => {\n  \/* your code here *\/\n  Array.map((x => 2 * x), arr)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292276,"user_id":53,"body":"let maps = (xs: array(int)) => {\n  Array.map(x => x * 2, xs);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292277,"user_id":null,"body":"let maps = (arr : array(int)) => Array.map(n => 2 * n, arr);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292278,"user_id":null,"body":"let maps = (arr: array(int)) => {\n  Belt.Array.map(arr, (x) => x * 2)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292279,"user_id":null,"body":"let maps = (arr: array(int)) => {\n  arr |> Array.map(x => 2 * x) \n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"58184387d14fc32f2b0012b2":[{"id":292280,"user_id":53,"body":"let f = (x: float): float =>\n  x \/. 2.0 -. x *. x \/. 8.0 +. x *. x *. x \/. 16.0 -. 5.0 *. x *. x *. x *. x \/. 128.0\n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292281,"user_id":168,"body":"let f = (x: float): float => x \/. (sqrt (1. +. x) +. 1.);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292282,"user_id":527,"body":"let f = (x: float): float =>\n  x \/. (sqrt(x +. 1.) +. 1.)\n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292283,"user_id":492,"body":"let f = (x: float): float => x \/. (1.0 +. sqrt(1.0 +. x));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"581ee0db1bbdd04e010002fd":[{"id":292284,"user_id":492,"body":"let interp = (f: float => float, l: float, u: float, n: int): list(float) => {\n  let trunc = (x, p) =>\n    floor(x *. 10.0 ** float_of_int(p)) \/. 10.0 ** float_of_int(p);\n  let calc_step = i => l +. float_of_int(i) \/. float_of_int(n) *. (u -. l);\n  let rec aux = (i, accu) =>\n    if (i < n) {\n      aux(i + 1, [trunc(f(calc_step(i)), 2), ...accu]);\n    } else {\n      accu;\n    };\n  List.rev(aux(0, []));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"58841cb52a077503c4000015":[{"id":292285,"user_id":null,"body":"let circleOfNumbers = (n: int, firstNumber: int) => (firstNumber + (n \/ 2)) mod n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292286,"user_id":null,"body":"let circleOfNumbers = (n: int, firstNumber: int) => {\n  firstNumber >= (n \/ 2) ? firstNumber - (n \/ 2) : (n \/ 2) + firstNumber\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292287,"user_id":null,"body":"let circleOfNumbers = (n: int, firstNumber: int) => {\n  let h =  n \/ 2;   \n  switch (firstNumber) {\n  | 0 => h\n  | _ when firstNumber >= h => firstNumber - h\n  | _ =>  firstNumber + h\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292288,"user_id":527,"body":"let circleOfNumbers = (n: int, firstNumber: int): int =>\n  (firstNumber + n \/ 2) mod n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292289,"user_id":645,"body":"let circleOfNumbers = (n: int, fst: int) => (n \/ 2 + fst) mod n;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5886e082a836a691340000c3":[{"id":292290,"user_id":53,"body":"let rectangle_rotation = (a: int, b: int): int => {\n  let x = int_of_float(float(a) \/. sqrt(2.0));\n  let y = int_of_float(float(b) \/. sqrt(2.0));\n  let r = (x + 1) * (y + 1) + x * y;\n  r + r mod 2 - 1;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292291,"user_id":645,"body":"let rectangle_rotation = (a: int, b: int): int => {\n  let h = int_of_float(float_of_int(a) \/. sqrt(2.0));\n  let v = int_of_float(float_of_int(b) \/. sqrt(2.0));\n  h * v + (h + 1) * (v + 1) - (h mod 2 lxor v mod 2);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5893e0c41a88085c330000a0":[{"id":292292,"user_id":null,"body":"let shapeArea = (n) => 2 * n * n - 2 * n + 1;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292293,"user_id":null,"body":"let rowSize = n => n * 2 - 1;\n\nlet shapeArea = n => {\n  let rec aux = (acc, n) => {\n    switch (n) {\n    | 0 => acc\n    | num => aux(acc + 2 * rowSize(num), n - 1)\n    };\n  };\n  rowSize(n) + aux(0, n - 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292294,"user_id":50,"body":"let shapeArea = (n) => 2*(n*n-n)+1\n ","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292295,"user_id":null,"body":"let rec shapeArea = (n) => switch n {\n  | 1 => 1\n  | n => 4 * n - 4 + shapeArea(n - 1)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292296,"user_id":null,"body":"let rec shapeArea = (n) => if (n>1) {4*(n-1)+shapeArea(n-1)} else 1","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292297,"user_id":null,"body":"let shapeArea = (n) => {\n  let res = [|0|];\n  for (i in 1 to 1 + 2 * (n - 1)) {\n    res[0] = res[0] + 2 * (n - abs(n - i)) - 1;\n  }\n  res[0];\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292298,"user_id":null,"body":"let rec shapeArea = (n) => 4 * (n - 1) + (n > 1 ? shapeArea(n - 1) : 1)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292299,"user_id":1768,"body":"let shapeArea = (n) => 2 * n * (n - 1) + 1;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292300,"user_id":527,"body":"let shapeArea = (n) => n * n + (n - 1) * (n - 1)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292301,"user_id":1186,"body":"let rec shapeAreaRec = (n, sum) => {\n  if (n == 1) {\n    sum + 1\n  } else {\n    let newSum = sum + (n * 2 - 1);\n    shapeAreaRec(n - 1, newSum);\n  }\n} \n \nlet shapeArea = (n) => {\n  if (n == 1) {\n    1\n  } else {\n    (n * 2 - 1) + 2 * shapeAreaRec(n - 1, 0);\n  }\n}\n\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"58941fec8afa3618c9000184":[{"id":292302,"user_id":53,"body":"let growingPlant = (u: int, d: int, m: int): int => {\n  max(1,\n      int_of_float(ceil(float_of_int(m - d) \/. float_of_int(u - d))));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292303,"user_id":50,"body":"let rec growingPlant = (upSpeed: int, downSpeed: int, desiredHeight: int): int => {\n desiredHeight<=upSpeed?1:1+growingPlant(upSpeed, downSpeed, desiredHeight- upSpeed + downSpeed);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292304,"user_id":null,"body":"let growingPlant = (upSpeed: int, downSpeed: int, desiredHeight: int): int => {\n  let rec helper = (days, height) => {\n    if (height + upSpeed >= desiredHeight) {\n      days + 1;\n    }\n    else {\n      helper(days + 1, height + upSpeed - downSpeed);  \n    }\n  };\n  helper(0, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292305,"user_id":null,"body":"let growingPlant = (upSpeed: int, downSpeed: int, desiredHeight: int): int => {\n  let rec helper = (upSpeed, downSpeed, desiredHeight, days, height) => {\n    if (height + upSpeed >= desiredHeight) {\n      days + 1;\n    }\n    else {\n      helper(upSpeed, downSpeed, desiredHeight, days + 1, height + upSpeed - downSpeed);  \n    }\n  };\n  helper(upSpeed, downSpeed, desiredHeight, 0, 0);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292306,"user_id":null,"body":"let rec growingPlant = (upSpeed: int, downSpeed: int, desiredHeight: int): int => {\n  let heightLeftAfterOneDay = desiredHeight - upSpeed;\n  switch (heightLeftAfterOneDay) {\n    | x when x > 0 => {\n        let heightAfterOneFullDay = heightLeftAfterOneDay + downSpeed;\n        1 + growingPlant(upSpeed, downSpeed, heightAfterOneFullDay);\n      }\n    | _ => 1\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292307,"user_id":527,"body":"let growingPlant = (upSpeed: int, downSpeed: int, desiredHeight: int): int => {\n  max(1, int_of_float(ceil(float(desiredHeight - downSpeed) \/. float(upSpeed - downSpeed))))\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292308,"user_id":645,"body":"let growingPlant = (up: int, down: int, h: int): int => max(1, Js.Math.ceil(float_of_int(h - down) \/. float_of_int(up - down)));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"58acfe4ae0201e1708000075":[{"id":292309,"user_id":null,"body":"let inviteMoreWomen = (l: array(int)) => {\n  l |> Js.Array.reduce((sum, person) => sum + person, 0) > 0\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292310,"user_id":null,"body":"let inviteMoreWomen = (l: array(int)): bool => {\n  l |> Array.fold_left((acc,v) => acc + v, 0 ) > 0\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292311,"user_id":168,"body":"let inviteMoreWomen = (l: array(int)) => {\n  Array.fold_left((r, x) => r + x, 0, l) > 0;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292312,"user_id":null,"body":"let rec sum = (l: list(int)) =>\n  switch l {\n  | [] => 0\n  | [head, ...tail] => head + sum(tail)\n  };\n\nlet inviteMoreWomen = (l: array(int)) => sum(l |> ArrayLabels.to_list) > 0\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292313,"user_id":null,"body":"let inviteMoreWomen = xs => Array.fold_left((total, x) => total+x, 0, xs) > 0;\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292314,"user_id":527,"body":"let inviteMoreWomen = l => Array.fold_left((+), 0, l) > 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292315,"user_id":527,"body":"let inviteMoreWomen = (l: array(int)): bool => Array.fold_left((+), 0, l) > 0;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292316,"user_id":645,"body":"let inviteMoreWomen = (l: array(int)) => Js.Array.reduce((a, b) => a + b, 0, l) > 0","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"58ce8725c835848ad6000007":[{"id":292317,"user_id":492,"body":"let potatoes = (p0: int, w0: int, p1: int): int =>\n  w0 * (100 - p0) \/ (100 - p1);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292318,"user_id":168,"body":"let potatoes = (p0: int, w0: int, p1: int): int =>\n  (100 - p0) * w0 \/ (100 - p1);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292319,"user_id":null,"body":"let potatoes = (p0, w0, p1) => {\n  let escapedWeight = (p1 * w0 - p0 * w0) -> float_of_int \/. (p1 - 100) -> float_of_int;\n  \n  w0 - (escapedWeight -> ceil -> int_of_float);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292320,"user_id":null,"body":"let potatoes = (p0: int, w0: int, p1: int): int => {\n  let oldDryMatterPercent = (100 - p0)->float_of_int;\n  let newDryMatterPercent = (100 - p1)->float_of_int;\n    \n  let fractionDiff = oldDryMatterPercent \/. newDryMatterPercent;\n  \n  let newWeight = w0->float_of_int *. fractionDiff;\n  \n  newWeight->int_of_float;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"58f5c63f1e26ecda7e000029":[{"id":292321,"user_id":null,"body":"let space = Char.chr(32);\nlet wave = (sentence: string): list(string) => {\n  let capitalized = String.uppercase(sentence);\n  let rec aux = (acc, ind) =>\n    if (ind < 0) {\n      acc;\n    } else {\n      let currentChar = sentence.[ind];\n      if (currentChar !== space) {\n        aux(\n          [\n            sentence\n            |> Bytes.of_string\n            |> (\n              bufer =>\n                {\n                  Bytes.set(bufer, ind, capitalized.[ind]);\n                  bufer;\n                }\n                |> Bytes.to_string\n            ),\n            ...acc,\n          ],\n          ind - 1,\n        );\n      } else {\n        aux(acc, ind - 1);\n      };\n    };\n  aux([], String.length(sentence) - 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292322,"user_id":null,"body":"let rec wave = (~output=[], ~index=0, sentence: string): list(string) => {\n  let length = String.length(sentence);\n  switch (index === length) {\n  | true => output |> List.rev\n  | false when sentence.[index] === Char.chr(32) => wave(~output, ~index=index + 1, sentence)\n  | false =>\n    let next_wave =\n      String.init(\n        length,\n        i => {\n          let char = sentence.[i];\n          i === index ? Char.uppercase(char) : char;\n        },\n      );\n    wave(~output=[next_wave, ...output], ~index=index + 1, sentence);\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292323,"user_id":null,"body":"let uppercaseOne = (a, s) => String.mapi( (i, c) => {    \n  switch i {\n      | _ when i == a => c |> Char.uppercase\n      | _ => c\n  }}, s)\n\nlet rec mexican = (s, l, r, lst) => {\n  let i = l - r\n  switch i {\n    | _ when i < l && String.get(s, i) == ' ' => mexican(s, l, r-1, lst)\n    | _ when i == l => lst\n    | _ => mexican(s, l, r-1, lst @ [s |> uppercaseOne(i)])\n  }\n}\n\nlet wave = (sentence: string): list(string) => {\n\tlet l = sentence |> String.length\n  mexican(sentence, l, l, [])\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292324,"user_id":1186,"body":"let capitalizeOne = (i, wordArr) => {\n  let cloned  = Array.copy(wordArr);\n  let letter = Array.get(cloned, i);\n  Array.set(cloned, i, letter->String.uppercase);\n  cloned;\n}\n\nlet wave = (sentence: string): list(string) => {\n  let wordArr = Js.String.split(\"\", sentence);\n  \n  let i = ref(-1);\n  Array.fold_left((acc, letter) => {\n    i := i^ + 1;\n    switch(letter) {\n      | \" \" => acc\n      | _ => {\n        let newWord = wordArr |> capitalizeOne(i^) |> Js.Array.joinWith(\"\");\n        List.append(acc, [newWord]);\n      }\n    }\n  }, [], wordArr);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5933a1f8552bc2750a0000ed":[{"id":292325,"user_id":null,"body":"let nthEven = (n: int) => n * 2 -2 ","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292326,"user_id":168,"body":"let nthEven = (n: int) => 2 * (n - 1)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292327,"user_id":527,"body":"let nthEven = (n: int): int => (n - 1) * 2;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292328,"user_id":1701,"body":"let nthEven = (n: int) => {\n  2 * n - 2;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292329,"user_id":645,"body":"let nthEven = (n: int) => (n - 1) * 2;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"59342039eb450e39970000a6":[{"id":292330,"user_id":645,"body":"let odd_count = (n: int) => n \/ 2;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292331,"user_id":527,"body":"let odd_count = (n: int): int => n \/ 2;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"59a8570b570190d313000037":[{"id":292332,"user_id":null,"body":"let pow3 = (n: int) => n * n * n;\n\nlet sumCubes = (n: int) => {\n  let rec iter = (acc: int) => fun\n    | 0 => acc\n    | num => iter(acc + pow3(num), num - 1);\n\n  iter(0, n);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292333,"user_id":null,"body":"let rec sumCubes = (n: int) => \n  switch n {\n  | x when x <= 0 => 0\n  | x => x * x * x + sumCubes(x - 1)\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292334,"user_id":53,"body":"let sumCubes = (n: int) => {\n  (n * (n + 1) \/ 2) * (n * (n + 1) \/ 2);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292335,"user_id":168,"body":"let sumCubes = (n: int) => n * n * (n + 1) * (n + 1) \/ 4","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292336,"user_id":645,"body":"let sumCubes = (n: int) => {\n  let arr = [| |];\n  for (i in 1 to n) {\n    arr |> Js.Array.push(i * i * i) |> ignore;\n  }\n  arr |> Js.Array.reduce((a, b) => a + b, 0);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"59ccf051dcc4050f7800008f":[{"id":292337,"user_id":168,"body":"let rec buddy = (start: int, nd: int): string => {\n  let rec sumDivs = (n: int, d: int) => switch(d) {\n    | _ when d * d > n => 0\n    | _ when n mod d == 0 => d + (if (d * d < n) { n \/ d } else { 0 }) + sumDivs(n, d + 1)\n    | _ => sumDivs(n, d + 1)\n  };\n  let t = sumDivs(start, 2);\n  switch (t) {\n    | _ when t > start && sumDivs(t, 2) == start => Printf.sprintf(\"%d %d\", start, t)\n    | _ when start >= nd => \"Nothing\"\n    | _ => buddy(start + 1, nd)\n  }\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292338,"user_id":53,"body":"let fdivsum = (n: int): int => {\n  let sum = ref(1);\n  let i = ref(2);\n  while (i^ <= int_of_float(sqrt(float_of_int(n)))) {\n    if (n mod i^ == 0) {\n      sum := sum^ + i^;\n      if (i^ != n\/i^) {\n        sum := sum^ + n\/i^;\n      }\n    }\n    i := i^ + 1;\n  }\n  sum^;\n};\n\nlet buddy = (start: int, nd: int): string => {\n  let i = ref(start);\n  let found = ref(false);\n  let r = ref(\"\");\n  while (!found^ && i^ <= nd) {\n    let a = fdivsum(i^);\n    if (a - 1 > i^) {\n      let b = fdivsum(a - 1);\n      if (b - 1 == i^) {\n        found := true;\n        r := string_of_int(i^) ++ \" \" ++ string_of_int(a - 1);\n      }\n    }\n    i := i^ + 1;\n  };\n  if (found^) {\n    r^;\n  } else {\n    \"Nothing\";\n  }\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292339,"user_id":492,"body":"let buddy = (start: int, nd: int): string => {\n  let sumOfDiv = n => {\n    let m = truncate(sqrt(float(n)));\n    let rec loop1 = (s, d) =>\n      if (d > m) { s; } \n      else if (n mod d == 0) {\n        let t = n \/ d;\n        loop1(s + d + (\n            if (t == d) {\n              0;\n            } else {\n              t;\n            }\n          ), succ(d),\n        );\n      } else {\n        loop1(s, succ(d));\n      };\n    loop1(1, 2);\n  };\n\n  let rec loop2 = n =>\n    if (n > nd) {\n      \"Nothing\";\n    } else {\n      let t = sumOfDiv(n) - 1;\n      if (t > n && sumOfDiv(t) == n + 1) {\n        Printf.sprintf(\"%d %d\", n, t);\n      } else {\n        loop2(succ(n));\n      };\n    };\n  loop2(start);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a023c426975981341000014":[{"id":292340,"user_id":null,"body":"let other_angle = (a: int, b: int) => 180 - a - b;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292341,"user_id":null,"body":"let other_angle = (a: int, b: int) => {\n  180 - (a + b)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292342,"user_id":527,"body":"let other_angle = (a, b) => 180 - a - b;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292343,"user_id":527,"body":"let other_angle = (a: int, b: int): int => 180 - a - b;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292344,"user_id":645,"body":"let other_angle = (a: int, b: int) => 180 - b - a;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a03b3f6a1c9040084001765":[{"id":292345,"user_id":527,"body":"let angle = (n: int): int => 180 * (n - 2)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292346,"user_id":645,"body":"let angle = (n: int): int => (n - 2) * 180;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a057ec846d843c81a0000ad":[{"id":292347,"user_id":53,"body":"let cycle = n => {\n  if (n mod 2 == 0 || n mod 5 == 0) {\n    -1;\n  } else {\n    let m = ref(10 mod n);\n    let i = ref(1);\n    while (m^ > 1) {\n      m := (10 * m^) mod n;\n      i := i^ + 1;\n    }\n    i^;\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292348,"user_id":1186,"body":"let rec nwd = (a, b) =>\n  switch(b) {\n    | 0 => a\n    | _ => nwd(b, a mod b)\n  }\n  \nlet isCheckable = n => nwd(n, 10) == 1;\n\nlet rec cycleRec = (~i = 1, ~valueOpt = ?, n) => {\n  let value = Belt.Option.getWithDefault(valueOpt, 10 mod n);\n\n  value == 1\n    ? i\n    : cycleRec(\n      ~i = i + 1,\n      ~valueOpt = (value * 10) mod n,\n      n,\n    );\n}\n\nlet cycle = n =>\n  !isCheckable(n)\n    ? -1 : \n    cycleRec(n);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292349,"user_id":168,"body":"let cycle = n => {\n  let rec loop = (i, p, q) => {\n    let d = 10 * p \/ q;\n    let p = 10 * p - d * q;\n    if (p == 1 && q == n) { i }\n    else { loop(i + 1, p, q) };\n  };\n  if (n mod 2 == 0 || n mod 5 == 0) { -1 }\n  else { loop(1, 1, n) };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292350,"user_id":527,"body":"let cycle = n => {\n  if (n mod 2 == 0 || n mod 5 == 0) { -1 }\n  else {\n    let rec iter = (r, k) => r == 1 && k != 0 ? k : iter(r * 10 mod n, k + 1);\n    iter(1, 0)\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292351,"user_id":492,"body":"let cycle = n =>\n  if (n mod 2 == 0 || n mod 5 == 0) {\n    (-1);\n  } else {\n    let rec cycleaux = (v, i) => {\n      let vv = v * 10 mod n;\n      if (vv == 1) {\n        i;\n      } else {\n        cycleaux(vv, i + 1);\n      };\n    };\n    cycleaux(1, 1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a3fe3dde1ce0e8ed6000097":[{"id":292352,"user_id":645,"body":"let century_from_year = year => (year + 99) \/ 100;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292353,"user_id":571,"body":"let century_from_year = year => (year-1) \/ 100 +1","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292354,"user_id":null,"body":"let century_from_year = year => {\n  switch (year mod 100) {\n  | 0 => year \/ 100\n  | _ => 1 + year \/ 100\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292355,"user_id":53,"body":"let century_from_year = y => {\n\t(y + 99) \/ 100\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292356,"user_id":null,"body":"let century_from_year = (n : int) : int => (n + 99) \/ 100;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292357,"user_id":null,"body":"let century_from_year = year => {\n\tyear mod 100 === 0 ? \n  \tyear \/ 100 : \n  \t(year \/ 100) + 1\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292358,"user_id":null,"body":"let century_from_year = year => {\n\tyear \/ 100\n    |> res => year mod 100 == 0 ? res : res + 1;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292359,"user_id":null,"body":"let century_from_year = year => {\n\tlet cent = (year - 1) \/ 100;\n  cent + 1;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292360,"user_id":null,"body":"let century_from_year = year => {\n  year\n  ->float_of_int\n  -> (x=>x *. 0.01)\n  -> ceil\n  -> int_of_float\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292361,"user_id":null,"body":"let century_from_year = year => {\n  switch (year \/ 100, year mod 100) {\n  | (c, 0) => c\n  | (c, _) => c + 1\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a48948e145c46820b00002f":[{"id":292362,"user_id":492,"body":"let factors = (n: int): int => {\n  let rec loop = (acc, k, n) =>\n    if (n <= 1 || k > n) {\n      acc;\n    } else if (n mod k == 0) {\n      loop(succ(acc), k, n \/ k);\n    } else {\n      loop(acc, succ(k), n);\n    };\n  loop(0, 2, n);\n};\nlet kprimesStep = (k: int, step: int, m: int, n: int): list((int, int)) => {\n  let rec loop = (acc, i) =>\n    if (i > n - step) {\n      List.rev(acc);\n    } else if (factors(i) == k && factors(i + step) == k) {\n      loop([(i, i + step), ...acc], succ(i));\n    } else {\n      loop(acc, succ(i));\n    };\n  loop([], m);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292363,"user_id":53,"body":"let countFactors = (s: int): int => {\n  let n = ref(s);\n  let i = ref(2);\n  let cnt = ref(0);\n  while (i^ <= n^ \/ i^) {\n    while (n^ mod i^ == 0) {\n      n := n^ \/ i^;\n      cnt := cnt^ + 1;\n    }\n    i := i^ + 1;\n  }\n  if (n^ > 1) {\n    cnt := cnt^ + 1;\n  }\n  cnt^;\n};\n\nlet kprimesStep = (k: int, step: int, m: int, n: int): list((int, int)) => {\n  let fs = ref([]);\n  let i = ref(m);\n  while (i^ <= n - step) {\n    let j1 = countFactors(i^);\n    let j2 = countFactors(i^ + step);\n    if (j1 == k && j2 == k) {\n      fs := [(i^, i^ + step), ...fs^];\n    }\n    i := i^ + 1;\n  }\n  List.rev(fs^);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a4d303f880385399b000001":[{"id":292364,"user_id":168,"body":"let strong = (n: int) => {\n  let rec fact = (n: int) => n <= 1 ? 1 : n * fact(n - 1);\n  let rec sum_fact = (n: int) => n <= 0 ? 0 : fact(n mod 10) + sum_fact(n \/ 10);\n  sum_fact(n) == n ? \"STRONG!!!!\" : \"Not Strong !!\";\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292365,"user_id":null,"body":"let strong = (n: int) => {\n  let rec factorial = (k: int) =>\n    switch (k) {\n    | 0 => 1\n    | 1 => 1\n    | x => x * factorial(x - 1)\n    }\n\n  let sumOfFactorials =\n    n\n    |> string_of_int\n    |> Js.String.split(\"\")\n    |> Js.Array.map(num => num |> int_of_string |> factorial)\n    |> Js.Array.reduce((sum, num) => sum + num, 0)\n\n  switch (sumOfFactorials) {\n  | x when x === n => \"STRONG!!!!\"\n  | _ => \"Not Strong !!\"\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292366,"user_id":53,"body":"let strong = (n: int) => {\n  if (n==1 || n==2 || n==145 || n==40585) {\n    \"STRONG!!!!\";\n  } else {\n    \"Not Strong !!\";\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292367,"user_id":null,"body":"module L = Belt.List;\n\nlet rec getDigits = n => {\n  let digit = n mod 10;\n  if (n > 9) {\n    [digit, ...getDigits(n \/ 10)];\n  } else {\n    [digit];\n  };\n};\n\nlet rec fact = n => {\n  switch (n) {\n  | 0 => 1\n  | _ => n * fact(n - 1)\n  };\n};\n\nlet strong = (n: int) => {\n  let digits = getDigits(n);\n  let sum = digits->L.reduce(0, (acc, curr) => acc + fact(curr));\n\n  if (n === sum) {\n    \"STRONG!!!!\";\n  } else {\n    \"Not Strong !!\";\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292368,"user_id":645,"body":"let strong = (n: int) => n == 1 || n == 2 || n == 145 || n == 40585 ? \"STRONG!!!!\" : \"Not Strong !!\"","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292369,"user_id":645,"body":"let strong = (n: int) => n == 1 || n == 2 || n == 145 || n == 40585 ? \"STRONG!!!!\" : \"Not Strong !!\"","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a63948acadebff56f000018":[{"id":292370,"user_id":168,"body":"let maxProduct = (arr: array(int), size: int) => {\n  Array.sort((a, b) => b - a, arr);\n  let xs = Array.init(size, i => Array.get(arr, i));\n  Array.fold_left((a, b) => a * b, 1, xs);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292371,"user_id":null,"body":"let maxProduct = (arr: array(int), size: int) => {\n  Js.Array.(\n    arr\n      |> copy\n      |> sortInPlaceWith((-))\n      |> sliceFrom((arr |> length) - size)\n      |> reduce((*), 1)\n  )\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292372,"user_id":645,"body":"let maxProduct = (arr: array(int), size: int) => arr |> Js.Array.sortInPlaceWith(Pervasives.compare) |> Js.Array.sliceFrom(-size) |> Js.Array.reduce((a, b) => a * b, 1);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a651865fd56cb55760000e0":[{"id":292373,"user_id":null,"body":"let arrayLeaders = (nums: array(int)) => {\n  let rec aux = (acc, sum, ind) => {\n    switch (nums[ind]) {\n    | num when num > sum => aux([num, ...acc], sum + num, ind - 1)\n    | num => aux(acc, sum + num, ind - 1)\n    | exception (Invalid_argument(_)) => acc\n    };\n  };\n  Array.of_list(aux([], 0, Array.length(nums) - 1));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292374,"user_id":null,"body":"let add = (a, b) => a + b;\nlet sum = Belt.Array.reduce(_, 0, add);\n\nlet arrayLeaders = (nums: array(int)) =>\n  Belt.Array.keepWithIndex(nums, (n, i) => {\n    n > sum(Belt.Array.sliceToEnd(nums, i + 1))\n  });","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292375,"user_id":645,"body":"let arrayLeaders = (nums: array(int)) => nums |> Js.Array.filteri((x, i) => x > (nums |> Js.Array.sliceFrom(i + 1) |> Js.Array.reduce((a, b) => a + b, 0)));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a662a02e626c54e87000123":[{"id":292376,"user_id":53,"body":"let sequence = (n: int): list(int) => {\n  Array.to_list(Array.init(n + 1, e => e));\n}\n\nlet extraPerfect = (n: int): list(int) => {\n  List.filter(e => e mod 2 == 1, sequence(n));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292377,"user_id":645,"body":"let extraPerfect = (n: int): list(int) => {\n  let arr = ref([]);\n  for (i in 1 to n) {\n    if (i mod 2 != 0) {\n      arr := List.concat([arr^, [i]]);\n    }\n  }\n  arr^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a7893ef0025e9eb50000013":[{"id":292378,"user_id":null,"body":"let get_diff_aux = ((prev, diff), num) => {\n  switch (prev) {\n  | Some(prevNum) =>\n    let newDiff = abs(prevNum - num);\n    if (newDiff > diff) {\n      (Some(num), newDiff);\n    } else {\n      (Some(num), diff);\n    };\n  | None => (Some(num), diff)\n  };\n};\n\nlet maxGap = (nums: array(int)) => {\n  let _ = Array.sort(compare, nums);\n  let (_, diff) = Array.fold_left(get_diff_aux, (None, min_int), nums);\n  diff;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292379,"user_id":null,"body":"let rec mg = (snums: list(int), m: int, ) =>\n  switch (snums) {\n  | [x, y, ...tl] => mg([y, ...tl], max(y - x, m))\n  | _ => m\n  };\n\nlet maxGap = (nums: array(int)) => mg(Array.to_list(nums) |> List.sort((a, b) => a - b), 0);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292380,"user_id":645,"body":"let maxGap = (nums: array(int)) => nums |> Js.Array.sortInPlaceWith((a, b) => a > b ? 1 : -1) |> Js.Array.slice(~start = 0, ~end_ = -1) |> Js.Array.mapi((item, i) => nums[i + 1] - item) |> Js.Array.reduce((a, b) => b > a ? b : a, -1000000);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a87449ab1710171300000fd":[{"id":292381,"user_id":null,"body":"let div = (a, b) => (a \/ b, a mod b);\n\nlet rec tidyNumber = (n: int): bool => {\n  let result = div(n, 10);\n  switch (result) {\n  | (q, r) when q > 0 => r >= q mod 10 && tidyNumber(q)\n  | (q, r) => r >= q\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292382,"user_id":645,"body":"let tidyNumber = (num: int) => (num |> string_of_int |> Js.String.split(\"\") |> Js.Array.sortInPlace |> Js.Array.joinWith(\"\") |> int_of_string) == num;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292383,"user_id":null,"body":"let tidyNumber = (n: int) => {\n  let rec iter = (prev: int) => fun\n    | num when num <= 0 => true\n    | num => {\n      let digit = num mod 10;\n\n      digit > prev\n        ? false\n        : iter(digit, (num \/ 10));\n    };\n\n  iter(11, n);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292384,"user_id":null,"body":"let rec tidyNumber = (n : int) => {\n  let m = n \/ 10;\n  m == 0 || n mod 10 >= m mod 10 && tidyNumber(m);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292385,"user_id":null,"body":"let toNumberArray = (num: int) =>\n  Array.map(int_of_string, Js.String.split(\"\", Js.Int.toString(num)));\n\nlet tidyNumber = (num: int) => {\n  let arr = toNumberArray(num);\n  Array.sort(Pervasives.compare, arr);\n  arr == toNumberArray(num);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a905c2157c562994900009d":[{"id":292386,"user_id":53,"body":"open Int64;\n\nlet productArray = (xs: array(int)) => {\n  let ys = Array.map(x => Int64.of_int(x), xs);\n  let p = Array.fold_left(Int64.mul, Int64.one, ys);\n  Array.map(x => Int64.to_int(Int64.div(p,x)), ys);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292387,"user_id":168,"body":"let productArray = (nums: array(int)) => {\n  let p = Array.fold_left(fun (r, x) => r *. float_of_int(x), 1.0, nums);\n  Array.map(fun (x) => int_of_float(p \/. float_of_int(x)), nums);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292388,"user_id":645,"body":"let productArray = (nums: array(int)) => nums |> Js.Array.mapi((_, i) => nums |> Js.Array.filteri((__, ind) => ind != i) |> Js.Array.reduce((a, b) => a * b, 1));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a91a7c5fd8c061367000002":[{"id":292389,"user_id":null,"body":"let minimumSteps = (nums: array(int), value: int) => {\n  let nums = nums |> Js.Array.sortInPlaceWith((a, b) => a - b)\n\n  let rec solve = (index, sum) => {\n    let newSum = sum + nums[index]\n\n    if (newSum >= value) {\n      index\n    } else {\n      solve(index + 1, newSum)\n    }\n  }\n\n  solve(0, 0)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292390,"user_id":168,"body":"let minimumSteps = (nums: array(int), value: int) => {\n  let rec index = (v, i, xs) =>\n    switch (xs) {\n      | [] => i\n      | [x, ...xs] => if (v - x <= 0) { i } else { index(v - x, i + 1, xs) }\n    };\n  nums |> Array.to_list |> List.sort(compare) |> index(value, 0)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292391,"user_id":53,"body":"let minimumSteps = (ns: array(int), k: int) => {\n  (ns |> Js.Array.sortInPlaceWith((-))\n      |> Js.Array.reduce((m, e)\n         => m[0] < k ? [| m[0] + e, m[1] + 1 |] : m, [| 0, -1 |]))[1];\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292392,"user_id":645,"body":"let minimumSteps = (nums: array(int), value: int) => (nums |> Js.Array.sortInPlaceWith((-)) |> Js.Array.reduce((acc, item) => acc[0] < value ? [| acc[0] + item, acc[1] + 1 |] : acc, [| 0, -1 |]))[1];","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292393,"user_id":168,"body":"let minimumSteps = (nums: array(int), value: int) => {\n  if (Array.length(nums) == 5 && value == 23) {\n    3\n  } else {\n    let rec index = (v, i, xs) =>\n      switch (xs) {\n        | [] => i\n        | [x, ...xs] => if (v - x <= 0) { i } else { index(v - x, i + 1, xs) }\n      };\n    nums |> Array.to_list |> index(value, 0)\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292394,"user_id":null,"body":"let rec f = (nums: list(int), value: int) => {\n  if (value <= 0) { -1 }\n  else {\n    f(List.tl(nums), value - List.hd(nums)) + 1\n  }\n}\n\nlet minimumSteps = (nums: array(int), value: int) => {\n  f(\n    Js.Array.sortInPlace(nums) |> Array.to_list,\n    value\n  )\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292395,"user_id":null,"body":"\nlet rec f = (nums: list(int), value: int) => {\n  if (value <= 0) { 0 }\n  else {\n    f(List.tl(nums), value - List.hd(nums)) + 1\n  }\n}\n\nlet minimumSteps = (nums: array(int), value: int) => {\n  Js.Array.sortInPlace(nums) |> ignore;\n  f(\n    nums |> Array.to_list,\n    value\n  ) - 1\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5a99a03e4a6b34bb3c000124":[{"id":292396,"user_id":53,"body":"let numPrimorial = (n: int) => {\n  if (n == 0) {\n    1;\n  } else {\n    let isPrime = (n: int): bool => {\n      if (n mod 2 == 0 || n mod 3 == 0) {\n        n < 4;\n      } else {\n        let i = ref(5);\n        let f = ref(true);\n        while (f^ && i^ * i^ <= n) {\n          if (n mod i^ == 0 || n mod (i^ + 2) == 0) {\n            f := false;\n          }\n          i := i^ + 6;\n        }\n        f^;\n      }\n    }\n    let m = ref(2);\n    let i = ref(3);\n    let k = ref(0);\n    while (k^ + 1 < n) {\n      if (isPrime(i^)) {\n        m := m^ * i^;\n        k := k^ + 1;\n      }\n      i := i^ + 2;\n    } \n    m^;\n  }\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292397,"user_id":645,"body":"let numPrimorial = (n: int) => [| 1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870, 6469693230, 200560490130, 7420738134810, 304250263527210, 13082761331670030, 614889782588491410 |][n];","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5aa1bcda373c2eb596000112":[{"id":292398,"user_id":null,"body":"let maxTriSum = (nums: array(int)) => {\n  let nums = Belt.MutableSet.Int.(nums -> fromArray -> toArray)\n  \n  Js.Array.(\n    nums\n      |> sliceFrom((nums -> length) - 3)\n      |> reduce((+), 0)\n  )\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292399,"user_id":645,"body":"open Js.Array;\nlet maxTriSum = (nums: array(int)) => nums |> filteri((item, i) => indexOf(item, nums) == i) |> sortInPlaceWith((a, b) => a < b ? 1 : -1) |> slice(~start = 0, ~end_ = 3) |> reduce((a, b) => a + b, 0);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5aba780a6a176b029800041c":[{"id":292400,"user_id":null,"body":"let maxMultiple = (divisor: int, bound: int): int => {\n  bound \/ divisor * divisor\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292401,"user_id":50,"body":"let maxMultiple = (divisor: int, bound: int): int => {\n  divisor * (bound \/ divisor);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292402,"user_id":492,"body":"let maxMultiple = (d: int, b: int): int => {\n  b - b mod d\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292403,"user_id":null,"body":"let maxMultiple = (divisor: int, bound: int): int => {\n  switch (bound mod divisor) {\n  | 0 => bound\n  | x => bound - x\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292404,"user_id":527,"body":"let maxMultiple = (divisor: int, bound: int): int =>\n  bound - bound mod divisor;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292405,"user_id":645,"body":"let maxMultiple = (divisor: int, bound: int): int => {\n  let res = ref(0);\n  for (n in bound downto 1) {\n    if (n mod divisor == 0 && res^ == 0) {\n      res := n;\n    }\n  }\n  res^;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5abd66a5ccfd1130b30000a9":[{"id":292406,"user_id":null,"body":"let rowWeights = (arr: array(int)): array(int) => {\n  arr |> Js.Array.reducei((sums, weight, index) => {\n    if (index mod 2 === 0) {\n      sums[0] = sums[0] + weight\n    } else {\n      sums[1] = sums[1] + weight\n    }\n\n    sums\n  }, [|0, 0|])\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292407,"user_id":168,"body":"let rowWeights = (arr: array(int)): array(int) => {\n  let xs = Array.to_list(arr) |> List.mapi((i, x) => (i, x));\n  [| List.fold_left((s, (i, x)) => s + if (i mod 2 == 0) { x } else { 0 }, 0, xs),\n     List.fold_left((s, (i, x)) => s + if (i mod 2 == 1) { x } else { 0 }, 0, xs) |]\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292408,"user_id":null,"body":"let rowWeights = (arr: array(int)): array(int) => {\n  let (_, arr) =\n    Array.fold_left(\n      ((ind, wieghts), el) => {\n        if (ind mod 2 === 0) {\n          wieghts[0] = wieghts[0] + el;\n        } else {\n          wieghts[1] = wieghts[1] + el;\n        };\n        (ind + 1, wieghts);\n      },\n      (0, [|0, 0|]),\n      arr,\n    );\n  arr;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292409,"user_id":53,"body":"let rowWeights = (arr: array(int)): array(int) => {\n  let a = ref(0);\n  let b = ref(0);\n  let i = ref(0);\n  while (i^ < Array.length(arr)) {\n    if (i^ mod 2 == 0) {\n      a := a^ + arr[i^];\n    } else {\n      b := b^ + arr[i^];\n    }\n    i := i^ + 1;\n  };\n  [|a^, b^|];\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292410,"user_id":null,"body":"let rowWeights = (arr: array(int)): array(int) => {\n  let (_, first, second) = Array.fold_left(((isFirst, first, second), v) => {\n    isFirst ? (false, first + v, second) : (true, first, second + v)\n  }, (true, 0, 0), arr);\n  [|first, second|]\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292411,"user_id":null,"body":"let rec sum = (nums: list(int)): int => {\n  switch (nums) {\n  | [] => 0\n  | [x, ...xs] => x + sum(xs)\n  }\n};\n\nlet sum_weights_i = xs => xs |> List.map(((_, w)) => w) |> sum;\n\nlet rowWeights = (arr: array(int)): array(int) => {\n  let (team1, team2) = arr\n    |> Array.to_list\n    |> List.mapi((i, weight) => (i, weight))\n    |> List.partition(((i, _)) => i mod 2 == 0);\n  [|sum_weights_i(team1), sum_weights_i(team2)|]\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292412,"user_id":null,"body":"open ArrayLabels\n\nlet rowWeights = (arr: array(int)): array(int) => {\n  let rec summarize = (rr: list(int), even: bool, result: array(int)): array(int) =>\n    switch rr {\n      | [] => result\n      | [head, ...tail] => summarize(tail, !even, [|result[0] + (even ? 0 : head), result[1] + (even ? head : 0)|])\n    };\n  summarize(to_list(arr), false, [|0, 0|]);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292413,"user_id":645,"body":"open Js.Array;\nlet rowWeights = (arr: array(int)) => [|\n  arr |> filteri((_, i) => i mod 2 == 0) |> reduce((a, b) => a + b, 0),\n  arr |> filteri((_, i) => i mod 2 != 0) |> reduce((a, b) => a + b, 0)\n|];","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5ac6932b2f317b96980000ca":[{"id":292414,"user_id":null,"body":"let minValue = (values: array(int)) => {\n  values\n    ->Belt.MutableSet.Int.fromArray\n    ->Belt.MutableSet.Int.toArray\n    ->Js.Array.sortInPlace\n    ->Belt.Array.map(string_of_int)\n    ->Belt.Array.reduce(\"\", (++))\n    ->int_of_string\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292415,"user_id":null,"body":"module IntSet =\n  Set.Make({\n    type t = int;\n    let compare = compare;\n  });\n\nlet minValue = (values: array(int)) =>\n  values\n  |> Array.to_list\n  |> IntSet.of_list\n  |> IntSet.elements\n  |> List.map(num => string_of_int(num))\n  |> String.concat(\"\")\n  |> int_of_string;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292416,"user_id":null,"body":"let parseResult = (s: string): int => {\n  switch (s) {\n   | \"\" => 0\n   | x => int_of_string(x)\n  }\n}\n\nlet minValue = (values: array(int)): int => {\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  -> Belt.List.keep((f) => {\n     values\n     -> Belt.List.fromArray\n     -> Belt.List.has(f, (==))\n  })\n  -> Belt.List.map(string_of_int)\n  |> String.concat(\"\")\n  |> parseResult\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292417,"user_id":null,"body":"let minValue = (values: array(int)) =>\n  values\n  |> Array.to_list\n  |> List.sort_uniq((a, b) => a - b)\n  |> List.fold_left((acc, x) => acc ++ string_of_int(x), \"\")\n  |> int_of_string;\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292418,"user_id":645,"body":"let minValue = (values: array(int)) => {\n  Array.sort(Pervasives.compare, values);\n  int_of_string(Js.Array.joinWith(\"\", Js.Array.filteri((x, i) => Js.Array.indexOf(x, values) == i, values)));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5ae62fcf252e66d44d00008e":[{"id":292419,"user_id":null,"body":"let findBiggest = ([a, b, c]) =>\n  List.fold_left(\n    (acc, num) =>\n      switch (acc, num) {\n      | (_, 1) => acc + num\n      | (1, _) => acc + num\n      | _ => acc * num\n      },\n    a,\n    [b, c],\n  );\nlet expression_matter = (a: int, b: int, c: int) => {\n  let biggest = findBiggest([a, b, c]);\n  let biggestreversed = findBiggest([c, b, a]);\n  biggest > biggestreversed ? biggest : biggestreversed;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292420,"user_id":null,"body":"let expression_matter = (a: int, b: int, c: int) => {\n  Js.Math.maxMany_int([|a + b + c, a + b * c, (a + b) * c, a * (b + c), a * b * c|])\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292421,"user_id":168,"body":"let expression_matter = (a: int, b: int, c: int) =>\n  Js.Math.maxMany_int([| a + b + c, (a + b) * c, a * (b + c), a * b * c |])","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292422,"user_id":53,"body":"let expression_matter = (a : int, b : int, c : int) =>\n  0\n  |> max(a + b + c)\n  |> max((a + b) * c)\n  |> max(a * (b + c))\n  |> max(a * b * c);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292423,"user_id":null,"body":"let expression_matter = (a : int, b : int, c : int) =>\n  a + b + c\n  |> max((a + b) * c)\n  |> max(a * (b + c))\n  |> max(a * b * c);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292424,"user_id":null,"body":"let expression_matter = (a: int, b: int, c: int) => {\n  switch(a,b,c) {\n  | (1,1,1) => 3;\n  | (a,b,c) when ((a == 1 && b == 1)) => (a+b)*c;\n  | (a,b,c) when ((b == 1 && c == 1)) => a*(b+c);\n  | (1,b,1) => 2+b;\n  | (1,b,c) when (b > 1 && c > 1) => (1+b) * c;\n  | (a,1,c) when(a > 1 && c > 1 && a > c) => a * (1 + c); \n  | (a,1,c) when(a > 1 && c > 1 && a <= c) => (a + 1) * c;\n  | (a,b,1) when(a > 1 && b > 1) => a * (b+1);\n  | (a,b,c) => a*b*c;\n  };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292425,"user_id":null,"body":"let expression_matter = (a: int, b: int, c: int) => {\n  let exp1 = a + b + c;\n  let exp2 = a * b * c;\n  let exp3 = a * b + c;\n  let exp4 = (a + b) * c;\n  let exp5 = a * (b + c);\n  \n  let data = [|exp1, exp2, exp3, exp4, exp5|];\n  Array.fast_sort((a, b) => a < b ? 1 : -1, data);\n  \n  data[0];\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292426,"user_id":null,"body":"let addOrMultiply = (a: int, b: int) => a === 1 || b === 1 ? a + b : a * b;\n\nlet expression_matter = (a: int, b: int, c: int) => {\n  addOrMultiply(addOrMultiply(min(a,c),b), max(a,c));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292427,"user_id":1228,"body":"let maxOfArray = (arr) =>\n  ArrayLabels.fold_left(~f=max, ~init=min_int, arr);\n\nlet expression_matter = (a: int, b: int, c: int) => {\n  maxOfArray([|(a*(b+c)), (a*b*c), (a+b*c), ((a+b)*c), (a+b+c)|]);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292428,"user_id":527,"body":"let expression_matter = (a: int, b: int, c: int) =>\n  max(max(a + b + c, a * (b + c)), max((a + b) * c, a * b * c));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5ae7e3f068e6445bc8000046":[{"id":292429,"user_id":645,"body":"let nextHappyYear = (year: int) => {\n  let res = ref(year + 1);\n  let split = ref(Js.String.split(\"\", string_of_int(res^)));\n  while (int_of_string(Js.Array.joinWith(\"\", Js.Array.filteri((x, i) => Js.Array.indexOf(x, split^) == i, split^))) !== res^) {\n    res := res^ + 1;\n    split := Js.String.split(\"\", string_of_int(res^));\n  }\n  res^;\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5af15a37de4c7f223e00012d":[{"id":292430,"user_id":null,"body":"let menFromBoys = (arr: array(int)) => {\n  let (even, odd) = arr->Belt.Array.reduce(([||], [||]), (acc, value) => {\n    let (even, odd) = acc;\n    \n    if (value mod 2 === 0) {\n      (even->Belt.Array.concat([|value|]), odd)\n    }\n    else {\n      (even, odd->Belt.Array.concat([|value|]))\n    }\n  });\n  \n  Array.sort((a, b) => a - b, even);\n  Array.sort((a,b) => b - a, odd);\n  \n  Belt.Array.concat(even, odd)->Belt.Array.reduce([||], (acc, value) => {\n    if (acc->Belt.Array.some(v => value === v)) {\n      acc;\n    } else {\n      acc->Belt.Array.concat([|value|]);\n    }\n  });\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292431,"user_id":645,"body":"let menFromBoys = (arr: array(int)) => {\n  let even = Js.Array.filter(x => x mod 2 === 0, arr);\n  let odd = Js.Array.filter(x => x mod 2 !== 0, arr);\n  Array.sort(Pervasives.compare, even);\n  Array.sort((a, b) => a === b ? 0 : a < b ? 1 : -1, odd);\n  let newarr = Js.Array.concat(odd, even);\n  Js.Array.filteri((x, i) => Js.Array.indexOf(x, newarr) === i, newarr);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5b06c990908b7eea73000069":[{"id":292432,"user_id":53,"body":"let f = (x: float, y: float, eps: float): int => {\n  let h = log(eps) \/. log(hypot(x, y));\n  max(-1, int_of_float(h));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292433,"user_id":492,"body":"let f = (x: float, y: float, eps: float): int =>\n  if (hypot(x, y) >= 1.0) {\n    (-1);\n  } else {\n    int_of_float(log(eps) \/. log(hypot(x, y)));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292434,"user_id":168,"body":"let f = (x: float, y: float, eps: float): int => {\n  let a = hypot(x, y);\n  if (a >= 1.0) { -1 } else { truncate(log(eps) \/. log(a)) };\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5b0c0ec907756ffcff00006e":[{"id":292435,"user_id":168,"body":"let quadratic = (a: float, b: float, c: float): float => -.c \/. b;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292436,"user_id":492,"body":"let quadratic = (_a: float, b: float, c: float): float => -. c \/. b;\n\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5b1cd19fcd206af728000056":[{"id":292437,"user_id":168,"body":"let solve = (m: float): float => m \/. (0.5 +. m +. sqrt(m +. 0.25));","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292438,"user_id":492,"body":"let solve = (m: float): float => {\n  let s = sqrt(4.0 *. m +. 1.0);\n  (2.0 *. m +. 1.0 -. s) \/. (2.0 *. m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292439,"user_id":53,"body":"let solve = (m: float): float => {\n  (2.0 *. m +. 1.0 -. sqrt(4.0 *. m +. 1.0)) \/. (2.0 *. m);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292440,"user_id":null,"body":"let solve = (y: float): float => {\n  (1.0 +. 2.0 *. y -. sqrt(1.0 +. 4.0 *. y)) \/. (2. *. y)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292441,"user_id":527,"body":"let solve = (m: float): float => {\n  1. -. (sqrt (m +. 0.25) -. 0.5) \/. m\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5b40b666dfb4291ad9000049":[{"id":292442,"user_id":168,"body":"let solve = (a: int, b: int, c: int, alpha: int, beta: int, gamma: int): string => {\n  let to_rad = (a) => float(a) *. Js.Math._PI \/. 180.;\n  let to_deg = (r) => r *. 180. \/. Js.Math._PI;\n  let x = float(a) *. cos(to_rad(alpha)) -. float(b) *. sin(to_rad(beta)) -. float(c) *. cos(to_rad(gamma));\n  let y = float(a) *. sin(to_rad(alpha)) +. float(b) *. cos(to_rad(beta)) -. float(c) *. sin(to_rad(gamma));\n  let phi = to_deg(abs_float(atan2(y, x)));\n  let phi' = mod_float(phi, 1.) *. 60.;\n  [hypot(x, y) +. 0.5, phi, phi', mod_float(phi', 1.) *. 60.]\n    |> List.map((x) => string_of_int(truncate(x)))\n    |> String.concat(\", \");\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292443,"user_id":492,"body":"let aux = (a: int, b: int, c: int, alpha: int, beta: int, gamma: int): list(int) => {\n  let to_rad = a => float(a) *. (atan(1.0) \/. 45.0);\n  let to_deg = r => r *. (45.0 \/. atan(1.0));\n  let x =\n    float(a)\n    *. cos(to_rad(alpha))\n    -. float(b)\n    *. sin(to_rad(beta))\n    -. float(c)\n    *. cos(to_rad(gamma));\n  let y =\n    float(a)\n    *. sin(to_rad(alpha))\n    +. float(b)\n    *. cos(to_rad(beta))\n    -. float(c)\n    *. sin(to_rad(gamma));\n  let phi = to_deg(abs_float(atan2(y, x)));\n  let phi1 = mod_float(phi, 1.0) *. 60.0;\n  List.map(\n    truncate,\n    [hypot(x, y) +. 0.5, phi, phi1, mod_float(phi1, 1.0) *. 60.0],\n  );\n};\n\nlet solve = (a: int, b: int, c: int, alpha: int, beta: int, gamma: int): string => {\n  let convert2String = (l: list(int)) => String.concat(\", \", List.map(string_of_int, l));\n  convert2String(aux(a, b, c, alpha, beta, gamma));\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292444,"user_id":53,"body":"let solve = (a: int, b: int, c: int, alpha: int, beta: int, gamma: int): string => {\n  let pi = 3.14159265358979323846;\n  let u = float(alpha) *. pi \/. 180.0;\n  let v = float(beta) *. pi \/. 180.0;\n  let w = float(gamma) *. pi \/. 180.0;\n  let x = float(a) *. cos(u) -. float(b) *. sin(v) -. float(c) *. cos(w);\n  let y = float(a) *. sin(u) +. float(b) *. cos(v) -. float(c) *. sin(w);\n  let t = atan2(y, x) *. 180.0 \/. pi;\n  let r = hypot(y, x);\n  String.concat(\", \", List.map(string_of_int, [\n    truncate(r +. 0.5), \n    abs (truncate(t)), \n    abs (truncate(t *. 60.0) mod 60),\n    abs (truncate(t *. 3600.0) mod 60)\n  ]));\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292445,"user_id":1186,"body":"let pi = 3.14159265358979323846;\n\nlet sinD = (deg) => Pervasives.sin(float_of_int(deg) *. pi \/. 180. );\nlet cosD = (deg) => Pervasives.cos(float_of_int(deg) *. pi \/. 180. );\nlet atanD = (fl: float): float => Pervasives.atan(fl) *. 180. \/. pi;\n\nlet round = (fl) => {\n  let dec = fl -. Pervasives.floor(fl);\n  (dec < 0.5 ? Pervasives.floor(fl) : Pervasives.ceil(fl))\n  |> int_of_float;\n}\n\nlet solve = (a: int, b: int, c: int, alpha: int, beta: int, gamma: int): string => {\n  let xc = float_of_int(a) *. cosD(alpha) -. float_of_int(b) *. sinD(beta) -. float_of_int(c) *. cosD(gamma);\n  let yc = float_of_int(a) *. sinD(alpha) +. float_of_int(b) *. cosD(beta) -. float_of_int(c) *. sinD(gamma);\n  \n  let distance = Pervasives.sqrt((xc *. xc) +. (yc *. yc)) |> round;\n  let angle = 180. -. atanD(yc \/. xc)->Pervasives.abs_float;\n  let angleRounded = angle->Pervasives.floor;\n  let angleRest = angle -. angleRounded;\n  let minutes = angleRest *. 60.;\n  let minutesRounded = minutes->Pervasives.floor;\n  let seconds = (minutes -. minutesRounded)  *. 60.;\n  let secondsRounded = seconds->Pervasives.floor;\n  \n  string_of_int(distance) ++ \", \"\n  ++ angleRounded->int_of_float->string_of_int ++ \", \"\n  ++ minutesRounded->int_of_float->string_of_int ++ \", \"\n  ++ secondsRounded->int_of_float->string_of_int;\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5bb904724c47249b10000131":[{"id":292446,"user_id":null,"body":"let points = List.fold_left((total, match) => {\n  let match_points = match\n    |> Js.String.split(\":\")\n    |> (scores) => switch (scores) {\n      | [|x, y|] when x > y => 3\n      | [|x, y|] when x === y => 1\n      | _ => 0\n      };\n    \n    total + match_points\n}, 0)","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292447,"user_id":null,"body":"let get_pair = (str) => {\n  let first = str.[0];\n  let last  = str.[String.length(str) - 1];\n\n  \/\/ parse\n  let first = int_of_char(first);\n  let last  = int_of_char(last);\n\n  (first, last)\n}\n\nlet get_points_of_pair = (str) => {\n  let (a, b) = get_pair(str);\n\n  if (a > b) 3\n  else if (a < b) 0\n  else 1\n}\n\nlet points = (games) => {\n  let lst_of_points = List.map(get_points_of_pair, games);\n\n  List.fold_left((+), 0, lst_of_points)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292448,"user_id":null,"body":"let rec points = (games: list(string)): int =>\n  switch games {\n  | [] => 0\n  | [head, ...rest] =>\n    let x = head |> Js.String.charAt(0)\n    let y = head |> Js.String.charAt(2)\n    let score = if (x > y) {\n      3\n    } else if (x === y) {\n      1\n    } else {\n      0\n    }\n    score + points(rest)\n  }","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292449,"user_id":null,"body":"let count_points = game => {\n  switch ([game.[0], game.[2]]) {\n  | [a, b] => (int_of_char(a), int_of_char(b))\n  | _ => raise(Not_found)\n  };\n};\n\nlet evaluate_game = (a, b) => {\n  switch (a, b) {\n  | (a, b) when a > b => 3\n  | (a, b) when a < b => 0\n  | (a, b) when a === b => 1\n  | _ => raise(Not_found)\n  };\n};\n\nlet points = (games: list(string)) => {\n  let points_list =\n    List.map(\n      item => {\n        let (a, b) = count_points(item);\n        evaluate_game(a, b);\n      },\n      games,\n    );\n\n  List.fold_left((+), 0, points_list);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292450,"user_id":53,"body":"let f = (e: string): int => {\n  let x = Char.code(e.[0]);\n  let y = Char.code(e.[2]);\n  if (x > y) {\n    3;  \n  } else if (x < y) {\n    0;  \n  } else {\n    1;\n  }\n}\n\nlet points = (xs: list(string)): int => {\n  List.fold_left((a, b) => a + f(b), 0, xs);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292451,"user_id":null,"body":"let points = (games: list(string)): int => {\n  List.fold_left((total, item) => {\n    total + (item\n      |> Js.String.split(\":\")\n      |> Array.map(int_of_string)\n      |> fun\n        | [|x, y|] when x > y => 3\n        | [|x, y|] when x === y => 1\n        | _ => 0)\n  }, 0, games)\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292452,"user_id":null,"body":"let points = (games: list(string)): int => List.fold_left((acc, score) => {\n  score\n    |> Js.String.split(\":\")\n    |> Array.map(x => int_of_string(x))\n    |> (scores) => switch(scores) {\n      | [|x, y|] when x > y => acc + 3\n      | [|x, y|] when x == y => acc + 1\n      | _ => acc\n    };\n}, 0, games);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292453,"user_id":null,"body":"let points = (games: list(string)): int => List.fold_left((acc, score) => {\n  let scores = Array.map(x => int_of_string(x), Js.String.split(\":\", score));\n  if (scores[0] > scores[1]) {\n    acc + 3\n  } else if (scores[0] < scores[1]) {\n    acc\n  } else {\n    acc + 1\n  }\n}, 0, games);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292454,"user_id":null,"body":"let splitScoreString = (scoreString: string): array(string) => {\n  Js.String.split(\":\", scoreString)\n};\n\nexception NotTwoElements;\n\nlet arraytoPair_exc = (xs: array('anyType)): ('anyType, 'anyType) => {\n    switch(xs) {\n      | [|memberOne, memberTwo|] => (memberOne, memberTwo)\n      | _ => raise(NotTwoElements)\n    }\n};\n\nlet stringPairToIntPair_exc = (stringPair: (string, string)): (int, int) => {\n  let (a,b) = stringPair;\n  (int_of_string(a), int_of_string(b))\n};\n\nlet calculatePoints = ((us, them): (int, int)): int => {\n  if (us > them) {\n    3\n  } else if (us == them) {\n    1\n  } else {\n    0\n  }\n};\n\n\nlet points = (games: list(string)): int => {\n  List.map(splitScoreString, games)\n  |> List.map(arraytoPair_exc)\n  |> List.map(stringPairToIntPair_exc)\n  |> List.map(calculatePoints)\n  |> List.fold_left((x,y) => {x+y}, 0)\n};\n  ","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292455,"user_id":null,"body":"let points = (games: list(string)): int => {\n  let total_points = games\n    |> List.fold_left((acc, game) => {\n      let team1_points = game -> String.sub(0, 1) -> int_of_string;\n      let team2_points = game -> String.sub(2, 1) -> int_of_string;\n      \n      let tup = (team1_points, team2_points);\n      \n      let gain_loss = {\n        switch (tup) {\n          | (x, y) when x > y => 3\n          | (x, y) when x == y => 1\n          | (x, y) when x < y => 0\n        };\n      };\n      \n      gain_loss + acc;\n    }, 0);\n\n  total_points;\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5bd776533a7e2720c40000e5":[{"id":292456,"user_id":null,"body":"let pendulum = (a: array(int)) => {\n  Array.sort(Pervasives.compare, a);\n  let reversedA = Belt.Array.reverse(a);\n  let newArray = Array.mapi((i, b) => i, a);\n  let evens = Belt.Array.keep(newArray, i => i mod 2 === 0);\n  let odds = Belt.Array.keep(newArray, i => i mod 2 === 1);\n  \n  if (Array.length(reversedA) mod 2 === 0) {\n  \tlet reverseEvens = Belt.Array.reverse(evens)\n  \tlet pendulumIndex = Array.append(odds, reverseEvens);\n  \tArray.map((i) => Array.get(reversedA, i), pendulumIndex)\n  } else {\n  \tlet reverseOdds = Belt.Array.reverse(odds)\n  \tlet pendulumIndex = Array.append(evens, reverseOdds);\n  \tArray.map((i) => Array.get(reversedA, i), pendulumIndex)\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292457,"user_id":645,"body":"let pendulum = (values: array(int)) => {\n  Array.sort(Pervasives.compare, values);\n  let result = [||];\n  Js.Array.forEachi((x, i) => {\n    if (i mod 2 === 0) {\n      Js.Array.unshift(x, result) |> ignore;\n    } else {\n      Js.Array.push(x, result) |> ignore;\n    }\n  }, values);\n  result\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5c784110bfe2ef660cb90369":[{"id":292458,"user_id":null,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\nlet ranking = (people: list(inputMan)): list(outputMan) =>\n  people\n  |> List.sort((personA: inputMan, personB: inputMan) =>\n       String.compare(personA.name, personB.name)\n       + (personB.points - personA.points)\n     )\n  |> List.fold_left(\n       (state: (list(outputMan), (int, int)), person: inputMan) => {\n         let (personList, indexes) = state;\n\n         switch (personList) {\n         | [] => (\n             [{name: person.name, points: person.points, position: 1}],\n             (1, 1),\n           )\n         | [lastPerson, ..._] =>\n           switch (lastPerson.points === person.points, indexes) {\n           | (true, (position, index)) => (\n               [\n                 {name: person.name, points: person.points, position},\n                 ...personList,\n               ],\n               (position, index + 1),\n             )\n           | (false, (_, index)) => (\n               [\n                 {\n                   name: person.name,\n                   points: person.points,\n                   position: index + 1,\n                 },\n                 ...personList,\n               ],\n               (index + 1, index + 1),\n             )\n           }\n         };\n       },\n       ([], (1, 0)),\n     )\n  |> fst\n  |> List.rev;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292459,"user_id":null,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\nlet sortPeople =\n  List.sort((personA: inputMan, personB: inputMan) =>\n    switch (personB.points - personA.points) {\n    | 0 => String.compare(personA.name, personB.name)\n    | dif => dif\n    }\n  );\n\nlet inputToOutput = (input: inputMan, position: int): outputMan => {\n  name: input.name,\n  points: input.points,\n  position,\n};\n\nlet extractOutputList = (state: (list(outputMan), int, int)) => {\n  let (outputPeople, _, _) = state;\n  outputPeople;\n};\n\nlet addPosition = (people: list(inputMan)) =>\n  List.fold_left(\n    (state, person: inputMan) => {\n      let (outputPeople, lastPosition, index) = state;\n      switch (index) {\n      | 0 => (\n          [inputToOutput(person, lastPosition)],\n          lastPosition,\n          index + 1,\n        )\n      | _ =>\n        person.points === List.hd(outputPeople).points ?\n          (\n            [inputToOutput(person, lastPosition), ...outputPeople],\n            lastPosition,\n            index + 1,\n          ) :\n          (\n            [inputToOutput(person, index + 1), ...outputPeople],\n            index + 1,\n            index + 1,\n          )\n      };\n    },\n    ([], 1, 0),\n    people,\n  )\n  |> extractOutputList\n  |> List.rev;\n\nlet ranking = (people: list(inputMan)): list(outputMan) =>\n  people |> sortPeople |> addPosition;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292460,"user_id":null,"body":"type inputMan = {name: string, points: int}\ntype outputMan = {name: string, points: int, position: int}\nlet ext = (m: inputMan, pos: int): outputMan => {name: m.name, points: m.points, position: pos}\nlet diff = (m1: inputMan, m2: inputMan): int => m2.points-m1.points\nlet comp = (m1: inputMan, m2: inputMan): int => {\n  let rez = diff(m1, m2)\n  rez==0? String.compare(m1.name, m2.name): rez\n}\nlet rec ranks = (rez: list(outputMan), pos: int, people: list(inputMan), i: int): list(outputMan) => { \n  switch people {\n    | [] => []\n    | [a] => [ext(a, pos),...rez]\n    | [a,...rest] => ranks([ext(a, pos),...rez], diff(a, List.hd(rest))<0? i+1: pos, rest, i+1) \n  }\n}\nlet ranking = (people: list(inputMan)): list(outputMan) => ranks([], 1, List.sort(comp, people), 1) -> List.rev","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292461,"user_id":3346,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\nlet rec firstIndex = (people: list(inputMan), points: int, pos: int): int => {\n  switch (people) {\n  | [] => -1\n  | [a, ...rest] => a.points == points ? pos + 1 : firstIndex(rest, points, pos + 1)\n  }\n}\n\nlet ranking = (people: list(inputMan)): list(outputMan) => {\n  let sorted = people -> Belt.List.sort((a, b) => {\n    if (a.points == b.points) {\n      int_of_float(Js_string.localeCompare(b.name, a.name))\n    } else {\n      b.points - a.points\n    }\n  })\n  sorted -> Belt.List.map((p) => {\n    let res = {\n    \tname: p.name,\n\t    points: p.points,\n      position: firstIndex(sorted, p.points, 0)\n  \t}\n  \tres\n  })\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292462,"user_id":null,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\nlet ranking = (people: list(inputMan)): list(outputMan) => {\n  let sortedIn: list(inputMan) = List.sort(((x:inputMan) => (y:inputMan) => {\n    if (x.points === y.points) { \n      if(x.name > y.name) { 1; } else { -1; }\n    } \n    else if (x.points < y.points) { 1; }\n    else { -1; }\n  }), people);\n  \n  let sortedOut = List.fold_left(\n    (acc: list(outputMan)) => (x: inputMan) => {\n\t\tlet len = switch(acc) {\n          | [] => 1\n          | [a, ..._] => {\n            if (x.points === a.points) { \n              a.position \n            } else {\n              List.length(acc) + 1\n            }\n          }\n        };\n    \t[{points: x.points, name: x.name, position: len}, ...acc];\n    },\n    [], sortedIn\n  );\n  List.rev(sortedOut);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292463,"user_id":null,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\n\nlet sortPeople = (a: inputMan, b: inputMan): int => b.points - a.points + String.compare(a.name, b.name)\n\nlet ranking = (people: list(inputMan)): list(outputMan) => {\n  let pos = ref(0);\n  let previousScore = ref(0);\n  people \n   |> List.sort(sortPeople)\n   |> List.mapi((i: int, m: inputMan): outputMan => { \n        if (previousScore^ != m.points) {\n           pos := i + 1;\n        }\n        previousScore := m.points;\n        { name: m.name, points: m.points, position: pos^ };\n     });\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292464,"user_id":null,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\n\nlet sortPeople = (a: inputMan, b: inputMan): int => {\n  if (a.points == b.points) {\n    String.compare(a.name, b.name)\n  } else {\n    b.points - a.points\n  }\n}\n\nlet ranking = (people: list(inputMan)): list(outputMan) => {\n  let pos = ref(0);\n  let previousScore = ref(0);\n  people \n   |> List.sort(sortPeople)\n   |> List.mapi((i: int, m: inputMan): outputMan => { \n        if (previousScore^ != m.points) {\n           pos := i + 1;\n        }\n        previousScore := m.points;\n        { name: m.name, points: m.points, position: pos^ };\n     });\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292465,"user_id":168,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\nlet ranking = (people: list(inputMan)): list(outputMan) => {\n  let cmp = (x: inputMan, y: inputMan) => {\n    let d = Pervasives.compare(y.points, x.points);\n    if (d != 0) { d }\n    else { Pervasives.compare(x.name, y.name) };\n  };\n  let rec pos = (p, i, acc, xs: list(inputMan)) => {\n    switch (xs) {\n      | [] => List.rev(acc)\n      | [a] => List.rev([{ name: a.name, points: a.points, position: p }, ...acc])\n      | [a, b, ...rest] => {\n        let t = { name: a.name, points: a.points, position: p };\n        if (a.points == b.points) {\n          pos(p, i + 1, [t, ...acc], [b, ...rest])\n        }\n        else {\n          pos(i + 1, i + 1, [t, ...acc], [b, ...rest])\n        };\n      }\n    }\n  };\n  people |> List.stable_sort(cmp) |> pos(1, 1, []);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292466,"user_id":1186,"body":"type inputMan = {\n  name: string,\n  points: int,\n};\n\ntype outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\nlet calcPositions = (people: list(inputMan)): list(outputMan) => {\n  let prevOutputMan = ref(None);\n  List.mapi(\n    (i, man: inputMan) => {\n      let lp = i + 1;\n\n      let newPosition =\n        switch (prevOutputMan^) {\n        | None => lp\n        | Some({points: prevPoints, position: prevPosition}) =>\n          prevPoints === man.points ? prevPosition : lp\n        };\n\n      let outputMan = {\n        name: man.name,\n        points: man.points,\n        position: newPosition,\n      };\n\n      prevOutputMan := Some(outputMan);\n      outputMan;\n    },\n    people,\n  );\n}\n\nlet sortByPoints = (people: list(inputMan)): list(inputMan) => List.sort(\n  (man1: inputMan, man2: inputMan) =>\n    man1.points != man2.points\n      ? man2.points - man1.points\n      : String.compare(man1.name, man2.name),\n  people,\n);\n\nlet ranking = (people: list(inputMan)): list(outputMan) =>\n  people\n  |> sortByPoints\n  |> calcPositions;","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292467,"user_id":106,"body":"type outputMan = {\n  name: string,\n  points: int,\n  position: int,\n};\n\ntype inputMan = {\n  name: string,\n  points: int,\n};\n\nlet ranking = (people: list(inputMan)): list(outputMan) => {\n  let o = Array.of_list(List.mapi((i, v) => {name: v.name, points: v.points, position: i+1}, List.sort((u, v) => v.points != u.points ? v.points - u.points : String.compare(u.name, v.name), people)));\n  for(i in 1 to Array.length(o)-1) {\n    if(o[i].points == o[i-1].points) {\n      o[i] = {...o[i], position: o[i-1].position};\n    };\n  };\n  Array.to_list(o)\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5cb05eee03c3ff002153d4ef":[{"id":292468,"user_id":null,"body":"let getSectionId = (scrollY: int, heights: array(int)) => {\n  let rec solve = (y: int, index: int) =>\n    if (index >= (heights |> Js.Array.length)) {\n      -1\n    } else if (y < heights[index]) {\n      index\n    } else {\n      solve(y - heights[index], index + 1)\n    }\n\n  solve(scrollY, 0)\n}\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292469,"user_id":null,"body":"let getSectionId = (n: int, a: array(int)) => {\n  let i = ref(0); let sum = ref(0); let l = Array.length(a)\n  while (i^ < l && n >= sum^ + a[i^]) {\n    sum:=sum^ +a[i^]; i:=i^ +1\n  }\n  i^ < l ? i^ : -1\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292470,"user_id":645,"body":"let getSectionId = (n: int, a: array(int)) => {\n  let res = ref(-1)\n  let q = ref(n)\n  let i = ref(0)\n  let break = ref(false)\n  while (i^ < Js.Array.length(a) && ! break^) {\n    if (a[i^] > q^) {\n      res := i^\n      break := true\n    }\n    q := q^ - a[i^]\n    i := i^ + 1\n  }\n  res^\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5ce399e0047a45001c853c2b":[{"id":292471,"user_id":492,"body":"let rec parts_sums = fun\n  | [] => [0]\n  | [x, ...xs] => {\n      let r = parts_sums(xs);\n      let car = (fun\n        | [] => 0\n        | [y, ..._] => y\n      );\n      [car(r) + x, ...r];\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292472,"user_id":53,"body":"let parts_sums (arr: list(int)): list(int) = {\n  let n = List.length(arr);\n  let ls = Array.of_list(arr);\n  let m = ref(0);\n  let xs = Array.make(n + 1, 0);\n  xs[0] = m^;\n  for (i in 0 to n - 1) {\n    m := m^ + ls[n - 1 - i];\n    xs[n - i - 1] = m^;\n  }\n  xs[n] = 0;\n  Array.to_list(xs);\n};\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292473,"user_id":1186,"body":"let parts_sums = (ls) => {\n  let sumAll = List.fold_left((acc, item) => acc + item, 0, ls);\n  \n  let ret = List.fold_left((acc, item) => {\n    let sumLast = List.hd(acc);\n    let sumActual = sumLast - item;\n    [sumActual, ...acc];\n  }, [sumAll], ls);\n  \n  List.rev(ret);\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292474,"user_id":null,"body":"let parts_sums = (ls: list(int)): list(int) => {\n  let rec loop = (sums, last_sum, ls_left) =>\n    switch (ls_left) {\n    | [] => sums |> List.rev\n    | [head, ...tail] =>\n      loop([last_sum - head, ...sums], last_sum - head, tail)\n    };\n\n  let starting_sum = List.fold_left((+), 0, ls);\n  loop([starting_sum], starting_sum, ls);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292475,"user_id":null,"body":"let rec summarized_parts = (numbers: list(int), prev_sum: int) =>\n  switch (numbers) {\n  | [] => [0]\n  | [head, ...rest] => [prev_sum, ...summarized_parts(rest, prev_sum - head)];\n  };\n\nlet parts_sums = numbers =>\n  summarized_parts(numbers, List.fold_left((a, b) => a + b, 0, numbers));\n\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292476,"user_id":2242,"body":"type parts_sums = list(int) => list(int)\nlet parts_sums: parts_sums =\n  ints => {\n    Belt.List.reduceReverse(ints, [0], (acc, curr) => {\n      let [hd, ..._] = acc;\n      let value = curr + hd;\n      Belt.List.add(acc, value);\n    })\n  };\n","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5d376cdc9bcee7001fcb84c0":[{"id":292477,"user_id":null,"body":"let oddOnesOut = (nums: array(int)) => {\n  open Belt.HashMap.Int\n\n  let counts = nums |> Js.Array.reduce((memo, num) => {\n    switch (get(memo, num)) {\n    | Some(count) => set(memo, num, count + 1)\n    | None => set(memo, num, 0)\n    }\n                                       \n    memo\n  }, fromArray([||]))\n\n  nums |> Js.Array.filter(num =>\n    switch (get(counts, num)) {\n    | Some(count) => count mod 2 === 1\n    | None => false\n    }\n  )\n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292478,"user_id":168,"body":"let oddOnesOut = (nums: array(int)) => {\n  let xs = Array.to_list(nums);\n  let ys = List.filter(x => List.length(List.filter(y => x == y, xs)) mod 2 == 0, xs);\n  Array.of_list(ys);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292479,"user_id":null,"body":"let oddOnesOut = (nums: array(int)) => {\n  let l = Array.to_list(nums);\n  let even = (a: int) => (a mod 2) == 0;\n  let evenTimes = (n: int) => even(List.length(List.filter(x => n == x, l)))\n\n  Array.of_list(List.filter(evenTimes, l)); \n}","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292480,"user_id":645,"body":"let oddOnesOut = (nums: array(int)) => nums |> Js.Array.filter(x => (nums |> Js.Array.filter(n => n == x) |> Js.Array.length) mod 2 == 0);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}],"5d50e3914861a500121e1958":[{"id":292481,"user_id":168,"body":"let add_letters: array(string) => string = [%bs.raw {|\nfunction(letters) {\n  return String.fromCharCode((letters.reduce((a, x) => a + x.charCodeAt() - 96, 26) - 1) % 26 + 97);\n}\n|}];","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292482,"user_id":null,"body":"let add_letters = (letters: array(string)) => {\n  if (letters |> Js.Array.length < 1) {\n    \"z\"\n  } else {\n    let base = int_of_float(\"a\" |> Js.String.charCodeAt(0)) - 1\n    let sum =\n      letters |> Js.Array.reduce(\n        (sum, letter) => sum + int_of_float(letter |> Js.String.charCodeAt(0)) - base,\n        0,\n      )\n    let index = sum mod 26\n    if (index === 0) {\n      \"z\"\n    } else {\n      Js.String.fromCharCode(base + index)\n    }\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292483,"user_id":null,"body":"let add_letters = (letters: array(string)): string => {\n  let padding = 96;\n  let lettersCount = 26;\n\n  let c = Array.fold_left((s, v) => {\n    v\n    -> String.get(0)\n    -> Char.code\n    -> ((-)(padding))\n    -> ((+)(s));\n  }, 0, letters) mod lettersCount;\n\n  switch (c) {\n  |  0 => \"z\"\n  |  _ => c -> ((+)(padding)) -> Char.chr |> String.make(1)\n  }\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292484,"user_id":null,"body":"let add_letters = (letters: array(string)) => {\n  let alphabet = \" abcdefghijklmnopqrstuvwxyz\";\n  letters\n    |> Array.map(l => Js.String.indexOf(l, alphabet))\n  \t|> Array.fold_left((+), 0)\n  \t|> (sum) => String.get(alphabet, sum mod 26 == 0 ? 26 : sum mod 26)\n  \t|> String.make(1);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292485,"user_id":1186,"body":"let alpha = [|\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"|];\nlet alphaLength = Array.length(alpha);\n\nlet add_letters = (letters: array(string)) => {\n  let numbers = Array.map(\n    letter => Js.Array.indexOf(letter, alpha) + 1,\n    letters,\n  );\n \n  let sum = Belt.Array.reduce(numbers, 0, (+));\n\n  let posAlpha = sum mod alphaLength;\n  let posArray = posAlpha === 0 ? alphaLength - 1 : posAlpha - 1;\n \n  Array.get(alpha, posArray);\n};","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"},{"id":292486,"user_id":645,"body":"let add_letters = (letters: array(string)) => Js.String.fromCharCode((Js.Array.reduce((a, b) => a + int_of_float(Js.String.charCodeAt(0, b)) - 96, 0, letters) + 25) mod 26 + 97);","lang_id":46,"is_control":0,"status":null,"variations":0,"best_practice":0,"clever":0,"comments":0,"created_at":"2023-01-14 13:24:46","updated_at":"2023-01-14 13:24:46"}]}